{"sha": "8f9bbcf04925593c28aa31e3e8d05f40a6dbb7f0", "log": "Formatting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n         final TransformedBag<E> decorated = new TransformedBag<E>(bag, transformer);\n         if (transformer != null && bag != null && bag.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // Bag is of type E\n-            final\n-            E[] values = (E[]) bag.toArray();\n+            final E[] values = (E[]) bag.toArray();\n             bag.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n         final TransformedSortedBag<E>  decorated = new TransformedSortedBag<E>(bag, transformer);\n         if (transformer != null && bag != null && bag.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // bag is type E\n-            final\n-            E[] values = (E[]) bag.toArray();\n+            final E[] values = (E[]) bag.toArray();\n             bag.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n         final TransformedBuffer<E> decorated = new TransformedBuffer<E>(buffer, transformer); \n         if (buffer.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // buffer is type <E>\n-            final\n-            E[] values = (E[]) buffer.toArray();\n+            final E[] values = (E[]) buffer.toArray();\n             buffer.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n         // null collection & transformer are disallowed by the constructor call above \n         if (collection.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // collection is of type E\n-            final\n-            E[] values = (E[]) collection.toArray();\n+            final E[] values = (E[]) collection.toArray();\n             collection.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections/list/TransformedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TransformedList.java\n         final TransformedList<E> decorated = new TransformedList<E>(list, transformer);\n         if (transformer != null && list != null && list.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // list is of type E\n-            final\n-            E[] values = (E[]) list.toArray();\n+            final E[] values = (E[]) list.toArray();\n             list.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n         final TransformedSet<E> decorated = new TransformedSet<E>(set, transformer);\n         if (transformer != null && set != null && set.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // set is type E\n-            final\n-            E[] values = (E[]) set.toArray();\n+            final E[] values = (E[]) set.toArray();\n             set.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n         final TransformedSortedSet<E> decorated = new TransformedSortedSet<E>(set, transformer);\n         if (transformer != null && set != null && set.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // set is type E\n-            final\n-            E[] values = (E[]) set.toArray();\n+            final E[] values = (E[]) set.toArray();\n             set.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections/splitmap/TransformedMap.java\n+++ b/src/main/java/org/apache/commons/collections/splitmap/TransformedMap.java\n  * much of the usefulness of having parameterized types.\n  * <p>\n  * On the downside, this class is not drop-in compatible with {@link java.util.Map}\n- * but is intended to be worked with either directly or by {@link Put} and {@link org.apache.commons.collections.Get Get}\n- * generalizations.\n+ * but is intended to be worked with either directly or by {@link Put} and\n+ * {@link org.apache.commons.collections.Get Get} generalizations.\n  *\n  * @since 4.0\n  * @version $Id$", "timestamp": 1358771172, "metainfo": ""}