{"sha": "6d8659cad56170303f40ff5db2e5c857536a02eb", "log": "reverting commit 1311904  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/IndexedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/IndexedCollection.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.Collection;\n-import java.util.HashMap;\n-\n-import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n-\n-/**\n- * An IndexedCollection is a Map-like view onto a Collection. It accepts a\n- * keyTransformer to define how the keys are converted from the values.\n- * <p>\n- * Modifications made to this decorator modify the index as well as the\n- * decorated {@link Collection}. However, modifications to the underlying\n- * {@link Collection} will not updated the index and it will get out of sync.\n- * <p>\n- * If modification to the decorated {@link Collection} is unavoidable, then a\n- * call to {@link #reindex()} will update the index to the current contents of\n- * the {@link Collection}.\n- *\n- * @param <K> the type of object in the index.\n- * @param <C> the type of object in the collection.\n- * @author Stephen Kestle\n- */\n-// TODO support MultiMap/non-unique index behavior\n-// TODO add support for remove and clear\n-public class IndexedCollection<K, C> extends AbstractCollectionDecorator<C> {\n-    /**\n-     * .\n-     */\n-    private static final long serialVersionUID = -5512610452568370038L;\n-\n-    /**\n-     * Create an {@link IndexedCollection} for a unique index.\n-     *\n-     * @param <K> the index object type.\n-     * @param <C> the collection type.\n-     * @param coll the decorated {@link Collection}.\n-     * @param keyTransformer the {@link Transformer} for generating index keys.\n-     * @return the created {@link IndexedCollection}.\n-     */\n-    public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer) {\n-        return new IndexedCollection<K, C>(coll, keyTransformer, new HashMap<K, C>());\n-    }\n-\n-    /**\n-     * The {@link Transformer} for generating index keys.\n-     */\n-    private final Transformer<C, K> keyTransformer;\n-\n-    /**\n-     * The map of indexes to collected objects.\n-     */\n-    private final HashMap<K, C> index;\n-\n-    /**\n-     * Create a {@link IndexedCollection} for a unique index.\n-     *\n-     * @param coll the decorated {@link Collection}.\n-     * @param keyTransformer the {@link Transformer} for generating index keys.\n-     */\n-    public IndexedCollection(Collection<C> coll, Transformer<C, K> keyTransformer, HashMap<K, C> map) {\n-        super(coll);\n-        this.keyTransformer = keyTransformer;\n-        this.index = map;\n-        reindex();\n-    }\n-\n-    /**\n-     * Clears the index and re-indexes the entire decorated {@link Collection}.\n-     */\n-    public void reindex() {\n-        index.clear();\n-        for (C c : decorated()) {\n-            addIndex(c);\n-        }\n-    }\n-\n-    /**\n-     * Adds an object to the collection and index.\n-     */\n-    @Override\n-    // TODO: Add error handling for when super.add() fails\n-    public boolean add(C object) {\n-        addIndex(object);\n-        return super.add(object);\n-    }\n-\n-    /**\n-     * Adds an entire collection to the collection and index.\n-     */\n-    @Override\n-    // TODO: Add error handling for when super.addAll() fails\n-    public boolean addAll(Collection<? extends C> coll) {\n-        for (C c : coll) {\n-            addIndex(c);\n-        }\n-        return super.addAll(coll);\n-    }\n-\n-    /**\n-     * Provides checking for adding the index.\n-     *\n-     * @param object the object to index.\n-     */\n-    private void addIndex(C object) {\n-        final C existingObject = index.put(keyTransformer.transform(object), object);\n-        if (existingObject != null) {\n-            throw new IllegalArgumentException(\"Duplicate key in uniquely indexed collection.\");\n-        }\n-    }\n-\n-    /**\n-     * Get the element associated with the given key.\n-     * @param key to look up\n-     * @return element found\n-     */\n-    public C get(K key) {\n-        return index.get(key);\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+\n+import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n+\n+/**\n+ * An IndexedCollection is a Map-like view onto a Collection. It accepts a\n+ * keyTransformer to define how the keys are converted from the values.\n+ * <p>\n+ * Modifications made to this decorator modify the index as well as the\n+ * decorated {@link Collection}. However, modifications to the underlying\n+ * {@link Collection} will not updated the index and it will get out of sync.\n+ * <p>\n+ * If modification to the decorated {@link Collection} is unavoidable, then a\n+ * call to {@link #reindex()} will update the index to the current contents of\n+ * the {@link Collection}.\n+ *\n+ * @param <K> the type of object in the index.\n+ * @param <C> the type of object in the collection.\n+ * @author Stephen Kestle\n+ */\n+// TODO support MultiMap/non-unique index behavior\n+// TODO add support for remove and clear\n+public class IndexedCollection<K, C> extends AbstractCollectionDecorator<C> {\n+    /**\n+     * .\n+     */\n+    private static final long serialVersionUID = -5512610452568370038L;\n+\n+    /**\n+     * Create an {@link IndexedCollection} for a unique index.\n+     *\n+     * @param <K> the index object type.\n+     * @param <C> the collection type.\n+     * @param coll the decorated {@link Collection}.\n+     * @param keyTransformer the {@link Transformer} for generating index keys.\n+     * @return the created {@link IndexedCollection}.\n+     */\n+    public static <K, C> IndexedCollection<K, C> uniqueIndexedCollection(final Collection<C> coll, final Transformer<C, K> keyTransformer) {\n+        return new IndexedCollection<K, C>(coll, keyTransformer, new HashMap<K, C>());\n+    }\n+\n+    /**\n+     * The {@link Transformer} for generating index keys.\n+     */\n+    private final Transformer<C, K> keyTransformer;\n+\n+    /**\n+     * The map of indexes to collected objects.\n+     */\n+    private final HashMap<K, C> index;\n+\n+    /**\n+     * Create a {@link IndexedCollection} for a unique index.\n+     *\n+     * @param coll the decorated {@link Collection}.\n+     * @param keyTransformer the {@link Transformer} for generating index keys.\n+     */\n+    public IndexedCollection(Collection<C> coll, Transformer<C, K> keyTransformer, HashMap<K, C> map) {\n+        super(coll);\n+        this.keyTransformer = keyTransformer;\n+        this.index = map;\n+        reindex();\n+    }\n+\n+    /**\n+     * Clears the index and re-indexes the entire decorated {@link Collection}.\n+     */\n+    public void reindex() {\n+        index.clear();\n+        for (C c : decorated()) {\n+            addIndex(c);\n+        }\n+    }\n+\n+    /**\n+     * Adds an object to the collection and index.\n+     */\n+    @Override\n+    // TODO: Add error handling for when super.add() fails\n+    public boolean add(C object) {\n+        addIndex(object);\n+        return super.add(object);\n+    }\n+\n+    /**\n+     * Adds an entire collection to the collection and index.\n+     */\n+    @Override\n+    // TODO: Add error handling for when super.addAll() fails\n+    public boolean addAll(Collection<? extends C> coll) {\n+        for (C c : coll) {\n+            addIndex(c);\n+        }\n+        return super.addAll(coll);\n+    }\n+\n+    /**\n+     * Provides checking for adding the index.\n+     *\n+     * @param object the object to index.\n+     */\n+    private void addIndex(C object) {\n+        final C existingObject = index.put(keyTransformer.transform(object), object);\n+        if (existingObject != null) {\n+            throw new IllegalArgumentException(\"Duplicate key in uniquely indexed collection.\");\n+        }\n+    }\n+\n+    /**\n+     * Get the element associated with the given key.\n+     * @param key to look up\n+     * @return element found\n+     */\n+    public C get(K key) {\n+        return index.get(key);\n+    }\n+}\n--- a/src/main/java/org/apache/commons/collections/functors/CatchAndRethrowClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/CatchAndRethrowClosure.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.collections.functors;\n-\n-import org.apache.commons.collections.Closure;\n-import org.apache.commons.collections.FunctorException;\n-\n-/**\n- * {@link Closure} that catches any checked exception and re-throws it as a\n- * {@link FunctorException} runtime exception. Example usage:\n- * \n- * <pre>\n- * // Create a catch and re-throw closure via anonymous subclass\n- * CatchAndRethrowClosure&lt;String&gt; writer = new ThrowingClosure() {\n- *     private java.io.Writer out = // some writer\n- *     \n- *     protected void executeAndThrow(String input) throws IOException {\n- *         out.write(input); // throwing of IOException allowed\n- *     }\n- * };\n- * \n- * // use catch and re-throw closure\n- * java.util.List<String> strList = // some list\n- * try {\n- *     CollctionUtils.forAllDo(strList, writer);\n- * } catch (FunctorException ex) {\n- *     Throwable originalError = ex.getCause();\n- *     // handle error\n- * }\n- * </pre>\n- * \n- * @since Commons Collections 4.0\n- * @version $Revision$\n- */\n-public abstract class CatchAndRethrowClosure<E> implements Closure<E> {\n-\n-    /**\n-     * Execute this closure on the specified input object.\n-     * \n-     * @param input the input to execute on\n-     * @throws FunctorException (runtime) if the closure execution resulted in a\n-     *             checked exception.\n-     */\n-    public void execute(E input) {\n-        try {\n-            executeAndThrow(input);\n-        } catch (RuntimeException ex) {\n-            throw ex;\n-        } catch (Throwable t) {\n-            throw new FunctorException(t);\n-        }\n-    }\n-\n-    /**\n-     * Execute this closure on the specified input object.\n-     * \n-     * @param input the input to execute on\n-     * @throws Throwable if the closure execution resulted in a checked\n-     *             exception.\n-     */\n-    protected abstract void executeAndThrow(E input) throws Throwable;\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.Closure;\n+import org.apache.commons.collections.FunctorException;\n+\n+/**\n+ * {@link Closure} that catches any checked exception and re-throws it as a\n+ * {@link FunctorException} runtime exception. Example usage:\n+ * \n+ * <pre>\n+ * // Create a catch and re-throw closure via anonymous subclass\n+ * CatchAndRethrowClosure&lt;String&gt; writer = new ThrowingClosure() {\n+ *     private java.io.Writer out = // some writer\n+ *     \n+ *     protected void executeAndThrow(String input) throws IOException {\n+ *         out.write(input); // throwing of IOException allowed\n+ *     }\n+ * };\n+ * \n+ * // use catch and re-throw closure\n+ * java.util.List<String> strList = // some list\n+ * try {\n+ *     CollctionUtils.forAllDo(strList, writer);\n+ * } catch (FunctorException ex) {\n+ *     Throwable originalError = ex.getCause();\n+ *     // handle error\n+ * }\n+ * </pre>\n+ * \n+ * @since Commons Collections 4.0\n+ * @version $Revision$\n+ */\n+public abstract class CatchAndRethrowClosure<E> implements Closure<E> {\n+\n+    /**\n+     * Execute this closure on the specified input object.\n+     * \n+     * @param input the input to execute on\n+     * @throws FunctorException (runtime) if the closure execution resulted in a\n+     *             checked exception.\n+     */\n+    public void execute(E input) {\n+        try {\n+            executeAndThrow(input);\n+        } catch (RuntimeException ex) {\n+            throw ex;\n+        } catch (Throwable t) {\n+            throw new FunctorException(t);\n+        }\n+    }\n+\n+    /**\n+     * Execute this closure on the specified input object.\n+     * \n+     * @param input the input to execute on\n+     * @throws Throwable if the closure execution resulted in a checked\n+     *             exception.\n+     */\n+    protected abstract void executeAndThrow(E input) throws Throwable;\n+}\n--- a/src/main/java/org/apache/commons/collections/functors/ComparatorPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ComparatorPredicate.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.collections.functors;\n-\n-import java.io.Serializable;\n-import java.util.Comparator;\n-\n-import org.apache.commons.collections.Predicate;\n-\n-/**\n- * Predicate that compares the input object with the one stored in the predicate using a comparator.\n- * In addition, the comparator result can be evaluated in accordance to a supplied criterion value.\n- *\n- * In order to demonstrate the use of the predicate, the following variables are declared:\n- *\n- * <pre>\n- * Integer ONE = new Integer(1);\n- * Integer TWO = new Integer(2);\n- *\n- * Comparator comparator = new Comparator() {\n- *\n- *     public int compare(Object first, Object second) {\n- *         return ((Integer) second) - ((Integer) first);\n- *     }\n- *\n- * };\n- * </pre>\n- *\n- * Using the declared variables, the <code>ComparatorPredicate</code> can be used used in the\n- * following way:\n- *\n- * <pre>\n- * ComparatorPredicate.getInstance(ONE, comparator).evaluate(TWO);\n- * </pre>\n- *\n- * The input variable <code>TWO</code> in compared to the stored variable <code>ONE</code> using\n- * the supplied <code>comparator</code>. This is the default usage of the predicate and will return\n- * <code>true</code> if the underlying comparator returns <code>0</code>. In addition to the default\n- * usage of the predicate, it is possible to evaluate the comparator's result in several ways. The\n- * following {@link Criterion} enumeration values are provided by the predicate:\n- * </p>\n- *\n- * <ul>\n- *     <li>EQUAL</li>\n- *     <li>GREATER</li>\n- *     <li>GREATER_OR_EQUAL</li>\n- *     <li>LESS</li>\n- *     <li>LESS_OR_EQUAL</li>\n- * </ul>\n- *\n- * The following examples demonstrates how these constants can be used in order to manipulate the\n- * evaluation of a comparator result.\n- *\n- * <pre>\n- * ComparatorPredicate.getInstance(ONE, comparator, <b>ComparatorPredicate.Criterion.GREATER</b>).evaluate(TWO);\n- * </pre>\n- *\n- * The input variable TWO is compared to the stored variable ONE using the supplied <code>comparator</code>\n- * using the <code>GREATER</code> evaluation criterion constant. This instructs the predicate to\n- * return <code>true</code> if the comparator returns a value greater than <code>0</code>.\n- *\n- * @since Commons Collections 4.0\n- * @version $Revision$\n- *\n- * @author Rune Peter Bjrnstad.\n- */\n-public class ComparatorPredicate<T> implements Predicate<T>, Serializable {\n-\n-    private static final long serialVersionUID = -1863209236504077399L;\n-\n-    public enum Criterion {\n-        EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL,\n-    }\n-\n-    // Instance variables:\n-\n-    /** The internal object to compare with */\n-    private final T object;\n-\n-    /** The comparator to use for comparison */\n-    private final Comparator<T> comparator;\n-\n-    /** The comparison evaluation criterion to use */\n-    private final Criterion criterion;\n-\n-    /**\n-     * Factory to create the comparator predicate\n-     *\n-     * @param object  the object to compare to\n-     * @param comparator  the comparator to use for comparison\n-     * @return the predicate\n-     * @throws IllegalArgumentException if comparator is null\n-     */\n-    public static <T> Predicate<T> comparatorPredicate(T object, Comparator<T> comparator) {\n-        return comparatorPredicate(object, comparator, Criterion.EQUAL);\n-    }\n-\n-    /**\n-     * Factory to create the comparator predicate\n-     *\n-     * @param object  the object to compare to\n-     * @param comparator  the comparator to use for comparison\n-     * @param criterion  the criterion to use to evaluate comparison\n-     * @return the predicate\n-     * @throws IllegalArgumentException if comparator is null of criterion is invalid\n-     */\n-    public static <T> Predicate<T> comparatorPredicate(T object, Comparator<T> comparator, Criterion criterion) {\n-        if (comparator == null) {\n-            throw new IllegalArgumentException(\"Comparator must not be null.\");\n-        }\n-        if (criterion == null) {\n-            throw new IllegalArgumentException(\"Criterion must not be null.\");\n-        }\n-        return new ComparatorPredicate<T>(object, comparator, criterion);\n-    }\n-\n-    /**\n-     * Constructor that performs no validation.\n-     * Use <code>getInstance</code> if you want.\n-     *\n-     * @param object  the object to compare to\n-     * @param comparator  the comparator to use for comparison\n-     * @param criterion  the criterion to use to evaluate comparison\n-     */\n-    public ComparatorPredicate(T object, Comparator<T> comparator, Criterion criterion) {\n-        super();\n-        this.object = object;\n-        this.comparator = comparator;\n-        this.criterion = criterion;\n-    }\n-\n-    /**\n-     * Evaluates the predicate. The predicate evaluates to <code>true</code> in the following cases:\n-     *\n-     * <ul>\n-     *     <li><code>comparator.compare(object, input) == 0 && criterion == EQUAL</code></li>\n-     *     <li><code>comparator.compare(object, input) < 0 && criterion == LESS</code></li>\n-     *     <li><code>comparator.compare(object, input) > 0 && criterion == GREATER</code></li>\n-     *     <li><code>comparator.compare(object, input) >= 0 && criterion == GREATER_OR_EQUAL</code></li>\n-     *     <li><code>comparator.compare(object, input) <= 0 && criterion == LESS_OR_EQUAL</code></li>\n-     * </ul>\n-     *\n-     * @see org.apache.commons.collections.Predicate#evaluate(java.lang.Object)\n-     * @see java.util.Comparator#compare(java.lang.Object first, java.lang.Object second)\n-     *\n-     * @throws IllegalStateException if the criterion is invalid (really not possible)\n-     */\n-    public boolean evaluate(T target) {\n-\n-        boolean result = false;\n-        int comparison = comparator.compare(object, target);\n-        switch (criterion) {\n-        case EQUAL:\n-            result = (comparison == 0);\n-            break;\n-        case GREATER:\n-            result = (comparison > 0);\n-            break;\n-        case LESS:\n-            result = (comparison < 0);\n-            break;\n-        case GREATER_OR_EQUAL:\n-            result = (comparison >= 0);\n-            break;\n-        case LESS_OR_EQUAL:\n-            result = (comparison <= 0);\n-            break;\n-        default:\n-            throw new IllegalStateException(\"The current criterion '\" + criterion + \"' is invalid.\");\n-        }\n-\n-        return result;\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Predicate that compares the input object with the one stored in the predicate using a comparator.\n+ * In addition, the comparator result can be evaluated in accordance to a supplied criterion value.\n+ *\n+ * In order to demonstrate the use of the predicate, the following variables are declared:\n+ *\n+ * <pre>\n+ * Integer ONE = new Integer(1);\n+ * Integer TWO = new Integer(2);\n+ *\n+ * Comparator comparator = new Comparator() {\n+ *\n+ *     public int compare(Object first, Object second) {\n+ *         return ((Integer) second) - ((Integer) first);\n+ *     }\n+ *\n+ * };\n+ * </pre>\n+ *\n+ * Using the declared variables, the <code>ComparatorPredicate</code> can be used used in the\n+ * following way:\n+ *\n+ * <pre>\n+ * ComparatorPredicate.getInstance(ONE, comparator).evaluate(TWO);\n+ * </pre>\n+ *\n+ * The input variable <code>TWO</code> in compared to the stored variable <code>ONE</code> using\n+ * the supplied <code>comparator</code>. This is the default usage of the predicate and will return\n+ * <code>true</code> if the underlying comparator returns <code>0</code>. In addition to the default\n+ * usage of the predicate, it is possible to evaluate the comparator's result in several ways. The\n+ * following {@link Criterion} enumeration values are provided by the predicate:\n+ * </p>\n+ *\n+ * <ul>\n+ *     <li>EQUAL</li>\n+ *     <li>GREATER</li>\n+ *     <li>GREATER_OR_EQUAL</li>\n+ *     <li>LESS</li>\n+ *     <li>LESS_OR_EQUAL</li>\n+ * </ul>\n+ *\n+ * The following examples demonstrates how these constants can be used in order to manipulate the\n+ * evaluation of a comparator result.\n+ *\n+ * <pre>\n+ * ComparatorPredicate.getInstance(ONE, comparator, <b>ComparatorPredicate.Criterion.GREATER</b>).evaluate(TWO);\n+ * </pre>\n+ *\n+ * The input variable TWO is compared to the stored variable ONE using the supplied <code>comparator</code>\n+ * using the <code>GREATER</code> evaluation criterion constant. This instructs the predicate to\n+ * return <code>true</code> if the comparator returns a value greater than <code>0</code>.\n+ *\n+ * @since Commons Collections 4.0\n+ * @version $Revision$\n+ *\n+ * @author Rune Peter Bjrnstad.\n+ */\n+public class ComparatorPredicate<T> implements Predicate<T>, Serializable {\n+\n+    private static final long serialVersionUID = -1863209236504077399L;\n+\n+    public enum Criterion {\n+        EQUAL, GREATER, LESS, GREATER_OR_EQUAL, LESS_OR_EQUAL,\n+    }\n+\n+    // Instance variables:\n+\n+    /** The internal object to compare with */\n+    private final T object;\n+\n+    /** The comparator to use for comparison */\n+    private final Comparator<T> comparator;\n+\n+    /** The comparison evaluation criterion to use */\n+    private final Criterion criterion;\n+\n+    /**\n+     * Factory to create the comparator predicate\n+     *\n+     * @param object  the object to compare to\n+     * @param comparator  the comparator to use for comparison\n+     * @return the predicate\n+     * @throws IllegalArgumentException if comparator is null\n+     */\n+    public static <T> Predicate<T> comparatorPredicate(T object, Comparator<T> comparator) {\n+        return comparatorPredicate(object, comparator, Criterion.EQUAL);\n+    }\n+\n+    /**\n+     * Factory to create the comparator predicate\n+     *\n+     * @param object  the object to compare to\n+     * @param comparator  the comparator to use for comparison\n+     * @param criterion  the criterion to use to evaluate comparison\n+     * @return the predicate\n+     * @throws IllegalArgumentException if comparator is null of criterion is invalid\n+     */\n+    public static <T> Predicate<T> comparatorPredicate(T object, Comparator<T> comparator, Criterion criterion) {\n+        if (comparator == null) {\n+            throw new IllegalArgumentException(\"Comparator must not be null.\");\n+        }\n+        if (criterion == null) {\n+            throw new IllegalArgumentException(\"Criterion must not be null.\");\n+        }\n+        return new ComparatorPredicate<T>(object, comparator, criterion);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want.\n+     *\n+     * @param object  the object to compare to\n+     * @param comparator  the comparator to use for comparison\n+     * @param criterion  the criterion to use to evaluate comparison\n+     */\n+    public ComparatorPredicate(T object, Comparator<T> comparator, Criterion criterion) {\n+        super();\n+        this.object = object;\n+        this.comparator = comparator;\n+        this.criterion = criterion;\n+    }\n+\n+    /**\n+     * Evaluates the predicate. The predicate evaluates to <code>true</code> in the following cases:\n+     *\n+     * <ul>\n+     *     <li><code>comparator.compare(object, input) == 0 && criterion == EQUAL</code></li>\n+     *     <li><code>comparator.compare(object, input) < 0 && criterion == LESS</code></li>\n+     *     <li><code>comparator.compare(object, input) > 0 && criterion == GREATER</code></li>\n+     *     <li><code>comparator.compare(object, input) >= 0 && criterion == GREATER_OR_EQUAL</code></li>\n+     *     <li><code>comparator.compare(object, input) <= 0 && criterion == LESS_OR_EQUAL</code></li>\n+     * </ul>\n+     *\n+     * @see org.apache.commons.collections.Predicate#evaluate(java.lang.Object)\n+     * @see java.util.Comparator#compare(java.lang.Object first, java.lang.Object second)\n+     *\n+     * @throws IllegalStateException if the criterion is invalid (really not possible)\n+     */\n+    public boolean evaluate(T target) {\n+\n+        boolean result = false;\n+        int comparison = comparator.compare(object, target);\n+        switch (criterion) {\n+        case EQUAL:\n+            result = (comparison == 0);\n+            break;\n+        case GREATER:\n+            result = (comparison > 0);\n+            break;\n+        case LESS:\n+            result = (comparison < 0);\n+            break;\n+        case GREATER_OR_EQUAL:\n+            result = (comparison >= 0);\n+            break;\n+        case LESS_OR_EQUAL:\n+            result = (comparison <= 0);\n+            break;\n+        default:\n+            throw new IllegalStateException(\"The current criterion '\" + criterion + \"' is invalid.\");\n+        }\n+\n+        return result;\n+    }\n+}\n--- a/src/test/java/org/apache/commons/collections/AbstractDecoratedCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections/AbstractDecoratedCollectionTest.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n-import org.junit.Before;\n-\n-public abstract class AbstractDecoratedCollectionTest<C> {\n-    /**\n-     * The {@link Collection} being decorated.\n-     */\n-    protected Collection<C> original;\n-    /**\n-     * The Collection under test that decorates {@link #original}.\n-     */\n-    protected Collection<C> decorated;\n-    \n-    @Before\n-    public void setUpDecoratedCollection() throws Exception {\n-        original = new ArrayList<C>();\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import org.junit.Before;\n+\n+public abstract class AbstractDecoratedCollectionTest<C> {\n+    /**\n+     * The {@link Collection} being decorated.\n+     */\n+    protected Collection<C> original;\n+    /**\n+     * The Collection under test that decorates {@link #original}.\n+     */\n+    protected Collection<C> decorated;\n+    \n+    @Before\n+    public void setUpDecoratedCollection() throws Exception {\n+        original = new ArrayList<C>();\n+    }\n+}\n--- a/src/test/java/org/apache/commons/collections/MockTestCase.java\n+++ b/src/test/java/org/apache/commons/collections/MockTestCase.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.ListIterator;\n-\n-import org.easymock.EasyMock;\n-import org.easymock.IExpectationSetters;\n-\n-/**\n- * Provides utilities for making mock-based tests.  Most notable is the generic \"type-safe\"\n- * {@link #createMock(Class)} method, and {@link #replay()} and {@link #verify()} methods\n- * that call the respective methods on all created mock objects.\n- * \n- * @author Stephen Kestle\n- */\n-public abstract class MockTestCase {\n-    private List<Object> mockObjects = new ArrayList<Object>();\n-\n-    @SuppressWarnings(\"unchecked\")\n-    protected <T> T createMock(Class<?> name) {\n-        T mock = (T) EasyMock.createMock(name);\n-        return registerMock(mock);\n-    }\n-\n-    private <T> T registerMock(T mock) {\n-        mockObjects.add(mock);\n-        return mock;\n-    }\n-\n-    protected <T> IExpectationSetters<T> expect(T t) {\n-        return EasyMock.expect(t);\n-    }\n-\n-    protected final void replay() {\n-        for (Object o : mockObjects) {\n-            EasyMock.replay(o);\n-        }\n-    }\n-\n-    protected final void verify() {\n-        for (ListIterator<Object> i = mockObjects.listIterator(); i.hasNext();) {\n-            try {\n-                EasyMock.verify(i.next());\n-            } catch (AssertionError e) {\n-                throw new AssertionError((i.previousIndex() + 1) + \"\"\n-                        + e.getMessage());\n-            }\n-        }\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.easymock.EasyMock;\n+import org.easymock.IExpectationSetters;\n+\n+/**\n+ * Provides utilities for making mock-based tests.  Most notable is the generic \"type-safe\"\n+ * {@link #createMock(Class)} method, and {@link #replay()} and {@link #verify()} methods\n+ * that call the respective methods on all created mock objects.\n+ * \n+ * @author Stephen Kestle\n+ */\n+public abstract class MockTestCase {\n+    private List<Object> mockObjects = new ArrayList<Object>();\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T> T createMock(Class<?> name) {\n+        T mock = (T) EasyMock.createMock(name);\n+        return registerMock(mock);\n+    }\n+\n+    private <T> T registerMock(T mock) {\n+        mockObjects.add(mock);\n+        return mock;\n+    }\n+\n+    protected <T> IExpectationSetters<T> expect(T t) {\n+        return EasyMock.expect(t);\n+    }\n+\n+    protected final void replay() {\n+        for (Object o : mockObjects) {\n+            EasyMock.replay(o);\n+        }\n+    }\n+\n+    protected final void verify() {\n+        for (ListIterator<Object> i = mockObjects.listIterator(); i.hasNext();) {\n+            try {\n+                EasyMock.verify(i.next());\n+            } catch (AssertionError e) {\n+                throw new AssertionError((i.previousIndex() + 1) + \"\"\n+                        + e.getMessage());\n+            }\n+        }\n+    }\n+}\n--- a/src/test/java/org/apache/commons/collections/TestIndexedCollection.java\n+++ b/src/test/java/org/apache/commons/collections/TestIndexedCollection.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.collections;\n-\n-import static java.util.Arrays.asList;\n-import static junit.framework.Assert.assertEquals;\n-import static junit.framework.Assert.assertNull;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-@SuppressWarnings(\"boxing\")\n-public class TestIndexedCollection extends AbstractDecoratedCollectionTest<String> {\n-    private IndexedCollection<Integer, String> indexed;\n-\n-    @Before\n-    public void setUp() throws Exception {\n-        indexed = IndexedCollection.uniqueIndexedCollection(original, new Transformer<String, Integer>() {\n-            public Integer transform(String input) {\n-                return Integer.parseInt(input);\n-            }\n-        });\n-        decorated = indexed;\n-    }\n-    \n-    @Test\n-    public void addedObjectsCanBeRetrievedByKey() throws Exception {\n-        decorated.add(\"12\");\n-        decorated.add(\"16\");\n-        decorated.add(\"1\");\n-        decorated.addAll(asList(\"2\",\"3\",\"4\"));\n-        assertEquals(\"12\", indexed.get(12));\n-        assertEquals(\"16\", indexed.get(16));\n-        assertEquals(\"1\", indexed.get(1));\n-        assertEquals(\"2\", indexed.get(2));\n-        assertEquals(\"3\", indexed.get(3));\n-        assertEquals(\"4\", indexed.get(4));\n-    }\n-    \n-    @Test(expected=IllegalArgumentException.class)\n-    public void ensureDuplicateObjectsCauseException() throws Exception {\n-        decorated.add(\"1\");\n-        decorated.add(\"1\");\n-    }\n-    \n-    @Test\n-    public void decoratedCollectionIsIndexedOnCreation() throws Exception {\n-        original.add(\"1\");\n-        original.add(\"2\");\n-        original.add(\"3\");\n-        \n-        indexed = IndexedCollection.uniqueIndexedCollection(original, new Transformer<String, Integer>() {\n-            public Integer transform(String input) {\n-                return Integer.parseInt(input);\n-            }\n-        });\n-        assertEquals(\"1\", indexed.get(1));\n-        assertEquals(\"2\", indexed.get(2));\n-        assertEquals(\"3\", indexed.get(3));\n-    }\n-    \n-    @Test\n-    public void reindexUpdatesIndexWhenTheDecoratedCollectionIsModifiedSeparately() throws Exception {\n-        original.add(\"1\");\n-        original.add(\"2\");\n-        original.add(\"3\");\n-        \n-        assertNull(indexed.get(1));\n-        assertNull(indexed.get(2));\n-        assertNull(indexed.get(3));\n-        indexed.reindex();\n-        assertEquals(\"1\", indexed.get(1));\n-        assertEquals(\"2\", indexed.get(2));\n-        assertEquals(\"3\", indexed.get(3));\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections;\n+\n+import static java.util.Arrays.asList;\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNull;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+@SuppressWarnings(\"boxing\")\n+public class TestIndexedCollection extends AbstractDecoratedCollectionTest<String> {\n+    private IndexedCollection<Integer, String> indexed;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        indexed = IndexedCollection.uniqueIndexedCollection(original, new Transformer<String, Integer>() {\n+            public Integer transform(String input) {\n+                return Integer.parseInt(input);\n+            }\n+        });\n+        decorated = indexed;\n+    }\n+    \n+    @Test\n+    public void addedObjectsCanBeRetrievedByKey() throws Exception {\n+        decorated.add(\"12\");\n+        decorated.add(\"16\");\n+        decorated.add(\"1\");\n+        decorated.addAll(asList(\"2\",\"3\",\"4\"));\n+        assertEquals(\"12\", indexed.get(12));\n+        assertEquals(\"16\", indexed.get(16));\n+        assertEquals(\"1\", indexed.get(1));\n+        assertEquals(\"2\", indexed.get(2));\n+        assertEquals(\"3\", indexed.get(3));\n+        assertEquals(\"4\", indexed.get(4));\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void ensureDuplicateObjectsCauseException() throws Exception {\n+        decorated.add(\"1\");\n+        decorated.add(\"1\");\n+    }\n+    \n+    @Test\n+    public void decoratedCollectionIsIndexedOnCreation() throws Exception {\n+        original.add(\"1\");\n+        original.add(\"2\");\n+        original.add(\"3\");\n+        \n+        indexed = IndexedCollection.uniqueIndexedCollection(original, new Transformer<String, Integer>() {\n+            public Integer transform(String input) {\n+                return Integer.parseInt(input);\n+            }\n+        });\n+        assertEquals(\"1\", indexed.get(1));\n+        assertEquals(\"2\", indexed.get(2));\n+        assertEquals(\"3\", indexed.get(3));\n+    }\n+    \n+    @Test\n+    public void reindexUpdatesIndexWhenTheDecoratedCollectionIsModifiedSeparately() throws Exception {\n+        original.add(\"1\");\n+        original.add(\"2\");\n+        original.add(\"3\");\n+        \n+        assertNull(indexed.get(1));\n+        assertNull(indexed.get(2));\n+        assertNull(indexed.get(3));\n+        indexed.reindex();\n+        assertEquals(\"1\", indexed.get(1));\n+        assertEquals(\"2\", indexed.get(2));\n+        assertEquals(\"3\", indexed.get(3));\n+    }\n+}\n--- a/src/test/java/org/apache/commons/collections/functors/BasicClosureTestBase.java\n+++ b/src/test/java/org/apache/commons/collections/functors/BasicClosureTestBase.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.collections.functors;\n-\n-import org.apache.commons.collections.Closure;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-public abstract class BasicClosureTestBase {\n-\n-    @Test\n-    public void closureSanityTests() throws Exception {\n-        Closure<?> closure = generateClosure();\n-        Assert.assertNotNull(closure);\n-    }\n-\n-    /**\n-     * @return a closure for general sanity tests.\n-     */\n-    protected abstract <T> Closure<T> generateClosure();\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.Closure;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public abstract class BasicClosureTestBase {\n+\n+    @Test\n+    public void closureSanityTests() throws Exception {\n+        Closure<?> closure = generateClosure();\n+        Assert.assertNotNull(closure);\n+    }\n+\n+    /**\n+     * @return a closure for general sanity tests.\n+     */\n+    protected abstract <T> Closure<T> generateClosure();\n+}\n--- a/src/test/java/org/apache/commons/collections/functors/TestCatchAndRethrowClosure.java\n+++ b/src/test/java/org/apache/commons/collections/functors/TestCatchAndRethrowClosure.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.collections.functors;\n-\n-import java.io.IOException;\n-\n-import org.apache.commons.collections.Closure;\n-import org.apache.commons.collections.FunctorException;\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-public class TestCatchAndRethrowClosure extends BasicClosureTestBase {\n-\n-    private static <T> Closure<T> generateIOExceptionClosure() {\n-        return new CatchAndRethrowClosure<T>() {\n-\n-            @Override\n-            protected void executeAndThrow(T input) throws IOException  {\n-                throw new IOException();\n-            }\n-        };\n-    }\n-\n-    private static <T> Closure<T> generateNullPointerExceptionClosure() {\n-        return new CatchAndRethrowClosure<T>() {\n-\n-            @Override\n-            protected void executeAndThrow(T input) {\n-                throw new NullPointerException();\n-            }\n-        };\n-    }\n-\n-    private static <T> Closure<T> generateNoExceptionClosure() {\n-        return new CatchAndRethrowClosure<T>() {\n-\n-            @Override\n-            protected void executeAndThrow(T input) {\n-            }\n-        };\n-    }\n-\n-    @Override\n-    protected <T> Closure<T> generateClosure() {\n-        return generateNoExceptionClosure();\n-    }\n-    \n-    @Test\n-    public void testThrowingClosure() {\n-        Closure<Integer> closure = generateNoExceptionClosure();\n-        try {\n-            closure.execute(Integer.valueOf(0));\n-        } catch (FunctorException ex) {\n-            Assert.fail();\n-        } catch (RuntimeException ex) {\n-            Assert.fail();\n-        }\n-        \n-        closure = generateIOExceptionClosure();\n-        try {\n-            closure.execute(Integer.valueOf(0));\n-            Assert.fail();\n-        } catch (FunctorException ex) {\n-            Assert.assertTrue(ex.getCause() instanceof IOException);\n-        } catch (RuntimeException ex) {\n-            Assert.fail();\n-        }\n-\n-        closure = generateNullPointerExceptionClosure();\n-        try {\n-            closure.execute(Integer.valueOf(0));\n-            Assert.fail();\n-        } catch (FunctorException ex) {\n-            Assert.fail();\n-        } catch (RuntimeException ex) {\n-            Assert.assertTrue(ex instanceof NullPointerException);\n-        }\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.IOException;\n+\n+import org.apache.commons.collections.Closure;\n+import org.apache.commons.collections.FunctorException;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestCatchAndRethrowClosure extends BasicClosureTestBase {\n+\n+    private static <T> Closure<T> generateIOExceptionClosure() {\n+        return new CatchAndRethrowClosure<T>() {\n+\n+            @Override\n+            protected void executeAndThrow(T input) throws IOException  {\n+                throw new IOException();\n+            }\n+        };\n+    }\n+\n+    private static <T> Closure<T> generateNullPointerExceptionClosure() {\n+        return new CatchAndRethrowClosure<T>() {\n+\n+            @Override\n+            protected void executeAndThrow(T input) {\n+                throw new NullPointerException();\n+            }\n+        };\n+    }\n+\n+    private static <T> Closure<T> generateNoExceptionClosure() {\n+        return new CatchAndRethrowClosure<T>() {\n+\n+            @Override\n+            protected void executeAndThrow(T input) {\n+            }\n+        };\n+    }\n+\n+    @Override\n+    protected <T> Closure<T> generateClosure() {\n+        return generateNoExceptionClosure();\n+    }\n+    \n+    @Test\n+    public void testThrowingClosure() {\n+        Closure<Integer> closure = generateNoExceptionClosure();\n+        try {\n+            closure.execute(Integer.valueOf(0));\n+        } catch (FunctorException ex) {\n+            Assert.fail();\n+        } catch (RuntimeException ex) {\n+            Assert.fail();\n+        }\n+        \n+        closure = generateIOExceptionClosure();\n+        try {\n+            closure.execute(Integer.valueOf(0));\n+            Assert.fail();\n+        } catch (FunctorException ex) {\n+            Assert.assertTrue(ex.getCause() instanceof IOException);\n+        } catch (RuntimeException ex) {\n+            Assert.fail();\n+        }\n+\n+        closure = generateNullPointerExceptionClosure();\n+        try {\n+            closure.execute(Integer.valueOf(0));\n+            Assert.fail();\n+        } catch (FunctorException ex) {\n+            Assert.fail();\n+        } catch (RuntimeException ex) {\n+            Assert.assertTrue(ex instanceof NullPointerException);\n+        }\n+    }\n+}\n--- a/src/test/java/org/apache/commons/collections/functors/TestComparatorPredicate.java\n+++ b/src/test/java/org/apache/commons/collections/functors/TestComparatorPredicate.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.collections.functors;\n-\n-import static org.apache.commons.collections.functors.ComparatorPredicate.*;\n-import java.util.Comparator;\n-\n-import org.apache.commons.collections.Predicate;\n-import org.junit.Test;\n-\n-\n-public class TestComparatorPredicate extends BasicPredicateTestBase {\n-    private class TestComparator<T extends Comparable<T>> implements Comparator<T> {\n-        public int compare(T first, T second) {\n-            return first.compareTo(second);\n-        }\n-    }\n-\n-    @Test\n-    public void compareEquals() {\n-        Integer value = Integer.valueOf(10);\n-        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>());\n-        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n-        assertTrue(p, Integer.valueOf(value.intValue()));\n-        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n-    }\n-\n-    @Test\n-    public void compareGreater() {\n-        Integer value = Integer.valueOf(10);\n-        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.GREATER);\n-        assertTrue(p, Integer.valueOf(value.intValue() - 1));\n-        assertFalse(p, Integer.valueOf(value.intValue()));\n-        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n-    }\n-\n-    @Test\n-    public void compareLess() {\n-        Integer value = Integer.valueOf(10);\n-        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.LESS);\n-        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n-        assertFalse(p, Integer.valueOf(value.intValue()));\n-        assertTrue(p, Integer.valueOf(value.intValue() + 1));\n-    }\n-\n-    @Test\n-    public void compareGreaterOrEqual() {\n-        Integer value = Integer.valueOf(10);\n-        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.GREATER_OR_EQUAL);\n-        assertTrue(p, Integer.valueOf(value.intValue() - 1));\n-        assertTrue(p, Integer.valueOf(value.intValue()));\n-        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n-    }\n-\n-    @Test\n-    public void compareLessOrEqual() {\n-        Integer value = Integer.valueOf(10);\n-        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.LESS_OR_EQUAL);\n-        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n-        assertTrue(p, Integer.valueOf(value.intValue()));\n-        assertTrue(p, Integer.valueOf(value.intValue() + 1));\n-    }\n-    \n-    @Override\n-    protected Predicate<?> generatePredicate() {\n-        return comparatorPredicate(Integer.valueOf(10), new TestComparator<Integer>());\n-    }    \n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import static org.apache.commons.collections.functors.ComparatorPredicate.*;\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.junit.Test;\n+\n+\n+public class TestComparatorPredicate extends BasicPredicateTestBase {\n+    private class TestComparator<T extends Comparable<T>> implements Comparator<T> {\n+        public int compare(T first, T second) {\n+            return first.compareTo(second);\n+        }\n+    }\n+\n+    @Test\n+    public void compareEquals() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>());\n+        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n+        assertTrue(p, Integer.valueOf(value.intValue()));\n+        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareGreater() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.GREATER);\n+        assertTrue(p, Integer.valueOf(value.intValue() - 1));\n+        assertFalse(p, Integer.valueOf(value.intValue()));\n+        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareLess() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.LESS);\n+        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n+        assertFalse(p, Integer.valueOf(value.intValue()));\n+        assertTrue(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareGreaterOrEqual() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.GREATER_OR_EQUAL);\n+        assertTrue(p, Integer.valueOf(value.intValue() - 1));\n+        assertTrue(p, Integer.valueOf(value.intValue()));\n+        assertFalse(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+\n+    @Test\n+    public void compareLessOrEqual() {\n+        Integer value = Integer.valueOf(10);\n+        Predicate<Integer> p = comparatorPredicate(value, new TestComparator<Integer>(), Criterion.LESS_OR_EQUAL);\n+        assertFalse(p, Integer.valueOf(value.intValue() - 1));\n+        assertTrue(p, Integer.valueOf(value.intValue()));\n+        assertTrue(p, Integer.valueOf(value.intValue() + 1));\n+    }\n+    \n+    @Override\n+    protected Predicate<?> generatePredicate() {\n+        return comparatorPredicate(Integer.valueOf(10), new TestComparator<Integer>());\n+    }    \n+}", "timestamp": 1334086704, "metainfo": ""}