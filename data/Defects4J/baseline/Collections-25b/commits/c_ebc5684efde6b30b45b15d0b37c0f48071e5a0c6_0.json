{"sha": "ebc5684efde6b30b45b15d0b37c0f48071e5a0c6", "log": "Add Map and SortedMap collection decorators   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/FixedSizeMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/FixedSizeMap.java,v 1.1 2003/05/09 16:42:35 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * <code>FixedSizeMap</code> decorates another <code>Map</code>\n+ * to fix the size.\n+ * <p>\n+ * Any action that would change the size of the map is disallowed.\n+ * The put method is allowed to change the value associated with an existing\n+ * key however.\n+ * <p>\n+ * If trying to remove or clear the map, an UnsupportedOperationException is\n+ * thrown. If trying to put a new mapping into the map, an \n+ * IllegalArgumentException is thrown. This is because the put method can \n+ * succeed if the mapping's key already exists in the map, so the put method\n+ * is not always unsupported.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:35 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class FixedSizeMap extends AbstractMapDecorator implements Map {\n+\n+    /**\n+     * Factory method to create a fixed size map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static Map decorate(Map map) {\n+        return new FixedSizeMap(map);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected FixedSizeMap(Map map) {\n+        super(map);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public Object put(Object key, Object value) {\n+        if (map.containsKey(key) == false) {\n+            throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n+        }\n+        return map.put(key, value);\n+    }\n+\n+    public void putAll(Map map) {\n+        for (Iterator it = map.keySet().iterator(); it.hasNext(); ) {\n+            if (map.containsKey(it.next()) == false) {\n+                throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n+            }\n+        }\n+        map.putAll(map);\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException(\"Map is fixed size\");\n+    }\n+\n+    public Object remove(Object key) {\n+        throw new UnsupportedOperationException(\"Map is fixed size\");\n+    }\n+\n+    public Set entrySet() {\n+        Set set = map.entrySet();\n+        return new UnmodifiableSet(set);\n+    }\n+\n+    public Set keySet() {\n+        Set set = map.keySet();\n+        return new UnmodifiableSet(set);\n+    }\n+\n+    public Collection values() {\n+        Collection coll = map.values();\n+        return new UnmodifiableCollection(coll);\n+    }\n+   \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/FixedSizeSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/FixedSizeSortedMap.java,v 1.1 2003/05/09 16:42:35 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+\n+/**\n+ * <code>FixedSizeSortedMap</code> decorates another <code>SortedMap</code>\n+ * to fix the size.\n+ * <p>\n+ * Any action that would change the size of the map is disallowed.\n+ * The put method is allowed to change the value associated with an existing\n+ * key however.\n+ * <p>\n+ * If trying to remove or clear the map, an UnsupportedOperationException is\n+ * thrown. If trying to put a new mapping into the map, an \n+ * IllegalArgumentException is thrown. This is because the put method can \n+ * succeed if the mapping's key already exists in the map, so the put method\n+ * is not always unsupported.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:35 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class FixedSizeSortedMap extends FixedSizeMap implements SortedMap {\n+\n+    /**\n+     * Factory method to create a fixed size sorted map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static SortedMap decorate(SortedMap map) {\n+        return new FixedSizeSortedMap(map);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected FixedSizeSortedMap(SortedMap map) {\n+        super(map);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n+    }\n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n+    }\n+\n+    public SortedMap subMap(Object fromKey, Object toKey) {\n+        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n+        return new FixedSizeSortedMap(map);\n+    }\n+\n+    public SortedMap headMap(Object toKey) {\n+        SortedMap map = getSortedMap().headMap(toKey);\n+        return new FixedSizeSortedMap(map);\n+    }\n+\n+    public SortedMap tailMap(Object fromKey) {\n+        SortedMap map = getSortedMap().tailMap(fromKey);\n+        return new FixedSizeSortedMap(map);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/LazyMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/LazyMap.java,v 1.1 2003/05/09 16:42:35 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * <code>LazyMap</code> decorates another <code>Map</code>\n+ * to create objects in the map on demand.\n+ * <p>\n+ * When the {@link #get(Object)} method is called with a key that does not\n+ * exist in the map, the factory is used to create the object. The created\n+ * object will be added to the map using the requested key.\n+ * <p>\n+ * For instance:\n+ * <pre>\n+ * Factory factory = new Factory() {\n+ *     public Object create() {\n+ *         return new Date();\n+ *     }\n+ * }\n+ * Map lazy = Lazy.map(new HashMap(), factory);\n+ * Object obj = lazy.get(\"NOW\");\n+ * </pre>\n+ *\n+ * After the above code is executed, <code>obj</code> will contain\n+ * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n+ * instance is mapped to the \"NOW\" key in the map.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:35 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class LazyMap extends AbstractMapDecorator implements Map {\n+\n+    /** The factory to use to construct elements */\n+    protected final Object factory;\n+\n+    /**\n+     * Factory method to create a lazily instantiated map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static Map decorate(Map map, Factory factory) {\n+        return new LazyMap(map, factory);\n+    }\n+\n+    /**\n+     * Factory method to create a lazily instantiated map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static Map decorate(Map map, Transformer factory) {\n+        return new LazyMap(map, factory);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    protected LazyMap(Map map, Factory factory) {\n+        super(map);\n+        if (factory == null) {\n+            throw new IllegalArgumentException(\"Factory must not be null\");\n+        }\n+        this.factory = factory;\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    protected LazyMap(Map map, Transformer factory) {\n+        super(map);\n+        if (factory == null) {\n+            throw new IllegalArgumentException(\"Factory must not be null\");\n+        }\n+        this.factory = factory;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get(Object key) {\n+        // create value for key if key is not currently in the map\n+        if (map.containsKey(key) == false) {\n+            if (factory instanceof Factory) {\n+                Object value = ((Factory) factory).create();\n+                map.put(key, value);\n+                return value;\n+            } else {\n+                Object value = ((Transformer) factory).transform(key);\n+                map.put(key, value);\n+                return value;\n+            }\n+        }\n+        return map.get(key);\n+    }\n+\n+    // no need to wrap keySet, entrySet or values as they are views of\n+    // existing map entries - you can't do a map-style get on them.\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/LazySortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/LazySortedMap.java,v 1.1 2003/05/09 16:42:35 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+\n+import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * <code>LazySortedMap</code> decorates another <code>SortedMap </code>\n+ * to create objects in the map on demand.\n+ * <p>\n+ * When the {@link #get(Object)} method is called with a key that does not\n+ * exist in the map, the factory is used to create the object. The created\n+ * object will be added to the map using the requested key.\n+ * <p>\n+ * For instance:\n+ * <pre>\n+ * Factory factory = new Factory() {\n+ *     public Object create() {\n+ *         return new Date();\n+ *     }\n+ * }\n+ * SortedMap lazy = Lazy.sortedMap(new HashMap(), factory);\n+ * Object obj = lazy.get(\"NOW\");\n+ * </pre>\n+ *\n+ * After the above code is executed, <code>obj</code> will contain\n+ * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n+ * instance is mapped to the \"NOW\" key in the map.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:35 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class LazySortedMap extends LazyMap implements SortedMap {\n+\n+    /**\n+     * Factory method to create a lazily instantiated sorted map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static SortedMap decorate(SortedMap map, Factory factory) {\n+        return new LazySortedMap(map, factory);\n+    }\n+\n+    /**\n+     * Factory method to create a lazily instantiated sorted map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static SortedMap decorate(SortedMap map, Transformer factory) {\n+        return new LazySortedMap(map, factory);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    protected LazySortedMap(SortedMap map, Factory factory) {\n+        super(map, factory);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    protected LazySortedMap(SortedMap map, Transformer factory) {\n+        super(map, factory);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n+    }\n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n+    }\n+\n+    public SortedMap subMap(Object fromKey, Object toKey) {\n+        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n+        if (factory instanceof Factory) {\n+            return new LazySortedMap(map, (Factory) factory);\n+        } else {\n+            return new LazySortedMap(map, (Transformer) factory);\n+        }\n+    }\n+\n+    public SortedMap headMap(Object toKey) {\n+        SortedMap map = getSortedMap().headMap(toKey);\n+        if (factory instanceof Factory) {\n+            return new LazySortedMap(map, (Factory) factory);\n+        } else {\n+            return new LazySortedMap(map, (Transformer) factory);\n+        }\n+    }\n+\n+    public SortedMap tailMap(Object fromKey) {\n+        SortedMap map = getSortedMap().tailMap(fromKey);\n+        if (factory instanceof Factory) {\n+            return new LazySortedMap(map, (Factory) factory);\n+        } else {\n+            return new LazySortedMap(map, (Transformer) factory);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedMap.java,v 1.1 2003/05/09 16:42:36 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.lang.reflect.Array;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * <code>PredicatedMap</code> decorates another <code>Map</code>\n+ * to validate additions match a specified predicate.\n+ * <p>\n+ * If an object cannot be addded to the map, an IllegalArgumentException\n+ * is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:36 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedMap extends AbstractMapDecorator {\n+\n+    /** The key predicate to use */\n+    protected final Predicate keyPredicate;\n+    /** The value predicate to use */\n+    protected final Predicate valuePredicate;\n+\n+    /**\n+     * Factory method to create a predicated (validating) map.\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are validated.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyPredicate, the predicate to validate the keys, null means no check\n+     * @param valuePredicate, the predicate to validate to values, null means no check\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    public static Map decorate(Map map, Predicate keyPredicate, Predicate valuePredicate) {\n+        return new PredicatedMap(map, keyPredicate, valuePredicate);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyPredicate, the predicate to validate the keys, null means no check\n+     * @param valuePredicate, the predicate to validate to values, null means no check\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    protected PredicatedMap(Map map, Predicate keyPredicate, Predicate valuePredicate) {\n+        super(map);\n+        this.keyPredicate = keyPredicate;\n+        this.valuePredicate = valuePredicate;\n+        \n+        Iterator it = map.entrySet().iterator();\n+        while (it.hasNext()) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            Object key = entry.getKey();\n+            Object value = entry.getValue();\n+            validate(key, value);\n+        }\n+    }\n+\n+    protected void validate(Object key, Object value) {\n+        if (keyPredicate != null && keyPredicate.evaluate(key) == false) {\n+            throw new IllegalArgumentException(\"Cannot add key - Predicate rejected it\");\n+        }\n+        if (valuePredicate != null && valuePredicate.evaluate(value) == false) {\n+            throw new IllegalArgumentException(\"Cannot add value - Predicate rejected it\");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object put(Object key, Object value) {\n+        validate(key, value);\n+        return map.put(key, value);\n+    }\n+\n+    public void putAll(Map map) {\n+        Iterator it = map.entrySet().iterator();\n+        while (it.hasNext()) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            Object key = entry.getKey();\n+            Object value = entry.getValue();\n+            validate(key, value);\n+        }\n+        map.putAll(map);\n+    }\n+\n+    public Set entrySet() {\n+        if (valuePredicate == null) {\n+            return map.entrySet();\n+        }\n+        return new PredicatedMapEntrySet(map.entrySet(), valuePredicate);\n+    }\n+\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implementation of an entry set that checks (predicates) additions.\n+     */\n+    protected static class PredicatedMapEntrySet extends AbstractCollectionDecorator implements Set {\n+        \n+        /** The predicate to use */\n+        private final Predicate valuePredicate;\n+\n+        protected PredicatedMapEntrySet(Set set, Predicate valuePred) {\n+            super(set);\n+            this.valuePredicate = valuePred;\n+        }\n+\n+        public Iterator iterator() {\n+            return new PredicatedMapEntrySetIterator(collection.iterator(), valuePredicate);\n+        }\n+        \n+        public Object[] toArray() {\n+            Object[] array = collection.toArray();\n+            for (int i = 0; i < array.length; i++) {\n+                array[i] = new PredicatedMapEntry((Map.Entry) array[i], valuePredicate);\n+            }\n+            return array;\n+        }\n+        \n+        public Object[] toArray(Object array[]) {\n+            Object[] result = array;\n+            if (array.length > 0) {\n+                // we must create a new array to handle multi-threaded situations\n+                // where another thread could access data before we decorate it\n+                result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);\n+            }\n+            result = collection.toArray(result);\n+            for (int i = 0; i < result.length; i++) {\n+                result[i] = new PredicatedMapEntry((Map.Entry) result[i], valuePredicate);\n+            }\n+\n+            // check to see if result should be returned straight\n+            if (result.length > array.length) {\n+                return result;\n+            }\n+\n+            // copy back into input array to fulfil the method contract\n+            System.arraycopy(result, 0, array, 0, result.length);\n+            if (array.length > result.length) {\n+                array[result.length] = null;\n+            }\n+            return array;\n+        }\n+    }\n+\n+    /**\n+     * Implementation of an entry set iterator.\n+     */\n+    protected static class PredicatedMapEntrySetIterator extends AbstractIteratorDecorator {\n+        \n+        /** The predicate to use */\n+        private final Predicate valuePredicate;\n+        \n+        protected PredicatedMapEntrySetIterator(Iterator iterator, Predicate valuePredicate) {\n+            super(iterator);\n+            this.valuePredicate = valuePredicate;\n+        }\n+        \n+        public Object next() {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            return new PredicatedMapEntry(entry, valuePredicate);\n+        }\n+    }\n+\n+    /**\n+     * Implementation of a map entry that checks (predicates) additions.\n+     */\n+    protected static class PredicatedMapEntry extends AbstractMapEntryDecorator {\n+\n+        /** The predicate to use */\n+        private final Predicate predicate;\n+\n+        protected PredicatedMapEntry(Map.Entry entry, Predicate valuePredicate) {\n+            super(entry);\n+            this.predicate = valuePredicate;\n+        }\n+\n+        public Object setValue(Object o) {\n+            if (predicate != null && predicate.evaluate(o) == false) {\n+                throw new IllegalArgumentException(\"Cannot set value - Predicate rejected it\");\n+            }\n+            return entry.setValue(o);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/PredicatedSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/PredicatedSortedMap.java,v 1.1 2003/05/09 16:42:35 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * <code>PredicatedSortedMap</code> decorates another <code>SortedMap </code>\n+ * to validate additions match a specified predicate.\n+ * <p>\n+ * If an object cannot be addded to the map, an IllegalArgumentException\n+ * is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:35 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedSortedMap extends PredicatedMap implements SortedMap {\n+\n+    /**\n+     * Factory method to create a predicated (validating) sorted map.\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are validated.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyPredicate, the predicate to validate the keys, null means no check\n+     * @param valuePredicate, the predicate to validate to values, null means no check\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    public static SortedMap decorate(SortedMap map, Predicate keyPredicate, Predicate valuePredicate) {\n+        return new PredicatedSortedMap(map, keyPredicate, valuePredicate);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyPredicate, the predicate to validate the keys, null means no check\n+     * @param valuePredicate, the predicate to validate to values, null means no check\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    protected PredicatedSortedMap(SortedMap map, Predicate keyPredicate, Predicate valuePredicate) {\n+        super(map, keyPredicate, valuePredicate);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n+    }\n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n+    }\n+\n+    public SortedMap subMap(Object fromKey, Object toKey) {\n+        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n+        return new PredicatedSortedMap(map, keyPredicate, valuePredicate);\n+    }\n+\n+    public SortedMap headMap(Object toKey) {\n+        SortedMap map = getSortedMap().headMap(toKey);\n+        return new PredicatedSortedMap(map, keyPredicate, valuePredicate);\n+    }\n+\n+    public SortedMap tailMap(Object fromKey) {\n+        SortedMap map = getSortedMap().tailMap(fromKey);\n+        return new PredicatedSortedMap(map, keyPredicate, valuePredicate);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TypedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedMap.java,v 1.1 2003/05/09 16:42:36 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Map;\n+\n+/**\n+ * <code>TypedMap</code> decorates another <code>Map</code>\n+ * to validate that elements added are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be addded to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:36 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedMap {\n+\n+    /**\n+     * Factory method to create a typed map.\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * are validated.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyType  the type to allow as keys, must not be null\n+     * @param valueType  the type to allow as values, must not be null\n+     * @throws IllegalArgumentException if list or type is null\n+     * @throws IllegalArgumentException if the list contains invalid elements\n+     */\n+    public static Map decorate(Map map, Class keyType, Class valueType) {\n+        return new PredicatedMap(\n+            map,\n+            TypedCollection.getPredicate(keyType),\n+            TypedCollection.getPredicate(valueType)\n+        );\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedMap() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TypedSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSortedMap.java,v 1.1 2003/05/09 16:42:35 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.SortedMap;\n+\n+/**\n+ * <code>TypedSortedMap</code> decorates another <code>SortedMap</code>\n+ * to validate that elements added are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be addded to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:35 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedSortedMap {\n+\n+    /**\n+     * Factory method to create a typed sorted map.\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * are validated.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyType  the type to allow as keys, must not be null\n+     * @param valueType  the type to allow as values, must not be null\n+     * @throws IllegalArgumentException if list or type is null\n+     * @throws IllegalArgumentException if the list contains invalid elements\n+     */\n+    public static SortedMap decorate(SortedMap map, Class keyType, Class valueType) {\n+        return new PredicatedSortedMap(\n+            map,\n+            TypedCollection.getPredicate(keyType),\n+            TypedCollection.getPredicate(valueType)\n+        );\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedSortedMap() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/UnmodifiableMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableMap.java,v 1.1 2003/05/09 16:42:36 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.lang.reflect.Array;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * <code>UnmodifiableMap</code> decorates another <code>Map</code>\n+ * to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:36 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableMap extends AbstractMapDecorator {\n+\n+    /**\n+     * Factory method to create an unmodifiable map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static Map decorate(Map map) {\n+        return new UnmodifiableMap(map);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected UnmodifiableMap(Map map) {\n+        super(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object put(Object key, Object value) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void putAll(Map map) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object remove(Object key) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Set entrySet() {\n+        Set set = super.entrySet();\n+        return new UnmodifiableEntrySet(set);\n+    }\n+\n+    public Set keySet() {\n+        Set set = super.keySet();\n+        return new UnmodifiableSet(set);\n+    }\n+\n+    public Collection values() {\n+        Collection coll = super.values();\n+        return new UnmodifiableCollection(coll);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implementation of an entry set that checks (predicates) additions.\n+     */\n+    protected static class UnmodifiableEntrySet extends UnmodifiableSet {\n+        \n+        protected UnmodifiableEntrySet(Set set) {\n+            super(set);\n+        }\n+\n+        public Iterator iterator() {\n+            return new UnmodifiableEntrySetIterator(collection.iterator());\n+        }\n+        \n+        public Object[] toArray() {\n+            Object[] array = collection.toArray();\n+            for (int i = 0; i < array.length; i++) {\n+                array[i] = new UnmodifiableEntry((Map.Entry) array[i]);\n+            }\n+            return array;\n+        }\n+        \n+        public Object[] toArray(Object array[]) {\n+            Object[] result = array;\n+            if (array.length > 0) {\n+                // we must create a new array to handle multi-threaded situations\n+                // where another thread could access data before we decorate it\n+                result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);\n+            }\n+            result = collection.toArray(result);\n+            for (int i = 0; i < result.length; i++) {\n+                result[i] = new UnmodifiableEntry((Map.Entry) result[i]);\n+            }\n+\n+            // check to see if result should be returned straight\n+            if (result.length > array.length) {\n+                return result;\n+            }\n+\n+            // copy back into input array to fulfil the method contract\n+            System.arraycopy(result, 0, array, 0, result.length);\n+            if (array.length > result.length) {\n+                array[result.length] = null;\n+            }\n+            return array;\n+        }\n+    }\n+\n+    /**\n+     * Implementation of an entry set iterator.\n+     */\n+    protected static class UnmodifiableEntrySetIterator extends AbstractIteratorDecorator {\n+        \n+        protected UnmodifiableEntrySetIterator(Iterator iterator) {\n+            super(iterator);\n+        }\n+        \n+        public Object next() {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            return new UnmodifiableEntry(entry);\n+        }\n+    }\n+\n+    /**\n+     * Implementation of a map entry that is unmodifiable.\n+     */\n+    protected static class UnmodifiableEntry extends AbstractMapEntryDecorator {\n+\n+        protected UnmodifiableEntry(Map.Entry entry) {\n+            super(entry);\n+        }\n+\n+        public Object setValue(Object o) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/UnmodifiableSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/UnmodifiableSortedMap.java,v 1.1 2003/05/09 16:42:36 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.SortedMap;\n+\n+/**\n+ * <code>UnmodifiableSortedMap</code> decorates another <code>SortedMap</code>\n+ * to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/09 16:42:36 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableSortedMap extends UnmodifiableMap implements SortedMap {\n+\n+    /**\n+     * Factory method to create an unmodifiable sorted map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static SortedMap decorate(SortedMap map) {\n+        return new UnmodifiableSortedMap(map);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected UnmodifiableSortedMap(Map map) {\n+        super(map);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n+    }\n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n+    }\n+\n+    public SortedMap subMap(Object fromKey, Object toKey) {\n+        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n+        return new UnmodifiableSortedMap(getSortedMap());\n+    }\n+\n+    public SortedMap headMap(Object toKey) {\n+        SortedMap map = getSortedMap().headMap(toKey);\n+        return new UnmodifiableSortedMap(getSortedMap());\n+    }\n+\n+    public SortedMap tailMap(Object fromKey) {\n+        SortedMap map = getSortedMap().tailMap(fromKey);\n+        return new UnmodifiableSortedMap(getSortedMap());\n+    }\n+\n+}", "timestamp": 1052498556, "metainfo": ""}