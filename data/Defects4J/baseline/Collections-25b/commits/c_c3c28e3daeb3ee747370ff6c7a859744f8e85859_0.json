{"sha": "c3c28e3daeb3ee747370ff6c7a859744f8e85859", "log": "Enhance OrderedSet to support List like functions   ", "commit": "\n--- a/src/java/org/apache/commons/collections/decorators/OrderedSet.java\n+++ b/src/java/org/apache/commons/collections/decorators/OrderedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedSet.java,v 1.1 2003/09/09 22:28:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedSet.java,v 1.2 2003/09/20 16:57:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n  * Decorates a <code>Set</code> to ensure that the order of addition\n  * is retained and used by the iterator.\n  * <p>\n- * If an object is added to the Set for a second time, it will remain in the\n+ * If an object is added to the set for a second time, it will remain in the\n  * original position in the iteration.\n+ * The order can be observed from the set via the iterator or toArray methods.\n  * <p>\n- * The order can be observed via the iterator or toArray methods.\n+ * The OrderedSet also has various useful direct methods. These include many\n+ * from <code>List</code>, such as <code>get(int)</code>, <code>remove(int)</code>\n+ * and <code>indexOf(int)</code>. An unmodifiable <code>List</code> view of \n+ * the set can be obtained via <code>asList()</code>.\n+ * <p>\n+ * This class cannot implement the <code>List</code> interface directly as\n+ * various interface methods (notably equals/hashCode) are incompatable with a set.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/09 22:28:35 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/20 16:57:47 $\n  * \n  * @author Stephen Colebourne\n  * @author Henning P. Schmiedehausen\n public class OrderedSet extends AbstractSetDecorator implements Set {\n \n     /** Internal list to hold the sequence of objects */\n-    protected final List setOrder = new ArrayList();\n+    protected final List setOrder;\n \n     /**\n      * Factory method to create an ordered set.\n+     * <p>\n+     * An <code>ArrayList</code> is used to retain order.\n      * \n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n-    public static Set decorate(Set set) {\n+    public static OrderedSet decorate(Set set) {\n         return new OrderedSet(set);\n+    }\n+\n+    /**\n+     * Factory method to create an ordered set using the supplied list to retain order.\n+     * <p>\n+     * A <code>HashSet</code> is used for the set behaviour.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    public static OrderedSet decorate(List list) {\n+        Set set = new HashSet(list);\n+        list.retainAll(set);\n+        \n+        return new OrderedSet(set, list);\n     }\n \n     /**\n      */\n     protected OrderedSet(Set set) {\n         super(set);\n-        setOrder.addAll(set);\n+        setOrder = new ArrayList(set);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies) the Set and specifies the list to use.\n+     * <p>\n+     * The set and list must both be correctly initialised to the same elements.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if set or list is null\n+     */\n+    protected OrderedSet(Set set, List list) {\n+        super(set);\n+        if (list == null) {\n+            throw new IllegalArgumentException(\"List must not be null\");\n+        }\n+        setOrder = list;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an unmodifiable view of the order of the Set.\n+     * \n+     * @return an unmodifiable list view\n+     */\n+    public List asList() {\n+        return Collections.unmodifiableList(setOrder);\n     }\n \n     //-----------------------------------------------------------------------\n         return setOrder.toArray(a);\n     }\n \n+    //-----------------------------------------------------------------------\n+    public Object get(int index) {\n+        return setOrder.get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return setOrder.indexOf(object);\n+    }\n+\n+    public void add(int index, Object object) {\n+        if (contains(object) == false) {\n+            collection.add(object);\n+            setOrder.add(index, object);\n+        }\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        boolean changed = false;\n+        for (Iterator it = coll.iterator(); it.hasNext();) {\n+            Object object = (Object) it.next();\n+            if (contains(object) == false) {\n+                collection.add(object);\n+                setOrder.add(index, object);\n+                index++;\n+                changed = true;\n+            }\n+        }\n+        return changed;\n+    }\n+\n+    public Object remove(int index) {\n+        Object obj = setOrder.remove(index);\n+        remove(obj);\n+        return obj;\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Internal iterator handle remove.\n      */\n--- a/src/test/org/apache/commons/collections/decorators/TestOrderedSet.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestOrderedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestOrderedSet.java,v 1.1 2003/09/09 22:28:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestOrderedSet.java,v 1.2 2003/09/20 16:57:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.decorators;\n \n+import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Set;\n \n import junit.framework.Test;\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/09 22:28:36 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/20 16:57:47 $\n  * \n  * @author Henning P. Schmiedehausen\n  * @author Stephen Colebourne\n         }\n     }\n     \n+    private static final Integer ZERO = new Integer(0);\n+    private static final Integer ONE = new Integer(1);\n+    private static final Integer TWO = new Integer(2);\n+    private static final Integer THREE = new Integer(3);\n+    \n+    public void testListAddRemove() {\n+        OrderedSet set = (OrderedSet) makeEmptySet();\n+        List view = set.asList();\n+        set.add(ZERO);\n+        set.add(ONE);\n+        set.add(TWO);\n+        \n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        assertEquals(3, view.size());\n+        assertSame(ZERO, view.get(0));\n+        assertSame(ONE, view.get(1));\n+        assertSame(TWO, view.get(2));\n+        \n+        assertEquals(0, set.indexOf(ZERO));\n+        assertEquals(1, set.indexOf(ONE));\n+        assertEquals(2, set.indexOf(TWO));\n+        \n+        set.remove(1);\n+        assertEquals(2, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(TWO, set.get(1));\n+        assertEquals(2, view.size());\n+        assertSame(ZERO, view.get(0));\n+        assertSame(TWO, view.get(1));\n+    }        \n+    \n+    public void testListAddIndexed() {\n+        OrderedSet set = (OrderedSet) makeEmptySet();\n+        List view = set.asList();\n+        set.add(ZERO);\n+        set.add(TWO);\n+        \n+        set.add(1, ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        \n+        set.add(0, ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        \n+        List list = new ArrayList();\n+        list.add(ZERO);\n+        list.add(TWO);\n+        \n+        set.addAll(0, list);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        \n+        list.add(0, THREE); // list = [3,0,2]\n+        set.remove(TWO);    //  set = [0,1]\n+        set.addAll(1, list);\n+        assertEquals(4, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(THREE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        assertSame(ONE, set.get(3));\n+    }\n+    \n }", "timestamp": 1064077067, "metainfo": ""}