{"sha": "429c850d430a4df052beb07ea3c3e2dc3ec6898b", "log": "Add basic performance test shell for testing maps   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/MapPerformance.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/MapPerformance.java,v 1.1 2003/11/02 23:43:00 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+\n+/** \n+ * <code>TestMapPerformance</code> is designed to perform basic Map performance tests.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class MapPerformance {\n+\n+    /** The total number of runs for each test */    \n+    private static final int RUNS = 20000000;\n+    \n+    /**\n+     * Main method\n+     */\n+    public static void main(String[] args) {\n+        testAll();\n+    }\n+    \n+    private static void testAll() {\n+        Map dummyMap = new DummyMap();\n+        Map hashMap = new HashMap();\n+//        hashMap.put(\"Alpha\", \"A\");\n+//        hashMap.put(\"Beta\", \"B\");\n+//        hashMap.put(\"Gamma\", \"C\");\n+//        hashMap.put(\"Delta\", \"D\");\n+        Map flatMap = new Flat3Map(hashMap);\n+        System.out.println(flatMap);\n+        Map unmodHashMap = Collections.unmodifiableMap(new HashMap(hashMap));\n+        Map fastHashMap = new FastHashMap(hashMap);\n+        Map treeMap = new TreeMap(hashMap);\n+        Map seqMap = new SequencedHashMap(hashMap);\n+        Map linkedMap = new LinkedHashMap(hashMap);\n+        Map syncMap = Collections.unmodifiableMap(new HashMap(hashMap));\n+        Map bucketMap = new StaticBucketMap();\n+        bucketMap.putAll(hashMap);\n+        Map doubleMap = new DoubleOrderedMap(hashMap);\n+        \n+        // dummy is required as the VM seems to hotspot the first call to the\n+        // test method with the given type\n+        test(dummyMap,      \"         Dummy \");\n+        test(dummyMap,      \"         Dummy \");\n+        test(dummyMap,      \"         Dummy \");\n+        test(flatMap,       \"         Flat3 \");\n+        test(hashMap,       \"       HashMap \");\n+        \n+        test(flatMap,       \"         Flat3 \");\n+        test(flatMap,       \"         Flat3 \");\n+        test(flatMap,       \"         Flat3 \");\n+        \n+        test(hashMap,       \"       HashMap \");\n+        test(hashMap,       \"       HashMap \");\n+        test(hashMap,       \"       HashMap \");\n+        \n+//        test(treeMap,       \"       TreeMap \");\n+//        test(treeMap,       \"       TreeMap \");\n+//        test(treeMap,       \"       TreeMap \");\n+        \n+//        test(unmodHashMap,  \"Unmod(HashMap) \");\n+//        test(unmodHashMap,  \"Unmod(HashMap) \");\n+//        test(unmodHashMap,  \"Unmod(HashMap) \");\n+//        \n+//        test(syncMap,       \" Sync(HashMap) \");\n+//        test(syncMap,       \" Sync(HashMap) \");\n+//        test(syncMap,       \" Sync(HashMap) \");\n+//        \n+//        test(fastHashMap,   \"   FastHashMap \");\n+//        test(fastHashMap,   \"   FastHashMap \");\n+//        test(fastHashMap,   \"   FastHashMap \");\n+//        \n+//        test(seqMap,        \"    SeqHashMap \");\n+//        test(seqMap,        \"    SeqHashMap \");\n+//        test(seqMap,        \"    SeqHashMap \");\n+//        \n+//        test(linkedMap,     \" LinkedHashMap \");\n+//        test(linkedMap,     \" LinkedHashMap \");\n+//        test(linkedMap,     \" LinkedHashMap \");\n+//        \n+//        test(bucketMap,     \"     BucketMap \");\n+//        test(bucketMap,     \"     BucketMap \");\n+//        test(bucketMap,     \"     BucketMap \");\n+//        \n+//        test(doubleMap,     \"     DoubleMap \");\n+//        test(doubleMap,     \"     DoubleMap \");\n+//        test(doubleMap,     \"     DoubleMap \");\n+    }\n+\n+    private static void test(Map map, String name) {\n+        long start = 0, end = 0;\n+        int total = 0;\n+        start = System.currentTimeMillis();\n+        for (int i = RUNS; i > 0; i--) {\n+//            if (map.get(\"Alpha\") != null) total++;\n+//            if (map.get(\"Beta\") != null) total++;\n+//            if (map.get(\"Gamma\") != null) total++;\n+            map.put(\"Alpha\", \"A\");\n+            map.put(\"Beta\", \"B\");\n+            map.put(\"Beta\", \"C\");\n+            map.put(\"Gamma\", \"D\");\n+//            map.remove(\"Gamma\");\n+//            map.remove(\"Beta\");\n+//            map.remove(\"Alpha\");\n+            map.put(\"Delta\", \"E\");\n+            map.clear();\n+        }\n+        end = System.currentTimeMillis();\n+        System.out.println(name + (end - start));\n+    }\n+\n+    // ----------------------------------------------------------------------\n+\n+    private static class DummyMap implements Map {\n+        public void clear() {\n+        }\n+        public boolean containsKey(Object key) {\n+            return false;\n+        }\n+        public boolean containsValue(Object value) {\n+            return false;\n+        }\n+        public Set entrySet() {\n+            return null;\n+        }\n+        public Object get(Object key) {\n+            return null;\n+        }\n+        public boolean isEmpty() {\n+            return false;\n+        }\n+        public Set keySet() {\n+            return null;\n+        }\n+        public Object put(Object key, Object value) {\n+            return null;\n+        }\n+        public void putAll(Map t) {\n+        }\n+        public Object remove(Object key) {\n+            return null;\n+        }\n+        public int size() {\n+            return 0;\n+        }\n+        public Collection values() {\n+            return null;\n+        }\n+    }\n+    \n+}\n+", "timestamp": 1067816580, "metainfo": ""}