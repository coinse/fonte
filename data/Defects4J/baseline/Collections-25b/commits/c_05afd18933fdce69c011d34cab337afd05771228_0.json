{"sha": "05afd18933fdce69c011d34cab337afd05771228", "log": "Simplify and avoid complaints about \"dead store to actual\"  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections4/BagUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/BagUtilsTest.java\n         assertTrue(\"Returned object should be a SynchronizedBag.\",\n             bag instanceof SynchronizedBag);\n         try {\n-            bag = BagUtils.synchronizedBag(null);\n+            BagUtils.synchronizedBag(null);\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         assertTrue(\"Returned object should be an UnmodifiableBag.\",\n             bag instanceof UnmodifiableBag);\n         try {\n-            bag = BagUtils.unmodifiableBag(null);\n+            BagUtils.unmodifiableBag(null);\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         assertTrue(\"Returned object should be a PredicatedBag.\",\n             bag instanceof PredicatedBag);\n         try {\n-            bag = BagUtils.predicatedBag(null,truePredicate);\n+            BagUtils.predicatedBag(null,truePredicate);\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         }\n         try {\n-            bag = BagUtils.predicatedBag(new HashBag<Object>(), null);\n+            BagUtils.predicatedBag(new HashBag<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null predicate.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         assertTrue(\"Returned object should be an TransformedBag.\",\n             bag instanceof TransformedBag);\n         try {\n-            bag = BagUtils.transformingBag(null, nopTransformer);\n+            BagUtils.transformingBag(null, nopTransformer);\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         }\n         try {\n-            bag = BagUtils.transformingBag(new HashBag<Object>(), null);\n+            BagUtils.transformingBag(new HashBag<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null transformer.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         assertTrue(\"Returned object should be a SynchronizedSortedBag.\",\n             bag instanceof SynchronizedSortedBag);\n         try {\n-            bag = BagUtils.synchronizedSortedBag(null);\n+            BagUtils.synchronizedSortedBag(null);\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         assertTrue(\"Returned object should be an UnmodifiableSortedBag.\",\n             bag instanceof UnmodifiableSortedBag);\n         try {\n-            bag = BagUtils.unmodifiableSortedBag(null);\n+            BagUtils.unmodifiableSortedBag(null);\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         assertTrue(\"Returned object should be a PredicatedSortedBag.\",\n             bag instanceof PredicatedSortedBag);\n         try {\n-            bag = BagUtils.predicatedSortedBag(null, truePredicate);\n+            BagUtils.predicatedSortedBag(null, truePredicate);\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         }\n         try {\n-            bag = BagUtils.predicatedSortedBag(new TreeBag<Object>(), null);\n+            BagUtils.predicatedSortedBag(new TreeBag<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null predicate.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         assertTrue(\"Returned object should be an TransformedSortedBag\",\n             bag instanceof TransformedSortedBag);\n         try {\n-            bag = BagUtils.transformingSortedBag(null, nopTransformer);\n+            BagUtils.transformingSortedBag(null, nopTransformer);\n             fail(\"Expecting IllegalArgumentException for null bag.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         }\n         try {\n-            bag = BagUtils.transformingSortedBag(new TreeBag<Object>(), null);\n+            BagUtils.transformingSortedBag(new TreeBag<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null transformer.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n--- a/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n         Collection<Number> collection = CollectionUtils.predicatedCollection(new ArrayList<Number>(), predicate);\n         assertTrue(\"returned object should be a PredicatedCollection\", collection instanceof PredicatedCollection);\n         try {\n-            collection = CollectionUtils.predicatedCollection(new ArrayList<Number>(), null);\n+            CollectionUtils.predicatedCollection(new ArrayList<Number>(), null);\n             fail(\"Expecting IllegalArgumentException for null predicate.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         Collection<Object> collection = CollectionUtils.transformingCollection(new ArrayList<Object>(), transformer);\n         assertTrue(\"returned object should be a TransformedCollection\", collection instanceof TransformedCollection);\n         try {\n-            collection = CollectionUtils.transformingCollection(new ArrayList<Object>(), null);\n+            CollectionUtils.transformingCollection(new ArrayList<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null transformer.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         }\n         try {\n-            collection = CollectionUtils.transformingCollection(null, transformer);\n+            CollectionUtils.transformingCollection(null, transformer);\n             fail(\"Expecting IllegalArgumentException for null collection.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         Collection<Object> col = CollectionUtils.synchronizedCollection(new ArrayList<Object>());\n         assertTrue(\"Returned object should be a SynchronizedCollection.\", col instanceof SynchronizedCollection);\n         try {\n-            col = CollectionUtils.synchronizedCollection(null);\n+            CollectionUtils.synchronizedCollection(null);\n             fail(\"Expecting IllegalArgumentException for null collection.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         Collection<Object> col = CollectionUtils.unmodifiableCollection(new ArrayList<Object>());\n         assertTrue(\"Returned object should be a UnmodifiableCollection.\", col instanceof UnmodifiableCollection);\n         try {\n-            col = CollectionUtils.unmodifiableCollection(null);\n+            CollectionUtils.unmodifiableCollection(null);\n             fail(\"Expecting IllegalArgumentException for null collection.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n--- a/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n         List<Object> list = ListUtils.predicatedList(new ArrayList<Object>(), predicate);\n         assertTrue(\"returned object should be a PredicatedList\", list instanceof PredicatedList);\n         try {\n-            list = ListUtils.predicatedList(new ArrayList<Object>(), null);\n+            ListUtils.predicatedList(new ArrayList<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null predicate.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         }\n         try {\n-            list = ListUtils.predicatedList(null, predicate);\n+            ListUtils.predicatedList(null, predicate);\n             fail(\"Expecting IllegalArgumentException for null list.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n--- a/src/test/java/org/apache/commons/collections4/MapUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/MapUtilsTest.java\n         Map<Object, Object> map = MapUtils.predicatedMap(new HashMap<Object, Object>(), p, p);\n         assertTrue(\"returned object should be a PredicatedMap\", map instanceof PredicatedMap);\n         try {\n-            map = MapUtils.predicatedMap(null, p, p);\n+            MapUtils.predicatedMap(null, p, p);\n             fail(\"Expecting IllegalArgumentException for null map.\");\n         } catch (final IllegalArgumentException e) {\n             // expected\n--- a/src/test/java/org/apache/commons/collections4/SetUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/SetUtilsTest.java\n         Set<Object> set = SetUtils.predicatedSet(new HashSet<Object>(), predicate);\n         assertTrue(\"returned object should be a PredicatedSet\", set instanceof PredicatedSet);\n         try {\n-            set = SetUtils.predicatedSet(new HashSet<Object>(), null);\n+            SetUtils.predicatedSet(new HashSet<Object>(), null);\n             fail(\"Expecting IllegalArgumentException for null predicate.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         }\n         try {\n-            set = SetUtils.predicatedSet(null, predicate);\n+            SetUtils.predicatedSet(null, predicate);\n             fail(\"Expecting IllegalArgumentException for null set.\");\n         } catch (final IllegalArgumentException ex) {\n             // expected", "timestamp": 1367190592, "metainfo": ""}