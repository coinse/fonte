{"sha": "f146a43e765f7a22ec0e2eab8a8265443c9afeb3", "log": "add ArrayUnsignedShortList, and tests   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayUnsignedShortList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayUnsignedShortList.java,v 1.1 2003/01/07 18:04:51 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/01/07 18:04:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+/**\n+ * A list of unsigned 16-bit values backed by a <code>short</code> array.\n+ * Mutators on this class will reject any <code>int</code> that does not\n+ * express an unsigned 16-bit value.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/01/07 18:04:51 $\n+ * @author Rodney Waldhoff \n+ */\n+public class ArrayUnsignedShortList extends AbstractRandomAccessIntList implements IntList, Serializable {\n+\n+    // constructors\n+    //-------------------------------------------------------------------------\n+\n+    protected ArrayUnsignedShortList() {\n+        this(8);\n+    }    \n+\n+    protected ArrayUnsignedShortList(int initialCapacity) {\n+        if(initialCapacity < 0) {\n+            throw new IllegalArgumentException(\"capacity \" + initialCapacity);\n+        }\n+        _data = new short[initialCapacity];\n+        _size = 0;\n+    }    \n+\n+    // IntList methods\n+    //-------------------------------------------------------------------------\n+\n+    public int get(int index) {\n+        checkRange(index);\n+        return toInt(_data[index]);\n+    }\n+    \n+    public int size() {\n+        return _size;\n+    }\n+    \n+    public int removeElementAt(int index) {\n+        checkRange(index);\n+        incrModCount();\n+        int oldval = _data[index];\n+        int numtomove = _size - index - 1;\n+        if(numtomove > 0) {\n+            System.arraycopy(_data,index+1,_data,index,numtomove);\n+        }\n+        _size--;\n+        return oldval;\n+    }\n+    \n+    public int set(int index, int element) {\n+        assertValidUnsignedShort(element);\n+        checkRange(index);\n+        incrModCount();\n+        int oldval = toInt(_data[index]);\n+        _data[index] = fromInt(element);\n+        return oldval;\n+    }\n+        \n+    public void add(int index, int element) {\n+        assertValidUnsignedShort(element);\n+        checkRangeIncludingEndpoint(index);\n+        incrModCount();\n+        ensureCapacity(_size+1);\n+        int numtomove = _size-index;\n+        System.arraycopy(_data,index,_data,index+1,numtomove);\n+        _data[index] = fromInt(element);\n+        _size++;\n+    }\n+\n+    // capacity methods\n+    //-------------------------------------------------------------------------\n+\n+    public void ensureCapacity(int mincap) {\n+        incrModCount();\n+        if(mincap > _data.length) {\n+            int newcap = (_data.length * 3)/2 + 1;\n+            short[] olddata = _data;\n+            _data = new short[newcap < mincap ? mincap : newcap];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    public void trimToSize() {\n+        incrModCount();\n+        if(_size < _data.length) {\n+            short[] olddata = _data;\n+            _data = new short[_size];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    // private methods\n+    //-------------------------------------------------------------------------\n+\n+    private final int toInt(short value) { \n+        return ((int)value)&MAX_VALUE;\n+    }\n+\n+    private final short fromInt(int value) {\n+        return (short)(value&MAX_VALUE);\n+    }\n+\n+    private final void assertValidUnsignedShort(int value) throws IllegalArgumentException {\n+        if(value > MAX_VALUE) {\n+            throw new IllegalArgumentException(value + \" > \" + MAX_VALUE);\n+        }\n+        if(value < MIN_VALUE) {\n+            throw new IllegalArgumentException(value + \" < \" + MIN_VALUE);\n+        }\n+    }\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException{\n+        out.defaultWriteObject();\n+        out.writeInt(_data.length);\n+        for(int i=0;i<_size;i++) {\n+            out.writeShort(_data[i]);\n+        }\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        _data = new short[in.readInt()];\n+        for(int i=0;i<_size;i++) {\n+            _data[i] = in.readShort();\n+        }\n+    }\n+    \n+    private final void checkRange(int index) {\n+        if(index < 0 || index >= _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and less than \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private final void checkRangeIncludingEndpoint(int index) {\n+        if(index < 0 || index > _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and at most \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    // attributes\n+    //-------------------------------------------------------------------------\n+    \n+    /** The maximum possible unsigned 16-bit value. */\n+    public static final int MAX_VALUE = 0xFFFF;\n+\n+\n+    /** The minimum possible unsigned 16-bit value. */\n+    public static final int MIN_VALUE = 0;\n+\n+    private transient short[] _data = null;\n+    private int _size = 0;\n+\n+}\n--- a/src/test/org/apache/commons/collections/primitives/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.5 2003/01/07 13:24:52 rwaldhoff Exp $\n- * $Revision: 1.5 $\n- * $Date: 2003/01/07 13:24:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.6 2003/01/07 18:04:52 rwaldhoff Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2003/01/07 18:04:52 $\n  *\n  * ====================================================================\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.5 $ $Date: 2003/01/07 13:24:52 $\n+ * @version $Revision: 1.6 $ $Date: 2003/01/07 18:04:52 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n         TestSuite suite = new TestSuite();\n         \n         suite.addTest(TestArrayIntList.suite());\n-        //suite.addTest(TestArrayUnsignedShortList.suite());\n+        suite.addTest(TestArrayUnsignedShortList.suite());\n         \n         suite.addTest(TestUnsignedByteArrayList.suite());\n         suite.addTest(TestShortArrayList.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayUnsignedShortList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayUnsignedShortList.java,v 1.1 2003/01/07 18:04:52 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/01/07 18:04:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.TestList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/01/07 18:04:52 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestArrayUnsignedShortList extends TestList {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public TestArrayUnsignedShortList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = BulkTest.makeSuite(TestArrayUnsignedShortList.class);\n+        return suite;\n+    }\n+\n+\n+    //------------------------------------------------------- TestList interface\n+\n+    public List makeEmptyList() {\n+        return new IntListList(new ArrayUnsignedShortList());\n+    }\n+\n+    /**\n+     *  Returns small Integer objects for testing.\n+     */\n+    protected Object[] getFullElements() {\n+        Integer[] result = new Integer[19];\n+        for (int i = 0; i < result.length; i++) {\n+            result[i] = new Integer(i + 19);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     *  Returns small Integer objects for testing.\n+     */\n+    protected Object[] getOtherElements() {\n+        Integer[] result = new Integer[16];\n+        for (int i = 0; i < result.length; i++) {\n+            result[i] = new Integer(i + 48);\n+        }\n+        return result;\n+    }\n+\n+    // TODO:  Create canonical collections in CVS\n+\n+    public void testCanonicalEmptyCollectionExists() {\n+    }\n+\n+    public void testCanonicalFullCollectionExists() {\n+    }\n+\n+    public void testEmptyListCompatibility() {\n+    }\n+\n+    public void testFullListCompatibility() {\n+    }\n+\n+    //------------------------------------------------------------------- Tests\n+\n+    public void testZeroInitialCapacityIsValid() {\n+        ArrayUnsignedShortList list = new ArrayUnsignedShortList(0);\n+    }\n+}", "timestamp": 1041962692, "metainfo": ""}