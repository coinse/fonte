{"sha": "7349963217549336428c67a19707b0e4130bd64a", "log": "Renamed unit tests for iterators package.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/AbstractIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.AbstractObjectTest;\n+\n+/**\n+ * Abstract class for testing the Iterator interface.\n+ * <p>\n+ * This class provides a framework for testing an implementation of Iterator.\n+ * Concrete subclasses must provide the iterator to be tested.\n+ * They must also specify certain details of how the iterator operates by\n+ * overriding the supportsXxx() methods if necessary.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractIteratorTest<E> extends AbstractObjectTest {\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test class name\n+     */\n+    public AbstractIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implement this method to return an iterator over an empty collection.\n+     * \n+     * @return an empty iterator\n+     */\n+    public abstract Iterator<E> makeEmptyIterator();\n+\n+    /**\n+     * Implements the abstract superclass method to return the full iterator.\n+     * \n+     * @return a full iterator\n+     */\n+    @Override\n+    public abstract Iterator<E> makeObject();\n+\n+    /**\n+     * Whether or not we are testing an iterator that can be empty.\n+     * Default is true.\n+     * \n+     * @return true if Iterator can be empty\n+     */\n+    public boolean supportsEmptyIterator() {\n+        return true;\n+    }\n+\n+    /**\n+     * Whether or not we are testing an iterator that can contain elements.\n+     * Default is true.\n+     * \n+     * @return true if Iterator can be full\n+     */\n+    public boolean supportsFullIterator() {\n+        return true;\n+    }\n+\n+    /**\n+     * Whether or not we are testing an iterator that supports remove().\n+     * Default is true.\n+     * \n+     * @return true if Iterator supports remove\n+     */\n+    public boolean supportsRemove() {\n+        return true;\n+    }\n+\n+    /**\n+     * Allows subclasses to add complex cross verification\n+     */\n+    public void verify() {\n+        // do nothing\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test the empty iterator.\n+     */\n+    public void testEmptyIterator() {\n+        if (supportsEmptyIterator() == false) {\n+            return;\n+        }\n+\n+        Iterator<E> it = makeEmptyIterator();\n+        \n+        // hasNext() should return false\n+        assertEquals(\"hasNext() should return false for empty iterators\", false, it.hasNext());\n+        \n+        // next() should throw a NoSuchElementException\n+        try {\n+            it.next();\n+            fail(\"NoSuchElementException must be thrown when Iterator is exhausted\");\n+        } catch (NoSuchElementException e) {\n+        }\n+        verify();\n+        \n+        assertNotNull(it.toString());\n+    }\n+\n+    /**\n+     * Test normal iteration behaviour.\n+     */\n+    public void testFullIterator() {\n+        if (supportsFullIterator() == false) {\n+            return;\n+        }\n+\n+        Iterator<E> it = makeObject();\n+\n+        // hasNext() must be true (ensure makeFullIterator is correct!)\n+        assertEquals(\"hasNext() should return true for at least one element\", true, it.hasNext());\n+\n+        // next() must not throw exception (ensure makeFullIterator is correct!)\n+        try {\n+            it.next();\n+        } catch (NoSuchElementException e) {\n+            fail(\"Full iterators must have at least one element\");\n+        }\n+\n+        // iterate through\n+        while (it.hasNext()) {\n+            it.next();\n+            verify();\n+        }\n+\n+        // next() must throw NoSuchElementException now\n+        try {\n+            it.next();\n+            fail(\"NoSuchElementException must be thrown when Iterator is exhausted\");\n+        } catch (NoSuchElementException e) {\n+        }\n+        \n+        assertNotNull(it.toString());\n+    }\n+\n+    /**\n+     * Test remove behaviour.\n+     */\n+    public void testRemove() {\n+        Iterator<E> it = makeObject();\n+        \n+        if (supportsRemove() == false) {\n+            // check for UnsupportedOperationException if not supported\n+            try {\n+                it.remove();\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n+        \n+        // should throw IllegalStateException before next() called\n+        try {\n+            it.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        verify();\n+        \n+        // remove after next should be fine\n+        it.next();\n+        it.remove();\n+        \n+        // should throw IllegalStateException for second remove()\n+        try {\n+            it.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/AbstractListIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Abstract class for testing the ListIterator interface.\n+ * <p>\n+ * This class provides a framework for testing an implementation of ListIterator.\n+ * Concrete subclasses must provide the list iterator to be tested.\n+ * They must also specify certain details of how the list iterator operates by\n+ * overriding the supportsXxx() methods if necessary.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractListIteratorTest<E> extends AbstractIteratorTest<E> {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param testName  the test class name\n+     */\n+    public AbstractListIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implements the abstract superclass method to return the list iterator.\n+     *\n+     * @return an empty iterator\n+     */\n+    @Override\n+    public abstract ListIterator<E> makeEmptyIterator();\n+\n+    /**\n+     * Implements the abstract superclass method to return the list iterator.\n+     *\n+     * @return a full iterator\n+     */\n+    @Override\n+    public abstract ListIterator<E> makeObject();\n+\n+    /**\n+     * Whether or not we are testing an iterator that supports add().\n+     * Default is true.\n+     *\n+     * @return true if Iterator supports add\n+     */\n+    public boolean supportsAdd() {\n+        return true;\n+    }\n+\n+    /**\n+     * Whether or not we are testing an iterator that supports set().\n+     * Default is true.\n+     *\n+     * @return true if Iterator supports set\n+     */\n+    public boolean supportsSet() {\n+        return true;\n+    }\n+\n+    /**\n+     * The value to be used in the add and set tests.\n+     * Default is null.\n+     */\n+    public E addSetValue() {\n+        return null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test that the empty list iterator contract is correct.\n+     */\n+    public void testEmptyListIteratorIsIndeedEmpty() {\n+        if (supportsEmptyIterator() == false) {\n+            return;\n+        }\n+\n+        ListIterator<E> it = makeEmptyIterator();\n+\n+        assertEquals(false, it.hasNext());\n+        assertEquals(0, it.nextIndex());\n+        assertEquals(false, it.hasPrevious());\n+        assertEquals(-1, it.previousIndex());\n+\n+        // next() should throw a NoSuchElementException\n+        try {\n+            it.next();\n+            fail(\"NoSuchElementException must be thrown from empty ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+\n+        // previous() should throw a NoSuchElementException\n+        try {\n+            it.previous();\n+            fail(\"NoSuchElementException must be thrown from empty ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+    }\n+\n+    /**\n+     * Test navigation through the iterator.\n+     */\n+    public void testWalkForwardAndBack() {\n+        ArrayList<E> list = new ArrayList<E>();\n+        ListIterator<E> it = makeObject();\n+        while (it.hasNext()) {\n+            list.add(it.next());\n+        }\n+\n+        // check state at end\n+        assertEquals(false, it.hasNext());\n+        assertEquals(true, it.hasPrevious());\n+        try {\n+            it.next();\n+            fail(\"NoSuchElementException must be thrown from next at end of ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+\n+        // loop back through comparing\n+        for (int i = list.size() - 1; i >= 0; i--) {\n+            assertEquals(i + 1, it.nextIndex());\n+            assertEquals(i, it.previousIndex());\n+\n+            Object obj = list.get(i);\n+            assertEquals(obj, it.previous());\n+        }\n+\n+        // check state at start\n+        assertEquals(true, it.hasNext());\n+        assertEquals(false, it.hasPrevious());\n+        try {\n+            it.previous();\n+            fail(\"NoSuchElementException must be thrown from previous at start of ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+    }\n+\n+    /**\n+     * Test add behaviour.\n+     */\n+    public void testAdd() {\n+        ListIterator<E> it = makeObject();\n+\n+        E addValue = addSetValue();\n+        if (supportsAdd() == false) {\n+            // check for UnsupportedOperationException if not supported\n+            try {\n+                it.add(addValue);\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n+\n+        // add at start should be OK, added should be previous\n+        it = makeObject();\n+        it.add(addValue);\n+        assertEquals(addValue, it.previous());\n+\n+        // add at start should be OK, added should not be next\n+        it = makeObject();\n+        it.add(addValue);\n+        assertTrue(addValue != it.next());\n+\n+        // add in middle and at end should be OK\n+        it = makeObject();\n+        while (it.hasNext()) {\n+            it.next();\n+            it.add(addValue);\n+            // check add OK\n+            assertEquals(addValue, it.previous());\n+            it.next();\n+        }\n+    }\n+\n+    /**\n+     * Test set behaviour.\n+     */\n+    public void testSet() {\n+        ListIterator<E> it = makeObject();\n+\n+        if (supportsSet() == false) {\n+            // check for UnsupportedOperationException if not supported\n+            try {\n+                it.set(addSetValue());\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n+\n+        // should throw IllegalStateException before next() called\n+        try {\n+            it.set(addSetValue());\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+\n+        // set after next should be fine\n+        it.next();\n+        it.set(addSetValue());\n+\n+        // repeated set calls should be fine\n+        it.set(addSetValue());\n+\n+    }\n+\n+    public void testRemoveThenSet() {\n+        ListIterator<E> it = makeObject();\n+        if (supportsRemove() && supportsSet()) {\n+            it.next();\n+            it.remove();\n+            try {\n+                it.set(addSetValue());\n+                fail(\"IllegalStateException must be thrown from set after remove\");\n+            } catch (IllegalStateException e) {\n+            }\n+        }\n+    }\n+\n+    public void testAddThenSet() {\n+        ListIterator<E> it = makeObject();\n+        // add then set\n+        if (supportsAdd() && supportsSet()) {\n+            it.next();\n+            it.add(addSetValue());\n+            try {\n+                it.set(addSetValue());\n+                fail(\"IllegalStateException must be thrown from set after add\");\n+            } catch (IllegalStateException e) {\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test remove after add behaviour.\n+     */\n+    public void testAddThenRemove() {\n+        ListIterator<E> it = makeObject();\n+\n+        // add then remove\n+        if (supportsAdd() && supportsRemove()) {\n+            it.next();\n+            it.add(addSetValue());\n+            try {\n+                it.remove();\n+                fail(\"IllegalStateException must be thrown from remove after add\");\n+            } catch (IllegalStateException e) {\n+            }\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/AbstractMapIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.MapIterator;\n+\n+/**\n+ * Abstract class for testing the MapIterator interface.\n+ * <p>\n+ * This class provides a framework for testing an implementation of MapIterator.\n+ * Concrete subclasses must provide the list iterator to be tested.\n+ * They must also specify certain details of how the list iterator operates by\n+ * overriding the supportsXxx() methods if necessary.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractMapIteratorTest<K, V> extends AbstractIteratorTest<K> {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param testName  the test class name\n+     */\n+    public AbstractMapIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implement this method to return a map iterator over an empty map.\n+     *\n+     * @return an empty iterator\n+     */\n+    @Override\n+    public abstract MapIterator<K, V> makeEmptyIterator();\n+\n+    /**\n+     * Implement this method to return a map iterator over a map with elements.\n+     *\n+     * @return a full iterator\n+     */\n+    @Override\n+    public abstract MapIterator<K, V> makeObject();\n+\n+    /**\n+     * Implement this method to return the map which contains the same data as the\n+     * iterator.\n+     *\n+     * @return a full map which can be updated\n+     */\n+    public abstract Map<K, V> getMap();\n+\n+    /**\n+     * Implement this method to return the confirmed map which contains the same\n+     * data as the iterator.\n+     *\n+     * @return a full map which can be updated\n+     */\n+    public abstract Map<K, V> getConfirmedMap();\n+\n+    /**\n+     * Whether or not we are testing an iterator that supports setValue().\n+     * Default is true.\n+     *\n+     * @return true if Iterator supports set\n+     */\n+    public boolean supportsSetValue() {\n+        return true;\n+    }\n+\n+    /**\n+     * Whether the get operation on the map structurally modifies the map,\n+     * such as with LRUMap. Default is false.\n+     *\n+     * @return true if the get method structurally modifies the map\n+     */\n+    public boolean isGetStructuralModify() {\n+        return false;\n+    }\n+\n+    /**\n+     * The values to be used in the add and set tests.\n+     * Default is two strings.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public V[] addSetValues() {\n+        return (V[]) new Object[] { \"A\", \"B\" };\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test that the empty list iterator contract is correct.\n+     */\n+    public void testEmptyMapIterator() {\n+        if (supportsEmptyIterator() == false) {\n+            return;\n+        }\n+\n+        MapIterator<K, V> it = makeEmptyIterator();\n+        assertEquals(false, it.hasNext());\n+\n+        // next() should throw a NoSuchElementException\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+\n+        // getKey() should throw an IllegalStateException\n+        try {\n+            it.getKey();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+\n+        // getValue() should throw an IllegalStateException\n+        try {\n+            it.getValue();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+\n+        if (supportsSetValue() == false) {\n+            // setValue() should throw an UnsupportedOperationException/IllegalStateException\n+            try {\n+                it.setValue(addSetValues()[0]);\n+                fail();\n+            } catch (UnsupportedOperationException ex) {\n+            } catch (IllegalStateException ex) {}\n+        } else {\n+            // setValue() should throw an IllegalStateException\n+            try {\n+                it.setValue(addSetValues()[0]);\n+                fail();\n+            } catch (IllegalStateException ex) {}\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test that the full list iterator contract is correct.\n+     */\n+    public void testFullMapIterator() {\n+        if (supportsFullIterator() == false) {\n+            return;\n+        }\n+\n+        MapIterator<K, V> it = makeObject();\n+        Map<K, V> map = getMap();\n+        assertEquals(true, it.hasNext());\n+\n+        assertEquals(true, it.hasNext());\n+        Set<K> set = new HashSet<K>();\n+        while (it.hasNext()) {\n+            // getKey\n+            K key = it.next();\n+            assertSame(\"it.next() should equals getKey()\", key, it.getKey());\n+            assertTrue(\"Key must be in map\",  map.containsKey(key));\n+            assertTrue(\"Key must be unique\", set.add(key));\n+\n+            // getValue\n+            V value = it.getValue();\n+            if (isGetStructuralModify() == false) {\n+                assertSame(\"Value must be mapped to key\", map.get(key), value);\n+            }\n+            assertTrue(\"Value must be in map\",  map.containsValue(value));\n+\n+            verify();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMapIteratorSet() {\n+        if (supportsFullIterator() == false) {\n+            return;\n+        }\n+\n+        V newValue = addSetValues()[0];\n+        V newValue2 = (addSetValues().length == 1 ? addSetValues()[0] : addSetValues()[1]);\n+        MapIterator<K, V> it = makeObject();\n+        Map<K, V> map = getMap();\n+        Map<K, V> confirmed = getConfirmedMap();\n+        assertEquals(true, it.hasNext());\n+        K key = it.next();\n+        V value = it.getValue();\n+\n+        if (supportsSetValue() == false) {\n+            try {\n+                it.setValue(newValue);\n+                fail();\n+            } catch (UnsupportedOperationException ex) {}\n+            return;\n+        }\n+        V old = it.setValue(newValue);\n+        confirmed.put(key, newValue);\n+        assertSame(\"Key must not change after setValue\", key, it.getKey());\n+        assertSame(\"Value must be changed after setValue\", newValue, it.getValue());\n+        assertSame(\"setValue must return old value\", value, old);\n+        assertEquals(\"Map must contain key\", true, map.containsKey(key));\n+        // test against confirmed, as map may contain value twice\n+        assertEquals(\"Map must not contain old value\",\n+            confirmed.containsValue(old), map.containsValue(old));\n+        assertEquals(\"Map must contain new value\", true, map.containsValue(newValue));\n+        verify();\n+\n+        it.setValue(newValue);  // same value - should be OK\n+        confirmed.put(key, newValue);\n+        assertSame(\"Key must not change after setValue\", key, it.getKey());\n+        assertSame(\"Value must be changed after setValue\", newValue, it.getValue());\n+        verify();\n+\n+        it.setValue(newValue2);  // new value\n+        confirmed.put(key, newValue2);\n+        assertSame(\"Key must not change after setValue\", key, it.getKey());\n+        assertSame(\"Value must be changed after setValue\", newValue2, it.getValue());\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public void testRemove() { // override\n+        MapIterator<K, V> it = makeObject();\n+        Map<K, V> map = getMap();\n+        Map<K, V> confirmed = getConfirmedMap();\n+        assertEquals(true, it.hasNext());\n+        K key = it.next();\n+\n+        if (supportsRemove() == false) {\n+            try {\n+                it.remove();\n+                fail();\n+            } catch (UnsupportedOperationException ex) {\n+            }\n+            return;\n+        }\n+\n+        it.remove();\n+        confirmed.remove(key);\n+        assertEquals(false, map.containsKey(key));\n+        verify();\n+\n+        try {\n+            it.remove();  // second remove fails\n+        } catch (IllegalStateException ex) {\n+        }\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMapIteratorSetRemoveSet() {\n+        if (supportsSetValue() == false || supportsRemove() == false) {\n+            return;\n+        }\n+        V newValue = addSetValues()[0];\n+        MapIterator<K, V> it = makeObject();\n+        Map<K, V> confirmed = getConfirmedMap();\n+\n+        assertEquals(true, it.hasNext());\n+        K key = it.next();\n+\n+        it.setValue(newValue);\n+        it.remove();\n+        confirmed.remove(key);\n+        verify();\n+\n+        try {\n+            it.setValue(newValue);\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMapIteratorRemoveGetKey() {\n+        if (supportsRemove() == false) {\n+            return;\n+        }\n+        MapIterator<K, V> it = makeObject();\n+        Map<K, V> confirmed = getConfirmedMap();\n+\n+        assertEquals(true, it.hasNext());\n+        K key = it.next();\n+\n+        it.remove();\n+        confirmed.remove(key);\n+        verify();\n+\n+        try {\n+            it.getKey();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMapIteratorRemoveGetValue() {\n+        if (supportsRemove() == false) {\n+            return;\n+        }\n+        MapIterator<K, V> it = makeObject();\n+        Map<K, V> confirmed = getConfirmedMap();\n+\n+        assertEquals(true, it.hasNext());\n+        K key = it.next();\n+\n+        it.remove();\n+        confirmed.remove(key);\n+        verify();\n+\n+        try {\n+            it.getValue();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        verify();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/AbstractOrderedMapIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.OrderedMapIterator;\n+\n+/**\n+ * Abstract class for testing the OrderedMapIterator interface.\n+ * <p>\n+ * This class provides a framework for testing an implementation of MapIterator.\n+ * Concrete subclasses must provide the list iterator to be tested.\n+ * They must also specify certain details of how the list iterator operates by\n+ * overriding the supportsXxx() methods if necessary.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractOrderedMapIteratorTest<K, V> extends AbstractMapIteratorTest<K, V> {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param testName  the test class name\n+     */\n+    public AbstractOrderedMapIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public abstract OrderedMapIterator<K, V> makeEmptyIterator();\n+\n+    @Override\n+    public abstract OrderedMapIterator<K, V> makeObject();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test that the empty list iterator contract is correct.\n+     */\n+    @Override\n+    public void testEmptyMapIterator() {\n+        if (supportsEmptyIterator() == false) {\n+            return;\n+        }\n+\n+        super.testEmptyMapIterator();\n+\n+        OrderedMapIterator<K, V> it = makeEmptyIterator();\n+        assertEquals(false, it.hasPrevious());\n+        try {\n+            it.previous();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test that the full list iterator contract is correct.\n+     */\n+    @Override\n+    public void testFullMapIterator() {\n+        if (supportsFullIterator() == false) {\n+            return;\n+        }\n+\n+        super.testFullMapIterator();\n+\n+        OrderedMapIterator<K, V> it = makeObject();\n+        Map<K, V> map = getMap();\n+\n+        assertEquals(true, it.hasNext());\n+        assertEquals(false, it.hasPrevious());\n+        Set<K> set = new HashSet<K>();\n+        while (it.hasNext()) {\n+            // getKey\n+            K key = it.next();\n+            assertSame(\"it.next() should equals getKey()\", key, it.getKey());\n+            assertTrue(\"Key must be in map\",  map.containsKey(key));\n+            assertTrue(\"Key must be unique\", set.add(key));\n+\n+            // getValue\n+            V value = it.getValue();\n+            if (isGetStructuralModify() == false) {\n+                assertSame(\"Value must be mapped to key\", map.get(key), value);\n+            }\n+            assertTrue(\"Value must be in map\",  map.containsValue(value));\n+\n+            assertEquals(true, it.hasPrevious());\n+\n+            verify();\n+        }\n+        while (it.hasPrevious()) {\n+            // getKey\n+            Object key = it.previous();\n+            assertSame(\"it.previous() should equals getKey()\", key, it.getKey());\n+            assertTrue(\"Key must be in map\",  map.containsKey(key));\n+            assertTrue(\"Key must be unique\", set.remove(key));\n+\n+            // getValue\n+            Object value = it.getValue();\n+            if (isGetStructuralModify() == false) {\n+                assertSame(\"Value must be mapped to key\", map.get(key), value);\n+            }\n+            assertTrue(\"Value must be in map\",  map.containsValue(value));\n+\n+            assertEquals(true, it.hasNext());\n+\n+            verify();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test that the iterator order matches the keySet order.\n+     */\n+    public void testMapIteratorOrder() {\n+        if (supportsFullIterator() == false) {\n+            return;\n+        }\n+\n+        OrderedMapIterator<K, V> it = makeObject();\n+        Map<K, V> map = getMap();\n+\n+        assertEquals(\"keySet() not consistent\", new ArrayList<K>(map.keySet()), new ArrayList<K>(map.keySet()));\n+\n+        Iterator<K> it2 = map.keySet().iterator();\n+        assertEquals(true, it.hasNext());\n+        assertEquals(true, it2.hasNext());\n+        List<K> list = new ArrayList<K>();\n+        while (it.hasNext()) {\n+            K key = it.next();\n+            assertEquals(it2.next(), key);\n+            list.add(key);\n+        }\n+        assertEquals(map.size(), list.size());\n+        while (it.hasPrevious()) {\n+            K key = it.previous();\n+            assertEquals(list.get(list.size() - 1), key);\n+            list.remove(list.size() - 1);\n+        }\n+        assertEquals(0, list.size());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/ArrayIterator2Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the ArrayIterator with primitive type arrays.\n+ *\n+ * @version $Id$\n+ */\n+public class ArrayIterator2Test<E> extends AbstractIteratorTest<E> {\n+\n+    protected int[] testArray = { 2, 4, 6, 8 };\n+\n+    public ArrayIterator2Test(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public ArrayIterator<E> makeEmptyIterator() {\n+        return new ArrayIterator<E>(new int[0]);\n+    }\n+\n+    @Override\n+    public ArrayIterator<E> makeObject() {\n+        return new ArrayIterator<E>(testArray);\n+    }\n+\n+    public ArrayIterator<E> makeArrayIterator(Object array) {\n+        return new ArrayIterator<E>(array);\n+    }\n+\n+    public ArrayIterator<E> makeArrayIterator(Object array, int index) {\n+        return new ArrayIterator<E>(array, index);\n+    }\n+\n+    public ArrayIterator<E> makeArrayIterator(Object array, int start, int end) {\n+        return new ArrayIterator<E>(array, start, end);\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    public void testIterator() {\n+        Iterator<E> iter = makeObject();\n+        for (int i = 0; i < testArray.length; i++) {\n+            Integer testValue = new Integer(testArray[i]);\n+            Number iterValue = (Number) iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+    // proves that an ArrayIterator set with the constructor has the same number of elements\n+    // as an ArrayIterator set with setArray(Object)\n+    public void testSetArray() {\n+        Iterator<E> iter1 = makeArrayIterator(testArray);\n+        int count1 = 0;\n+        while (iter1.hasNext()) {\n+            ++count1;\n+            iter1.next();\n+        }\n+\n+        assertEquals(\"the count should be right using the constructor\", count1, testArray.length);\n+\n+        ArrayIterator<E> iter2 = makeObject();\n+        iter2.setArray(testArray);\n+        int count2 = 0;\n+        while (iter2.hasNext()) {\n+            ++count2;\n+            iter2.next();\n+        }\n+\n+        assertEquals(\"the count should be right using setArray(Object)\", count2, testArray.length);\n+    }\n+\n+    public void testIndexedArray() {\n+        Iterator<E> iter = makeArrayIterator(testArray, 2);\n+        int count = 0;\n+        while (iter.hasNext()) {\n+            ++count;\n+            iter.next();\n+        }\n+\n+        assertEquals(\"the count should be right using ArrayIterator(Object,2) \", count, testArray.length - 2);\n+\n+        iter = makeArrayIterator(testArray, 1, testArray.length - 1);\n+        count = 0;\n+        while (iter.hasNext()) {\n+            ++count;\n+            iter.next();\n+        }\n+\n+        assertEquals(\n+            \"the count should be right using ArrayIterator(Object,1,\" + (testArray.length - 1) + \") \",\n+            count,\n+            testArray.length - 2);\n+\n+        try {\n+            iter = makeArrayIterator(testArray, -1);\n+            fail(\"new ArrayIterator(Object,-1) should throw an ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = makeArrayIterator(testArray, testArray.length + 1);\n+            fail(\"new ArrayIterator(Object,length+1) should throw an ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = makeArrayIterator(testArray, 0, -1);\n+            fail(\"new ArrayIterator(Object,0,-1) should throw an ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = makeArrayIterator(testArray, 0, testArray.length + 1);\n+            fail(\"new ArrayIterator(Object,0,length+1) should throw an ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = makeArrayIterator(testArray, 1, 1);\n+            // expected not to fail\n+        } catch (IllegalArgumentException iae) {\n+            // MODIFIED: an iterator over a zero-length section of array\n+            //  should be perfectly legal behavior\n+            fail(\"new ArrayIterator(Object,1,1) should NOT throw an IllegalArgumentException\");\n+        }\n+\n+        try {\n+            iter = makeArrayIterator(testArray, testArray.length - 1, testArray.length - 2);\n+            fail(\"new ArrayIterator(Object,length-2,length-1) should throw an IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae) {\n+            // expected\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/ArrayIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the ArrayIterator to ensure that the next() method will actually\n+ * perform the iteration rather than the hasNext() method.\n+ * The code of this test was supplied by Mauricio S. Moura.\n+ *\n+ * @version $Id$\n+ */\n+public class ArrayIteratorTest<E> extends AbstractIteratorTest<E> {\n+\n+    protected String[] testArray = { \"One\", \"Two\", \"Three\" };\n+\n+    public ArrayIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public ArrayIterator<E> makeEmptyIterator() {\n+        return new ArrayIterator<E>(new Object[0]);\n+    }\n+\n+    @Override\n+    public ArrayIterator<E> makeObject() {\n+        return new ArrayIterator<E>(testArray);\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    public void testIterator() {\n+        Iterator<E> iter = makeObject();\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            E iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+    public void testNullArray() {\n+        try {\n+            new ArrayIterator<Object>(null);\n+            fail(\"Constructor should throw a NullPointerException when constructed with a null array\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        ArrayIterator<Object> iter = new ArrayIterator<Object>();\n+        try {\n+            iter.setArray(null);\n+\n+            fail(\"setArray(null) should throw a NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testReset() {\n+        ArrayIterator<E> it = makeObject();\n+        it.next();\n+        it.reset();\n+        assertEquals(\"One\", it.next());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/ArrayListIterator2Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+/**\n+ * Test the ArrayListIterator class with primitives.\n+ *\n+ * @version $Id$\n+ */\n+public class ArrayListIterator2Test<E> extends ArrayIterator2Test<E> {\n+\n+    public ArrayListIterator2Test(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public ArrayListIterator<E> makeEmptyIterator() {\n+        return new ArrayListIterator<E>(new int[0]);\n+    }\n+\n+    @Override\n+    public ArrayListIterator<E> makeObject() {\n+        return new ArrayListIterator<E>(testArray);\n+    }\n+\n+    public ArrayListIterator<E> makeArrayListIterator(Object array) {\n+        return new ArrayListIterator<E>(array);\n+    }\n+\n+    public ArrayListIterator<E> makeArrayListIterator(Object array, int index) {\n+        return new ArrayListIterator<E>(array, index);\n+    }\n+\n+    public ArrayListIterator<E> makeArrayListIterator(Object array, int start, int end) {\n+        return new ArrayListIterator<E>(array, start, end);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/ArrayListIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Arrays;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Test the ArrayListIterator class.\n+ *\n+ * @version $Id$\n+ */\n+public class ArrayListIteratorTest<E> extends ArrayIteratorTest<E> {\n+\n+    public ArrayListIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public ArrayListIterator<E> makeEmptyIterator() {\n+        return new ArrayListIterator<E>(new Object[0]);\n+    }\n+\n+    @Override\n+    public ArrayListIterator<E> makeObject() {\n+        return new ArrayListIterator<E>(testArray);\n+    }\n+\n+    public ArrayListIterator<E> makeArrayListIterator(Object array) {\n+        return new ArrayListIterator<E>(array);\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    /**\n+     * Test the basic ListIterator functionality - going backwards using\n+     * <code>previous()</code>.\n+     */\n+    public void testListIterator() {\n+        ListIterator<E> iter = makeObject();\n+\n+        // TestArrayIterator#testIterator() has already tested the iterator forward,\n+        //  now we need to test it in reverse\n+\n+        // fast-forward the iterator to the end...\n+        while (iter.hasNext()) {\n+            iter.next();\n+        }\n+\n+        for (int x = testArray.length - 1; x >= 0; x--) {\n+            Object testValue = testArray[x];\n+            Object iterValue = iter.previous();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasPrevious());\n+\n+        try {\n+            iter.previous();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+    }\n+\n+    /**\n+     * Tests the {@link java.util.ListIterator#set} operation.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListIteratorSet() {\n+        String[] testData = new String[] { \"a\", \"b\", \"c\" };\n+\n+        String[] result = new String[] { \"0\", \"1\", \"2\" };\n+\n+        ListIterator<E> iter = makeArrayListIterator(testData);\n+        int x = 0;\n+\n+        while (iter.hasNext()) {\n+            iter.next();\n+            iter.set((E) Integer.toString(x));\n+            x++;\n+        }\n+\n+        assertTrue(\"The two arrays should have the same value, i.e. {0,1,2}\", Arrays.equals(testData, result));\n+\n+        // a call to set() before a call to next() or previous() should throw an IllegalStateException\n+        iter = makeArrayListIterator(testArray);\n+\n+        try {\n+            iter.set((E) \"should fail\");\n+            fail(\"ListIterator#set should fail if next() or previous() have not yet been called.\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        } catch (Throwable t) { // should never happen\n+            fail(t.toString());\n+        }\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/CollatingIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import org.apache.commons.collections.comparators.ComparableComparator;\n+\n+/**\n+ * Unit test suite for {@link CollatingIterator}.\n+ *\n+ * @version $Id$\n+ */\n+@SuppressWarnings(\"boxing\")\n+public class CollatingIteratorTest extends AbstractIteratorTest<Integer> {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public CollatingIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //--------------------------------------------------------------- Lifecycle\n+\n+    private Comparator<Integer> comparator = null;\n+    private ArrayList<Integer> evens = null;\n+    private ArrayList<Integer> odds = null;\n+    private ArrayList<Integer> fib = null;\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        comparator = new ComparableComparator<Integer>();\n+        evens = new ArrayList<Integer>();\n+        odds = new ArrayList<Integer>();\n+        for (int i = 0; i < 20; i++) {\n+            if (0 == i % 2) {\n+                evens.add(i);\n+            } else {\n+                odds.add(i);\n+            }\n+        }\n+        fib = new ArrayList<Integer>();\n+        fib.add(1);\n+        fib.add(1);\n+        fib.add(2);\n+        fib.add(3);\n+        fib.add(5);\n+        fib.add(8);\n+        fib.add(13);\n+        fib.add(21);\n+    }\n+\n+    //---------------------------------------------------- TestIterator Methods\n+\n+    @Override\n+    public CollatingIterator<Integer> makeEmptyIterator() {\n+        return new CollatingIterator<Integer>(comparator);\n+    }\n+\n+    @Override\n+    public CollatingIterator<Integer> makeObject() {\n+        CollatingIterator<Integer> iter = new CollatingIterator<Integer>(comparator);\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(odds.iterator());\n+        iter.addIterator(fib.iterator());\n+        return iter;\n+    }\n+\n+    //------------------------------------------------------------------- Tests\n+\n+    public void testGetSetComparator() {\n+        CollatingIterator<Integer> iter = new CollatingIterator<Integer>();\n+        assertNull(iter.getComparator());\n+        iter.setComparator(comparator);\n+        assertSame(comparator, iter.getComparator());\n+        iter.setComparator(null);\n+        assertNull(iter.getComparator());\n+    }\n+\n+    public void testIterateEven() {\n+        CollatingIterator<Integer> iter = new CollatingIterator<Integer>(comparator);\n+        iter.addIterator(evens.iterator());\n+        for (int i = 0; i < evens.size(); i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i), iter.next());\n+            assertEquals(0,iter.getIteratorIndex());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateEvenOdd() {\n+        CollatingIterator<Integer> iter = new CollatingIterator<Integer>(comparator, evens.iterator(), odds.iterator());\n+        for (int i = 0; i < 20; i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(new Integer(i), iter.next());\n+            assertEquals(i % 2,iter.getIteratorIndex());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateOddEven() {\n+        CollatingIterator<Integer> iter = new CollatingIterator<Integer>(comparator, odds.iterator(), evens.iterator());\n+        for (int i = 0; i < 20; i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(new Integer(i),iter.next());\n+            assertEquals((i % 2) == 0 ? 1 : 0,iter.getIteratorIndex());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateEvenEven() {\n+        CollatingIterator<Integer> iter = new CollatingIterator<Integer>(comparator);\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(evens.iterator());\n+        for (int i = 0; i < evens.size(); i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i), iter.next());\n+            assertEquals(0,iter.getIteratorIndex());\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i), iter.next());\n+            assertEquals(1,iter.getIteratorIndex());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateFibEvenOdd() {\n+        CollatingIterator<Integer> iter = new CollatingIterator<Integer>(comparator);\n+        iter.addIterator(fib.iterator());\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(odds.iterator());\n+\n+        assertEquals(new Integer(0),iter.next());  // even   0\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(new Integer(1),iter.next());  // fib    1\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(new Integer(1),iter.next());  // fib    1\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(new Integer(1),iter.next());  // odd    1\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(new Integer(2),iter.next());  // fib    2\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(new Integer(2),iter.next());  // even   2\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(new Integer(3),iter.next());  // fib    3\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(new Integer(3),iter.next());  // odd    3\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(new Integer(4),iter.next());  // even   4\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(new Integer(5),iter.next());  // fib    5\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(new Integer(5),iter.next());  // odd    5\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(new Integer(6),iter.next());  // even   6\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(new Integer(7),iter.next());  // odd    7\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(new Integer(8),iter.next());  // fib    8\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(new Integer(8),iter.next());  // even   8\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(new Integer(9),iter.next());  // odd    9\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(new Integer(10),iter.next()); // even  10\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(new Integer(11),iter.next()); // odd   11\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(new Integer(12),iter.next()); // even  12\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(new Integer(13),iter.next()); // fib   13\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(new Integer(13),iter.next()); // odd   13\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(new Integer(14),iter.next()); // even  14\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(new Integer(15),iter.next()); // odd   15\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(new Integer(16),iter.next()); // even  16\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(new Integer(17),iter.next()); // odd   17\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(new Integer(18),iter.next()); // even  18\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(new Integer(19),iter.next()); // odd   19\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(new Integer(21),iter.next()); // fib   21\n+        assertEquals(0,iter.getIteratorIndex());\n+\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testRemoveFromSingle() {\n+        CollatingIterator<Integer> iter = new CollatingIterator<Integer>(comparator);\n+        iter.addIterator(evens.iterator());\n+        int expectedSize = evens.size();\n+        while (iter.hasNext()) {\n+            Object o = iter.next();\n+            Integer val = (Integer) o;\n+            if (val.intValue() % 4 == 0) {\n+                expectedSize--;\n+                iter.remove();\n+            }\n+        }\n+        assertEquals(expectedSize,evens.size());\n+    }\n+\n+    public void testRemoveFromDouble() {\n+        CollatingIterator<Integer> iter = new CollatingIterator<Integer>(comparator);\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(odds.iterator());\n+        int expectedSize = evens.size() + odds.size();\n+        while (iter.hasNext()) {\n+            Object o = iter.next();\n+            Integer val = (Integer) o;\n+            if (val.intValue() % 4 == 0 || val.intValue() % 3 == 0) {\n+                expectedSize--;\n+                iter.remove();\n+            }\n+        }\n+        assertEquals(expectedSize, (evens.size() + odds.size()));\n+    }\n+\n+    public void testNullComparator() {\n+       List<Integer> l1 = Arrays.asList(1, 3, 5);\n+       List<Integer> l2 = Arrays.asList(2, 4, 6);\n+\n+       CollatingIterator<Integer> collatingIterator1 = new CollatingIterator<Integer>(null, l1.iterator(), l2.iterator());\n+       try {\n+           collatingIterator1.next();\n+       } catch (NullPointerException e) {\n+           assertTrue(e.getMessage().startsWith(\"You must invoke setComparator\"));\n+       }\n+\n+       int i = 0;\n+       CollatingIterator<Integer> collatingIterator2 = new CollatingIterator<Integer>(null, l1.iterator(), l2.iterator());\n+       collatingIterator2.setComparator(new ComparableComparator<Integer>());\n+       for ( ; collatingIterator2.hasNext(); i++ ) {\n+          Integer n = collatingIterator2.next();\n+          assertEquals(\"wrong order\", (int)n, i + 1);\n+       }\n+       assertEquals(\"wrong size\", i, l1.size() + l2.size());\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/FilterIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import static org.apache.commons.collections.functors.TruePredicate.truePredicate;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.functors.NotNullPredicate;\n+\n+/**\n+ * Test the filter iterator.\n+ *\n+ * @version $Id$\n+ */\n+public class FilterIteratorTest<E> extends AbstractIteratorTest<E> {\n+\n+    /** Creates new TestFilterIterator */\n+    public FilterIteratorTest(String name) {\n+        super(name);\n+    }\n+\n+    private String[] array;\n+    private List<E> list;\n+    private FilterIterator<E> iterator;\n+\n+    /**\n+     * Set up instance variables required by this test case.\n+     */\n+    @Override\n+    public void setUp() {\n+        array = new String[] { \"a\", \"b\", \"c\" };\n+        initIterator();\n+    }\n+\n+    /**\n+     * Tear down instance variables required by this test case.\n+     */\n+    @Override\n+    public void tearDown() throws Exception {\n+        iterator = null;\n+    }\n+\n+    /**\n+     * Returns an full iterator wrapped in a\n+     * FilterIterator that blocks all the elements\n+     *\n+     * @return \"empty\" FilterIterator\n+     */\n+    @Override\n+    public FilterIterator<E> makeEmptyIterator() {\n+        return makeBlockAllFilter(new ArrayIterator<E>(array));\n+    }\n+\n+    /**\n+     * Returns an array with elements wrapped in a pass-through\n+     * FilterIterator\n+     * \n+     * @return a filtered iterator\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public FilterIterator<E> makeObject() {\n+        list = new ArrayList<E>(Arrays.asList((E[]) array));\n+        return makePassThroughFilter(list.iterator());\n+    }\n+\n+    public void testRepeatedHasNext() {\n+        for (int i = 0; i <= array.length; i++) {\n+            assertTrue(iterator.hasNext());\n+        }\n+    }\n+\n+    public void testRepeatedNext() {\n+        for (int i = 0; i < array.length; i++) {\n+            iterator.next();\n+        }\n+        verifyNoMoreElements();\n+    }\n+\n+    public void testReturnValues() {\n+        verifyElementsInPredicate(new String[0]);\n+        verifyElementsInPredicate(new String[] { \"a\" });\n+        verifyElementsInPredicate(new String[] { \"b\" });\n+        verifyElementsInPredicate(new String[] { \"c\" });\n+        verifyElementsInPredicate(new String[] { \"a\", \"b\" });\n+        verifyElementsInPredicate(new String[] { \"a\", \"c\" });\n+        verifyElementsInPredicate(new String[] { \"b\", \"c\" });\n+        verifyElementsInPredicate(new String[] { \"a\", \"b\", \"c\" });\n+    }\n+\n+    /**\n+     * Test that when the iterator is changed, the hasNext method returns the\n+     * correct response for the new iterator.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSetIterator() {\n+        Iterator<E> iter1 = Collections.singleton((E) new Object()).iterator();\n+        Iterator<E> iter2 = Collections.<E>emptyList().iterator();\n+\n+        FilterIterator<E> filterIterator = new FilterIterator<E>(iter1);\n+        filterIterator.setPredicate(truePredicate());\n+        // this iterator has elements\n+        assertEquals(true, filterIterator.hasNext());\n+\n+        // this iterator has no elements\n+        filterIterator.setIterator(iter2);\n+        assertEquals(false, filterIterator.hasNext());\n+    }\n+\n+    /**\n+     * Test that when the predicate is changed, the hasNext method returns the\n+     * correct response for the new predicate.\n+     */\n+    public void testSetPredicate() {\n+        Iterator<E> iter = Collections.singleton((E) null).iterator();\n+\n+        FilterIterator<E> filterIterator = new FilterIterator<E>(iter);\n+        filterIterator.setPredicate(truePredicate());\n+        // this predicate matches\n+        assertEquals(true, filterIterator.hasNext());\n+\n+        // this predicate doesn't match\n+        filterIterator.setPredicate(NotNullPredicate.notNullPredicate());\n+        assertEquals(false, filterIterator.hasNext());\n+    }\n+\n+    private void verifyNoMoreElements() {\n+        assertTrue(!iterator.hasNext());\n+        try {\n+            iterator.next();\n+            fail(\"NoSuchElementException expected\");\n+        }\n+        catch (NoSuchElementException e) {\n+            // success\n+        }\n+    }\n+\n+    private void verifyElementsInPredicate(final String[] elements) {\n+        Predicate<E> pred = new Predicate<E>() {\n+            public boolean evaluate(E x) {\n+                for (int i = 0; i < elements.length; i++) {\n+                    if (elements[i].equals(x)) {\n+                        return true;\n+                    }\n+                }\n+                return false;\n+            }\n+        };\n+        initIterator();\n+        iterator.setPredicate(pred);\n+        for (int i = 0; i < elements.length; i++) {\n+            String s = (String)iterator.next();\n+            assertEquals(elements[i], s);\n+            assertTrue(i == elements.length - 1 ? !iterator.hasNext() : iterator.hasNext());\n+        }\n+        verifyNoMoreElements();\n+\n+        // test removal\n+        initIterator();\n+        iterator.setPredicate(pred);\n+        if (iterator.hasNext()) {\n+            Object last = iterator.next();\n+            iterator.remove();\n+            assertTrue(\"Base of FilterIterator still contains removed element.\", !list.contains(last));\n+        }\n+    }\n+\n+    private void initIterator() {\n+        iterator = makeObject();\n+    }\n+\n+    /**\n+     * Returns a FilterIterator that does not filter\n+     * any of its elements\n+     *\n+     * @param i      the Iterator to \"filter\"\n+     * @return \"filtered\" iterator\n+     */\n+    protected FilterIterator<E> makePassThroughFilter(Iterator<E> i) {\n+        Predicate<E> pred = new Predicate<E>() {\n+                public boolean evaluate(E x) { return true; }\n+        };\n+        return new FilterIterator<E>(i, pred);\n+    }\n+\n+    /**\n+     * Returns a FilterIterator that blocks\n+     * all of its elements\n+     *\n+     * @param i      the Iterator to \"filter\"\n+     * @return \"filtered\" iterator\n+     */\n+    protected FilterIterator<E> makeBlockAllFilter(Iterator<E> i) {\n+        Predicate<E> pred = new Predicate<E>() {\n+                public boolean evaluate(E x) { return false; }\n+        };\n+        return new FilterIterator<E>(i, pred);\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/FilterListIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Random;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.list.GrowthList;\n+import org.junit.Assert;\n+\n+/**\n+ * Tests the FilterListIterator class.\n+ *\n+ * @version $Id$\n+ */\n+@SuppressWarnings(\"boxing\")\n+public class FilterListIteratorTest extends TestCase {\n+    public FilterListIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    private ArrayList<Integer> list = null;\n+    private ArrayList<Integer> odds = null;\n+    private ArrayList<Integer> evens = null;\n+    private ArrayList<Integer> threes = null;\n+    private ArrayList<Integer> fours = null;\n+    private ArrayList<Integer> sixes = null;\n+    private Predicate<Integer> truePred = null;\n+    private Predicate<Integer> falsePred = null;\n+    private Predicate<Integer> evenPred = null;\n+    private Predicate<Integer> oddPred = null;\n+    private Predicate<Integer> threePred = null;\n+    private Predicate<Integer> fourPred = null;\n+    private Random random = new Random();\n+\n+    @Override\n+    public void setUp() {\n+        list = new ArrayList<Integer>();\n+        odds = new ArrayList<Integer>();\n+        evens = new ArrayList<Integer>();\n+        threes = new ArrayList<Integer>();\n+        fours = new ArrayList<Integer>();\n+        sixes = new ArrayList<Integer>();\n+        for (int i = 0; i < 20; i++) {\n+            list.add(new Integer(i));\n+            if (i % 2 == 0) { evens.add(new Integer(i)); }\n+            if (i % 2 == 1) { odds.add(new Integer(i)); }\n+            if (i % 3 == 0) { threes.add(new Integer(i)); }\n+            if (i % 4 == 0) { fours.add(new Integer(i)); }\n+            if (i % 6 == 0) { sixes.add(new Integer(i)); }\n+        }\n+\n+        truePred = new Predicate<Integer>() {\n+            public boolean evaluate(Integer x) { \n+                return true;\n+            }\n+        };\n+\n+        falsePred = new Predicate<Integer>() {\n+            public boolean evaluate(Integer x) { \n+                return true;\n+            }\n+        };\n+\n+        evenPred = new Predicate<Integer>() {\n+            public boolean evaluate(Integer x) { \n+                return x % 2 == 0;\n+            }\n+        };\n+\n+        oddPred = new Predicate<Integer>() {\n+            public boolean evaluate(Integer x) { \n+                return x % 2 == 1;\n+            }\n+        };\n+\n+        threePred = new Predicate<Integer>() {\n+            public boolean evaluate(Integer x) { \n+                return x % 3 == 0;\n+            }\n+        };\n+\n+        fourPred = new Predicate<Integer>() {\n+            public boolean evaluate(Integer x) { \n+                return x % 4 == 0;\n+            }\n+        };\n+\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        list = null;\n+        odds = null;\n+        evens = null;\n+        threes = null;\n+        fours = null;\n+        sixes = null;\n+        truePred = null;\n+        falsePred = null;\n+        evenPred = null;\n+        oddPred = null;\n+        threePred = null;\n+        fourPred = null;\n+    }\n+\n+    public void testWalkLists() {\n+        // this just confirms that our walkLists method works OK\n+        walkLists(list,list.listIterator());\n+    }\n+\n+    public void testManual() {\n+        // do this one \"by hand\" as a sanity check\n+        FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), threePred);\n+        \n+        assertEquals(new Integer(0), filtered.next());\n+        assertEquals(new Integer(3), filtered.next());\n+        assertEquals(new Integer(6), filtered.next());\n+        assertEquals(new Integer(9), filtered.next());\n+        assertEquals(new Integer(12), filtered.next());\n+        assertEquals(new Integer(15), filtered.next());\n+        assertEquals(new Integer(18), filtered.next());\n+\n+        assertEquals(new Integer(18), filtered.previous());\n+        assertEquals(new Integer(15), filtered.previous());\n+        assertEquals(new Integer(12), filtered.previous());\n+        assertEquals(new Integer(9), filtered.previous());\n+        assertEquals(new Integer(6), filtered.previous());\n+        assertEquals(new Integer(3), filtered.previous());\n+        assertEquals(new Integer(0), filtered.previous());\n+    \n+        assertTrue(!filtered.hasPrevious());\n+\n+        assertEquals(new Integer(0), filtered.next());\n+        assertEquals(new Integer(3), filtered.next());\n+        assertEquals(new Integer(6), filtered.next());\n+        assertEquals(new Integer(9), filtered.next());\n+        assertEquals(new Integer(12), filtered.next());\n+        assertEquals(new Integer(15), filtered.next());\n+        assertEquals(new Integer(18), filtered.next());\n+\n+        assertTrue(!filtered.hasNext());\n+\n+        assertEquals(new Integer(18), filtered.previous());\n+        assertEquals(new Integer(15), filtered.previous());\n+        assertEquals(new Integer(12), filtered.previous());\n+        assertEquals(new Integer(9), filtered.previous());\n+        assertEquals(new Integer(6), filtered.previous());\n+        assertEquals(new Integer(3), filtered.previous());\n+        assertEquals(new Integer(0), filtered.previous());\n+\n+        assertEquals(new Integer(0), filtered.next());\n+        assertEquals(new Integer(0), filtered.previous());\n+        assertEquals(new Integer(0), filtered.next());\n+\n+        assertEquals(new Integer(3), filtered.next());\n+        assertEquals(new Integer(6), filtered.next());\n+        assertEquals(new Integer(6), filtered.previous());\n+        assertEquals(new Integer(3), filtered.previous());\n+        assertEquals(new Integer(3), filtered.next());\n+        assertEquals(new Integer(6), filtered.next());\n+\n+        assertEquals(new Integer(9), filtered.next());\n+        assertEquals(new Integer(12), filtered.next());\n+        assertEquals(new Integer(15), filtered.next());\n+        assertEquals(new Integer(15), filtered.previous());\n+        assertEquals(new Integer(12), filtered.previous());\n+        assertEquals(new Integer(9), filtered.previous());\n+    }\n+\n+    public void testTruePredicate() {\n+        FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), truePred);\n+        walkLists(list, filtered);\n+    }\n+    \n+    public void testFalsePredicate() {\n+        FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), falsePred);\n+        walkLists(new ArrayList<Integer>(), filtered);\n+    }\n+\n+    public void testEvens() {\n+        FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), evenPred);\n+        walkLists(evens, filtered);\n+    }\n+    \n+    public void testOdds() {\n+        FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), oddPred);\n+        walkLists(odds, filtered);\n+    }\n+\n+    public void testThrees() {\n+        FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), threePred);\n+        walkLists(threes, filtered);\n+    }\n+\n+    public void testFours() {\n+        FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), fourPred);\n+        walkLists(fours, filtered);\n+    }\n+\n+    public void testNestedSixes() {\n+        FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(\n+                                        new FilterListIterator<Integer>(list.listIterator(), threePred),\n+                                        evenPred\n+                                      );\n+        walkLists(sixes, filtered);\n+    }\n+\n+    public void testNestedSixes2() {\n+        FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(\n+                                        new FilterListIterator<Integer>(list.listIterator(), evenPred),\n+                                        threePred\n+                                      );\n+        walkLists(sixes, filtered);\n+    }\n+\n+    public void testNestedSixes3() {        \n+        FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(\n+                                        new FilterListIterator<Integer>(list.listIterator(), threePred),\n+                                        evenPred\n+                                      );\n+        walkLists(sixes, new FilterListIterator<Integer>(filtered, truePred));\n+    }\n+\n+    public void testNextChangesPrevious() {\n+        {\n+            FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), threePred);\n+            nextNextPrevious(threes.listIterator(), filtered);\n+        }\n+    \n+        {\n+            FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), truePred);\n+            nextNextPrevious(list.listIterator(), filtered);\n+        }\n+    }\n+\n+    public void testPreviousChangesNext() {\n+        {\n+            FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), threePred);\n+            ListIterator<Integer> expected = threes.listIterator();\n+            walkForward(expected,filtered);\n+            previousPreviousNext(expected,filtered);\n+        }\n+        {\n+            FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), truePred);\n+            ListIterator<Integer> expected = list.listIterator();\n+            walkForward(expected, filtered);\n+            previousPreviousNext(expected, filtered);\n+        }\n+    }\n+\n+    public void testFailingHasNextBug() {\n+        FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), fourPred);\n+        ListIterator<Integer> expected = fours.listIterator();\n+        while (expected.hasNext()) {\n+            expected.next();\n+            filtered.next();\n+        }\n+        assertTrue(filtered.hasPrevious());\n+        assertTrue(!filtered.hasNext());\n+        assertEquals(expected.previous(), filtered.previous());\n+    }\n+\n+    /**\n+     * Test for {@link \"https://issues.apache.org/jira/browse/COLLECTIONS-360 COLLECTIONS-360\"}\n+     */\n+    public void testCollections360() throws Throwable {\n+        Collection<Predicate<Object>> var7 = new GrowthList<Predicate<Object>>();\n+        Predicate<Object> var9 = PredicateUtils.anyPredicate(var7);\n+        FilterListIterator<Object> var13 = new FilterListIterator<Object>(var9);\n+        Assert.assertFalse(var13.hasNext());\n+        FilterListIterator<Object> var14 = new FilterListIterator<Object>(var9);\n+        Assert.assertFalse(var14.hasPrevious());\n+    }\n+\n+    // Utilities\n+\n+    private void walkForward(ListIterator<?> expected, ListIterator<?> testing) {\n+        while (expected.hasNext()) {\n+            assertEquals(expected.nextIndex(), testing.nextIndex());\n+            assertEquals(expected.previousIndex(), testing.previousIndex());\n+            assertTrue(testing.hasNext());\n+            assertEquals(expected.next(), testing.next());\n+        }\n+    }\n+\n+    private void walkBackward(ListIterator<?> expected, ListIterator<?> testing) {\n+        while (expected.hasPrevious()) {\n+            assertEquals(expected.nextIndex(), testing.nextIndex());\n+            assertEquals(expected.previousIndex(), testing.previousIndex());\n+            assertTrue(testing.hasPrevious());\n+            assertEquals(expected.previous(), testing.previous());\n+        }\n+    }\n+\n+    private void nextNextPrevious(ListIterator<?> expected, ListIterator<?> testing) {\n+        // calls to next() should change the value returned by previous()\n+        // even after previous() has been set by a call to hasPrevious()\n+        assertEquals(expected.next(), testing.next());\n+        assertEquals(expected.hasPrevious(), testing.hasPrevious());\n+        Object expecteda = expected.next();\n+        Object testinga = testing.next();\n+        assertEquals(expecteda, testinga);\n+        Object expectedb = expected.previous();\n+        Object testingb = testing.previous();\n+        assertEquals(expecteda, expectedb);\n+        assertEquals(testinga, testingb);\n+    }\n+\n+    private void previousPreviousNext(ListIterator<?> expected, ListIterator<?> testing) {\n+        // calls to previous() should change the value returned by next()\n+        // even after next() has been set by a call to hasNext()\n+        assertEquals(expected.previous(), testing.previous());\n+        assertEquals(expected.hasNext(), testing.hasNext());\n+        Object expecteda = expected.previous();\n+        Object testinga = testing.previous();\n+        assertEquals(expecteda, testinga);\n+        Object expectedb = expected.next();\n+        Object testingb = testing.next();\n+        assertEquals(expecteda, testingb);\n+        assertEquals(expecteda, expectedb);\n+        assertEquals(testinga, testingb);\n+    }\n+\n+    private <E> void walkLists(List<E> list, ListIterator<E> testing) {\n+        ListIterator<E> expected = list.listIterator();\n+\n+        // walk all the way forward\n+        walkForward(expected,testing);\n+\n+        // walk all the way back\n+        walkBackward(expected,testing);\n+\n+        // forward,back,forward\n+        while (expected.hasNext()) {\n+            assertEquals(expected.nextIndex(), testing.nextIndex());\n+            assertEquals(expected.previousIndex(), testing.previousIndex());\n+            assertTrue(testing.hasNext());\n+            assertEquals(expected.next(), testing.next());\n+            assertTrue(testing.hasPrevious());\n+            assertEquals(expected.previous(), testing.previous());\n+            assertTrue(testing.hasNext());\n+            assertEquals(expected.next(), testing.next());\n+        }\n+\n+        // walk all the way back\n+        walkBackward(expected, testing);\n+\n+        for (int i = 0; i < list.size(); i++) {\n+            // walk forward i\n+            for (int j = 0; j < i; j++) {\n+                assertEquals(expected.nextIndex(), testing.nextIndex());\n+                assertEquals(expected.previousIndex(), testing.previousIndex());\n+                assertTrue(expected.hasNext()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasNext());\n+                assertEquals(expected.next(), testing.next());\n+            }\n+            // walk back i/2\n+            for (int j = 0; j < i / 2; j++) {\n+                assertEquals(expected.nextIndex(), testing.nextIndex());\n+                assertEquals(expected.previousIndex(), testing.previousIndex());\n+                assertTrue(expected.hasPrevious()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasPrevious());\n+                assertEquals(expected.previous(), testing.previous());\n+            }\n+            // walk forward i/2\n+            for (int j = 0; j < i / 2; j++) {\n+                assertEquals(expected.nextIndex(), testing.nextIndex());\n+                assertEquals(expected.previousIndex(), testing.previousIndex());\n+                assertTrue(expected.hasNext()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasNext());\n+                assertEquals(expected.next(), testing.next());\n+            }\n+            // walk back i\n+            for (int j = 0; j < i; j++) {\n+                assertEquals(expected.nextIndex(), testing.nextIndex());\n+                assertEquals(expected.previousIndex(), testing.previousIndex());\n+                assertTrue(expected.hasPrevious()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasPrevious());\n+                assertEquals(expected.previous(), testing.previous());\n+            }\n+        }\n+\n+        // random walk\n+        StringBuilder walkdescr = new StringBuilder(500);\n+        for (int i = 0; i < 500; i++) {\n+            if (random.nextBoolean()) {\n+                // step forward\n+                walkdescr.append(\"+\");\n+                if (expected.hasNext()) {\n+                    assertEquals(walkdescr.toString(), expected.next(), testing.next());\n+                }\n+            } else {\n+                // step backward\n+                walkdescr.append(\"-\");\n+                if (expected.hasPrevious()) {\n+                    assertEquals(walkdescr.toString(), expected.previous(), testing.previous());\n+                }\n+            }\n+            assertEquals(walkdescr.toString(), expected.nextIndex(), testing.nextIndex());\n+            assertEquals(walkdescr.toString(), expected.previousIndex(), testing.previousIndex());\n+        }\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/IteratorChainTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Tests the IteratorChain class.\n+ *\n+ * @version $Id$\n+ */\n+public class IteratorChainTest extends AbstractIteratorTest<String> {\n+\n+    protected String[] testArray = {\n+        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n+    };\n+\n+    protected List<String> list1 = null;\n+    protected List<String> list2 = null;\n+    protected List<String> list3 = null;\n+\n+    public IteratorChainTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public void setUp() {\n+        list1 = new ArrayList<String>();\n+        list1.add(\"One\");\n+        list1.add(\"Two\");\n+        list1.add(\"Three\");\n+        list2 = new ArrayList<String>();\n+        list2.add(\"Four\");\n+        list3 = new ArrayList<String>();\n+        list3.add(\"Five\");\n+        list3.add(\"Six\");        \n+    }\n+\n+    @Override\n+    public IteratorChain<String> makeEmptyIterator() {\n+        ArrayList<String> list = new ArrayList<String>();\n+        return new IteratorChain<String>(list.iterator());\n+    }\n+\n+    @Override\n+    public IteratorChain<String> makeObject() {\n+        IteratorChain<String> chain = new IteratorChain<String>();\n+\n+        chain.addIterator(list1.iterator());\n+        chain.addIterator(list2.iterator());\n+        chain.addIterator(list3.iterator());\n+        return chain;\n+    }\n+\n+    public void testIterator() {\n+        Iterator<String> iter = makeObject();\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];            \n+            Object iterValue = iter.next();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\", \n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+    public void testRemoveFromFilteredIterator() {\n+\n+        final Predicate<Integer> myPredicate = new Predicate<Integer>() {\n+            public boolean evaluate(Integer i) {\n+                return i.compareTo(new Integer(4)) < 0;\n+            }\n+        };\n+\n+        List<Integer> list1 = new ArrayList<Integer>();\n+        List<Integer> list2 = new ArrayList<Integer>();\n+\n+        list1.add(new Integer(1));\n+        list1.add(new Integer(2));\n+        list2.add(new Integer(3));\n+        list2.add(new Integer(4)); // will be ignored by the predicate\n+\n+        Iterator<Integer> it1 = IteratorUtils.filteredIterator(list1.iterator(), myPredicate);\n+        Iterator<Integer> it2 = IteratorUtils.filteredIterator(list2.iterator(), myPredicate);\n+\n+        Iterator<Integer> it = IteratorUtils.chainedIterator(it1, it2);\n+        while (it.hasNext()) {\n+            it.next();\n+            it.remove();\n+        }\n+        assertEquals(0, list1.size());\n+        assertEquals(1, list2.size());\n+    }\n+    \n+    @Override\n+    public void testRemove() {\n+        Iterator<String> iter = makeObject();\n+\n+        try {\n+            iter.remove();\n+            fail(\"Calling remove before the first call to next() should throw an exception\");\n+        } catch (IllegalStateException e) {\n+\n+        }\n+\n+        for (int i = 0; i < testArray.length; i++) {\n+            String testValue = testArray[i];            \n+            String iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+\n+            if (!iterValue.equals(\"Four\")) {\n+                iter.remove();\n+            }\n+        }\n+\n+        assertTrue(\"List is empty\",list1.size() == 0);\n+        assertTrue(\"List is empty\",list2.size() == 1);\n+        assertTrue(\"List is empty\",list3.size() == 0);\n+    }\n+\n+    public void testFirstIteratorIsEmptyBug() {\n+        List<String> empty = new ArrayList<String>();\n+        List<String> notEmpty = new ArrayList<String>();\n+        notEmpty.add(\"A\");\n+        notEmpty.add(\"B\");\n+        notEmpty.add(\"C\");\n+        IteratorChain<String> chain = new IteratorChain<String>();\n+        chain.addIterator(empty.iterator());\n+        chain.addIterator(notEmpty.iterator());\n+        assertTrue(\"should have next\",chain.hasNext());\n+        assertEquals(\"A\",chain.next());\n+        assertTrue(\"should have next\",chain.hasNext());\n+        assertEquals(\"B\",chain.next());\n+        assertTrue(\"should have next\",chain.hasNext());\n+        assertEquals(\"C\",chain.next());\n+        assertTrue(\"should not have next\",!chain.hasNext());\n+    }\n+    \n+    public void testEmptyChain() {\n+        IteratorChain<Object> chain = new IteratorChain<Object>();\n+        assertEquals(false, chain.hasNext());\n+        try {\n+            chain.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        try {\n+            chain.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/IteratorIterableTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n+ * or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the specific language\n+ * governing permissions and limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Tests for IteratorIterable.\n+ * \n+ * @version $Id$\n+ */\n+public class IteratorIterableTest extends BulkTest {\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(IteratorIterableTest.class);\n+    }\n+\n+    public IteratorIterableTest(String name) {\n+        super(name);\n+    }\n+\n+    private Iterator<Integer> createIterator() {\n+        List<Integer> list = new ArrayList<Integer>();\n+        list.add(Integer.valueOf(0));\n+        list.add(Integer.valueOf(1));\n+        list.add(Integer.valueOf(2));\n+        Iterator<Integer> iter = list.iterator();\n+        return iter;\n+    }\n+\n+    public void testIterator() {\n+        Iterator<Integer> iter = createIterator();\n+        Iterable<Number> iterable = new IteratorIterable<Number>(iter);\n+        \n+        // first use\n+        verifyIteration(iterable);\n+        \n+        // second use\n+        for (@SuppressWarnings(\"unused\") Number actual : iterable) {\n+            fail(\"should not be able to iterate twice\");\n+        }\n+    }\n+\n+    public void testMultipleUserIterator() {\n+        Iterator<Integer> iter = createIterator();\n+\n+        Iterable<Number> iterable = new IteratorIterable<Number>(iter, true);\n+        \n+        // first use\n+        verifyIteration(iterable);\n+        \n+        // second use\n+        verifyIteration(iterable);\n+    }\n+\n+    private void verifyIteration(Iterable<Number> iterable) {\n+        int expected = 0;\n+        for (Number actual : iterable) {\n+            assertEquals(expected, actual.intValue());\n+            ++expected;\n+        }\n+        assertTrue(expected > 0);\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/ListIteratorWrapper2Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.ResettableListIterator;\n+\n+/**\n+ * Tests the ListIteratorWrapper to insure that it behaves as expected when wrapping a ListIterator.\n+ *\n+ * @version $Id$\n+ */\n+public class ListIteratorWrapper2Test<E> extends AbstractIteratorTest<E> {\n+\n+    protected String[] testArray = {\n+        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n+    };\n+\n+    protected List<E> list1 = null;\n+\n+    public ListIteratorWrapper2Test(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void setUp() {\n+        list1 = new ArrayList<E>();\n+        list1.add((E) \"One\");\n+        list1.add((E) \"Two\");\n+        list1.add((E) \"Three\");\n+        list1.add((E) \"Four\");\n+        list1.add((E) \"Five\");\n+        list1.add((E) \"Six\");\n+    }\n+\n+    @Override\n+    public ResettableListIterator<E> makeEmptyIterator() {\n+        ArrayList<E> list = new ArrayList<E>();\n+        return new ListIteratorWrapper<E>(list.listIterator());\n+    }\n+\n+    @Override\n+    public ResettableListIterator<E> makeObject() {\n+        return new ListIteratorWrapper<E>(list1.listIterator());\n+    }\n+\n+    public void testIterator() {\n+        ListIterator<E> iter = makeObject();\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            Object iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\",\n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+        // now, read it backwards\n+        for (int i = testArray.length - 1; i > -1; --i) {\n+            Object testValue = testArray[i];\n+            E iterValue = iter.previous();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+\n+        try {\n+            iter.previous();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\",\n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+        // now, read it forwards again\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            Object iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+    }\n+\n+    @Override\n+    public void testRemove() {\n+        ListIterator<E> iter = makeObject();\n+\n+        //initial state:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        try {\n+            iter.remove();\n+            fail(\"ListIteratorWrapper#remove() should fail; must be initially positioned first\");\n+        } catch (IllegalStateException e) {\n+        }\n+\n+        //no change from invalid op:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //establish size:\n+        int sz = list1.size();\n+\n+        //verify initial next() call:\n+        assertEquals(list1.get(0), iter.next());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //verify remove():\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        //like we never started iterating:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+ \n+        try {\n+            iter.remove();\n+            fail(\"ListIteratorWrapper#remove() should fail; must be repositioned first\");\n+        } catch (IllegalStateException e) {\n+        }\n+\n+        //no change from invalid op:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //two consecutive next() calls:\n+        assertEquals(list1.get(0), iter.next());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        assertEquals(list1.get(1), iter.next());\n+        assertEquals(1, iter.previousIndex());\n+        assertEquals(2, iter.nextIndex());\n+\n+        //call previous():\n+        assertEquals(list1.get(1), iter.previous());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //should support remove() after calling previous() once from tip because we haven't changed the underlying iterator's position:\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //this would dig into cache on a plain Iterator, but forwards directly to wrapped ListIterator:\n+        assertEquals(list1.get(0), iter.previous());\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //here's the proof; remove() still works:\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //further testing would be fairly meaningless:\n+    }\n+\n+    public void testReset() {\n+        ResettableListIterator<E> iter = makeObject();\n+        E first = iter.next();\n+        E second = iter.next();\n+\n+        iter.reset();\n+\n+        // after reset, there shouldn't be any previous elements\n+        assertFalse(\"No previous elements after reset()\", iter.hasPrevious());\n+\n+        // after reset, the results should be the same as before\n+        assertEquals(\"First element should be the same\", first, iter.next());\n+        assertEquals(\"Second elment should be the same\", second, iter.next());\n+\n+        // after passing the point, where we resetted, continuation should work as expected\n+        for (int i = 2; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            E iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/ListIteratorWrapperTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.ResettableListIterator;\n+\n+/**\n+ * Tests the ListIteratorWrapper to insure that it simulates\n+ * a ListIterator correctly.\n+ *\n+ * @version $Id$\n+ */\n+public class ListIteratorWrapperTest<E> extends AbstractIteratorTest<E> {\n+\n+    protected String[] testArray = {\n+        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n+    };\n+\n+    protected List<E> list1 = null;\n+\n+    public ListIteratorWrapperTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void setUp() {\n+        list1 = new ArrayList<E>();\n+        list1.add((E) \"One\");\n+        list1.add((E) \"Two\");\n+        list1.add((E) \"Three\");\n+        list1.add((E) \"Four\");\n+        list1.add((E) \"Five\");\n+        list1.add((E) \"Six\");\n+    }\n+\n+    @Override\n+    public ResettableListIterator<E> makeEmptyIterator() {\n+        ArrayList<E> list = new ArrayList<E>();\n+        return new ListIteratorWrapper<E>(list.iterator());\n+    }\n+\n+    @Override\n+    public ResettableListIterator<E> makeObject() {\n+        return new ListIteratorWrapper<E>(list1.iterator());\n+    }\n+\n+    public void testIterator() {\n+        ListIterator<E> iter = makeObject();\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            Object iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\",\n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+        // now, read it backwards\n+        for (int i = testArray.length - 1; i > -1; --i) {\n+            Object testValue = testArray[i];\n+            E iterValue = iter.previous();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+\n+        try {\n+            iter.previous();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\",\n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+        // now, read it forwards again\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            Object iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+    }\n+\n+    @Override\n+    public void testRemove() {\n+        ListIterator<E> iter = makeObject();\n+\n+        //initial state:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        try {\n+            iter.remove();\n+            fail(\"ListIteratorWrapper#remove() should fail; must be initially positioned first\");\n+        } catch (IllegalStateException e) {\n+        }\n+\n+        //no change from invalid op:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //establish size:\n+        int sz = list1.size();\n+\n+        //verify initial next() call:\n+        assertEquals(list1.get(0), iter.next());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //verify remove():\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        //like we never started iterating:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+ \n+        try {\n+            iter.remove();\n+            fail(\"ListIteratorWrapper#remove() should fail; must be repositioned first\");\n+        } catch (IllegalStateException e) {\n+        }\n+\n+        //no change from invalid op:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //two consecutive next() calls:\n+        assertEquals(list1.get(0), iter.next());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        assertEquals(list1.get(1), iter.next());\n+        assertEquals(1, iter.previousIndex());\n+        assertEquals(2, iter.nextIndex());\n+\n+        //call previous():\n+        assertEquals(list1.get(1), iter.previous());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //should support remove() after calling previous() once from tip because we haven't changed the underlying iterator's position:\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        //dig into cache\n+        assertEquals(list1.get(0), iter.previous());\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        try {\n+            iter.remove();\n+            fail(\"ListIteratorWrapper does not support the remove() method while dug into the cache via previous()\");\n+        } catch (IllegalStateException e) {\n+        }\n+\n+        //no change from invalid op:\n+        assertEquals(-1, iter.previousIndex());\n+        assertEquals(0, iter.nextIndex());\n+\n+        //dig out of cache, first next() maintains current position:\n+        assertEquals(list1.get(0), iter.next());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+        //continue traversing underlying iterator with this next() call, and we're out of the hole, so to speak:\n+        assertEquals(list1.get(1), iter.next());\n+        assertEquals(1, iter.previousIndex());\n+        assertEquals(2, iter.nextIndex());\n+\n+        //verify remove() works again:\n+        iter.remove();\n+        assertEquals(--sz, list1.size());\n+        assertEquals(0, iter.previousIndex());\n+        assertEquals(1, iter.nextIndex());\n+\n+        assertEquals(list1.get(1), iter.next());\n+        assertEquals(1, iter.previousIndex());\n+        assertEquals(2, iter.nextIndex());\n+\n+    }\n+\n+    public void testReset() {\n+        ResettableListIterator<E> iter = makeObject();\n+        E first = iter.next();\n+        E second = iter.next();\n+\n+        iter.reset();\n+\n+        // after reset, there shouldn't be any previous elements\n+        assertFalse(\"No previous elements after reset()\", iter.hasPrevious());\n+\n+        // after reset, the results should be the same as before\n+        assertEquals(\"First element should be the same\", first, iter.next());\n+        assertEquals(\"Second elment should be the same\", second, iter.next());\n+\n+        // after passing the point, where we resetted, continuation should work as expected\n+        for (int i = 2; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            E iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/LoopingIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests the LoopingIterator class.\n+ *\n+ * @version $Id$\n+ */\n+public class LoopingIteratorTest extends TestCase {\n+\n+    public LoopingIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * Tests constructor exception.\n+     */\n+    public void testConstructorEx() throws Exception {\n+        try {\n+            new LoopingIterator<Object>(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+        }\n+    }\n+    \n+    /**\n+     * Tests whether an empty looping iterator works as designed.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testLooping0() throws Exception {\n+        List<Object> list = new ArrayList<Object>();\n+        LoopingIterator<Object> loop = new LoopingIterator<Object>(list);\n+        assertTrue(\"hasNext should return false\", loop.hasNext() == false);\n+\n+        try {\n+            loop.next();\n+            fail(\"NoSuchElementException was not thrown during next() call.\");\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    /**\n+     * Tests whether a populated looping iterator works as designed.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testLooping1() throws Exception {\n+        List<String> list = Arrays.asList(new String[] { \"a\" });\n+        LoopingIterator<String> loop = new LoopingIterator<String>(list);\n+\n+        assertTrue(\"1st hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+        assertTrue(\"2nd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+        assertTrue(\"3rd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+    }\n+\n+    /**\n+     * Tests whether a populated looping iterator works as designed.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testLooping2() throws Exception {\n+        List<String> list = Arrays.asList(new String[] { \"a\", \"b\" });\n+        LoopingIterator<String> loop = new LoopingIterator<String>(list);\n+\n+        assertTrue(\"1st hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+        assertTrue(\"2nd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"b\", loop.next());\n+\n+        assertTrue(\"3rd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+    }\n+\n+    /**\n+     * Tests whether a populated looping iterator works as designed.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testLooping3() throws Exception {\n+        List<String> list = Arrays.asList(new String[] { \"a\", \"b\", \"c\" });\n+        LoopingIterator<String> loop = new LoopingIterator<String>(list);\n+\n+        assertTrue(\"1st hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+        assertTrue(\"2nd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"b\", loop.next());\n+\n+        assertTrue(\"3rd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"c\", loop.next());\n+\n+        assertTrue(\"4th hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+\n+    }\n+\n+    /**\n+     * Tests the remove() method on a LoopingIterator wrapped ArrayList.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testRemoving1() throws Exception {\n+        List<String> list = new ArrayList<String>(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        LoopingIterator<String> loop = new LoopingIterator<String>(list);\n+        assertEquals(\"list should have 3 elements.\", 3, list.size());\n+\n+        assertTrue(\"1st hasNext should return true\", loop.hasNext());\n+        assertEquals(\"a\", loop.next());\n+        loop.remove();  // removes a\n+        assertEquals(\"list should have 2 elements.\", 2, list.size());\n+\n+        assertTrue(\"2nd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"b\", loop.next());\n+        loop.remove();  // removes b\n+        assertEquals(\"list should have 1 elements.\", 1, list.size());\n+\n+        assertTrue(\"3rd hasNext should return true\", loop.hasNext());\n+        assertEquals(\"c\", loop.next());\n+        loop.remove();  // removes c\n+        assertEquals(\"list should have 0 elements.\", 0, list.size());\n+\n+        assertTrue(\"4th hasNext should return false\", loop.hasNext() == false);\n+        try {\n+            loop.next();\n+            fail(\"Expected NoSuchElementException to be thrown.\");\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    /**\n+     * Tests the reset() method on a LoopingIterator wrapped ArrayList.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testReset() throws Exception {\n+        List<String> list = Arrays.asList(new String[] { \"a\", \"b\", \"c\" });\n+        LoopingIterator<String> loop = new LoopingIterator<String>(list);\n+\n+        assertEquals(\"a\", loop.next());\n+        assertEquals(\"b\", loop.next());\n+        loop.reset();\n+        assertEquals(\"a\", loop.next());\n+        loop.reset();\n+        assertEquals(\"a\", loop.next());\n+        assertEquals(\"b\", loop.next());\n+        assertEquals(\"c\", loop.next());\n+        loop.reset();\n+        assertEquals(\"a\", loop.next());\n+        assertEquals(\"b\", loop.next());\n+        assertEquals(\"c\", loop.next());\n+    }\n+    \n+    /**\n+     * Tests the size() method on a LoopingIterator wrapped ArrayList.\n+     * @throws Exception  If something unexpected occurs.\n+     */\n+    public void testSize() throws Exception {\n+        List<String> list = new ArrayList<String>(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        LoopingIterator<String> loop = new LoopingIterator<String>(list);\n+\n+        assertEquals(3, loop.size());\n+        loop.next();\n+        loop.next();\n+        assertEquals(3, loop.size());\n+        loop.reset();\n+        assertEquals(3, loop.size());\n+        loop.next();\n+        loop.remove();\n+        assertEquals(2, loop.size());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/LoopingListIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests the LoopingListIterator class.\n+ *\n+ * @version $Id$\n+ */\n+public class LoopingListIteratorTest extends TestCase {\n+\n+    public LoopingListIteratorTest(String testName) {\n+        super(testName);\n+    }\n+    \n+    /**\n+     * Tests constructor exception.\n+     */\n+    public void testConstructorEx() throws Exception {\n+        try {\n+            new LoopingListIterator<Object>(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+        }\n+    }\n+\n+    /**\n+     * Tests whether an empty looping list iterator works.\n+     */\n+    public void testLooping0() throws Exception {\n+        List<Object> list = new ArrayList<Object>();\n+        LoopingListIterator<Object> loop = new LoopingListIterator<Object>(list);\n+        assertFalse(loop.hasNext());\n+        assertFalse(loop.hasPrevious());\n+        \n+        try {\n+            loop.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+\n+        try {\n+            loop.previous();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    /**\n+     * Tests whether a looping list iterator works on a list with only\n+     * one element.\n+     */\n+    public void testLooping1() throws Exception {\n+        List<String> list = Arrays.asList(new String[] { \"a\" });\n+        LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a>\n+\n+        assertTrue(loop.hasNext());\n+        assertEquals(\"a\", loop.next());     // <a>\n+\n+        assertTrue(loop.hasNext());\n+        assertEquals(\"a\", loop.next());     // <a>\n+\n+        assertTrue(loop.hasNext());\n+        assertEquals(\"a\", loop.next());     // <a>\n+\n+        assertTrue(loop.hasPrevious());\n+        assertEquals(\"a\", loop.previous()); // <a>\n+\n+        assertTrue(loop.hasPrevious());\n+        assertEquals(\"a\", loop.previous()); // <a>\n+\n+        assertTrue(loop.hasPrevious());\n+        assertEquals(\"a\", loop.previous()); // <a>\n+    }\n+\n+    /**\n+     * Tests whether a looping list iterator works on a list with two\n+     * elements.\n+     */\n+    public void testLooping2() throws Exception {\n+        List<String> list = Arrays.asList(new String[] { \"a\", \"b\" });\n+        LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b\n+\n+        assertTrue(loop.hasNext());\n+        assertEquals(\"a\", loop.next());     // a <b>\n+\n+        assertTrue(loop.hasNext());\n+        assertEquals(\"b\", loop.next());     // <a> b\n+\n+        assertTrue(loop.hasNext());\n+        assertEquals(\"a\", loop.next());     // a <b>\n+\n+        // Reset the iterator and try using previous.\n+        loop.reset();                       // <a> b\n+\n+        assertTrue(loop.hasPrevious());\n+        assertEquals(\"b\", loop.previous()); // a <b>\n+\n+        assertTrue(loop.hasPrevious());\n+        assertEquals(\"a\", loop.previous()); // <a> b\n+\n+        assertTrue(loop.hasPrevious());\n+        assertEquals(\"b\", loop.previous()); // a <b>\n+    }\n+\n+    /**\n+     * Tests jogging back and forth between two elements, but not over\n+     * the begin/end boundary of the list.\n+     */\n+    public void testJoggingNotOverBoundary() {\n+        List<String> list = Arrays.asList(new String[] { \"a\", \"b\" });\n+        LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b\n+    \n+        // Try jogging back and forth between the elements, but not\n+        // over the begin/end boundary.\n+        loop.reset();\n+        assertEquals(\"a\", loop.next());     // a <b>\n+        assertEquals(\"a\", loop.previous()); // <a> b\n+        assertEquals(\"a\", loop.next());     // a <b>\n+\n+        assertEquals(\"b\", loop.next());     // <a> b\n+        assertEquals(\"b\", loop.previous()); // a <b>\n+        assertEquals(\"b\", loop.next());     // <a> b\n+    }\n+\n+    /**\n+     * Tests jogging back and forth between two elements over the\n+     * begin/end boundary of the list.\n+     */\n+    public void testJoggingOverBoundary() {\n+        List<String> list = Arrays.asList(new String[] { \"a\", \"b\" });\n+        LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b\n+    \n+        // Try jogging back and forth between the elements, but not\n+        // over the begin/end boundary.\n+        assertEquals(\"b\", loop.previous()); // a <b>\n+        assertEquals(\"b\", loop.next());     // <a> b\n+        assertEquals(\"b\", loop.previous()); // a <b>\n+\n+        assertEquals(\"a\", loop.previous()); // <a> b\n+        assertEquals(\"a\", loop.next());     // a <b>\n+        assertEquals(\"a\", loop.previous()); // <a> b\n+    }\n+\n+    /**\n+     * Tests removing an element from a wrapped ArrayList.\n+     */\n+    public void testRemovingElementsAndIteratingForward() {\n+        List<String> list = new ArrayList<String>(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b c\n+\n+        assertTrue(loop.hasNext());\n+        assertEquals(\"a\", loop.next()); // a <b> c\n+        loop.remove();                  // <b> c\n+        assertEquals(2, list.size());\n+\n+        assertTrue(loop.hasNext());\n+        assertEquals(\"b\", loop.next()); // b <c>\n+        loop.remove();                  // <c>\n+        assertEquals(1, list.size());\n+\n+        assertTrue(loop.hasNext());\n+        assertEquals(\"c\", loop.next()); // <c>\n+        loop.remove();                  // ---\n+        assertEquals(0, list.size());\n+\n+        assertFalse(loop.hasNext());\n+        try {\n+            loop.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    /**\n+     * Tests removing an element from a wrapped ArrayList.\n+     */\n+    public void testRemovingElementsAndIteratingBackwards() {\n+        List<String> list = new ArrayList<String>(Arrays.asList(new String[] { \"a\", \"b\", \"c\" }));\n+        LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b c\n+\n+        assertTrue(loop.hasPrevious());\n+        assertEquals(\"c\", loop.previous()); // a b <c>\n+        loop.remove();                      // <a> b\n+        assertEquals(2, list.size());\n+\n+        assertTrue(loop.hasPrevious());\n+        assertEquals(\"b\", loop.previous()); // a <b>\n+        loop.remove();                      // <a>\n+        assertEquals(1, list.size());\n+\n+        assertTrue(loop.hasPrevious());\n+        assertEquals(\"a\", loop.previous()); // <a>\n+        loop.remove();                      // ---\n+        assertEquals(0, list.size());\n+\n+        assertFalse(loop.hasPrevious());\n+        try {\n+            loop.previous();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    /**\n+     * Tests the reset method.\n+     */\n+    public void testReset() {\n+        List<String> list = Arrays.asList(new String[] { \"a\", \"b\", \"c\" });\n+        LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b c\n+\n+        assertEquals(\"a\", loop.next()); // a <b> c\n+        assertEquals(\"b\", loop.next()); // a b <c>\n+        loop.reset();                   // <a> b c\n+        assertEquals(\"a\", loop.next()); // a <b> c\n+        loop.reset();                   // <a> b c\n+        assertEquals(\"a\", loop.next()); // a <b> c\n+        assertEquals(\"b\", loop.next()); // a b <c>\n+        assertEquals(\"c\", loop.next()); // <a> b c\n+        loop.reset();                   // <a> b c\n+\n+        assertEquals(\"c\", loop.previous()); // a b <c>\n+        assertEquals(\"b\", loop.previous()); // a <b> c\n+        loop.reset();                       // <a> b c\n+        assertEquals(\"c\", loop.previous()); // a b <c>\n+        loop.reset();                       // <a> b c\n+        assertEquals(\"c\", loop.previous()); // a b <c>\n+        assertEquals(\"b\", loop.previous()); // a <b> c\n+        assertEquals(\"a\", loop.previous()); // <a> b c\n+    }\n+\n+    /**\n+     * Tests the add method.\n+     */\n+    public void testAdd() {\n+        List<String> list = new ArrayList<String>(Arrays.asList(new String[] { \"b\", \"e\", \"f\" }));\n+        LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <b> e f\n+\n+        loop.add(\"a\");                      // <a> b e f\n+        assertEquals(\"b\", loop.next());     // a <b> e f\n+        loop.reset();                       // <a> b e f\n+        assertEquals(\"a\", loop.next());     // a <b> e f\n+        assertEquals(\"b\", loop.next());     // a b <e> f\n+\n+        loop.add(\"c\");                      // a b c <e> f\n+        assertEquals(\"e\", loop.next());     // a b c e <f>\n+        assertEquals(\"e\", loop.previous()); // a b c <e> f\n+        assertEquals(\"c\", loop.previous()); // a b <c> e f\n+        assertEquals(\"c\", loop.next());     // a b c <e> f\n+        \n+        loop.add(\"d\");                      // a b c d <e> f\n+        loop.reset();                       // <a> b c d e f\n+        assertEquals(\"a\", loop.next());     // a <b> c d e f\n+        assertEquals(\"b\", loop.next());     // a b <c> d e f\n+        assertEquals(\"c\", loop.next());     // a b c <d> e f\n+        assertEquals(\"d\", loop.next());     // a b c d <e> f\n+        assertEquals(\"e\", loop.next());     // a b c d e <f>\n+        assertEquals(\"f\", loop.next());     // <a> b c d e f\n+        assertEquals(\"a\", loop.next());     // a <b> c d e f\n+\n+        list = new ArrayList<String>(Arrays.asList(new String[] { \"b\", \"e\", \"f\" }));\n+        loop = new LoopingListIterator<String>(list); // <b> e f        \n+\n+        loop.add(\"a\");                      // a <b> e f\n+        assertEquals(\"a\", loop.previous()); // a b e <f>\n+        loop.reset();                       // <a> b e f\n+        assertEquals(\"f\", loop.previous()); // a b e <f>\n+        assertEquals(\"e\", loop.previous()); // a b <e> f\n+\n+        loop.add(\"d\");                      // a b d <e> f\n+        assertEquals(\"d\", loop.previous()); // a b <d> e f\n+\n+        loop.add(\"c\");                      // a b c <d> e f\n+        assertEquals(\"c\", loop.previous()); // a b <c> d e f\n+\n+        loop.reset();\n+        assertEquals(\"a\", loop.next());     // a <b> c d e f\n+        assertEquals(\"b\", loop.next());     // a b <c> d e f\n+        assertEquals(\"c\", loop.next());     // a b c <d> e f\n+        assertEquals(\"d\", loop.next());     // a b c d <e> f\n+        assertEquals(\"e\", loop.next());     // a b c d e <f>\n+        assertEquals(\"f\", loop.next());     // <a> b c d e f\n+        assertEquals(\"a\", loop.next());     // a <b> c d e f\n+    }\n+\n+    /**\n+     * Tests nextIndex and previousIndex.\n+     */\n+    public void testNextAndPreviousIndex() {\n+        List<String> list = Arrays.asList(new String[] { \"a\", \"b\", \"c\" });\n+        LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <a> b c\n+\n+        assertEquals(0, loop.nextIndex());\n+        assertEquals(2, loop.previousIndex());\n+\n+        assertEquals(\"a\", loop.next());        // a <b> c\n+        assertEquals(1, loop.nextIndex());\n+        assertEquals(0, loop.previousIndex());\n+\n+        assertEquals(\"a\", loop.previous());    // <a> b c\n+        assertEquals(0, loop.nextIndex());\n+        assertEquals(2, loop.previousIndex());\n+\n+        assertEquals(\"c\", loop.previous());    // a b <c>\n+        assertEquals(2, loop.nextIndex());\n+        assertEquals(1, loop.previousIndex());\n+\n+        assertEquals(\"b\", loop.previous());    // a <b> c\n+        assertEquals(1, loop.nextIndex());\n+        assertEquals(0, loop.previousIndex());\n+\n+        assertEquals(\"a\", loop.previous());    // <a> b c\n+        assertEquals(0, loop.nextIndex());\n+        assertEquals(2, loop.previousIndex());\n+    }\n+\n+    /**\n+     * Tests using the set method to change elements.\n+     */\n+    public void testSet() {\n+        List<String> list = Arrays.asList(new String[] { \"q\", \"r\", \"z\" });\n+        LoopingListIterator<String> loop = new LoopingListIterator<String>(list); // <q> r z\n+\n+        assertEquals(\"z\", loop.previous()); // q r <z>\n+        loop.set(\"c\");                      // q r <c>\n+\n+        loop.reset();                       // <q> r c\n+        assertEquals(\"q\", loop.next());     // q <r> c\n+        loop.set(\"a\");                      // a <r> c\n+        \n+        assertEquals(\"r\", loop.next());     // a r <c>\n+        loop.set(\"b\");                      // a b <c>\n+\n+        loop.reset();                       // <a> b c\n+        assertEquals(\"a\", loop.next());     // a <b> c\n+        assertEquals(\"b\", loop.next());     // a b <c>\n+        assertEquals(\"c\", loop.next());     // <a> b c\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/ObjectArrayIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the ObjectArrayIterator.\n+ *\n+ * @version $Id$\n+ */\n+public class ObjectArrayIteratorTest<E> extends AbstractIteratorTest<E> {\n+\n+    protected String[] testArray = { \"One\", \"Two\", \"Three\" };\n+\n+    public ObjectArrayIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public ObjectArrayIterator<E> makeEmptyIterator() {\n+        return new ObjectArrayIterator<E>((E[]) new Object[0]);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public ObjectArrayIterator<E> makeObject() {\n+        return new ObjectArrayIterator<E>((E[]) testArray);\n+    }\n+\n+    public ObjectArrayIterator<E> makeArrayIterator() {\n+        return new ObjectArrayIterator<E>();\n+    }\n+\n+    public ObjectArrayIterator<E> makeArrayIterator(E[] array) {\n+        return new ObjectArrayIterator<E>(array);\n+    }\n+\n+    public ObjectArrayIterator<E> makeArrayIterator(E[] array, int index) {\n+        return new ObjectArrayIterator<E>(array, index);\n+    }\n+\n+    public ObjectArrayIterator<E> makeArrayIterator(E[] array, int start, int end) {\n+        return new ObjectArrayIterator<E>(array, start, end);\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    public void testIterator() {\n+        Iterator<E> iter = makeObject();\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];\n+            E iterValue = iter.next();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+    public void testNullArray() {\n+        try {\n+            makeArrayIterator(null);\n+\n+            fail(\"Constructor should throw a NullPointerException when constructed with a null array\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        ObjectArrayIterator<E> iter = makeArrayIterator();\n+        try {\n+            iter.setArray(null);\n+\n+            fail(\"setArray(null) should throw a NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testDoubleSet() {\n+        ObjectArrayIterator<E> it = makeArrayIterator();\n+        it.setArray((E[]) new String[0]);\n+        try {\n+            it.setArray((E[]) new String[0]);\n+            fail();\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testReset() {\n+        ObjectArrayIterator<E> it = makeArrayIterator((E[]) testArray);\n+        it.next();\n+        it.reset();\n+        assertEquals(\"One\", it.next());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/ObjectArrayListIterator2Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+/**\n+ * Tests the ObjectArrayListIterator class.\n+ *\n+ * @version $Id$\n+ */\n+public class ObjectArrayListIterator2Test<E> extends AbstractListIteratorTest<E> {\n+\n+    protected String[] testArray = { \"One\", \"Two\", \"Three\" };\n+\n+    public ObjectArrayListIterator2Test(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public ObjectArrayListIterator<E> makeEmptyIterator() {\n+        return new ObjectArrayListIterator<E>((E[]) new Object[0]);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public ObjectArrayListIterator<E> makeObject() {\n+        return new ObjectArrayListIterator<E>((E[]) testArray);\n+    }\n+\n+    public ObjectArrayListIterator<E> makeArrayListIterator(E[] array) {\n+        return new ObjectArrayListIterator<E>(array);\n+    }\n+\n+    @Override\n+    public boolean supportsAdd() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/ObjectArrayListIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Arrays;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the ObjectArrayListIterator class.\n+ *\n+ * @version $Id$\n+ */\n+public class ObjectArrayListIteratorTest<E> extends ObjectArrayIteratorTest<E> {\n+\n+    public ObjectArrayListIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public ObjectArrayListIterator<E> makeEmptyIterator() {\n+        return new ObjectArrayListIterator<E>((E[]) new Object[0]);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public ObjectArrayListIterator<E> makeObject() {\n+        return new ObjectArrayListIterator<E>((E[]) testArray);\n+    }\n+\n+    public ObjectArrayListIterator<E> makeArrayListIterator(E[] array) {\n+        return new ObjectArrayListIterator<E>(array);\n+    }\n+\n+    /**\n+     * Test the basic ListIterator functionality - going backwards using\n+     * <code>previous()</code>.\n+     */\n+    public void testListIterator() {\n+        ListIterator<E> iter = makeObject();\n+\n+        // TestArrayIterator#testIterator() has already tested the iterator forward,\n+        //  now we need to test it in reverse\n+\n+        // fast-forward the iterator to the end...\n+        while (iter.hasNext()) {\n+            iter.next();\n+        }\n+\n+        for (int x = testArray.length - 1; x >= 0; x--) {\n+            Object testValue = testArray[x];\n+            Object iterValue = iter.previous();\n+\n+            assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasPrevious());\n+\n+        try {\n+            iter.previous();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+    }\n+\n+    /**\n+     * Tests the {@link java.util.ListIterator#set} operation.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListIteratorSet() {\n+        String[] testData = new String[] { \"a\", \"b\", \"c\" };\n+\n+        String[] result = new String[] { \"0\", \"1\", \"2\" };\n+\n+        ListIterator<E> iter = makeArrayListIterator((E[]) testData);\n+        int x = 0;\n+\n+        while (iter.hasNext()) {\n+            iter.next();\n+            iter.set((E) Integer.toString(x));\n+            x++;\n+        }\n+\n+        assertTrue(\"The two arrays should have the same value, i.e. {0,1,2}\", Arrays.equals(testData, result));\n+\n+        // a call to set() before a call to next() or previous() should throw an IllegalStateException\n+        iter = makeArrayListIterator((E[]) testArray);\n+\n+        try {\n+            iter.set((E) \"should fail\");\n+            fail(\"ListIterator#set should fail if next() or previous() have not yet been called.\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        } catch (Throwable t) { // should never happen\n+            fail(t.toString());\n+        }\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/ObjectGraphIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * Testcase.\n+ *\n+ * @version $Id$\n+ */\n+public class ObjectGraphIteratorTest extends AbstractIteratorTest<Object> {\n+\n+    protected String[] testArray = { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\" };\n+\n+    protected List<String> list1 = null;\n+    protected List<String> list2 = null;\n+    protected List<String> list3 = null;\n+    protected List<Iterator<String>> iteratorList = null;\n+\n+    public ObjectGraphIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public void setUp() {\n+        list1 = new ArrayList<String>();\n+        list1.add(\"One\");\n+        list1.add(\"Two\");\n+        list1.add(\"Three\");\n+        list2 = new ArrayList<String>();\n+        list2.add(\"Four\");\n+        list3 = new ArrayList<String>();\n+        list3.add(\"Five\");\n+        list3.add(\"Six\");\n+        iteratorList = new ArrayList<Iterator<String>>();\n+        iteratorList.add(list1.iterator());\n+        iteratorList.add(list2.iterator());\n+        iteratorList.add(list3.iterator());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public ObjectGraphIterator<Object> makeEmptyIterator() {\n+        ArrayList<Object> list = new ArrayList<Object>();\n+        return new ObjectGraphIterator<Object>(list.iterator());\n+    }\n+\n+    @Override\n+    public ObjectGraphIterator<Object> makeObject() {\n+        return new ObjectGraphIterator<Object>(iteratorList.iterator());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIteratorConstructor_null1() {\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(null);\n+\n+        assertEquals(false, it.hasNext());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+        try {\n+            it.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    public void testIteratorConstructor_null_next() {\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(null);\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    public void testIteratorConstructor_null_remove() {\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(null);\n+        try {\n+            it.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIteratorConstructorIteration_Empty() {\n+        List<Iterator<Object>> iteratorList = new ArrayList<Iterator<Object>>();\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(iteratorList.iterator());\n+\n+        assertEquals(false, it.hasNext());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+        try {\n+            it.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    public void testIteratorConstructorIteration_Simple() {\n+        List<Iterator<String>> iteratorList = new ArrayList<Iterator<String>>();\n+        iteratorList.add(list1.iterator());\n+        iteratorList.add(list2.iterator());\n+        iteratorList.add(list3.iterator());\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(iteratorList.iterator());\n+\n+        for (int i = 0; i < 6; i++) {\n+            assertEquals(true, it.hasNext());\n+            assertEquals(testArray[i], it.next());\n+        }\n+        assertEquals(false, it.hasNext());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    public void testIteratorConstructorIteration_SimpleNoHasNext() {\n+        List<Iterator<String>> iteratorList = new ArrayList<Iterator<String>>();\n+        iteratorList.add(list1.iterator());\n+        iteratorList.add(list2.iterator());\n+        iteratorList.add(list3.iterator());\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(iteratorList.iterator());\n+\n+        for (int i = 0; i < 6; i++) {\n+            assertEquals(testArray[i], it.next());\n+        }\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    public void testIteratorConstructorIteration_WithEmptyIterators() {\n+        List<Iterator<String>> iteratorList = new ArrayList<Iterator<String>>();\n+        iteratorList.add(IteratorUtils.<String>emptyIterator());\n+        iteratorList.add(list1.iterator());\n+        iteratorList.add(IteratorUtils.<String>emptyIterator());\n+        iteratorList.add(list2.iterator());\n+        iteratorList.add(IteratorUtils.<String>emptyIterator());\n+        iteratorList.add(list3.iterator());\n+        iteratorList.add(IteratorUtils.<String>emptyIterator());\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(iteratorList.iterator());\n+\n+        for (int i = 0; i < 6; i++) {\n+            assertEquals(true, it.hasNext());\n+            assertEquals(testArray[i], it.next());\n+        }\n+        assertEquals(false, it.hasNext());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    public void testIteratorConstructorRemove() {\n+        List<Iterator<String>> iteratorList = new ArrayList<Iterator<String>>();\n+        iteratorList.add(list1.iterator());\n+        iteratorList.add(list2.iterator());\n+        iteratorList.add(list3.iterator());\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(iteratorList.iterator());\n+\n+        for (int i = 0; i < 6; i++) {\n+            assertEquals(testArray[i], it.next());\n+            it.remove();\n+        }\n+        assertEquals(false, it.hasNext());\n+        assertEquals(0, list1.size());\n+        assertEquals(0, list2.size());\n+        assertEquals(0, list3.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIteration_IteratorOfIterators() {\n+        List<Iterator<String>> iteratorList = new ArrayList<Iterator<String>>();\n+        iteratorList.add(list1.iterator());\n+        iteratorList.add(list2.iterator());\n+        iteratorList.add(list3.iterator());\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(iteratorList.iterator(), null);\n+\n+        for (int i = 0; i < 6; i++) {\n+            assertEquals(true, it.hasNext());\n+            assertEquals(testArray[i], it.next());\n+        }\n+        assertEquals(false, it.hasNext());\n+    }\n+\n+    public void testIteration_IteratorOfIteratorsWithEmptyIterators() {\n+        List<Iterator<String>> iteratorList = new ArrayList<Iterator<String>>();\n+        iteratorList.add(IteratorUtils.<String>emptyIterator());\n+        iteratorList.add(list1.iterator());\n+        iteratorList.add(IteratorUtils.<String>emptyIterator());\n+        iteratorList.add(list2.iterator());\n+        iteratorList.add(IteratorUtils.<String>emptyIterator());\n+        iteratorList.add(list3.iterator());\n+        iteratorList.add(IteratorUtils.<String>emptyIterator());\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(iteratorList.iterator(), null);\n+\n+        for (int i = 0; i < 6; i++) {\n+            assertEquals(true, it.hasNext());\n+            assertEquals(testArray[i], it.next());\n+        }\n+        assertEquals(false, it.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIteration_RootNull() {\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(null, null);\n+\n+        assertEquals(false, it.hasNext());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+        try {\n+            it.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    public void testIteration_RootNoTransformer() {\n+        Forest forest = new Forest();\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(forest, null);\n+\n+        assertEquals(true, it.hasNext());\n+        assertSame(forest, it.next());\n+        assertEquals(false, it.hasNext());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    public void testIteration_Transformed1() {\n+        Forest forest = new Forest();\n+        Leaf l1 = forest.addTree().addBranch().addLeaf();\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(forest, new LeafFinder());\n+\n+        assertEquals(true, it.hasNext());\n+        assertSame(l1, it.next());\n+        assertEquals(false, it.hasNext());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    public void testIteration_Transformed2() {\n+        Forest forest = new Forest();\n+        forest.addTree();\n+        forest.addTree();\n+        forest.addTree();\n+        Branch b1 = forest.getTree(0).addBranch();\n+        Branch b2 = forest.getTree(0).addBranch();\n+        Branch b3 = forest.getTree(2).addBranch();\n+        /* Branch b4 = */ forest.getTree(2).addBranch();\n+        Branch b5 = forest.getTree(2).addBranch();\n+        Leaf l1 = b1.addLeaf();\n+        Leaf l2 = b1.addLeaf();\n+        Leaf l3 = b2.addLeaf();\n+        Leaf l4 = b3.addLeaf();\n+        Leaf l5 = b5.addLeaf();\n+\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(forest, new LeafFinder());\n+\n+        assertEquals(true, it.hasNext());\n+        assertSame(l1, it.next());\n+        assertEquals(true, it.hasNext());\n+        assertSame(l2, it.next());\n+        assertEquals(true, it.hasNext());\n+        assertSame(l3, it.next());\n+        assertEquals(true, it.hasNext());\n+        assertSame(l4, it.next());\n+        assertEquals(true, it.hasNext());\n+        assertSame(l5, it.next());\n+        assertEquals(false, it.hasNext());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    public void testIteration_Transformed3() {\n+        Forest forest = new Forest();\n+        forest.addTree();\n+        forest.addTree();\n+        forest.addTree();\n+        Branch b1 = forest.getTree(1).addBranch();\n+        Branch b2 = forest.getTree(1).addBranch();\n+        Branch b3 = forest.getTree(2).addBranch();\n+        Branch b4 = forest.getTree(2).addBranch();\n+        /* Branch b5 = */ forest.getTree(2).addBranch();\n+        Leaf l1 = b1.addLeaf();\n+        Leaf l2 = b1.addLeaf();\n+        Leaf l3 = b2.addLeaf();\n+        Leaf l4 = b3.addLeaf();\n+        Leaf l5 = b4.addLeaf();\n+\n+        Iterator<Object> it = new ObjectGraphIterator<Object>(forest, new LeafFinder());\n+\n+        assertEquals(true, it.hasNext());\n+        assertSame(l1, it.next());\n+        assertEquals(true, it.hasNext());\n+        assertSame(l2, it.next());\n+        assertEquals(true, it.hasNext());\n+        assertSame(l3, it.next());\n+        assertEquals(true, it.hasNext());\n+        assertSame(l4, it.next());\n+        assertEquals(true, it.hasNext());\n+        assertSame(l5, it.next());\n+        assertEquals(false, it.hasNext());\n+        try {\n+            it.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class LeafFinder implements Transformer<Object, Object> {\n+        public Object transform(Object input) {\n+            if (input instanceof Forest) {\n+                return ((Forest) input).treeIterator();\n+            }\n+            if (input instanceof Tree) {\n+                return ((Tree) input).branchIterator();\n+            }\n+            if (input instanceof Branch) {\n+                return ((Branch) input).leafIterator();\n+            }\n+            if (input instanceof Leaf) {\n+                return input;\n+            }\n+            throw new ClassCastException();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class Forest {\n+        List<Tree> trees = new ArrayList<Tree>();\n+\n+        Tree addTree() {\n+            trees.add(new Tree());\n+            return getTree(trees.size() - 1);\n+        }\n+\n+        Tree getTree(int index) {\n+            return trees.get(index);\n+        }\n+\n+        Iterator<Tree> treeIterator() {\n+            return trees.iterator();\n+        }\n+    }\n+\n+    static class Tree {\n+        List<Branch> branches = new ArrayList<Branch>();\n+\n+        Branch addBranch() {\n+            branches.add(new Branch());\n+            return getBranch(branches.size() - 1);\n+        }\n+\n+        Branch getBranch(int index) {\n+            return branches.get(index);\n+        }\n+\n+        Iterator<Branch> branchIterator() {\n+            return branches.iterator();\n+        }\n+    }\n+\n+    static class Branch {\n+        List<Leaf> leaves = new ArrayList<Leaf>();\n+\n+        Leaf addLeaf() {\n+            leaves.add(new Leaf());\n+            return getLeaf(leaves.size() - 1);\n+        }\n+\n+        Leaf getLeaf(int index) {\n+            return leaves.get(index);\n+        }\n+\n+        Iterator<Leaf> leafIterator() {\n+            return leaves.iterator();\n+        }\n+    }\n+\n+    static class Leaf {\n+        String colour;\n+\n+        String getColour() {\n+            return colour;\n+        }\n+\n+        void setColour(String colour) {\n+            this.colour = colour;\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/ReverseListIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.ResettableListIterator;\n+\n+/**\n+ * Tests the ReverseListIterator.\n+ *\n+ * @version $Id$\n+ */\n+public class ReverseListIteratorTest<E> extends AbstractListIteratorTest<E> {\n+\n+    protected String[] testArray = { \"One\", \"Two\", \"Three\", \"Four\" };\n+\n+    public ReverseListIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public ListIterator<E> makeEmptyIterator() {\n+        return new ReverseListIterator<E>(new ArrayList<E>());\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public ReverseListIterator<E> makeObject() {\n+        List<E> list = new ArrayList<E>(Arrays.asList((E[]) testArray));\n+        return new ReverseListIterator<E>(list);\n+    }\n+\n+    // overrides\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public void testEmptyListIteratorIsIndeedEmpty() {\n+        ListIterator<E> it = makeEmptyIterator();\n+\n+        assertEquals(false, it.hasNext());\n+        assertEquals(-1, it.nextIndex());  // reversed index\n+        assertEquals(false, it.hasPrevious());\n+        assertEquals(0, it.previousIndex());  // reversed index\n+\n+        // next() should throw a NoSuchElementException\n+        try {\n+            it.next();\n+            fail(\"NoSuchElementException must be thrown from empty ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+\n+        // previous() should throw a NoSuchElementException\n+        try {\n+            it.previous();\n+            fail(\"NoSuchElementException must be thrown from empty ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+    }\n+\n+    @Override\n+    public void testWalkForwardAndBack() {\n+        ArrayList<E> list = new ArrayList<E>();\n+        ListIterator<E> it = makeObject();\n+        while (it.hasNext()) {\n+            list.add(it.next());\n+        }\n+\n+        // check state at end\n+        assertEquals(false, it.hasNext());\n+        assertEquals(true, it.hasPrevious());\n+\n+        // this had to be commented out, as there is a bug in the JDK before JDK1.5\n+        // where calling previous at the start of an iterator would push the cursor\n+        // back to an invalid negative value\n+//        try {\n+//            it.next();\n+//            fail(\"NoSuchElementException must be thrown from next at end of ListIterator\");\n+//        } catch (NoSuchElementException e) {\n+//        }\n+\n+        // loop back through comparing\n+        for (int i = list.size() - 1; i >= 0; i--) {\n+            assertEquals(\"\" + i, list.size() - i - 2, it.nextIndex());  // reversed index\n+            assertEquals(list.size() - i - 1, it.previousIndex());  // reversed index\n+\n+            Object obj = list.get(i);\n+            assertEquals(obj, it.previous());\n+        }\n+\n+        // check state at start\n+        assertEquals(true, it.hasNext());\n+        assertEquals(false, it.hasPrevious());\n+        try {\n+            it.previous();\n+            fail(\"NoSuchElementException must be thrown from previous at start of ListIterator\");\n+        } catch (NoSuchElementException e) {\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReverse() {\n+        ListIterator<E> it = makeObject();\n+        assertEquals(true, it.hasNext());\n+        assertEquals(3, it.nextIndex());\n+        assertEquals(false, it.hasPrevious());\n+        assertEquals(4, it.previousIndex());\n+        assertEquals(\"Four\", it.next());\n+        assertEquals(2, it.nextIndex());\n+        assertEquals(true, it.hasNext());\n+        assertEquals(3, it.previousIndex());\n+        assertEquals(true, it.hasPrevious());\n+        assertEquals(\"Three\", it.next());\n+        assertEquals(true, it.hasNext());\n+        assertEquals(1, it.nextIndex());\n+        assertEquals(true, it.hasPrevious());\n+        assertEquals(2, it.previousIndex());\n+        assertEquals(\"Two\", it.next());\n+        assertEquals(true, it.hasNext());\n+        assertEquals(0, it.nextIndex());\n+        assertEquals(true, it.hasPrevious());\n+        assertEquals(1, it.previousIndex());\n+        assertEquals(\"One\", it.next());\n+        assertEquals(false, it.hasNext());\n+        assertEquals(-1, it.nextIndex());\n+        assertEquals(true, it.hasPrevious());\n+        assertEquals(0, it.previousIndex());\n+        assertEquals(\"One\", it.previous());\n+        assertEquals(\"Two\", it.previous());\n+        assertEquals(\"Three\", it.previous());\n+        assertEquals(\"Four\", it.previous());\n+    }\n+\n+    public void testReset() {\n+        ResettableListIterator<E> it = makeObject();\n+        assertEquals(\"Four\", it.next());\n+        it.reset();\n+        assertEquals(\"Four\", it.next());\n+        it.next();\n+        it.next();\n+        it.reset();\n+        assertEquals(\"Four\", it.next());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/SingletonIterator2Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.ResettableIterator;\n+\n+/**\n+ * Tests the SingletonIterator to ensure that the next() method will actually\n+ * perform the iteration rather than the hasNext() method.\n+ *\n+ * @version $Id$\n+ */\n+public class SingletonIterator2Test<E> extends AbstractIteratorTest<E> {\n+\n+    private static final Object testValue = \"foo\";\n+\n+    public SingletonIterator2Test(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public SingletonIterator<E> makeEmptyIterator() {\n+        SingletonIterator<E> iter = new SingletonIterator<E>((E) testValue);\n+        iter.next();\n+        iter.remove();\n+        iter.reset();\n+        return iter;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public SingletonIterator<E> makeObject() {\n+        return new SingletonIterator<E>((E) testValue, false);\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean supportsEmptyIterator() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIterator() {\n+        Iterator<E> iter = makeObject();\n+        assertTrue(\"Iterator has a first item\", iter.hasNext());\n+\n+        E iterValue = iter.next();\n+        assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+    public void testReset() {\n+        ResettableIterator<E> it = makeObject();\n+\n+        assertEquals(true, it.hasNext());\n+        assertEquals(testValue, it.next());\n+        assertEquals(false, it.hasNext());\n+\n+        it.reset();\n+\n+        assertEquals(true, it.hasNext());\n+        assertEquals(testValue, it.next());\n+        assertEquals(false, it.hasNext());\n+\n+        it.reset();\n+        it.reset();\n+\n+        assertEquals(true, it.hasNext());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/SingletonIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.ResettableIterator;\n+\n+/**\n+ * Tests the SingletonIterator to ensure that the next() method will actually\n+ * perform the iteration rather than the hasNext() method.\n+ *\n+ * @version $Id$\n+ */\n+public class SingletonIteratorTest<E> extends AbstractIteratorTest<E> {\n+\n+    private static final Object testValue = \"foo\";\n+\n+    public SingletonIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * Returns a SingletonIterator from which\n+     * the element has already been removed.\n+     */\n+    @Override\n+    public SingletonIterator<E> makeEmptyIterator() {\n+        SingletonIterator<E> iter = makeObject();\n+        iter.next();\n+        iter.remove();\n+        iter.reset();\n+        return iter;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public SingletonIterator<E> makeObject() {\n+        return new SingletonIterator<E>((E) testValue);\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean supportsEmptyIterator() {\n+        return true;\n+    }\n+\n+    public void testIterator() {\n+        Iterator<E> iter = makeObject();\n+        assertTrue(\"Iterator has a first item\", iter.hasNext());\n+\n+        E iterValue = iter.next();\n+        assertEquals(\"Iteration value is correct\", testValue, iterValue);\n+\n+        assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\n+                \"NoSuchElementException must be thrown\",\n+                e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSingletonIteratorRemove() {\n+        ResettableIterator<E> iter = new SingletonIterator<E>((E) \"xyzzy\");\n+        assertTrue(iter.hasNext());\n+        assertEquals(\"xyzzy\",iter.next());\n+        iter.remove();\n+        iter.reset();\n+        assertTrue(! iter.hasNext());\n+    }\n+\n+    public void testReset() {\n+        ResettableIterator<E> it = makeObject();\n+\n+        assertEquals(true, it.hasNext());\n+        assertEquals(testValue, it.next());\n+        assertEquals(false, it.hasNext());\n+\n+        it.reset();\n+\n+        assertEquals(true, it.hasNext());\n+        assertEquals(testValue, it.next());\n+        assertEquals(false, it.hasNext());\n+\n+        it.reset();\n+        it.reset();\n+\n+        assertEquals(true, it.hasNext());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/SingletonListIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.ResettableListIterator;\n+\n+/**\n+ * Tests the SingletonListIterator.\n+ *\n+ * @version $Id$\n+ */\n+public class SingletonListIteratorTest<E> extends AbstractListIteratorTest<E> {\n+\n+    private static final Object testValue = \"foo\";\n+    \n+    public SingletonListIteratorTest(String testName) {\n+        super(testName);\n+    }\n+    \n+    /**\n+     * Returns a SingletonListIterator from which \n+     * the element has already been removed.\n+     */\n+    @Override\n+    public SingletonListIterator<E> makeEmptyIterator() {\n+        SingletonListIterator<E> iter = makeObject();\n+        iter.next();\n+        iter.remove();\n+        iter.reset();        \n+        return iter;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public SingletonListIterator<E> makeObject() {\n+        return new SingletonListIterator<E>((E) testValue);\n+    }\n+\n+    @Override\n+    public boolean supportsAdd() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean supportsEmptyIterator() {\n+        return true;\n+    }\n+\n+    public void testIterator() {\n+        ListIterator<E> iter = makeObject();\n+        assertTrue( \"Iterator should have next item\", iter.hasNext() );\n+        assertTrue( \"Iterator should have no previous item\", !iter.hasPrevious() );\n+        assertEquals( \"Iteration next index\", 0, iter.nextIndex() );\n+        assertEquals( \"Iteration previous index\", -1, iter.previousIndex() );\n+        \n+        Object iterValue = iter.next();\n+        assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        \n+        assertTrue( \"Iterator should have no next item\", !iter.hasNext() );\n+        assertTrue( \"Iterator should have previous item\", iter.hasPrevious() );\n+        assertEquals( \"Iteration next index\", 1, iter.nextIndex() );\n+        assertEquals( \"Iteration previous index\", 0, iter.previousIndex() );\n+\n+        iterValue = iter.previous();\n+        assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        \n+        assertTrue( \"Iterator should have next item\", iter.hasNext() );\n+        assertTrue( \"Iterator should have no previous item\", !iter.hasPrevious() );\n+        assertEquals( \"Iteration next index\", 0, iter.nextIndex() );\n+        assertEquals( \"Iteration previous index\", -1, iter.previousIndex() );\n+\n+        iterValue = iter.next();\n+        assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        \n+        assertTrue( \"Iterator should have no next item\", !iter.hasNext() );\n+        assertTrue( \"Iterator should have previous item\", iter.hasPrevious() );\n+        assertEquals( \"Iteration next index\", 1, iter.nextIndex() );\n+        assertEquals( \"Iteration previous index\", 0, iter.previousIndex() );\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+          assertTrue(\"NoSuchElementException must be thrown\", \n+             e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+        iter.previous();\n+        try {\n+            iter.previous();\n+        } catch (Exception e) {\n+          assertTrue(\"NoSuchElementException must be thrown\", \n+             e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+    \n+    public void testReset() {\n+        ResettableListIterator<E> it = makeObject();\n+        \n+        assertEquals(true, it.hasNext());\n+        assertEquals(false, it.hasPrevious());\n+        assertEquals(testValue, it.next());\n+        assertEquals(false, it.hasNext());\n+        assertEquals(true, it.hasPrevious());\n+\n+        it.reset();\n+        \n+        assertEquals(true, it.hasNext());\n+        assertEquals(false, it.hasPrevious());\n+        assertEquals(testValue, it.next());\n+        assertEquals(false, it.hasNext());\n+        assertEquals(true, it.hasPrevious());\n+        \n+        it.reset();\n+        it.reset();\n+        \n+        assertEquals(true, it.hasNext());\n+    }\n+    \n+}\n+\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/UniqueFilterIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the UniqueFilterIterator class.\n+ *\n+ * @version $Id$\n+ */\n+public class UniqueFilterIteratorTest<E> extends AbstractIteratorTest<E> {\n+\n+    protected String[] testArray = {\n+        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n+    };\n+\n+    protected List<E> list1 = null;\n+\n+    public UniqueFilterIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void setUp() {\n+        list1 = new ArrayList<E>();\n+        list1.add((E) \"One\");\n+        list1.add((E) \"Two\");\n+        list1.add((E) \"Three\");\n+        list1.add((E) \"Two\");\n+        list1.add((E) \"One\");\n+        list1.add((E) \"Four\");\n+        list1.add((E) \"Five\");\n+        list1.add((E) \"Five\");\n+        list1.add((E) \"Six\");\n+        list1.add((E) \"Five\");\n+    }\n+\n+    @Override\n+    public UniqueFilterIterator<E> makeEmptyIterator() {\n+        ArrayList<E> list = new ArrayList<E>();\n+        return new UniqueFilterIterator<E>(list.iterator());\n+    }\n+\n+    @Override\n+    public UniqueFilterIterator<E> makeObject() {\n+        Iterator<E> i = list1.iterator();\n+        return new UniqueFilterIterator<E>(i);\n+    }\n+\n+    public void testIterator() {\n+        Iterator<E> iter = makeObject();\n+        for (int i = 0; i < testArray.length; i++) {\n+            Object testValue = testArray[i];            \n+            E iterValue = iter.next();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n+\n+        try {\n+            iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\", \n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/UnmodifiableIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.commons.collections.Unmodifiable;\n+\n+/**\n+ * Tests the UnmodifiableIterator.\n+ *\n+ * @version $Id$\n+ */\n+public class UnmodifiableIteratorTest<E> extends AbstractIteratorTest<E> {\n+\n+    protected String[] testArray = { \"One\", \"Two\", \"Three\" };\n+    protected List<E> testList;\n+\n+    public UnmodifiableIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        testList = new ArrayList<E>(Arrays.asList((E[]) testArray));\n+    }\n+\n+    @Override\n+    public Iterator<E> makeEmptyIterator() {\n+        return UnmodifiableIterator.unmodifiableIterator(Collections.<E>emptyList().iterator());\n+    }\n+\n+    @Override\n+    public Iterator<E> makeObject() {\n+        return UnmodifiableIterator.unmodifiableIterator(testList.iterator());\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIterator() {\n+        assertTrue(makeEmptyIterator() instanceof Unmodifiable);\n+    }\n+\n+    public void testDecorateFactory() {\n+        Iterator<E> it = makeObject();\n+        assertSame(it, UnmodifiableIterator.unmodifiableIterator(it));\n+\n+        it = testList.iterator();\n+        assertTrue(it != UnmodifiableIterator.unmodifiableIterator(it));\n+\n+        try {\n+            UnmodifiableIterator.unmodifiableIterator(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/UnmodifiableListIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.Unmodifiable;\n+\n+/**\n+ * Tests the UnmodifiableListIterator.\n+ *\n+ * @version $Id$\n+ */\n+public class UnmodifiableListIteratorTest<E> extends AbstractListIteratorTest<E> {\n+\n+    protected String[] testArray = { \"One\", \"Two\", \"Three\" };\n+    protected List<E> testList;\n+\n+    public UnmodifiableListIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        testList = new ArrayList<E>(Arrays.asList((E[]) testArray));\n+    }\n+\n+    @Override\n+    public ListIterator<E> makeEmptyIterator() {\n+        return UnmodifiableListIterator.umodifiableListIterator(Collections.<E>emptyList().listIterator());\n+    }\n+\n+    @Override\n+    public ListIterator<E> makeObject() {\n+        return UnmodifiableListIterator.umodifiableListIterator(testList.listIterator());\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean supportsAdd() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean supportsSet() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testListIterator() {\n+        assertTrue(makeEmptyIterator() instanceof Unmodifiable);\n+    }\n+\n+    public void testDecorateFactory() {\n+        ListIterator<E> it = makeObject();\n+        assertSame(it, UnmodifiableListIterator.umodifiableListIterator(it));\n+\n+        it = testList.listIterator();\n+        assertTrue(it != UnmodifiableListIterator.umodifiableListIterator(it));\n+\n+        try {\n+            UnmodifiableListIterator.umodifiableListIterator(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/UnmodifiableMapIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.collections.IterableMap;\n+import org.apache.commons.collections.MapIterator;\n+import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.bidimap.DualHashBidiMap;\n+\n+/**\n+ * Tests the UnmodifiableMapIterator.\n+ *\n+ * @version $Id$\n+ */\n+public class UnmodifiableMapIteratorTest<K, V> extends AbstractMapIteratorTest<K, V> {\n+\n+    public UnmodifiableMapIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public MapIterator<K, V> makeEmptyIterator() {\n+        return UnmodifiableMapIterator.unmodifiableMapIterator(new DualHashBidiMap<K, V>().mapIterator());\n+    }\n+\n+    @Override\n+    public MapIterator<K, V> makeObject() {\n+        return UnmodifiableMapIterator.unmodifiableMapIterator(getMap().mapIterator());\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public IterableMap<K, V> getMap() {\n+        IterableMap<K, V> testMap = new DualHashBidiMap<K, V>();\n+        testMap.put((K) \"A\", (V) \"a\");\n+        testMap.put((K) \"B\", (V)\"b\");\n+        testMap.put((K) \"C\", (V) \"c\");\n+        return testMap;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Map<K, V> getConfirmedMap() {\n+        Map<K, V> testMap = new HashMap<K, V>();\n+        testMap.put((K) \"A\", (V) \"a\");\n+        testMap.put((K) \"B\", (V)\"b\");\n+        testMap.put((K) \"C\", (V) \"c\");\n+        return testMap;\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean supportsSetValue() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMapIterator() {\n+        assertTrue(makeEmptyIterator() instanceof Unmodifiable);\n+    }\n+\n+    public void testDecorateFactory() {\n+        MapIterator<K, V> it = makeObject();\n+        assertSame(it, UnmodifiableMapIterator.unmodifiableMapIterator(it));\n+\n+        it = getMap().mapIterator() ;\n+        assertTrue(it != UnmodifiableMapIterator.unmodifiableMapIterator(it));\n+\n+        try {\n+            UnmodifiableMapIterator.unmodifiableMapIterator(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.commons.collections.OrderedMap;\n+import org.apache.commons.collections.OrderedMapIterator;\n+import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.map.ListOrderedMap;\n+\n+/**\n+ * Tests the UnmodifiableOrderedMapIterator.\n+ *\n+ * @version $Id$\n+ */\n+public class UnmodifiableOrderedMapIteratorTest<K, V> extends AbstractOrderedMapIteratorTest<K, V> {\n+\n+    public UnmodifiableOrderedMapIteratorTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public OrderedMapIterator<K, V> makeEmptyIterator() {\n+        return UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(\n+                ListOrderedMap.listOrderedMap(new HashMap<K, V>()).mapIterator());\n+    }\n+\n+    @Override\n+    public OrderedMapIterator<K, V> makeObject() {\n+        return UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(getMap().mapIterator());\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public OrderedMap<K, V> getMap() {\n+        OrderedMap<K, V> testMap = ListOrderedMap.listOrderedMap(new HashMap<K, V>());\n+        testMap.put((K) \"A\", (V) \"a\");\n+        testMap.put((K) \"B\", (V) \"b\");\n+        testMap.put((K) \"C\", (V) \"c\");\n+        return testMap;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Map<K, V> getConfirmedMap() {\n+        Map<K, V> testMap = new TreeMap<K, V>();\n+        testMap.put((K) \"A\", (V) \"a\");\n+        testMap.put((K) \"B\", (V) \"b\");\n+        testMap.put((K) \"C\", (V) \"c\");\n+        return testMap;\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean supportsSetValue() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testOrderedMapIterator() {\n+        assertTrue(makeEmptyIterator() instanceof Unmodifiable);\n+    }\n+\n+    public void testDecorateFactory() {\n+        OrderedMapIterator<K, V> it = makeObject();\n+        assertSame(it, UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(it));\n+\n+        it = getMap().mapIterator() ;\n+        assertTrue(it != UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(it));\n+\n+        try {\n+            UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}", "timestamp": 1346010736, "metainfo": ""}