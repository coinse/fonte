{"sha": "487ccad39653b8cafe826f7e36294cb7c0c054b1", "log": "* add tests * make a few minor changes so that those tests pass   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.12 2003/02/28 00:17:52 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.13 2003/03/01 00:47:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * to provide a more efficient implementation.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.12 $ $Date: 2003/02/28 00:17:52 $\n+ * @version $Revision: 1.13 $ $Date: 2003/03/01 00:47:28 $\n  * \n  * @author Rodney Waldhoff \n  */\n \n     protected static class RandomAccessIntSubList extends AbstractRandomAccessIntList implements IntList {\n         RandomAccessIntSubList(AbstractRandomAccessIntList list, int fromIndex, int toIndex) {\n-            if(fromIndex < 0 || toIndex > list.size() || fromIndex > toIndex) {\n+            if(fromIndex < 0 || toIndex > list.size()) {\n                 throw new IndexOutOfBoundsException();\n+            } else if(fromIndex > toIndex) {\n+                throw new IllegalArgumentException();                \n             } else {\n                 _list = list;\n                 _offset = fromIndex;\n--- a/src/java/org/apache/commons/collections/primitives/adapters/CollectionIntCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/CollectionIntCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/CollectionIntCollection.java,v 1.6 2003/02/28 21:21:51 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/CollectionIntCollection.java,v 1.7 2003/03/01 00:47:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * implementation in the \"obvious\" way.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.6 $ $Date: 2003/02/28 21:21:51 $\n+ * @version $Revision: 1.7 $ $Date: 2003/03/01 00:47:28 $\n  * @author Rodney Waldhoff \n  */\n final public class CollectionIntCollection extends AbstractCollectionIntCollection implements Serializable {\n             return new NonSerializableCollectionIntCollection(collection);\n         }\n     }\n-    \n-    /**\n-     * No-arg constructor, for serialization purposes.\n-     */\n-    protected CollectionIntCollection() {\n-    }\n \n     /**\n      * Creates an {@link IntCollection IntCollection} wrapping\n--- a/src/java/org/apache/commons/collections/primitives/adapters/IntCollectionCollection.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/IntCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntCollectionCollection.java,v 1.5 2003/02/28 21:21:51 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntCollectionCollection.java,v 1.6 2003/03/01 00:47:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * implementation in the \"obvious\" way.\n  * \n  * @since Commons Collections 2.2\n- * @version $Revision: 1.5 $ $Date: 2003/02/28 21:21:51 $\n+ * @version $Revision: 1.6 $ $Date: 2003/03/01 00:47:28 $\n  * @author Rodney Waldhoff \n  */\n final public class IntCollectionCollection extends AbstractIntCollectionCollection implements Serializable {\n     }\n     \n     /**\n-     * No-arg constructor, for serialization purposes.\n-     */\n-    protected IntCollectionCollection() {\n-    }\n-\n-    /**\n      * Creates a {@link Collection Collection} wrapping\n      * the specified {@link IntCollection IntCollection}.\n      * @see #wrap\n--- a/src/java/org/apache/commons/collections/primitives/adapters/IntListList.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/IntListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntListList.java,v 1.5 2003/02/28 21:21:51 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IntListList.java,v 1.6 2003/03/01 00:47:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * implementation in the \"obvious\" way.\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.5 $ $Date: 2003/02/28 21:21:51 $\n+ * @version $Revision: 1.6 $ $Date: 2003/03/01 00:47:28 $\n  * @author Rodney Waldhoff \n  */\n final public class IntListList extends AbstractIntListList implements Serializable {\n             return new NonSerializableIntListList(list);\n         }\n     }\n-\n-    /**\n-     * No-arg constructor, for serialization purposes.\n-     */\n-    protected IntListList() {\n-    }\n     \n     /**\n      * Creates a {@link List List} wrapping\n--- a/src/java/org/apache/commons/collections/primitives/adapters/ListIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/ListIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ListIntList.java,v 1.6 2003/02/28 00:17:53 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ListIntList.java,v 1.7 2003/03/01 00:47:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * implementation in the \"obvious\" way.\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.6 $ $Date: 2003/02/28 00:17:53 $\n+ * @version $Revision: 1.7 $ $Date: 2003/03/01 00:47:28 $\n  * @author Rodney Waldhoff \n  */\n public class ListIntList extends AbstractListIntList implements Serializable {\n     }\n \n     /**\n-     * No-arg constructor, for serialization purposes.\n-     */\n-    protected ListIntList() {\n-    }\n-\n-    /**\n      * Creates an {@link IntList IntList} wrapping\n      * the specified {@link List List}.\n      * @see #wrap\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntIterator.java,v 1.1 2003/03/01 00:47:28 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.primitives.adapters.IntIteratorIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/03/01 00:47:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public abstract class TestIntIterator extends TestIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestIntIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    protected Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    public Iterator makeEmptyIterator() {\n+        return IntIteratorIterator.wrap(makeEmptyIntIterator());\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        return IntIteratorIterator.wrap(makeFullIntIterator());\n+    }\n+\n+\n+    protected abstract IntIterator makeEmptyIntIterator();\n+    protected abstract IntIterator makeFullIntIterator();\n+    protected abstract int[] getFullElements();\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testNextHasNextRemove() {\n+        int[] elements = getFullElements();\n+        IntIterator iter = makeFullIntIterator();\n+        for(int i=0;i<elements.length;i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(elements[i],iter.next());\n+            if(supportsRemove()) {\n+                iter.remove();\n+            }\n+        }        \n+        assertTrue(! iter.hasNext() );\n+    }\n+\n+    public void testEmptyIntIterator() {\n+        assertTrue( ! makeEmptyIntIterator().hasNext() );\n+        try {\n+            makeEmptyIntIterator().next();\n+            fail(\"Expected NoSuchElementException\");\n+        } catch(NoSuchElementException e) {\n+            // expected\n+        }\n+        if(supportsRemove()) {\n+            try {\n+                makeEmptyIntIterator().remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+\n+    public void testRemoveBeforeNext() {\n+        if(supportsRemove()) {\n+            try {\n+                makeFullIntIterator().remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+\n+    public void testRemoveAfterRemove() {\n+        if(supportsRemove()) {\n+            IntIterator iter = makeFullIntIterator();\n+            iter.next();\n+            iter.remove();\n+            try {\n+                iter.remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+}\n--- a/src/test/org/apache/commons/collections/primitives/TestIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.6 2003/02/28 00:17:53 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.7 2003/03/01 00:47:28 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import org.apache.commons.collections.primitives.adapters.ListIntList;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/02/28 00:17:53 $\n+ * @version $Revision: 1.7 $ $Date: 2003/03/01 00:47:28 $\n  * @author Rodney Waldhoff\n  */\n public abstract class TestIntList extends TestList {\n     // tests\n     // ------------------------------------------------------------------------\n \n+    public void testToJustBigEnoughIntArray() {\n+        IntList list = makeFullIntList();\n+        int[] dest = new int[list.size()];\n+        assertSame(dest,list.toArray(dest));\n+        int i=0;\n+        for(IntIterator iter = list.iterator(); iter.hasNext();i++) {\n+            assertEquals(iter.next(),dest[i]);\n+        }\n+    }\n+    \n+    public void testToLargerThanNeededIntArray() {\n+        IntList list = makeFullIntList();\n+        int[] dest = new int[list.size()*2];\n+        for(int i=0;i<dest.length;i++) {\n+            dest[i] = Integer.MAX_VALUE;\n+        }       \n+        assertSame(dest,list.toArray(dest));\n+        int i=0;\n+        for(IntIterator iter = list.iterator(); iter.hasNext();i++) {\n+            assertEquals(iter.next(),dest[i]);\n+        }\n+        for(;i<dest.length;i++) {\n+            assertEquals(Integer.MAX_VALUE,dest[i]);\n+        }\n+    }\n+    \n+    public void testToSmallerThanNeededIntArray() {\n+        IntList list = makeFullIntList();\n+        int[] dest = new int[list.size()/2];\n+        int[] dest2 = list.toArray(dest);\n+        assertTrue(dest != dest2);\n+        int i=0;\n+        for(IntIterator iter = list.iterator(); iter.hasNext();i++) {\n+            assertEquals(iter.next(),dest2[i]);\n+        }\n+    }\n+    \n     public void testHashCodeSpecification() {\n         IntList list = makeFullIntList();\n         int hash = 1;\n         assertTrue( ! (list instanceof Serializable) );\n     }\n \n+    public void testSubListOutOfBounds() throws Exception {\n+        try {\n+            makeEmptyIntList().subList(2,3);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            makeFullIntList().subList(-1,3);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+\n+        try {\n+            makeFullIntList().subList(5,2);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            makeFullIntList().subList(2,makeFullIntList().size()+2);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntListIterator.java,v 1.1 2003/03/01 00:47:28 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/03/01 00:47:28 $\n+ * @author Rodney Waldhoff\n+ */\n+public abstract class TestIntListIterator extends TestIntIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestIntListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    public IntIterator makeEmptyIntIterator() {\n+        return makeEmptyIntListIterator();\n+    }\n+    \n+    public IntIterator makeFullIntIterator() {\n+        return makeFullIntListIterator();\n+    }\n+\n+    public abstract IntListIterator makeEmptyIntListIterator();\n+    public abstract IntListIterator makeFullIntListIterator();\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+\n+}\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestAll.java,v 1.1 2003/02/26 19:17:24 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestAll.java,v 1.2 2003/03/01 00:47:29 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/02/26 19:17:24 $\n+ * @version $Revision: 1.2 $ $Date: 2003/03/01 00:47:29 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         \n+        suite.addTest(TestCollectionIntCollection.suite());\n+        suite.addTest(TestIntCollectionCollection.suite());\n         suite.addTest(TestIntListList.suite());\n         suite.addTest(TestListIntList.suite());\n+        suite.addTest(TestIteratorIntIterator.suite());\n+        suite.addTest(TestListIteratorIntListIterator.suite());\n+        suite.addTest(TestIntIteratorIterator.suite());\n+        suite.addTest(TestIntListIteratorListIterator.suite());\n         \n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionIntCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionIntCollection.java,v 1.1 2003/03/01 00:47:29 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.primitives.IntCollection;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/03/01 00:47:29 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestCollectionIntCollection extends TestObject {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestCollectionIntCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestCollectionIntCollection.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    protected Object makeObject() {\n+        List list = new ArrayList();\n+        for(int i=0;i<10;i++) {\n+            list.add(new Integer(i));\n+        }\n+        return new CollectionIntCollection(list);\n+    }\n+\n+    public void testSerializeDeserializeThenCompare() {\n+        // Collection.equal contract doesn't work that way\n+    }\n+\n+    /** @todo need to add serialized form to cvs */\n+    public void testCanonicalEmptyCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    /** @todo need to add serialized form to cvs */\n+    public void testCanonicalFullCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    public void testWrapNull() {\n+        assertNull(CollectionIntCollection.wrap(null));\n+    }\n+    \n+    public void testWrapSerializable() {\n+        IntCollection collection = CollectionIntCollection.wrap(new ArrayList());\n+        assertNotNull(collection);\n+        assertTrue(collection instanceof Serializable);\n+    }\n+    \n+    public void testWrapNonSerializable() {\n+        IntCollection collection = CollectionIntCollection.wrap(new AbstractList() { \n+            public Object get(int i) { throw new IndexOutOfBoundsException(); } \n+            public int size() { return 0; } \n+        });\n+        assertNotNull(collection);\n+        assertTrue(!(collection instanceof Serializable));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntCollectionCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntCollectionCollection.java,v 1.1 2003/03/01 00:47:29 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.primitives.AbstractRandomAccessIntList;\n+import org.apache.commons.collections.primitives.ArrayIntList;\n+import org.apache.commons.collections.primitives.IntList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/03/01 00:47:29 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestIntCollectionCollection extends TestObject {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestIntCollectionCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestIntCollectionCollection.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    protected Object makeObject() {\n+        IntList list = new ArrayIntList();\n+        for(int i=0;i<10;i++) {\n+            list.add(i);\n+        }\n+        return new IntCollectionCollection(list);\n+    }\n+\n+    public void testSerializeDeserializeThenCompare() {\n+        // Collection.equal contract doesn't work that way\n+    }\n+\n+    /** @todo need to add serialized form to cvs */\n+    public void testCanonicalEmptyCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    /** @todo need to add serialized form to cvs */\n+    public void testCanonicalFullCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    public void testWrapNull() {\n+        assertNull(IntCollectionCollection.wrap(null));\n+    }\n+    \n+    public void testWrapSerializable() {\n+        Collection collection = IntCollectionCollection.wrap(new ArrayIntList());\n+        assertNotNull(collection);\n+        assertTrue(collection instanceof Serializable);\n+    }\n+    \n+    public void testWrapNonSerializable() {\n+        Collection collection = IntCollectionCollection.wrap(new AbstractRandomAccessIntList() { \n+            public int get(int i) { throw new IndexOutOfBoundsException(); } \n+            public int size() { return 0; } \n+        });\n+        assertNotNull(collection);\n+        assertTrue(!(collection instanceof Serializable));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntIteratorIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntIteratorIterator.java,v 1.1 2003/03/01 00:47:29 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Iterator;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.primitives.ArrayIntList;\n+import org.apache.commons.collections.primitives.IntList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/03/01 00:47:29 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestIntIteratorIterator extends TestIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestIntIteratorIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestIntIteratorIterator.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    public Iterator makeEmptyIterator() {\n+        return IntIteratorIterator.wrap(makeEmptyIntList().iterator());\n+    }\n+    \n+    public Iterator makeFullIterator() {\n+        return IntIteratorIterator.wrap(makeFullIntList().iterator());\n+    }\n+\n+    protected IntList makeEmptyIntList() {\n+        return new ArrayIntList();\n+    }\n+    \n+    protected IntList makeFullIntList() {\n+        IntList list = makeEmptyIntList();\n+        int[] elts = getFullElements();\n+        for(int i=0;i<elts.length;i++) {\n+            list.add(elts[i]);\n+        }\n+        return list;\n+    }\n+    \n+    public int[] getFullElements() {\n+        return new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntListIteratorListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListIteratorListIterator.java,v 1.1 2003/03/01 00:47:29 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.primitives.ArrayIntList;\n+import org.apache.commons.collections.primitives.IntList;\n+\n+/**\n+ * @todo should extend TestListIterator when there is one\n+ * @version $Revision: 1.1 $ $Date: 2003/03/01 00:47:29 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestIntListIteratorListIterator extends TestIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestIntListIteratorListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestIntIteratorIterator.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    public Iterator makeEmptyIterator() {\n+        return IntListIteratorListIterator.wrap(makeEmptyIntList().listIterator());\n+    }\n+    \n+    public Iterator makeFullIterator() {\n+        return IntListIteratorListIterator.wrap(makeFullIntList().listIterator());\n+    }\n+\n+    protected IntList makeEmptyIntList() {\n+        return new ArrayIntList();\n+    }\n+    \n+    protected IntList makeFullIntList() {\n+        IntList list = makeEmptyIntList();\n+        int[] elts = getFullElements();\n+        for(int i=0;i<elts.length;i++) {\n+            list.add(elts[i]);\n+        }\n+        return list;\n+    }\n+    \n+    public int[] getFullElements() {\n+        return new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    \n+    public void testNextHasNextRemove() {\n+        int[] elements = getFullElements();\n+        Iterator iter = makeFullIterator();\n+        for(int i=0;i<elements.length;i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(new Integer(elements[i]),iter.next());\n+            if(supportsRemove()) {\n+                iter.remove();\n+            }\n+        }        \n+        assertTrue(! iter.hasNext() );\n+    }\n+\n+    public void testEmptyIterator() {\n+        assertTrue( ! makeEmptyIterator().hasNext() );\n+        try {\n+            makeEmptyIterator().next();\n+            fail(\"Expected NoSuchElementException\");\n+        } catch(NoSuchElementException e) {\n+            // expected\n+        }\n+        if(supportsRemove()) {\n+            try {\n+                makeEmptyIterator().remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+\n+    public void testRemoveBeforeNext() {\n+        if(supportsRemove()) {\n+            try {\n+                makeFullIterator().remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+\n+    public void testRemoveAfterRemove() {\n+        if(supportsRemove()) {\n+            Iterator iter = makeFullIterator();\n+            iter.next();\n+            iter.remove();\n+            try {\n+                iter.remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestIntListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListList.java,v 1.1 2003/02/26 19:17:24 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListList.java,v 1.2 2003/03/01 00:47:29 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n package org.apache.commons.collections.primitives.adapters;\n \n+import java.io.Serializable;\n import java.util.List;\n \n import junit.framework.Test;\n \n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.primitives.AbstractRandomAccessIntList;\n import org.apache.commons.collections.primitives.ArrayIntList;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/02/26 19:17:24 $\n+ * @version $Revision: 1.2 $ $Date: 2003/03/01 00:47:29 $\n  * @author Rodney Waldhoff\n  */\n public class TestIntListList extends TestList {\n         // need to add a serialized form to cvs\n     }\n \n+    public void testWrapNull() {\n+        assertNull(IntListList.wrap(null));\n+    }\n+    \n+    public void testWrapSerializable() {\n+        List list = IntListList.wrap(new ArrayIntList());\n+        assertNotNull(list);\n+        assertTrue(list instanceof Serializable);\n+    }\n+    \n+    public void testWrapNonSerializable() {\n+        List list = IntListList.wrap(new AbstractRandomAccessIntList() { \n+            public int get(int i) { throw new IndexOutOfBoundsException(); } \n+            public int size() { return 0; } \n+        });\n+        assertNotNull(list);\n+        assertTrue(!(list instanceof Serializable));\n+    }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIteratorIntIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIteratorIntIterator.java,v 1.1 2003/03/01 00:47:29 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.primitives.IntIterator;\n+import org.apache.commons.collections.primitives.TestIntIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/03/01 00:47:29 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestIteratorIntIterator extends TestIntIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestIteratorIntIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestIteratorIntIterator.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    public IntIterator makeEmptyIntIterator() {\n+        return IteratorIntIterator.wrap(makeEmptyList().iterator());\n+    }\n+    \n+    public IntIterator makeFullIntIterator() {\n+        return IteratorIntIterator.wrap(makeFullList().iterator());\n+    }\n+\n+    protected List makeEmptyList() {\n+        return new ArrayList();\n+    }\n+    \n+    protected List makeFullList() {\n+        List list = makeEmptyList();\n+        int[] elts = getFullElements();\n+        for(int i=0;i<elts.length;i++) {\n+            list.add(new Integer(elts[i]));\n+        }\n+        return list;\n+    }\n+    \n+    public int[] getFullElements() {\n+        return new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+\n+}\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestListIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestListIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestListIntList.java,v 1.2 2003/02/28 00:17:56 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestListIntList.java,v 1.3 2003/03/01 00:47:29 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n package org.apache.commons.collections.primitives.adapters;\n \n+import java.io.Serializable;\n+import java.util.AbstractList;\n import java.util.ArrayList;\n \n import junit.framework.Test;\n import org.apache.commons.collections.primitives.TestIntList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/02/28 00:17:56 $\n+ * @version $Revision: 1.3 $ $Date: 2003/03/01 00:47:29 $\n  * @author Rodney Waldhoff\n  */\n public class TestListIntList extends TestIntList {\n         // XXX FIX ME XXX\n         // need to add a serialized form to cvs\n     }\n+    public void testWrapNull() {\n+        assertNull(ListIntList.wrap(null));\n+    }\n+    \n+    public void testWrapSerializable() {\n+        IntList list = ListIntList.wrap(new ArrayList());\n+        assertNotNull(list);\n+        assertTrue(list instanceof Serializable);\n+    }\n+    \n+    public void testWrapNonSerializable() {\n+        IntList list = ListIntList.wrap(new AbstractList() { \n+            public Object get(int i) { throw new IndexOutOfBoundsException(); } \n+            public int size() { return 0; } \n+        });\n+        assertNotNull(list);\n+        assertTrue(!(list instanceof Serializable));\n+    }\n \n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestListIteratorIntListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestListIteratorIntListIterator.java,v 1.1 2003/03/01 00:47:29 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.primitives.IntListIterator;\n+import org.apache.commons.collections.primitives.TestIntListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/03/01 00:47:29 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestListIteratorIntListIterator extends TestIntListIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestListIteratorIntListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestListIteratorIntListIterator.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    public IntListIterator makeEmptyIntListIterator() {\n+        return ListIteratorIntListIterator.wrap(makeEmptyList().listIterator());\n+    }\n+    \n+    public IntListIterator makeFullIntListIterator() {\n+        return ListIteratorIntListIterator.wrap(makeFullList().listIterator());\n+    }\n+\n+    protected List makeEmptyList() {\n+        return new ArrayList();\n+    }\n+    \n+    protected List makeFullList() {\n+        List list = makeEmptyList();\n+        int[] elts = getFullElements();\n+        for(int i=0;i<elts.length;i++) {\n+            list.add(new Integer(elts[i]));\n+        }\n+        return list;\n+    }\n+    \n+    public int[] getFullElements() {\n+        return new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+\n+}", "timestamp": 1046479649, "metainfo": ""}