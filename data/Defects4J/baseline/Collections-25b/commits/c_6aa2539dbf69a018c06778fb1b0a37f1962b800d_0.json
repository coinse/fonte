{"sha": "6aa2539dbf69a018c06778fb1b0a37f1962b800d", "log": "Add additional javadoc links to implementation classes   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ClosureUtils.java\n+++ b/src/java/org/apache/commons/collections/ClosureUtils.java\n  * All the supplied closures are Serializable.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.8 $ $Date: 2004/04/14 21:47:47 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Gets a Closure that always throws an exception.\n      * This could be useful during testing as a placeholder.\n      *\n+     * @see org.apache.commons.collections.functors.ExceptionClosure\n+     * \n      * @return the closure\n      */\n     public static Closure exceptionClosure() {\n      * Gets a Closure that will do nothing.\n      * This could be useful during testing as a placeholder.\n      *\n+     * @see org.apache.commons.collections.functors.NOPClosure\n+     * \n      * @return the closure\n      */\n     public static Closure nopClosure() {\n      * The transformer will be called using the closure's input object.\n      * The transformer's result will be ignored.\n      *\n+     * @see org.apache.commons.collections.functors.TransformerClosure\n+     * \n      * @param transformer  the transformer to run each time in the closure, null means nop\n      * @return the closure\n      */\n      * <p>\n      * A null closure or zero count returns the <code>NOPClosure</code>.\n      *\n+     * @see org.apache.commons.collections.functors.ForClosure\n+     * \n      * @param count  the number of times to loop\n      * @param closure  the closure to call repeatedly\n      * @return the <code>for</code> closure\n      * Creates a Closure that will call the closure repeatedly until the \n      * predicate returns false.\n      *\n+     * @see org.apache.commons.collections.functors.WhileClosure\n+     * \n      * @param predicate  the predicate to use as an end of loop test, not null\n      * @param closure  the closure to call repeatedly, not null\n      * @return the <code>while</code> closure\n      * Creates a Closure that will call the closure once and then repeatedly\n      * until the predicate returns false.\n      *\n+     * @see org.apache.commons.collections.functors.WhileClosure\n+     * \n      * @param closure  the closure to call repeatedly, not null\n      * @param predicate  the predicate to use as an end of loop test, not null\n      * @return the <code>do-while</code> closure\n      * Creates a Closure that will invoke a specific method on the closure's\n      * input object by reflection.\n      *\n+     * @see org.apache.commons.collections.functors.InvokerTransformer\n+     * @see org.apache.commons.collections.functors.TransformerClosure\n+     * \n      * @param methodName  the name of the method\n      * @return the <code>invoker</code> closure\n      * @throws IllegalArgumentException if the method name is null\n      * Creates a Closure that will invoke a specific method on the closure's\n      * input object by reflection.\n      *\n+     * @see org.apache.commons.collections.functors.InvokerTransformer\n+     * @see org.apache.commons.collections.functors.TransformerClosure\n+     * \n      * @param methodName  the name of the method\n      * @param paramTypes  the parameter types\n      * @param args  the arguments\n      * Create a new Closure that calls two Closures, passing the result of\n      * the first into the second.\n      * \n+     * @see org.apache.commons.collections.functors.ChainedClosure\n+     * \n      * @param closure1  the first closure\n      * @param closure2  the second closure\n      * @return the <code>chained</code> closure\n      * Create a new Closure that calls each closure in turn, passing the \n      * result into the next closure.\n      * \n+     * @see org.apache.commons.collections.functors.ChainedClosure\n+     * \n      * @param closures  an array of closures to chain\n      * @return the <code>chained</code> closure\n      * @throws IllegalArgumentException if the closures array is null\n      * Create a new Closure that calls each closure in turn, passing the \n      * result into the next closure. The ordering is that of the iterator()\n      * method on the collection.\n+     * \n+     * @see org.apache.commons.collections.functors.ChainedClosure\n      * \n      * @param closures  a collection of closures to chain\n      * @return the <code>chained</code> closure\n     /**\n      * Create a new Closure that calls one of two closures depending \n      * on the specified predicate.\n+     * \n+     * @see org.apache.commons.collections.functors.IfClosure\n      * \n      * @param predicate  the predicate to switch on\n      * @param trueClosure  the closure called if the predicate is true\n      * location 0 returned true. Each predicate is evaluated\n      * until one returns true.\n      * \n+     * @see org.apache.commons.collections.functors.SwitchClosure\n+     * \n      * @param predicates  an array of predicates to check, not null\n      * @param closures  an array of closures to call, not null\n      * @return the <code>switch</code> closure\n      * location 0 returned true. Each predicate is evaluated\n      * until one returns true. If no predicates evaluate to true, the default\n      * closure is called.\n+     * \n+     * @see org.apache.commons.collections.functors.SwitchClosure\n      * \n      * @param predicates  an array of predicates to check, not null\n      * @param closures  an array of closures to call, not null\n      * null key. The ordering is that of the iterator() method on the entryset \n      * collection of the map.\n      * \n+     * @see org.apache.commons.collections.functors.SwitchClosure\n+     * \n      * @param predicatesAndClosures  a map of predicates to closures\n      * @return the <code>switch</code> closure\n      * @throws IllegalArgumentException if the map is null\n      * is called if the input object equals the key. If there is no match, the\n      * default closure is called. The default closure is set in the map\n      * using a null key.\n+     * \n+     * @see org.apache.commons.collections.functors.SwitchClosure\n      * \n      * @param objectsAndClosures  a map of objects to closures\n      * @return the closure\n--- a/src/java/org/apache/commons/collections/FactoryUtils.java\n+++ b/src/java/org/apache/commons/collections/FactoryUtils.java\n  * All the supplied factories are Serializable.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.13 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.14 $ $Date: 2004/04/14 21:47:47 $\n  *\n  * @author Stephen Colebourne\n  */\n      * Gets a Factory that always throws an exception.\n      * This could be useful during testing as a placeholder.\n      *\n+     * @see org.apache.commons.collections.functors.ExceptionFactory\n+     * \n      * @return the factory\n      */\n     public static Factory exceptionFactory() {\n      * Gets a Factory that will return null each time the factory is used.\n      * This could be useful during testing as a placeholder.\n      *\n+     * @see org.apache.commons.collections.functors.ConstantFactory\n+     * \n      * @return the factory\n      */\n     public static Factory nullFactory() {\n      * immutable objects should use the constant factory. Mutable objects should\n      * use the prototype factory.\n      *\n+     * @see org.apache.commons.collections.functors.ConstantFactory\n+     * \n      * @param constantToReturn  the constant object to return each time in the factory\n      * @return the <code>constant</code> factory.\n      */\n      * <li>serialization clone\n      * <ul>\n      *\n+     * @see org.apache.commons.collections.functors.PrototypeFactory\n+     * \n      * @param prototype  the object to clone each time in the factory\n      * @return the <code>prototype</code> factory\n      * @throws IllegalArgumentException if the prototype is null\n      * Creates a Factory that can create objects of a specific type using\n      * a no-args constructor.\n      *\n+     * @see org.apache.commons.collections.functors.InstantiateFactory\n+     * \n      * @param classToInstantiate  the Class to instantiate each time in the factory\n      * @return the <code>reflection</code> factory\n      * @throws IllegalArgumentException if the classToInstantiate is null\n      * Creates a Factory that can create objects of a specific type using\n      * the arguments specified to this method.\n      *\n+     * @see org.apache.commons.collections.functors.InstantiateFactory\n+     * \n      * @param classToInstantiate  the Class to instantiate each time in the factory\n      * @param paramTypes  parameter types for the constructor, can be null\n      * @param args  the arguments to pass to the constructor, can be null\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n  * All the supplied predicates are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.17 $ $Date: 2004/03/13 16:34:46 $\n+ * @version $Revision: 1.18 $ $Date: 2004/04/14 21:47:47 $\n  * \n  * @author Stephen Colebourne\n  * @author Ola Berg\n      * Gets a Predicate that always throws an exception.\n      * This could be useful during testing as a placeholder.\n      *\n+     * @see org.apache.commons.collections.functors.ExceptionPredicate\n+     * \n      * @return the predicate\n      */\n     public static Predicate exceptionPredicate() {\n     /**\n      * Gets a Predicate that always returns true.\n      * \n+     * @see org.apache.commons.collections.functors.TruePredicate\n+     * \n      * @return the predicate\n      */\n     public static Predicate truePredicate() {\n     /**\n      * Gets a Predicate that always returns false.\n      * \n+     * @see org.apache.commons.collections.functors.FalsePredicate\n+     * \n      * @return the predicate\n      */\n     public static Predicate falsePredicate() {\n     /**\n      * Gets a Predicate that checks if the input object passed in is null.\n      * \n+     * @see org.apache.commons.collections.functors.NullPredicate\n+     * \n      * @return the predicate\n      */\n     public static Predicate nullPredicate() {\n     /**\n      * Gets a Predicate that checks if the input object passed in is not null.\n      * \n+     * @see org.apache.commons.collections.functors.NotNullPredicate\n+     * \n      * @return the predicate\n      */\n     public static Predicate notNullPredicate() {\n      * Creates a Predicate that checks if the input object is equal to the\n      * specified object using equals().\n      * \n+     * @see org.apache.commons.collections.functors.EqualPredicate\n+     * \n      * @param value  the value to compare against\n      * @return the predicate\n      */\n     /**\n      * Creates a Predicate that checks if the input object is equal to the\n      * specified object by identity.\n+     * \n+     * @see org.apache.commons.collections.functors.IdentityPredicate\n      * \n      * @param value  the value to compare against\n      * @return the predicate\n      * Creates a Predicate that checks if the object passed in is of\n      * a particular type, using instanceof. A <code>null</code> input\n      * object will return <code>false</code>.\n+     * \n+     * @see org.apache.commons.collections.functors.InstanceofPredicate\n      * \n      * @param type  the type to check for, may not be null\n      * @return the predicate\n      * again. The comparison is by equals(). A <code>null</code> input object\n      * is accepted and will return true the first time, and false subsequently\n      * as well.\n+     * \n+     * @see org.apache.commons.collections.functors.UniquePredicate\n      * \n      * @return the predicate\n      */\n      * will call the <code>isEmpty</code> method on the input object to \n      * determine the predicate result.\n      * \n+     * @see org.apache.commons.collections.functors.InvokerTransformer\n+     * @see org.apache.commons.collections.functors.TransformerPredicate\n+     * \n      * @param methodName  the method name to call on the input object, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the methodName is null.\n      * will call the <code>isEmpty</code> method on the input object to \n      * determine the predicate result.\n      * \n+     * @see org.apache.commons.collections.functors.InvokerTransformer\n+     * @see org.apache.commons.collections.functors.TransformerPredicate\n+     * \n      * @param methodName  the method name to call on the input object, may not be null\n      * @param paramTypes  the parameter types\n      * @param args  the arguments\n     /**\n      * Create a new Predicate that returns true only if both of the specified\n      * predicates are true.\n+     * \n+     * @see org.apache.commons.collections.functors.AndPredicate\n      * \n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n     /**\n      * Create a new Predicate that returns true only if all of the specified\n      * predicates are true.\n+     * \n+     * @see org.apache.commons.collections.functors.AllPredicate\n      * \n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>all</code> predicate\n      * Create a new Predicate that returns true only if all of the specified\n      * predicates are true. The predicates are checked in iterator order.\n      * \n+     * @see org.apache.commons.collections.functors.AllPredicate\n+     * \n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * Create a new Predicate that returns true if either of the specified\n      * predicates are true.\n      * \n+     * @see org.apache.commons.collections.functors.OrPredicate\n+     * \n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>or</code> predicate\n     /**\n      * Create a new Predicate that returns true if any of the specified\n      * predicates are true.\n+     * \n+     * @see org.apache.commons.collections.functors.AnyPredicate\n      * \n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>any</code> predicate\n      * Create a new Predicate that returns true if any of the specified\n      * predicates are true. The predicates are checked in iterator order.\n      * \n+     * @see org.apache.commons.collections.functors.AnyPredicate\n+     * \n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * Create a new Predicate that returns true if one, but not both, of the\n      * specified predicates are true.\n      * \n+     * @see org.apache.commons.collections.functors.OnePredicate\n+     * \n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>either</code> predicate\n     /**\n      * Create a new Predicate that returns true if only one of the specified\n      * predicates are true.\n+     * \n+     * @see org.apache.commons.collections.functors.OnePredicate\n      * \n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>one</code> predicate\n      * Create a new Predicate that returns true if only one of the specified\n      * predicates are true. The predicates are checked in iterator order.\n      * \n+     * @see org.apache.commons.collections.functors.OnePredicate\n+     * \n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * Create a new Predicate that returns true if neither of the specified \n      * predicates are true.\n      * \n+     * @see org.apache.commons.collections.functors.NonePredicate\n+     * \n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>neither</code> predicate\n     /**\n      * Create a new Predicate that returns true if none of the specified\n      * predicates are true.\n+     * \n+     * @see org.apache.commons.collections.functors.NonePredicate\n      * \n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>none</code> predicate\n      * Create a new Predicate that returns true if none of the specified\n      * predicates are true. The predicates are checked in iterator order.\n      * \n+     * @see org.apache.commons.collections.functors.NonePredicate\n+     * \n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>none</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * Create a new Predicate that returns true if the specified predicate\n      * returns false and vice versa.\n      * \n+     * @see org.apache.commons.collections.functors.NotPredicate\n+     * \n      * @param predicate  the predicate to not\n      * @return the <code>not</code> predicate\n      * @throws IllegalArgumentException if the predicate is null\n      * return either Boolean.TRUE or Boolean.FALSE otherwise a PredicateException\n      * will be thrown.\n      * \n+     * @see org.apache.commons.collections.functors.TransformerPredicate\n+     * \n      * @param transformer  the transformer to wrap, may not be null\n      * @return the transformer wrapping predicate\n      * @throws IllegalArgumentException if the transformer is null\n      * otherwise it calls the specified Predicate. This allows null handling \n      * behaviour to be added to Predicates that don't support nulls.\n      * \n+     * @see org.apache.commons.collections.functors.NullIsExceptionPredicate\n+     * \n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null.\n      * it calls the specified Predicate. This allows null handling behaviour to\n      * be added to Predicates that don't support nulls.\n      * \n+     * @see org.apache.commons.collections.functors.NullIsFalsePredicate\n+     * \n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null.\n      * it calls the specified Predicate. This allows null handling behaviour to\n      * be added to Predicates that don't support nulls.\n      * \n+     * @see org.apache.commons.collections.functors.NullIsTruePredicate\n+     * \n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null.\n      * Creates a predicate that transforms the input object before passing it\n      * to the predicate.\n      * \n+     * @see org.apache.commons.collections.functors.TransformedPredicate\n+     * \n      * @param transformer  the transformer to call first\n      * @param predicate  the predicate to call with the result of the transform\n      * @return the predicate\n--- a/src/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/java/org/apache/commons/collections/TransformerUtils.java\n  * All the supplied transformers are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.11 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.12 $ $Date: 2004/04/14 21:47:47 $\n  * \n  * @author Stephen Colebourne\n  * @author James Carman\n      * Gets a transformer that always throws an exception.\n      * This could be useful during testing as a placeholder.\n      * \n+     * @see org.apache.commons.collections.functors.ExceptionTransformer\n+     * \n      * @return the transformer\n      */\n     public static Transformer exceptionTransformer() {\n \n     /**\n      * Gets a transformer that always returns null.\n+     * \n+     * @see org.apache.commons.collections.functors.ConstantTransformer\n      * \n      * @return the transformer\n      */\n      * Gets a transformer that returns the input object.\n      * The input object should be immutable to maintain the\n      * contract of Transformer (although this is not checked).\n+     * \n+     * @see org.apache.commons.collections.functors.NOPTransformer\n      * \n      * @return the transformer\n      */\n      * <li>serialization clone\n      * <ul>\n      * \n+     * @see org.apache.commons.collections.functors.CloneTransformer\n+     * \n      * @return the transformer\n      */\n     public static Transformer cloneTransformer() {\n      * Creates a Transformer that will return the same object each time the \n      * transformer is used.\n      *\n+     * @see org.apache.commons.collections.functors.ConstantTransformer\n+     * \n      * @param constantToReturn  the constant object to return each time in the transformer\n      * @return the transformer.\n      */\n      * Creates a Transformer that calls a Closure each time the transformer is used.\n      * The transformer returns the input object.\n      *\n+     * @see org.apache.commons.collections.functors.ClosureTransformer\n+     * \n      * @param closure  the closure to run each time in the transformer, not null\n      * @return the transformer\n      * @throws IllegalArgumentException if the closure is null\n      * Creates a Transformer that calls a Predicate each time the transformer is used.\n      * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n      *\n+     * @see org.apache.commons.collections.functors.PredicateTransformer\n+     * \n      * @param predicate  the predicate to run each time in the transformer, not null\n      * @return the transformer\n      * @throws IllegalArgumentException if the predicate is null\n      * Creates a Transformer that calls a Factory each time the transformer is used.\n      * The transformer will return the value returned by the factory.\n      *\n+     * @see org.apache.commons.collections.functors.FactoryTransformer\n+     * \n      * @param factory  the factory to run each time in the transformer, not null\n      * @return the transformer\n      * @throws IllegalArgumentException if the factory is null\n      * Create a new Transformer that calls two transformers, passing the result of\n      * the first into the second.\n      * \n+     * @see org.apache.commons.collections.functors.ChainedTransformer\n+     * \n      * @param transformer1  the first transformer\n      * @param transformer2  the second transformer\n      * @return the transformer\n     /**\n      * Create a new Transformer that calls each transformer in turn, passing the \n      * result into the next transformer.\n+     * \n+     * @see org.apache.commons.collections.functors.ChainedTransformer\n      * \n      * @param transformers  an array of transformers to chain\n      * @return the transformer\n      * result into the next transformer. The ordering is that of the iterator()\n      * method on the collection.\n      * \n+     * @see org.apache.commons.collections.functors.ChainedTransformer\n+     * \n      * @param transformers  a collection of transformers to chain\n      * @return the transformer\n      * @throws IllegalArgumentException if the transformers collection is null\n     /**\n      * Create a new Transformer that calls one of two transformers depending \n      * on the specified predicate.\n+     * \n+     * @see org.apache.commons.collections.functors.SwitchTransformer\n      * \n      * @param predicate  the predicate to switch on\n      * @param trueTransformer  the transformer called if the predicate is true\n      * on the predicates. The transformer at array location 0 is called if the\n      * predicate at array location 0 returned true. Each predicate is evaluated\n      * until one returns true. If no predicates evaluate to true, null is returned.\n+     * \n+     * @see org.apache.commons.collections.functors.SwitchTransformer\n      * \n      * @param predicates  an array of predicates to check\n      * @param transformers  an array of transformers to call\n      * predicate at array location 0 returned true. Each predicate is evaluated\n      * until one returns true. If no predicates evaluate to true, the default\n      * transformer is called. If the default transformer is null, null is returned.\n+     * \n+     * @see org.apache.commons.collections.functors.SwitchTransformer\n      * \n      * @param predicates  an array of predicates to check\n      * @param transformers  an array of transformers to call\n      * case. The ordering is that of the iterator() method on the entryset collection \n      * of the map.\n      * \n+     * @see org.apache.commons.collections.functors.SwitchTransformer\n+     * \n      * @param predicatesAndTransformers  a map of predicates to transformers\n      * @return the transformer\n      * @throws IllegalArgumentException if the map is null\n      * is called if the input object equals the key. If there is no match, the\n      * default transformer is called. The default transformer is set in the map\n      * using a null key. If no default is set, null will be returned in a default case.\n+     * \n+     * @see org.apache.commons.collections.functors.SwitchTransformer\n      * \n      * @param objectsAndTransformers  a map of objects to transformers\n      * @return the transformer\n     /**\n      * Gets a Transformer that expects an input Class object that it will instantiate.\n      * \n+     * @see org.apache.commons.collections.functors.InstantiateTransformer\n+     * \n      * @return the transformer\n      */\n     public static Transformer instantiateTransformer() {\n      * instantiate. The constructor used is determined by the arguments specified\n      * to this method.\n      *\n+     * @see org.apache.commons.collections.functors.InstantiateTransformer\n+     * \n      * @param paramTypes  parameter types for the constructor, can be null\n      * @param args  the arguments to pass to the constructor, can be null\n      * @return the transformer\n      * Creates a Transformer that uses the passed in Map to transform the input \n      * object (as a simple lookup).\n      *\n+     * @see org.apache.commons.collections.functors.MapTransformer\n+     * \n      * @param map  the map to use to transform the objects\n      * @return the transformer\n      * @throws IllegalArgumentException if the map is null\n      * will call the <code>getName/code> method on the input object to \n      * determine the transformer result.\n      * \n+     * @see org.apache.commons.collections.functors.InvokerTransformer\n+     * \n      * @param methodName  the method name to call on the input object, may not be null\n      * @return the transformer\n      * @throws IllegalArgumentException if the methodName is null.\n      * The method parameters are specified. If the input object is null, \n      * null is returned.\n      * \n+     * @see org.apache.commons.collections.functors.InvokerTransformer\n+     * \n      * @param methodName  the name of the method\n      * @param paramTypes  the parameter types\n      * @param args  the arguments\n      * representation of the input object. This is achieved via the\n      * <code>toString</code> method, <code>null</code> returns 'null'.\n      * \n+     * @see org.apache.commons.collections.functors.StringValueTransformer\n+     * \n      * @return the transformer\n      */\n     public static Transformer stringValueTransformer() {", "timestamp": 1081979267, "metainfo": ""}