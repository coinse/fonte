{"sha": "ae8ad94a2436e0ea1d90d690c9cc94512e5ca1c6", "log": "Add new faster Bag implementations in bag subpackage Deprecate originals in main package   ", "commit": "\n--- a/src/java/org/apache/commons/collections/DefaultMapBag.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapBag.java,v 1.10 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapBag.java,v 1.11 2003/12/02 23:36:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * The map will be used to map bag elements to a number; the number represents\n  * the number of occurrences of that element in the bag.\n  *\n+ * @deprecated Moved to bag subpackage as AbstractMapBag. Due to be removed in v4.0.\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.10 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.11 $ $Date: 2003/12/02 23:36:12 $\n  * \n  * @author Chuck Burdick\n- * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n+ * @author Michael A. Smith\n  * @author Stephen Colebourne\n  * @author Janek Bogucki\n  */\n--- a/src/java/org/apache/commons/collections/HashBag.java\n+++ b/src/java/org/apache/commons/collections/HashBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/HashBag.java,v 1.9 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/HashBag.java,v 1.10 2003/12/02 23:36:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * A {@link Bag} that is backed by a {@link HashMap}.\n  *\n+ * @deprecated Moved to bag subpackage. Due to be removed in v4.0.\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.9 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.10 $ $Date: 2003/12/02 23:36:12 $\n  * \n  * @author Chuck Burdick\n  */\n--- a/src/java/org/apache/commons/collections/TreeBag.java\n+++ b/src/java/org/apache/commons/collections/TreeBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TreeBag.java,v 1.9 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TreeBag.java,v 1.10 2003/12/02 23:36:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Order will be maintained among the unique representative\n  * members.\n  *\n+ * @deprecated Moved to bag subpackage. Due to be removed in v4.0.\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.9 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.10 $ $Date: 2003/12/02 23:36:12 $\n  * \n  * @author Chuck Burdick\n  */\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.1 2003/12/02 23:36:12 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.lang.reflect.Array;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Bag;\n+\n+/**\n+ * Abstract implementation of the {@link Bag} interface to simplify the creation\n+ * of subclass implementations.\n+ * <p>\n+ * Subclasses specify a Map implementation to use as the internal storage.\n+ * The map will be used to map bag elements to a number; the number represents\n+ * the number of occurrences of that element in the bag.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 23:36:12 $\n+ * \n+ * @author Chuck Burdick\n+ * @author Michael A. Smith\n+ * @author Stephen Colebourne\n+ * @author Janek Bogucki\n+ */\n+public abstract class AbstractMapBag implements Bag {\n+    \n+    /** The map to use to store the data */\n+    private final Map map;\n+    /** The current total size of the bag */\n+    private int size;\n+    /** The modification count for fail fast iterators */\n+    private transient int modCount;\n+    /** The modification count for fail fast iterators */\n+    private transient Set uniqueSet;\n+\n+    /**\n+     * Constructor that assigns the specified Map as the backing store.\n+     * The map must be empty.\n+     * \n+     * @param map  the map to assign\n+     */\n+    protected AbstractMapBag(Map map) {\n+        super();\n+        this.map = map;\n+    }\n+\n+    /**\n+     * Utility method for implementations to access the map that backs\n+     * this bag. Not intended for interactive use outside of\n+     * subclasses.\n+     */\n+    protected Map getMap() {\n+        return map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the number of elements in this bag.\n+     *\n+     * @return current size of the bag\n+     */\n+    public int size() {\n+        return size;\n+    }\n+\n+    /**\n+     * Returns true if the underlying map is empty.\n+     *\n+     * @return true if bag is empty\n+     */\n+    public boolean isEmpty() {\n+        return map.isEmpty();\n+    }\n+\n+    /**\n+     * Returns the number of occurrence of the given element in this bag\n+     * by looking up its count in the underlying map.\n+     *\n+     * @param object  the object to search for\n+     * @return the number of occurrences of the object, zero if not found\n+     */\n+    public int getCount(Object object) {\n+        MutableInteger count = (MutableInteger) map.get(object);\n+        if (count != null) {\n+            return count.value;\n+        }\n+        return 0;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Determines if the bag contains the given element by checking if the\n+     * underlying map contains the element as a key.\n+     *\n+     * @param object  the object to search for\n+     * @return true if the bag contains the given element\n+     */\n+    public boolean contains(Object object) {\n+        return map.containsKey(object);\n+    }\n+\n+    /**\n+     * Determines if the bag contains the given elements.\n+     * \n+     * @param coll  the collection to check against\n+     * @return <code>true</code> if the Bag contains all the collection\n+     */\n+    public boolean containsAll(Collection coll) {\n+        if (coll instanceof Bag) {\n+            return containsAll((Bag) coll);\n+        }\n+        return containsAll(new HashBag(coll));\n+    }\n+\n+    /**\n+     * Returns <code>true</code> if the bag contains all elements in\n+     * the given collection, respecting cardinality.\n+     * \n+     * @param other  the bag to check against\n+     * @return <code>true</code> if the Bag contains all the collection\n+     */\n+    boolean containsAll(Bag other) {\n+        boolean result = true;\n+        Iterator it = other.uniqueSet().iterator();\n+        while (it.hasNext()) {\n+            Object current = it.next();\n+            boolean contains = getCount(current) >= ((Bag) other).getCount(current);\n+            result = result && contains;\n+        }\n+        return result;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an iterator over the bag elements.\n+     * Elements present in the Bag more than once will be returned repeatedly.\n+     * \n+     * @return the iterator\n+     */\n+    public Iterator iterator() {\n+        return new BagIterator(this);\n+//        List result = new ArrayList();\n+//        Iterator i = map.keySet().iterator();\n+//        while (i.hasNext()) {\n+//            Object current = i.next();\n+//            for (int index = getCount(current); index > 0; index--) {\n+//                result.add(current);\n+//            }\n+//        }\n+//        return new BagIterator(this, result.iterator());\n+    }\n+\n+//    static class BagIterator implements Iterator {\n+//        private AbstractMapBag parent;\n+//        private Iterator support;\n+//        private Object current;\n+//        private int mods;\n+//        private boolean canRemove;\n+//\n+//        public BagIterator(AbstractMapBag parent, Iterator support) {\n+//            this.parent = parent;\n+//            this.support = support;\n+//            this.current = null;\n+//            this.mods = parent.modCount;\n+//            this.canRemove = false;\n+//        }\n+//\n+//        public boolean hasNext() {\n+//            return support.hasNext();\n+//        }\n+//\n+//        public Object next() {\n+//            if (parent.modCount != mods) {\n+//                throw new ConcurrentModificationException();\n+//            }\n+//            current = support.next();\n+//            canRemove = true;\n+//            return current;\n+//        }\n+//\n+//        public void remove() {\n+//            if (parent.modCount != mods) {\n+//                throw new ConcurrentModificationException();\n+//            }\n+//            if (canRemove == false) {\n+//                throw new IllegalStateException();\n+//            }\n+//            support.remove();\n+//            parent.remove(current, 1);\n+//            canRemove = false;\n+//            mods++;\n+//        }\n+//    }\n+\n+    static class BagIterator implements Iterator {\n+        private AbstractMapBag parent;\n+        private Iterator entryIterator;\n+        private Map.Entry current;\n+        private int itemCount;\n+        private final int mods;\n+        private boolean canRemove;\n+\n+        public BagIterator(AbstractMapBag parent) {\n+            this.parent = parent;\n+            this.entryIterator = parent.map.entrySet().iterator();\n+            this.current = null;\n+            this.mods = parent.modCount;\n+            this.canRemove = false;\n+        }\n+\n+        public boolean hasNext() {\n+            return (itemCount > 0 || entryIterator.hasNext());\n+        }\n+\n+        public Object next() {\n+            if (parent.modCount != mods) {\n+                throw new ConcurrentModificationException();\n+            }\n+            if (itemCount == 0) {\n+                current = (Map.Entry) entryIterator.next();\n+                itemCount = ((MutableInteger) current.getValue()).value;\n+            }\n+            canRemove = true;\n+            itemCount--;\n+            return current.getKey();\n+        }\n+\n+        public void remove() {\n+            if (parent.modCount != mods) {\n+                throw new ConcurrentModificationException();\n+            }\n+            if (canRemove == false) {\n+                throw new IllegalStateException();\n+            }\n+            MutableInteger mut = (MutableInteger) current.getValue();\n+            if (mut.value > 0) {\n+                mut.value--;\n+                parent.size--;\n+            } else {\n+                entryIterator.remove();\n+            }\n+            canRemove = false;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a new element to the bag, incrementing its count in the underlying map.\n+     *\n+     * @param object  the object to add\n+     * @return <code>true</code> if the object was not already in the <code>uniqueSet</code>\n+     */\n+    public boolean add(Object object) {\n+        return add(object, 1);\n+    }\n+\n+    /**\n+     * Adds a new element to the bag, incrementing its count in the map.\n+     *\n+     * @param object  the object to search for\n+     * @param nCopies  the number of copies to add\n+     * @return <code>true</code> if the object was not already in the <code>uniqueSet</code>\n+     */\n+    public boolean add(Object object, int nCopies) {\n+        modCount++;\n+        if (nCopies > 0) {\n+            MutableInteger mut = (MutableInteger) map.get(object);\n+            size += nCopies;\n+            if (mut == null) {\n+                map.put(object, new MutableInteger(nCopies));\n+                return true;\n+            } else {\n+                mut.value += nCopies;\n+                return false;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Invokes {@link #add(Object)} for each element in the given collection.\n+     *\n+     * @param coll  the collection to add\n+     * @return <code>true</code> if this call changed the bag\n+     */\n+    public boolean addAll(Collection coll) {\n+        boolean changed = false;\n+        Iterator i = coll.iterator();\n+        while (i.hasNext()) {\n+            boolean added = add(i.next());\n+            changed = changed || added;\n+        }\n+        return changed;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Clears the bag by clearing the underlying map.\n+     */\n+    public void clear() {\n+        modCount++;\n+        map.clear();\n+        size = 0;\n+    }\n+\n+    /**\n+     * Removes one copy of the specified object from the bag.\n+     * \n+     * @param object  the object to remove\n+     * @return true if the bag changed\n+     */\n+    public boolean remove(Object object) {\n+        return remove(object, getCount(object));\n+    }\n+\n+    /**\n+     * Removes a specified number of copies of an object from the bag.\n+     * \n+     * @param object  the object to remove\n+     * @param nCopies  the number of copies to remove\n+     * @return true if the bag changed\n+     */\n+    public boolean remove(Object object, int nCopies) {\n+        MutableInteger mut = (MutableInteger) map.get(object);\n+        if (mut == null) {\n+            return false;\n+        }\n+        if (nCopies <= 0) {\n+            return false;\n+        }\n+        modCount++;\n+        if (nCopies < mut.value) {\n+            mut.value -= nCopies;\n+            size -= nCopies;\n+        } else {\n+            map.remove(object);\n+            size -= mut.value;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Removes objects from the bag according to their count in the specified collection.\n+     * \n+     * @param coll  the collection to use\n+     * @return true if the bag changed\n+     */\n+    public boolean removeAll(Collection coll) {\n+        boolean result = false;\n+        if (coll != null) {\n+            Iterator i = coll.iterator();\n+            while (i.hasNext()) {\n+                boolean changed = remove(i.next(), 1);\n+                result = result || changed;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Remove any members of the bag that are not in the given\n+     * bag, respecting cardinality.\n+     *\n+     * @param coll  the collection to retain\n+     * @return true if this call changed the collection\n+     */\n+    public boolean retainAll(Collection coll) {\n+        if (coll instanceof Bag) {\n+            return retainAll((Bag) coll);\n+        }\n+        return retainAll(new HashBag(coll));\n+    }\n+\n+    /**\n+     * Remove any members of the bag that are not in the given\n+     * bag, respecting cardinality.\n+     * @see #retainAll(Collection)\n+     * \n+     * @param other  the bag to retain\n+     * @return <code>true</code> if this call changed the collection\n+     */\n+    boolean retainAll(Bag other) {\n+        boolean result = false;\n+        Bag excess = new HashBag();\n+        Iterator i = uniqueSet().iterator();\n+        while (i.hasNext()) {\n+            Object current = i.next();\n+            int myCount = getCount(current);\n+            int otherCount = other.getCount(current);\n+            if (1 <= otherCount && otherCount <= myCount) {\n+                excess.add(current, myCount - otherCount);\n+            } else {\n+                excess.add(current, myCount);\n+            }\n+        }\n+        if (!excess.isEmpty()) {\n+            result = removeAll(excess);\n+        }\n+        return result;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Mutable integer class for storing the data\n+     */\n+    static class MutableInteger {\n+        int value;\n+        \n+        MutableInteger(int value) {\n+            this.value = value;\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an array of all of this bag's elements.\n+     *\n+     * @return an array of all of this bag's elements\n+     */\n+    public Object[] toArray() {\n+        Object[] result = new Object[size()];\n+        int i = 0;\n+        Iterator it = map.keySet().iterator();\n+        while (it.hasNext()) {\n+            Object current = it.next();\n+            for (int index = getCount(current); index > 0; index--) {\n+                result[i++] = current;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Returns an array of all of this bag's elements.\n+     *\n+     * @param array  the array to populate\n+     * @return an array of all of this bag's elements\n+     */\n+    public Object[] toArray(Object[] array) {\n+        int size = size();\n+        if (array.length < size) {\n+            array = (Object[]) Array.newInstance(array.getClass().getComponentType(), size);\n+        }\n+\n+        int i = 0;\n+        Iterator it = map.keySet().iterator();\n+        while (it.hasNext()) {\n+            Object current = it.next();\n+            for (int index = getCount(current); index > 0; index--) {\n+                array[i++] = current;\n+            }\n+        }\n+        if (array.length > size) {\n+            array[size] = null;\n+        }\n+        return array;\n+    }\n+\n+    /**\n+     * Returns an unmodifiable view of the underlying map's key set.\n+     *\n+     * @return the set of unique elements in this bag\n+     */\n+    public Set uniqueSet() {\n+        if (uniqueSet == null) {\n+            uniqueSet = Collections.unmodifiableSet(map.keySet());\n+        }\n+        return uniqueSet;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns true if the given object is not null, has the precise type \n+     * of this bag, and contains the same number of occurrences of all the\n+     * same elements.\n+     *\n+     * @param object  the object to test for equality\n+     * @return true if that object equals this bag\n+     */\n+    public boolean equals(Object object) {\n+        if (object == this) {\n+            return true;\n+        }\n+        return (object != null &&\n+                object.getClass().equals(this.getClass()) &&\n+                ((AbstractMapBag) object).map.equals(this.map));\n+    }\n+\n+    /**\n+     * Returns the hash code of the underlying map.\n+     *\n+     * @return the hash code of the underlying map\n+     */\n+    public int hashCode() {\n+        return map.hashCode();\n+    }\n+\n+    /**\n+     * Implement a toString() method suitable for debugging.\n+     * \n+     * @return a debugging toString\n+     */\n+    public String toString() {\n+        if (size() == 0) {\n+            return \"[]\";\n+        }\n+        StringBuffer buf = new StringBuffer();\n+        buf.append('[');\n+        Iterator it = uniqueSet().iterator();\n+        while (it.hasNext()) {\n+            Object current = it.next();\n+            int count = getCount(current);\n+            buf.append(count);\n+            buf.append(':');\n+            buf.append(current);\n+            if (it.hasNext()) {\n+                buf.append(',');\n+            }\n+        }\n+        buf.append(']');\n+        return buf.toString();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/HashBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/HashBag.java,v 1.1 2003/12/02 23:36:12 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+\n+import org.apache.commons.collections.Bag;\n+\n+/**\n+ * Implements <code>Bag</code>, using a <code>HashMap</code> to provide the\n+ * data storage. This is the standard implementation of a bag.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 23:36:12 $\n+ * \n+ * @author Chuck Burdick\n+ * @author Stephen Colebourne\n+ */\n+public class HashBag extends AbstractMapBag implements Bag {\n+\n+    /**\n+     * Constructs an empty <Code>HashBag</Code>.\n+     */\n+    public HashBag() {\n+        super(new HashMap());\n+    }\n+\n+    /**\n+     * Constructs a {@link Bag} containing all the members of the given collection.\n+     * \n+     * @param coll  a collection to copy into this bag\n+     */\n+    public HashBag(Collection coll) {\n+        this();\n+        addAll(coll);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/TreeBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TreeBag.java,v 1.1 2003/12/02 23:36:12 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+import org.apache.commons.collections.SortedBag;\n+\n+/**\n+ * Implements <code>SortedBag</code>, using a <code>TreeMap</code> to provide\n+ * the data storage. This is the standard implementation of a sorted bag.\n+ * <p>\n+ * Order will be maintained among the bag members and can be viewed through the\n+ * iterator.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 23:36:12 $\n+ * \n+ * @author Chuck Burdick\n+ * @author Stephen Colebourne\n+ */\n+public class TreeBag extends AbstractMapBag implements SortedBag {\n+\n+    /**\n+     * Constructs an empty <code>TreeBag</code>.\n+     */\n+    public TreeBag() {\n+        super(new TreeMap());\n+    }\n+\n+    /**\n+     * Constructs an empty bag that maintains order on its unique\n+     * representative members according to the given {@link Comparator}.\n+     * \n+     * @param comparator  the comparator to use\n+     */\n+    public TreeBag(Comparator comparator) {\n+        super(new TreeMap(comparator));\n+    }\n+\n+    /**\n+     * Constructs a {@link Bag} containing all the members of the given\n+     * collection.\n+     * \n+     * @param coll  the collection to copy into the bag\n+     */\n+    public TreeBag(Collection coll) {\n+        this();\n+        addAll(coll);\n+    }\n+\n+    public Object first() {\n+        return ((SortedMap) getMap()).firstKey();\n+    }\n+\n+    public Object last() {\n+        return ((SortedMap) getMap()).lastKey();\n+    }\n+\n+    public Comparator comparator() {\n+        return ((SortedMap) getMap()).comparator();\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n+++ b/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/AbstractTestBag.java,v 1.2 2003/11/18 22:37:15 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/AbstractTestBag.java,v 1.3 2003/12/02 23:36:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.NoSuchElementException;\n \n import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.Bag;\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link Bag} fails.\n  *\n- * @version $Revision: 1.2 $ $Date: 2003/11/18 22:37:15 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/02 23:36:12 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n         bag.add(\"A\");\n         bag.add(\"A\");\n         bag.add(\"B\");\n-        Iterator i = bag.iterator();\n-        i.next();\n+        Iterator it = bag.iterator();\n+        it.next();\n         bag.remove(\"A\");\n         try {\n-            i.next();\n+            it.next();\n             fail(\"Should throw ConcurrentModificationException\");\n         } catch (ConcurrentModificationException e) {\n             // expected\n         }\n     }\n     \n+    public void testIteratorFailNoMore() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        Iterator it = bag.iterator();\n+        it.next();\n+        it.next();\n+        it.next();\n+        try {\n+            it.next();\n+            fail(\"Should throw NoSuchElementException\");\n+        } catch (NoSuchElementException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testIteratorFailDoubleRemove() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        Iterator it = bag.iterator();\n+        it.next();\n+        it.next();\n+        assertEquals(3, bag.size());\n+        it.remove();\n+        assertEquals(2, bag.size());\n+        try {\n+            it.remove();\n+            fail(\"Should throw IllegalStateException\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+        assertEquals(2, bag.size());\n+        it.next();\n+        it.remove();\n+        assertEquals(1, bag.size());\n+    }\n+    \n+    public void testToArray() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        bag.add(\"B\");\n+        bag.add(\"C\");\n+        Object[] array = bag.toArray();\n+        int a = 0, b = 0, c = 0;\n+        for (int i = 0; i < array.length; i++) {\n+            a += (array[i].equals(\"A\") ? 1 : 0);\n+            b += (array[i].equals(\"B\") ? 1 : 0);\n+            c += (array[i].equals(\"C\") ? 1 : 0);\n+        }\n+        assertEquals(2, a);\n+        assertEquals(2, b);\n+        assertEquals(1, c);\n+    }\n+\n+    public void testToArrayPopulate() {\n+        Bag bag = makeBag();\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        bag.add(\"B\");\n+        bag.add(\"C\");\n+        String[] array = (String[]) bag.toArray(new String[0]);\n+        int a = 0, b = 0, c = 0;\n+        for (int i = 0; i < array.length; i++) {\n+            a += (array[i].equals(\"A\") ? 1 : 0);\n+            b += (array[i].equals(\"B\") ? 1 : 0);\n+            c += (array[i].equals(\"C\") ? 1 : 0);\n+        }\n+        assertEquals(2, a);\n+        assertEquals(2, b);\n+        assertEquals(1, c);\n+    }\n+\n }\n--- a/src/test/org/apache/commons/collections/bag/TestAll.java\n+++ b/src/test/org/apache/commons/collections/bag/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestAll.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestAll.java,v 1.2 2003/12/02 23:36:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/02 23:36:12 $\n  * \n  * @author Stephen Colebourne\n  */\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         \n+        suite.addTest(TestHashBag.suite());\n         suite.addTest(TestPredicatedBag.suite());\n         suite.addTest(TestPredicatedSortedBag.suite());\n         suite.addTest(TestTransformedBag.suite());\n         suite.addTest(TestTransformedSortedBag.suite());\n+        suite.addTest(TestTreeBag.suite());\n         suite.addTest(TestTypedBag.suite());\n         suite.addTest(TestTypedSortedBag.suite());\n         \n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bag/TestHashBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestHashBag.java,v 1.1 2003/12/02 23:36:12 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.Bag;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link HashBag}\n+ * implementation.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 23:36:12 $\n+ *\n+ * @author Chuck Burdick\n+ */\n+public class TestHashBag extends AbstractTestBag {\n+    \n+    public TestHashBag(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestHashBag.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestHashBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Bag makeBag() {\n+        return new HashBag();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bag/TestTreeBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTreeBag.java,v 1.1 2003/12/02 23:36:12 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.SortedBag;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link TreeBag}\n+ * implementation.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 23:36:12 $\n+ *\n+ * @author Chuck Burdick\n+ */\n+public class TestTreeBag extends AbstractTestBag {\n+    \n+   public TestTreeBag(String testName) {\n+      super(testName);\n+   }\n+\n+   public static Test suite() {\n+      return new TestSuite(TestTreeBag.class);\n+   }\n+\n+   public static void main(String args[]) {\n+      String[] testCaseName = { TestTreeBag.class.getName() };\n+      junit.textui.TestRunner.main(testCaseName);\n+   }\n+\n+   public Bag makeBag() {\n+      return new TreeBag();\n+   }\n+\n+   public SortedBag setupBag() {\n+      SortedBag bag = (SortedBag)makeBag();\n+      bag.add(\"C\");\n+      bag.add(\"A\");\n+      bag.add(\"B\");\n+      bag.add(\"D\");\n+      return bag;\n+   }\n+\n+   public void testOrdering() {\n+      Bag bag = setupBag();\n+      assertEquals(\"Should get elements in correct order\",\n+                   \"A\", bag.toArray()[0]);\n+      assertEquals(\"Should get elements in correct order\",\n+                   \"B\", bag.toArray()[1]);\n+      assertEquals(\"Should get elements in correct order\",\n+                   \"C\", bag.toArray()[2]);\n+      assertEquals(\"Should get first key\",\n+                   \"A\", ((SortedBag)bag).first());\n+      assertEquals(\"Should get last key\",\n+                   \"D\", ((SortedBag)bag).last());\n+   }\n+}", "timestamp": 1070408172, "metainfo": ""}