{"sha": "c6be081c1d73c786bfd7e346d73dac147f847e48", "log": "extended TestDoubleOrderedMap from TestMap   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java,v 1.1 2002/01/20 04:36:08 craigmcc Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/01/20 04:36:08 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestDoubleOrderedMap.java,v 1.2 2002/02/20 23:48:13 morgand Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/02/20 23:48:13 $\n  *\n  * ====================================================================\n  *\n \n \n /**\n-* Class TestDoubleOrderedMap\n-*\n-* Test cases for DoubleOrderedMap\n-*\n-* @author Marc Johnson (marcj at users dot sourceforge dot net)\n-*/\n-public class TestDoubleOrderedMap extends TestCase {\n+ * Class TestDoubleOrderedMap\n+ * \n+ * Test cases for DoubleOrderedMap.  This class cannot\n+ * implement TestMap.SupportsPut, because it is a special\n+ * Map that does not support duplicate keys, duplicate \n+ * values, or null values.\n+ * \n+ * @author Marc Johnson (marcj at users dot sourceforge dot net)\n+ */\n+public class TestDoubleOrderedMap extends TestMap  {\n \n     /**\n      * constructor\n         return new TestSuite(TestDoubleOrderedMap.class);\n     }\n \n+    public Map makeMap() {\n+        return new DoubleOrderedMap();\n+    }\n+\n     /**\n      * test size() method\n      */\n     public void testSize() {\n \n-        Map m = new DoubleOrderedMap();\n+        Map m = makeMap();\n \n         assertEquals(0, m.size());\n \n      */\n     public void testIsEmpty() {\n \n-        Map m = new DoubleOrderedMap();\n+        Map m = makeMap();\n \n         assertTrue(m.isEmpty());\n \n      */\n     public void testContainsKey() {\n \n-        Map m = new DoubleOrderedMap();\n+        Map m = makeMap();\n \n         try {\n             m.containsKey(new Object());\n      */\n     public void testContainsValue() {\n \n-        Map           m       = new DoubleOrderedMap();\n+        Map           m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n      */\n     public void testGet() {\n \n-        Map m = new DoubleOrderedMap();\n+        Map m = makeMap();\n \n         try {\n             m.get(new Object());\n      */\n     public void testPut() {\n \n-        Map m = new DoubleOrderedMap();\n+        Map m = makeMap();\n \n         try {\n             m.put(new Object(), \"foo\");\n      */\n     public void testRemove() {\n \n-        DoubleOrderedMap m       = new DoubleOrderedMap();\n+        DoubleOrderedMap m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode    nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n      */\n     public void testPutAll() {\n \n-        Map           m       = new DoubleOrderedMap();\n+        Map           m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n \n         assertEquals(nodes.length, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         m1 = new HashMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n      */\n     public void testClear() {\n \n-        Map           m       = new DoubleOrderedMap();\n+        Map           m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n      */\n     public void testKeySet() {\n \n-        testKeySet(new DoubleOrderedMap());\n-\n-        Map           m       = new DoubleOrderedMap();\n+        testKeySet((DoubleOrderedMap) makeMap());\n+\n+        Map           m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n \n         testKeySet(m);\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n \n         assertTrue(m.isEmpty());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n \n         assertTrue(m.isEmpty());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         Collection c1 = new LinkedList();\n         Collection c2 = new LinkedList();\n         assertTrue(m.keySet().containsAll(c1));\n         assertTrue(!m.keySet().containsAll(c2));\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         c1.add(new Integer(-55));\n         assertTrue(!m.keySet().retainAll(c1));\n         assertEquals(nodes.length, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.keySet().retainAll(c1));\n         assertEquals(nodes.length / 2, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.keySet().retainAll(c1));\n         assertEquals(0, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(!m.keySet().removeAll(c1));\n         assertEquals(nodes.length, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.keySet().removeAll(c1));\n         assertEquals(nodes.length / 2, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.keySet().removeAll(c1));\n         assertEquals(0, m.size());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n      */\n     public void testValues() {\n \n-        testValues(new DoubleOrderedMap());\n-\n-        Map           m       = new DoubleOrderedMap();\n+        testValues((DoubleOrderedMap) makeMap());\n+\n+        Map           m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n \n         testValues(m);\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n \n         assertTrue(m.isEmpty());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n \n         assertTrue(m.isEmpty());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         Collection c1 = new LinkedList();\n         Collection c2 = new LinkedList();\n         assertTrue(m.values().containsAll(c1));\n         assertTrue(!m.values().containsAll(c2));\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n             fail(\"should have caught exception of addAll()\");\n         } catch (UnsupportedOperationException ignored) {}\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(!m.values().retainAll(c1));\n         assertEquals(nodes.length, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.values().retainAll(c1));\n         assertEquals(nodes.length / 2, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.values().retainAll(c1));\n         assertEquals(0, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(!m.values().removeAll(c1));\n         assertEquals(nodes.length, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.values().removeAll(c1));\n         assertEquals(nodes.length / 2, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.values().removeAll(c1));\n         assertEquals(0, m.size());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n      */\n     public void testEntrySet() {\n \n-        testEntrySet(new DoubleOrderedMap());\n-\n-        Map           m       = new DoubleOrderedMap();\n+        testEntrySet((DoubleOrderedMap) makeMap());\n+\n+        Map           m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n \n         testEntrySet(m);\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n \n         assertTrue(m.isEmpty());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         Collection c1 = new LinkedList();\n \n             fail(\"should have caught exception of addAll()\");\n         } catch (UnsupportedOperationException ignored) {}\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n         m.entrySet().clear();\n         assertEquals(0, m.size());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n      */\n     public void testEquals() {\n \n-        Map           m       = new DoubleOrderedMap();\n+        Map           m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n \n         assertEquals(m, m1);\n \n-        m1 = new DoubleOrderedMap();\n+        m1 = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < (nodes.length - 1); k++) {\n             m1.put(nodes[k].getKey(), nodes[k]);\n \n         assertTrue(!m.equals(m1));\n \n-        m1 = new DoubleOrderedMap();\n+        m1 = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m1.put(nodes[k].getKey(), nodes[k]);\n         m1.put(node1.getKey(), node1);\n         assertTrue(!m.equals(m1));\n \n-        m1 = new DoubleOrderedMap();\n+        m1 = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m1.put(nodes[k].getKey(), nodes[nodes.length - (k + 1)]);\n \n         assertTrue(!m.equals(m1));\n \n-        m1 = new DoubleOrderedMap();\n+        m1 = (DoubleOrderedMap) makeMap();\n \n         for (int k = nodes.length - 1; k >= 0; k--) {\n             m1.put(nodes[k].getKey(), nodes[k]);\n      */\n     public void testHashCode() {\n \n-        Map           m       = new DoubleOrderedMap();\n+        Map           m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n         }\n \n-        Map m1 = new DoubleOrderedMap();\n+        Map m1 = (DoubleOrderedMap) makeMap();\n \n         for (int k = nodes.length - 1; k >= 0; k--) {\n             m1.put(nodes[k].getKey(), nodes[k]);\n      */\n     public void testConstructors() {\n \n-        DoubleOrderedMap m = new DoubleOrderedMap();\n+        DoubleOrderedMap m = (DoubleOrderedMap) makeMap();\n \n         assertTrue(m.isEmpty());\n \n \n         assertTrue(m1.isEmpty());\n \n-        m1 = new DoubleOrderedMap();\n+        m1 = (DoubleOrderedMap) makeMap();\n \n         LocalTestNode nodes[] = makeLocalNodes();\n \n      */\n     public void testGetKeyForValue() {\n \n-        DoubleOrderedMap m = new DoubleOrderedMap();\n+        DoubleOrderedMap m = (DoubleOrderedMap) makeMap();\n \n         try {\n             m.getKeyForValue(new Object());\n      */\n     public void testRemoveValue() {\n \n-        DoubleOrderedMap m       = new DoubleOrderedMap();\n+        DoubleOrderedMap m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode    nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n      */\n     public void testEntrySetByValue() {\n \n-        testEntrySetByValue(new DoubleOrderedMap());\n-\n-        DoubleOrderedMap m       = new DoubleOrderedMap();\n+        testEntrySetByValue((DoubleOrderedMap) makeMap());\n+\n+        DoubleOrderedMap m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode    nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n \n         testEntrySetByValue(m);\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n \n         assertTrue(m.isEmpty());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         Collection c1 = new LinkedList();\n \n             fail(\"should have caught exception of addAll()\");\n         } catch (UnsupportedOperationException ignored) {}\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n         m.entrySetByValue().clear();\n         assertEquals(0, m.size());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n      */\n     public void testKeySetByValue() {\n \n-        testKeySetByValue(new DoubleOrderedMap());\n-\n-        DoubleOrderedMap m       = new DoubleOrderedMap();\n+        testKeySetByValue((DoubleOrderedMap) makeMap());\n+\n+        DoubleOrderedMap m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode    nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n \n         testKeySetByValue(m);\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n \n         assertTrue(m.isEmpty());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n \n         assertTrue(m.isEmpty());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         Collection c1 = new LinkedList();\n         Collection c2 = new LinkedList();\n         assertTrue(m.keySetByValue().containsAll(c1));\n         assertTrue(!m.keySetByValue().containsAll(c2));\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         c1.add(new Integer(-55));\n         assertTrue(!m.keySetByValue().retainAll(c1));\n         assertEquals(nodes.length, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.keySetByValue().retainAll(c1));\n         assertEquals(nodes.length / 2, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.keySetByValue().retainAll(c1));\n         assertEquals(0, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(!m.keySetByValue().removeAll(c1));\n         assertEquals(nodes.length, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.keySetByValue().removeAll(c1));\n         assertEquals(nodes.length / 2, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.keySetByValue().removeAll(c1));\n         assertEquals(0, m.size());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n      */\n     public void testValuesByValue() {\n \n-        testValuesByValue(new DoubleOrderedMap());\n-\n-        DoubleOrderedMap m       = new DoubleOrderedMap();\n+        testValuesByValue((DoubleOrderedMap) makeMap());\n+\n+        DoubleOrderedMap m       = (DoubleOrderedMap) makeMap();\n         LocalTestNode    nodes[] = makeLocalNodes();\n \n         for (int k = 0; k < nodes.length; k++) {\n \n         testValuesByValue(m);\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n \n         assertTrue(m.isEmpty());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);\n \n         assertTrue(m.isEmpty());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         Collection c1 = new LinkedList();\n         Collection c2 = new LinkedList();\n         assertTrue(m.valuesByValue().containsAll(c1));\n         assertTrue(!m.valuesByValue().containsAll(c2));\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n             fail(\"should have caught exception of addAll()\");\n         } catch (UnsupportedOperationException ignored) {}\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(!m.valuesByValue().retainAll(c1));\n         assertEquals(nodes.length, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.valuesByValue().retainAll(c1));\n         assertEquals(nodes.length / 2, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.valuesByValue().retainAll(c1));\n         assertEquals(0, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(!m.valuesByValue().removeAll(c1));\n         assertEquals(nodes.length, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.valuesByValue().removeAll(c1));\n         assertEquals(nodes.length / 2, m.size());\n \n-        m  = new DoubleOrderedMap();\n+        m  = (DoubleOrderedMap) makeMap();\n         c1 = new LinkedList();\n \n         for (int k = 0; k < nodes.length; k++) {\n         assertTrue(m.valuesByValue().removeAll(c1));\n         assertEquals(0, m.size());\n \n-        m = new DoubleOrderedMap();\n+        m = (DoubleOrderedMap) makeMap();\n \n         for (int k = 0; k < nodes.length; k++) {\n             m.put(nodes[k].getKey(), nodes[k]);", "timestamp": 1014248893, "metainfo": ""}