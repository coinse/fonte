{"sha": "61445ae5596b642389f71365f44acf8a51b20255", "log": "no message   ", "commit": "\n--- a/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java\n package org.apache.commons.collections.comparators;\n \n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.LinkedList;\n import java.util.List;\n \n     /**\n      * For the purposes of this test, return a \n-     * ReverseComparator that wraps a ComparableComparator, \n-     * which should produce a backward-ordered list\n-     * identical to the java.util.Collection.reverseOrder()\n-     * Comparator.\n+     * ReverseComparator that wraps the java.util.Collections.reverseOrder()\n+     * Comparator.  The resulting comparator shouls\n+     * sort according to natural Order.  (Note: we wrap\n+     * a Comparator taken from the JDK so that we can\n+     * save a \"canonical\" form in CVS.\n      * \n-     * @return Comparator that reverses a \"natural\" order\n+     * @return Comparator that returns \"natural\" order\n      */\n     public Comparator makeComparator() {\n-        return new ReverseComparator(new ComparableComparator());\n+        return new ReverseComparator(Collections.reverseOrder());\n     }\n \n     public List getComparableObjectsOrdered() {\n         List list = new LinkedList();\n+        list.add(new Integer(1));\n+        list.add(new Integer(2));\n+        list.add(new Integer(3));\n+        list.add(new Integer(4));\n         list.add(new Integer(5));\n-        list.add(new Integer(4));\n-        list.add(new Integer(3));\n-        list.add(new Integer(2));\n-        list.add(new Integer(1));\n         return list;\n     }\n ", "timestamp": 1015011568, "metainfo": ""}