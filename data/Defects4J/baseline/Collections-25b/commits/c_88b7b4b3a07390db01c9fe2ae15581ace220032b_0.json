{"sha": "88b7b4b3a07390db01c9fe2ae15581ace220032b", "log": "[COLLECTIONS-379] Fixed javadoc in CollectionUtils.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n      * @param predicate\n      *            the predicate to use, may be null\n      * @param outputCollection\n-     *            the collection to output into, may not be null\n-     * @return outputCollection\n+     *            the collection to output into, may not be null if the inputCollection\n+     *            and predicate or not null\n+     * @return the outputCollection\n      */\n     public static <O, R extends Collection<? super O>> R select(Collection<? extends O> inputCollection,\n             Predicate<? super O> predicate, R outputCollection) {\n      * @param predicate\n      *            the predicate to use, may be null\n      * @param outputCollection\n-     *            the collection to output into, may not be null\n+     *            the collection to output into, may not be null if the inputCollection\n+     *            and predicate or not null\n      * @return outputCollection\n      */\n     public static <O, R extends Collection<? super O>> R selectRejected(\n      *\n      * @param inputCollection  the collection to get the input from, may be null\n      * @param transformer  the transformer to use, may be null\n-     * @param outputCollection  the collection to output into, may not be null\n+     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n+     *   and transformer are not null\n      * @param <I> the type of object in the input collection\n      * @param <O> the type of object in the output collection\n      * @param <R> the output type of the transformer - this extends O.\n      * @return the outputCollection with the transformed input added\n-     * @throws NullPointerException if the output collection is null\n+     * @throws NullPointerException if the output collection is null and both, inputCollection and\n+     *   transformer are not null\n      */\n     public static <I, O, R extends Collection<? super O>> R collect(Iterable<? extends I> inputCollection,\n             final Transformer<? super I, ? extends O> transformer, final R outputCollection) {\n      *\n      * @param inputIterator  the iterator to get the input from, may be null\n      * @param transformer  the transformer to use, may be null\n-     * @param outputCollection  the collection to output into, may not be null\n+     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n+     *   and transformer are not null\n      * @param <I> the type of object in the input collection\n      * @param <O> the type of object in the output collection\n      * @param <R> the output type of the transformer - this extends O.\n      * @return the outputCollection with the transformed input added\n-     * @throws NullPointerException if the output collection is null\n+     * @throws NullPointerException if the output collection is null and both, inputCollection and\n+     *   transformer are not null\n      */\n     //TODO - deprecate and replace with IteratorIterable\n     public static <I, O, R extends Collection<? super O>> R collect(Iterator<? extends I> inputIterator,", "timestamp": 1343337504, "metainfo": ""}