{"sha": "2ebe287c9b6f497fcae8337bed3442f0a2e319bc", "log": "Fix spellings in javadoc bug 25906, from Janek Bogucki   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ArrayStack.java\n+++ b/src/java/org/apache/commons/collections/ArrayStack.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.14 2003/09/20 14:01:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.15 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * @see java.util.Stack\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.14 $ $Date: 2003/09/20 14:01:17 $\n+ * @version $Revision: 1.15 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Craig R. McClanahan\n  * @author Paul Jack\n  */\n public class ArrayStack extends ArrayList implements Buffer {\n \n-    /** Ensure serialization compatability */    \n+    /** Ensure serialization compatibility */    \n     private static final long serialVersionUID = 2130079159931574599L;\n \n     /**\n--- a/src/java/org/apache/commons/collections/Bag.java\n+++ b/src/java/org/apache/commons/collections/Bag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Bag.java,v 1.12 2003/12/28 18:08:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Bag.java,v 1.13 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * which unfortunately will break backwards compatibility with this version.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.12 $ $Date: 2003/12/28 18:08:54 $\n+ * @version $Revision: 1.13 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n     // Bag implementations should follow these comments.\n //    /**\n //     * Compares this Bag to another.\n-//     * This Bag equals another Bag if it contains the same number of occurances of\n+//     * This Bag equals another Bag if it contains the same number of occurrences of\n //     * the same elements.\n-//     * This equals definition is compatable with the Set interface.\n+//     * This equals definition is compatible with the Set interface.\n //     * \n //     * @param obj  the Bag to compare to\n //     * @return true if equal\n //    boolean equals(Object obj);\n //\n //    /**\n-//     * Gets a hash code for the Bag compatable with the definition of equals.\n+//     * Gets a hash code for the Bag compatible with the definition of equals.\n //     * The hash code is defined as the sum total of a hash code for each element.\n //     * The per element hash code is defined as\n //     * <code>(e==null ? 0 : e.hashCode()) ^ noOccurances)</code>.\n-//     * This hash code definition is compatable with the Set interface.\n+//     * This hash code definition is compatible with the Set interface.\n //     * \n //     * @return the hash code of the Bag\n //     */\n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.26 2004/01/05 21:37:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.27 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * property is considered non existent in the Map\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.26 $ $Date: 2004/01/05 21:37:13 $\n+ * @version $Revision: 1.27 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author James Strachan\n  * @author Stephen Colebourne\n     }\n \n     /**\n-     * Puts all of the writeable properties from the given BeanMap into this\n+     * Puts all of the writable properties from the given BeanMap into this\n      * BeanMap. Read-only and Write-only properties will be ignored.\n      *\n      * @param map  the BeanMap whose properties to put\n      * If no such constructor exists, and the given type is a primitive\n      * type, then the given value is converted to a string using its \n      * {@link Object#toString() toString()} method, and that string is\n-     * parsed into the correct primitve type using, for instance, \n+     * parsed into the correct primitive type using, for instance, \n      * {@link Integer#valueOf(String)} to convert the string into an\n      * <code>int</code>.<P>\n      *\n--- a/src/java/org/apache/commons/collections/BidiMap.java\n+++ b/src/java/org/apache/commons/collections/BidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.11 2004/01/05 22:27:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.12 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * a key to be looked up from a value with equal performance.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.11 $ $Date: 2004/01/05 22:27:08 $\n+ * @version $Revision: 1.12 $ $Date: 2004/01/05 22:46:33 $\n  *\n  * @author Stephen Colebourne\n  */\n      * \n      * @throws UnsupportedOperationException if the <code>put</code> method is not supported\n      * @throws ClassCastException (optional) if the map limits the type of the \n-     *  value and the specifed value is inappropriate\n+     *  value and the specified value is inappropriate\n      * @throws IllegalArgumentException (optional) if the map limits the values\n      *  in some way and the value was invalid\n      * @throws NullPointerException (optional) if the map limits the values to\n      * @return the mapped key, or <code>null</code> if not found\n      * \n      * @throws ClassCastException (optional) if the map limits the type of the \n-     *  value and the specifed value is inappropriate\n+     *  value and the specified value is inappropriate\n      * @throws NullPointerException (optional) if the map limits the values to\n      *  non-null and null was specified\n      */\n      * @return the key that was removed, <code>null</code> if nothing removed\n      * \n      * @throws ClassCastException (optional) if the map limits the type of the \n-     *  value and the specifed value is inappropriate\n+     *  value and the specified value is inappropriate\n      * @throws NullPointerException (optional) if the map limits the values to\n      *  non-null and null was specified\n      * @throws UnsupportedOperationException if this method is not supported\n--- a/src/java/org/apache/commons/collections/BinaryHeap.java\n+++ b/src/java/org/apache/commons/collections/BinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.19 2004/01/02 02:14:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.20 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <p>\n  * The <code>PriorityQueue</code> interface has now been replaced for most uses\n  * by the <code>Buffer</code> interface. This class and the interface are\n- * retained for backwards compatability. The intended replacement is\n+ * retained for backwards compatibility. The intended replacement is\n  * {@link org.apache.commons.collections.buffer.PriorityBuffer PriorityBuffer}.\n  * <p>\n  * The removal order of a binary heap is based on either the natural sort\n  * </pre>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.19 $ $Date: 2004/01/02 02:14:28 $\n+ * @version $Revision: 1.20 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Peter Donald\n  * @author Ram Chidambaram\n     /**\n      * Percolates element down heap from the position given by the index.\n      * <p>\n-     * Assumes it is a mimimum heap.\n+     * Assumes it is a minimum heap.\n      *\n      * @param index the index for the element\n      */\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.52 2004/01/04 18:03:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.53 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.52 $ $Date: 2004/01/04 18:03:41 $\n+ * @version $Revision: 1.53 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n     /**\n      * Returns a {@link Map} mapping each unique element in the given\n      * {@link Collection} to an {@link Integer} representing the number\n-     * of occurences of that element in the {@link Collection}.\n+     * of occurrences of that element in the {@link Collection}.\n      * <p>\n      * Only those elements present in the collection will appear as\n      * keys in the map.\n--- a/src/java/org/apache/commons/collections/CursorableLinkedList.java\n+++ b/src/java/org/apache/commons/collections/CursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CursorableLinkedList.java,v 1.20 2004/01/04 18:04:15 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CursorableLinkedList.java,v 1.21 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *  and now returns the cursor from the listIterator method. Will be removed in v4.0\n  * @see java.util.LinkedList\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.20 $ $Date: 2004/01/04 18:04:15 $\n+ * @version $Revision: 1.21 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Rodney Waldhoff\n  * @author Janek Bogucki\n  * @author Simon Kitching\n  */\n public class CursorableLinkedList implements List, Serializable {\n-    /** Ensure serialization compatability */    \n+    /** Ensure serialization compatibility */    \n     private static final long serialVersionUID = 8836393098519411393L;\n \n     //--- public methods ---------------------------------------------\n--- a/src/java/org/apache/commons/collections/DefaultMapEntry.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.18 2004/01/04 18:37:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.19 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * @deprecated Use the version in the keyvalue subpackage. Will be removed in v4.0\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.18 $ $Date: 2004/01/04 18:37:42 $\n+ * @version $Revision: 1.19 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author James Strachan\n  * @author Michael A. Smith\n      * <p>\n      * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}\n      * \n-     * @return a suitable hashcode\n+     * @return a suitable hash code\n      */\n     public int hashCode() {\n         return (getKey() == null ? 0 : getKey().hashCode()) ^\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ExtendedProperties.java,v 1.18 2003/12/29 18:18:34 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ExtendedProperties.java,v 1.19 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * it, go ahead and tune it up!\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.18 $ $Date: 2003/12/29 18:18:34 $\n+ * @version $Revision: 1.19 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>\n  * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n     }\n \n     /**\n-     * Recursive handler for multple levels of interpolation.\n+     * Recursive handler for multiple levels of interpolation.\n      *\n      * When called the first time, priorVariables should be null.\n      *\n--- a/src/java/org/apache/commons/collections/FastArrayList.java\n+++ b/src/java/org/apache/commons/collections/FastArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastArrayList.java,v 1.12 2003/12/24 01:13:55 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastArrayList.java,v 1.13 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * before the internal collection is fully formed.\n  * For more information on the double-checked locking idiom, see the\n  * <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">\n- * Double-Checked Locking Idiom Is Broken Declartion</a>.</p>\n+ * Double-Checked Locking Idiom Is Broken Declaration</a>.</p>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.12 $ $Date: 2003/12/24 01:13:55 $\n+ * @version $Revision: 1.13 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Craig R. McClanahan\n  */\n--- a/src/java/org/apache/commons/collections/FastHashMap.java\n+++ b/src/java/org/apache/commons/collections/FastHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastHashMap.java,v 1.14 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastHashMap.java,v 1.15 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * before the internal collection is fully formed.\n  * For more information on the double-checked locking idiom, see the\n  * <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">\n- * Double-Checked Locking Idiom Is Broken Declartion</a>.</p>\n+ * Double-Checked Locking Idiom Is Broken Declaration</a>.</p>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.14 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.15 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Craig R. McClanahan\n  * @author Stephen Colebourne\n      * exactly the code that is used to define the list hash function in the\n      * documentation for the <code>Map.hashCode</code> method.\n      * \n-     * @return suitable integer hashcode\n+     * @return suitable integer hash code\n      */\n     public int hashCode() {\n         if (fast) {\n     // ----------------------------------------------------------------------\n \n     /**\n-     * Abstract collection implementation shared by ketSet(), values() and entrySet().\n+     * Abstract collection implementation shared by keySet(), values() and entrySet().\n      */\n     private abstract class CollectionView implements Collection {\n \n--- a/src/java/org/apache/commons/collections/FastTreeMap.java\n+++ b/src/java/org/apache/commons/collections/FastTreeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastTreeMap.java,v 1.13 2003/08/31 17:26:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastTreeMap.java,v 1.14 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * before the internal collection is fully formed.\n  * For more information on the double-checked locking idiom, see the\n  * <a href=\"http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">\n- * Double-Checked Locking Idiom Is Broken Declartion</a>.</p>\n+ * Double-Checked Locking Idiom Is Broken Declaration</a>.</p>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.13 $ $Date: 2003/08/31 17:26:43 $\n+ * @version $Revision: 1.14 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Craig R. McClanahan\n  * @author Stephen Colebourne\n      * exactly the code that is used to define the list hash function in the\n      * documentation for the <code>Map.hashCode</code> method.\n      * \n-     * @return a suitable integer hashcode\n+     * @return a suitable integer hash code\n      */\n     public int hashCode() {\n         if (fast) {\n     // ----------------------------------------------------------------------\n \n     /**\n-     * Abstract collection implementation shared by ketSet(), values() and entrySet().\n+     * Abstract collection implementation shared by keySet(), values() and entrySet().\n      */\n     private abstract class CollectionView implements Collection {\n \n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.24 2004/01/04 18:03:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.25 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Provides utility methods and decorators for {@link List} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.24 $ $Date: 2004/01/04 18:03:41 $\n+ * @version $Revision: 1.25 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Federico Barbieri\n  * @author Peter Donald\n     }\n     \n     /**\n-     * Generates a hashcode using the algorithm specified in \n+     * Generates a hash code using the algorithm specified in \n      * {@link java.util.List#hashCode()}.\n      * <p>\n      * This method is useful for implementing <code>List</code> when you cannot\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.41 2003/12/11 23:45:02 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.42 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * Provides utility methods and decorators for\n  * {@link Map} and {@link SortedMap} instances.\n  * <p>\n- * It contains various typesafe methods\n+ * It contains various type safe methods\n  * as well as other useful features like deep copying.\n  * <p>\n  * It also provides the following decorators:\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.41 $ $Date: 2003/12/11 23:45:02 $\n+ * @version $Revision: 1.42 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n      * <em>(this Map)</em> is printed out.  If the contents include a \n      * parent container of the map, the the text <em>(ancestor[i] Map)</em> is \n      * printed, where i actually indicates the number of levels which must be \n-     * traversed in the sequential list of ancesters (e.g. father, grandfather, \n+     * traversed in the sequential list of ancestors (e.g. father, grandfather, \n      * great-grandfather, etc).  \n      *\n      * @param out  the stream to print to\n--- a/src/java/org/apache/commons/collections/PriorityQueue.java\n+++ b/src/java/org/apache/commons/collections/PriorityQueue.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PriorityQueue.java,v 1.9 2004/01/01 18:58:55 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PriorityQueue.java,v 1.10 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * Defines a collection for priority queues, which can insert, peek and pop.\n  * <p>\n  * This interface is now replaced by the <code>Buffer</code> interface.\n- * It remains for backwards compatability.\n+ * It remains for backwards compatibility.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.9 $ $Date: 2004/01/01 18:58:55 $\n+ * @version $Revision: 1.10 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Peter Donald\n  */\n--- a/src/java/org/apache/commons/collections/SequencedHashMap.java\n+++ b/src/java/org/apache/commons/collections/SequencedHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.25 2003/12/28 22:50:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.26 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * @see org.apache.commons.collections.map.LinkedMap\n  * @see org.apache.commons.collections.map.ListOrderedMap\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.25 $ $Date: 2003/12/28 22:50:42 $\n+ * @version $Revision: 1.26 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Michael A. Smith\n  * @author Daniel Rall\n          *  should be either {@link #KEY}, {@link #VALUE}, or {@link #ENTRY}.  To\n          *  save a tiny bit of memory, this field is also used as a marker for when\n          *  remove has been called on the current object to prevent a second remove\n-         *  on the same element.  Essientially, if this value is negative (i.e. the\n+         *  on the same element.  Essentially, if this value is negative (i.e. the\n          *  bit specified by {@link #REMOVED_MASK} is set), the current position\n          *  has been removed.  If positive, remove can still be called.\n          */\n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.22 2004/01/04 18:03:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.23 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link Set} and {@link SortedSet} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.22 $ $Date: 2004/01/04 18:03:41 $\n+ * @version $Revision: 1.23 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n     }\n \n     /**\n-     * Generates a hashcode using the algorithm specified in \n+     * Generates a hash code using the algorithm specified in \n      * {@link java.util.Set#hashCode()}.\n      * <p>\n      * This method is useful for implementing <code>Set</code> when you cannot\n      * collection types to use the Set implementation algorithm.\n      * \n      * @see java.util.Set#hashCode()\n-     * @param set  the set to calculate the hashcode for, may be null\n+     * @param set  the set to calculate the hash code for, may be null\n      * @return the hash code\n      */\n     public static int hashCodeForSet(final Collection set) {\n--- a/src/java/org/apache/commons/collections/StaticBucketMap.java\n+++ b/src/java/org/apache/commons/collections/StaticBucketMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/StaticBucketMap.java,v 1.15 2003/12/14 16:10:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/StaticBucketMap.java,v 1.16 2004/01/05 22:46:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * {@link #remove(Object) remove} and {@link #containsKey(Object) containsKey}\n  * operations, assuming (approximate) uniform hashing and\n  * that the number of entries does not exceed the number of buckets.  If the\n- * number of entries exceeds the number of buckets or if the hashcodes of the\n+ * number of entries exceeds the number of buckets or if the hash codes of the\n  * objects are not uniformly distributed, these operations have a worst case\n  * scenario that is proportional to the number of elements in the map\n  * (<i>O(n)</i>).<p>\n  *\n  * @deprecated Moved to map subpackage. Due to be removed in v4.0.\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.15 $ $Date: 2003/12/14 16:10:38 $\n+ * @version $Revision: 1.16 $ $Date: 2004/01/05 22:46:33 $\n  * \n  * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n  * @author <a href=\"mailto:g-froehlich@gmx.de\">Gerhard Froehlich</a>", "timestamp": 1073342793, "metainfo": ""}