{"sha": "7a58d2f1b81e04588a872b73a56c77c443583af3", "log": "Update and make consistent the Unmodifiable decorators   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.23 2003/12/03 11:37:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.24 2003/12/03 12:27:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * property is considered non existent in the Map\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.23 $ $Date: 2003/12/03 11:37:44 $\n+ * @version $Revision: 1.24 $ $Date: 2003/12/03 12:27:37 $\n  * \n  * @author James Strachan\n  * @author Stephen Colebourne\n      * @return the unmodifiable set of mappings\n      */\n     public Set entrySet() {\n-        return new AbstractSet() {\n+        return UnmodifiableSet.decorate(new AbstractSet() {\n             public Iterator iterator() {\n-                return new Iterator() {\n-\n-                    Iterator methodIter = \n-                      BeanMap.this.readMethods.keySet().iterator();\n-\n-                    public boolean hasNext() {\n-                        return methodIter.hasNext();\n-                    }\n-\n-                    public Object next() {\n-                        Object key = (Object)methodIter.next();\n-                        return new MyMapEntry( BeanMap.this, key, get(key) );\n-                    }\n-\n-                    public void remove() {\n-                      throw new UnsupportedOperationException\n-                        (\"remove() not supported from BeanMap.entrySet()\");\n-                    }\n-                };\n-            }\n-\n+                return entryIterator();\n+            }\n             public int size() {\n               return BeanMap.this.readMethods.size();\n             }\n-        };\n+        });\n     }\n \n     /**\n             }            \n             public Object next() {\n                 Object key = iter.next();\n-                Object value = get( (String) key );\n+                Object value = get(key);\n                 return new MyMapEntry( BeanMap.this, key, value );\n             }            \n             public void remove() {\n--- a/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n+++ b/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java,v 1.3 2003/12/03 12:27:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates another <code>Bag</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 12:27:37 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableBag extends AbstractBagDecorator implements Unmodifiable {\n+public final class UnmodifiableBag extends AbstractBagDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable bag.\n      * @param bag  the bag to decorate, must not be null\n      * @throws IllegalArgumentException if bag is null\n      */\n-    protected UnmodifiableBag(Bag bag) {\n+    private UnmodifiableBag(Bag bag) {\n         super(bag);\n     }\n \n--- a/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java,v 1.3 2003/12/03 12:27:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates another <code>SortedBag</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 12:27:37 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableSortedBag extends AbstractSortedBagDecorator implements Unmodifiable {\n+public final class UnmodifiableSortedBag extends AbstractSortedBagDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable bag.\n      * @param bag  the bag to decorate, must not be null\n      * @throws IllegalArgumentException if bag is null\n      */\n-    protected UnmodifiableSortedBag(SortedBag bag) {\n+    private UnmodifiableSortedBag(SortedBag bag) {\n         super(bag);\n     }\n \n--- a/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java,v 1.3 2003/12/03 12:27:36 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates another <code>Buffer</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 12:27:36 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableBuffer extends AbstractBufferDecorator implements Unmodifiable {\n+public final class UnmodifiableBuffer extends AbstractBufferDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable buffer.\n      * @param buffer  the buffer to decorate, must not be null\n      * @throws IllegalArgumentException if buffer is null\n      */\n-    protected UnmodifiableBuffer(Buffer buffer) {\n+    private UnmodifiableBuffer(Buffer buffer) {\n         super(buffer);\n     }\n \n--- a/src/java/org/apache/commons/collections/buffer/UnmodifiablePriorityQueue.java\n+++ b/src/java/org/apache/commons/collections/buffer/UnmodifiablePriorityQueue.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/UnmodifiablePriorityQueue.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/UnmodifiablePriorityQueue.java,v 1.3 2003/12/03 12:27:36 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 12:27:36 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiablePriorityQueue implements PriorityQueue, Unmodifiable {\n+public final class UnmodifiablePriorityQueue implements PriorityQueue, Unmodifiable {\n \n     /** The priority queue to decorate */\n     protected final PriorityQueue priorityQueue;\n         if (priorityQueue instanceof Unmodifiable) {\n             return priorityQueue;\n         }\n+        if (priorityQueue == null) {\n+            throw new IllegalArgumentException(\"PriorityQueue must not be null\");\n+        }\n         return new UnmodifiablePriorityQueue(priorityQueue);\n     }\n     \n      *\n      * @param priorityQueue  the priority queue to synchronize\n      */\n-    protected UnmodifiablePriorityQueue(PriorityQueue priorityQueue) {\n-        if (priorityQueue == null) {\n-            throw new IllegalArgumentException(\"PriorityQueue must not be null\");\n-        }\n+    private UnmodifiablePriorityQueue(PriorityQueue priorityQueue) {\n+        super();\n         this.priorityQueue = priorityQueue;\n     }\n \n--- a/src/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java,v 1.3 2003/11/29 18:14:20 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java,v 1.4 2003/12/03 12:27:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n package org.apache.commons.collections.collection;\n \n import java.util.Collection;\n+import java.util.Iterator;\n \n import org.apache.commons.collections.BoundedCollection;\n+import org.apache.commons.collections.iterators.UnmodifiableIterator;\n \n /**\n  * <code>UnmodifiableBoundedCollection</code> decorates another <code>BoundedCollection</code>\n  * examining the package scope variables.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/29 18:14:20 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/03 12:27:37 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableBoundedCollection extends UnmodifiableCollection implements BoundedCollection {\n+public final class UnmodifiableBoundedCollection extends AbstractCollectionDecorator implements BoundedCollection {\n     \n     /**\n      * Factory method to create an unmodifiable bounded collection.\n      * @param coll  the collection to decorate, must not be null\n      * @throws IllegalArgumentException if coll is null\n      */\n-    protected UnmodifiableBoundedCollection(BoundedCollection coll) {\n+    private UnmodifiableBoundedCollection(BoundedCollection coll) {\n         super(coll);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Iterator iterator() {\n+        return UnmodifiableIterator.decorate(getCollection().iterator());\n+    }\n+\n+    public boolean add(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean remove(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n     }\n \n     //-----------------------------------------------------------------------    \n--- a/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java,v 1.3 2003/12/03 12:27:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates another <code>Collection</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 12:27:37 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableCollection extends AbstractCollectionDecorator implements Unmodifiable {\n+public final class UnmodifiableCollection extends AbstractCollectionDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable collection.\n      * @param coll  the collection to decorate, must not be null\n      * @throws IllegalArgumentException if collection is null\n      */\n-    protected UnmodifiableCollection(Collection coll) {\n+    private UnmodifiableCollection(Collection coll) {\n         super(coll);\n     }\n \n--- a/src/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java,v 1.1 2003/11/02 17:26:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java,v 1.2 2003/12/03 12:27:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates an iterator such that it cannot be modified.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/02 17:26:36 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 12:27:37 $\n  * \n  * @author Stephen Colebourne\n  */\n      *\n      * @param iterator  the iterator to decoarate\n      */\n-    protected UnmodifiableIterator(Iterator iterator) {\n+    private UnmodifiableIterator(Iterator iterator) {\n         super();\n         this.iterator = iterator;\n     }\n--- a/src/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java,v 1.1 2003/11/02 17:26:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java,v 1.2 2003/12/03 12:27:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates a list iterator such that it cannot be modified.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/02 17:26:36 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/03 12:27:37 $\n  * \n  * @author Stephen Colebourne\n  */\n      *\n      * @param iterator  the iterator to decoarate\n      */\n-    protected UnmodifiableListIterator(ListIterator iterator) {\n+    private UnmodifiableListIterator(ListIterator iterator) {\n         super();\n         this.iterator = iterator;\n     }\n--- a/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java,v 1.3 2003/12/01 22:49:00 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java,v 1.4 2003/12/03 12:27:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates a map iterator such that it cannot be modified.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/01 22:49:00 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/03 12:27:37 $\n  * \n  * @author Stephen Colebourne\n  */\n      *\n      * @param iterator  the iterator to decoarate\n      */\n-    protected UnmodifiableMapIterator(MapIterator iterator) {\n+    private UnmodifiableMapIterator(MapIterator iterator) {\n         super();\n         this.iterator = iterator;\n     }\n--- a/src/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java,v 1.2 2003/12/01 22:49:00 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java,v 1.3 2003/12/03 12:27:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates an ordered map iterator such that it cannot be modified.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/01 22:49:00 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 12:27:37 $\n  * \n  * @author Stephen Colebourne\n  */\n      *\n      * @param iterator  the iterator to decoarate\n      */\n-    protected UnmodifiableOrderedMapIterator(OrderedMapIterator iterator) {\n+    private UnmodifiableOrderedMapIterator(OrderedMapIterator iterator) {\n         super();\n         this.iterator = iterator;\n     }\n--- a/src/java/org/apache/commons/collections/list/UnmodifiableList.java\n+++ b/src/java/org/apache/commons/collections/list/UnmodifiableList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/UnmodifiableList.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/UnmodifiableList.java,v 1.3 2003/12/03 12:27:36 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates another <code>List</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 12:27:36 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableList extends AbstractListDecorator implements Unmodifiable {\n+public final class UnmodifiableList extends AbstractListDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable list.\n      * @param list  the list to decorate, must not be null\n      * @throws IllegalArgumentException if list is null\n      */\n-    protected UnmodifiableList(List list) {\n+    private UnmodifiableList(List list) {\n         super(list);\n-    }\n-\n-    /**\n-     * Gets the list being decorated.\n-     * \n-     * @return the list being decorated\n-     */\n-    protected List getList() {\n-        return (List) getCollection();\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object get(int index) {\n-        return getList().get(index);\n-    }\n-\n-    public int indexOf(Object object) {\n-        return getList().indexOf(object);\n-    }\n-\n-    public int lastIndexOf(Object object) {\n-        return getList().lastIndexOf(object);\n-    }\n-\n     public ListIterator listIterator() {\n         return UnmodifiableListIterator.decorate(getList().listIterator());\n     }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java,v 1.1 2003/12/03 12:27:36 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.lang.reflect.Array;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n+import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n+import org.apache.commons.collections.set.AbstractSetDecorator;\n+\n+/**\n+ * Decorates a map entry <code>Set</code> to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/03 12:27:36 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public final class UnmodifiableEntrySet extends AbstractSetDecorator implements Unmodifiable {\n+    \n+    /**\n+     * Factory method to create an unmodifiable set of Map Entry objects.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    public static Set decorate(Set set) {\n+        if (set instanceof Unmodifiable) {\n+            return set;\n+        }\n+        return new UnmodifiableEntrySet(set);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    private UnmodifiableEntrySet(Set set) {\n+        super(set);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean add(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean remove(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Iterator iterator() {\n+        return new UnmodifiableEntrySetIterator(collection.iterator());\n+    }\n+    \n+    public Object[] toArray() {\n+        Object[] array = collection.toArray();\n+        for (int i = 0; i < array.length; i++) {\n+            array[i] = new UnmodifiableEntry((Map.Entry) array[i]);\n+        }\n+        return array;\n+    }\n+    \n+    public Object[] toArray(Object array[]) {\n+        Object[] result = array;\n+        if (array.length > 0) {\n+            // we must create a new array to handle multi-threaded situations\n+            // where another thread could access data before we decorate it\n+            result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);\n+        }\n+        result = collection.toArray(result);\n+        for (int i = 0; i < result.length; i++) {\n+            result[i] = new UnmodifiableEntry((Map.Entry) result[i]);\n+        }\n+\n+        // check to see if result should be returned straight\n+        if (result.length > array.length) {\n+            return result;\n+        }\n+\n+        // copy back into input array to fulfil the method contract\n+        System.arraycopy(result, 0, array, 0, result.length);\n+        if (array.length > result.length) {\n+            array[result.length] = null;\n+        }\n+        return array;\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implementation of an entry set iterator.\n+     */\n+    final static class UnmodifiableEntrySetIterator extends AbstractIteratorDecorator {\n+        \n+        protected UnmodifiableEntrySetIterator(Iterator iterator) {\n+            super(iterator);\n+        }\n+        \n+        public Object next() {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            return new UnmodifiableEntry(entry);\n+        }\n+        \n+        public void remove() {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implementation of a map entry that is unmodifiable.\n+     */\n+    final static class UnmodifiableEntry extends AbstractMapEntryDecorator {\n+\n+        protected UnmodifiableEntry(Map.Entry entry) {\n+            super(entry);\n+        }\n+\n+        public Object setValue(Object o) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableMap.java,v 1.5 2003/12/02 23:51:50 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableMap.java,v 1.6 2003/12/03 12:27:36 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.map;\n \n-import java.lang.reflect.Array;\n import java.util.Collection;\n-import java.util.Iterator;\n import java.util.Map;\n import java.util.Set;\n \n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.Unmodifiable;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n-import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n import org.apache.commons.collections.iterators.EntrySetMapIterator;\n import org.apache.commons.collections.iterators.UnmodifiableMapIterator;\n-import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>Map</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/12/02 23:51:50 $\n+ * @version $Revision: 1.6 $ $Date: 2003/12/03 12:27:36 $\n  * \n  * @author Stephen Colebourne\n  */\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    protected UnmodifiableMap(Map map) {\n+    private UnmodifiableMap(Map map) {\n         super(map);\n     }\n \n \n     public Set entrySet() {\n         Set set = super.entrySet();\n-        return new UnmodifiableEntrySet(set);\n+        return UnmodifiableEntrySet.decorate(set);\n     }\n \n     public Set keySet() {\n         return UnmodifiableCollection.decorate(coll);\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Implementation of an entry set that checks (predicates) additions.\n-     */\n-    protected static class UnmodifiableEntrySet extends UnmodifiableSet {\n-        \n-        protected UnmodifiableEntrySet(Set set) {\n-            super(set);\n-        }\n-\n-        public Iterator iterator() {\n-            return new UnmodifiableEntrySetIterator(collection.iterator());\n-        }\n-        \n-        public Object[] toArray() {\n-            Object[] array = collection.toArray();\n-            for (int i = 0; i < array.length; i++) {\n-                array[i] = new UnmodifiableEntry((Map.Entry) array[i]);\n-            }\n-            return array;\n-        }\n-        \n-        public Object[] toArray(Object array[]) {\n-            Object[] result = array;\n-            if (array.length > 0) {\n-                // we must create a new array to handle multi-threaded situations\n-                // where another thread could access data before we decorate it\n-                result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);\n-            }\n-            result = collection.toArray(result);\n-            for (int i = 0; i < result.length; i++) {\n-                result[i] = new UnmodifiableEntry((Map.Entry) result[i]);\n-            }\n-\n-            // check to see if result should be returned straight\n-            if (result.length > array.length) {\n-                return result;\n-            }\n-\n-            // copy back into input array to fulfil the method contract\n-            System.arraycopy(result, 0, array, 0, result.length);\n-            if (array.length > result.length) {\n-                array[result.length] = null;\n-            }\n-            return array;\n-        }\n-    }\n-\n-    /**\n-     * Implementation of an entry set iterator.\n-     */\n-    protected static class UnmodifiableEntrySetIterator extends AbstractIteratorDecorator {\n-        \n-        protected UnmodifiableEntrySetIterator(Iterator iterator) {\n-            super(iterator);\n-        }\n-        \n-        public Object next() {\n-            Map.Entry entry = (Map.Entry) iterator.next();\n-            return new UnmodifiableEntry(entry);\n-        }\n-        \n-        public void remove() {\n-            throw new UnsupportedOperationException();\n-        }\n-    }\n-\n-    /**\n-     * Implementation of a map entry that is unmodifiable.\n-     */\n-    protected static class UnmodifiableEntry extends AbstractMapEntryDecorator {\n-\n-        protected UnmodifiableEntry(Map.Entry entry) {\n-            super(entry);\n-        }\n-\n-        public Object setValue(Object o) {\n-            throw new UnsupportedOperationException();\n-        }\n-    }\n-\n }\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java,v 1.3 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java,v 1.4 2003/12/03 12:27:36 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n import org.apache.commons.collections.iterators.UnmodifiableMapIterator;\n import org.apache.commons.collections.iterators.UnmodifiableOrderedMapIterator;\n-import org.apache.commons.collections.map.UnmodifiableMap.UnmodifiableEntrySet;\n import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>OrderedMap</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.4 $ $Date: 2003/12/03 12:27:36 $\n  * \n  * @author Stephen Colebourne\n  */\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    protected UnmodifiableOrderedMap(OrderedMap map) {\n+    private UnmodifiableOrderedMap(OrderedMap map) {\n         super(map);\n     }\n \n \n     public Set entrySet() {\n         Set set = super.entrySet();\n-        return new UnmodifiableEntrySet(set);\n+        return UnmodifiableEntrySet.decorate(set);\n     }\n \n     public Set keySet() {\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java,v 1.2 2003/11/20 22:35:50 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java,v 1.3 2003/12/03 12:27:36 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.Unmodifiable;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n-import org.apache.commons.collections.map.UnmodifiableMap.UnmodifiableEntrySet;\n import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>SortedMap</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/20 22:35:50 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 12:27:36 $\n  * \n  * @author Stephen Colebourne\n  */\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    protected UnmodifiableSortedMap(SortedMap map) {\n+    private UnmodifiableSortedMap(SortedMap map) {\n         super(map);\n     }\n \n \n     public Set entrySet() {\n         Set set = super.entrySet();\n-        return new UnmodifiableEntrySet(set);\n+        return UnmodifiableEntrySet.decorate(set);\n     }\n \n     public Set keySet() {\n--- a/src/java/org/apache/commons/collections/set/UnmodifiableSet.java\n+++ b/src/java/org/apache/commons/collections/set/UnmodifiableSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/UnmodifiableSet.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/UnmodifiableSet.java,v 1.3 2003/12/03 12:27:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates another <code>Set</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 12:27:37 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableSet extends AbstractSetDecorator implements Unmodifiable {\n+public final class UnmodifiableSet extends AbstractSetDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable set.\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n-    protected UnmodifiableSet(Set set) {\n+    private UnmodifiableSet(Set set) {\n         super(set);\n     }\n \n--- a/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n+++ b/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java,v 1.2 2003/12/03 11:19:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java,v 1.3 2003/12/03 12:27:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Decorates another <code>SortedSet</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/03 11:19:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/03 12:27:37 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class UnmodifiableSortedSet extends AbstractSortedSetDecorator implements Unmodifiable {\n+public final class UnmodifiableSortedSet extends AbstractSortedSetDecorator implements Unmodifiable {\n \n     /**\n      * Factory method to create an unmodifiable set.\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n-    protected UnmodifiableSortedSet(SortedSet set) {\n+    private UnmodifiableSortedSet(SortedSet set) {\n         super(set);\n     }\n ", "timestamp": 1070454457, "metainfo": ""}