{"sha": "54bbca89040ed195b89478713fa4a181cb2bca3d", "log": "[COLLECTIONS-463] Add PushbackIterator. Thanks to Andy Seaborne.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n import org.apache.commons.collections4.iterators.ObjectArrayListIterator;\n import org.apache.commons.collections4.iterators.ObjectGraphIterator;\n import org.apache.commons.collections4.iterators.PeekingIterator;\n+import org.apache.commons.collections4.iterators.PushbackIterator;\n import org.apache.commons.collections4.iterators.SingletonIterator;\n import org.apache.commons.collections4.iterators.SingletonListIterator;\n import org.apache.commons.collections4.iterators.TransformIterator;\n      * @param iterator  the iterator to decorate, not null\n      * @return a peeking iterator\n      * @throws NullPointerException if the iterator is null\n+     * @since 4.0\n      */\n     public static <E> Iterator<E> peekingIterator(final Iterator<? extends E> iterator) {\n         return PeekingIterator.peekingIterator(iterator);\n+    }\n+\n+    // Pushback\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * Gets an iterator that supports pushback of elements.\n+     *\n+     * @param <E>  the element type\n+     * @param iterator  the iterator to decorate, not null\n+     * @return a pushback iterator\n+     * @throws NullPointerException if the iterator is null\n+     * @since 4.0\n+     */\n+    public static <E> Iterator<E> pushbackIterator(final Iterator<? extends E> iterator) {\n+        return PushbackIterator.pushbackIterator(iterator);\n     }\n \n     // Views\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.iterators;\n+\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections4.ArrayStack;\n+\n+/**\n+ * Decorates an iterator to support pushback of elements.\n+ * <p>\n+ * The decorator stores the pushed back elements in a LIFO manner: the last element\n+ * that has been pushed back, will be returned as the next element in a call to {@link #next()}.\n+ * <p>\n+ * The decorator does not support the removal operation. Any call to {@link #remove()} will\n+ * result in an {@link UnsupportedOperationException}.\n+ *\n+ * @since 4.0\n+ * @version $Id$\n+ */\n+@SuppressWarnings(\"deprecation\") // replace ArrayStack with ArrayDeque when moving to Java 6\n+public class PushbackIterator<E> implements Iterator<E> {\n+\n+    /** The iterator being decorated. */\n+    private final Iterator<? extends E> iterator;\n+\n+    /** The LIFO queue containing the pushed back items. */\n+    private ArrayStack<E> items = new ArrayStack<E>();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Decorates the specified iterator to support one-element lookahead.\n+     * <p>\n+     * If the iterator is already a {@link PeekingIterator} it is returned directly.\n+     *\n+     * @param <E>  the element type\n+     * @param iterator  the iterator to decorate\n+     * @return a new peeking iterator\n+     * @throws IllegalArgumentException if the iterator is null\n+     */\n+    public static <E> PushbackIterator<E> pushbackIterator(final Iterator<? extends E> iterator) {\n+        if (iterator == null) {\n+            throw new IllegalArgumentException(\"Iterator must not be null\");\n+        }\n+        if (iterator instanceof PushbackIterator<?>) {\n+            @SuppressWarnings(\"unchecked\") // safe cast\n+            final PushbackIterator<E> it = (PushbackIterator<E>) iterator;\n+            return it;\n+        }\n+        return new PushbackIterator<E>(iterator);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param iterator  the iterator to decorate\n+     */\n+    public PushbackIterator(final Iterator<? extends E> iterator) {\n+        super();\n+        this.iterator = iterator;\n+    }\n+\n+    /**\n+     * Push back the given element to the iterator.\n+     * <p>\n+     * Calling {@link #next()} immediately afterwards will return exactly this element.\n+     *\n+     * @param item  the element to push back to the iterator\n+     */\n+    public void pushback(final E item) {\n+        items.push(item);\n+    }\n+\n+    public boolean hasNext() {\n+        return !items.isEmpty() ? true : iterator.hasNext();\n+    }\n+\n+    public E next() {\n+        return !items.isEmpty() ? items.pop() : iterator.next();\n+    }\n+\n+    /**\n+     * This iterator will always throw an {@link UnsupportedOperationException}.\n+     *\n+     * @throws UnsupportedOperationException always\n+     */\n+    public void remove() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Tests the PushbackIterator.\n+ * \n+ * @version $Id$\n+ */\n+public class PushbackIteratorTest<E> extends AbstractIteratorTest<E> {\n+\n+    private String[] testArray = { \"a\", \"b\", \"c\" };\n+\n+    private List<E> testList;\n+\n+    public PushbackIteratorTest(final String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        testList = new ArrayList<E>(Arrays.asList((E[]) testArray));\n+    }\n+\n+    @Override\n+    public Iterator<E> makeEmptyIterator() {\n+        return PushbackIterator.pushbackIterator(Collections.<E> emptyList().iterator());\n+    }\n+\n+    @Override\n+    public PushbackIterator<E> makeObject() {\n+        return PushbackIterator.pushbackIterator(testList.iterator());\n+    }\n+\n+    @Override\n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    // -----------------------------------------------------------------------\n+\n+    @Test\n+    public void testNormalIteration() {\n+        PushbackIterator<E> iter = makeObject();\n+        assertEquals(\"a\", iter.next());\n+        assertEquals(\"b\", iter.next());\n+        assertEquals(\"c\", iter.next());\n+        assertFalse(iter.hasNext());\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testImmediatePushback() {\n+        PushbackIterator<E> iter = makeObject();\n+        iter.pushback((E) \"x\");\n+        assertEquals(\"x\", iter.next());\n+        assertEquals(\"a\", iter.next());\n+        validate(iter, \"b\", \"c\");\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testDelayedPushback() {\n+        PushbackIterator<E> iter = makeObject();\n+        assertEquals(\"a\", iter.next());\n+        iter.pushback((E) \"x\");\n+        assertEquals(\"x\", iter.next());\n+        assertEquals(\"b\", iter.next());\n+        validate(iter, \"c\");\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testMultiplePushback() {\n+        PushbackIterator<E> iter = makeObject();\n+        assertEquals(\"a\", iter.next());\n+        iter.pushback((E) \"x\");\n+        iter.pushback((E) \"y\");\n+        assertEquals(\"y\", iter.next());\n+        assertEquals(\"x\", iter.next());\n+        assertEquals(\"b\", iter.next());\n+        validate(iter, \"c\");\n+    }\n+\n+    private void validate(Iterator<E> iter, Object... items) {\n+        for (final Object x : items) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(x, iter.next());\n+        }\n+        assertFalse(iter.hasNext());\n+    }\n+\n+}", "timestamp": 1367904519, "metainfo": ""}