{"sha": "72784c46f6a7d7644398db5c7ac8bd3822c523d4", "log": "[COLLECTIONS-495] Fix UnmodifiableTrie.unmodifiableTrie, add tests.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java\n+++ b/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java\n      * @return a new unmodifiable trie\n      * @throws IllegalArgumentException if trie is null\n      */\n-    public static <K, V> UnmodifiableTrie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie) {\n+    public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, ? extends V> trie) {\n+        if (trie instanceof Unmodifiable) {\n+            @SuppressWarnings(\"unchecked\") // safe to upcast\n+            final Trie<K, V> tmpTrie = (Trie<K, V>) trie;\n+            return tmpTrie;\n+        }\n         return new UnmodifiableTrie<K, V>(trie);\n     }\n \n--- a/src/test/java/org/apache/commons/collections4/TrieUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/TrieUtilsTest.java\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         }\n+        \n+        assertSame(\"UnmodifiableTrie shall not be decorated\", trie, TrieUtils.unmodifiableTrie(trie));\n     }\n \n }\n--- a/src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java\n+++ b/src/test/java/org/apache/commons/collections4/trie/UnmodifiableTrieTest.java\n  */\n package org.apache.commons.collections4.trie;\n \n-import java.util.SortedMap;\n-\n import junit.framework.Test;\n \n import org.apache.commons.collections4.BulkTest;\n+import org.apache.commons.collections4.Trie;\n import org.apache.commons.collections4.Unmodifiable;\n import org.apache.commons.collections4.map.AbstractSortedMapTest;\n-import org.apache.commons.collections4.map.UnmodifiableSortedMap;\n \n /**\n  * Extension of {@link AbstractSortedMapTest} for exercising the\n     //-------------------------------------------------------------------\n \n     @Override\n-    public SortedMap<String, V> makeObject() {\n-        return UnmodifiableSortedMap.unmodifiableSortedMap(new PatriciaTrie<V>());\n+    public Trie<String, V> makeObject() {\n+        return UnmodifiableTrie.unmodifiableTrie(new PatriciaTrie<V>());\n     }\n \n     @Override\n     }\n \n     @Override\n-    public SortedMap<String, V> makeFullMap() {\n-        final SortedMap<String, V> m = new PatriciaTrie<V>();\n+    public Trie<String, V> makeFullMap() {\n+        final Trie<String, V> m = new PatriciaTrie<V>();\n         addSampleMappings(m);\n-        return UnmodifiableSortedMap.unmodifiableSortedMap(m);\n+        return UnmodifiableTrie.unmodifiableTrie(m);\n     }\n \n     //-----------------------------------------------------------------------\n+\n     public void testUnmodifiable() {\n         assertTrue(makeObject() instanceof Unmodifiable);\n         assertTrue(makeFullMap() instanceof Unmodifiable);\n     }\n \n     public void testDecorateFactory() {\n-        final SortedMap<String, V> map = makeFullMap();\n-        assertSame(map, UnmodifiableSortedMap.unmodifiableSortedMap(map));\n+        final Trie<String, V> trie = makeFullMap();\n+        assertSame(trie, UnmodifiableTrie.unmodifiableTrie(trie));\n \n         try {\n-            UnmodifiableSortedMap.unmodifiableSortedMap(null);\n+            UnmodifiableTrie.unmodifiableTrie(null);\n             fail();\n         } catch (final IllegalArgumentException ex) {}\n     }\n+\n+    //-----------------------------------------------------------------------\n \n     @Override\n     public String getCompatibilityVersion() {", "timestamp": 1384187414, "metainfo": ""}