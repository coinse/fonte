{"sha": "d0d74a4e1a39a0a461efee5322c235a046187d33", "log": "Fix deviation from Comparator contract [sgn(compare(x, y)) == -sgn(compare(y, x))]  Eliminate multiplication by switching order of objects passed to underlying comparator.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ReverseComparator.java\n  * Reverses the order of another comparator.\n  *\n  * @author bayard@generationjava.com\n- * @version $Id: ReverseComparator.java,v 1.5 2002/03/01 19:18:49 morgand Exp $\n+ * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n+ * @version $Id: ReverseComparator.java,v 1.6 2002/03/20 00:25:37 mas Exp $\n  */\n public class ReverseComparator implements Comparator,Serializable {\n \n     private Comparator comparator;\n \n     /**\n-     * Creates a reverse comparator that will invert any List.\n-     * It merely reverses the existing order; it does not\n-     * reorder the List according to reverse \"natural\" order.\n-     * In many cases, a faster alternative to this is\n-     * the reverse(List) method of java.util.Collection.\n+     * Creates a comparator that compares objects based on the inverse of their\n+     * natural ordering.\n      */\n     public ReverseComparator() {\n+        this(null);\n     }\n \n     /**\n      * of the passed in comparator.\n      */\n     public ReverseComparator(Comparator comparator) {\n-        this.comparator = comparator;\n+        if(comparator != null) {\n+            this.comparator = comparator;\n+        } else {\n+            this.comparator = ComparableComparator.getInstance();\n+        }\n     }\n \n     public int compare(Object o1, Object o2) {\n-        if(comparator == null) {\n-            return -1;\n-        } else {\n-            return -1*comparator.compare(o1,o2);\n-        }\n+        return comparator.compare(o2, o1);\n     }\n \n }", "timestamp": 1016583937, "metainfo": ""}