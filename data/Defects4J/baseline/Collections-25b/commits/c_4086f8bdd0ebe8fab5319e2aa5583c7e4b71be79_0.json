{"sha": "4086f8bdd0ebe8fab5319e2aa5583c7e4b71be79", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r643795 | skestle | 2008-04-02 01:49:57 -0700 (Wed, 02 Apr 2008) | 5 lines          Generified EqualPredicate and created individual test class moved from TestPredicateUtils          Added assertFalse() and assertTrue to BasicPredicateTestBase with (Predicate, Object) parameters          Issues: COLLECTIONS-243, COLLECTIONS-253, COLLECTIONS-293     ------------------------------------------------------------------------     r643782 | skestle | 2008-04-02 01:00:00 -0700 (Wed, 02 Apr 2008) | 5 lines          Generified NullPredicate and created individual test class moved on TestPredicateUtils          Renamed PredicateTestBase to MockPredicateTestBase to reduce confusion and added BasicPredicateTestBase.          Issues: COLLECTIONS-243, COLLECTIONS-253, COLLECTIONS-293     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestPredicateUtils.java\n+++ b/src/test/org/apache/commons/collections/TestPredicateUtils.java\n  */\n package org.apache.commons.collections;\n \n+import static org.apache.commons.collections.functors.NullPredicate.nullPredicate;\n+import static org.apache.commons.collections.functors.TruePredicate.truePredicate;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.fail;\n+\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n-\n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-import junit.textui.TestRunner;\n+import org.apache.commons.collections.functors.AllPredicate;\n+import org.apache.commons.collections.functors.BasicPredicateTestBase;\n+import org.apache.commons.collections.functors.EqualPredicate;\n+import org.apache.commons.collections.functors.FalsePredicate;\n+import org.apache.commons.collections.functors.TruePredicate;\n+import org.junit.Test;\n \n /**\n  * Tests the org.apache.commons.collections.PredicateUtils class.\n  * @author Stephen Colebourne\n  * @author Matt Benson\n  */\n-public class TestPredicateUtils extends junit.framework.TestCase {\n-\n-    private static final Object cObject = new Object();\n-    private static final Object cString = \"Hello\";\n-    private static final Object cInteger = new Integer(6);\n-\n-    /**\n-     * Construct\n-     */\n-    public TestPredicateUtils(String name) {\n-        super(name);\n-    }\n-\n-    /**\n-     * Main.\n-     * @param args\n-     */    \n-    public static void main(String[] args) {\n-        TestRunner.run(suite());\n-    }\n-\n-    /**\n-     * Return class as a test suite.\n-     */\n-    public static Test suite() {\n-        return new TestSuite(TestPredicateUtils.class);\n-    }\n-\n+public class TestPredicateUtils extends BasicPredicateTestBase {\n     /**\n      * Set up instance variables required by this test case.\n      */\n     // exceptionPredicate\n     //------------------------------------------------------------------\n \n-    public void testExceptionPredicate() {\n+    @Test public void testExceptionPredicate() {\n         assertNotNull(PredicateUtils.exceptionPredicate());\n         assertSame(PredicateUtils.exceptionPredicate(), PredicateUtils.exceptionPredicate());\n         try {\n         }\n         fail();\n     }\n-    \n-    // nullPredicate\n-    //------------------------------------------------------------------\n-\n-    public void testNullPredicate() {\n-        assertNotNull(PredicateUtils.nullPredicate());\n-        assertSame(PredicateUtils.nullPredicate(), PredicateUtils.nullPredicate());\n-        assertEquals(true, PredicateUtils.nullPredicate().evaluate(null));\n-        assertEquals(false, PredicateUtils.nullPredicate().evaluate(cObject));\n-        assertEquals(false, PredicateUtils.nullPredicate().evaluate(cString));\n-        assertEquals(false, PredicateUtils.nullPredicate().evaluate(cInteger));\n-    }\n \n     // notNullPredicate\n     //------------------------------------------------------------------\n \n-    public void testIsNotNullPredicate() {\n+    @Test public void testIsNotNullPredicate() {\n         assertNotNull(PredicateUtils.notNullPredicate());\n         assertSame(PredicateUtils.notNullPredicate(), PredicateUtils.notNullPredicate());\n         assertEquals(false, PredicateUtils.notNullPredicate().evaluate(null));\n         assertEquals(true, PredicateUtils.notNullPredicate().evaluate(cInteger));\n     }\n \n-    // equalPredicate\n-    //------------------------------------------------------------------\n-\n-    public void testEqualPredicate() {\n-        assertSame(PredicateUtils.nullPredicate(), PredicateUtils.equalPredicate(null));\n-        assertNotNull(PredicateUtils.equalPredicate(new Integer(6)));\n-        assertEquals(false, PredicateUtils.equalPredicate(new Integer(6)).evaluate(null));\n-        assertEquals(false, PredicateUtils.equalPredicate(new Integer(6)).evaluate(cObject));\n-        assertEquals(false, PredicateUtils.equalPredicate(new Integer(6)).evaluate(cString));\n-        assertEquals(true, PredicateUtils.equalPredicate(new Integer(6)).evaluate(cInteger));\n-    }\n-\n     // identityPredicate\n     //------------------------------------------------------------------\n \n-    public void testIdentityPredicate() {\n-        assertSame(PredicateUtils.nullPredicate(), PredicateUtils.identityPredicate(null));\n+    @Test public void testIdentityPredicate() {\n+        assertSame(nullPredicate(), PredicateUtils.identityPredicate(null));\n         assertNotNull(PredicateUtils.identityPredicate(new Integer(6)));\n         assertEquals(false, PredicateUtils.identityPredicate(new Integer(6)).evaluate(null));\n-        assertEquals(false, PredicateUtils.identityPredicate(new Integer(6)).evaluate(cObject));\n-        assertEquals(false, PredicateUtils.identityPredicate(new Integer(6)).evaluate(cString));\n+        assertEquals(false, PredicateUtils.<Object>identityPredicate(new Integer(6)).evaluate(cObject));\n+        assertEquals(false, PredicateUtils.<Object>identityPredicate(new Integer(6)).evaluate(cString));\n         assertEquals(false, PredicateUtils.identityPredicate(new Integer(6)).evaluate(cInteger));\n         assertEquals(true, PredicateUtils.identityPredicate(cInteger).evaluate(cInteger));\n     }\n     // truePredicate\n     //------------------------------------------------------------------\n \n-    public void testTruePredicate() {\n-        assertNotNull(PredicateUtils.truePredicate());\n-        assertSame(PredicateUtils.truePredicate(), PredicateUtils.truePredicate());\n-        assertEquals(true, PredicateUtils.truePredicate().evaluate(null));\n-        assertEquals(true, PredicateUtils.truePredicate().evaluate(cObject));\n-        assertEquals(true, PredicateUtils.truePredicate().evaluate(cString));\n-        assertEquals(true, PredicateUtils.truePredicate().evaluate(cInteger));\n+    @Test public void testTruePredicate() {\n+        assertNotNull(TruePredicate.truePredicate());\n+        assertSame(TruePredicate.truePredicate(), TruePredicate.truePredicate());\n+        assertEquals(true, TruePredicate.truePredicate().evaluate(null));\n+        assertEquals(true, TruePredicate.truePredicate().evaluate(cObject));\n+        assertEquals(true, TruePredicate.truePredicate().evaluate(cString));\n+        assertEquals(true, TruePredicate.truePredicate().evaluate(cInteger));\n     }\n \n     // falsePredicate\n     //------------------------------------------------------------------\n \n-    public void testFalsePredicate() {\n-        assertNotNull(PredicateUtils.falsePredicate());\n-        assertSame(PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate());\n-        assertEquals(false, PredicateUtils.falsePredicate().evaluate(null));\n-        assertEquals(false, PredicateUtils.falsePredicate().evaluate(cObject));\n-        assertEquals(false, PredicateUtils.falsePredicate().evaluate(cString));\n-        assertEquals(false, PredicateUtils.falsePredicate().evaluate(cInteger));\n+    @Test public void testFalsePredicate() {\n+        assertNotNull(FalsePredicate.falsePredicate());\n+        assertSame(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate());\n+        assertEquals(false, FalsePredicate.falsePredicate().evaluate(null));\n+        assertEquals(false, FalsePredicate.falsePredicate().evaluate(cObject));\n+        assertEquals(false, FalsePredicate.falsePredicate().evaluate(cString));\n+        assertEquals(false, FalsePredicate.falsePredicate().evaluate(cInteger));\n     }\n \n     // notPredicate\n     //------------------------------------------------------------------\n \n-    public void testNotPredicate() {\n-        assertNotNull(PredicateUtils.notPredicate(PredicateUtils.truePredicate()));\n-        assertEquals(false, PredicateUtils.notPredicate(PredicateUtils.truePredicate()).evaluate(null));\n-        assertEquals(false, PredicateUtils.notPredicate(PredicateUtils.truePredicate()).evaluate(cObject));\n-        assertEquals(false, PredicateUtils.notPredicate(PredicateUtils.truePredicate()).evaluate(cString));\n-        assertEquals(false, PredicateUtils.notPredicate(PredicateUtils.truePredicate()).evaluate(cInteger));\n-    }\n-    \n-    public void testNotPredicateEx() {\n+    @Test public void testNotPredicate() {\n+        assertNotNull(PredicateUtils.notPredicate(TruePredicate.truePredicate()));\n+        assertEquals(false, PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(cObject));\n+        assertEquals(false, PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(cString));\n+        assertEquals(false, PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(cInteger));\n+    }\n+\n+    @Test public void testNotPredicateEx() {\n         try {\n             PredicateUtils.notPredicate(null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n+\n     // andPredicate\n     //------------------------------------------------------------------\n \n-    public void testAndPredicate() {\n-        assertEquals(true, PredicateUtils.andPredicate(PredicateUtils.truePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n-        assertEquals(false, PredicateUtils.andPredicate(PredicateUtils.truePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n-        assertEquals(false, PredicateUtils.andPredicate(PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n-        assertEquals(false, PredicateUtils.andPredicate(PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n-    }\n-\n-    public void testAndPredicateEx() {\n+    @Test public void testAndPredicate() {\n+        assertEquals(true, PredicateUtils.andPredicate(TruePredicate.truePredicate(), TruePredicate.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.andPredicate(TruePredicate.truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.andPredicate(FalsePredicate.falsePredicate(), TruePredicate.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.andPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n+    }\n+\n+    @Test public void testAndPredicateEx() {\n         try {\n             PredicateUtils.andPredicate(null, null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n+\n     // allPredicate\n     //------------------------------------------------------------------\n \n-    public void testAllPredicate() {\n-        assertTrue(PredicateUtils.allPredicate(\n-            new Predicate[] {}).evaluate(null));\n-        assertEquals(true, PredicateUtils.allPredicate(new Predicate[] {\n-            PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n-        assertEquals(false, PredicateUtils.allPredicate(new Predicate[] {\n-            PredicateUtils.truePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n-        assertEquals(false, PredicateUtils.allPredicate(new Predicate[] {\n-            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n-        assertEquals(false, PredicateUtils.allPredicate(new Predicate[] {\n-            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n-        Collection coll = new ArrayList();\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n-        assertEquals(true, PredicateUtils.allPredicate(coll).evaluate(null));\n-        coll.clear();\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n-        assertEquals(false, PredicateUtils.allPredicate(coll).evaluate(null));\n-        coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n-        assertEquals(false, PredicateUtils.allPredicate(coll).evaluate(null));\n-        coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        assertEquals(false, PredicateUtils.allPredicate(coll).evaluate(null));\n-        coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        assertFalse(PredicateUtils.allPredicate(coll).evaluate(null));\n-        coll.clear();\n-        coll.add(PredicateUtils.truePredicate());\n-        assertTrue(PredicateUtils.allPredicate(coll).evaluate(null));\n-        coll.clear();\n-        assertTrue(PredicateUtils.allPredicate(coll).evaluate(null));\n-    }\n-\n-    public void testAllPredicateEx1() {\n-        try {\n-            PredicateUtils.allPredicate((Predicate[]) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-    \n-    public void testAllPredicateEx2() {\n-        try {\n-            PredicateUtils.allPredicate(new Predicate[] {null});\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-    \n-    public void testAllPredicateEx3() {\n-        try {\n-            PredicateUtils.allPredicate(new Predicate[] {null, null});\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-    \n-    public void testAllPredicateEx4() {\n-        try {\n-            PredicateUtils.allPredicate((Collection) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-    \n-    public void testAllPredicateEx5() {\n-        PredicateUtils.allPredicate(Collections.EMPTY_LIST);\n-    }\n-    \n-    public void testAllPredicateEx6() {\n-        try {\n-            Collection coll = new ArrayList();\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testAllPredicate() {\n+        assertTrue(AllPredicate.allPredicate(new Predicate[] {}), null);\n+        assertEquals(true, AllPredicate.allPredicate(new Predicate[] {\n+                TruePredicate.truePredicate(), TruePredicate.truePredicate(), TruePredicate.truePredicate()}).evaluate(null));\n+        assertEquals(false, AllPredicate.allPredicate(new Predicate[] {\n+                TruePredicate.truePredicate(), FalsePredicate.falsePredicate(), TruePredicate.truePredicate()}).evaluate(null));\n+        assertEquals(false, AllPredicate.allPredicate(new Predicate[] {\n+                FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), TruePredicate.truePredicate()}).evaluate(null));\n+        assertEquals(false, AllPredicate.allPredicate(new Predicate[] {\n+                FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()}).evaluate(null));\n+        Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n+        assertEquals(true, AllPredicate.allPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(TruePredicate.truePredicate());\n+        assertEquals(false, AllPredicate.allPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(TruePredicate.truePredicate());\n+        assertEquals(false, AllPredicate.allPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        assertEquals(false, AllPredicate.allPredicate(coll).evaluate(null));\n+        coll.clear();\n+        coll.add(FalsePredicate.falsePredicate());\n+        assertFalse(AllPredicate.allPredicate(coll), null);\n+        coll.clear();\n+        coll.add(TruePredicate.truePredicate());\n+        assertTrue(AllPredicate.allPredicate(coll), null);\n+        coll.clear();\n+        assertTrue(AllPredicate.allPredicate(coll), null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testAllPredicateEx1() {\n+        try {\n+            AllPredicate.allPredicate((Predicate[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testAllPredicateEx2() {\n+        try {\n+            AllPredicate.<Object>allPredicate(new Predicate[] { null });\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testAllPredicateEx3() {\n+        try {\n+            AllPredicate.allPredicate(new Predicate[] { null, null });\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    @Test public void testAllPredicateEx4() {\n+        try {\n+            AllPredicate.allPredicate((Collection<Predicate<Object>>) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    @Test public void testAllPredicateEx5() {\n+        AllPredicate.allPredicate(Collections.<Predicate<Object>>emptyList());\n+    }\n+\n+    @Test public void testAllPredicateEx6() {\n+        try {\n+            Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n             coll.add(null);\n             coll.add(null);\n-            PredicateUtils.allPredicate(coll);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-    \n+            AllPredicate.allPredicate(coll);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n     // orPredicate\n     //------------------------------------------------------------------\n \n-    public void testOrPredicate() {\n-        assertEquals(true, PredicateUtils.orPredicate(PredicateUtils.truePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n-        assertEquals(true, PredicateUtils.orPredicate(PredicateUtils.truePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n-        assertEquals(true, PredicateUtils.orPredicate(PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n-        assertEquals(false, PredicateUtils.orPredicate(PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n-    }\n-    \n-    public void testOrPredicateEx() {\n+    @Test public void testOrPredicate() {\n+        assertEquals(true, PredicateUtils.orPredicate(TruePredicate.truePredicate(), TruePredicate.truePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.orPredicate(TruePredicate.truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.orPredicate(FalsePredicate.falsePredicate(), TruePredicate.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.orPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n+    }\n+\n+    @Test public void testOrPredicateEx() {\n         try {\n             PredicateUtils.orPredicate(null, null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n+\n     // anyPredicate\n     //------------------------------------------------------------------\n \n-    public void testAnyPredicate() {\n-        assertFalse(PredicateUtils.anyPredicate(\n-            new Predicate[] {}).evaluate(null));\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testAnyPredicate() {\n+        assertFalse(PredicateUtils.anyPredicate(new Predicate[] {}), null);\n+\n         assertEquals(true, PredicateUtils.anyPredicate(new Predicate[] {\n-            PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+                TruePredicate.truePredicate(), TruePredicate.truePredicate(), TruePredicate.truePredicate()}).evaluate(null));\n         assertEquals(true, PredicateUtils.anyPredicate(new Predicate[] {\n-            PredicateUtils.truePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+                TruePredicate.truePredicate(), FalsePredicate.falsePredicate(), TruePredicate.truePredicate()}).evaluate(null));\n         assertEquals(true, PredicateUtils.anyPredicate(new Predicate[] {\n-            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+                FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), TruePredicate.truePredicate()}).evaluate(null));\n         assertEquals(false, PredicateUtils.anyPredicate(new Predicate[] {\n-            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n+                FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()}).evaluate(null));\n         Collection coll = new ArrayList();\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n         assertEquals(true, PredicateUtils.anyPredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(TruePredicate.truePredicate());\n         assertEquals(true, PredicateUtils.anyPredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(TruePredicate.truePredicate());\n         assertEquals(true, PredicateUtils.anyPredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n         assertEquals(false, PredicateUtils.anyPredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        assertFalse(PredicateUtils.anyPredicate(coll).evaluate(null));\n-        coll.clear();\n-        coll.add(PredicateUtils.truePredicate());\n-        assertTrue(PredicateUtils.anyPredicate(coll).evaluate(null));\n-        coll.clear();\n-        assertFalse(PredicateUtils.anyPredicate(coll).evaluate(null));\n-    }\n-\n-    public void testAnyPredicateEx1() {\n+        coll.add(FalsePredicate.falsePredicate());\n+        assertFalse(PredicateUtils.anyPredicate(coll), null);\n+        coll.clear();\n+        coll.add(TruePredicate.truePredicate());\n+        assertTrue(PredicateUtils.anyPredicate(coll), null);\n+        coll.clear();\n+        assertFalse(PredicateUtils.anyPredicate(coll), null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testAnyPredicateEx1() {\n         try {\n             PredicateUtils.anyPredicate((Predicate[]) null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testAnyPredicateEx2() {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testAnyPredicateEx2() {\n         try {\n             PredicateUtils.anyPredicate(new Predicate[] {null});\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testAnyPredicateEx3() {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testAnyPredicateEx3() {\n         try {\n             PredicateUtils.anyPredicate(new Predicate[] {null, null});\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testAnyPredicateEx4() {\n-        try {\n-            PredicateUtils.anyPredicate((Collection) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-    \n-    public void testAnyPredicateEx5() {\n-        PredicateUtils.anyPredicate(Collections.EMPTY_LIST);\n-    }\n-    \n-    public void testAnyPredicateEx6() {\n-        try {\n-            Collection coll = new ArrayList();\n+\n+    @Test public void testAnyPredicateEx4() {\n+        try {\n+            PredicateUtils.anyPredicate((Collection<Predicate<Object>>) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    @Test public void testAnyPredicateEx5() {\n+        PredicateUtils.anyPredicate(Collections.<Predicate<Object>>emptyList());\n+    }\n+\n+    @Test public void testAnyPredicateEx6() {\n+        try {\n+            Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n             coll.add(null);\n             coll.add(null);\n             PredicateUtils.anyPredicate(coll);\n         }\n         fail();\n     }\n-    \n+\n     // eitherPredicate\n     //------------------------------------------------------------------\n \n-    public void testEitherPredicate() {\n-        assertEquals(false, PredicateUtils.eitherPredicate(PredicateUtils.truePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n-        assertEquals(true, PredicateUtils.eitherPredicate(PredicateUtils.truePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n-        assertEquals(true, PredicateUtils.eitherPredicate(PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n-        assertEquals(false, PredicateUtils.eitherPredicate(PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n-    }\n-\n-    public void testEitherPredicateEx() {\n+    @Test public void testEitherPredicate() {\n+        assertEquals(false, PredicateUtils.eitherPredicate(TruePredicate.truePredicate(), TruePredicate.truePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.eitherPredicate(TruePredicate.truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(), TruePredicate.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n+    }\n+\n+    @Test public void testEitherPredicateEx() {\n         try {\n             PredicateUtils.eitherPredicate(null, null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n+\n     // onePredicate\n     //------------------------------------------------------------------\n \n-    public void testOnePredicate() {\n-        assertFalse(PredicateUtils.onePredicate(\n-            new Predicate[] {}).evaluate(null));\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testOnePredicate() {\n+        assertFalse(PredicateUtils.onePredicate((Predicate<Object>[]) new Predicate[] {}), null);\n         assertEquals(false, PredicateUtils.onePredicate(new Predicate[] {\n-            PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+            TruePredicate.truePredicate(), TruePredicate.truePredicate(), TruePredicate.truePredicate()}).evaluate(null));\n         assertEquals(false, PredicateUtils.onePredicate(new Predicate[] {\n-            PredicateUtils.truePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+                TruePredicate.truePredicate(), FalsePredicate.falsePredicate(), TruePredicate.truePredicate()}).evaluate(null));\n         assertEquals(true, PredicateUtils.onePredicate(new Predicate[] {\n-            PredicateUtils.truePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n+                TruePredicate.truePredicate(), FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()}).evaluate(null));\n         assertEquals(true, PredicateUtils.onePredicate(new Predicate[] {\n-            PredicateUtils.falsePredicate(), PredicateUtils.truePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n+                FalsePredicate.falsePredicate(), TruePredicate.truePredicate(), FalsePredicate.falsePredicate()}).evaluate(null));\n         assertEquals(true, PredicateUtils.onePredicate(new Predicate[] {\n-            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+                FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), TruePredicate.truePredicate()}).evaluate(null));\n         assertEquals(false, PredicateUtils.onePredicate(new Predicate[] {\n-            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n-        Collection coll = new ArrayList();\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n+                FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()}).evaluate(null));\n+        Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n         assertEquals(false, PredicateUtils.onePredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(TruePredicate.truePredicate());\n         assertEquals(false, PredicateUtils.onePredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(TruePredicate.truePredicate());\n         assertEquals(true, PredicateUtils.onePredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n         assertEquals(false, PredicateUtils.onePredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));\n-        coll.clear();\n-        coll.add(PredicateUtils.truePredicate());\n-        assertTrue(PredicateUtils.onePredicate(coll).evaluate(null));\n-        coll.clear();\n-        assertFalse(PredicateUtils.onePredicate(coll).evaluate(null));\n-    }\n-\n-    public void testOnePredicateEx1() {\n+        coll.add(FalsePredicate.falsePredicate());\n+        assertFalse(PredicateUtils.onePredicate(coll), null);\n+        coll.clear();\n+        coll.add(TruePredicate.truePredicate());\n+        assertTrue(PredicateUtils.onePredicate(coll), null);\n+        coll.clear();\n+        assertFalse(PredicateUtils.onePredicate(coll), null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testOnePredicateEx1() {\n         try {\n             PredicateUtils.onePredicate((Predicate[]) null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testOnePredicateEx2() {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testOnePredicateEx2() {\n         try {\n             PredicateUtils.onePredicate(new Predicate[] {null});\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testOnePredicateEx3() {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testOnePredicateEx3() {\n         try {\n             PredicateUtils.onePredicate(new Predicate[] {null, null});\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testOnePredicateEx4() {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testOnePredicateEx4() {\n         try {\n             PredicateUtils.onePredicate((Collection) null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testOnePredicateEx5() {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testOnePredicateEx5() {\n         PredicateUtils.onePredicate(Collections.EMPTY_LIST);\n     }\n-    \n-    public void testOnePredicateEx6() {\n-        try {\n-            Collection coll = new ArrayList();\n+\n+    @Test public void testOnePredicateEx6() {\n+        try {\n+            Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n             coll.add(null);\n             coll.add(null);\n             PredicateUtils.onePredicate(coll);\n         }\n         fail();\n     }\n-    \n+\n     // neitherPredicate\n     //------------------------------------------------------------------\n \n-    public void testNeitherPredicate() {\n-        assertEquals(false, PredicateUtils.neitherPredicate(PredicateUtils.truePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n-        assertEquals(false, PredicateUtils.neitherPredicate(PredicateUtils.truePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n-        assertEquals(false, PredicateUtils.neitherPredicate(PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()).evaluate(null));\n-        assertEquals(true, PredicateUtils.neitherPredicate(PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()).evaluate(null));\n-    }\n-\n-    public void testNeitherPredicateEx() {\n+    @Test public void testNeitherPredicate() {\n+        assertEquals(false, PredicateUtils.neitherPredicate(TruePredicate.truePredicate(), TruePredicate.truePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.neitherPredicate(TruePredicate.truePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n+        assertEquals(false, PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(), TruePredicate.truePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n+    }\n+\n+    @Test public void testNeitherPredicateEx() {\n         try {\n             PredicateUtils.neitherPredicate(null, null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n+\n     // nonePredicate\n     //------------------------------------------------------------------\n \n-    public void testNonePredicate() {\n-        assertTrue(PredicateUtils.nonePredicate(\n-            new Predicate[] {}).evaluate(null));\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testNonePredicate() {\n+        assertTrue(PredicateUtils.nonePredicate(new Predicate[] {}), null);\n         assertEquals(false, PredicateUtils.nonePredicate(new Predicate[] {\n-            PredicateUtils.truePredicate(), PredicateUtils.truePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+                TruePredicate.truePredicate(), TruePredicate.truePredicate(), TruePredicate.truePredicate() }).evaluate(null));\n         assertEquals(false, PredicateUtils.nonePredicate(new Predicate[] {\n-            PredicateUtils.truePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+                TruePredicate.truePredicate(), FalsePredicate.falsePredicate(), TruePredicate.truePredicate() }).evaluate(null));\n         assertEquals(false, PredicateUtils.nonePredicate(new Predicate[] {\n-            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.truePredicate()}).evaluate(null));\n+                FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), TruePredicate.truePredicate() }).evaluate(null));\n         assertEquals(true, PredicateUtils.nonePredicate(new Predicate[] {\n-            PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate(), PredicateUtils.falsePredicate()}).evaluate(null));\n-        Collection coll = new ArrayList();\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n+                FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate() }).evaluate(null));\n+        Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n         assertEquals(false, PredicateUtils.nonePredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.truePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n+        coll.add(TruePredicate.truePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(TruePredicate.truePredicate());\n         assertEquals(false, PredicateUtils.nonePredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.truePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(TruePredicate.truePredicate());\n         assertEquals(false, PredicateUtils.nonePredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n-        coll.add(PredicateUtils.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n+        coll.add(FalsePredicate.falsePredicate());\n         assertEquals(true, PredicateUtils.nonePredicate(coll).evaluate(null));\n         coll.clear();\n-        coll.add(PredicateUtils.falsePredicate());\n-        assertTrue(PredicateUtils.nonePredicate(coll).evaluate(null));\n-        coll.clear();\n-        coll.add(PredicateUtils.truePredicate());\n-        assertFalse(PredicateUtils.nonePredicate(coll).evaluate(null));\n-        coll.clear();\n-        assertTrue(PredicateUtils.nonePredicate(coll).evaluate(null));\n-    }\n-\n-    public void testNonePredicateEx1() {\n+        coll.add(FalsePredicate.falsePredicate());\n+        assertTrue(PredicateUtils.nonePredicate(coll), null);\n+        coll.clear();\n+        coll.add(TruePredicate.truePredicate());\n+        assertFalse(PredicateUtils.nonePredicate(coll), null);\n+        coll.clear();\n+        assertTrue(PredicateUtils.nonePredicate(coll), null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testNonePredicateEx1() {\n         try {\n             PredicateUtils.nonePredicate((Predicate[]) null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testNonePredicateEx2() {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testNonePredicateEx2() {\n         try {\n             PredicateUtils.nonePredicate(new Predicate[] {null});\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testNonePredicateEx3() {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test public void testNonePredicateEx3() {\n         try {\n             PredicateUtils.nonePredicate(new Predicate[] {null, null});\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testNonePredicateEx4() {\n-        try {\n-            PredicateUtils.nonePredicate((Collection) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-    \n-    public void testNonePredicateEx5() {\n-        PredicateUtils.nonePredicate(Collections.EMPTY_LIST);\n-    }\n-    \n-    public void testNonePredicateEx6() {\n-        try {\n-            Collection coll = new ArrayList();\n+\n+    @Test public void testNonePredicateEx4() {\n+        try {\n+            PredicateUtils.nonePredicate((Collection<Predicate<Object>>) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    @Test public void testNonePredicateEx5() {\n+        PredicateUtils.nonePredicate(Collections.<Predicate<Object>>emptyList());\n+    }\n+\n+    @Test public void testNonePredicateEx6() {\n+        try {\n+            Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n             coll.add(null);\n             coll.add(null);\n             PredicateUtils.nonePredicate(coll);\n         }\n         fail();\n     }\n-    \n+\n     // instanceofPredicate\n     //------------------------------------------------------------------\n \n-    public void testInstanceOfPredicate() {\n+    @Test public void testInstanceOfPredicate() {\n         assertNotNull(PredicateUtils.instanceofPredicate(String.class));\n         assertEquals(false, PredicateUtils.instanceofPredicate(String.class).evaluate(null));\n         assertEquals(false, PredicateUtils.instanceofPredicate(String.class).evaluate(cObject));\n     // uniquePredicate\n     //------------------------------------------------------------------\n \n-    public void testUniquePredicate() {\n-        Predicate p = PredicateUtils.uniquePredicate();\n+    @Test public void testUniquePredicate() {\n+        Predicate<Object> p = PredicateUtils.uniquePredicate();\n         assertEquals(true, p.evaluate(new Object()));\n         assertEquals(true, p.evaluate(new Object()));\n         assertEquals(true, p.evaluate(new Object()));\n         assertEquals(false, p.evaluate(cString));\n         assertEquals(false, p.evaluate(cString));\n     }\n-    \n+\n     // asPredicate(Transformer)\n     //------------------------------------------------------------------\n \n-    public void testAsPredicateTransformer() {\n-        assertEquals(false, PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(Boolean.FALSE));\n-        assertEquals(true, PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(Boolean.TRUE));\n-    }\n-\n-    public void testAsPredicateTransformerEx1() {\n+    @Test public void testAsPredicateTransformer() {\n+        assertEquals(false, PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(false));\n+        assertEquals(true, PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(true));\n+    }\n+\n+    @Test public void testAsPredicateTransformerEx1() {\n         try {\n             PredicateUtils.asPredicate(null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testAsPredicateTransformerEx2() {\n-        try {\n-            PredicateUtils.asPredicate(TransformerUtils.nopTransformer()).evaluate(null);\n+\n+    @Test public void testAsPredicateTransformerEx2() {\n+        try {\n+            PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(null);\n         } catch (FunctorException ex) {\n             return;\n         }\n         fail();\n     }\n-    \n+\n     // invokerPredicate\n     //------------------------------------------------------------------\n \n-    public void testInvokerPredicate() {\n-        List list = new ArrayList();\n+    @Test public void testInvokerPredicate() {\n+        List<Object> list = new ArrayList<Object>();\n         assertEquals(true, PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(list));\n         list.add(new Object());\n         assertEquals(false, PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(list));\n     }\n \n-    public void testInvokerPredicateEx1() {\n+    @Test public void testInvokerPredicateEx1() {\n         try {\n             PredicateUtils.invokerPredicate(null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testInvokerPredicateEx2() {\n+\n+    @Test public void testInvokerPredicateEx2() {\n         try {\n             PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(null);\n         } catch (FunctorException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testInvokerPredicateEx3() {\n+\n+    @Test public void testInvokerPredicateEx3() {\n         try {\n             PredicateUtils.invokerPredicate(\"noSuchMethod\").evaluate(new Object());\n         } catch (FunctorException ex) {\n         }\n         fail();\n     }\n-    \n+\n     // invokerPredicate2\n     //------------------------------------------------------------------\n \n-    public void testInvokerPredicate2() {\n-        List list = new ArrayList();\n+    @Test public void testInvokerPredicate2() {\n+        List<String> list = new ArrayList<String>();\n         assertEquals(false, PredicateUtils.invokerPredicate(\n             \"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(list));\n         list.add(cString);\n             \"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(list));\n     }\n \n-    public void testInvokerPredicate2Ex1() {\n+    @Test public void testInvokerPredicate2Ex1() {\n         try {\n             PredicateUtils.invokerPredicate(null, null, null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testInvokerPredicate2Ex2() {\n+\n+    @Test public void testInvokerPredicate2Ex2() {\n         try {\n             PredicateUtils.invokerPredicate(\"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(null);\n         } catch (FunctorException ex) {\n         }\n         fail();\n     }\n-    \n-    public void testInvokerPredicate2Ex3() {\n+\n+    @Test public void testInvokerPredicate2Ex3() {\n         try {\n             PredicateUtils.invokerPredicate(\n                 \"noSuchMethod\", new Class[] {Object.class}, new Object[] {cString}).evaluate(new Object());\n         }\n         fail();\n     }\n-    \n+\n     // nullIsException\n     //------------------------------------------------------------------\n \n-    public void testNullIsExceptionPredicate() {\n-        assertEquals(true, PredicateUtils.nullIsExceptionPredicate(PredicateUtils.truePredicate()).evaluate(new Object()));\n-        try {\n-            PredicateUtils.nullIsExceptionPredicate(PredicateUtils.truePredicate()).evaluate(null);\n+    @Test public void testNullIsExceptionPredicate() {\n+        assertEquals(true, PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(new Object()));\n+        try {\n+            PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(null);\n         } catch (FunctorException ex) {\n             return;\n         }\n         fail();\n     }\n \n-    public void testNullIsExceptionPredicateEx1() {\n+    @Test public void testNullIsExceptionPredicateEx1() {\n         try {\n             PredicateUtils.nullIsExceptionPredicate(null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n+\n     // nullIsTrue\n     //------------------------------------------------------------------\n \n-    public void testNullIsTruePredicate() {\n-        assertEquals(true, PredicateUtils.nullIsTruePredicate(PredicateUtils.truePredicate()).evaluate(null));\n-        assertEquals(true, PredicateUtils.nullIsTruePredicate(PredicateUtils.truePredicate()).evaluate(new Object()));\n-        assertEquals(false, PredicateUtils.nullIsTruePredicate(PredicateUtils.falsePredicate()).evaluate(new Object()));\n-    }\n-\n-    public void testNullIsTruePredicateEx1() {\n+    @Test public void testNullIsTruePredicate() {\n+        assertEquals(true, PredicateUtils.nullIsTruePredicate(TruePredicate.truePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.nullIsTruePredicate(TruePredicate.truePredicate()).evaluate(new Object()));\n+        assertEquals(false, PredicateUtils.nullIsTruePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));\n+    }\n+\n+    @Test public void testNullIsTruePredicateEx1() {\n         try {\n             PredicateUtils.nullIsTruePredicate(null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n+\n     // nullIsFalse\n     //------------------------------------------------------------------\n \n-    public void testNullIsFalsePredicate() {\n-        assertEquals(false, PredicateUtils.nullIsFalsePredicate(PredicateUtils.truePredicate()).evaluate(null));\n-        assertEquals(true, PredicateUtils.nullIsFalsePredicate(PredicateUtils.truePredicate()).evaluate(new Object()));\n-        assertEquals(false, PredicateUtils.nullIsFalsePredicate(PredicateUtils.falsePredicate()).evaluate(new Object()));\n-    }\n-\n-    public void testNullIsFalsePredicateEx1() {\n+    @Test public void testNullIsFalsePredicate() {\n+        assertEquals(false, PredicateUtils.nullIsFalsePredicate(TruePredicate.truePredicate()).evaluate(null));\n+        assertEquals(true, PredicateUtils.nullIsFalsePredicate(TruePredicate.truePredicate()).evaluate(new Object()));\n+        assertEquals(false, PredicateUtils.nullIsFalsePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));\n+    }\n+\n+    @Test public void testNullIsFalsePredicateEx1() {\n         try {\n             PredicateUtils.nullIsFalsePredicate(null);\n         } catch (IllegalArgumentException ex) {\n         }\n         fail();\n     }\n-    \n+\n     // transformed\n     //------------------------------------------------------------------\n \n-    public void testTransformedPredicate() {\n+    @Test public void testTransformedPredicate() {\n         assertEquals(true, PredicateUtils.transformedPredicate(\n                 TransformerUtils.nopTransformer(),\n-                PredicateUtils.truePredicate()).evaluate(new Object()));\n-                \n-        Map map = new HashMap();\n+                TruePredicate.truePredicate()).evaluate(new Object()));\n+\n+        Map<Object, Object> map = new HashMap<Object, Object>();\n         map.put(Boolean.TRUE, \"Hello\");\n-        Transformer t = TransformerUtils.mapTransformer(map);\n-        Predicate p = PredicateUtils.equalPredicate(\"Hello\");\n+        Transformer<Object, Object> t = TransformerUtils.mapTransformer(map);\n+        Predicate<Object> p = EqualPredicate.<Object>equalPredicate(\"Hello\");\n         assertEquals(false, PredicateUtils.transformedPredicate(t, p).evaluate(null));\n         assertEquals(true, PredicateUtils.transformedPredicate(t, p).evaluate(Boolean.TRUE));\n         try {\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @Override\n+    protected Predicate<?> generatePredicate() {\n+        return truePredicate();  //Just return something to satisfy super class.\n+    }\n+\n }", "timestamp": 1252994293, "metainfo": ""}