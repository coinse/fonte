{"sha": "6318d9964cde84e1489f7fd68dcf74f87ca276d1", "log": "Rename TestSet to AbstractTestSet Rename TestSortedSet to AbstractTestSortedSet Javadoc and tidy   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/AbstractTestSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestSet.java,v 1.1 2003/10/02 22:48:41 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+/**\n+ * Abstract test class for {@link Set} methods and contracts.\n+ * <p>\n+ * Since {@link Set} doesn't stipulate much new behavior that isn't already\n+ * found in {@link Collection}, this class basically just adds tests for\n+ * {@link Set#equals()} and {@link Set#hashCode()} along with an updated\n+ * {@link #verify()} that ensures elements do not appear more than once in the\n+ * set.\n+ * <p>\n+ * To use, subclass and override the {@link #makeEmptySet()}\n+ * method.  You may have to override other protected methods if your\n+ * set is not modifiable, or if your set restricts what kinds of\n+ * elements may be added; see {@link TestCollection} for more details.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/02 22:48:41 $\n+ * \n+ * @author Paul Jack\n+ */\n+public abstract class AbstractTestSet extends AbstractTestCollection {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param name  name for test\n+     */\n+    public AbstractTestSet(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Provides additional verifications for sets.\n+     */\n+    protected void verify() {\n+        super.verify();\n+        \n+        assertEquals(\"Sets should be equal\", confirmed, collection);\n+        assertEquals(\"Sets should have equal hashCodes\", \n+                     confirmed.hashCode(), collection.hashCode());\n+        Collection set = makeConfirmedCollection();\n+        Iterator iterator = collection.iterator();\n+        while (iterator.hasNext()) {\n+            assertTrue(\"Set.iterator should only return unique elements\", \n+                       set.add(iterator.next()));\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an empty Set for use in modification testing.\n+     *\n+     * @return a confirmed empty collection\n+     */\n+    protected Collection makeConfirmedCollection() {\n+        return new HashSet();\n+    }\n+\n+    /**\n+     * Returns a full Set for use in modification testing.\n+     *\n+     * @return a confirmed full collection\n+     */\n+    protected Collection makeConfirmedFullCollection() {\n+        Collection set = makeConfirmedCollection();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+\n+    /**\n+     * Makes an empty set.  The returned set should have no elements.\n+     *\n+     * @return an empty set\n+     */\n+    protected abstract Set makeEmptySet();\n+\n+    /**\n+     * Makes a full set by first creating an empty set and then adding\n+     * all the elements returned by {@link #getFullElements()}.\n+     *\n+     * Override if your set does not support the add operation.\n+     *\n+     * @return a full set\n+     */\n+    protected Set makeFullSet() {\n+        Set set = makeEmptySet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+\n+    /**\n+     * Makes an empty collection by invoking {@link #makeEmptySet()}.  \n+     *\n+     * @return an empty collection\n+     */\n+    protected final Collection makeCollection() {\n+        return makeEmptySet();\n+    }\n+\n+    /**\n+     * Makes a full collection by invoking {@link #makeFullSet()}.\n+     *\n+     * @return a full collection\n+     */\n+    protected final Collection makeFullCollection() {\n+        return makeFullSet();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Return the {@link TestCollection#collection} fixture, but cast as a Set.  \n+     */\n+    protected Set getSet() {\n+        return (Set)collection;\n+    }\n+\n+    /**\n+     * Return the {@link TestCollection#confirmed} fixture, but cast as a Set.\n+     */\n+    protected Set getConfirmedSet() {\n+        return (Set)confirmed;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests {@link Set#equals(Object)}.\n+     */\n+    public void testSetEquals() {\n+        resetEmpty();\n+        assertEquals(\"Empty sets should be equal\", \n+                     getSet(), getConfirmedSet());\n+        verify();\n+\n+        Collection set2 = makeConfirmedCollection();\n+        set2.add(\"foo\");\n+        assertTrue(\"Empty set shouldn't equal nonempty set\", \n+                   !getSet().equals(set2));\n+\n+        resetFull();\n+        assertEquals(\"Full sets should be equal\", getSet(), getConfirmedSet());\n+        verify();\n+\n+        set2.clear();\n+        set2.addAll(Arrays.asList(getOtherElements()));\n+        assertTrue(\"Sets with different contents shouldn't be equal\", \n+                   !getSet().equals(set2));\n+    }\n+\n+    /**\n+     * Tests {@link Set#hashCode()}.\n+     */\n+    public void testSetHashCode() {\n+        resetEmpty();\n+        assertEquals(\"Empty sets have equal hashCodes\", \n+                     getSet().hashCode(), getConfirmedSet().hashCode());\n+\n+        resetFull();\n+        assertEquals(\"Equal sets have equal hashCodes\", \n+                     getSet().hashCode(), getConfirmedSet().hashCode());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/AbstractTestSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestSortedSet.java,v 1.1 2003/10/02 22:48:41 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+/**\n+ * Abstract test class for {@link SortedSet} methods and contracts.\n+ * <p>\n+ * To use, subclass and override the {@link #makeEmptySet()}\n+ * method.  You may have to override other protected methods if your\n+ * set is not modifiable, or if your set restricts what kinds of\n+ * elements may be added; see {@link TestCollection} for more details.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/02 22:48:41 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Dieter Wimberger\n+ */\n+public abstract class AbstractTestSortedSet extends AbstractTestSet {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param name  name for test\n+     */\n+    public AbstractTestSortedSet(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Verification extension, will check the order of elements,\n+     * the sets should already be verified equal.\n+     */\n+    protected void verify() {\n+        super.verify();\n+        \n+        //Sorted sets should return in-order iterators by contract\n+        Iterator colliter = collection.iterator();\n+        Iterator confiter = confirmed.iterator();\n+        while (colliter.hasNext()) {\n+            assertEquals(\"Element appears to be out of order.\", colliter.next(), confiter.next());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Overridden because SortedSets don't allow null elements (normally).\n+     * @return false\n+     */\n+    protected boolean isNullSupported() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an empty {@link TreeSet} for use in modification testing.\n+     *\n+     * @return a confirmed empty collection\n+     */\n+    protected Collection makeConfirmedCollection() {\n+        return new TreeSet();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Return the {@link TestCollection#confirmed} fixture, but cast as a\n+     * SortedSet.\n+     */\n+    protected SortedSet getConfirmedSortedSet() {\n+        return (SortedSet) confirmed;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    protected Object[] getFullNonNullElements() {\n+        Object[] elements = new Object[30];\n+\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = new Integer(i + i + 1);\n+        }\n+        return elements;\n+    }\n+\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    protected Object[] getOtherNonNullElements() {\n+        Object[] elements = new Object[30];\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = new Integer(i + i + 2);\n+        }\n+        return elements;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Bulk test {@link SortedSet#subSet(Object, Object)}.  This method runs through all of\n+     * the tests in {@link TestSortedSet}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the set and the other collection views are still valid.\n+     *\n+     * @return a {@link TestSet} instance for testing a subset.\n+     */\n+    public BulkTest bulkTestSortedSetSubSet() {\n+        int length = getFullElements().length;\n+\n+        int lobound = length / 3;\n+        int hibound = lobound * 2;\n+        return new TestSortedSetSubSet(lobound, hibound);\n+\n+    }\n+\n+    /**\n+     * Bulk test {@link SortedSet#headSet(Object)}.  This method runs through all of\n+     * the tests in {@link TestSortedSet}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the set and the other collection views are still valid.\n+     *\n+     * @return a {@link TestSet} instance for testing a headset.\n+     */\n+    public BulkTest bulkTestSortedSetHeadSet() {\n+        int length = getFullElements().length;\n+\n+        int lobound = length / 3;\n+        int hibound = lobound * 2;\n+        return new TestSortedSetSubSet(hibound, true);\n+\n+    }\n+\n+    /**\n+     * Bulk test {@link SortedSet#tailSet(Object)}.  This method runs through all of\n+     * the tests in {@link TestSortedSet}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the set and the other collection views are still valid.\n+     *\n+     * @return a {@link TestSet} instance for testing a tailset.\n+     */\n+    public BulkTest bulkTestSortedSetTailSet() {\n+        int length = getFullElements().length;\n+        int lobound = length / 3;\n+        return new TestSortedSetSubSet(lobound, false);\n+    }\n+\n+    class TestSortedSetSubSet extends AbstractTestSortedSet {\n+\n+        private int m_Type;\n+        private int m_LowBound;\n+        private int m_HighBound;\n+        private Object[] m_FullElements;\n+        private Object[] m_OtherElements;\n+\n+        public TestSortedSetSubSet(int bound, boolean head) {\n+            super(\"TestSortedSetSubSet\");\n+            if (head) {\n+                //System.out.println(\"HEADSET\");\n+                m_Type = TYPE_HEADSET;\n+                m_HighBound = bound;\n+                m_FullElements = new Object[bound];\n+                System.arraycopy(AbstractTestSortedSet.this.getFullElements(), 0, m_FullElements, 0, bound);\n+                m_OtherElements = new Object[bound - 1];\n+                System.arraycopy(//src src_pos dst dst_pos length\n+                AbstractTestSortedSet.this.getOtherElements(), 0, m_OtherElements, 0, bound - 1);\n+                //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+                //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+            } else {\n+                //System.out.println(\"TAILSET\");\n+                m_Type = TYPE_TAILSET;\n+                m_LowBound = bound;\n+                Object[] allelements = AbstractTestSortedSet.this.getFullElements();\n+                //System.out.println(\"bound = \"+bound +\"::length=\"+allelements.length);\n+                m_FullElements = new Object[allelements.length - bound];\n+                System.arraycopy(allelements, bound, m_FullElements, 0, allelements.length - bound);\n+                m_OtherElements = new Object[allelements.length - bound - 1];\n+                System.arraycopy(//src src_pos dst dst_pos length\n+                AbstractTestSortedSet.this.getOtherElements(), bound, m_OtherElements, 0, allelements.length - bound - 1);\n+                //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+                //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+                //resetFull();\n+                //System.out.println(collection);\n+                //System.out.println(confirmed);\n+\n+            }\n+\n+        } //type\n+\n+        public TestSortedSetSubSet(int lobound, int hibound) {\n+            super(\"TestSortedSetSubSet\");\n+            //System.out.println(\"SUBSET\");\n+            m_Type = TYPE_SUBSET;\n+            m_LowBound = lobound;\n+            m_HighBound = hibound;\n+            int length = hibound - lobound;\n+            //System.out.println(\"Low=\" + lobound + \"::High=\" + hibound + \"::Length=\" + length);\n+            m_FullElements = new Object[length];\n+            System.arraycopy(AbstractTestSortedSet.this.getFullElements(), lobound, m_FullElements, 0, length);\n+            m_OtherElements = new Object[length - 1];\n+            System.arraycopy(//src src_pos dst dst_pos length\n+            AbstractTestSortedSet.this.getOtherElements(), lobound, m_OtherElements, 0, length - 1);\n+\n+            //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+            //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+\n+        } //TestSortedSetSubSet\n+\n+        protected boolean isNullSupported() {\n+            return AbstractTestSortedSet.this.isNullSupported();\n+        } //useNullValue\n+\n+        protected Object[] getFullElements() {\n+            //System.out.println(\"getFullElements()\");\n+            return m_FullElements;\n+        }\n+\n+        protected Object[] getOtherElements() {\n+            return m_OtherElements;\n+        }\n+\n+        private SortedSet getSubSet(SortedSet set) {\n+            Object[] elements = AbstractTestSortedSet.this.getFullElements();\n+            switch (m_Type) {\n+                case TYPE_SUBSET :\n+                    return set.subSet(elements[m_LowBound], elements[m_HighBound]);\n+                case TYPE_HEADSET :\n+                    return set.headSet(elements[m_HighBound]);\n+                case TYPE_TAILSET :\n+                    return set.tailSet(elements[m_LowBound]);\n+                default :\n+                    return null;\n+            }\n+        } //getSubSet\n+\n+        protected Set makeEmptySet() {\n+            SortedSet s = (SortedSet) AbstractTestSortedSet.this.makeFullSet();\n+            s = getSubSet(s);\n+            s.clear();\n+            return s;\n+        } //makeEmptySet\n+\n+        protected Set makeFullSet() {\n+            SortedSet s = (SortedSet) AbstractTestSortedSet.this.makeFullCollection();\n+            return getSubSet(s);\n+        } //makeFullSet\n+\n+        protected void resetFull() {\n+            AbstractTestSortedSet.this.resetFull();\n+            TestSortedSetSubSet.this.confirmed = getSubSet((SortedSet) AbstractTestSortedSet.this.confirmed);\n+            TestSortedSetSubSet.this.collection = getSubSet((SortedSet) AbstractTestSortedSet.this.collection);\n+        }\n+\n+        protected void resetEmpty() {\n+            TestSortedSetSubSet.this.resetFull();\n+            TestSortedSetSubSet.this.confirmed.clear();\n+            TestSortedSetSubSet.this.collection.clear();\n+        }\n+\n+        public BulkTest bulkTestSortedSetSubSet() {\n+            //Override returning null to prevent endless\n+            //loop of bulk tests\n+            return null;\n+        } //bulkTestSortedSetSubSet\n+\n+        public BulkTest bulkTestSortedSetHeadSet() {\n+            return null;\n+        }\n+\n+        public BulkTest bulkTestSortedSetTailSet() {\n+            return null;\n+        }\n+\n+        static final int TYPE_SUBSET = 0;\n+        static final int TYPE_TAILSET = 1;\n+        static final int TYPE_HEADSET = 2;\n+\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestMap.java\n+++ b/src/test/org/apache/commons/collections/TestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.29 2003/10/02 22:14:28 scolebourne Exp $\n- * $Revision: 1.29 $\n- * $Date: 2003/10/02 22:14:28 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.30 2003/10/02 22:48:40 scolebourne Exp $\n+ * $Revision: 1.30 $\n+ * $Date: 2003/10/02 22:48:40 $\n  *\n  * ====================================================================\n  *\n  * @author Michael Smith\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n- * @version $Revision: 1.29 $ $Date: 2003/10/02 22:14:28 $\n+ * @version $Revision: 1.30 $ $Date: 2003/10/02 22:48:40 $\n  */\n public abstract class TestMap extends AbstractTestObject {\n \n         return new TestMapEntrySet();\n     }\n \n-    class TestMapEntrySet extends TestSet {\n+    class TestMapEntrySet extends AbstractTestSet {\n         public TestMapEntrySet() {\n             super(\"\");\n         }\n         return new TestMapKeySet();\n     }\n \n-    class TestMapKeySet extends TestSet {\n+    class TestMapKeySet extends AbstractTestSet {\n         public TestMapKeySet() {\n             super(\"\");\n         }\n--- a/src/test/org/apache/commons/collections/TestSetUtils.java\n+++ b/src/test/org/apache/commons/collections/TestSetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.9 2003/09/20 17:02:03 scolebourne Exp $\n- * $Revision: 1.9 $\n- * $Date: 2003/09/20 17:02:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.10 2003/10/02 22:48:41 scolebourne Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2003/10/02 22:48:41 $\n  *\n  * ====================================================================\n  *\n             }\n \n             public BulkTest bulkTestAll() {\n-                return new TestSet(\"\") {\n+                return new AbstractTestSet(\"\") {\n                     public Set makeEmptySet() {\n                         return (Set)typedCollection();\n                     }\n--- a/src/test/org/apache/commons/collections/decorators/TestOrderedSet.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestOrderedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestOrderedSet.java,v 1.2 2003/09/20 16:57:47 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestOrderedSet.java,v 1.3 2003/10/02 22:48:41 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestSet;\n+import org.apache.commons.collections.AbstractTestSet;\n \n /**\n  * Extension of {@link TestSet} for exercising the {@link OrderedSet}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/20 16:57:47 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:48:41 $\n  * \n  * @author Henning P. Schmiedehausen\n  * @author Stephen Colebourne\n  */\n-public class TestOrderedSet extends TestSet {\n+public class TestOrderedSet extends AbstractTestSet {\n \n     public TestOrderedSet(String testName) {\n         super(testName);\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    public Set makeEmptySet() {\n+    protected Set makeEmptySet() {\n         return OrderedSet.decorate(new HashSet());\n     }\n \n-    public Set setupSet() {\n+    protected Set setupSet() {\n         Set set = makeEmptySet();\n \n         for (int i = 0; i < 10; i++) {\n--- a/src/test/org/apache/commons/collections/decorators/TestPredicatedSet.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedSet.java,v 1.2 2003/09/20 17:05:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedSet.java,v 1.3 2003/10/02 22:48:41 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.PredicateUtils;\n-import org.apache.commons.collections.TestSet;\n+import org.apache.commons.collections.AbstractTestSet;\n \n /**\n  * Extension of {@link TestSet} for exercising the \n  * {@link PredicatedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/20 17:05:36 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:48:41 $\n  * \n  * @author Phil Steitz\n  */\n-public class TestPredicatedSet extends TestSet{\n+public class TestPredicatedSet extends AbstractTestSet{\n     \n     public TestPredicatedSet(String testName) {\n         super(testName);\n         return PredicatedSet.decorate(set, predicate);\n     }\n     \n-    public Set makeEmptySet() {\n+    protected Set makeEmptySet() {\n         return decorateSet(new HashSet(), truePredicate);\n     }\n     \n     \n //--------------------------------------------------------------------   \n     \n-     protected Predicate testPredicate =  \n+    protected Predicate testPredicate =  \n         new Predicate() {\n             public boolean evaluate(Object o) {\n                 return o instanceof String;\n             }\n         };      \n     \n-    public Set makeTestSet() {\n+    protected Set makeTestSet() {\n         return decorateSet(new HashSet(), testPredicate);\n     }\n     \n--- a/src/test/org/apache/commons/collections/decorators/TestTransformedSet.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestTransformedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedSet.java,v 1.2 2003/08/31 17:28:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedSet.java,v 1.3 2003/10/02 22:48:41 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestSet;\n+import org.apache.commons.collections.AbstractTestSet;\n \n /**\n  * Extension of {@link TestSet} for exercising the {@link TransformedSet}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:42 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:48:41 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestTransformedSet extends TestSet {\n+public class TestTransformedSet extends AbstractTestSet {\n     \n     public TestTransformedSet(String testName) {\n         super(testName);\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    public Collection makeConfirmedCollection() {\n+    protected Collection makeConfirmedCollection() {\n         return new HashSet();\n     }\n \n         return set;\n     }\n     \n-    public Set makeEmptySet() {\n+    protected Set makeEmptySet() {\n         return TransformedSet.decorate(new HashSet(), TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n \n--- a/src/test/org/apache/commons/collections/decorators/TestTransformedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestTransformedSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedSortedSet.java,v 1.3 2003/08/31 17:28:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedSortedSet.java,v 1.4 2003/10/02 22:48:41 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestSortedSet;\n+import org.apache.commons.collections.AbstractTestSortedSet;\n \n /**\n  * Extension of {@link TestSortedSet} for exercising the {@link TransformedSortedSet}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:42 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:48:41 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestTransformedSortedSet extends TestSortedSet {\n+public class TestTransformedSortedSet extends AbstractTestSortedSet {\n     \n     public TestTransformedSortedSet(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/observed/TestObservableSet.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSet.java,v 1.1 2003/09/21 20:01:53 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSet.java,v 1.2 2003/10/02 22:48:40 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestSet;\n+import org.apache.commons.collections.AbstractTestSet;\n \n /**\n  * Extension of {@link TestSet} for exercising the\n  * {@link ObservedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/21 20:01:53 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/02 22:48:40 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestObservableSet extends TestSet implements ObservedTestHelper.ObservedFactory {\n+public class TestObservableSet extends AbstractTestSet implements ObservedTestHelper.ObservedFactory {\n     \n     public TestObservableSet(String testName) {\n         super(testName);\n     }\n \n     //-----------------------------------------------------------------------\n-    public Set makeEmptySet() {\n+    protected Set makeEmptySet() {\n         return ObservableSet.decorate(new HashSet(), ObservedTestHelper.LISTENER);\n     }\n \n--- a/src/test/org/apache/commons/collections/observed/TestObservableSortedSet.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedSet.java,v 1.2 2003/09/24 08:23:56 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedSet.java,v 1.3 2003/10/02 22:48:40 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestSortedSet;\n+import org.apache.commons.collections.AbstractTestSortedSet;\n \n /**\n  * Extension of {@link TestSortedSet} for exercising the\n  * {@link ObservedSortedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/24 08:23:56 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:48:40 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestObservableSortedSet extends TestSortedSet implements ObservedTestHelper.ObservedFactory {\n+public class TestObservableSortedSet extends AbstractTestSortedSet implements ObservedTestHelper.ObservedFactory {\n     \n     public TestObservableSortedSet(String testName) {\n         super(testName);\n     }\n \n     //-----------------------------------------------------------------------\n-    public Set makeEmptySet() {\n+    protected Set makeEmptySet() {\n         return ObservableSortedSet.decorate(new TreeSet(), ObservedTestHelper.LISTENER);\n     }\n ", "timestamp": 1065134921, "metainfo": ""}