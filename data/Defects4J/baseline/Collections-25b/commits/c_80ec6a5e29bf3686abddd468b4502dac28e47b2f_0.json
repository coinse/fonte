{"sha": "80ec6a5e29bf3686abddd468b4502dac28e47b2f", "log": "Document some unchecked casts  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/main/java/org/apache/commons/collections/BagUtils.java\n      * @param <E> the element type\n      * @return an empty Bag\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings(\"unchecked\") // OK, empty bag is compatible with any type\n     public static <E> Bag<E> emptyBag() {\n         return (Bag<E>) EMPTY_BAG;        \n     }\n      * @param <E> the element type\n      * @return an empty sorted Bag\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings(\"unchecked\") // OK, empty bag is compatible with any type\n     public static <E> SortedBag<E> emptySortedBag() {\n         return (SortedBag<E>) EMPTY_SORTED_BAG;        \n     }\n--- a/src/main/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/main/java/org/apache/commons/collections/BufferUtils.java\n      * @param <E> the type of the elements in the buffer\n      * @return an empty {@link Buffer}\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings(\"unchecked\") // OK, empty buffer is compatible with any type\n     public static <E> Buffer<E> emptyBuffer() {\n         return (Buffer<E>) EMPTY_BUFFER;\n     }\n--- a/src/main/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/IteratorUtils.java\n      * @throws NullPointerException if arrayClass is null\n      * @throws ClassCastException if the arrayClass is invalid\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static <E> E[] toArray(final Iterator<? extends E> iterator, final Class<E> arrayClass) {\n         if (iterator == null) {\n             throw new NullPointerException(\"Iterator must not be null\");\n             throw new NullPointerException(\"Array class must not be null\");\n         }\n         final List<E> list = toList(iterator, 100);\n-        return list.toArray((E[]) Array.newInstance(arrayClass, list.size()));\n+        @SuppressWarnings(\"unchecked\") // as per Javadoc, will throw CCE if class is wrong\n+        final E[] array = (E[]) Array.newInstance(arrayClass, list.size());\n+        return list.toArray(array);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections/MapUtils.java\n      * @throws ClassCastException if the array contents is mixed\n      * @since 3.2\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings(\"unchecked\") // As per Javadoc throws CCE for invalid array contents\n     public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array) {\n         map.size();  // force NPE\n         if (array == null || array.length == 0) {\n         final Object obj = array[0];\n         if (obj instanceof Map.Entry) {\n             for (final Object element : array) {\n+                // cast ok here, type is checked above\n                 final Map.Entry<K, V> entry = (Map.Entry<K, V>) element;\n                 map.put(entry.getKey(), entry.getValue());\n             }\n         } else if (obj instanceof KeyValue) {\n             for (final Object element : array) {\n+                // cast ok here, type is checked above\n                 final KeyValue<K, V> keyval = (KeyValue<K, V>) element;\n                 map.put(keyval.getKey(), keyval.getValue());\n             }\n                 if (sub == null || sub.length < 2) {\n                     throw new IllegalArgumentException(\"Invalid array element: \" + i);\n                 }\n+                // these casts can fail if array has incorrect types\n                 map.put((K) sub[0], (V) sub[1]);\n             }\n         } else {\n             for (int i = 0; i < array.length - 1;) {\n+                // these casts can fail if array has incorrect types\n                 map.put((K) array[i++], (V) array[i++]);\n             }\n         }\n--- a/src/main/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/main/java/org/apache/commons/collections/SetUtils.java\n      * @param <E> the element type\n      * @return an empty sorted Set\n      */\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings(\"unchecked\") // empty set is OK for any type\n     public static <E> SortedSet<E> emptySortedSet() {\n         return (SortedSet<E>) EMPTY_SORTED_SET;\n     }", "timestamp": 1358731688, "metainfo": ""}