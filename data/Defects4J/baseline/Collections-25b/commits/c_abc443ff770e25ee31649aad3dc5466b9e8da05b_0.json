{"sha": "abc443ff770e25ee31649aad3dc5466b9e8da05b", "log": "Add ObservedBuffer   ", "commit": "\n--- a/src/java/org/apache/commons/collections/observed/ModificationEventType.java\n+++ b/src/java/org/apache/commons/collections/observed/ModificationEventType.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationEventType.java,v 1.2 2003/09/06 18:59:09 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationEventType.java,v 1.3 2003/09/07 16:50:59 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * They may negated using the bitwise NOT, <code>~</code>.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/06 18:59:09 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/07 16:50:59 $\n  * \n  * @author Stephen Colebourne\n  */\n     public static final int REMOVE_INDEXED =0x00000200;\n     /** The method remove(Object,int) */\n     public static final int REMOVE_NCOPIES =0x00000400;\n+    /** The method remove() */\n+    public static final int REMOVE_NEXT    =0x00000800;\n     /** The method iterator.remove() */\n-    public static final int REMOVE_ITERATED=0x00000800;\n+    public static final int REMOVE_ITERATED=0x00001000;\n     \n     /** The method removeAll(Collection) */\n-    public static final int REMOVE_ALL =    0x00001000;\n+    public static final int REMOVE_ALL =    0x00002000;\n     /** The method retainAll(Collection) */\n-    public static final int RETAIN_ALL =    0x00002000;\n+    public static final int RETAIN_ALL =    0x00004000;\n     /** The method clear() */\n-    public static final int CLEAR =         0x00004000;\n+    public static final int CLEAR =         0x00008000;\n     \n     /** The method set(int,Object) */\n     public static final int SET_INDEXED =   0x00010000;\n     /** All methods that change without structure modification */\n     public static final int GROUP_CHANGE = SET_INDEXED | SET_ITERATED;\n     /** All remove methods */\n-    public static final int GROUP_REMOVE = REMOVE | REMOVE_NCOPIES | REMOVE_ITERATED | REMOVE_INDEXED | REMOVE_ALL;\n+    public static final int GROUP_REMOVE = REMOVE | REMOVE_INDEXED | REMOVE_NCOPIES | REMOVE_ITERATED | REMOVE_NEXT | REMOVE_ALL;\n     /** All retain methods */\n     public static final int GROUP_RETAIN = RETAIN_ALL;\n     /** All clear methods */\n     public static final int GROUP_NCOPIES = ADD_NCOPIES | REMOVE_NCOPIES;\n     /** All iterated methods */\n     public static final int GROUP_ITERATED = ADD_ITERATED | REMOVE_ITERATED | SET_ITERATED;\n+    /** All 'next' methods */\n+    public static final int GROUP_NEXT = REMOVE_NEXT;\n     /** All bulk methods (xxxAll, clear) */\n     public static final int GROUP_BULK =  ADD_ALL | ADD_ALL_INDEXED | REMOVE_ALL | RETAIN_ALL | CLEAR;\n     /** All methods that modify the structure */\n     public static final int GROUP_FROM_SET = GROUP_FROM_COLLECTION;\n     /** All methods sent by a List */\n     public static final int GROUP_FROM_LIST = GROUP_FROM_COLLECTION | ADD_INDEXED | ADD_ALL_INDEXED | REMOVE_INDEXED | SET_INDEXED;\n-    /** All methods sent by a List */\n+    /** All methods sent by a Bag */\n     public static final int GROUP_FROM_BAG = GROUP_FROM_COLLECTION | ADD_NCOPIES | REMOVE_NCOPIES;\n+    /** All methods sent by a Buffer */\n+    public static final int GROUP_FROM_BUFFER = GROUP_FROM_COLLECTION | REMOVE_NEXT;\n \n     /** No methods */\n     public static final int GROUP_NONE = 0x00000000;\n             return \"RemoveIndexed\";\n             case REMOVE_ITERATED:\n             return \"RemoveIterated\";\n+            case REMOVE_NEXT:\n+            return \"RemoveNext\";\n             case REMOVE_ALL:\n             return \"RemoveAll\";\n             case RETAIN_ALL:\n--- a/src/java/org/apache/commons/collections/observed/ModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/observed/ModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationHandler.java,v 1.4 2003/09/07 10:33:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationHandler.java,v 1.5 2003/09/07 16:50:59 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * later collections release.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/09/07 10:33:32 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/07 16:50:59 $\n  * \n  * @author Stephen Colebourne\n  */\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Store data and send event before remove() is called on a Buffer.\n+     * <p>\n+     * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n+     * \n+     * @return true to process modification\n+     */\n+    protected boolean preRemoveNext() {\n+        return preEvent(ModificationEventType.REMOVE_NEXT, -1, null, 1, null, null, -1);\n+    }\n+\n+    /**\n+     * Send an event after remove() is called on a Buffer.\n+     * <p>\n+     * This implementation forwards to {@link #postEvent(boolean, int, int, Object, int, Object, Object, int)}.\n+     * \n+     * @param removedValue  the previous value at this index\n+     */\n+    protected void postRemoveNext(Object removedValue) {\n+        // assume collection changed\n+        postEvent(true, ModificationEventType.REMOVE_NEXT, -1, removedValue, 1, removedValue, null, -1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Store data and send event before remove(obj) is called on an Iterator.\n      * <p>\n      * This implementation forwards to {@link #preEvent(int, int, Object, int, Object, Object, int)}.\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/observed/ObservedBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservedBuffer.java,v 1.1 2003/09/07 16:50:59 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed;\n+\n+import org.apache.commons.collections.Buffer;\n+\n+/**\n+ * Decorates a <code>Buffer</code> implementation to observe modifications.\n+ * <p>\n+ * Each modifying method call made on this <code>Buffer</code> is forwarded to a\n+ * {@link ModificationHandler}.\n+ * The handler manages the event, notifying listeners and optionally vetoing changes.\n+ * The default handler is {@link StandardModificationHandler}.\n+ * See this class for details of configuration available.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/07 16:50:59 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class ObservedBuffer extends ObservedCollection implements Buffer {\n+    \n+    // Factories\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Factory method to create an observable buffer.\n+     * <p>\n+     * A {@link StandardModificationHandler} will be created.\n+     * This can be accessed by {@link #getHandler()} to add listeners.\n+     *\n+     * @param buffer  the buffer to decorate, must not be null\n+     * @return the observed Buffer\n+     * @throws IllegalArgumentException if the buffer is null\n+     */\n+    public static ObservedBuffer decorate(final Buffer buffer) {\n+        return new ObservedBuffer(buffer, null);\n+    }\n+\n+    /**\n+     * Factory method to create an observable buffer using a listener or a handler.\n+     * <p>\n+     * A lot of functionality is available through this method.\n+     * If you don't need the extra functionality, simply implement the\n+     * {@link org.apache.commons.collections.observed.standard.StandardModificationListener}\n+     * interface and pass it in as the second parameter.\n+     * <p>\n+     * Internally, an <code>ObservedBuffer</code> relies on a {@link ModificationHandler}.\n+     * The handler receives all the events and processes them, typically by\n+     * calling listeners. Different handler implementations can be plugged in\n+     * to provide a flexible event system.\n+     * <p>\n+     * The handler implementation is determined by the listener parameter via\n+     * the registered factories. The listener may be a manually configured \n+     * <code>ModificationHandler</code> instance.\n+     * <p>\n+     * The listener is defined as an Object for maximum flexibility.\n+     * It does not have to be a listener in the classic JavaBean sense.\n+     * It is entirely up to the factory and handler as to how the parameter\n+     * is interpretted. An IllegalArgumentException is thrown if no suitable\n+     * handler can be found for this listener.\n+     * <p>\n+     * A <code>null</code> listener will create a {@link StandardModificationHandler}.\n+     *\n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param listener  buffer listener, may be null\n+     * @return the observed buffer\n+     * @throws IllegalArgumentException if the buffer is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n+     */\n+    public static ObservedBuffer decorate(\n+            final Buffer buffer,\n+            final Object listener) {\n+        \n+        if (buffer == null) {\n+            throw new IllegalArgumentException(\"Buffer must not be null\");\n+        }\n+        return new ObservedBuffer(buffer, listener);\n+    }\n+\n+    // Constructors\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param listener  the listener, may be null\n+     * @throws IllegalArgumentException if the buffer is null\n+     */\n+    protected ObservedBuffer(\n+            final Buffer buffer,\n+            final Object listener) {\n+        super(buffer, listener);\n+    }\n+    \n+    /**\n+     * Typecast the collection to a Buffer.\n+     * \n+     * @return the wrapped collection as a Buffer\n+     */\n+    private Buffer getBuffer() {\n+        return (Buffer) getCollection();\n+    }\n+\n+    // Buffer API\n+    //-----------------------------------------------------------------------\n+    public Object get() {\n+        return getBuffer().get();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object remove() {\n+        Object result = null;\n+        if (handler.preRemoveNext()) {\n+            result = getBuffer().remove();\n+            handler.postRemoveNext(result);\n+        }\n+        return result;\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n+++ b/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.5 2003/09/07 10:33:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.6 2003/09/07 16:50:59 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link ObservedCollection} implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/09/07 10:33:33 $\n+ * @version $Revision: 1.6 $ $Date: 2003/09/07 16:50:59 $\n  * \n  * @author Stephen Colebourne\n  */\n         bulkTestObservedCollection(factory);\n         doTestAddNCopies(factory);\n         doTestRemoveNCopies(factory);\n+    }\n+    \n+    public static void bulkTestObservedBuffer(ObservedFactory factory) {\n+        Assert.assertTrue(factory.createObservedCollection() instanceof ObservedBuffer);\n+        Assert.assertTrue(factory.createObservedCollection(LISTENER) instanceof ObservedBuffer);\n+        Assert.assertTrue(factory.createObservedCollection(new StandardModificationHandler()) instanceof ObservedBuffer);\n+        \n+        bulkTestObservedCollection(factory);\n+        doTestRemoveNext(factory);\n     }\n     \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n+    public static void doTestRemoveNext(ObservedFactory factory) {\n+        ObservedBuffer coll = (ObservedBuffer) factory.createObservedCollection(LISTENER);\n+        \n+        coll.add(SIX);\n+        coll.add(SEVEN);\n+        LISTENER.preEvent = null;\n+        LISTENER.postEvent = null;\n+        Assert.assertEquals(2, coll.size());\n+        coll.remove();\n+        Assert.assertEquals(1, coll.size());\n+        // pre\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.REMOVE_NEXT, LISTENER.preEvent.getType());\n+        Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n+        Assert.assertSame(null, LISTENER.preEvent.getChangeObject());\n+        Assert.assertEquals(0, LISTENER.preEvent.getChangeCollection().size());\n+        Assert.assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n+        Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n+        Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n+        // post\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n+        Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n+        Assert.assertEquals(ModificationEventType.REMOVE_NEXT, LISTENER.postEvent.getType());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n+        Assert.assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n+        Assert.assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n+        Assert.assertEquals(2, LISTENER.postEvent.getPreSize());\n+        Assert.assertEquals(1, LISTENER.postEvent.getPostSize());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getSizeChange());\n+        Assert.assertEquals(true, LISTENER.postEvent.isSizeChanged());\n+\n+        Assert.assertEquals(false, LISTENER.postEvent.isRange());\n+        Assert.assertEquals(-1, LISTENER.postEvent.getRangeOffset());\n+        Assert.assertEquals(null, LISTENER.postEvent.getRange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeAdd());\n+        Assert.assertEquals(true, LISTENER.postEvent.isTypeReduce());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n+        Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public static void doTestRemoveIterated(ObservedFactory factory) {\n         ObservedCollection coll = factory.createObservedCollection(LISTENER);\n         \n--- a/src/test/org/apache/commons/collections/observed/TestAll.java\n+++ b/src/test/org/apache/commons/collections/observed/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestAll.java,v 1.1 2003/09/03 23:54:25 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestAll.java,v 1.2 2003/09/07 16:50:59 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections observed tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:25 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/07 16:50:59 $\n  * \n  * @author Stephen Colebourne\n  */\n         TestSuite suite = new TestSuite();\n         \n         suite.addTest(TestObservedBag.suite());\n+        suite.addTest(TestObservedBuffer.suite());\n         suite.addTest(TestObservedCollection.suite());\n         suite.addTest(TestObservedList.suite());\n         suite.addTest(TestObservedSet.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/observed/TestObservedBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservedBuffer.java,v 1.1 2003/09/07 16:50:59 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.ArrayStack;\n+import org.apache.commons.collections.TestCollection;\n+\n+/**\n+ * Extension of {@link TestCollection} for exercising the\n+ * {@link ObservedBuffer} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/07 16:50:59 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestObservedBuffer extends TestCollection implements ObservedTestHelper.ObservedFactory {\n+    \n+    public TestObservedBuffer(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestObservedBuffer.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestObservedBuffer.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Collection makeConfirmedCollection() {\n+        return new ArrayStack();\n+    }\n+\n+    protected Collection makeConfirmedFullCollection() {\n+        ArrayStack stack = new ArrayStack();\n+        stack.addAll(Arrays.asList(getFullElements()));\n+        return stack;\n+    }\n+    \n+    public Collection makeCollection() {\n+        return ObservedBuffer.decorate(new ArrayStack(), ObservedTestHelper.LISTENER);\n+    }\n+\n+    protected Collection makeFullCollection() {\n+        List stack = new ArrayStack();\n+        stack.addAll(Arrays.asList(getFullElements()));\n+        return ObservedBuffer.decorate(stack, ObservedTestHelper.LISTENER);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testObservedBuffer() {\n+        ObservedTestHelper.bulkTestObservedBuffer(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public ObservedCollection createObservedCollection() {\n+        return ObservedBuffer.decorate(new ArrayStack());\n+    }\n+\n+    public ObservedCollection createObservedCollection(Object listener) {\n+        return ObservedBuffer.decorate(new ArrayStack(), listener);\n+    }\n+\n+}", "timestamp": 1062953459, "metainfo": ""}