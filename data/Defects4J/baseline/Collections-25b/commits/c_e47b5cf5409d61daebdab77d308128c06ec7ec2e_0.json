{"sha": "e47b5cf5409d61daebdab77d308128c06ec7ec2e", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r643590 | skestle | 2008-04-01 14:36:59 -0700 (Tue, 01 Apr 2008) | 1 line          Added Equator interface for COLLECTIONS-242.     ------------------------------------------------------------------------   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/Equator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable\n+ * law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\"\n+ * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing permissions and limitations under the License.\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import org.apache.commons.collections.map.HashedMap;\n+\n+/**\n+ * <p>\n+ * An equation function, which determines equality between objects of type T.\n+ * </p>\n+ * <p>\n+ * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to\n+ * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.\n+ * </p>\n+ * \n+ * @param <T> the types of object this {@link Equator} can evaluate.\n+ * @author Stephen Kestle\n+ * @since 4.0\n+ */\n+public interface Equator<T> {\n+    /**\n+     * Evaluates the two arguments for their equality.\n+     * \n+     * @param o1 the first object to be equated.\n+     * @param o2 the second object to be equated.\n+     * @return whether the two objects are equal.\n+     */\n+    boolean equate(T o1, T o2);\n+\n+    /**\n+     * Calculates the hash for the object, based on the method of equality used in the equate\n+     * method. This is used for classes that delegate their {@link #equals(Object)} method to an\n+     * Equator (and so must also delegate their {@link #hashCode()} method), or for implementations\n+     * of {@link HashedMap} that use an Equator for the key objects.\n+     * \n+     * @param o the object to calculate the hash for.\n+     * @return the hash of the object.\n+     */\n+    int hash(T o);\n+}", "timestamp": 1252994104, "metainfo": ""}