{"sha": "3aba1278c34b6b9eff2989fe56602e44f3e1ff21", "log": "Enable nulls to be added to the stack Add initial size constructor Tidy javadoc and code layout   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ArrayStack.java\n+++ b/src/java/org/apache/commons/collections/ArrayStack.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.9 2002/10/12 22:15:19 scolebourne Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/10/12 22:15:19 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.10 2002/10/13 12:56:42 scolebourne Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/10/13 12:56:42 $\n  *\n  * ====================================================================\n  *\n  * <http://www.apache.org/>.\n  *\n  */\n-\n-\n package org.apache.commons.collections;\n-\n \n import java.util.ArrayList;\n import java.util.EmptyStackException;\n-\n /**\n  * An implementation of the {@link java.util.Stack} API that is based on an\n  * <code>ArrayList</code> instead of a <code>Vector</code>, so it is not\n  * synchronized to protect against multi-threaded access.  The implementation\n  * is therefore operates faster in environments where you do not need to\n  * worry about multiple thread contention.\n- *\n- * The removal order of an <Code>ArrayStack</Code> is based on insertion \n+ * <p>\n+ * The removal order of an <code>ArrayStack</code> is based on insertion \n  * order: The most recently added element is removed first.  The iteration\n- * order is <I>not</I> the same as the removal order.  The iterator returns\n+ * order is <i>not</i> the same as the removal order.  The iterator returns\n  * elements from the bottom up, whereas the {@link #remove()} method removes\n  * them from the top down.\n- *\n+ * <p>\n+ * Unlike <code>Stack</code>, <code>ArrayStack</code> accepts null entries.\n+ *\n+ * @author Craig R. McClanahan\n+ * @author Paul Jack\n+ * @author Stephen Colebourne\n  * @since 1.0\n- * @author Craig R. McClanahan\n- * @version $Revision: 1.9 $ $Date: 2002/10/12 22:15:19 $\n+ * @version $Id: ArrayStack.java,v 1.10 2002/10/13 12:56:42 scolebourne Exp $\n  * @see java.util.Stack\n  */\n-\n public class ArrayStack extends ArrayList implements Buffer {\n-\n \n     final private static long serialVersionUID = 2130079159931574599L;\n //, local class serialVersionUID = -3491241305852305742\n \n     /**\n-     *  Constructs a new empty <Code>ArrayStack</Code>.\n+     * Constructs a new empty <code>ArrayStack</code>. The initial size\n+     * is controlled by <code>ArrayList</code> and is currently 10.\n      */\n     public ArrayStack() {\n         super();\n     }\n \n-    // --------------------------------------------------------- Public Methods\n-\n+    /**\n+     * Constructs a new empty <code>ArrayStack</code> with an initial size.\n+     * \n+     * @param initialSize  the initial size to use\n+     * @throws IllegalArgumentException  if the specified initial size\n+     *  is negative\n+     */\n+    public ArrayStack(int initialSize) {\n+        super(initialSize);\n+    }\n \n     /**\n      * Return <code>true</code> if this stack is currently empty.\n+     * <p>\n+     * This method exists for compatability with <code>java.util.Stack</code>.\n+     * New users of this class should use <code>isEmpty</code> instead.\n+     * \n+     * @return true if the stack is currently empty\n      */\n     public boolean empty() {\n-\n-        return (size() == 0);\n-\n-    }\n-\n-\n-    /**\n-     * Return the top item off of this stack without removing it.\n-     *\n-     * @exception EmptyStackExceptino if the stack is empty\n+        return isEmpty();\n+    }\n+\n+    /**\n+     * Returns the top item off of this stack without removing it.\n+     *\n+     * @return the top item on the stack\n+     * @throws EmptyStackException  if the stack is empty\n      */\n     public Object peek() throws EmptyStackException {\n-\n         int n = size();\n-        if (n <= 0)\n+        if (n <= 0) {\n             throw new EmptyStackException();\n-        else\n-            return (get(n - 1));\n-\n-    }\n-\n-    /**\n-     * Return the n'th item down (zero-relative) from the top of this\n+        } else {\n+            return get(n - 1);\n+        }\n+    }\n+\n+    /**\n+     * Returns the n'th item down (zero-relative) from the top of this\n      * stack without removing it.\n      *\n-     * @param n Number of items down to go\n-     *\n-     * @exception EmptyStackException if there are not enough items on the\n+     * @param n  the number of items down to go\n+     * @return the n'th item on the stack, zero relative\n+     * @throws EmptyStackException  if there are not enough items on the\n      *  stack to satisfy this request\n      */\n     public Object peek(int n) throws EmptyStackException {\n-\n         int m = (size() - n) - 1;\n-        if (m < 0)\n+        if (m < 0) {\n             throw new EmptyStackException();\n-        else\n-            return (get(m));\n-\n-    }\n-\n-\n-    /**\n-     * Pop the top item off of this stack and return it.\n-     *\n-     * @exception EmptyStackException if the stack is empty\n+        } else {\n+            return get(m);\n+        }\n+    }\n+\n+    /**\n+     * Pops the top item off of this stack and return it.\n+     *\n+     * @return the top item on the stack\n+     * @throws EmptyStackException  if the stack is empty\n      */\n     public Object pop() throws EmptyStackException {\n-\n         int n = size();\n-        if (n <= 0)\n+        if (n <= 0) {\n             throw new EmptyStackException();\n-        else\n-            return (remove(n - 1));\n-\n-    }\n-\n-\n-    /**\n-     * Push a new item onto the top of this stack.  The pushed item is also\n-     * returned.\n-     *\n-     * @param item Item to be added\n+        } else {\n+            return remove(n - 1);\n+        }\n+    }\n+\n+    /**\n+     * Pushes a new item onto the top of this stack. The pushed item is also\n+     * returned. This is equivalent to calling <code>add</code>.\n+     *\n+     * @param item  the item to be added\n+     * @return the item just pushed\n      */\n     public Object push(Object item) {\n-\n-        if (item == null)\n-            throw new NullPointerException();\n         add(item);\n-        return (item);\n-\n-    }\n-\n-\n-    /**\n-     * Return the one-based position of the distance from the top that the\n+        return item;\n+    }\n+\n+    /**\n+     * Returns the one-based position of the distance from the top that the\n      * specified object exists on this stack, where the top-most element is\n      * considered to be at distance <code>1</code>.  If the object is not\n      * present on the stack, return <code>-1</code> instead.  The\n      * <code>equals()</code> method is used to compare to the items\n      * in this stack.\n      *\n-     * @param o Object to be searched for\n-     */\n-    public int search(Object o) {\n-\n+     * @param object  the object to be searched for\n+     * @return the 1-based depth into the stack of the object, or -1 if not found\n+     */\n+    public int search(Object object) {\n         int i = size() - 1;        // Current index\n         int n = 1;                 // Current distance\n         while (i >= 0) {\n-            if (o.equals(get(i)))\n-                return (n);\n+            Object current = get(i);\n+            if ((object == null && current == null) ||\n+                (object != null && object.equals(current))) {\n+                return n;\n+            }\n             i--;\n             n++;\n         }\n-        return (-1);\n-\n-    }\n-\n-\n-    /**\n-     *  Returns the element on the top of the stack.\n-     *\n-     *  @return the element on the top of the stack\n-     *  @throws BufferUnderflowException if the stack is empty\n+        return -1;\n+    }\n+\n+    /**\n+     * Returns the element on the top of the stack.\n+     *\n+     * @return the element on the top of the stack\n+     * @throws BufferUnderflowException  if the stack is empty\n      */\n     public Object get() {\n         int size = size();\n-        if (size == 0) throw new BufferUnderflowException();\n+        if (size == 0) {\n+            throw new BufferUnderflowException();\n+        }\n         return get(size - 1);\n     }\n \n-\n-\n-    /**\n-     *  Removes the element on the top of the stack.\n-     *\n-     *  @return the removed element \n-     *  @throws BufferUnderflowException if the stack is empty\n+    /**\n+     * Removes the element on the top of the stack.\n+     *\n+     * @return the removed element \n+     * @throws BufferUnderflowException  if the stack is empty\n      */\n     public Object remove() {\n         int size = size();\n-        if (size == 0) throw new BufferUnderflowException();\n+        if (size == 0) {\n+            throw new BufferUnderflowException();\n+        }\n         return remove(size - 1);\n     }\n ", "timestamp": 1034513802, "metainfo": ""}