{"sha": "5486a179db84a4fff5250f061fe0e491e5755f5e", "log": "Cleanup of list package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n  * is here.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Rich Dougherty\n- * @author Phil Steitz\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractLinkedList<E> implements List<E> {\n \n--- a/src/main/java/org/apache/commons/collections/list/AbstractListDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractListDecorator.java\n import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n \n /**\n- * Decorates another <code>List</code> to provide additional behaviour.\n+ * Decorates another {@link List} to provide additional behaviour.\n  * <p>\n  * Methods are forwarded directly to the decorated list.\n  *\n  * @param <E> the type of the elements in the list\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n-public abstract class AbstractListDecorator<E> extends AbstractCollectionDecorator<E> implements\n-        List<E> {\n+public abstract class AbstractListDecorator<E> extends AbstractCollectionDecorator<E>\n+        implements List<E> {\n \n     /** Serialization version--necessary in an abstract class? */\n     private static final long serialVersionUID = 4500739654952315623L;\n--- a/src/main/java/org/apache/commons/collections/list/AbstractSerializableListDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractSerializableListDecorator.java\n /**\n  * Serializable subclass of AbstractListDecorator.\n  *\n- * @author Stephen Colebourne\n  * @since Commons Collections 3.1\n+ * @version $Id$\n  */\n public abstract class AbstractSerializableListDecorator<E>\n         extends AbstractListDecorator<E>\n     private static final long serialVersionUID = 2684959196747496299L;\n \n     /**\n-     * Constructor.\n+     * Constructor that wraps (not copies).\n+     *\n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n      */\n     protected AbstractSerializableListDecorator(List<E> list) {\n         super(list);\n--- a/src/main/java/org/apache/commons/collections/list/CursorableLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/CursorableLinkedList.java\n  *\n  * @see java.util.LinkedList\n  * @since Commons Collections 1.0\n- * @version $Revision$\n- *\n- * @author Rodney Waldhoff\n- * @author Janek Bogucki\n- * @author Simon Kitching\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class CursorableLinkedList<E> extends AbstractLinkedList<E> implements Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/list/FixedSizeList.java\n+++ b/src/main/java/org/apache/commons/collections/list/FixedSizeList.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class FixedSizeList<E>\n         extends AbstractSerializableListDecorator<E>\n--- a/src/main/java/org/apache/commons/collections/list/GrowthList.java\n+++ b/src/main/java/org/apache/commons/collections/list/GrowthList.java\n  *\n  * @see LazyList\n  * @since Commons Collections 3.2\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Legato\n+ * @version $Id$\n  */\n public class GrowthList<E> extends AbstractSerializableListDecorator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/list/LazyList.java\n+++ b/src/main/java/org/apache/commons/collections/list/LazyList.java\n  * For instance:\n  *\n  * <pre>\n- * Factory factory = new Factory() {\n- *     public Object create() {\n+ * Factory&lt;Date&gt; factory = new Factory&lt;Date&gt;() {\n+ *     public Date create() {\n  *         return new Date();\n  *     }\n  * }\n- * List lazy = LazyList.decorate(new ArrayList(), factory);\n- * Object obj = lazy.get(3);\n+ * List&lt;Date&gt; lazy = LazyList.decorate(new ArrayList&lt;Date&gt;(), factory);\n+ * Date date = lazy.get(3);\n  * </pre>\n  *\n- * After the above code is executed, <code>obj</code> will contain\n+ * After the above code is executed, <code>date</code> will contain\n  * a new <code>Date</code> instance.  Furthermore, that <code>Date</code>\n  * instance is the fourth element in the list.  The first, second, \n  * and third element are all set to <code>null</code>.\n  *\n  * @see GrowthList\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Arron Bates\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class LazyList<E> extends AbstractSerializableListDecorator<E> {\n \n      * placeholder that is replaced with a factory object when requested.\n      * \n      * @param index  the index to retrieve\n-     * {@inheritDoc}\n      */\n     @Override\n     public E get(int index) {\n--- a/src/main/java/org/apache/commons/collections/list/NodeCachingLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/NodeCachingLinkedList.java\n  * <b>Note that this implementation is not synchronized.</b>\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Jeff Varszegi\n- * @author Rich Dougherty\n- * @author Phil Steitz\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class NodeCachingLinkedList<E> extends AbstractLinkedList<E> implements Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/list/PredicatedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/PredicatedList.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class PredicatedList<E> extends PredicatedCollection<E> implements List<E> {\n \n--- a/src/main/java/org/apache/commons/collections/list/SetUniqueList.java\n+++ b/src/main/java/org/apache/commons/collections/list/SetUniqueList.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Matthew Hawthorne\n- * @author Stephen Colebourne\n- * @author Tom Dunham\n+ * @version $Id$\n  */\n public class SetUniqueList<E> extends AbstractSerializableListDecorator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/list/SynchronizedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/SynchronizedList.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class SynchronizedList<E> extends SynchronizedCollection<E> implements List<E> {\n \n--- a/src/main/java/org/apache/commons/collections/list/TransformedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TransformedList.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TransformedList<E> extends TransformedCollection<E> implements List<E> {\n \n--- a/src/main/java/org/apache/commons/collections/list/TreeList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TreeList.java\n  * does use slightly more memory.\n  *\n  * @since Commons Collections 3.1\n- * @version $Revision$\n- *\n- * @author Joerg Schmuecker\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TreeList<E> extends AbstractList<E> {\n //    add; toArray; iterator; insert; get; indexOf; remove\n--- a/src/main/java/org/apache/commons/collections/list/UnmodifiableList.java\n+++ b/src/main/java/org/apache/commons/collections/list/UnmodifiableList.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableList<E>\n         extends AbstractSerializableListDecorator<E>\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/list/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * This package contains implementations of the {@link java.util.List List} interface.\n+ * <p>\n+ * The following implementations are provided in the package:\n+ * <ul>\n+ *   <li>TreeList - a list that is optimised for insertions and removals at any index in the list</li>\n+ *   <li>CursorableLinkedList - a list that can be modified while the listIterator (cursor) is being used</li>\n+ *   <li>NodeCachingLinkedList - a linked list that caches the storage nodes for a performance gain</li>\n+ * </ul>\n+ * <p>\n+ * The following decorators are provided in the package:\n+ * <ul>\n+ *   <li>Synchronized - synchronizes method access for multi-threaded environments</li>\n+ *   <li>Unmodifiable - ensures the collection cannot be altered</li>\n+ *   <li>Predicated - ensures that only elements that are valid according to a predicate can be added</li>\n+ *   <li>Typed - ensures that only elements that are of a specific type can be added</li>\n+ *   <li>Transformed - transforms each element added</li>\n+ *   <li>FixedSize - ensures that the size of the list cannot change</li>\n+ *   <li>Lazy - creates objects in the list on demand</li>\n+ *   <li>Growth - grows the list instead of erroring when set/add used with index beyond the list size</li>\n+ *   <li>SetUnique - a list that avoids duplicate entries like a Set</li>\n+ * </ul>\n+ *\n+ * @version $Id$\n+ */\n+package org.apache.commons.collections.list;", "timestamp": 1342303991, "metainfo": ""}