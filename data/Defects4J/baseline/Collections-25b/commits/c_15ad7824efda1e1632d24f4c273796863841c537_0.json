{"sha": "15ad7824efda1e1632d24f4c273796863841c537", "log": "[COLLECTIONS-501] Renamed MultiKeyMap.remove(Object, Object, ...) to removeMultiKey(...).  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java\n      * @param key1  the first key\n      * @param key2  the second key\n      * @return the value mapped to the removed key, null if key not in map\n-     */\n-    public V remove(final Object key1, final Object key2) {\n+     * @since 4.0 (previous name: remove(Object, Object))\n+     */\n+    public V removeMultiKey(final Object key1, final Object key2) {\n         final int hashCode = hash(key1, key2);\n         final int index = decorated().hashIndex(hashCode, decorated().data.length);\n         AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n      * @param key2  the second key\n      * @param key3  the third key\n      * @return the value mapped to the removed key, null if key not in map\n-     */\n-    public V remove(final Object key1, final Object key2, final Object key3) {\n+     * @since 4.0 (previous name: remove(Object, Object, Object))\n+     */\n+    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {\n         final int hashCode = hash(key1, key2, key3);\n         final int index = decorated().hashIndex(hashCode, decorated().data.length);\n         AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n      * @param key3  the third key\n      * @param key4  the fourth key\n      * @return the value mapped to the removed key, null if key not in map\n-     */\n-    public V remove(final Object key1, final Object key2, final Object key3, final Object key4) {\n+     * @since 4.0 (previous name: remove(Object, Object, Object, Object))\n+     */\n+    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {\n         final int hashCode = hash(key1, key2, key3, key4);\n         final int index = decorated().hashIndex(hashCode, decorated().data.length);\n         AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n      * @param key4  the fourth key\n      * @param key5  the fifth key\n      * @return the value mapped to the removed key, null if key not in map\n-     */\n-    public V remove(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {\n+     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))\n+     */\n+    public V removeMultiKey(final Object key1, final Object key2, final Object key3,\n+                            final Object key4, final Object key5) {\n         final int hashCode = hash(key1, key2, key3, key4, key5);\n         final int index = decorated().hashIndex(hashCode, decorated().data.length);\n         AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];\n--- a/src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java\n             switch (key.size()) {\n                 case 2:\n                 assertEquals(true, multimap.containsKey(key.getKey(0), key.getKey(1)));\n-                assertEquals(value, multimap.remove(key.getKey(0), key.getKey(1)));\n+                assertEquals(value, multimap.removeMultiKey(key.getKey(0), key.getKey(1)));\n                 assertEquals(false, multimap.containsKey(key.getKey(0), key.getKey(1)));\n                 assertEquals(size - 1, multimap.size());\n-                assertEquals(null, multimap.remove(key.getKey(0), key.getKey(1)));\n+                assertEquals(null, multimap.removeMultiKey(key.getKey(0), key.getKey(1)));\n                 assertEquals(false, multimap.containsKey(key.getKey(0), key.getKey(1)));\n                 break;\n                 case 3:\n                 assertEquals(true, multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n-                assertEquals(value, multimap.remove(key.getKey(0), key.getKey(1), key.getKey(2)));\n+                assertEquals(value, multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                 assertEquals(false, multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                 assertEquals(size - 1, multimap.size());\n-                assertEquals(null, multimap.remove(key.getKey(0), key.getKey(1), key.getKey(2)));\n+                assertEquals(null, multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                 assertEquals(false, multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2)));\n                 break;\n                 case 4:\n                 assertEquals(true, multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n-                assertEquals(value, multimap.remove(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n+                assertEquals(value, multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                 assertEquals(false, multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                 assertEquals(size - 1, multimap.size());\n-                assertEquals(null, multimap.remove(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n+                assertEquals(null, multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                 assertEquals(false, multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3)));\n                 break;\n                 case 5:\n                 assertEquals(true, multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n-                assertEquals(value, multimap.remove(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n+                assertEquals(value, multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                 assertEquals(false, multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                 assertEquals(size - 1, multimap.size());\n-                assertEquals(null, multimap.remove(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n+                assertEquals(null, multimap.removeMultiKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                 assertEquals(false, multimap.containsKey(key.getKey(0), key.getKey(1), key.getKey(2), key.getKey(3), key.getKey(4)));\n                 break;\n                 default:", "timestamp": 1384712832, "metainfo": ""}