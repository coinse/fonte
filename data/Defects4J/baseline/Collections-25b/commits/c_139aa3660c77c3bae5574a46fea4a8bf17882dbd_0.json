{"sha": "139aa3660c77c3bae5574a46fea4a8bf17882dbd", "log": "Javadoc fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/IteratorChain.java\n /**\n  * An IteratorChain is an Iterator that wraps a number of Iterators.\n  * <p>\n- * This class makes multiple iterators look like one to the caller When any\n+ * This class makes multiple iterators look like one to the caller. When any\n  * method from the Iterator interface is called, the IteratorChain will delegate\n  * to a single underlying Iterator. The IteratorChain will invoke the Iterators\n  * in sequence until all Iterators are exhausted.\n  * efficient (and convenient) than reading out the contents of each Iterator\n  * into a List and creating a new Iterator.\n  * <p>\n- * Calling a method that adds new Iterator<i>after a method in the Iterator\n- * interface has been called</i> will result in an\n- * UnsupportedOperationException. Subclasses should <i>take care</i> to not\n- * alter the underlying List of Iterators.\n+ * Calling a method that adds new Iterator <i>after a method in the Iterator\n+ * interface has been called</i> will result in an UnsupportedOperationException.\n+ * Subclasses should <i>take care</i> to not alter the underlying List of Iterators.\n  * <p>\n  * NOTE: As from version 3.0, the IteratorChain may contain no iterators. In\n  * this case the class will function as an empty iterator.", "timestamp": 1362061447, "metainfo": ""}