{"sha": "1311750c188268a976ea18964e4f81de6b8bb295", "log": "added unit tests for Comparators   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.20 2002/02/26 17:31:51 morgand Exp $\n- * $Revision: 1.20 $\n- * $Date: 2002/02/26 17:31:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.21 2002/03/01 18:36:21 morgand Exp $\n+ * $Revision: 1.21 $\n+ * $Date: 2002/03/01 18:36:21 $\n  *\n  * ====================================================================\n  *\n \n package org.apache.commons.collections;\n \n+import org.apache.commons.collections.comparators.*;\n import junit.framework.*;\n \n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.20 2002/02/26 17:31:51 morgand Exp $\n+ * @version $Id: TestAll.java,v 1.21 2002/03/01 18:36:21 morgand Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestArrayStack.suite());\n         suite.addTest(TestBeanMap.suite());\n         suite.addTest(TestCollectionUtils.suite());\n+        suite.addTest(TestComparableComparator.suite());\n         suite.addTest(TestCursorableLinkedList.suite());\n         suite.addTest(TestDoubleOrderedMap.suite());\n         suite.addTest(TestExtendedProperties.suite());\n--- a/src/test/org/apache/commons/collections/TestObject.java\n+++ b/src/test/org/apache/commons/collections/TestObject.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.9 2002/02/26 20:52:17 morgand Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/02/26 20:52:17 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.10 2002/03/01 18:36:21 morgand Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/03/01 18:36:21 $\n  *\n  * ====================================================================\n  *\n  * test case (method) your {@link Object} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Id: TestObject.java,v 1.9 2002/02/26 20:52:17 morgand Exp $\n+ * @version $Id: TestObject.java,v 1.10 2002/03/01 18:36:21 morgand Exp $\n  */\n public abstract class TestObject extends TestCase {\n     public TestObject(String testName) {\n         return retval.toString();\n     }\n \n+    /**\n+     * Override this method if a subclass is testing a \n+     * Collections that cannot serialize an \"empty\" Collection\n+     * (e.g. Comparators have no contents)\n+     * \n+     * @return true\n+     */\n+    public boolean supportsEmptyCollections() {\n+        return true;\n+    }\n+\n+    /**\n+     * Override this method if a subclass is testing a \n+     * Collections that cannot serialize a \"full\" Collection\n+     * (e.g. Comparators have no contents)\n+     * \n+     * @return true\n+     */\n+    public boolean supportsFullCollections() {\n+        return true;\n+    }\n \n     /**\n      * If the test object is serializable, confirm that \n      * \n      */\n     public void testCanonicalEmptyCollectionExists() {\n+        if (!supportsEmptyCollections()) {\n+            return;\n+        }\n+\n         Object object = makeObject();\n         if (!(object instanceof Serializable)) {\n             return;\n      * \n      */\n     public void testCanonicalFullCollectionExists() {\n+        if (!supportsFullCollections()) {\n+            return;\n+        }\n+        \n         Object object = makeObject();\n         if (!(object instanceof Serializable)) {\n             return;\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparableComparator.java\n+package org.apache.commons.collections.comparators;\n+\n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+public class TestComparableComparator extends TestComparator {\n+\n+    public TestComparableComparator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestComparableComparator.class);\n+    }\n+\n+    public Comparator makeComparator() {\n+        return new ComparableComparator();\n+    }\n+\n+    public List getComparableObjectsOrdered() {\n+        List list = new LinkedList();\n+        list.add(new Integer(1));\n+        list.add(new Integer(2));\n+        list.add(new Integer(3));\n+        list.add(new Integer(4));\n+        list.add(new Integer(5));\n+        return list;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparator.java\n+package org.apache.commons.collections.comparators;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.collections.TestObject;\n+\n+public abstract class TestComparator extends TestObject {\n+\n+    public TestComparator(String testName) {\n+        super(testName);\n+    }\n+\n+    public abstract Comparator makeComparator();\n+    public abstract List getComparableObjectsOrdered();\n+\n+    public Object makeObject() {\n+        return makeComparator();\n+    }\n+\n+    public void reverseObjects(List list) {\n+        Collections.reverse(list);\n+    }\n+\n+    /**\n+     * Sort object according to the given Comparator.\n+     * \n+     * @param list       List to sort\n+     * @param comparator sorting comparator\n+     */\n+    public void sortObjects(List list, Comparator comparator) {\n+\n+        Collections.sort(list,comparator);\n+\n+    }\n+\n+    public boolean supportsEmptyCollections() {\n+        return false;\n+    }\n+\n+    public boolean supportsFullCollections() {\n+        return false;\n+    }\n+\n+    public void testEmptyListSort() {\n+        List list = new LinkedList();\n+        sortObjects(list,makeComparator());\n+\n+        List list2 = new LinkedList();\n+        \n+        assertTrue(\"Comparator cannot sort empty lists\",\n+                   list2.equals(list));\n+    }\n+\n+    public void testRandomListSort() {\n+        Comparator comparator = makeComparator();\n+\n+        List randomList = getComparableObjectsOrdered();\n+        reverseObjects(randomList);\n+        sortObjects(randomList,comparator);\n+\n+        List orderedList = getComparableObjectsOrdered();\n+\n+        assertTrue(\"Comparator did not reorder the List correctly\",\n+                   orderedList.equals(randomList));\n+\n+    }\n+\n+    /**\n+     * Nearly all Comparators should be Serializable.\n+     */\n+    public void testComparatorIsSerializable() {\n+        Comparator comparator = makeComparator();\n+        assertTrue(\"This comparator should be Serializable.\",\n+                   comparator instanceof Serializable);\n+    }\n+\n+}", "timestamp": 1015007781, "metainfo": ""}