{"sha": "f2086a2105b489f58228e3563d3134bfec243787", "log": "Cleanup bag package: package-info.java, version, author tags, javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractBagDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractBagDecorator.java\n  * Methods are forwarded directly to the decorated bag.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractBagDecorator<E>\n         extends AbstractCollectionDecorator<E> implements Bag<E> {\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n  * number of occurrences of that element in the bag.\n  *\n  * @since Commons Collections 3.0 (previously DefaultMapBag v2.0)\n- * @version $Revision$\n- *\n- * @author Chuck Burdick\n- * @author Michael A. Smith\n- * @author Stephen Colebourne\n- * @author Janek Bogucki\n- * @author Steve Clark\n+ * @version $Id$\n  */\n public abstract class AbstractMapBag<E> implements Bag<E> {\n \n \n     /**\n      * Constructor needed for subclass serialisation.\n-     * \n      */\n     protected AbstractMapBag() {\n         super();\n             this.canRemove = false;\n         }\n \n+        /** {@inheritDoc} */\n         public boolean hasNext() {\n             return (itemCount > 0 || entryIterator.hasNext());\n         }\n \n+        /** {@inheritDoc} */\n         public E next() {\n             if (parent.modCount != mods) {\n                 throw new ConcurrentModificationException();\n             return current.getKey();\n         }\n \n+        /** {@inheritDoc} */\n         public void remove() {\n             if (parent.modCount != mods) {\n                 throw new ConcurrentModificationException();\n     /**\n      * Returns an array of all of this bag's elements.\n      * \n+     * @param <T> the type of the array elements\n      * @param array the array to populate\n      * @return an array of all of this bag's elements\n      */\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java\n  * Methods are forwarded directly to the decorated bag.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractSortedBagDecorator<E>\n         extends AbstractBagDecorator<E> implements SortedBag<E> {\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E first() {\n         return decorated().first();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E last() {\n         return decorated().last();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Comparator<? super E> comparator() {\n         return decorated().comparator();\n     }\n--- a/src/main/java/org/apache/commons/collections/bag/HashBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/HashBag.java\n import org.apache.commons.collections.Bag;\n \n /**\n- * Implements <code>Bag</code>, using a <code>HashMap</code> to provide the\n+ * Implements {@link Bag}, using a {@link HashMap} to provide the\n  * data storage. This is the standard implementation of a bag.\n  * <p>\n- * A <code>Bag</code> stores each object in the collection together with a\n+ * A {@link Bag} stores each object in the collection together with a\n  * count of occurrences. Extra methods on the interface allow multiple copies\n  * of an object to be added or removed at once. It is important to read the\n  * interface javadoc carefully as several methods violate the\n- * <code>Collection</code> interface specification.\n+ * {@link Collection} interface specification.\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.0)\n- * @version $Revision$\n- *\n- * @author Chuck Burdick\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class HashBag<E>\n         extends AbstractMapBag<E> implements Bag<E>, Serializable {\n     private static final long serialVersionUID = -6561115435802554013L;\n     \n     /**\n-     * Constructs an empty <code>HashBag</code>.\n+     * Constructs an empty {@link HashBag}.\n      */\n     public HashBag() {\n         super(new HashMap<E, MutableInteger>());\n--- a/src/main/java/org/apache/commons/collections/bag/PredicatedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/PredicatedBag.java\n import org.apache.commons.collections.collection.PredicatedCollection;\n \n /**\n- * Decorates another <code>Bag</code> to validate that additions\n+ * Decorates another {@link Bag} to validate that additions\n  * match a specified predicate.\n  * <p>\n  * This bag exists to provide validation for the decorated bag.\n  * It is normally created to decorate an empty bag.\n- * If an object cannot be added to the bag, an IllegalArgumentException is thrown.\n+ * If an object cannot be added to the bag, an {@link IllegalArgumentException} is thrown.\n  * <p>\n  * One usage would be to ensure that no null entries are added to the bag.\n  * <pre>Bag bag = PredicatedBag.decorate(new HashBag(), NotNullPredicate.INSTANCE);</pre>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class PredicatedBag<E>\n         extends PredicatedCollection<E> implements Bag<E> {\n--- a/src/main/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n import org.apache.commons.collections.SortedBag;\n \n /**\n- * Decorates another <code>SortedBag</code> to validate that additions\n+ * Decorates another {@link SortedBag} to validate that additions\n  * match a specified predicate.\n  * <p>\n  * This bag exists to provide validation for the decorated bag.\n  * It is normally created to decorate an empty bag.\n- * If an object cannot be added to the bag, an IllegalArgumentException is thrown.\n+ * If an object cannot be added to the bag, an {@link IllegalArgumentException} is thrown.\n  * <p>\n  * One usage would be to ensure that no null entries are added to the bag.\n  * <pre>SortedBag bag = PredicatedSortedBag.decorate(new TreeBag(), NotNullPredicate.INSTANCE);</pre>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class PredicatedSortedBag<E>\n         extends PredicatedBag<E> implements SortedBag<E> {\n--- a/src/main/java/org/apache/commons/collections/bag/SynchronizedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/SynchronizedBag.java\n import org.apache.commons.collections.set.SynchronizedSet;\n \n /**\n- * Decorates another <code>Bag</code> to synchronize its behaviour\n+ * Decorates another {@link Bag} to synchronize its behaviour\n  * for a multi-threaded environment.\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated bag.\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class SynchronizedBag<E>\n         extends SynchronizedCollection<E> implements Bag<E> {\n--- a/src/main/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n import org.apache.commons.collections.SortedBag;\n \n /**\n- * Decorates another <code>SortedBag</code> to synchronize its behaviour\n+ * Decorates another {@link SortedBag} to synchronize its behaviour\n  * for a multi-threaded environment.\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated bag.\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class SynchronizedSortedBag<E>\n         extends SynchronizedBag<E> implements SortedBag<E> {\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n import org.apache.commons.collections.set.TransformedSet;\n \n /**\n- * Decorates another <code>Bag</code> to transform objects that are added.\n+ * Decorates another {@link Bag} to transform objects that are added.\n  * <p>\n  * The add methods are affected by this class.\n  * Thus objects must be removed or searched for using their transformed form.\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TransformedBag<E>\n         extends TransformedCollection<E> implements Bag<E> {\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n import org.apache.commons.collections.Transformer;\n \n /**\n- * Decorates another <code>SortedBag</code> to transform objects that are added.\n+ * Decorates another {@link SortedBag} to transform objects that are added.\n  * <p>\n  * The add methods are affected by this class.\n  * Thus objects must be removed or searched for using their transformed form.\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TransformedSortedBag<E>\n         extends TransformedBag<E> implements SortedBag<E> {\n--- a/src/main/java/org/apache/commons/collections/bag/TreeBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TreeBag.java\n import org.apache.commons.collections.SortedBag;\n \n /**\n- * Implements <code>SortedBag</code>, using a <code>TreeMap</code> to provide\n+ * Implements {@link SortedBag}, using a {@link TreeMap} to provide\n  * the data storage. This is the standard implementation of a sorted bag.\n  * <p>\n  * Order will be maintained among the bag members and can be viewed through the\n  * iterator.\n  * <p>\n- * A <code>Bag</code> stores each object in the collection together with a count\n+ * A {@link Bag} stores each object in the collection together with a count\n  * of occurrences. Extra methods on the interface allow multiple copies of an\n  * object to be added or removed at once. It is important to read the interface\n- * javadoc carefully as several methods violate the <code>Collection</code>\n+ * javadoc carefully as several methods violate the {@link Collection}\n  * interface specification.\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.0)\n- * @version $Revision$\n- *\n- * @author Chuck Burdick\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TreeBag<E> extends AbstractMapBag<E> implements SortedBag<E>, Serializable {\n \n     private static final long serialVersionUID = -7740146511091606676L;\n \n     /**\n-     * Constructs an empty <code>TreeBag</code>.\n+     * Constructs an empty {@link TreeBag}.\n      */\n     public TreeBag() {\n         super(new TreeMap<E, MutableInteger>());\n     }\n \n     /**\n-     * Constructs a <code>TreeBag</code> containing all the members of the\n+     * Constructs a {@link TreeBag} containing all the members of the\n      * specified collection.\n      * \n      * @param coll the collection to copy into the bag\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E first() {\n         return getMap().firstKey();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E last() {\n         return getMap().lastKey();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Comparator<? super E> comparator() {\n         return getMap().comparator();\n     }\n      * {@inheritDoc}\n      */\n     @Override\n-    protected SortedMap<E, org.apache.commons.collections.bag.AbstractMapBag.MutableInteger> getMap() {\n-        return (SortedMap<E, org.apache.commons.collections.bag.AbstractMapBag.MutableInteger>) super\n-                .getMap();\n+    protected SortedMap<E, AbstractMapBag.MutableInteger> getMap() {\n+        return (SortedMap<E, AbstractMapBag.MutableInteger>) super.getMap();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n- * Decorates another <code>Bag</code> to ensure it can't be altered.\n+ * Decorates another {@link Bag} to ensure it can't be altered.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableBag<E>\n         extends AbstractBagDecorator<E> implements Unmodifiable, Serializable {\n--- a/src/main/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n- * Decorates another <code>SortedBag</code> to ensure it can't be altered.\n+ * Decorates another {@link SortedBag} to ensure it can't be altered.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableSortedBag<E>\n         extends AbstractSortedBagDecorator<E> implements Unmodifiable, Serializable {\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/bag/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * This package contains implementations of the {@link org.apache.commons.collections.Bag Bag} and \n+ * {@link org.apache.commons.collections.SortedBag SortedBag} interfaces.\n+ * A bag stores an object and a count of the number of occurrences of the object.\n+ * <p>\n+ * The following implementations are provided in the package:\n+ * <ul>\n+ *   <li>HashBag - implementation that uses a HashMap to store the data\n+ *   <li>TreeBag - implementation that uses a TreeMap to store the data\n+ * </ul>\n+ * <p>\n+ * The following decorators are provided in the package:\n+ * <ul>\n+ *   <li>Synchronized - synchronizes method access for multi-threaded environments\n+ *   <li>Unmodifiable - ensures the bag cannot be altered\n+ *   <li>Predicated - ensures that only elements that are valid according to a predicate can be added\n+ *   <li>Typed - ensures that only elements that are of a specific type can be added\n+ *   <li>Transformed - transforms each element added to the bag\n+ * </ul>\n+ *\n+ * @version $Id$\n+ */\n+package org.apache.commons.collections.bag;", "timestamp": 1340656472, "metainfo": ""}