{"sha": "274b6c5b5ba959c8c27778fd6ad74cb3b7db568b", "log": "Removed prior to release 3.0, now available in commons-events   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/java/org/apache/commons/collections/BagUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.16 2003/11/27 22:55:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.17 2004/01/04 18:03:41 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  */\n package org.apache.commons.collections;\n \n+import org.apache.commons.collections.bag.HashBag;\n import org.apache.commons.collections.bag.PredicatedBag;\n import org.apache.commons.collections.bag.PredicatedSortedBag;\n import org.apache.commons.collections.bag.SynchronizedBag;\n import org.apache.commons.collections.bag.SynchronizedSortedBag;\n import org.apache.commons.collections.bag.TransformedBag;\n import org.apache.commons.collections.bag.TransformedSortedBag;\n+import org.apache.commons.collections.bag.TreeBag;\n import org.apache.commons.collections.bag.TypedBag;\n import org.apache.commons.collections.bag.TypedSortedBag;\n import org.apache.commons.collections.bag.UnmodifiableBag;\n import org.apache.commons.collections.bag.UnmodifiableSortedBag;\n-import org.apache.commons.collections.observed.ModificationListener;\n-import org.apache.commons.collections.observed.ObservableBag;\n-import org.apache.commons.collections.observed.ObservableSortedBag;\n \n /**\n  * Provides utility methods and decorators for\n  * {@link Bag} and {@link SortedBag} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.16 $ $Date: 2003/11/27 22:55:16 $\n+ * @version $Revision: 1.17 $ $Date: 2004/01/04 18:03:41 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n         return TransformedBag.decorate(bag, transformer);\n     }\n     \n-    /**\n-     * Returns an observable bag where changes are notified to listeners.\n-     * <p>\n-     * This method creates an observable bag and attaches the specified listener.\n-     * If more than one listener or other complex setup is required then the\n-     * ObservableBag class should be accessed directly.\n-     *\n-     * @deprecated TO BE REMOVED BEFORE v3.0\n-     * @param bag  the bag to decorate, must not be null\n-     * @param listener  bag listener, must not be null\n-     * @return the observed bag\n-     * @throws IllegalArgumentException if the bag or listener is null\n-     * @throws IllegalArgumentException if there is no valid handler for the listener\n-     */\n-    public static ObservableBag observableBag(Bag bag, ModificationListener listener) {\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        return ObservableBag.decorate(bag, listener);\n-    }\n-    \n     //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized (thread-safe) sorted bag backed by the given \n         return TransformedSortedBag.decorate(bag, transformer);\n     }\n     \n-    /**\n-     * Returns an observable sorted bag where changes are notified to listeners.\n-     * <p>\n-     * This method creates an observable sorted bag and attaches the specified listener.\n-     * If more than one listener or other complex setup is required then the\n-     * ObservableSortedBag class should be accessed directly.\n-     *\n-     * @deprecated TO BE REMOVED BEFORE v3.0\n-     * @param bag  the bag to decorate, must not be null\n-     * @param listener  bag listener, must not be null\n-     * @return the observed bag\n-     * @throws IllegalArgumentException if the bag or listener is null\n-     * @throws IllegalArgumentException if there is no valid handler for the listener\n-     */\n-    public static ObservableSortedBag observableSortedBag(SortedBag bag, ModificationListener listener) {\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        return ObservableSortedBag.decorate(bag, listener);\n-    }\n-        \n }\n--- a/src/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/java/org/apache/commons/collections/BufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.16 2003/11/27 22:55:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.17 2004/01/04 18:03:41 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import org.apache.commons.collections.buffer.TransformedBuffer;\n import org.apache.commons.collections.buffer.TypedBuffer;\n import org.apache.commons.collections.buffer.UnmodifiableBuffer;\n-import org.apache.commons.collections.observed.ModificationListener;\n-import org.apache.commons.collections.observed.ObservableBuffer;\n \n /**\n  * Provides utility methods and decorators for {@link Buffer} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.16 $ $Date: 2003/11/27 22:55:16 $\n+ * @version $Revision: 1.17 $ $Date: 2004/01/04 18:03:41 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n         return TransformedBuffer.decorate(buffer, transformer);\n     }\n     \n-    /**\n-     * Returns an observable buffer where changes are notified to listeners.\n-     * <p>\n-     * This method creates an observable buffer and attaches the specified listener.\n-     * If more than one listener or other complex setup is required then the\n-     * ObservableBuffer class should be accessed directly.\n-     *\n-     * @deprecated TO BE REMOVED BEFORE v3.0\n-     * @param buffer  the buffer to decorate, must not be null\n-     * @param listener  buffer listener, must not be null\n-     * @return the observed buffer\n-     * @throws IllegalArgumentException if the buffer or listener is null\n-     * @throws IllegalArgumentException if there is no valid handler for the listener\n-     */\n-    public static ObservableBuffer observableBuffer(Buffer buffer, ModificationListener listener) {\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        return ObservableBuffer.decorate(buffer, listener);\n-    }\n-    \n }\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.51 2003/12/11 23:01:02 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.52 2004/01/04 18:03:41 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n import org.apache.commons.collections.iterators.ArrayIterator;\n import org.apache.commons.collections.iterators.EnumerationIterator;\n-import org.apache.commons.collections.observed.ModificationListener;\n-import org.apache.commons.collections.observed.ObservableCollection;\n \n /**\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.51 $ $Date: 2003/12/11 23:01:02 $\n+ * @version $Revision: 1.52 $ $Date: 2004/01/04 18:03:41 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n      * @throws IndexOutOfBoundsException\n      * @throws ArrayIndexOutOfBoundsException\n      *\n-     * @deprecated use {@link #get(Object, int)} instead\n+     * @deprecated use {@link #get(Object, int)} instead. Will be removed in v4.0\n      */\n     public static Object index(Object obj, int idx) {\n         return index(obj, new Integer(idx));\n      * @throws IndexOutOfBoundsException\n      * @throws ArrayIndexOutOfBoundsException\n      *\n-     * @deprecated use {@link #get(Object, int)} instead\n+     * @deprecated use {@link #get(Object, int)} instead. Will be removed in v4.0\n      */\n     public static Object index(Object obj, Object index) {\n         if(obj instanceof Map) {\n     }\n \n     /** \n-     * Returns an Iterator for the given object. Currently this method can handle\n-     * Iterator, Enumeration, Collection, Map, Object[] or array.\n-     * \n-     * @deprecated use IteratorUtils version instead\n-     */\n-    public static Iterator getIterator(Object obj) {\n-        if(obj instanceof Iterator) {\n-            return (Iterator)obj;\n-        } \n-        else if(obj instanceof Collection) {\n-            return ((Collection)obj).iterator();\n-        } \n-        else if(obj instanceof Object[]) {\n-            return new ArrayIterator( obj );\n-        } \n-        else if(obj instanceof Enumeration) {\n-            return new EnumerationIterator( (Enumeration)obj );\n-        } \n-        else if(obj instanceof Map) {\n-            return ((Map)obj).values().iterator();\n-        } \n-        else if(obj != null && obj.getClass().isArray()) {\n-            return new ArrayIterator( obj );\n-        }\n-        else{\n-            return null;\n-        }\n-    }\n-\n-    /** \n      * Reverses the order of the given array.\n      * \n      * @param array  the array to reverse\n         return TransformedCollection.decorate(collection, transformer);\n     }\n     \n-    /**\n-     * Returns an observable collection where changes are notified to listeners.\n-     * <p>\n-     * This method creates an observable collection and attaches the specified listener.\n-     * If more than one listener or other complex setup is required then the\n-     * ObservableCollection class should be accessed directly.\n-     *\n-     * @deprecated TO BE REMOVED BEFORE v3.0\n-     * @param collection  the collection to decorate, must not be null\n-     * @param listener  collection listener, must not be null\n-     * @return the observed collection\n-     * @throws IllegalArgumentException if the collection or listener is null\n-     * @throws IllegalArgumentException if there is no valid handler for the listener\n-     */\n-    public static ObservableCollection observableCollection(Collection collection, ModificationListener listener) {\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        return ObservableCollection.decorate(collection, listener);\n-    }\n-    \n }\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.23 2003/11/27 22:55:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.24 2004/01/04 18:03:41 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2001-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import org.apache.commons.collections.list.TransformedList;\n import org.apache.commons.collections.list.TypedList;\n import org.apache.commons.collections.list.UnmodifiableList;\n-import org.apache.commons.collections.observed.ModificationListener;\n-import org.apache.commons.collections.observed.ObservableList;\n \n /**\n  * Provides utility methods and decorators for {@link List} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.23 $ $Date: 2003/11/27 22:55:16 $\n+ * @version $Revision: 1.24 $ $Date: 2004/01/04 18:03:41 $\n  * \n  * @author Federico Barbieri\n  * @author Peter Donald\n     }\n     \n     /**\n-     * Returns an observable list where changes are notified to listeners.\n-     * <p>\n-     * This method creates an observable list and attaches the specified listener.\n-     * If more than one listener or other complex setup is required then the\n-     * ObservableList class should be accessed directly.\n-     *\n-     * @deprecated TO BE REMOVED BEFORE v3.0\n-     * @param list  the list to decorate, must not be null\n-     * @param listener  list listener, must not be null\n-     * @return the observed list\n-     * @throws IllegalArgumentException if the list or listener is null\n-     * @throws IllegalArgumentException if there is no valid handler for the listener\n-     */\n-    public static ObservableList observableList(List list, ModificationListener listener) {\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        return ObservableList.decorate(list, listener);\n-    }\n-    \n-    /**\n      * Returns a \"lazy\" list whose elements will be created on demand.\n      * <p>\n      * When the index passed to the returned list's {@link List#get(int) get}\n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.21 2003/12/03 11:37:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.22 2004/01/04 18:03:41 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import java.util.SortedSet;\n import java.util.TreeSet;\n \n-import org.apache.commons.collections.observed.ModificationListener;\n-import org.apache.commons.collections.observed.ObservableSet;\n-import org.apache.commons.collections.observed.ObservableSortedSet;\n import org.apache.commons.collections.set.ListOrderedSet;\n import org.apache.commons.collections.set.PredicatedSet;\n import org.apache.commons.collections.set.PredicatedSortedSet;\n  * {@link Set} and {@link SortedSet} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.21 $ $Date: 2003/12/03 11:37:44 $\n+ * @version $Revision: 1.22 $ $Date: 2004/01/04 18:03:41 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n     }\n     \n     /**\n-     * Returns an observable set where changes are notified to listeners.\n-     * <p>\n-     * This method creates an observable set and attaches the specified listener.\n-     * If more than one listener or other complex setup is required then the\n-     * ObservableSet class should be accessed directly.\n-     *\n-     * @deprecated TO BE REMOVED BEFORE v3.0\n-     * @param set  the set to decorate, must not be null\n-     * @param listener  set listener, must not be null\n-     * @return the observed set\n-     * @throws IllegalArgumentException if the set or listener is null\n-     * @throws IllegalArgumentException if there is no valid handler for the listener\n-     */\n-    public static ObservableSet observableSet(Set set, ModificationListener listener) {\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        return ObservableSet.decorate(set, listener);\n-    }\n-    \n-    /**\n      * Returns a set that maintains the order of elements that are added\n      * backed by the given set.\n      * <p>\n         return TransformedSortedSet.decorate(set, transformer);\n     }\n     \n-    /**\n-     * Returns an observable sorted set where changes are notified to listeners.\n-     * <p>\n-     * This method creates an observable set and attaches the specified listener.\n-     * If more than one listener or other complex setup is required then the\n-     * ObservableSortedSet class should be accessed directly.\n-     *\n-     * @deprecated TO BE REMOVED BEFORE v3.0\n-     * @param set  the set to decorate, must not be null\n-     * @param listener  set listener, must not be null\n-     * @return the observed set\n-     * @throws IllegalArgumentException if the set or listener is null\n-     * @throws IllegalArgumentException if there is no valid handler for the listener\n-     */\n-    public static ObservableSortedSet observableSortedSet(SortedSet set, ModificationListener listener) {\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        return ObservableSortedSet.decorate(set, listener);\n-    }\n-    \n }", "timestamp": 1073239421, "metainfo": ""}