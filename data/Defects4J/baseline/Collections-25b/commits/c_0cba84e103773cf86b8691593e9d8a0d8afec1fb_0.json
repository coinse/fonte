{"sha": "0cba84e103773cf86b8691593e9d8a0d8afec1fb", "log": "[COLLECTIONS-473] Made field collection private and added setter for de-serialization.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/bag/CompliantBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/CompliantBag.java\n      */\n     private void writeObject(final ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n-        out.writeObject(collection);\n+        out.writeObject(decorated());\n     }\n \n     /**\n     @SuppressWarnings(\"unchecked\") // will throw CCE, see Javadoc\n     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        collection = (Collection<E>) in.readObject();\n+        setCollection((Collection<E>) in.readObject());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java\n      * @return the decorated bag\n      */\n     protected Bag<E> getBag() {\n-        return (Bag<E>) collection;\n+        return (Bag<E>) decorated();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java\n      * @return the decorated bag\n      */\n     protected SortedBag<E> getSortedBag() {\n-        return (SortedBag<E>) collection;\n+        return (SortedBag<E>) decorated();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java\n      */\n     private void writeObject(final ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n-        out.writeObject(collection);\n+        out.writeObject(decorated());\n     }\n \n     /**\n     @SuppressWarnings(\"unchecked\") // will throw CCE, see Javadoc\n     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        collection = (Collection<E>) in.readObject();\n+        setCollection((Collection<E>) in.readObject());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag.java\n      */\n     private void writeObject(final ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n-        out.writeObject(collection);\n+        out.writeObject(decorated());\n     }\n \n     /**\n     @SuppressWarnings(\"unchecked\") // will throw CCE, see Javadoc\n     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        collection = (Collection<E>) in.readObject();\n+        setCollection((Collection<E>) in.readObject());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java\n     private static final long serialVersionUID = 6249888059822088500L;\n \n     /** The collection being decorated */\n-    protected Collection<E> collection;\n+    private Collection<E> collection;\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n      */\n     protected Collection<E> decorated() {\n         return collection;\n+    }\n+\n+    /**\n+     * Sets the collection being decorated.\n+     * <p>\n+     * <b>NOTE:</b> this method should only be used during deserialization\n+     *\n+     * @param coll  the decorated collection\n+     */\n+    protected void setCollection(final Collection<E> coll) {\n+        this.collection = coll;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java\n                 break;  // normal loop exit\n             }\n             if (coll instanceof AbstractCollectionDecorator) {\n-                coll = ((AbstractCollectionDecorator<E>) coll).collection;\n+                coll = ((AbstractCollectionDecorator<E>) coll).decorated();\n             } else if (coll instanceof SynchronizedCollection) {\n                 coll = ((SynchronizedCollection<E>) coll).decorated();\n             }\n--- a/src/main/java/org/apache/commons/collections4/list/AbstractSerializableListDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/list/AbstractSerializableListDecorator.java\n      */\n     private void writeObject(final ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n-        out.writeObject(collection);\n+        out.writeObject(decorated());\n     }\n \n     /**\n     @SuppressWarnings(\"unchecked\")\n     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        collection = (Collection<E>) in.readObject();\n+        setCollection((Collection<E>) in.readObject());\n     }\n \n }\n--- a/src/main/java/org/apache/commons/collections4/list/TransformedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/TransformedList.java\n      * @return the decorated list\n      */\n     protected List<E> getList() {\n-        return (List<E>) collection;\n+        return (List<E>) decorated();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java\n \n         @Override\n         public Iterator<Map.Entry<K, V>> iterator() {\n-            return new EntrySetIterator(collection.iterator(), parent);\n+            return new EntrySetIterator(this.decorated().iterator(), parent);\n         }\n \n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public Object[] toArray() {\n-            final Object[] array = collection.toArray();\n+            final Object[] array = this.decorated().toArray();\n             for (int i = 0; i < array.length; i++) {\n                 array[i] = new MapEntry((Map.Entry<K, V>) array[i], parent);\n             }\n                 // where another thread could access data before we decorate it\n                 result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);\n             }\n-            result = collection.toArray(result);\n+            result = this.decorated().toArray(result);\n             for (int i = 0; i < result.length; i++) {\n                 result[i] = new MapEntry((Map.Entry<K, V>) result[i], parent);\n             }\n--- a/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java\n+++ b/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java\n     //-----------------------------------------------------------------------\n     @Override\n     public Iterator<Map.Entry<K, V>> iterator() {\n-        return new UnmodifiableEntrySetIterator(collection.iterator());\n+        return new UnmodifiableEntrySetIterator(decorated().iterator());\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Object[] toArray() {\n-        final Object[] array = collection.toArray();\n+        final Object[] array = decorated().toArray();\n         for (int i = 0; i < array.length; i++) {\n             array[i] = new UnmodifiableEntry((Map.Entry<K, V>) array[i]);\n         }\n             // where another thread could access data before we decorate it\n             result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);\n         }\n-        result = collection.toArray(result);\n+        result = decorated().toArray(result);\n         for (int i = 0; i < result.length; i++) {\n             result[i] = new UnmodifiableEntry((Map.Entry<K, V>) result[i]);\n         }\n--- a/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java\n      * @return the decorated queue\n      */\n     protected Queue<E> getQueue() {\n-        return (Queue<E>) collection;\n+        return (Queue<E>) decorated();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java\n      */\n     private void writeObject(final ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n-        out.writeObject(collection);\n+        out.writeObject(decorated());\n     }\n \n     /**\n     @SuppressWarnings(\"unchecked\")\n     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        collection = (Collection<E>) in.readObject();\n+        setCollection((Collection<E>) in.readObject());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java\n      */\n     private void writeObject(final ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n-        out.writeObject(collection);\n+        out.writeObject(decorated());\n     }\n \n     /**\n     @SuppressWarnings(\"unchecked\")\n     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        collection = (Collection<E>) in.readObject();\n+        setCollection((Collection<E>) in.readObject());\n     }\n \n }\n--- a/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java\n     // -----------------------------------------------------------------------\n     @Override\n     public void clear() {\n-        collection.clear();\n+        decorated().clear();\n         setOrder.clear();\n     }\n \n     @Override\n     public OrderedIterator<E> iterator() {\n-        return new OrderedSetIterator<E>(setOrder.listIterator(), collection);\n+        return new OrderedSetIterator<E>(setOrder.listIterator(), decorated());\n     }\n \n     @Override\n     public boolean add(final E object) {\n-        if (collection.add(object)) {\n+        if (decorated().add(object)) {\n             setOrder.add(object);\n             return true;\n         }\n \n     @Override\n     public boolean remove(final Object object) {\n-        final boolean result = collection.remove(object);\n+        final boolean result = decorated().remove(object);\n         if (result) {\n             setOrder.remove(object);\n         }\n     public boolean retainAll(final Collection<?> coll) {\n         final Set<Object> collectionRetainAll = new HashSet<Object>();\n         for (final Object next : coll) {\n-            if (collection.contains(next)) {\n+            if (decorated().contains(next)) {\n                 collectionRetainAll.add(next);\n             }\n         }\n-        if (collectionRetainAll.size() == collection.size()) {\n+        if (collectionRetainAll.size() == decorated().size()) {\n             return false;\n         }\n         if (collectionRetainAll.size() == 0) {\n      */\n     public void add(final int index, final E object) {\n         if (!contains(object)) {\n-            collection.add(object);\n+            decorated().add(object);\n             setOrder.add(index, object);\n         }\n     }\n             if (contains(e)) {\n                 continue;\n             }\n-            collection.add(e);\n+            decorated().add(e);\n             toAdd.add(e);\n             changed = true;\n         }\n--- a/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java\n      * @return the decorated set\n      */\n     protected SortedSet<E> getSortedSet() {\n-        return (SortedSet<E>) collection;\n+        return (SortedSet<E>) decorated();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java\n      */\n     private void writeObject(final ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n-        out.writeObject(collection);\n+        out.writeObject(decorated());\n     }\n \n     /**\n     @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect\n     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        collection = (Collection<E>) in.readObject(); // (1)\n+        setCollection((Collection<E>) in.readObject()); // (1)\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1371586024, "metainfo": ""}