{"sha": "2c5a64eec4deb32f95092279ea35d613762357bc", "log": "Avoid ambiguous reference to assertEquals(double, double)  ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n         assertEquals(1, CollectionUtils.cardinality(null, list));\n         {\n             Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n-            assertEquals(1, freq.get(null));\n+            assertEquals(Integer.valueOf(1), freq.get(null));\n         }\n         list.add(\"B\");\n         assertEquals(1, CollectionUtils.cardinality(null, list));\n         {\n             Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n-            assertEquals(1, freq.get(null));\n+            assertEquals(Integer.valueOf(1), freq.get(null));\n         }\n         list.add(null);\n         assertEquals(2, CollectionUtils.cardinality(null, list));\n         {\n             Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n-            assertEquals(2, freq.get(null));\n+            assertEquals(Integer.valueOf(2), freq.get(null));\n         }\n         list.add(\"B\");\n         assertEquals(2, CollectionUtils.cardinality(null, list));\n         {\n             Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n-            assertEquals(2, freq.get(null));\n+            assertEquals(Integer.valueOf(2), freq.get(null));\n         }\n         list.add(null);\n         assertEquals(3, CollectionUtils.cardinality(null, list));\n         {\n             Map<String, Integer> freq = CollectionUtils.getCardinalityMap(list);\n-            assertEquals(3, freq.get(null));\n+            assertEquals(Integer.valueOf(3), freq.get(null));\n         }\n     }\n \n     public void union() {\n         Collection<Integer> col = CollectionUtils.union(iterableA, iterableC);\n         Map<Integer, Integer> freq = CollectionUtils.getCardinalityMap(col);\n-        assertEquals(1, freq.get(1));\n-        assertEquals(4, freq.get(2));\n-        assertEquals(3, freq.get(3));\n-        assertEquals(4, freq.get(4));\n-        assertEquals(1, freq.get(5));\n+        assertEquals(Integer.valueOf(1), freq.get(1));\n+        assertEquals(Integer.valueOf(4), freq.get(2));\n+        assertEquals(Integer.valueOf(3), freq.get(3));\n+        assertEquals(Integer.valueOf(4), freq.get(4));\n+        assertEquals(Integer.valueOf(1), freq.get(5));\n \n         Collection<Number> col2 = CollectionUtils.union(collectionC2, iterableA);\n         Map<Number, Integer> freq2 = CollectionUtils.getCardinalityMap(col2);\n-        assertEquals(1, freq2.get(1));\n-        assertEquals(4, freq2.get(2));\n-        assertEquals(3, freq2.get(3));\n-        assertEquals(4, freq2.get(4));\n-        assertEquals(1, freq2.get(5));\n+        assertEquals(Integer.valueOf(1), freq2.get(1));\n+        assertEquals(Integer.valueOf(4), freq2.get(2));\n+        assertEquals(Integer.valueOf(3), freq2.get(3));\n+        assertEquals(Integer.valueOf(4), freq2.get(4));\n+        assertEquals(Integer.valueOf(1), freq2.get(5));\n     }\n \n     @Test\n         Collection<Integer> col = CollectionUtils.intersection(iterableA, iterableC);\n         Map<Integer, Integer> freq = CollectionUtils.getCardinalityMap(col);\n         assertNull(freq.get(1));\n-        assertEquals(2, freq.get(2));\n-        assertEquals(3, freq.get(3));\n-        assertEquals(2, freq.get(4));\n+        assertEquals(Integer.valueOf(2), freq.get(2));\n+        assertEquals(Integer.valueOf(3), freq.get(3));\n+        assertEquals(Integer.valueOf(2), freq.get(4));\n         assertNull(freq.get(5));\n \n         Collection<Number> col2 = CollectionUtils.intersection(collectionC2, collectionA);\n         Map<Number, Integer> freq2 = CollectionUtils.getCardinalityMap(col2);\n         assertNull(freq2.get(1));\n-        assertEquals(2, freq2.get(2));\n-        assertEquals(3, freq2.get(3));\n-        assertEquals(2, freq2.get(4));\n+        assertEquals(Integer.valueOf(2), freq2.get(2));\n+        assertEquals(Integer.valueOf(3), freq2.get(3));\n+        assertEquals(Integer.valueOf(2), freq2.get(4));\n         assertNull(freq2.get(5));\n     }\n \n     public void disjunction() {\n         Collection<Integer> col = CollectionUtils.disjunction(iterableA, iterableC);\n         Map<Integer, Integer> freq = CollectionUtils.getCardinalityMap(col);\n-        assertEquals(1, freq.get(1));\n-        assertEquals(2, freq.get(2));\n+        assertEquals(Integer.valueOf(1), freq.get(1));\n+        assertEquals(Integer.valueOf(2), freq.get(2));\n         assertNull(freq.get(3));\n-        assertEquals(2, freq.get(4));\n-        assertEquals(1, freq.get(5));\n+        assertEquals(Integer.valueOf(2), freq.get(4));\n+        assertEquals(Integer.valueOf(1), freq.get(5));\n \n         Collection<Number> col2 = CollectionUtils.disjunction(collectionC2, collectionA);\n         Map<Number, Integer> freq2 = CollectionUtils.getCardinalityMap(col2);", "timestamp": 1253103247, "metainfo": ""}