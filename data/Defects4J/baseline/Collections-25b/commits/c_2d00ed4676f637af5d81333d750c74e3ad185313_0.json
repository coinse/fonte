{"sha": "2d00ed4676f637af5d81333d750c74e3ad185313", "log": "[COLLECTIONS-551] Move more methods from CollectionUtils.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n      * @param collection  the collection to search, may be null\n      * @param predicate  the predicate to use, may be null\n      * @return the first element of the collection which matches the predicate or null if none could be found\n-     */\n+     * @deprecated since 4.1, use {@link IterableUtils#find(Iterable, Predicate)} instead\n+     */\n+    @Deprecated\n     public static <T> T find(final Iterable<T> collection, final Predicate<? super T> predicate) {\n-        if (collection != null && predicate != null) {\n-            for (final T item : collection) {\n-                if (predicate.evaluate(item)) {\n-                    return item;\n-                }\n-            }\n-        }\n-        return null;\n+        return predicate != null ? IterableUtils.find(collection, predicate) : null;\n     }\n \n     /**\n      * @param collection  the collection to get the input from, may be null\n      * @param closure  the closure to perform, may be null\n      * @return closure\n-     */\n+     * @deprecated since 4.1, use {@link IterableUtils#apply(Iterable, Closure)} instead\n+     */\n+    @Deprecated\n     public static <T, C extends Closure<? super T>> C forAllDo(final Iterable<T> collection, final C closure) {\n-        if (collection != null && closure != null) {\n-            for (final T element : collection) {\n-                closure.execute(element);\n-            }\n+        if (closure != null) {\n+            IterableUtils.apply(collection, closure);\n         }\n         return closure;\n     }\n      * @param closure  the closure to perform, may be null\n      * @return closure\n      * @since 4.0\n-     */\n+     * @deprecated since 4.1, use {@link IteratorUtils#apply(Iterator, Closure)} instead\n+     */\n+    @Deprecated\n     public static <T, C extends Closure<? super T>> C forAllDo(final Iterator<T> iterator, final C closure) {\n-        if (iterator != null && closure != null) {\n-            while (iterator.hasNext()) {\n-                closure.execute(iterator.next());\n-            }\n+        if (closure != null) {\n+            IteratorUtils.apply(iterator, closure);\n         }\n         return closure;\n     }\n         return list;\n     }\n \n-    /**\n-     * This method checks, if any of the elements in <code>collection</code> is\n-     * equal to <code>object</code>. Object equality is tested with an\n-     * <code>equator</code> unlike <code>collection.contains(object)</code>\n-     * which uses {@link Object#equals(Object)}.\n-     *\n-     * @param <E> the type of object the {@link Collection} contains\n-     * @param collection the collection from which items are compared\n-     * @param object the object to compare with the collection's entries\n-     * @param equator the equator to use to check, if the item if equal to any\n-     *        of the collection's entries.\n-     * @return true if <code>object</code> is in <code>collection</code>\n-     *         according to <code>equator</code>\n-     * @throws NullPointerException if any parameter is null\n-     * @since 4.1\n-     */\n-    public static <E> boolean contains(final Collection<? extends E> collection, final E object,\n-                                       final Equator<? super E> equator) {\n-        for (final E obj : collection) {\n-            if (equator.equate(obj, object)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized collection backed by the given collection.\n--- a/src/main/java/org/apache/commons/collections4/IterableUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IterableUtils.java\n import java.util.Iterator;\n import java.util.List;\n \n+import org.apache.commons.collections4.functors.EqualPredicate;\n import org.apache.commons.collections4.iterators.LazyIteratorChain;\n import org.apache.commons.collections4.iterators.ReverseListIterator;\n import org.apache.commons.collections4.iterators.UniqueFilterIterator;\n     }\n \n     /**\n+     * Finds the first element in the given iterable which matches the given predicate.\n+     * <p>\n+     * A <code>null</code> or empty iterator returns null.\n+     *\n+     * @param <E>  the element type\n+     * @param iterable  the iterable to search, may be null\n+     * @param predicate  the predicate to use, may not be null\n+     * @return the first element of the iterable which matches the predicate or null if none could be found\n+     * @throws NullPointerException if predicate is null\n+     */\n+    public static <E> E find(final Iterable<E> iterable, final Predicate<? super E> predicate) {\n+        return IteratorUtils.find(emptyIteratorIfNull(iterable), predicate);\n+    }\n+\n+    /**\n      * Answers true if a predicate is true for every element of an iterable.\n      * <p>\n      * A <code>null</code> or empty iterable returns true.\n         } else {\n             return IteratorUtils.contains(emptyIteratorIfNull(iterable), object);\n         }\n+    }\n+\n+    /**\n+     * Checks if the object is contained in the given iterable. Object equality\n+     * is tested with an {@code equator} unlike {@link #contains(Iterable, Object)}\n+     * which uses {@link Object#equals(Object)}.\n+     * <p>\n+     * A <code>null</code> or empty iterable returns false.\n+     * A <code>null</code> object will not be passed to the equator, instead a\n+     * {@link org.apache.commons.collections4.functors.NullPredicate NullPredicate}\n+     * will be used.\n+     *\n+     * @param <E>  the type of object the {@link Iterable} contains\n+     * @param iterable  the iterable to check, may be null\n+     * @param object  the object to check\n+     * @param equator  the equator to use to check, may not be null\n+     * @return true if the object is contained in the iterable, false otherwise\n+     * @throws NullPointerException if equator is null\n+     */\n+    public static <E> boolean contains(final Iterable<? extends E> iterable, final E object,\n+                                       final Equator<? super E> equator) {\n+        if (equator == null) {\n+            throw new NullPointerException(\"Equator must not be null.\");\n+        }\n+        return matchesAny(iterable, EqualPredicate.equalPredicate(object, equator));\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n     }\n \n     /**\n+     * Finds the first element in the given iterator which matches the given predicate.\n+     * <p>\n+     * A <code>null</code> or empty iterator returns null.\n+     *\n+     * @param <E>  the element type\n+     * @param iterator  the iterator to search, may be null\n+     * @param predicate  the predicate to use, may not be null\n+     * @return the first element of the iterator which matches the predicate or null if none could be found\n+     * @throws NullPointerException if predicate is null\n+     * @since 4.1\n+     */\n+    public static <E> E find(final Iterator<E> iterator, final Predicate<? super E> predicate) {\n+        if (predicate == null) {\n+            throw new NullPointerException(\"Predicate must not be null\");\n+        }\n+\n+        if (iterator != null) {\n+            while (iterator.hasNext()) {\n+                final E element = iterator.next();\n+                if (predicate.evaluate(element)) {\n+                    return element;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n      * Answers true if a predicate is true for any element of the iterator.\n      * <p>\n      * A <code>null</code> or empty iterator returns false.\n--- a/src/main/java/org/apache/commons/collections4/functors/EqualPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/EqualPredicate.java\n  */\n package org.apache.commons.collections4.functors;\n \n-import static org.apache.commons.collections4.functors.NullPredicate.nullPredicate;\n+import static org.apache.commons.collections4.functors.NullPredicate.*;\n \n import java.io.Serializable;\n \n      * @param <T> the type that the predicate queries\n      * @param object  the object to compare to\n      * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null\n      */\n     public static <T> Predicate<T> equalPredicate(final T object) {\n         if (object == null) {\n      * @param object  the object to compare to\n      * @param equator  the equator to use for comparison\n      * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null\n      * @since 4.0\n      */\n     public static <T> Predicate<T> equalPredicate(final T object, final Equator<T> equator) {\n--- a/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n-import static org.apache.commons.collections4.functors.EqualPredicate.equalPredicate;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.apache.commons.collections4.functors.EqualPredicate.*;\n+import static org.junit.Assert.*;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n     }\n \n     @Test\n+    @Deprecated\n     public void find() {\n         Predicate<Number> testPredicate = equalPredicate((Number) 4);\n         Integer test = CollectionUtils.find(collectionA, testPredicate);\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     @Test\n+    @Deprecated\n     public void forAllDoCollection() {\n         final Closure<List<? extends Number>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n         final Collection<List<? extends Number>> col = new ArrayList<List<? extends Number>>();\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     @Test\n+    @Deprecated\n     public void forAllDoIterator() {\n         final Closure<List<? extends Number>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n         final Collection<List<? extends Number>> col = new ArrayList<List<? extends Number>>();\n     }\n \n     @Test(expected = FunctorException.class)\n+    @Deprecated\n     public void forAllDoFailure() {\n         final Closure<String> testClosure = ClosureUtils.invokerClosure(\"clear\");\n         final Collection<String> col = new ArrayList<String>();\n     @Test\n     public void getIterator() {\n         final Iterator<Integer> it = collectionA.iterator();\n-        assertEquals(Integer.valueOf(2), CollectionUtils.get(it, 2));\n+        assertEquals(Integer.valueOf(2), CollectionUtils.get((Object) it, 2));\n         assertTrue(it.hasNext());\n-        assertEquals(Integer.valueOf(4), CollectionUtils.get(it, 6));\n+        assertEquals(Integer.valueOf(4), CollectionUtils.get((Object) it, 6));\n         assertFalse(it.hasNext());\n     }\n \n         } // this is what we want\n     }\n \n-    @Test\n-    public void testContainsWithEquator() {\n-        final List<String> base = new ArrayList<String>();\n-        base.add(\"AC\");\n-        base.add(\"BB\");\n-        base.add(\"CA\");\n-\n-        final Equator<String> secondLetterEquator = new Equator<String>() {\n-\n-            public boolean equate(String o1, String o2) {\n-                return o1.charAt(1) == o2.charAt(1);\n-            }\n-\n-            public int hash(String o) {\n-                return o.charAt(1);\n-            }\n-\n-        };\n-\n-        assertFalse(base.contains(\"CC\"));\n-        assertTrue(CollectionUtils.contains(base, \"AC\", secondLetterEquator));\n-        assertTrue(CollectionUtils.contains(base, \"CC\", secondLetterEquator));\n-        assertFalse(CollectionUtils.contains(base, \"CX\", secondLetterEquator));\n-\n-        try {\n-            CollectionUtils.contains(null, null, secondLetterEquator);\n-            fail(\"expecting NullPointerException\");\n-        } catch (final NullPointerException npe) {\n-        } // this is what we want\n-\n-        try {\n-            CollectionUtils.contains(base, \"AC\", null);\n-            fail(\"expecting NullPointerException\");\n-        } catch (final NullPointerException npe) {\n-        } // this is what we want\n-      }\n }\n--- a/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IterableUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.apache.commons.collections4.functors.EqualPredicate.*;\n+import static org.junit.Assert.*;\n \n import java.util.ArrayList;\n import java.util.Collection;\n \n     @Before\n     public void setUp() {\n-        List<Integer> listA = new ArrayList<Integer>();\n-        listA.add(1);\n-        listA.add(2);\n-        listA.add(2);\n-        listA.add(3);\n-        listA.add(3);\n-        listA.add(3);\n-        listA.add(4);\n-        listA.add(4);\n-        listA.add(4);\n-        listA.add(4);\n-        iterableA = listA;\n+        Collection<Integer> collectionA = new ArrayList<Integer>();\n+        collectionA.add(1);\n+        collectionA.add(2);\n+        collectionA.add(2);\n+        collectionA.add(3);\n+        collectionA.add(3);\n+        collectionA.add(3);\n+        collectionA.add(4);\n+        collectionA.add(4);\n+        collectionA.add(4);\n+        collectionA.add(4);\n+        iterableA = collectionA;\n \n         Collection<Long> collectionB = new LinkedList<Long>();\n         collectionB.add(5L);\n \n     // -----------------------------------------------------------------------\n     @Test\n+    public void apply() {\n+        final List<Integer> listA = new ArrayList<Integer>();\n+        listA.add(1);\n+\n+        final List<Integer> listB = new ArrayList<Integer>();\n+        listB.add(2);\n+\n+        final Closure<List<Integer>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n+        final Collection<List<Integer>> col = new ArrayList<List<Integer>>();\n+        col.add(listA);\n+        col.add(listB);\n+        IterableUtils.apply(col, testClosure);\n+        assertTrue(listA.isEmpty() && listB.isEmpty());\n+        try {\n+            IterableUtils.apply(col, null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+\n+        IterableUtils.apply(null, testClosure);\n+\n+        // null should be OK\n+        col.add(null);\n+        IterableUtils.apply(col, testClosure);\n+    }\n+\n+    @Test(expected = FunctorException.class)\n+    public void applyFailure() {\n+        final Closure<String> testClosure = ClosureUtils.invokerClosure(\"clear\");\n+        final Collection<String> col = new ArrayList<String>();\n+        col.add(\"x\");\n+        IterableUtils.apply(col, testClosure);\n+    }\n+\n+    @Test\n+    public void containsWithEquator() {\n+        final List<String> base = new ArrayList<String>();\n+        base.add(\"AC\");\n+        base.add(\"BB\");\n+        base.add(\"CA\");\n+\n+        final Equator<String> secondLetterEquator = new Equator<String>() {\n+\n+            public boolean equate(String o1, String o2) {\n+                return o1.charAt(1) == o2.charAt(1);\n+            }\n+\n+            public int hash(String o) {\n+                return o.charAt(1);\n+            }\n+\n+        };\n+\n+        assertFalse(base.contains(\"CC\"));\n+        assertTrue(IterableUtils.contains(base, \"AC\", secondLetterEquator));\n+        assertTrue(IterableUtils.contains(base, \"CC\", secondLetterEquator));\n+        assertFalse(IterableUtils.contains(base, \"CX\", secondLetterEquator));\n+        assertFalse(IterableUtils.contains(null, null, secondLetterEquator));\n+\n+        try {\n+            IterableUtils.contains(base, \"AC\", null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (final NullPointerException npe) {\n+        } // this is what we want\n+    }\n+\n+    @Test\n+    public void find() {\n+        Predicate<Number> testPredicate = equalPredicate((Number) 4);\n+        Integer test = IterableUtils.find(iterableA, testPredicate);\n+        assertTrue(test.equals(4));\n+        testPredicate = equalPredicate((Number) 45);\n+        test = IterableUtils.find(iterableA, testPredicate);\n+        assertTrue(test == null);\n+        assertNull(IterableUtils.find(null,testPredicate));\n+        try {\n+            assertNull(IterableUtils.find(iterableA, null));\n+            fail(\"expecting NullPointerException\");\n+        } catch (final NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n     public void frequency() {\n         assertEquals(4, IterableUtils.frequency(iterableB, EQUALS_TWO));\n         assertEquals(0, IterableUtils.frequency(null, EQUALS_TWO));\n--- a/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n  */\n package org.apache.commons.collections4;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.apache.commons.collections4.functors.EqualPredicate.*;\n+import static org.easymock.EasyMock.*;\n+import static org.junit.Assert.*;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n import org.junit.Test;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n-\n-import static org.easymock.EasyMock.createMock;\n-import static org.easymock.EasyMock.expect;\n-import static org.easymock.EasyMock.replay;\n \n /**\n  * Tests for IteratorUtils.\n         };\n     }\n \n+    // -----------------------------------------------------------------------\n+    @Test\n+    public void apply() {\n+        final List<Integer> listA = new ArrayList<Integer>();\n+        listA.add(1);\n+\n+        final List<Integer> listB = new ArrayList<Integer>();\n+        listB.add(2);\n+\n+        final Closure<List<Integer>> testClosure = ClosureUtils.invokerClosure(\"clear\");\n+        final Collection<List<Integer>> col = new ArrayList<List<Integer>>();\n+        col.add(listA);\n+        col.add(listB);\n+        IteratorUtils.apply(col.iterator(), testClosure);\n+        assertTrue(listA.isEmpty() && listB.isEmpty());\n+        try {\n+            IteratorUtils.apply(col.iterator(), null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+\n+        IteratorUtils.apply(null, testClosure);\n+\n+        // null should be OK\n+        col.add(null);\n+        IteratorUtils.apply(col.iterator(), testClosure);\n+    }\n+\n+    @Test\n+    public void find() {\n+        Predicate<Number> testPredicate = equalPredicate((Number) 4);\n+        Integer test = IteratorUtils.find(iterableA.iterator(), testPredicate);\n+        assertTrue(test.equals(4));\n+        testPredicate = equalPredicate((Number) 45);\n+        test = IteratorUtils.find(iterableA.iterator(), testPredicate);\n+        assertTrue(test == null);\n+        assertNull(IteratorUtils.find(null,testPredicate));\n+        try {\n+            assertNull(IteratorUtils.find(iterableA.iterator(), null));\n+            fail(\"expecting NullPointerException\");\n+        } catch (final NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n     @Test\n     public void getFromIterator() throws Exception {\n         // Iterator, entry exists", "timestamp": 1433407975, "metainfo": ""}