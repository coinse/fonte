{"sha": "6a5cf652bef07d11a06c3afd0d844d89b01a5f83", "log": "add Reader/CharIterator adapters and tests   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/io/CharIteratorReader.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/io/Attic/CharIteratorReader.java,v 1.1 2003/04/16 19:45:13 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters.io;\n+\n+import java.io.Reader;\n+\n+import org.apache.commons.collections.primitives.CharIterator;\n+\n+/**\n+ * Adapts a {@link CharIterator} to the {@link Reader} interface.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/04/16 19:45:13 $\n+ * @author Rodney Waldhoff\n+ */\n+public class CharIteratorReader extends Reader {\n+\n+    public CharIteratorReader(CharIterator in) {\n+        this.iterator= in;\n+    }\n+\n+    public int read(char[] buf, int off, int len) {\n+        if(iterator.hasNext()) {\n+            int count = 0;\n+            while(iterator.hasNext() && count < len) {\n+                buf[off + count] = iterator.next();\n+                count++;\n+            }\n+            return count;\n+        } else {\n+            return -1;\n+        }\n+    }\n+    \n+    public void close() {        \n+    }\n+\n+    public static Reader adapt(CharIterator in) {\n+        return null == in ? null : new CharIteratorReader(in);\n+    }\n+    \n+    private CharIterator iterator = null;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/io/ReaderCharIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/io/Attic/ReaderCharIterator.java,v 1.1 2003/04/16 19:45:13 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters.io;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.primitives.CharIterator;\n+\n+/**\n+ * Adapts a {@link Reader} to the {@link CharIterator} interface.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/04/16 19:45:13 $\n+ * @author Rodney Waldhoff\n+ */\n+public class ReaderCharIterator implements CharIterator {\n+\n+    public ReaderCharIterator(Reader in) {\n+        this.reader = in;\n+    }\n+\n+    public static CharIterator adapt(Reader in) {\n+        return null == in ? null : new ReaderCharIterator(in);\n+    }\n+    \n+    public boolean hasNext() {\n+        ensureNextAvailable();\n+        return (-1 != next);\n+    }\n+\n+    public char next() {\n+        if(!hasNext()) {\n+            throw new NoSuchElementException(\"No next element\");\n+        } else {\n+            nextAvailable = false;\n+            return (char)next;\n+        }\n+    }\n+    \n+    /**\n+     * Not supported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public void remove() throws UnsupportedOperationException {\n+        throw new UnsupportedOperationException(\"remove() is not supported here\");\n+    }\n+\n+    private void ensureNextAvailable() {\n+        if(!nextAvailable) {\n+            readNext();\n+        }\n+    }\n+\n+    private void readNext() {\n+        try {\n+            next = reader.read();\n+            nextAvailable = true;\n+        } catch(IOException e) {\n+            // TODO: Fix me using tunneled exception, see \n+            // http://radio.weblogs.com/0122027/2003/04/01.html#a7\n+            // for example            \n+            throw new RuntimeException(e.toString());\n+        }\n+    }\n+    \n+    private Reader reader = null;\n+    private boolean nextAvailable = false;\n+    private int next;\n+\n+}\n--- a/src/test/org/apache/commons/collections/primitives/adapters/io/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/io/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/io/Attic/TestAll.java,v 1.2 2003/04/15 17:09:14 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/io/Attic/TestAll.java,v 1.3 2003/04/16 19:45:13 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/04/15 17:09:14 $\n+ * @version $Revision: 1.3 $ $Date: 2003/04/16 19:45:13 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n         suite.addTest(TestInputStreamByteIterator.suite());\n         suite.addTest(TestByteIteratorInputStream.suite());\n \n+        suite.addTest(TestReaderCharIterator.suite());\n+        suite.addTest(TestCharIteratorReader.suite());\n+\n         return suite;\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/io/TestCharIteratorReader.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/io/Attic/TestCharIteratorReader.java,v 1.1 2003/04/16 19:45:13 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters.io;\n+\n+import java.io.Reader;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.primitives.ArrayCharList;\n+import org.apache.commons.collections.primitives.CharList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/16 19:45:13 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestCharIteratorReader extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestCharIteratorReader(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestCharIteratorReader.class);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    \n+\n+\n+    // ------------------------------------------------------------------------\n+    \n+    public void testReadNonEmpty() throws Exception {\n+        String str = \"The quick brown fox jumped over the lazy dogs.\";\n+        CharList list = new ArrayCharList();\n+        for(int i = 0; i < str.length(); i++) {\n+            list.add(str.charAt(i));\n+        }\n+       \n+        Reader in = new CharIteratorReader(list.iterator());\n+        for(int i = 0; i < str.length(); i++) {\n+            assertEquals(str.charAt(i),in.read());\n+        }\n+        assertEquals(-1,in.read());\n+        assertEquals(-1,in.read());\n+    }\n+\n+    public void testReadEmpty() throws Exception {\n+        CharList list = new ArrayCharList();\n+        Reader in = new CharIteratorReader(list.iterator());\n+        assertEquals(-1,in.read());\n+        assertEquals(-1,in.read());\n+    }\n+\n+    public void testAdaptNull() {\n+        assertNull(CharIteratorReader.adapt(null));\n+    }\n+\n+    public void testAdaptNonNull() {\n+        assertNotNull(CharIteratorReader.adapt(new ArrayCharList().iterator()));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/io/TestReaderCharIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/io/Attic/TestReaderCharIterator.java,v 1.1 2003/04/16 19:45:13 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters.io;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.primitives.CharIterator;\n+import org.apache.commons.collections.primitives.TestCharIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/16 19:45:13 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestReaderCharIterator extends TestCharIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestReaderCharIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestReaderCharIterator.class);\n+    }\n+\n+    // ------------------------------------------------------------------------\n+    \n+    public boolean supportsRemove() {\n+        return false;\n+    }\n+\n+    protected CharIterator makeEmptyCharIterator() {\n+        return new ReaderCharIterator(new StringReader(\"\"));\n+    }\n+\n+    protected CharIterator makeFullCharIterator() {\n+        return new ReaderCharIterator(new StringReader(new String(getFullElements())));\n+    }\n+\n+    protected char[] getFullElements() {\n+        return \"The quick brown fox jumped over the lazy dogs.\".toCharArray();\n+    }\n+\n+\n+    // ------------------------------------------------------------------------\n+    \n+    public void testErrorThrowingReader() {\n+        Reader errReader = new Reader() {\n+            public int read(char[] buf, int off, int len) throws IOException {\n+                throw new IOException();\n+            }\n+            \n+            public void close() throws IOException {\n+            }\n+        };\n+        \n+        CharIterator iter = new ReaderCharIterator(errReader);\n+        try {\n+            iter.hasNext();\n+            fail(\"Expected RuntimeException\");\n+        } catch(RuntimeException e) {\n+            // expected\n+        } \n+        try {\n+            iter.next();\n+            fail(\"Expected RuntimeException\");\n+        } catch(RuntimeException e) {\n+            // expected\n+        } \n+    }\n+    \n+    public void testAdaptNull() {\n+        assertNull(ReaderCharIterator.adapt(null));\n+    }\n+\n+    public void testAdaptNonNull() {\n+        assertNotNull(ReaderCharIterator.adapt(new StringReader(\"\")));\n+    }\n+}", "timestamp": 1050522313, "metainfo": ""}