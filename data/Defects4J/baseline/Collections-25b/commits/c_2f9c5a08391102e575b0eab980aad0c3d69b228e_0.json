{"sha": "2f9c5a08391102e575b0eab980aad0c3d69b228e", "log": "Add additional getInstance() methods for consistency bugs 27856,27857   ", "commit": "\n--- a/src/java/org/apache/commons/collections/functors/CloneTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/CloneTransformer.java\n  * Clone is performed using <code>PrototypeFactory.getInstance(input).create()</code>.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     /** Serial version UID */\n     static final long serialVersionUID = -8188742709499652567L;\n \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Transformer INSTANCE = new CloneTransformer();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Transformer getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Constructor\n      */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n  * Closure implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     static final long serialVersionUID = 7179106032121985545L;\n     \n \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Closure INSTANCE = new ExceptionClosure();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Closure getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Restricted constructor.\n      */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n  * Factory implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     static final long serialVersionUID = 7179106032121985545L;\n     \n \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Factory INSTANCE = new ExceptionFactory();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Factory getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Restricted constructor.\n      */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n  * Predicate implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     /** Serial version UID */\n     static final long serialVersionUID = 7179106032121985545L;\n     \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Predicate INSTANCE = new ExceptionPredicate();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Predicate getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Restricted constructor.\n      */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n  * Transformer implementation that always throws an exception.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     static final long serialVersionUID = 7179106032121985545L;\n     \n \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Transformer INSTANCE = new ExceptionTransformer();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Transformer getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Restricted constructor.\n      */\n--- a/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n  * Predicate implementation that always returns false.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     /** Serial version UID */\n     static final long serialVersionUID = 7533784454832764388L;\n     \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Predicate INSTANCE = new FalsePredicate();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Predicate getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Restricted constructor.\n      */\n--- a/src/java/org/apache/commons/collections/functors/NOPClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/NOPClosure.java\n  * Closure implementation that does nothing.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     /** Serial version UID */\n     static final long serialVersionUID = 3518477308466486130L;\n \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Closure INSTANCE = new NOPClosure();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Closure getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Constructor\n      */\n--- a/src/java/org/apache/commons/collections/functors/NOPTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/NOPTransformer.java\n  * Transformer implementation that does nothing.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     /** Serial version UID */\n     static final long serialVersionUID = 2133891748318574490L;\n \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Transformer INSTANCE = new NOPTransformer();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Transformer getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Constructor\n      */\n--- a/src/java/org/apache/commons/collections/functors/NotNullPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NotNullPredicate.java\n  * Predicate implementation that returns true if the input is not null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     /** Serial version UID */\n     static final long serialVersionUID = 7533784454832764388L;\n     \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Predicate INSTANCE = new NotNullPredicate();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Predicate getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Restricted constructor.\n      */\n--- a/src/java/org/apache/commons/collections/functors/NullPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullPredicate.java\n  * Predicate implementation that returns true if the input is null.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     /** Serial version UID */\n     static final long serialVersionUID = 7533784454832764388L;\n     \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Predicate INSTANCE = new NullPredicate();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Predicate getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Restricted constructor.\n      */\n--- a/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n  * Transformer implementation that returns the <code>String.valueOf</code>.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.5 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     /** Serial version UID */\n     static final long serialVersionUID = 7511110693171758606L;\n \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Transformer INSTANCE = new StringValueTransformer();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Transformer getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Restricted constructor.\n      */\n--- a/src/java/org/apache/commons/collections/functors/TruePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TruePredicate.java\n  * Predicate implementation that always returns true.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:59:20 $\n+ * @version $Revision: 1.4 $ $Date: 2004/03/31 22:06:11 $\n  *\n  * @author Stephen Colebourne\n  */\n     /** Serial version UID */\n     static final long serialVersionUID = 3374767158756189740L;\n     \n-    /** Singleton predicate instance */    \n+    /** Singleton predicate instance */\n     public static final Predicate INSTANCE = new TruePredicate();\n-    \n+\n+    /**\n+     * Factory returning the singleton instance.\n+     * \n+     * @return the singleton instance\n+     */\n+    public static Predicate getInstance() {\n+        return INSTANCE;\n+    }\n+\n     /**\n      * Restricted constructor.\n      */", "timestamp": 1080770772, "metainfo": ""}