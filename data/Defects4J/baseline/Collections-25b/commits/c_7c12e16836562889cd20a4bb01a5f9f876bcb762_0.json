{"sha": "7c12e16836562889cd20a4bb01a5f9f876bcb762", "log": "Improve javadoc description of what a MultiMap is   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MultiMap.java\n+++ b/src/java/org/apache/commons/collections/MultiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MultiMap.java,v 1.4 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MultiMap.java,v 1.5 2002/11/24 19:33:19 scolebourne Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/11/24 19:33:19 $\n  *\n  * ====================================================================\n  *\n \n /** \n  * This is simply a Map with slightly different semantics.\n- * Instead of returning an Object, it returns a Collection.\n- * So for example, you can put( key, new Integer(1) ); \n- * and then a Object get( key ); will return you a Collection \n- * instead of an Integer.\n- * Thus, this is simply a tag interface.\n+ * <p>\n+ * A <code>MultiMap</code> is a Map with slightly different semantics.\n+ * Putting a value into the map will add the value to a Collection at that\n+ * key. Getting a value will always return a Collection, holding all the\n+ * values put to that key. This implementation uses an ArrayList as the \n+ * collection.\n+ * <p>\n+ * For example:\n+ * <pre>\n+ * MultiMap mhm = new MultiHashMap();\n+ * mhm.put(key, \"A\");\n+ * mhm.put(key, \"B\");\n+ * mhm.put(key, \"C\");\n+ * Collection coll = (Collection) mhm.get(key);</pre>\n+ * <p>\n+ * <code>coll</code> will be a list containing \"A\", \"B\", \"C\".\n  *\n  * @since 2.0\n  * @author Christopher Berry\n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ * @author Stephen Colebourne\n  */\n public interface MultiMap extends Map {\n     \n-    public Object remove( Object key, Object item );\n+    /**\n+     * Removes a specific value from map.\n+     * <p>\n+     * The item is removed from the collection mapped to the specified key.\n+     * \n+     * @param key  the key to remove from\n+     * @param value  the value to remove\n+     * @return the value removed (which was passed in)\n+     */\n+    public Object remove(Object key, Object item);\n    \n }", "timestamp": 1038166399, "metainfo": ""}