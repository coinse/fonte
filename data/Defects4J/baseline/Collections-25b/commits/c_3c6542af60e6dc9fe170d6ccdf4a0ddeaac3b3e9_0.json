{"sha": "3c6542af60e6dc9fe170d6ccdf4a0ddeaac3b3e9", "log": "Make the base collection available to listeners   ", "commit": "\n--- a/src/java/org/apache/commons/collections/observed/ModificationEvent.java\n+++ b/src/java/org/apache/commons/collections/observed/ModificationEvent.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationEvent.java,v 1.1 2003/09/03 23:54:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationEvent.java,v 1.2 2003/09/07 10:33:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * This class can be used as is, but generally it is subclassed.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/03 23:54:26 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/07 10:33:32 $\n  * \n  * @author Stephen Colebourne\n  */\n public class ModificationEvent extends EventObject {\n \n     /** The source collection */\n-    protected final Collection collection;\n+    protected final ObservedCollection collection;\n     /** The handler */\n     protected final ModificationHandler handler;\n     /** The event code */\n     /**\n      * Constructor.\n      * \n-     * @param collection  the event source\n+     * @param obsCollection  the event source\n      * @param handler  the handler\n      * @param type  the event type\n      */\n     public ModificationEvent(\n-        final Collection collection,\n+        final ObservedCollection obsCollection,\n         final ModificationHandler handler,\n         final int type) {\n \n-        super(collection);\n-        this.collection = collection;\n+        super(obsCollection);\n+        this.collection = obsCollection;\n         this.handler = handler;\n         this.type = type;\n     }\n     /**\n      * Gets the collection the event is reporting on.\n      * <p>\n-     * This method returns the <code>ObservedCollection</code> instance.\n-     * If this collection is wrapped, by a synchronized wrapper for example,\n-     * changing this collection will bypass the wrapper. For the synchronized\n-     * example, this will be OK so long as the event is processed in the same\n-     * thread and program stack as the modification was made in.\n+     * Using this collection will bypass any decorators that have been added\n+     * to the <code>ObservedCollection</code>. For example, if a synchronized\n+     * decorator was added it will not be called by changes to this collection.\n+     * <p>\n+     * For the synchronization case, you are normally OK however. If you\n+     * process the event in the same thread as the original change then your\n+     * code will be protected by the original synchronized decorator and this\n+     * collection may be used freely.\n      * \n      * @return the collection\n      */\n-    public Collection getSourceCollection() {\n+    public ObservedCollection getObservedCollection() {\n         return collection;\n+    }\n+\n+    /**\n+     * Gets the base collection underlying the observed collection.\n+     * <p>\n+     * Using this collection will bypass the event sending mechanism.\n+     * It will also bypass any other decorators, such as synchronization.\n+     * Use with care.\n+     * \n+     * @return the collection\n+     */\n+    public Collection getBaseCollection() {\n+        return handler.getBaseCollection();\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/observed/ModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/observed/ModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationHandler.java,v 1.3 2003/09/07 00:51:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ModificationHandler.java,v 1.4 2003/09/07 10:33:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>preXxx</code> and <code>postXxx</code> naming convention.\n  * It also provides a default implementation that forwards to single methods.\n  * <p>\n+ * To write your own handler, you will normally subclass and override the\n+ * <code>preEvent</code> and <code>postEvent</code> methods. However, you\n+ * could choose to override any individual event method.\n+ * <p>\n  * This class could have been implemented as an interface, however to do so\n  * would prevent the addition of extra events in the future. It does mean\n  * that if you subclass this class, you must check it when you upgrade to a\n  * later collections release.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/09/07 00:51:31 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/07 10:33:32 $\n  * \n  * @author Stephen Colebourne\n  */\n-public abstract class ModificationHandler {\n+public class ModificationHandler {\n     \n     /** Singleton factory */\n     static final ModificationHandlerFactory FACTORY = new Factory();\n     \n     /** The collection being observed */\n-    private ObservedCollection collection = null;\n+    private ObservedCollection obsCollection = null;\n+    /** The underlying base collection being decorated */\n+    private Collection baseCollection = null;\n     /** The root handler */\n-    protected final ModificationHandler rootHandler;\n+    private final ModificationHandler rootHandler;\n     /** The range offset, 0 if not a range */\n-    protected final int rangeOffset;\n+    private final int rangeOffset;\n     \n     // Constructors\n     //-----------------------------------------------------------------------\n      * All other methods will throw NullPointerException until then.\n      * \n      * @param coll  the observed collection, must not be null\n+     * @param baseColl  the base collection, must not be null\n      * @throws IllegalArgumentException if the collection is null\n      * @throws IllegalStateException if init has already been called\n      */\n-    void init(final ObservedCollection coll) {\n+    void init(final ObservedCollection coll, Collection baseColl) {\n         if (coll == null) {\n             throw new IllegalArgumentException(\"Collection must not be null\");\n         }\n-        if (this.collection != null) {\n+        if (baseColl == null) {\n+            throw new IllegalArgumentException(\"Base Collection must not be null\");\n+        }\n+        if (this.obsCollection != null) {\n             throw new IllegalArgumentException(\"init() has already been called\");\n         }\n-        this.collection = coll;\n-    }\n-\n-    // Collection access\n+        this.obsCollection = coll;\n+        this.baseCollection = baseColl;\n+    }\n+\n+    // Field access\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the observed collection.\n      * \n      * @return the observed collection\n      */\n-    public ObservedCollection getCollection() {\n-        return collection;\n+    public ObservedCollection getObservedCollection() {\n+        return obsCollection;\n+    }\n+    \n+    /**\n+     * Gets the base collection.\n+     * \n+     * @return the base collection\n+     */\n+    protected Collection getBaseCollection() {\n+        return baseCollection;\n+    }\n+    \n+    /**\n+     * Gets the root handler.\n+     * \n+     * @return the root handler\n+     */\n+    protected ModificationHandler getRootHandler() {\n+        return rootHandler;\n+    }\n+    \n+    /**\n+     * Gets the range offset.\n+     * \n+     * @return the range offset\n+     */\n+    protected int getRangeOffset() {\n+        return rangeOffset;\n     }\n     \n     // PreListeners\n     //-----------------------------------------------------------------------\n     /**\n      * Handles the pre event.\n+     * <p>\n+     * This implementation does nothing.\n      * \n      * @param type  the event type to send\n      * @param index  the index where the change starts, the method param or derived\n      * @param range  the range collection, null if no range\n      * @param rangeOffset  the offset of the range, -1 if unknown\n      */\n-    protected abstract boolean preEvent(\n+    protected boolean preEvent(\n             int type, int index, Object object, int repeat,\n-            Object previous, ObservedCollection range, int rangeOffset);\n+            Object previous, ObservedCollection range, int rangeOffset) {\n+        return true;\n+    }\n \n     /**\n      * Handles the post event.\n+     * <p>\n+     * This implementation does nothing.\n      * \n      * @param modified  true if the method succeeded in changing the collection\n      * @param type  the event type to send\n      * @param range  the range collection, null if no range\n      * @param rangeOffset  the offset of the range, -1 if unknown\n      */\n-    protected abstract void postEvent(\n+    protected void postEvent(\n             boolean modified, int type, int index, Object object, int repeat,\n-            Object previous, ObservedCollection range, int rangeOffset);\n+            Object previous, ObservedCollection range, int rangeOffset) {\n+    }\n \n     // Event handling\n     //-----------------------------------------------------------------------\n         return new SubListHandler(rootHandler, fromIndex + rangeOffset);\n     }\n     \n-    protected class SubListHandler extends ModificationHandler {\n+    protected static class SubListHandler extends ModificationHandler {\n         \n         /**\n          * Constructor.\n                 int type, int index, Object object, int repeat,\n                 Object previous, ObservedCollection ignoredRange, int ignoredOffset) {\n \n-            return rootHandler.preEvent(\n+            return getRootHandler().preEvent(\n                 type, index, object, repeat,\n-                previous, getCollection(), this.rangeOffset);\n+                previous, getObservedCollection(), getRangeOffset());\n         }\n \n         /**\n                 boolean modified, int type, int index, Object object, int repeat,\n                 Object previous, ObservedCollection ignoredRange, int ignoredOffset) {\n \n-            rootHandler.postEvent(\n+            getRootHandler().postEvent(\n                 modified, type, index, object, repeat,\n-                previous, getCollection(), this.rangeOffset);\n+                previous, getObservedCollection(), getRangeOffset());\n         }\n     }\n     \n         if (pos != -1) {\n             name = name.substring(pos + 1);\n         }\n-        return name + '[' + (collection == null ? \"\" : \"initialised\") + ']';\n+        return name + '[' + (obsCollection == null ? \"\" : \"initialised\") + ']';\n     }\n \n     // Factory to create handler from handler\n--- a/src/java/org/apache/commons/collections/observed/ObservedCollection.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservedCollection.java,v 1.3 2003/09/07 00:51:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservedCollection.java,v 1.4 2003/09/07 10:33:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * See this class for details of configuration available.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/09/07 00:51:31 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/07 10:33:32 $\n  * \n  * @author Stephen Colebourne\n  */\n             final Object listener) {\n         super(coll);\n         this.handler = createHandler(coll, listener);\n-        this.handler.init(this);\n+        this.handler.init(this, coll);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/observed/ObservedList.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservedList.java,v 1.3 2003/09/07 00:51:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservedList.java,v 1.4 2003/09/07 10:33:32 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n package org.apache.commons.collections.observed;\n \n import java.util.Collection;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n \n  * base <code>List</code>.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/09/07 00:51:31 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/07 10:33:32 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardModificationEvent.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardModificationEvent.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationEvent.java,v 1.4 2003/09/07 00:51:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationEvent.java,v 1.5 2003/09/07 10:33:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * All objects used are the real objects from the method calls, not clones.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/09/07 00:51:31 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/07 10:33:33 $\n  * \n  * @author Stephen Colebourne\n  */\n     /**\n      * Constructor.\n      * \n-     * @param collection  the event source\n+     * @param obsCollection  the event source\n      * @param handler  the handler\n      * @param type  the event type\n      * @param preSize  the size before the change\n      * @param rangeOffset  the offset of the range, -1 if unknown\n      */\n     public StandardModificationEvent(\n-        final Collection collection,\n+        final ObservedCollection obsCollection,\n         final ModificationHandler handler,\n         final int type,\n         final int preSize,\n         final ObservedCollection range,\n         final int rangeOffset) {\n \n-        super(collection, handler, type);\n+        super(obsCollection, handler, type);\n         this.preSize = preSize;\n         this.index = index;\n         this.object = object;\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationHandler.java,v 1.3 2003/09/07 00:51:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardModificationHandler.java,v 1.4 2003/09/07 10:33:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * modification events.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/09/07 00:51:31 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/07 10:33:33 $\n  * \n  * @author Stephen Colebourne\n  */\n             int type, int index, Object object,\n             int repeat, Object previous, ObservedCollection range, int rangeOffset) {\n \n-        preSize = getCollection().size();\n+        preSize = getObservedCollection().size();\n         return firePreEvent(type, index, object, repeat, previous, range, rangeOffset);\n     }\n \n                     if ((holder.mask & type) > 0) {\n                         if (event == null) {\n                             event = new StandardPreModificationEvent(\n-                                getCollection(), this, type, preSize, index, object,\n+                                getObservedCollection(), this, type, preSize, index, object,\n                                 repeat, previous, range, rangeOffset);\n                         }\n                         holder.listener.modificationOccurring(event);\n                     if ((holder.mask & type) > 0) {\n                         if (event == null) {\n                             event = new StandardPostModificationEvent(\n-                                getCollection(), this, type, preSize, index,\n+                                getObservedCollection(), this, type, preSize, index,\n                                 object, repeat, previous, range, rangeOffset);\n                         }\n                         holder.listener.modificationOccurred(event);\n--- a/src/java/org/apache/commons/collections/observed/standard/StandardPostModificationEvent.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardPostModificationEvent.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPostModificationEvent.java,v 1.2 2003/09/07 00:51:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPostModificationEvent.java,v 1.3 2003/09/07 10:33:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.observed.standard;\n \n-import java.util.Collection;\n-\n import org.apache.commons.collections.observed.ModificationHandler;\n import org.apache.commons.collections.observed.ObservedCollection;\n \n  * All objects used are the real objects from the method calls, not clones.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/07 00:51:31 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/07 10:33:33 $\n  * \n  * @author Stephen Colebourne\n  */\n     /**\n      * Constructor.\n      * \n-     * @param collection  the event source\n+     * @param obsCollection  the event source\n      * @param handler  the handler\n      * @param type  the event type\n      * @param preSize  the size before the change\n      * @param rangeOffset  the offset of the range, -1 if unknown\n      */\n     public StandardPostModificationEvent(\n-        final Collection collection,\n+        final ObservedCollection obsCollection,\n         final ModificationHandler handler,\n         final int type,\n         final int preSize,\n         final ObservedCollection range,\n         final int rangeOffset) {\n \n-        super(collection, handler, type, preSize, index, object, repeat, previous, range, rangeOffset);\n+        super(obsCollection, handler, type, preSize, index,\n+            object, repeat, previous, range, rangeOffset);\n         postSize = collection.size();\n     }\n \n--- a/src/java/org/apache/commons/collections/observed/standard/StandardPreModificationEvent.java\n+++ b/src/java/org/apache/commons/collections/observed/standard/StandardPreModificationEvent.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPreModificationEvent.java,v 1.2 2003/09/07 00:51:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPreModificationEvent.java,v 1.3 2003/09/07 10:33:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.observed.standard;\n \n-import java.util.Collection;\n-\n import org.apache.commons.collections.observed.ModificationHandler;\n import org.apache.commons.collections.observed.ObservedCollection;\n \n  * All objects used are the real objects from the method calls, not clones.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/07 00:51:31 $\n+ * @version $Revision: 1.3 $ $Date: 2003/09/07 10:33:33 $\n  * \n  * @author Stephen Colebourne\n  */\n     /**\n      * Constructor.\n      * \n-     * @param collection  the event source\n+     * @param obsCollection  the event source\n      * @param handler  the handler\n      * @param type  the event type\n      * @param preSize  the size before the change\n      * @param previous  the previous value being removed/replaced\n      */\n     public StandardPreModificationEvent(\n-        final Collection collection,\n+        final ObservedCollection obsCollection,\n         final ModificationHandler handler,\n         final int type,\n         final int preSize,\n         final ObservedCollection range,\n         final int rangeOffset) {\n \n-        super(collection, handler, type, preSize, index, object, repeat, previous, range, rangeOffset);\n+        super(obsCollection, handler, type, preSize, index,\n+            object, repeat, previous, range, rangeOffset);\n     }\n \n }\n--- a/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n+++ b/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.4 2003/09/07 00:51:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.5 2003/09/07 10:33:33 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link ObservedCollection} implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/09/07 00:51:32 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/07 10:33:33 $\n  * \n  * @author Stephen Colebourne\n  */\n         coll.add(SIX);\n         Assert.assertEquals(1, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(0, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeChange());\n         Assert.assertEquals(false, LISTENER.postEvent.isTypeBulk());\n         \n+        // this isn't a full test, but...\n+        Assert.assertEquals(false, LISTENER.postEvent.getBaseCollection() instanceof ObservedCollection);\n+        \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertEquals(1, coll.size());\n         coll.add(SEVEN);\n         Assert.assertEquals(2, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(1, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         coll.add(SIX_SEVEN_LIST);\n         Assert.assertEquals(3, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         coll.add(1, EIGHT);\n         Assert.assertEquals(3, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_INDEXED, LISTENER.preEvent.getType());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_INDEXED, LISTENER.postEvent.getType());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n         coll.add(EIGHT, 3);\n         Assert.assertEquals(5, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_NCOPIES, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_NCOPIES, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         it.add(EIGHT);\n         Assert.assertEquals(3, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_ITERATED, LISTENER.preEvent.getType());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_ITERATED, LISTENER.postEvent.getType());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n         coll.addAll(SIX_SEVEN_LIST);\n         Assert.assertEquals(2, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_ALL, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(0, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_ALL, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         coll.addAll(1, SIX_SEVEN_LIST);\n         Assert.assertEquals(4, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_ALL_INDEXED, LISTENER.preEvent.getType());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_ALL_INDEXED, LISTENER.postEvent.getType());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n         coll.clear();\n         Assert.assertEquals(0, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.CLEAR, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.CLEAR, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         coll.remove(SEVEN);\n         Assert.assertEquals(1, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         coll.remove(0);\n         Assert.assertEquals(1, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_INDEXED, LISTENER.preEvent.getType());\n         Assert.assertEquals(0, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_INDEXED, LISTENER.postEvent.getType());\n         Assert.assertEquals(0, LISTENER.postEvent.getChangeIndex());\n         coll.remove(SEVEN, 3);\n         Assert.assertEquals(10, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_NCOPIES, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(13, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_NCOPIES, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         it.remove();\n         Assert.assertEquals(1, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_ITERATED, LISTENER.preEvent.getType());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(SEVEN, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_ITERATED, LISTENER.postEvent.getType());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n         it.remove();\n         Assert.assertEquals(1, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_ITERATED, LISTENER.preEvent.getType());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(SEVEN, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_ITERATED, LISTENER.postEvent.getType());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n         coll.removeAll(SIX_SEVEN_LIST);\n         Assert.assertEquals(1, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_ALL, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(3, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_ALL, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         coll.retainAll(SIX_SEVEN_LIST);\n         Assert.assertEquals(2, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.RETAIN_ALL, LISTENER.preEvent.getType());\n         Assert.assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(3, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.RETAIN_ALL, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         coll.set(0, EIGHT);\n         Assert.assertEquals(2, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.SET_INDEXED, LISTENER.preEvent.getType());\n         Assert.assertEquals(0, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(null, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.SET_INDEXED, LISTENER.postEvent.getType());\n         Assert.assertEquals(0, LISTENER.postEvent.getChangeIndex());\n         it.set(EIGHT);\n         Assert.assertEquals(2, coll.size());\n         // pre\n-        Assert.assertSame(coll, LISTENER.preEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.SET_ITERATED, LISTENER.preEvent.getType());\n         Assert.assertEquals(1, LISTENER.preEvent.getChangeIndex());\n         Assert.assertSame(SEVEN, LISTENER.preEvent.getPrevious());\n         Assert.assertEquals(2, LISTENER.preEvent.getPreSize());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.SET_ITERATED, LISTENER.postEvent.getType());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n         subList.add(EIGHT);\n         Assert.assertEquals(4, subList.size());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n         subList.add(1, EIGHT);\n         Assert.assertEquals(5, subList.size());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.ADD_INDEXED, LISTENER.postEvent.getType());\n         Assert.assertEquals(2, LISTENER.postEvent.getChangeIndex());\n         subList.set(3, SEVEN);\n         Assert.assertEquals(5, subList.size());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.SET_INDEXED, LISTENER.postEvent.getType());\n         Assert.assertEquals(4, LISTENER.postEvent.getChangeIndex());\n         it.remove();\n         Assert.assertEquals(4, subList.size());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.REMOVE_ITERATED, LISTENER.postEvent.getType());\n         Assert.assertEquals(1, LISTENER.postEvent.getChangeIndex());\n         it.set(EIGHT);\n         Assert.assertEquals(4, subList.size());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.SET_ITERATED, LISTENER.postEvent.getType());\n         Assert.assertEquals(3, LISTENER.postEvent.getChangeIndex());\n         subList.clear();\n         Assert.assertEquals(0, subList.size());\n         // post\n-        Assert.assertSame(coll, LISTENER.postEvent.getSourceCollection());\n+        Assert.assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         Assert.assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n         Assert.assertEquals(ModificationEventType.CLEAR, LISTENER.postEvent.getType());\n         Assert.assertEquals(-1, LISTENER.postEvent.getChangeIndex());", "timestamp": 1062930813, "metainfo": ""}