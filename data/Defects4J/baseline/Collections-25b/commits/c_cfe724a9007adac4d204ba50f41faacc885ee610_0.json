{"sha": "cfe724a9007adac4d204ba50f41faacc885ee610", "log": "Applying Fredrik Kjellberg's patch that adds getIteratorIndex() as per COLLECTIONS-289  ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/CollatingIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/CollatingIterator.java\n         it.remove();\n     }\n \n+    /**\n+     * Returns the index of the iterator that returned the last element.\n+     * \n+     * @return the index of the iterator that returned the last element\n+     * @throws IllegalStateException if there is no last returned element\n+     */\n+    public int getIteratorIndex() {\n+        if (lastReturned == -1) {\n+            throw new IllegalStateException(\"No value has been returned yet\");\n+        }\n+        \n+        return lastReturned;\n+    }\n+    \n     // Private Methods\n     // -------------------------------------------------------------------\n     /** \n--- a/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java\n         for(int i=0;i<evens.size();i++) {\n             assertTrue(iter.hasNext());\n             assertEquals(evens.get(i),iter.next());\n+            assertEquals(0,iter.getIteratorIndex());\n         }\n         assertTrue(!iter.hasNext());\n     }\n         for(int i=0;i<20;i++) {\n             assertTrue(iter.hasNext());\n             assertEquals(new Integer(i),iter.next());\n+            assertEquals(i % 2,iter.getIteratorIndex());\n         }\n         assertTrue(!iter.hasNext());\n     }\n         for(int i=0;i<20;i++) {\n             assertTrue(iter.hasNext());\n             assertEquals(new Integer(i),iter.next());\n+            assertEquals((i % 2) == 0 ? 1 : 0,iter.getIteratorIndex());\n         }\n         assertTrue(!iter.hasNext());\n     }\n         for(int i=0;i<evens.size();i++) {\n             assertTrue(iter.hasNext());\n             assertEquals(evens.get(i),iter.next());\n+            assertEquals(0,iter.getIteratorIndex());\n             assertTrue(iter.hasNext());\n             assertEquals(evens.get(i),iter.next());\n+            assertEquals(1,iter.getIteratorIndex());\n         }\n         assertTrue(!iter.hasNext());\n     }\n         iter.addIterator(odds.iterator());\n         \n         assertEquals(new Integer(0),iter.next());  // even   0\n+        assertEquals(1,iter.getIteratorIndex());\n         assertEquals(new Integer(1),iter.next());  // fib    1\n+        assertEquals(0,iter.getIteratorIndex());\n         assertEquals(new Integer(1),iter.next());  // fib    1\n+        assertEquals(0,iter.getIteratorIndex());\n         assertEquals(new Integer(1),iter.next());  // odd    1\n+        assertEquals(2,iter.getIteratorIndex());\n         assertEquals(new Integer(2),iter.next());  // fib    2\n+        assertEquals(0,iter.getIteratorIndex());\n         assertEquals(new Integer(2),iter.next());  // even   2\n+        assertEquals(1,iter.getIteratorIndex());\n         assertEquals(new Integer(3),iter.next());  // fib    3\n+        assertEquals(0,iter.getIteratorIndex());\n         assertEquals(new Integer(3),iter.next());  // odd    3\n+        assertEquals(2,iter.getIteratorIndex());\n         assertEquals(new Integer(4),iter.next());  // even   4\n+        assertEquals(1,iter.getIteratorIndex());\n         assertEquals(new Integer(5),iter.next());  // fib    5\n+        assertEquals(0,iter.getIteratorIndex());\n         assertEquals(new Integer(5),iter.next());  // odd    5\n+        assertEquals(2,iter.getIteratorIndex());\n         assertEquals(new Integer(6),iter.next());  // even   6\n+        assertEquals(1,iter.getIteratorIndex());\n         assertEquals(new Integer(7),iter.next());  // odd    7\n+        assertEquals(2,iter.getIteratorIndex());\n         assertEquals(new Integer(8),iter.next());  // fib    8\n+        assertEquals(0,iter.getIteratorIndex());\n         assertEquals(new Integer(8),iter.next());  // even   8\n+        assertEquals(1,iter.getIteratorIndex());\n         assertEquals(new Integer(9),iter.next());  // odd    9\n+        assertEquals(2,iter.getIteratorIndex());\n         assertEquals(new Integer(10),iter.next()); // even  10\n+        assertEquals(1,iter.getIteratorIndex());\n         assertEquals(new Integer(11),iter.next()); // odd   11\n+        assertEquals(2,iter.getIteratorIndex());\n         assertEquals(new Integer(12),iter.next()); // even  12\n+        assertEquals(1,iter.getIteratorIndex());\n         assertEquals(new Integer(13),iter.next()); // fib   13\n+        assertEquals(0,iter.getIteratorIndex());\n         assertEquals(new Integer(13),iter.next()); // odd   13\n+        assertEquals(2,iter.getIteratorIndex());\n         assertEquals(new Integer(14),iter.next()); // even  14\n+        assertEquals(1,iter.getIteratorIndex());\n         assertEquals(new Integer(15),iter.next()); // odd   15\n+        assertEquals(2,iter.getIteratorIndex());\n         assertEquals(new Integer(16),iter.next()); // even  16\n+        assertEquals(1,iter.getIteratorIndex());\n         assertEquals(new Integer(17),iter.next()); // odd   17\n+        assertEquals(2,iter.getIteratorIndex());\n         assertEquals(new Integer(18),iter.next()); // even  18\n+        assertEquals(1,iter.getIteratorIndex());\n         assertEquals(new Integer(19),iter.next()); // odd   19\n+        assertEquals(2,iter.getIteratorIndex());\n         assertEquals(new Integer(21),iter.next()); // fib   21\n+        assertEquals(0,iter.getIteratorIndex());\n \n         assertTrue(!iter.hasNext());\n     }", "timestamp": 1205898199, "metainfo": ""}