{"sha": "7bbdeabc0539c560e07e2272fb92185e17986587", "log": "Fix escaping behaviour of save method bug 19061, from Mohan Kishore, reported by Dariusz Wojtas   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ExtendedProperties.java,v 1.12 2003/06/20 07:59:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ExtendedProperties.java,v 1.13 2003/08/24 10:50:58 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *   the comma.\n  *  </li>\n  *  <li>\n+ *   Backslashes are escaped by using two consecutive backslashes i.e. \\\\\n+ *  </li>\n+ *  <li>\n  *   If a <i>key</i> is used more than once, the values are appended\n  *   like if they were on the same line separated with commas.\n  *  </li>\n  * it, go ahead and tune it up!\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.12 $ $Date: 2003/06/20 07:59:59 $\n+ * @version $Revision: 1.13 $ $Date: 2003/08/24 10:50:58 $\n  * \n  * @author <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>\n  * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author <a href=\"mailto:ipriha@surfeu.fi\">Ilkka Priha</a>\n  * @author Janek Bogucki\n+ * @author Mohan Kishore\n  */\n public class ExtendedProperties extends Hashtable {\n     \n         \n         return result.toString();\n     }\n+    \n+    /**\n+     * Inserts a backslash before every comma and backslash. \n+     */\n+    private static String escape(String s) {\n+        StringBuffer buf = new StringBuffer(s);\n+        for (int i=0; i < buf.length();i++) {\n+            char c = buf.charAt(i);\n+            if (c == ',' || c == '\\\\') {\n+                buf.insert(i, '\\\\');\n+                i++;\n+            }\n+        }\n+        return buf.toString();\n+    }\n+    \n+    /**\n+     * Removes a backslash from every pair of backslashes. \n+     */\n+    private static String unescape(String s) {\n+        StringBuffer buf = new StringBuffer(s);\n+        for (int i=0; i < buf.length()-1;i++) {\n+            char c1 = buf.charAt(i);\n+            char c2 = buf.charAt(i+1);\n+            if (c1 == '\\\\' && c2 == '\\\\') {\n+                buf.deleteCharAt(i);\n+            }\n+        }\n+        return buf.toString();\n+    }\n+    \n+    /**\n+     * Counts the number of successive times 'ch' appears in the\n+     * 'line' before the position indicated by the 'index'.\n+     */\n+    private static int countPreceding(String line, int index, char ch) {\n+        int i;\n+        for (i = index-1; i >= 0; i--) {\n+            if (line.charAt(i) != ch) break;\n+        }\n+        return index-1-i;\n+    }\n+    \n+    /**\n+     * Checks if the line ends with odd number of backslashes \n+     */\n+    private static boolean endsWithSlash(String line) {\n+        if (!line.endsWith(\"\\\\\")) return false;\n+\n+        return (countPreceding(line, line.length()-1, '\\\\') % 2 == 0);\n+    }\n \n     /**\n      * This class is used to read properties lines.  These lines do\n                     String line = readLine().trim();\n                     if ((line.length() != 0) && (line.charAt(0) != '#'))\n                     {\n-                        if (line.endsWith(\"\\\\\"))\n+                        if (endsWithSlash(line))\n                         {\n                             line = line.substring(0, line.length() - 1);\n                             buffer.append(line);\n             while (hasMoreTokens())\n             {\n                 String token = super.nextToken();\n-                if (token.endsWith(\"\\\\\"))\n+                if (endsWithSlash(token))\n                 {\n                     buffer.append(token.substring(0, token.length() - 1));\n                     buffer.append(DELIMITER);\n                      * just goes in rather than risking vectorization\n                      * if it contains an escaped comma\n                      */\n-                    addStringProperty(key,value);\n+                    addStringProperty(key,unescape(value));\n                 }\n             }\n             else\n                  * to perform operations with configuration\n                  * in a definite order it will be possible.\n                  */\n-\n+                if (token instanceof String) {\n+                    token = unescape((String)token);\n+                }\n                 addPropertyDirect( key, token );\n             }                \n         }\n                         StringBuffer currentOutput = new StringBuffer();\n                         currentOutput.append(key);\n                         currentOutput.append(\"=\");\n-                        currentOutput.append((String) value);\n+                        currentOutput.append(escape((String) value));\n                         theWrtr.println(currentOutput.toString());\n                     }\n                     else if(value instanceof Vector)\n                             StringBuffer currentOutput = new StringBuffer();\n                             currentOutput.append(key);\n                             currentOutput.append(\"=\");\n-                            currentOutput.append(currentElement);\n+                            currentOutput.append(escape(currentElement));\n                             theWrtr.println(currentOutput.toString());\n                         }\n                     }\n--- a/src/test/org/apache/commons/collections/TestExtendedProperties.java\n+++ b/src/test/org/apache/commons/collections/TestExtendedProperties.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestExtendedProperties.java,v 1.4 2001/09/21 03:15:15 jvanzyl Exp $\n- * $Revision: 1.4 $\n- * $Date: 2001/09/21 03:15:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestExtendedProperties.java,v 1.5 2003/08/24 10:50:58 scolebourne Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/08/24 10:50:58 $\n  *\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import java.io.*;\n+\n /**\n- *   Tests some basic functions of the ExtendedProperties\n- *   class\n+ * Tests some basic functions of the ExtendedProperties\n+ * class\n  * \n- *   @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n- *   @version $Id: TestExtendedProperties.java,v 1.4 2001/09/21 03:15:15 jvanzyl Exp $\n+ * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n+ * @author Mohan Kishore\n+ * @version $Id: TestExtendedProperties.java,v 1.5 2003/08/24 10:50:58 scolebourne Exp $\n  */\n public class TestExtendedProperties extends TestCase\n {\n         String dbProp = \"/home/applicationRoot/db/hypersonic\";\n         assertTrue(\"Checking interpolated variable\", eprop.getString(\"db\").equals(dbProp));\n     }\n+    \n+    public void testSaveAndLoad() {\n+        ExtendedProperties ep1 = new ExtendedProperties();\n+        ExtendedProperties ep2 = new ExtendedProperties();\n+\n+        try {\n+            /* initialize value:\n+            one=Hello\\World\n+            two=Hello\\,World\n+            three=Hello,World\n+            */\n+            String s1 = \"one=Hello\\\\World\\ntwo=Hello\\\\,World\\nthree=Hello,World\";\n+            byte[] bytes = s1.getBytes();\n+            ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+            ep1.load(bais);\n+            assertEquals(\"Back-slashes not interpreted properly\", \n+                    \"Hello\\\\World\", ep1.getString(\"one\"));\n+            assertEquals(\"Escaped commas not interpreted properly\", \n+                    \"Hello,World\", ep1.getString(\"two\"));\n+            assertEquals(\"Commas not interpreted properly\", \n+                    2, ep1.getVector(\"three\").size());\n+            assertEquals(\"Commas not interpreted properly\", \n+                    \"Hello\", ep1.getVector(\"three\").get(0));\n+            assertEquals(\"Commas not interpreted properly\", \n+                    \"World\", ep1.getVector(\"three\").get(1));\n+                    \n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            ep1.save(baos, null);\n+            bytes = baos.toByteArray();\n+            bais = new ByteArrayInputStream(bytes);\n+            ep2.load(bais);\n+            assertEquals(\"Back-slash not same after being saved and loaded\",\n+                    ep1.getString(\"one\"), ep2.getString(\"one\"));\n+            assertEquals(\"Escaped comma not same after being saved and loaded\",\n+                    ep1.getString(\"two\"), ep2.getString(\"two\"));\n+            assertEquals(\"Comma not same after being saved and loaded\",\n+                    ep1.getString(\"three\"), ep2.getString(\"three\"));\n+        } catch (IOException ioe) {\n+            fail(\"There was an exception saving and loading the EP\");\n+        }\n+    }\n+    \n+    public void testTrailingBackSlash() {\n+        ExtendedProperties ep1 = new ExtendedProperties();\n+\n+        try {\n+            /*\n+            initialize using:\n+            one=ONE\n+            two=TWO \\\\\n+            three=THREE\n+            */\n+            String s1 = \"one=ONE\\ntwo=TWO \\\\\\\\\\nthree=THREE\";\n+            byte[] bytes = s1.getBytes();\n+            ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+            ep1.load(bais);\n+            assertEquals(\"Trailing back-slashes not interpreted properly\", \n+                    3, ep1.size());\n+            assertEquals(\"Back-slash not escaped properly\", \n+                    \"TWO \\\\\", ep1.getString(\"two\"));\n+        } catch (IOException ioe) {\n+            fail(\"There was an exception loading the EP\");\n+        }\n+    }\n }", "timestamp": 1061722258, "metainfo": ""}