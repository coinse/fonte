{"sha": "33ac6121a5f3925d761586e7c135561805fe465c", "log": "Fixed bugs where methods failed when there is no bean set for the bean map.  Fixed entrySet() to return a set containing Map.Entry objects with readable properties as keys.  This fixes the test case error, and a couple of the test case failures (and uncovers a couple more test case failures)  Fixed clone method to allow subclasses to clone properly.  This requires a non-backwards compatible change where the clone method now declares it throws CloneNotSupportedException.  See: http://www.javaworld.com/javaworld/jw-01-1999/jw-01-object.html Seeing how BeanMap never directly implemented Cloneable anyway, and this is for a major revision, I don't see this changing being much of a problem.  Since clone() declares it throws CloneNotSupportedException, that exception is now used to indicate a problem when attempting to clone (rather than UnsupportedOperationException, or other RuntimeException).  Added a small test for testing BeanMap clone.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.5 2002/03/13 04:15:49 mas Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/03/13 04:15:49 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.6 2002/03/13 04:36:18 mas Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/03/13 04:36:18 $\n  *\n  * ====================================================================\n  *\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.util.AbstractMap;\n+import java.util.AbstractSet;\n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n   */\n \n-public class BeanMap extends AbstractMap {\n-\n-    private Object bean;\n-\n-    private HashMap readMethods = new HashMap();\n-    private HashMap writeMethods = new HashMap();\n-    private HashMap types = new HashMap();\n+public class BeanMap extends AbstractMap implements Cloneable {\n+\n+    private transient Object bean;\n+\n+    private transient HashMap readMethods = new HashMap();\n+    private transient HashMap writeMethods = new HashMap();\n+    private transient HashMap types = new HashMap();\n \n     public static final Object[] NULL_ARGUMENTS = {};\n     public static HashMap defaultTransformers = new HashMap();\n     // Map interface\n     //-------------------------------------------------------------------------\n \n-    public Object clone() {\n+    /**\n+     *  Clone this bean map using the following process: \n+     *\n+     *  <ul>\n+\n+     *  <li>If there is no underlying bean, return a cloned BeanMap without a\n+     *  bean.\n+     *\n+     *  <li>Since there is an underlying bean, try to instantiate a new bean of\n+     *  the same type using Class.newInstance().\n+     * \n+     *  <li>If the instantiation fails, throw a CloneNotSupportedException\n+     *\n+     *  <li>Clone the bean map and set the newly instantiated bean as the\n+     *  underyling bean for the bean map.\n+     *\n+     *  <li>Copy each property that is both readable and writable from the\n+     *  existing object to a cloned bean map.  \n+     *\n+     *  <li>If anything fails along the way, throw a\n+     *  CloneNotSupportedException.\n+     *\n+     *  <ul>\n+     **/\n+    public Object clone() throws CloneNotSupportedException {\n+        BeanMap newMap = (BeanMap)super.clone();\n+\n+        if(bean == null) {\n+            // no bean, just an empty bean map at the moment.  return a newly\n+            // cloned and empty bean map.\n+            return newMap;\n+        }\n+\n+        Object newBean = null;            \n         Class beanClass = null;\n         try {\n             beanClass = bean.getClass();\n-            Object newBean = beanClass.newInstance();\n-            Map newMap = new BeanMap( newBean );\n-            newMap.putAll( this );\n-            return newMap;\n-        } \n-        catch (Exception e) {\n-            throw new UnsupportedOperationException( \"Could not create new instance of class: \" + beanClass );\n-        }\n+            newBean = beanClass.newInstance();\n+        } catch (Exception e) {\n+            // unable to instantiate\n+            throw new CloneNotSupportedException\n+                (\"Unable to instantiate the underlying bean \\\"\" +\n+                 beanClass.getName() + \"\\\": \" + e);\n+        }\n+            \n+        try {\n+            newMap.setBean(newBean);\n+        } catch (Exception exception) {\n+            throw new CloneNotSupportedException\n+                (\"Unable to set bean in the cloned bean map: \" + \n+                 exception);\n+        }\n+            \n+        try {\n+            // copy only properties that are readable and writable.  If its\n+            // not readable, we can't get the value from the old map.  If\n+            // its not writable, we can't write a value into the new map.\n+            Iterator readableKeys = readMethods.keySet().iterator();\n+            while(readableKeys.hasNext()) {\n+                Object key = readableKeys.next();\n+                if(getWriteMethod(key) != null) {\n+                    newMap.put(key, get(key));\n+                }\n+            }\n+        } catch (Exception exception) {\n+            throw new CloneNotSupportedException\n+                (\"Unable to copy bean values to cloned bean map: \" +\n+                 exception);\n+        }\n+\n+        return newMap;\n     }\n \n     /**\n      *  BeanMap are fixed).\n      **/\n     public void clear() {\n+        if(bean == null) return;\n+\n         Class beanClass = null;\n         try {\n             beanClass = bean.getClass();\n     }\n \n     public Set entrySet() {\n-        return readMethods.keySet();\n+        return Collections.unmodifiableSet(new AbstractSet() {\n+            public Iterator iterator() {\n+                return new Iterator() {\n+\n+                    Iterator methodIter = \n+                      BeanMap.this.readMethods.keySet().iterator();\n+\n+                    public boolean hasNext() {\n+                        return methodIter.hasNext();\n+                    }\n+\n+                    public Object next() {\n+                        Object key = (Object)methodIter.next();\n+                        return new DefaultMapEntry(key, get(key));\n+                    }\n+\n+                    public void remove() {\n+                      throw new UnsupportedOperationException\n+                        (\"remove() not supported from BeanMap.entrySet()\");\n+                    }\n+                };\n+            }\n+\n+            public int size() {\n+              return BeanMap.this.readMethods.size();\n+            }\n+        });\n     }\n \n     public Collection values() {\n     }\n \n     private void initialise() {\n+        if(getBean() == null) return;\n+\n         Class  beanClass = getBean().getClass();\n         try {\n             //BeanInfo beanInfo = Introspector.getBeanInfo( bean, null );\n--- a/src/test/org/apache/commons/collections/TestBeanMap.java\n+++ b/src/test/org/apache/commons/collections/TestBeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBeanMap.java,v 1.3 2002/02/22 07:00:30 mas Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/02/22 07:00:30 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBeanMap.java,v 1.4 2002/03/13 04:36:18 mas Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/03/13 04:36:18 $\n  *\n  * ====================================================================\n  *\n         //TODO: make sure a call to BeanMap.clear returns the bean to its\n         //default initialization values.\n     }\n+\n+    public void testBeanMapClone() {\n+        BeanMap map = (BeanMap)makeFullMap();\n+        try {\n+            BeanMap map2 = (BeanMap)((BeanMap)map).clone();\n+\n+            // make sure containsKey is working to verify the bean was cloned\n+            // ok, and the read methods were properly initialized\n+            Object[] keys = getSampleKeys();\n+            for(int i = 0; i < keys.length; i++) {\n+                assertTrue(\"Cloned BeanMap should contain the same keys\",\n+                           map2.containsKey(keys[i]));\n+            }\n+        } catch (CloneNotSupportedException exception) {\n+            fail(\"BeanMap.clone() should not throw a \" +\n+                 \"CloneNotSupportedException when clone should succeed.\");\n+        }\n+    }\n }", "timestamp": 1015994178, "metainfo": ""}