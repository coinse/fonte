{"sha": "b10fa43d3e29af6c6e79577c305fad99df01dff0", "log": "COLLECTIONS-426 patch applied.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java\n import org.apache.commons.collections.list.UnmodifiableList;\n \n /**\n- * Decorates another <code>Set</code> to ensure that the order of addition\n- * is retained and used by the iterator.\n+ * Decorates another <code>Set</code> to ensure that the order of addition is\n+ * retained and used by the iterator.\n  * <p>\n  * If an object is added to the set for a second time, it will remain in the\n- * original position in the iteration.\n- * The order can be observed from the set via the iterator or toArray methods.\n+ * original position in the iteration. The order can be observed from the set\n+ * via the iterator or toArray methods.\n  * <p>\n  * The ListOrderedSet also has various useful direct methods. These include many\n- * from <code>List</code>, such as <code>get(int)</code>, <code>remove(int)</code>\n- * and <code>indexOf(int)</code>. An unmodifiable <code>List</code> view of\n- * the set can be obtained via <code>asList()</code>.\n+ * from <code>List</code>, such as <code>get(int)</code>,\n+ * <code>remove(int)</code> and <code>indexOf(int)</code>. An unmodifiable\n+ * <code>List</code> view of the set can be obtained via <code>asList()</code>.\n  * <p>\n  * This class cannot implement the <code>List</code> interface directly as\n- * various interface methods (notably equals/hashCode) are incompatible with a set.\n+ * various interface methods (notably equals/hashCode) are incompatible with a\n+ * set.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n- *\n+ * \n  * @since 3.0\n  * @version $Id$\n  */\n-public class ListOrderedSet<E> extends AbstractSerializableSetDecorator<E> implements Set<E> {\n+public class ListOrderedSet<E>\n+    extends AbstractSerializableSetDecorator<E>\n+    implements Set<E> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = -228664372470420141L;\n     protected final List<E> setOrder;\n \n     /**\n-     * Factory method to create an ordered set specifying the list and set to use.\n+     * Factory method to create an ordered set specifying the list and set to\n+     * use.\n      * <p>\n      * The list and set must both be empty.\n-     *\n+     * \n      * @param <E> the element type\n-     * @param set  the set to decorate, must be empty and not null\n-     * @param list  the list to decorate, must be empty and not null\n+     * @param set the set to decorate, must be empty and not null\n+     * @param list the list to decorate, must be empty and not null\n      * @return a new ordered set\n      * @throws IllegalArgumentException if set or list is null\n      * @throws IllegalArgumentException if either the set or list is not empty\n      * Factory method to create an ordered set.\n      * <p>\n      * An <code>ArrayList</code> is used to retain order.\n-     *\n+     * \n      * @param <E> the element type\n-     * @param set  the set to decorate, must not be null\n+     * @param set the set to decorate, must not be null\n      * @return a new ordered set\n      * @throws IllegalArgumentException if set is null\n      */\n     }\n \n     /**\n-     * Factory method to create an ordered set using the supplied list to retain order.\n+     * Factory method to create an ordered set using the supplied list to retain\n+     * order.\n      * <p>\n      * A <code>HashSet</code> is used for the set behaviour.\n      * <p>\n      * NOTE: If the list contains duplicates, the duplicates are removed,\n      * altering the specified list.\n-     *\n+     * \n      * @param <E> the element type\n-     * @param list  the list to decorate, must not be null\n+     * @param list the list to decorate, must not be null\n      * @return a new ordered set\n      * @throws IllegalArgumentException if list is null\n      */\n         return new ListOrderedSet<E>(set, list);\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Constructs a new empty <code>ListOrderedSet</code> using\n-     * a <code>HashSet</code> and an <code>ArrayList</code> internally.\n-     *\n+    // -----------------------------------------------------------------------\n+    /**\n+     * Constructs a new empty <code>ListOrderedSet</code> using a\n+     * <code>HashSet</code> and an <code>ArrayList</code> internally.\n+     * \n      * @since 3.1\n      */\n     public ListOrderedSet() {\n \n     /**\n      * Constructor that wraps (not copies).\n-     *\n-     * @param set  the set to decorate, must not be null\n+     * \n+     * @param set the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n     protected ListOrderedSet(Set<E> set) {\n     }\n \n     /**\n-     * Constructor that wraps (not copies) the Set and specifies the list to use.\n+     * Constructor that wraps (not copies) the Set and specifies the list to\n+     * use.\n      * <p>\n      * The set and list must both be correctly initialised to the same elements.\n-     *\n-     * @param set  the set to decorate, must not be null\n-     * @param list  the list to decorate, must not be null\n+     * \n+     * @param set the set to decorate, must not be null\n+     * @param list the list to decorate, must not be null\n      * @throws IllegalArgumentException if set or list is null\n      */\n     protected ListOrderedSet(Set<E> set, List<E> list) {\n         setOrder = list;\n     }\n \n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n     /**\n      * Gets an unmodifiable view of the order of the Set.\n-     *\n+     * \n      * @return an unmodifiable list view\n      */\n     public List<E> asList() {\n         return UnmodifiableList.unmodifiableList(setOrder);\n     }\n \n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n     @Override\n     public void clear() {\n         collection.clear();\n \n     @Override\n     public boolean retainAll(Collection<?> coll) {\n-        boolean result = collection.retainAll(coll);\n-        if (result == false) {\n+        Set<Object> collectionRetainAll = new HashSet<Object>();\n+        for (Iterator<?> it = coll.iterator(); it.hasNext();) {\n+            Object next = it.next();\n+            if (collection.contains(next)) {\n+                collectionRetainAll.add(next);\n+            }\n+        }\n+        if (collectionRetainAll.size() == collection.size()) {\n             return false;\n         }\n-        if (collection.size() == 0) {\n-            setOrder.clear();\n+        if (collectionRetainAll.size() == 0) {\n+            clear();\n         } else {\n-            for (Iterator<E> it = setOrder.iterator(); it.hasNext();) {\n-                if (!collection.contains(it.next())) {\n+            for (Iterator<E> it = iterator(); it.hasNext();) {\n+                if (!collectionRetainAll.contains(it.next())) {\n                     it.remove();\n                 }\n             }\n         }\n-        return result;\n+        return true;\n     }\n \n     @Override\n         return setOrder.toArray(a);\n     }\n \n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n     // Additional methods that comply to the {@link List} interface\n-    //-----------------------------------------------------------------------\n-    \n+    // -----------------------------------------------------------------------\n+\n     /**\n      * Returns the element at the specified position in this ordered set.\n-     *\n+     * \n      * @param index the position of the element in the ordered {@link Set}.\n      * @return the element at position {@code index}\n      * @see List#get(int)\n     }\n \n     /**\n-     * Returns the index of the first occurrence of the specified element in ordered set.\n+     * Returns the index of the first occurrence of the specified element in\n+     * ordered set.\n      * \n      * @param object the element to search for\n-     * @return the index of the first occurrence of the object, or {@code -1} if this\n-     * ordered set does not contain this object\n+     * @return the index of the first occurrence of the object, or {@code -1} if\n+     *         this ordered set does not contain this object\n      * @see List#indexOf(Object)\n      */\n     public int indexOf(Object object) {\n     }\n \n     /**\n-     * Inserts the specified element at the specified position if it is not yet contained in this\n-     * ordered set (optional operation). Shifts the element currently at this position and any\n-     * subsequent elements to the right.\n-     *\n+     * Inserts the specified element at the specified position if it is not yet\n+     * contained in this ordered set (optional operation). Shifts the element\n+     * currently at this position and any subsequent elements to the right.\n+     * \n      * @param index the index at which the element is to be inserted\n      * @param object the element to be inserted\n      * @see List#add(int, Object)\n     }\n \n     /**\n-     * Inserts all elements in the specified collection not yet contained in the ordered set at the specified\n-     * position (optional operation). Shifts the element currently at the position and all subsequent\n-     * elements to the right.\n+     * Inserts all elements in the specified collection not yet contained in the\n+     * ordered set at the specified position (optional operation). Shifts the\n+     * element currently at the position and all subsequent elements to the\n+     * right.\n      * \n      * @param index the position to insert the elements\n      * @param coll the collection containing the elements to be inserted\n             toAdd.add(e);\n             changed = true;\n         }\n-        \n+\n         if (changed) {\n             setOrder.addAll(index, toAdd);\n         }\n     }\n \n     /**\n-     * Removes the element at the specified position from the ordered set. Shifts any subsequent\n-     * elements to the left.\n+     * Removes the element at the specified position from the ordered set.\n+     * Shifts any subsequent elements to the left.\n      * \n      * @param index the index of the element to be removed\n      * @return the element that has been remove from the ordered set\n     }\n \n     /**\n-     * Uses the underlying List's toString so that order is achieved.\n-     * This means that the decorated Set's toString is not used, so\n-     * any custom toStrings will be ignored.\n+     * Uses the underlying List's toString so that order is achieved. This means\n+     * that the decorated Set's toString is not used, so any custom toStrings\n+     * will be ignored.\n      * \n      * @return a string representation of the ordered set\n      */\n         return setOrder.toString();\n     }\n \n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n     /**\n      * Internal iterator handle remove.\n      */\n-    static class OrderedSetIterator<E> extends AbstractIteratorDecorator<E> implements OrderedIterator<E> {\n+    static class OrderedSetIterator<E>\n+        extends AbstractIteratorDecorator<E>\n+        implements OrderedIterator<E> {\n \n         /** Object we iterate on */\n         protected final Collection<E> set;\n--- a/src/test/java/org/apache/commons/collections/set/ListOrderedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections/set/ListOrderedSetTest.java\n package org.apache.commons.collections.set;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n \n /**\n- * Extension of {@link AbstractSetTest} for exercising the {@link ListOrderedSet}\n- * implementation.\n- *\n+ * Extension of {@link AbstractSetTest} for exercising the\n+ * {@link ListOrderedSet} implementation.\n+ * \n  * @since 3.0\n  * @version $Id$\n  */\n-public class ListOrderedSetTest<E> extends AbstractSetTest<E> {\n+public class ListOrderedSetTest<E>\n+    extends AbstractSetTest<E> {\n \n     private static final Integer ZERO = new Integer(0);\n+\n     private static final Integer ONE = new Integer(1);\n+\n     private static final Integer TWO = new Integer(2);\n+\n     private static final Integer THREE = new Integer(3);\n \n     public ListOrderedSetTest(String testName) {\n         }\n \n         for (int i = 0; i < 10; i += 2) {\n-            assertTrue(\"Must be able to remove int\", set.remove(Integer.toString(i)));\n+            assertTrue(\"Must be able to remove int\",\n+                       set.remove(Integer.toString(i)));\n         }\n \n         it = set.iterator();\n         for (int i = 1; i < 10; i += 2) {\n-            assertEquals(\"Sequence is wrong after remove \", Integer.toString(i), it.next());\n+            assertEquals(\"Sequence is wrong after remove \",\n+                         Integer.toString(i), it.next());\n         }\n \n         for (int i = 0; i < 10; i++) {\n         assertSame(TWO, set.get(2));\n \n         list.add(0, (E) THREE); // list = [3,0,2]\n-        set.remove(TWO);    //  set = [0,1]\n+        set.remove(TWO); //  set = [0,1]\n         set.addAll(1, list);\n         assertEquals(4, set.size());\n         assertSame(ZERO, set.get(0));\n         B b = new B();\n         set.add((E) a);\n         assertEquals(1, set.size());\n-        set.add((E) b);  // will match but not replace A as equal\n+        set.add((E) b); // will match but not replace A as equal\n         assertEquals(1, set.size());\n         assertSame(a, set.decorated().iterator().next());\n         assertSame(a, set.iterator().next());\n         assertSame(a, set.asList().get(0));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public void testRetainAll() {\n+        List<E> list = new ArrayList<E>(10);\n+        Set<E> set = new HashSet<E>(10);\n+        ListOrderedSet<E> orderedSet = ListOrderedSet.listOrderedSet(set, list);\n+        for (int i = 0; i < 10; ++i) {\n+            orderedSet.add((E) Integer.valueOf(10 - i - 1));\n+        }\n+\n+        Collection<E> retained = new ArrayList<E>(5);\n+        for (int i = 0; i < 5; ++i) {\n+            retained.add((E) Integer.valueOf(i * 2));\n+        }\n+\n+        assertTrue(orderedSet.retainAll(retained));\n+        assertEquals(5, orderedSet.size());\n+        // insertion order preserved?\n+        assertEquals(Integer.valueOf(8), orderedSet.get(0));\n+        assertEquals(Integer.valueOf(6), orderedSet.get(1));\n+        assertEquals(Integer.valueOf(4), orderedSet.get(2));\n+        assertEquals(Integer.valueOf(2), orderedSet.get(3));\n+        assertEquals(Integer.valueOf(0), orderedSet.get(4));\n+    }\n+\n+    /*\n+     * test case for https://issues.apache.org/jira/browse/COLLECTIONS-426\n+     */\n+    public void testRetainAllCollections426() {\n+        int size = 100000;\n+        ListOrderedSet<Integer> set = new ListOrderedSet<Integer>();\n+        for (int i = 0; i < size; i++) {\n+            set.add(i);\n+        }\n+        ArrayList<Integer> list = new ArrayList<Integer>();\n+        for (int i = size; i < 2 * size; i++) {\n+            list.add(i);\n+        }\n+\n+        long start = System.currentTimeMillis();\n+        set.retainAll(list);\n+        long stop = System.currentTimeMillis();\n+\n+        // make sure retainAll completes under 5 seconds\n+        // TODO if test is migrated to JUnit 4, add a Timeout rule.\n+        // http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/Timeout.html\n+        assertTrue((stop - start) < 5000);\n+    }\n+\n     static class A {\n+\n         @Override\n         public boolean equals(Object obj) {\n             return (obj instanceof A || obj instanceof B);\n         }\n+\n         @Override\n         public int hashCode() {\n             return 1;\n     }\n \n     static class B {\n+\n         @Override\n         public boolean equals(Object obj) {\n             return (obj instanceof A || obj instanceof B);\n         }\n+\n         @Override\n         public int hashCode() {\n             return 1;\n         try {\n             ListOrderedSet.listOrderedSet((List<E>) null);\n             fail();\n-        } catch (IllegalArgumentException ex) {}\n+        } catch (IllegalArgumentException ex) {\n+        }\n         try {\n             ListOrderedSet.listOrderedSet((Set<E>) null);\n             fail();\n-        } catch (IllegalArgumentException ex) {}\n+        } catch (IllegalArgumentException ex) {\n+        }\n         try {\n             ListOrderedSet.listOrderedSet(null, null);\n             fail();\n-        } catch (IllegalArgumentException ex) {}\n+        } catch (IllegalArgumentException ex) {\n+        }\n         try {\n             ListOrderedSet.listOrderedSet(new HashSet<E>(), null);\n             fail();\n-        } catch (IllegalArgumentException ex) {}\n+        } catch (IllegalArgumentException ex) {\n+        }\n         try {\n             ListOrderedSet.listOrderedSet(null, new ArrayList<E>());\n             fail();\n-        } catch (IllegalArgumentException ex) {}\n+        } catch (IllegalArgumentException ex) {\n+        }\n     }\n \n     @Override\n         return \"3.1\";\n     }\n \n-//    public void testCreate() throws Exception {\n-//        resetEmpty();\n-//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/ListOrderedSet.emptyCollection.version3.1.obj\");\n-//        resetFull();\n-//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/ListOrderedSet.fullCollection.version3.1.obj\");\n-//    }\n+    //    public void testCreate() throws Exception {\n+    //        resetEmpty();\n+    //        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/ListOrderedSet.emptyCollection.version3.1.obj\");\n+    //        resetFull();\n+    //        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/ListOrderedSet.fullCollection.version3.1.obj\");\n+    //    }\n \n }", "timestamp": 1346009387, "metainfo": ""}