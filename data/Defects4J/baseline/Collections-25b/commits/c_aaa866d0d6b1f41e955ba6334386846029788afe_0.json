{"sha": "aaa866d0d6b1f41e955ba6334386846029788afe", "log": "Rename Pair to KeyValue   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/pairs/AbstractKeyValue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/pairs/Attic/AbstractKeyValue.java,v 1.1 2003/09/27 10:33:34 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.pairs;\n+\n+/**\n+ * Abstract pair class to assist with creating KeyValue and MapEntry implementations.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 10:33:34 $\n+ * \n+ * @author James Strachan\n+ * @author Michael A. Smith\n+ * @author Neil O'Toole\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractKeyValue implements KeyValue {\n+    \n+    /** The key */\n+    protected Object key;\n+    /** The value */\n+    protected Object value;\n+    \n+    /**\n+     * Constructs a new pair with the specified key and given value.\n+     *\n+     * @param key  the key for the entry, may be null\n+     * @param value  the value for the entry, may be null\n+     */\n+    protected AbstractKeyValue(Object key, Object value) {\n+        super();\n+        this.key = key;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Gets the key from the pair.\n+     *\n+     * @return the key \n+     */\n+    public Object getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * Gets the value from the pair.\n+     *\n+     * @return the value\n+     */\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Gets a debugging String view of the pair.\n+     * \n+     * @return a String view of the entry\n+     */\n+    public String toString() {\n+        return new StringBuffer()\n+            .append('[')\n+            .append(getKey())\n+            .append('=')\n+            .append(getValue())\n+            .append(']').toString();\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/pairs/AbstractMapEntry.java\n+++ b/src/java/org/apache/commons/collections/pairs/AbstractMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/pairs/Attic/AbstractMapEntry.java,v 1.1 2003/09/25 22:47:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/pairs/Attic/AbstractMapEntry.java,v 1.2 2003/09/27 10:33:34 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Abstract Pair class to assist with creating correct Map Entry implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/25 22:47:49 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/27 10:33:34 $\n  * \n  * @author James Strachan\n  * @author Michael A. Smith\n  * @author Neil O'Toole\n  * @author Stephen Colebourne\n  */\n-public class AbstractMapEntry extends AbstractPair implements Map.Entry {\n+public class AbstractMapEntry extends AbstractKeyValue implements Map.Entry {\n     \n     /**\n      * Constructs a new entry with the given key and given value.\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/pairs/DefaultKeyValue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/pairs/Attic/DefaultKeyValue.java,v 1.1 2003/09/27 10:33:34 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.pairs;\n+\n+import java.util.Map;\n+\n+/**\n+ * A mutable KeyValue pair that does not implement MapEntry.\n+ * <p>\n+ * Note that a <code>DefaultKeyValue</code> instance may not contain\n+ * itself as a key or value.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 10:33:34 $\n+ * \n+ * @author James Strachan\n+ * @author Michael A. Smith\n+ * @author Neil O'Toole\n+ * @author Stephen Colebourne\n+ */\n+public class DefaultKeyValue extends AbstractKeyValue {\n+\n+    /**\n+     * Constructs a new pair with a null key and null value.\n+     */\n+    public DefaultKeyValue() {\n+        super(null, null);\n+    }\n+\n+    /**\n+     * Constructs a new pair with the specified key and given value.\n+     *\n+     * @param key  the key for the entry, may be null\n+     * @param value  the value for the entry, may be null\n+     */\n+    public DefaultKeyValue(final Object key, final Object value) {\n+        super(key, value);\n+    }\n+\n+    /**\n+     * Constructs a new pair from the specified KeyValue.\n+     *\n+     * @param pair  the pair to copy, must not be null\n+     * @throws NullPointerException if the entry is null\n+     */\n+    public DefaultKeyValue(final KeyValue pair) {\n+        super(pair.getKey(), pair.getValue());\n+    }\n+\n+    /**\n+     * Constructs a new pair from the specified MapEntry.\n+     *\n+     * @param entry  the entry to copy, must not be null\n+     * @throws NullPointerException if the entry is null\n+     */\n+    public DefaultKeyValue(final Map.Entry entry) {\n+        super(entry.getKey(), entry.getValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the key.\n+     *\n+     * @param key  the new key\n+     * @return the old key\n+     * @throws IllegalArgumentException if key is this object\n+     */\n+    public Object setKey(final Object key) {\n+        if (key == this) {\n+            throw new IllegalArgumentException(\"DefaultKeyValue may not contain itself as a key.\");\n+        }\n+\n+        final Object old = this.key;\n+        this.key = key;\n+        return old;\n+    }\n+\n+    /** \n+     * Sets the value.\n+     *\n+     * @return the old value of the value\n+     * @param value the new value\n+     * @throws IllegalArgumentException if value is this object\n+     */\n+    public Object setValue(final Object value) {\n+        if (value == this) {\n+            throw new IllegalArgumentException(\"DefaultKeyValue may not contain itself as a value.\");\n+        }\n+\n+        final Object old = this.value;\n+        this.value = value;\n+        return old;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new <code>Map.Entry</code> object with key and value from this pair.\n+     * \n+     * @return a MapEntry instance\n+     */\n+    public Map.Entry toMapEntry() {\n+        return new DefaultMapEntry(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares this Map Entry with another Map Entry.\n+     * <p>\n+     * Returns true if the compared object is also a <code>DefaultKeyValue</code>,\n+     * and its key and value are equal to this object's key and value.\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal key and value\n+     */\n+    public boolean equals(final Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof DefaultKeyValue == false) {\n+            return false;\n+        }\n+\n+        DefaultKeyValue other = (DefaultKeyValue) obj;\n+        return \n+            (getKey() == null ? other.getKey() == null : getKey().equals(other.getKey())) &&\n+            (getValue() == null ? other.getValue() == null : getValue().equals(other.getValue()));\n+    }\n+\n+    /**\n+     * Gets a hashCode compatible with the equals method.\n+     * <p>\n+     * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()},\n+     * however subclasses may override this.\n+     * \n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        return (getKey() == null ? 0 : getKey().hashCode()) ^\n+               (getValue() == null ? 0 : getValue().hashCode());\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/pairs/DefaultMapEntry.java\n+++ b/src/java/org/apache/commons/collections/pairs/DefaultMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/pairs/Attic/DefaultMapEntry.java,v 1.1 2003/09/25 22:47:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/pairs/Attic/DefaultMapEntry.java,v 1.2 2003/09/27 10:33:34 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n /**\n  * A restricted implementation of {@link java.util.Map.Entry} that prevents\n- * the Map Entry contract from being broken.\n+ * the MapEntry contract from being broken.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/25 22:47:49 $\n+ * @version $Revision: 1.2 $ $Date: 2003/09/27 10:33:34 $\n  * \n  * @author James Strachan\n  * @author Michael A. Smith\n     }\n \n     /**\n-     * Constructs a new entry from the specified Pair.\n+     * Constructs a new entry from the specified KeyValue.\n      *\n      * @param pair  the pair to copy, must not be null\n      * @throws NullPointerException if the entry is null\n      */\n-    public DefaultMapEntry(final Pair pair) {\n+    public DefaultMapEntry(final KeyValue pair) {\n         super(pair.getKey(), pair.getValue());\n     }\n \n     /**\n-     * Constructs a new entry from the specified Map Entry.\n+     * Constructs a new entry from the specified MapEntry.\n      *\n      * @param entry  the entry to copy, must not be null\n      * @throws NullPointerException if the entry is null\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/pairs/KeyValue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/pairs/Attic/KeyValue.java,v 1.1 2003/09/27 10:33:34 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.pairs;\n+\n+/**\n+ * Defines a simple key value pair.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/27 10:33:34 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public interface KeyValue {\n+    \n+    /**\n+     * Gets the key from the pair.\n+     *\n+     * @return the key \n+     */\n+    Object getKey();\n+\n+    /**\n+     * Gets the value from the pair.\n+     *\n+     * @return the value\n+     */\n+    Object getValue();\n+\n+}", "timestamp": 1064658814, "metainfo": ""}