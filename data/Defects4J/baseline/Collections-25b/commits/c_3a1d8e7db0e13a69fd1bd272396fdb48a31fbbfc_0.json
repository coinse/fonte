{"sha": "3a1d8e7db0e13a69fd1bd272396fdb48a31fbbfc", "log": "[COLLECTIONS-503] Added new IfTransformer and deprecate TransformerUtils.switchTransformer(Predicate, Transformer, Transformer). Thanks to Josh Cain.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/TransformerUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/TransformerUtils.java\n import org.apache.commons.collections4.functors.EqualPredicate;\n import org.apache.commons.collections4.functors.ExceptionTransformer;\n import org.apache.commons.collections4.functors.FactoryTransformer;\n+import org.apache.commons.collections4.functors.IfTransformer;\n import org.apache.commons.collections4.functors.InstantiateTransformer;\n import org.apache.commons.collections4.functors.InvokerTransformer;\n import org.apache.commons.collections4.functors.MapTransformer;\n  * <li>Predicate - returns the result of the predicate as a Boolean\n  * <li>Factory - returns a new object from a factory\n  * <li>Chained - chains two or more transformers together\n+ * <li>If - calls one transformer or another based on a predicate\n  * <li>Switch - calls one transformer based on one or more predicates\n  * <li>SwitchMap - calls one transformer looked up from a Map\n  * <li>Instantiate - the Class input object is instantiated\n     }\n \n     /**\n+     * Create a new Transformer that calls the transformer if the predicate is true,\n+     * otherwise the input object is returned unchanged.\n+     *\n+     * @param <T>  the input / output type\n+     * @param predicate  the predicate to switch on\n+     * @param trueTransformer  the transformer called if the predicate is true\n+     * @return the transformer\n+     * @throws IllegalArgumentException if either the predicate or transformer is null\n+     * @see org.apache.commons.collections4.functors.IfTransformer\n+     * @since 4.0.1\n+     */\n+    public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n+                                                      final Transformer<? super T, ? extends T> trueTransformer) {\n+        return IfTransformer.ifTransformer(predicate, trueTransformer);\n+    }\n+\n+    /**\n      * Create a new Transformer that calls one of two transformers depending\n      * on the specified predicate.\n      *\n      * @param falseTransformer  the transformer called if the predicate is false\n      * @return the transformer\n      * @throws IllegalArgumentException if either the predicate or transformer is null\n+     * @see org.apache.commons.collections4.functors.IfTransformer\n+     * @since 4.0.1\n+     */\n+    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n+                                                         final Transformer<? super I, ? extends O> trueTransformer,\n+                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n+        return IfTransformer.ifTransformer(predicate, trueTransformer, falseTransformer);\n+    }\n+\n+    /**\n+     * Create a new Transformer that calls one of two transformers depending\n+     * on the specified predicate.\n+     *\n+     * @param <I>  the input type\n+     * @param <O>  the output type\n+     * @param predicate  the predicate to switch on\n+     * @param trueTransformer  the transformer called if the predicate is true\n+     * @param falseTransformer  the transformer called if the predicate is false\n+     * @return the transformer\n+     * @throws IllegalArgumentException if either the predicate or transformer is null\n      * @see org.apache.commons.collections4.functors.SwitchTransformer\n+     * @deprecated as of 4.0.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n      */\n     @SuppressWarnings(\"unchecked\")\n+    @Deprecated\n     public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n             final Transformer<? super I, ? extends O> trueTransformer,\n             final Transformer<? super I, ? extends O> falseTransformer) {\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.functors;\n+\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Transformer implementation that will call one of two closures based on whether a predicate evaluates\n+ * as true or false.\n+ *\n+ * @param <I> The input type for the transformer\n+ * @param <O> The output type for the transformer\n+ *\n+ * @since 4.0.1\n+ * @version $Id$\n+ */\n+public class IfTransformer<I, O> implements Transformer<I, O>, Serializable {\n+\n+    /** Serial version UID */\n+    private static final long serialVersionUID = 8069309411242014252L;\n+\n+    /** The test */\n+    private final Predicate<? super I> iPredicate;\n+    /** The transformer to use if true */\n+    private final Transformer<? super I, ? extends O> iTrueTransformer;\n+    /** The transformer to use if false */\n+    private final Transformer<? super I, ? extends O> iFalseTransformer;\n+\n+    /**\n+     * Factory method that performs validation.\n+     *\n+     * @param <I>  input type for the transformer\n+     * @param <O>  output type for the transformer\n+     * @param predicate  predicate to switch on\n+     * @param trueTransformer  transformer used if true\n+     * @param falseTransformer  transformer used if false\n+     * @return the <code>if</code> transformer\n+     */\n+    public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n+                                                         final Transformer<? super I, ? extends O> trueTransformer,\n+                                                         final Transformer<? super I, ? extends O> falseTransformer) {\n+        if (predicate == null) {\n+            throw new IllegalArgumentException(\"Predicate must not be null\");\n+        }\n+        if (trueTransformer == null || falseTransformer == null) {\n+            throw new IllegalArgumentException(\"Transformers must not be null\");\n+        }\n+\n+        return new IfTransformer<I, O>(predicate, trueTransformer, falseTransformer);\n+    }\n+\n+    /**\n+     * Factory method that performs validation.\n+     * <p>\n+     * This factory creates a transformer that just returns the input object when\n+     * the predicate is false.\n+     *\n+     * @param <T>  input and output type for the transformer\n+     * @param predicate  predicate to switch on\n+     * @param trueTransformer  transformer used if true\n+     * @return the <code>if</code> transformer\n+     */\n+    public static <T> Transformer<T, T> ifTransformer(\n+            final Predicate<? super T> predicate,\n+            final Transformer<? super T, ? extends T> trueTransformer) {\n+\n+        if (predicate == null) {\n+            throw new IllegalArgumentException(\"Predicate must not be null\");\n+        }\n+        if (trueTransformer == null) {\n+            throw new IllegalArgumentException(\"Transformer must not be null\");\n+        }\n+\n+        return new IfTransformer<T, T>(predicate, trueTransformer, NOPTransformer.<T>nopTransformer());\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use the static factory method <code>ifTransformer</code> if you want that.\n+     *\n+     * @param predicate  predicate to switch on, not null\n+     * @param trueTransformer  transformer used if true, not null\n+     * @param falseTransformer  transformer used if false, not null\n+     */\n+    public IfTransformer(final Predicate<? super I> predicate,\n+        final Transformer<? super I, ? extends O> trueTransformer,\n+        final Transformer<? super I, ? extends O> falseTransformer) {\n+\n+        super();\n+        iPredicate = predicate;\n+        iTrueTransformer = trueTransformer;\n+        iFalseTransformer = falseTransformer;\n+    }\n+\n+    /**\n+     * Transforms the input using the true or false transformer based to the result of the predicate.\n+     *\n+     * @param input  the input object to transform\n+     * @return the transformed result\n+     */\n+    public O transform(final I input) {\n+        if(iPredicate.evaluate(input)){\n+            return iTrueTransformer.transform(input);\n+        } else {\n+            return iFalseTransformer.transform(input);\n+        }\n+    }\n+\n+    /**\n+     * Gets the predicate.\n+     *\n+     * @return the predicate\n+     */\n+    public Predicate<? super I> getPredicate(){\n+        return iPredicate;\n+    }\n+\n+    /**\n+     * Gets the transformer used when true.\n+     *\n+     * @return the transformer\n+     */\n+    public Transformer<? super I, ? extends O> getTrueTransformer() {\n+        return iTrueTransformer;\n+    }\n+\n+    /**\n+     * Gets the transformer used when false.\n+     *\n+     * @return the transformer\n+     */\n+    public Transformer<? super I, ? extends O> getFalseTransformer() {\n+        return iFalseTransformer;\n+    }\n+}\n--- a/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java\n         } catch (final IllegalArgumentException ex) {}\n     }\n \n+    // ifTransformer\n+    //------------------------------------------------------------------\n+\n+    public void testIfTransformer() {\n+        final Transformer<Object, String> a = TransformerUtils.constantTransformer(\"A\");\n+        final Transformer<Object, String> b = TransformerUtils.constantTransformer(\"B\");\n+        final Transformer<Object, String> c = TransformerUtils.constantTransformer(\"C\");\n+\n+        assertEquals(\"A\", TransformerUtils.ifTransformer(TruePredicate.truePredicate(), a, b).transform(null));\n+        assertEquals(\"B\", TransformerUtils.ifTransformer(FalsePredicate.falsePredicate(), a, b).transform(null));\n+\n+        Predicate<Integer> lessThanFivePredicate = new Predicate<Integer>() {\n+            public boolean evaluate(Integer value) {\n+                return value < 5;\n+            }\n+        };\n+        // if/else tests\n+        assertEquals(\"A\", TransformerUtils.<Integer, String>ifTransformer(lessThanFivePredicate, a, b).transform(1));\n+        assertEquals(\"B\", TransformerUtils.<Integer, String>ifTransformer(lessThanFivePredicate, a, b).transform(5));\n+        \n+        // if tests\n+        Predicate<String> equalsAPredicate = EqualPredicate.equalPredicate(\"A\");\n+        assertEquals(\"C\", TransformerUtils.<String>ifTransformer(equalsAPredicate, c).transform(\"A\"));\n+        assertEquals(\"B\", TransformerUtils.<String>ifTransformer(equalsAPredicate, c).transform(\"B\"));\n+\n+        try {\n+            TransformerUtils.ifTransformer(null, null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+        try {\n+            TransformerUtils.ifTransformer(TruePredicate.truePredicate(), null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+        try {\n+            TransformerUtils.ifTransformer(null, ConstantTransformer.constantTransformer(\"A\"));\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+        try {\n+            TransformerUtils.ifTransformer(null, null, null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+    }\n+    \n     // switchTransformer\n     //------------------------------------------------------------------\n ", "timestamp": 1386502863, "metainfo": ""}