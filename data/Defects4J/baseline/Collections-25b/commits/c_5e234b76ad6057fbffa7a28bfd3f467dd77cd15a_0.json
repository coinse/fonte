{"sha": "5e234b76ad6057fbffa7a28bfd3f467dd77cd15a", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/AbstractTestIterableMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestIterableMap.java\n  *\n  * @author Stephen Colebourne\n  */\n-public abstract class AbstractTestIterableMap extends AbstractTestMap {\n+public abstract class AbstractTestIterableMap<K, V> extends AbstractTestMap<K, V> {\n \n     /**\n      * JUnit constructor.\n-     * \n+     *\n      * @param testName  the test name\n      */\n     public AbstractTestIterableMap(String testName) {\n         super(testName);\n     }\n-    \n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public abstract IterableMap<K, V> makeObject();\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public IterableMap<K, V> makeFullMap() {\n+        return (IterableMap<K, V>) super.makeFullMap();\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testFailFastEntrySet() {\n         if (isRemoveSupported() == false) return;\n+        if (isFailFastExpected() == false) return;\n         resetFull();\n-        Iterator it = map.entrySet().iterator();\n-        Map.Entry val = (Map.Entry) it.next();\n-        map.remove(val.getKey());\n+        Iterator<Map.Entry<K, V>> it = getMap().entrySet().iterator();\n+        Map.Entry<K, V> val = it.next();\n+        getMap().remove(val.getKey());\n         try {\n             it.next();\n             fail();\n         } catch (ConcurrentModificationException ex) {}\n-        \n+\n         resetFull();\n-        it = map.entrySet().iterator();\n+        it = getMap().entrySet().iterator();\n         it.next();\n-        map.clear();\n+        getMap().clear();\n         try {\n             it.next();\n             fail();\n         } catch (ConcurrentModificationException ex) {}\n     }\n-    \n+\n     public void testFailFastKeySet() {\n         if (isRemoveSupported() == false) return;\n+        if (isFailFastExpected() == false) return;\n         resetFull();\n-        Iterator it = map.keySet().iterator();\n-        Object val = it.next();\n-        map.remove(val);\n+        Iterator<K> it = getMap().keySet().iterator();\n+        K val = it.next();\n+        getMap().remove(val);\n         try {\n             it.next();\n             fail();\n         } catch (ConcurrentModificationException ex) {}\n-        \n+\n         resetFull();\n-        it = map.keySet().iterator();\n+        it = getMap().keySet().iterator();\n         it.next();\n-        map.clear();\n+        getMap().clear();\n         try {\n             it.next();\n             fail();\n         } catch (ConcurrentModificationException ex) {}\n     }\n-    \n+\n     public void testFailFastValues() {\n         if (isRemoveSupported() == false) return;\n+        if (isFailFastExpected() == false) return;\n         resetFull();\n-        Iterator it = map.values().iterator();\n+        Iterator<V> it = getMap().values().iterator();\n         it.next();\n-        map.remove(map.keySet().iterator().next());\n+        getMap().remove(getMap().keySet().iterator().next());\n         try {\n             it.next();\n             fail();\n         } catch (ConcurrentModificationException ex) {}\n-        \n+\n         resetFull();\n-        it = map.values().iterator();\n+        it = getMap().values().iterator();\n         it.next();\n-        map.clear();\n+        getMap().clear();\n         try {\n             it.next();\n             fail();\n         } catch (ConcurrentModificationException ex) {}\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     public BulkTest bulkTestMapIterator() {\n         return new InnerTestMapIterator();\n     }\n-    \n-    public class InnerTestMapIterator extends AbstractTestMapIterator {\n+\n+    public class InnerTestMapIterator extends AbstractTestMapIterator<K, V> {\n         public InnerTestMapIterator() {\n             super(\"InnerTestMapIterator\");\n         }\n-        \n-        public Object[] addSetValues() {\n+\n+        public V[] addSetValues() {\n             return AbstractTestIterableMap.this.getNewSampleValues();\n         }\n-        \n+\n         public boolean supportsRemove() {\n             return AbstractTestIterableMap.this.isRemoveSupported();\n         }\n-        \n+\n         public boolean isGetStructuralModify() {\n             return AbstractTestIterableMap.this.isGetStructuralModify();\n         }\n             return AbstractTestIterableMap.this.isSetValueSupported();\n         }\n \n-        public MapIterator makeEmptyMapIterator() {\n+        public MapIterator<K, V> makeEmptyIterator() {\n             resetEmpty();\n-            return ((IterableMap) AbstractTestIterableMap.this.map).mapIterator();\n+            return AbstractTestIterableMap.this.getMap().mapIterator();\n         }\n \n-        public MapIterator makeFullMapIterator() {\n+        public MapIterator<K, V> makeObject() {\n             resetFull();\n-            return ((IterableMap) AbstractTestIterableMap.this.map).mapIterator();\n+            return AbstractTestIterableMap.this.getMap().mapIterator();\n         }\n-        \n-        public Map getMap() {\n+\n+        public Map<K, V> getMap() {\n             // assumes makeFullMapIterator() called first\n-            return AbstractTestIterableMap.this.map;\n+            return AbstractTestIterableMap.this.getMap();\n         }\n-        \n-        public Map getConfirmedMap() {\n+\n+        public Map<K, V> getConfirmedMap() {\n             // assumes makeFullMapIterator() called first\n-            return AbstractTestIterableMap.this.confirmed;\n+            return AbstractTestIterableMap.this.getConfirmed();\n         }\n-        \n+\n         public void verify() {\n             super.verify();\n             AbstractTestIterableMap.this.verify();\n         }\n     }\n-    \n+\n //  public void testCreate() throws Exception {\n //      resetEmpty();\n //      writeExternalFormToDisk((Serializable) map, \"D:/dev/collections/data/test/HashedMap.emptyCollection.version3.obj\");\n //      resetFull();\n //      writeExternalFormToDisk((Serializable) map, \"D:/dev/collections/data/test/HashedMap.fullCollection.version3.obj\");\n //  }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public IterableMap<K, V> getMap() {\n+        return (IterableMap<K, V>) super.getMap();\n+    }\n }", "timestamp": 1252994240, "metainfo": ""}