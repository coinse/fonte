{"sha": "bd2f3bcced1643373ee910dace2320674d2cc09d", "log": "[COLLECTIONS-409] Improve performance of ListOrderedSet#addAll, add missing javadoc. Thanks to Adrian Nistor for reporting and providing a patch.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java\n      * <p>\n      * The list and set must both be empty.\n      *\n+     * @param <E> the element type\n      * @param set  the set to decorate, must be empty and not null\n      * @param list  the list to decorate, must be empty and not null\n+     * @return a new ordered set\n      * @throws IllegalArgumentException if set or list is null\n      * @throws IllegalArgumentException if either the set or list is not empty\n      * @since Commons Collections 3.1\n      * <p>\n      * An <code>ArrayList</code> is used to retain order.\n      *\n+     * @param <E> the element type\n      * @param set  the set to decorate, must not be null\n+     * @return a new ordered set\n      * @throws IllegalArgumentException if set is null\n      */\n     public static <E> ListOrderedSet<E> listOrderedSet(Set<E> set) {\n      * NOTE: If the list contains duplicates, the duplicates are removed,\n      * altering the specified list.\n      *\n+     * @param <E> the element type\n      * @param list  the list to decorate, must not be null\n+     * @return a new ordered set\n      * @throws IllegalArgumentException if list is null\n      */\n     public static <E> ListOrderedSet<E> listOrderedSet(List<E> list) {\n     }\n \n     //-----------------------------------------------------------------------\n+    // Additional methods that comply to the {@link List} interface\n+    //-----------------------------------------------------------------------\n+    \n+    /**\n+     * Returns the element at the specified position in this ordered set.\n+     *\n+     * @param index the position of the element in the ordered {@link Set}.\n+     * @return the element at position {@code index}\n+     * @see {@link List#get(int)}\n+     */\n     public E get(int index) {\n         return setOrder.get(index);\n     }\n \n+    /**\n+     * Returns the index of the first occurrence of the specified element in ordered set.\n+     * \n+     * @param object the element to search for\n+     * @return the index of the first occurrence of the object, or {@code -1} if this\n+     * ordered set does not contain this object\n+     * @see {@link List#indexOf(Object)}\n+     */\n     public int indexOf(Object object) {\n         return setOrder.indexOf(object);\n     }\n \n+    /**\n+     * Inserts the specified element at the specified position if it is not yet contained in this\n+     * ordered set (optional operation). Shifts the element currently at this position and any\n+     * subsequent elements to the right.\n+     *\n+     * @param index the index at which the element is to be inserted\n+     * @param object the element to be inserted\n+     * @see {@link List#add(int, Object)}\n+     */\n     public void add(int index, E object) {\n         if (!contains(object)) {\n             collection.add(object);\n         }\n     }\n \n+    /**\n+     * Inserts all elements in the specified collection not yet contained in the ordered set at the specified\n+     * position (optional operation). Shifts the element currently at the position and all subsequent\n+     * elements to the right.\n+     * \n+     * @param index the position to insert the elements\n+     * @param coll the collection containing the elements to be inserted\n+     * @return {@code true} if this ordered set changed as a result of the call\n+     * @see {@link List#addAll(int, Collection)}\n+     */\n     public boolean addAll(int index, Collection<? extends E> coll) {\n         boolean changed = false;\n+        // collect all elements to be added for performance reasons\n+        final List<E> toAdd = new ArrayList<E>();\n         for (E e : coll) {\n             if (contains(e)) {\n                 continue;\n             }\n             collection.add(e);\n-            setOrder.add(index++, e);\n+            toAdd.add(e);\n             changed = true;\n         }\n+        \n+        if (changed) {\n+            setOrder.addAll(index, toAdd);\n+        }\n+\n         return changed;\n     }\n \n+    /**\n+     * Removes the element at the specified position from the ordered set. Shifts any subsequent\n+     * elements to the left.\n+     * \n+     * @param index the index of the element to be removed\n+     * @return the element that has been remove from the ordered set\n+     * @see {@link List#remove(int)}\n+     */\n     public Object remove(int index) {\n         Object obj = setOrder.remove(index);\n         remove(obj);\n      * Uses the underlying List's toString so that order is achieved.\n      * This means that the decorated Set's toString is not used, so\n      * any custom toStrings will be ignored.\n+     * \n+     * @return a string representation of the ordered set\n      */\n     // Fortunately List.toString and Set.toString look the same\n     @Override", "timestamp": 1340135526, "metainfo": ""}