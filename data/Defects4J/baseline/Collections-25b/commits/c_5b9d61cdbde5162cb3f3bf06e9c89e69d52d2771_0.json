{"sha": "5b9d61cdbde5162cb3f3bf06e9c89e69d52d2771", "log": "Remove commented out code now replaced with better code   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.4 2003/12/03 11:19:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.5 2003/12/07 01:15:36 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * the number of occurrences of that element in the bag.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/12/03 11:19:10 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/07 01:15:36 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n      */\n     public Iterator iterator() {\n         return new BagIterator(this);\n-//        List result = new ArrayList();\n-//        Iterator i = map.keySet().iterator();\n-//        while (i.hasNext()) {\n-//            Object current = i.next();\n-//            for (int index = getCount(current); index > 0; index--) {\n-//                result.add(current);\n-//            }\n-//        }\n-//        return new BagIterator(this, result.iterator());\n-    }\n-\n-//    static class BagIterator implements Iterator {\n-//        private AbstractMapBag parent;\n-//        private Iterator support;\n-//        private Object current;\n-//        private int mods;\n-//        private boolean canRemove;\n-//\n-//        public BagIterator(AbstractMapBag parent, Iterator support) {\n-//            this.parent = parent;\n-//            this.support = support;\n-//            this.current = null;\n-//            this.mods = parent.modCount;\n-//            this.canRemove = false;\n-//        }\n-//\n-//        public boolean hasNext() {\n-//            return support.hasNext();\n-//        }\n-//\n-//        public Object next() {\n-//            if (parent.modCount != mods) {\n-//                throw new ConcurrentModificationException();\n-//            }\n-//            current = support.next();\n-//            canRemove = true;\n-//            return current;\n-//        }\n-//\n-//        public void remove() {\n-//            if (parent.modCount != mods) {\n-//                throw new ConcurrentModificationException();\n-//            }\n-//            if (canRemove == false) {\n-//                throw new IllegalStateException();\n-//            }\n-//            support.remove();\n-//            parent.remove(current, 1);\n-//            canRemove = false;\n-//            mods++;\n-//        }\n-//    }\n+    }\n \n     static class BagIterator implements Iterator {\n         private AbstractMapBag parent;", "timestamp": 1070759736, "metainfo": ""}