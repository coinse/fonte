{"sha": "c63ea40c908e58b6bd9663b1d0d412bb982971c0", "log": "Refactor functors from inner classes to subpackage   ", "commit": "\n--- a/src/java/org/apache/commons/collections/FactoryUtils.java\n+++ b/src/java/org/apache/commons/collections/FactoryUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FactoryUtils.java,v 1.10 2003/11/23 17:01:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FactoryUtils.java,v 1.11 2003/11/23 17:48:20 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.Serializable;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-\n+import org.apache.commons.collections.functors.ConstantFactory;\n+import org.apache.commons.collections.functors.InstantiateFactory;\n import org.apache.commons.collections.functors.ExceptionFactory;\n-import org.apache.commons.collections.functors.FunctorException;\n+import org.apache.commons.collections.functors.PrototypeFactory;\n \n /**\n  * <code>FactoryUtils</code> provides reference implementations and utilities\n  * All the supplied factories are Serializable.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.10 $ $Date: 2003/11/23 17:01:36 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/23 17:48:20 $\n  *\n  * @author Stephen Colebourne\n  */\n public class FactoryUtils {\n-\n-    /**\n-     * A factory that always returns null\n-     */\n-    private static final Factory NULL_FACTORY = new ConstantFactory(null);\n \n     /**\n      * This class is not normally instantiated.\n      * @return the factory\n      */\n     public static Factory nullFactory() {\n-        return NULL_FACTORY;\n+        return ConstantFactory.NULL_INSTANCE;\n     }\n \n     /**\n      * @return the <code>constant</code> factory.\n      */\n     public static Factory constantFactory(Object constantToReturn) {\n-        return new ConstantFactory(constantToReturn);\n+        return ConstantFactory.getInstance(constantToReturn);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the prototype cannot be cloned\n      */\n     public static Factory prototypeFactory(Object prototype) {\n-        if (prototype == null) {\n-            throw new IllegalArgumentException(\"The prototype must not be null\");\n-        }\n-        try {\n-            prototype.getClass().getMethod(\"clone\", null);\n-            return new PrototypeCloneFactory(prototype);\n-\n-        } catch (NoSuchMethodException ex) {\n-            try {\n-                prototype.getClass().getConstructor(new Class[] { prototype.getClass()});\n-                return new ReflectionFactory(prototype.getClass(), new Class[] { prototype.getClass()}, new Object[] { prototype });\n-\n-            } catch (NoSuchMethodException ex2) {\n-                if (prototype instanceof Serializable) {\n-                    return new PrototypeSerializationFactory((Serializable) prototype);\n-                }\n-            }\n-        }\n-        throw new IllegalArgumentException(\"The prototype must be cloneable via a public clone method\");\n+        return PrototypeFactory.getInstance(prototype);\n     }\n \n     /**\n      * @return the <code>reflection</code> factory\n      * @throws IllegalArgumentException if the classToInstantiate is null\n      */\n-    public static Factory reflectionFactory(Class classToInstantiate) {\n-        return new ReflectionFactory(classToInstantiate);\n+    public static Factory instantiateFactory(Class classToInstantiate) {\n+        return InstantiateFactory.getInstance(classToInstantiate, null, null);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the paramTypes and args don't match\n      * @throws IllegalArgumentException if the constructor doesn't exist\n      */\n-    public static Factory reflectionFactory(Class classToInstantiate, Class[] paramTypes, Object[] args) {\n-        return new ReflectionFactory(classToInstantiate, paramTypes, args);\n-    }\n-\n-    // ConstantFactory\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * ConstantFactory returns the same instance each time.\n-     */\n-    private static class ConstantFactory implements Factory, Serializable {\n-        /** The constant to return each time */\n-        private final Object iConstant;\n-\n-        /**\n-         * Constructor to store constant\n-         */\n-        private ConstantFactory(Object constant) {\n-            super();\n-            iConstant = constant;\n-        }\n-\n-        /**\n-         * Always return constant\n-         */\n-        public Object create() {\n-            return iConstant;\n-        }\n-    }\n-\n-    // PrototypeCloneFactory\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * PrototypeCloneFactory creates objects by copying a prototype using the clone method.\n-     */\n-    private static class PrototypeCloneFactory implements Factory, Serializable {\n-        /** The object to clone each time */\n-        private final Object iPrototype;\n-        /** The method used to clone */\n-        private transient Method iCloneMethod;\n-\n-        /**\n-         * Constructor to store prototype\n-         */\n-        private PrototypeCloneFactory(Object prototype) {\n-            super();\n-            if (prototype == null) {\n-                throw new IllegalArgumentException(\"PrototypeCloneFactory: The prototype must not be null\");\n-            }\n-            iPrototype = prototype;\n-\n-            findCloneMethod();\n-        }\n-\n-        /**\n-         * Find the Clone method for the class specified.\n-         */\n-        private void findCloneMethod() {\n-            try {\n-                iCloneMethod = iPrototype.getClass().getMethod(\"clone\", null);\n-\n-            } catch (NoSuchMethodException ex) {\n-                throw new IllegalArgumentException(\"PrototypeCloneFactory: The clone method must exist and be public \");\n-            }\n-        }\n-\n-        /**\n-         * Return clone of prototype\n-         */\n-        public Object create() {\n-            // needed for post-serialization\n-            if (iCloneMethod == null) {\n-                findCloneMethod();\n-            }\n-\n-            try {\n-                return iCloneMethod.invoke(iPrototype, null);\n-\n-            } catch (IllegalAccessException ex) {\n-                throw new FunctorException(\"PrototypeCloneFactory: Clone method must be public\", ex);\n-            } catch (InvocationTargetException ex) {\n-                throw new FunctorException(\"PrototypeCloneFactory: Clone method threw an exception\", ex);\n-            }\n-        }\n-    }\n-\n-    // PrototypeSerializationFactory\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * PrototypeSerializationFactory creates objects by cloning a prototype using serialization.\n-     */\n-    private static class PrototypeSerializationFactory implements Factory, Serializable {\n-        /** The object to clone via serialization each time */\n-        private final Serializable iPrototype;\n-\n-        /**\n-         * Constructor to store prototype\n-         */\n-        private PrototypeSerializationFactory(Serializable prototype) {\n-            super();\n-            if (prototype == null) {\n-                throw new IllegalArgumentException(\"PrototypeSerializationFactory: The prototype must not be null\");\n-            }\n-            iPrototype = prototype;\n-        }\n-\n-        /**\n-         * Return clone of prototype by serialization\n-         */\n-        public Object create() {\n-            ByteArrayOutputStream baos = new ByteArrayOutputStream(512);\n-            ByteArrayInputStream bais = null;\n-            try {\n-                ObjectOutputStream out = new ObjectOutputStream(baos);\n-                out.writeObject(iPrototype);\n-                \n-                bais = new ByteArrayInputStream(baos.toByteArray());\n-                ObjectInputStream in = new ObjectInputStream(bais);\n-                return in.readObject();\n-        \n-            } catch (ClassNotFoundException ex) {\n-                throw new FunctorException(ex);\n-            } catch (IOException ex) {\n-                throw new FunctorException(ex);\n-            } finally {\n-                try {\n-                    if (bais != null) {\n-                        bais.close();\n-                    }\n-                } catch (IOException ignored) {}\n-                try {\n-                    if (baos != null) {\n-                        baos.close();\n-                    }\n-                } catch (IOException ignored) {}\n-            }\n-        }\n-    }\n-\n-    // ReflectionFactory\n-    //----------------------------------------------------------------------------------\n-\n-    /**\n-     * ReflectionFactory creates objects using reflection.\n-     */\n-    private static class ReflectionFactory implements Factory, Serializable {\n-        /** The class to create */\n-        private final Class iClassToInstantiate;\n-        /** The constructor parameter types */\n-        private final Class[] iParamTypes;\n-        /** The constructor arguments */\n-        private final Object[] iArgs;\n-        /** The constructor */\n-        private transient Constructor iConstructor = null;\n-\n-        /**\n-         * Constructor\n-         */\n-        public ReflectionFactory(Class classToInstantiate) {\n-            this(classToInstantiate, null, null);\n-        }\n-\n-        /* builds the object factory taking all the options needed to provide\n-         * arguments to a constructor.\n-         */\n-        public ReflectionFactory(Class classToInstantiate, Class[] paramTypes, Object[] args) {\n-            super();\n-            if (classToInstantiate == null) {\n-                throw new IllegalArgumentException(\"ReflectionFactory: The class to instantiate must not be null\");\n-            }\n-            if (((paramTypes == null) && (args != null))\n-                || ((paramTypes != null) && (args == null))\n-                || ((paramTypes != null) && (args != null) && (paramTypes.length != args.length))) {\n-                throw new IllegalArgumentException(\"ReflectionFactory: The parameter types must match the arguments\");\n-            }\n-\n-            iClassToInstantiate = classToInstantiate;\n-            if ((paramTypes == null) && (args == null)) {\n-                iParamTypes = null;\n-                iArgs = null;\n-            } else {\n-                iParamTypes = (Class[]) paramTypes.clone();\n-                iArgs = (Object[]) args.clone();\n-            }\n-\n-            findConstructor();\n-        }\n-\n-        /**\n-         * Find the Constructor for the class specified.\n-         */\n-        private void findConstructor() {\n-            try {\n-                iConstructor = iClassToInstantiate.getConstructor(iParamTypes);\n-\n-            } catch (NoSuchMethodException ex) {\n-                throw new IllegalArgumentException(\"ReflectionFactory: The constructor must exist and be public \");\n-            }\n-        }\n-\n-        /**\n-         * Create the object using a constructor\n-         */\n-        public Object create() {\n-            // needed for post-serialization\n-            if (iConstructor == null) {\n-                findConstructor();\n-            }\n-\n-            try {\n-                return iConstructor.newInstance(iArgs);\n-\n-            } catch (InstantiationException ex) {\n-                throw new FunctorException(\"ReflectionFactory: InstantiationException\", ex);\n-            } catch (IllegalAccessException ex) {\n-                throw new FunctorException(\"ReflectionFactory: Constructor must be public\", ex);\n-            } catch (InvocationTargetException ex) {\n-                throw new FunctorException(\"ReflectionFactory: Constructor threw an exception\", ex);\n-            }\n-        }\n+    public static Factory instantiateFactory(Class classToInstantiate, Class[] paramTypes, Object[] args) {\n+        return InstantiateFactory.getInstance(classToInstantiate, paramTypes, args);\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/java/org/apache/commons/collections/TransformerUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TransformerUtils.java,v 1.7 2003/11/23 17:01:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TransformerUtils.java,v 1.8 2003/11/23 17:48:20 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * All the supplied transformers are Serializable.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2003/11/23 17:01:36 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/23 17:48:20 $\n  * \n  * @author Stephen Colebourne\n  * @author James Carman\n                         \"InstantiateTransformer: Input object was not an instanceof Class, it was a \"\n                             + (input == null ? \"null object\" : input.getClass().getName()));\n                 }\n-                return FactoryUtils.reflectionFactory((Class) input, iParamTypes, iArgs).create();\n+                return FactoryUtils.instantiateFactory((Class) input, iParamTypes, iArgs).create();\n \n             } catch (IllegalArgumentException ex) {\n                 throw new FunctorException(\"InstantiateTransformer\", ex);\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/ConstantFactory.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/ConstantFactory.java,v 1.1 2003/11/23 17:48:19 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+\n+import org.apache.commons.collections.Factory;\n+\n+/**\n+ * Factory implementation that returns the same constant each time.\n+ * <p>\n+ * No check is made that the object is immutable. In general, only immutable\n+ * objects should use the constant factory. Mutable objects should\n+ * use the prototype factory.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 17:48:19 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class ConstantFactory implements Factory, Serializable {\n+\n+    /** Serial version UID */\n+    static final long serialVersionUID = -3520677225766901240L;\n+    \n+    /** Returns null each time */\n+    public static final Factory NULL_INSTANCE = new ConstantFactory(null);\n+\n+    /** The closures to call in turn */\n+    private final Object iConstant;\n+\n+    /**\n+     * Factory method that performs validation.\n+     *\n+     * @param constantToReturn  the constant object to return each time in the factory\n+     * @return the <code>constant</code> factory.\n+     */\n+    public static Factory getInstance(Object constantToReturn) {\n+        if (constantToReturn == null) {\n+            return NULL_INSTANCE;\n+        }\n+        return new ConstantFactory(constantToReturn);\n+    }\n+    \n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param constantToReturn  the constant to return each time\n+     */\n+    public ConstantFactory(Object constantToReturn) {\n+        super();\n+        iConstant = constantToReturn;\n+    }\n+\n+    /**\n+     * Always return constant\n+     */\n+    public Object create() {\n+        return iConstant;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/InstantiateFactory.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstantiateFactory.java,v 1.1 2003/11/23 17:48:19 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import org.apache.commons.collections.Factory;\n+\n+/**\n+ * Factory implementation that creates a new object instance by reflection.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 17:48:19 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class InstantiateFactory implements Factory, Serializable {\n+\n+    /** The serial version */\n+    static final long serialVersionUID = -7732226881069447957L;\n+\n+    /** The class to create */\n+    private final Class iClassToInstantiate;\n+    /** The constructor parameter types */\n+    private final Class[] iParamTypes;\n+    /** The constructor arguments */\n+    private final Object[] iArgs;\n+    /** The constructor */\n+    private transient Constructor iConstructor = null;\n+\n+    /**\n+     * Factory method that performs validation.\n+     * \n+     * @param classToInstantiate  the class to instantiate, not null\n+     * @param paramTypes  the constructor parameter types\n+     * @param args  the constructor arguments\n+     */\n+    public static Factory getInstance(Class classToInstantiate, Class[] paramTypes, Object[] args) {\n+        if (classToInstantiate == null) {\n+            throw new IllegalArgumentException(\"Class to instantiate must not be null\");\n+        }\n+        if (((paramTypes == null) && (args != null))\n+            || ((paramTypes != null) && (args == null))\n+            || ((paramTypes != null) && (args != null) && (paramTypes.length != args.length))) {\n+            throw new IllegalArgumentException(\"Parameter types must match the arguments\");\n+        }\n+\n+        if (paramTypes == null || paramTypes.length == 0) {\n+            paramTypes = null;\n+            args = null;\n+        } else {\n+            paramTypes = (Class[]) paramTypes.clone();\n+            args = (Object[]) args.clone();\n+        }\n+        return new InstantiateFactory(classToInstantiate, paramTypes, args);\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param classToInstantiate  the class to instantiate\n+     */\n+    public InstantiateFactory(Class classToInstantiate) {\n+        super();\n+        iClassToInstantiate = classToInstantiate;\n+        iParamTypes = null;\n+        iArgs = null;\n+        findConstructor();\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param classToInstantiate  the class to instantiate\n+     * @param paramTypes  the constructor parameter types, not cloned\n+     * @param args  the constructor arguments, not cloned\n+     */\n+    public InstantiateFactory(Class classToInstantiate, Class[] paramTypes, Object[] args) {\n+        super();\n+        iClassToInstantiate = classToInstantiate;\n+        iParamTypes = paramTypes;\n+        iArgs = args;\n+        findConstructor();\n+    }\n+\n+    /**\n+     * Find the Constructor for the class specified.\n+     */\n+    private void findConstructor() {\n+        try {\n+            iConstructor = iClassToInstantiate.getConstructor(iParamTypes);\n+\n+        } catch (NoSuchMethodException ex) {\n+            throw new IllegalArgumentException(\"InstantiateFactory: The constructor must exist and be public \");\n+        }\n+    }\n+\n+    /**\n+     * Create the object using a constructor\n+     */\n+    public Object create() {\n+        // needed for post-serialization\n+        if (iConstructor == null) {\n+            findConstructor();\n+        }\n+\n+        try {\n+            return iConstructor.newInstance(iArgs);\n+\n+        } catch (InstantiationException ex) {\n+            throw new FunctorException(\"InstantiateFactory: InstantiationException\", ex);\n+        } catch (IllegalAccessException ex) {\n+            throw new FunctorException(\"InstantiateFactory: Constructor must be public\", ex);\n+        } catch (InvocationTargetException ex) {\n+            throw new FunctorException(\"InstantiateFactory: Constructor threw an exception\", ex);\n+        }\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/PrototypeFactory.java,v 1.1 2003/11/23 17:48:19 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.functors;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import org.apache.commons.collections.Factory;\n+\n+/**\n+ * Factory implementation that creates a new instance each time based on a prototype.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/23 17:48:19 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class PrototypeFactory {\n+\n+    /**\n+     * Factory method that performs validation.\n+     * <p>\n+     * Creates a Factory that will return a clone of the same prototype object\n+     * each time the factory is used. The prototype will be cloned using one of these\n+     * techniques (in order):\n+     * <ul>\n+     * <li>public clone method\n+     * <li>public copy constructor\n+     * <li>serialization clone\n+     * <ul>\n+     *\n+     * @param prototype  the object to clone each time in the factory\n+     * @return the <code>prototype</code> factory\n+     * @throws IllegalArgumentException if the prototype is null\n+     * @throws IllegalArgumentException if the prototype cannot be cloned\n+     */\n+    public static Factory getInstance(Object prototype) {\n+        if (prototype == null) {\n+            throw new IllegalArgumentException(\"The prototype must not be null\");\n+        }\n+        try {\n+            prototype.getClass().getMethod(\"clone\", null);\n+            return new PrototypeCloneFactory(prototype);\n+\n+        } catch (NoSuchMethodException ex) {\n+            try {\n+                prototype.getClass().getConstructor(new Class[] { prototype.getClass()});\n+                return new InstantiateFactory(\n+                    prototype.getClass(),\n+                    new Class[] { prototype.getClass()},\n+                    new Object[] { prototype });\n+\n+            } catch (NoSuchMethodException ex2) {\n+                if (prototype instanceof Serializable) {\n+                    return new PrototypeSerializationFactory((Serializable) prototype);\n+                }\n+            }\n+        }\n+        throw new IllegalArgumentException(\"The prototype must be cloneable via a public clone method\");\n+    }\n+\n+    /**\n+     * Constructor that performs no validation.\n+     * Use <code>getInstance</code> if you want that.\n+     * \n+     * @param constantToReturn  the constant to return each time\n+     */\n+    private PrototypeFactory() {\n+    }\n+\n+    // PrototypeCloneFactory\n+    //-----------------------------------------------------------------------\n+    /**\n+     * PrototypeCloneFactory creates objects by copying a prototype using the clone method.\n+     */\n+    static class PrototypeCloneFactory implements Factory, Serializable {\n+        \n+        /** The serial version */\n+        static final long serialVersionUID = 5604271422565175555L;\n+        \n+        /** The object to clone each time */\n+        private final Object iPrototype;\n+        /** The method used to clone */\n+        private transient Method iCloneMethod;\n+\n+        /**\n+         * Constructor to store prototype\n+         */\n+        private PrototypeCloneFactory(Object prototype) {\n+            super();\n+            if (prototype == null) {\n+                throw new IllegalArgumentException(\"PrototypeCloneFactory: The prototype must not be null\");\n+            }\n+            iPrototype = prototype;\n+\n+            findCloneMethod();\n+        }\n+\n+        /**\n+         * Find the Clone method for the class specified.\n+         */\n+        private void findCloneMethod() {\n+            try {\n+                iCloneMethod = iPrototype.getClass().getMethod(\"clone\", null);\n+\n+            } catch (NoSuchMethodException ex) {\n+                throw new IllegalArgumentException(\"PrototypeCloneFactory: The clone method must exist and be public \");\n+            }\n+        }\n+\n+        /**\n+         * Return clone of prototype\n+         */\n+        public Object create() {\n+            // needed for post-serialization\n+            if (iCloneMethod == null) {\n+                findCloneMethod();\n+            }\n+\n+            try {\n+                return iCloneMethod.invoke(iPrototype, null);\n+\n+            } catch (IllegalAccessException ex) {\n+                throw new FunctorException(\"PrototypeCloneFactory: Clone method must be public\", ex);\n+            } catch (InvocationTargetException ex) {\n+                throw new FunctorException(\"PrototypeCloneFactory: Clone method threw an exception\", ex);\n+            }\n+        }\n+    }\n+\n+    // PrototypeSerializationFactory\n+    //-----------------------------------------------------------------------\n+    /**\n+     * PrototypeSerializationFactory creates objects by cloning a prototype using serialization.\n+     */\n+    static class PrototypeSerializationFactory implements Factory, Serializable {\n+        \n+        /** The serial version */\n+        static final long serialVersionUID = -8704966966139178833L;\n+        \n+        /** The object to clone via serialization each time */\n+        private final Serializable iPrototype;\n+\n+        /**\n+         * Constructor to store prototype\n+         */\n+        private PrototypeSerializationFactory(Serializable prototype) {\n+            super();\n+            if (prototype == null) {\n+                throw new IllegalArgumentException(\"PrototypeSerializationFactory: The prototype must not be null\");\n+            }\n+            iPrototype = prototype;\n+        }\n+\n+        /**\n+         * Return clone of prototype by serialization\n+         */\n+        public Object create() {\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream(512);\n+            ByteArrayInputStream bais = null;\n+            try {\n+                ObjectOutputStream out = new ObjectOutputStream(baos);\n+                out.writeObject(iPrototype);\n+\n+                bais = new ByteArrayInputStream(baos.toByteArray());\n+                ObjectInputStream in = new ObjectInputStream(bais);\n+                return in.readObject();\n+\n+            } catch (ClassNotFoundException ex) {\n+                throw new FunctorException(ex);\n+            } catch (IOException ex) {\n+                throw new FunctorException(ex);\n+            } finally {\n+                try {\n+                    if (bais != null) {\n+                        bais.close();\n+                    }\n+                } catch (IOException ignored) {\n+                }\n+                try {\n+                    if (baos != null) {\n+                        baos.close();\n+                    }\n+                } catch (IOException ignored) {\n+                }\n+            }\n+        }\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestFactoryUtils.java\n+++ b/src/test/org/apache/commons/collections/TestFactoryUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFactoryUtils.java,v 1.6 2003/11/23 14:41:27 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFactoryUtils.java,v 1.7 2003/11/23 17:48:19 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Tests the org.apache.commons.collections.FactoryUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2003/11/23 14:41:27 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/23 17:48:19 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n     }\n     \n-    // reflectionFactory\n+    // instantiateFactory\n     //------------------------------------------------------------------\n     \n     public void testReflectionFactoryNull() {\n         try {\n-            Factory factory = FactoryUtils.reflectionFactory(null);\n+            Factory factory = FactoryUtils.instantiateFactory(null);\n             \n         } catch (IllegalArgumentException ex) {\n             return;\n     }\n \n     public void testReflectionFactorySimple() {\n-        Factory factory = FactoryUtils.reflectionFactory(Mock3.class);\n+        Factory factory = FactoryUtils.instantiateFactory(Mock3.class);\n         assertNotNull(factory);\n         Object created = factory.create();\n         assertEquals(0, ((Mock3) created).getValue());\n \n     public void testReflectionFactoryMismatch() {\n         try {\n-            Factory factory = FactoryUtils.reflectionFactory(Date.class, null, new Object[] {null});\n+            Factory factory = FactoryUtils.instantiateFactory(Date.class, null, new Object[] {null});\n             \n         } catch (IllegalArgumentException ex) {\n             return;\n \n     public void testReflectionFactoryNoConstructor() {\n         try {\n-            Factory factory = FactoryUtils.reflectionFactory(Date.class, new Class[] {Long.class}, new Object[] {null});\n+            Factory factory = FactoryUtils.instantiateFactory(Date.class, new Class[] {Long.class}, new Object[] {null});\n             \n         } catch (IllegalArgumentException ex) {\n             return;\n     public void testReflectionFactoryComplex() {\n         TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n         // 2nd Jan 1970\n-        Factory factory = FactoryUtils.reflectionFactory(Date.class,\n+        Factory factory = FactoryUtils.instantiateFactory(Date.class,\n             new Class[] {Integer.TYPE, Integer.TYPE, Integer.TYPE},\n             new Object[] {new Integer(70), new Integer(0), new Integer(2)});\n         assertNotNull(factory);", "timestamp": 1069609700, "metainfo": ""}