{"sha": "f283478c81d4de3e3b9e0d10e180d59150fc2048", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471580 | scolebourne | 2006-11-05 16:22:53 -0800 (Sun, 05 Nov 2006) | 1 line          Generify CompositeCollection     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n+++ b/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n  */\n package org.apache.commons.collections.collection;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n /**\n- * Extension of {@link AbstractTestCollection} for exercising the \n+ * Extension of {@link AbstractTestCollection} for exercising the\n  * {@link CompositeCollection} implementation.\n  *\n  * @since Commons Collections 3.0\n  * @author Brian McCallister\n  * @author Phil Steitz\n  */\n-public class TestCompositeCollection extends AbstractTestCollection {\n-    \n+public class TestCompositeCollection<E> extends AbstractTestCollection<E> {\n+\n     public TestCompositeCollection(String name) {\n         super(name);\n     }\n-    \n+\n     public static Test suite() {\n         return new TestSuite(TestCompositeCollection.class);\n     }\n         String[] testCaseName = { TestCompositeCollection.class.getName()};\n         junit.textui.TestRunner.main(testCaseName);\n     }\n- \n+\n  //-----------------------------------------------------------------------------\n     /**\n      * Run stock collection tests without Mutator, so turn off add, remove\n     public boolean isAddSupported() {\n         return false;\n     }\n-    \n+\n     public boolean isRemoveSupported() {\n         return false;\n     }\n-    \n+\n     /**\n      * Empty collection is empty composite\n      */\n-    public Collection makeCollection() {\n-        return new CompositeCollection();\n-    }\n-    \n-    public Collection makeConfirmedCollection() {\n-        return new HashSet();\n-    }\n-    \n-    public Object[] getFullElements() {\n-        return new Object[] {\"1\", \"2\", \"3\", \"4\"};\n-    }\n-    \n+    public Collection<E> makeObject() {\n+        return new CompositeCollection<E>();\n+    }\n+\n+    public Collection<E> makeConfirmedCollection() {\n+        return new HashSet<E>();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public E[] getFullElements() {\n+        return (E[]) new Object[] { \"1\", \"2\", \"3\", \"4\" };\n+    }\n+\n     /**\n      * Full collection consists of 4 collections, each with one element\n      */\n-    public Collection makeFullCollection() {\n-        CompositeCollection compositeCollection = new CompositeCollection();\n-        Object[] elements = getFullElements();\n+    public Collection<E> makeFullCollection() {\n+        CompositeCollection<E> compositeCollection = new CompositeCollection<E>();\n+        E[] elements = getFullElements();\n         for (int i = 0; i < elements.length; i++) {\n-            Collection summand = new HashSet();\n+            Collection<E> summand = new HashSet<E>();\n             summand.add(elements[i]);\n             compositeCollection.addComposited(summand);\n         }\n         return compositeCollection;\n     }\n-    \n+\n     /**\n      * Full collection should look like a collection with 4 elements\n      */\n-    public Collection makeConfirmedFullCollection() {\n-        Collection collection = new HashSet();\n+    public Collection<E> makeConfirmedFullCollection() {\n+        Collection<E> collection = new HashSet<E>();\n         collection.addAll(Arrays.asList(getFullElements()));\n         return collection;\n     }\n-    \n+\n     /**\n      * Override testUnsupportedRemove, since the default impl expects removeAll,\n      * retainAll and iterator().remove to throw\n      */\n-    public void testUnsupportedRemove() {    \n+    public void testUnsupportedRemove() {\n         resetFull();\n         try {\n-            collection.remove(null);\n+            getCollection().remove(null);\n             fail(\"remove should raise UnsupportedOperationException\");\n         } catch (UnsupportedOperationException e) {\n             // expected\n         }\n         verify();\n     }\n-    \n+\n     //--------------------------------------------------------------------------\n-    \n-    protected CompositeCollection c;\n-    protected Collection one;\n-    protected Collection two;\n-    \n+\n+    protected CompositeCollection<E> c;\n+    protected Collection<E> one;\n+    protected Collection<E> two;\n+\n     protected void setUpTest() {\n-        c = new CompositeCollection();\n-        one = new HashSet();\n-        two = new HashSet();\n-    }\n-    \n+        c = new CompositeCollection<E>();\n+        one = new HashSet<E>();\n+        two = new HashSet<E>();\n+    }\n+\n     protected void setUpMutatorTest() {\n         setUpTest();\n-        c.setMutator(new CompositeCollection.CollectionMutator() {\n-            public boolean add(CompositeCollection composite, \n-            Collection[] collections, Object obj) {\n-                for (int i = 0; i < collections.length; i++) {\n-                    collections[i].add(obj);\n-                }\n-                return true;\n-            }\n-            \n-            public boolean addAll(CompositeCollection composite, \n-            Collection[] collections, Collection coll) {\n-                for (int i = 0; i < collections.length; i++) {\n-                    collections[i].addAll(coll);\n-                }\n-                return true;\n-            }\n-            \n-            public boolean remove(CompositeCollection composite, \n-            Collection[] collections, Object obj) {\n-                for (int i = 0; i < collections.length; i++) {\n-                    collections[i].remove(obj);\n+        c.setMutator(new CompositeCollection.CollectionMutator<E>() {\n+            public boolean add(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, E obj) {\n+                for (Collection<E> collection : collections) {\n+                    collection.add(obj);\n+                }\n+                return true;\n+            }\n+\n+            public boolean addAll(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, Collection<? extends E> coll) {\n+                for (Collection<E> collection : collections) {\n+                    collection.addAll(coll);\n+                }\n+                return true;\n+            }\n+\n+            public boolean remove(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, Object obj) {\n+                for (Collection<E> collection : collections) {\n+                    collection.remove(obj);\n                 }\n                 return true;\n             }\n         });\n     }\n-            \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testSize() {\n         setUpTest();\n-        HashSet set = new HashSet();\n-        set.add(\"a\");\n-        set.add(\"b\");\n+        HashSet<E> set = new HashSet<E>();\n+        set.add((E) \"a\");\n+        set.add((E) \"b\");\n         c.addComposited(set);\n         assertEquals(set.size(), c.size());\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testMultipleCollectionsSize() {\n         setUpTest();\n-        HashSet set = new HashSet();\n-        set.add(\"a\");\n-        set.add(\"b\");\n+        HashSet<E> set = new HashSet<E>();\n+        set.add((E) \"a\");\n+        set.add((E) \"b\");\n         c.addComposited(set);\n-        HashSet other = new HashSet();\n-        other.add(\"c\");\n+        HashSet<E> other = new HashSet<E>();\n+        other.add((E) \"c\");\n         c.addComposited(other);\n         assertEquals(set.size() + other.size(), c.size());\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testIsEmpty() {\n         setUpTest();\n         assertTrue(c.isEmpty());\n-        HashSet empty = new HashSet();\n+        HashSet<E> empty = new HashSet<E>();\n         c.addComposited(empty);\n         assertTrue(c.isEmpty());\n-        empty.add(\"a\");\n+        empty.add((E) \"a\");\n         assertTrue(!c.isEmpty());\n     }\n-    \n-    \n+\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testIterator() {\n         setUpTest();\n-        one.add(\"1\");\n-        two.add(\"2\");\n+        one.add((E) \"1\");\n+        two.add((E) \"2\");\n         c.addComposited(one);\n         c.addComposited(two);\n-        Iterator i = c.iterator();\n-        Object next = i.next();\n+        Iterator<E> i = c.iterator();\n+        E next = i.next();\n         assertTrue(c.contains(next));\n         assertTrue(one.contains(next));\n         next = i.next();\n         assertTrue(!c.contains(next));\n         assertTrue(!two.contains(next));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testClear() {\n         setUpTest();\n-        one.add(\"1\");\n-        two.add(\"2\");\n+        one.add((E) \"1\");\n+        two.add((E) \"2\");\n         c.addComposited(one, two);\n         c.clear();\n         assertTrue(one.isEmpty());\n         assertTrue(two.isEmpty());\n         assertTrue(c.isEmpty());\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testContainsAll() {\n         setUpTest();\n-        one.add(\"1\");\n-        two.add(\"1\");\n+        one.add((E) \"1\");\n+        two.add((E) \"1\");\n         c.addComposited(one);\n         assertTrue(c.containsAll(two));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testRetainAll() {\n         setUpTest();\n-        one.add(\"1\");\n-        one.add(\"2\");\n-        two.add(\"1\");\n+        one.add((E) \"1\");\n+        one.add((E) \"2\");\n+        two.add((E) \"1\");\n         c.addComposited(one);\n         c.retainAll(two);\n         assertTrue(!c.contains(\"2\"));\n         assertTrue(c.contains(\"1\"));\n         assertTrue(one.contains(\"1\"));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testAddAllMutator() {\n         setUpTest();\n-        c.setMutator(new CompositeCollection.CollectionMutator() {\n-            public boolean add(CompositeCollection composite, \n-            Collection[] collections, Object obj) {\n-                for (int i = 0; i < collections.length; i++) {\n-                    collections[i].add(obj);\n-                }\n-                return true;\n-            }\n-            \n-            public boolean addAll(CompositeCollection composite, \n-            Collection[] collections, Collection coll) {\n-                for (int i = 0; i < collections.length; i++) {\n-                    collections[i].addAll(coll);\n-                }\n-                return true;\n-            }\n-            \n-            public boolean remove(CompositeCollection composite, \n-            Collection[] collections, Object obj) {\n+        c.setMutator(new CompositeCollection.CollectionMutator<E>() {\n+            public boolean add(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, E obj) {\n+                for (Collection<E> collection : collections) {\n+                    collection.add(obj);\n+                }\n+                return true;\n+            }\n+\n+            public boolean addAll(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, Collection<? extends E> coll) {\n+                for (Collection<E> collection : collections) {\n+                    collection.addAll(coll);\n+                }\n+                return true;\n+            }\n+\n+            public boolean remove(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, Object obj) {\n                 return false;\n             }\n         });\n-        \n-        c.addComposited(one);\n-        two.add(\"foo\");\n+\n+        c.addComposited(one);\n+        two.add((E) \"foo\");\n         c.addAll(two);\n         assertTrue(c.contains(\"foo\"));\n         assertTrue(one.contains(\"foo\"));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testAddMutator() {\n         setUpTest();\n-        c.setMutator(new CompositeCollection.CollectionMutator() {\n-            public boolean add(CompositeCollection composite, \n-            Collection[] collections, Object obj) {\n-                for (int i = 0; i < collections.length; i++) {\n-                    collections[i].add(obj);\n-                }\n-                return true;\n-            }\n-            \n-            public boolean addAll(CompositeCollection composite, \n-            Collection[] collections, Collection coll) {\n-                for (int i = 0; i < collections.length; i++) {\n-                    collections[i].addAll(coll);\n-                }\n-                return true;\n-            }\n-            \n-            public boolean remove(CompositeCollection composite, \n-            Collection[] collections, Object obj) {\n+        c.setMutator(new CompositeCollection.CollectionMutator<E>() {\n+            public boolean add(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, E obj) {\n+                for (Collection<E> collection : collections) {\n+                    collection.add(obj);\n+                }\n+                return true;\n+            }\n+\n+            public boolean addAll(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, Collection<? extends E> coll) {\n+                for (Collection<E> collection : collections) {\n+                    collection.addAll(coll);\n+                }\n+                return true;\n+            }\n+\n+            public boolean remove(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, Object obj) {\n                 return false;\n             }\n         });\n-        \n-        c.addComposited(one);\n-        c.add(\"foo\");\n+\n+        c.addComposited(one);\n+        c.add((E) \"foo\");\n         assertTrue(c.contains(\"foo\"));\n         assertTrue(one.contains(\"foo\"));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testToCollection() {\n         setUpTest();\n-        one.add(\"1\");\n-        two.add(\"2\");\n-        c.addComposited(one, two);\n-        Collection foo = c.toCollection();\n+        one.add((E) \"1\");\n+        two.add((E) \"2\");\n+        c.addComposited(one, two);\n+        Collection<E> foo = c.toCollection();\n         assertTrue(foo.containsAll(c));\n         assertEquals(c.size(), foo.size());\n-        one.add(\"3\");\n+        one.add((E) \"3\");\n         assertTrue(!foo.containsAll(c));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testAddAllToCollection() {\n         setUpTest();\n-        one.add(\"1\");\n-        two.add(\"2\");\n-        c.addComposited(one, two);\n-        Collection toCollection = new HashSet();\n+        one.add((E) \"1\");\n+        two.add((E) \"2\");\n+        c.addComposited(one, two);\n+        Collection<E> toCollection = new HashSet<E>();\n         toCollection.addAll(c);\n         assertTrue(toCollection.containsAll(c));\n         assertEquals(c.size(), toCollection.size());\n-    }   \n-    \n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testRemove() {\n         setUpMutatorTest();\n-        one.add(\"1\");\n-        two.add(\"2\");\n-        two.add(\"1\");\n+        one.add((E) \"1\");\n+        two.add((E) \"2\");\n+        two.add((E) \"1\");\n         c.addComposited(one, two);\n         c.remove(\"1\");\n         assertTrue(!c.contains(\"1\"));\n         assertTrue(!one.contains(\"1\"));\n         assertTrue(!two.contains(\"1\"));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testRemoveAll() {\n         setUpMutatorTest();\n-        one.add(\"1\");\n-        two.add(\"2\");\n-        two.add(\"1\");\n-        c.addComposited(one, two);\n-        c.removeAll(one);\n+        one.add((E) \"1\");\n+        two.add((E) \"2\");\n+        two.add((E) \"1\");\n+        // need separate list to remove, as otherwise one clears itself\n+        Collection<E> removing = new ArrayList<E>(one);\n+        c.addComposited(one, two);\n+        c.removeAll(removing);\n         assertTrue(!c.contains(\"1\"));\n         assertTrue(!one.contains(\"1\"));\n         assertTrue(!two.contains(\"1\"));\n     }\n-    \n+\n+    @SuppressWarnings(\"unchecked\")\n     public void testRemoveComposited() {\n         setUpMutatorTest();\n-        one.add(\"1\");\n-        two.add(\"2\");\n-        two.add(\"1\");\n-        c.addComposited(one, two);    \n+        one.add((E) \"1\");\n+        two.add((E) \"2\");\n+        two.add((E) \"1\");\n+        c.addComposited(one, two);\n         c.removeComposited(one);\n         assertTrue(c.contains(\"1\"));\n         assertEquals(2, c.size());", "timestamp": 1252994221, "metainfo": ""}