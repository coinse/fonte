{"sha": "a1dc756f64ccdc6dd02e64f98f76c54f71162d4b", "log": "Use correct internal method, from Andrew Freeman Update licence and javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/java/org/apache/commons/collections/BagUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.7 2002/10/13 00:38:36 scolebourne Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/10/13 00:38:36 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.8 2003/02/20 23:14:03 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *    distribution.\n  *\n  * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n+ *    any, must include the following acknowledgment:\n  *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n  *\n  * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n  *\n  * 5. Products derived from this software may not be called \"Apache\"\n  *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n+ *    permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n \n import java.util.Comparator;\n import java.util.Set;\n+\n /**\n  * Provides utility methods and decorators for {@link Bag} \n- * and {@link SortedBag} instances.<P>\n- *\n+ * and {@link SortedBag} instances.\n+ *\n+ * @since Commons Collections 2.1\n+ * @version $Revision: 1.8 $ $Date: 2003/02/20 23:14:03 $\n+ * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @version $Id: BagUtils.java,v 1.7 2002/10/13 00:38:36 scolebourne Exp $\n- * @since 2.1\n+ * @author Andrew Freeman\n  */\n public class BagUtils {\n \n     /**\n-     *  Prevents instantiation.\n-     */\n-    private BagUtils() {\n-    }\n-\n-\n+     * Instantiation of BagUtils is not intended or required.\n+     * However, some tools require an instance to operate.\n+     */\n+    public BagUtils() {\n+    }\n+\n+    /**\n+     * Implementation of a Bag that validates elements before they are added.\n+     */\n     static class PredicatedBag \n             extends CollectionUtils.PredicatedCollection \n             implements Bag {\n         }\n \n         private Bag getBag() {\n-            return (Bag)collection;\n-        }\n-    }\n-\n-\n+            return (Bag) collection;\n+        }\n+    }\n+\n+\n+    /**\n+     * Implementation of a Bag that is synchronized.\n+     */\n+    static class SynchronizedBag\n+            extends CollectionUtils.SynchronizedCollection\n+            implements Bag {\n+\n+        public SynchronizedBag(Bag bag) {\n+            super(bag);\n+        }\n+\n+        public synchronized boolean add(Object o, int count) {\n+            return getBag().add(o, count);\n+        }\n+\n+        public synchronized boolean remove(Object o, int count) {\n+            return getBag().remove(o, count);\n+        }\n+\n+        public synchronized Set uniqueSet() {\n+            return getBag().uniqueSet();\n+        }\n+\n+        public synchronized int getCount(Object o) {\n+            return getBag().getCount(o);\n+        }\n+\n+        private Bag getBag() {\n+            return (Bag) collection;\n+        }\n+    }\n+\n+\n+    /**\n+     * Implementation of a Bag that is unmodifiable.\n+     */\n     static class UnmodifiableBag \n             extends CollectionUtils.UnmodifiableCollection\n             implements Bag {\n             super(bag);\n         }\n \n-        private Bag getBag() {\n-            return (Bag)collection;\n-        }\n-\n         public boolean add(Object o, int count) {\n             throw new UnsupportedOperationException();\n         }\n         }\n \n         public Set uniqueSet() {\n-            return ((Bag)collection).uniqueSet();\n+            return getBag().uniqueSet();\n         }\n \n         public int getCount(Object o) {\n-            return ((Bag)collection).getCount(o);\n-        }\n-    }\n-\n-\n-    static class SynchronizedBag\n-            extends CollectionUtils.SynchronizedCollection\n-            implements Bag {\n-\n-        public SynchronizedBag(Bag bag) {\n-            super(bag);\n-        }\n-\n-        public synchronized boolean add(Object o, int count) {\n-            return getBag().add(o, count);\n-        }\n-\n-        public synchronized boolean remove(Object o, int count) {\n-            return getBag().remove(o, count);\n-        }\n-\n-        public synchronized Set uniqueSet() {\n-            return getBag().uniqueSet();\n-        }\n-\n-        public synchronized int getCount(Object o) {\n             return getBag().getCount(o);\n         }\n-\n+        \n         private Bag getBag() {\n-            return (Bag)collection;\n-        }\n-\n-    }\n-\n-\n+            return (Bag) collection;\n+        }\n+    }\n+\n+\n+    /**\n+     * Implementation of a SortedBag that validates elements before they are added.\n+     */\n     static class PredicatedSortedBag \n             extends PredicatedBag \n             implements SortedBag {\n         }\n \n         private SortedBag getSortedBag() {\n-            return (SortedBag)collection;\n-        }\n-    }\n-\n-\n+            return (SortedBag) collection;\n+        }\n+    }\n+\n+\n+    /**\n+     * Implementation of a SortedBag that is synchronized.\n+     */\n     static class SynchronizedSortedBag \n             extends SynchronizedBag\n             implements SortedBag {\n         }\n \n         private SortedBag getSortedBag() {\n-            return (SortedBag)collection;\n-        }\n-\n-    }\n-\n-\n-    static class UnmodifiableSortedBag \n+            return (SortedBag) collection;\n+        }\n+    }\n+\n+\n+    /**\n+     * Implementation of a SortedBag that is unmodifiable.\n+     */\n+    static class UnmodifiableSortedBag\n             extends UnmodifiableBag\n             implements SortedBag {\n \n         }\n \n         private SortedBag getSortedBag() {\n-            return (SortedBag)collection;\n-        }\n-\n+            return (SortedBag) collection;\n+        }\n     }\n \n ", "timestamp": 1045782843, "metainfo": ""}