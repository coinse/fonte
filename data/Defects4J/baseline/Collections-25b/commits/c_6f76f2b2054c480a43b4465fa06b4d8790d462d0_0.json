{"sha": "6f76f2b2054c480a43b4465fa06b4d8790d462d0", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r751858 | mbenson | 2009-03-09 14:45:53 -0700 (Mon, 09 Mar 2009) | 1 line          generics     ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.IterableMap;\n+import org.apache.commons.collections.Transformer;\n import org.apache.commons.collections.TransformerUtils;\n import org.apache.commons.collections.collection.TestTransformedCollection;\n \n  *\n  * @author Stephen Colebourne\n  */\n-public class TestTransformedMap extends AbstractTestMap {\n-    \n+public class TestTransformedMap<K, V> extends AbstractTestIterableMap<K, V> {\n+\n     public TestTransformedMap(String testName) {\n         super(testName);\n     }\n     }\n \n     //-----------------------------------------------------------------------\n-    public Map makeEmptyMap() {\n-        return TransformedMap.decorate(new HashMap(), TransformerUtils.nopTransformer(), TransformerUtils.nopTransformer());\n+    public IterableMap<K, V> makeObject() {\n+        return TransformedMap.decorate(new HashMap<K, V>(), TransformerUtils.<K> nopTransformer(),\n+                TransformerUtils.<V> nopTransformer());\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testTransformedMap() {\n-        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        Object[] els = new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n \n-        Map map = TransformedMap.decorate(new HashMap(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER, null);\n+        Map<K, V> map = TransformedMap\n+                .decorate(\n+                        new HashMap<K, V>(),\n+                        (Transformer<? super K, ? extends K>) TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER,\n+                        null);\n         assertEquals(0, map.size());\n         for (int i = 0; i < els.length; i++) {\n-            map.put(els[i], els[i]);\n+            map.put((K) els[i], (V) els[i]);\n             assertEquals(i + 1, map.size());\n             assertEquals(true, map.containsKey(new Integer((String) els[i])));\n             assertEquals(false, map.containsKey(els[i]));\n             assertEquals(true, map.containsValue(els[i]));\n             assertEquals(els[i], map.get(new Integer((String) els[i])));\n         }\n-        \n+\n         assertEquals(null, map.remove(els[0]));\n         assertEquals(els[0], map.remove(new Integer((String) els[0])));\n-        \n+\n         map = TransformedMap.decorate(new HashMap(), null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(0, map.size());\n         for (int i = 0; i < els.length; i++) {\n-            map.put(els[i], els[i]);\n+            map.put((K) els[i], (V) els[i]);\n             assertEquals(i + 1, map.size());\n             assertEquals(true, map.containsValue(new Integer((String) els[i])));\n             assertEquals(false, map.containsValue(els[i]));\n         }\n \n         assertEquals(new Integer((String) els[0]), map.remove(els[0]));\n-        \n-        Set entrySet = map.entrySet();\n-        Map.Entry[] array = (Map.Entry[]) entrySet.toArray(new Map.Entry[0]);\n-        array[0].setValue(\"66\");\n+\n+        Set<Map.Entry<K, V>> entrySet = map.entrySet();\n+        Map.Entry<K, V>[] array = entrySet.toArray(new Map.Entry[0]);\n+        array[0].setValue((V) \"66\");\n         assertEquals(new Integer(66), array[0].getValue());\n         assertEquals(new Integer(66), map.get(array[0].getKey()));\n-        \n+\n         Map.Entry entry = (Map.Entry) entrySet.iterator().next();\n         entry.setValue(\"88\");\n         assertEquals(new Integer(88), entry.getValue());\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testFactory_Decorate() {\n-        Map base = new HashMap();\n-        base.put(\"A\", \"1\");\n-        base.put(\"B\", \"2\");\n-        base.put(\"C\", \"3\");\n-        \n-        Map trans = TransformedMap.decorate(base, null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        Map<K, V> base = new HashMap<K, V>();\n+        base.put((K) \"A\", (V) \"1\");\n+        base.put((K) \"B\", (V) \"2\");\n+        base.put((K) \"C\", (V) \"3\");\n+\n+        Map<K, V> trans = TransformedMap\n+                .decorate(\n+                        base,\n+                        null,\n+                        (Transformer<? super V, ? extends V>) TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(3, trans.size());\n         assertEquals(\"1\", trans.get(\"A\"));\n         assertEquals(\"2\", trans.get(\"B\"));\n         assertEquals(\"3\", trans.get(\"C\"));\n-        trans.put(\"D\", \"4\");\n+        trans.put((K) \"D\", (V) \"4\");\n         assertEquals(new Integer(4), trans.get(\"D\"));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testFactory_decorateTransform() {\n-        Map base = new HashMap();\n-        base.put(\"A\", \"1\");\n-        base.put(\"B\", \"2\");\n-        base.put(\"C\", \"3\");\n-        \n-        Map trans = TransformedMap.decorateTransform(base, null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        Map<K, V> base = new HashMap<K, V>();\n+        base.put((K) \"A\", (V) \"1\");\n+        base.put((K) \"B\", (V) \"2\");\n+        base.put((K) \"C\", (V) \"3\");\n+\n+        Map<K, V> trans = TransformedMap\n+                .decorateTransform(\n+                        base,\n+                        null,\n+                        (Transformer<? super V, ? extends V>) TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(3, trans.size());\n         assertEquals(new Integer(1), trans.get(\"A\"));\n         assertEquals(new Integer(2), trans.get(\"B\"));\n         assertEquals(new Integer(3), trans.get(\"C\"));\n-        trans.put(\"D\", \"4\");\n+        trans.put((K) \"D\", (V) \"4\");\n         assertEquals(new Integer(4), trans.get(\"D\"));\n     }\n ", "timestamp": 1252994259, "metainfo": ""}