{"sha": "a9c42edbcba77030689b8d21034f081ab38b1bcd", "log": "Improve ready for release  ", "commit": "\n--- a/src/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n \n     /** The serialization version. */\n     private static final long serialVersionUID = 1536432911093974264L;\n+\n     /** The maximum size. */\n     private final int maximumSize;\n     /** The timeout milliseconds. */\n \n     /**\n      * Factory method to create a bounded buffer.\n+     * <p>\n+     * When the buffer is full, it will immediately throw a\n+     * <code>BufferOverflowException</code> on calling <code>add()</code>.\n      *\n      * @param buffer  the buffer to decorate, must not be null\n-     * @param maximumSize  the maximum size\n+     * @param maximumSize  the maximum size, must be size one or greater\n      * @return a new bounded buffer\n      * @throws IllegalArgumentException if the buffer is null\n+     * @throws IllegalArgumentException if the maximum size is zero or less\n      */\n-    public static Buffer decorate(Buffer buffer, int maximumSize) {\n+    public static BoundedBuffer decorate(Buffer buffer, int maximumSize) {\n         return new BoundedBuffer(buffer, maximumSize, 0L);\n     }\n \n      * amount of time.\n      *\n      * @param buffer  the buffer to decorate, must not be null\n-     * @param maximumSize  the maximum size\n+     * @param maximumSize  the maximum size, must be size one or greater\n      * @param timeout  the maximum amount of time to wait in milliseconds\n      * @return a new bounded buffer\n      * @throws IllegalArgumentException if the buffer is null\n+     * @throws IllegalArgumentException if the maximum size is zero or less\n      */\n-    public static Buffer decorate(Buffer buffer, int maximumSize, long timeout) {\n+    public static BoundedBuffer decorate(Buffer buffer, int maximumSize, long timeout) {\n         return new BoundedBuffer(buffer, maximumSize, timeout);\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Constructor that wraps (not copies) another buffer, making it bounded waiting only up to\n-     * a maximum amount of time.\n-     * @param buffer the buffer to wrap, must not be null\n-     * @param maximumSize the maximum size of the buffer\n-     * @param timeout the maximum amount of time to wait\n+     * Constructor that wraps (not copies) another buffer, making it bounded\n+     * waiting only up to a maximum amount of time.\n+     *\n+     * @param buffer  the buffer to wrap, must not be null\n+     * @param maximumSize  the maximum size, must be size one or greater\n+     * @param timeout  the maximum amount of time to wait\n      * @throws IllegalArgumentException if the buffer is null\n+     * @throws IllegalArgumentException if the maximum size is zero or less\n      */\n-    protected BoundedBuffer( Buffer buffer, int maximumSize, long timeout ) {\n-        super( buffer );\n+    protected BoundedBuffer(Buffer buffer, int maximumSize, long timeout) {\n+        super(buffer);\n+        if (maximumSize < 1) {\n+            throw new IllegalArgumentException();\n+        }\n         this.maximumSize = maximumSize;\n         this.timeout = timeout;\n     }\n     }\n \n     private void timeoutWait(final int nAdditions) {\n-        synchronized (lock) {\n-            if (timeout < 0 && getBuffer().size() + nAdditions > maximumSize) {\n+        // method synchronized by callers\n+        if (nAdditions > maximumSize) {\n+            throw new BufferOverflowException(\n+                    \"Buffer size cannot exceed \" + maximumSize);\n+        }\n+        if (timeout <= 0) {\n+            // no wait period (immediate timeout)\n+            if (getBuffer().size() + nAdditions > maximumSize) {\n                 throw new BufferOverflowException(\n-                    \"Buffer size cannot exceed \" + maximumSize);\n+                        \"Buffer size cannot exceed \" + maximumSize);\n             }\n-            final long expiration = System.currentTimeMillis() + timeout;\n-            long timeLeft = expiration - System.currentTimeMillis();\n-            while (timeLeft > 0 && getBuffer().size() + nAdditions > maximumSize) {\n-                try {\n-                    lock.wait(timeLeft);\n-                    timeLeft = expiration - System.currentTimeMillis();\n-                } catch (InterruptedException e) {\n-                    PrintWriter out = new PrintWriter(new StringWriter());\n-                    e.printStackTrace(out);\n-                    throw new BufferUnderflowException(\n-                        \"Caused by InterruptedException: \" + out.toString());\n-                }\n+            return;\n+        }\n+        final long expiration = System.currentTimeMillis() + timeout;\n+        long timeLeft = expiration - System.currentTimeMillis();\n+        while (timeLeft > 0 && getBuffer().size() + nAdditions > maximumSize) {\n+            try {\n+                lock.wait(timeLeft);\n+                timeLeft = expiration - System.currentTimeMillis();\n+            } catch (InterruptedException ex) {\n+                PrintWriter out = new PrintWriter(new StringWriter());\n+                ex.printStackTrace(out);\n+                throw new BufferUnderflowException(\n+                    \"Caused by InterruptedException: \" + out.toString());\n             }\n-            if (getBuffer().size() + nAdditions > maximumSize) {\n-                throw new BufferOverflowException(\"Timeout expired\");\n-            }\n+        }\n+        if (getBuffer().size() + nAdditions > maximumSize) {\n+            throw new BufferOverflowException(\"Timeout expired\");\n         }\n     }\n \n     public boolean isFull() {\n-        return (collection.size() == maxSize());\n+        // size() is synchronized\n+        return (size() == maxSize());\n     }\n \n     public int maxSize() {\n--- a/src/test/org/apache/commons/collections/buffer/TestBoundedBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestBoundedBuffer.java\n         assertEquals(true, bc.isFull());\n         bounded.remove();\n         assertEquals(false, bc.isFull());\n+        try {\n+            BoundedBuffer.decorate(new UnboundedFifoBuffer(), 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            BoundedBuffer.decorate(new UnboundedFifoBuffer(), -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testAddToFullBufferNoTimeout() {\n         bounded.add( \"Hello\" );\n         try {\n             bounded.addAll(Collections.singleton(\"World\"));\n+            fail();\n+        } catch (BufferOverflowException e) {\n+        }\n+    }\n+\n+    public void testAddAllToEmptyBufferExceedMaxSizeNoTimeout() {\n+        final Buffer bounded = BoundedBuffer.decorate(new UnboundedFifoBuffer(), 1);\n+        try {\n+            bounded.addAll(Collections.nCopies(2, \"test\"));\n             fail();\n         } catch (BufferOverflowException e) {\n         }", "timestamp": 1147023182, "metainfo": ""}