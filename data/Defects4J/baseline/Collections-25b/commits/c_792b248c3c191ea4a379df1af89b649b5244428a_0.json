{"sha": "792b248c3c191ea4a379df1af89b649b5244428a", "log": "Add TiedMapEntry   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/pairs/TiedMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/pairs/Attic/TiedMapEntry.java,v 1.1 2003/11/02 19:45:48 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.pairs;\n+\n+import java.util.Map;\n+\n+/**\n+ * A Map Entry tied to a map underneath.\n+ * <p>\n+ * This can be used to enable a map entry to make changes on the underlying\n+ * map, however this will probably mess up any iterators.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/02 19:45:48 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TiedMapEntry implements Map.Entry, KeyValue {\n+\n+    /** The map underlying the entry/iterator */    \n+    private final Map map;\n+    /** The key */\n+    private final Object key;\n+    \n+    /**\n+     * Constructs a new entry with the given Map and key.\n+     *\n+     * @param map  the map\n+     * @param key  the key\n+     */\n+    public TiedMapEntry(Map map, Object key) {\n+        super();\n+        this.map = map;\n+        this.key = key;\n+    }\n+\n+    // Map.Entry interface\n+    //-------------------------------------------------------------------------\n+    /**\n+     * Gets the key of this entry\n+     * \n+     * @return the key\n+     */\n+    public Object getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * Gets the value of this entry direct from the map.\n+     * \n+     * @return the value\n+     */\n+    public Object getValue() {\n+        return map.get(key);\n+    }\n+\n+    /**\n+     * Sets the value associated with the key direct onto the map.\n+     * \n+     * @param value  the new value\n+     * @return the old value\n+     * @throws IllegalArgumentException if the value is set to this map entry\n+     */\n+    public Object setValue(Object value) {\n+        if (value == this) {\n+            throw new IllegalArgumentException(\"Cannot set value to this map entry\");\n+        }\n+        return map.put(key, value);\n+    }\n+\n+    /**\n+     * Compares this Map Entry with another Map Entry.\n+     * <p>\n+     * Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal key and value\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof Map.Entry == false) {\n+            return false;\n+        }\n+        Map.Entry other = (Map.Entry) obj;\n+        Object value = getValue();\n+        return\n+            (key == null ? other.getKey() == null : key.equals(other.getKey())) &&\n+            (value == null ? other.getValue() == null : value.equals(other.getValue()));\n+    }\n+     \n+    /**\n+     * Gets a hashCode compatible with the equals method.\n+     * <p>\n+     * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}\n+     * \n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        Object value = getValue();\n+        return (getKey() == null ? 0 : getKey().hashCode()) ^\n+               (value == null ? 0 : value.hashCode()); \n+    }\n+    \n+    /**\n+     * Gets a string version of the entry.\n+     * \n+     * @return entry as a string\n+     */\n+    public String toString() {\n+        return getKey() + \"=\" + getValue();\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/pairs/TestAll.java\n+++ b/src/test/org/apache/commons/collections/pairs/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/pairs/Attic/TestAll.java,v 1.2 2003/11/02 17:06:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/pairs/Attic/TestAll.java,v 1.3 2003/11/02 19:45:48 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for key-value test cases.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/02 17:06:59 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/02 19:45:48 $\n  * \n  * @author Neil O'Toole\n  */\n         \n         suite.addTest(TestDefaultKeyValue.suite());\n         suite.addTest(TestDefaultMapEntry.suite());\n+        suite.addTest(TestTiedMapEntry.suite());\n         suite.addTest(TestUnmodifiableMapEntry.suite());\n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/pairs/TestTiedMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/pairs/Attic/TestTiedMapEntry.java,v 1.1 2003/11/02 19:45:48 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.pairs;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test the TiedMapEntry class.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/02 19:45:48 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTiedMapEntry extends AbstractTestMapEntry {\n+\n+    public TestTiedMapEntry(String testName) {\n+        super(testName);\n+\n+    }\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(TestTiedMapEntry.class);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTiedMapEntry.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the instance to test\n+     */\n+    public Map.Entry makeMapEntry(Object key, Object value) {\n+        Map map = new HashMap();\n+        map.put(key, value);\n+        return new TiedMapEntry(map, key);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests the constructors.\n+     */\n+    public void testConstructors() {\n+        // ignore\n+    }\n+\n+    /**\n+     * Tests the constructors.\n+     */\n+    public void testSetValue() {\n+        Map map = new HashMap();\n+        map.put(\"A\", \"a\");\n+        map.put(\"B\", \"b\");\n+        map.put(\"C\", \"c\");\n+        Map.Entry entry = new TiedMapEntry(map, \"A\");\n+        assertSame(\"A\", entry.getKey());\n+        assertSame(\"a\", entry.getValue());\n+        assertSame(\"a\", entry.setValue(\"x\"));\n+        assertSame(\"A\", entry.getKey());\n+        assertSame(\"x\", entry.getValue());\n+        \n+        entry = new TiedMapEntry(map, \"B\");\n+        assertSame(\"B\", entry.getKey());\n+        assertSame(\"b\", entry.getValue());\n+        assertSame(\"b\", entry.setValue(\"y\"));\n+        assertSame(\"B\", entry.getKey());\n+        assertSame(\"y\", entry.getValue());\n+        \n+        entry = new TiedMapEntry(map, \"C\");\n+        assertSame(\"C\", entry.getKey());\n+        assertSame(\"c\", entry.getValue());\n+        assertSame(\"c\", entry.setValue(\"z\"));\n+        assertSame(\"C\", entry.getKey());\n+        assertSame(\"z\", entry.getValue());\n+    }\n+\n+}", "timestamp": 1067802348, "metainfo": ""}