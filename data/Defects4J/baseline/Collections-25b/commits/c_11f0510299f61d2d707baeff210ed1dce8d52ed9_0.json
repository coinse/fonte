{"sha": "11f0510299f61d2d707baeff210ed1dce8d52ed9", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r570378 | skestle | 2007-08-28 04:03:40 -0700 (Tue, 28 Aug 2007) | 1 line          Generified InstantiateFactory     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/functors/InstantiateFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/InstantiateFactory.java\n  *\n  * @author Stephen Colebourne\n  */\n-public class InstantiateFactory implements Factory, Serializable {\n+public class InstantiateFactory<T> implements Factory<T>, Serializable {\n \n     /** The serial version */\n     private static final long serialVersionUID = -7732226881069447957L;\n \n     /** The class to create */\n-    private final Class iClassToInstantiate;\n+    private final Class<T> iClassToInstantiate;\n     /** The constructor parameter types */\n-    private final Class[] iParamTypes;\n+    private final Class<?>[] iParamTypes;\n     /** The constructor arguments */\n     private final Object[] iArgs;\n     /** The constructor */\n-    private transient Constructor iConstructor = null;\n+    private transient Constructor<T> iConstructor = null;\n \n     /**\n      * Factory method that performs validation.\n      * @param args  the constructor arguments\n      * @return a new instantiate factory\n      */\n-    public static Factory getInstance(Class classToInstantiate, Class[] paramTypes, Object[] args) {\n+    public static <T> Factory<T> getInstance(Class<T> classToInstantiate, Class<?>[] paramTypes, Object[] args) {\n         if (classToInstantiate == null) {\n             throw new IllegalArgumentException(\"Class to instantiate must not be null\");\n         }\n         }\n \n         if (paramTypes == null || paramTypes.length == 0) {\n-            return new InstantiateFactory(classToInstantiate);\n-        } else {\n-            paramTypes = (Class[]) paramTypes.clone();\n-            args = (Object[]) args.clone();\n-            return new InstantiateFactory(classToInstantiate, paramTypes, args);\n+            return new InstantiateFactory<T>(classToInstantiate);\n         }\n+        paramTypes = paramTypes.clone();\n+        args = args.clone();\n+        return new InstantiateFactory<T>(classToInstantiate, paramTypes, args);\n     }\n \n     /**\n      * \n      * @param classToInstantiate  the class to instantiate\n      */\n-    public InstantiateFactory(Class classToInstantiate) {\n+    public InstantiateFactory(Class<T> classToInstantiate) {\n         super();\n         iClassToInstantiate = classToInstantiate;\n         iParamTypes = null;\n      * @param paramTypes  the constructor parameter types, not cloned\n      * @param args  the constructor arguments, not cloned\n      */\n-    public InstantiateFactory(Class classToInstantiate, Class[] paramTypes, Object[] args) {\n+    public InstantiateFactory(Class<T> classToInstantiate, Class<?>[] paramTypes, Object[] args) {\n         super();\n         iClassToInstantiate = classToInstantiate;\n         iParamTypes = paramTypes;\n      * \n      * @return the new object\n      */\n-    public Object create() {\n+    public T create() {\n         // needed for post-serialization\n         if (iConstructor == null) {\n             findConstructor();\n \n         try {\n             return iConstructor.newInstance(iArgs);\n-\n         } catch (InstantiationException ex) {\n             throw new FunctorException(\"InstantiateFactory: InstantiationException\", ex);\n         } catch (IllegalAccessException ex) {", "timestamp": 1252994108, "metainfo": ""}