{"sha": "fe95eebf7d6d34e843679b5b9368d9cf953f5002", "log": "Simplify.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/TransformerUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/TransformerUtils.java\n      * @param <I>  the input type\n      * @param <O>  the output type\n      * @return the transformer\n-     * @see org.apache.commons.collections4.functors.ExceptionTransformer\n+     * @see ExceptionTransformer\n      */\n     public static <I, O> Transformer<I, O> exceptionTransformer() {\n-        return ExceptionTransformer.<I, O>exceptionTransformer();\n+        return ExceptionTransformer.exceptionTransformer();\n     }\n \n     /**\n      * @param <I>  the input type\n      * @param <O>  the output type\n      * @return the transformer\n-     * @see org.apache.commons.collections4.functors.ConstantTransformer\n+     * @see ConstantTransformer\n      */\n     public static <I, O> Transformer<I, O> nullTransformer() {\n-        return ConstantTransformer.<I, O>nullTransformer();\n+        return ConstantTransformer.nullTransformer();\n     }\n \n     /**\n      *\n      * @param <T>  the input/output type\n      * @return the transformer\n-     * @see org.apache.commons.collections4.functors.NOPTransformer\n+     * @see NOPTransformer\n      */\n     public static <T> Transformer<T, T> nopTransformer() {\n-        return NOPTransformer.<T>nopTransformer();\n-    }\n-\n-    /**\n-     * Gets a transformer that returns a clone of the input\n-     * object. The input object will be cloned using one of these\n-     * techniques (in order):\n+        return NOPTransformer.nopTransformer();\n+    }\n+\n+    /**\n+     * Gets a transformer that returns a clone of the input object.\n+     * The input object will be cloned using one of these techniques (in order):\n      * <ul>\n      * <li>public clone method\n      * <li>public copy constructor\n      *\n      * @param <T>  the input/output type\n      * @return the transformer\n-     * @see org.apache.commons.collections4.functors.CloneTransformer\n+     * @see CloneTransformer\n      */\n     public static <T> Transformer<T, T> cloneTransformer() {\n-        return CloneTransformer.<T>cloneTransformer();\n+        return CloneTransformer.cloneTransformer();\n     }\n \n     /**\n      * @param <O>  the output type\n      * @param constantToReturn  the constant object to return each time in the transformer\n      * @return the transformer.\n-     * @see org.apache.commons.collections4.functors.ConstantTransformer\n+     * @see ConstantTransformer\n      */\n     public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n         return ConstantTransformer.constantTransformer(constantToReturn);\n      * @param closure  the closure to run each time in the transformer, not null\n      * @return the transformer\n      * @throws IllegalArgumentException if the closure is null\n-     * @see org.apache.commons.collections4.functors.ClosureTransformer\n+     * @see ClosureTransformer\n      */\n     public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n         return ClosureTransformer.closureTransformer(closure);\n      * @param predicate  the predicate to run each time in the transformer, not null\n      * @return the transformer\n      * @throws IllegalArgumentException if the predicate is null\n-     * @see org.apache.commons.collections4.functors.PredicateTransformer\n+     * @see PredicateTransformer\n      */\n     public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n         return PredicateTransformer.predicateTransformer(predicate);\n      * @param factory  the factory to run each time in the transformer, not null\n      * @return the transformer\n      * @throws IllegalArgumentException if the factory is null\n-     * @see org.apache.commons.collections4.functors.FactoryTransformer\n+     * @see FactoryTransformer\n      */\n     public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n         return FactoryTransformer.factoryTransformer(factory);\n      * @param transformers  an array of transformers to chain\n      * @return the transformer\n      * @throws IllegalArgumentException if the transformers array or any of the transformers is null\n-     * @see org.apache.commons.collections4.functors.ChainedTransformer\n+     * @see ChainedTransformer\n      */\n     public static <T> Transformer<T, T> chainedTransformer(\n             final Transformer<? super T, ? extends T>... transformers) {\n      * @param transformers  a collection of transformers to chain\n      * @return the transformer\n      * @throws IllegalArgumentException if the transformers collection or any of the transformers is null\n-     * @see org.apache.commons.collections4.functors.ChainedTransformer\n+     * @see ChainedTransformer\n      */\n     public static <T> Transformer<T, T> chainedTransformer(\n             final Collection<? extends Transformer<? super T, ? extends T>> transformers) {\n      * @param trueTransformer  the transformer called if the predicate is true\n      * @return the transformer\n      * @throws IllegalArgumentException if either the predicate or transformer is null\n-     * @see org.apache.commons.collections4.functors.IfTransformer\n+     * @see IfTransformer\n      * @since 4.1\n      */\n     public static <T> Transformer<T, T> ifTransformer(final Predicate<? super T> predicate,\n      * @param falseTransformer  the transformer called if the predicate is false\n      * @return the transformer\n      * @throws IllegalArgumentException if either the predicate or transformer is null\n-     * @see org.apache.commons.collections4.functors.IfTransformer\n+     * @see IfTransformer\n      * @since 4.1\n      */\n     public static <I, O> Transformer<I, O> ifTransformer(final Predicate<? super I> predicate,\n      * @param falseTransformer  the transformer called if the predicate is false\n      * @return the transformer\n      * @throws IllegalArgumentException if either the predicate or transformer is null\n-     * @see org.apache.commons.collections4.functors.SwitchTransformer\n+     * @see SwitchTransformer\n      * @deprecated as of 4.1, use {@link #ifTransformer(Predicate, Transformer, Transformer))\n      */\n     @SuppressWarnings(\"unchecked\")\n      * @throws IllegalArgumentException if the either array is null or empty\n      * @throws IllegalArgumentException if any element in the arrays is null\n      * @throws IllegalArgumentException if the arrays are different sizes\n-     * @see org.apache.commons.collections4.functors.SwitchTransformer\n+     * @see SwitchTransformer\n      */\n     public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n             final Transformer<? super I, ? extends O>[] transformers) {\n-        return SwitchTransformer.<I, O>switchTransformer(predicates, transformers, null);\n+        return SwitchTransformer.switchTransformer(predicates, transformers, null);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the either array is null or empty\n      * @throws IllegalArgumentException if any element in the arrays is null\n      * @throws IllegalArgumentException if the arrays are different sizes\n-     * @see org.apache.commons.collections4.functors.SwitchTransformer\n+     * @see SwitchTransformer\n      */\n     public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n             final Transformer<? super I, ? extends O>[] transformers,\n             final Transformer<? super I, ? extends O> defaultTransformer) {\n-        return SwitchTransformer.<I, O>switchTransformer(predicates, transformers, defaultTransformer);\n+        return SwitchTransformer.switchTransformer(predicates, transformers, defaultTransformer);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the map is null or empty\n      * @throws IllegalArgumentException if any transformer in the map is null\n      * @throws ClassCastException  if the map elements are of the wrong type\n-     * @see org.apache.commons.collections4.functors.SwitchTransformer\n+     * @see SwitchTransformer\n      */\n     public static <I, O> Transformer<I, O> switchTransformer(\n             final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n-        return SwitchTransformer.<I, O>switchTransformer(predicatesAndTransformers);\n+        return SwitchTransformer.switchTransformer(predicatesAndTransformers);\n     }\n \n     /**\n      * @return the transformer\n      * @throws IllegalArgumentException if the map is null or empty\n      * @throws IllegalArgumentException if any transformer in the map is null\n-     * @see org.apache.commons.collections4.functors.SwitchTransformer\n+     * @see SwitchTransformer\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <I, O> Transformer<I, O> switchMapTransformer(\n             preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n             trs[i++] = entry.getValue();\n         }\n-        return TransformerUtils.<I, O>switchTransformer(preds, trs, def);\n+        return TransformerUtils.switchTransformer(preds, trs, def);\n     }\n \n     /**\n      *\n      * @param <T>  the output type\n      * @return the transformer\n-     * @see org.apache.commons.collections4.functors.InstantiateTransformer\n+     * @see InstantiateTransformer\n      */\n     public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n-        return InstantiateTransformer.<T>instantiateTransformer();\n+        return InstantiateTransformer.instantiateTransformer();\n     }\n \n     /**\n      * @param args  the arguments to pass to the constructor, can be null\n      * @return the transformer\n      * @throws IllegalArgumentException if the paramTypes and args don't match\n-     * @see org.apache.commons.collections4.functors.InstantiateTransformer\n+     * @see InstantiateTransformer\n      */\n     public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n             final Class<?>[] paramTypes, final Object[] args) {\n-        return InstantiateTransformer.<T>instantiateTransformer(paramTypes, args);\n+        return InstantiateTransformer.instantiateTransformer(paramTypes, args);\n     }\n \n     /**\n      * @param <I>  the input type\n      * @param <O>  the output type\n      * @param map  the map to use to transform the objects\n-     * @return the transformer, or a {@link ConstantTransformer#NULL_INSTANCE} if the {@code map} is {@code null}\n-     * @see org.apache.commons.collections4.functors.MapTransformer\n+     * @return the transformer, or {@link ConstantTransformer#nullTransformer()} if the\n+     *   {@code map} is {@code null}\n+     * @see MapTransformer\n      */\n     public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n         return MapTransformer.mapTransformer(map);\n      * @param methodName  the method name to call on the input object, may not be null\n      * @return the transformer\n      * @throws IllegalArgumentException if the methodName is null.\n-     * @see org.apache.commons.collections4.functors.InvokerTransformer\n+     * @see InvokerTransformer\n      */\n     public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n-        return InvokerTransformer.<I, O>invokerTransformer(methodName, null, null);\n+        return InvokerTransformer.invokerTransformer(methodName, null, null);\n     }\n \n     /**\n      * @param args  the arguments\n      * @return the transformer\n      * @throws IllegalArgumentException if the method name is null or the paramTypes and args don't match\n-     * @see org.apache.commons.collections4.functors.InvokerTransformer\n+     * @see InvokerTransformer\n      */\n     public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                               final Object[] args) {\n-        return InvokerTransformer.<I, O>invokerTransformer(methodName, paramTypes, args);\n+        return InvokerTransformer.invokerTransformer(methodName, paramTypes, args);\n     }\n \n     /**\n      *\n      * @param <T>  the input type\n      * @return the transformer\n-     * @see org.apache.commons.collections4.functors.StringValueTransformer\n+     * @see StringValueTransformer\n      */\n     public static <T> Transformer<T, String> stringValueTransformer() {\n-        return StringValueTransformer.<T>stringValueTransformer();\n+        return StringValueTransformer.stringValueTransformer();\n     }\n \n }", "timestamp": 1432888551, "metainfo": ""}