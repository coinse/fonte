{"sha": "b2528188aa4bd7310c6e542f66e2ae2bdb47e091", "log": "add byte collections and tests   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractByteCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractByteCollection.java,v 1.1 2003/04/15 01:55:23 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+/**\n+ * Abstract base class for {@link ByteCollection}s.\n+ * <p />\n+ * Read-only subclasses must override {@link #iterator}\n+ * and {@link #size}.  Mutable subclasses\n+ * should also override {@link #add} and \n+ * {@link ByteIterator#remove ByteIterator.remove}.\n+ * All other methods have at least some base implementation \n+ * derived from these.  Subclasses may choose to override \n+ * these methods to provide a more efficient implementation. \n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:23 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public abstract class AbstractByteCollection implements ByteCollection {\n+    public abstract ByteIterator iterator();\n+    public abstract int size();\n+          \n+    protected AbstractByteCollection() { }\n+              \n+    /** Unsupported in this base implementation. */\n+    public boolean add(byte element) {\n+        throw new UnsupportedOperationException(\"add(byte) is not supported.\");\n+    }\n+\n+    public boolean addAll(ByteCollection c) {\n+        boolean modified = false;\n+        for(ByteIterator iter = c.iterator(); iter.hasNext(); ) {\n+            modified  |= add(iter.next());\n+        }\n+        return modified;\n+    }\n+    \n+    public void clear() {\n+        for(ByteIterator iter = iterator(); iter.hasNext();) {\n+            iter.next();\n+            iter.remove();\n+        }\n+    }        \n+\n+    public boolean contains(byte element) {\n+        for(ByteIterator iter = iterator(); iter.hasNext();) {\n+            if(iter.next() == element) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+        \n+    public boolean containsAll(ByteCollection c) {\n+        for(ByteIterator iter = c.iterator(); iter.hasNext();) {\n+            if(!contains(iter.next())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    public boolean isEmpty() {\n+        return (0 == size());\n+    }\n+       \n+    public boolean removeElement(byte element) {\n+        for(ByteIterator iter = iterator(); iter.hasNext();) {\n+            if(iter.next() == element) {\n+                iter.remove();\n+                return true;\n+            }\n+        }\n+        return false;\n+    }        \n+    \n+    public boolean removeAll(ByteCollection c) {\n+        boolean modified = false;\n+        for(ByteIterator iter = c.iterator(); iter.hasNext(); ) {\n+            modified  |= removeElement(iter.next());\n+        }\n+        return modified;\n+    }       \n+    \n+    public boolean retainAll(ByteCollection c) {\n+        boolean modified = false;\n+        for(ByteIterator iter = iterator(); iter.hasNext();) {\n+            if(!c.contains(iter.next())) {\n+                iter.remove();\n+                modified = true;\n+            }\n+        }\n+        return modified;\n+    }\n+    \n+    public byte[] toArray() {\n+        byte[] array = new byte[size()];\n+        int i = 0;\n+        for(ByteIterator iter = iterator(); iter.hasNext();) {\n+            array[i] = iter.next();\n+            i++;\n+        }\n+        return array;\n+    }\n+        \n+    public byte[] toArray(byte[] a) {\n+        if(a.length < size()) {\n+            return toArray();\n+        } else {\n+            int i = 0;\n+            for(ByteIterator iter = iterator(); iter.hasNext();) {\n+                a[i] = iter.next();\n+                i++;\n+            }\n+            return a;\n+        }            \n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/ArrayByteList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ArrayByteList.java,v 1.1 2003/04/15 01:55:23 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+/**\n+ * An {@link ByteList} backed by an array of <code>byte</code>s.\n+ * This implementation supports all optional methods.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:23 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public class ArrayByteList extends RandomAccessByteList implements ByteList, Serializable {\n+\n+    // constructors\n+    //-------------------------------------------------------------------------\n+\n+    /** \n+     * Construct an empty list with the default\n+     * initial capacity.\n+     */\n+    public ArrayByteList() {\n+        this(8);\n+    }    \n+\n+    /**\n+     * Construct an empty list with the given\n+     * initial capacity.\n+     * @throws IllegalArgumentException when <i>initialCapacity</i> is negative\n+     */\n+    public ArrayByteList(int initialCapacity) {\n+        if(initialCapacity < 0) {\n+            throw new IllegalArgumentException(\"capacity \" + initialCapacity);\n+        }\n+        _data = new byte[initialCapacity];\n+        _size = 0;\n+    }    \n+\n+    /** \n+     * Constructs a list containing the elements of the given collection, \n+     * in the order they are returned by that collection's iterator.\n+     * \n+     * @see ArrayByteList#addAll(org.apache.commons.collections.primitives.ByteCollection)\n+     * @param that the non-<code>null</code> collection of <code>byte</code>s \n+     *        to add\n+     * @throws NullPointerException if <i>that</i> is <code>null</code>\n+     */\n+    public ArrayByteList(ByteCollection that) { \n+        this(that.size());\n+        addAll(that);\n+    }    \n+\n+    // ByteList methods\n+    //-------------------------------------------------------------------------\n+\n+    public byte get(int index) {\n+        checkRange(index);\n+        return _data[index];\n+    }\n+    \n+    public int size() {\n+        return _size;\n+    }\n+    \n+    /** \n+     * Removes the element at the specified position in \n+     * (optional operation).  Any subsequent elements \n+     * are shifted to the left, subtracting one from their \n+     * indices.  Returns the element that was removed.\n+     * \n+     * @param index the index of the element to remove\n+     * @return the value of the element that was removed\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    public byte removeElementAt(int index) {\n+        checkRange(index);\n+        incrModCount();\n+        byte oldval = _data[index];\n+        int numtomove = _size - index - 1;\n+        if(numtomove > 0) {\n+            System.arraycopy(_data,index+1,_data,index,numtomove);\n+        }\n+        _size--;\n+        return oldval;\n+    }\n+    \n+    /** \n+     * Replaces the element at the specified \n+     * position in me with the specified element\n+     * (optional operation). \n+     * \n+     * @param index the index of the element to change\n+     * @param element the value to be stored at the specified position\n+     * @return the value previously stored at the specified position\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    public byte set(int index, byte element) {\n+        checkRange(index);\n+        incrModCount();\n+        byte oldval = _data[index];\n+        _data[index] = element;\n+        return oldval;\n+    }\n+        \n+    /** \n+     * Inserts the specified element at the specified position \n+     * (optional operation). Shifts the element currently \n+     * at that position (if any) and any subsequent elements to the \n+     * right, increasing their indices.\n+     * \n+     * @param index the index at which to insert the element\n+     * @param element the value to insert\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException if some aspect of the specified element \n+     *         prevents it from being added to me\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    public void add(int index, byte element) {\n+        checkRangeIncludingEndpoint(index);\n+        incrModCount();\n+        ensureCapacity(_size+1);\n+        int numtomove = _size-index;\n+        System.arraycopy(_data,index,_data,index+1,numtomove);\n+        _data[index] = element;\n+        _size++;\n+    }\n+\n+    // capacity methods\n+    //-------------------------------------------------------------------------\n+\n+    /** \n+     * Increases my capacity, if necessary, to ensure that I can hold at \n+     * least the number of elements specified by the minimum capacity \n+     * argument without growing.\n+     */\n+    public void ensureCapacity(int mincap) {\n+        incrModCount();\n+        if(mincap > _data.length) {\n+            int newcap = (_data.length * 3)/2 + 1;\n+            byte[] olddata = _data;\n+            _data = new byte[newcap < mincap ? mincap : newcap];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    /** \n+     * Reduce my capacity, if necessary, to match my\n+     * current {@link #size size}.\n+     */\n+    public void trimToSize() {\n+        incrModCount();\n+        if(_size < _data.length) {\n+            byte[] olddata = _data;\n+            _data = new byte[_size];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    // private methods\n+    //-------------------------------------------------------------------------\n+    \n+    private void writeObject(ObjectOutputStream out) throws IOException{\n+        out.defaultWriteObject();\n+        out.writeInt(_data.length);\n+        for(int i=0;i<_size;i++) {\n+            out.writeByte(_data[i]);\n+        }\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        _data = new byte[in.readInt()];\n+        for(int i=0;i<_size;i++) {\n+            _data[i] = in.readByte();\n+        }\n+    }\n+    \n+    private final void checkRange(int index) {\n+        if(index < 0 || index >= _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and less than \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private final void checkRangeIncludingEndpoint(int index) {\n+        if(index < 0 || index > _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and at most \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    // attributes\n+    //-------------------------------------------------------------------------\n+    \n+    private transient byte[] _data = null;\n+    private int _size = 0;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/ByteCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ByteCollection.java,v 1.1 2003/04/15 01:55:23 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+/**\n+ * A collection of <code>byte</code> values.\n+ *\n+ * @see org.apache.commons.collections.primitives.adapters.ByteCollectionCollection\n+ * @see org.apache.commons.collections.primitives.adapters.CollectionByteCollection\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:23 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public interface ByteCollection {\n+    /** \n+     * Ensures that I contain the specified element \n+     * (optional operation).  Returns <code>true</code>\n+     * iff I changed as a result of this call.\n+     * <p/>\n+     * If a collection refuses to add the specified\n+     * element for any reason other than that it already contains\n+     * the element, it <i>must</i> throw an exception (rather than\n+     * simply returning <tt>false</tt>).  This preserves the invariant\n+     * that a collection always contains the specified element after \n+     * this call returns. \n+     * \n+     * @param element the value whose presence within me is to be ensured\n+     * @return <code>true</code> iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException may be thrown if some aspect of the \n+     *         specified element prevents it from being added to me\n+     */\n+    boolean add(byte element);\n+\n+    /** \n+     * {@link #add Adds} all of the elements in the \n+     * specified collection to me (optional operation). \n+     * \n+     * @param c the collection of elements whose presence within me is to \n+     *        be ensured\n+     * @return <code>true</code> iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException may be thrown if some aspect of some \n+     *         specified element prevents it from being added to me\n+     */ \n+    boolean addAll(ByteCollection c);\n+    \n+    /** \n+     * Removes all my elements (optional operation). \n+     * I will be {@link #isEmpty empty} after this\n+     * method successfully returns.\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     */\n+    void clear();\n+\n+    /** \n+     * Returns <code>true</code> iff I contain \n+     * the specified element. \n+     * \n+     * @param element the value whose presence within me is to be tested\n+     * @return <code>true</code> iff I contain the specified element\n+     */\n+    boolean contains(byte element);\n+    \n+    /** \n+     * Returns <code>true</code> iff I {@link #contains contain}\n+     * all of the elements in the given collection.\n+     * \n+     * @param c the collection of elements whose presence within me is to \n+     *        be tested\n+     * @return <code>true</code> iff I contain the all the specified elements\n+     */\n+    boolean containsAll(ByteCollection c);\n+    \n+    /** \n+     * Returns <code>true</code> iff I contain no elements. \n+     * @return <code>true</code> iff I contain no elements. \n+     */\n+    boolean isEmpty();\n+    \n+    /** \n+     * Returns an {@link ByteIterator iterator} over all my elements.\n+     * This base interface places no constraints on the order \n+     * in which the elements are returned by the returned iterator.\n+     * @return an {@link ByteIterator iterator} over all my elements.\n+     */\n+    ByteIterator iterator();\n+    \n+    /** \n+     * Removes all of my elements that are contained in the \n+     * specified collection (optional operation). \n+     * The behavior of this method is unspecified if \n+     * the given collection is modified while this method\n+     * is executing.  Note that this includes the case\n+     * in which the given collection is this collection, \n+     * and it is not empty.\n+     * \n+     * @param c the collection of elements to remove\n+     * @return <code>true</code> iff I contained the at least one of the\n+     *         specified elements, in other words, returns <code>true</code>\n+     *         iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     */\n+    boolean removeAll(ByteCollection c);\n+     \n+    /** \n+     * Removes a single occurrence of the specified element \n+     * (optional operation). \n+     * \n+     * @param element the element to remove, if present\n+     * @return <code>true</code> iff I contained the specified element, \n+     *         in other words, iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     */\n+    boolean removeElement(byte element);\n+    \n+    /** \n+     * Removes all of my elements that are <i>not</i> contained in the \n+     * specified collection (optional operation). \n+     * (In other words, retains <i>only</i> my elements that are \n+     * contained in the specified collection.)\n+     * The behavior of this method is unspecified if \n+     * the given collection is modified while this method\n+     * is executing.\n+     * \n+     * @param c the collection of elements to retain\n+     * @return <code>true</code> iff I changed as a result \n+     *         of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     */\n+    boolean retainAll(ByteCollection c);\n+    \n+    /** \n+     * Returns the number of elements I contain. \n+     * @return the number of elements I contain\n+     */\n+    int size();\n+    \n+    /** \n+     * Returns an array containing all of my elements.\n+     * The length of the returned array will be equal\n+     * to my {@link #size size}.\n+     * <p/>\n+     * The returned array will be independent of me, \n+     * so that callers may modify that \n+     * returned array without modifying this collection.\n+     * <p/>\n+     * When I guarantee the order in which \n+     * elements are returned by an {@link #iterator iterator},\n+     * the returned array will contain elements in the\n+     * same order.\n+     * \n+     * @return an array containing all my elements\n+     */\n+    byte[] toArray();\n+    \n+    /** \n+     * Returns an array containing all of my elements, \n+     * using the given array if it is large \n+     * enough.  When the length of the given array is \n+     * larger than the number of elements I contain, \n+     * values outside of my range will be unchanged.\n+     * <p/>\n+     * The returned array will be independent of me, \n+     * so that callers may modify that \n+     * returned array without modifying this collection.\n+     * <p/>\n+     * When I guarantee the order in which \n+     * elements are returned by an {@link #iterator iterator},\n+     * the returned array will contain elements in the\n+     * same order.\n+     * \n+     * @param a an array that may be used to contain the elements\n+     * @return an array containing all my elements\n+     */\n+    byte[] toArray(byte[] a);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/ByteIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ByteIterator.java,v 1.1 2003/04/15 01:55:23 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+/**\n+ * An iterator over <code>byte</code> values.\n+ *\n+ * @see org.apache.commons.collections.primitives.adapters.ByteIteratorIterator\n+ * @see org.apache.commons.collections.primitives.adapters.IteratorByteIterator\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:23 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public interface ByteIterator {\n+    /** \n+     * Returns <code>true</code> iff I have more elements. \n+     * (In other words, returns <code>true</code> iff \n+     * a subsequent call to {@link #next next} will return \n+     * an element rather than throwing an exception.)\n+     * \n+     * @return <code>true</code> iff I have more elements\n+     */\n+    boolean hasNext();\n+    \n+    /** \n+     * Returns the next element in me.\n+     * \n+     * @return the next element in me\n+     * @throws NoSuchElementException if there is no next element\n+     */          \n+    byte next();\n+    \n+    /** \n+     * Removes from my underlying collection the last \n+     * element {@link #next returned} by me \n+     * (optional operation). \n+     * \n+     * @throws UnsupportedOperationException if this operation is not supported\n+     * @throws IllegalStateException if {@link #next} has not yet been \n+     *         called, or {@link #remove} has already been called since \n+     *         the last call to {@link #next}.\n+     */          \n+    void remove();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/ByteList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ByteList.java,v 1.1 2003/04/15 01:55:23 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+/**\n+ * An ordered collection of <code>byte</code> values.\n+ *\n+ * @see org.apache.commons.collections.primitives.adapters.ByteListList\n+ * @see org.apache.commons.collections.primitives.adapters.ListByteList\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:23 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public interface ByteList extends ByteCollection {\n+    /** \n+     * Appends the specified element to the end of me\n+     * (optional operation).  Returns <code>true</code>\n+     * iff I changed as a result of this call.\n+     * <p/>\n+     * If a collection refuses to add the specified\n+     * element for any reason other than that it already contains\n+     * the element, it <i>must</i> throw an exception (rather than\n+     * simply returning <tt>false</tt>).  This preserves the invariant\n+     * that a collection always contains the specified element after \n+     * this call returns. \n+     * \n+     * @param element the value whose presence within me is to be ensured\n+     * @return <code>true</code> iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException may be thrown if some aspect of the \n+     *         specified element prevents it from being added to me\n+     */\n+    boolean add(byte element);\n+       \n+    /** \n+     * Inserts the specified element at the specified position \n+     * (optional operation). Shifts the element currently \n+     * at that position (if any) and any subsequent elements to the \n+     * right, increasing their indices.\n+     * \n+     * @param index the index at which to insert the element\n+     * @param element the value to insert\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException if some aspect of the specified element \n+     *         prevents it from being added to me\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    void add(int index, byte element);\n+          \n+    /** \n+     * Inserts all of the elements in the specified collection into me,\n+     * at the specified position (optional operation).  Shifts the \n+     * element currently at that position (if any) and any subsequent \n+     * elements to the right, increasing their indices.  The new elements \n+     * will appear in the order that they are returned by the given \n+     * collection's {@link ByteCollection#iterator iterator}.\n+     * \n+     * @param index the index at which to insert the first element from \n+     *        the specified collection\n+     * @param collection the {@link ByteCollection ByteCollection} of elements to add \n+     * @return <code>true</code> iff I changed as a result of this call\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    boolean addAll(int index, ByteCollection collection);\n+    \n+    /**\n+     * Returns <code>true</code> iff <i>that</i> is an <code>ByteList</code>\n+     * that contains the same elements in the same order as me.\n+     * In other words, returns <code>true</code> iff <i>that</i> is\n+     * an <code>ByteList</code> that has the same {@link #size size} as me,\n+     * and for which the elements returned by its \n+     * {@link ByteList#iterator iterator} are equal (<code>==</code>) to\n+     * the corresponding elements within me.\n+     * (This contract ensures that this method works properly across \n+     * different implementations of the <code>ByteList</code> interface.)\n+     * \n+     * @param that the object to compare to me\n+     * @return <code>true</code> iff <i>that</i> is an <code>ByteList</code>\n+     *         that contains the same elements in the same order as me\n+     */\n+    boolean equals(Object that);\n+    \n+    /** \n+     * Returns the value of the element at the specified position \n+     * within me. \n+     * \n+     * @param index the index of the element to return\n+     * @return the value of the element at the specified position\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    byte get(int index);\n+        \n+    /**\n+     * Returns my hash code.\n+     * <p />\n+     * The hash code of an <code>ByteList</code> is defined to be the\n+     * result of the following calculation:\n+     * <pre> int hash = 1;\n+     * for(ByteIterator iter = iterator(); iter.hasNext(); ) {\n+     *   byte value = iter.next();\n+     *   hash = 31*hash + (int)(value ^ (value >>> 32));\n+     * }</pre>\n+     * <p />\n+     * This contract ensures that this method is consistent with \n+     * {@link #equals equals} and with the \n+     * {@link java.util.List#hashCode hashCode}\n+     * method of a {@link java.util.List List} of {@link Byte}s. \n+     * \n+     * @return my hash code\n+     */\n+    int hashCode();\n+\n+    /** \n+     * Returns the index of the first occurrence \n+     * of the specified element within me, \n+     * or <code>-1</code> if I do not contain \n+     * the element. \n+     * \n+     * @param element the element to search for\n+     * @return the smallest index of an element matching the specified value,\n+     *         or <code>-1</code> if no such matching element can be found \n+     */\n+    int indexOf(byte element);\n+     \n+    /** \n+     * Returns an {@link ByteIterator iterator} over all my elements,\n+     * in the appropriate sequence.\n+     * @return an {@link ByteIterator iterator} over all my elements.\n+     */\n+    ByteIterator iterator();\n+\n+    /** \n+     * Returns the index of the last occurrence \n+     * of the specified element within me, \n+     * or -1 if I do not contain the element. \n+     * \n+     * @param element the element to search for\n+     * @return the largest index of an element matching the specified value,\n+     *         or <code>-1</code> if no such matching element can be found \n+     */\n+    int lastIndexOf(byte element);\n+    \n+    /** \n+     * Returns a \n+     * {@link ByteListIterator bidirectional iterator}\n+     * over all my elements, in the appropriate sequence.\n+     */\n+    ByteListIterator listIterator();\n+    \n+    /** \n+     * Returns a \n+     * {@link ByteListIterator bidirectional iterator}\n+     * over all my elements, in the appropriate sequence, \n+     * starting at the specified position. The \n+     * specified <i>index</i> indicates the first \n+     * element that would be returned by an initial \n+     * call to the \n+     * {@link ByteListIterator#next next} \n+     * method. An initial call to the \n+     * {@link ByteListIterator#previous previous}\n+     * method would return the element with the specified \n+     * <i>index</i> minus one.\n+     * \n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    ByteListIterator listIterator(int index);\n+    \n+    /** \n+     * Removes the element at the specified position in \n+     * (optional operation).  Any subsequent elements \n+     * are shifted to the left, subtracting one from their \n+     * indices.  Returns the element that was removed.\n+     * \n+     * @param index the index of the element to remove\n+     * @return the value of the element that was removed\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    byte removeElementAt(int index);\n+   \n+    /** \n+     * Replaces the element at the specified \n+     * position in me with the specified element\n+     * (optional operation). \n+     * \n+     * @param index the index of the element to change\n+     * @param element the value to be stored at the specified position\n+     * @return the value previously stored at the specified position\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IndexOutOfBoundsException if the specified index is out of range\n+     */\n+    byte set(int index, byte element);\n+    \n+    /** \n+     * Returns a view of the elements within me \n+     * between the specified <i>fromIndex</i>, inclusive, and \n+     * <i>toIndex</i>, exclusive.  The returned <code>ByteList</code>\n+     * is backed by me, so that any changes in \n+     * the returned list are reflected in me, and vice-versa.\n+     * The returned list supports all of the optional operations\n+     * that I support.\n+     * <p/>\n+     * Note that when <code><i>fromIndex</i> == <i>toIndex</i></code>,\n+     * the returned list is initially empty, and when \n+     * <code><i>fromIndex</i> == 0 && <i>toIndex</i> == {@link #size() size()}</code>\n+     * the returned list is my \"improper\" sublist, containing all my elements.\n+     * <p/>\n+     * The semantics of the returned list become undefined\n+     * if I am structurally modified in any way other than \n+     * via the returned list.\n+     * \n+     * @param fromIndex the smallest index (inclusive) in me that appears in \n+     *        the returned list\n+     * @param toIndex the largest index (exclusive) in me that appears in the \n+     *        returned list\n+     * @return a view of this list from <i>fromIndex</i> (inclusive) to \n+     *         <i>toIndex</i> (exclusive)\n+     * \n+     * @throws IndexOutOfBoundsException if either specified index is out of range\n+     */\n+    ByteList subList(int fromIndex, int toIndex);\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/ByteListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ByteListIterator.java,v 1.1 2003/04/15 01:55:23 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+/**\n+ * A bi-directional iterator over <code>byte</code> values.\n+ *\n+ * @see org.apache.commons.collections.primitives.adapters.ByteListIteratorListIterator\n+ * @see org.apache.commons.collections.primitives.adapters.ListIteratorByteListIterator\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:23 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public interface ByteListIterator extends ByteIterator {\n+    /**\n+     * Inserts the specified element into my underlying collection\n+     * (optional operation).\n+     * The element is inserted immediately before the next element \n+     * that would have been returned by {@link #next}, if any,\n+     * and immediately after the next element that would have been \n+     * returned by {@link #previous}, if any.\n+     * <p/>\n+     * The new element is inserted immediately before the implied\n+     * cursor. A subsequent call to {@link #previous} will return\n+     * the added element, a subsequent call to {@link #next} will\n+     * be unaffected.  This call increases by one the value that\n+     * would be returned by a call to {@link #nextIndex} or \n+     * {@link #previousIndex}.\n+     * \n+     * @param element the value to be inserted\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException if some aspect of the specified element \n+     *         prevents it from being added\n+     */\n+    void add(byte element);\n+\n+    /** \n+     * Returns <code>true</code> iff I have more elements\n+     * when traversed in the forward direction. \n+     * (In other words, returns <code>true</code> iff \n+     * a call to {@link #next} will return an element\n+     * rather than throwing an exception.\n+     * \n+     * @return <code>true</code> iff I have more elements when \n+     *         traversed in the forward direction\n+     */\n+    boolean hasNext();\n+    \n+    /** \n+     * Returns <code>true</code> iff I have more elements\n+     * when traversed in the reverse direction. \n+     * (In other words, returns <code>true</code> iff \n+     * a call to {@link #previous} will return an element\n+     * rather than throwing an exception.\n+     * \n+     * @return <code>true</code> iff I have more elements when \n+     *         traversed in the reverse direction\n+     */\n+    boolean hasPrevious();\n+\n+    /** \n+     * Returns the next element in me when traversed in the\n+     * forward direction.\n+     * \n+     * @return the next element in me\n+     * @throws NoSuchElementException if there is no next element\n+     */          \n+    byte next();\n+    \n+    /** \n+     * Returns the index of the element that would be returned\n+     * by a subsequent call to {@link #next}, or the number \n+     * of elements in my iteration if I have no next element.\n+     * \n+     * @return the index of the next element in me\n+     */          \n+    int nextIndex();\n+\n+    /** \n+     * Returns the next element in me when traversed in the\n+     * reverse direction.\n+     * \n+     * @return the previous element in me\n+     * @throws NoSuchElementException if there is no previous element\n+     */          \n+    byte previous();\n+\n+    /** \n+     * Returns the index of the element that would be returned\n+     * by a subsequent call to {@link #previous}, or \n+     * <code>-1</code> if I have no previous element.\n+     * \n+     * @return the index of the previous element in me\n+     */          \n+    int previousIndex();\n+\n+    /** \n+     * Removes from my underlying collection the last \n+     * element returned by {@link #next} or {@link #previous}\n+     * (optional operation). \n+     * \n+     * @throws UnsupportedOperationException if this operation is not \n+     *         supported\n+     * @throws IllegalStateException if neither {@link #next} nor\n+     *         {@link #previous} has yet been called, or \n+     *         {@link #remove} or {@link #add} has already been called since \n+     *         the last call to {@link #next} or {@link #previous}.\n+     */          \n+    void remove();\n+\n+    /** \n+     * Replaces in my underlying collection the last \n+     * element returned by {@link #next} or {@link #previous}\n+     * with the specified value (optional operation). \n+     * \n+     * @param element the value to replace the last returned element with\n+     * @throws UnsupportedOperationException if this operation is not \n+     *         supported\n+     * @throws IllegalStateException if neither {@link #next} nor\n+     *         {@link #previous} has yet been called, or \n+     *         {@link #remove} or {@link #add} has already been called since \n+     *         the last call to {@link #next} or {@link #previous}.\n+     * @throws IllegalArgumentException if some aspect of the specified element \n+     *         prevents it from being added\n+     */          \n+    void set(byte element);\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/RandomAccessByteList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/RandomAccessByteList.java,v 1.1 2003/04/15 01:55:23 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.ConcurrentModificationException;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Abstract base class for {@link ByteList}s backed \n+ * by random access structures like arrays.\n+ * <p />\n+ * Read-only subclasses must override {@link #get}\n+ * and {@link #size}.  Mutable subclasses\n+ * should also override {@link #set}.  Variably-sized\n+ * subclasses should also override {@link #add} \n+ * and {@link #removeElementAt}.  All other methods\n+ * have at least some base implementation derived from \n+ * these.  Subclasses may choose to override these methods\n+ * to provide a more efficient implementation.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:23 $\n+ * \n+ * @author Rodney Waldhoff \n+ */\n+public abstract class RandomAccessByteList extends AbstractByteCollection implements ByteList {\n+\n+    // constructors\n+    //-------------------------------------------------------------------------\n+\n+    /** Constructs an empty list. */\n+    protected RandomAccessByteList() { \n+    }    \n+\n+    // fully abstract methods\n+    //-------------------------------------------------------------------------\n+    \n+    public abstract byte get(int index);\n+    public abstract int size();\n+\n+    // unsupported in base\n+    //-------------------------------------------------------------------------\n+    \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public byte removeElementAt(int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+    \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public byte set(int index, byte element) {\n+        throw new UnsupportedOperationException();\n+    }\n+        \n+    /** \n+     * Unsupported in this implementation. \n+     * @throws UnsupportedOperationException since this method is not supported\n+     */\n+    public void add(int index, byte element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    //-------------------------------------------------------------------------\n+\n+    // javadocs here are inherited\n+    \n+    public boolean add(byte element) {\n+        add(size(),element);\n+        return true;\n+    }\n+\n+    public boolean addAll(int index, ByteCollection collection) {\n+        boolean modified = false;\n+        for(ByteIterator iter = collection.iterator(); iter.hasNext(); ) {\n+            add(index++,iter.next());\n+            modified = true;\n+        }\n+        return modified;\n+    }\n+\n+    public int indexOf(byte element) {\n+        int i = 0;\n+        for(ByteIterator iter = iterator(); iter.hasNext(); ) {\n+            if(iter.next() == element) { \n+                return i;\n+            } else {\n+                i++;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOf(byte element) {\n+        for(ByteListIterator iter = listIterator(size()); iter.hasPrevious(); ) {\n+            if(iter.previous() == element) {\n+                return iter.nextIndex();\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public ByteIterator iterator() {\n+        return listIterator();\n+    }\n+\n+    public ByteListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public ByteListIterator listIterator(int index) {\n+        return new RandomAccessByteListIterator(this,index);            \n+    }\n+\n+    public ByteList subList(int fromIndex, int toIndex) {\n+        return new RandomAccessByteSubList(this,fromIndex,toIndex);\n+    }\n+\n+    public boolean equals(Object that) {\n+        if(this == that) { \n+            return true; \n+        } else if(that instanceof ByteList) {\n+            ByteList thatList = (ByteList)that;\n+            if(size() != thatList.size()) {\n+                return false;\n+            }\n+            for(ByteIterator thatIter = thatList.iterator(), thisIter = iterator(); thisIter.hasNext();) {\n+                if(thisIter.next() != thatIter.next()) { \n+                    return false; \n+                }\n+            }\n+            return true;\n+        } else {\n+            return false;\n+        }        \n+    }\n+    \n+    public int hashCode() {\n+        int hash = 1;\n+        for(ByteIterator iter = iterator(); iter.hasNext(); ) {\n+            hash = 31*hash + ((int)(iter.next()));\n+        }\n+        return hash;\n+    }\n+    \n+    public String toString() {\n+        StringBuffer buf = new StringBuffer();\n+        buf.append(\"[\");\n+        for(ByteIterator iter = iterator(); iter.hasNext();) {\n+            buf.append(iter.next());\n+            if(iter.hasNext()) {\n+                buf.append(\", \");\n+            }\n+        }\n+        buf.append(\"]\");\n+        return buf.toString();\n+    }\n+    \n+    // protected utilities\n+    //-------------------------------------------------------------------------\n+    \n+    /** Get my count of structural modifications. */\n+    protected int getModCount() {\n+        return _modCount;\n+    }\n+\n+    /** Increment my count of structural modifications. */\n+    protected void incrModCount() {\n+        _modCount++;\n+    }\n+\n+    // attributes\n+    //-------------------------------------------------------------------------\n+    \n+    private int _modCount = 0;\n+\n+    // inner classes\n+    //-------------------------------------------------------------------------\n+    \n+    private static class ComodChecker {\n+        ComodChecker(RandomAccessByteList source) {\n+            _source = source;  \n+            resyncModCount();             \n+        }\n+        \n+        protected RandomAccessByteList getList() {\n+            return _source;\n+        }\n+        \n+        protected void assertNotComodified() throws ConcurrentModificationException {\n+            if(_expectedModCount != getList().getModCount()) {\n+                throw new ConcurrentModificationException();\n+            }\n+        }\n+            \n+        protected void resyncModCount() {\n+            _expectedModCount = getList().getModCount();\n+        }\n+        \n+        private RandomAccessByteList _source = null;\n+        private int _expectedModCount = -1;\n+    }\n+    \n+    protected static class RandomAccessByteListIterator extends ComodChecker implements ByteListIterator {\n+        RandomAccessByteListIterator(RandomAccessByteList list, int index) {\n+            super(list);\n+            if(index < 0 || index > getList().size()) {\n+                throw new IndexOutOfBoundsException(\"Index \" + index + \" not in [0,\" + getList().size() + \")\");\n+            } else {\n+                _nextIndex = index;\n+                resyncModCount();\n+            }\n+        }\n+            \n+        public boolean hasNext() {\n+            assertNotComodified();\n+            return _nextIndex < getList().size();\n+        }\n+        \n+        public boolean hasPrevious() {\n+            assertNotComodified();\n+            return _nextIndex > 0;\n+        }\n+        \n+        public int nextIndex() {\n+            assertNotComodified();\n+            return _nextIndex;\n+        }\n+        \n+        public int previousIndex() {\n+            assertNotComodified();\n+            return _nextIndex - 1;\n+        }\n+        \n+        public byte next() {\n+            assertNotComodified();\n+            if(!hasNext()) {\n+                throw new NoSuchElementException();\n+            } else {\n+                byte val = getList().get(_nextIndex);\n+                _lastReturnedIndex = _nextIndex;\n+                _nextIndex++;\n+                return val;\n+            }\n+        }\n+        \n+        public byte previous() {\n+            assertNotComodified();\n+            if(!hasPrevious()) {\n+                throw new NoSuchElementException();\n+            } else {\n+                byte val = getList().get(_nextIndex-1);\n+                _lastReturnedIndex = _nextIndex-1;\n+                _nextIndex--;\n+                return val;\n+            }\n+        }\n+        \n+        public void add(byte value) {\n+            assertNotComodified();\n+            getList().add(_nextIndex,value);\n+            _nextIndex++;\n+            _lastReturnedIndex = -1;\n+            resyncModCount();\n+        }\n+    \n+        public void remove() {\n+            assertNotComodified();\n+            if(-1 == _lastReturnedIndex) {\n+                throw new IllegalStateException();\n+            } else {\n+                getList().removeElementAt(_lastReturnedIndex);\n+                _lastReturnedIndex = -1;\n+                _nextIndex--;\n+                resyncModCount();\n+            }\n+        }\n+        \n+        public void set(byte value) {\n+            assertNotComodified();\n+            if(-1 == _lastReturnedIndex) {\n+                throw new IllegalStateException();\n+            } else {\n+                getList().set(_lastReturnedIndex,value);\n+                resyncModCount();\n+            }\n+        }\n+        \n+        private int _nextIndex = 0;\n+        private int _lastReturnedIndex = -1;        \n+    }   \n+\n+    protected static class RandomAccessByteSubList extends RandomAccessByteList implements ByteList {\n+        RandomAccessByteSubList(RandomAccessByteList list, int fromIndex, int toIndex) {\n+            if(fromIndex < 0 || toIndex > list.size()) {\n+                throw new IndexOutOfBoundsException();\n+            } else if(fromIndex > toIndex) {\n+                throw new IllegalArgumentException();                \n+            } else {\n+                _list = list;\n+                _offset = fromIndex;\n+                _limit = toIndex - fromIndex;\n+                _comod = new ComodChecker(list);\n+                _comod.resyncModCount();\n+            }            \n+        }\n+    \n+        public byte get(int index) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            return _list.get(toUnderlyingIndex(index));\n+        }\n+    \n+        public byte removeElementAt(int index) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            byte val = _list.removeElementAt(toUnderlyingIndex(index));\n+            _limit--;\n+            _comod.resyncModCount();\n+            incrModCount();\n+            return val;\n+        }\n+    \n+        public byte set(int index, byte element) {\n+            checkRange(index);\n+            _comod.assertNotComodified();\n+            byte val = _list.set(toUnderlyingIndex(index),element);\n+            incrModCount();\n+            _comod.resyncModCount();\n+            return val;\n+        }\n+    \n+        public void add(int index, byte element) {\n+            checkRangeIncludingEndpoint(index);\n+            _comod.assertNotComodified();\n+             _list.add(toUnderlyingIndex(index),element);\n+            _limit++;\n+            _comod.resyncModCount();\n+            incrModCount();\n+        }\n+    \n+        public int size() {\n+            _comod.assertNotComodified();\n+            return _limit;\n+        }\n+    \n+        private void checkRange(int index) {\n+            if(index < 0 || index >= size()) {\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \")\");\n+            }\n+        }\n+          \n+        private void checkRangeIncludingEndpoint(int index) {\n+            if(index < 0 || index > size()) {\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \"]\");\n+            }\n+        }\n+          \n+        private int toUnderlyingIndex(int index) {\n+            return (index + _offset);\n+        }\n+        \n+        private int _offset = 0;        \n+        private int _limit = 0; \n+        private RandomAccessByteList _list = null;\n+        private ComodChecker _comod = null;\n+    \n+    }\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/AbstractByteCollectionCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/AbstractByteCollectionCollection.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.lang.reflect.Array;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.primitives.ByteCollection;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+abstract class AbstractByteCollectionCollection implements Collection {\n+    \n+    public boolean add(Object element) {\n+        return getByteCollection().add(((Number)element).byteValue());\n+    }\n+\n+    public boolean addAll(Collection c) {\n+        return getByteCollection().addAll(CollectionByteCollection.wrap(c));\n+    }\n+        \n+    public void clear() {\n+        getByteCollection().clear();\n+    }\n+\n+    public boolean contains(Object element) {\n+        return getByteCollection().contains(((Number)element).byteValue());\n+    }\n+   \n+    \n+    public boolean containsAll(Collection c) {\n+        return getByteCollection().containsAll(CollectionByteCollection.wrap(c));\n+    }        \n+        \n+    public String toString() {\n+        return getByteCollection().toString();\n+    }\n+    \n+    public boolean isEmpty() {\n+        return getByteCollection().isEmpty();\n+    }\n+    \n+    /**\n+     * {@link ByteIteratorIterator#wrap wraps} the \n+     * {@link org.apache.commons.collections.primitives.ByteIterator ByteIterator}\n+     * returned by my underlying \n+     * {@link ByteCollection ByteCollection}, \n+     * if any.\n+     */\n+    public Iterator iterator() {\n+        return ByteIteratorIterator.wrap(getByteCollection().iterator());\n+    }\n+     \n+    public boolean remove(Object element) {\n+        return getByteCollection().removeElement(((Number)element).byteValue());\n+    }\n+    \n+    public boolean removeAll(Collection c) {\n+        return getByteCollection().removeAll(CollectionByteCollection.wrap(c));\n+    }\n+    \n+    public boolean retainAll(Collection c) {\n+        return getByteCollection().retainAll(CollectionByteCollection.wrap(c));\n+    }\n+    \n+    public int size() {\n+        return getByteCollection().size();\n+    }\n+    \n+    public Object[] toArray() {\n+        byte[] a = getByteCollection().toArray();\n+        Object[] A = new Object[a.length];\n+        for(int i=0;i<a.length;i++) {\n+            A[i] = new Byte(a[i]);\n+        }\n+        return A;\n+    }\n+    \n+    public Object[] toArray(Object[] A) {\n+        byte[] a = getByteCollection().toArray();\n+        if(A.length < a.length) {\n+            A = (Object[])(Array.newInstance(A.getClass().getComponentType(), a.length));\n+        }\n+        for(int i=0;i<a.length;i++) {\n+            A[i] = new Byte(a[i]);\n+        }\n+        if(A.length > a.length) {\n+            A[a.length] = null;\n+        }\n+\n+        return A;\n+    }\n+\n+    protected abstract ByteCollection getByteCollection();            \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/AbstractByteListList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/AbstractByteListList.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.primitives.ByteCollection;\n+import org.apache.commons.collections.primitives.ByteList;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+abstract class AbstractByteListList extends AbstractByteCollectionCollection implements List {\n+    \n+    public void add(int index, Object element) {\n+        getByteList().add(index,((Number)element).byteValue());\n+    }\n+\n+    public boolean addAll(int index, Collection c) {\n+        return getByteList().addAll(index,CollectionByteCollection.wrap(c));\n+    }\n+\n+    public Object get(int index) {\n+        return new Byte(getByteList().get(index));\n+    }\n+\n+    public int indexOf(Object element) {\n+        return getByteList().indexOf(((Number)element).byteValue());\n+    }\n+\n+    public int lastIndexOf(Object element) {\n+        return getByteList().lastIndexOf(((Number)element).byteValue());\n+    }\n+\n+    /**\n+     * {@link ByteListIteratorListIterator#wrap wraps} the \n+     * {@link org.apache.commons.collections.primitives.ByteListIterator ByteListIterator}\n+     * returned by my underlying \n+     * {@link ByteList ByteList}, \n+     * if any.\n+     */\n+    public ListIterator listIterator() {\n+        return ByteListIteratorListIterator.wrap(getByteList().listIterator());\n+    }\n+\n+    /**\n+     * {@link ByteListIteratorListIterator#wrap wraps} the \n+     * {@link org.apache.commons.collections.primitives.ByteListIterator ByteListIterator}\n+     * returned by my underlying \n+     * {@link ByteList ByteList}, \n+     * if any.\n+     */\n+    public ListIterator listIterator(int index) {\n+        return ByteListIteratorListIterator.wrap(getByteList().listIterator(index));\n+    }\n+\n+    public Object remove(int index) {\n+        return new Byte(getByteList().removeElementAt(index));\n+    }\n+\n+    public Object set(int index, Object element) {\n+        return new Byte(getByteList().set(index, ((Number)element).byteValue() ));\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        return ByteListList.wrap(getByteList().subList(fromIndex,toIndex));\n+    }\n+\n+    public boolean equals(Object obj) {\n+        if(obj instanceof List) {\n+            List that = (List)obj;\n+            if(this == that) {\n+                return true;\n+            } else if(this.size() != that.size()) {\n+                return false;            \n+            } else {\n+                Iterator thisiter = iterator();\n+                Iterator thatiter = that.iterator();\n+                while(thisiter.hasNext()) {\n+                    Object thiselt = thisiter.next();\n+                    Object thatelt = thatiter.next();\n+                    if(null == thiselt ? null != thatelt : !(thiselt.equals(thatelt))) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    public int hashCode() {\n+        return getByteList().hashCode();\n+    }\n+    \n+    protected final ByteCollection getByteCollection() {\n+        return getByteList();\n+    }\n+    \n+    protected abstract ByteList getByteList();\n+        \n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/AbstractCollectionByteCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/AbstractCollectionByteCollection.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.primitives.ByteCollection;\n+import org.apache.commons.collections.primitives.ByteIterator;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+abstract class AbstractCollectionByteCollection implements ByteCollection {\n+    protected AbstractCollectionByteCollection() {\n+    }\n+\n+    public boolean add(byte element) {\n+        return getCollection().add(new Byte(element));\n+    }\n+        \n+    public boolean addAll(ByteCollection c) {\n+        return getCollection().addAll(ByteCollectionCollection.wrap(c));\n+    }\n+    \n+    public void clear() {\n+        getCollection().clear();\n+    }\n+\n+    public boolean contains(byte element) {\n+        return getCollection().contains(new Byte(element));\n+    }\n+    \n+    public boolean containsAll(ByteCollection c) {\n+        return getCollection().containsAll(ByteCollectionCollection.wrap(c));\n+    }        \n+    \n+    public String toString() {\n+        return getCollection().toString();\n+    }\n+\n+    public boolean isEmpty() {\n+        return getCollection().isEmpty();\n+    }\n+    \n+    /**\n+     * {@link IteratorByteIterator#wrap wraps} the \n+     * {@link java.util.Iterator Iterator}\n+     * returned by my underlying \n+     * {@link Collection Collection}, \n+     * if any.\n+     */\n+    public ByteIterator iterator() {\n+        return IteratorByteIterator.wrap(getCollection().iterator());\n+    }\n+     \n+    public boolean removeElement(byte element) {\n+        return getCollection().remove(new Byte(element));\n+    }\n+    \n+    public boolean removeAll(ByteCollection c) {\n+        return getCollection().removeAll(ByteCollectionCollection.wrap(c));\n+    }\n+        \n+    public boolean retainAll(ByteCollection c) {\n+        return getCollection().retainAll(ByteCollectionCollection.wrap(c));\n+    }\n+    \n+    public int size() {\n+        return getCollection().size();\n+    }\n+    \n+    public byte[] toArray() {\n+        Object[] src = getCollection().toArray();\n+        byte[] dest = new byte[src.length];\n+        for(int i=0;i<src.length;i++) {\n+            dest[i] = ((Number)(src[i])).byteValue();\n+        }\n+        return dest;\n+    }\n+    \n+    public byte[] toArray(byte[] dest) {\n+        Object[] src = getCollection().toArray();\n+        if(dest.length < src.length) {\n+            dest = new byte[src.length];\n+        }\n+        for(int i=0;i<src.length;i++) {\n+            dest[i] = ((Number)(src[i])).byteValue();\n+        }\n+        return dest;\n+    }\n+    \n+    protected abstract Collection getCollection();\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/AbstractListByteList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/AbstractListByteList.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.collections.primitives.ByteCollection;\n+import org.apache.commons.collections.primitives.ByteIterator;\n+import org.apache.commons.collections.primitives.ByteList;\n+import org.apache.commons.collections.primitives.ByteListIterator;\n+\n+/**\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+abstract class AbstractListByteList extends AbstractCollectionByteCollection implements ByteList {\n+\n+    public void add(int index, byte element) {\n+        getList().add(index,new Byte(element));\n+    }\n+\n+    public boolean addAll(int index, ByteCollection collection) {\n+        return getList().addAll(index,ByteCollectionCollection.wrap(collection));\n+    }\n+\n+    public byte get(int index) {\n+        return ((Number)getList().get(index)).byteValue();\n+    }\n+\n+    public int indexOf(byte element) {\n+        return getList().indexOf(new Byte(element));\n+    }\n+\n+    public int lastIndexOf(byte element) {\n+        return getList().lastIndexOf(new Byte(element));\n+    }\n+\n+    /**\n+     * {@link ListIteratorByteListIterator#wrap wraps} the \n+     * {@link ByteList ByteList} \n+     * returned by my underlying \n+     * {@link ByteListIterator ByteListIterator},\n+     * if any.\n+     */\n+    public ByteListIterator listIterator() {\n+        return ListIteratorByteListIterator.wrap(getList().listIterator());\n+    }\n+\n+    /**\n+     * {@link ListIteratorByteListIterator#wrap wraps} the \n+     * {@link ByteList ByteList} \n+     * returned by my underlying \n+     * {@link ByteListIterator ByteListIterator},\n+     * if any.\n+     */\n+    public ByteListIterator listIterator(int index) {\n+        return ListIteratorByteListIterator.wrap(getList().listIterator(index));\n+    }\n+\n+    public byte removeElementAt(int index) {\n+        return ((Number)getList().remove(index)).byteValue();\n+    }\n+\n+    public byte set(int index, byte element) {\n+        return ((Number)getList().set(index,new Byte(element))).byteValue();\n+    }\n+\n+    public ByteList subList(int fromIndex, int toIndex) {\n+        return ListByteList.wrap(getList().subList(fromIndex,toIndex));\n+    }\n+\n+    public boolean equals(Object obj) {\n+        if(obj instanceof ByteList) {\n+            ByteList that = (ByteList)obj;\n+            if(this == that) {\n+                return true;\n+            } else if(this.size() != that.size()) {\n+                return false;            \n+            } else {\n+                ByteIterator thisiter = iterator();\n+                ByteIterator thatiter = that.iterator();\n+                while(thisiter.hasNext()) {\n+                    if(thisiter.next() != thatiter.next()) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+        \n+    public int hashCode() {\n+        return getList().hashCode();\n+    }\n+    \n+    final protected Collection getCollection() {\n+        return getList();\n+    }\n+    \n+    abstract protected List getList();\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/ByteCollectionCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ByteCollectionCollection.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.primitives.ByteCollection;\n+\n+/**\n+ * Adapts an {@link ByteCollection ByteCollection}\n+ * to the {@link java.util.Collection Collection}\n+ * interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link ByteCollection ByteCollection} \n+ * implementation in the \"obvious\" way.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+final public class ByteCollectionCollection extends AbstractByteCollectionCollection implements Serializable {\n+    \n+    /**\n+     * Create a {@link Collection Collection} wrapping\n+     * the specified {@link ByteCollection ByteCollection}.  When\n+     * the given <i>collection</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param collection the (possibly <code>null</code>) \n+     *        {@link ByteCollection ByteCollection} to wrap\n+     * @return a {@link Collection Collection} wrapping the given \n+     *         <i>collection</i>, or <code>null</code> when <i>collection</i> is\n+     *         <code>null</code>.\n+     */\n+    public static Collection wrap(ByteCollection collection) {\n+        if(null == collection) {\n+            return null;\n+        } else if(collection instanceof Serializable) {\n+            return new ByteCollectionCollection(collection);\n+        } else {\n+            return new NonSerializableByteCollectionCollection(collection);\n+        }\n+    }\n+    \n+    /**\n+     * Creates a {@link Collection Collection} wrapping\n+     * the specified {@link ByteCollection ByteCollection}.\n+     * @see #wrap\n+     */\n+    public ByteCollectionCollection(ByteCollection collection) {\n+        _collection = collection;\n+    }\n+    \n+\n+    protected ByteCollection getByteCollection() {\n+        return _collection;\n+    }\n+        \n+    private ByteCollection _collection = null;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/ByteIteratorIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ByteIteratorIterator.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.primitives.ByteIterator;\n+\n+/**\n+ * Adapts an {@link ByteIterator ByteIterator} to the\n+ * {@link java.util.Iterator Iterator} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link ByteIterator ByteIterator} \n+ * implementation in the \"obvious\" way.\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+public class ByteIteratorIterator implements Iterator {\n+    \n+    /**\n+     * Create an {@link Iterator Iterator} wrapping\n+     * the specified {@link ByteIterator ByteIterator}.  When\n+     * the given <i>iterator</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param iterator the (possibly <code>null</code>) \n+     *        {@link ByteIterator ByteIterator} to wrap\n+     * @return an {@link Iterator Iterator} wrapping the given \n+     *         <i>iterator</i>, or <code>null</code> when <i>iterator</i> is\n+     *         <code>null</code>.\n+     */\n+    public static Iterator wrap(ByteIterator iterator) {\n+        return null == iterator ? null : new ByteIteratorIterator(iterator);\n+    }\n+    \n+    /**\n+     * Creates an {@link Iterator Iterator} wrapping\n+     * the specified {@link ByteIterator ByteIterator}.\n+     * @see #wrap\n+     */\n+    public ByteIteratorIterator(ByteIterator iterator) {\n+        _iterator = iterator;\n+    }\n+    \n+    public boolean hasNext() {\n+        return _iterator.hasNext();\n+    }\n+    \n+    public Object next() {\n+        return new Byte(_iterator.next());\n+    }\n+    \n+    public void remove() {\n+        _iterator.remove();\n+    }\n+    \n+    private ByteIterator _iterator = null;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/ByteListIteratorListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ByteListIteratorListIterator.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.primitives.ByteListIterator;\n+\n+/**\n+ * Adapts an {@link ByteListIterator ByteListIterator} to the\n+ * {@link ListIterator ListIterator} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link ByteListIterator ByteListIterator} \n+ * implementation in the \"obvious\" way.\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+public class ByteListIteratorListIterator implements ListIterator {\n+    \n+    /**\n+     * Create a {@link ListIterator ListIterator} wrapping\n+     * the specified {@link ByteListIterator ByteListIterator}.  When\n+     * the given <i>iterator</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param iterator the (possibly <code>null</code>) \n+     *        {@link ByteListIterator ByteListIterator} to wrap\n+     * @return a {@link ListIterator ListIterator} wrapping the given \n+     *         <i>iterator</i>, or <code>null</code> when <i>iterator</i> is\n+     *         <code>null</code>.\n+     */\n+    public static ListIterator wrap(ByteListIterator iterator) {\n+        return null == iterator ? null : new ByteListIteratorListIterator(iterator);\n+    }\n+    \n+    /**\n+     * Creates an {@link ListIterator ListIterator} wrapping\n+     * the specified {@link ByteListIterator ByteListIterator}.\n+     * @see #wrap\n+     */\n+    public ByteListIteratorListIterator(ByteListIterator iterator) {\n+        _iterator = iterator;\n+    }\n+    \n+    public int nextIndex() {\n+        return _iterator.nextIndex();\n+    }\n+\n+    public int previousIndex() {\n+        return _iterator.previousIndex();\n+    }\n+\n+    public boolean hasNext() {\n+        return _iterator.hasNext();\n+    }\n+\n+    public boolean hasPrevious() {\n+        return _iterator.hasPrevious();\n+    }\n+    \n+    public Object next() {\n+        return new Byte(_iterator.next());\n+    }\n+\n+    public Object previous() {\n+        return new Byte(_iterator.previous());\n+    }\n+\n+    public void add(Object obj) {\n+        _iterator.add(((Number)obj).byteValue());\n+    }\n+      \n+    public void set(Object obj) {\n+        _iterator.set(((Number)obj).byteValue());\n+    }\n+\n+    public void remove() {\n+        _iterator.remove();\n+    }\n+          \n+    private ByteListIterator _iterator = null;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/ByteListList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ByteListList.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import org.apache.commons.collections.primitives.ByteList;\n+\n+/**\n+ * Adapts an {@link ByteList ByteList} to the\n+ * {@link List List} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link ByteList ByteList} \n+ * implementation in the \"obvious\" way.\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+final public class ByteListList extends AbstractByteListList implements Serializable {\n+    \n+    /**\n+     * Create a {@link List List} wrapping\n+     * the specified {@link ByteList ByteList}.  When\n+     * the given <i>list</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param list the (possibly <code>null</code>) \n+     *        {@link ByteList ByteList} to wrap\n+     * @return a {@link List List} wrapping the given \n+     *         <i>list</i>, or <code>null</code> when <i>list</i> is\n+     *         <code>null</code>.\n+     */\n+    public static List wrap(ByteList list) {\n+        if(null == list) {\n+            return null;\n+        } else if(list instanceof Serializable) {\n+            return new ByteListList(list);\n+        } else {\n+            return new NonSerializableByteListList(list);\n+        }\n+    }\n+    \n+    /**\n+     * Creates a {@link List List} wrapping\n+     * the specified {@link ByteList ByteList}.\n+     * @see #wrap\n+     */\n+    public ByteListList(ByteList list) {\n+        _list = list;\n+    }\n+    \n+    protected ByteList getByteList() {\n+        return _list;\n+    }    \n+    \n+    private ByteList _list = null;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/CollectionByteCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/CollectionByteCollection.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.primitives.ByteCollection;\n+\n+/**\n+ * Adapts a {@link java.lang.Number Number}-valued\n+ * {@link java.util.Collection Collection} to the\n+ * {@link ByteCollection ByteCollection} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link Collection Collection} \n+ * implementation in the \"obvious\" way.\n+ * \n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+final public class CollectionByteCollection extends AbstractCollectionByteCollection implements Serializable {\n+    /**\n+     * Create an {@link ByteCollection ByteCollection} wrapping\n+     * the specified {@link Collection Collection}.  When\n+     * the given <i>collection</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param collection the (possibly <code>null</code>) {@link Collection} to wrap\n+     * @return an {@link ByteCollection ByteCollection} wrapping the given \n+     *         <i>collection</i>, or <code>null</code> when <i>collection</i> is\n+     *         <code>null</code>.\n+     */\n+    public static ByteCollection wrap(Collection collection) {\n+        if(null == collection) {\n+            return null;\n+        } else if(collection instanceof Serializable) {\n+            return new CollectionByteCollection(collection);\n+        } else {\n+            return new NonSerializableCollectionByteCollection(collection);\n+        }\n+    }\n+\n+    /**\n+     * Creates an {@link ByteCollection ByteCollection} wrapping\n+     * the specified {@link Collection Collection}.\n+     * @see #wrap\n+     */\n+    public CollectionByteCollection(Collection collection) {\n+        _collection = collection;\n+    }\n+    \n+    protected Collection getCollection() {\n+        return _collection;\n+    }\n+ \n+    private Collection _collection = null;         \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/IteratorByteIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/IteratorByteIterator.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.primitives.ByteIterator;\n+\n+/**\n+ * Adapts a {@link java.lang.Number Number}-valued \n+ * {@link Iterator Iterator} \n+ * to the {@link ByteIterator ByteIterator} \n+ * interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link Iterator Iterator} \n+ * implementation in the \"obvious\" way.\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+public class IteratorByteIterator implements ByteIterator {\n+    \n+    /**\n+     * Create an {@link ByteIterator ByteIterator} wrapping\n+     * the specified {@link Iterator Iterator}.  When\n+     * the given <i>iterator</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param iterator the (possibly <code>null</code>) \n+     *        {@link Iterator Iterator} to wrap\n+     * @return an {@link ByteIterator ByteIterator} wrapping the given \n+     *         <i>iterator</i>, or <code>null</code> when <i>iterator</i> is\n+     *         <code>null</code>.\n+     */\n+    public static ByteIterator wrap(Iterator iterator) {\n+        return null == iterator ? null : new IteratorByteIterator(iterator);\n+    }\n+   \n+    /**\n+     * Creates an {@link ByteIterator ByteIterator} wrapping\n+     * the specified {@link Iterator Iterator}.\n+     * @see #wrap\n+     */\n+    public IteratorByteIterator(Iterator iterator) {\n+        _iterator = iterator;\n+    }\n+    \n+    public boolean hasNext() {\n+        return _iterator.hasNext();\n+    }\n+    \n+    public byte next() {\n+        return ((Number)(_iterator.next())).byteValue();\n+    }\n+    \n+    public void remove() {\n+        _iterator.remove();\n+    }\n+    \n+    private Iterator _iterator = null;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/ListByteList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ListByteList.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import org.apache.commons.collections.primitives.ByteList;\n+\n+/**\n+ * Adapts a {@link Number}-valued {@link List List} \n+ * to the {@link ByteList ByteList} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link List List} \n+ * implementation in the \"obvious\" way.\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+public class ListByteList extends AbstractListByteList implements Serializable {\n+    \n+    /**\n+     * Create an {@link ByteList ByteList} wrapping\n+     * the specified {@link List List}.  When\n+     * the given <i>list</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param list the (possibly <code>null</code>) \n+     *        {@link List List} to wrap\n+     * @return a {@link ByteList ByteList} wrapping the given \n+     *         <i>list</i>, or <code>null</code> when <i>list</i> is\n+     *         <code>null</code>.\n+     */\n+    public static ByteList wrap(List list) {\n+        if(null == list) {\n+            return null;\n+        } else if(list instanceof Serializable) {\n+            return new ListByteList(list);\n+        } else {\n+            return new NonSerializableListByteList(list);\n+        }\n+    }\n+\n+    /**\n+     * Creates an {@link ByteList ByteList} wrapping\n+     * the specified {@link List List}.\n+     * @see #wrap\n+     */\n+    public ListByteList(List list) {\n+        _list = list;     \n+    }\n+    \n+    protected List getList() {\n+        return _list;\n+    }\n+        \n+    private List _list = null;\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/ListIteratorByteListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/ListIteratorByteListIterator.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.primitives.ByteListIterator;\n+\n+/**\n+ * Adapts a {@link Number}-valued {@link ListIterator ListIterator} \n+ * to the {@link ByteListIterator ByteListIterator} interface.\n+ * <p />\n+ * This implementation delegates most methods\n+ * to the provided {@link ByteListIterator ByteListIterator} \n+ * implementation in the \"obvious\" way.\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+public class ListIteratorByteListIterator implements ByteListIterator {\n+        \n+    /**\n+     * Create an {@link ByteListIterator ByteListIterator} wrapping\n+     * the specified {@link ListIterator ListIterator}.  When\n+     * the given <i>iterator</i> is <code>null</code>,\n+     * returns <code>null</code>.\n+     * \n+     * @param iterator the (possibly <code>null</code>) \n+     *        {@link ListIterator ListIterator} to wrap\n+     * @return an {@link ByteListIterator ByteListIterator} wrapping the given \n+     *         <i>iterator</i>, or <code>null</code> when <i>iterator</i> is\n+     *         <code>null</code>.\n+     */\n+    public static ByteListIterator wrap(ListIterator iterator) {\n+        return null == iterator ? null : new ListIteratorByteListIterator(iterator);\n+    }    \n+    \n+    /**\n+     * Creates an {@link ByteListIterator ByteListIterator} wrapping\n+     * the specified {@link ListIterator ListIterator}.\n+     * @see #wrap\n+     */\n+    public ListIteratorByteListIterator(ListIterator iterator) {\n+        _iterator = iterator;\n+    }\n+    \n+    public int nextIndex() {\n+        return _iterator.nextIndex();\n+    }\n+\n+    public int previousIndex() {\n+        return _iterator.previousIndex();\n+    }\n+\n+    public boolean hasNext() {\n+        return _iterator.hasNext();\n+    }\n+\n+    public boolean hasPrevious() {\n+        return _iterator.hasPrevious();\n+    }\n+    \n+    public byte next() {\n+        return ((Number)_iterator.next()).byteValue();\n+    }\n+\n+    public byte previous() {\n+        return ((Number)_iterator.previous()).byteValue();\n+    }\n+\n+    public void add(byte element) {\n+        _iterator.add(new Byte(element));\n+    }\n+      \n+    public void set(byte element) {\n+        _iterator.set(new Byte(element));\n+    }\n+\n+    public void remove() {\n+        _iterator.remove();\n+    }\n+      \n+    private ListIterator _iterator = null;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableByteCollectionCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableByteCollectionCollection.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import org.apache.commons.collections.primitives.ByteCollection;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+final class NonSerializableByteCollectionCollection extends AbstractByteCollectionCollection {\n+    \n+    /**\n+     * Creates a {@link Collection Collection} wrapping\n+     * the specified {@link ByteCollection ByteCollection}.\n+     */\n+    public NonSerializableByteCollectionCollection(ByteCollection collection) {\n+        _collection = collection;\n+    }\n+\n+    protected ByteCollection getByteCollection() {\n+        return _collection;\n+    }\n+        \n+    private ByteCollection _collection = null;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableByteListList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableByteListList.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import org.apache.commons.collections.primitives.ByteList;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+final class NonSerializableByteListList extends AbstractByteListList {\n+    \n+    /**\n+     * Creates a {@link List List} wrapping\n+     * the specified {@link ByteList ByteList}.\n+     */\n+    public NonSerializableByteListList(ByteList list) {\n+        _list = list;\n+    }\n+\n+    protected ByteList getByteList() {\n+        return _list;\n+    }    \n+    \n+    private ByteList _list = null;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableCollectionByteCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableCollectionByteCollection.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Collection;\n+\n+/**\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+final class NonSerializableCollectionByteCollection extends AbstractCollectionByteCollection {\n+    public NonSerializableCollectionByteCollection(Collection collection) {\n+        _collection = collection;\n+    }\n+\n+    protected Collection getCollection() {\n+        return _collection;\n+    }\n+              \n+    private Collection _collection = null;\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/adapters/NonSerializableListByteList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/adapters/Attic/NonSerializableListByteList.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.List;\n+\n+/**\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff \n+ */\n+final class NonSerializableListByteList extends AbstractListByteList {\n+\n+    protected NonSerializableListByteList(List list) {\n+        _list = list;\n+    }\n+    \n+    protected List getList() {\n+        return _list;\n+    }\n+        \n+    private List _list = null;\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractByteCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractByteCollection.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.Collections;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.primitives.adapters.IteratorByteIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestAbstractByteCollection extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestAbstractByteCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestAbstractByteCollection.class);\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testAddIsUnsupportedByDefault() {\n+        ByteCollection col = new ByteCollectionImpl();\n+        try {\n+            col.add((byte)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }        \n+    }\n+    // inner classes\n+    // ------------------------------------------------------------------------\n+\n+\n+    static class ByteCollectionImpl extends AbstractByteCollection {\n+        public ByteCollectionImpl() {\n+        }\n+        \n+        public ByteIterator iterator() {\n+            return new IteratorByteIterator(Collections.EMPTY_LIST.iterator());\n+        }\n+\n+        public int size() {\n+            return 0;\n+        }\n+    }\n+}\n--- a/src/test/org/apache/commons/collections/primitives/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.16 2003/04/15 00:11:20 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.17 2003/04/15 01:55:22 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.16 $ $Date: 2003/04/15 00:11:20 $\n+ * @version $Revision: 1.17 $ $Date: 2003/04/15 01:55:22 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n \n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n+\n+        suite.addTest(TestAbstractByteCollection.suite());\n+        suite.addTest(TestRandomAccessByteList.suite());\n+        suite.addTest(TestArrayByteList.suite());\n \n         suite.addTest(TestAbstractShortCollection.suite());\n         suite.addTest(TestRandomAccessShortList.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayByteList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayByteList.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestArrayByteList extends TestByteList {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestArrayByteList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = BulkTest.makeSuite(TestArrayByteList.class);\n+        return suite;\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    protected ByteList makeEmptyByteList() {\n+        return new ArrayByteList();\n+    }\n+\n+    public String[] ignoredSimpleTests() {\n+        // sublists are not serializable\n+        return new String[] { \n+            \"TestArrayByteList.bulkTestSubList.testFullListSerialization\",\n+            \"TestArrayByteList.bulkTestSubList.testEmptyListSerialization\",\n+            \"TestArrayByteList.bulkTestSubList.testCanonicalEmptyCollectionExists\",\n+            \"TestArrayByteList.bulkTestSubList.testCanonicalFullCollectionExists\",\n+            \"TestArrayByteList.bulkTestSubList.testEmptyListCompatibility\",\n+            \"TestArrayByteList.bulkTestSubList.testFullListCompatibility\",\n+            \"TestArrayByteList.bulkTestSubList.testSerializeDeserializeThenCompare\",\n+            \"TestArrayByteList.bulkTestSubList.testSimpleSerialization\"\n+        };\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    /** @TODO need to add serialized form to cvs */\n+    public void testCanonicalEmptyCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testCanonicalFullCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testEmptyListCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testFullListCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testAddGetLargeValues() {\n+        ByteList list = new ArrayByteList();\n+        for (int i = 0; i < 1000; i++) {\n+            byte value = ((byte) (Byte.MAX_VALUE));\n+            value -= i;\n+            list.add(value);\n+        }\n+        for (int i = 0; i < 1000; i++) {\n+            byte value = ((byte) (Byte.MAX_VALUE));\n+            value -= i;\n+            assertEquals(value, list.get(i), 0f);\n+        }\n+    }\n+\n+    public void testZeroInitialCapacityIsValid() {\n+        ArrayByteList list = new ArrayByteList(0);\n+    }\n+\n+    public void testNegativeInitialCapacityIsInvalid() {\n+        try {\n+            ArrayByteList list = new ArrayByteList(-1);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testCopyConstructor() {\n+        ArrayByteList expected = new ArrayByteList();\n+        for(int i=0;i<10;i++) {\n+            expected.add((byte)i);\n+        }\n+        ArrayByteList list = new ArrayByteList(expected);\n+        assertEquals(10,list.size());\n+        assertEquals(expected,list);\n+    }\n+\n+    public void testCopyConstructorWithNull() {\n+        try {\n+            ArrayByteList list = new ArrayByteList(null);\n+            fail(\"Expected NullPointerException\");\n+        } catch(NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    public void testTrimToSize() {\n+        ArrayByteList list = new ArrayByteList();\n+        for(int j=0;j<3;j++) {\n+            assertTrue(list.isEmpty());\n+    \n+            list.trimToSize();\n+    \n+            assertTrue(list.isEmpty());\n+            \n+            for(int i=0;i<10;i++) {\n+                list.add((byte)i);\n+            }\n+            \n+            for(int i=0;i<10;i++) {\n+                assertEquals((byte)i,list.get(i), 0f);\n+            }\n+            \n+            list.trimToSize();\n+    \n+            for(int i=0;i<10;i++) {\n+                assertEquals((byte)i,list.get(i), 0f);\n+            }\n+    \n+            for(int i=0;i<10;i+=2) {\n+                list.removeElement((byte)i);\n+            }\n+            \n+            for(int i=0;i<5;i++) {\n+                assertEquals((byte)(2*i)+1,list.get(i), 0f);\n+            }\n+    \n+            list.trimToSize();\n+                    \n+            for(int i=0;i<5;i++) {\n+                assertEquals((byte)(2*i)+1,list.get(i), 0f);\n+            }\n+\n+            list.trimToSize();\n+                    \n+            for(int i=0;i<5;i++) {\n+                assertEquals((byte)(2*i)+1,list.get(i), 0f);\n+            }\n+    \n+            list.clear();\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestByteIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestByteIterator.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.primitives.adapters.ByteIteratorIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff\n+ */\n+public abstract class TestByteIterator extends TestIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestByteIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    protected Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    public Iterator makeEmptyIterator() {\n+        return ByteIteratorIterator.wrap(makeEmptyByteIterator());\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        return ByteIteratorIterator.wrap(makeFullByteIterator());\n+    }\n+\n+\n+    protected abstract ByteIterator makeEmptyByteIterator();\n+    protected abstract ByteIterator makeFullByteIterator();\n+    protected abstract byte[] getFullElements();\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testNextHasNextRemove() {\n+        byte[] elements = getFullElements();\n+        ByteIterator iter = makeFullByteIterator();\n+        for(int i=0;i<elements.length;i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(elements[i],iter.next(),0f);\n+            if(supportsRemove()) {\n+                iter.remove();\n+            }\n+        }        \n+        assertTrue(! iter.hasNext() );\n+    }\n+\n+    public void testEmptyByteIterator() {\n+        assertTrue( ! makeEmptyByteIterator().hasNext() );\n+        try {\n+            makeEmptyByteIterator().next();\n+            fail(\"Expected NoSuchElementException\");\n+        } catch(NoSuchElementException e) {\n+            // expected\n+        }\n+        if(supportsRemove()) {\n+            try {\n+                makeEmptyByteIterator().remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+\n+    public void testRemoveBeforeNext() {\n+        if(supportsRemove()) {\n+            try {\n+                makeFullByteIterator().remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+\n+    public void testRemoveAfterRemove() {\n+        if(supportsRemove()) {\n+            ByteIterator iter = makeFullByteIterator();\n+            iter.next();\n+            iter.remove();\n+            try {\n+                iter.remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestByteList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestByteList.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.primitives.adapters.ByteListList;\n+import org.apache.commons.collections.primitives.adapters.ListByteList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff\n+ */\n+public abstract class TestByteList extends TestList {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestByteList(String testName) {\n+        super(testName);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    // collections testing framework: byte list\n+    // ------------------------------------------------------------------------\n+\n+    protected abstract ByteList makeEmptyByteList();\n+\n+    protected ByteList makeFullByteList() {\n+        ByteList list = makeEmptyByteList();\n+        byte[] values = getFullBytes();\n+        for(int i=0;i<values.length;i++) {\n+            list.add(values[i]);\n+        }\n+        return list;\n+    }\n+\n+    protected byte[] getFullBytes() {\n+        byte[] result = new byte[19];\n+        for(int i = 0; i < result.length; i++) {\n+            result[i] = (byte)(i);\n+        }\n+        return result;\n+    }\n+\n+    protected byte[] getOtherBytes() {\n+        byte[] result = new byte[16];\n+        for(int i = 0; i < result.length; i++) {\n+            result[i] = (byte)(i + 43);\n+        }\n+        return result;\n+    }\n+    \n+    // collections testing framework: inherited\n+    // ------------------------------------------------------------------------\n+\n+    protected List makeEmptyList() {\n+        return new ByteListList(makeEmptyByteList());\n+    }\n+        \n+    protected Object[] getFullElements() {\n+        return wrapArray(getFullBytes());\n+    }\n+\n+    protected Object[] getOtherElements() {\n+        return wrapArray(getOtherBytes());\n+    }\n+\n+    // private utils\n+    // ------------------------------------------------------------------------\n+\n+    private Byte[] wrapArray(byte[] primitives) {\n+        Byte[] result = new Byte[primitives.length];\n+        for(int i=0;i<result.length;i++) {\n+            result[i] = new Byte(primitives[i]);            \n+        }\n+        return result;\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    public void testToJustBigEnoughByteArray() {\n+        ByteList list = makeFullByteList();\n+        byte[] dest = new byte[list.size()];\n+        assertSame(dest,list.toArray(dest));\n+        int i=0;\n+        for(ByteIterator iter = list.iterator(); iter.hasNext();i++) {\n+            assertEquals(iter.next(),dest[i], 0f);\n+        }\n+    }\n+    \n+    public void testToLargerThanNeededByteArray() {\n+        ByteList list = makeFullByteList();\n+        byte[] dest = new byte[list.size()*2];\n+        for(int i=0;i<dest.length;i++) {\n+            dest[i] = Byte.MAX_VALUE;\n+        }       \n+        assertSame(dest,list.toArray(dest));\n+        int i=0;\n+        for(ByteIterator iter = list.iterator(); iter.hasNext();i++) {\n+            assertEquals(iter.next(),dest[i], 0f);\n+        }\n+        for(;i<dest.length;i++) {\n+            assertEquals(Byte.MAX_VALUE,dest[i], 0f);\n+        }\n+    }\n+    \n+    public void testToSmallerThanNeededByteArray() {\n+        ByteList list = makeFullByteList();\n+        byte[] dest = new byte[list.size()/2];\n+        byte[] dest2 = list.toArray(dest);\n+        assertTrue(dest != dest2);\n+        int i=0;\n+        for(ByteIterator iter = list.iterator(); iter.hasNext();i++) {\n+            assertEquals(iter.next(),dest2[i], 0f);\n+        }\n+    }\n+    \n+    public void testHashCodeSpecification() {\n+        ByteList list = makeFullByteList();\n+        int hash = 1;\n+        for(ByteIterator iter = list.iterator(); iter.hasNext(); ) {\n+            hash = 31*hash + ((int)iter.next());\n+        }\n+        assertEquals(hash,list.hashCode());\n+    }\n+\n+    public void testEqualsWithTwoByteLists() {\n+        ByteList one = makeEmptyByteList();\n+        assertEquals(\"Equals is reflexive on empty list\",one,one);\n+        ByteList two = makeEmptyByteList();\n+        assertEquals(\"Empty lists are equal\",one,two);\n+        assertEquals(\"Equals is symmetric on empty lists\",two,one);\n+        \n+        one.add((byte)1);\n+        assertEquals(\"Equals is reflexive on non empty list\",one,one);\n+        assertTrue(!one.equals(two));\n+        assertTrue(!two.equals(one));\n+\n+        two.add((byte)1);\n+        assertEquals(\"Non empty lists are equal\",one,two);\n+        assertEquals(\"Equals is symmetric on non empty list\",one,two);\n+        \n+        one.add((byte)1); one.add((byte)2); one.add((byte)3); one.add((byte)5); one.add((byte)8);\n+        assertEquals(\"Equals is reflexive on larger non empty list\",one,one);\n+        assertTrue(!one.equals(two));\n+        assertTrue(!two.equals(one));\n+        \n+        two.add((byte)1); two.add((byte)2); two.add((byte)3); two.add((byte)5); two.add((byte)8);\n+        assertEquals(\"Larger non empty lists are equal\",one,two);\n+        assertEquals(\"Equals is symmetric on larger non empty list\",two,one);\n+\n+        one.add((byte)9);\n+        two.add((byte)10);\n+        assertTrue(!one.equals(two));\n+        assertTrue(!two.equals(one));\n+\n+    }\n+\n+    public void testByteSubListEquals() {\n+        ByteList one = makeEmptyByteList();\n+        assertEquals(one,one.subList(0,0));\n+        assertEquals(one.subList(0,0),one);\n+        \n+        one.add((byte)1);\n+        assertEquals(one,one.subList(0,1));\n+        assertEquals(one.subList(0,1),one);\n+\n+        one.add((byte)1); one.add((byte)2); one.add((byte)3); one.add((byte)5); one.add((byte)8);\n+        assertEquals(one.subList(0,4),one.subList(0,4));\n+        assertEquals(one.subList(3,5),one.subList(3,5));\n+    }\n+    \n+    public void testEqualsWithByteListAndList() {\n+        ByteList ilist = makeEmptyByteList();\n+        List list = new ArrayList();\n+        \n+        assertTrue(\"Unwrapped, empty List should not be equal to empty ByteList.\",!ilist.equals(list));\n+        assertTrue(\"Unwrapped, empty ByteList should not be equal to empty List.\",!list.equals(ilist));\n+        \n+        assertEquals(new ListByteList(list),ilist);\n+        assertEquals(ilist,new ListByteList(list));\n+        assertEquals(new ByteListList(ilist),list);\n+        assertEquals(list,new ByteListList(ilist));\n+        \n+        ilist.add((byte)1);\n+        list.add(new Byte((byte)1));\n+\n+        assertTrue(\"Unwrapped, non-empty List is not equal to non-empty ByteList.\",!ilist.equals(list));\n+        assertTrue(\"Unwrapped, non-empty ByteList is not equal to non-empty List.\",!list.equals(ilist));\n+        \n+        assertEquals(new ListByteList(list),ilist);\n+        assertEquals(ilist,new ListByteList(list));\n+        assertEquals(new ByteListList(ilist),list);\n+        assertEquals(list,new ByteListList(ilist));\n+                \n+        ilist.add((byte)1); ilist.add((byte)2); ilist.add((byte)3); ilist.add((byte)5); ilist.add((byte)8);\n+        list.add(new Byte((byte)1)); list.add(new Byte((byte)2)); list.add(new Byte((byte)3)); list.add(new Byte((byte)5)); list.add(new Byte((byte)8));\n+\n+        assertTrue(\"Unwrapped, non-empty List is not equal to non-empty ByteList.\",!ilist.equals(list));\n+        assertTrue(\"Unwrapped, non-empty ByteList is not equal to non-empty List.\",!list.equals(ilist));\n+        \n+        assertEquals(new ListByteList(list),ilist);\n+        assertEquals(ilist,new ListByteList(list));\n+        assertEquals(new ByteListList(ilist),list);\n+        assertEquals(list,new ByteListList(ilist));\n+        \n+    }\n+\n+    public void testClearAndSize() {\n+        ByteList list = makeEmptyByteList();\n+        assertEquals(0, list.size());\n+        for(int i = 0; i < 100; i++) {\n+            list.add((byte)i);\n+        }\n+        assertEquals(100, list.size());\n+        list.clear();\n+        assertEquals(0, list.size());\n+    }\n+\n+    public void testRemoveViaSubList() {\n+        ByteList list = makeEmptyByteList();\n+        for(int i = 0; i < 100; i++) {\n+            list.add((byte)i);\n+        }\n+        ByteList sub = list.subList(25,75);\n+        assertEquals(50,sub.size());\n+        for(int i = 0; i < 50; i++) {\n+            assertEquals(100-i,list.size());\n+            assertEquals(50-i,sub.size());\n+            assertEquals((byte)(25+i),sub.removeElementAt(0), 0f);\n+            assertEquals(50-i-1,sub.size());\n+            assertEquals(100-i-1,list.size());\n+        }\n+        assertEquals(0,sub.size());\n+        assertEquals(50,list.size());        \n+    }\n+    \n+    public void testAddGet() {\n+        ByteList list = makeEmptyByteList();\n+        for (int i = 0; i < 255; i++) {\n+            list.add((byte)i);\n+        }\n+        for (int i = 0; i < 255; i++) {\n+            assertEquals((byte)i, list.get(i), 0f);\n+        }\n+    }\n+\n+    public void testAddAndShift() {\n+        ByteList list = makeEmptyByteList();\n+        list.add(0, (byte)1);\n+        assertEquals(\"Should have one entry\", 1, list.size());\n+        list.add((byte)3);\n+        list.add((byte)4);\n+        list.add(1, (byte)2);\n+        for(int i = 0; i < 4; i++) {\n+            assertEquals(\"Should get entry back\", (byte)(i + 1), list.get(i), 0f);\n+        }\n+        list.add(0, (byte)0);\n+        for (int i = 0; i < 5; i++) {\n+            assertEquals(\"Should get entry back\", (byte)i, list.get(i), 0f);\n+        }\n+    }\n+\n+    public void testIsSerializable() throws Exception {\n+        ByteList list = makeFullByteList();\n+        assertTrue(list instanceof Serializable);\n+        byte[] ser = writeExternalFormToBytes((Serializable)list);\n+        ByteList deser = (ByteList)(readExternalFormFromBytes(ser));\n+        assertEquals(list,deser);\n+        assertEquals(deser,list);\n+    }\n+\n+    public void testByteListSerializeDeserializeThenCompare() throws Exception {\n+        ByteList list = makeFullByteList();\n+        if(list instanceof Serializable) {\n+            byte[] ser = writeExternalFormToBytes((Serializable)list);\n+            ByteList deser = (ByteList)(readExternalFormFromBytes(ser));\n+            assertEquals(\"obj != deserialize(serialize(obj))\",list,deser);\n+        }\n+    }\n+\n+    public void testSubListsAreNotSerializable() throws Exception {\n+        ByteList list = makeFullByteList().subList(2,3);\n+        assertTrue( ! (list instanceof Serializable) );\n+    }\n+\n+    public void testSubListOutOfBounds() throws Exception {\n+        try {\n+            makeEmptyByteList().subList(2,3);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            makeFullByteList().subList(-1,3);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+\n+        try {\n+            makeFullByteList().subList(5,2);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            makeFullByteList().subList(2,makeFullByteList().size()+2);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testListIteratorOutOfBounds() throws Exception {\n+        try {\n+            makeEmptyByteList().listIterator(2);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            makeFullByteList().listIterator(-1);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            makeFullByteList().listIterator(makeFullByteList().size()+2);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testListIteratorSetWithoutNext() throws Exception {\n+        ByteListIterator iter = makeFullByteList().listIterator();\n+        try {\n+            iter.set((byte)3);\n+            fail(\"Expected IllegalStateException\");\n+        } catch(IllegalStateException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testListIteratorSetAfterRemove() throws Exception {\n+        ByteListIterator iter = makeFullByteList().listIterator();\n+        iter.next();\n+        iter.remove();\n+        try {            \n+            iter.set((byte)3);\n+            fail(\"Expected IllegalStateException\");\n+        } catch(IllegalStateException e) {\n+            // expected\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestByteListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestByteListIterator.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff\n+ */\n+public abstract class TestByteListIterator extends TestByteIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestByteListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    public ByteIterator makeEmptyByteIterator() {\n+        return makeEmptyByteListIterator();\n+    }\n+    \n+    public ByteIterator makeFullByteIterator() {\n+        return makeFullByteListIterator();\n+    }\n+\n+    public abstract ByteListIterator makeEmptyByteListIterator();\n+    public abstract ByteListIterator makeFullByteListIterator();\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestRandomAccessByteList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestRandomAccessByteList.java,v 1.1 2003/04/15 01:55:22 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:22 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestRandomAccessByteList extends TestCase {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestRandomAccessByteList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestRandomAccessByteList.class);\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n+    public void testAddIsUnsupportedByDefault() {\n+        RandomAccessByteList list = new AbstractRandomAccessByteListImpl();\n+        try {\n+            list.add((byte)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }        \n+        try {\n+            list.set(0,(byte)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+\n+    public void testAddAllIsUnsupportedByDefault() {\n+        RandomAccessByteList list = new AbstractRandomAccessByteListImpl();\n+        ByteList list2 = new ArrayByteList();\n+        list2.add((byte)3);\n+        try {\n+            list.addAll(list2);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testSetIsUnsupportedByDefault() {\n+        RandomAccessByteList list = new AbstractRandomAccessByteListImpl();\n+        try {\n+            list.set(0,(byte)1);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    public void testRemoveElementIsUnsupportedByDefault() {\n+        RandomAccessByteList list = new AbstractRandomAccessByteListImpl();\n+        try {\n+            list.removeElementAt(0);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }               \n+    }\n+    \n+    // inner classes\n+    // ------------------------------------------------------------------------\n+\n+\n+    static class AbstractRandomAccessByteListImpl extends RandomAccessByteList {\n+        public AbstractRandomAccessByteListImpl() {\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.ByteList#get(int)\n+         */\n+        public byte get(int index) {\n+            throw new IndexOutOfBoundsException();\n+        }\n+\n+        /**\n+         * @see org.apache.commons.collections.primitives.ByteCollection#size()\n+         */\n+        public int size() {\n+            return 0;\n+        }\n+\n+    }\n+}\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestAll.java,v 1.6 2003/04/15 00:11:19 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestAll.java,v 1.7 2003/04/15 01:55:21 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.6 $ $Date: 2003/04/15 00:11:19 $\n+ * @version $Revision: 1.7 $ $Date: 2003/04/15 01:55:21 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         \n+        suite.addTest(TestCollectionByteCollection.suite());\n+        suite.addTest(TestByteCollectionCollection.suite());\n+        suite.addTest(TestByteListList.suite());\n+        suite.addTest(TestListByteList.suite());\n+        suite.addTest(TestIteratorByteIterator.suite());\n+        suite.addTest(TestListIteratorByteListIterator.suite());\n+        suite.addTest(TestByteIteratorIterator.suite());\n+        suite.addTest(TestByteListIteratorListIterator.suite());\n+\n         suite.addTest(TestCollectionShortCollection.suite());\n         suite.addTest(TestShortCollectionCollection.suite());\n         suite.addTest(TestShortListList.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestByteCollectionCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteCollectionCollection.java,v 1.1 2003/04/15 01:55:21 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.primitives.RandomAccessByteList;\n+import org.apache.commons.collections.primitives.ArrayByteList;\n+import org.apache.commons.collections.primitives.ByteList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:21 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestByteCollectionCollection extends TestObject {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestByteCollectionCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestByteCollectionCollection.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    protected Object makeObject() {\n+        ByteList list = new ArrayByteList();\n+        for(int i=0;i<10;i++) {\n+            list.add((byte)i);\n+        }\n+        return new ByteCollectionCollection(list);\n+    }\n+\n+    public void testSerializeDeserializeThenCompare() {\n+        // Collection.equal contract doesn't work that way\n+    }\n+\n+    /** @TODO need to add serialized form to cvs */\n+    public void testCanonicalEmptyCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testCanonicalFullCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    public void testWrapNull() {\n+        assertNull(ByteCollectionCollection.wrap(null));\n+    }\n+    \n+    public void testWrapSerializable() {\n+        Collection collection = ByteCollectionCollection.wrap(new ArrayByteList());\n+        assertNotNull(collection);\n+        assertTrue(collection instanceof Serializable);\n+    }\n+    \n+    public void testWrapNonSerializable() {\n+        Collection collection = ByteCollectionCollection.wrap(new RandomAccessByteList() { \n+            public byte get(int i) { throw new IndexOutOfBoundsException(); } \n+            public int size() { return 0; } \n+        });\n+        assertNotNull(collection);\n+        assertTrue(!(collection instanceof Serializable));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestByteIteratorIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteIteratorIterator.java,v 1.1 2003/04/15 01:55:21 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Iterator;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.iterators.TestIterator;\n+import org.apache.commons.collections.primitives.ArrayByteList;\n+import org.apache.commons.collections.primitives.ByteList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:21 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestByteIteratorIterator extends TestIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestByteIteratorIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestByteIteratorIterator.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    public Iterator makeEmptyIterator() {\n+        return ByteIteratorIterator.wrap(makeEmptyByteList().iterator());\n+    }\n+    \n+    public Iterator makeFullIterator() {\n+        return ByteIteratorIterator.wrap(makeFullByteList().iterator());\n+    }\n+\n+    protected ByteList makeEmptyByteList() {\n+        return new ArrayByteList();\n+    }\n+    \n+    protected ByteList makeFullByteList() {\n+        ByteList list = makeEmptyByteList();\n+        byte[] elts = getFullElements();\n+        for(int i=0;i<elts.length;i++) {\n+            list.add((byte)elts[i]);\n+        }\n+        return list;\n+    }\n+    \n+    public byte[] getFullElements() {\n+        return new byte[] { (byte)0, (byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9 };\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestByteListIteratorListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteListIteratorListIterator.java,v 1.1 2003/04/15 01:55:21 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.iterators.TestListIterator;\n+import org.apache.commons.collections.primitives.ArrayByteList;\n+import org.apache.commons.collections.primitives.ByteList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:21 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestByteListIteratorListIterator extends TestListIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestByteListIteratorListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestByteListIteratorListIterator.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    public ListIterator makeEmptyListIterator() {\n+        return ByteListIteratorListIterator.wrap(makeEmptyByteList().listIterator());\n+    }\n+    \n+    public ListIterator makeFullListIterator() {\n+        return ByteListIteratorListIterator.wrap(makeFullByteList().listIterator());\n+    }\n+\n+    protected ByteList makeEmptyByteList() {\n+        return new ArrayByteList();\n+    }\n+    \n+    protected ByteList makeFullByteList() {\n+        ByteList list = makeEmptyByteList();\n+        byte[] elts = getFullElements();\n+        for(int i=0;i<elts.length;i++) {\n+            list.add((byte)elts[i]);\n+        }\n+        return list;\n+    }\n+    \n+    public byte[] getFullElements() {\n+        return new byte[] { (byte)0, (byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9 };\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    \n+    public void testNextHasNextRemove() {\n+        byte[] elements = getFullElements();\n+        Iterator iter = makeFullIterator();\n+        for(int i=0;i<elements.length;i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(new Byte(elements[i]),iter.next());\n+            if(supportsRemove()) {\n+                iter.remove();\n+            }\n+        }        \n+        assertTrue(! iter.hasNext() );\n+    }\n+\n+    public void testEmptyIterator() {\n+        assertTrue( ! makeEmptyIterator().hasNext() );\n+        try {\n+            makeEmptyIterator().next();\n+            fail(\"Expected NoSuchElementException\");\n+        } catch(NoSuchElementException e) {\n+            // expected\n+        }\n+        if(supportsRemove()) {\n+            try {\n+                makeEmptyIterator().remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+\n+    public void testRemoveBeforeNext() {\n+        if(supportsRemove()) {\n+            try {\n+                makeFullIterator().remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+\n+    public void testRemoveAfterRemove() {\n+        if(supportsRemove()) {\n+            Iterator iter = makeFullIterator();\n+            iter.next();\n+            iter.remove();\n+            try {\n+                iter.remove();\n+                fail(\"Expected IllegalStateException\");\n+            } catch(IllegalStateException e) {\n+                // expected\n+            }\n+        }        \n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestByteListList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteListList.java,v 1.1 2003/04/15 01:55:21 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.primitives.RandomAccessByteList;\n+import org.apache.commons.collections.primitives.ArrayByteList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:21 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestByteListList extends TestList {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestByteListList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = BulkTest.makeSuite(TestByteListList.class);\n+        return suite;\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    protected List makeEmptyList() {\n+        return new ByteListList(new ArrayByteList());\n+    }\n+        \n+    protected Object[] getFullElements() {\n+        Byte[] elts = new Byte[10];\n+        for(int i=0;i<elts.length;i++) {\n+            elts[i] = new Byte((byte)i);\n+        }\n+        return elts;\n+    }\n+\n+    protected Object[] getOtherElements() {\n+        Byte[] elts = new Byte[10];\n+        for(int i=0;i<elts.length;i++) {\n+            elts[i] = new Byte((byte)(10 + i));\n+        }\n+        return elts;\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    /** @TODO need to add serialized form to cvs */\n+\n+    public void testCanonicalEmptyCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testCanonicalFullCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testEmptyListCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testFullListCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testWrapNull() {\n+        assertNull(ByteListList.wrap(null));\n+    }\n+    \n+    public void testWrapSerializable() {\n+        List list = ByteListList.wrap(new ArrayByteList());\n+        assertNotNull(list);\n+        assertTrue(list instanceof Serializable);\n+    }\n+    \n+    public void testWrapNonSerializable() {\n+        List list = ByteListList.wrap(new RandomAccessByteList() { \n+            public byte get(int i) { throw new IndexOutOfBoundsException(); } \n+            public int size() { return 0; } \n+        });\n+        assertNotNull(list);\n+        assertTrue(!(list instanceof Serializable));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionByteCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionByteCollection.java,v 1.1 2003/04/15 01:55:21 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.primitives.ByteCollection;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:21 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestCollectionByteCollection extends TestObject {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestCollectionByteCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestCollectionByteCollection.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    protected Object makeObject() {\n+        List list = new ArrayList();\n+        for(int i=0;i<10;i++) {\n+            list.add(new Byte((byte)i));\n+        }\n+        return new CollectionByteCollection(list);\n+    }\n+\n+    public void testSerializeDeserializeThenCompare() {\n+        // Collection.equal contract doesn't work that way\n+    }\n+\n+    /** @TODO need to add serialized form to cvs */\n+    public void testCanonicalEmptyCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testCanonicalFullCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    public void testWrapNull() {\n+        assertNull(CollectionByteCollection.wrap(null));\n+    }\n+    \n+    public void testWrapSerializable() {\n+        ByteCollection collection = CollectionByteCollection.wrap(new ArrayList());\n+        assertNotNull(collection);\n+        assertTrue(collection instanceof Serializable);\n+    }\n+    \n+    public void testWrapNonSerializable() {\n+        ByteCollection collection = CollectionByteCollection.wrap(new AbstractList() { \n+            public Object get(int i) { throw new IndexOutOfBoundsException(); } \n+            public int size() { return 0; } \n+        });\n+        assertNotNull(collection);\n+        assertTrue(!(collection instanceof Serializable));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIteratorByteIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIteratorByteIterator.java,v 1.1 2003/04/15 01:55:21 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.primitives.ByteIterator;\n+import org.apache.commons.collections.primitives.TestByteIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:21 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestIteratorByteIterator extends TestByteIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestIteratorByteIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestIteratorByteIterator.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    public ByteIterator makeEmptyByteIterator() {\n+        return IteratorByteIterator.wrap(makeEmptyList().iterator());\n+    }\n+    \n+    public ByteIterator makeFullByteIterator() {\n+        return IteratorByteIterator.wrap(makeFullList().iterator());\n+    }\n+\n+    protected List makeEmptyList() {\n+        return new ArrayList();\n+    }\n+    \n+    protected List makeFullList() {\n+        List list = makeEmptyList();\n+        byte[] elts = getFullElements();\n+        for(int i=0;i<elts.length;i++) {\n+            list.add(new Byte(elts[i]));\n+        }\n+        return list;\n+    }\n+    \n+    public byte[] getFullElements() {\n+        return new byte[] { (byte)0, (byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9 };\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestListByteList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestListByteList.java,v 1.1 2003/04/15 01:55:21 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.primitives.ByteList;\n+import org.apache.commons.collections.primitives.TestByteList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:21 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestListByteList extends TestByteList {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestListByteList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = BulkTest.makeSuite(TestListByteList.class);\n+        return suite;\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    /**\n+     * @see org.apache.commons.collections.primitives.TestByteList#makeEmptyByteList()\n+     */\n+    protected ByteList makeEmptyByteList() {\n+        return new ListByteList(new ArrayList());\n+    }\n+    \n+    public String[] ignoredSimpleTests() {\n+        // sublists are not serializable\n+        return new String[] { \n+            \"TestListByteList.bulkTestSubList.testFullListSerialization\",\n+            \"TestListByteList.bulkTestSubList.testEmptyListSerialization\",\n+            \"TestListByteList.bulkTestSubList.testCanonicalEmptyCollectionExists\",\n+            \"TestListByteList.bulkTestSubList.testCanonicalFullCollectionExists\",\n+            \"TestListByteList.bulkTestSubList.testEmptyListCompatibility\",\n+            \"TestListByteList.bulkTestSubList.testFullListCompatibility\",\n+            \"TestListByteList.bulkTestSubList.testSerializeDeserializeThenCompare\",\n+            \"TestListByteList.bulkTestSubList.testSimpleSerialization\"\n+        };\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    /** @TODO need to add serialized form to cvs */\n+    public void testCanonicalEmptyCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testCanonicalFullCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testEmptyListCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+\n+    public void testFullListCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to add a serialized form to cvs\n+    }\n+    public void testWrapNull() {\n+        assertNull(ListByteList.wrap(null));\n+    }\n+    \n+    public void testWrapSerializable() {\n+        ByteList list = ListByteList.wrap(new ArrayList());\n+        assertNotNull(list);\n+        assertTrue(list instanceof Serializable);\n+    }\n+    \n+    public void testWrapNonSerializable() {\n+        ByteList list = ListByteList.wrap(new AbstractList() { \n+            public Object get(int i) { throw new IndexOutOfBoundsException(); } \n+            public int size() { return 0; } \n+        });\n+        assertNotNull(list);\n+        assertTrue(!(list instanceof Serializable));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestListIteratorByteListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestListIteratorByteListIterator.java,v 1.1 2003/04/15 01:55:21 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives.adapters;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.primitives.ByteListIterator;\n+import org.apache.commons.collections.primitives.TestByteListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/04/15 01:55:21 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestListIteratorByteListIterator extends TestByteListIterator {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestListIteratorByteListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestListIteratorByteListIterator.class);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    public ByteListIterator makeEmptyByteListIterator() {\n+        return ListIteratorByteListIterator.wrap(makeEmptyList().listIterator());\n+    }\n+    \n+    public ByteListIterator makeFullByteListIterator() {\n+        return ListIteratorByteListIterator.wrap(makeFullList().listIterator());\n+    }\n+\n+    protected List makeEmptyList() {\n+        return new ArrayList();\n+    }\n+    \n+    protected List makeFullList() {\n+        List list = makeEmptyList();\n+        byte[] elts = getFullElements();\n+        for(int i=0;i<elts.length;i++) {\n+            list.add(new Byte(elts[i]));\n+        }\n+        return list;\n+    }\n+    \n+    public byte[] getFullElements() {\n+        return new byte[] { (byte)0, (byte)1, (byte)2, (byte)3, (byte)4, (byte)5, (byte)6, (byte)7, (byte)8, (byte)9 };\n+    }\n+    \n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+\n+}", "timestamp": 1050371723, "metainfo": ""}