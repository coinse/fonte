{"sha": "921ce7e57536109cc10dcc108fdcb1279e479df7", "log": "Improve test coverage   ", "commit": "\n--- a/src/java/org/apache/commons/collections/functors/InstantiateFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/InstantiateFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstantiateFactory.java,v 1.1 2003/11/23 17:48:19 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstantiateFactory.java,v 1.2 2003/11/27 23:57:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Factory implementation that creates a new object instance by reflection.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 17:48:19 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/27 23:57:09 $\n  *\n  * @author Stephen Colebourne\n  */\n         }\n \n         if (paramTypes == null || paramTypes.length == 0) {\n-            paramTypes = null;\n-            args = null;\n+            return new InstantiateFactory(classToInstantiate);\n         } else {\n             paramTypes = (Class[]) paramTypes.clone();\n             args = (Object[]) args.clone();\n+            return new InstantiateFactory(classToInstantiate, paramTypes, args);\n         }\n-        return new InstantiateFactory(classToInstantiate, paramTypes, args);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java,v 1.1 2003/11/23 23:25:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java,v 1.2 2003/11/27 23:57:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Transformer implementation that creates a new object instance by reflection.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 23:25:33 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/27 23:57:09 $\n  *\n  * @author Stephen Colebourne\n  */\n             return con.newInstance(iArgs);\n \n         } catch (NoSuchMethodException ex) {\n-            throw new IllegalArgumentException(\"InstantiateTransformer: The constructor must exist and be public \");\n+            throw new FunctorException(\"InstantiateTransformer: The constructor must exist and be public \");\n         } catch (InstantiationException ex) {\n             throw new FunctorException(\"InstantiateTransformer: InstantiationException\", ex);\n         } catch (IllegalAccessException ex) {\n--- a/src/java/org/apache/commons/collections/functors/InvokerTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/InvokerTransformer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InvokerTransformer.java,v 1.1 2003/11/23 23:25:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/InvokerTransformer.java,v 1.2 2003/11/27 23:57:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Transformer implementation that creates a new object instance by reflection.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 23:25:33 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/27 23:57:09 $\n  *\n  * @author Stephen Colebourne\n  */\n             throw new IllegalArgumentException(\"The parameter types must match the arguments\");\n         }\n         if (paramTypes == null || paramTypes.length == 0) {\n-            paramTypes = null;\n-            args = null;\n+            return new InvokerTransformer(methodName);\n         } else {\n             paramTypes = (Class[]) paramTypes.clone();\n             args = (Object[]) args.clone();\n+            return new InvokerTransformer(methodName, paramTypes, args);\n         }\n-        return new InvokerTransformer(methodName, paramTypes, args);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/functors/MapTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/MapTransformer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/MapTransformer.java,v 1.1 2003/11/23 23:25:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/MapTransformer.java,v 1.2 2003/11/27 23:57:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.Transformer;\n \n /**\n- * Predicate implementation that returns true the first time an object is\n- * passed into the predicate.\n+ * Transformer implementation that returns the value held in a specified map\n+ * using the input parameter as a key.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 23:25:33 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/27 23:57:09 $\n  *\n  * @author Stephen Colebourne\n  */\n \n     /**\n      * Factory to create the transformer.\n+     * <p>\n+     * If the map is null, a transformer that always returns null is returned.\n      * \n-     * @return the map, not cloned, not null\n-     * @throws IllegalArgumentException if the map is null\n+     * @param the map, not cloned\n+     * @return the transformer\n      */\n     public static Transformer getInstance(Map map) {\n         if (map == null) {\n-            throw new IllegalArgumentException(\"The map must not be null\");\n+            return ConstantTransformer.NULL_INSTANCE;\n         }\n         return new MapTransformer(map);\n     }\n--- a/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/PrototypeFactory.java,v 1.1 2003/11/23 17:48:19 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/functors/PrototypeFactory.java,v 1.2 2003/11/27 23:57:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Factory implementation that creates a new instance each time based on a prototype.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/23 17:48:19 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/27 23:57:09 $\n  *\n  * @author Stephen Colebourne\n  */\n      */\n     public static Factory getInstance(Object prototype) {\n         if (prototype == null) {\n-            throw new IllegalArgumentException(\"The prototype must not be null\");\n+            return ConstantFactory.NULL_INSTANCE;\n         }\n         try {\n-            prototype.getClass().getMethod(\"clone\", null);\n-            return new PrototypeCloneFactory(prototype);\n+            Method method = prototype.getClass().getMethod(\"clone\", null);\n+            return new PrototypeCloneFactory(prototype, method);\n \n         } catch (NoSuchMethodException ex) {\n             try {\n         private transient Method iCloneMethod;\n \n         /**\n-         * Constructor to store prototype\n-         */\n-        private PrototypeCloneFactory(Object prototype) {\n+         * Constructor to store prototype.\n+         */\n+        private PrototypeCloneFactory(Object prototype, Method method) {\n             super();\n-            if (prototype == null) {\n-                throw new IllegalArgumentException(\"PrototypeCloneFactory: The prototype must not be null\");\n-            }\n             iPrototype = prototype;\n-\n-            findCloneMethod();\n+            iCloneMethod = method;\n         }\n \n         /**\n          */\n         private PrototypeSerializationFactory(Serializable prototype) {\n             super();\n-            if (prototype == null) {\n-                throw new IllegalArgumentException(\"PrototypeSerializationFactory: The prototype must not be null\");\n-            }\n             iPrototype = prototype;\n         }\n \n--- a/src/test/org/apache/commons/collections/TestClosureUtils.java\n+++ b/src/test/org/apache/commons/collections/TestClosureUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestClosureUtils.java,v 1.5 2003/11/23 17:01:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestClosureUtils.java,v 1.6 2003/11/27 23:57:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Tests the org.apache.commons.collections.ClosureUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/11/23 17:01:36 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/27 23:57:09 $\n  *\n  * @author Stephen Colebourne\n  */\n         public void execute(Object object) {\n             count++;\n         }\n-\n+    }\n+    static class MockTransformer implements Transformer {\n+        int count = 0;\n+        \n+        public Object transform(Object object) {\n+            count++;\n+            return object;\n+        }\n     }\n \n     // exceptionClosure\n         MockClosure cmd = new MockClosure();\n         ClosureUtils.whileClosure(PredicateUtils.falsePredicate(), cmd).execute(null);\n         assertEquals(0, cmd.count);\n+        \n+        cmd = new MockClosure();\n+        ClosureUtils.whileClosure(PredicateUtils.uniquePredicate(), cmd).execute(null);\n+        assertEquals(1, cmd.count);\n+        \n+        try {\n+            ClosureUtils.whileClosure(null, ClosureUtils.nopClosure());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ClosureUtils.whileClosure(PredicateUtils.falsePredicate(), null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n         try {\n             ClosureUtils.whileClosure(null, null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     // doWhileClosure\n         MockClosure cmd = new MockClosure();\n         ClosureUtils.doWhileClosure(cmd, PredicateUtils.falsePredicate()).execute(null);\n         assertEquals(1, cmd.count);\n+        \n+        cmd = new MockClosure();\n+        ClosureUtils.doWhileClosure(cmd, PredicateUtils.uniquePredicate()).execute(null);\n+        assertEquals(2, cmd.count);\n+        \n         try {\n             ClosureUtils.doWhileClosure(null, null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     // chainedClosure\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            ClosureUtils.switchClosure(new Predicate[2], new Closure[1]);\n+            ClosureUtils.switchClosure(\n+                    new Predicate[] {PredicateUtils.truePredicate()},\n+                    new Closure[] {a,b});\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n+    // asClosure\n+    //------------------------------------------------------------------\n+\n+    public void testTransformerClosure() {\n+        MockTransformer mock = new MockTransformer();\n+        Closure closure = ClosureUtils.asClosure(mock);\n+        closure.execute(null);\n+        assertEquals(1, mock.count);\n+        closure.execute(null);\n+        assertEquals(2, mock.count);\n+        \n+        assertSame(ClosureUtils.nopClosure(), ClosureUtils.asClosure(null));\n+    }\n     \n }\n--- a/src/test/org/apache/commons/collections/TestFactoryUtils.java\n+++ b/src/test/org/apache/commons/collections/TestFactoryUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFactoryUtils.java,v 1.7 2003/11/23 17:48:19 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestFactoryUtils.java,v 1.8 2003/11/27 23:57:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import java.io.NotSerializableException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Date;\n import java.util.TimeZone;\n \n-import org.apache.commons.collections.functors.FunctorException;\n-\n import junit.framework.Test;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n+\n+import org.apache.commons.collections.functors.ConstantFactory;\n+import org.apache.commons.collections.functors.FunctorException;\n \n /**\n  * Tests the org.apache.commons.collections.FactoryUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2003/11/23 17:48:19 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/27 23:57:09 $\n  *\n  * @author Stephen Colebourne\n  */\n     //------------------------------------------------------------------\n     \n     public void testPrototypeFactoryNull() {\n-        try {\n-            Factory factory = FactoryUtils.prototypeFactory(null);\n-            \n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    public void testPrototypeFactoryPublicCloneMethod() {\n+        assertSame(ConstantFactory.NULL_INSTANCE, FactoryUtils.prototypeFactory(null));\n+    }\n+\n+    public void testPrototypeFactoryPublicCloneMethod() throws Exception {\n         Date proto = new Date();\n         Factory factory = FactoryUtils.prototypeFactory(proto);\n         assertNotNull(factory);\n         Object created = factory.create();\n         assertTrue(proto != created);\n         assertEquals(proto, created);\n-    }\n-\n-    public void testPrototypeFactoryPublicCopyConstructor() {\n+        \n+        // check serialisation works\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(buffer);\n+        out.writeObject(factory);\n+        out.close();\n+        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n+        Object dest = in.readObject();\n+        in.close();\n+    }\n+\n+    public void testPrototypeFactoryPublicCopyConstructor() throws Exception {\n         Mock1 proto = new Mock1(6);\n         Factory factory = FactoryUtils.prototypeFactory(proto);\n         assertNotNull(factory);\n         Object created = factory.create();\n         assertTrue(proto != created);\n         assertEquals(proto, created);\n-    }\n-\n-    public void testPrototypeFactoryPublicSerialization() {\n+        \n+        // check serialisation works\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(buffer);\n+        try {\n+            out.writeObject(factory);\n+        } catch (NotSerializableException ex) {\n+            out.close();\n+        }\n+        factory = FactoryUtils.prototypeFactory(new Mock2(\"S\"));\n+        buffer = new ByteArrayOutputStream();\n+        out = new ObjectOutputStream(buffer);\n+        out.writeObject(factory);\n+        out.close();\n+        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n+        Object dest = in.readObject();\n+        in.close();\n+    }\n+\n+    public void testPrototypeFactoryPublicSerialization() throws Exception {\n         Integer proto = new Integer(9);\n         Factory factory = FactoryUtils.prototypeFactory(proto);\n         assertNotNull(factory);\n         Object created = factory.create();\n         assertTrue(proto != created);\n         assertEquals(proto, created);\n+        \n+        // check serialisation works\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(buffer);\n+        out.writeObject(factory);\n+        out.close();\n+        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n+        Object dest = in.readObject();\n+        in.close();\n     }\n \n     public void testPrototypeFactoryPublicSerializationError() {\n     // instantiateFactory\n     //------------------------------------------------------------------\n     \n-    public void testReflectionFactoryNull() {\n+    public void testInstantiateFactoryNull() {\n         try {\n             Factory factory = FactoryUtils.instantiateFactory(null);\n             \n         fail();\n     }\n \n-    public void testReflectionFactorySimple() {\n+    public void testInstantiateFactorySimple() {\n         Factory factory = FactoryUtils.instantiateFactory(Mock3.class);\n         assertNotNull(factory);\n         Object created = factory.create();\n         assertEquals(1, ((Mock3) created).getValue());\n     }\n \n-    public void testReflectionFactoryMismatch() {\n+    public void testInstantiateFactoryMismatch() {\n         try {\n             Factory factory = FactoryUtils.instantiateFactory(Date.class, null, new Object[] {null});\n             \n         fail();\n     }\n \n-    public void testReflectionFactoryNoConstructor() {\n+    public void testInstantiateFactoryNoConstructor() {\n         try {\n             Factory factory = FactoryUtils.instantiateFactory(Date.class, new Class[] {Long.class}, new Object[] {null});\n             \n         fail();\n     }\n \n-    public void testReflectionFactoryComplex() {\n+    public void testInstantiateFactoryComplex() {\n         TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n         // 2nd Jan 1970\n         Factory factory = FactoryUtils.instantiateFactory(Date.class,\n--- a/src/test/org/apache/commons/collections/TestTransformerUtils.java\n+++ b/src/test/org/apache/commons/collections/TestTransformerUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTransformerUtils.java,v 1.6 2003/11/23 23:25:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestTransformerUtils.java,v 1.7 2003/11/27 23:57:09 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n  * Tests the org.apache.commons.collections.TransformerUtils class.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2003/11/23 23:25:33 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/27 23:57:09 $\n  *\n  * @author Stephen Colebourne\n  * @author James Carman\n         assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(cObject));\n         assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(cString));\n         assertEquals(cObject, TransformerUtils.constantTransformer(cObject).transform(cInteger));\n+        assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.constantTransformer(null));\n     }\n \n     // cloneTransformer\n         assertEquals(new Integer(1), TransformerUtils.mapTransformer(map).transform(cObject));\n         assertEquals(new Integer(2), TransformerUtils.mapTransformer(map).transform(cString));\n         assertEquals(null, TransformerUtils.mapTransformer(map).transform(cInteger));\n+        assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.mapTransformer(null));\n     }\n \n     // commandTransformer\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            TransformerUtils.switchTransformer(new Predicate[2], new Transformer[1]);\n+            TransformerUtils.switchTransformer(\n+                    new Predicate[] {PredicateUtils.truePredicate()},\n+                    new Transformer[] {a,b});\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n                 \"noSuchMethod\", new Class[] {Object.class}, new Object[] {cString}).transform(new Object());\n             fail();\n         } catch (FunctorException ex) {}\n+        try {\n+            TransformerUtils.invokerTransformer(\"badArgs\", null, new Object[] { cString });\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            TransformerUtils.invokerTransformer(\"badArgs\", new Class[] {Object.class}, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            TransformerUtils.invokerTransformer(\"badArgs\", new Class[] {}, new Object[] { cString });\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n     \n     // stringValueTransformer\n             TransformerUtils.stringValueTransformer().transform(new Integer(6)));\n     }\n     \n+    // instantiateFactory\n+    //------------------------------------------------------------------\n+    \n+    public void testInstantiateTransformerNull() {\n+        try {\n+            Transformer trans = TransformerUtils.instantiateTransformer(null, new Object[] {\"str\"});\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            Transformer trans = TransformerUtils.instantiateTransformer(new Class[] {}, new Object[] {\"str\"});\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        Transformer trans = TransformerUtils.instantiateTransformer(new Class[] {Long.class}, new Object[] {null});\n+        try {\n+            trans.transform(String.class);\n+            fail();\n+        } catch (FunctorException ex) {}\n+        \n+        trans = TransformerUtils.instantiateTransformer();\n+        assertEquals(\"\", trans.transform(String.class));\n+        \n+        trans = TransformerUtils.instantiateTransformer(new Class[] {Long.TYPE}, new Object[] {new Long(1000L)});\n+        assertEquals(new Date(1000L), trans.transform(Date.class));\n+    }\n+\n }", "timestamp": 1069977429, "metainfo": ""}