{"sha": "3cdd77231754fd4628e801d981653c57fb437c21", "log": "Refactor observed collections to include factory for handlers. Simple case of one listener is dealt with neatly at the expense of type safety.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/decorators/ObservedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/ObservedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/ObservedCollection.java,v 1.4 2003/08/31 22:44:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/ObservedCollection.java,v 1.5 2003/09/03 00:11:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Iterator;\n \n import org.apache.commons.collections.event.ModificationHandler;\n+import org.apache.commons.collections.event.ModificationHandlerFactory;\n import org.apache.commons.collections.event.StandardModificationHandler;\n-import org.apache.commons.collections.event.StandardModificationListener;\n-import org.apache.commons.collections.event.StandardPostModificationListener;\n-import org.apache.commons.collections.event.StandardPreModificationListener;\n \n /**\n  * <code>ObservedCollection</code> decorates a <code>Collection</code>\n  * The handler manages the event, notifying listeners and optionally vetoing changes.\n  * The default handler is {@link StandardModificationHandler}.\n  * See this class for details of configuration available.\n- * <p>\n- * For convenience, add, remove and get listener methods are made available on\n- * this class. They accept a generic listener type, whereas handlers generally\n- * require a specific type. Thus a ClassCastException may be thrown from these\n- * methods. They may also throw UnsupportedOperationException if the handler\n- * uses a technique other than listeners to communicate events.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/08/31 22:44:54 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/03 00:11:28 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Factory method to create an observable collection and register one\n-     * listener to receive events before the change is made.\n-     * <p>\n-     * A {@link StandardModificationHandler} will be created.\n-     * The listener will be added to the handler.\n+     * Factory method to create an observable collection using a listener or a handler.\n+     * <p>\n+     * A lot of functionality is available through this method.\n+     * If you don't need the extra functionality, simply implement the\n+     * {@link org.apache.commons.collections.event.StandardModificationListener}\n+     * interface and pass it in as the second parameter.\n+     * <p>\n+     * Internally, an <code>ObservedCollection</code> relies on a {@link ModificationHandler}.\n+     * The handler receives all the events and processes them, typically by\n+     * calling listeners. Different handler implementations can be plugged in\n+     * to provide a flexible event system.\n+     * <p>\n+     * The handler implementation is determined by the listener parameter.\n+     * If the parameter is a <code>ModificationHandler</code> it is used directly.\n+     * Otherwise, the factory mechanism of {@link ModificationHandlerFactory} is used\n+     * to create the handler for the listener parameter.\n+     * <p>\n+     * The listener is defined as an Object for maximum flexibility.\n+     * It does not have to be a listener in the classic JavaBean sense.\n+     * It is entirely up to the factory and handler as to how the parameter\n+     * is interpretted. An IllegalArgumentException is thrown if no suitable\n+     * handler can be found for this listener.\n+     * <p>\n+     * A <code>null</code> listener will throw an IllegalArgumentException\n+     * unless a special handler factory has been registered.\n+     * <p>\n      *\n      * @param coll  the collection to decorate, must not be null\n-     * @param listener  collection listener, must not be null\n+     * @param listener  collection listener, may be null\n      * @return the observed collection\n-     * @throws IllegalArgumentException if the collection or listener is null\n+     * @throws IllegalArgumentException if the collection is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n      */\n     public static ObservedCollection decorate(\n             final Collection coll,\n-            final StandardPreModificationListener listener) {\n+            final Object listener) {\n         \n         if (coll == null) {\n             throw new IllegalArgumentException(\"Collection must not be null\");\n         }\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        StandardModificationHandler handler = new StandardModificationHandler(\n-            listener, -1, null, 0\n-        );\n-        return new ObservedCollection(coll, handler);\n-    }\n-\n-    /**\n-     * Factory method to create an observable collection and register one\n-     * listener to receive events after the change is made.\n-     * <p>\n-     * A {@link StandardModificationHandler} will be created.\n-     * The listener will be added to the handler.\n-     *\n-     * @param coll  the collection to decorate, must not be null\n-     * @param listener  collection listener, must not be null\n-     * @return the observed collection\n-     * @throws IllegalArgumentException if the collection or listener is null\n-     */\n-    public static ObservedCollection decorate(\n-            final Collection coll,\n-            final StandardPostModificationListener listener) {\n-        \n-        if (coll == null) {\n-            throw new IllegalArgumentException(\"Collection must not be null\");\n-        }\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        StandardModificationHandler handler = new StandardModificationHandler(\n-            null, 0, listener, -1\n-        );\n-        return new ObservedCollection(coll, handler);\n-    }\n-\n-    /**\n-     * Factory method to create an observable collection and register one\n-     * listener to receive events both before and after the change is made.\n-     * <p>\n-     * A {@link StandardModificationHandler} will be created.\n-     * The listener will be added to the handler.\n-     *\n-     * @param coll  the collection to decorate, must not be null\n-     * @param listener  collection listener, must not be null\n-     * @return the observed collection\n-     * @throws IllegalArgumentException if the collection or listener is null\n-     */\n-    public static ObservedCollection decorate(\n-            final Collection coll,\n-            final StandardModificationListener listener) {\n-        \n-        if (coll == null) {\n-            throw new IllegalArgumentException(\"Collection must not be null\");\n-        }\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        StandardModificationHandler handler = new StandardModificationHandler(\n-            listener, -1, listener, -1\n-        );\n-        return new ObservedCollection(coll, handler);\n-    }\n-\n-    /**\n-     * Factory method to create an observable collection using a\n-     * specific handler.\n-     * <p>\n-     * The handler may be configured independently with listeners or other\n-     * event recognition.\n-     *\n-     * @param coll  the collection to decorate, must not be null\n-     * @param handler  observed handler, must not be null\n-     * @return the observed collection\n-     * @throws IllegalArgumentException if the collection or handler is null\n-     */\n-    public static ObservedCollection decorate(\n-            final Collection coll,\n-            final ModificationHandler handler) {\n-                \n-        if (coll == null) {\n-            throw new IllegalArgumentException(\"Collection must not be null\");\n-        }\n-        if (handler == null) {\n-            throw new IllegalArgumentException(\"Handler must not be null\");\n-        }\n-        return new ObservedCollection(coll, handler);\n+        if (listener instanceof ModificationHandler) {\n+            return new ObservedCollection(coll, (ModificationHandler) listener);\n+        } else {\n+            ModificationHandler handler = ModificationHandlerFactory.createHandler(coll, listener);\n+            return new ObservedCollection(coll, handler);\n+        }\n     }\n \n     // Constructors\n             final ModificationHandler handler) {\n         super(coll);\n         this.handler = (handler == null ? new StandardModificationHandler() : handler);\n-        this.handler.init(this);\n+        ModificationHandlerFactory.initHandler(this.handler, this);\n     }\n \n     // Handler access\n      */\n     public ModificationHandler getHandler() {\n         return handler;\n-    }\n-    \n-    // Listener convenience methods\n-    //----------------------------------------------------------------------\n-    /**\n-     * Adds a listener to the handler to receive pre modification events.\n-     * This method simply delegates to the handler.\n-     * <p>\n-     * No error occurs if the listener is <code>null</code>.\n-     * <p>\n-     * The listener does not necessarily have to be a listener in the classic\n-     * JavaBean sense. It is entirely up to the handler as to how it interprets\n-     * the listener parameter. A ClassCastException is thrown if the handler\n-     * cannot interpret the parameter.\n-     * \n-     * @param listener  the listener to add, may be null (ignored)\n-     * @throws ClassCastException if the listener is not of the correct type\n-     * @throws UnsupportedOperationException if the handler does not support listeners\n-     */\n-    public void addPreModificationListener(Object listener) {\n-        getHandler().addPreModificationListener(listener);\n-    }\n-    \n-    /**\n-     * Adds a listener to the handler to receive post modification events.\n-     * This method simply delegates to the handler.\n-     * <p>\n-     * No error occurs if the listener is <code>null</code>.\n-     * <p>\n-     * The listener does not necessarily have to be a listener in the classic\n-     * JavaBean sense. It is entirely up to the handler as to how it interprets\n-     * the listener parameter. A ClassCastException is thrown if the handler\n-     * cannot interpret the parameter.\n-     * \n-     * @param listener  the listener to add, may be null (ignored)\n-     * @throws ClassCastException if the listener is not of the correct type\n-     * @throws UnsupportedOperationException if the handler does not support listeners\n-     */\n-    public void addPostModificationListener(Object listener) {\n-        getHandler().addPostModificationListener(listener);\n     }\n     \n     // Collection\n--- a/src/java/org/apache/commons/collections/decorators/ObservedList.java\n+++ b/src/java/org/apache/commons/collections/decorators/ObservedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/ObservedList.java,v 1.3 2003/08/31 22:44:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/ObservedList.java,v 1.4 2003/09/03 00:11:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.ListIterator;\n \n import org.apache.commons.collections.event.ModificationHandler;\n-import org.apache.commons.collections.event.StandardModificationHandler;\n-import org.apache.commons.collections.event.StandardModificationListener;\n-import org.apache.commons.collections.event.StandardPostModificationListener;\n-import org.apache.commons.collections.event.StandardPreModificationListener;\n+import org.apache.commons.collections.event.ModificationHandlerFactory;\n \n /**\n  * <code>ObservedList</code> decorates a <code>List</code>\n  * uses a technique other than listeners to communicate events.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 22:44:54 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/03 00:11:28 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Factory method to create an observable list and register one\n-     * listener to receive events before the change is made.\n-     * <p>\n-     * A {@link StandardModificationHandler} will be created.\n-     * The listener will be added to the handler.\n-     *\n-     * @param coll  the list to decorate, must not be null\n-     * @param listener  list listener, must not be null\n-     * @return the observed list\n-     * @throws IllegalArgumentException if the list or listener is null\n-     */\n-    public static ObservedList decorate(\n-            final List coll,\n-            final StandardPreModificationListener listener) {\n-        \n-        if (coll == null) {\n-            throw new IllegalArgumentException(\"List must not be null\");\n-        }\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        StandardModificationHandler handler = new StandardModificationHandler(\n-            listener, -1, null, 0\n-        );\n-        return new ObservedList(coll, handler);\n-    }\n-\n-    /**\n-     * Factory method to create an observable list and register one\n-     * listener to receive events after the change is made.\n-     * <p>\n-     * A {@link StandardModificationHandler} will be created.\n-     * The listener will be added to the handler.\n-     *\n-     * @param coll  the list to decorate, must not be null\n-     * @param listener  list listener, must not be null\n-     * @return the observed list\n-     * @throws IllegalArgumentException if the list or listener is null\n-     */\n-    public static ObservedList decorate(\n-            final List coll,\n-            final StandardPostModificationListener listener) {\n-        \n-        if (coll == null) {\n-            throw new IllegalArgumentException(\"List must not be null\");\n-        }\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        StandardModificationHandler handler = new StandardModificationHandler(\n-            null, 0, listener, -1\n-        );\n-        return new ObservedList(coll, handler);\n-    }\n-\n-    /**\n-     * Factory method to create an observable list and register one\n-     * listener to receive events both before and after the change is made.\n-     * <p>\n-     * A {@link StandardModificationHandler} will be created.\n-     * The listener will be added to the handler.\n-     *\n-     * @param coll  the list to decorate, must not be null\n-     * @param listener  list listener, must not be null\n-     * @return the observed list\n-     * @throws IllegalArgumentException if the list or listener is null\n-     */\n-    public static ObservedList decorate(\n-            final List coll,\n-            final StandardModificationListener listener) {\n-        \n-        if (coll == null) {\n-            throw new IllegalArgumentException(\"List must not be null\");\n-        }\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        StandardModificationHandler handler = new StandardModificationHandler(\n-            listener, -1, listener, -1\n-        );\n-        return new ObservedList(coll, handler);\n-    }\n-\n-    /**\n-     * Factory method to create an observable list using a\n-     * specific handler.\n-     * <p>\n-     * The handler may be configured independently with listeners or other\n-     * event recognition.\n+     * Factory method to create an observable list using a listener or a handler.\n+     * <p>\n+     * A lot of functionality is available through this method.\n+     * If you don't need the extra functionality, simply implement the\n+     * {@link org.apache.commons.collections.event.StandardModificationListener}\n+     * interface and pass it in as the second parameter.\n+     * <p>\n+     * Internally, an <code>ObservedList</code> relies on a {@link ModificationHandler}.\n+     * The handler receives all the events and processes them, typically by\n+     * calling listeners. Different handler implementations can be plugged in\n+     * to provide a flexible event system.\n+     * <p>\n+     * The handler implementation is determined by the listener parameter.\n+     * If the parameter is a <code>ModificationHandler</code> it is used directly.\n+     * Otherwise, the factory mechanism of {@link ModificationHandlerFactory} is used\n+     * to create the handler for the listener parameter.\n+     * <p>\n+     * The listener is defined as an Object for maximum flexibility.\n+     * It does not have to be a listener in the classic JavaBean sense.\n+     * It is entirely up to the factory and handler as to how the parameter\n+     * is interpretted. An IllegalArgumentException is thrown if no suitable\n+     * handler can be found for this listener.\n+     * <p>\n+     * A <code>null</code> listener will throw an IllegalArgumentException\n+     * unless a special handler factory has been registered.\n+     * <p>\n      *\n      * @param list  the list to decorate, must not be null\n-     * @param handler  observed handler, must not be null\n+     * @param listener  list listener, may be null\n      * @return the observed list\n-     * @throws IllegalArgumentException if the list or handler is null\n+     * @throws IllegalArgumentException if the list is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n      */\n     public static ObservedList decorate(\n             final List list,\n-            final ModificationHandler handler) {\n-                \n+            final Object listener) {\n+        \n         if (list == null) {\n             throw new IllegalArgumentException(\"List must not be null\");\n         }\n-        if (handler == null) {\n-            throw new IllegalArgumentException(\"Handler must not be null\");\n-        }\n-        return new ObservedList(list, handler);\n+        if (listener instanceof ModificationHandler) {\n+            return new ObservedList(list, (ModificationHandler) listener);\n+        } else {\n+            ModificationHandler handler = ModificationHandlerFactory.createHandler(list, listener);\n+            return new ObservedList(list, handler);\n+        }\n     }\n \n     // Constructors\n--- a/src/java/org/apache/commons/collections/decorators/ObservedSet.java\n+++ b/src/java/org/apache/commons/collections/decorators/ObservedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/ObservedSet.java,v 1.3 2003/08/31 22:44:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/ObservedSet.java,v 1.4 2003/09/03 00:11:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Set;\n \n import org.apache.commons.collections.event.ModificationHandler;\n-import org.apache.commons.collections.event.StandardModificationHandler;\n-import org.apache.commons.collections.event.StandardModificationListener;\n-import org.apache.commons.collections.event.StandardPostModificationListener;\n-import org.apache.commons.collections.event.StandardPreModificationListener;\n+import org.apache.commons.collections.event.ModificationHandlerFactory;\n \n /**\n  * <code>ObservedSet</code> decorates a <code>Set</code>\n  * uses a technique other than listeners to communicate events.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 22:44:54 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/03 00:11:28 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     /**\n-     * Factory method to create an observable set and register one\n-     * listener to receive events before the change is made.\n+     * Factory method to create an observable set using a listener or a handler.\n      * <p>\n-     * A {@link StandardModificationHandler} will be created.\n-     * The listener will be added to the handler.\n-     *\n-     * @param coll  the set to decorate, must not be null\n-     * @param listener  set listener, must not be null\n-     * @return the observed set\n-     * @throws IllegalArgumentException if the set or listener is null\n-     */\n-    public static ObservedSet decorate(\n-            final Set coll,\n-            final StandardPreModificationListener listener) {\n-        \n-        if (coll == null) {\n-            throw new IllegalArgumentException(\"Set must not be null\");\n-        }\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        StandardModificationHandler handler = new StandardModificationHandler(\n-            listener, -1, null, 0\n-        );\n-        return new ObservedSet(coll, handler);\n-    }\n-\n-    /**\n-     * Factory method to create an observable set and register one\n-     * listener to receive events after the change is made.\n+     * A lot of functionality is available through this method.\n+     * If you don't need the extra functionality, simply implement the\n+     * {@link org.apache.commons.collections.event.StandardModificationListener}\n+     * interface and pass it in as the second parameter.\n      * <p>\n-     * A {@link StandardModificationHandler} will be created.\n-     * The listener will be added to the handler.\n-     *\n-     * @param coll  the set to decorate, must not be null\n-     * @param listener  set listener, must not be null\n-     * @return the observed set\n-     * @throws IllegalArgumentException if the set or listener is null\n-     */\n-    public static ObservedSet decorate(\n-            final Set coll,\n-            final StandardPostModificationListener listener) {\n-        \n-        if (coll == null) {\n-            throw new IllegalArgumentException(\"Set must not be null\");\n-        }\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        StandardModificationHandler handler = new StandardModificationHandler(\n-            null, 0, listener, -1\n-        );\n-        return new ObservedSet(coll, handler);\n-    }\n-\n-    /**\n-     * Factory method to create an observable set and register one\n-     * listener to receive events both before and after the change is made.\n+     * Internally, an <code>ObservedSet</code> relies on a {@link ModificationHandler}.\n+     * The handler receives all the events and processes them, typically by\n+     * calling listeners. Different handler implementations can be plugged in\n+     * to provide a flexible event system.\n      * <p>\n-     * A {@link StandardModificationHandler} will be created.\n-     * The listener will be added to the handler.\n-     *\n-     * @param coll  the set to decorate, must not be null\n-     * @param listener  set listener, must not be null\n-     * @return the observed set\n-     * @throws IllegalArgumentException if the set or listener is null\n-     */\n-    public static ObservedSet decorate(\n-            final Set coll,\n-            final StandardModificationListener listener) {\n-        \n-        if (coll == null) {\n-            throw new IllegalArgumentException(\"Set must not be null\");\n-        }\n-        if (listener == null) {\n-            throw new IllegalArgumentException(\"Listener must not be null\");\n-        }\n-        StandardModificationHandler handler = new StandardModificationHandler(\n-            listener, -1, listener, -1\n-        );\n-        return new ObservedSet(coll, handler);\n-    }\n-\n-    /**\n-     * Factory method to create an observable set using a\n-     * specific handler.\n+     * The handler implementation is determined by the listener parameter.\n+     * If the parameter is a <code>ModificationHandler</code> it is used directly.\n+     * Otherwise, the factory mechanism of {@link ModificationHandlerFactory} is used\n+     * to create the handler for the listener parameter.\n      * <p>\n-     * The handler may be configured independently with listeners or other\n-     * event recognition.\n+     * The listener is defined as an Object for maximum flexibility.\n+     * It does not have to be a listener in the classic JavaBean sense.\n+     * It is entirely up to the factory and handler as to how the parameter\n+     * is interpretted. An IllegalArgumentException is thrown if no suitable\n+     * handler can be found for this listener.\n+     * <p>\n+     * A <code>null</code> listener will throw an IllegalArgumentException\n+     * unless a special handler factory has been registered.\n+     * <p>\n      *\n      * @param set  the set to decorate, must not be null\n-     * @param handler  observed handler, must not be null\n+     * @param listener  set listener, may be null\n      * @return the observed set\n-     * @throws IllegalArgumentException if the set or handler is null\n+     * @throws IllegalArgumentException if the set is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n      */\n     public static ObservedSet decorate(\n             final Set set,\n-            final ModificationHandler handler) {\n-                \n+            final Object listener) {\n+        \n         if (set == null) {\n             throw new IllegalArgumentException(\"Set must not be null\");\n         }\n-        if (handler == null) {\n-            throw new IllegalArgumentException(\"Handler must not be null\");\n+        if (listener instanceof ModificationHandler) {\n+            return new ObservedSet(set, (ModificationHandler) listener);\n+        } else {\n+            ModificationHandler handler = ModificationHandlerFactory.createHandler(set, listener);\n+            return new ObservedSet(set, handler);\n         }\n-        return new ObservedSet(set, handler);\n     }\n \n     // Constructors\n--- a/src/java/org/apache/commons/collections/event/ModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/event/ModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/ModificationHandler.java,v 1.4 2003/08/31 22:44:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/ModificationHandler.java,v 1.5 2003/09/03 00:11:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.ObservedCollection;\n \n /**\n- * Abstract base implementation of a handler for collection modification.\n+ * Defines a handler for collection modification events.\n  * <p>\n- * All data storage and event sending is performed by a subclass.\n- * This class provides a default implementation for the event handling methods\n- * that forwards to single points.\n+ * This class defines the event handling methods, following the \n+ * <code>preXxx</code> and <code>postXxx</code> naming convention.\n+ * It also provides a default implementation that forwards to single methods.\n+ * <p>\n+ * This class could have been implemented as an interface, however to do so\n+ * would prevent the addition of extra events in the future.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/08/31 22:44:54 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/03 00:11:28 $\n  * \n  * @author Stephen Colebourne\n  */\n      * @throws IllegalArgumentException if the collection is null\n      * @throws IllegalStateException if init has already been called\n      */\n-    public void init(final ObservedCollection coll) {\n+    void init(final ObservedCollection coll) {\n         if (coll == null) {\n             throw new IllegalArgumentException(\"Collection must not be null\");\n         }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/event/ModificationHandlerFactory.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/ModificationHandlerFactory.java,v 1.1 2003/09/03 00:11:28 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.event;\n+\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.decorators.ObservedCollection;\n+\n+/**\n+ * Defines a factory for creating ModificationHandler instances and utilities\n+ * for using the factories.\n+ * <p>\n+ * If an application wants to register its own event handler classes, it should\n+ * do so using this class. This must be done during initialization to be \n+ * fully thread-safe. There are two steps:\n+ * <ol>\n+ * <li>A factory must be created that is a subclass of this class\n+ * <li>One of the <code>addFactory</code> methods must be called\n+ * </ol>\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/03 00:11:28 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class ModificationHandlerFactory {\n+    \n+    /** The list of factories, cannot pre-populate as factories are subclasses */\n+    private static ModificationHandlerFactory[] factories = new ModificationHandlerFactory[0];\n+    \n+    // Static access to factories\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a handler subclass based on the specified listener.\n+     * <p>\n+     * The method is defined in terms of an Object to allow for unusual\n+     * listeners, such as a Swing model object.\n+     * \n+     * @param listener  a listener object to create a handler for\n+     * @return an instantiated handler with the listener attached\n+     * @throws IllegalArgumentException if no suitable handler\n+     */\n+    public static final ModificationHandler createHandler(final Collection coll, final Object listener) {\n+        for (int i = 0; i < factories.length; i++) {\n+            ModificationHandler handler = factories[i].create(coll, listener);\n+            if (handler != null) {\n+                return handler;\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Unrecognised listener type: \" +\n+            (listener == null ? \"null\" : listener.getClass().getName()));\n+    }\n+\n+    /**\n+     * Adds a handler factory to the list available for use.\n+     * This factory will be checked after the others in the list.\n+     * <p>\n+     * This method is used to add your own event handler to the supplied ones.\n+     * Registering the factory will enable the standard <code>decorate</code>\n+     * method on <code>ObservedColection</code> to create your handler.\n+     * <p>\n+     * This method is NOT threadsafe! It should only be called during initialization.\n+     * \n+     * @param factory  the factory to add, may be null\n+     */\n+    public static void addFactory(final ModificationHandlerFactory factory) {\n+        addFactory(factory, false);\n+    }\n+\n+    /**\n+     * Adds a handler factory to the list available for use selecting whether\n+     * to override existing factories or not.\n+     * <p>\n+     * This method is used to add your own event handler to the supplied ones.\n+     * Registering the factory will enable the standard <code>decorate</code>\n+     * method on <code>ObservedColection</code> to create your handler.\n+     * <p>\n+     * It is also possible to replace the Jakarta handlers using this method.\n+     * Obviously this should be done with care in a shared web environment!\n+     * <p>\n+     * This method is NOT threadsafe! It should only be called during initialization.\n+     * \n+     * @param factory  the factory to add, may be null\n+     */\n+    public static void addFactory(final ModificationHandlerFactory factory, final boolean override) {\n+        if (factory != null) {\n+            ModificationHandlerFactory[] array = new ModificationHandlerFactory[factories.length + 1];\n+            if (override) {\n+                System.arraycopy(factories, 0, array, 1, factories.length);\n+                array[0] = factory;\n+            } else {\n+                System.arraycopy(factories, 0, array, 0, factories.length);\n+                array[factories.length] = factory;\n+            }\n+            factories = array;\n+        }\n+    }\n+\n+    // Initialize the collection-handler pair\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Initializes handler specified with the collection.\n+     * <p>\n+     * The method avoids exposing an implementation detail on ModificationHandler.\n+     * \n+     * @param handler  the handler to initialize\n+     * @param coll  the collection to store\n+     * @return an instantiated handler with the listener attached\n+     */\n+    public static void initHandler(final ModificationHandler handler, final ObservedCollection coll) {\n+        handler.init(coll);\n+    }\n+    \n+    // Constructor\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected ModificationHandlerFactory() {\n+        super();\n+    }\n+\n+    // Abstract factory\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a handler subclass for the specified listener.\n+     * <p>\n+     * The implementation will normally check to see if the listener\n+     * is of a suitable type, and then cast it. <code>null</code> is\n+     * returned if this factory does not handle the specified type.\n+     * <p>\n+     * The listener is defined in terms of an Object to allow for unusual\n+     * listeners, such as a Swing model object.\n+     * <p>\n+     * The collection the handler is for is passed in to allow for a different\n+     * handler to be selected for the same listener type based on the collection.\n+     * \n+     * @param coll  the collection being decorated\n+     * @param listener  a listener object to create a handler for\n+     * @return an instantiated handler with the listener attached,\n+     *  or null if the listener type is unsuited to this factory\n+     */\n+    protected abstract ModificationHandler create(Collection coll, Object listener);\n+    \n+}\n--- a/src/java/org/apache/commons/collections/event/StandardModificationHandler.java\n+++ b/src/java/org/apache/commons/collections/event/StandardModificationHandler.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/StandardModificationHandler.java,v 1.4 2003/08/31 22:44:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/event/Attic/StandardModificationHandler.java,v 1.5 2003/09/03 00:11:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.event;\n \n+import java.util.Collection;\n+\n /**\n  * The standard implementation of a <code>ModificationHandler</code> that\n  * sends standard JavaBean style events to listeners.\n  * modification events.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/08/31 22:44:54 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/03 00:11:28 $\n  * \n  * @author Stephen Colebourne\n  */\n public class StandardModificationHandler extends ModificationHandler {\n+    \n+    static {\n+        ModificationHandlerFactory.addFactory(new Factory());\n+    }\n \n     /** A reusable empty holders array. */    \n     protected static final PreHolder[] EMPTY_PRE_HOLDERS = new PreHolder[0];\n         postEvent(preSize > 0, ModificationEventType.CLEAR, -1, null, 1, null);\n     }\n \n+    // Factory\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Factory implementation for the StandardModificationHandler.\n+     * \n+     * @author Stephen Colebourne\n+     */\n+    static class Factory extends ModificationHandlerFactory {\n+        \n+        /**\n+         * Creates a StandardModificationHandler using the listener.\n+         * \n+         * @param coll  the collection being decorated\n+         * @param listener  a listener object to create a handler for\n+         * @return an instantiated handler with the listener attached,\n+         *  or null if the listener type is unsuited to this factory\n+         */\n+        protected ModificationHandler create(Collection coll, Object listener) {\n+            if (listener instanceof StandardPreModificationListener) {\n+                if (listener instanceof StandardPostModificationListener) {\n+                    return new StandardModificationHandler(\n+                        (StandardPreModificationListener) listener, -1,\n+                        (StandardPostModificationListener) listener, -1);\n+                } else {\n+                    return new StandardModificationHandler(\n+                        (StandardPreModificationListener) listener, -1, null, 0);\n+                }\n+            }\n+            if (listener instanceof StandardPostModificationListener) {\n+                return new StandardModificationHandler(\n+                    null, 0, (StandardPostModificationListener) listener, -1);\n+            }\n+            return null;\n+        }\n+    }\n+    \n }\n--- a/src/test/org/apache/commons/collections/decorators/ObservedTestHelper.java\n+++ b/src/test/org/apache/commons/collections/decorators/ObservedTestHelper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/ObservedTestHelper.java,v 1.4 2003/08/31 22:44:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/ObservedTestHelper.java,v 1.5 2003/09/03 00:11:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link ObservedCollection} implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/08/31 22:44:54 $\n+ * @version $Revision: 1.5 $ $Date: 2003/09/03 00:11:28 $\n  * \n  * @author Stephen Colebourne\n  */\n         }\n     }\n     \n+    public static interface ObservedFactory {\n+        ObservedCollection createObservedCollection();\n+        ObservedCollection createObservedCollection(Object listener);\n+    }\n+    \n     public static final Listener LISTENER = new Listener();\n     public static final Listener LISTENER2 = new Listener();\n     public static final PreListener PRE_LISTENER = new PreListener();\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestFactoryPlain(ObservedCollection coll) {\n+    public static void bulkTestObservedCollection(ObservedFactory factory) {\n+        doTestFactoryPlain(factory);\n+        doTestFactoryWithListener(factory);\n+        doTestFactoryWithPreListener(factory);\n+        doTestFactoryWithPostListener(factory);\n+        doTestFactoryWithHandler(factory);\n+        doTestFactoryWithObject(factory);\n+        doTestFactoryWithNull(factory);\n+        \n+        doTestAddRemoveGetPreListeners(factory);\n+        doTestAddRemoveGetPostListeners(factory);\n+        \n+        doTestAdd(factory);\n+        doTestAddAll(factory);\n+        doTestClear(factory);\n+        doTestRemove(factory);\n+        doTestRemoveAll(factory);\n+        doTestRetainAll(factory);\n+        doTestIteratorRemove(factory);\n+    }\n+    \n+    public static void bulkTestObservedSet(ObservedFactory factory) {\n+        Assert.assertTrue(factory.createObservedCollection() instanceof ObservedSet);\n+        Assert.assertTrue(factory.createObservedCollection(LISTENER) instanceof ObservedSet);\n+        Assert.assertTrue(factory.createObservedCollection(new StandardModificationHandler()) instanceof ObservedSet);\n+        \n+        bulkTestObservedCollection(factory);\n+    }\n+    \n+    public static void bulkTestObservedList(ObservedFactory factory) {\n+        Assert.assertTrue(factory.createObservedCollection() instanceof ObservedList);\n+        Assert.assertTrue(factory.createObservedCollection(LISTENER) instanceof ObservedList);\n+        Assert.assertTrue(factory.createObservedCollection(new StandardModificationHandler()) instanceof ObservedList);\n+        \n+        bulkTestObservedCollection(factory);\n+        doTestAddIndexed(factory);\n+        doTestAddAllIndexed(factory);\n+        doTestRemoveIndexed(factory);\n+        doTestSetIndexed(factory);\n+        // ITERATOR add/set\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public static void doTestFactoryPlain(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection();\n+        \n         Assert.assertEquals(StandardModificationHandler.class, coll.getHandler().getClass());\n         Assert.assertEquals(0, coll.getHandler().getPreModificationListeners().length);\n         Assert.assertEquals(0, coll.getHandler().getPostModificationListeners().length);\n     }\n     \n-    public static void doTestFactoryWithPreListener(ObservedCollection coll) {\n+    public static void doTestFactoryWithPreListener(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection(PRE_LISTENER);\n+        \n         Assert.assertEquals(StandardModificationHandler.class, coll.getHandler().getClass());\n         Assert.assertEquals(1, coll.getHandler().getPreModificationListeners().length);\n         Assert.assertEquals(0, coll.getHandler().getPostModificationListeners().length);\n         Assert.assertTrue(PRE_LISTENER.preEvent != null);\n     }\n     \n-    public static void doTestFactoryWithPostListener(ObservedCollection coll) {\n+    public static void doTestFactoryWithPostListener(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection(POST_LISTENER);\n+        \n         Assert.assertEquals(StandardModificationHandler.class, coll.getHandler().getClass());\n         Assert.assertEquals(0, coll.getHandler().getPreModificationListeners().length);\n         Assert.assertEquals(1, coll.getHandler().getPostModificationListeners().length);\n         Assert.assertTrue(POST_LISTENER.postEvent != null);\n     }\n     \n-    public static void doTestFactoryWithListener(ObservedCollection coll) {\n+    public static void doTestFactoryWithListener(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection(LISTENER);\n+        \n         Assert.assertEquals(StandardModificationHandler.class, coll.getHandler().getClass());\n         Assert.assertEquals(1, coll.getHandler().getPreModificationListeners().length);\n         Assert.assertEquals(1, coll.getHandler().getPostModificationListeners().length);\n         Assert.assertTrue(LISTENER.postEvent != null);\n     }\n     \n-    //-----------------------------------------------------------------------\n-    public static void doTestAddRemoveGetPreListeners(ObservedCollection coll) {\n+    public static void doTestFactoryWithHandler(ObservedFactory factory) {\n+        StandardModificationHandler handler = new StandardModificationHandler();\n+        ObservedCollection coll = factory.createObservedCollection(handler);\n+        \n+        Assert.assertSame(handler, coll.getHandler());\n+        Assert.assertEquals(0, coll.getHandler().getPreModificationListeners().length);\n+        Assert.assertEquals(0, coll.getHandler().getPostModificationListeners().length);\n+    }\n+    \n+    public static void doTestFactoryWithObject(ObservedFactory factory) {\n+        try {\n+            factory.createObservedCollection(new Object());\n+            Assert.fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public static void doTestFactoryWithNull(ObservedFactory factory) {\n+        try {\n+            factory.createObservedCollection(null);\n+            Assert.fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public static void doTestAddRemoveGetPreListeners(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection();\n+        \n         Assert.assertEquals(0, coll.getHandler().getPreModificationListeners().length);\n         coll.getHandler().addPreModificationListener(LISTENER);\n         Assert.assertEquals(1, coll.getHandler().getPreModificationListeners().length);\n         }\n     }\n     \n-    public static void doTestAddRemoveGetPostListeners(ObservedCollection coll) {\n+    public static void doTestAddRemoveGetPostListeners(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection();\n+        \n         Assert.assertEquals(0, coll.getHandler().getPostModificationListeners().length);\n         coll.getHandler().addPostModificationListener(LISTENER);\n         Assert.assertEquals(1, coll.getHandler().getPostModificationListeners().length);\n     }\n     \n     //-----------------------------------------------------------------------\n-    public static void doTestAdd(ObservedCollection coll) {\n+    public static void doTestAdd(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection(LISTENER);\n+        \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertEquals(0, coll.size());\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestAddIndexed(ObservedList coll) {\n+    public static void doTestAddIndexed(ObservedFactory factory) {\n+        ObservedList coll = (ObservedList) factory.createObservedCollection(LISTENER);\n+        \n         coll.addAll(SIX_SEVEN_LIST);\n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestAddAll(ObservedCollection coll) {\n+    public static void doTestAddAll(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection(LISTENER);\n+        \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         Assert.assertEquals(0, coll.size());\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestAddAllIndexed(ObservedList coll) {\n+    public static void doTestAddAllIndexed(ObservedFactory factory) {\n+        ObservedList coll = (ObservedList) factory.createObservedCollection(LISTENER);\n+        \n         coll.addAll(SIX_SEVEN_LIST);\n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestClear(ObservedCollection coll) {\n+    public static void doTestClear(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection(LISTENER);\n+        \n         coll.addAll(SIX_SEVEN_LIST);\n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestRemove(ObservedCollection coll) {\n+    public static void doTestRemove(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection(LISTENER);\n+        \n         coll.addAll(SIX_SEVEN_LIST);\n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestRemoveIndexed(ObservedList coll) {\n+    public static void doTestRemoveIndexed(ObservedFactory factory) {\n+        ObservedList coll = (ObservedList) factory.createObservedCollection(LISTENER);\n+        \n         coll.addAll(SIX_SEVEN_LIST);\n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestRemoveAll(ObservedCollection coll) {\n+    public static void doTestRemoveAll(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection(LISTENER);\n+        \n         coll.add(EIGHT);\n         coll.addAll(SIX_SEVEN_LIST);\n         LISTENER.preEvent = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestRetainAll(ObservedCollection coll) {\n+    public static void doTestRetainAll(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection(LISTENER);\n+        \n         coll.add(EIGHT);\n         coll.addAll(SIX_SEVEN_LIST);\n         LISTENER.preEvent = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestIteratorRemove(ObservedCollection coll) {\n+    public static void doTestIteratorRemove(ObservedFactory factory) {\n+        ObservedCollection coll = factory.createObservedCollection(LISTENER);\n+        \n         coll.addAll(SIX_SEVEN_LIST);\n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public static void doTestSetIndexed(ObservedList coll) {\n+    public static void doTestSetIndexed(ObservedFactory factory) {\n+        ObservedList coll = (ObservedList) factory.createObservedCollection(LISTENER);\n+        \n         coll.addAll(SIX_SEVEN_LIST);\n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.5 2003/08/31 17:28:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.6 2003/09/03 00:11:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/08/31 17:28:42 $\n+ * @version $Revision: 1.6 $ $Date: 2003/09/03 00:11:28 $\n  * \n  * @author Stephen Colebourne\n  */\n     \n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n+        \n         suite.addTest(TestFixedSizeList.suite());\n         suite.addTest(TestFixedSizeMap.suite());\n         suite.addTest(TestFixedSizeSortedMap.suite());\n+        \n+        suite.addTest(TestObservedCollection.suite());\n+        suite.addTest(TestObservedList.suite());\n+        suite.addTest(TestObservedSet.suite());\n+        \n         suite.addTest(TestSequencedSet.suite());\n+        \n         suite.addTest(TestTransformedBag.suite());\n         suite.addTest(TestTransformedBuffer.suite());\n         suite.addTest(TestTransformedCollection.suite());\n         suite.addTest(TestTransformedSortedBag.suite());\n         suite.addTest(TestTransformedSortedMap.suite());\n         suite.addTest(TestTransformedSortedSet.suite());\n+        \n         return suite;\n     }\n         \n--- a/src/test/org/apache/commons/collections/decorators/TestObservedCollection.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestObservedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestObservedCollection.java,v 1.3 2003/08/31 22:44:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestObservedCollection.java,v 1.4 2003/09/03 00:11:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.TestCollection;\n-import org.apache.commons.collections.event.StandardModificationHandler;\n \n /**\n  * Extension of {@link TestCollection} for exercising the\n  * {@link ObservedCollection} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 22:44:54 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/03 00:11:28 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestObservedCollection extends TestCollection {\n-    \n-    private static Integer SIX = new Integer(6);\n-    private static Integer SEVEN = new Integer(7);\n-    private static Integer EIGHT = new Integer(8);\n-    private static final ObservedTestHelper.Listener LISTENER = ObservedTestHelper.LISTENER;\n-    private static final ObservedTestHelper.PreListener PRE_LISTENER = ObservedTestHelper.PRE_LISTENER;\n-    private static final ObservedTestHelper.PostListener POST_LISTENER = ObservedTestHelper.POST_LISTENER;\n+public class TestObservedCollection extends TestCollection implements ObservedTestHelper.ObservedFactory {\n     \n     public TestObservedCollection(String testName) {\n         super(testName);\n     }\n     \n     public Collection makeCollection() {\n-        return ObservedCollection.decorate(new ArrayList(), LISTENER);\n+        return ObservedCollection.decorate(new ArrayList(), ObservedTestHelper.LISTENER);\n     }\n \n     protected Collection makeFullCollection() {\n         List list = new ArrayList();\n         list.addAll(Arrays.asList(getFullElements()));\n-        return ObservedCollection.decorate(list, LISTENER);\n+        return ObservedCollection.decorate(list, ObservedTestHelper.LISTENER);\n     }\n     \n     //-----------------------------------------------------------------------\n     public void testObservedCollection() {\n-        ObservedCollection coll = ObservedCollection.decorate(new ArrayList());\n-        ObservedTestHelper.doTestFactoryPlain(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestFactoryWithListener(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList(), PRE_LISTENER);\n-        ObservedTestHelper.doTestFactoryWithPreListener(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList(), POST_LISTENER);\n-        ObservedTestHelper.doTestFactoryWithPostListener(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList());\n-        ObservedTestHelper.doTestAddRemoveGetPreListeners(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList());\n-        ObservedTestHelper.doTestAddRemoveGetPostListeners(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestAdd(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestAddAll(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestClear(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestRemove(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestRemoveAll(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestRetainAll(coll);\n-        \n-        coll = ObservedCollection.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestIteratorRemove(coll);\n+        ObservedTestHelper.bulkTestObservedCollection(this);\n     }\n \n-    //-----------------------------------------------------------------------    \n-    public void testFactoryWithHandler() {\n-        StandardModificationHandler handler = new StandardModificationHandler();\n-        ObservedCollection coll = ObservedCollection.decorate(new ArrayList(), handler);\n-        \n-        assertSame(handler, coll.getHandler());\n-        assertEquals(0, coll.getHandler().getPreModificationListeners().length);\n-        assertEquals(0, coll.getHandler().getPostModificationListeners().length);\n+    //-----------------------------------------------------------------------\n+    public ObservedCollection createObservedCollection() {\n+        return ObservedCollection.decorate(new ArrayList());\n     }\n-    \n-//    public void testFactoryWithMasks() {\n-//        ObservedCollection coll = ObservedCollection.decorate(new ArrayList(), LISTENER, -1, 0);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent != null);\n-//        assertTrue(LISTENER.postEvent == null);\n+\n+    public ObservedCollection createObservedCollection(Object listener) {\n+        return ObservedCollection.decorate(new ArrayList(), listener);\n+    }\n+\n+//  public void testFactoryWithMasks() {\n+//      ObservedCollection coll = ObservedCollection.decorate(new ArrayList(), LISTENER, -1, 0);\n+//      LISTENER.preEvent = null;\n+//      LISTENER.postEvent = null;\n+//      coll.add(SIX);\n+//      assertTrue(LISTENER.preEvent != null);\n+//      assertTrue(LISTENER.postEvent == null);\n //        \n-//        coll = ObservedCollection.decorate(new ArrayList(), LISTENER, 0, -1);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent == null);\n-//        assertTrue(LISTENER.postEvent != null);\n+//      coll = ObservedCollection.decorate(new ArrayList(), LISTENER, 0, -1);\n+//      LISTENER.preEvent = null;\n+//      LISTENER.postEvent = null;\n+//      coll.add(SIX);\n+//      assertTrue(LISTENER.preEvent == null);\n+//      assertTrue(LISTENER.postEvent != null);\n //        \n-//        coll = ObservedCollection.decorate(new ArrayList(), LISTENER, -1, -1);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent != null);\n-//        assertTrue(LISTENER.postEvent != null);\n+//      coll = ObservedCollection.decorate(new ArrayList(), LISTENER, -1, -1);\n+//      LISTENER.preEvent = null;\n+//      LISTENER.postEvent = null;\n+//      coll.add(SIX);\n+//      assertTrue(LISTENER.preEvent != null);\n+//      assertTrue(LISTENER.postEvent != null);\n //        \n-//        coll = ObservedCollection.decorate(new ArrayList(), LISTENER, 0, 0);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent == null);\n-//        assertTrue(LISTENER.postEvent == null);\n+//      coll = ObservedCollection.decorate(new ArrayList(), LISTENER, 0, 0);\n+//      LISTENER.preEvent = null;\n+//      LISTENER.postEvent = null;\n+//      coll.add(SIX);\n+//      assertTrue(LISTENER.preEvent == null);\n+//      assertTrue(LISTENER.postEvent == null);\n //        \n-//        coll = ObservedCollection.decorate(new ArrayList(), LISTENER, ModificationEventType.ADD, ModificationEventType.ADD_ALL);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent != null);\n-//        assertTrue(LISTENER.postEvent == null);\n-//    }\n+//      coll = ObservedCollection.decorate(new ArrayList(), LISTENER, ModificationEventType.ADD, ModificationEventType.ADD_ALL);\n+//      LISTENER.preEvent = null;\n+//      LISTENER.postEvent = null;\n+//      coll.add(SIX);\n+//      assertTrue(LISTENER.preEvent != null);\n+//      assertTrue(LISTENER.postEvent == null);\n+//  }\n //    \n }\n--- a/src/test/org/apache/commons/collections/decorators/TestObservedList.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestObservedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestObservedList.java,v 1.3 2003/08/31 22:44:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestObservedList.java,v 1.4 2003/09/03 00:11:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.TestList;\n-import org.apache.commons.collections.event.StandardModificationHandler;\n \n /**\n  * Extension of {@link TestList} for exercising the\n  * {@link ObservedList} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 22:44:54 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/03 00:11:28 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestObservedList extends TestList {\n-    \n-    private static Integer SIX = new Integer(6);\n-    private static Integer SEVEN = new Integer(7);\n-    private static Integer EIGHT = new Integer(8);\n-    private static final ObservedTestHelper.Listener LISTENER = ObservedTestHelper.LISTENER;\n-    private static final ObservedTestHelper.PreListener PRE_LISTENER = ObservedTestHelper.PRE_LISTENER;\n-    private static final ObservedTestHelper.PostListener POST_LISTENER = ObservedTestHelper.POST_LISTENER;\n+public class TestObservedList extends TestList implements ObservedTestHelper.ObservedFactory {\n     \n     public TestObservedList(String testName) {\n         super(testName);\n \n     //-----------------------------------------------------------------------\n     public List makeEmptyList() {\n-        return ObservedList.decorate(new ArrayList(), LISTENER);\n+        return ObservedList.decorate(new ArrayList(), ObservedTestHelper.LISTENER);\n     }\n \n     protected List makeFullList() {\n         List set = new ArrayList();\n         set.addAll(Arrays.asList(getFullElements()));\n-        return ObservedList.decorate(set, LISTENER);\n+        return ObservedList.decorate(set, ObservedTestHelper.LISTENER);\n     }\n     \n     //-----------------------------------------------------------------------\n     public void testObservedList() {\n-        ObservedList coll = ObservedList.decorate(new ArrayList());\n-        ObservedTestHelper.doTestFactoryPlain(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestFactoryWithListener(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), PRE_LISTENER);\n-        ObservedTestHelper.doTestFactoryWithPreListener(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), POST_LISTENER);\n-        ObservedTestHelper.doTestFactoryWithPostListener(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList());\n-        ObservedTestHelper.doTestAddRemoveGetPreListeners(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList());\n-        ObservedTestHelper.doTestAddRemoveGetPostListeners(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestAdd(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestAddIndexed(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestAddAll(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestAddAllIndexed(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestClear(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestRemove(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestRemoveIndexed(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestRemoveAll(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestRetainAll(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestIteratorRemove(coll);\n-        \n-        coll = ObservedList.decorate(new ArrayList(), LISTENER);\n-        ObservedTestHelper.doTestSetIndexed(coll);\n+        ObservedTestHelper.bulkTestObservedList(this);\n     }\n \n-    //-----------------------------------------------------------------------    \n-    public void testFactoryWithHandler() {\n-        StandardModificationHandler handler = new StandardModificationHandler();\n-        ObservedList coll = ObservedList.decorate(new ArrayList(), handler);\n-        \n-        assertSame(handler, coll.getHandler());\n-        assertEquals(0, coll.getHandler().getPreModificationListeners().length);\n-        assertEquals(0, coll.getHandler().getPostModificationListeners().length);\n+    //-----------------------------------------------------------------------\n+    public ObservedCollection createObservedCollection() {\n+        return ObservedList.decorate(new ArrayList());\n     }\n-    \n-//    public void testFactoryWithMasks() {\n-//        ObservedList coll = ObservedList.decorate(new ArrayList(), LISTENER, -1, 0);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent != null);\n-//        assertTrue(LISTENER.postEvent == null);\n-//        \n-//        coll = ObservedList.decorate(new ArrayList(), LISTENER, 0, -1);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent == null);\n-//        assertTrue(LISTENER.postEvent != null);\n-//        \n-//        coll = ObservedList.decorate(new ArrayList(), LISTENER, -1, -1);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent != null);\n-//        assertTrue(LISTENER.postEvent != null);\n-//        \n-//        coll = ObservedList.decorate(new ArrayList(), LISTENER, 0, 0);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent == null);\n-//        assertTrue(LISTENER.postEvent == null);\n-//        \n-//        coll = ObservedList.decorate(new ArrayList(), LISTENER, ModificationEventType.ADD, ModificationEventType.ADD_ALL);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent != null);\n-//        assertTrue(LISTENER.postEvent == null);\n-//    }\n-//    \n+\n+    public ObservedCollection createObservedCollection(Object listener) {\n+        return ObservedList.decorate(new ArrayList(), listener);\n+    }\n+\n }\n--- a/src/test/org/apache/commons/collections/decorators/TestObservedSet.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestObservedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestObservedSet.java,v 1.3 2003/08/31 22:44:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestObservedSet.java,v 1.4 2003/09/03 00:11:28 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.TestSet;\n-import org.apache.commons.collections.event.StandardModificationHandler;\n \n /**\n  * Extension of {@link TestSet} for exercising the\n  * {@link ObservedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 22:44:54 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/03 00:11:28 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestObservedSet extends TestSet {\n-    \n-    private static Integer SIX = new Integer(6);\n-    private static Integer SEVEN = new Integer(7);\n-    private static Integer EIGHT = new Integer(8);\n-    private static final ObservedTestHelper.Listener LISTENER = ObservedTestHelper.LISTENER;\n-    private static final ObservedTestHelper.PreListener PRE_LISTENER = ObservedTestHelper.PRE_LISTENER;\n-    private static final ObservedTestHelper.PostListener POST_LISTENER = ObservedTestHelper.POST_LISTENER;\n+public class TestObservedSet extends TestSet implements ObservedTestHelper.ObservedFactory {\n     \n     public TestObservedSet(String testName) {\n         super(testName);\n \n     //-----------------------------------------------------------------------\n     public Set makeEmptySet() {\n-        return ObservedSet.decorate(new HashSet(), LISTENER);\n+        return ObservedSet.decorate(new HashSet(), ObservedTestHelper.LISTENER);\n     }\n \n     protected Set makeFullSet() {\n         Set set = new HashSet();\n         set.addAll(Arrays.asList(getFullElements()));\n-        return ObservedSet.decorate(set, LISTENER);\n+        return ObservedSet.decorate(set, ObservedTestHelper.LISTENER);\n     }\n     \n     //-----------------------------------------------------------------------\n     public void testObservedSet() {\n-        ObservedSet coll = ObservedSet.decorate(new HashSet());\n-        ObservedTestHelper.doTestFactoryPlain(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet(), LISTENER);\n-        ObservedTestHelper.doTestFactoryWithListener(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet(), PRE_LISTENER);\n-        ObservedTestHelper.doTestFactoryWithPreListener(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet(), POST_LISTENER);\n-        ObservedTestHelper.doTestFactoryWithPostListener(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet());\n-        ObservedTestHelper.doTestAddRemoveGetPreListeners(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet());\n-        ObservedTestHelper.doTestAddRemoveGetPostListeners(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet(), LISTENER);\n-        ObservedTestHelper.doTestAdd(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet(), LISTENER);\n-        ObservedTestHelper.doTestAddAll(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet(), LISTENER);\n-        ObservedTestHelper.doTestClear(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet(), LISTENER);\n-        ObservedTestHelper.doTestRemove(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet(), LISTENER);\n-        ObservedTestHelper.doTestRemoveAll(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet(), LISTENER);\n-        ObservedTestHelper.doTestRetainAll(coll);\n-        \n-        coll = ObservedSet.decorate(new HashSet(), LISTENER);\n-        ObservedTestHelper.doTestIteratorRemove(coll);\n+        ObservedTestHelper.bulkTestObservedSet(this);\n     }\n \n-    //-----------------------------------------------------------------------    \n-    public void testFactoryWithHandler() {\n-        StandardModificationHandler handler = new StandardModificationHandler();\n-        ObservedSet coll = ObservedSet.decorate(new HashSet(), handler);\n-        \n-        assertSame(handler, coll.getHandler());\n-        assertEquals(0, coll.getHandler().getPreModificationListeners().length);\n-        assertEquals(0, coll.getHandler().getPostModificationListeners().length);\n+    //-----------------------------------------------------------------------\n+    public ObservedCollection createObservedCollection() {\n+        return ObservedSet.decorate(new HashSet());\n     }\n-    \n-//    public void testFactoryWithMasks() {\n-//        ObservedSet coll = ObservedSet.decorate(new HashSet(), LISTENER, -1, 0);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent != null);\n-//        assertTrue(LISTENER.postEvent == null);\n-//        \n-//        coll = ObservedSet.decorate(new HashSet(), LISTENER, 0, -1);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent == null);\n-//        assertTrue(LISTENER.postEvent != null);\n-//        \n-//        coll = ObservedSet.decorate(new HashSet(), LISTENER, -1, -1);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent != null);\n-//        assertTrue(LISTENER.postEvent != null);\n-//        \n-//        coll = ObservedSet.decorate(new HashSet(), LISTENER, 0, 0);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent == null);\n-//        assertTrue(LISTENER.postEvent == null);\n-//        \n-//        coll = ObservedSet.decorate(new HashSet(), LISTENER, ModificationEventType.ADD, ModificationEventType.ADD_ALL);\n-//        LISTENER.preEvent = null;\n-//        LISTENER.postEvent = null;\n-//        coll.add(SIX);\n-//        assertTrue(LISTENER.preEvent != null);\n-//        assertTrue(LISTENER.postEvent == null);\n-//    }\n-//    \n+\n+    public ObservedCollection createObservedCollection(Object listener) {\n+        return ObservedSet.decorate(new HashSet(), listener);\n+    }\n+\n }", "timestamp": 1062547888, "metainfo": ""}