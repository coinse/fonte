{"sha": "129cc2869b859fb3141009973a41a97bf4e3375f", "log": "Javadoc   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.42 2003/09/21 16:26:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.43 2003/09/21 23:47:09 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.42 $ $Date: 2003/09/21 16:26:08 $\n+ * @version $Revision: 1.43 $ $Date: 2003/09/21 23:47:09 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Peter KoBek\n  * @author Matthew Hawthorne\n  * @author Janek Bogucki\n+ * @author Phil Steitz\n  */\n public class CollectionUtils {\n \n      * will be equal to the maximum of the cardinality of that element\n      * in the two given {@link Collection}s.\n      *\n+     * @param a  the first collection, must not be null\n+     * @param b  the second collection, must not be null\n+     * @return  the union of the two collections\n      * @see Collection#addAll\n      */\n     public static Collection union(final Collection a, final Collection b) {\n      * will be equal to the minimum of the cardinality of that element\n      * in the two given {@link Collection}s.\n      *\n+     * @param a  the first collection, must not be null\n+     * @param b  the second collection, must not be null\n+     * @return the intersection of the two collections\n      * @see Collection#retainAll\n      * @see #containsAny\n      */\n      * <tt>{@link #subtract subtract}({@link #union union(a,b)},{@link #intersection intersection(a,b)})</tt>\n      * or\n      * <tt>{@link #union union}({@link #subtract subtract(a,b)},{@link #subtract subtract(b,a)})</tt>.\n+     *\n+     * @param a  the first collection, must not be null\n+     * @param b  the second collection, must not be null\n+     * @return the symmetric difference of the two collections\n      */\n     public static Collection disjunction(final Collection a, final Collection b) {\n         ArrayList list = new ArrayList();\n      * Only those elements present in the collection will appear as\n      * keys in the map.\n      * \n-     * @param coll  the collection to get the cardinality map for\n+     * @param coll  the collection to get the cardinality map for, must not be null\n      * @return the populated cardinality map\n      */\n     public static Map getCardinalityMap(final Collection coll) {\n      * than or equal to the cardinality of <i>e</i> in <i>b</i>,\n      * for each element <i>e</i> in <i>a</i>.\n      *\n+     * @param a  the first (sub?) collection, must not be null\n+     * @param b  the second (super?) collection, must not be null\n+     * @return <code>true</code> iff <i>a</i> is a sub-collection of <i>b</i>\n      * @see #isProperSubCollection\n      * @see Collection#containsAll\n      */\n      *    <li><code>a.size() < Integer.MAXVALUE</code></li>\n      * </ul>\n      *\n+     * @param a  the first (sub?) collection, must not be null\n+     * @param b  the second (super?) collection, must not be null\n+     * @return <code>true</code> iff <i>a</i> is a <i>proper</i> sub-collection of <i>b</i>\n      * @see #isSubCollection\n      * @see Collection#containsAll\n      */\n \n     /**\n      * Returns <tt>true</tt> iff the given {@link Collection}s contain\n-     * exactly the same elements with exactly the same cardinality.\n+     * exactly the same elements with exactly the same cardinalities.\n      * <p>\n      * That is, iff the cardinality of <i>e</i> in <i>a</i> is\n      * equal to the cardinality of <i>e</i> in <i>b</i>,\n      * for each element <i>e</i> in <i>a</i> or <i>b</i>.\n+     *\n+     * @param a  the first collection, must not be null\n+     * @param b  the second collection, must not be null\n+     * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.\n      */\n     public static boolean isEqualCollection(final Collection a, final Collection b) {\n         if(a.size() != b.size()) {\n     /**\n      * Returns the number of occurrences of <i>obj</i>\n      * in <i>col</i>.\n+     *\n+     * @param obj  the object to find the cardinality of\n+     * @param col  the collection to search\n+     * @return the the number of occurrences of obj in col\n      */\n     public static int cardinality(Object obj, final Collection col) {\n         int count = 0;\n     /** \n      * Finds the first element in the given collection which matches the given predicate.\n      * <p>\n-     * If the input collection or predicate is null, null is returned.\n+     * If the input collection or predicate is null, or no element of the collection \n+     * matches the predicate, null is returned.\n      *\n      * @param collection  the collection to search, may be null\n      * @param predicate  the predicate to use, may be null\n      * <p>\n      * If the input collection or transformer is null, there is no change made.\n      * <p>\n-     * This routine is best for Lists and uses set(), however it adapts for all\n-     * Collections that support clear() and addAll().\n+     * This routine is best for Lists, for which set() is used to do the \n+     * transformations \"in place.\"  For other Collections, clear() and addAll()\n+     * are used to replace elements.  \n      * <p>\n      * If the input collection controls its input, such as a Set, and the\n      * Transformer creates duplicates (or are otherwise invalid), the \n     }\n     \n     /** \n-     * Transforms all elements from inputCollection with the given transformer \n-     * and adds them to the outputCollection.\n+     * Returns a new Collection consisting of the elements of inputCollection transformed\n+     * by the given transformer.\n      * <p>\n      * If the input transformer is null, the result is an empty list.\n      * \n     }\n     \n     /** \n-     * Transforms all elements from the inputIterator  with the given transformer \n+     * Transforms all elements from the inputIterator with the given transformer \n      * and adds them to the outputCollection.\n      * <p>\n      * If the input iterator or transformer is null, the result is an empty list.\n     /** \n      * Adds all elements in the array to the given collection.\n      * \n-     * @param collection  the collection to add to\n-     * @param elements  the array of elements to add, may be null\n+     * @param collection  the collection to add to, may not be null\n+     * @param elements  the array of elements to add, may not be null\n      * @throws NullPointerException if the collection or array is null\n      */\n     public static void addAll(Collection collection, Object[] elements) {\n     }    \n     \n     /**\n-     * Given an Object, and an index, it will get the nth value in the\n+     * Given an Object, and an index, returns the nth value in the\n      * object.\n      * <ul>\n-     * <li>If obj is a Map, get the nth value from the <b>key</b> iterator.\n-     * <li>If obj is a List or an array, get the nth value.\n-     * <li>If obj is an iterator, enumeration or Collection, get the nth value from the iterator.\n-     * <li>Return the original obj.\n+     * <li>If obj is a Map, returns the nth value from the <b>keySet</b> iterator, unless \n+     *     the Map contains an Integer key with integer value = idx, in which case the\n+     *     corresponding map entry value is returned.  If idx exceeds the number of entries in\n+     *     the map, an empty Iterator is returned.\n+     * <li>If obj is a List or an array, returns the nth value, throwing IndexOutOfBoundsException,\n+     *     ArrayIndexOutOfBoundsException, resp. if the nth value does not exist.\n+     * <li>If obj is an iterator, enumeration or Collection, returns the nth value from the iterator,\n+     *     returning an empty Iterator (resp. Enumeration) if the nth value does not exist.\n+     * <li>Returns the original obj if it is null or not a Collection or Iterator.\n      * </ul>\n      * \n-     * @param obj  the object to get an index of\n+     * @param obj  the object to get an index of, may be null\n      * @param idx  the index to get\n      * @throws IndexOutOfBoundsException\n-     * @throws NoSuchElementException\n+     * @throws ArrayIndexOutOfBoundsException\n      */\n     public static Object index(Object obj, int idx) {\n         return index(obj, new Integer(idx));\n     }\n     \n     /**\n-     * Given an Object, and a key (index), it will get value associated with\n+     * Given an Object, and a key (index), returns the value associated with\n      * that key in the Object. The following checks are made:\n      * <ul>\n      * <li>If obj is a Map, use the index as a key to get a value. If no match continue.\n      * <li>Check key is an Integer. If not, return the object passed in.\n-     * <li>If obj is a Map, get the nth value from the <b>key</b> iterator.\n-     * <li>If obj is a List or an array, get the nth value.\n-     * <li>If obj is an iterator, enumeration or Collection, get the nth value from the iterator.\n+     * <li>If obj is a Map, get the nth value from the <b>keySet</b> iterator.\n+     *     If the Map has fewer than n entries, return an empty Iterator.\n+     * <li>If obj is a List or an array, get the nth value, throwing IndexOutOfBoundsException,\n+     *     ArrayIndexOutOfBoundsException, resp. if the nth value does not exist.\n+     * <li>If obj is an iterator, enumeration or Collection, get the nth value from the iterator,\n+     *     returning an empty Iterator (resp. Enumeration) if the nth value does not exist.\n      * <li>Return the original obj.\n      * </ul>\n      * \n      * @param index  the index to get\n      * @return the object at the specified index\n      * @throws IndexOutOfBoundsException\n-     * @throws NoSuchElementException\n+     * @throws ArrayIndexOutOfBoundsException\n      */\n     public static Object index(Object obj, Object index) {\n         if(obj instanceof Map) {", "timestamp": 1064188029, "metainfo": ""}