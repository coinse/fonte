{"sha": "6e9f2b17d2abee288fbe9152c21a3f9efa32aef0", "log": "Add transformed decorators to static utilities   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/java/org/apache/commons/collections/BagUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.10 2003/05/09 18:41:34 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.11 2003/05/11 13:29:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.PredicatedSortedBag;\n import org.apache.commons.collections.decorators.SynchronizedBag;\n import org.apache.commons.collections.decorators.SynchronizedSortedBag;\n+import org.apache.commons.collections.decorators.TransformedBag;\n+import org.apache.commons.collections.decorators.TransformedSortedBag;\n import org.apache.commons.collections.decorators.TypedBag;\n import org.apache.commons.collections.decorators.TypedSortedBag;\n import org.apache.commons.collections.decorators.UnmodifiableBag;\n  * and {@link SortedBag} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.10 $ $Date: 2003/05/09 18:41:34 $\n+ * @version $Revision: 1.11 $ $Date: 2003/05/11 13:29:16 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n     public static Bag predicatedBag(Bag bag, Predicate predicate) {\n         return PredicatedBag.decorate(bag, predicate);\n     }\n-\n+    \n     /**\n      * Returns a typed bag backed by the given bag.\n      * <p>\n      */\n     public static Bag typedBag(Bag bag, Class type) {\n         return TypedBag.decorate(bag, type);\n+    }\n+    \n+    /**\n+     * Returns a transformed bag backed by the given bag.\n+     * <p>\n+     * Each object is passed through the transformer as it is added to the\n+     * Bag. It is important not to use the original bag after invoking this \n+     * method, as it is a backdoor for adding untransformed objects.\n+     *\n+     * @param bag  the bag to predicate, must not be null\n+     * @param transformer  the transformer for the bag, must not be null\n+     * @return a transformed bag backed by the given bag\n+     * @throws IllegalArgumentException  if the Bag or Transformer is null\n+     */\n+    public static Bag transformedBag(Bag bag, Transformer transformer) {\n+        return TransformedBag.decorate(bag, transformer);\n     }\n     \n     //-----------------------------------------------------------------------\n     public static SortedBag typedSortedBag(SortedBag bag, Class type) {\n         return TypedSortedBag.decorate(bag, type);\n     }\n+    \n+    /**\n+     * Returns a transformed sorted bag backed by the given bag.\n+     * <p>\n+     * Each object is passed through the transformer as it is added to the\n+     * Bag. It is important not to use the original bag after invoking this \n+     * method, as it is a backdoor for adding untransformed objects.\n+     *\n+     * @param bag  the bag to predicate, must not be null\n+     * @param transformer  the transformer for the bag, must not be null\n+     * @return a transformed bag backed by the given bag\n+     * @throws IllegalArgumentException  if the Bag or Transformer is null\n+     */\n+    public static SortedBag transformedSortedBag(SortedBag bag, Transformer transformer) {\n+        return TransformedSortedBag.decorate(bag, transformer);\n+    }\n         \n }\n--- a/src/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/java/org/apache/commons/collections/BufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.11 2003/05/09 18:41:34 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.12 2003/05/11 13:29:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.BlockingBuffer;\n import org.apache.commons.collections.decorators.PredicatedBuffer;\n import org.apache.commons.collections.decorators.SynchronizedBuffer;\n+import org.apache.commons.collections.decorators.TransformedBuffer;\n import org.apache.commons.collections.decorators.TypedBuffer;\n import org.apache.commons.collections.decorators.UnmodifiableBuffer;\n \n  * Contains static utility methods for operating on {@link Buffer} objects.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.11 $ $Date: 2003/05/09 18:41:34 $\n+ * @version $Revision: 1.12 $ $Date: 2003/05/11 13:29:16 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n         return TypedBuffer.decorate(buffer, type);\n     }\n \n+    /**\n+     * Returns a transformed buffer backed by the given buffer.\n+     * <p>\n+     * Each object is passed through the transformer as it is added to the\n+     * Buffer. It is important not to use the original buffer after invoking this \n+     * method, as it is a backdoor for adding untransformed objects.\n+     *\n+     * @param buffer  the buffer to predicate, must not be null\n+     * @param transformer  the transformer for the buffer, must not be null\n+     * @return a transformed buffer backed by the given buffer\n+     * @throws IllegalArgumentException  if the Buffer or Transformer is null\n+     */\n+    public static Buffer transformedBuffer(Buffer buffer, Transformer transformer) {\n+        return TransformedBuffer.decorate(buffer, transformer);\n+    }\n+    \n }\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.30 2003/05/09 18:41:34 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.31 2003/05/11 13:29:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Set;\n \n import org.apache.commons.collections.decorators.PredicatedCollection;\n+import org.apache.commons.collections.decorators.TransformedCollection;\n import org.apache.commons.collections.decorators.TypedCollection;\n import org.apache.commons.collections.decorators.UnmodifiableBoundedCollection;\n import org.apache.commons.collections.iterators.ArrayIterator;\n  * A set of {@link Collection} related utility methods.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.30 $ $Date: 2003/05/09 18:41:34 $\n+ * @version $Revision: 1.31 $ $Date: 2003/05/11 13:29:16 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n         return TypedCollection.decorate(collection, type);\n     }\n     \n+    /**\n+     * Returns a transformed bag backed by the given collection.\n+     * <p>\n+     * Each object is passed through the transformer as it is added to the\n+     * Collection. It is important not to use the original collection after invoking this \n+     * method, as it is a backdoor for adding untransformed objects.\n+     *\n+     * @param collection  the collection to predicate, must not be null\n+     * @param transformer  the transformer for the collection, must not be null\n+     * @return a transformed collection backed by the given collection\n+     * @throws IllegalArgumentException  if the Collection or Transformer is null\n+     */\n+    public static Collection transformedCollection(Collection collection, Transformer transformer) {\n+        return TransformedCollection.decorate(collection, transformer);\n+    }\n+    \n }\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.17 2003/05/09 18:41:34 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.18 2003/05/11 13:29:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.FixedSizeList;\n import org.apache.commons.collections.decorators.LazyList;\n import org.apache.commons.collections.decorators.PredicatedList;\n+import org.apache.commons.collections.decorators.TransformedList;\n import org.apache.commons.collections.decorators.TypedList;\n \n /**\n  * instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.17 $ $Date: 2003/05/09 18:41:34 $\n+ * @version $Revision: 1.18 $ $Date: 2003/05/11 13:29:16 $\n  * \n  * @author  <a href=\"mailto:fede@apache.org\">Federico Barbieri</a>\n  * @author  <a href=\"mailto:donaldp@apache.org\">Peter Donald</a>\n     }\n     \n     /**\n+     * Returns a transformed list backed by the given list.\n+     * <p>\n+     * Each object is passed through the transformer as it is added to the\n+     * List. It is important not to use the original list after invoking this \n+     * method, as it is a backdoor for adding untransformed objects.\n+     *\n+     * @param list  the list to predicate, must not be null\n+     * @param transformer  the transformer for the list, must not be null\n+     * @return a transformed list backed by the given list\n+     * @throws IllegalArgumentException  if the List or Transformer is null\n+     */\n+    public static List transformedList(List list, Transformer transformer) {\n+        return TransformedList.decorate(list, transformer);\n+    }\n+    \n+    /**\n      * Returns a \"lazy\" list whose elements will be created on demand.<P>\n      * <p>\n      * When the index passed to the returned list's {@link List#get(int) get}\n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.13 2003/05/09 18:41:34 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.14 2003/05/11 13:29:16 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.decorators.PredicatedSet;\n import org.apache.commons.collections.decorators.PredicatedSortedSet;\n+import org.apache.commons.collections.decorators.TransformedSet;\n+import org.apache.commons.collections.decorators.TransformedSortedSet;\n import org.apache.commons.collections.decorators.TypedSet;\n import org.apache.commons.collections.decorators.TypedSortedSet;\n \n  * and {@link SortedSet} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.13 $ $Date: 2003/05/09 18:41:34 $\n+ * @version $Revision: 1.14 $ $Date: 2003/05/11 13:29:16 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n         return TypedSet.decorate(set, type);\n     }\n     \n+    /**\n+     * Returns a transformed set backed by the given set.\n+     * <p>\n+     * Each object is passed through the transformer as it is added to the\n+     * Set. It is important not to use the original set after invoking this \n+     * method, as it is a backdoor for adding untransformed objects.\n+     *\n+     * @param set  the set to predicate, must not be null\n+     * @param transformer  the transformer for the set, must not be null\n+     * @return a transformed set backed by the given set\n+     * @throws IllegalArgumentException  if the Set or Transformer is null\n+     */\n+    public static Set transformedSet(Set set, Transformer transformer) {\n+        return TransformedSet.decorate(set, transformer);\n+    }\n+    \n     //-----------------------------------------------------------------------\n     /**\n      * Returns a synchronized sorted set backed by the given sorted set.\n         return TypedSortedSet.decorate(set, type);\n     }\n     \n+    /**\n+     * Returns a transformed sorted set backed by the given set.\n+     * <p>\n+     * Each object is passed through the transformer as it is added to the\n+     * Set. It is important not to use the original set after invoking this \n+     * method, as it is a backdoor for adding untransformed objects.\n+     *\n+     * @param set  the set to predicate, must not be null\n+     * @param transformer  the transformer for the set, must not be null\n+     * @return a transformed set backed by the given set\n+     * @throws IllegalArgumentException  if the Set or Transformer is null\n+     */\n+    public static SortedSet transformedSortedSet(SortedSet set, Transformer transformer) {\n+        return TransformedSortedSet.decorate(set, transformer);\n+    }\n+    \n }", "timestamp": 1052659756, "metainfo": ""}