{"sha": "00291db47614bd0926f936a2b4eac617f505e19f", "log": "[COLLECTIONS-508] Clarify javadoc of CollectionBag.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/bag/CollectionBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/CollectionBag.java\n \n /**\n  * Decorates another {@link Bag} to comply with the Collection contract.\n+ * <p>\n+ * By decorating an existing {@link Bag} instance with a {@link CollectionBag},\n+ * it can be safely passed on to methods that require Collection types that\n+ * are fully compliant with the Collection contract.\n+ * <p>\n+ * The method javadoc highlights the differences compared to the original Bag interface.\n  *\n+ * @see Bag\n+ * @param <E> the type held in the bag\n  * @since 4.0\n  * @version $Id$\n  */\n     // Collection interface\n     //-----------------------------------------------------------------------\n \n+    /**\n+     * <i>(Change)</i>\n+     * Returns <code>true</code> if the bag contains all elements in\n+     * the given collection, <b>not</b> respecting cardinality. That is,\n+     * if the given collection <code>coll</code> contains at least one of\n+     * every object contained in this object.\n+     *\n+     * @param coll  the collection to check against\n+     * @return <code>true</code> if the Bag contains at least on of every object in the collection\n+     */\n     @Override\n     public boolean containsAll(final Collection<?> coll) {\n         final Iterator<?> e = coll.iterator();\n         return true;\n     }\n \n+    /**\n+     * <i>(Change)</i>\n+     * Adds one copy of the specified object to the Bag.\n+     * <p>\n+     * Since this method always increases the size of the bag, it\n+     * will always return <code>true</code>.\n+     *\n+     * @param object  the object to add\n+     * @return <code>true</code>, always\n+     */\n     @Override\n     public boolean add(final E object) {\n         return add(object, 1);\n         return changed;\n     }\n \n+    /**\n+     * <i>(Change)</i>\n+     * Removes the first occurrence of the given object from the bag.\n+     * <p>\n+     * This will also remove the object from the {@link #uniqueSet()} if the\n+     * bag contains no occurrence anymore of the object after this operation.\n+     *\n+     * @param object  the object to remove\n+     * @return <code>true</code> if this call changed the collection\n+     */\n     @Override\n     public boolean remove(final Object object) {\n         return remove(object, 1);\n     }\n \n+    /**\n+     * <i>(Change)</i>\n+     * Remove all elements represented in the given collection,\n+     * <b>not</b> respecting cardinality. That is, remove <i>all</i>\n+     * occurrences of every object contained in the given collection.\n+     *\n+     * @param coll  the collection to remove\n+     * @return <code>true</code> if this call changed the collection\n+     */\n     @Override\n     public boolean removeAll(final Collection<?> coll) {\n         if (coll != null) {\n         }\n     }\n \n+    /**\n+     * <i>(Change)</i>\n+     * Remove any members of the bag that are not in the given\n+     * collection, <i>not</i> respecting cardinality. That is, any object\n+     * in the given collection <code>coll</code> will be retained in the\n+     * bag with the same number of copies prior to this operation. All\n+     * other objects will be completely removed from this bag.\n+     *\n+     * @param coll  the collection to retain\n+     * @return <code>true</code> if this call changed the collection\n+     */\n     @Override\n     public boolean retainAll(final Collection<?> coll) {\n         if (coll != null) {\n     // Bag interface\n     //-----------------------------------------------------------------------\n \n+    /**\n+     * <i>(Change)</i>\n+     * Adds <code>count</code> copies of the specified object to the Bag.\n+     * <p>\n+     * Since this method always increases the size of the bag, it\n+     * will always return <code>true</code>.\n+     *\n+     * @param object  the object to add\n+     * @param count  the number of copies to add\n+     * @return <code>true</code>, always\n+     */\n     @Override\n     public boolean add(final E object, final int count) {\n         decorated().add(object, count);", "timestamp": 1394304429, "metainfo": ""}