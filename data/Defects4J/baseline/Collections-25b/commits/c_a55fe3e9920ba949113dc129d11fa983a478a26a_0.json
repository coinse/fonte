{"sha": "a55fe3e9920ba949113dc129d11fa983a478a26a", "log": "add base testSerializeDeserializeThenCompare test, modify concrete TestCases so that they pass this test (or when necessary, skip them) this tests the Comparator.equals contract, among others   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestBeanMap.java\n+++ b/src/test/org/apache/commons/collections/TestBeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBeanMap.java,v 1.7 2002/08/10 02:05:20 pjack Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/08/10 02:05:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBeanMap.java,v 1.8 2003/01/07 23:44:19 rwaldhoff Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2003/01/07 23:44:19 $\n  *\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  */\n package org.apache.commons.collections;\n \n+import java.io.Serializable;\n import java.util.Map;\n \n-import junit.framework.*;\n+import junit.framework.Test;\n \n /**\n  * Test cases for BeanMap\n */\n \n \n-    public static class BeanWithProperties {\n+    public static class BeanWithProperties implements Serializable {\n         private int someInt;\n         private long someLong;\n         private double someDouble;\n          \"TestBeanMap.bulkTestMapValues.testCanonicalEmptyCollectionExists\",\n          \"TestBeanMap.bulkTestMapValues.testCanonicalFullCollectionExists\",\n          \"TestBeanMap.bulkTestMapEntrySet.testSimpleSerialization\",\n-         \"TestBeanMap.bulkTestMapKeySet.testSimpleSerialization\"\n+         \"TestBeanMap.bulkTestMapKeySet.testSimpleSerialization\",\n+         \"TestBeanMap.bulkTestMapEntrySet.testSerializeDeserializeThenCompare\",\n+         \"TestBeanMap.bulkTestMapKeySet.testSerializeDeserializeThenCompare\"\n         };\n     }\n \n--- a/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.6 2002/06/21 03:32:06 mas Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/06/21 03:32:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.7 2003/01/07 23:44:19 rwaldhoff Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2003/01/07 23:44:19 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author Rodney Waldhoff\n- * @version $Id: TestCursorableLinkedList.java,v 1.6 2002/06/21 03:32:06 mas Exp $\n+ * @version $Id: TestCursorableLinkedList.java,v 1.7 2003/01/07 23:44:19 rwaldhoff Exp $\n  */\n public class TestCursorableLinkedList extends TestList {\n     public TestCursorableLinkedList(String testName) {\n           \".testFullListCompatibility\", \n           \".testSimpleSerialization\",\n           \".testCanonicalEmptyCollectionExists\",\n-          \".testCanonicalFullCollectionExists\"\n+          \".testCanonicalFullCollectionExists\",\n+          \".testSerializeDeserializeThenCompare\"\n         };\n         for (int i = 0; i < ignored.length; i++) {\n             list.add(prefix + bulk + ignored[i]);\n--- a/src/test/org/apache/commons/collections/TestObject.java\n+++ b/src/test/org/apache/commons/collections/TestObject.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.16 2003/01/07 15:18:15 rwaldhoff Exp $\n- * $Revision: 1.16 $\n- * $Date: 2003/01/07 15:18:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.17 2003/01/07 23:44:19 rwaldhoff Exp $\n+ * $Revision: 1.17 $\n+ * $Date: 2003/01/07 23:44:19 $\n  *\n  * ====================================================================\n  *\n  * test case (method) your {@link Object} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Id: TestObject.java,v 1.16 2003/01/07 15:18:15 rwaldhoff Exp $\n+ * @version $Revision: 1.17 $ $Date: 2003/01/07 23:44:19 $\n  */\n public abstract class TestObject extends BulkTest {\n     public TestObject(String testName) {\n         if(obj1.equals(obj2)) {\n             assertEquals(\"[2] When two objects are equal, their hashCodes should be also.\",obj1.hashCode(),obj2.hashCode());\n             assertTrue(\"When obj1.equals(obj2) is true, then obj2.equals(obj1) should also be true\", obj2.equals(obj1));\n+        }\n+    }\n+\n+    public void testSerializeDeserializeThenCompare() throws Exception {\n+        Object obj = makeObject();\n+        if(obj instanceof Serializable) {\n+            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+            ObjectOutputStream out = new ObjectOutputStream(buffer);\n+            out.writeObject(obj);\n+            out.close();\n+            \n+            ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n+            Object dest = in.readObject();\n+            in.close();\n+            assertEquals(\"obj != deserialize(serialize(obj))\",obj,dest);\n         }\n     }\n \n--- a/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n+/* \n+ * $Id: TestComparatorChain.java,v 1.4 2003/01/07 23:44:20 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n package org.apache.commons.collections.comparators;\n \n import java.io.Serializable;\n         return new TestSuite(TestComparatorChain.class);\n     }\n \n-    /**\n-     * \n-     * @return \n-     */\n     public Comparator makeComparator() {\n         ComparatorChain chain = new ComparatorChain(new ColumnComparator(0));\n         chain.addComparator(new ColumnComparator(1),true); // reverse the second column\n \n             return 0;\n         }\n+        \n+        public int hashCode() {\n+            return colIndex;\n+        }\n+        \n+        public boolean equals(Object that) {\n+            if(that instanceof ColumnComparator) {\n+                return colIndex == ((ColumnComparator)that).colIndex;\n+            } else {\n+                return false;\n+            }\n+        }\n+        \n+        private static final long serialVersionUID = -2284880866328872105L;\n     }\n }\n--- a/src/test/org/apache/commons/collections/comparators/TestNullComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestNullComparator.java\n  *  Test the NullComparator \n  *\n  *  @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n- *  @version $Id: TestNullComparator.java,v 1.3 2002/10/12 22:36:23 scolebourne Exp $\n+ *  @version $Id: TestNullComparator.java,v 1.4 2003/01/07 23:44:20 rwaldhoff Exp $\n  **/\n public abstract class TestNullComparator extends TestComparator {\n \n     }\n \n     public static Test suite() {\n-\tTestSuite suite = new TestSuite(TestNullComparator.class.getName());\n-\tsuite.addTest(new TestSuite(TestNullComparator1.class));\n-\tsuite.addTest(new TestSuite(TestNullComparator2.class));\n-\treturn suite;\n+        TestSuite suite = new TestSuite(TestNullComparator.class.getName());\n+        suite.addTest(new TestSuite(TestNullComparator1.class));\n+        suite.addTest(new TestSuite(TestNullComparator2.class));\n+        return suite;\n     }\n \n     /**\n \t}\n \t\n \tpublic List getComparableObjectsOrdered() {\n-\t    List list = new LinkedList();\n+        List list = new LinkedList();\n \t    list.add(new Integer(1));\n \t    list.add(new Integer(2));\n \t    list.add(new Integer(3));\n      *  Test the NullComparator with nulls low using the comparable comparator\n      **/\n     public static class TestNullComparator2 extends TestNullComparator {\n-\n-\tpublic TestNullComparator2(String testName) {\n-\t    super(testName);\n-\t}\n-\n-\tpublic Comparator makeComparator() {\n-\t    return new NullComparator(false);\n-\t}\n-\t\n-\tpublic List getComparableObjectsOrdered() {\n-\t    List list = new LinkedList();\n-\t    list.add(null);\n-\t    list.add(new Integer(1));\n-\t    list.add(new Integer(2));\n-\t    list.add(new Integer(3));\n-\t    list.add(new Integer(4));\n-\t    list.add(new Integer(5));\n-\t    return list;\n-\t}\n-\n-\tpublic String getCanonicalComparatorName(Object object) {\n-\t    return super.getCanonicalComparatorName(object) + \"2\";\n-\t}\n+        \n+        public TestNullComparator2(String testName) {\n+            super(testName);\n+        }\n+        \n+        public Comparator makeComparator() {\n+            return new NullComparator(false);\n+        }\n+        \n+        public List getComparableObjectsOrdered() {\n+            List list = new LinkedList();\n+            list.add(null);\n+            list.add(new Integer(1));\n+            list.add(new Integer(2));\n+            list.add(new Integer(3));\n+            list.add(new Integer(4));\n+            list.add(new Integer(5));\n+            return list;\n+        }\n+        \n+        public String getCanonicalComparatorName(Object object) {\n+            return super.getCanonicalComparatorName(object) + \"2\";\n+        }\n     }\n }\n--- a/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestReverseComparator.java\n+/* \n+ * $Id: TestReverseComparator.java,v 1.4 2003/01/07 23:44:20 rwaldhoff Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n package org.apache.commons.collections.comparators;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.LinkedList;\n     /**\n      * For the purposes of this test, return a \n      * ReverseComparator that wraps the java.util.Collections.reverseOrder()\n-     * Comparator.  The resulting comparator shouls\n+     * Comparator.  The resulting comparator should\n      * sort according to natural Order.  (Note: we wrap\n      * a Comparator taken from the JDK so that we can\n      * save a \"canonical\" form in CVS.\n         return list;\n     }\n \n+    /** \n+     * Override this inherited test since Collections.reverseOrder\n+     * doesn't adhere to the \"soft\" Comparator contract, and we've\n+     * already \"cannonized\" the comparator returned by makeComparator.\n+     */\n+    public void testSerializeDeserializeThenCompare() throws Exception {\n+        Comparator comp = new ReverseComparator(new ComparableComparator());\n+\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(buffer);\n+        out.writeObject(comp);\n+        out.close();\n+            \n+        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n+        Object dest = in.readObject();\n+        in.close();\n+        assertEquals(\"obj != deserialize(serialize(obj))\",comp,dest);\n+    }\n+\n }", "timestamp": 1041983060, "metainfo": ""}