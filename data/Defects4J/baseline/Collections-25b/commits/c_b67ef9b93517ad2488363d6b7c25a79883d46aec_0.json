{"sha": "b67ef9b93517ad2488363d6b7c25a79883d46aec", "log": "Add IdentityMap implementation for reference comparisons   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/IdentityMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/IdentityMap.java,v 1.1 2003/12/02 21:57:08 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Map;\n+\n+/**\n+ * A <code>Map</code> implementation that matches keys and values based\n+ * on <code>==</code> not <code>equals()</code>.\n+ * <p>\n+ * This map will violate the detail of various Map and map view contracts.\n+ * As a general rule, don't compare this map to other maps.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 21:57:08 $\n+ *\n+ * @author java util HashMap\n+ * @author Stephen Colebourne\n+ */\n+public class IdentityMap extends HashedMap {\n+    \n+    /** Serialisation version */\n+\n+    /**\n+     * Constructs a new empty map with default size and load factor.\n+     */\n+    public IdentityMap() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new, empty map with the specified initial capacity. \n+     *\n+     * @param initialCapacity  the initial capacity\n+     * @throws IllegalArgumentException if the initial capacity is less than one\n+     */\n+    public IdentityMap(int initialCapacity) {\n+        super(initialCapacity);\n+    }\n+\n+    /**\n+     * Constructs a new, empty map with the specified initial capacity and\n+     * load factor. \n+     *\n+     * @param initialCapacity  the initial capacity\n+     * @param loadFactor  the load factor\n+     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the load factor is less than one\n+     */\n+    public IdentityMap(int initialCapacity, float loadFactor) {\n+        super(initialCapacity, loadFactor);\n+    }\n+\n+    /**\n+     * Constructor copying elements from another map.\n+     *\n+     * @param map  the map to copy\n+     * @throws NullPointerException if the map is null\n+     */\n+    public IdentityMap(Map map) {\n+        super(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the hash code for the key specified.\n+     * This implementation uses the identity hash code.\n+     * \n+     * @param key  the key to get a hash code for\n+     * @return the hash code\n+     */\n+    protected int hash(Object key) {\n+        return System.identityHashCode(key);\n+    }\n+    \n+    /**\n+     * Compares two keys for equals.\n+     * This implementation uses <code>==</code>.\n+     * \n+     * @param key1  the first key to compare\n+     * @param key2  the second key to compare\n+     * @return true if equal by identity\n+     */\n+    protected boolean isEqualKey(Object key1, Object key2) {\n+        return (key1 == key2);\n+    }\n+    \n+    /**\n+     * Compares two values for equals.\n+     * This implementation uses <code>==</code>.\n+     * \n+     * @param value1  the first value to compare\n+     * @param value2  the second value to compare\n+     * @return true if equal by identity\n+     */\n+    protected boolean isEqualValue(Object value1, Object value2) {\n+        return (value1 == value2);\n+    }\n+    \n+    /**\n+     * Creates an entry to store the data.\n+     * This implementation creates an IdentityEntry instance.\n+     * \n+     * @param next  the next entry in sequence\n+     * @param hashCode  the hash code to use\n+     * @param key  the key to store\n+     * @param value  the value to store\n+     * @return the newly created entry\n+     */\n+    protected HashEntry createEntry(HashEntry next, int hashCode, Object key, Object value) {\n+        return new IdentityEntry(next, hashCode, key, value);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * HashEntry\n+     */\n+    protected static class IdentityEntry extends HashEntry {\n+        \n+        protected IdentityEntry(HashEntry next, int hashCode, Object key, Object value) {\n+            super(next, hashCode, key, value);\n+        }\n+        \n+        public boolean equals(Object obj) {\n+            if (obj == this) {\n+                return true;\n+            }\n+            if (obj instanceof Map.Entry == false) {\n+                return false;\n+            }\n+            Map.Entry other = (Map.Entry) obj;\n+            return\n+                (getKey() == other.getKey()) &&\n+                (getValue() == other.getValue());\n+        }\n+        \n+        public int hashCode() {\n+            return System.identityHashCode(getKey()) ^\n+                   System.identityHashCode(getValue());\n+        }\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/collections/map/TestAll.java\n+++ b/src/test/org/apache/commons/collections/map/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestAll.java,v 1.5 2003/12/02 00:44:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestAll.java,v 1.6 2003/12/02 21:57:08 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/12/02 00:44:13 $\n+ * @version $Revision: 1.6 $ $Date: 2003/12/02 21:57:08 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestFixedSizeMap.suite());\n         suite.addTest(TestFixedSizeSortedMap.suite());\n         suite.addTest(TestFlat3Map.suite());\n-//        suite.addTest(TestHashedMap.suite());\n-//        suite.addTest(TestIdentityMap.suite());\n+        suite.addTest(TestHashedMap.suite());\n+        suite.addTest(TestIdentityMap.suite());\n         suite.addTest(TestLazyMap.suite());\n         suite.addTest(TestLazySortedMap.suite());\n         suite.addTest(TestListOrderedMap.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestIdentityMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestIdentityMap.java,v 1.1 2003/12/02 21:57:08 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+import org.apache.commons.collections.AMap;\n+import org.apache.commons.collections.AbstractTestObject;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 21:57:08 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestIdentityMap extends AbstractTestObject {\n+    \n+    private static final Integer I1A = new Integer(1);\n+    private static final Integer I1B = new Integer(1);\n+    private static final Integer I2A = new Integer(2);\n+    private static final Integer I2B = new Integer(2);\n+\n+    public TestIdentityMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestIdentityMap.class);\n+//        return BulkTest.makeSuite(TestIdentityMap.class);  // causes race condition!\n+    }\n+    \n+    public Object makeObject() {\n+        return new IdentityMap();\n+    }\n+    \n+    public String getCompatibilityVersion() {\n+        return \"3\";\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testBasics() {\n+        AMap map = new IdentityMap();\n+        assertEquals(0, map.size());\n+        \n+        map.put(I1A, I2A);\n+        assertEquals(1, map.size());\n+        assertSame(I2A, map.get(I1A));\n+        assertSame(null, map.get(I1B));\n+        assertEquals(true, map.containsKey(I1A));\n+        assertEquals(false, map.containsKey(I1B));\n+        assertEquals(true, map.containsValue(I2A));\n+        assertEquals(false, map.containsValue(I2B));\n+        \n+        map.put(I1A, I2B);\n+        assertEquals(1, map.size());\n+        assertSame(I2B, map.get(I1A));\n+        assertSame(null, map.get(I1B));\n+        assertEquals(true, map.containsKey(I1A));\n+        assertEquals(false, map.containsKey(I1B));\n+        assertEquals(false, map.containsValue(I2A));\n+        assertEquals(true, map.containsValue(I2B));\n+        \n+        map.put(I1B, I2B);\n+        assertEquals(2, map.size());\n+        assertSame(I2B, map.get(I1A));\n+        assertSame(I2B, map.get(I1B));\n+        assertEquals(true, map.containsKey(I1A));\n+        assertEquals(true, map.containsKey(I1B));\n+        assertEquals(false, map.containsValue(I2A));\n+        assertEquals(true, map.containsValue(I2B));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testHashEntry() {\n+        AMap map = new IdentityMap();\n+        \n+        map.put(I1A, I2A);\n+        map.put(I1B, I2A);\n+        \n+        Map.Entry entry1 = (Map.Entry) map.entrySet().iterator().next();\n+        Iterator it = map.entrySet().iterator();\n+        Map.Entry entry2 = (Map.Entry) it.next();\n+        Map.Entry entry3 = (Map.Entry) it.next();\n+        \n+        assertEquals(true, entry1.equals(entry2));\n+        assertEquals(true, entry2.equals(entry1));\n+        assertEquals(false, entry1.equals(entry3));\n+    }\n+    \n+}", "timestamp": 1070402228, "metainfo": ""}