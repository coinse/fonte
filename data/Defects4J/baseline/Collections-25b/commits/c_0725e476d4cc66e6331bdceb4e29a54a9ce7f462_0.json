{"sha": "0725e476d4cc66e6331bdceb4e29a54a9ce7f462", "log": "Applying Benjamin Bentmann's second patch from COLLECTIONS-294, fixing the locale issue in CaseInsensitiveMap by converting each character individually and not using toLowerCase  ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n+++ b/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n /**\n  * A case-insensitive <code>Map</code>.\n  * <p>\n- * As entries are added to the map, keys are converted to all lowercase. A new \n- * key is compared to existing keys by comparing <code>newKey.toString().toLower()</code>\n- * to the lowercase values in the current <code>KeySet.</code>\n+ * Before keys are added to the map or compared to other existing keys, they are converted\n+ * to all lowercase in a locale-independent fashion by using information from the Unicode\n+ * data file.\n  * <p>\n  * Null keys are supported.  \n  * <p>\n      * Overrides convertKey() from {@link AbstractHashedMap} to convert keys to \n      * lower case.\n      * <p>\n-     * Returns null if key is null.\n+     * Returns {@link AbstractHashedMap#NULL} if key is null.\n      * \n      * @param key  the key convert\n      * @return the converted key\n      */\n     protected Object convertKey(Object key) {\n         if (key != null) {\n-            return key.toString().toLowerCase();\n+            char[] chars = key.toString().toCharArray();\n+            for (int i = chars.length - 1; i >= 0; i--) {\n+                chars[i] = Character.toLowerCase(Character.toUpperCase(chars[i]));\n+            }\n+            return new String(chars);\n         } else {\n             return AbstractHashedMap.NULL;\n         }\n--- a/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java\n package org.apache.commons.collections.map;\n \n import java.util.HashMap;\n+import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n \n         writeExternalFormToDisk((java.io.Serializable) map, \"/home/phil/jakarta-commons/collections/data/test/CaseInsensitiveMap.fullCollection.version3.obj\");\n     }\n      */\n+\n+    // COLLECTIONS-294\n+    public void testLocaleIndependence() {\n+        Locale orig = Locale.getDefault();\n+\n+        Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };\n+\n+        String[][] data = { \n+            { \"i\", \"I\" },\n+            { \"\\u03C2\", \"\\u03C3\" },\n+            { \"\\u03A3\", \"\\u03C2\" },\n+            { \"\\u03A3\", \"\\u03C3\" },\n+        };\n+\n+        try {\n+            for (int i = 0; i < locales.length; i++) {\n+                Locale.setDefault(locales[i]);\n+                for (int j = 0; j < data.length; j++) {\n+                    assertTrue(\"Test data corrupt: \" + j, data[j][0].equalsIgnoreCase(data[j][1]));\n+                    CaseInsensitiveMap map = new CaseInsensitiveMap();\n+                    map.put(data[j][0], \"value\");\n+                    assertEquals(Locale.getDefault() + \": \" + j, \"value\", map.get(data[j][1]));\n+                }\n+            }\n+        } finally {\n+            Locale.setDefault(orig);\n+        }\n+    }\n+\n }", "timestamp": 1225771117, "metainfo": ""}