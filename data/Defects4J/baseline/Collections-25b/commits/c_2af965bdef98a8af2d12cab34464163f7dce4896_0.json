{"sha": "2af965bdef98a8af2d12cab34464163f7dce4896", "log": "Convert inner classes to protected scope to package scope where designed for extension   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractHashedMap.java,v 1.1 2003/12/07 23:59:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractHashedMap.java,v 1.2 2003/12/25 01:09:01 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * need for unusual subclasses is here.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/07 23:59:13 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/25 01:09:01 $\n  *\n  * @author java util HashMap\n  * @author Stephen Colebourne\n     }\n \n     /**\n-     * MapIterator\n-     */\n-    static class HashMapIterator extends HashIterator implements MapIterator {\n+     * MapIterator implementation.\n+     */\n+    protected static class HashMapIterator extends HashIterator implements MapIterator {\n         \n         HashMapIterator(AbstractHashedMap map) {\n             super(map);\n     }\n \n     /**\n-     * EntrySet\n-     */\n-    static class EntrySet extends AbstractSet {\n+     * EntrySet implementation.\n+     */\n+    protected static class EntrySet extends AbstractSet {\n         private final AbstractHashedMap map;\n         \n         EntrySet(AbstractHashedMap map) {\n     }\n \n     /**\n-     * EntrySetIterator and MapEntry\n-     */\n-    static class EntrySetIterator extends HashIterator {\n+     * EntrySet iterator.\n+     */\n+    protected static class EntrySetIterator extends HashIterator {\n         \n         EntrySetIterator(AbstractHashedMap map) {\n             super(map);\n     }\n \n     /**\n-     * KeySet\n-     */\n-    static class KeySet extends AbstractSet {\n+     * KeySet implementation.\n+     */\n+    protected static class KeySet extends AbstractSet {\n         private final AbstractHashedMap map;\n         \n         KeySet(AbstractHashedMap map) {\n     }\n \n     /**\n-     * KeySetIterator\n-     */\n-    static class KeySetIterator extends EntrySetIterator {\n+     * KeySet iterator.\n+     */\n+    protected static class KeySetIterator extends EntrySetIterator {\n         \n         KeySetIterator(AbstractHashedMap map) {\n             super(map);\n     }\n \n     /**\n-     * Values\n-     */\n-    static class Values extends AbstractCollection {\n+     * Values implementation.\n+     */\n+    protected static class Values extends AbstractCollection {\n         private final AbstractHashedMap map;\n         \n         Values(AbstractHashedMap map) {\n     }\n \n     /**\n-     * ValuesIterator\n-     */\n-    static class ValuesIterator extends HashIterator {\n+     * Values iterator.\n+     */\n+    protected static class ValuesIterator extends HashIterator {\n         \n         ValuesIterator(AbstractHashedMap map) {\n             super(map);\n     \n     //-----------------------------------------------------------------------\n     /**\n-     * HashEntry\n+     * HashEntry used to store the data\n      */\n     protected static class HashEntry implements Map.Entry, KeyValue {\n+        /** The next entry in the hash chain */\n         protected HashEntry next;\n+        /** The hash code of the key */\n         protected int hashCode;\n+        /** The key */\n         protected Object key;\n+        /** The value */\n         protected Object value;\n         \n         protected HashEntry(HashEntry next, int hashCode, Object key, Object value) {\n--- a/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n+++ b/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java,v 1.1 2003/12/07 23:59:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java,v 1.2 2003/12/25 01:09:01 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * methods exposed.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/07 23:59:13 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/25 01:09:01 $\n  *\n  * @author java util LinkedHashMap\n  * @author Stephen Colebourne\n     }\n \n     /**\n-     * MapIterator\n-     */\n-    static class LinkMapIterator extends LinkIterator implements OrderedMapIterator {\n+     * MapIterator implementation.\n+     */\n+    protected static class LinkMapIterator extends LinkIterator implements OrderedMapIterator {\n         \n         LinkMapIterator(AbstractLinkedMap map) {\n             super(map);\n     }\n \n     /**\n-     * EntrySetIterator and MapEntry\n-     */\n-    static class EntrySetIterator extends LinkIterator {\n+     * EntrySet iterator.\n+     */\n+    protected static class EntrySetIterator extends LinkIterator {\n         \n         EntrySetIterator(AbstractLinkedMap map) {\n             super(map);\n     }\n \n     /**\n-     * KeySetIterator\n-     */\n-    static class KeySetIterator extends EntrySetIterator {\n+     * KeySet iterator.\n+     */\n+    protected static class KeySetIterator extends EntrySetIterator {\n         \n         KeySetIterator(AbstractLinkedMap map) {\n             super(map);\n     }\n \n     /**\n-     * ValuesIterator\n-     */\n-    static class ValuesIterator extends LinkIterator {\n+     * Values iterator.\n+     */\n+    protected static class ValuesIterator extends LinkIterator {\n         \n         ValuesIterator(AbstractLinkedMap map) {\n             super(map);", "timestamp": 1072314541, "metainfo": ""}