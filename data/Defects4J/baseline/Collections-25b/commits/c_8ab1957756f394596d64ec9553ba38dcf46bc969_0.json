{"sha": "8ab1957756f394596d64ec9553ba38dcf46bc969", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/TestCompositeMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestCompositeMap.java\n  *\n  * @author Brian McCallister\n  */\n-public class TestCompositeMap extends AbstractTestMap {\n+public class TestCompositeMap<K, V> extends AbstractTestIterableMap<K, V> {\n     /** used as a flag in MapMutator tests */\n     private boolean pass = false;\n     \n         junit.textui.TestRunner.main(testCaseName);\n     }\n     \n-    public Map makeEmptyMap() {\n-        CompositeMap map = new CompositeMap();\n-        map.addComposited(new HashMap());\n+    public CompositeMap<K, V> makeObject() {\n+        CompositeMap<K, V> map = new CompositeMap<K, V>();\n+        map.addComposited(new HashMap<K, V>());\n         map.setMutator( new EmptyMapMutator() );\n         return map;\n     }\n     \n-    private Map buildOne() {\n-        HashMap map = new HashMap();\n-        map.put(\"1\", \"one\");\n-        map.put(\"2\", \"two\");\n+    @SuppressWarnings(\"unchecked\")\n+    private Map<K, V> buildOne() {\n+        HashMap<K, V> map = new HashMap<K, V>();\n+        map.put((K) \"1\", (V) \"one\");\n+        map.put((K) \"2\", (V) \"two\");\n         return map;\n     }\n     \n-    public Map buildTwo() {\n-        HashMap map = new HashMap();\n-        map.put(\"3\", \"three\");\n-        map.put(\"4\", \"four\");\n+    @SuppressWarnings(\"unchecked\")\n+    public Map<K, V> buildTwo() {\n+        HashMap<K, V> map = new HashMap<K, V>();\n+        map.put((K) \"3\", (V) \"three\");\n+        map.put((K) \"4\", (V) \"four\");\n         return map;\n     }\n     \n     public void testGet() {\n-        CompositeMap map = new CompositeMap(buildOne(), buildTwo());\n+        CompositeMap<K, V> map = new CompositeMap<K, V>(buildOne(), buildTwo());\n         Assert.assertEquals(\"one\", map.get(\"1\"));\n         Assert.assertEquals(\"four\", map.get(\"4\"));\n     }\n     \n+    @SuppressWarnings(\"unchecked\")\n     public void testAddComposited() {\n-        CompositeMap map = new CompositeMap(buildOne(), buildTwo());\n-        HashMap three = new HashMap();\n-        three.put(\"5\", \"five\");\n+        CompositeMap<K, V> map = new CompositeMap<K, V>(buildOne(), buildTwo());\n+        HashMap<K, V> three = new HashMap<K, V>();\n+        three.put((K) \"5\", (V) \"five\");\n         map.addComposited(three);\n         assertTrue(map.containsKey(\"5\"));\n         try {\n         }\n     }\n     \n+    @SuppressWarnings(\"unchecked\")\n     public void testRemoveComposited() {\n-        CompositeMap map = new CompositeMap(buildOne(), buildTwo());\n-        HashMap three = new HashMap();\n-        three.put(\"5\", \"five\");\n+        CompositeMap<K, V> map = new CompositeMap<K, V>(buildOne(), buildTwo());\n+        HashMap<K, V> three = new HashMap<K, V>();\n+        three.put((K) \"5\", (V) \"five\");\n         map.addComposited(three);\n         assertTrue(map.containsKey(\"5\"));\n         \n         \n     }\n     \n+    @SuppressWarnings(\"unchecked\")\n     public void testRemoveFromUnderlying() {\n-        CompositeMap map = new CompositeMap(buildOne(), buildTwo());\n-        HashMap three = new HashMap();\n-        three.put(\"5\", \"five\");\n+        CompositeMap<K, V> map = new CompositeMap<K, V>(buildOne(), buildTwo());\n+        HashMap<K, V> three = new HashMap<K, V>();\n+        three.put((K) \"5\", (V) \"five\");\n         map.addComposited(three);\n         assertTrue(map.containsKey(\"5\"));\n         \n         assertFalse(map.containsKey(\"5\"));\n     }\n     \n+    @SuppressWarnings(\"unchecked\")\n     public void testRemoveFromComposited() {\n-        CompositeMap map = new CompositeMap(buildOne(), buildTwo());\n-        HashMap three = new HashMap();\n-        three.put(\"5\", \"five\");\n+        CompositeMap<K, V> map = new CompositeMap<K, V>(buildOne(), buildTwo());\n+        HashMap<K, V> three = new HashMap<K, V>();\n+        three.put((K) \"5\", (V) \"five\");\n         map.addComposited(three);\n         assertTrue(map.containsKey(\"5\"));\n         \n     }\n     \n     public void testResolveCollision() {\n-        CompositeMap map = new CompositeMap(buildOne(), buildTwo(), \n-            new CompositeMap.MapMutator() {\n-            public void resolveCollision(CompositeMap composite,\n-            Map existing,\n-            Map added,\n-            Collection intersect) {\n+        CompositeMap<K, V> map = new CompositeMap<K, V>(buildOne(), buildTwo(), \n+            new CompositeMap.MapMutator<K, V>() {\n+            public void resolveCollision(CompositeMap<K, V> composite,\n+            Map<K, V> existing,\n+            Map<K, V> added,\n+            Collection<K> intersect) {\n                 pass = true;\n             }\n             \n-            public Object put(CompositeMap map, Map[] composited, Object key, \n-                Object value) {\n-                throw new UnsupportedOperationException();\n-            }\n-            \n-            public void putAll(CompositeMap map, Map[] composited, Map t) {\n+            public V put(CompositeMap<K, V> map, Map<K, V>[] composited, K key, \n+                V value) {\n+                throw new UnsupportedOperationException();\n+            }\n+            \n+            public void putAll(CompositeMap<K, V> map, Map<K, V>[] composited, Map<? extends K, ? extends V> t) {\n                 throw new UnsupportedOperationException();\n             }\n         });\n         assertTrue(pass);\n     }\n     \n+    @SuppressWarnings(\"unchecked\")\n     public void testPut() {\n-        CompositeMap map = new CompositeMap(buildOne(), buildTwo(), \n-            new CompositeMap.MapMutator() {\n-            public void resolveCollision(CompositeMap composite,\n-            Map existing,\n-            Map added,\n-            Collection intersect) {\n-                throw new UnsupportedOperationException();\n-            }\n-            \n-            public Object put(CompositeMap map, Map[] composited, Object key, \n-                Object value) {\n+        CompositeMap<K, V> map = new CompositeMap<K, V>(buildOne(), buildTwo(), \n+            new CompositeMap.MapMutator<K, V>() {\n+            public void resolveCollision(CompositeMap<K, V> composite,\n+            Map<K, V> existing,\n+            Map<K, V> added,\n+            Collection<K> intersect) {\n+                throw new UnsupportedOperationException();\n+            }\n+            \n+            public V put(CompositeMap<K, V> map, Map<K, V>[] composited, K key, \n+                V value) {\n                 pass = true;\n-                return \"foo\";\n-            }\n-            \n-            public void putAll(CompositeMap map, Map[] composited, Map t) {\n+                return (V) \"foo\";\n+            }\n+            \n+            public void putAll(CompositeMap<K, V> map, Map<K, V>[] composited, Map<? extends K, ? extends V> t) {\n                 throw new UnsupportedOperationException();\n             }\n         });\n         \n-        map.put(\"willy\", \"wonka\");\n+        map.put((K) \"willy\", (V) \"wonka\");\n         assertTrue(pass);\n     }\n     \n     public void testPutAll() {\n-        CompositeMap map = new CompositeMap(buildOne(), buildTwo(), \n-            new CompositeMap.MapMutator() {\n-            public void resolveCollision(CompositeMap composite,\n-            Map existing,\n-            Map added,\n-            Collection intersect) {\n-                throw new UnsupportedOperationException();\n-            }\n-            \n-            public Object put(CompositeMap map, Map[] composited, Object key,\n-                Object value) {\n-                throw new UnsupportedOperationException();\n-            }\n-            \n-            public void putAll(CompositeMap map, Map[] composited, Map t) {\n+        CompositeMap<K, V> map = new CompositeMap<K, V>(buildOne(), buildTwo(), \n+            new CompositeMap.MapMutator<K, V>() {\n+            public void resolveCollision(CompositeMap<K, V> composite,\n+            Map<K, V> existing,\n+            Map<K, V> added,\n+            Collection<K> intersect) {\n+                throw new UnsupportedOperationException();\n+            }\n+            \n+            public V put(CompositeMap<K, V> map, Map<K, V>[] composited, K key, \n+                V value) {\n+                throw new UnsupportedOperationException();\n+            }\n+            \n+            public void putAll(CompositeMap<K, V> map, Map<K, V>[] composited, Map<? extends K, ? extends V> t) {\n                 pass = true;\n             }\n         });", "timestamp": 1252994244, "metainfo": ""}