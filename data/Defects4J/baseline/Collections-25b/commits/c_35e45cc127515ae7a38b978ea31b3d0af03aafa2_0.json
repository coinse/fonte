{"sha": "35e45cc127515ae7a38b978ea31b3d0af03aafa2", "log": "Privatise fields  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java\n     /**\n      * The reference type for keys.\n      */\n-    protected ReferenceStrength keyType;\n+    private ReferenceStrength keyType;\n \n     /**\n      * The reference type for values.\n      */\n-    protected ReferenceStrength valueType;\n+    private ReferenceStrength valueType;\n \n     /**\n      * Should the value be automatically purged when the associated key has been collected?\n      */\n-    protected boolean purgeValues;\n+    private boolean purgeValues;\n \n     /**\n      * ReferenceQueue used to eliminate stale mappings.\n      */\n     protected static class ReferenceEntry<K, V> extends HashEntry<K, V> {\n         /** The parent map */\n-        protected final AbstractReferenceMap<K, V> parent;\n+        private final AbstractReferenceMap<K, V> parent;\n \n         /**\n          * Creates a new entry object for the ReferenceMap.\n         // do not call super.doReadObject() as code there doesn't work for reference map\n     }\n \n+    /**\n+     * Provided protected read-only access to the key type.\n+     * @param type the type to check against.\n+     * @return true if keyType has the specified type\n+     */\n+    protected boolean isKeyType(ReferenceStrength type) {\n+        return this.keyType == type;\n+    }\n }\n--- a/src/main/java/org/apache/commons/collections4/map/ReferenceIdentityMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/ReferenceIdentityMap.java\n      */\n     @Override\n     protected boolean isEqualKey(final Object key1, Object key2) {\n-        key2 = keyType == ReferenceStrength.HARD ? key2 : ((Reference<?>) key2).get();\n+        key2 = isKeyType(ReferenceStrength.HARD) ? key2 : ((Reference<?>) key2).get();\n         return key1 == key2;\n     }\n ", "timestamp": 1367327397, "metainfo": ""}