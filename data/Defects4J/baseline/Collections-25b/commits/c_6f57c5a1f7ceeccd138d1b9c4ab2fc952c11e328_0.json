{"sha": "6f57c5a1f7ceeccd138d1b9c4ab2fc952c11e328", "log": "Improve reference map testing   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestReferenceMap.java\n+++ b/src/test/org/apache/commons/collections/TestReferenceMap.java\n package org.apache.commons.collections;\n \n import java.lang.ref.WeakReference;\n+import java.util.Iterator;\n import java.util.Map;\n \n import junit.framework.Test;\n /**\n  * Tests for ReferenceMap. \n  * \n- * @version $Revision: 1.17 $ $Date: 2004/02/18 01:20:35 $\n+ * @version $Revision: 1.18 $ $Date: 2004/04/30 22:53:16 $\n  *\n  * @author Paul Jack\n  */\n         return false;\n     }\n \n-\n-/*\n-   // Unfortunately, these tests all rely on System.gc(), which is\n-   // not reliable across platforms.  Not sure how to code the tests\n-   // without using System.gc() though...\n-   // They all passed on my platform though. :)\n-\n+    public String getCompatibilityVersion() {\n+        return \"2.1\";\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNullHandling() {\n+        resetFull();\n+        assertEquals(null, map.get(null));\n+        assertEquals(false, map.containsKey(null));\n+        assertEquals(false, map.containsValue(null));\n+        assertEquals(null, map.remove(null));\n+        assertEquals(false, map.entrySet().contains(null));\n+        assertEquals(false, map.keySet().contains(null));\n+        assertEquals(false, map.values().contains(null));\n+        try {\n+            map.put(null, null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            map.put(new Object(), null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            map.put(null, new Object());\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testPurge() {\n         ReferenceMap map = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK);\n         Object[] hard = new Object[10];\n             hard[i] = new Object();\n             map.put(hard[i], new Object());\n         }\n-        System.gc();\n+        gc();\n         assertTrue(\"map should be empty after purge of weak values\", map.isEmpty());\n \n         for (int i = 0; i < hard.length; i++) {\n             map.put(new Object(), hard[i]);\n         }\n-        System.gc();\n+        gc();\n         assertTrue(\"map should be empty after purge of weak keys\", map.isEmpty());\n \n         for (int i = 0; i < hard.length; i++) {\n             map.put(hard[i], new Object());\n         }\n \n-        System.gc();\n+        gc();\n         assertTrue(\"map should be empty after purge of weak keys and values\", map.isEmpty());\n     }\n \n             map.put(new Integer(i), new Integer(i));\n         }\n \n-        System.gc();\n+        gc();\n         for (int i = 0; i < 10; i++) {\n             Integer I = new Integer(i);\n             assertTrue(\"map.containsKey should return false for GC'd element\", !map.containsKey(I));\n             map.put(hard[i], hard[i]);\n         }\n \n-        System.gc();\n+        gc();\n         Iterator iterator = map.entrySet().iterator();\n         while (iterator.hasNext()) {\n             Map.Entry entry = (Map.Entry)iterator.next();\n         }\n \n     }\n-*/\n-\n-\n-/*\n-    // Uncomment to create test files in /data/test\n-    public void testCreateTestFiles() throws Exception {\n-        ReferenceMap m = (ReferenceMap)makeEmptyMap();\n-        writeExternalFormToDisk(m, getCanonicalEmptyCollectionName(m));\n-        m = (ReferenceMap)makeFullMap();\n-        writeExternalFormToDisk(m, getCanonicalFullCollectionName(m));\n-    }\n-*/\n-\n-\n-    public String getCompatibilityVersion() {\n-        return \"2.1\";\n-    }\n+\n \n     /** Tests whether purge values setting works */\n     public void testPurgeValues() throws Exception {\n             }\n         }\n     }\n+    \n+    private static void gc() {\n+        try {\n+            // trigger GC\n+            byte[][] tooLarge = new byte[1000000000][1000000000];\n+            fail(\"you have too much RAM\");\n+        } catch (OutOfMemoryError ex) {\n+            System.gc(); // ignore\n+        }\n+    }\n }\n--- a/src/test/org/apache/commons/collections/map/TestReferenceIdentityMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestReferenceIdentityMap.java\n \n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.IterableMap;\n+import org.apache.commons.collections.MapIterator;\n \n /**\n  * Tests for ReferenceIdentityMap. \n  * \n- * @version $Revision: 1.1 $\n+ * @version $Revision: 1.2 $\n  *\n  * @author Paul Jack\n  * @author Stephen Colebourne\n \n     public boolean isAllowNullValue() {\n         return false;\n+    }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n     }\n \n     //-----------------------------------------------------------------------\n     \n     \n     //-----------------------------------------------------------------------\n-   // Unfortunately, these tests all rely on System.gc(), which is\n-   // not reliable across platforms.  Not sure how to code the tests\n-   // without using System.gc() though...\n-   // They all passed on my platform though. :)\n-/*\n+    public void testNullHandling() {\n+        resetFull();\n+        assertEquals(null, map.get(null));\n+        assertEquals(false, map.containsKey(null));\n+        assertEquals(false, map.containsValue(null));\n+        assertEquals(null, map.remove(null));\n+        assertEquals(false, map.entrySet().contains(null));\n+        assertEquals(false, map.keySet().contains(null));\n+        assertEquals(false, map.values().contains(null));\n+        try {\n+            map.put(null, null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            map.put(new Object(), null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            map.put(null, new Object());\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testPurge() {\n         ReferenceIdentityMap map = new ReferenceIdentityMap(ReferenceIdentityMap.WEAK, ReferenceIdentityMap.WEAK);\n         Object[] hard = new Object[10];\n             hard[i] = new Object();\n             map.put(hard[i], new Object());\n         }\n-        System.gc();\n+        gc();\n         assertTrue(\"map should be empty after purge of weak values\", map.isEmpty());\n \n         for (int i = 0; i < hard.length; i++) {\n             map.put(new Object(), hard[i]);\n         }\n-        System.gc();\n+        gc();\n         assertTrue(\"map should be empty after purge of weak keys\", map.isEmpty());\n \n         for (int i = 0; i < hard.length; i++) {\n             map.put(hard[i], new Object());\n         }\n \n-        System.gc();\n+        gc();\n         assertTrue(\"map should be empty after purge of weak keys and values\", map.isEmpty());\n     }\n \n             map.put(new Integer(i), new Integer(i));\n         }\n \n-        System.gc();\n+        gc();\n         for (int i = 0; i < 10; i++) {\n             Integer I = new Integer(i);\n             assertTrue(\"map.containsKey should return false for GC'd element\", !map.containsKey(I));\n             map.put(hard[i], hard[i]);\n         }\n \n-        System.gc();\n+        gc();\n         Iterator iterator = map.entrySet().iterator();\n         while (iterator.hasNext()) {\n             Map.Entry entry = (Map.Entry)iterator.next();\n             map.put(hard[i], hard[i]);\n         }\n \n-        System.gc();\n+        gc();\n         MapIterator iterator = map.mapIterator();\n         while (iterator.hasNext()) {\n             Object key1 = iterator.next();\n         MapIterator iterator = map.mapIterator();\n         while (iterator.hasNext()) {\n             Object key1 = iterator.next();\n-            System.gc();\n+            gc();\n             Integer key = (Integer) iterator.getKey();\n             Integer value = (Integer) iterator.getValue();\n             assertTrue(\"iterator keys should match\", key == key1);\n             assertTrue(\"iterator should skip GC'd values\", value.intValue() >= 10);\n         }\n \n-    }\n-*/\n-/*\n-    // Uncomment to create test files in /data/test\n-    public void testCreateTestFiles() throws Exception {\n-        ReferenceIdentityMap m = (ReferenceIdentityMap) makeEmptyMap();\n-        writeExternalFormToDisk(m, getCanonicalEmptyCollectionName(m));\n-        m = (ReferenceIdentityMap) makeFullMap();\n-        writeExternalFormToDisk(m, getCanonicalFullCollectionName(m));\n-    }\n-*/\n-\n-\n-    public String getCompatibilityVersion() {\n-        return \"3.1\";\n     }\n \n     /** Tests whether purge values setting works */\n             }\n         }\n     }\n+\n+    private static void gc() {\n+        try {\n+            // trigger GC\n+            byte[][] tooLarge = new byte[1000000000][1000000000];\n+            fail(\"you have too much RAM\");\n+        } catch (OutOfMemoryError ex) {\n+            System.gc(); // ignore\n+        }\n+    }\n+\n }\n--- a/src/test/org/apache/commons/collections/map/TestReferenceMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestReferenceMap.java\n package org.apache.commons.collections.map;\n \n import java.lang.ref.WeakReference;\n+import java.util.Iterator;\n import java.util.Map;\n \n import junit.framework.Test;\n \n import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.MapIterator;\n \n /**\n  * Tests for ReferenceMap. \n  * \n- * @version $Revision: 1.6 $ $Date: 2004/04/27 21:35:23 $\n+ * @version $Revision: 1.7 $ $Date: 2004/04/30 22:53:16 $\n  *\n  * @author Paul Jack\n  */\n         return false;\n     }\n \n-\n-/*\n-   // Unfortunately, these tests all rely on System.gc(), which is\n-   // not reliable across platforms.  Not sure how to code the tests\n-   // without using System.gc() though...\n-   // They all passed on my platform though. :)\n-\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNullHandling() {\n+        resetFull();\n+        assertEquals(null, map.get(null));\n+        assertEquals(false, map.containsKey(null));\n+        assertEquals(false, map.containsValue(null));\n+        assertEquals(null, map.remove(null));\n+        assertEquals(false, map.entrySet().contains(null));\n+        assertEquals(false, map.keySet().contains(null));\n+        assertEquals(false, map.values().contains(null));\n+        try {\n+            map.put(null, null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            map.put(new Object(), null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            map.put(null, new Object());\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testPurge() {\n         ReferenceMap map = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK);\n         Object[] hard = new Object[10];\n             hard[i] = new Object();\n             map.put(hard[i], new Object());\n         }\n-        System.gc();\n+        gc();\n         assertTrue(\"map should be empty after purge of weak values\", map.isEmpty());\n \n         for (int i = 0; i < hard.length; i++) {\n             map.put(new Object(), hard[i]);\n         }\n-        System.gc();\n+        gc();\n         assertTrue(\"map should be empty after purge of weak keys\", map.isEmpty());\n \n         for (int i = 0; i < hard.length; i++) {\n             map.put(hard[i], new Object());\n         }\n \n-        System.gc();\n+        gc();\n         assertTrue(\"map should be empty after purge of weak keys and values\", map.isEmpty());\n     }\n \n             map.put(new Integer(i), new Integer(i));\n         }\n \n-        System.gc();\n+        gc();\n         for (int i = 0; i < 10; i++) {\n             Integer I = new Integer(i);\n             assertTrue(\"map.containsKey should return false for GC'd element\", !map.containsKey(I));\n             map.put(hard[i], hard[i]);\n         }\n \n-        System.gc();\n+        gc();\n         Iterator iterator = map.entrySet().iterator();\n         while (iterator.hasNext()) {\n             Map.Entry entry = (Map.Entry)iterator.next();\n             map.put(hard[i], hard[i]);\n         }\n \n-        System.gc();\n+        gc();\n         MapIterator iterator = map.mapIterator();\n         while (iterator.hasNext()) {\n             Object key1 = iterator.next();\n         MapIterator iterator = map.mapIterator();\n         while (iterator.hasNext()) {\n             Object key1 = iterator.next();\n-            System.gc();\n+            gc();\n             Integer key = (Integer) iterator.getKey();\n             Integer value = (Integer) iterator.getValue();\n             assertTrue(\"iterator keys should match\", key == key1);\n             assertTrue(\"iterator should skip GC'd values\", value.intValue() >= 10);\n         }\n \n-    }\n-\n-*/\n-\n-/*\n-    // Uncomment to create test files in /data/test\n-    public void testCreateTestFiles() throws Exception {\n-        ReferenceMap m = (ReferenceMap)makeEmptyMap();\n-        writeExternalFormToDisk(m, getCanonicalEmptyCollectionName(m));\n-        m = (ReferenceMap)makeFullMap();\n-        writeExternalFormToDisk(m, getCanonicalFullCollectionName(m));\n-    }\n-*/\n-\n-\n-    public String getCompatibilityVersion() {\n-        return \"3.1\";\n     }\n \n     /** Tests whether purge values setting works */\n             }\n         }\n     }\n+\n+    private static void gc() {\n+        try {\n+            // trigger GC\n+            byte[][] tooLarge = new byte[1000000000][1000000000];\n+            fail(\"you have too much RAM\");\n+        } catch (OutOfMemoryError ex) {\n+            System.gc(); // ignore\n+        }\n+    }\n+\n }", "timestamp": 1083365596, "metainfo": ""}