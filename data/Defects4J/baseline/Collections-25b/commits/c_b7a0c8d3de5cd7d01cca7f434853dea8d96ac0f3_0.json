{"sha": "b7a0c8d3de5cd7d01cca7f434853dea8d96ac0f3", "log": "Remove trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/functors/AbstractQuantifierPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/AbstractQuantifierPredicate.java\n \n     /** Serial version UID */\n     private static final long serialVersionUID = -3094696765038308799L;\n-    \n+\n     /** The array of predicates to call */\n     protected final Predicate<? super T>[] iPredicates;\n-    \n+\n     /**\n      * Constructor that performs no validation.\n      *\n \n     /**\n      * Gets the predicates.\n-     * \n+     *\n      * @return a copy of the predicates\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java\n \n     /** Serial version UID */\n     private static final long serialVersionUID = -3094696765038308799L;\n-    \n+\n     /**\n      * Factory to create the predicate.\n      * <p>\n \n     /**\n      * Evaluates the predicate returning true if all predicates return true.\n-     * \n+     *\n      * @param object  the input object\n      * @return true if all decorated predicates return true\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/CatchAndRethrowClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/CatchAndRethrowClosure.java\n /**\n  * {@link Closure} that catches any checked exception and re-throws it as a\n  * {@link FunctorException} runtime exception. Example usage:\n- * \n+ *\n  * <pre>\n  * // Create a catch and re-throw closure via anonymous subclass\n  * CatchAndRethrowClosure&lt;String&gt; writer = new ThrowingClosure() {\n  *     private java.io.Writer out = // some writer\n- *     \n+ *\n  *     protected void executeAndThrow(String input) throws IOException {\n  *         out.write(input); // throwing of IOException allowed\n  *     }\n  * };\n- * \n+ *\n  * // use catch and re-throw closure\n  * java.util.List<String> strList = // some list\n  * try {\n  *     // handle error\n  * }\n  * </pre>\n- * \n+ *\n  * @since 4.0\n  * @version $Id$\n  */\n \n     /**\n      * Execute this closure on the specified input object.\n-     * \n+     *\n      * @param input the input to execute on\n      * @throws FunctorException (runtime) if the closure execution resulted in a\n      *             checked exception.\n \n     /**\n      * Execute this closure on the specified input object.\n-     * \n+     *\n      * @param input the input to execute on\n      * @throws Throwable if the closure execution resulted in a checked\n      *             exception.\n--- a/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java\n \n     /**\n      * Factory method that performs validation and copies the parameter array.\n-     * \n+     *\n      * @param <E> the type that the closure acts on\n      * @param closures  the closures to chain, copied, no nulls\n      * @return the <code>chained</code> closure\n     }\n \n     /**\n-     * Create a new Closure that calls each closure in turn, passing the \n+     * Create a new Closure that calls each closure in turn, passing the\n      * result into the next closure. The ordering is that of the iterator()\n      * method on the collection.\n-     * \n+     *\n      * @param <E> the type that the closure acts on\n      * @param closures  a collection of closures to chain\n      * @return the <code>chained</code> closure\n     /**\n      * Constructor that performs no validation.\n      * Use <code>chainedClosure</code> if you want that.\n-     * \n+     *\n      * @param closures  the closures to chain, not copied, no nulls\n      */\n     public ChainedClosure(final Closure<? super E>[] closures) {\n \n     /**\n      * Execute a list of closures.\n-     * \n+     *\n      * @param input  the input object passed to each closure\n      */\n     public void execute(final E input) {\n--- a/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java\n         }\n         return new ChainedTransformer<T>(FunctorUtils.copy(transformers));\n     }\n-    \n+\n     /**\n-     * Create a new Transformer that calls each transformer in turn, passing the \n+     * Create a new Transformer that calls each transformer in turn, passing the\n      * result into the next transformer. The ordering is that of the iterator()\n      * method on the collection.\n      *\n     /**\n      * Constructor that performs no validation.\n      * Use <code>chainedTransformer</code> if you want that.\n-     * \n+     *\n      * @param transformers  the transformers to chain, not copied, no nulls\n      */\n     public ChainedTransformer(final Transformer<? super T, ? extends T>[] transformers) {\n \n     /**\n      * Transforms the input to result via each decorated transformer\n-     * \n+     *\n      * @param object  the input object passed to the first transformer\n      * @return the transformed result\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/CloneTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/CloneTransformer.java\n \n     /**\n      * Transforms the input to result by cloning it.\n-     * \n+     *\n      * @param input  the input object to transform\n      * @return the transformed result\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java\n     /**\n      * Constructor that performs no validation.\n      * Use <code>closureTransformer</code> if you want that.\n-     * \n+     *\n      * @param closure  the closure to call, not null\n      */\n     public ClosureTransformer(final Closure<? super T> closure) {\n \n     /**\n      * Transforms the input to result by executing a closure.\n-     * \n+     *\n      * @param input  the input object to transform\n      * @return the transformed result\n      */\n \n     /**\n      * Gets the closure.\n-     * \n+     *\n      * @return the closure\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java\n      *\n      * @see org.apache.commons.collections4.Predicate#evaluate(java.lang.Object)\n      * @see java.util.Comparator#compare(java.lang.Object first, java.lang.Object second)\n-     * \n+     *\n      * @param target  the target object to compare to\n      * @return {@code true} if the comparison succeeds according to the selected criterion\n      * @throws IllegalStateException if the criterion is invalid (really not possible)\n--- a/src/main/java/org/apache/commons/collections4/functors/ConstantFactory.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ConstantFactory.java\n \n     /** Serial version UID */\n     private static final long serialVersionUID = -3520677225766901240L;\n-    \n+\n     /** Returns null each time */\n     public static final Factory<Object> NULL_INSTANCE = new ConstantFactory<Object>(null);\n \n         }\n         return new ConstantFactory<T>(constantToReturn);\n     }\n-    \n+\n     /**\n      * Constructor that performs no validation.\n      * Use <code>constantFactory</code> if you want that.\n-     * \n+     *\n      * @param constantToReturn  the constant to return each time\n      */\n     public ConstantFactory(final T constantToReturn) {\n \n     /**\n      * Always return constant.\n-     * \n+     *\n      * @return the stored constant value\n      */\n     public T create() {\n \n     /**\n      * Gets the constant.\n-     * \n+     *\n      * @return the constant\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/ConstantTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ConstantTransformer.java\n \n     /** Serial version UID */\n     private static final long serialVersionUID = 6374440726369055124L;\n-    \n+\n     /** Returns null each time */\n     public static final Transformer<Object, Object> NULL_INSTANCE = new ConstantTransformer<Object, Object>(null);\n \n         }\n         return new ConstantTransformer<I, O>(constantToReturn);\n     }\n-    \n+\n     /**\n      * Constructor that performs no validation.\n      * Use <code>constantTransformer</code> if you want that.\n-     * \n+     *\n      * @param constantToReturn  the constant to return each time\n      */\n     public ConstantTransformer(final O constantToReturn) {\n \n     /**\n      * Transforms the input by ignoring it and returning the stored constant instead.\n-     * \n+     *\n      * @param input  the input object which is ignored\n      * @return the stored constant\n      */\n \n     /**\n      * Gets the constant.\n-     * \n+     *\n      * @return the constant\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/DefaultEquator.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/DefaultEquator.java\n \n /**\n  * Default {@link Equator} implementation.\n- * \n+ *\n  * @param <T>  the types of object this {@link Equator} can evaluate.\n  * @since 4.0\n  * @version $Id$\n \n     /**\n      * Factory returning the typed singleton instance.\n-     * \n+     *\n      * @param <T>  the object type\n      * @return the singleton instance\n      */\n \n     /**\n      * {@inheritDoc}\n-     * \n+     *\n      * @return <code>o.hashCode()</code> if <code>o</code> is non-\n      *         <code>null</code>, else {@link #HASHCODE_NULL}.\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/EqualPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/EqualPredicate.java\n \n     /** The value to compare to */\n     private final T iValue;\n-    \n+\n     /** The equator to use for comparison */\n     private final Equator<T> equator;\n \n     /**\n      * Factory to create the predicate.\n-     * \n+     *\n      * @param <T> the type that the predicate queries\n      * @param object  the object to compare to\n      * @return the predicate\n \n     /**\n      * Factory to create the identity predicate.\n-     * \n+     *\n      * @param <T> the type that the predicate queries\n      * @param object  the object to compare to\n      * @param equator  the equator to use for comparison\n     /**\n      * Constructor that performs no validation.\n      * Use <code>equalPredicate</code> if you want that.\n-     * \n+     *\n      * @param object  the object to compare to\n      */\n     public EqualPredicate(final T object) {\n     /**\n      * Constructor that performs no validation.\n      * Use <code>equalPredicate</code> if you want that.\n-     * \n+     *\n      * @param object  the object to compare to\n      * @param equator  the equator to use for comparison\n      * @since 4.0\n \n     /**\n      * Evaluates the predicate returning true if the input equals the stored value.\n-     * \n+     *\n      * @param object  the input object\n      * @return true if input object equals stored value\n      */\n \n     /**\n      * Gets the value.\n-     * \n+     *\n      * @return the value\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/Equator.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/Equator.java\n package org.apache.commons.collections4.functors;\n \n /**\n- * <p>\n  * An equation function, which determines equality between objects of type T.\n- * </p>\n  * <p>\n  * It is the functional sibling of {@link java.util.Comparator}; {@link Equator} is to\n  * {@link Object} as {@link java.util.Comparator} is to {@link java.lang.Comparable}.\n- * </p>\n- * \n+ *\n  * @param <T> the types of object this {@link Equator} can evaluate.\n  * @since 4.0\n  * @version $Id$\n public interface Equator<T> {\n     /**\n      * Evaluates the two arguments for their equality.\n-     * \n+     *\n      * @param o1 the first object to be equated.\n      * @param o2 the second object to be equated.\n      * @return whether the two objects are equal.\n      * method. This is used for classes that delegate their {@link Object#equals(Object) equals(Object)} method to an\n      * Equator (and so must also delegate their {@link Object#hashCode() hashCode()} method), or for implementations\n      * of {@link org.apache.commons.collections4.map.HashedMap} that use an Equator for the key objects.\n-     * \n+     *\n      * @param o the object to calculate the hash for.\n      * @return the hash of the object.\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/ExceptionClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ExceptionClosure.java\n \n     /**\n      * Factory returning the singleton instance.\n-     * \n+     *\n      * @param <E> the type that the closure acts on\n      * @return the singleton instance\n      * @since 3.1\n \n     /**\n      * Always throw an exception.\n-     * \n+     *\n      * @param input  the input object\n      * @throws FunctorException always\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/ExceptionFactory.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ExceptionFactory.java\n \n     /**\n      * Factory returning the singleton instance.\n-     * \n+     *\n      * @param <T>  the type the factory creates\n      * @return the singleton instance\n      * @since 3.1\n \n     /**\n      * Always throws an exception.\n-     * \n+     *\n      * @return never\n      * @throws FunctorException always\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java\n \n     /**\n      * Factory method that performs validation.\n-     * \n+     *\n      * @param <I>  the input type\n      * @param <O>  the output type\n      * @param factory  the factory to call, not null\n     /**\n      * Constructor that performs no validation.\n      * Use <code>factoryTransformer</code> if you want that.\n-     * \n+     *\n      * @param factory  the factory to call, not null\n      */\n     public FactoryTransformer(final Factory<? extends O> factory) {\n     /**\n      * Transforms the input by ignoring the input and returning the result of\n      * calling the decorated factory.\n-     * \n+     *\n      * @param input  the input object to transform\n      * @return the transformed result\n      */\n \n     /**\n      * Gets the factory.\n-     * \n+     *\n      * @return the factory\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/ForClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ForClosure.java\n      * <p>\n      * A null closure or zero count returns the <code>NOPClosure</code>.\n      * A count of one returns the specified closure.\n-     * \n+     *\n      * @param <E> the type that the closure acts on\n      * @param count  the number of times to execute the closure\n      * @param closure  the closure to execute, not null\n     /**\n      * Constructor that performs no validation.\n      * Use <code>forClosure</code> if you want that.\n-     * \n+     *\n      * @param count  the number of times to execute the closure\n      * @param closure  the closure to execute, not null\n      */\n \n     /**\n      * Executes the closure <code>count</code> times.\n-     * \n+     *\n      * @param input  the input object\n      */\n     public void execute(final E input) {\n \n     /**\n      * Gets the closure.\n-     * \n+     *\n      * @return the closure\n      * @since 3.1\n      */\n \n     /**\n      * Gets the count.\n-     * \n+     *\n      * @return the count\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/IfClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/IfClosure.java\n      * <p>\n      * This factory creates a closure that performs no action when\n      * the predicate is false.\n-     * \n+     *\n      * @param <E> the type that the closure acts on\n      * @param predicate  predicate to switch on\n      * @param trueClosure  closure used if true\n \n     /**\n      * Factory method that performs validation.\n-     * \n+     *\n      * @param <E> the type that the closure acts on\n      * @param predicate  predicate to switch on\n      * @param trueClosure  closure used if true\n      * <p>\n      * This constructor creates a closure that performs no action when\n      * the predicate is false.\n-     * \n+     *\n      * @param predicate  predicate to switch on, not null\n      * @param trueClosure  closure used if true, not null\n      * @since 3.2\n     /**\n      * Constructor that performs no validation.\n      * Use <code>ifClosure</code> if you want that.\n-     * \n+     *\n      * @param predicate  predicate to switch on, not null\n      * @param trueClosure  closure used if true, not null\n      * @param falseClosure  closure used if false, not null\n \n     /**\n      * Executes the true or false closure according to the result of the predicate.\n-     * \n+     *\n      * @param input  the input object\n      */\n     public void execute(final E input) {\n \n     /**\n      * Gets the predicate.\n-     * \n+     *\n      * @return the predicate\n      * @since 3.1\n      */\n \n     /**\n      * Gets the closure called when true.\n-     * \n+     *\n      * @return the closure\n      * @since 3.1\n      */\n \n     /**\n      * Gets the closure called when false.\n-     * \n+     *\n      * @return the closure\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java\n \n     /**\n      * Factory method that performs validation.\n-     * \n+     *\n      * @param <T>  the type the factory creates\n      * @param classToInstantiate  the class to instantiate, not null\n      * @param paramTypes  the constructor parameter types, cloned\n     /**\n      * Constructor that performs no validation.\n      * Use <code>instantiateFactory</code> if you want that.\n-     * \n+     *\n      * @param classToInstantiate  the class to instantiate\n      */\n     public InstantiateFactory(final Class<T> classToInstantiate) {\n     /**\n      * Constructor that performs no validation.\n      * Use <code>instantiateFactory</code> if you want that.\n-     * \n+     *\n      * @param classToInstantiate  the class to instantiate\n      * @param paramTypes  the constructor parameter types, cloned\n      * @param args  the constructor arguments, cloned\n \n     /**\n      * Creates an object using the stored constructor.\n-     * \n+     *\n      * @return the new object\n      */\n     public T create() {\n             throw new FunctorException(\"InstantiateFactory: Constructor threw an exception\", ex);\n         }\n     }\n-    \n+\n }\n--- a/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java\n \n     /** The serial version */\n     private static final long serialVersionUID = -8653385846894047688L;\n-    \n+\n     /** The method name to call */\n     private final String iMethodName;\n     /** The array of reflection parameter types */\n \n     /**\n      * Gets an instance of this transformer calling a specific method with no arguments.\n-     * \n+     *\n      * @param <I>  the input type\n      * @param <O>  the output type\n      * @param methodName  the method name to call\n \n     /**\n      * Constructor for no arg instance.\n-     * \n+     *\n      * @param methodName  the method to call\n      */\n     private InvokerTransformer(final String methodName) {\n     /**\n      * Constructor that performs no validation.\n      * Use <code>invokerTransformer</code> if you want that.\n-     * \n+     *\n      * @param methodName  the method to call\n      * @param paramTypes  the constructor parameter types, not cloned\n      * @param args  the constructor arguments, not cloned\n \n     /**\n      * Transforms the input to result by invoking a method on the input.\n-     * \n+     *\n      * @param input  the input object to transform\n      * @return the transformed result, null if null input\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java\n \n     /** Serial version UID */\n     private static final long serialVersionUID = -2654603322338049674L;\n-    \n+\n     /** The predicate to decorate */\n     private final Predicate<? super T> iPredicate;\n-    \n+\n     /**\n      * Factory to create the not predicate.\n-     * \n+     *\n      * @param <T> the type that the predicate queries\n      * @param predicate  the predicate to decorate, not null\n      * @return the predicate\n     /**\n      * Constructor that performs no validation.\n      * Use <code>notPredicate</code> if you want that.\n-     * \n+     *\n      * @param predicate  the predicate to call after the null check\n      */\n     public NotPredicate(final Predicate<? super T> predicate) {\n \n     /**\n      * Evaluates the predicate returning the opposite to the stored predicate.\n-     * \n+     *\n      * @param object  the input object\n      * @return true if predicate returns false\n      */\n \n     /**\n      * Gets the predicate being decorated.\n-     * \n+     *\n      * @return the predicate as the only element in an array\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java\n \n     /** Serial version UID */\n     private static final long serialVersionUID = 3243449850504576071L;\n-    \n+\n     /** The predicate to decorate */\n     private final Predicate<? super T> iPredicate;\n-    \n+\n     /**\n      * Factory to create the null exception predicate.\n-     * \n+     *\n      * @param <T> the type that the predicate queries\n      * @param predicate  the predicate to decorate, not null\n      * @return the predicate\n     /**\n      * Constructor that performs no validation.\n      * Use <code>nullIsExceptionPredicate</code> if you want that.\n-     * \n+     *\n      * @param predicate  the predicate to call after the null check\n      */\n     public NullIsExceptionPredicate(final Predicate<? super T> predicate) {\n     /**\n      * Evaluates the predicate returning the result of the decorated predicate\n      * once a null check is performed.\n-     * \n+     *\n      * @param object  the input object\n      * @return true if decorated predicate returns true\n      * @throws FunctorException if input is null\n \n     /**\n      * Gets the predicate being decorated.\n-     * \n+     *\n      * @return the predicate as the only element in an array\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java\n \n     /** Serial version UID */\n     private static final long serialVersionUID = -7625133768987126273L;\n-    \n+\n     /** The predicate to decorate */\n     private final Predicate<? super T> iPredicate;\n-    \n+\n     /**\n      * Factory to create the null true predicate.\n-     * \n+     *\n      * @param <T> the type that the predicate queries\n      * @param predicate  the predicate to decorate, not null\n      * @return the predicate\n     /**\n      * Constructor that performs no validation.\n      * Use <code>nullIsTruePredicate</code> if you want that.\n-     * \n+     *\n      * @param predicate  the predicate to call after the null check\n      */\n     public NullIsTruePredicate(final Predicate<? super T> predicate) {\n     /**\n      * Evaluates the predicate returning the result of the decorated predicate\n      * once a null check is performed.\n-     * \n+     *\n      * @param object  the input object\n      * @return true if decorated predicate returns true or input is null\n      */\n \n     /**\n      * Gets the predicate being decorated.\n-     * \n+     *\n      * @return the predicate as the only element in an array\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java\n \n     /** Serial version UID */\n     private static final long serialVersionUID = -8125389089924745785L;\n-    \n+\n     /**\n      * Factory to create the predicate.\n      * <p>\n     /**\n      * Constructor that performs no validation.\n      * Use <code>onePredicate</code> if you want that.\n-     * \n+     *\n      * @param predicates  the predicates to check, not cloned, not null\n      */\n     public OnePredicate(final Predicate<? super T>[] predicates) {\n     /**\n      * Evaluates the predicate returning true if only one decorated predicate\n      * returns true.\n-     * \n+     *\n      * @param object  the input object\n      * @return true if only one decorated predicate returns true\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/PredicateDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/PredicateDecorator.java\n      * <p>\n      * The array may be the internal data structure of the predicate and thus\n      * should not be altered.\n-     * \n+     *\n      * @return the predicates being decorated\n      */\n     Predicate<? super T>[] getPredicates();\n--- a/src/main/java/org/apache/commons/collections4/functors/PredicateTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/PredicateTransformer.java\n \n     /**\n      * Factory method that performs validation.\n-     * \n+     *\n      * @param <T>  the input type\n      * @param predicate  the predicate to call, not null\n      * @return the <code>predicate</code> transformer\n     /**\n      * Constructor that performs no validation.\n      * Use <code>predicateTransformer</code> if you want that.\n-     * \n+     *\n      * @param predicate  the predicate to call, not null\n      */\n     public PredicateTransformer(final Predicate<? super T> predicate) {\n \n     /**\n      * Transforms the input to result by calling a predicate.\n-     * \n+     *\n      * @param input  the input object to transform\n      * @return the transformed result\n      */\n \n     /**\n      * Gets the predicate.\n-     * \n+     *\n      * @return the predicate\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/PrototypeFactory.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/PrototypeFactory.java\n      * PrototypeCloneFactory creates objects by copying a prototype using the clone method.\n      */\n     static class PrototypeCloneFactory<T> implements Factory<T>, Serializable {\n-        \n+\n         /** The serial version */\n         private static final long serialVersionUID = 5604271422565175555L;\n-        \n+\n         /** The object to clone each time */\n         private final T iPrototype;\n         /** The method used to clone */\n \n         /**\n          * Creates an object by calling the clone method.\n-         * \n+         *\n          * @return the new object\n          */\n         @SuppressWarnings(\"unchecked\")\n      * PrototypeSerializationFactory creates objects by cloning a prototype using serialization.\n      */\n     static class PrototypeSerializationFactory<T extends Serializable> implements Factory<T>, Serializable {\n-        \n+\n         /** The serial version */\n         private static final long serialVersionUID = -8704966966139178833L;\n-        \n+\n         /** The object to clone via serialization each time */\n         private final T iPrototype;\n \n \n         /**\n          * Creates an object using serialization.\n-         * \n+         *\n          * @return the new object\n          */\n         @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java\n \n     /**\n      * Factory method that performs validation and copies the parameter arrays.\n-     * \n+     *\n      * @param <I>  the input type\n      * @param <O>  the output type\n      * @param predicates  array of predicates, cloned, no nulls\n     }\n \n     /**\n-     * Create a new Transformer that calls one of the transformers depending \n-     * on the predicates. \n+     * Create a new Transformer that calls one of the transformers depending\n+     * on the predicates.\n      * <p>\n-     * The Map consists of Predicate keys and Transformer values. A transformer \n+     * The Map consists of Predicate keys and Transformer values. A transformer\n      * is called if its matching predicate returns true. Each predicate is evaluated\n      * until one returns true. If no predicates evaluate to true, the default\n-     * transformer is called. The default transformer is set in the map with a \n-     * null key. The ordering is that of the iterator() method on the entryset \n+     * transformer is called. The default transformer is set in the map with a\n+     * null key. The ordering is that of the iterator() method on the entryset\n      * collection of the map.\n-     * \n+     *\n      * @param <I>  the input type\n      * @param <O>  the output type\n      * @param map  a map of predicates to transformers\n         }\n         return new SwitchTransformer<I, O>(preds, transformers, defaultTransformer);\n     }\n-    \n+\n     /**\n      * Constructor that performs no validation.\n      * Use <code>switchTransformer</code> if you want that.\n-     * \n+     *\n      * @param predicates  array of predicates, not cloned, no nulls\n      * @param transformers  matching array of transformers, not cloned, no nulls\n      * @param defaultTransformer  the transformer to use if no match, null means return null\n     /**\n      * Transforms the input to result by calling the transformer whose matching\n      * predicate returns true.\n-     * \n+     *\n      * @param input  the input object to transform\n      * @return the transformed result\n      */\n \n     /**\n      * Gets the predicates.\n-     * \n+     *\n      * @return a copy of the predicates\n      * @since 3.1\n      */\n \n     /**\n      * Gets the transformers.\n-     * \n+     *\n      * @return a copy of the transformers\n      * @since 3.1\n      */\n \n     /**\n      * Gets the default transformer.\n-     * \n+     *\n      * @return the default transformer\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/TransformerClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/TransformerClosure.java\n      * Factory method that performs validation.\n      * <p>\n      * A null transformer will return the <code>NOPClosure</code>.\n-     * \n+     *\n      * @param <E> the type that the closure acts on\n      * @param transformer  the transformer to call, null means nop\n      * @return the <code>transformer</code> closure\n     /**\n      * Constructor that performs no validation.\n      * Use <code>transformerClosure</code> if you want that.\n-     * \n+     *\n      * @param transformer  the transformer to call, not null\n      */\n     public TransformerClosure(final Transformer<? super E, ?> transformer) {\n \n     /**\n      * Executes the closure by calling the decorated transformer.\n-     * \n+     *\n      * @param input  the input object\n      */\n     public void execute(final E input) {\n \n     /**\n      * Gets the transformer.\n-     * \n+     *\n      * @return the transformer\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java\n \n     /**\n      * Factory method that performs validation.\n-     * \n+     *\n      * @param <E> the type that the closure acts on\n      * @param predicate  the predicate used to evaluate when the loop terminates, not null\n      * @param closure  the closure the execute, not null\n     /**\n      * Constructor that performs no validation.\n      * Use <code>whileClosure</code> if you want that.\n-     * \n+     *\n      * @param predicate  the predicate used to evaluate when the loop terminates, not null\n      * @param closure  the closure the execute, not null\n      * @param doLoop  true to act as a do-while loop, always executing the closure once\n \n     /**\n      * Executes the closure until the predicate is false.\n-     * \n+     *\n      * @param input  the input object\n      */\n     public void execute(final E input) {\n \n     /**\n      * Gets the predicate in use.\n-     * \n+     *\n      * @return the predicate\n      * @since 3.1\n      */\n \n     /**\n      * Gets the closure.\n-     * \n+     *\n      * @return the closure\n      * @since 3.1\n      */\n \n     /**\n      * Is the loop a do-while loop.\n-     * \n+     *\n      * @return true is do-while, false if while\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections4/functors/package-info.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/package-info.java\n  * {@link org.apache.commons.collections4.Transformer Transformer} and\n  * {@link org.apache.commons.collections4.Factory Factory} interfaces.\n  * These provide simple callbacks for processing with collections.\n- * \n+ *\n  * @version $Id$\n  */\n package org.apache.commons.collections4.functors;", "timestamp": 1367351342, "metainfo": ""}