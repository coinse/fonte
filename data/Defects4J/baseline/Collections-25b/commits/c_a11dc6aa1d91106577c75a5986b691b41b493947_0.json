{"sha": "a11dc6aa1d91106577c75a5986b691b41b493947", "log": "Applying Mark Shead's patch to COLLECTIONS-359. The intersection method was not handling duplicates correctly.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n      */\n     public static <E> List<E> intersection(final List<? extends E> list1, final List<? extends E> list2) {\n         final List<E> result = new ArrayList<E>();\n+        final ArrayList<E> copyOfList1 = new ArrayList<E>(list1);\n \n         for (E e : list2) {\n-            if (list1.contains(e)) {\n+            if (copyOfList1.contains(e)) {\n                 result.add(e);\n+                copyOfList1.remove(e);\n             }\n         }\n         return result;\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n      */\n     public void testIntersectListWithSelf() {\n         assertEquals(fullList, ListUtils.intersection(fullList, fullList));\n+    }\n+\n+    /**\n+     * Tests intersecting two lists in different orders.\n+     */\n+    public void testIntersectionOrderInsensitivity() {\n+\t\tList one = new ArrayList();\n+\t\tList two = new ArrayList();\n+\t\tone.add(\"a\");\n+\t\tone.add(\"b\");\n+\t\ttwo.add(\"a\");\n+\t\ttwo.add(\"a\");\n+\t\ttwo.add(\"b\");\n+\t\ttwo.add(\"b\");\n+\t\tassertEquals(ListUtils.intersection(one,two),ListUtils.intersection(two, one));\n     }\n \n     public void testPredicatedList() {", "timestamp": 1279438995, "metainfo": ""}