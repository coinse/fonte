{"sha": "e6d4f465446e5645f1a68f3d90964a6ade82f59e", "log": "Making MultiValueMap serializable as per COLLECTIONS-240  ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/java/org/apache/commons/collections/map/MultiValueMap.java\n  *  limitations under the License.\n  */\n package org.apache.commons.collections.map;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n \n import java.util.AbstractCollection;\n import java.util.ArrayList;\n  * @version $Revision$ $Date$\n  * @since Commons Collections 3.2\n  */\n-public class MultiValueMap extends AbstractMapDecorator implements MultiMap {\n+public class MultiValueMap extends AbstractMapDecorator implements MultiMap, Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = -2214159910087182007L;\n \n     /** The factory for creating value collections. */\n     private final Factory collectionFactory;\n             throw new IllegalArgumentException(\"The factory must not be null\");\n         }\n         this.collectionFactory = collectionFactory;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the map out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     * @since Commons Collections 3.3\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(map);\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @since Commons Collections 3.3\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        map = (Map) in.readObject();\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Inner class that provides a simple reflection factory.\n      */\n-    private static class ReflectionFactory implements Factory {\n+    private static class ReflectionFactory implements Factory, Serializable {\n         private final Class clazz;\n \n         public ReflectionFactory(Class clazz) {\n--- a/src/test/org/apache/commons/collections/map/TestMultiValueMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestMultiValueMap.java\n import org.apache.commons.collections.IteratorUtils;\n import org.apache.commons.collections.MultiMap;\n \n+import org.apache.commons.collections.AbstractTestObject;\n+\n /**\n  * TestMultiValueMap.\n  *\n  * @author Stephen Colebourne\n  * @since Commons Collections 3.2\n  */\n-public class TestMultiValueMap extends TestCase {\n+public class TestMultiValueMap extends AbstractTestObject {\n \n     public TestMultiValueMap(String testName) {\n         super(testName);\n         assertEquals(new MultiValueMap(), map);\n     }\n \n+    //-----------------------------------------------------------------------\n+    // Manual serialization testing as this class cannot easily \n+    // extend the AbstractTestMap\n+    //-----------------------------------------------------------------------\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.3\";\n+    }\n+\n+    public Object makeObject() {\n+        Map m = makeEmptyMap();\n+        m.put(\"a\", \"1\");\n+        m.put(\"a\", \"1b\");\n+        m.put(\"b\", \"2\");\n+        m.put(\"c\", \"3\");\n+        m.put(\"c\", \"3b\");\n+        m.put(\"d\", \"4\");\n+        return m;\n+    }\n+\n+    private Map makeEmptyMap() {\n+        return new MultiValueMap();\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) makeEmptyMap(),\n+//            \"/tmp/MultiValueMap.emptyCollection.version3.3.obj\");\n+//\n+//        writeExternalFormToDisk(\n+//            (java.io.Serializable) makeObject(),\n+//            \"/tmp/MultiValueMap.fullCollection.version3.3.obj\");\n+//    }\n+\n+    public void testEmptyMapCompatibility() throws Exception {\n+        Map map = makeEmptyMap();\n+        Map map2 = (Map) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n+        assertEquals(\"Map is empty\", 0, map2.size());\n+    }\n+    public void testFullMapCompatibility() throws Exception {\n+        Map map = (Map) makeObject();\n+        Map map2 = (Map) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n+        assertEquals(\"Map is the right size\", map.size(), map2.size());\n+        for (Iterator it = map.keySet().iterator(); it.hasNext();) {\n+            Object key = it.next();\n+            assertEquals( \"Map had inequal elements\", map.get(key), map2.get(key) );\n+            map2.remove(key);\n+        }\n+        assertEquals(\"Map had extra values\", 0, map2.size());\n+    }\n+\n }", "timestamp": 1210925382, "metainfo": ""}