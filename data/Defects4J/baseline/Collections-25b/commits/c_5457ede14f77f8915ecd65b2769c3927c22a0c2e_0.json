{"sha": "5457ede14f77f8915ecd65b2769c3927c22a0c2e", "log": "Rename pairs subpackage to keyvalue   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.24 2003/12/03 12:27:37 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.25 2003/12/05 20:23:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Set;\n \n import org.apache.commons.collections.list.UnmodifiableList;\n-import org.apache.commons.collections.pairs.AbstractMapEntry;\n+import org.apache.commons.collections.keyvalue.AbstractMapEntry;\n import org.apache.commons.collections.set.UnmodifiableSet;\n \n /** \n  * property is considered non existent in the Map\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.24 $ $Date: 2003/12/03 12:27:37 $\n+ * @version $Revision: 1.25 $ $Date: 2003/12/05 20:23:57 $\n  * \n  * @author James Strachan\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/DefaultMapEntry.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.14 2003/10/03 23:19:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.15 2003/12/05 20:23:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * A default implementation of {@link java.util.Map.Entry}\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.14 $ $Date: 2003/10/03 23:19:32 $\n+ * @version $Revision: 1.15 $ $Date: 2003/12/05 20:23:57 $\n  * \n  * @author James Strachan\n  * @author Michael A. Smith\n  * @author Neil O'Toole\n  * @author Stephen Colebourne\n  * \n- * @deprecated Use the version in the pairs subpackage.\n+ * @deprecated Use the version in the keyvalue subpackage.\n  */\n public class DefaultMapEntry implements Map.Entry {\n     \n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/KeyValue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/KeyValue.java,v 1.1 2003/12/05 20:23:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+/**\n+ * Defines a simple key value pair.\n+ * <p>\n+ * A Map Entry has considerable additional semantics over and above a simple\n+ * key-value pair. This interface defines the minimum key value, with just the\n+ * two get methods.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:57 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public interface KeyValue {\n+    \n+    /**\n+     * Gets the key from the pair.\n+     *\n+     * @return the key \n+     */\n+    Object getKey();\n+\n+    /**\n+     * Gets the value from the pair.\n+     *\n+     * @return the value\n+     */\n+    Object getValue();\n+\n+}\n--- a/src/java/org/apache/commons/collections/MultiKey.java\n+++ b/src/java/org/apache/commons/collections/MultiKey.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/MultiKey.java,v 1.4 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/MultiKey.java,v 1.5 2003/12/05 20:23:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * key and locale. The typical solution might be nested maps. This class\n  * can be used instead by creating an instance passing in the key and locale.\n  * \n+ * @deprecated WILL BE REMOVED BEFORE v3.0\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/05 20:23:57 $\n  * \n  * @author Howard Lewis Ship\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.17 2003/12/03 15:50:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.18 2003/12/05 20:23:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n-import org.apache.commons.collections.pairs.DefaultMapEntry;\n+import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n \n /**\n  *  Hash-based {@link Map} implementation that allows\n  * \n  * @deprecated Moved to map subpackage. Due to be removed in v4.0.\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.17 $ $Date: 2003/12/03 15:50:12 $\n+ * @version $Revision: 1.18 $ $Date: 2003/12/05 20:23:57 $\n  * \n  * @author Paul Jack\n  */\n--- a/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java,v 1.3 2003/12/01 22:49:00 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java,v 1.4 2003/12/05 20:23:58 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.ResettableIterator;\n import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n-import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n+import org.apache.commons.collections.keyvalue.AbstractMapEntryDecorator;\n \n /**\n  * Abstract <code>BidiMap</code> implemented using two maps.\n  * <code>createMap</code> method.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.3 2003/12/01 22:49:00 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.4 2003/12/05 20:23:58 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.4 2003/12/01 22:49:00 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.5 2003/12/05 20:23:58 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.OrderedBidiMap;\n import org.apache.commons.collections.OrderedIterator;\n import org.apache.commons.collections.OrderedMapIterator;\n-import org.apache.commons.collections.pairs.UnmodifiableMapEntry;\n+import org.apache.commons.collections.keyvalue.UnmodifiableMapEntry;\n \n /**\n  * Red-Black tree-based implementation of BidiMap.\n  * UnsupportedOperationException on attempts to call that method.\n  *\n  * @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0)\n- * @version $Revision: 1.4 $ $Date: 2003/12/01 22:49:00 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/05 20:23:58 $\n  * \n  * @author Marc Johnson\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/decorators/OrderedMap.java\n+++ b/src/java/org/apache/commons/collections/decorators/OrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedMap.java,v 1.8 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedMap.java,v 1.9 2003/12/05 20:23:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.iterators.EntrySetMapIterator;\n-import org.apache.commons.collections.pairs.AbstractMapEntry;\n+import org.apache.commons.collections.keyvalue.AbstractMapEntry;\n \n /**\n  * Decorates a <code>Map</code> to ensure that the order of addition is retained.\n  * original position in the iteration.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.9 $ $Date: 2003/12/05 20:23:57 $\n  * @deprecated TO BE REMOVED BEFORE v3.0\n  * \n  * @author Henri Yandell\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import org.apache.commons.collections.KeyValue;\n+\n+/**\n+ * Abstract pair class to assist with creating KeyValue and MapEntry implementations.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * \n+ * @author James Strachan\n+ * @author Michael A. Smith\n+ * @author Neil O'Toole\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractKeyValue implements KeyValue {\n+    \n+    /** The key */\n+    protected Object key;\n+    /** The value */\n+    protected Object value;\n+    \n+    /**\n+     * Constructs a new pair with the specified key and given value.\n+     *\n+     * @param key  the key for the entry, may be null\n+     * @param value  the value for the entry, may be null\n+     */\n+    protected AbstractKeyValue(Object key, Object value) {\n+        super();\n+        this.key = key;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Gets the key from the pair.\n+     *\n+     * @return the key \n+     */\n+    public Object getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * Gets the value from the pair.\n+     *\n+     * @return the value\n+     */\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Gets a debugging String view of the pair.\n+     * \n+     * @return a String view of the entry\n+     */\n+    public String toString() {\n+        return new StringBuffer()\n+            .append(getKey())\n+            .append('=')\n+            .append(getValue())\n+            .toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.Map;\n+\n+/**\n+ * Abstract Pair class to assist with creating correct Map Entry implementations.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * \n+ * @author James Strachan\n+ * @author Michael A. Smith\n+ * @author Neil O'Toole\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractMapEntry extends AbstractKeyValue implements Map.Entry {\n+    \n+    /**\n+     * Constructs a new entry with the given key and given value.\n+     *\n+     * @param key  the key for the entry, may be null\n+     * @param value  the value for the entry, may be null\n+     */\n+    protected AbstractMapEntry(Object key, Object value) {\n+        super(key, value);\n+    }\n+\n+    // Map.Entry interface\n+    //-------------------------------------------------------------------------\n+    /** \n+     * Sets the value stored in this Map Entry.\n+     * <p>\n+     * This Map Entry is not connected to a Map, so only the local data is changed.\n+     *\n+     * @param value  the new value\n+     * @return the previous value\n+     */\n+    public Object setValue(Object value) {\n+        Object answer = this.value;\n+        this.value = value;\n+        return answer;\n+    }\n+\n+    /**\n+     * Compares this Map Entry with another Map Entry.\n+     * <p>\n+     * Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal key and value\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof Map.Entry == false) {\n+            return false;\n+        }\n+        Map.Entry other = (Map.Entry) obj;\n+        return\n+            (getKey() == null ? other.getKey() == null : getKey().equals(other.getKey())) &&\n+            (getValue() == null ? other.getValue() == null : getValue().equals(other.getValue()));\n+    }\n+     \n+    /**\n+     * Gets a hashCode compatible with the equals method.\n+     * <p>\n+     * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}\n+     * \n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        return (getKey() == null ? 0 : getKey().hashCode()) ^\n+               (getValue() == null ? 0 : getValue().hashCode()); \n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.Map;\n+\n+/**\n+ * Provides a base decorator that allows additional functionality to be added\n+ * to a Map Entry.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractMapEntryDecorator implements Map.Entry {\n+    \n+    /** The <code>Map.Entry</code> to decorate */\n+    protected final Map.Entry entry;\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     *\n+     * @param entry  the <code>Map.Entry</code> to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    public AbstractMapEntryDecorator(Map.Entry entry) {\n+        if (entry == null) {\n+            throw new IllegalArgumentException(\"Map entry must not be null\");\n+        }\n+        this.entry = entry;\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected Map.Entry getMapEntry() {\n+        return entry;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object getKey() {\n+        return entry.getKey();\n+    }\n+\n+    public Object getValue() {\n+        return entry.getValue();\n+    }\n+\n+    public Object setValue(Object object) {\n+        return entry.setValue(object);\n+    }\n+   \n+    public boolean equals(Object object) {\n+        if (object == this) {\n+            return true;\n+        }\n+        return entry.equals(object);\n+    }\n+\n+    public int hashCode() {\n+        return entry.hashCode();\n+    }\n+\n+    public String toString() {\n+        return entry.toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.collections.KeyValue;\n+\n+/**\n+ * A mutable KeyValue pair that does not implement MapEntry.\n+ * <p>\n+ * Note that a <code>DefaultKeyValue</code> instance may not contain\n+ * itself as a key or value.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * \n+ * @author James Strachan\n+ * @author Michael A. Smith\n+ * @author Neil O'Toole\n+ * @author Stephen Colebourne\n+ */\n+public class DefaultKeyValue extends AbstractKeyValue {\n+\n+    /**\n+     * Constructs a new pair with a null key and null value.\n+     */\n+    public DefaultKeyValue() {\n+        super(null, null);\n+    }\n+\n+    /**\n+     * Constructs a new pair with the specified key and given value.\n+     *\n+     * @param key  the key for the entry, may be null\n+     * @param value  the value for the entry, may be null\n+     */\n+    public DefaultKeyValue(final Object key, final Object value) {\n+        super(key, value);\n+    }\n+\n+    /**\n+     * Constructs a new pair from the specified KeyValue.\n+     *\n+     * @param pair  the pair to copy, must not be null\n+     * @throws NullPointerException if the entry is null\n+     */\n+    public DefaultKeyValue(final KeyValue pair) {\n+        super(pair.getKey(), pair.getValue());\n+    }\n+\n+    /**\n+     * Constructs a new pair from the specified MapEntry.\n+     *\n+     * @param entry  the entry to copy, must not be null\n+     * @throws NullPointerException if the entry is null\n+     */\n+    public DefaultKeyValue(final Map.Entry entry) {\n+        super(entry.getKey(), entry.getValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the key.\n+     *\n+     * @param key  the new key\n+     * @return the old key\n+     * @throws IllegalArgumentException if key is this object\n+     */\n+    public Object setKey(final Object key) {\n+        if (key == this) {\n+            throw new IllegalArgumentException(\"DefaultKeyValue may not contain itself as a key.\");\n+        }\n+\n+        final Object old = this.key;\n+        this.key = key;\n+        return old;\n+    }\n+\n+    /** \n+     * Sets the value.\n+     *\n+     * @return the old value of the value\n+     * @param value the new value\n+     * @throws IllegalArgumentException if value is this object\n+     */\n+    public Object setValue(final Object value) {\n+        if (value == this) {\n+            throw new IllegalArgumentException(\"DefaultKeyValue may not contain itself as a value.\");\n+        }\n+\n+        final Object old = this.value;\n+        this.value = value;\n+        return old;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new <code>Map.Entry</code> object with key and value from this pair.\n+     * \n+     * @return a MapEntry instance\n+     */\n+    public Map.Entry toMapEntry() {\n+        return new DefaultMapEntry(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares this Map Entry with another Map Entry.\n+     * <p>\n+     * Returns true if the compared object is also a <code>DefaultKeyValue</code>,\n+     * and its key and value are equal to this object's key and value.\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal key and value\n+     */\n+    public boolean equals(final Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof DefaultKeyValue == false) {\n+            return false;\n+        }\n+\n+        DefaultKeyValue other = (DefaultKeyValue) obj;\n+        return \n+            (getKey() == null ? other.getKey() == null : getKey().equals(other.getKey())) &&\n+            (getValue() == null ? other.getValue() == null : getValue().equals(other.getValue()));\n+    }\n+\n+    /**\n+     * Gets a hashCode compatible with the equals method.\n+     * <p>\n+     * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()},\n+     * however subclasses may override this.\n+     * \n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        return (getKey() == null ? 0 : getKey().hashCode()) ^\n+               (getValue() == null ? 0 : getValue().hashCode());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/keyvalue/DefaultMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/DefaultMapEntry.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.collections.KeyValue;\n+\n+/**\n+ * A restricted implementation of {@link java.util.Map.Entry} that prevents\n+ * the MapEntry contract from being broken.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * \n+ * @author James Strachan\n+ * @author Michael A. Smith\n+ * @author Neil O'Toole\n+ * @author Stephen Colebourne\n+ */\n+public final class DefaultMapEntry extends AbstractMapEntry {\n+    \n+    /**\n+     * Constructs a new entry with the specified key and given value.\n+     *\n+     * @param key  the key for the entry, may be null\n+     * @param value  the value for the entry, may be null\n+     */\n+    public DefaultMapEntry(final Object key, final Object value) {\n+        super(key, value);\n+    }\n+\n+    /**\n+     * Constructs a new entry from the specified KeyValue.\n+     *\n+     * @param pair  the pair to copy, must not be null\n+     * @throws NullPointerException if the entry is null\n+     */\n+    public DefaultMapEntry(final KeyValue pair) {\n+        super(pair.getKey(), pair.getValue());\n+    }\n+\n+    /**\n+     * Constructs a new entry from the specified MapEntry.\n+     *\n+     * @param entry  the entry to copy, must not be null\n+     * @throws NullPointerException if the entry is null\n+     */\n+    public DefaultMapEntry(final Map.Entry entry) {\n+        super(entry.getKey(), entry.getValue());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/keyvalue/MultiKey.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/MultiKey.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n+/** \n+ * A <code>MultiKey</code> allows multiple map keys to be merged together.\n+ * <p>\n+ * The purpose of this class is to avoid the need to write code to handle\n+ * maps of maps. An example might be the need to lookup a filename by \n+ * key and locale. The typical solution might be nested maps. This class\n+ * can be used instead by creating an instance passing in the key and locale.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * \n+ * @author Howard Lewis Ship\n+ * @author Stephen Colebourne\n+ */\n+public class MultiKey implements Serializable {\n+\n+    /** Serialisation version */\n+    private static final long serialVersionUID = 4465448607415788805L;\n+\n+    /** The individual keys */\n+    private final Object[] keys;\n+    /** The cached hashCode */\n+    private final int hashCode;\n+    \n+    /**\n+     * Constructor taking two keys.\n+     * \n+     * @param key1  the first key\n+     * @param key2  the second key\n+     */\n+    public MultiKey(Object key1, Object key2) {\n+        this(new Object[] {key1, key2}, false);\n+    }\n+    \n+    /**\n+     * Constructor taking three keys.\n+     * \n+     * @param key1  the first key\n+     * @param key2  the second key\n+     * @param key3  the third key\n+     */\n+    public MultiKey(Object key1, Object key2, Object key3) {\n+        this(new Object[] {key1, key2, key3}, false);\n+    }\n+    \n+    /**\n+     * Constructor taking four keys.\n+     * \n+     * @param key1  the first key\n+     * @param key2  the second key\n+     * @param key3  the third key\n+     * @param key4  the fourth key\n+     */\n+    public MultiKey(Object key1, Object key2, Object key3, Object key4) {\n+        this(new Object[] {key1, key2, key3, key4}, false);\n+    }\n+    \n+    /**\n+     * Constructor taking five keys.\n+     * \n+     * @param key1  the first key\n+     * @param key2  the second key\n+     * @param key3  the third key\n+     * @param key4  the fourth key\n+     * @param key5  the fifth key\n+     */\n+    public MultiKey(Object key1, Object key2, Object key3, Object key4, Object key5) {\n+        this(new Object[] {key1, key2, key3, key4, key5}, false);\n+    }\n+    \n+    /**\n+     * Constructor taking an array of keys.\n+     *\n+     * @param keys  the array of keys\n+     * @throws IllegalArgumentException if the key array is null\n+     */\n+    public MultiKey(Object[] keys) {\n+        this(keys, true);\n+    }\n+    \n+    /**\n+     * Constructor taking an array of keys.\n+     * <p>\n+     * If the array is not copied, then it must not be modified.\n+     *\n+     * @param keys  the array of keys\n+     * @param makeCopy  true to copy the array, false to assign it\n+     * @throws IllegalArgumentException if the key array is null\n+     */\n+    protected MultiKey(Object[] keys, boolean makeCopy) {\n+        super();\n+        if (keys == null) {\n+            throw new IllegalArgumentException(\"The array of keys must not be null\");\n+        }\n+        if (makeCopy) {\n+            this.keys = (Object[]) keys.clone();\n+        } else {\n+            this.keys = keys;\n+        }\n+        \n+        int total = 0;\n+        for (int i = 0; i < keys.length; i++) {\n+            if (keys[i] != null) {\n+                if (i == 0) {\n+                    total = keys[i].hashCode();\n+                } else {\n+                    total ^= keys[i].hashCode();\n+                }\n+            }\n+        }\n+        hashCode = total;\n+    }\n+    \n+    /**\n+     * Gets a copy of the individual keys.\n+     * \n+     * @return the individual keys\n+     */\n+    public Object[] getKeys() {\n+        return (Object[]) keys.clone();\n+    }\n+    \n+    /**\n+     * Compares this object to another.\n+     * <p>\n+     * To be equal, the other object must be a <code>MultiKey</code> with the\n+     * same number of keys which are also equal.\n+     * \n+     * @param other  the other object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object other) {\n+        if (other == this) {\n+            return true;\n+        }\n+        if (other instanceof MultiKey) {\n+            MultiKey otherMulti = (MultiKey) other;\n+            return Arrays.equals(keys, otherMulti.keys);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets the combined hashcode that is computed from all the keys.\n+     * <p>\n+     * This value is computed once and then cached, so elements should not\n+     * change their hash codes once created (note that this is the same \n+     * constraint that would be used if the individual keys elements were\n+     * themselves {@link java.util.Map Map} keys.\n+     * \n+     * @return the hashcode\n+     */\n+    public int hashCode() {\n+        return hashCode;\n+    }\n+\n+    /**\n+     * Gets a debugging string version of the key.\n+     * \n+     * @return a debugging string\n+     */\n+    public String toString() {\n+        return \"MultiKey\" + Arrays.asList(keys).toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.collections.KeyValue;\n+\n+/**\n+ * A Map Entry tied to a map underneath.\n+ * <p>\n+ * This can be used to enable a map entry to make changes on the underlying\n+ * map, however this will probably mess up any iterators.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TiedMapEntry implements Map.Entry, KeyValue {\n+\n+    /** The map underlying the entry/iterator */    \n+    private final Map map;\n+    /** The key */\n+    private final Object key;\n+    \n+    /**\n+     * Constructs a new entry with the given Map and key.\n+     *\n+     * @param map  the map\n+     * @param key  the key\n+     */\n+    public TiedMapEntry(Map map, Object key) {\n+        super();\n+        this.map = map;\n+        this.key = key;\n+    }\n+\n+    // Map.Entry interface\n+    //-------------------------------------------------------------------------\n+    /**\n+     * Gets the key of this entry\n+     * \n+     * @return the key\n+     */\n+    public Object getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * Gets the value of this entry direct from the map.\n+     * \n+     * @return the value\n+     */\n+    public Object getValue() {\n+        return map.get(key);\n+    }\n+\n+    /**\n+     * Sets the value associated with the key direct onto the map.\n+     * \n+     * @param value  the new value\n+     * @return the old value\n+     * @throws IllegalArgumentException if the value is set to this map entry\n+     */\n+    public Object setValue(Object value) {\n+        if (value == this) {\n+            throw new IllegalArgumentException(\"Cannot set value to this map entry\");\n+        }\n+        return map.put(key, value);\n+    }\n+\n+    /**\n+     * Compares this Map Entry with another Map Entry.\n+     * <p>\n+     * Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal key and value\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof Map.Entry == false) {\n+            return false;\n+        }\n+        Map.Entry other = (Map.Entry) obj;\n+        Object value = getValue();\n+        return\n+            (key == null ? other.getKey() == null : key.equals(other.getKey())) &&\n+            (value == null ? other.getValue() == null : value.equals(other.getValue()));\n+    }\n+     \n+    /**\n+     * Gets a hashCode compatible with the equals method.\n+     * <p>\n+     * Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}\n+     * \n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        Object value = getValue();\n+        return (getKey() == null ? 0 : getKey().hashCode()) ^\n+               (value == null ? 0 : value.hashCode()); \n+    }\n+    \n+    /**\n+     * Gets a string version of the entry.\n+     * \n+     * @return entry as a string\n+     */\n+    public String toString() {\n+        return getKey() + \"=\" + getValue();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/keyvalue/UnmodifiableMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/UnmodifiableMapEntry.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.collections.KeyValue;\n+import org.apache.commons.collections.Unmodifiable;\n+\n+/**\n+ * A {@link java.util.Map.Entry} that throws UnsupportedOperationException\n+ * when <code>setValue</code> is called.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public final class UnmodifiableMapEntry extends AbstractMapEntry implements Unmodifiable {\n+    \n+    /**\n+     * Constructs a new entry with the specified key and given value.\n+     *\n+     * @param key  the key for the entry, may be null\n+     * @param value  the value for the entry, may be null\n+     */\n+    public UnmodifiableMapEntry(final Object key, final Object value) {\n+        super(key, value);\n+    }\n+\n+    /**\n+     * Constructs a new entry from the specified KeyValue.\n+     *\n+     * @param pair  the pair to copy, must not be null\n+     * @throws NullPointerException if the entry is null\n+     */\n+    public UnmodifiableMapEntry(final KeyValue pair) {\n+        super(pair.getKey(), pair.getValue());\n+    }\n+\n+    /**\n+     * Constructs a new entry from the specified MapEntry.\n+     *\n+     * @param entry  the entry to copy, must not be null\n+     * @throws NullPointerException if the entry is null\n+     */\n+    public UnmodifiableMapEntry(final Map.Entry entry) {\n+        super(entry.getKey(), entry.getValue());\n+    }\n+    \n+    /**\n+     * Throws UnsupportedOperationException.\n+     * \n+     * @param value  the new value\n+     * @return the previous value\n+     * @throws UnsupportedOperationException always\n+     */\n+    public Object setValue(Object value) {\n+        throw new UnsupportedOperationException(\"setValue() is not supported\");\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ListOrderedMap.java,v 1.5 2003/12/01 22:48:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ListOrderedMap.java,v 1.6 2003/12/05 20:23:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.OrderedMapIterator;\n import org.apache.commons.collections.ResettableIterator;\n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n-import org.apache.commons.collections.pairs.AbstractMapEntry;\n+import org.apache.commons.collections.keyvalue.AbstractMapEntry;\n \n /**\n  * Decorates a <code>Map</code> to ensure that the order of addition is retained.\n  * original position in the iteration.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/12/01 22:48:59 $\n+ * @version $Revision: 1.6 $ $Date: 2003/12/05 20:23:57 $\n  * \n  * @author Henri Yandell\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/java/org/apache/commons/collections/map/PredicatedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/PredicatedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/PredicatedMap.java,v 1.2 2003/12/05 20:23:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n-import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n+import org.apache.commons.collections.keyvalue.AbstractMapEntryDecorator;\n \n /**\n  * Decorates another <code>Map</code> to validate that additions\n  * is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/05 20:23:57 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/map/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/map/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ReferenceMap.java,v 1.1 2003/12/03 15:50:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ReferenceMap.java,v 1.2 2003/12/05 20:23:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n-import org.apache.commons.collections.pairs.DefaultMapEntry;\n+import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n \n /**\n  *  Hash-based {@link Map} implementation that allows\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/03 15:50:12 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/05 20:23:57 $\n  * \n  * @author Paul Jack\n  */\n--- a/src/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/java/org/apache/commons/collections/map/TransformedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/TransformedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/TransformedMap.java,v 1.2 2003/12/05 20:23:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.Transformer;\n import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n-import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n+import org.apache.commons.collections.keyvalue.AbstractMapEntryDecorator;\n \n /**\n  * Decorates another <code>Map</code> to transform objects that are added.\n  * use the Integer form to remove objects.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/05 20:23:57 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java,v 1.1 2003/12/03 12:27:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java,v 1.2 2003/12/05 20:23:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.Unmodifiable;\n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n-import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n+import org.apache.commons.collections.keyvalue.AbstractMapEntryDecorator;\n import org.apache.commons.collections.set.AbstractSetDecorator;\n \n /**\n  * Decorates a map entry <code>Set</code> to ensure it can't be altered.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/03 12:27:36 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/05 20:23:57 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/TestAllPackages.java\n+++ b/src/test/org/apache/commons/collections/TestAllPackages.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAllPackages.java,v 1.7 2003/11/16 20:35:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAllPackages.java,v 1.8 2003/12/05 20:23:58 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Entry point for all Collections project tests.\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/11/16 20:35:46 $\n+ * @version $Revision: 1.8 $ $Date: 2003/12/05 20:23:58 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(org.apache.commons.collections.bag.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.bidimap.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.buffer.TestAll.suite());\n+        suite.addTest(org.apache.commons.collections.collection.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.comparators.TestAll.suite());\n-        suite.addTest(org.apache.commons.collections.collection.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.iterators.TestAll.suite());\n+        suite.addTest(org.apache.commons.collections.keyvalue.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.list.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.map.TestAll.suite());\n-        suite.addTest(org.apache.commons.collections.observed.TestAll.suite());\n-        suite.addTest(org.apache.commons.collections.pairs.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.set.TestAll.suite());\n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/keyvalue/AbstractTestMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/keyvalue/AbstractTestMapEntry.java,v 1.1 2003/12/05 20:23:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Abstract tests that can be extended to test any Map.Entry implementation.\n+ * Subclasses must implement {@link #makeMapEntry(Object, Object)} to return\n+ * a new Map.Entry of the type being tested. Subclasses must also implement\n+ * {@link #testConstructors()} to test the constructors of the Map.Entry\n+ * type being tested.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:57 $\n+ * \n+ * @author Neil O'Toole\n+ */\n+public abstract class AbstractTestMapEntry extends TestCase {\n+    \n+    protected final String key = \"name\";\n+    protected final String value = \"duke\";\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test name\n+     */\n+    public AbstractTestMapEntry(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Make an instance of Map.Entry with the default (null) key and value.\n+     * This implementation simply calls {@link #makeMapEntry(Object, Object)}\n+     * with null for key and value. Subclasses can override this method if desired.\n+     */\n+    public Map.Entry makeMapEntry() {\n+        return makeMapEntry(null, null);\n+    }\n+\n+    /**\n+     * Make an instance of Map.Entry with the specified key and value.\n+     * Subclasses should override this method to return a Map.Entry\n+     * of the type being tested.\n+     */\n+    public abstract Map.Entry makeMapEntry(Object key, Object value);\n+\n+    /**\n+     * Makes a Map.Entry of a type that's known to work correctly.\n+     */\n+    public Map.Entry makeKnownMapEntry() {\n+        return makeKnownMapEntry(null, null);\n+    }\n+\n+    /**\n+     * Makes a Map.Entry of a type that's known to work correctly.\n+     */\n+    public Map.Entry makeKnownMapEntry(Object key, Object value) {\n+        Map map = new HashMap(1);\n+        map.put(key, value);\n+        Map.Entry entry = (Map.Entry) map.entrySet().iterator().next();\n+        return entry;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAccessorsAndMutators() {\n+        Map.Entry entry = makeMapEntry(key, value);\n+\n+        assertTrue(entry.getKey() == key);\n+\n+        entry.setValue(value);\n+        assertTrue(entry.getValue() == value);\n+\n+        // check that null doesn't do anything funny\n+        entry = makeMapEntry(null, null);\n+        assertTrue(entry.getKey() == null);\n+\n+        entry.setValue(null);\n+        assertTrue(entry.getValue() == null);\n+    }\n+\n+    /**\n+     * Subclasses should override this method to test the\n+     * desired behaviour of the class with respect to\n+     * handling of self-references.\n+     *\n+     */\n+\n+    public void testSelfReferenceHandling() {\n+        // test that #setValue does not permit\n+        //  the MapEntry to contain itself (and thus cause infinite recursion\n+        //  in #hashCode and #toString)\n+\n+        Map.Entry entry = makeMapEntry();\n+\n+        try {\n+            entry.setValue(entry);\n+            fail(\"Should throw an IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae) {\n+            // expected to happen...\n+\n+            // check that the KVP's state has not changed\n+            assertTrue(entry.getKey() == null && entry.getValue() == null);\n+        }\n+    }\n+\n+    /**\n+     * Subclasses should provide tests for their constructors.\n+     *\n+     */\n+    public abstract void testConstructors();\n+\n+    public void testEqualsAndHashCode() {\n+        // 1. test with object data\n+        Map.Entry e1 = makeMapEntry(key, value);\n+        Map.Entry e2 = makeKnownMapEntry(key, value);\n+\n+        assertTrue(e1.equals(e1));\n+        assertTrue(e2.equals(e1));\n+        assertTrue(e1.equals(e2));\n+        assertTrue(e1.hashCode() == e2.hashCode());\n+\n+        // 2. test with nulls\n+        e1 = makeMapEntry();\n+        e2 = makeKnownMapEntry();\n+\n+        assertTrue(e1.equals(e1));\n+        assertTrue(e2.equals(e1));\n+        assertTrue(e1.equals(e2));\n+        assertTrue(e1.hashCode() == e2.hashCode());\n+    }\n+\n+    public void testToString() {\n+        Map.Entry entry = makeMapEntry(key, value);\n+        assertTrue(entry.toString().equals(entry.getKey() + \"=\" + entry.getValue()));\n+\n+        // test with nulls\n+        entry = makeMapEntry();\n+        assertTrue(entry.toString().equals(entry.getKey() + \"=\" + entry.getValue()));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestAll.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/keyvalue/TestAll.java,v 1.1 2003/12/05 20:23:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for key-value test cases.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:57 $\n+ * \n+ * @author Neil O'Toole\n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+    \n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestAll.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestDefaultKeyValue.suite());\n+        suite.addTest(TestDefaultMapEntry.suite());\n+        suite.addTest(TestMultiKey.suite());\n+        suite.addTest(TestTiedMapEntry.suite());\n+        suite.addTest(TestUnmodifiableMapEntry.suite());\n+        return suite;\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestDefaultKeyValue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/keyvalue/TestDefaultKeyValue.java,v 1.1 2003/12/05 20:23:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test the DefaultKeyValue class.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:57 $\n+ * \n+ * @author Neil O'Toole\n+ */\n+public class TestDefaultKeyValue extends TestCase {\n+    \n+    private final String key = \"name\";\n+    private final String value = \"duke\";\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test name\n+     */\n+    public TestDefaultKeyValue(String testName) {\n+        super(testName);\n+\n+    }\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(TestDefaultKeyValue.class);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestDefaultKeyValue.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Make an instance of DefaultKeyValue with the default (null) key and value.\n+     * Subclasses should override this method to return a DefaultKeyValue\n+     * of the type being tested.\n+     */\n+    protected DefaultKeyValue makeDefaultKeyValue() {\n+        return new DefaultKeyValue(null, null);\n+    }\n+\n+    /**\n+     * Make an instance of DefaultKeyValue with the specified key and value.\n+     * Subclasses should override this method to return a DefaultKeyValue\n+     * of the type being tested.\n+     */\n+    protected DefaultKeyValue makeDefaultKeyValue(Object key, Object value) {\n+        return new DefaultKeyValue(key, value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAccessorsAndMutators() {\n+        DefaultKeyValue kv = makeDefaultKeyValue();\n+\n+        kv.setKey(key);\n+        assertTrue(kv.getKey() == key);\n+\n+        kv.setValue(value);\n+        assertTrue(kv.getValue() == value);\n+\n+        // check that null doesn't do anything funny\n+        kv.setKey(null);\n+        assertTrue(kv.getKey() == null);\n+\n+        kv.setValue(null);\n+        assertTrue(kv.getValue() == null);\n+\n+    }\n+\n+    public void testSelfReferenceHandling() {\n+        // test that #setKey and #setValue do not permit\n+        //  the KVP to contain itself (and thus cause infinite recursion\n+        //  in #hashCode and #toString)\n+\n+        DefaultKeyValue kv = makeDefaultKeyValue();\n+\n+        try {\n+            kv.setKey(kv);\n+            fail(\"Should throw an IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae) {\n+            // expected to happen...\n+\n+            // check that the KVP's state has not changed\n+            assertTrue(kv.getKey() == null && kv.getValue() == null);\n+        }\n+\n+        try {\n+            kv.setValue(kv);\n+            fail(\"Should throw an IllegalArgumentException\");\n+        } catch (IllegalArgumentException iae) {\n+            // expected to happen...\n+\n+            // check that the KVP's state has not changed\n+            assertTrue(kv.getKey() == null && kv.getValue() == null);\n+        }\n+    }\n+\n+    /**\n+     * Subclasses should override this method to test their own constructors.\n+     */\n+    public void testConstructors() {\n+        // 1. test default constructor\n+        DefaultKeyValue kv = new DefaultKeyValue();\n+        assertTrue(kv.getKey() == null && kv.getValue() == null);\n+\n+        // 2. test key-value constructor\n+        kv = new DefaultKeyValue(key, value);\n+        assertTrue(kv.getKey() == key && kv.getValue() == value);\n+\n+        // 3. test copy constructor\n+        DefaultKeyValue kv2 = new DefaultKeyValue(kv);\n+        assertTrue(kv2.getKey() == key && kv2.getValue() == value);\n+\n+        // test that the KVPs are independent\n+        kv.setKey(null);\n+        kv.setValue(null);\n+\n+        assertTrue(kv2.getKey() == key && kv2.getValue() == value);\n+\n+        // 4. test Map.Entry constructor\n+        Map map = new HashMap();\n+        map.put(key, value);\n+        Map.Entry entry = (Map.Entry) map.entrySet().iterator().next();\n+\n+        kv = new DefaultKeyValue(entry);\n+        assertTrue(kv.getKey() == key && kv.getValue() == value);\n+\n+        // test that the KVP is independent of the Map.Entry\n+        entry.setValue(null);\n+        assertTrue(kv.getValue() == value);\n+\n+    }\n+\n+    public void testEqualsAndHashCode() {\n+        // 1. test with object data\n+        DefaultKeyValue kv = makeDefaultKeyValue(key, value);\n+        DefaultKeyValue kv2 = makeDefaultKeyValue(key, value);\n+\n+        assertTrue(kv.equals(kv));\n+        assertTrue(kv.equals(kv2));\n+        assertTrue(kv.hashCode() == kv2.hashCode());\n+\n+        // 2. test with nulls\n+        kv = makeDefaultKeyValue(null, null);\n+        kv2 = makeDefaultKeyValue(null, null);\n+\n+        assertTrue(kv.equals(kv));\n+        assertTrue(kv.equals(kv2));\n+        assertTrue(kv.hashCode() == kv2.hashCode());\n+    }\n+\n+    public void testToString() {\n+        DefaultKeyValue kv = makeDefaultKeyValue(key, value);\n+        assertTrue(kv.toString().equals(kv.getKey() + \"=\" + kv.getValue()));\n+\n+        // test with nulls\n+        kv = makeDefaultKeyValue(null, null);\n+        assertTrue(kv.toString().equals(kv.getKey() + \"=\" + kv.getValue()));\n+    }\n+\n+    public void testToMapEntry() {\n+        DefaultKeyValue kv = makeDefaultKeyValue(key, value);\n+\n+        Map map = new HashMap();\n+        map.put(kv.getKey(), kv.getValue());\n+        Map.Entry entry = (Map.Entry) map.entrySet().iterator().next();\n+\n+        assertTrue(entry.equals(kv.toMapEntry()));\n+        assertTrue(entry.hashCode() == kv.hashCode());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestDefaultMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/keyvalue/TestDefaultMapEntry.java,v 1.1 2003/12/05 20:23:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.KeyValue;\n+\n+/**\n+ * Test the DefaultMapEntry class.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:57 $\n+ * \n+ * @author Neil O'Toole\n+ */\n+public class TestDefaultMapEntry extends AbstractTestMapEntry {\n+\n+    public TestDefaultMapEntry(String testName) {\n+        super(testName);\n+\n+    }\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(TestDefaultMapEntry.class);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestDefaultMapEntry.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Make an instance of Map.Entry with the default (null) key and value.\n+     * Subclasses should override this method to return a Map.Entry\n+     * of the type being tested.\n+     */\n+    public Map.Entry makeMapEntry() {\n+        return new DefaultMapEntry(null, null);\n+    }\n+\n+    /**\n+     * Make an instance of Map.Entry with the specified key and value.\n+     * Subclasses should override this method to return a Map.Entry\n+     * of the type being tested.\n+     */\n+    public Map.Entry makeMapEntry(Object key, Object value) {\n+        return new DefaultMapEntry(key, value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Subclasses should override this method.\n+     *\n+     */\n+    public void testConstructors() {\n+        // 1. test key-value constructor\n+        Map.Entry entry = new DefaultMapEntry(key, value);\n+        assertSame(key, entry.getKey());\n+        assertSame(value, entry.getValue());\n+\n+        // 2. test pair constructor\n+        KeyValue pair = new DefaultKeyValue(key, value);\n+        assertSame(key, pair.getKey());\n+        assertSame(value, pair.getValue());\n+\n+        // 3. test copy constructor\n+        Map.Entry entry2 = new DefaultMapEntry(entry);\n+        assertSame(key, entry2.getKey());\n+        assertSame(value, entry2.getValue());\n+\n+        // test that the objects are independent\n+        entry.setValue(null);\n+        assertSame(value, entry2.getValue());\n+    }\n+\n+    public void testSelfReferenceHandling() {\n+        Map.Entry entry = makeMapEntry();\n+\n+        try {\n+            entry.setValue(entry);\n+            assertSame(entry, entry.getValue());\n+\n+        } catch (Exception e) {\n+            fail(\"This Map.Entry implementation supports value self-reference.\");\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/keyvalue/TestMultiKey.java,v 1.1 2003/12/05 20:23:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.Arrays;\n+\n+import junit.framework.Assert;\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.collections.MultiKey}.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:57 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestMultiKey extends TestCase {\n+\n+    Integer ONE = new Integer(1);\n+    Integer TWO = new Integer(2);\n+    Integer THREE = new Integer(3);\n+    Integer FOUR = new Integer(4);\n+    Integer FIVE = new Integer(5);\n+    \n+    public TestMultiKey(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestMultiKey.class);\n+    }\n+\n+    public static void main(String[] args) {\n+        String[] testCaseName = { TestMultiKey.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+    \n+\n+    public void testConstructorsAndGet() throws Exception {\n+        MultiKey mk = null;\n+        mk = new MultiKey(ONE, TWO);\n+        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO}, mk.getKeys()));\n+\n+        mk = new MultiKey(ONE, TWO, THREE);\n+        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO, THREE}, mk.getKeys()));\n+\n+        mk = new MultiKey(ONE, TWO, THREE, FOUR);\n+        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO, THREE, FOUR}, mk.getKeys()));\n+\n+        mk = new MultiKey(ONE, TWO, THREE, FOUR, FIVE);\n+        Assert.assertTrue(Arrays.equals(new Object[] {ONE, TWO, THREE, FOUR, FIVE}, mk.getKeys()));\n+\n+        mk = new MultiKey(new Object[] {THREE, FOUR, ONE, TWO}, false);\n+        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n+\n+        // don't do this!\n+        Object[] keys = new Object[] {THREE, FOUR, ONE, TWO};\n+        mk = new MultiKey(keys);\n+        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n+        keys[3] = FIVE;  // no effect\n+        Assert.assertTrue(Arrays.equals(new Object[] {THREE, FOUR, ONE, TWO}, mk.getKeys()));\n+    }\n+    \n+    public void testHashCode() {\n+        MultiKey mk1 = new MultiKey(ONE, TWO);\n+        MultiKey mk2 = new MultiKey(ONE, TWO);\n+        MultiKey mk3 = new MultiKey(ONE, \"TWO\");\n+        \n+        Assert.assertTrue(mk1.hashCode() == mk1.hashCode());\n+        Assert.assertTrue(mk1.hashCode() == mk2.hashCode());\n+        Assert.assertTrue(mk1.hashCode() != mk3.hashCode());\n+    }\n+    \n+    public void testEquals() {\n+        MultiKey mk1 = new MultiKey(ONE, TWO);\n+        MultiKey mk2 = new MultiKey(ONE, TWO);\n+        MultiKey mk3 = new MultiKey(ONE, \"TWO\");\n+        \n+        Assert.assertEquals(mk1, mk1);\n+        Assert.assertEquals(mk1, mk2);\n+        Assert.assertTrue(mk1.equals(mk3) == false);\n+        Assert.assertTrue(mk1.equals(\"\") == false);\n+        Assert.assertTrue(mk1.equals(null) == false);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestTiedMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/keyvalue/TestTiedMapEntry.java,v 1.1 2003/12/05 20:23:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test the TiedMapEntry class.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:57 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTiedMapEntry extends AbstractTestMapEntry {\n+\n+    public TestTiedMapEntry(String testName) {\n+        super(testName);\n+\n+    }\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(TestTiedMapEntry.class);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTiedMapEntry.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the instance to test\n+     */\n+    public Map.Entry makeMapEntry(Object key, Object value) {\n+        Map map = new HashMap();\n+        map.put(key, value);\n+        return new TiedMapEntry(map, key);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests the constructors.\n+     */\n+    public void testConstructors() {\n+        // ignore\n+    }\n+\n+    /**\n+     * Tests the constructors.\n+     */\n+    public void testSetValue() {\n+        Map map = new HashMap();\n+        map.put(\"A\", \"a\");\n+        map.put(\"B\", \"b\");\n+        map.put(\"C\", \"c\");\n+        Map.Entry entry = new TiedMapEntry(map, \"A\");\n+        assertSame(\"A\", entry.getKey());\n+        assertSame(\"a\", entry.getValue());\n+        assertSame(\"a\", entry.setValue(\"x\"));\n+        assertSame(\"A\", entry.getKey());\n+        assertSame(\"x\", entry.getValue());\n+        \n+        entry = new TiedMapEntry(map, \"B\");\n+        assertSame(\"B\", entry.getKey());\n+        assertSame(\"b\", entry.getValue());\n+        assertSame(\"b\", entry.setValue(\"y\"));\n+        assertSame(\"B\", entry.getKey());\n+        assertSame(\"y\", entry.getValue());\n+        \n+        entry = new TiedMapEntry(map, \"C\");\n+        assertSame(\"C\", entry.getKey());\n+        assertSame(\"c\", entry.getValue());\n+        assertSame(\"c\", entry.setValue(\"z\"));\n+        assertSame(\"C\", entry.getKey());\n+        assertSame(\"z\", entry.getValue());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/keyvalue/TestUnmodifiableMapEntry.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/keyvalue/TestUnmodifiableMapEntry.java,v 1.1 2003/12/05 20:23:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.keyvalue;\n+\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.KeyValue;\n+import org.apache.commons.collections.Unmodifiable;\n+\n+/**\n+ * Test the UnmodifiableMapEntry class.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:57 $\n+ * \n+ * @author Neil O'Toole\n+ */\n+public class TestUnmodifiableMapEntry extends AbstractTestMapEntry {\n+\n+    public TestUnmodifiableMapEntry(String testName) {\n+        super(testName);\n+\n+    }\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(TestUnmodifiableMapEntry.class);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestUnmodifiableMapEntry.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Make an instance of Map.Entry with the default (null) key and value.\n+     * Subclasses should override this method to return a Map.Entry\n+     * of the type being tested.\n+     */\n+    public Map.Entry makeMapEntry() {\n+        return new UnmodifiableMapEntry(null, null);\n+    }\n+\n+    /**\n+     * Make an instance of Map.Entry with the specified key and value.\n+     * Subclasses should override this method to return a Map.Entry\n+     * of the type being tested.\n+     */\n+    public Map.Entry makeMapEntry(Object key, Object value) {\n+        return new UnmodifiableMapEntry(key, value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Subclasses should override this method.\n+     *\n+     */\n+    public void testConstructors() {\n+        // 1. test key-value constructor\n+        Map.Entry entry = new UnmodifiableMapEntry(key, value);\n+        assertSame(key, entry.getKey());\n+        assertSame(value, entry.getValue());\n+\n+        // 2. test pair constructor\n+        KeyValue pair = new DefaultKeyValue(key, value);\n+        entry = new UnmodifiableMapEntry(pair);\n+        assertSame(key, entry.getKey());\n+        assertSame(value, entry.getValue());\n+\n+        // 3. test copy constructor\n+        Map.Entry entry2 = new UnmodifiableMapEntry(entry);\n+        assertSame(key, entry2.getKey());\n+        assertSame(value, entry2.getValue());\n+\n+        assertTrue(entry instanceof Unmodifiable);\n+    }\n+\n+    public void testAccessorsAndMutators() {\n+        Map.Entry entry = makeMapEntry(key, value);\n+\n+        assertSame(key, entry.getKey());\n+        assertSame(value, entry.getValue());\n+\n+        // check that null doesn't do anything funny\n+        entry = makeMapEntry(null, null);\n+        assertSame(null, entry.getKey());\n+        assertSame(null, entry.getValue());\n+    }\n+\n+    public void testSelfReferenceHandling() {\n+        // block\n+    }\n+\n+    public void testUnmodifiable() {\n+        Map.Entry entry = makeMapEntry();\n+        try {\n+            entry.setValue(null);\n+            fail();\n+\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+\n+}", "timestamp": 1070655926, "metainfo": ""}