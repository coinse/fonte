{"sha": "1a806b1f2a8563b50646c2504329f36915ef1074", "log": "Add GrowthList, an auto-grow on set/add list bug 34171, including code from Paul Legato  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/list/GrowthList.java\n+/*\n+ *  Copyright 2005 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Decorates another <code>List</code> to make it seemlessly grow when\n+ * indices larger than the list size are used on add and set,\n+ * avoiding most IndexOutOfBoundsExceptions.\n+ * <p>\n+ * This class avoids errors by growing when a set or add method would\n+ * normally throw an IndexOutOfBoundsException.\n+ * Note that IndexOutOfBoundsException IS returned for invalid negative indices.\n+ * <p>\n+ * Trying to set or add to an index larger than the size will cause the list\n+ * to grow (using <code>null</code> elements). Clearly, care must be taken\n+ * not to use excessively large indices, as the internal list will grow to\n+ * match.\n+ * <p>\n+ * Trying to use any method other than add or set with an invalid inde will\n+ * call the underlying list and probably result in an IndexOutOfBoundsException.\n+ * <p>\n+ * Take care when using this list with <code>null</code> values, as\n+ * <code>null</code> is the value added when growing the list.\n+ * <p>\n+ * All sub-lists will access the underlying list directly, and will throw\n+ * IndexOutOfBoundsExceptions.\n+ * <p>\n+ * This class differs from {@link LazyList} because here growth occurs on\n+ * set and add, where <code>LazyList</code> grows on get. However, they\n+ * could easily be used together by decorating twice.\n+ *\n+ * @see LazyList\n+ * @since Commons Collections 3.2\n+ * @version $Revision: 155406 $ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Legato\n+ */\n+public class GrowthList extends AbstractSerializableListDecorator {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = -3620001881672L;\n+\n+    /**\n+     * Factory method to create a growth list.\n+     *\n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    public static List decorate(List list) {\n+        return new GrowthList(list);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that uses an ArrayList internally.\n+     */\n+    public GrowthList() {\n+        super(new ArrayList());\n+    }\n+\n+    /**\n+     * Constructor that uses an ArrayList internally.\n+     *\n+     * @param initialSize  the initial size of the ArrayList\n+     * @throws IllegalArgumentException if initial size is invalid\n+     */\n+    public GrowthList(int initialSize) {\n+        super(new ArrayList(initialSize));\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     *\n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected GrowthList(List list) {\n+        super(list);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Decorate the add method to perform the growth behaviour.\n+     * <p>\n+     * If the requested index is greater than the current size, the list will\n+     * grow to the new size. Indices between the old size and the requested\n+     * size will be filled with <code>null</code>.\n+     * <p>\n+     * If the index is less than the current size, the value will be added to\n+     * the underlying list directly.\n+     * If the index is less than zero, the underlying list is called, which\n+     * will probably throw an IndexOutOfBoundsException.\n+     *\n+     * @param index  the index to add at\n+     * @param element  the object to add at the specified index\n+     * @throws UnsupportedOperationException if the underlying list doesn't implement set\n+     * @throws ClassCastException if the underlying list rejects the element\n+     * @throws IllegalArgumentException if the underlying list rejects the element\n+     */\n+    public void add(int index, Object element) {\n+        int size = getList().size();\n+        if (index > size) {\n+            getList().addAll(Collections.nCopies(index - size, null));\n+        }\n+        getList().add(index, element);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Decorate the addAll method to perform the growth behaviour.\n+     * <p>\n+     * If the requested index is greater than the current size, the list will\n+     * grow to the new size. Indices between the old size and the requested\n+     * size will be filled with <code>null</code>.\n+     * <p>\n+     * If the index is less than the current size, the values will be added to\n+     * the underlying list directly.\n+     * If the index is less than zero, the underlying list is called, which\n+     * will probably throw an IndexOutOfBoundsException.\n+     *\n+     * @param index  the index to add at\n+     * @param coll  the collection to add at the specified index\n+     * @return true if the list changed\n+     * @throws UnsupportedOperationException if the underlying list doesn't implement set\n+     * @throws ClassCastException if the underlying list rejects the element\n+     * @throws IllegalArgumentException if the underlying list rejects the element\n+     */\n+    public boolean addAll(int index, Collection coll) {\n+        int size = getList().size();\n+        boolean result = false;\n+        if (index > size) {\n+            getList().addAll(Collections.nCopies(index - size, null));\n+            result = true;\n+        }\n+        return (getList().addAll(index, coll) | result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Decorate the set method to perform the growth behaviour.\n+     * <p>\n+     * If the requested index is greater than the current size, the list will\n+     * grow to the new size. Indices between the old size and the requested\n+     * size will be filled with <code>null</code>.\n+     * <p>\n+     * If the index is less than the current size, the value will be set onto\n+     * the underlying list directly.\n+     * If the index is less than zero, the underlying list is called, which\n+     * will probably throw an IndexOutOfBoundsException.\n+     *\n+     * @param index  the index to set\n+     * @param element  the object to set at the specified index\n+     * @return the object previously at that index\n+     * @throws UnsupportedOperationException if the underlying list doesn't implement set\n+     * @throws ClassCastException if the underlying list rejects the element\n+     * @throws IllegalArgumentException if the underlying list rejects the element\n+     */\n+    public Object set(int index, Object element) {\n+        int size = getList().size();\n+        if (index >= size) {\n+            getList().addAll(Collections.nCopies((index - size) + 1, null));\n+        }\n+        return getList().set(index, element);\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/list/LazyList.java\n+++ b/src/java/org/apache/commons/collections/list/LazyList.java\n  * instance is the fourth element in the list.  The first, second, \n  * and third element are all set to <code>null</code>.\n  * <p>\n+ * This class differs from {@link GrowthList} because here growth occurs on\n+ * get, where <code>GrowthList</code> grows on set and add. However, they\n+ * could easily be used together by decorating twice.\n+ * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n+ * @see GrowthList\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n  * \n--- a/src/test/org/apache/commons/collections/list/TestAll.java\n+++ b/src/test/org/apache/commons/collections/list/TestAll.java\n         suite.addTest(TestTreeList.suite());\n         \n         suite.addTest(TestFixedSizeList.suite());\n+        suite.addTest(TestGrowthList.suite());\n         suite.addTest(TestPredicatedList.suite());\n         suite.addTest(TestSetUniqueList.suite());\n         suite.addTest(TestSynchronizedList.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/list/TestGrowthList.java\n+/*\n+ *  Copyright 2005 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Extension of {@link TestList} for exercising the {@link GrowthList}.\n+ *\n+ * @since Commons Collections 3.2\n+ * @version $Revision: 155406 $ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestGrowthList extends AbstractTestList {\n+\n+    public TestGrowthList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestGrowthList.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestGrowthList.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public List makeEmptyList() {\n+        return new GrowthList();\n+    }\n+\n+    public List makeFullList() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return GrowthList.decorate(list);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGrowthAdd() {\n+        Integer one = new Integer(1);\n+        GrowthList grower = new GrowthList();\n+        assertEquals(0, grower.size());\n+        grower.add(1, one);\n+        assertEquals(2, grower.size());\n+        assertEquals(null, grower.get(0));\n+        assertEquals(one, grower.get(1));\n+    }\n+\n+    public void testGrowthAddAll() {\n+        Integer one = new Integer(1);\n+        Integer two = new Integer(2);\n+        Collection coll = new ArrayList();\n+        coll.add(one);\n+        coll.add(two);\n+        GrowthList grower = new GrowthList();\n+        assertEquals(0, grower.size());\n+        grower.addAll(1, coll);\n+        assertEquals(3, grower.size());\n+        assertEquals(null, grower.get(0));\n+        assertEquals(one, grower.get(1));\n+        assertEquals(two, grower.get(2));\n+    }\n+\n+    public void testGrowthSet1() {\n+        Integer one = new Integer(1);\n+        GrowthList grower = new GrowthList();\n+        assertEquals(0, grower.size());\n+        grower.set(1, one);\n+        assertEquals(2, grower.size());\n+        assertEquals(null, grower.get(0));\n+        assertEquals(one, grower.get(1));\n+    }\n+\n+    public void testGrowthSet2() {\n+        Integer one = new Integer(1);\n+        GrowthList grower = new GrowthList();\n+        assertEquals(0, grower.size());\n+        grower.set(0, one);\n+        assertEquals(1, grower.size());\n+        assertEquals(one, grower.get(0));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Override.\n+     */\n+    public void testListAddByIndexBoundsChecking() {\n+        List list;\n+        Object element = getOtherElements()[0];\n+        try {\n+            list = makeEmptyList();\n+            list.add(-1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     * Override.\n+     */\n+    public void testListAddByIndexBoundsChecking2() {\n+        List list;\n+        Object element = getOtherElements()[0];\n+        try {\n+            list = makeFullList();\n+            list.add(-1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     * Override.\n+     */\n+    public void testListSetByIndexBoundsChecking() {\n+        List list = makeEmptyList();\n+        Object element = getOtherElements()[0];\n+        try {\n+            list.set(-1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     * Override.\n+     */\n+    public void testListSetByIndexBoundsChecking2() {\n+        List list = makeFullList();\n+        Object element = getOtherElements()[0];\n+        try {\n+            list.set(-1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public String getCompatibilityVersion() {\n+        return \"3.2\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"C:/commons/collections/data/test/GrowthList.emptyCollection.version3.2.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"C:/commons/collections/data/test/GrowthList.fullCollection.version3.2.obj\");\n+//    }\n+\n+}", "timestamp": 1116181849, "metainfo": ""}