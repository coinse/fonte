{"sha": "1093d39c115aa8bbfb35682f1ff06e3e1a41a9d4", "log": "Make synchronized classes serializable   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bag/SynchronizedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/SynchronizedBag.java\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated bag.\n  * Iterators must be separately synchronized around the loop.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/05/15 12:27:04 $\n+ * @version $Revision: 1.7 $ $Date: 2004/06/01 23:05:48 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated bag.\n  * Iterators must be separately synchronized around the loop.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/05/15 12:27:04 $\n+ * @version $Revision: 1.7 $ $Date: 2004/06/01 23:05:48 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n  * There is no guarantee that concurrent blocked <code>get</code> or \n  * <code>remove</code> requests will be \"unblocked\" and receive data in the \n  * order that they arrive.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/05/16 10:45:52 $\n+ * @version $Revision: 1.6 $ $Date: 2004/06/01 23:05:49 $\n  * \n  * @author Stephen Colebourne\n  * @author Janek Bogucki\n--- a/src/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java\n  * for a multi-threaded environment.\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated buffer.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/05/15 12:33:23 $\n+ * @version $Revision: 1.5 $ $Date: 2004/06/01 23:05:49 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n  */\n package org.apache.commons.collections.collection;\n \n+import java.io.Serializable;\n import java.util.Collection;\n import java.util.Iterator;\n \n  *   // do stuff with iterator\n  * }\n  * </pre>\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2004/05/15 12:39:13 $\n+ * @version $Revision: 1.6 $ $Date: 2004/06/01 23:05:49 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class SynchronizedCollection implements Collection {\n+public class SynchronizedCollection implements Collection, Serializable {\n \n+    /** Serialization version */\n+    private static final long serialVersionUID = 2412805092710877986L;\n     /** The collection to decorate */\n     protected final Collection collection;\n     /** The object to lock on, needed for List/SortedSet views */\n--- a/src/java/org/apache/commons/collections/list/SynchronizedList.java\n+++ b/src/java/org/apache/commons/collections/list/SynchronizedList.java\n  * for a multi-threaded environment.\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated list.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 01:12:26 $\n+ * @version $Revision: 1.4 $ $Date: 2004/06/01 23:05:49 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/set/SynchronizedSet.java\n+++ b/src/java/org/apache/commons/collections/set/SynchronizedSet.java\n  * multi-threaded environment.\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated set.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 01:14:27 $\n+ * @version $Revision: 1.4 $ $Date: 2004/06/01 23:05:49 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/set/SynchronizedSortedSet.java\n+++ b/src/java/org/apache/commons/collections/set/SynchronizedSortedSet.java\n  * for a multi-threaded environment.\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated set.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 01:14:27 $\n+ * @version $Revision: 1.4 $ $Date: 2004/06/01 23:05:49 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/test/org/apache/commons/collections/collection/TestAll.java\n+++ b/src/test/org/apache/commons/collections/collection/TestAll.java\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 01:20:40 $\n+ * @version $Revision: 1.5 $ $Date: 2004/06/01 23:07:12 $\n  * \n  * @author Stephen Colebourne\n  */\n         \n         suite.addTest(TestCompositeCollection.suite());\n         suite.addTest(TestPredicatedCollection.suite());\n+        suite.addTest(TestSynchronizedCollection.suite());\n         suite.addTest(TestTransformedCollection.suite());\n         suite.addTest(TestUnmodifiableCollection.suite());\n         \n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/collection/TestSynchronizedCollection.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Extension of {@link AbstractTestCollection} for exercising the \n+ * {@link SynchronizedCollection} implementation.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/06/01 23:07:12 $\n+ * \n+ * @author Phil Steitz\n+ * @author Stephen Colebourne\n+ */\n+public class TestSynchronizedCollection extends AbstractTestCollection {\n+    \n+    public TestSynchronizedCollection(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestSynchronizedCollection.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestSynchronizedCollection.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public Collection makeCollection() {\n+        return SynchronizedCollection.decorate(new ArrayList());\n+    }\n+    \n+    public Collection makeConfirmedCollection() {\n+        ArrayList list = new ArrayList();\n+        return list;\n+    }\n+\n+    public Collection makeConfirmedFullCollection() {\n+        ArrayList list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedCollection.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedCollection.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/list/TestAll.java\n+++ b/src/test/org/apache/commons/collections/list/TestAll.java\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/05/10 19:59:03 $\n+ * @version $Revision: 1.7 $ $Date: 2004/06/01 23:08:04 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestFixedSizeList.suite());\n         suite.addTest(TestPredicatedList.suite());\n         suite.addTest(TestSetUniqueList.suite());\n+        suite.addTest(TestSynchronizedList.suite());\n         suite.addTest(TestTransformedList.suite());\n+//        suite.addTest(TestTypedList.suite());\n         suite.addTest(TestUnmodifiableList.suite());\n         \n         return suite;\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/list/TestSynchronizedList.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Extension of {@link TestList} for exercising the {@link SynchronizedList}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/06/01 23:08:04 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestSynchronizedList extends AbstractTestList {\n+    \n+    public TestSynchronizedList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestSynchronizedList.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestSynchronizedList.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Collection makeConfirmedCollection() {\n+        return new ArrayList();\n+    }\n+\n+    public List makeEmptyList() {\n+        return SynchronizedList.decorate(new ArrayList());\n+    }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedList.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedList.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/set/TestAll.java\n+++ b/src/test/org/apache/commons/collections/set/TestAll.java\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2004/04/20 23:51:31 $\n+ * @version $Revision: 1.7 $ $Date: 2004/06/01 23:08:50 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestMapBackedSet2.suite());\n         suite.addTest(TestPredicatedSet.suite());\n         suite.addTest(TestPredicatedSortedSet.suite());\n+        suite.addTest(TestSynchronizedSet.suite());\n+        suite.addTest(TestSynchronizedSortedSet.suite());\n         suite.addTest(TestTransformedSet.suite());\n         suite.addTest(TestTransformedSortedSet.suite());\n+//        suite.addTest(TestTypedSet.suite());\n         suite.addTest(TestTypedSortedSet.suite());\n         suite.addTest(TestUnmodifiableSet.suite());\n         suite.addTest(TestUnmodifiableSortedSet.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestSynchronizedSet.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Extension of {@link AbstractTestSet} for exercising the \n+ * {@link SynchronizedSet} implementation.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/06/01 23:08:50 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestSynchronizedSet extends AbstractTestSet{\n+    \n+    public TestSynchronizedSet(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestSynchronizedSet.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestSynchronizedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+   //-------------------------------------------------------------------      \n+    public Set makeEmptySet() {\n+        return SynchronizedSet.decorate(new HashSet());\n+    }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestSynchronizedSortedSet.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Extension of {@link AbstractTestSet} for exercising the \n+ * {@link SynchronizedSortedSet} implementation.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/06/01 23:08:50 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestSynchronizedSortedSet extends AbstractTestSortedSet{\n+    \n+    public TestSynchronizedSortedSet(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestSynchronizedSortedSet.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestSynchronizedSortedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+   //-------------------------------------------------------------------      \n+    public Set makeEmptySet() {\n+        return SynchronizedSortedSet.decorate(new TreeSet());\n+    }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedSortedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedSortedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}", "timestamp": 1086131367, "metainfo": ""}