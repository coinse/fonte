{"sha": "53cf9ed7f642bb2055c54d41c77cc2a252fc2da5", "log": "Remove trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/comparators/BooleanComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/BooleanComparator.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Returns a BooleanComparator instance that sorts \n+     * Returns a BooleanComparator instance that sorts\n      * <code>true</code> values before <code>false</code> values.\n      * <p />\n-     * Clients are encouraged to use the value returned from \n-     * this method instead of constructing a new instance \n+     * Clients are encouraged to use the value returned from\n+     * this method instead of constructing a new instance\n      * to reduce allocation and garbage collection overhead when\n-     * multiple BooleanComparators may be used in the same \n+     * multiple BooleanComparators may be used in the same\n      * virtual machine.\n-     * \n+     *\n      * @return the true first singleton BooleanComparator\n      */\n     public static BooleanComparator getTrueFirstComparator() {\n         return TRUE_FIRST;\n     }\n-    \n+\n     /**\n-     * Returns a BooleanComparator instance that sorts \n+     * Returns a BooleanComparator instance that sorts\n      * <code>false</code> values before <code>true</code> values.\n      * <p />\n-     * Clients are encouraged to use the value returned from \n-     * this method instead of constructing a new instance \n+     * Clients are encouraged to use the value returned from\n+     * this method instead of constructing a new instance\n      * to reduce allocation and garbage collection overhead when\n-     * multiple BooleanComparators may be used in the same \n+     * multiple BooleanComparators may be used in the same\n      * virtual machine.\n-     * \n+     *\n      * @return the false first singleton BooleanComparator\n      */\n     public static BooleanComparator getFalseFirstComparator() {\n         return FALSE_FIRST;\n     }\n-        \n+\n     /**\n-     * Returns a BooleanComparator instance that sorts \n-     * <code><i>trueFirst</i></code> values before \n+     * Returns a BooleanComparator instance that sorts\n+     * <code><i>trueFirst</i></code> values before\n      * <code>&#x21;<i>trueFirst</i></code> values.\n      * <p />\n-     * Clients are encouraged to use the value returned from \n-     * this method instead of constructing a new instance \n+     * Clients are encouraged to use the value returned from\n+     * this method instead of constructing a new instance\n      * to reduce allocation and garbage collection overhead when\n-     * multiple BooleanComparators may be used in the same \n+     * multiple BooleanComparators may be used in the same\n      * virtual machine.\n-     * \n-     * @param trueFirst when <code>true</code>, sort \n+     *\n+     * @param trueFirst when <code>true</code>, sort\n      * <code>true</code> <code>Boolean</code>s before <code>false</code>\n      * @return a singleton BooleanComparator instance\n      */\n \n     /**\n      * Creates a <code>BooleanComparator</code> that sorts\n-     * <code><i>trueFirst</i></code> values before \n+     * <code><i>trueFirst</i></code> values before\n      * <code>&#x21;<i>trueFirst</i></code> values.\n      * <p>\n      * Please use the static factories instead whenever possible.\n-     * \n-     * @param trueFirst when <code>true</code>, sort \n+     *\n+     * @param trueFirst when <code>true</code>, sort\n      *  <code>true</code> boolean values before <code>false</code>\n      */\n     public BooleanComparator(final boolean trueFirst) {\n     /**\n      * Compares two non-<code>null</code> <code>Boolean</code> objects\n      * according to the value of {@link #sortsTrueFirst()}.\n-     * \n+     *\n      * @param b1  the first boolean to compare\n      * @param b2  the second boolean to compare\n      * @return negative if obj1 is less, positive if greater, zero if equal\n     }\n \n     /**\n-     * Returns <code>true</code> iff <i>that</i> Object is \n-     * is a {@link Comparator} whose ordering is known to be \n+     * Returns <code>true</code> iff <i>that</i> Object is\n+     * is a {@link Comparator} whose ordering is known to be\n      * equivalent to mine.\n      * <p>\n      * This implementation returns <code>true</code>\n-     * iff <code><i>that</i></code> is a {@link BooleanComparator} \n+     * iff <code><i>that</i></code> is a {@link BooleanComparator}\n      * whose value of {@link #sortsTrueFirst()} is equal to mine.\n-     * \n+     *\n      * @param object  the object to compare to\n      * @return true if equal\n      */\n     @Override\n     public boolean equals(final Object object) {\n-        return (this == object) || \n-               ((object instanceof BooleanComparator) && \n+        return (this == object) ||\n+               ((object instanceof BooleanComparator) &&\n                 (this.trueFirst == ((BooleanComparator)object).trueFirst));\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Returns <code>true</code> iff\n-     * I sort <code>true</code> values before \n+     * I sort <code>true</code> values before\n      * <code>false</code> values.  In other words,\n      * returns <code>true</code> iff\n      * {@link #compare(Boolean,Boolean) compare(Boolean.FALSE,Boolean.TRUE)}\n      * returns a positive value.\n-     * \n+     *\n      * @return the trueFirst flag\n      */\n     public boolean sortsTrueFirst() {\n--- a/src/main/java/org/apache/commons/collections4/comparators/ComparableComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/ComparableComparator.java\n  * {@link Comparable#compareTo(Object) compareTo} gave inconsistent results.\n  * This is no longer the case. See {@link #compare(Object, Object) compare} for\n  * details.\n- * \n+ *\n  * @since 2.0\n  * @version $Id$\n- * \n+ *\n  * @see java.util.Collections#reverseOrder()\n  */\n public class ComparableComparator<E extends Comparable<? super E>> implements Comparator<E>, Serializable {\n      * Developers are encouraged to use the comparator returned from this method\n      * instead of constructing a new instance to reduce allocation and GC overhead\n      * when multiple comparable comparators may be used in the same VM.\n-     * \n+     *\n      * @param <E>  the element type\n      * @return the singleton ComparableComparator\n      */\n      * Compare the two {@link Comparable Comparable} arguments.\n      * This method is equivalent to:\n      * <pre>((Comparable)obj1).compareTo(obj2)</pre>\n-     * \n+     *\n      * @param obj1  the first object to compare\n      * @param obj2  the second object to compare\n      * @return negative if obj1 is less, positive if greater, zero if equal\n-     * @throws NullPointerException if <i>obj1</i> is <code>null</code>, \n+     * @throws NullPointerException if <i>obj1</i> is <code>null</code>,\n      *         or when <code>((Comparable)obj1).compareTo(obj2)</code> does\n      * @throws ClassCastException if <i>obj1</i> is not a <code>Comparable</code>,\n      *         or when <code>((Comparable)obj1).compareTo(obj2)</code> does\n      * <code><i>object</i>.{@link Object#getClass() getClass()}</code> equals\n      * <code>this.getClass()</code>. Subclasses may want to override this behavior to remain\n      * consistent with the {@link Comparator#equals(Object)} contract.\n-     * \n+     *\n      * @param object  the object to compare with\n      * @return {@code true} if equal\n      * @since 3.0\n      */\n     @Override\n     public boolean equals(final Object object) {\n-        return this == object || \n+        return this == object ||\n                null != object && object.getClass().equals(this.getClass());\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/comparators/ComparatorChain.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/ComparatorChain.java\n  * Instances of ComparatorChain are not synchronized. The class is not\n  * thread-safe at construction time, but it <i>is</i> thread-safe to perform\n  * multiple comparisons after all the setup operations are complete.\n- * \n+ *\n  * @since 2.0\n  * @version $Id$\n  */\n \n     /**\n      * Throws an exception if the {@link ComparatorChain} is locked.\n-     * \n+     *\n      * @throws UnsupportedOperationException if the {@link ComparatorChain} is locked\n      */\n     private void checkLocked() {\n \n     /**\n      * Throws an exception if the {@link ComparatorChain} is empty.\n-     * \n+     *\n      * @throws UnsupportedOperationException if the {@link ComparatorChain} is empty\n      */\n     private void checkChainIntegrity() {\n--- a/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java\n     }\n \n     /**\n-     * Returns <code>true</code> iff <i>that</i> Object is \n-     * is a {@link Comparator} whose ordering is known to be \n+     * Returns <code>true</code> iff <i>that</i> Object is\n+     * is a {@link Comparator} whose ordering is known to be\n      * equivalent to mine.\n      * <p>\n      * This implementation returns <code>true</code>\n-     * iff <code><i>that</i></code> is a {@link FixedOrderComparator} \n+     * iff <code><i>that</i></code> is a {@link FixedOrderComparator}\n      * whose attributes are equal to mine.\n-     * \n+     *\n      * @param object  the object to compare to\n      * @return true if equal\n      */\n--- a/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java\n     public NullComparator(final boolean nullsAreHigh) {\n         this(ComparatorUtils.NATURAL_COMPARATOR, nullsAreHigh);\n     }\n-    \n+\n     /**\n      *  Construct an instance that sorts <code>null</code> higher or lower than\n      *  any non-<code>null</code> object it is compared with.  When comparing\n     public NullComparator(final Comparator<E> nonNullComparator, final boolean nullsAreHigh) {\n         this.nonNullComparator = nonNullComparator;\n         this.nullsAreHigh = nullsAreHigh;\n-        \n+\n         if (nonNullComparator == null) {\n             throw new NullPointerException(\"null nonNullComparator\");\n         }\n--- a/src/main/java/org/apache/commons/collections4/comparators/ReverseComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/ReverseComparator.java\n      * natural ordering.  Using this Constructor will create a ReverseComparator\n      * that is functionally identical to the Comparator returned by\n      * java.util.Collections.<b>reverseOrder()</b>.\n-     * \n+     *\n      * @see java.util.Collections#reverseOrder()\n      */\n     public ReverseComparator() {\n      * Creates a comparator that inverts the comparison\n      * of the given comparator.  If you pass in <code>null</code>,\n      * the ReverseComparator defaults to reversing the\n-     * natural order, as per \n-     * {@link java.util.Collections#reverseOrder()}</b>.\n-     * \n+     * natural order, as per {@link java.util.Collections#reverseOrder()}.\n+     *\n      * @param comparator Comparator to reverse\n      */\n     @SuppressWarnings(\"unchecked\")\n     //-----------------------------------------------------------------------\n     /**\n      * Compares two objects in reverse order.\n-     * \n+     *\n      * @param obj1  the first object to compare\n      * @param obj2  the second object to compare\n      * @return negative if obj1 is less, positive if greater, zero if equal\n     /**\n      * Implement a hash code for this comparator that is consistent with\n      * {@link #equals(Object) equals}.\n-     * \n+     *\n      * @return a suitable hash code\n      * @since 3.0\n      */\n     }\n \n     /**\n-     * Returns <code>true</code> iff <i>that</i> Object is \n-     * is a {@link Comparator} whose ordering is known to be \n+     * Returns <code>true</code> iff <i>that</i> Object is\n+     * is a {@link Comparator} whose ordering is known to be\n      * equivalent to mine.\n      * <p>\n      * This implementation returns <code>true</code>\n      * iff <code><i>object</i>.{@link Object#getClass() getClass()}</code>\n-     * equals <code>this.getClass()</code>, and the underlying \n+     * equals <code>this.getClass()</code>, and the underlying\n      * comparators are equal.\n      * Subclasses may want to override this behavior to remain consistent\n      * with the {@link Comparator#equals(Object) equals} contract.\n-     * \n+     *\n      * @param object  the object to compare to\n      * @return true if equal\n      * @since 3.0\n--- a/src/main/java/org/apache/commons/collections4/comparators/TransformingComparator.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/TransformingComparator.java\n  * @see org.apache.commons.collections4.comparators.ComparableComparator\n  */\n public class TransformingComparator<I, O> implements Comparator<I>, Serializable {\n-    \n+\n     /** Serialization version from Collections 4.0. */\n     private static final long serialVersionUID = 3456940356043606220L;\n \n     /** The decorated comparator. */\n     private final Comparator<O> decorated;\n-    /** The transformer being used. */    \n+    /** The transformer being used. */\n     private final Transformer<? super I, ? extends O> transformer;\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Constructs an instance with the given Transformer and a \n+     * Constructs an instance with the given Transformer and a\n      * {@link ComparableComparator ComparableComparator}.\n-     * \n+     *\n      * @param transformer what will transform the arguments to <code>compare</code>\n      */\n     @SuppressWarnings(\"unchecked\")\n \n     /**\n      * Constructs an instance with the given Transformer and Comparator.\n-     * \n+     *\n      * @param transformer  what will transform the arguments to <code>compare</code>\n      * @param decorated  the decorated Comparator\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * Returns the result of comparing the values from the transform operation.\n-     * \n+     *\n      * @param obj1  the first object to transform then compare\n      * @param obj2  the second object to transform then compare\n      * @return negative if obj1 is less, positive if greater, zero if equal\n     }\n \n     /**\n-     * Returns <code>true</code> iff <i>that</i> Object is \n-     * is a {@link Comparator} whose ordering is known to be \n+     * Returns <code>true</code> iff <i>that</i> Object is\n+     * is a {@link Comparator} whose ordering is known to be\n      * equivalent to mine.\n      * <p>\n      * This implementation returns <code>true</code>\n-     * iff <code><i>that</i></code> is a {@link TransformingComparator} \n+     * iff <code><i>that</i></code> is a {@link TransformingComparator}\n      * whose attributes are equal to mine.\n-     * \n+     *\n      * @param object  the object to compare to\n      * @return true if equal\n      */\n--- a/src/main/java/org/apache/commons/collections4/comparators/package-info.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/package-info.java\n  * This package contains implementations of the\n  * {@link java.util.Comparator Comparator} interface.\n  * <p>\n- * You may also consider using \n+ * You may also consider using\n  * {@link org.apache.commons.collections4.ComparatorUtils ComparatorUtils},\n  * which is a single class that uses static methods to construct instances\n  * of the classes in this package.\n- * \n+ *\n  * @version $Id$\n  */\n package org.apache.commons.collections4.comparators;", "timestamp": 1367345808, "metainfo": ""}