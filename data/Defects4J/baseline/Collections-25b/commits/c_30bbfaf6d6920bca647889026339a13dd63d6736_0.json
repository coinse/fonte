{"sha": "30bbfaf6d6920bca647889026339a13dd63d6736", "log": "Javadoc fixes for predicates.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/functors/FalsePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/FalsePredicate.java\n     /**\n      * Get a typed instance.\n      *\n+     * @param <T> the type that the predicate queries\n      * @return the singleton instance\n      * @since 4.0\n      */\n--- a/src/main/java/org/apache/commons/collections/functors/IdentityPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/IdentityPredicate.java\n     /**\n      * Factory to create the identity predicate.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param object  the object to compare to\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null\n--- a/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n      * <p>\n      * If the array is size zero, the predicate always returns true.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * <p>\n      * If the collection is size zero, the predicate always returns true.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n--- a/src/main/java/org/apache/commons/collections/functors/NotNullPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NotNullPredicate.java\n     /**\n      * Factory returning the singleton instance.\n      *\n+     * @param <T> the type that the predicate queries\n      * @return the singleton instance\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections/functors/NotPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NotPredicate.java\n     /**\n      * Factory to create the not predicate.\n      * \n+     * @param <T> the type that the predicate queries\n      * @param predicate  the predicate to decorate, not null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null\n--- a/src/main/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n     /**\n      * Factory to create the null exception predicate.\n      * \n+     * @param <T> the type that the predicate queries\n      * @param predicate  the predicate to decorate, not null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null\n--- a/src/main/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n     /**\n      * Factory to create the null false predicate.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param predicate  the predicate to decorate, not null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null\n--- a/src/main/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n     /**\n      * Factory to create the null true predicate.\n      * \n+     * @param <T> the type that the predicate queries\n      * @param predicate  the predicate to decorate, not null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null\n--- a/src/main/java/org/apache/commons/collections/functors/NullPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullPredicate.java\n     /**\n      * Factory returning the singleton instance.\n      *\n+     * @param <T> the type that the predicate queries\n      * @return the singleton instance\n      * @since 3.1\n      */\n      * @param object  the input object\n      * @return true if input is null\n      */\n-    public boolean evaluate(Object object) {\n+    public boolean evaluate(T object) {\n         return (object == null);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n      * If the array is size zero, the predicate always returns false.\n      * If the array is size one, then that predicate is returned.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n     /**\n      * Factory to create the predicate.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param predicates  the predicates to check, cloned, not null\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n--- a/src/main/java/org/apache/commons/collections/functors/OrPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/OrPredicate.java\n     /**\n      * Factory to create the predicate.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param predicate1  the first predicate to check, not null\n      * @param predicate2  the second predicate to check, not null\n      * @return the <code>and</code> predicate\n--- a/src/main/java/org/apache/commons/collections/functors/TransformedPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/TransformedPredicate.java\n     /**\n      * Factory to create the predicate.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param transformer  the transformer to call\n      * @param predicate  the predicate to call with the result of the transform\n      * @return the predicate\n      * @throws IllegalArgumentException if the transformer or the predicate is null\n      */\n-    public static <T> Predicate<T> transformedPredicate(Transformer<? super T, ? extends T> transformer, Predicate<? super T> predicate) {\n+    public static <T> Predicate<T> transformedPredicate(Transformer<? super T, ? extends T> transformer,\n+                                                        Predicate<? super T> predicate) {\n         if (transformer == null) {\n             throw new IllegalArgumentException(\"The transformer to call must not be null\");\n         }\n--- a/src/main/java/org/apache/commons/collections/functors/TransformerPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/TransformerPredicate.java\n     /**\n      * Factory to create the predicate.\n      *\n+     * @param <T> the type that the predicate queries\n      * @param transformer  the transformer to decorate\n      * @return the predicate\n      * @throws IllegalArgumentException if the transformer is null\n--- a/src/main/java/org/apache/commons/collections/functors/TruePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/TruePredicate.java\n     /**\n      * Factory returning the singleton instance.\n      *\n+     * @param <T> the type that the predicate queries\n      * @return the singleton instance\n      * @since 3.1\n      */\n--- a/src/main/java/org/apache/commons/collections/functors/UniquePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/UniquePredicate.java\n     /**\n      * Factory to create the predicate.\n      *\n+     * @param <T> the type that the predicate queries\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null\n      */\n-    public static <E> Predicate<E> uniquePredicate() {\n-        return new UniquePredicate<E>();\n+    public static <T> Predicate<T> uniquePredicate() {\n+        return new UniquePredicate<T>();\n     }\n \n     /**", "timestamp": 1343332390, "metainfo": ""}