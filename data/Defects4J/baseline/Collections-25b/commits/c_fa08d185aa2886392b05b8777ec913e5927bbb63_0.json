{"sha": "fa08d185aa2886392b05b8777ec913e5927bbb63", "log": "some cleanup, re-org methods, reduce scope on some   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestObject.java\n+++ b/src/test/org/apache/commons/collections/TestObject.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.18 2003/01/10 00:15:09 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.19 2003/02/26 00:35:19 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * test case (method) your {@link Object} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Revision: 1.18 $ $Date: 2003/01/10 00:15:09 $\n+ * @author Anonymous\n+ * \n+ * @version $Revision: 1.19 $ $Date: 2003/02/26 00:35:19 $\n  */\n public abstract class TestObject extends BulkTest {\n+\n+    // constructor\n+    // ------------------------------------------------------------------------\n+    \n     public TestObject(String testName) {\n         super(testName);\n     }\n \n-    // current major release for Collections\n-    public static final int COLLECTIONS_MAJOR_VERSION = 2;\n-\n-    /**\n-     * Get the version of Collections that this object tries to\n-     * maintain serialization compatibility with. Defaults to 1, the\n-     * earliest Collections version. (Note: some collections did not\n-     * even exist in this version).\n-     * \n-     * This constant makes it possible for TestMap (and other subclasses,\n-     * if necessary) to automatically check CVS for a versionX copy of a\n-     * Serialized object, so we can make sure that compatibility is maintained.\n-     * See, for example, TestMap.getCanonicalFullMapName(Map map).\n-     * Subclasses can override this variable, indicating compatibility\n-     * with earlier Collections versions.\n-     * \n-     * @return The version, or <code>null</code> if this object shouldn't be\n-     * tested for compatibility with previous versions.\n-     */\n-    public String getCompatibilityVersion() {\n-        return \"1\";\n-    }\n-\n+    // abstract\n+    // ------------------------------------------------------------------------\n+    \n     /**\n      * Return a new, empty {@link Object} to used for testing.\n      */\n-    public abstract Object makeObject();\n-\n+    protected abstract Object makeObject();\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+    \n     public void testObjectEqualsSelf() {\n         Object obj = makeObject();\n         assertEquals(\"A Object should equal itself\",obj,obj);\n         }\n     }\n \n-    private void writeExternalFormToStream(Serializable o, OutputStream stream) \n-    throws IOException {\n-        ObjectOutputStream oStream = new ObjectOutputStream(stream);\n-        oStream.writeObject(o);\n-    }\n-\n-    /**\n-     * Write a Serializable or Externalizable object as\n-     * a file at the given path.  NOT USEFUL as part\n-     * of a unit test; this is just a utility method\n-     * for creating disk-based objects in CVS that can become\n-     * the basis for compatibility tests using\n-     * readExternalFormFromDisk(String path)\n-     * \n-     * @param o Object to serialize\n-     * @param path path to write the serialized Object\n-     * @exception IOException\n-     */\n-    protected void writeExternalFormToDisk(Serializable o, String path) \n-    throws IOException {\n-        FileOutputStream fileStream = new FileOutputStream(path);\n-        writeExternalFormToStream(o,fileStream);\n-    }\n-\n-    /**\n-     * Converts a Serializable or Externalizable object to\n-     * bytes.  Useful for in-memory tests of serialization\n-     * \n-     * @param o Object to convert to bytes\n-     * @return serialized form of the Object\n-     * @exception IOException\n-     */\n-    protected byte[] writeExternalFormToBytes(Serializable o) \n-    throws IOException {\n-        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n-        writeExternalFormToStream(o,byteStream);\n-        return byteStream.toByteArray();\n-    }\n-\n-    private Object readExternalFormFromStream(InputStream stream) \n-    throws IOException, ClassNotFoundException {\n-        ObjectInputStream oStream = new ObjectInputStream(stream);\n-        return oStream.readObject();\n-    }\n-\n-    /**\n-     * Reads a Serialized or Externalized Object from disk.\n-     * Useful for creating compatibility tests betweeen\n-     * different CVS versions of the same class\n-     * \n-     * @param path path to the serialized Object\n-     * @return the Object at the given path\n-     * @exception IOException\n-     * @exception ClassNotFoundException\n-     */\n-    protected Object readExternalFormFromDisk(String path) \n-    throws IOException, ClassNotFoundException {\n-        FileInputStream stream = new FileInputStream(path);\n-        return readExternalFormFromStream(stream);\n-    }\n-\n-    /**\n-     * Read a Serialized or Externalized Object from bytes.\n-     * Useful for verifying serialization in memory.\n-     * \n-     * @param b byte array containing a serialized Object\n-     * @return Object contained in the bytes\n-     * @exception IOException\n-     * @exception ClassNotFoundException\n-     */\n-    protected Object readExternalFormFromBytes(byte[] b) \n-    throws IOException, ClassNotFoundException {\n-        ByteArrayInputStream stream = new ByteArrayInputStream(b);\n-        return readExternalFormFromStream(stream);\n-    }\n-\n     /**\n      * Sanity check method, makes sure that any Serializable\n      * class can be serialized and de-serialized in memory, \n      * @exception IOException\n      * @exception ClassNotFoundException\n      */\n-    public void testSimpleSerialization() \n-    throws IOException, ClassNotFoundException {\n+    public void testSimpleSerialization() throws IOException, ClassNotFoundException {\n         Object o = makeObject();\n         if (o instanceof Serializable) {\n             byte[] objekt = writeExternalFormToBytes((Serializable) o);\n         }\n     }\n \n-    public String getCanonicalEmptyCollectionName(Object object) {\n+    /**\n+     * If the test object is serializable, confirm that \n+     * a canonical form exists in CVS\n+     * \n+     */\n+    public void testCanonicalEmptyCollectionExists() {\n+        if(supportsEmptyCollections()) {    \n+            Object object = makeObject();\n+            if(object instanceof Serializable) {\n+                String name = getCanonicalEmptyCollectionName(object);\n+                assertTrue(\"Canonical empty collection (\" + name + \") is not in CVS\",\n+                           new File(name).exists());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * If the test object is serializable, confirm that \n+     * a canonical form exists in CVS\n+     * \n+     */\n+    public void testCanonicalFullCollectionExists() {\n+        if(supportsFullCollections()) {\n+            Object object = makeObject();\n+            if(object instanceof Serializable) {\n+                String name = getCanonicalFullCollectionName(object);\n+                assertTrue(\"Canonical full collection (\" + name + \") is not in CVS\",\n+                           new File(name).exists());\n+            }\n+        }\n+    }\n+\n+    // protected\n+    // ------------------------------------------------------------------------\n+    \n+    /**\n+     * Get the version of Collections that this object tries to\n+     * maintain serialization compatibility with. Defaults to 1, the\n+     * earliest Collections version. (Note: some collections did not\n+     * even exist in this version).\n+     * \n+     * This constant makes it possible for TestMap (and other subclasses,\n+     * if necessary) to automatically check CVS for a versionX copy of a\n+     * Serialized object, so we can make sure that compatibility is maintained.\n+     * See, for example, TestMap.getCanonicalFullMapName(Map map).\n+     * Subclasses can override this variable, indicating compatibility\n+     * with earlier Collections versions.\n+     * \n+     * @return The version, or <code>null</code> if this object shouldn't be\n+     * tested for compatibility with previous versions.\n+     */\n+    protected String getCompatibilityVersion() {\n+        return \"1\";\n+    }\n+\n+    /**\n+     * Override this method if a subclass is testing a \n+     * Collections that cannot serialize an \"empty\" Collection\n+     * (e.g. Comparators have no contents)\n+     * \n+     * @return true\n+     */\n+    protected boolean supportsEmptyCollections() {\n+        return true;\n+    }\n+\n+    /**\n+     * Override this method if a subclass is testing a \n+     * Collections that cannot serialize a \"full\" Collection\n+     * (e.g. Comparators have no contents)\n+     * \n+     * @return true\n+     */\n+    protected boolean supportsFullCollections() {\n+        return true;\n+    }\n+\n+    protected String getCanonicalEmptyCollectionName(Object object) {\n         StringBuffer retval = new StringBuffer();\n         retval.append(\"data/test/\");\n         String colName = object.getClass().getName();\n         return retval.toString();\n     }\n \n-    public String getCanonicalFullCollectionName(Object object) {\n+    protected String getCanonicalFullCollectionName(Object object) {\n         StringBuffer retval = new StringBuffer();\n         retval.append(\"data/test/\");\n         String colName = object.getClass().getName();\n     }\n \n     /**\n-     * Override this method if a subclass is testing a \n-     * Collections that cannot serialize an \"empty\" Collection\n-     * (e.g. Comparators have no contents)\n-     * \n-     * @return true\n-     */\n-    public boolean supportsEmptyCollections() {\n-        return true;\n-    }\n-\n-    /**\n-     * Override this method if a subclass is testing a \n-     * Collections that cannot serialize a \"full\" Collection\n-     * (e.g. Comparators have no contents)\n-     * \n-     * @return true\n-     */\n-    public boolean supportsFullCollections() {\n-        return true;\n-    }\n-\n-    /**\n-     * If the test object is serializable, confirm that \n-     * a canonical form exists in CVS\n-     * \n-     */\n-    public void testCanonicalEmptyCollectionExists() {\n-        if (!supportsEmptyCollections()) {\n-            return;\n-        }\n-\n-        Object object = makeObject();\n-        if (!(object instanceof Serializable)) {\n-            return;\n-        }\n-        String name = getCanonicalEmptyCollectionName(object);\n-        assertTrue(\"Canonical empty collection (\" + name + \") is not in CVS\",\n-                   new File(name).exists());\n-    }\n-\n-    /**\n-     * If the test object is serializable, confirm that \n-     * a canonical form exists in CVS\n-     * \n-     */\n-    public void testCanonicalFullCollectionExists() {\n-        if (!supportsFullCollections()) {\n-            return;\n-        }\n-        \n-        Object object = makeObject();\n-        if (!(object instanceof Serializable)) {\n-            return;\n-        }\n-        String name = getCanonicalFullCollectionName(object);\n-        assertTrue(\"Canonical full collection (\" + name + \") is not in CVS\",\n-                   new File(name).exists());\n-    }\n+     * Write a Serializable or Externalizable object as\n+     * a file at the given path.  NOT USEFUL as part\n+     * of a unit test; this is just a utility method\n+     * for creating disk-based objects in CVS that can become\n+     * the basis for compatibility tests using\n+     * readExternalFormFromDisk(String path)\n+     * \n+     * @param o Object to serialize\n+     * @param path path to write the serialized Object\n+     * @exception IOException\n+     */\n+    protected void writeExternalFormToDisk(Serializable o, String path) \n+    throws IOException {\n+        FileOutputStream fileStream = new FileOutputStream(path);\n+        writeExternalFormToStream(o,fileStream);\n+    }\n+\n+    /**\n+     * Converts a Serializable or Externalizable object to\n+     * bytes.  Useful for in-memory tests of serialization\n+     * \n+     * @param o Object to convert to bytes\n+     * @return serialized form of the Object\n+     * @exception IOException\n+     */\n+    protected byte[] writeExternalFormToBytes(Serializable o) \n+    throws IOException {\n+        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n+        writeExternalFormToStream(o,byteStream);\n+        return byteStream.toByteArray();\n+    }\n+\n+    private Object readExternalFormFromStream(InputStream stream) \n+    throws IOException, ClassNotFoundException {\n+        ObjectInputStream oStream = new ObjectInputStream(stream);\n+        return oStream.readObject();\n+    }\n+\n+    /**\n+     * Reads a Serialized or Externalized Object from disk.\n+     * Useful for creating compatibility tests betweeen\n+     * different CVS versions of the same class\n+     * \n+     * @param path path to the serialized Object\n+     * @return the Object at the given path\n+     * @exception IOException\n+     * @exception ClassNotFoundException\n+     */\n+    protected Object readExternalFormFromDisk(String path) \n+    throws IOException, ClassNotFoundException {\n+        FileInputStream stream = new FileInputStream(path);\n+        return readExternalFormFromStream(stream);\n+    }\n+\n+    /**\n+     * Read a Serialized or Externalized Object from bytes.\n+     * Useful for verifying serialization in memory.\n+     * \n+     * @param b byte array containing a serialized Object\n+     * @return Object contained in the bytes\n+     * @exception IOException\n+     * @exception ClassNotFoundException\n+     */\n+    protected Object readExternalFormFromBytes(byte[] b) \n+    throws IOException, ClassNotFoundException {\n+        ByteArrayInputStream stream = new ByteArrayInputStream(b);\n+        return readExternalFormFromStream(stream);\n+    }\n+\n+    // private\n+    // ------------------------------------------------------------------------\n+\n+    private void writeExternalFormToStream(Serializable o, OutputStream stream) \n+    throws IOException {\n+        ObjectOutputStream oStream = new ObjectOutputStream(stream);\n+        oStream.writeObject(o);\n+    }\n+\n+    // attributes\n+    // ------------------------------------------------------------------------\n+\n+    // current major release for Collections\n+    public static final int COLLECTIONS_MAJOR_VERSION = 2;\n+\n }", "timestamp": 1046219719, "metainfo": ""}