{"sha": "740344661c7eb5f819f45d9d0f64668624e9e00e", "log": "[COLLECTIONS-415/417] Added clarifying javadoc about runtime complexity.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n         return false;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     * <p> \n+     * This implementation iterates over the elements of this list, checking each element in\n+     * turn to see if it's contained in <code>coll</code>. If it's contained, it's removed\n+     * from this list. As a consequence, it is advised to use a collection type for\n+     * <code>coll</code> that provides a fast (e.g. O(1)) implementation of\n+     * {@link Collection#contains(Object)}.\n+     */\n     public boolean removeAll(Collection<?> coll) {\n         boolean modified = false;\n         Iterator<E> it = iterator();\n \n     //-----------------------------------------------------------------------\n     \n+    /**\n+     * {@inheritDoc}\n+     * <p> \n+     * This implementation iterates over the elements of this list, checking each element in\n+     * turn to see if it's contained in <code>coll</code>. If it's not contained, it's removed\n+     * from this list. As a consequence, it is advised to use a collection type for\n+     * <code>coll</code> that provides a fast (e.g. O(1)) implementation of\n+     * {@link Collection#contains(Object)}.\n+     */\n     public boolean retainAll(Collection<?> coll) {\n         boolean modified = false;\n         Iterator<E> it = iterator();", "timestamp": 1348164421, "metainfo": ""}