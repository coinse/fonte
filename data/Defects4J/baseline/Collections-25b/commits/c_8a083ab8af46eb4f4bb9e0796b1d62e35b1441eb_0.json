{"sha": "8a083ab8af46eb4f4bb9e0796b1d62e35b1441eb", "log": "* support remove in SingletonIterator and SingletonListIterator * add tests * enable tests   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonIterator.java,v 1.6 2003/09/29 22:02:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonIterator.java,v 1.7 2003/10/09 11:05:27 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * object instance.</p>\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.6 $ $Date: 2003/09/29 22:02:33 $\n+ * @version $Revision: 1.7 $ $Date: 2003/10/09 11:05:27 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author Stephen Colebourne\n+ * @author Rodney Waldhoff\n  */\n public class SingletonIterator implements ResetableIterator {\n \n-    private boolean first = true;\n+    private boolean beforeFirst = true;\n+    private boolean removed = false;\n     private Object object;\n \n     /**\n     }\n \n     /**\n-     * Is another object available from the iterator.\n+     * Is another object available from the iterator?\n      * <p>\n      * This returns true if the single object hasn't been returned yet.\n      * \n      * @return true if the single object hasn't been returned yet\n      */\n     public boolean hasNext() {\n-        return first;\n+        return (beforeFirst && !removed);\n     }\n \n     /**\n      *    been returned\n      */\n     public Object next() {\n-        if (!first) {\n+        if (!beforeFirst || removed) {\n             throw new NoSuchElementException();\n         }\n-        Object answer = object;\n-        first = false;\n-        return answer;\n+        beforeFirst = false;\n+        return object;\n     }\n \n     /**\n-     * Remove always throws {@link UnsupportedOperationException}.\n-     *\n-     * @throws UnsupportedOperationException always\n+     * Remove the object from this iterator.\n+     * @throws IllegalStateException if the <tt>next</tt> method has not\n+     *        yet been called, or the <tt>remove</tt> method has already\n+     *        been called after the last call to the <tt>next</tt>\n+     *        method.\n      */\n-    public void remove() {\n-        throw new UnsupportedOperationException(\"remove() is not supported by this iterator\");\n+    public void remove() {       \n+        if(removed || beforeFirst) {\n+            throw new IllegalStateException();\n+        } else {\n+            object = null;\n+            removed = true;\n+        }\n     }\n     \n     /**\n      * Reset the iterator to the start.\n      */\n     public void reset() {\n-        first = true;\n+        beforeFirst = true;\n     }\n     \n }\n--- a/src/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonListIterator.java,v 1.6 2003/09/29 22:02:33 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonListIterator.java,v 1.7 2003/10/09 11:05:27 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * object instance.</p>\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.6 $ $Date: 2003/09/29 22:02:33 $\n+ * @version $Revision: 1.7 $ $Date: 2003/10/09 11:05:27 $\n  * \n  * @author Stephen Colebourne\n+ * @author Rodney Waldhoff\n  */\n public class SingletonListIterator implements ResetableListIterator {\n \n-    private boolean first = true;\n+    private boolean beforeFirst = true;\n     private boolean nextCalled = false;\n+    private boolean removed = false;\n     private Object object;\n \n     /**\n     }\n \n     /**\n-     * Is another object available from the iterator.\n+     * Is another object available from the iterator?\n      * <p>\n      * This returns true if the single object hasn't been returned yet.\n      * \n      * @return true if the single object hasn't been returned yet\n      */\n     public boolean hasNext() {\n-        return first;\n-    }\n-\n-    /**\n-     * Is a previous object available from the iterator.\n+        return beforeFirst && !removed;\n+    }\n+\n+    /**\n+     * Is a previous object available from the iterator?\n      * <p>\n      * This returns true if the single object has been returned.\n      * \n      * @return true if the single object has been returned\n      */\n     public boolean hasPrevious() {\n-        return !first;\n+        return !beforeFirst && !removed;\n     }\n \n     /**\n      * @return 0 or 1 depending on current state. \n      */\n     public int nextIndex() {\n-        return (first ? 0 : 1);\n+        return (beforeFirst ? 0 : 1);\n     }\n \n     /**\n      * @return 0 or -1 depending on current state. \n      */\n     public int previousIndex() {\n-        return (first ? -1 : 0);\n+        return (beforeFirst ? -1 : 0);\n     }\n \n     /**\n      *    been returned\n      */\n     public Object next() {\n-        if (!first) {\n+        if (!beforeFirst || removed) {\n             throw new NoSuchElementException();\n         }\n-        first = false;\n+        beforeFirst = false;\n         nextCalled = true;\n         return object;\n     }\n      *    been returned\n      */\n     public Object previous() {\n-        if (first) {\n+        if (beforeFirst || removed) {\n             throw new NoSuchElementException();\n         }\n-        first = true;\n+        beforeFirst = true;\n         return object;\n     }\n \n     /**\n-     * Remove always throws {@link UnsupportedOperationException}.\n-     *\n-     * @throws UnsupportedOperationException always\n+     * Remove the object from this iterator.\n+     * @throws IllegalStateException if the <tt>next</tt> or <tt>previous</tt> \n+     *        method has not yet been called, or the <tt>remove</tt> method \n+     *        has already been called after the last call to <tt>next</tt>\n+     *        or <tt>previous</tt>.\n      */\n     public void remove() {\n-        throw new UnsupportedOperationException(\"remove() is not supported by this iterator\");\n+        if(!nextCalled || removed) {\n+            throw new IllegalStateException();\n+        } else {\n+            object = null;\n+            removed = true;\n+        }\n     }\n     \n     /**\n      * Set sets the value of the singleton.\n      *\n      * @param obj  the object to set\n-     * @throws IllegalStateException if <tt>next</tt> has not been called\n+     * @throws IllegalStateException if <tt>next</tt> has not been called \n+     *          or the object has been removed\n      */\n     public void set(Object obj) {\n-        if (nextCalled == false) {\n+        if (!nextCalled || removed) {\n             throw new IllegalStateException();\n         }\n         this.object = obj;\n      * Reset the iterator back to the start.\n      */\n     public void reset() {\n-        first = true;\n+        beforeFirst = true;\n         nextCalled = false;\n     }\n     \n--- a/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java,v 1.6 2003/10/01 21:54:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java,v 1.7 2003/10/09 11:05:27 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Tests the SingletonIterator to ensure that the next() method will actually\n  * perform the iteration rather than the hasNext() method.\n  *\n- * @version $Revision: 1.6 $ $Date: 2003/10/01 21:54:54 $\n+ * @version $Revision: 1.7 $ $Date: 2003/10/09 11:05:27 $\n  * \n  * @author James Strachan\n  */\n     }\n     \n     /**\n-     * Returns null. SingletonIterators can never be empty;\n-     * they always have exactly one element.\n-     * \n-     * @return null\n+     * Returns a SingletonIterator from which \n+     * the element has already been removed.\n      */\n     public Iterator makeEmptyIterator() {\n-        return null;\n+        SingletonIterator iter = (SingletonIterator)makeFullIterator();\n+        iter.next();\n+        iter.remove();        \n+        iter.reset();\n+        return iter;\n     }\n \n     public Iterator makeFullIterator() {\n     }\n \n     public boolean supportsRemove() {\n-        return false;\n+        return true;\n     }\n \n-\n-    /**\n-     * Whether or not we are testing an iterator that can be\n-     * empty.  SingletonIterators are never empty;\n-     * \n-     * @return false\n-     */\n     public boolean supportsEmptyIterator() {\n-        return false;\n+        return true;\n     }\n \n     public void testIterator() {\n         assertTrue(\"Iterator should now be empty\", !iter.hasNext());\n \n         try {\n-            Object testValue = iter.next();\n+            iter.next();\n         } catch (Exception e) {\n             assertTrue(\n                 \"NoSuchElementException must be thrown\",\n                 e.getClass().equals((new NoSuchElementException()).getClass()));\n         }\n+    }\n+    \n+    public void testSingletonIteratorRemove() {\n+        ResetableIterator iter = new SingletonIterator(\"xyzzy\");\n+        assertTrue(iter.hasNext());\n+        assertEquals(\"xyzzy\",iter.next());\n+        iter.remove();\n+        iter.reset();\n+        assertTrue(! iter.hasNext());\n     }\n     \n     public void testReset() {\n--- a/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java,v 1.6 2003/10/01 21:54:55 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java,v 1.7 2003/10/09 11:05:27 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests the SingletonListIterator.\n  *\n- * @version $Revision: 1.6 $ $Date: 2003/10/01 21:54:55 $\n+ * @version $Revision: 1.7 $ $Date: 2003/10/09 11:05:27 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n     \n     /**\n-     * Returns null. SingletonListIterator can never be empty;\n-     * they always have exactly one element.\n-     * \n-     * @return null\n+     * Returns a SingletonListIterator from which \n+     * the element has already been removed.\n      */\n     public ListIterator makeEmptyListIterator() {\n-        return null;\n+        SingletonListIterator iter = (SingletonListIterator)makeFullIterator();\n+        iter.next();\n+        iter.remove();\n+        iter.reset();        \n+        return iter;\n     }\n \n     public ListIterator makeFullListIterator() {\n     }\n \n     public boolean supportsRemove() {\n-        return false;\n+        return true;\n     }\n \n-    /**\n-     * Whether or not we are testing an iterator that can be\n-     * empty.  SingletonIterators are never empty;\n-     * \n-     * @return false\n-     */\n     public boolean supportsEmptyIterator() {\n-        return false;\n+        return true;\n     }\n \n     public void testIterator() {", "timestamp": 1065697527, "metainfo": ""}