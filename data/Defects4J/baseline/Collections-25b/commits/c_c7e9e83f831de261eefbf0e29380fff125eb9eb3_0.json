{"sha": "c7e9e83f831de261eefbf0e29380fff125eb9eb3", "log": "[COLLECTIONS-231] apply signature change to factory method.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/list/FixedSizeList.java\n+++ b/src/main/java/org/apache/commons/collections/list/FixedSizeList.java\n     /**\n      * Factory method to create a fixed size list.\n      * \n+     * @param <E> the type of the elements in the list\n      * @param list  the list to decorate, must not be null\n+     * @return a new fixed size list\n      * @throws IllegalArgumentException if list is null\n      */\n-    public static <E> List<E> fixedSizeList(List<E> list) {\n+    public static <E> FixedSizeList<E> fixedSizeList(List<E> list) {\n         return new FixedSizeList<E>(list);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/list/GrowthList.java\n+++ b/src/main/java/org/apache/commons/collections/list/GrowthList.java\n     /**\n      * Factory method to create a growth list.\n      *\n+     * @param <E> the type of the elements in the list\n      * @param list  the list to decorate, must not be null\n+     * @return a new growth list\n      * @throws IllegalArgumentException if list is null\n      */\n-    public static <E> List<E> growthList(List<E> list) {\n+    public static <E> GrowthList<E> growthList(List<E> list) {\n         return new GrowthList<E>(list);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/list/LazyList.java\n+++ b/src/main/java/org/apache/commons/collections/list/LazyList.java\n     /**\n      * Factory method to create a lazily instantiating list.\n      * \n+     * @param <E> the type of the elements in the list\n      * @param list  the list to decorate, must not be null\n      * @param factory  the factory to use for creation, must not be null\n+     * @return a new lazy list\n      * @throws IllegalArgumentException if list or factory is null\n      */\n-    public static <E> List<E> lazyList(List<E> list, Factory<? extends E> factory) {\n+    public static <E> LazyList<E> lazyList(List<E> list, Factory<? extends E> factory) {\n         return new LazyList<E>(list, factory);\n     }\n     \n      * placeholder that is replaced with a factory object when requested.\n      * \n      * @param index  the index to retrieve\n+     * {@inheritDoc}\n      */\n     @Override\n     public E get(int index) {\n--- a/src/main/java/org/apache/commons/collections/list/PredicatedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/PredicatedList.java\n      * If there are any elements already in the list being decorated, they\n      * are validated.\n      * \n+     * @param <T> the type of the elements in the list\n      * @param list  the list to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n-     * @return the decorated list\n+     * @return a new predicated list\n      * @throws IllegalArgumentException if list or predicate is null\n      * @throws IllegalArgumentException if the list contains invalid elements\n      */\n-    public static <T> List<T> predicatedList(List<T> list, Predicate<? super T> predicate) {\n+    public static <T> PredicatedList<T> predicatedList(List<T> list, Predicate<? super T> predicate) {\n         return new PredicatedList<T>(list, predicate);\n     }\n \n--- a/src/main/java/org/apache/commons/collections/list/SynchronizedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/SynchronizedList.java\n     /**\n      * Factory method to create a synchronized list.\n      * \n+     * @param <T> the type of the elements in the list\n      * @param list  the list to decorate, must not be null\n+     * @return a new synchronized list\n      * @throws IllegalArgumentException if list is null\n      */\n-    public static <T> List<T> synchronizedList(List<T> list) {\n+    public static <T> SynchronizedList<T> synchronizedList(List<T> list) {\n         return new SynchronizedList<T>(list);\n     }\n     \n--- a/src/main/java/org/apache/commons/collections/list/TransformedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TransformedList.java\n      * are NOT transformed.\n      * Contrast this with {@link #transformedList(List, Transformer)}.\n      * \n+     * @param <E> the type of the elements in the list\n      * @param list  the list to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n+     * @return a new transformed list\n      * @throws IllegalArgumentException if list or transformer is null\n      */\n-    public static <E> List<E> transformingList(List<E> list, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> TransformedList<E> transformingList(List<E> list,\n+                                                          Transformer<? super E, ? extends E> transformer) {\n         return new TransformedList<E>(list, transformer);\n     }\n     \n      * will be transformed by this method.\n      * Contrast this with {@link #transformingList(List, Transformer)}.\n      * \n+     * @param <E> the type of the elements in the list\n      * @param list  the list to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed List\n      * @throws IllegalArgumentException if list or transformer is null\n      * @since Commons Collections 3.3\n      */\n-    public static <E> List<E> transformedList(List<E> list, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> TransformedList<E> transformedList(List<E> list,\n+                                                         Transformer<? super E, ? extends E> transformer) {\n         TransformedList<E> decorated = new TransformedList<E>(list, transformer);\n         if (transformer != null && list != null && list.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // list is of type E\n--- a/src/main/java/org/apache/commons/collections/list/UnmodifiableList.java\n+++ b/src/main/java/org/apache/commons/collections/list/UnmodifiableList.java\n     /**\n      * Factory method to create an unmodifiable list.\n      * \n+     * @param <E> the type of the elements in the list\n      * @param list  the list to decorate, must not be null\n+     * @return a new unmodifiable list\n      * @throws IllegalArgumentException if list is null\n      */\n     public static <E> List<E> unmodifiableList(List<E> list) {", "timestamp": 1340473575, "metainfo": ""}