{"sha": "844eb0adcc7781dbf3b2c9bb1dbe796626c93078", "log": "Rename public field (naming conventions)   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/java/org/apache/commons/collections/ComparatorUtils.java\n  * <p>\n  * Note that <i>every</i> method in this class allows you to specify\n  * <code>null</code> instead of a comparator, in which case \n- * {@link #NATURAL} will be used.\n+ * {@link #NATURAL_COMPARATOR} will be used.\n  *\n  * @since 2.1\n  * @author Paul Jack\n      *\n      * @see ComparableComparator#getInstance\n      */\n-    final public static Comparator NATURAL = ComparableComparator.getInstance();\n+    public static final Comparator NATURAL_COMPARATOR = ComparableComparator.getInstance();\n \n     /**\n      * Gets a comparator that uses the natural order of the objects.\n      * @return  a comparator which uses natural order\n      */\n     public static Comparator naturalComparator() {\n-        return NATURAL;\n+        return NATURAL_COMPARATOR;\n     }\n \n     /**\n      */\n     public static Comparator reversedComparator(Comparator comparator) {\n         if (comparator == null) {\n-            comparator = NATURAL;\n+            comparator = NATURAL_COMPARATOR;\n         }\n         return new ReverseComparator(comparator);\n     }\n      */\n     public static Comparator nullLowComparator(Comparator comparator) {\n         if (comparator == null) {\n-            comparator = NATURAL;\n+            comparator = NATURAL_COMPARATOR;\n         }\n         return new NullComparator(comparator, false);\n     }\n      */\n     public static Comparator nullHighComparator(Comparator comparator) {\n         if (comparator == null) {\n-            comparator = NATURAL;\n+            comparator = NATURAL_COMPARATOR;\n         }\n         return new NullComparator(comparator, true);\n     }\n      */\n     public static Comparator transformedComparator(Comparator comparator, Transformer transformer) {\n         if (comparator == null) {\n-            comparator = NATURAL;\n+            comparator = NATURAL_COMPARATOR;\n         }\n         return new TransformingComparator(transformer, comparator);\n     }\n      */\n     public static Object min(Object o1, Object o2, Comparator comparator) {\n         if (comparator == null) {\n-            comparator = NATURAL;\n+            comparator = NATURAL_COMPARATOR;\n         }\n         int c = comparator.compare(o1, o2);\n         return (c < 0) ? o1 : o2;\n      */\n     public static Object max(Object o1, Object o2, Comparator comparator) {\n         if (comparator == null) {\n-            comparator = NATURAL;\n+            comparator = NATURAL_COMPARATOR;\n         }\n         int c = comparator.compare(o1, o2);\n         return (c > 0) ? o1 : o2;", "timestamp": 1029622673, "metainfo": ""}