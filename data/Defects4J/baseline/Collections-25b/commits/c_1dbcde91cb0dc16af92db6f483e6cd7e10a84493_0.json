{"sha": "1dbcde91cb0dc16af92db6f483e6cd7e10a84493", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/SynchronizedList.java\n+++ b/src/java/org/apache/commons/collections/list/SynchronizedList.java\n  *\n  * @author Stephen Colebourne\n  */\n-public class SynchronizedList extends SynchronizedCollection implements List {\n+public class SynchronizedList<E> extends SynchronizedCollection<E> implements List<E> {\n \n     /** Serialization version */\n      private static final long serialVersionUID = -1403835447328619437L;\n      * @param list  the list to decorate, must not be null\n      * @throws IllegalArgumentException if list is null\n      */\n-    public static List decorate(List list) {\n-        return new SynchronizedList(list);\n+    public static <T> List<T> decorate(List<T> list) {\n+        return new SynchronizedList<T>(list);\n     }\n     \n     //-----------------------------------------------------------------------\n      * @param list  the list to decorate, must not be null\n      * @throws IllegalArgumentException if list is null\n      */\n-    protected SynchronizedList(List list) {\n+    protected SynchronizedList(List<E> list) {\n         super(list);\n     }\n \n      * @param lock  the lock to use, must not be null\n      * @throws IllegalArgumentException if list is null\n      */\n-    protected SynchronizedList(List list, Object lock) {\n+    protected SynchronizedList(List<E> list, Object lock) {\n         super(list, lock);\n     }\n \n      * \n      * @return the decorated list\n      */\n-    protected List getList() {\n-        return (List) collection;\n+    protected List<E> getList() {\n+        return (List<E>) collection;\n     }\n \n     //-----------------------------------------------------------------------\n-    public void add(int index, Object object) {\n+    public void add(int index, E object) {\n         synchronized (lock) {\n             getList().add(index, object);\n         }\n     }\n \n-    public boolean addAll(int index, Collection coll) {\n+    public boolean addAll(int index, Collection<? extends E> coll) {\n         synchronized (lock) {\n             return getList().addAll(index, coll);\n         }\n     }\n \n-    public Object get(int index) {\n+    public E get(int index) {\n         synchronized (lock) {\n             return getList().get(index);\n         }\n      * \n      * @return an iterator that must be manually synchronized on the collection\n      */\n-    public ListIterator listIterator() {\n+    public ListIterator<E> listIterator() {\n         return getList().listIterator();\n     }\n \n      * \n      * @return an iterator that must be manually synchronized on the collection\n      */\n-    public ListIterator listIterator(int index) {\n+    public ListIterator<E> listIterator(int index) {\n         return getList().listIterator(index);\n     }\n \n-    public Object remove(int index) {\n+    public E remove(int index) {\n         synchronized (lock) {\n             return getList().remove(index);\n         }\n     }\n \n-    public Object set(int index, Object object) {\n+    public E set(int index, E object) {\n         synchronized (lock) {\n             return getList().set(index, object);\n         }\n     }\n \n-    public List subList(int fromIndex, int toIndex) {\n+    public List<E> subList(int fromIndex, int toIndex) {\n         synchronized (lock) {\n-            List list = getList().subList(fromIndex, toIndex);\n+            List<E> list = getList().subList(fromIndex, toIndex);\n             // the lock is passed into the constructor here to ensure that the sublist is\n             // synchronized on the same lock as the parent list\n-            return new SynchronizedList(list, lock);\n+            return new SynchronizedList<E>(list, lock);\n         }\n     }\n ", "timestamp": 1252994145, "metainfo": ""}