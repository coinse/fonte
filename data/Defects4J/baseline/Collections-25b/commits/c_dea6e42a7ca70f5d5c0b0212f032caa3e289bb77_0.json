{"sha": "dea6e42a7ca70f5d5c0b0212f032caa3e289bb77", "log": "Fix various javadoc link warnings bug 23680, from Eric Johnson   ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestCollection.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestCollection.java,v 1.4 2003/10/10 21:07:48 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestCollection.java,v 1.5 2003/10/10 21:19:39 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link #confirmed}, the {@link #verify()} method is invoked to compare\n  * the results.  You may want to override {@link #verify()} to perform\n  * additional verifications.  For instance, when testing the collection\n- * views of a map, {@link TestMap} would override {@link #verify()} to make\n+ * views of a map, {@link AbstractTestMap} would override {@link #verify()} to make\n  * sure the map is changed after the collection view is changed.\n  * <p>\n  * If you're extending this class directly, you will have to provide \n  * Those methods should provide a confirmed collection implementation \n  * that's compatible with your collection implementation.\n  * <p>\n- * If you're extending {@link TestList}, {@link TestSet},\n- * or {@link TestBag}, you probably don't have to worry about the\n+ * If you're extending {@link AbstractTestList}, {@link AbstractTestSet},\n+ * or {@link AbstractTestBag}, you probably don't have to worry about the\n  * above methods, because those three classes already override the methods\n  * to provide standard JDK confirmed collections.<P>\n  * <p>\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link Collection} fails.\n  *\n- * @version $Revision: 1.4 $ $Date: 2003/10/10 21:07:48 $\n+ * @version $Revision: 1.5 $ $Date: 2003/10/10 21:19:39 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n--- a/src/test/org/apache/commons/collections/AbstractTestList.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestList.java,v 1.1 2003/10/02 22:14:29 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestList.java,v 1.2 2003/10/10 21:19:39 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Abstract test class for {@link java.util.List} methods and contracts.\n  * <p>\n  * To use, simply extend this class, and implement\n- * the {@link #makeList} method.\n+ * the {@link #makeEmptyList} method.\n  * <p>\n  * If your {@link List} fails one of these tests by design,\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link List} fails or override one of the\n  * protected methods from AbstractTestCollection.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/10/02 22:14:29 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/10 21:19:39 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n     }\n \n     /**\n-     * Returns {@link makeEmptyList()}.\n+     * Returns {@link #makeEmptyList()}.\n      *\n      * @return an empty list to be used for testing\n      */\n     }\n \n     /**\n-     * Returns {@link makeFullList()}.\n+     * Returns {@link #makeFullList()}.\n      *\n      * @return a full list to be used for testing\n      */\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Returns the {@link collection} field cast to a {@link List}.\n+     * Returns the {@link #collection} field cast to a {@link List}.\n      *\n      * @return the collection field as a List\n      */\n     }\n \n     /**\n-     * Returns the {@link confirmed} field cast to a {@link List}.\n+     * Returns the {@link #confirmed} field cast to a {@link List}.\n      *\n      * @return the confirmed field as a List\n      */\n     }\n \n     /**\n-     *  Tests {@link List#indexOf()}.\n+     *  Tests {@link List#indexOf}.\n      */\n     public void testListIndexOf() {\n         resetFull();\n     }\n \n     /**\n-     *  Tests {@link List#lastIndexOf()}.\n+     *  Tests {@link List#lastIndexOf}.\n      */\n     public void testListLastIndexOf() {\n         resetFull();\n--- a/src/test/org/apache/commons/collections/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.7 2003/10/10 21:08:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestMap.java,v 1.8 2003/10/10 21:19:39 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <p>\n  * The forces at work here are similar to those in {@link AbstractTestCollection}.\n  * If your class implements the full Map interface, including optional\n- * operations, simply extend this class, and implement the {@link\n- * #makeEmptyMap()} method.\n+ * operations, simply extend this class, and implement the\n+ * {@link #makeEmptyMap()} method.\n  * <p>\n  * On the other hand, if your map implementation is weird, you may have to\n  * override one or more of the other protected methods.  They're described\n  * empty or full maps, so that tests can proceed from a known state.<P>\n  *\n  * After a modification operation to both {@link #map} and {@link #confirmed},\n- * the {@link #verify()} method is invoked to compare the results.  The {@link\n- * verify()} method calls separate methods to verify the map and its three\n- * collection views ({@link verifyMap(), {@link verifyEntrySet()}, {@link\n- * verifyKeySet()}, and {@link verifyValues()}).  You may want to override one\n- * of the verification methodsto perform additional verifications.  For\n- * instance, {@link TestDoubleOrderedMap} would want override its\n+ * the {@link #verify()} method is invoked to compare the results.  The\n+ * {@link #verify} method calls separate methods to verify the map and its three\n+ * collection views ({@link #verifyMap}, {@link #verifyEntrySet},\n+ * {@link #verifyKeySet}, and {@link #verifyValues}).  You may want to override\n+ * one of the verification methodsto perform additional verifications.  For\n+ * instance, TestDoubleOrderedMap would want override its\n  * {@link #verifyValues()} method to verify that the values are unique and in\n  * ascending order.<P>\n  *  \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @version $Revision: 1.7 $ $Date: 2003/10/10 21:08:26 $\n+ * @version $Revision: 1.8 $ $Date: 2003/10/10 21:19:39 $\n  */\n public abstract class AbstractTestMap extends AbstractTestObject {\n \n \n     /**\n      * Returns a list of string elements suitable for return by\n-     * {@link getOtherElements()}.  Override getOtherElements to return\n-     * the results of this method if your collection does not support\n-     * heterogenous elements or the null element.\n+     * {@link #getOtherKeys()} or {@link #getOtherValues}.\n+     *\n+     * <p>Override getOtherElements to returnthe results of this method if your\n+     * collection does not support heterogenous elements or the null element.\n+     * </p>\n      */\n     protected Object[] getOtherNonNullStringElements() {\n         return new Object[] {\n      * method must return an array with the same length as\n      * {@link #getSampleKeys()}.  The default implementation constructs a set of\n      * String values and includes a single null value if \n-     * {@link #isNullValueSupported()} returns <code>true</code>, and includes \n+     * {@link #isAllowNullValue()} returns <code>true</code>, and includes\n      * two values that are the same if {@link #isAllowDuplicateValues()} returns\n      * <code>true</code>.\n      */\n      * returned from this method should not be the same as those returned from\n      * {@link #getSampleValues()}.  The default implementation constructs a\n      * set of String values and includes a single null value if\n-     * {@link #isNullValueSupported()} returns <code>true</code>, and includes two values\n+     * {@link #isAllowNullValue()} returns <code>true</code>, and includes two values\n      * that are the same if {@link #isAllowDuplicateValues()} returns\n      * <code>true</code>.  \n      */\n      * Return a new, populated map.  The mappings in the map should match the\n      * keys and values returned from {@link #getSampleKeys()} and {@link\n      * #getSampleValues()}.  The default implementation uses makeEmptyMap()\n-     * and calls {@link #addSampleMappings()} to add all the mappings to the\n+     * and calls {@link #addSampleMappings} to add all the mappings to the\n      * map.\n      * \n      * @return the map to be tested\n             resetFull();\n             int i = 0;\n             for (Iterator it = map.keySet().iterator(); it.hasNext() && i < newValues.length; i++) {\n-                Object key = (Object) it.next();\n+                Object key = it.next();\n                 Object o = map.put(key, newValues[i]);\n                 Object value = confirmed.put(key, newValues[i]);\n                 verify();\n      * from the map are removed from the values collection--also,\n      * but that's a more difficult test to construct (lacking a\n      * \"removeValue\" method.)\n-     * \n-     * @see http://issues.apache.org/bugzilla/show_bug.cgi?id=9573\n+     * </p>\n+     * <p>\n+     * See bug <a href=\"http://issues.apache.org/bugzilla/show_bug.cgi?id=9573\">\n+     * 9573</a>.\n+     * </p>\n      */\n     public void testValuesRemoveChangesMap() {\n         resetFull();\n \n     /**\n      * Bulk test {@link Map#entrySet()}.  This method runs through all of\n-     * the tests in {@link TestSet}.  \n+     * the tests in {@link AbstractTestSet}.\n      * After modification operations, {@link #verify()} is invoked to ensure\n      * that the map and the other collection views are still valid.\n      *\n-     * @return a {@link TestSet} instance for testing the map's entry set\n+     * @return a {@link AbstractTestSet} instance for testing the map's entry set\n      */\n     public BulkTest bulkTestMapEntrySet() {\n         return new TestMapEntrySet();\n \n     /**\n      * Bulk test {@link Map#keySet()}.  This method runs through all of\n-     * the tests in {@link TestSet}.  \n+     * the tests in {@link AbstractTestSet}.\n      * After modification operations, {@link #verify()} is invoked to ensure\n      * that the map and the other collection views are still valid.\n      *\n-     * @return a {@link TestSet} instance for testing the map's key set\n+     * @return a {@link AbstractTestSet} instance for testing the map's key set\n      */\n     public BulkTest bulkTestMapKeySet() {\n         return new TestMapKeySet();\n \n     /**\n      * Bulk test {@link Map#values()}.  This method runs through all of\n-     * the tests in {@link TestCollection}.  \n+     * the tests in {@link AbstractTestCollection}.\n      * After modification operations, {@link #verify()} is invoked to ensure\n      * that the map and the other collection views are still valid.\n      *\n-     * @return a {@link TestCollection} instance for testing the map's \n+     * @return a {@link AbstractTestCollection} instance for testing the map's\n      *    values collection\n      */\n     public BulkTest bulkTestMapValues() {\n--- a/src/test/org/apache/commons/collections/AbstractTestSet.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestSet.java,v 1.2 2003/10/05 23:10:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestSet.java,v 1.3 2003/10/10 21:19:39 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <p>\n  * Since {@link Set} doesn't stipulate much new behavior that isn't already\n  * found in {@link Collection}, this class basically just adds tests for\n- * {@link Set#equals()} and {@link Set#hashCode()} along with an updated\n+ * {@link Set#equals} and {@link Set#hashCode()} along with an updated\n  * {@link #verify()} that ensures elements do not appear more than once in the\n  * set.\n  * <p>\n  * elements may be added; see {@link AbstractTestCollection} for more details.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/10/05 23:10:31 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/10 21:19:39 $\n  * \n  * @author Paul Jack\n  */\n--- a/src/test/org/apache/commons/collections/AbstractTestSortedSet.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestSortedSet.java,v 1.2 2003/10/05 23:10:31 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestSortedSet.java,v 1.3 2003/10/10 21:19:39 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * elements may be added; see {@link AbstractTestCollection} for more details.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/10/05 23:10:31 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/10 21:19:39 $\n  * \n  * @author Stephen Colebourne\n  * @author Dieter Wimberger\n     //-----------------------------------------------------------------------\n     /**\n      * Bulk test {@link SortedSet#subSet(Object, Object)}.  This method runs through all of\n-     * the tests in {@link TestSortedSet}.\n+     * the tests in {@link AbstractTestSortedSet}.\n      * After modification operations, {@link #verify()} is invoked to ensure\n      * that the set and the other collection views are still valid.\n      *\n \n     /**\n      * Bulk test {@link SortedSet#headSet(Object)}.  This method runs through all of\n-     * the tests in {@link TestSortedSet}.\n+     * the tests in {@link AbstractTestSortedSet}.\n      * After modification operations, {@link #verify()} is invoked to ensure\n      * that the set and the other collection views are still valid.\n      *\n \n     /**\n      * Bulk test {@link SortedSet#tailSet(Object)}.  This method runs through all of\n-     * the tests in {@link TestSortedSet}.\n+     * the tests in {@link AbstractTestSortedSet}.\n      * After modification operations, {@link #verify()} is invoked to ensure\n      * that the set and the other collection views are still valid.\n      *", "timestamp": 1065820779, "metainfo": ""}