{"sha": "32487bf55bb0e2ed7945788e79c0347813aa400c", "log": "add CollatingIterator and tests   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/CollatingIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/CollatingIterator.java,v 1.1 2002/07/09 16:48:56 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/07/09 16:48:56 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+\n+/**\n+ * Provides an ordered iteration over the elements contained in\n+ * a collection of ordered {@link Iterator}s.  In other words,\n+ * given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n+ * my {@link #next} method will return the lesser of \n+ * <code>A.next()</code> and <code>B.next()</code>.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2002/07/09 16:48:56 $\n+ * @author Rodney Waldhoff\n+ */\n+public class CollatingIterator implements Iterator {\n+\n+    //------------------------------------------------------------ Constructors\n+    \n+    public CollatingIterator(Comparator comp) {\n+        this(comp,2);\n+    }\n+    \n+    public CollatingIterator(Comparator comp, int initIterCapacity) {\n+        iterators = new ArrayList(initIterCapacity);\n+        comparator = comp;\n+    }\n+    \n+    public CollatingIterator(Comparator comp, Iterator a, Iterator b) {\n+        this(comp,2);\n+        addIterator(a);\n+        addIterator(b);\n+    }\n+\n+    //--------------------------------------------------------- Public Methods\n+\n+    public void addIterator(Iterator iter) throws IllegalStateException {\n+        checkNotStarted();\n+        iterators.add(iter);\n+    }\n+\n+    public void setComparator(Comparator comp) throws IllegalStateException {\n+        checkNotStarted();\n+        comparator = comp;\n+    }\n+\n+    public Comparator getIterator() {\n+        return comparator;\n+    }\n+\n+    //------------------------------------------------------- Iterator Methods\n+\n+    public boolean hasNext() {\n+        start();\n+        return anyValueSet(valueSet) || anyHasNext(iterators);\n+    }\n+\n+    public Object next() throws NoSuchElementException {\n+        if(!hasNext()) {\n+            throw new NoSuchElementException();\n+        } else {\n+            int leastIndex = least();\n+            if(leastIndex == -1) {\n+                throw new NoSuchElementException();\n+            } else {\n+                Object val = values.get(leastIndex);\n+                clear(leastIndex);\n+                lastReturned = leastIndex;\n+                return val;\n+            }\n+        }        \n+    }\n+\n+    public void remove() {\n+        if(-1 == lastReturned) {\n+            throw new NoSuchElementException(\"No value has been returned yet.\");\n+        } else {\n+            Iterator iter = (Iterator)(iterators.get(lastReturned));\n+            iter.remove();\n+        }\n+    }\n+\n+    //--------------------------------------------------------- Private Methods\n+\n+    private void start() {\n+        if(null == values) {\n+            values = new ArrayList(iterators.size());\n+            valueSet = new BitSet(iterators.size());\n+            for(int i=0;i<iterators.size();i++) {\n+                values.add(null);\n+                valueSet.clear(i);\n+            }\n+        }\n+    }\n+\n+    private boolean set(int i) {\n+        Iterator iter = (Iterator)(iterators.get(i));\n+        if(iter.hasNext()) {\n+            values.set(i,iter.next());\n+            valueSet.set(i);\n+            return true;\n+        } else {\n+            values.set(i,null);\n+            valueSet.clear(i);\n+            return false;\n+        }\n+    }\n+\n+    private void clear(int i) {\n+        values.set(i,null);\n+        valueSet.clear(i);\n+    }\n+\n+    private void checkNotStarted() throws IllegalStateException {\n+        if(null != values) {\n+            throw new IllegalStateException(\"Can't do that after next or hasNext has been called.\");\n+        }\n+    }\n+\n+    private int least() throws IllegalStateException {\n+        int leastIndex = -1;\n+        Object leastObject = null;                \n+        for(int i=0;i<values.size();i++) {\n+            if(!valueSet.get(i)) {\n+                set(i);\n+            }\n+            if(valueSet.get(i)) {\n+                if(leastIndex == -1) {\n+                    leastIndex = i;\n+                    leastObject = values.get(i);\n+                } else {\n+                    Object curObject = values.get(i);\n+                    if(comparator.compare(curObject,leastObject) < 0) {\n+                        leastObject = curObject;\n+                        leastIndex = i;\n+                    }\n+                }\n+            }\n+        }\n+        return leastIndex;\n+    }\n+\n+    private boolean anyValueSet(BitSet set) {\n+        for(int i=0;i<set.size();i++) {\n+            if(set.get(i)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private boolean anyHasNext(ArrayList iters) {\n+        for(int i=0;i<iters.size();i++) {\n+            Iterator iter = (Iterator)iters.get(i);\n+            if(iter.hasNext()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    //--------------------------------------------------------- Private Members\n+\n+    /** My {@link Comparator}. */\n+    private Comparator comparator = null;\n+\n+    /** My list of {@link Iterator}s. */\n+    private ArrayList iterators = null;\n+   \n+    /** {@link Iterator#next Next} objects peeked from each iterator. */\n+    private ArrayList values = null;\n+    \n+    /** Whether or not each {@link #values} element has been set. */\n+    private BitSet valueSet = null;\n+\n+    /** Index of the {@link #iterators iterator} from whom the last returned value was obtained. */\n+    private int lastReturned = -1;\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.29 2002/07/03 01:57:08 mas Exp $\n- * $Revision: 1.29 $\n- * $Date: 2002/07/03 01:57:08 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.30 2002/07/09 16:48:56 rwaldhoff Exp $\n+ * $Revision: 1.30 $\n+ * $Date: 2002/07/09 16:48:56 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.29 2002/07/03 01:57:08 mas Exp $\n+ * @version $Id: TestAll.java,v 1.30 2002/07/09 16:48:56 rwaldhoff Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestBinaryHeap.suite());\n         suite.addTest(TestBoundedFifoBuffer.suite());\n         suite.addTest(TestBoundedFifoBuffer2.suite());\n+        suite.addTest(TestCollatingIterator.suite());\n         suite.addTest(TestCollectionUtils.suite());\n         suite.addTest(TestComparableComparator.suite());\n         suite.addTest(TestComparatorChain.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestCollatingIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCollatingIterator.java,v 1.1 2002/07/09 16:48:56 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/07/09 16:48:56 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import junit.framework.*;\n+import java.util.Iterator;\n+import java.util.Comparator;\n+import java.util.ArrayList;\n+import org.apache.commons.collections.comparators.ComparableComparator;\n+\n+/**\n+ * Unit test suite for {@link CollatingIterator}.\n+ * @version $Revision: 1.1 $ $Date: 2002/07/09 16:48:56 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestCollatingIterator extends TestIterator {\n+\n+    //------------------------------------------------------------ Conventional\n+    \n+    public TestCollatingIterator(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestCollatingIterator.class);\n+    }\n+\n+    //--------------------------------------------------------------- Lifecycle\n+\n+    private Comparator comparator = null;\n+    private ArrayList evens = null; \n+    private ArrayList odds = null; \n+    private ArrayList fib = null; \n+\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        comparator = new ComparableComparator();\n+        evens = new ArrayList();\n+        odds = new ArrayList();\n+        for(int i=0;i<20;i++) {\n+            if(0 == i%2) {\n+                evens.add(new Integer(i));\n+            } else {\n+                odds.add(new Integer(i));\n+            }\n+        }\n+        fib = new ArrayList();\n+        fib.add(new Integer(1));\n+        fib.add(new Integer(1));\n+        fib.add(new Integer(2));\n+        fib.add(new Integer(3));\n+        fib.add(new Integer(5));\n+        fib.add(new Integer(8));\n+        fib.add(new Integer(13));\n+        fib.add(new Integer(21));\n+    }       \n+\n+    //---------------------------------------------------- TestIterator Methods\n+    \n+    public Iterator makeEmptyIterator() {\n+        return new CollatingIterator(comparator);\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(odds.iterator());\n+        iter.addIterator(fib.iterator());\n+        return iter;\n+    }\n+\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    public boolean supportsEmptyIterator() {\n+        return true;\n+    }\n+\n+    //------------------------------------------------------------------- Tests\n+\n+    public void testIterateEven() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(evens.iterator());\n+        for(int i=0;i<evens.size();i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i),iter.next());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateEvenOdd() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(odds.iterator());\n+        for(int i=0;i<20;i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(new Integer(i),iter.next());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateOddEven() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(odds.iterator());\n+        iter.addIterator(evens.iterator());\n+        for(int i=0;i<20;i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(new Integer(i),iter.next());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateEvenEven() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(evens.iterator());\n+        for(int i=0;i<evens.size();i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i),iter.next());\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i),iter.next());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+\n+    public void testIterateFibEvenOdd() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(fib.iterator());\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(odds.iterator());\n+        \n+        assertEquals(new Integer(0),iter.next());  // even   0\n+        assertEquals(new Integer(1),iter.next());  // fib    1\n+        assertEquals(new Integer(1),iter.next());  // fib    1\n+        assertEquals(new Integer(1),iter.next());  // odd    1\n+        assertEquals(new Integer(2),iter.next());  // fib    2\n+        assertEquals(new Integer(2),iter.next());  // even   2\n+        assertEquals(new Integer(3),iter.next());  // fib    3\n+        assertEquals(new Integer(3),iter.next());  // odd    3\n+        assertEquals(new Integer(4),iter.next());  // even   4\n+        assertEquals(new Integer(5),iter.next());  // fib    5\n+        assertEquals(new Integer(5),iter.next());  // odd    5\n+        assertEquals(new Integer(6),iter.next());  // even   6\n+        assertEquals(new Integer(7),iter.next());  // odd    7\n+        assertEquals(new Integer(8),iter.next());  // fib    8\n+        assertEquals(new Integer(8),iter.next());  // even   8\n+        assertEquals(new Integer(9),iter.next());  // odd    9\n+        assertEquals(new Integer(10),iter.next()); // even  10\n+        assertEquals(new Integer(11),iter.next()); // odd   11\n+        assertEquals(new Integer(12),iter.next()); // even  12\n+        assertEquals(new Integer(13),iter.next()); // fib   13\n+        assertEquals(new Integer(13),iter.next()); // odd   13\n+        assertEquals(new Integer(14),iter.next()); // even  14\n+        assertEquals(new Integer(15),iter.next()); // odd   15\n+        assertEquals(new Integer(16),iter.next()); // even  16\n+        assertEquals(new Integer(17),iter.next()); // odd   17\n+        assertEquals(new Integer(18),iter.next()); // even  18\n+        assertEquals(new Integer(19),iter.next()); // odd   19\n+        assertEquals(new Integer(21),iter.next()); // fib   21\n+\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testRemoveFromSingle() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(evens.iterator());\n+        int expectedSize = evens.size();\n+        while(iter.hasNext()) {\n+            Integer val = (Integer)(iter.next());\n+            if(val.intValue() % 4 == 0) {\n+                expectedSize--;\n+                iter.remove();\n+            }\n+        }\n+        assertEquals(expectedSize,evens.size());\n+    }\n+\n+    public void testRemoveFromDouble() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(odds.iterator());\n+        int expectedSize = evens.size() + odds.size();\n+        while(iter.hasNext()) {\n+            Integer val = (Integer)(iter.next());\n+            if(val.intValue() % 4 == 0 || val.intValue() % 3 == 0 ) {\n+                expectedSize--;\n+                iter.remove();\n+            }\n+        }\n+        assertEquals(expectedSize,(evens.size() + odds.size()));\n+    }   \n+\n+}\n+", "timestamp": 1026233336, "metainfo": ""}