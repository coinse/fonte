{"sha": "785cf45daebbf73c561fa8d3a27d617e277b8c50", "log": "Add tests of specific ListIterator behaviour   ", "commit": "\n--- a/src/test/org/apache/commons/collections/list/AbstractTestList.java\n+++ b/src/test/org/apache/commons/collections/list/AbstractTestList.java\n  * test case (method) your {@link List} fails or override one of the\n  * protected methods from AbstractTestCollection.\n  *\n- * @version $Revision: 1.6 $ $Date: 2004/02/18 01:20:34 $\n+ * @version $Revision: 1.7 $ $Date: 2004/05/12 22:20:54 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n      */\n     public void testListListIteratorByIndex() {\n         resetFull();\n-        for (int i = 0; i < confirmed.size(); i++) {\n+        try {\n+            getList().listIterator(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        resetFull();\n+        try {\n+            getList().listIterator(getList().size() + 1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        resetFull();\n+        for (int i = 0; i <= confirmed.size(); i++) {\n             forwardTest(getList().listIterator(i), i);\n             backwardTest(getList().listIterator(i), i);\n         }\n-    }\n-\n+        resetFull();\n+        for (int i = 0; i <= confirmed.size(); i++) {\n+            backwardTest(getList().listIterator(i), i);\n+        }\n+    }\n+\n+    /**\n+     * Tests remove on list iterator is correct.\n+     */\n+    public void testListListIteratorPreviousRemove() {\n+        if (isRemoveSupported() == false) return;\n+        resetFull();\n+        ListIterator it = getList().listIterator();\n+        Object zero = it.next();\n+        Object one = it.next();\n+        Object two = it.next();\n+        Object two2 = it.previous();\n+        Object one2 = it.previous();\n+        assertSame(one, one2);\n+        assertSame(two, two2);\n+        assertSame(zero, getList().get(0));\n+        assertSame(one, getList().get(1));\n+        assertSame(two, getList().get(2));\n+        it.remove();\n+        assertSame(zero, getList().get(0));\n+        assertSame(two, getList().get(1));\n+    }\n \n     /**\n      *  Traverses to the end of the given iterator.", "timestamp": 1084400454, "metainfo": ""}