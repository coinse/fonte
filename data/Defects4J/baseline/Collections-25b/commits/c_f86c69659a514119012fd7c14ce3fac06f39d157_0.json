{"sha": "f86c69659a514119012fd7c14ce3fac06f39d157", "log": "Don't use inefficient new Integer  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java\n+++ b/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java\n  * In order to demonstrate the use of the predicate, the following variables are declared:\n  *\n  * <pre>\n- * Integer ONE = new Integer(1);\n- * Integer TWO = new Integer(2);\n+ * Integer ONE = Integer.valueOf(1);\n+ * Integer TWO = Integer.valueOf(2);\n  *\n  * Comparator comparator = new Comparator() {\n  *\n--- a/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java\n         ClosureUtils.invokerClosure(\"reverse\").execute(buf);\n         assertEquals(\"olleH\", buf.toString());\n         buf = new StringBuffer(\"Hello\");\n-        ClosureUtils.invokerClosure(\"setLength\", new Class[] {Integer.TYPE}, new Object[] {new Integer(2)}).execute(buf);\n+        ClosureUtils.invokerClosure(\"setLength\", new Class[] {Integer.TYPE}, new Object[] {Integer.valueOf(2)}).execute(buf);\n         assertEquals(\"He\", buf.toString());\n     }\n \n--- a/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/CollectionUtilsTest.java\n \n     Transformer<Object, Integer> TRANSFORM_TO_INTEGER = new Transformer<Object, Integer>() {\n         public Integer transform(final Object input) {\n-            return new Integer(((Long)input).intValue());\n+            return Integer.valueOf(((Long)input).intValue());\n         }\n     };\n \n     @Test\n     public void intersectionUsesMethodEquals() {\n         // Let elta and eltb be objects...\n-        final Integer elta = new Integer(17);\n-        final Integer eltb = new Integer(17);\n+        final Integer elta = Integer.valueOf(17);\n+        final Integer eltb = Integer.valueOf(17);\n \n         // ...which are equal...\n         assertEquals(elta, eltb);\n--- a/src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/EnumerationUtilsTest.java\n \n     public void testToListWithHashtable() {\n         final Hashtable<String, Integer> expected = new Hashtable<String, Integer>();\n-        expected.put(\"one\", new Integer(1));\n-        expected.put(\"two\", new Integer(2));\n-        expected.put(\"three\", new Integer(3));\n+        expected.put(\"one\", Integer.valueOf(1));\n+        expected.put(\"two\", Integer.valueOf(2));\n+        expected.put(\"three\", Integer.valueOf(3));\n         // validate elements.\n         final List<Integer> actualEltList = EnumerationUtils.toList(expected.elements());\n         assertEquals(expected.size(), actualEltList.size());\n-        assertTrue(actualEltList.contains(new Integer(1)));\n-        assertTrue(actualEltList.contains(new Integer(2)));\n-        assertTrue(actualEltList.contains(new Integer(3)));\n+        assertTrue(actualEltList.contains(Integer.valueOf(1)));\n+        assertTrue(actualEltList.contains(Integer.valueOf(2)));\n+        assertTrue(actualEltList.contains(Integer.valueOf(3)));\n         final List<Integer> expectedEltList = new ArrayList<Integer>();\n-        expectedEltList.add(new Integer(1));\n-        expectedEltList.add(new Integer(2));\n-        expectedEltList.add(new Integer(3));\n+        expectedEltList.add(Integer.valueOf(1));\n+        expectedEltList.add(Integer.valueOf(2));\n+        expectedEltList.add(Integer.valueOf(3));\n         assertTrue(actualEltList.containsAll(expectedEltList));\n \n         // validate keys.\n--- a/src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/FactoryUtilsTest.java\n     }\n \n     public void testConstantFactoryConstant() {\n-        final Integer constant = new Integer(9);\n+        final Integer constant = Integer.valueOf(9);\n         final Factory<Integer> factory = FactoryUtils.constantFactory(constant);\n         assertNotNull(factory);\n         final Integer created = factory.create();\n     }\n \n     public void testPrototypeFactoryPublicSerialization() throws Exception {\n-        final Integer proto = new Integer(9);\n+        final Integer proto = Integer.valueOf(9);\n         final Factory<Integer> factory = FactoryUtils.prototypeFactory(proto);\n         assertNotNull(factory);\n         final Integer created = factory.create();\n         // 2nd Jan 1970\n         final Factory<Date> factory = FactoryUtils.instantiateFactory(Date.class,\n             new Class[] {Integer.TYPE, Integer.TYPE, Integer.TYPE},\n-            new Object[] {new Integer(70), new Integer(0), new Integer(2)});\n+            new Object[] {Integer.valueOf(70), Integer.valueOf(0), Integer.valueOf(2)});\n         assertNotNull(factory);\n         final Date created = factory.create();\n         // long time of 1 day (== 2nd Jan 1970)\n--- a/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/IteratorUtilsTest.java\n     \n     public void testToList() {\n         final List<Object> list = new ArrayList<Object>();\n-        list.add(new Integer(1));\n+        list.add(Integer.valueOf(1));\n         list.add(\"Two\");\n         list.add(null);\n         final List<Object> result = IteratorUtils.toList(list.iterator());\n \n     public void testToArray() {\n         final List<Object> list = new ArrayList<Object>();\n-        list.add(new Integer(1));\n+        list.add(Integer.valueOf(1));\n         list.add(\"Two\");\n         list.add(null);\n         final Object[] result = IteratorUtils.toArray(list.iterator());\n         assertTrue(iterator.next().equals(\"a\"));\n \n         try {\n-            iterator = IteratorUtils.arrayIterator(new Integer(0));\n+            iterator = IteratorUtils.arrayIterator(Integer.valueOf(0));\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (final IllegalArgumentException ex) {\n                 // expected\n \n         final int[] intArray = {0, 1, 2};\n         iterator = IteratorUtils.arrayIterator(intArray);\n-        assertTrue(iterator.next().equals(new Integer(0)));\n-        assertTrue(iterator.next().equals(new Integer(1)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(0)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(1)));\n         iterator.reset();\n-        assertTrue(iterator.next().equals(new Integer(0)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(0)));\n \n         iterator = IteratorUtils.arrayIterator(intArray, 1);\n-        assertTrue(iterator.next().equals(new Integer(1)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(1)));\n \n         try {\n             iterator = IteratorUtils.arrayIterator(intArray, -1);\n         }\n \n         iterator = IteratorUtils.arrayIterator(intArray, 2, 3);\n-        assertTrue(iterator.next().equals(new Integer(2)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(2)));\n \n         try {\n             iterator = IteratorUtils.arrayIterator(intArray, 2, 4);\n         assertTrue(iterator.previousIndex() == 3);\n \n         try {\n-            iterator = IteratorUtils.arrayListIterator(new Integer(0));\n+            iterator = IteratorUtils.arrayListIterator(Integer.valueOf(0));\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (final IllegalArgumentException ex) {\n                 // expected\n         assertTrue(iterator.previousIndex() == -1);\n         assertTrue(!iterator.hasPrevious());\n         assertTrue(iterator.nextIndex() == 0);\n-        assertTrue(iterator.next().equals(new Integer(0)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(0)));\n         assertTrue(iterator.previousIndex() == 0);\n         assertTrue(iterator.nextIndex() == 1);\n-        assertTrue(iterator.next().equals(new Integer(1)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(1)));\n         assertTrue(iterator.previousIndex() == 1);\n         assertTrue(iterator.nextIndex() == 2);\n-        assertTrue(iterator.previous().equals(new Integer(1)));\n-        assertTrue(iterator.next().equals(new Integer(1)));\n+        assertTrue(iterator.previous().equals(Integer.valueOf(1)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(1)));\n \n         iterator = IteratorUtils.arrayListIterator(intArray, 1);\n         assertTrue(iterator.previousIndex() == -1);\n         assertTrue(!iterator.hasPrevious());\n         assertTrue(iterator.nextIndex() == 0);\n-        assertTrue(iterator.next().equals(new Integer(1)));\n-        assertTrue(iterator.previous().equals(new Integer(1)));\n-        assertTrue(iterator.next().equals(new Integer(1)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(1)));\n+        assertTrue(iterator.previous().equals(Integer.valueOf(1)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(1)));\n         assertTrue(iterator.previousIndex() == 0);\n         assertTrue(iterator.nextIndex() == 1);\n-        assertTrue(iterator.next().equals(new Integer(2)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(2)));\n         assertTrue(iterator.previousIndex() == 1);\n         assertTrue(iterator.nextIndex() == 2);\n-        assertTrue(iterator.previous().equals(new Integer(2)));\n+        assertTrue(iterator.previous().equals(Integer.valueOf(2)));\n         assertTrue(iterator.previousIndex() == 0);\n         assertTrue(iterator.nextIndex() == 1);\n \n         iterator = IteratorUtils.arrayListIterator(intArray, 2, 3);\n         assertTrue(!iterator.hasPrevious());\n         assertTrue(iterator.previousIndex() == -1);\n-        assertTrue(iterator.next().equals(new Integer(2)));\n+        assertTrue(iterator.next().equals(Integer.valueOf(2)));\n         assertTrue(iterator.hasPrevious());\n         assertTrue(!iterator.hasNext());\n \n--- a/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/ListUtilsTest.java\n \n             public Integer create() {\n                 index++;\n-                return new Integer(index);\n+                return Integer.valueOf(index);\n             }\n         });\n \n--- a/src/test/java/org/apache/commons/collections4/MapUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/MapUtilsTest.java\n     }\n \n     public void testLazyMapFactory() {\n-        final Factory<Integer> factory = FactoryUtils.constantFactory(new Integer(5));\n+        final Factory<Integer> factory = FactoryUtils.constantFactory(Integer.valueOf(5));\n         Map<Object, Object> map = MapUtils.lazyMap(new HashMap<Object, Object>(), factory);\n         assertTrue(map instanceof LazyMap);\n         try {\n         final Map<Object, Object> map = MapUtils.lazyMap(new HashMap<Object, Object>(), new Transformer<Object, Object>() {\n             public Object transform(final Object mapKey) {\n                 if (mapKey instanceof String) {\n-                    return new Integer((String) mapKey);\n+                    return Integer.valueOf((String) mapKey);\n                 }\n                 return null;\n             }\n \n         assertEquals(0, map.size());\n         final Integer i1 = (Integer) map.get(\"5\");\n-        assertEquals(new Integer(5), i1);\n+        assertEquals(Integer.valueOf(5), i1);\n         assertEquals(1, map.size());\n         final Integer i2 = (Integer) map.get(new String(new char[] {'5'}));\n-        assertEquals(new Integer(5), i2);\n+        assertEquals(Integer.valueOf(5), i2);\n         assertEquals(1, map.size());\n         assertSame(i1, i2);\n     }\n         assertEquals(list.size(), map.size());\n \n         for (int i = 0; i < list.size(); i++) {\n-            assertEquals(true, map.containsKey(new Integer(list.get(i))));\n+            assertEquals(true, map.containsKey(Integer.valueOf(list.get(i))));\n             assertEquals(false, map.containsKey(list.get(i)));\n             assertEquals(true, map.containsValue(list.get(i)));\n-            assertEquals(list.get(i), map.get(new Integer(list.get(i))));\n+            assertEquals(list.get(i), map.get(Integer.valueOf(list.get(i))));\n         }\n \n         // Now test both Key-Value transform population\n \n         assertEquals(list.size(), map.size());\n         for (int i = 0; i < list.size(); i++) {\n-            assertEquals(true, map.containsKey(new Integer(list.get(i))));\n+            assertEquals(true, map.containsKey(Integer.valueOf(list.get(i))));\n             assertEquals(false, map.containsKey(list.get(i)));\n-            assertEquals(true, map.containsValue(new Integer(list.get(i))));\n-            assertEquals(new Integer(list.get(i)), map.get(new Integer(list.get(i))));\n+            assertEquals(true, map.containsValue(Integer.valueOf(list.get(i))));\n+            assertEquals(Integer.valueOf(list.get(i)), map.get(Integer.valueOf(list.get(i))));\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/PredicateUtilsTest.java\n \n     @Test public void testIdentityPredicate() {\n         assertSame(nullPredicate(), PredicateUtils.identityPredicate(null));\n-        assertNotNull(PredicateUtils.identityPredicate(new Integer(6)));\n-        assertEquals(false, PredicateUtils.identityPredicate(new Integer(6)).evaluate(null));\n-        assertEquals(false, PredicateUtils.<Object>identityPredicate(new Integer(6)).evaluate(cObject));\n-        assertEquals(false, PredicateUtils.<Object>identityPredicate(new Integer(6)).evaluate(cString));\n-        assertEquals(false, PredicateUtils.identityPredicate(new Integer(6)).evaluate(cInteger));\n+        assertNotNull(PredicateUtils.identityPredicate(Integer.valueOf(6)));\n+        assertEquals(false, PredicateUtils.identityPredicate(Integer.valueOf(6)).evaluate(null));\n+        assertEquals(false, PredicateUtils.<Object>identityPredicate(Integer.valueOf(6)).evaluate(cObject));\n+        assertEquals(false, PredicateUtils.<Object>identityPredicate(Integer.valueOf(6)).evaluate(cString));\n+        assertEquals(false, PredicateUtils.identityPredicate(Integer.valueOf(6)).evaluate(cInteger));\n         assertEquals(true, PredicateUtils.identityPredicate(cInteger).evaluate(cInteger));\n     }\n \n--- a/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/TransformerUtilsTest.java\n \n     private static final Object cObject = new Object();\n     private static final Object cString = \"Hello\";\n-    private static final Object cInteger = new Integer(6);\n+    private static final Object cInteger = Integer.valueOf(6);\n \n     /**\n      * Construct\n         map.put(null, 0);\n         map.put(cObject, 1);\n         map.put(cString, 2);\n-        assertEquals(new Integer(0), TransformerUtils.mapTransformer(map).transform(null));\n-        assertEquals(new Integer(1), TransformerUtils.mapTransformer(map).transform(cObject));\n-        assertEquals(new Integer(2), TransformerUtils.mapTransformer(map).transform(cString));\n+        assertEquals(Integer.valueOf(0), TransformerUtils.mapTransformer(map).transform(null));\n+        assertEquals(Integer.valueOf(1), TransformerUtils.mapTransformer(map).transform(cObject));\n+        assertEquals(Integer.valueOf(2), TransformerUtils.mapTransformer(map).transform(cString));\n         assertEquals(null, TransformerUtils.mapTransformer(map).transform(cInteger));\n         assertSame(ConstantTransformer.NULL_INSTANCE, TransformerUtils.mapTransformer(null));\n     }\n \n     public void testInvokerTransformer() {\n         final List<Object> list = new ArrayList<Object>();\n-        assertEquals(new Integer(0), TransformerUtils.invokerTransformer(\"size\").transform(list));\n+        assertEquals(Integer.valueOf(0), TransformerUtils.invokerTransformer(\"size\").transform(list));\n         list.add(new Object());\n-        assertEquals(new Integer(1), TransformerUtils.invokerTransformer(\"size\").transform(list));\n+        assertEquals(Integer.valueOf(1), TransformerUtils.invokerTransformer(\"size\").transform(list));\n         assertEquals(null, TransformerUtils.invokerTransformer(\"size\").transform(null));\n \n         try {\n         assertEquals( \"StringValueTransformer should return \\\"null\\\" when given a null argument.\", \"null\",\n             TransformerUtils.stringValueTransformer().transform(null));\n         assertEquals( \"StringValueTransformer should return toString value\", \"6\",\n-            TransformerUtils.stringValueTransformer().transform(new Integer(6)));\n+            TransformerUtils.stringValueTransformer().transform(Integer.valueOf(6)));\n     }\n \n     // instantiateFactory\n--- a/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java\n     @SuppressWarnings(\"unchecked\")\n     public void testIllegalAdd() {\n         final Bag<T> bag = makeTestBag();\n-        final Integer i = new Integer(3);\n+        final Integer i = Integer.valueOf(3);\n         try {\n             bag.add((T) i);\n             fail(\"Integer should fail string predicate.\");\n         final HashBag<Object> elements = new HashBag<Object>();\n         elements.add(\"one\");\n         elements.add(\"two\");\n-        elements.add(new Integer(3));\n+        elements.add(Integer.valueOf(3));\n         elements.add(\"four\");\n         try {\n             decorateBag((HashBag<T>) elements, stringPredicate());\n--- a/src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/TransformedBagTest.java\n         for (int i = 0; i < els.length; i++) {\n             bag.add((T) els[i]);\n             assertEquals(i + 1, bag.size());\n-            assertEquals(true, bag.contains(new Integer((String) els[i])));\n+            assertEquals(true, bag.contains(Integer.valueOf((String) els[i])));\n             assertEquals(false, bag.contains(els[i]));\n         }\n \n         assertEquals(false, bag.remove(els[0]));\n-        assertEquals(true, bag.remove(new Integer((String) els[0])));\n+        assertEquals(true, bag.remove(Integer.valueOf((String) els[0])));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n                 (Transformer<T, T>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, bag.size());\n         for (final Object el : els) {\n-            assertEquals(true, bag.contains(new Integer((String) el)));\n+            assertEquals(true, bag.contains(Integer.valueOf((String) el)));\n             assertEquals(false, bag.contains(el));\n         }\n         \n         assertEquals(false, bag.remove(els[0]));\n-        assertEquals(true, bag.remove(new Integer((String) els[0])));\n+        assertEquals(true, bag.remove(Integer.valueOf((String) els[0])));\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bag/TransformedSortedBagTest.java\n         for (int i = 0; i < els.length; i++) {\n             bag.add((T) els[i]);\n             assertEquals(i + 1, bag.size());\n-            assertEquals(true, bag.contains(new Integer((String) els[i])));\n+            assertEquals(true, bag.contains(Integer.valueOf((String) els[i])));\n         }\n \n-        assertEquals(true, bag.remove(new Integer((String) els[0])));\n+        assertEquals(true, bag.remove(Integer.valueOf((String) els[0])));\n \n     }\n \n         final Bag<?> bag = TransformedBag.transformedBag(originalBag, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, bag.size());\n         for (final Object el : els) {\n-            assertEquals(true, bag.contains(new Integer((String) el)));\n+            assertEquals(true, bag.contains(Integer.valueOf((String) el)));\n         }\n         \n-        assertEquals(true, bag.remove(new Integer((String) els[0])));\n+        assertEquals(true, bag.remove(Integer.valueOf((String) els[0])));\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections4/collection/AbstractCollectionTest.java\n         return (E[]) new Object[] {\n             new String(\"\"),\n             new String(\"One\"),\n-            new Integer(2),\n+            Integer.valueOf(2),\n             \"Three\",\n-            new Integer(4),\n+            Integer.valueOf(4),\n             \"One\",\n             new Double(5),\n             new Float(6),\n             \"Seven\",\n             \"Eight\",\n             new String(\"Nine\"),\n-            new Integer(10),\n+            Integer.valueOf(10),\n             new Short((short)11),\n             new Long(12),\n             \"Thirteen\",\n     @SuppressWarnings(\"unchecked\")\n     public E[] getOtherNonNullElements() {\n         return (E[]) new Object[] {\n-            new Integer(0),\n+            Integer.valueOf(0),\n             new Float(0),\n             new Double(0),\n             \"Zero\",\n--- a/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java\n     @SuppressWarnings(\"unchecked\")\n     public void testIllegalAdd() {\n         final Collection<E> c = makeTestCollection();\n-        final Integer i = new Integer(3);\n+        final Integer i = Integer.valueOf(3);\n         try {\n             c.add((E) i);\n             fail(\"Integer should fail string predicate.\");\n         final List<E> elements = new ArrayList<E>();\n         elements.add((E) \"one\");\n         elements.add((E) \"two\");\n-        elements.add((E) new Integer(3));\n+        elements.add((E) Integer.valueOf(3));\n         elements.add((E) \"four\");\n         try {\n             c.addAll(elements);\n         }\n         assertTrue(\"Collection shouldn't contain illegal element\", !c.contains(\"one\"));\n         assertTrue(\"Collection shouldn't contain illegal element\", !c.contains(\"two\"));\n-        assertTrue(\"Collection shouldn't contain illegal element\", !c.contains(new Integer(3)));\n+        assertTrue(\"Collection shouldn't contain illegal element\", !c.contains(Integer.valueOf(3)));\n         assertTrue(\"Collection shouldn't contain illegal element\", !c.contains(\"four\"));\n     }\n \n--- a/src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java\n     \n     private static class StringToInteger implements Transformer<Object, Object> {\n         public Object transform(final Object input) {\n-            return new Integer((String) input);\n+            return Integer.valueOf((String) input);\n         }\n     }\n     \n         for (int i = 0; i < els.length; i++) {\n             coll.add(els[i]);\n             assertEquals(i + 1, coll.size());\n-            assertEquals(true, coll.contains(new Integer((String) els[i])));\n+            assertEquals(true, coll.contains(Integer.valueOf((String) els[i])));\n             assertEquals(false, coll.contains(els[i]));\n         }\n         \n-        assertEquals(true, coll.remove(new Integer((String) els[0])));\n+        assertEquals(true, coll.remove(Integer.valueOf((String) els[0])));\n     }\n \n     public void testTransformedCollection_decorateTransform() {\n         final Collection<Object> collection = TransformedCollection.transformedCollection(originalCollection, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, collection.size());\n         for (final Object el : els) {\n-            assertEquals(true, collection.contains(new Integer((String) el)));\n+            assertEquals(true, collection.contains(Integer.valueOf((String) el)));\n             assertEquals(false, collection.contains(el));\n         }\n         \n         assertEquals(false, collection.remove(els[0]));\n-        assertEquals(true, collection.remove(new Integer((String) els[0])));\n+        assertEquals(true, collection.remove(Integer.valueOf((String) els[0])));\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/comparators/AbstractNullComparatorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/comparators/AbstractNullComparatorTest.java\n         @Override\n         public List<Integer> getComparableObjectsOrdered() {\n             final List<Integer> list = new LinkedList<Integer>();\n-            list.add(new Integer(1));\n-            list.add(new Integer(2));\n-            list.add(new Integer(3));\n-            list.add(new Integer(4));\n-            list.add(new Integer(5));\n+            list.add(Integer.valueOf(1));\n+            list.add(Integer.valueOf(2));\n+            list.add(Integer.valueOf(3));\n+            list.add(Integer.valueOf(4));\n+            list.add(Integer.valueOf(5));\n             list.add(null);\n             return list;\n         }\n         public List<Integer> getComparableObjectsOrdered() {\n             final List<Integer> list = new LinkedList<Integer>();\n             list.add(null);\n-            list.add(new Integer(1));\n-            list.add(new Integer(2));\n-            list.add(new Integer(3));\n-            list.add(new Integer(4));\n-            list.add(new Integer(5));\n+            list.add(Integer.valueOf(1));\n+            list.add(Integer.valueOf(2));\n+            list.add(Integer.valueOf(3));\n+            list.add(Integer.valueOf(4));\n+            list.add(Integer.valueOf(5));\n             return list;\n         }\n \n--- a/src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java\n+++ b/src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java\n     @Test\n     public void testNoopComparatorChain() {\n         final ComparatorChain<Integer> chain = new ComparatorChain<Integer>();\n-        final Integer i1 = new Integer(4);\n-        final Integer i2 = new Integer(6);\n+        final Integer i1 = Integer.valueOf(4);\n+        final Integer i2 = Integer.valueOf(6);\n         chain.addComparator(new ComparableComparator<Integer>());\n \n         final int correctValue = i1.compareTo(i2);\n     @Test\n     public void testBadNoopComparatorChain() {\n         final ComparatorChain<Integer> chain = new ComparatorChain<Integer>();\n-        final Integer i1 = new Integer(4);\n-        final Integer i2 = new Integer(6);\n+        final Integer i1 = Integer.valueOf(4);\n+        final Integer i2 = Integer.valueOf(6);\n         try {\n             chain.compare(i1,i2);\n             fail(\"An exception should be thrown when a chain contains zero comparators.\");\n         final List<Comparator<Integer>> list = new LinkedList<Comparator<Integer>>();\n         list.add(new ComparableComparator<Integer>());\n         final ComparatorChain<Integer> chain = new ComparatorChain<Integer>(list);\n-        final Integer i1 = new Integer(4);\n-        final Integer i2 = new Integer(6);\n+        final Integer i1 = Integer.valueOf(4);\n+        final Integer i2 = Integer.valueOf(6);\n \n         final int correctValue = i1.compareTo(i2);\n         assertTrue(\"Comparison returns the right order\", chain.compare(i1, i2) == correctValue);\n     public void testBadListComparatorChain() {\n         final List<Comparator<Integer>> list = new LinkedList<Comparator<Integer>>();\n         final ComparatorChain<Integer> chain = new ComparatorChain<Integer>(list);\n-        final Integer i1 = new Integer(4);\n-        final Integer i2 = new Integer(6);\n+        final Integer i1 = Integer.valueOf(4);\n+        final Integer i2 = Integer.valueOf(6);\n         try {\n             chain.compare(i1, i2);\n             fail(\"An exception should be thrown when a chain contains zero comparators.\");\n             }\n         }, true);\n \n-        assertTrue(chain.compare(new Integer(4), new Integer(5)) > 0);\n-        assertTrue(chain.compare(new Integer(5), new Integer(4)) < 0);\n-        assertTrue(chain.compare(new Integer(4), new Integer(4)) == 0);\n+        assertTrue(chain.compare(Integer.valueOf(4), Integer.valueOf(5)) > 0);\n+        assertTrue(chain.compare(Integer.valueOf(5), Integer.valueOf(4)) < 0);\n+        assertTrue(chain.compare(Integer.valueOf(4), Integer.valueOf(4)) == 0);\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/comparators/ReverseComparatorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/comparators/ReverseComparatorTest.java\n     @Override\n     public List<Integer> getComparableObjectsOrdered() {\n         final List<Integer> list = new LinkedList<Integer>();\n-        list.add(new Integer(1));\n-        list.add(new Integer(2));\n-        list.add(new Integer(3));\n-        list.add(new Integer(4));\n-        list.add(new Integer(5));\n+        list.add(Integer.valueOf(1));\n+        list.add(Integer.valueOf(2));\n+        list.add(Integer.valueOf(3));\n+        list.add(Integer.valueOf(4));\n+        list.add(Integer.valueOf(5));\n         return list;\n     }\n \n--- a/src/test/java/org/apache/commons/collections4/functors/AbstractPredicateTest.java\n+++ b/src/test/java/org/apache/commons/collections4/functors/AbstractPredicateTest.java\n     public void initialiseTestObjects() throws Exception {\n         cObject = new Object();\n         cString = \"Hello\";\n-        cInteger = new Integer(6);\n+        cInteger = Integer.valueOf(6);\n     }\n     \n     @Test\n--- a/src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java\n     public void testIterator() {\n         final Iterator<E> iter = makeObject();\n         for (final int element : testArray) {\n-            final Integer testValue = new Integer(element);\n+            final Integer testValue = Integer.valueOf(element);\n             final Number iterValue = (Number) iter.next();\n \n             assertEquals(\"Iteration value is correct\", testValue, iterValue);\n--- a/src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/CollatingIteratorTest.java\n         final CollatingIterator<Integer> iter = new CollatingIterator<Integer>(comparator, evens.iterator(), odds.iterator());\n         for (int i = 0; i < 20; i++) {\n             assertTrue(iter.hasNext());\n-            assertEquals(new Integer(i), iter.next());\n+            assertEquals(Integer.valueOf(i), iter.next());\n             assertEquals(i % 2,iter.getIteratorIndex());\n         }\n         assertTrue(!iter.hasNext());\n         final CollatingIterator<Integer> iter = new CollatingIterator<Integer>(comparator, odds.iterator(), evens.iterator());\n         for (int i = 0; i < 20; i++) {\n             assertTrue(iter.hasNext());\n-            assertEquals(new Integer(i),iter.next());\n+            assertEquals(Integer.valueOf(i),iter.next());\n             assertEquals(i % 2 == 0 ? 1 : 0,iter.getIteratorIndex());\n         }\n         assertTrue(!iter.hasNext());\n         iter.addIterator(evens.iterator());\n         iter.addIterator(odds.iterator());\n \n-        assertEquals(new Integer(0),iter.next());  // even   0\n-        assertEquals(1,iter.getIteratorIndex());\n-        assertEquals(new Integer(1),iter.next());  // fib    1\n-        assertEquals(0,iter.getIteratorIndex());\n-        assertEquals(new Integer(1),iter.next());  // fib    1\n-        assertEquals(0,iter.getIteratorIndex());\n-        assertEquals(new Integer(1),iter.next());  // odd    1\n-        assertEquals(2,iter.getIteratorIndex());\n-        assertEquals(new Integer(2),iter.next());  // fib    2\n-        assertEquals(0,iter.getIteratorIndex());\n-        assertEquals(new Integer(2),iter.next());  // even   2\n-        assertEquals(1,iter.getIteratorIndex());\n-        assertEquals(new Integer(3),iter.next());  // fib    3\n-        assertEquals(0,iter.getIteratorIndex());\n-        assertEquals(new Integer(3),iter.next());  // odd    3\n-        assertEquals(2,iter.getIteratorIndex());\n-        assertEquals(new Integer(4),iter.next());  // even   4\n-        assertEquals(1,iter.getIteratorIndex());\n-        assertEquals(new Integer(5),iter.next());  // fib    5\n-        assertEquals(0,iter.getIteratorIndex());\n-        assertEquals(new Integer(5),iter.next());  // odd    5\n-        assertEquals(2,iter.getIteratorIndex());\n-        assertEquals(new Integer(6),iter.next());  // even   6\n-        assertEquals(1,iter.getIteratorIndex());\n-        assertEquals(new Integer(7),iter.next());  // odd    7\n-        assertEquals(2,iter.getIteratorIndex());\n-        assertEquals(new Integer(8),iter.next());  // fib    8\n-        assertEquals(0,iter.getIteratorIndex());\n-        assertEquals(new Integer(8),iter.next());  // even   8\n-        assertEquals(1,iter.getIteratorIndex());\n-        assertEquals(new Integer(9),iter.next());  // odd    9\n-        assertEquals(2,iter.getIteratorIndex());\n-        assertEquals(new Integer(10),iter.next()); // even  10\n-        assertEquals(1,iter.getIteratorIndex());\n-        assertEquals(new Integer(11),iter.next()); // odd   11\n-        assertEquals(2,iter.getIteratorIndex());\n-        assertEquals(new Integer(12),iter.next()); // even  12\n-        assertEquals(1,iter.getIteratorIndex());\n-        assertEquals(new Integer(13),iter.next()); // fib   13\n-        assertEquals(0,iter.getIteratorIndex());\n-        assertEquals(new Integer(13),iter.next()); // odd   13\n-        assertEquals(2,iter.getIteratorIndex());\n-        assertEquals(new Integer(14),iter.next()); // even  14\n-        assertEquals(1,iter.getIteratorIndex());\n-        assertEquals(new Integer(15),iter.next()); // odd   15\n-        assertEquals(2,iter.getIteratorIndex());\n-        assertEquals(new Integer(16),iter.next()); // even  16\n-        assertEquals(1,iter.getIteratorIndex());\n-        assertEquals(new Integer(17),iter.next()); // odd   17\n-        assertEquals(2,iter.getIteratorIndex());\n-        assertEquals(new Integer(18),iter.next()); // even  18\n-        assertEquals(1,iter.getIteratorIndex());\n-        assertEquals(new Integer(19),iter.next()); // odd   19\n-        assertEquals(2,iter.getIteratorIndex());\n-        assertEquals(new Integer(21),iter.next()); // fib   21\n+        assertEquals(Integer.valueOf(0),iter.next());  // even   0\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(1),iter.next());  // fib    1\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(1),iter.next());  // fib    1\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(1),iter.next());  // odd    1\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(2),iter.next());  // fib    2\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(2),iter.next());  // even   2\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(3),iter.next());  // fib    3\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(3),iter.next());  // odd    3\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(4),iter.next());  // even   4\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(5),iter.next());  // fib    5\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(5),iter.next());  // odd    5\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(6),iter.next());  // even   6\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(7),iter.next());  // odd    7\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(8),iter.next());  // fib    8\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(8),iter.next());  // even   8\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(9),iter.next());  // odd    9\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(10),iter.next()); // even  10\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(11),iter.next()); // odd   11\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(12),iter.next()); // even  12\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(13),iter.next()); // fib   13\n+        assertEquals(0,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(13),iter.next()); // odd   13\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(14),iter.next()); // even  14\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(15),iter.next()); // odd   15\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(16),iter.next()); // even  16\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(17),iter.next()); // odd   17\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(18),iter.next()); // even  18\n+        assertEquals(1,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(19),iter.next()); // odd   19\n+        assertEquals(2,iter.getIteratorIndex());\n+        assertEquals(Integer.valueOf(21),iter.next()); // fib   21\n         assertEquals(0,iter.getIteratorIndex());\n \n         assertTrue(!iter.hasNext());\n--- a/src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java\n         fours = new ArrayList<Integer>();\n         sixes = new ArrayList<Integer>();\n         for (int i = 0; i < 20; i++) {\n-            list.add(new Integer(i));\n-            if (i % 2 == 0) { evens.add(new Integer(i)); }\n-            if (i % 2 == 1) { odds.add(new Integer(i)); }\n-            if (i % 3 == 0) { threes.add(new Integer(i)); }\n-            if (i % 4 == 0) { fours.add(new Integer(i)); }\n-            if (i % 6 == 0) { sixes.add(new Integer(i)); }\n+            list.add(Integer.valueOf(i));\n+            if (i % 2 == 0) { evens.add(Integer.valueOf(i)); }\n+            if (i % 2 == 1) { odds.add(Integer.valueOf(i)); }\n+            if (i % 3 == 0) { threes.add(Integer.valueOf(i)); }\n+            if (i % 4 == 0) { fours.add(Integer.valueOf(i)); }\n+            if (i % 6 == 0) { sixes.add(Integer.valueOf(i)); }\n         }\n \n         truePred = new Predicate<Integer>() {\n         // do this one \"by hand\" as a sanity check\n         final FilterListIterator<Integer> filtered = new FilterListIterator<Integer>(list.listIterator(), threePred);\n         \n-        assertEquals(new Integer(0), filtered.next());\n-        assertEquals(new Integer(3), filtered.next());\n-        assertEquals(new Integer(6), filtered.next());\n-        assertEquals(new Integer(9), filtered.next());\n-        assertEquals(new Integer(12), filtered.next());\n-        assertEquals(new Integer(15), filtered.next());\n-        assertEquals(new Integer(18), filtered.next());\n-\n-        assertEquals(new Integer(18), filtered.previous());\n-        assertEquals(new Integer(15), filtered.previous());\n-        assertEquals(new Integer(12), filtered.previous());\n-        assertEquals(new Integer(9), filtered.previous());\n-        assertEquals(new Integer(6), filtered.previous());\n-        assertEquals(new Integer(3), filtered.previous());\n-        assertEquals(new Integer(0), filtered.previous());\n+        assertEquals(Integer.valueOf(0), filtered.next());\n+        assertEquals(Integer.valueOf(3), filtered.next());\n+        assertEquals(Integer.valueOf(6), filtered.next());\n+        assertEquals(Integer.valueOf(9), filtered.next());\n+        assertEquals(Integer.valueOf(12), filtered.next());\n+        assertEquals(Integer.valueOf(15), filtered.next());\n+        assertEquals(Integer.valueOf(18), filtered.next());\n+\n+        assertEquals(Integer.valueOf(18), filtered.previous());\n+        assertEquals(Integer.valueOf(15), filtered.previous());\n+        assertEquals(Integer.valueOf(12), filtered.previous());\n+        assertEquals(Integer.valueOf(9), filtered.previous());\n+        assertEquals(Integer.valueOf(6), filtered.previous());\n+        assertEquals(Integer.valueOf(3), filtered.previous());\n+        assertEquals(Integer.valueOf(0), filtered.previous());\n     \n         assertTrue(!filtered.hasPrevious());\n \n-        assertEquals(new Integer(0), filtered.next());\n-        assertEquals(new Integer(3), filtered.next());\n-        assertEquals(new Integer(6), filtered.next());\n-        assertEquals(new Integer(9), filtered.next());\n-        assertEquals(new Integer(12), filtered.next());\n-        assertEquals(new Integer(15), filtered.next());\n-        assertEquals(new Integer(18), filtered.next());\n+        assertEquals(Integer.valueOf(0), filtered.next());\n+        assertEquals(Integer.valueOf(3), filtered.next());\n+        assertEquals(Integer.valueOf(6), filtered.next());\n+        assertEquals(Integer.valueOf(9), filtered.next());\n+        assertEquals(Integer.valueOf(12), filtered.next());\n+        assertEquals(Integer.valueOf(15), filtered.next());\n+        assertEquals(Integer.valueOf(18), filtered.next());\n \n         assertTrue(!filtered.hasNext());\n \n-        assertEquals(new Integer(18), filtered.previous());\n-        assertEquals(new Integer(15), filtered.previous());\n-        assertEquals(new Integer(12), filtered.previous());\n-        assertEquals(new Integer(9), filtered.previous());\n-        assertEquals(new Integer(6), filtered.previous());\n-        assertEquals(new Integer(3), filtered.previous());\n-        assertEquals(new Integer(0), filtered.previous());\n-\n-        assertEquals(new Integer(0), filtered.next());\n-        assertEquals(new Integer(0), filtered.previous());\n-        assertEquals(new Integer(0), filtered.next());\n-\n-        assertEquals(new Integer(3), filtered.next());\n-        assertEquals(new Integer(6), filtered.next());\n-        assertEquals(new Integer(6), filtered.previous());\n-        assertEquals(new Integer(3), filtered.previous());\n-        assertEquals(new Integer(3), filtered.next());\n-        assertEquals(new Integer(6), filtered.next());\n-\n-        assertEquals(new Integer(9), filtered.next());\n-        assertEquals(new Integer(12), filtered.next());\n-        assertEquals(new Integer(15), filtered.next());\n-        assertEquals(new Integer(15), filtered.previous());\n-        assertEquals(new Integer(12), filtered.previous());\n-        assertEquals(new Integer(9), filtered.previous());\n+        assertEquals(Integer.valueOf(18), filtered.previous());\n+        assertEquals(Integer.valueOf(15), filtered.previous());\n+        assertEquals(Integer.valueOf(12), filtered.previous());\n+        assertEquals(Integer.valueOf(9), filtered.previous());\n+        assertEquals(Integer.valueOf(6), filtered.previous());\n+        assertEquals(Integer.valueOf(3), filtered.previous());\n+        assertEquals(Integer.valueOf(0), filtered.previous());\n+\n+        assertEquals(Integer.valueOf(0), filtered.next());\n+        assertEquals(Integer.valueOf(0), filtered.previous());\n+        assertEquals(Integer.valueOf(0), filtered.next());\n+\n+        assertEquals(Integer.valueOf(3), filtered.next());\n+        assertEquals(Integer.valueOf(6), filtered.next());\n+        assertEquals(Integer.valueOf(6), filtered.previous());\n+        assertEquals(Integer.valueOf(3), filtered.previous());\n+        assertEquals(Integer.valueOf(3), filtered.next());\n+        assertEquals(Integer.valueOf(6), filtered.next());\n+\n+        assertEquals(Integer.valueOf(9), filtered.next());\n+        assertEquals(Integer.valueOf(12), filtered.next());\n+        assertEquals(Integer.valueOf(15), filtered.next());\n+        assertEquals(Integer.valueOf(15), filtered.previous());\n+        assertEquals(Integer.valueOf(12), filtered.previous());\n+        assertEquals(Integer.valueOf(9), filtered.previous());\n     }\n \n     public void testTruePredicate() {\n--- a/src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java\n \n         final Predicate<Integer> myPredicate = new Predicate<Integer>() {\n             public boolean evaluate(final Integer i) {\n-                return i.compareTo(new Integer(4)) < 0;\n+                return i.compareTo(Integer.valueOf(4)) < 0;\n             }\n         };\n \n         final List<Integer> list1 = new ArrayList<Integer>();\n         final List<Integer> list2 = new ArrayList<Integer>();\n \n-        list1.add(new Integer(1));\n-        list1.add(new Integer(2));\n-        list2.add(new Integer(3));\n-        list2.add(new Integer(4)); // will be ignored by the predicate\n+        list1.add(Integer.valueOf(1));\n+        list1.add(Integer.valueOf(2));\n+        list2.add(Integer.valueOf(3));\n+        list2.add(Integer.valueOf(4)); // will be ignored by the predicate\n \n         final Iterator<Integer> it1 = IteratorUtils.filteredIterator(list1.iterator(), myPredicate);\n         final Iterator<Integer> it2 = IteratorUtils.filteredIterator(list2.iterator(), myPredicate);\n--- a/src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java\n+++ b/src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java\n \n         final Predicate<Integer> myPredicate = new Predicate<Integer>() {\n             public boolean evaluate(final Integer i) {\n-                return i.compareTo(new Integer(4)) < 0;\n+                return i.compareTo(Integer.valueOf(4)) < 0;\n             }\n         };\n \n         final List<Integer> list1 = new ArrayList<Integer>();\n         final List<Integer> list2 = new ArrayList<Integer>();\n \n-        list1.add(new Integer(1));\n-        list1.add(new Integer(2));\n-        list2.add(new Integer(3));\n-        list2.add(new Integer(4)); // will be ignored by the predicate\n+        list1.add(Integer.valueOf(1));\n+        list1.add(Integer.valueOf(2));\n+        list2.add(Integer.valueOf(3));\n+        list2.add(Integer.valueOf(4)); // will be ignored by the predicate\n \n         final Iterator<Integer> it1 = IteratorUtils.filteredIterator(list1.iterator(), myPredicate);\n         final Iterator<Integer> it2 = IteratorUtils.filteredIterator(list2.iterator(), myPredicate);\n--- a/src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java\n+++ b/src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java\n  */\n public class MultiKeyTest extends TestCase {\n \n-    Integer ONE = new Integer(1);\n-    Integer TWO = new Integer(2);\n-    Integer THREE = new Integer(3);\n-    Integer FOUR = new Integer(4);\n-    Integer FIVE = new Integer(5);\n+    Integer ONE = Integer.valueOf(1);\n+    Integer TWO = Integer.valueOf(2);\n+    Integer THREE = Integer.valueOf(3);\n+    Integer FOUR = Integer.valueOf(4);\n+    Integer FIVE = Integer.valueOf(5);\n \n     public MultiKeyTest(final String name) {\n         super(name);\n--- a/src/test/java/org/apache/commons/collections4/list/AbstractListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/AbstractListTest.java\n        final Object[] params = new Object[types.length];\n        for (int i = 0; i < params.length; i++) {\n            if (types[i] == Integer.TYPE) {\n-            params[i] = new Integer(0);\n+            params[i] = Integer.valueOf(0);\n         } else if (types[i] == Collection.class) {\n             params[i] = c;\n         } else if (types[i] == Object.class) {\n--- a/src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/CursorableLinkedListTest.java\n     @SuppressWarnings(\"unchecked\")\n     public void testAdd() {\n         assertEquals(\"[]\",list.toString());\n-        assertTrue(list.add((E) new Integer(1)));\n+        assertTrue(list.add((E) Integer.valueOf(1)));\n         assertEquals(\"[1]\",list.toString());\n-        assertTrue(list.add((E) new Integer(2)));\n+        assertTrue(list.add((E) Integer.valueOf(2)));\n         assertEquals(\"[1, 2]\",list.toString());\n-        assertTrue(list.add((E) new Integer(3)));\n+        assertTrue(list.add((E) Integer.valueOf(3)));\n         assertEquals(\"[1, 2, 3]\",list.toString());\n-        assertTrue(list.addFirst((E) new Integer(0)));\n+        assertTrue(list.addFirst((E) Integer.valueOf(0)));\n         assertEquals(\"[0, 1, 2, 3]\",list.toString());\n-        assertTrue(list.addLast((E) new Integer(4)));\n+        assertTrue(list.addLast((E) Integer.valueOf(4)));\n         assertEquals(\"[0, 1, 2, 3, 4]\",list.toString());\n-        list.add(0,(E) new Integer(-2));\n+        list.add(0,(E) Integer.valueOf(-2));\n         assertEquals(\"[-2, 0, 1, 2, 3, 4]\",list.toString());\n-        list.add(1,(E) new Integer(-1));\n+        list.add(1,(E) Integer.valueOf(-1));\n         assertEquals(\"[-2, -1, 0, 1, 2, 3, 4]\",list.toString());\n-        list.add(7,(E) new Integer(5));\n+        list.add(7,(E) Integer.valueOf(5));\n         assertEquals(\"[-2, -1, 0, 1, 2, 3, 4, 5]\",list.toString());\n \n         final java.util.List<E> list2 = new java.util.LinkedList<E>();\n         assertTrue(list.isEmpty());\n \n         for (int i = 0; i < 1000; i++) {\n-            list.add((E) new Integer(i));\n+            list.add((E) Integer.valueOf(i));\n         }\n         assertEquals(1000, list.size());\n         assertTrue(!list.isEmpty());\n         // recursive serialization will cause a stack\n         // overflow exception with long lists\n         for (int i = 0; i < 10000; i++) {\n-            list.add((E) new Integer(i));\n+            list.add((E) Integer.valueOf(i));\n         }\n \n         final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n--- a/src/test/java/org/apache/commons/collections4/list/GrowthListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/GrowthListTest.java\n \n     //-----------------------------------------------------------------------\n     public void testGrowthAdd() {\n-        final Integer one = new Integer(1);\n+        final Integer one = Integer.valueOf(1);\n         final GrowthList<Integer> grower = new GrowthList<Integer>();\n         assertEquals(0, grower.size());\n         grower.add(1, one);\n     }\n \n     public void testGrowthAddAll() {\n-        final Integer one = new Integer(1);\n-        final Integer two = new Integer(2);\n+        final Integer one = Integer.valueOf(1);\n+        final Integer two = Integer.valueOf(2);\n         final Collection<Integer> coll = new ArrayList<Integer>();\n         coll.add(one);\n         coll.add(two);\n     }\n \n     public void testGrowthSet1() {\n-        final Integer one = new Integer(1);\n+        final Integer one = Integer.valueOf(1);\n         final GrowthList<Integer> grower = new GrowthList<Integer>();\n         assertEquals(0, grower.size());\n         grower.set(1, one);\n     }\n \n     public void testGrowthSet2() {\n-        final Integer one = new Integer(1);\n+        final Integer one = Integer.valueOf(1);\n         final GrowthList<Integer> grower = new GrowthList<Integer>();\n         assertEquals(0, grower.size());\n         grower.set(0, one);\n--- a/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java\n     @SuppressWarnings(\"unchecked\")\n     public void testIllegalAdd() {\n         final List<E> list = makeTestList();\n-        final Integer i = new Integer(3);\n+        final Integer i = Integer.valueOf(3);\n         try {\n             list.add((E) i);\n             fail(\"Integer should fail string predicate.\");\n         final List<E> elements = new ArrayList<E>();\n         elements.add((E) \"one\");\n         elements.add((E) \"two\");\n-        elements.add((E) new Integer(3));\n+        elements.add((E) Integer.valueOf(3));\n         elements.add((E) \"four\");\n         try {\n             list.addAll(0, elements);\n         assertTrue(\"List shouldn't contain illegal element\",\n          !list.contains(\"two\"));\n         assertTrue(\"List shouldn't contain illegal element\",\n-         !list.contains(new Integer(3)));\n+         !list.contains(Integer.valueOf(3)));\n         assertTrue(\"List shouldn't contain illegal element\",\n          !list.contains(\"four\"));\n     }\n     public void testIllegalSet() {\n         final List<E> list = makeTestList();\n         try {\n-            list.set(0, (E) new Integer(3));\n+            list.set(0, (E) Integer.valueOf(3));\n             fail(\"Integer should fail string predicate.\");\n         } catch (final IllegalArgumentException e) {\n             // expected\n--- a/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/SetUniqueListTest.java\n         return (E[]) new Object[] {\n                 new String(\"\"),\n                 new String(\"One\"),\n-                new Integer(2),\n+                Integer.valueOf(2),\n                 \"Three\",\n-                new Integer(4),\n+                Integer.valueOf(4),\n                 new Double(5),\n                 new Float(6),\n                 \"Seven\",\n                 \"Eight\",\n                 new String(\"Nine\"),\n-                new Integer(10),\n+                Integer.valueOf(10),\n                 new Short((short)11),\n                 new Long(12),\n                 \"Thirteen\",\n     public void testIntCollectionAddAll() {\n       // make a SetUniqueList with one element\n       final List<Integer> list = new SetUniqueList<Integer>(new ArrayList<Integer>(), new HashSet<Integer>());\n-      final Integer existingElement = new Integer(1);\n+      final Integer existingElement = Integer.valueOf(1);\n       list.add(existingElement);\n \n       // add two new unique elements at index 0\n-      final Integer firstNewElement = new Integer(2);\n-      final Integer secondNewElement = new Integer(3);\n+      final Integer firstNewElement = Integer.valueOf(2);\n+      final Integer secondNewElement = Integer.valueOf(3);\n       Collection<Integer> collection = Arrays.asList(new Integer[] {firstNewElement, secondNewElement});\n       list.addAll(0, collection);\n       assertEquals(\"Unique elements should be added.\", 3, list.size());\n       assertEquals(\"Existing element should shift to index 2\", existingElement, list.get(2));\n \n       // add a duplicate element and a unique element at index 0\n-      final Integer thirdNewElement = new Integer(4);\n+      final Integer thirdNewElement = Integer.valueOf(4);\n       collection = Arrays.asList(new Integer[] {existingElement, thirdNewElement});\n       list.addAll(0, collection);\n       assertEquals(\"Duplicate element should not be added, unique element should be added.\",\n \n     //-----------------------------------------------------------------------\n     public void testFactory() {\n-        final Integer[] array = new Integer[] { new Integer(1), new Integer(2), new Integer(1) };\n+        final Integer[] array = new Integer[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(1) };\n         final ArrayList<Integer> list = new ArrayList<Integer>(Arrays.asList(array));\n         final SetUniqueList<Integer> lset = SetUniqueList.setUniqueList(list);\n \n         assertEquals(\"Duplicate element was added.\", 2, lset.size());\n-        assertEquals(new Integer(1), lset.get(0));\n-        assertEquals(new Integer(2), lset.get(1));\n-        assertEquals(new Integer(1), list.get(0));\n-        assertEquals(new Integer(2), list.get(1));\n+        assertEquals(Integer.valueOf(1), lset.get(0));\n+        assertEquals(Integer.valueOf(2), lset.get(1));\n+        assertEquals(Integer.valueOf(1), list.get(0));\n+        assertEquals(Integer.valueOf(2), list.get(1));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n         final SetUniqueList<E> lset = new SetUniqueList<E>(new ArrayList<E>(), new HashSet<E>());\n \n         // Duplicate element\n-        final E obj = (E) new Integer(1);\n+        final E obj = (E) Integer.valueOf(1);\n         lset.add(obj);\n         lset.add(obj);\n         assertEquals(\"Duplicate element was added.\", 1, lset.size());\n \n         // Unique element\n-        lset.add((E) new Integer(2));\n+        lset.add((E) Integer.valueOf(2));\n         assertEquals(\"Unique element was not added.\", 2, lset.size());\n     }\n \n         final SetUniqueList<E> lset = new SetUniqueList<E>(new ArrayList<E>(), new HashSet<E>());\n \n         lset.addAll(\n-            Arrays.asList((E[]) new Integer[] { new Integer(1), new Integer(1)}));\n+            Arrays.asList((E[]) new Integer[] { Integer.valueOf(1), Integer.valueOf(1)}));\n \n         assertEquals(\"Duplicate element was added.\", 1, lset.size());\n     }\n         final SetUniqueList<E> lset = new SetUniqueList<E>(new ArrayList<E>(), new HashSet<E>());\n \n         // Duplicate element\n-        final E obj1 = (E) new Integer(1);\n-        final E obj2 = (E) new Integer(2);\n-        final E obj3 = (E) new Integer(3);\n+        final E obj1 = (E) Integer.valueOf(1);\n+        final E obj2 = (E) Integer.valueOf(2);\n+        final E obj3 = (E) Integer.valueOf(3);\n \n         lset.add(obj1);\n         lset.add(obj2);\n     public void testListIterator() {\n         final SetUniqueList<E> lset = new SetUniqueList<E>(new ArrayList<E>(), new HashSet<E>());\n \n-        final E obj1 = (E) new Integer(1);\n-        final E obj2 = (E) new Integer(2);\n+        final E obj1 = (E) Integer.valueOf(1);\n+        final E obj2 = (E) Integer.valueOf(2);\n         lset.add(obj1);\n         lset.add(obj2);\n \n         final SetUniqueList<Integer> lset = new SetUniqueList<Integer>(new ArrayList<Integer>(), new HashSet<Integer>());\n \n         // Duplicate element\n-        final Integer obj1 = new Integer(1);\n-        final Integer obj2 = new Integer(2);\n+        final Integer obj1 = Integer.valueOf(1);\n+        final Integer obj2 = Integer.valueOf(2);\n \n         lset.add(obj1);\n         lset.add(obj2);\n--- a/src/test/java/org/apache/commons/collections4/list/TransformedListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/TransformedListTest.java\n         for (int i = 0; i < els.length; i++) {\n             list.add(els[i]);\n             assertEquals(i + 1, list.size());\n-            assertEquals(true, list.contains(new Integer((String) els[i])));\n+            assertEquals(true, list.contains(Integer.valueOf((String) els[i])));\n             assertEquals(false, list.contains(els[i]));\n         }\n \n         assertEquals(false, list.remove(els[0]));\n-        assertEquals(true, list.remove(new Integer((String) els[0])));\n+        assertEquals(true, list.remove(Integer.valueOf((String) els[0])));\n \n         list.clear();\n         for (int i = 0; i < els.length; i++) {\n             list.add(0, els[i]);\n             assertEquals(i + 1, list.size());\n-            assertEquals(new Integer((String) els[i]), list.get(0));\n+            assertEquals(Integer.valueOf((String) els[i]), list.get(0));\n         }\n \n         list.set(0, (E) \"22\");\n-        assertEquals(new Integer(22), list.get(0));\n+        assertEquals(Integer.valueOf(22), list.get(0));\n \n         final ListIterator<E> it = list.listIterator();\n         it.next();\n         it.set((E) \"33\");\n-        assertEquals(new Integer(33), list.get(0));\n+        assertEquals(Integer.valueOf(33), list.get(0));\n         it.add((E) \"44\");\n-        assertEquals(new Integer(44), list.get(1));\n+        assertEquals(Integer.valueOf(44), list.get(1));\n \n         final List<E> adds = new ArrayList<E>();\n         adds.add((E) \"1\");\n         adds.add((E) \"2\");\n         list.clear();\n         list.addAll(adds);\n-        assertEquals(new Integer(1), list.get(0));\n-        assertEquals(new Integer(2), list.get(1));\n+        assertEquals(Integer.valueOf(1), list.get(0));\n+        assertEquals(Integer.valueOf(2), list.get(1));\n \n         adds.clear();\n         adds.add((E) \"3\");\n         list.addAll(1, adds);\n-        assertEquals(new Integer(1), list.get(0));\n-        assertEquals(new Integer(3), list.get(1));\n-        assertEquals(new Integer(2), list.get(2));\n+        assertEquals(Integer.valueOf(1), list.get(0));\n+        assertEquals(Integer.valueOf(3), list.get(1));\n+        assertEquals(Integer.valueOf(2), list.get(2));\n     }\n \n     public void testTransformedList_decorateTransform() {\n         final List<?> list = TransformedList.transformedList(originalList, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, list.size());\n         for (final Object el : els) {\n-            assertEquals(true, list.contains(new Integer((String) el)));\n+            assertEquals(true, list.contains(Integer.valueOf((String) el)));\n             assertEquals(false, list.contains(el));\n         }\n         \n         assertEquals(false, list.remove(els[0]));\n-        assertEquals(true, list.remove(new Integer((String) els[0])));\n+        assertEquals(true, list.remove(Integer.valueOf((String) els[0])));\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/list/TreeListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/TreeListTest.java\n     public static void benchmark(final List<? super Integer> l) {\n         long start = System.currentTimeMillis();\n         for (int i = 0; i < 100000; i++) {\n-            l.add(new Integer(i));\n+            l.add(Integer.valueOf(i));\n         }\n         System.out.print(System.currentTimeMillis() - start + \";\");\n \n         start = System.currentTimeMillis();\n         for (int i = 0; i < 10000; i++) {\n             final int j = (int) (Math.random() * 100000);\n-            l.add(j, new Integer(-j));\n+            l.add(j, Integer.valueOf(-j));\n         }\n         System.out.print(System.currentTimeMillis() - start + \";\");\n \n         start = System.currentTimeMillis();\n         for (int i = 0; i < 200; i++) {\n             final int j = (int) (Math.random() * 100000);\n-            l.indexOf(new Integer(j));\n+            l.indexOf(Integer.valueOf(j));\n         }\n         System.out.print(System.currentTimeMillis() - start + \";\");\n \n //    }\n \n     public void testBug35258() {\n-        final Object objectToRemove = new Integer(3);\n+        final Object objectToRemove = Integer.valueOf(3);\n \n         final List<Integer> treelist = new TreeList<Integer>();\n-        treelist.add(new Integer(0));\n-        treelist.add(new Integer(1));\n-        treelist.add(new Integer(2));\n-        treelist.add(new Integer(3));\n-        treelist.add(new Integer(4));\n+        treelist.add(Integer.valueOf(0));\n+        treelist.add(Integer.valueOf(1));\n+        treelist.add(Integer.valueOf(2));\n+        treelist.add(Integer.valueOf(3));\n+        treelist.add(Integer.valueOf(4));\n \n         // this cause inconsistence of ListIterator()\n         treelist.remove(objectToRemove);\n \n         final ListIterator<Integer> li = treelist.listIterator();\n-        assertEquals(new Integer(0), li.next());\n-        assertEquals(new Integer(0), li.previous());\n-        assertEquals(new Integer(0), li.next());\n-        assertEquals(new Integer(1), li.next());\n+        assertEquals(Integer.valueOf(0), li.next());\n+        assertEquals(Integer.valueOf(0), li.previous());\n+        assertEquals(Integer.valueOf(0), li.next());\n+        assertEquals(Integer.valueOf(1), li.next());\n         // this caused error in bug 35258\n-        assertEquals(new Integer(1), li.previous());\n-        assertEquals(new Integer(1), li.next());\n-        assertEquals(new Integer(2), li.next());\n-        assertEquals(new Integer(2), li.previous());\n-        assertEquals(new Integer(2), li.next());\n-        assertEquals(new Integer(4), li.next());\n-        assertEquals(new Integer(4), li.previous());\n-        assertEquals(new Integer(4), li.next());\n+        assertEquals(Integer.valueOf(1), li.previous());\n+        assertEquals(Integer.valueOf(1), li.next());\n+        assertEquals(Integer.valueOf(2), li.next());\n+        assertEquals(Integer.valueOf(2), li.previous());\n+        assertEquals(Integer.valueOf(2), li.next());\n+        assertEquals(Integer.valueOf(4), li.next());\n+        assertEquals(Integer.valueOf(4), li.previous());\n+        assertEquals(Integer.valueOf(4), li.next());\n         assertEquals(false, li.hasNext());\n     }\n     \n--- a/src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java\n     protected void setupList() {\n         list = makeFullCollection();\n         array = new ArrayList<E>();\n-        array.add((E) new Integer(1));\n+        array.add((E) Integer.valueOf(1));\n     }\n \n     /**\n     @SuppressWarnings(\"unchecked\")\n     protected void verifyUnmodifiable(final List<E> list) {\n         try {\n-            list.add(0, (E) new Integer(0));\n+            list.add(0, (E) Integer.valueOf(0));\n             fail(\"Expecting UnsupportedOperationException.\");\n         } catch (final UnsupportedOperationException e) {\n             // expected\n         }\n         try {\n-            list.add((E) new Integer(0));\n+            list.add((E) Integer.valueOf(0));\n              fail(\"Expecting UnsupportedOperationException.\");\n         } catch (final UnsupportedOperationException e) {\n             // expected\n             // expected\n         }\n         try {\n-            list.remove(new Integer(0));\n+            list.remove(Integer.valueOf(0));\n              fail(\"Expecting UnsupportedOperationException.\");\n         } catch (final UnsupportedOperationException e) {\n             // expected\n             // expected\n         }\n         try {\n-            list.set(0, (E) new Integer(0));\n+            list.set(0, (E) Integer.valueOf(0));\n              fail(\"Expecting UnsupportedOperationException.\");\n         } catch (final UnsupportedOperationException e) {\n             // expected\n--- a/src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/CaseInsensitiveMapTest.java\n         map.put(\"Two\", \"Two\");\n         map.put(\"one\", \"Three\");\n         map.put(null, \"Four\");\n-        map.put(new Integer(20), \"Five\");\n+        map.put(Integer.valueOf(20), \"Five\");\n         final Map<Object, String> caseInsensitiveMap = new CaseInsensitiveMap<Object, String>(map);\n         assertEquals(4, caseInsensitiveMap.size()); // ones collapsed\n         final Set<Object> keys = caseInsensitiveMap.keySet();\n--- a/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java\n         assertEquals(0, base.size());\n         assertEquals(false, map.containsKey(\"NotInMap\"));\n         assertEquals(\"NULL\", map.get(\"NotInMap\"));\n-        assertEquals(\"NULL_OBJECT\", map.get(new Integer(0)));\n+        assertEquals(\"NULL_OBJECT\", map.get(Integer.valueOf(0)));\n \n         map.put((K) \"Key\", (V) \"Value\");\n         assertEquals(1, map.size());\n         assertEquals(\"Value\", map.get(\"Key\"));\n         assertEquals(false, map.containsKey(\"NotInMap\"));\n         assertEquals(\"NULL\", map.get(\"NotInMap\"));\n-        assertEquals(\"NULL_OBJECT\", map.get(new Integer(0)));\n+        assertEquals(\"NULL_OBJECT\", map.get(Integer.valueOf(0)));\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/Flat3MapTest.java\n  */\n public class Flat3MapTest<K, V> extends AbstractIterableMapTest<K, V> {\n \n-    private static final Integer ONE = new Integer(1);\n-    private static final Integer TWO = new Integer(2);\n-    private static final Integer THREE = new Integer(3);\n+    private static final Integer ONE = Integer.valueOf(1);\n+    private static final Integer TWO = Integer.valueOf(2);\n+    private static final Integer THREE = Integer.valueOf(3);\n     private static final String TEN = \"10\";\n     private static final String TWENTY = \"20\";\n     private static final String THIRTY = \"30\";\n \n     public void testCollections261() {\n         final Flat3Map<Integer, Integer> m = new Flat3Map<Integer, Integer>();\n-        m.put( new Integer(1), new Integer(1) );\n-        m.put( new Integer(0), new Integer(0) );\n-        assertEquals( new Integer(1), m.remove( new Integer(1) ) ); \n-        assertEquals( new Integer(0), m.remove( new Integer(0) ) ); \n-\n-        m.put( new Integer(2), new Integer(2) );\n-        m.put( new Integer(1), new Integer(1) );\n-        m.put( new Integer(0), new Integer(0) );\n-        assertEquals( new Integer(2), m.remove( new Integer(2) ) ); \n-        assertEquals( new Integer(1), m.remove( new Integer(1) ) ); \n-        assertEquals( new Integer(0), m.remove( new Integer(0) ) ); \n+        m.put( Integer.valueOf(1), Integer.valueOf(1) );\n+        m.put( Integer.valueOf(0), Integer.valueOf(0) );\n+        assertEquals( Integer.valueOf(1), m.remove( Integer.valueOf(1) ) ); \n+        assertEquals( Integer.valueOf(0), m.remove( Integer.valueOf(0) ) ); \n+\n+        m.put( Integer.valueOf(2), Integer.valueOf(2) );\n+        m.put( Integer.valueOf(1), Integer.valueOf(1) );\n+        m.put( Integer.valueOf(0), Integer.valueOf(0) );\n+        assertEquals( Integer.valueOf(2), m.remove( Integer.valueOf(2) ) ); \n+        assertEquals( Integer.valueOf(1), m.remove( Integer.valueOf(1) ) ); \n+        assertEquals( Integer.valueOf(0), m.remove( Integer.valueOf(0) ) ); \n     }\n \n }\n--- a/src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/ListOrderedMapTest.java\n \n         for (int i = 0; i < lom.size(); i++) {\n             final V value = lom.getValue(i);\n-            final Object input = new Integer(i);\n+            final Object input = Integer.valueOf(i);\n             assertEquals(value, lom.setValue(i, (V) input));\n             assertEquals(input, lom.getValue(i));\n         }\n         }\n \n         // put where key does exist\n-        final Integer i1 = new Integer(1);\n-        final Integer i1b = new Integer(1);\n-        final Integer i2 = new Integer(2);\n-        final Integer i3 = new Integer(3);\n+        final Integer i1 = Integer.valueOf(1);\n+        final Integer i1b = Integer.valueOf(1);\n+        final Integer i2 = Integer.valueOf(2);\n+        final Integer i3 = Integer.valueOf(3);\n \n         resetEmpty();\n         lom = getMap();\n         resetFull();\n         final ListOrderedMap<K, V> lom = getMap();\n         for (int i = 0; i < lom.size(); i++) {\n-            final Object input = new Integer(i);\n+            final Object input = Integer.valueOf(i);\n             final V expected = lom.getValue(i);\n             assertEquals(expected, lom.valueList().set(i, (V) input));\n             assertEquals(input, lom.getValue(i));\n--- a/src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/MultiKeyMapTest.java\n  */\n public class MultiKeyMapTest<K, V> extends AbstractIterableMapTest<MultiKey<? extends K>, V> {\n \n-    static final Integer I1 = new Integer(1);\n-    static final Integer I2 = new Integer(2);\n-    static final Integer I3 = new Integer(3);\n-    static final Integer I4 = new Integer(4);\n-    static final Integer I5 = new Integer(5);\n-    static final Integer I6 = new Integer(6);\n-    static final Integer I7 = new Integer(7);\n-    static final Integer I8 = new Integer(8);\n+    static final Integer I1 = Integer.valueOf(1);\n+    static final Integer I2 = Integer.valueOf(2);\n+    static final Integer I3 = Integer.valueOf(3);\n+    static final Integer I4 = Integer.valueOf(4);\n+    static final Integer I5 = Integer.valueOf(5);\n+    static final Integer I6 = Integer.valueOf(6);\n+    static final Integer I7 = Integer.valueOf(7);\n+    static final Integer I8 = Integer.valueOf(8);\n \n     public MultiKeyMapTest(final String testName) {\n         super(testName);\n--- a/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java\n     @SuppressWarnings(\"unchecked\")\n     public void testMapEquals() {\n         final MultiValueMap<K, V> one = new MultiValueMap<K, V>();\n-        final Integer value = new Integer(1);\n+        final Integer value = Integer.valueOf(1);\n         one.put((K) \"One\", value);\n         one.remove(\"One\", value);\n \n--- a/src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java\n     public void testPut() {\n         final Map<K, V> map = makeTestMap();\n         try {\n-            map.put((K) \"Hi\", (V) new Integer(3));\n+            map.put((K) \"Hi\", (V) Integer.valueOf(3));\n             fail(\"Illegal value should raise IllegalArgument\");\n         } catch (final IllegalArgumentException e) {\n             // expected\n         }\n \n         try {\n-            map.put((K) new Integer(3), (V) \"Hi\");\n+            map.put((K) Integer.valueOf(3), (V) \"Hi\");\n             fail(\"Illegal key should raise IllegalArgument\");\n         } catch (final IllegalArgumentException e) {\n             // expected\n         }\n \n-        assertTrue(!map.containsKey(new Integer(3)));\n-        assertTrue(!map.containsValue(new Integer(3)));\n+        assertTrue(!map.containsKey(Integer.valueOf(3)));\n+        assertTrue(!map.containsValue(Integer.valueOf(3)));\n \n         final Map<K, V> map2 = new HashMap<K, V>();\n         map2.put((K) \"A\", (V) \"a\");\n         map2.put((K) \"B\", (V) \"b\");\n         map2.put((K) \"C\", (V) \"c\");\n-        map2.put((K) \"c\", (V) new Integer(3));\n+        map2.put((K) \"c\", (V) Integer.valueOf(3));\n \n         try {\n             map.putAll(map2);\n         Iterator<Map.Entry<K, V>> iterator = map.entrySet().iterator();\n         try {\n             final Map.Entry<K, V> entry = iterator.next();\n-            entry.setValue((V) new Integer(3));\n+            entry.setValue((V) Integer.valueOf(3));\n             fail(\"Illegal value should raise IllegalArgument\");\n         } catch (final IllegalArgumentException e) {\n             // expected\n--- a/src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java\n     public void testPut() {\n         final Map<K, V> map = makeTestMap();\n         try {\n-            map.put((K) \"Hi\", (V) new Integer(3));\n+            map.put((K) \"Hi\", (V) Integer.valueOf(3));\n             fail(\"Illegal value should raise IllegalArgument\");\n         } catch (final IllegalArgumentException e) {\n             // expected\n         }\n \n         try {\n-            map.put((K) new Integer(3), (V) \"Hi\");\n+            map.put((K) Integer.valueOf(3), (V) \"Hi\");\n             fail(\"Illegal key should raise IllegalArgument\");\n         } catch (final IllegalArgumentException e) {\n             // expected\n         }\n \n-        assertTrue(!map.containsKey(new Integer(3)));\n-        assertTrue(!map.containsValue(new Integer(3)));\n+        assertTrue(!map.containsKey(Integer.valueOf(3)));\n+        assertTrue(!map.containsValue(Integer.valueOf(3)));\n \n         final Map<K, V> map2 = new HashMap<K, V>();\n         map2.put((K) \"A\", (V) \"a\");\n         map2.put((K) \"B\", (V) \"b\");\n         map2.put((K) \"C\", (V) \"c\");\n-        map2.put((K) \"c\", (V) new Integer(3));\n+        map2.put((K) \"c\", (V) Integer.valueOf(3));\n \n         try {\n             map.putAll(map2);\n         Iterator<Map.Entry<K, V>> iterator = map.entrySet().iterator();\n         try {\n             final Map.Entry<K, V> entry = iterator.next();\n-            entry.setValue((V) new Integer(3));\n+            entry.setValue((V) Integer.valueOf(3));\n             fail(\"Illegal value should raise IllegalArgument\");\n         } catch (final IllegalArgumentException e) {\n             // expected\n--- a/src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/ReferenceIdentityMapTest.java\n  */\n public class ReferenceIdentityMapTest<K, V> extends AbstractIterableMapTest<K, V> {\n \n-    private static final Integer I1A = new Integer(1);\n-    private static final Integer I1B = new Integer(1);\n-    private static final Integer I2A = new Integer(2);\n-    private static final Integer I2B = new Integer(2);\n+    private static final Integer I1A = Integer.valueOf(1);\n+    private static final Integer I1B = Integer.valueOf(1);\n+    private static final Integer I2A = Integer.valueOf(2);\n+    private static final Integer I2B = Integer.valueOf(2);\n \n     public ReferenceIdentityMapTest(final String testName) {\n         super(testName);\n     public void testGetAfterGC() {\n         ReferenceIdentityMap map = new ReferenceIdentityMap(ReferenceIdentityMap.WEAK, ReferenceIdentityMap.WEAK);\n         for (int i = 0; i < 10; i++) {\n-            map.put(new Integer(i), new Integer(i));\n-        }\n-\n-        gc();\n-        for (int i = 0; i < 10; i++) {\n-            Integer I = new Integer(i);\n+            map.put(Integer.valueOf(i), Integer.valueOf(i));\n+        }\n+\n+        gc();\n+        for (int i = 0; i < 10; i++) {\n+            Integer I = Integer.valueOf(i);\n             assertTrue(\"map.containsKey should return false for GC'd element\", !map.containsKey(I));\n             assertTrue(\"map.get should return null for GC'd element\", map.get(I) == null);\n         }\n         ReferenceIdentityMap map = new ReferenceIdentityMap(ReferenceIdentityMap.WEAK, ReferenceIdentityMap.WEAK);\n         Object[] hard = new Object[10];\n         for (int i = 0; i < 10; i++) {\n-            hard[i] = new Integer(10 + i);\n-            map.put(new Integer(i), new Integer(i));\n+            hard[i] = Integer.valueOf(10 + i);\n+            map.put(Integer.valueOf(i), Integer.valueOf(i));\n             map.put(hard[i], hard[i]);\n         }\n \n         ReferenceIdentityMap map = new ReferenceIdentityMap(ReferenceIdentityMap.WEAK, ReferenceIdentityMap.WEAK);\n         Object[] hard = new Object[10];\n         for (int i = 0; i < 10; i++) {\n-            hard[i] = new Integer(10 + i);\n-            map.put(new Integer(i), new Integer(i));\n+            hard[i] = Integer.valueOf(10 + i);\n+            map.put(Integer.valueOf(i), Integer.valueOf(i));\n             map.put(hard[i], hard[i]);\n         }\n \n         ReferenceIdentityMap map = new ReferenceIdentityMap(ReferenceIdentityMap.WEAK, ReferenceIdentityMap.WEAK);\n         Object[] hard = new Object[10];\n         for (int i = 0; i < 10; i++) {\n-            hard[i] = new Integer(10 + i);\n-            map.put(new Integer(i), new Integer(i));\n+            hard[i] = Integer.valueOf(10 + i);\n+            map.put(Integer.valueOf(i), Integer.valueOf(i));\n             map.put(hard[i], hard[i]);\n         }\n \n--- a/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java\n     public void testGetAfterGC() {\n         ReferenceMap map = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK);\n         for (int i = 0; i < 10; i++) {\n-            map.put(new Integer(i), new Integer(i));\n-        }\n-\n-        gc();\n-        for (int i = 0; i < 10; i++) {\n-            Integer I = new Integer(i);\n+            map.put(Integer.valueOf(i), Integer.valueOf(i));\n+        }\n+\n+        gc();\n+        for (int i = 0; i < 10; i++) {\n+            Integer I = Integer.valueOf(i);\n             assertTrue(\"map.containsKey should return false for GC'd element\", !map.containsKey(I));\n             assertTrue(\"map.get should return null for GC'd element\", map.get(I) == null);\n         }\n         ReferenceMap map = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK);\n         Object[] hard = new Object[10];\n         for (int i = 0; i < 10; i++) {\n-            hard[i] = new Integer(10 + i);\n-            map.put(new Integer(i), new Integer(i));\n+            hard[i] = Integer.valueOf(10 + i);\n+            map.put(Integer.valueOf(i), Integer.valueOf(i));\n             map.put(hard[i], hard[i]);\n         }\n \n         ReferenceMap map = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK);\n         Object[] hard = new Object[10];\n         for (int i = 0; i < 10; i++) {\n-            hard[i] = new Integer(10 + i);\n-            map.put(new Integer(i), new Integer(i));\n+            hard[i] = Integer.valueOf(10 + i);\n+            map.put(Integer.valueOf(i), Integer.valueOf(i));\n             map.put(hard[i], hard[i]);\n         }\n \n         ReferenceMap map = new ReferenceMap(ReferenceMap.WEAK, ReferenceMap.WEAK);\n         Object[] hard = new Object[10];\n         for (int i = 0; i < 10; i++) {\n-            hard[i] = new Integer(10 + i);\n-            map.put(new Integer(i), new Integer(i));\n+            hard[i] = Integer.valueOf(10 + i);\n+            map.put(Integer.valueOf(i), Integer.valueOf(i));\n             map.put(hard[i], hard[i]);\n         }\n \n--- a/src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/SingletonMapTest.java\n  */\n public class SingletonMapTest<K, V> extends AbstractOrderedMapTest<K, V> {\n \n-    private static final Integer ONE = new Integer(1);\n-    private static final Integer TWO = new Integer(2);\n+    private static final Integer ONE = Integer.valueOf(1);\n+    private static final Integer TWO = Integer.valueOf(2);\n     private static final String TEN = \"10\";\n \n     public SingletonMapTest(final String testName) {\n--- a/src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/TransformedMapTest.java\n         for (int i = 0; i < els.length; i++) {\n             map.put((K) els[i], (V) els[i]);\n             assertEquals(i + 1, map.size());\n-            assertEquals(true, map.containsKey(new Integer((String) els[i])));\n+            assertEquals(true, map.containsKey(Integer.valueOf((String) els[i])));\n             assertEquals(false, map.containsKey(els[i]));\n             assertEquals(true, map.containsValue(els[i]));\n-            assertEquals(els[i], map.get(new Integer((String) els[i])));\n+            assertEquals(els[i], map.get(Integer.valueOf((String) els[i])));\n         }\n \n         assertEquals(null, map.remove(els[0]));\n-        assertEquals(els[0], map.remove(new Integer((String) els[0])));\n+        assertEquals(els[0], map.remove(Integer.valueOf((String) els[0])));\n \n         map = TransformedMap.transformingMap(new HashMap(), null, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(0, map.size());\n         for (int i = 0; i < els.length; i++) {\n             map.put((K) els[i], (V) els[i]);\n             assertEquals(i + 1, map.size());\n-            assertEquals(true, map.containsValue(new Integer((String) els[i])));\n+            assertEquals(true, map.containsValue(Integer.valueOf((String) els[i])));\n             assertEquals(false, map.containsValue(els[i]));\n             assertEquals(true, map.containsKey(els[i]));\n-            assertEquals(new Integer((String) els[i]), map.get(els[i]));\n+            assertEquals(Integer.valueOf((String) els[i]), map.get(els[i]));\n         }\n \n-        assertEquals(new Integer((String) els[0]), map.remove(els[0]));\n+        assertEquals(Integer.valueOf((String) els[0]), map.remove(els[0]));\n \n         final Set<Map.Entry<K, V>> entrySet = map.entrySet();\n         final Map.Entry<K, V>[] array = entrySet.toArray(new Map.Entry[0]);\n         array[0].setValue((V) \"66\");\n-        assertEquals(new Integer(66), array[0].getValue());\n-        assertEquals(new Integer(66), map.get(array[0].getKey()));\n+        assertEquals(Integer.valueOf(66), array[0].getValue());\n+        assertEquals(Integer.valueOf(66), map.get(array[0].getKey()));\n \n         final Map.Entry entry = entrySet.iterator().next();\n         entry.setValue(\"88\");\n-        assertEquals(new Integer(88), entry.getValue());\n-        assertEquals(new Integer(88), map.get(entry.getKey()));\n+        assertEquals(Integer.valueOf(88), entry.getValue());\n+        assertEquals(Integer.valueOf(88), map.get(entry.getKey()));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"2\", trans.get(\"B\"));\n         assertEquals(\"3\", trans.get(\"C\"));\n         trans.put((K) \"D\", (V) \"4\");\n-        assertEquals(new Integer(4), trans.get(\"D\"));\n+        assertEquals(Integer.valueOf(4), trans.get(\"D\"));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n                         null,\n                         (Transformer<? super V, ? extends V>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(3, trans.size());\n-        assertEquals(new Integer(1), trans.get(\"A\"));\n-        assertEquals(new Integer(2), trans.get(\"B\"));\n-        assertEquals(new Integer(3), trans.get(\"C\"));\n+        assertEquals(Integer.valueOf(1), trans.get(\"A\"));\n+        assertEquals(Integer.valueOf(2), trans.get(\"B\"));\n+        assertEquals(Integer.valueOf(3), trans.get(\"C\"));\n         trans.put((K) \"D\", (V) \"4\");\n-        assertEquals(new Integer(4), trans.get(\"D\"));\n+        assertEquals(Integer.valueOf(4), trans.get(\"D\"));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/TransformedSortedMapTest.java\n         for (int i = 0; i < els.length; i++) {\n             map.put((K) els[i], (V) els[i]);\n             assertEquals(i + 1, map.size());\n-            assertEquals(true, map.containsKey(new Integer((String) els[i])));\n+            assertEquals(true, map.containsKey(Integer.valueOf((String) els[i])));\n             try {\n                 map.containsKey(els[i]);\n                 fail();\n             } catch (final ClassCastException ex) {}\n             assertEquals(true, map.containsValue(els[i]));\n-            assertEquals(els[i], map.get(new Integer((String) els[i])));\n+            assertEquals(els[i], map.get(Integer.valueOf((String) els[i])));\n         }\n \n         try {\n             map.remove(els[0]);\n             fail();\n         } catch (final ClassCastException ex) {}\n-        assertEquals(els[0], map.remove(new Integer((String) els[0])));\n+        assertEquals(els[0], map.remove(Integer.valueOf((String) els[0])));\n \n         map = TransformedSortedMap\n                 .transformingSortedMap(\n         for (int i = 0; i < els.length; i++) {\n             map.put((K) els[i], (V) els[i]);\n             assertEquals(i + 1, map.size());\n-            assertEquals(true, map.containsValue(new Integer((String) els[i])));\n+            assertEquals(true, map.containsValue(Integer.valueOf((String) els[i])));\n             assertEquals(false, map.containsValue(els[i]));\n             assertEquals(true, map.containsKey(els[i]));\n-            assertEquals(new Integer((String) els[i]), map.get(els[i]));\n-        }\n-\n-        assertEquals(new Integer((String) els[0]), map.remove(els[0]));\n+            assertEquals(Integer.valueOf((String) els[i]), map.get(els[i]));\n+        }\n+\n+        assertEquals(Integer.valueOf((String) els[0]), map.remove(els[0]));\n \n         final Set<Map.Entry<K, V>> entrySet = map.entrySet();\n         final Map.Entry<K, V>[] array = entrySet.toArray(new Map.Entry[0]);\n         array[0].setValue((V) \"66\");\n-        assertEquals(new Integer(66), array[0].getValue());\n-        assertEquals(new Integer(66), map.get(array[0].getKey()));\n+        assertEquals(Integer.valueOf(66), array[0].getValue());\n+        assertEquals(Integer.valueOf(66), map.get(array[0].getKey()));\n \n         final Map.Entry<K, V> entry = entrySet.iterator().next();\n         entry.setValue((V) \"88\");\n-        assertEquals(new Integer(88), entry.getValue());\n-        assertEquals(new Integer(88), map.get(entry.getKey()));\n+        assertEquals(Integer.valueOf(88), entry.getValue());\n+        assertEquals(Integer.valueOf(88), map.get(entry.getKey()));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"2\", trans.get(\"B\"));\n         assertEquals(\"3\", trans.get(\"C\"));\n         trans.put((K) \"D\", (V) \"4\");\n-        assertEquals(new Integer(4), trans.get(\"D\"));\n+        assertEquals(Integer.valueOf(4), trans.get(\"D\"));\n     }\n \n     @SuppressWarnings(\"unchecked\")\n                         null,\n                         (Transformer<? super V, ? extends V>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(3, trans.size());\n-        assertEquals(new Integer(1), trans.get(\"A\"));\n-        assertEquals(new Integer(2), trans.get(\"B\"));\n-        assertEquals(new Integer(3), trans.get(\"C\"));\n+        assertEquals(Integer.valueOf(1), trans.get(\"A\"));\n+        assertEquals(Integer.valueOf(2), trans.get(\"B\"));\n+        assertEquals(Integer.valueOf(3), trans.get(\"C\"));\n         trans.put((K) \"D\", (V) \"4\");\n-        assertEquals(new Integer(4), trans.get(\"D\"));\n+        assertEquals(Integer.valueOf(4), trans.get(\"D\"));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java\n+++ b/src/test/java/org/apache/commons/collections4/queue/TransformedQueueTest.java\n         for (int i = 0; i < els.length; i++) {\n             queue.add(els[i]);\n             assertEquals(i + 1, queue.size());\n-            assertEquals(true, queue.contains(new Integer((String) els[i])));\n+            assertEquals(true, queue.contains(Integer.valueOf((String) els[i])));\n             assertEquals(false, queue.contains(els[i]));\n         }\n         \n         assertEquals(false, queue.remove(els[0]));\n-        assertEquals(true, queue.remove(new Integer((String) els[0])));\n+        assertEquals(true, queue.remove(Integer.valueOf((String) els[0])));\n         \n     }\n \n                 TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, queue.size());\n         for (final Object el : els) {\n-            assertEquals(true, queue.contains(new Integer((String) el)));\n+            assertEquals(true, queue.contains(Integer.valueOf((String) el)));\n             assertEquals(false, queue.contains(el));\n         }\n         \n         assertEquals(false, queue.remove(els[0]));\n-        assertEquals(true, queue.remove(new Integer((String) els[0])));\n+        assertEquals(true, queue.remove(Integer.valueOf((String) els[0])));\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/set/AbstractSortedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/AbstractSortedSetTest.java\n         final Object[] elements = new Object[30];\n \n         for (int i = 0; i < 30; i++) {\n-            elements[i] = new Integer(i + i + 1);\n+            elements[i] = Integer.valueOf(i + i + 1);\n         }\n         return (E[]) elements;\n     }\n     public E[] getOtherNonNullElements() {\n         final Object[] elements = new Object[30];\n         for (int i = 0; i < 30; i++) {\n-            elements[i] = new Integer(i + i + 2);\n+            elements[i] = Integer.valueOf(i + i + 2);\n         }\n         return (E[]) elements;\n     }\n--- a/src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java\n+++ b/src/test/java/org/apache/commons/collections4/set/ListOrderedSet2Test.java\n  */\n public class ListOrderedSet2Test<E> extends AbstractSetTest<E> {\n \n-    private static final Integer ZERO = new Integer(0);\n-    private static final Integer ONE = new Integer(1);\n-    private static final Integer TWO = new Integer(2);\n-    private static final Integer THREE = new Integer(3);\n+    private static final Integer ZERO = Integer.valueOf(0);\n+    private static final Integer ONE = Integer.valueOf(1);\n+    private static final Integer TWO = Integer.valueOf(2);\n+    private static final Integer THREE = Integer.valueOf(3);\n \n     public ListOrderedSet2Test(final String testName) {\n         super(testName);\n--- a/src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/ListOrderedSetTest.java\n public class ListOrderedSetTest<E>\n     extends AbstractSetTest<E> {\n \n-    private static final Integer ZERO = new Integer(0);\n-\n-    private static final Integer ONE = new Integer(1);\n-\n-    private static final Integer TWO = new Integer(2);\n-\n-    private static final Integer THREE = new Integer(3);\n+    private static final Integer ZERO = Integer.valueOf(0);\n+\n+    private static final Integer ONE = Integer.valueOf(1);\n+\n+    private static final Integer TWO = Integer.valueOf(2);\n+\n+    private static final Integer THREE = Integer.valueOf(3);\n \n     public ListOrderedSetTest(final String testName) {\n         super(testName);\n--- a/src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java\n     @SuppressWarnings(\"unchecked\")\n     public void testIllegalAdd() {\n         final Set<E> set = makeTestSet();\n-        final Integer i = new Integer(3);\n+        final Integer i = Integer.valueOf(3);\n         try {\n             set.add((E) i);\n             fail(\"Integer should fail string predicate.\");\n         final Set<E> elements = new HashSet<E>();\n         elements.add((E) \"one\");\n         elements.add((E) \"two\");\n-        elements.add((E) new Integer(3));\n+        elements.add((E) Integer.valueOf(3));\n         elements.add((E) \"four\");\n         try {\n             set.addAll(elements);\n         assertTrue(\"Set shouldn't contain illegal element\",\n          !set.contains(\"two\"));\n         assertTrue(\"Set shouldn't contain illegal element\",\n-         !set.contains(new Integer(3)));\n+         !set.contains(Integer.valueOf(3)));\n         assertTrue(\"Set shouldn't contain illegal element\",\n          !set.contains(\"four\"));\n     }\n--- a/src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/TransformedSetTest.java\n         for (int i = 0; i < els.length; i++) {\n             set.add(els[i]);\n             assertEquals(i + 1, set.size());\n-            assertEquals(true, set.contains(new Integer((String) els[i])));\n+            assertEquals(true, set.contains(Integer.valueOf((String) els[i])));\n             assertEquals(false, set.contains(els[i]));\n         }\n \n         assertEquals(false, set.remove(els[0]));\n-        assertEquals(true, set.remove(new Integer((String) els[0])));\n+        assertEquals(true, set.remove(Integer.valueOf((String) els[0])));\n \n     }\n \n         final Set<?> set = TransformedSet.transformedSet(originalSet, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, set.size());\n         for (final Object el : els) {\n-            assertEquals(true, set.contains(new Integer((String) el)));\n+            assertEquals(true, set.contains(Integer.valueOf((String) el)));\n             assertEquals(false, set.contains(el));\n         }\n         \n         assertEquals(false, set.remove(els[0]));\n-        assertEquals(true, set.remove(new Integer((String) els[0])));\n+        assertEquals(true, set.remove(Integer.valueOf((String) els[0])));\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/TransformedSortedSetTest.java\n         for (int i = 0; i < els.length; i++) {\n             set.add(els[i]);\n             assertEquals(i + 1, set.size());\n-            assertEquals(true, set.contains(new Integer((String) els[i])));\n+            assertEquals(true, set.contains(Integer.valueOf((String) els[i])));\n         }\n \n-        assertEquals(true, set.remove(new Integer((String) els[0])));\n+        assertEquals(true, set.remove(Integer.valueOf((String) els[0])));\n     }\n \n     public void testTransformedSet_decorateTransform() {\n         final Set<?> set = TransformedSortedSet.transformedSet(originalSet, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, set.size());\n         for (final Object el : els) {\n-            assertEquals(true, set.contains(new Integer((String) el)));\n+            assertEquals(true, set.contains(Integer.valueOf((String) el)));\n         }\n         \n-        assertEquals(true, set.remove(new Integer((String) els[0])));\n+        assertEquals(true, set.remove(Integer.valueOf((String) els[0])));\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java\n     protected void setupSet() {\n         set = makeFullCollection();\n         array = new ArrayList<E>();\n-        array.add((E) new Integer(1));\n+        array.add((E) Integer.valueOf(1));\n     }\n \n     /**\n     public void testUnmodifiable() {\n         setupSet();\n         verifyUnmodifiable(set);\n-        verifyUnmodifiable(set.headSet((E) new Integer(1)));\n-        verifyUnmodifiable(set.tailSet((E) new Integer(1)));\n-        verifyUnmodifiable(set.subSet((E) new Integer(1), (E) new Integer(3)));\n+        verifyUnmodifiable(set.headSet((E) Integer.valueOf(1)));\n+        verifyUnmodifiable(set.tailSet((E) Integer.valueOf(1)));\n+        verifyUnmodifiable(set.subSet((E) Integer.valueOf(1), (E) Integer.valueOf(3)));\n     }\n \n     /**", "timestamp": 1367190954, "metainfo": ""}