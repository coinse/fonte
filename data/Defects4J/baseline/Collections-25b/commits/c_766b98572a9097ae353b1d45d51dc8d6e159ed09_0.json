{"sha": "766b98572a9097ae353b1d45d51dc8d6e159ed09", "log": "unit tests for subclass behaviour   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestLRUMap.java\n+++ b/src/test/org/apache/commons/collections/TestLRUMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLRUMap.java,v 1.5 2002/02/13 23:55:41 morgand Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/02/13 23:55:41 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLRUMap.java,v 1.6 2002/02/14 20:57:59 morgand Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/02/14 20:57:59 $\n  *\n  * ====================================================================\n  *\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:morgand@apache.org\">Morgan Delagrange</a>\n- * @version $Id: TestLRUMap.java,v 1.5 2002/02/13 23:55:41 morgand Exp $\n+ * @version $Id: TestLRUMap.java,v 1.6 2002/02/14 20:57:59 morgand Exp $\n  */\n public class TestLRUMap extends TestHashMap\n {\n                    map2.containsKey(new Integer(4)));\n     }\n \n+    /**\n+     * You should be able to subclass LRUMap and perform a \n+     * custom action when items are removed automatically\n+     * by the LRU algorithm (the removeLRU() method).\n+     */\n+    public void testLRUSubclass() {\n+        LRUCounter counter = new LRUCounter(3);\n+        counter.put(new Integer(1),\"foo\");\n+        counter.put(new Integer(2),\"foo\");\n+        counter.put(new Integer(3),\"foo\");\n+        counter.put(new Integer(1),\"foo\");\n+        counter.put(new Integer(4),\"foo\");\n+        counter.put(new Integer(5),\"foo\");\n+        counter.put(new Integer(2),\"foo\");\n+        counter.remove(new Integer(5));\n+\n+        assertTrue(\"size should be 2, but was \" + counter.size(), counter.size() == 2);\n+        assertTrue(\"removedCount should be 2 but was \" + counter.removedCount,\n+                   counter.removedCount == 2);\n+    }\n+\n+    /**\n+     * You should be able to subclass LRUMap and perform a \n+     * custom action when items are removed automatically\n+     * or when remove is called manually\n+     * by overriding the remove(Object) method.\n+     */\n+    public void testRemoveSubclass() {\n+        RemoveCounter counter = new RemoveCounter(3);\n+        counter.put(new Integer(1),\"foo\");\n+        counter.put(new Integer(2),\"foo\");\n+        counter.put(new Integer(3),\"foo\");\n+        counter.put(new Integer(1),\"foo\");\n+        counter.put(new Integer(4),\"foo\");\n+        counter.put(new Integer(5),\"foo\");\n+        counter.put(new Integer(2),\"foo\");\n+        counter.remove(new Integer(5));\n+\n+        assertTrue(\"size should be 2, but was \" + counter.size(), counter.size() == 2);\n+        assertTrue(\"removedCount should be 3 but was \" + counter.removedCount,\n+                   counter.removedCount == 3);\n+    }\n+\n+    private class LRUCounter extends LRUMap {\n+        int removedCount = 0;\n+\n+        LRUCounter(int i) {\n+            super(i);\n+        }\n+\n+        public Object removeLRU() {\n+            ++removedCount;\n+            return super.removeLRU();\n+        }\n+    }\n+\n+    private class RemoveCounter extends LRUMap {\n+        int removedCount = 0;\n+\n+        RemoveCounter(int i) {\n+            super(i);\n+        }\n+\n+        public Object remove(Object o) {\n+            ++removedCount;\n+            return super.remove(o);\n+        }\n+    }\n \n }", "timestamp": 1013720279, "metainfo": ""}