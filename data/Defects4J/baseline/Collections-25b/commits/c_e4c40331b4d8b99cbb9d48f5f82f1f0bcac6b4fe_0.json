{"sha": "e4c40331b4d8b99cbb9d48f5f82f1f0bcac6b4fe", "log": "Complete javadoc, minor formatting, merge duplicate throws clauses.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/main/java/org/apache/commons/collections/TransformerUtils.java\n      * Gets a transformer that always throws an exception.\n      * This could be useful during testing as a placeholder.\n      * \n+     * @param <I>  the input type\n+     * @param <O>  the output type\n+     * @return the transformer\n      * @see org.apache.commons.collections.functors.ExceptionTransformer\n-     * \n-     * @return the transformer\n      */\n     public static <I, O> Transformer<I, O> exceptionTransformer() {\n         return ExceptionTransformer.<I, O>exceptionTransformer();\n     /**\n      * Gets a transformer that always returns null.\n      * \n+     * @param <I>  the input type\n+     * @param <O>  the output type\n+     * @return the transformer\n      * @see org.apache.commons.collections.functors.ConstantTransformer\n-     * \n-     * @return the transformer\n      */\n     public static <I, O> Transformer<I, O> nullTransformer() {\n         return ConstantTransformer.<I, O>nullTransformer();\n      * The input object should be immutable to maintain the\n      * contract of Transformer (although this is not checked).\n      * \n+     * @param <T>  the input/output type\n+     * @return the transformer\n      * @see org.apache.commons.collections.functors.NOPTransformer\n-     * \n-     * @return the transformer\n      */\n     public static <T> Transformer<T, T> nopTransformer() {\n         return NOPTransformer.<T>nopTransformer();\n      * <li>serialization clone\n      * <ul>\n      * \n+     * @param <T>  the input/output type\n+     * @return the transformer\n      * @see org.apache.commons.collections.functors.CloneTransformer\n-     * \n-     * @return the transformer\n      */\n     public static <T> Transformer<T, T> cloneTransformer() {\n         return CloneTransformer.<T>cloneTransformer();\n      * Creates a Transformer that will return the same object each time the \n      * transformer is used.\n      *\n-     * @see org.apache.commons.collections.functors.ConstantTransformer\n-     * \n+     * @param <I>  the input type\n+     * @param <O>  the output type\n      * @param constantToReturn  the constant object to return each time in the transformer\n      * @return the transformer.\n+     * @see org.apache.commons.collections.functors.ConstantTransformer\n      */\n     public static <I, O> Transformer<I, O> constantTransformer(final O constantToReturn) {\n         return ConstantTransformer.constantTransformer(constantToReturn);\n      * Creates a Transformer that calls a Closure each time the transformer is used.\n      * The transformer returns the input object.\n      *\n+     * @param <T>  the input/output type\n+     * @param closure  the closure to run each time in the transformer, not null\n+     * @return the transformer\n+     * @throws IllegalArgumentException if the closure is null\n      * @see org.apache.commons.collections.functors.ClosureTransformer\n-     * \n-     * @param closure  the closure to run each time in the transformer, not null\n-     * @return the transformer\n-     * @throws IllegalArgumentException if the closure is null\n      */\n     public static <T> Transformer<T, T> asTransformer(final Closure<? super T> closure) {\n         return ClosureTransformer.closureTransformer(closure);\n      * Creates a Transformer that calls a Predicate each time the transformer is used.\n      * The transformer will return either Boolean.TRUE or Boolean.FALSE.\n      *\n+     * @param <T>  the input type\n+     * @param predicate  the predicate to run each time in the transformer, not null\n+     * @return the transformer\n+     * @throws IllegalArgumentException if the predicate is null\n      * @see org.apache.commons.collections.functors.PredicateTransformer\n-     * \n-     * @param predicate  the predicate to run each time in the transformer, not null\n-     * @return the transformer\n-     * @throws IllegalArgumentException if the predicate is null\n      */\n     public static <T> Transformer<T, Boolean> asTransformer(final Predicate<? super T> predicate) {\n         return PredicateTransformer.predicateTransformer(predicate);\n      * Creates a Transformer that calls a Factory each time the transformer is used.\n      * The transformer will return the value returned by the factory.\n      *\n+     * @param <I>  the input type\n+     * @param <O>  the output type\n+     * @param factory  the factory to run each time in the transformer, not null\n+     * @return the transformer\n+     * @throws IllegalArgumentException if the factory is null\n      * @see org.apache.commons.collections.functors.FactoryTransformer\n-     * \n-     * @param factory  the factory to run each time in the transformer, not null\n-     * @return the transformer\n-     * @throws IllegalArgumentException if the factory is null\n      */\n     public static <I, O> Transformer<I, O> asTransformer(final Factory<? extends O> factory) {\n         return FactoryTransformer.factoryTransformer(factory);\n      * Create a new Transformer that calls two transformers, passing the result of\n      * the first into the second.\n      * \n-     * @see org.apache.commons.collections.functors.ChainedTransformer\n-     * \n+     * @param <T>  the input/output type\n      * @param transformer1  the first transformer\n      * @param transformer2  the second transformer\n      * @return the transformer\n      * @throws IllegalArgumentException if either transformer is null\n+     * @see org.apache.commons.collections.functors.ChainedTransformer\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Transformer<T, T> chainedTransformer(\n      * Create a new Transformer that calls each transformer in turn, passing the \n      * result into the next transformer.\n      * \n+     * @param <T>  the input/output type\n+     * @param transformers  an array of transformers to chain\n+     * @return the transformer\n+     * @throws IllegalArgumentException if the transformers array or any of the transformers is null\n      * @see org.apache.commons.collections.functors.ChainedTransformer\n-     * \n-     * @param transformers  an array of transformers to chain\n-     * @return the transformer\n-     * @throws IllegalArgumentException if the transformers array is null\n-     * @throws IllegalArgumentException if any transformer in the array is null\n      */\n     public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>[] transformers) {\n         return ChainedTransformer.chainedTransformer(transformers);\n      * result into the next transformer. The ordering is that of the iterator()\n      * method on the collection.\n      * \n+     * @param <T>  the input/output type\n+     * @param transformers  a collection of transformers to chain\n+     * @return the transformer\n+     * @throws IllegalArgumentException if the transformers collection or any of the transformers is null\n      * @see org.apache.commons.collections.functors.ChainedTransformer\n-     * \n-     * @param transformers  a collection of transformers to chain\n-     * @return the transformer\n-     * @throws IllegalArgumentException if the transformers collection is null\n-     * @throws IllegalArgumentException if any transformer in the collection is null\n      */\n     public static <T> Transformer<T, T> chainedTransformer(\n             final Collection<? extends Transformer<T, T>> transformers) {\n      * Create a new Transformer that calls one of two transformers depending \n      * on the specified predicate.\n      * \n-     * @see org.apache.commons.collections.functors.SwitchTransformer\n-     * \n+     * @param <I>  the input type\n+     * @param <O>  the output type\n      * @param predicate  the predicate to switch on\n      * @param trueTransformer  the transformer called if the predicate is true\n      * @param falseTransformer  the transformer called if the predicate is false\n      * @return the transformer\n-     * @throws IllegalArgumentException if the predicate is null\n-     * @throws IllegalArgumentException if either transformer is null\n+     * @throws IllegalArgumentException if either the predicate or transformer is null\n+     * @see org.apache.commons.collections.functors.SwitchTransformer\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I> predicate,\n             final Transformer<? super I, ? extends O> trueTransformer,\n             final Transformer<? super I, ? extends O> falseTransformer) {\n         return SwitchTransformer.switchTransformer(new Predicate[] { predicate },\n-                new Transformer[] { trueTransformer }, falseTransformer);\n+                                                   new Transformer[] { trueTransformer }, falseTransformer);\n     }\n \n     /**\n      * predicate at array location 0 returned true. Each predicate is evaluated\n      * until one returns true. If no predicates evaluate to true, null is returned.\n      * \n-     * @see org.apache.commons.collections.functors.SwitchTransformer\n-     * \n+     * @param <I>  the input type\n+     * @param <O>  the output type\n      * @param predicates  an array of predicates to check\n      * @param transformers  an array of transformers to call\n      * @return the transformer\n-     * @throws IllegalArgumentException if the either array is null\n-     * @throws IllegalArgumentException if the either array has 0 elements\n+     * @throws IllegalArgumentException if the either array is null or empty\n      * @throws IllegalArgumentException if any element in the arrays is null\n      * @throws IllegalArgumentException if the arrays are different sizes\n+     * @see org.apache.commons.collections.functors.SwitchTransformer\n      */\n     public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n             final Transformer<? super I, ? extends O>[] transformers) {\n      * until one returns true. If no predicates evaluate to true, the default\n      * transformer is called. If the default transformer is null, null is returned.\n      * \n-     * @see org.apache.commons.collections.functors.SwitchTransformer\n-     * \n+     * @param <I>  the input type\n+     * @param <O>  the output type\n      * @param predicates  an array of predicates to check\n      * @param transformers  an array of transformers to call\n      * @param defaultTransformer  the default to call if no predicate matches, null means return null\n      * @return the transformer\n-     * @throws IllegalArgumentException if the either array is null\n-     * @throws IllegalArgumentException if the either array has 0 elements\n+     * @throws IllegalArgumentException if the either array is null or empty\n      * @throws IllegalArgumentException if any element in the arrays is null\n      * @throws IllegalArgumentException if the arrays are different sizes\n+     * @see org.apache.commons.collections.functors.SwitchTransformer\n      */\n     public static <I, O> Transformer<I, O> switchTransformer(final Predicate<? super I>[] predicates,\n             final Transformer<? super I, ? extends O>[] transformers,\n      * case. The ordering is that of the iterator() method on the entryset collection \n      * of the map.\n      * \n-     * @see org.apache.commons.collections.functors.SwitchTransformer\n-     * \n+     * @param <I>  the input type\n+     * @param <O>  the output type\n      * @param predicatesAndTransformers  a map of predicates to transformers\n      * @return the transformer\n-     * @throws IllegalArgumentException if the map is null\n-     * @throws IllegalArgumentException if the map is empty\n+     * @throws IllegalArgumentException if the map is null or empty\n      * @throws IllegalArgumentException if any transformer in the map is null\n      * @throws ClassCastException  if the map elements are of the wrong type\n+     * @see org.apache.commons.collections.functors.SwitchTransformer\n      */\n     public static <I, O> Transformer<I, O> switchTransformer(\n             final Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n      * default transformer is called. The default transformer is set in the map\n      * using a null key. If no default is set, null will be returned in a default case.\n      * \n+     * @param <I>  the input type\n+     * @param <O>  the output type\n+     * @param objectsAndTransformers  a map of objects to transformers\n+     * @return the transformer\n+     * @throws IllegalArgumentException if the map is null or empty\n+     * @throws IllegalArgumentException if any transformer in the map is null\n      * @see org.apache.commons.collections.functors.SwitchTransformer\n-     * \n-     * @param objectsAndTransformers  a map of objects to transformers\n-     * @return the transformer\n-     * @throws IllegalArgumentException if the map is null\n-     * @throws IllegalArgumentException if the map is empty\n-     * @throws IllegalArgumentException if any transformer in the map is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <I, O> Transformer<I, O> switchMapTransformer(\n     /**\n      * Gets a Transformer that expects an input Class object that it will instantiate.\n      * \n+     * @param <T>  the output type\n+     * @return the transformer\n      * @see org.apache.commons.collections.functors.InstantiateTransformer\n-     * \n-     * @return the transformer\n      */\n     public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n         return InstantiateTransformer.<T>instantiateTransformer();\n      * instantiate. The constructor used is determined by the arguments specified\n      * to this method.\n      *\n-     * @see org.apache.commons.collections.functors.InstantiateTransformer\n-     * \n+     * @param <T>  the output type\n      * @param paramTypes  parameter types for the constructor, can be null\n      * @param args  the arguments to pass to the constructor, can be null\n      * @return the transformer\n      * @throws IllegalArgumentException if the paramTypes and args don't match\n+     * @see org.apache.commons.collections.functors.InstantiateTransformer\n      */\n     public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n             final Class<?>[] paramTypes, final Object[] args) {\n      * Creates a Transformer that uses the passed in Map to transform the input \n      * object (as a simple lookup).\n      *\n-     * @see org.apache.commons.collections.functors.MapTransformer\n-     * \n+     * @param <I>  the input type\n+     * @param <O>  the output type\n      * @param map  the map to use to transform the objects\n      * @return the transformer, or a {@link ConstantTransformer#NULL_INSTANCE} if the {@code map} is {@code null}\n+     * @see org.apache.commons.collections.functors.MapTransformer\n      */\n     public static <I, O> Transformer<I, O> mapTransformer(final Map<? super I, ? extends O> map) {\n         return MapTransformer.mapTransformer(map);\n      * will call the <code>getName/code> method on the input object to \n      * determine the transformer result.\n      * \n+     * @param <I>  the input type\n+     * @param <O>  the output type\n+     * @param methodName  the method name to call on the input object, may not be null\n+     * @return the transformer\n+     * @throws IllegalArgumentException if the methodName is null.\n      * @see org.apache.commons.collections.functors.InvokerTransformer\n-     * \n-     * @param methodName  the method name to call on the input object, may not be null\n-     * @return the transformer\n-     * @throws IllegalArgumentException if the methodName is null.\n      */\n     public static <I, O> Transformer<I, O> invokerTransformer(final String methodName) {\n         return InvokerTransformer.<I, O>invokerTransformer(methodName, null, null);\n \n     /**\n      * Gets a Transformer that invokes a method on the input object.\n-     * The method parameters are specified. If the input object is null, \n-     * null is returned.\n-     * \n-     * @see org.apache.commons.collections.functors.InvokerTransformer\n-     * \n+     * The method parameters are specified. If the input object is {@code null}, \n+     * {@code null} is returned.\n+     * \n+     * @param <I>  the input type\n+     * @param <O>  the output type\n      * @param methodName  the name of the method\n      * @param paramTypes  the parameter types\n      * @param args  the arguments\n      * @return the transformer\n-     * @throws IllegalArgumentException if the method name is null\n-     * @throws IllegalArgumentException if the paramTypes and args don't match\n+     * @throws IllegalArgumentException if the method name is null or the paramTypes and args don't match\n+     * @see org.apache.commons.collections.functors.InvokerTransformer\n      */\n     public static <I, O> Transformer<I, O> invokerTransformer(final String methodName, final Class<?>[] paramTypes,\n                                                               final Object[] args) {\n      * representation of the input object. This is achieved via the\n      * <code>toString</code> method, <code>null</code> returns 'null'.\n      * \n+     * @param <T>  the input type\n+     * @return the transformer\n      * @see org.apache.commons.collections.functors.StringValueTransformer\n-     * \n-     * @return the transformer\n      */\n     public static <T> Transformer<T, String> stringValueTransformer() {\n         return StringValueTransformer.<T>stringValueTransformer();", "timestamp": 1358782174, "metainfo": ""}