{"sha": "2ec031411c73af67b145d37c8011dc4de9db9d9f", "log": "Change order of LRUMap to LRU to MRU   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/java/org/apache/commons/collections/map/LRUMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/LRUMap.java,v 1.2 2003/12/07 23:59:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/LRUMap.java,v 1.3 2003/12/11 00:46:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <p>\n  * The map implements <code>OrderedMap</code> and entries may be queried using\n  * the bidirectional <code>OrderedMapIterator</code>. The order returned is\n- * most recently used to least recently used. Iterators from map views can \n+ * least recently used to most recently used. Iterators from map views can \n  * also be cast to <code>OrderedIterator</code> if required.\n  * <p>\n  * All the available iterators can be reset back to the start by casting to\n  * <code>ResettableIterator</code> and calling <code>reset()</code>.\n- * <p>\n- * NOTE: The order of the map has changed from the previous version located\n- * in the main collections package. The map is now ordered most recently used\n- * to least recently used.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/07 23:59:13 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/11 00:46:12 $\n  *\n  * @author James Strachan\n  * @author Morgan Delagrange\n         if (entry == null) {\n             return null;\n         }\n-        moveFirst(entry);\n+        moveToMRU(entry);\n         return entry.getValue();\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Updates an existing key-value mapping.\n-     * This implementation moves the updated entry to the top of the list.\n+     * Moves an entry to the MRU position at the end of the list.\n+     * This implementation moves the updated entry to the end of the list.\n      * \n      * @param entry  the entry to update\n      * @param newValue  the new value to store\n      * @return value  the previous value\n      */\n-    protected void moveFirst(LinkEntry entry) {\n-        if (entry.before != header) {\n+    protected void moveToMRU(LinkEntry entry) {\n+        if (entry.after != header) {\n             modCount++;\n             // remove\n+            entry.before.after = entry.after;\n             entry.after.before = entry.before;\n-            entry.before.after = entry.after;\n             // add first\n-            entry.before = header;\n-            entry.after = header.after;\n-            header.after.before = entry;\n-            header.after = entry;\n+            entry.after = header;\n+            entry.before = header.before;\n+            header.before.after = entry;\n+            header.before = entry;\n         }\n     }\n     \n      * @return value  the previous value\n      */\n     protected void updateEntry(HashEntry entry, Object newValue) {\n-        moveFirst((LinkEntry) entry);  // handles modCount\n+        moveToMRU((LinkEntry) entry);  // handles modCount\n         entry.setValue(newValue);\n     }\n     \n      */\n     protected void addMapping(int hashIndex, int hashCode, Object key, Object value) {\n         if (size >= maxSize && removeLRU(header.before)) {\n-            LinkEntry entry = header.before;\n-            // remove from current location\n-            int removeIndex = hashIndex(entry.hashCode, data.length);\n-            HashEntry loop = data[removeIndex];\n-            HashEntry previous = null;\n-            while (loop != entry) {\n-                previous = loop;\n-                loop = loop.next;\n-            }\n-            modCount++;\n-            removeEntry(entry, removeIndex, previous);\n-            reuseEntry(entry, hashIndex, hashCode, key, value);\n-            addEntry(entry, hashIndex);\n-            \n+            reuseMapping(header.after, hashIndex, hashCode, key, value);\n         } else {\n             super.addMapping(hashIndex, hashCode, key, value);\n         }\n     }\n     \n     /**\n-     * Adds a new entry into this map using access order.\n-     * <p>\n-     * This implementation adds the entry to the data storage table and\n-     * to the start of the linked list.\n-     * \n-     * @param entry  the entry to add\n+     * Reuses an entry by removing it and moving it to a new place in the map.\n+     * \n+     * @param entry  the entry to reuse\n      * @param hashIndex  the index into the data array to store at\n-     */\n-    protected void addEntry(HashEntry entry, int hashIndex) {\n-        LinkEntry link = (LinkEntry) entry;\n-        link.before = header;\n-        link.after = header.after;\n-        header.after.before = link;\n-        header.after = link;\n-        data[hashIndex] = entry;\n+     * @param hashCode  the hash code of the key to add\n+     * @param key  the key to add\n+     * @param value  the value to add\n+     * @return the value previously mapped to this key, null if none\n+     */\n+    protected void reuseMapping(LinkEntry entry, int hashIndex, int hashCode, Object key, Object value) {\n+        // find the entry before the entry specified in the hash table\n+        // remember that the parameters (except the first) refer to the new entry,\n+        // not the old one\n+        int removeIndex = hashIndex(entry.hashCode, data.length);\n+        HashEntry loop = data[removeIndex];\n+        HashEntry previous = null;\n+        while (loop != entry) {\n+            previous = loop;\n+            loop = loop.next;\n+        }\n+        \n+        // reuse the entry\n+        modCount++;\n+        removeEntry(entry, removeIndex, previous);\n+        reuseEntry(entry, hashIndex, hashCode, key, value);\n+        addEntry(entry, hashIndex);\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/collections/map/TestLRUMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLRUMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestLRUMap.java,v 1.2 2003/12/07 23:59:12 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestLRUMap.java,v 1.3 2003/12/11 00:46:12 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n package org.apache.commons.collections.map;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.NoSuchElementException;\n \n import junit.framework.Test;\n import junit.textui.TestRunner;\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.2 $ $Date: 2003/12/07 23:59:12 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/11 00:46:12 $\n  * \n  * @author Stephen Colebourne\n  */\n         assertEquals(true, map.isFull());\n         assertEquals(2, map.maxSize());\n         it = map.keySet().iterator();\n-        assertSame(keys[1], it.next());\n-        assertSame(keys[0], it.next());\n-        it = map.values().iterator();\n-        assertSame(values[1], it.next());\n-        assertSame(values[0], it.next());\n+        assertSame(keys[0], it.next());\n+        assertSame(keys[1], it.next());\n+        it = map.values().iterator();\n+        assertSame(values[0], it.next());\n+        assertSame(values[1], it.next());\n \n         map.put(keys[2], values[2]);\n         assertEquals(2, map.size());\n         assertEquals(true, map.isFull());\n         assertEquals(2, map.maxSize());\n         it = map.keySet().iterator();\n+        assertSame(keys[1], it.next());\n         assertSame(keys[2], it.next());\n-        assertSame(keys[1], it.next());\n-        it = map.values().iterator();\n-        assertSame(values[2], it.next());\n-        assertSame(values[1], it.next());\n+        it = map.values().iterator();\n+        assertSame(values[1], it.next());\n+        assertSame(values[2], it.next());\n \n         map.put(keys[2], values[0]);\n         assertEquals(2, map.size());\n         assertEquals(true, map.isFull());\n         assertEquals(2, map.maxSize());\n         it = map.keySet().iterator();\n+        assertSame(keys[1], it.next());\n         assertSame(keys[2], it.next());\n-        assertSame(keys[1], it.next());\n-        it = map.values().iterator();\n-        assertSame(values[0], it.next());\n-        assertSame(values[1], it.next());\n+        it = map.values().iterator();\n+        assertSame(values[1], it.next());\n+        assertSame(values[0], it.next());\n \n         map.put(keys[1], values[3]);\n         assertEquals(2, map.size());\n         assertEquals(true, map.isFull());\n         assertEquals(2, map.maxSize());\n         it = map.keySet().iterator();\n-        assertSame(keys[1], it.next());\n         assertSame(keys[2], it.next());\n-        it = map.values().iterator();\n-        assertSame(values[3], it.next());\n-        assertSame(values[0], it.next());\n+        assertSame(keys[1], it.next());\n+        it = map.values().iterator();\n+        assertSame(values[0], it.next());\n+        assertSame(values[3], it.next());\n     }\n     \n     //-----------------------------------------------------------------------    \n         Iterator it = null;\n         \n         resetEmpty();\n+        map.put(keys[0], values[0]);\n         map.put(keys[1], values[1]);\n-        map.put(keys[0], values[0]);\n-        it = map.keySet().iterator();\n-        assertSame(keys[0], it.next());\n-        assertSame(keys[1], it.next());\n-        it = map.values().iterator();\n-        assertSame(values[0], it.next());\n-        assertSame(values[1], it.next());\n-\n-        // change to order\n+        it = map.keySet().iterator();\n+        assertSame(keys[0], it.next());\n+        assertSame(keys[1], it.next());\n+        it = map.values().iterator();\n+        assertSame(values[0], it.next());\n+        assertSame(values[1], it.next());\n+\n+        // no change to order\n         map.put(keys[1], values[1]);\n         it = map.keySet().iterator();\n-        assertSame(keys[1], it.next());\n-        assertSame(keys[0], it.next());\n-        it = map.values().iterator();\n-        assertSame(values[1], it.next());\n-        assertSame(values[0], it.next());\n+        assertSame(keys[0], it.next());\n+        assertSame(keys[1], it.next());\n+        it = map.values().iterator();\n+        assertSame(values[0], it.next());\n+        assertSame(values[1], it.next());\n \n         // no change to order\n         map.put(keys[1], values[2]);\n         it = map.keySet().iterator();\n-        assertSame(keys[1], it.next());\n-        assertSame(keys[0], it.next());\n-        it = map.values().iterator();\n-        assertSame(values[2], it.next());\n-        assertSame(values[0], it.next());\n+        assertSame(keys[0], it.next());\n+        assertSame(keys[1], it.next());\n+        it = map.values().iterator();\n+        assertSame(values[0], it.next());\n+        assertSame(values[2], it.next());\n \n         // change to order\n         map.put(keys[0], values[3]);\n         it = map.keySet().iterator();\n-        assertSame(keys[0], it.next());\n-        assertSame(keys[1], it.next());\n-        it = map.values().iterator();\n-        assertSame(values[3], it.next());\n-        assertSame(values[2], it.next());\n+        assertSame(keys[1], it.next());\n+        assertSame(keys[0], it.next());\n+        it = map.values().iterator();\n+        assertSame(values[2], it.next());\n+        assertSame(values[3], it.next());\n \n         // change to order\n         map.get(keys[1]);\n         it = map.keySet().iterator();\n-        assertSame(keys[1], it.next());\n-        assertSame(keys[0], it.next());\n-        it = map.values().iterator();\n-        assertSame(values[2], it.next());\n-        assertSame(values[3], it.next());\n+        assertSame(keys[0], it.next());\n+        assertSame(keys[1], it.next());\n+        it = map.values().iterator();\n+        assertSame(values[3], it.next());\n+        assertSame(values[2], it.next());\n \n         // change to order\n         map.get(keys[0]);\n         it = map.keySet().iterator();\n-        assertSame(keys[0], it.next());\n-        assertSame(keys[1], it.next());\n-        it = map.values().iterator();\n-        assertSame(values[3], it.next());\n-        assertSame(values[2], it.next());\n+        assertSame(keys[1], it.next());\n+        assertSame(keys[0], it.next());\n+        it = map.values().iterator();\n+        assertSame(values[2], it.next());\n+        assertSame(values[3], it.next());\n \n         // no change to order\n         map.get(keys[0]);\n         it = map.keySet().iterator();\n-        assertSame(keys[0], it.next());\n-        assertSame(keys[1], it.next());\n-        it = map.values().iterator();\n-        assertSame(values[3], it.next());\n-        assertSame(values[2], it.next());\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testFirstKey() {  // override\n-        resetEmpty();\n-        OrderedMap ordered = (OrderedMap) map;\n-        try {\n-            ordered.firstKey();\n-            fail();\n-        } catch (NoSuchElementException ex) {}\n-        \n-        resetFull();\n-        ordered = (OrderedMap) map;\n-        Object confirmedFirst = confirmed.keySet().iterator().next();\n-        ordered.get(confirmedFirst);\n-        assertEquals(confirmedFirst, ordered.firstKey());\n-    }\n-    \n-    public void testLastKey() {  // override\n-        resetEmpty();\n-        OrderedMap ordered = (OrderedMap) map;\n-        try {\n-            ordered.lastKey();\n-            fail();\n-        } catch (NoSuchElementException ex) {}\n-        \n-        resetFull();\n-        ordered = (OrderedMap) map;\n-        Object confirmedFirst = confirmed.keySet().iterator().next();\n-        // access order, thus first in is now in last place\n-        assertEquals(confirmedFirst, ordered.lastKey());\n-    }\n-\n-    //-----------------------------------------------------------------------    \n-    public void testNextKey() {  // override\n-        resetEmpty();\n-        OrderedMap ordered = (OrderedMap) map;\n-        assertEquals(null, ordered.nextKey(getOtherKeys()[0]));\n-        if (isAllowNullKey() == false) {\n-            try {\n-                assertEquals(null, ordered.nextKey(null)); // this is allowed too\n-            } catch (NullPointerException ex) {}\n-        } else {\n-            assertEquals(null, ordered.nextKey(null));\n-        }\n-        \n-        resetFull();\n-        ordered = (OrderedMap) map;\n-        List list = new ArrayList(confirmed.keySet());\n-        Collections.reverse(list);  // first into map is eldest\n-        Iterator it = list.iterator();\n-        Object confirmedLast = it.next();\n-        while (it.hasNext()) {\n-            Object confirmedObject = it.next();\n-            assertEquals(confirmedObject, ordered.nextKey(confirmedLast));\n-            confirmedLast = confirmedObject;\n-        }\n-        assertEquals(null, ordered.nextKey(confirmedLast));\n-    }\n-    \n-    public void testPreviousKey() {  // override\n-        resetEmpty();\n-        OrderedMap ordered = (OrderedMap) map;\n-        assertEquals(null, ordered.previousKey(getOtherKeys()[0]));\n-        if (isAllowNullKey() == false) {\n-            try {\n-                assertEquals(null, ordered.previousKey(null)); // this is allowed too\n-            } catch (NullPointerException ex) {}\n-        } else {\n-            assertEquals(null, ordered.previousKey(null));\n-        }\n-        \n-        resetFull();\n-        ordered = (OrderedMap) map;\n-        List list = new ArrayList(confirmed.keySet());\n-        Iterator it = list.iterator();\n-        Object confirmedLast = it.next();\n-        while (it.hasNext()) {\n-            Object confirmedObject = it.next();\n-            assertEquals(confirmedObject, ordered.previousKey(confirmedLast));\n-            confirmedLast = confirmedObject;\n-        }\n-        assertEquals(null, ordered.previousKey(confirmedLast));\n+        assertSame(keys[1], it.next());\n+        assertSame(keys[0], it.next());\n+        it = map.values().iterator();\n+        assertSame(values[2], it.next());\n+        assertSame(values[3], it.next());\n     }\n     \n //    public void testCreate() throws Exception {", "timestamp": 1071103572, "metainfo": ""}