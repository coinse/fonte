{"sha": "d56568acdf754d024152dc7d40f965d8cf5b44f4", "log": "Change internal storage class to an AbstractHashedMap, allowing more choice of implementation   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/map/Flat3Map.java\n  * Do not use <code>Flat3Map</code> if the size is likely to grow beyond 3.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.16 $ $Date: 2004/04/09 22:52:48 $\n+ * @version $Revision: 1.17 $ $Date: 2004/05/03 22:57:40 $\n  *\n  * @author Stephen Colebourne\n  */\n     /** Value, used while in flat mode */\n     private transient Object value3;\n     /** Map, used while in delegate mode */\n-    private transient HashedMap delegateMap;\n+    private transient AbstractHashedMap delegateMap;\n \n     /**\n      * Constructor.\n     }\n \n     /**\n-     * Converts the flat map data to a HashMap.\n+     * Converts the flat map data to a map.\n      */\n     private void convertToMap() {\n         delegateMap = createDelegateMap();\n \n     /**\n      * Create an instance of the map used for storage when in delegation mode.\n-     * This can be overridden by subclasses.\n+     * <p>\n+     * This can be overridden by subclasses to provide a different map implementation.\n+     * Not every AbstractHashedMap is suitable, identity and reference based maps\n+     * would be poor choices.\n      *\n-     * @return a new HashedMap or subclass\n+     * @return a new AbstractHashedMap or subclass\n      * @since Commons Collections 3.1\n      */\n-    protected HashedMap createDelegateMap() {\n+    protected AbstractHashedMap createDelegateMap() {\n         return new HashedMap();\n     }\n ", "timestamp": 1083625060, "metainfo": ""}