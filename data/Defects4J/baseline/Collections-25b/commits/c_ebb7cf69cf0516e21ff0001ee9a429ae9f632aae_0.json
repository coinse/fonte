{"sha": "ebb7cf69cf0516e21ff0001ee9a429ae9f632aae", "log": "Fix typos and minor formatting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n  * <p><b>NOTE</b>: this class has <b>not</b> been written for\n  * performance nor low memory usage.  In fact, it's way slower than it\n  * could be and generates too much memory garbage.  But since\n- * performance is not an issue during intialization (and there is not\n+ * performance is not an issue during initialization (and there is not\n  * much time to improve it), I wrote it this way.  If you don't like\n  * it, go ahead and tune it up!\n  *\n     protected String fileSeparator = System.getProperty(\"file.separator\");\n \n     /**\n-     * Has this configuration been intialized.\n+     * Has this configuration been initialized.\n      */\n     protected boolean isInitialized = false;\n \n         } else if (current instanceof List) {\n             // already a list - just add the new token\n             @SuppressWarnings(\"unchecked\") // OK to cast to Object\n-            final\n-            List<Object> list = (List<Object>) current;\n+            final List<Object> list = (List<Object>) current;\n             list.add(value);\n             \n         } else {\n                     \n                 } else if (value instanceof List) {\n                     @SuppressWarnings(\"unchecked\") // we only add Strings to the Lists\n-                    final\n-                    List<String> values = (List<String>) value;\n+                    final List<String> values = (List<String>) value;\n                     for (final String currentElement : values) {\n                         final StringBuilder currentOutput = new StringBuilder();\n                         currentOutput.append(key);\n     }\n \n     /**\n-     * Combines an existing Hashtable with this Hashtable.\n+     * Combines an existing ExtendedProperties object with this one.\n      * <p>\n      * Warning: It will overwrite previous entries without warning.\n      *\n     }\n \n     /**\n-     * Get the list of the keys contained in the configuration\n-     * repository.\n+     * Get the list of the keys contained in the configuration repository.\n      *\n      * @return an Iterator over the keys\n      */\n             }\n         } else if (value instanceof List) {\n             @SuppressWarnings(\"unchecked\") // Only expecting Strings here\n-            final\n-            List<String> entry = (List<String>) value;\n+            final List<String> entry = (List<String>) value;\n             return interpolate(entry.get(0)); // requires a String\n         } else {\n             throw new ClassCastException('\\'' + key + \"' doesn't map to a String object\");\n     }\n \n     /**\n-     * Get an array of strings associated with the given configuration\n-     * key.\n+     * Get an array of strings associated with the given configuration key.\n      *\n      * @param key The configuration key.\n      * @return The associated string array if key is found.\n             \n         } else if (value instanceof List) {\n             @SuppressWarnings(\"unchecked\") // We only add Strings to the Lists\n-            final\n-            List<String> list = (List<String>) value;\n+            final List<String> list = (List<String>) value;\n             values = list;\n             \n         } else if (value == null) {\n     }\n \n     /**\n-     * Get a Vector of strings associated with the given configuration\n-     * key.\n+     * Get a Vector of strings associated with the given configuration key.\n      *\n      * @param key The configuration key.\n      * @return The associated Vector.\n \n         if (value instanceof List) {\n             @SuppressWarnings(\"unchecked\") // our lists only contain Strings\n-            final\n-            List<String> list = (List<String>) value;\n+            final List<String> list = (List<String>) value;\n             return new Vector<String>(list);\n             \n         } else if (value instanceof String) {\n \n         if (value instanceof List) {\n             @SuppressWarnings(\"unchecked\") // our lists only contain strings\n-            final\n-            List<String> list = (List<String>) value;\n+            final List<String> list = (List<String>) value;\n             return new ArrayList<String>(list);\n             \n         } else if (value instanceof String) {\n         final ExtendedProperties c = new ExtendedProperties();\n \n         @SuppressWarnings(\"unchecked\") // Properties are supposed to have string keys ...\n-        final\n-        Enumeration<String> e = (Enumeration<String>) props.propertyNames();\n+        final Enumeration<String> e = (Enumeration<String>) props.propertyNames();\n         // Unfortunately PMD 4.3 cannot handle the original code where the @Suppress\n         // was in the for loop:\n         //    for (@SuppressWarnings(\"unchecked\") // Properties are supposed to have string keys ...\n             }\n         } else {\n             @SuppressWarnings(\"unchecked\") // OK to downcast here\n-            final\n-            Map<String, Object> mapso = (Map<String,Object>) map;\n+            final Map<String, Object> mapso = (Map<String,Object>) map;\n             for (final java.util.Map.Entry<String, Object> entry : mapso.entrySet()) {\n                 put(entry.getKey(), entry.getValue());\n             }", "timestamp": 1358863456, "metainfo": ""}