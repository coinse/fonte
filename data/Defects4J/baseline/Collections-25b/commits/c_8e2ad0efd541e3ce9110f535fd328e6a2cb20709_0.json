{"sha": "8e2ad0efd541e3ce9110f535fd328e6a2cb20709", "log": "Test SingletonListIterator   ", "commit": "\n--- a/src/test/org/apache/commons/collections/iterators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestAll.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/08/15 23:13:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestAll.java,v 1.2 2002/08/17 11:39:16 scolebourne Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/17 11:39:16 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * @version $Id: TestAll.java,v 1.2 2002/08/17 11:39:16 scolebourne Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestIteratorChain.suite());\n         suite.addTest(TestListIteratorWrapper.suite());\n         suite.addTest(TestSingletonIterator.suite());\n+        suite.addTest(TestSingletonListIterator.suite());\n         suite.addTest(TestUniqueFilterIterator.suite());\n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java,v 1.1 2002/08/17 11:39:16 scolebourne Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/17 11:39:16 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.iterators;\n+\n+import junit.framework.*;\n+import java.util.Iterator;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the SingletonListIterator.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: TestSingletonListIterator.java,v 1.1 2002/08/17 11:39:16 scolebourne Exp $\n+ */\n+public class TestSingletonListIterator extends TestIterator {\n+\n+    private static final Object testValue = \"foo\";\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestSingletonListIterator.class);\n+    }\n+    \n+    public TestSingletonListIterator(String testName) {\n+        super(testName);\n+    }\n+    \n+    /**\n+     * Returns null. SingletonListIterator can never be empty;\n+     * they always have exactly one element.\n+     * \n+     * @return null\n+     */\n+    public Iterator makeEmptyIterator() {\n+        return null;\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        return new SingletonListIterator( testValue );\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    /**\n+     * Whether or not we are testing an iterator that can be\n+     * empty.  SingletonIterators are never empty;\n+     * \n+     * @return false\n+     */\n+    public boolean supportsEmptyIterator() {\n+        return false;\n+    }\n+\n+    public void testIterator() {\n+        ListIterator iter = (ListIterator) makeObject();\n+        assertTrue( \"Iterator should have next item\", iter.hasNext() );\n+        assertTrue( \"Iterator should have no previous item\", !iter.hasPrevious() );\n+        assertEquals( \"Iteration next index\", 0, iter.nextIndex() );\n+        assertEquals( \"Iteration previous index\", -1, iter.previousIndex() );\n+        \n+        Object iterValue = iter.next();\n+        assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        \n+        assertTrue( \"Iterator should have no next item\", !iter.hasNext() );\n+        assertTrue( \"Iterator should have previous item\", iter.hasPrevious() );\n+        assertEquals( \"Iteration next index\", 1, iter.nextIndex() );\n+        assertEquals( \"Iteration previous index\", 0, iter.previousIndex() );\n+\n+        iterValue = iter.previous();\n+        assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        \n+        assertTrue( \"Iterator should have next item\", iter.hasNext() );\n+        assertTrue( \"Iterator should have no previous item\", !iter.hasPrevious() );\n+        assertEquals( \"Iteration next index\", 0, iter.nextIndex() );\n+        assertEquals( \"Iteration previous index\", -1, iter.previousIndex() );\n+\n+        iterValue = iter.next();\n+        assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        \n+        assertTrue( \"Iterator should have no next item\", !iter.hasNext() );\n+        assertTrue( \"Iterator should have previous item\", iter.hasPrevious() );\n+        assertEquals( \"Iteration next index\", 1, iter.nextIndex() );\n+        assertEquals( \"Iteration previous index\", 0, iter.previousIndex() );\n+\n+    \ttry {\n+    \t    iter.next();\n+    \t} catch (Exception e) {\n+    \t  assertTrue(\"NoSuchElementException must be thrown\", \n+    \t\t e.getClass().equals((new NoSuchElementException()).getClass()));\n+    \t}\n+        iter.previous();\n+        try {\n+            iter.previous();\n+        } catch (Exception e) {\n+          assertTrue(\"NoSuchElementException must be thrown\", \n+             e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+}\n+", "timestamp": 1029584356, "metainfo": ""}