{"sha": "452822535dbdb134b633629cd6c96bef84f1de2b", "log": "Renamed list tests.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections/AbstractTestArrayList.java\n+++ b/src/test/java/org/apache/commons/collections/AbstractTestArrayList.java\n \n import java.util.ArrayList;\n \n-import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractListTest;\n \n /**\n  * Abstract test class for ArrayList.\n  *\n  * @author Jason van Zyl\n  */\n-public abstract class AbstractTestArrayList<E> extends AbstractTestList<E> {\n+public abstract class AbstractTestArrayList<E> extends AbstractListTest<E> {\n \n     public AbstractTestArrayList(String testName) {\n         super(testName);\n--- a/src/test/java/org/apache/commons/collections/AbstractTestLinkedList.java\n+++ b/src/test/java/org/apache/commons/collections/AbstractTestLinkedList.java\n import java.util.List;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractListTest;\n \n /**\n  * Tests base {@link java.util.LinkedList} methods and contracts.\n  *\n  * @author Rich Dougherty\n  */\n-public abstract class AbstractTestLinkedList<T> extends AbstractTestList<T> {\n+public abstract class AbstractTestLinkedList<T> extends AbstractListTest<T> {\n \n     public AbstractTestLinkedList(String testName) {\n         super(testName);\n--- a/src/test/java/org/apache/commons/collections/collection/AbstractCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections/collection/AbstractCollectionTest.java\n  * Those methods should provide a confirmed collection implementation\n  * that's compatible with your collection implementation.\n  * <p>\n- * If you're extending {@link org.apache.commons.collections.list.AbstractTestList AbstractTestList},\n+ * If you're extending {@link org.apache.commons.collections.list.AbstractListTest AbstractListTest},\n  * {@link org.apache.commons.collections.set.AbstractTestSet AbstractTestSet},\n- * or {@link org.apache.commons.collections.bag.AbstractBagTest AbstractTestBag}, \n+ * or {@link org.apache.commons.collections.bag.AbstractBagTest AbstractBagTest}, \n  * you probably don't have to worry about the\n  * above methods, because those three classes already override the methods\n  * to provide standard JDK confirmed collections.<P>\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/AbstractLinkedListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Test case for {@link AbstractLinkedList}.\n+ *\n+ * @version $Revision$\n+ *\n+ * @author Rich Dougherty\n+ * @author David Hay\n+ * @author Phil Steitz\n+ */\n+public abstract class AbstractLinkedListTest<E> extends AbstractListTest<E> {\n+\n+    public AbstractLinkedListTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveFirst() {\n+        resetEmpty();\n+        AbstractLinkedList<E> list = getCollection();\n+        if (isRemoveSupported() == false) {\n+            try {\n+                list.removeFirst();\n+            } catch (UnsupportedOperationException ex) {}\n+        }\n+\n+        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n+        assertEquals(\"value1\", list.removeFirst());\n+        checkNodes();\n+        list.addLast((E) \"value3\");\n+        checkNodes();\n+        assertEquals(\"value2\", list.removeFirst());\n+        assertEquals(\"value3\", list.removeFirst());\n+        checkNodes();\n+        list.addLast((E) \"value4\");\n+        checkNodes();\n+        assertEquals(\"value4\", list.removeFirst());\n+        checkNodes();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveLast() {\n+        resetEmpty();\n+        AbstractLinkedList<E> list = getCollection();\n+        if (isRemoveSupported() == false) {\n+            try {\n+                list.removeLast();\n+            } catch (UnsupportedOperationException ex) {}\n+        }\n+\n+        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n+        assertEquals(\"value2\", list.removeLast());\n+        list.addFirst((E) \"value3\");\n+        checkNodes();\n+        assertEquals(\"value1\", list.removeLast());\n+        assertEquals(\"value3\", list.removeLast());\n+        list.addFirst((E) \"value4\");\n+        checkNodes();\n+        assertEquals(\"value4\", list.removeFirst());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testAddNodeAfter() {\n+        resetEmpty();\n+        AbstractLinkedList<E> list = getCollection();\n+        if (isAddSupported() == false) {\n+            try {\n+                list.addFirst(null);\n+            } catch (UnsupportedOperationException ex) {}\n+        }\n+\n+        list.addFirst((E) \"value1\");\n+        list.addNodeAfter(list.getNode(0, false), (E) \"value2\");\n+        assertEquals(\"value1\", list.getFirst());\n+        assertEquals(\"value2\", list.getLast());\n+        list.removeFirst();\n+        checkNodes();\n+        list.addNodeAfter(list.getNode(0, false), (E) \"value3\");\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value3\", list.getLast());\n+        list.addNodeAfter(list.getNode(0, false), (E) \"value4\");\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value3\", list.getLast());\n+        assertEquals(\"value4\", list.get(1));\n+        list.addNodeAfter(list.getNode(2, false), (E) \"value5\");\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value4\", list.get(1));\n+        assertEquals(\"value3\", list.get(2));\n+        assertEquals(\"value5\", list.getLast());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveNode() {\n+        resetEmpty();\n+        if (isAddSupported() == false || isRemoveSupported() == false) return;\n+        AbstractLinkedList<E> list = getCollection();\n+\n+        list.addAll(Arrays.asList((E[]) new String[] { \"value1\", \"value2\" }));\n+        list.removeNode(list.getNode(0, false));\n+        checkNodes();\n+        assertEquals(\"value2\", list.getFirst());\n+        assertEquals(\"value2\", list.getLast());\n+        list.addFirst((E) \"value1\");\n+        list.addFirst((E) \"value0\");\n+        checkNodes();\n+        list.removeNode(list.getNode(1, false));\n+        assertEquals(\"value0\", list.getFirst());\n+        assertEquals(\"value2\", list.getLast());\n+        checkNodes();\n+        list.removeNode(list.getNode(1, false));\n+        assertEquals(\"value0\", list.getFirst());\n+        assertEquals(\"value0\", list.getLast());\n+        checkNodes();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testGetNode() {\n+        resetEmpty();\n+        AbstractLinkedList<E> list = getCollection();\n+        // get marker\n+        assertEquals(list.getNode(0, true).previous, list.getNode(0, true).next);\n+        try {\n+            list.getNode(0, false);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        list.addAll( Arrays.asList((E[]) new String[]{\"value1\", \"value2\"}));\n+        checkNodes();\n+        list.addFirst((E) \"value0\");\n+        checkNodes();\n+        list.removeNode(list.getNode(1, false));\n+        checkNodes();\n+        try {\n+            list.getNode(2, false);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        try {\n+            list.getNode(-1, false);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+         try {\n+            list.getNode(3, true);\n+            fail(\"Expecting IndexOutOfBoundsException.\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+    }\n+\n+    protected void checkNodes() {\n+        AbstractLinkedList<E> list = getCollection();\n+        for (int i = 0; i < list.size; i++) {\n+            assertEquals(list.getNode(i, false).next, list.getNode(i + 1, true));\n+            if (i < list.size - 1) {\n+                assertEquals(list.getNode(i + 1, false).previous,\n+                    list.getNode(i, false));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public AbstractLinkedList<E> getCollection() {\n+        return (AbstractLinkedList<E>) super.getCollection();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/AbstractListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.AbstractCollection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.collection.AbstractCollectionTest;\n+import org.apache.commons.collections.iterators.AbstractTestListIterator;\n+\n+/**\n+ * Abstract test class for {@link java.util.List} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeObject} method.\n+ * <p>\n+ * If your {@link List} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link List} fails or override one of the\n+ * protected methods from AbstractTestCollection.\n+ *\n+ * @version $Revision$\n+ *\n+ * @author Rodney Waldhoff\n+ * @author Paul Jack\n+ * @author Stephen Colebourne\n+ * @author Neil O'Toole\n+ */\n+public abstract class AbstractListTest<E> extends AbstractCollectionTest<E> {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param testName  the test class name\n+     */\n+    public AbstractListTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns true if the collections produced by\n+     *  {@link #makeObject()} and {@link #makeFullCollection()}\n+     *  support the <code>set operation.<p>\n+     *  Default implementation returns true.  Override if your collection\n+     *  class does not support set.\n+     */\n+    public boolean isSetSupported() {\n+        return true;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Verifies that the test list implementation matches the confirmed list\n+     *  implementation.\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void verify() {\n+        super.verify();\n+\n+        List<E> list1 = getCollection();\n+        List<E> list2 = getConfirmed();\n+\n+        assertEquals(\"List should equal confirmed\", list1, list2);\n+        assertEquals(\"Confirmed should equal list\", list2, list1);\n+\n+        assertEquals(\"Hash codes should be equal\", list1.hashCode(), list2.hashCode());\n+\n+        int i = 0;\n+        Iterator<E> iterator1 = list1.iterator();\n+        Iterator<E> iterator2 = list2.iterator();\n+        E[] array = (E[]) list1.toArray();\n+        while (iterator2.hasNext()) {\n+            assertTrue(\"List iterator should have next\", iterator1.hasNext());\n+            Object o1 = iterator1.next();\n+            Object o2 = iterator2.next();\n+            assertEquals(\"Iterator elements should be equal\", o1, o2);\n+            o2 = list1.get(i);\n+            assertEquals(\"get should return correct element\", o1, o2);\n+            o2 = array[i];\n+            assertEquals(\"toArray should have correct element\", o1, o2);\n+            i++;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * List equals method is defined.\n+     */\n+    @Override\n+    public boolean isEqualsCheckable() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns an empty {@link ArrayList}.\n+     */\n+    @Override\n+    public Collection<E> makeConfirmedCollection() {\n+        ArrayList<E> list = new ArrayList<E>();\n+        return list;\n+    }\n+\n+    /**\n+     * Returns a full {@link ArrayList}.\n+     */\n+    @Override\n+    public Collection<E> makeConfirmedFullCollection() {\n+        ArrayList<E> list = new ArrayList<E>();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+    /**\n+     * Returns {@link #makeObject()}.\n+     *\n+     * @return an empty list to be used for testing\n+     */\n+    @Override\n+    public abstract List<E> makeObject();\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public List<E> makeFullCollection() {\n+        // only works if list supports optional \"addAll(Collection)\"\n+        List<E> list = makeObject();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the {@link #collection} field cast to a {@link List}.\n+     *\n+     * @return the collection field as a List\n+     */\n+    @Override\n+    public List<E> getCollection() {\n+        return (List<E>) super.getCollection();\n+    }\n+\n+    /**\n+     * Returns the {@link #confirmed} field cast to a {@link List}.\n+     *\n+     * @return the confirmed field as a List\n+     */\n+    @Override\n+    public List<E> getConfirmed() {\n+        return (List<E>) super.getConfirmed();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests bounds checking for {@link List#add(int, Object)} on an\n+     *  empty list.\n+     */\n+    public void testListAddByIndexBoundsChecking() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        List<E> list;\n+        E element = getOtherElements()[0];\n+\n+        try {\n+            list = makeObject();\n+            list.add(Integer.MIN_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeObject();\n+            list.add(-1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeObject();\n+            list.add(1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeObject();\n+            list.add(Integer.MAX_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#add(int, Object)} on a\n+     *  full list.\n+     */\n+    public void testListAddByIndexBoundsChecking2() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        List<E> list;\n+        E element = getOtherElements()[0];\n+\n+        try {\n+            list = makeFullCollection();\n+            list.add(Integer.MIN_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeFullCollection();\n+            list.add(-1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeFullCollection();\n+            list.add(list.size() + 1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [size + 1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeFullCollection();\n+            list.add(Integer.MAX_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#add(int,Object)}.\n+     */\n+    public void testListAddByIndex() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        E element = getOtherElements()[0];\n+        int max = getFullElements().length;\n+\n+        for (int i = 0; i <= max; i++) {\n+            resetFull();\n+            getCollection().add(i, element);\n+            getConfirmed().add(i, element);\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#equals(Object)}.\n+     */\n+    public void testListEquals() {\n+        resetEmpty();\n+        List<E> list = getCollection();\n+        assertEquals(\"Empty lists should be equal\", true, list.equals(getConfirmed()));\n+        verify();\n+        assertEquals(\"Empty list should equal self\", true, list.equals(list));\n+        verify();\n+\n+        List<E> list2 = Arrays.asList(getFullElements());\n+        assertEquals(\"Empty list shouldn't equal full\", false, list.equals(list2));\n+        verify();\n+\n+        list2 = Arrays.asList(getOtherElements());\n+        assertEquals(\"Empty list shouldn't equal other\", false, list.equals(list2));\n+        verify();\n+\n+        resetFull();\n+        list = getCollection();\n+        assertEquals(\"Full lists should be equal\", true, list.equals(getConfirmed()));\n+        verify();\n+        assertEquals(\"Full list should equal self\", true, list.equals(list));\n+        verify();\n+\n+        list2 = makeObject();\n+        assertEquals(\"Full list shouldn't equal empty\", false, list.equals(list2));\n+        verify();\n+\n+        list2 = Arrays.asList(getOtherElements());\n+        assertEquals(\"Full list shouldn't equal other\", false, list.equals(list2));\n+        verify();\n+\n+        list2 = Arrays.asList(getFullElements());\n+        if (list2.size() < 2 && isAddSupported()) {\n+            // main list is only size 1, so lets add other elements to get a better list\n+            list.addAll(Arrays.asList(getOtherElements()));\n+            getConfirmed().addAll(Arrays.asList(getOtherElements()));\n+            list2 = new ArrayList<E>(list2);\n+            list2.addAll(Arrays.asList(getOtherElements()));\n+        }\n+        if (list2.size() > 1) {\n+            Collections.reverse(list2);\n+            assertEquals(\n+                \"Full list shouldn't equal full list with same elements but different order\",\n+                false, list.equals(list2));\n+            verify();\n+        }\n+\n+        resetFull();\n+        list = getCollection();\n+        assertEquals(\"List shouldn't equal String\", false, list.equals(\"\"));\n+        verify();\n+\n+        final List<E> listForC = Arrays.asList(getFullElements());\n+        Collection<E> c = new AbstractCollection<E>() {\n+            @Override\n+            public int size() {\n+                return listForC.size();\n+            }\n+\n+            @Override\n+            public Iterator<E> iterator() {\n+                return listForC.iterator();\n+            }\n+        };\n+\n+        assertEquals(\"List shouldn't equal nonlist with same elements in same order\", false, list.equals(c));\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link List#hashCode()}.\n+     */\n+    public void testListHashCode() {\n+        resetEmpty();\n+        int hash1 = getCollection().hashCode();\n+        int hash2 = getConfirmed().hashCode();\n+        assertEquals(\"Empty lists should have equal hashCodes\", hash1, hash2);\n+        verify();\n+\n+        resetFull();\n+        hash1 = getCollection().hashCode();\n+        hash2 = getConfirmed().hashCode();\n+        assertEquals(\"Full lists should have equal hashCodes\", hash1, hash2);\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link List#get(int)}.\n+     */\n+    public void testListGetByIndex() {\n+        resetFull();\n+        List<E> list = getCollection();\n+        E[] elements = getFullElements();\n+        for (int i = 0; i < elements.length; i++) {\n+            assertEquals(\"List should contain correct elements\", elements[i], list.get(i));\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#get(int)} on an\n+     *  empty list.\n+     */\n+    public void testListGetByIndexBoundsChecking() {\n+        List<E> list = makeObject();\n+\n+        try {\n+            list.get(Integer.MIN_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(-1);\n+            fail(\"List.get should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(0);\n+            fail(\"List.get should throw IndexOutOfBoundsException [0]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(1);\n+            fail(\"List.get should throw IndexOutOfBoundsException [1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(Integer.MAX_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#get(int)} on a\n+     *  full list.\n+     */\n+    public void testListGetByIndexBoundsChecking2() {\n+        List<E> list = makeFullCollection();\n+\n+        try {\n+            list.get(Integer.MIN_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(-1);\n+            fail(\"List.get should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(getFullElements().length);\n+            fail(\"List.get should throw IndexOutOfBoundsException [size]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(Integer.MAX_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#indexOf}.\n+     */\n+    public void testListIndexOf() {\n+        resetFull();\n+        List<E> list1 = getCollection();\n+        List<E> list2 = getConfirmed();\n+\n+        Iterator<E> iterator = list2.iterator();\n+        while (iterator.hasNext()) {\n+            Object element = iterator.next();\n+            assertEquals(\"indexOf should return correct result\",\n+                list1.indexOf(element), list2.indexOf(element));\n+            verify();\n+        }\n+\n+        E[] other = getOtherElements();\n+        for (int i = 0; i < other.length; i++) {\n+            assertEquals(\"indexOf should return -1 for nonexistent element\",\n+                -1, list1.indexOf(other[i]));\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#lastIndexOf}.\n+     */\n+    public void testListLastIndexOf() {\n+        resetFull();\n+        List<E> list1 = getCollection();\n+        List<E> list2 = getConfirmed();\n+\n+        Iterator<E> iterator = list2.iterator();\n+        while (iterator.hasNext()) {\n+            E element = iterator.next();\n+            assertEquals(\"lastIndexOf should return correct result\",\n+              list1.lastIndexOf(element), list2.lastIndexOf(element));\n+            verify();\n+        }\n+\n+        E[] other = getOtherElements();\n+        for (int i = 0; i < other.length; i++) {\n+            assertEquals(\"lastIndexOf should return -1 for nonexistent \" +\n+                \"element\", -1, list1.lastIndexOf(other[i]));\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#set(int,Object)} on an\n+     *  empty list.\n+     */\n+    public void testListSetByIndexBoundsChecking() {\n+        if (!isSetSupported()) {\n+            return;\n+        }\n+\n+        List<E> list = makeObject();\n+        E element = getOtherElements()[0];\n+\n+        try {\n+            list.set(Integer.MIN_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(-1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(0, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [0]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(Integer.MAX_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests bounds checking for {@link List#set(int,Object)} on a\n+     *  full list.\n+     */\n+    public void testListSetByIndexBoundsChecking2() {\n+        if (!isSetSupported()) return;\n+\n+        List<E> list = makeFullCollection();\n+        E element = getOtherElements()[0];\n+\n+        try {\n+            list.set(Integer.MIN_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(-1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(getFullElements().length, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [size]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(Integer.MAX_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    /**\n+     *  Test {@link List#set(int,Object)}.\n+     */\n+    public void testListSetByIndex() {\n+        if (!isSetSupported()) return;\n+\n+        resetFull();\n+        E[] elements = getFullElements();\n+        E[] other = getOtherElements();\n+\n+        for (int i = 0; i < elements.length; i++) {\n+            E n = other[i % other.length];\n+            E v = (getCollection()).set(i, n);\n+            assertEquals(\"Set should return correct element\", elements[i], v);\n+            (getConfirmed()).set(i, n);\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  If {@link #isSetSupported()} returns false, tests that set operation\n+     *  raises <Code>UnsupportedOperationException.\n+     */\n+    public void testUnsupportedSet() {\n+        if (isSetSupported()) return;\n+\n+        resetFull();\n+        try {\n+            (getCollection()).set(0, getFullElements()[0]);\n+            fail(\"Emtpy collection should not support set.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        // make sure things didn't change even if the expected exception was\n+        // thrown.\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#remove(int)} on an\n+     *  empty list.\n+     */\n+    public void testListRemoveByIndexBoundsChecking() {\n+        if (!isRemoveSupported()) return;\n+\n+        List<E> list = makeObject();\n+\n+        try {\n+            list.remove(Integer.MIN_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.remove(-1);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.remove(0);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [0]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.remove(1);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.remove(Integer.MAX_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#remove(int)} on a\n+     *  full list.\n+     */\n+    public void testListRemoveByIndexBoundsChecking2() {\n+        if (!isRemoveSupported()) return;\n+\n+        List<E> list = makeFullCollection();\n+\n+        try {\n+            list.remove(Integer.MIN_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.remove(-1);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.remove(getFullElements().length);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [size]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.remove(Integer.MAX_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests {@link List#remove(int)}.\n+     */\n+    public void testListRemoveByIndex() {\n+        if (!isRemoveSupported()) return;\n+\n+        int max = getFullElements().length;\n+        for (int i = 0; i < max; i++) {\n+            resetFull();\n+            E o1 = (getCollection()).remove(i);\n+            E o2 = (getConfirmed()).remove(i);\n+            assertEquals(\"remove should return correct element\", o1, o2);\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests the read-only bits of {@link List#listIterator()}.\n+     */\n+    public void testListListIterator() {\n+        resetFull();\n+        forwardTest(getCollection().listIterator(), 0);\n+        backwardTest(getCollection().listIterator(), 0);\n+    }\n+\n+    /**\n+     *  Tests the read-only bits of {@link List#listIterator(int)}.\n+     */\n+    public void testListListIteratorByIndex() {\n+        resetFull();\n+        try {\n+            getCollection().listIterator(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        resetFull();\n+        try {\n+            getCollection().listIterator(getCollection().size() + 1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        resetFull();\n+        for (int i = 0; i <= getConfirmed().size(); i++) {\n+            forwardTest(getCollection().listIterator(i), i);\n+            backwardTest(getCollection().listIterator(i), i);\n+        }\n+        resetFull();\n+        for (int i = 0; i <= getConfirmed().size(); i++) {\n+            backwardTest(getCollection().listIterator(i), i);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests remove on list iterator is correct.\n+     */\n+    public void testListListIteratorPreviousRemoveNext() {\n+        if (isRemoveSupported() == false) return;\n+        resetFull();\n+        if (getCollection().size() < 4) return;\n+        ListIterator<E> it = getCollection().listIterator();\n+        E zero = it.next();\n+        E one = it.next();\n+        E two = it.next();\n+        E two2 = it.previous();\n+        E one2 = it.previous();\n+        assertEquals(one, one2);\n+        assertEquals(two, two2);\n+        assertEquals(zero, getCollection().get(0));\n+        assertEquals(one, getCollection().get(1));\n+        assertEquals(two, getCollection().get(2));\n+\n+        it.remove(); // removed element at index 1 (one)\n+        assertEquals(zero, getCollection().get(0));\n+        assertEquals(two, getCollection().get(1));\n+        E two3 = it.next();  // do next after remove\n+        assertEquals(two, two3);\n+        assertEquals(getCollection().size() > 2, it.hasNext());\n+        assertEquals(true, it.hasPrevious());\n+    }\n+\n+    /**\n+     * Tests remove on list iterator is correct.\n+     */\n+    public void testListListIteratorPreviousRemovePrevious() {\n+        if (isRemoveSupported() == false) return;\n+        resetFull();\n+        if (getCollection().size() < 4) return;\n+        ListIterator<E> it = getCollection().listIterator();\n+        E zero = it.next();\n+        E one = it.next();\n+        E two = it.next();\n+        E two2 = it.previous();\n+        E one2 = it.previous();\n+        assertEquals(one, one2);\n+        assertEquals(two, two2);\n+        assertEquals(zero, getCollection().get(0));\n+        assertEquals(one, getCollection().get(1));\n+        assertEquals(two, getCollection().get(2));\n+\n+        it.remove(); // removed element at index 1 (one)\n+        assertEquals(zero, getCollection().get(0));\n+        assertEquals(two, getCollection().get(1));\n+        E zero3 = it.previous();  // do previous after remove\n+        assertEquals(zero, zero3);\n+        assertEquals(false, it.hasPrevious());\n+        assertEquals(getCollection().size() > 2, it.hasNext());\n+    }\n+\n+    /**\n+     * Tests remove on list iterator is correct.\n+     */\n+    public void testListListIteratorNextRemoveNext() {\n+        if (isRemoveSupported() == false) return;\n+        resetFull();\n+        if (getCollection().size() < 4) return;\n+        ListIterator<E> it = getCollection().listIterator();\n+        E zero = it.next();\n+        E one = it.next();\n+        E two = it.next();\n+        assertEquals(zero, getCollection().get(0));\n+        assertEquals(one, getCollection().get(1));\n+        assertEquals(two, getCollection().get(2));\n+        E three = getCollection().get(3);\n+\n+        it.remove(); // removed element at index 2 (two)\n+        assertEquals(zero, getCollection().get(0));\n+        assertEquals(one, getCollection().get(1));\n+        E three2 = it.next();  // do next after remove\n+        assertEquals(three, three2);\n+        assertEquals(getCollection().size() > 3, it.hasNext());\n+        assertEquals(true, it.hasPrevious());\n+    }\n+\n+    /**\n+     * Tests remove on list iterator is correct.\n+     */\n+    public void testListListIteratorNextRemovePrevious() {\n+        if (isRemoveSupported() == false) return;\n+        resetFull();\n+        if (getCollection().size() < 4) return;\n+        ListIterator<E> it = getCollection().listIterator();\n+        E zero = it.next();\n+        E one = it.next();\n+        E two = it.next();\n+        assertEquals(zero, getCollection().get(0));\n+        assertEquals(one, getCollection().get(1));\n+        assertEquals(two, getCollection().get(2));\n+\n+        it.remove(); // removed element at index 2 (two)\n+        assertEquals(zero, getCollection().get(0));\n+        assertEquals(one, getCollection().get(1));\n+        E one2 = it.previous();  // do previous after remove\n+        assertEquals(one, one2);\n+        assertEquals(true, it.hasNext());\n+        assertEquals(true, it.hasPrevious());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Traverses to the end of the given iterator.\n+     *\n+     *  @param iter  the iterator to traverse\n+     *  @param i     the starting index\n+     */\n+    private void forwardTest(ListIterator<E> iter, int i) {\n+        List<E> list = getCollection();\n+        int max = getFullElements().length;\n+\n+        while (i < max) {\n+            assertTrue(\"Iterator should have next\", iter.hasNext());\n+            assertEquals(\"Iterator.nextIndex should work\",\n+                i, iter.nextIndex());\n+            assertEquals(\"Iterator.previousIndex should work\",\n+                i - 1, iter.previousIndex());\n+            Object o = iter.next();\n+            assertEquals(\"Iterator returned correct element\", list.get(i), o);\n+            i++;\n+        }\n+\n+        assertTrue(\"Iterator shouldn't have next\", !iter.hasNext());\n+        assertEquals(\"nextIndex should be size\", max, iter.nextIndex());\n+        assertEquals(\"previousIndex should be size - 1\", max - 1, iter.previousIndex());\n+\n+        try {\n+            iter.next();\n+            fail(\"Exhausted iterator should raise NoSuchElement\");\n+        } catch (NoSuchElementException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Traverses to the beginning of the given iterator.\n+     *\n+     *  @param iter  the iterator to traverse\n+     *  @param i     the starting index\n+     */\n+    private void backwardTest(ListIterator<E> iter, int i) {\n+        List<E> list = getCollection();\n+\n+        while (i > 0) {\n+            assertTrue(\"Iterator should have previous, i:\" + i,\n+                iter.hasPrevious());\n+            assertEquals(\"Iterator.nextIndex should work, i:\" + i,\n+                i, iter.nextIndex());\n+            assertEquals(\"Iterator.previousIndex should work, i:\" + i,\n+                i - 1, iter.previousIndex());\n+            E o = iter.previous();\n+            assertEquals(\"Iterator returned correct element\",\n+                list.get(i - 1), o);\n+            i--;\n+        }\n+\n+        assertTrue(\"Iterator shouldn't have previous\", !iter.hasPrevious());\n+        int nextIndex = iter.nextIndex();\n+        assertEquals(\"nextIndex should be 0\", 0, nextIndex);\n+        int prevIndex = iter.previousIndex();\n+        assertEquals(\"previousIndex should be -1\", -1, prevIndex);\n+\n+        try {\n+            iter.previous();\n+            fail(\"Exhausted iterator should raise NoSuchElement\");\n+        } catch (NoSuchElementException e) {\n+            // expected\n+        }\n+\n+    }\n+\n+\n+    /**\n+     *  Tests the {@link ListIterator#add(Object)} method of the list\n+     *  iterator.\n+     */\n+    public void testListIteratorAdd() {\n+        if (!isAddSupported()) return;\n+\n+        resetEmpty();\n+        List<E> list1 = getCollection();\n+        List<E> list2 = getConfirmed();\n+\n+        E[] elements = getFullElements();\n+        ListIterator<E> iter1 = list1.listIterator();\n+        ListIterator<E> iter2 = list2.listIterator();\n+\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.add(elements[i]);\n+            iter2.add(elements[i]);\n+            verify();\n+        }\n+\n+        resetFull();\n+        iter1 = getCollection().listIterator();\n+        iter2 = getConfirmed().listIterator();\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.next();\n+            iter2.next();\n+            iter1.add(elements[i]);\n+            iter2.add(elements[i]);\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests the {@link ListIterator#set(Object)} method of the list\n+     *  iterator.\n+     */\n+    public void testListIteratorSet() {\n+        if (!isSetSupported()) return;\n+\n+        E[] elements = getFullElements();\n+\n+        resetFull();\n+        ListIterator<E> iter1 = getCollection().listIterator();\n+        ListIterator<E> iter2 = getConfirmed().listIterator();\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.next();\n+            iter2.next();\n+            iter1.set(elements[i]);\n+            iter2.set(elements[i]);\n+            verify();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testEmptyListSerialization() throws IOException, ClassNotFoundException {\n+        List<E> list = makeObject();\n+        if (!(list instanceof Serializable && isTestSerialization())) return;\n+\n+        byte[] objekt = writeExternalFormToBytes((Serializable) list);\n+        List<E> list2 = (List<E>) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Both lists are empty\", 0, list.size());\n+        assertEquals(\"Both lists are empty\", 0, list2.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testFullListSerialization() throws IOException, ClassNotFoundException {\n+        List<E> list = makeFullCollection();\n+        int size = getFullElements().length;\n+        if (!(list instanceof Serializable && isTestSerialization())) return;\n+\n+        byte[] objekt = writeExternalFormToBytes((Serializable) list);\n+        List<E> list2 = (List<E>) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Both lists are same size\", size, list.size());\n+        assertEquals(\"Both lists are same size\", size, list2.size());\n+    }\n+\n+    /**\n+     * Skip the serialized canonical tests for now.\n+     *\n+     * @return true\n+     *\n+     * TODO: store new serialized objects in CVS.\n+     */\n+    @Override\n+    protected boolean skipSerializedCanonicalTests() {\n+        return true;\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the List\n+     * against the canonical version in SVN.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testEmptyListCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        List list = makeEmptyList();\n+        if (!(list instanceof Serializable)) return;\n+\n+        writeExternalFormToDisk((Serializable) list, getCanonicalEmptyCollectionName(list));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        List<E> list = makeObject();\n+        if (list instanceof Serializable && !skipSerializedCanonicalTests()\n+                && isTestSerialization()) {\n+            List<E> list2 = (List<E>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(list));\n+            assertEquals(\"List is empty\", 0, list2.size());\n+            assertEquals(list, list2);\n+        }\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the List\n+     * against the canonical version in SVN.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testFullListCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        List list = makeFullList();\n+        if (!(list instanceof Serializable)) return;\n+\n+        writeExternalFormToDisk((Serializable) list, getCanonicalFullCollectionName(list));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        List<E> list = makeFullCollection();\n+        if(list instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n+            List<E> list2 = (List<E>) readExternalFormFromDisk(getCanonicalFullCollectionName(list));\n+            if (list2.size() == 4) {\n+                // old serialized tests\n+                return;\n+            }\n+            assertEquals(\"List is the right size\",list.size(), list2.size());\n+            assertEquals(list, list2);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns a {@link BulkTest} for testing {@link List#subList(int,int)}.\n+     *  The returned bulk test will run through every <code>TestList</code>\n+     *  method, <i>including</i> another <code>bulkTestSubList</code>.\n+     *  Sublists are tested until the size of the sublist is less than 10.\n+     *  Each sublist is 6 elements smaller than its parent list.\n+     *  (By default this means that two rounds of sublists will be tested).\n+     *  The verify() method is overloaded to test that the original list is\n+     *  modified when the sublist is.\n+     */\n+    public BulkTest bulkTestSubList() {\n+        if (getFullElements().length - 6 < 10) return null;\n+        return new BulkTestSubList<E>(this);\n+    }\n+\n+   public static class BulkTestSubList<E> extends AbstractListTest<E> {\n+\n+       private AbstractListTest<E> outer;\n+\n+       public BulkTestSubList(AbstractListTest<E> outer) {\n+           super(\"\");\n+           this.outer = outer;\n+       }\n+\n+       @Override\n+       @SuppressWarnings(\"unchecked\")\n+       public E[] getFullElements() {\n+           List<E> l = Arrays.asList(outer.getFullElements());\n+           return (E[]) l.subList(3, l.size() - 3).toArray();\n+       }\n+\n+       @Override\n+       public E[] getOtherElements() {\n+           return outer.getOtherElements();\n+       }\n+\n+       @Override\n+       public boolean isAddSupported() {\n+           return outer.isAddSupported();\n+       }\n+\n+       @Override\n+       public boolean isSetSupported() {\n+           return outer.isSetSupported();\n+       }\n+\n+       @Override\n+       public boolean isRemoveSupported() {\n+           return outer.isRemoveSupported();\n+       }\n+\n+       @Override\n+       public List<E> makeObject() {\n+           return outer.makeFullCollection().subList(4, 4);\n+       }\n+\n+       @Override\n+       public List<E> makeFullCollection() {\n+           int size = getFullElements().length;\n+           return outer.makeFullCollection().subList(3, size - 3);\n+       }\n+\n+       @Override\n+       public void resetEmpty() {\n+           outer.resetFull();\n+           this.setCollection(outer.getCollection().subList(4, 4));\n+           this.setConfirmed(outer.getConfirmed().subList(4, 4));\n+       }\n+\n+       @Override\n+       public void resetFull() {\n+           outer.resetFull();\n+           int size = outer.getConfirmed().size();\n+           this.setCollection(outer.getCollection().subList(3, size - 3));\n+           this.setConfirmed(outer.getConfirmed().subList(3, size - 3));\n+       }\n+\n+       @Override\n+       public void verify() {\n+           super.verify();\n+           outer.verify();\n+       }\n+\n+       @Override\n+       public boolean isTestSerialization() {\n+           return false;\n+       }\n+   }\n+\n+   /**\n+    *  Tests that a sublist raises a {@link java.util.ConcurrentModificationException ConcurrentModificationException}\n+    *  if elements are added to the original list.\n+    */\n+   public void testListSubListFailFastOnAdd() {\n+       if (!isFailFastSupported()) return;\n+       if (!isAddSupported()) return;\n+\n+       resetFull();\n+       int size = getCollection().size();\n+       List<E> sub = getCollection().subList(1, size);\n+       getCollection().add(getOtherElements()[0]);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getCollection().subList(1, size);\n+       getCollection().add(0, getOtherElements()[0]);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getCollection().subList(1, size);\n+       getCollection().addAll(Arrays.asList(getOtherElements()));\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getCollection().subList(1, size);\n+       getCollection().addAll(0, Arrays.asList(getOtherElements()));\n+       failFastAll(sub);\n+   }\n+\n+   /**\n+    *  Tests that a sublist raises a {@link java.util.ConcurrentModificationException ConcurrentModificationException}\n+    *  if elements are removed from the original list.\n+    */\n+   public void testListSubListFailFastOnRemove() {\n+       if (!isFailFastSupported()) return;\n+       if (!isRemoveSupported()) return;\n+\n+       resetFull();\n+       int size = getCollection().size();\n+       List<E> sub = getCollection().subList(1, size);\n+       getCollection().remove(0);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getCollection().subList(1, size);\n+       getCollection().remove(getFullElements()[2]);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getCollection().subList(1, size);\n+       getCollection().removeAll(Arrays.asList(getFullElements()));\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getCollection().subList(1, size);\n+       getCollection().retainAll(Arrays.asList(getOtherElements()));\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getCollection().subList(1, size);\n+       getCollection().clear();\n+       failFastAll(sub);\n+   }\n+\n+   /**\n+    *  Invokes all the methods on the given sublist to make sure they raise\n+    *  a {@link java.util.ConcurrentModificationException ConcurrentModificationException}.\n+    */\n+   protected void failFastAll(List<E> list) {\n+       Method[] methods = List.class.getMethods();\n+       for (int i = 0; i < methods.length; i++) {\n+           failFastMethod(list, methods[i]);\n+       }\n+   }\n+\n+   /**\n+    *  Invokes the given method on the given sublist to make sure it raises\n+    *  a {@link java.util.ConcurrentModificationException ConcurrentModificationException}.\n+    *\n+    *  Unless the method happens to be the equals() method, in which case\n+    *  the test is skipped.  There seems to be a bug in\n+    *  java.util.AbstractList.subList(int,int).equals(Object) -- it never\n+    *  raises a ConcurrentModificationException.\n+    *\n+    *  @param list  the sublist to test\n+    *  @param m     the method to invoke\n+    */\n+   protected void failFastMethod(List<E> list, Method m) {\n+       if (m.getName().equals(\"equals\")) return;\n+\n+       E element = getOtherElements()[0];\n+       Collection<E> c = Collections.singleton(element);\n+\n+       Class<?>[] types = m.getParameterTypes();\n+       Object[] params = new Object[types.length];\n+       for (int i = 0; i < params.length; i++) {\n+           if (types[i] == Integer.TYPE) params[i] = new Integer(0);\n+           else if (types[i] == Collection.class) params[i] = c;\n+           else if (types[i] == Object.class) params[i] = element;\n+           else if (types[i] == Object[].class) params[i] = new Object[0];\n+       }\n+\n+       try {\n+           m.invoke(list, params);\n+           fail(m.getName() + \" should raise ConcurrentModification\");\n+       } catch (IllegalAccessException e) {\n+           // impossible\n+       } catch (InvocationTargetException e) {\n+           Throwable t = e.getTargetException();\n+           if (t instanceof ConcurrentModificationException) {\n+               // expected\n+               return;\n+           } else {\n+               fail(m.getName() + \" raised unexpected \" + e);\n+           }\n+       }\n+   }\n+\n+   //-----------------------------------------------------------------------\n+   public BulkTest bulkTestListIterator() {\n+       return new TestListIterator();\n+   }\n+\n+   public class TestListIterator extends AbstractTestListIterator<E> {\n+       public TestListIterator() {\n+           super(\"TestListIterator\");\n+       }\n+\n+       @Override\n+       public E addSetValue() {\n+           return AbstractListTest.this.getOtherElements()[0];\n+       }\n+\n+       @Override\n+       public boolean supportsRemove() {\n+           return AbstractListTest.this.isRemoveSupported();\n+       }\n+\n+       @Override\n+       public boolean supportsAdd() {\n+           return AbstractListTest.this.isAddSupported();\n+       }\n+\n+       @Override\n+       public boolean supportsSet() {\n+           return AbstractListTest.this.isSetSupported();\n+       }\n+\n+       @Override\n+       public ListIterator<E> makeEmptyIterator() {\n+           resetEmpty();\n+           return AbstractListTest.this.getCollection().listIterator();\n+       }\n+\n+       @Override\n+       public ListIterator<E> makeObject() {\n+           resetFull();\n+           return AbstractListTest.this.getCollection().listIterator();\n+       }\n+   }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/CursorableLinkedListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.ConcurrentModificationException;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Test class.\n+ *\n+ * @version $Revision$\n+ *\n+ * @author Rodney Waldhoff\n+ * @author Simon Kitching\n+ */\n+public class CursorableLinkedListTest<E> extends AbstractLinkedListTest<E> {\n+    public CursorableLinkedListTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(CursorableLinkedListTest.class);\n+    }\n+\n+    private CursorableLinkedList<E> list;\n+\n+    @Override\n+    public void setUp() {\n+        list = new CursorableLinkedList<E>();\n+    }\n+\n+    @Override\n+    public CursorableLinkedList<E> makeObject() {\n+        return new CursorableLinkedList<E>();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testAdd() {\n+        assertEquals(\"[]\",list.toString());\n+        assertTrue(list.add((E) new Integer(1)));\n+        assertEquals(\"[1]\",list.toString());\n+        assertTrue(list.add((E) new Integer(2)));\n+        assertEquals(\"[1, 2]\",list.toString());\n+        assertTrue(list.add((E) new Integer(3)));\n+        assertEquals(\"[1, 2, 3]\",list.toString());\n+        assertTrue(list.addFirst((E) new Integer(0)));\n+        assertEquals(\"[0, 1, 2, 3]\",list.toString());\n+        assertTrue(list.addLast((E) new Integer(4)));\n+        assertEquals(\"[0, 1, 2, 3, 4]\",list.toString());\n+        list.add(0,(E) new Integer(-2));\n+        assertEquals(\"[-2, 0, 1, 2, 3, 4]\",list.toString());\n+        list.add(1,(E) new Integer(-1));\n+        assertEquals(\"[-2, -1, 0, 1, 2, 3, 4]\",list.toString());\n+        list.add(7,(E) new Integer(5));\n+        assertEquals(\"[-2, -1, 0, 1, 2, 3, 4, 5]\",list.toString());\n+\n+        java.util.List<E> list2 = new java.util.LinkedList<E>();\n+        list2.add((E) \"A\");\n+        list2.add((E) \"B\");\n+        list2.add((E) \"C\");\n+\n+        assertTrue(list.addAll(list2));\n+        assertEquals(\"[-2, -1, 0, 1, 2, 3, 4, 5, A, B, C]\",list.toString());\n+        assertTrue(list.addAll(3,list2));\n+        assertEquals(\"[-2, -1, 0, A, B, C, 1, 2, 3, 4, 5, A, B, C]\",list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testClear() {\n+        assertEquals(0,list.size());\n+        assertTrue(list.isEmpty());\n+        list.clear();\n+        assertEquals(0,list.size());\n+        assertTrue(list.isEmpty());\n+\n+        list.add((E) \"element\");\n+        assertEquals(1,list.size());\n+        assertTrue(!list.isEmpty());\n+\n+        list.clear();\n+        assertEquals(0,list.size());\n+        assertTrue(list.isEmpty());\n+\n+        list.add((E) \"element1\");\n+        list.add((E) \"element2\");\n+        assertEquals(2,list.size());\n+        assertTrue(!list.isEmpty());\n+\n+        list.clear();\n+        assertEquals(0,list.size());\n+        assertTrue(list.isEmpty());\n+\n+        for (int i = 0; i < 1000; i++) {\n+            list.add((E) new Integer(i));\n+        }\n+        assertEquals(1000, list.size());\n+        assertTrue(!list.isEmpty());\n+\n+        list.clear();\n+        assertEquals(0,list.size());\n+        assertTrue(list.isEmpty());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testContains() {\n+        assertTrue(!list.contains(\"A\"));\n+        assertTrue(list.add((E) \"A\"));\n+        assertTrue(list.contains(\"A\"));\n+        assertTrue(list.add((E) \"B\"));\n+        assertTrue(list.contains(\"A\"));\n+        assertTrue(list.addFirst((E) \"a\"));\n+        assertTrue(list.contains(\"A\"));\n+        assertTrue(list.remove(\"a\"));\n+        assertTrue(list.contains(\"A\"));\n+        assertTrue(list.remove(\"A\"));\n+        assertTrue(!list.contains(\"A\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testContainsAll() {\n+        assertTrue(list.containsAll(list));\n+        java.util.List<E> list2 = new java.util.LinkedList<E>();\n+        assertTrue(list.containsAll(list2));\n+        list2.add((E) \"A\");\n+        assertTrue(!list.containsAll(list2));\n+        list.add((E) \"B\");\n+        list.add((E) \"A\");\n+        assertTrue(list.containsAll(list2));\n+        list2.add((E) \"B\");\n+        assertTrue(list.containsAll(list2));\n+        list2.add((E) \"C\");\n+        assertTrue(!list.containsAll(list2));\n+        list.add((E) \"C\");\n+        assertTrue(list.containsAll(list2));\n+        list2.add((E) \"C\");\n+        assertTrue(list.containsAll(list2));\n+        assertTrue(list.containsAll(list));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCursorNavigation() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        CursorableLinkedList.Cursor<E> it = list.cursor();\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n+        assertEquals(\"1\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"1\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n+        assertEquals(\"1\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"2\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"2\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"2\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"3\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"4\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"5\", it.next());\n+        assertTrue(!it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"5\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"4\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"3\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"2\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(\"1\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n+        it.close();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCursorSet() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> it = list.cursor();\n+        assertEquals(\"1\", it.next());\n+        it.set((E) \"a\");\n+        assertEquals(\"a\", it.previous());\n+        it.set((E) \"A\");\n+        assertEquals(\"A\", it.next());\n+        assertEquals(\"2\", it.next());\n+        it.set((E) \"B\");\n+        assertEquals(\"3\", it.next());\n+        assertEquals(\"4\", it.next());\n+        it.set((E) \"D\");\n+        assertEquals(\"5\", it.next());\n+        it.set((E) \"E\");\n+        assertEquals(\"[A, B, 3, D, E]\", list.toString());\n+        it.close();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCursorRemove() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> it = list.cursor();\n+        try {\n+            it.remove();\n+            fail();\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+        assertEquals(\"1\", it.next());\n+        assertEquals(\"2\", it.next());\n+        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n+        it.remove();\n+        assertEquals(\"[1, 3, 4, 5]\", list.toString());\n+        assertEquals(\"3\", it.next());\n+        assertEquals(\"3\", it.previous());\n+        assertEquals(\"1\", it.previous());\n+        it.remove();\n+        assertEquals(\"[3, 4, 5]\", list.toString());\n+        assertTrue(!it.hasPrevious());\n+        assertEquals(\"3\", it.next());\n+        it.remove();\n+        assertEquals(\"[4, 5]\", list.toString());\n+        try {\n+            it.remove();\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+        assertEquals(\"4\", it.next());\n+        assertEquals(\"5\", it.next());\n+        it.remove();\n+        assertEquals(\"[4]\", list.toString());\n+        assertEquals(\"4\", it.previous());\n+        it.remove();\n+        assertEquals(\"[]\", list.toString());\n+        it.close();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCursorAdd() {\n+        CursorableLinkedList.Cursor<E> it = list.cursor();\n+        it.add((E) \"1\");\n+        assertEquals(\"[1]\", list.toString());\n+        it.add((E) \"3\");\n+        assertEquals(\"[1, 3]\", list.toString());\n+        it.add((E) \"5\");\n+        assertEquals(\"[1, 3, 5]\", list.toString());\n+        assertEquals(\"5\", it.previous());\n+        it.add((E) \"4\");\n+        assertEquals(\"[1, 3, 4, 5]\", list.toString());\n+        assertEquals(\"4\", it.previous());\n+        assertEquals(\"3\", it.previous());\n+        it.add((E) \"2\");\n+        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n+        it.close();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCursorConcurrentModification() {\n+        // this test verifies that cursors remain valid when the list\n+        // is modified via other means.\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+        list.add((E) \"7\");\n+        list.add((E) \"9\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        CursorableLinkedList.Cursor<E> c2 = list.cursor();\n+        Iterator<E> li = list.iterator();\n+\n+        // test cursors remain valid when list modified by std Iterator\n+        // test cursors skip elements removed via ListIterator\n+        assertEquals(\"1\", li.next());\n+        assertEquals(\"2\", li.next());\n+        li.remove();\n+        assertEquals(\"3\", li.next());\n+        assertEquals(\"1\", c1.next());\n+        assertEquals(\"3\", c1.next());\n+        assertEquals(\"1\", c2.next());\n+\n+        // test cursor c1 can remove elements from previously modified list\n+        // test cursor c2 skips elements removed via different cursor\n+        c1.remove();\n+        assertEquals(\"5\", c2.next());\n+        c2.add((E) \"6\");\n+        assertEquals(\"5\", c1.next());\n+        assertEquals(\"6\", c1.next());\n+        assertEquals(\"7\", c1.next());\n+\n+        // test cursors remain valid when list mod via CursorableLinkedList\n+        // test cursor remains valid when elements inserted into list before\n+        // the current position of the cursor.\n+        list.add(0, (E) \"0\");\n+\n+        // test cursor remains valid when element inserted immediately after\n+        // current element of a cursor, and the element is seen on the\n+        // next call to the next method of that cursor.\n+        list.add(5, (E) \"8\");\n+\n+        assertEquals(\"8\", c1.next());\n+        assertEquals(\"9\", c1.next());\n+        c1.add((E) \"10\");\n+        assertEquals(\"7\", c2.next());\n+        assertEquals(\"8\", c2.next());\n+        assertEquals(\"9\", c2.next());\n+        assertEquals(\"10\", c2.next());\n+\n+        try {\n+            c2.next();\n+            fail();\n+        } catch (NoSuchElementException nse) {\n+        }\n+\n+        try {\n+            li.next();\n+            fail();\n+        } catch (ConcurrentModificationException cme) {\n+        }\n+\n+        c1.close(); // not necessary\n+        c2.close(); // not necessary\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCursorNextIndexMid() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        Iterator<E> li = list.iterator();\n+\n+        // test cursors remain valid when list modified by std Iterator\n+        // test cursors skip elements removed via ListIterator\n+        assertEquals(\"1\", li.next());\n+        assertEquals(\"2\", li.next());\n+        li.remove();\n+        assertEquals(0, c1.nextIndex());\n+        assertEquals(\"1\", c1.next());\n+        assertEquals(1, c1.nextIndex());\n+        assertEquals(\"3\", c1.next());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCursorNextIndexFirst() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+\n+        assertEquals(0, c1.nextIndex());\n+        list.remove(0);\n+        assertEquals(0, c1.nextIndex());\n+        assertEquals(\"2\", c1.next());\n+        assertEquals(1, c1.nextIndex());\n+        assertEquals(\"3\", c1.next());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCursorNextIndexAddBefore() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+\n+        assertEquals(0, c1.nextIndex());\n+        assertEquals(\"1\", c1.next());\n+        list.add(0, (E) \"0\");\n+        assertEquals(2, c1.nextIndex());\n+        assertEquals(\"2\", c1.next());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCursorNextIndexAddNext() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+\n+        assertEquals(0, c1.nextIndex());\n+        list.add(0, (E) \"0\");\n+        assertEquals(0, c1.nextIndex());\n+        assertEquals(\"0\", c1.next());\n+        assertEquals(1, c1.nextIndex());\n+        assertEquals(\"1\", c1.next());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCursorNextIndexAddAfter() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"5\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+\n+        assertEquals(0, c1.nextIndex());\n+        list.add(1, (E) \"0\");\n+        assertEquals(0, c1.nextIndex());\n+        assertEquals(\"1\", c1.next());\n+        assertEquals(1, c1.nextIndex());\n+        assertEquals(\"0\", c1.next());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextPreviousRemoveIndex1ByList() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+        assertEquals(\"B\", c1.previous());\n+\n+        assertEquals(\"B\", list.remove(1));\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(true, c1.currentRemovedByAnother);\n+        assertEquals(null, c1.current);\n+        assertEquals(\"C\", c1.next.value);\n+\n+        assertEquals(\"[A, C]\", list.toString());\n+        c1.remove();  // works ok\n+        assertEquals(\"[A, C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextRemoveIndex1ByList() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+\n+        assertEquals(\"B\", list.remove(1));\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(false, c1.currentRemovedByAnother);\n+        assertEquals(\"A\", c1.current.value);\n+        assertEquals(\"C\", c1.next.value);\n+\n+        assertEquals(\"[A, C]\", list.toString());\n+        c1.remove();  // works ok\n+        assertEquals(\"[C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextRemoveIndex1ByList() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+\n+        assertEquals(\"B\", list.remove(1));\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(true, c1.currentRemovedByAnother);\n+        assertEquals(null, c1.current);\n+        assertEquals(\"C\", c1.next.value);\n+\n+        assertEquals(\"[A, C]\", list.toString());\n+        c1.remove();  // works ok\n+        assertEquals(\"[A, C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextNextRemoveIndex1ByList() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+        assertEquals(\"C\", c1.next());\n+\n+        assertEquals(\"B\", list.remove(1));\n+\n+        assertEquals(false, c1.nextIndexValid);\n+        assertEquals(false, c1.currentRemovedByAnother);\n+        assertEquals(\"C\", c1.current.value);\n+        assertEquals(\"D\", c1.next.value);\n+\n+        assertEquals(\"[A, C, D]\", list.toString());\n+        c1.remove();  // works ok\n+        assertEquals(\"[A, D]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextPreviousRemoveByIterator() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+        assertEquals(\"B\", c1.previous());\n+\n+        c1.remove();\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(false, c1.currentRemovedByAnother);\n+        assertEquals(null, c1.current);\n+        assertEquals(\"C\", c1.next.value);\n+\n+        assertEquals(\"[A, C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextRemoveByIterator() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+\n+        c1.remove();\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(false, c1.currentRemovedByAnother);\n+        assertEquals(null, c1.current);\n+        assertEquals(\"C\", c1.next.value);\n+\n+        assertEquals(\"[A, C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextPreviousAddIndex1ByList() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+        assertEquals(\"B\", c1.previous());\n+\n+        list.add(1, (E) \"Z\");\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(\"B\", c1.current.value);\n+        assertEquals(\"Z\", c1.next.value);\n+\n+        assertEquals(\"[A, Z, B, C]\", list.toString());\n+        c1.remove();  // works ok\n+        assertEquals(\"[A, Z, C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextAddIndex1ByList() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+\n+        list.add(1, (E) \"Z\");\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(\"A\", c1.current.value);\n+        assertEquals(\"Z\", c1.next.value);\n+\n+        assertEquals(\"[A, Z, B, C]\", list.toString());\n+        c1.remove();  // works ok\n+        assertEquals(\"[Z, B, C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextAddIndex1ByList() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+\n+        list.add(1, (E) \"Z\");\n+\n+        assertEquals(false, c1.nextIndexValid);\n+        assertEquals(\"B\", c1.current.value);\n+        assertEquals(\"C\", c1.next.value);\n+\n+        assertEquals(\"[A, Z, B, C]\", list.toString());\n+        c1.remove();  // works ok\n+        assertEquals(\"[A, Z, C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextPreviousAddByIterator() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+        assertEquals(\"B\", c1.previous());\n+\n+        c1.add((E) \"Z\");\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(2, c1.nextIndex);\n+        assertEquals(null, c1.current);\n+        assertEquals(\"B\", c1.next.value);\n+\n+        assertEquals(\"[A, Z, B, C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextAddByIterator() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+\n+        c1.add((E) \"Z\");\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(3, c1.nextIndex);\n+        assertEquals(false, c1.currentRemovedByAnother);\n+        assertEquals(null, c1.current);\n+        assertEquals(\"C\", c1.next.value);\n+\n+        assertEquals(\"[A, B, Z, C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextRemoveByListSetByIterator() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+\n+        list.remove(1);\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(null, c1.current);\n+        assertEquals(\"C\", c1.next.value);\n+        assertEquals(\"[A, C]\", list.toString());\n+\n+        try {\n+            c1.set((E) \"Z\");\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextPreviousSetByIterator() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+        assertEquals(\"B\", c1.previous());\n+\n+        c1.set((E) \"Z\");\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(1, c1.nextIndex);\n+        assertEquals(\"Z\", c1.current.value);\n+        assertEquals(\"Z\", c1.next.value);\n+\n+        assertEquals(\"[A, Z, C]\", list.toString());\n+        c1.remove();  // works ok\n+        assertEquals(\"[A, C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInternalState_CursorNextNextSetByIterator() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+\n+        CursorableLinkedList.Cursor<E> c1 = list.cursor();\n+        assertEquals(\"A\", c1.next());\n+        assertEquals(\"B\", c1.next());\n+\n+        c1.set((E) \"Z\");\n+\n+        assertEquals(true, c1.nextIndexValid);\n+        assertEquals(2, c1.nextIndex);\n+        assertEquals(\"Z\", c1.current.value);\n+        assertEquals(\"C\", c1.next.value);\n+\n+        assertEquals(\"[A, Z, C]\", list.toString());\n+        c1.remove();  // works ok\n+        assertEquals(\"[A, C]\", list.toString());\n+        try {\n+            c1.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testEqualsAndHashCode() {\n+        assertTrue(list.equals(list));\n+        assertEquals(list.hashCode(),list.hashCode());\n+        list.add((E) \"A\");\n+        assertTrue(list.equals(list));\n+        assertEquals(list.hashCode(),list.hashCode());\n+\n+        CursorableLinkedList<E> list2 = new CursorableLinkedList<E>();\n+        assertTrue(!list.equals(list2));\n+        assertTrue(!list2.equals(list));\n+\n+        java.util.List<E> list3 = new java.util.LinkedList<E>();\n+        assertTrue(!list.equals(list3));\n+        assertTrue(!list3.equals(list));\n+        assertTrue(list2.equals(list3));\n+        assertTrue(list3.equals(list2));\n+        assertEquals(list2.hashCode(),list3.hashCode());\n+\n+        list2.add((E) \"A\");\n+        assertTrue(list.equals(list2));\n+        assertTrue(list2.equals(list));\n+        assertTrue(!list2.equals(list3));\n+        assertTrue(!list3.equals(list2));\n+\n+        list3.add((E) \"A\");\n+        assertTrue(list2.equals(list3));\n+        assertTrue(list3.equals(list2));\n+        assertEquals(list2.hashCode(),list3.hashCode());\n+\n+        list.add((E) \"B\");\n+        assertTrue(list.equals(list));\n+        assertTrue(!list.equals(list2));\n+        assertTrue(!list2.equals(list));\n+        assertTrue(!list.equals(list3));\n+        assertTrue(!list3.equals(list));\n+\n+        list2.add((E) \"B\");\n+        list3.add((E) \"B\");\n+        assertTrue(list.equals(list));\n+        assertTrue(list.equals(list2));\n+        assertTrue(list2.equals(list));\n+        assertTrue(list2.equals(list3));\n+        assertTrue(list3.equals(list2));\n+        assertEquals(list2.hashCode(),list3.hashCode());\n+\n+        list.add((E) \"C\");\n+        list2.add((E) \"C\");\n+        list3.add((E) \"C\");\n+        assertTrue(list.equals(list));\n+        assertTrue(list.equals(list2));\n+        assertTrue(list2.equals(list));\n+        assertTrue(list2.equals(list3));\n+        assertTrue(list3.equals(list2));\n+        assertEquals(list.hashCode(),list2.hashCode());\n+        assertEquals(list2.hashCode(),list3.hashCode());\n+\n+        list.add((E) \"D\");\n+        list2.addFirst((E) \"D\");\n+        assertTrue(list.equals(list));\n+        assertTrue(!list.equals(list2));\n+        assertTrue(!list2.equals(list));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testGet() {\n+        try {\n+            list.get(0);\n+            fail(\"shouldn't get here\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        assertTrue(list.add((E) \"A\"));\n+        assertEquals(\"A\",list.get(0));\n+        assertTrue(list.add((E) \"B\"));\n+        assertEquals(\"A\",list.get(0));\n+        assertEquals(\"B\",list.get(1));\n+\n+        try {\n+            list.get(-1);\n+            fail(\"shouldn't get here\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(2);\n+            fail(\"shouldn't get here\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIndexOf() {\n+        assertEquals(-1,list.indexOf(\"A\"));\n+        assertEquals(-1,list.lastIndexOf(\"A\"));\n+        list.add((E) \"A\");\n+        assertEquals(0,list.indexOf(\"A\"));\n+        assertEquals(0,list.lastIndexOf(\"A\"));\n+        assertEquals(-1,list.indexOf(\"B\"));\n+        assertEquals(-1,list.lastIndexOf(\"B\"));\n+        list.add((E) \"B\");\n+        assertEquals(0,list.indexOf(\"A\"));\n+        assertEquals(0,list.lastIndexOf(\"A\"));\n+        assertEquals(1,list.indexOf(\"B\"));\n+        assertEquals(1,list.lastIndexOf(\"B\"));\n+        list.addFirst((E) \"B\");\n+        assertEquals(1,list.indexOf(\"A\"));\n+        assertEquals(1,list.lastIndexOf(\"A\"));\n+        assertEquals(0,list.indexOf(\"B\"));\n+        assertEquals(2,list.lastIndexOf(\"B\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIsEmpty() {\n+        assertTrue(list.isEmpty());\n+        list.add((E) \"element\");\n+        assertTrue(!list.isEmpty());\n+        list.remove(\"element\");\n+        assertTrue(list.isEmpty());\n+        list.add((E) \"element\");\n+        assertTrue(!list.isEmpty());\n+        list.clear();\n+        assertTrue(list.isEmpty());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIterator() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        Iterator<E> it = list.iterator();\n+        assertTrue(it.hasNext());\n+        assertEquals(\"1\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"2\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"3\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"4\", it.next());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"5\", it.next());\n+        assertTrue(!it.hasNext());\n+\n+        it = list.iterator();\n+        assertTrue(it.hasNext());\n+        assertEquals(\"1\", it.next());\n+        it.remove();\n+        assertEquals(\"[2, 3, 4, 5]\", list.toString());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"2\", it.next());\n+        it.remove();\n+        assertEquals(\"[3, 4, 5]\", list.toString());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"3\", it.next());\n+        it.remove();\n+        assertEquals(\"[4, 5]\", list.toString());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"4\", it.next());\n+        it.remove();\n+        assertEquals(\"[5]\", list.toString());\n+        assertTrue(it.hasNext());\n+        assertEquals(\"5\", it.next());\n+        it.remove();\n+        assertEquals(\"[]\", list.toString());\n+        assertTrue(!it.hasNext());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListIteratorNavigation() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        ListIterator<E> it = list.listIterator();\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n+        assertEquals(-1, it.previousIndex());\n+        assertEquals(0, it.nextIndex());\n+        assertEquals(\"1\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(0, it.previousIndex());\n+        assertEquals(1, it.nextIndex());\n+        assertEquals(\"1\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n+        assertEquals(-1, it.previousIndex());\n+        assertEquals(0, it.nextIndex());\n+        assertEquals(\"1\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(0, it.previousIndex());\n+        assertEquals(1, it.nextIndex());\n+        assertEquals(\"2\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(1, it.previousIndex());\n+        assertEquals(2, it.nextIndex());\n+        assertEquals(\"2\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(0, it.previousIndex());\n+        assertEquals(1, it.nextIndex());\n+        assertEquals(\"2\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(1, it.previousIndex());\n+        assertEquals(2, it.nextIndex());\n+        assertEquals(\"3\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(2, it.previousIndex());\n+        assertEquals(3, it.nextIndex());\n+        assertEquals(\"4\", it.next());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(3, it.previousIndex());\n+        assertEquals(4, it.nextIndex());\n+        assertEquals(\"5\", it.next());\n+        assertTrue(!it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(4, it.previousIndex());\n+        assertEquals(5, it.nextIndex());\n+        assertEquals(\"5\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(3, it.previousIndex());\n+        assertEquals(4, it.nextIndex());\n+        assertEquals(\"4\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(2, it.previousIndex());\n+        assertEquals(3, it.nextIndex());\n+        assertEquals(\"3\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(1, it.previousIndex());\n+        assertEquals(2, it.nextIndex());\n+        assertEquals(\"2\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(it.hasPrevious());\n+        assertEquals(0, it.previousIndex());\n+        assertEquals(1, it.nextIndex());\n+        assertEquals(\"1\", it.previous());\n+        assertTrue(it.hasNext());\n+        assertTrue(!it.hasPrevious());\n+        assertEquals(-1, it.previousIndex());\n+        assertEquals(0, it.nextIndex());\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListIteratorSet() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+\n+        ListIterator<E> it = list.listIterator();\n+        assertEquals(\"1\", it.next());\n+        it.set((E) \"a\");\n+        assertEquals(\"a\", it.previous());\n+        it.set((E) \"A\");\n+        assertEquals(\"A\", it.next());\n+        assertEquals(\"2\", it.next());\n+        it.set((E) \"B\");\n+        assertEquals(\"3\", it.next());\n+        assertEquals(\"4\", it.next());\n+        it.set((E) \"D\");\n+        assertEquals(\"5\", it.next());\n+        it.set((E) \"E\");\n+        assertEquals(\"[A, B, 3, D, E]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListIteratorRemove() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+\n+        ListIterator<E> it = list.listIterator();\n+        try {\n+            it.remove();\n+        } catch(IllegalStateException e) {\n+            // expected\n+        }\n+        assertEquals(\"1\",it.next());\n+        assertEquals(\"2\",it.next());\n+        assertEquals(\"[1, 2, 3, 4, 5]\",list.toString());\n+        it.remove();\n+        assertEquals(\"[1, 3, 4, 5]\",list.toString());\n+        assertEquals(\"3\",it.next());\n+        assertEquals(\"3\",it.previous());\n+        assertEquals(\"1\",it.previous());\n+        it.remove();\n+        assertEquals(\"[3, 4, 5]\",list.toString());\n+        assertTrue(!it.hasPrevious());\n+        assertEquals(\"3\",it.next());\n+        it.remove();\n+        assertEquals(\"[4, 5]\",list.toString());\n+        try {\n+            it.remove();\n+        } catch(IllegalStateException e) {\n+            // expected\n+        }\n+        assertEquals(\"4\",it.next());\n+        assertEquals(\"5\",it.next());\n+        it.remove();\n+        assertEquals(\"[4]\",list.toString());\n+        assertEquals(\"4\",it.previous());\n+        it.remove();\n+        assertEquals(\"[]\",list.toString());\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListIteratorAdd() {\n+        ListIterator<E> it = list.listIterator();\n+        it.add((E) \"1\");\n+        assertEquals(\"[1]\", list.toString());\n+        it.add((E) \"3\");\n+        assertEquals(\"[1, 3]\", list.toString());\n+        it.add((E) \"5\");\n+        assertEquals(\"[1, 3, 5]\", list.toString());\n+        assertEquals(\"5\", it.previous());\n+        it.add((E) \"4\");\n+        assertEquals(\"[1, 3, 4, 5]\", list.toString());\n+        assertEquals(\"4\", it.previous());\n+        assertEquals(\"3\", it.previous());\n+        it.add((E) \"2\");\n+        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveAll() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+\n+        HashSet<E> set = new HashSet<E>();\n+        set.add((E) \"A\");\n+        set.add((E) \"2\");\n+        set.add((E) \"C\");\n+        set.add((E) \"4\");\n+        set.add((E) \"D\");\n+\n+        assertTrue(list.removeAll(set));\n+        assertEquals(\"[1, 3, 5]\", list.toString());\n+        assertTrue(!list.removeAll(set));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveByIndex() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n+        assertEquals(\"1\", list.remove(0));\n+        assertEquals(\"[2, 3, 4, 5]\", list.toString());\n+        assertEquals(\"3\", list.remove(1));\n+        assertEquals(\"[2, 4, 5]\", list.toString());\n+        assertEquals(\"4\", list.remove(1));\n+        assertEquals(\"[2, 5]\", list.toString());\n+        assertEquals(\"5\", list.remove(1));\n+        assertEquals(\"[2]\", list.toString());\n+        assertEquals(\"2\", list.remove(0));\n+        assertEquals(\"[]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemove() {\n+        list.add((E) \"1\");\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        assertEquals(\"[1, 1, 2, 3, 4, 5, 2, 3, 4, 5]\", list.toString());\n+        assertTrue(!list.remove(\"6\"));\n+        assertTrue(list.remove(\"5\"));\n+        assertEquals(\"[1, 1, 2, 3, 4, 2, 3, 4, 5]\", list.toString());\n+        assertTrue(list.remove(\"5\"));\n+        assertEquals(\"[1, 1, 2, 3, 4, 2, 3, 4]\", list.toString());\n+        assertTrue(!list.remove(\"5\"));\n+        assertTrue(list.remove(\"1\"));\n+        assertEquals(\"[1, 2, 3, 4, 2, 3, 4]\", list.toString());\n+        assertTrue(list.remove(\"1\"));\n+        assertEquals(\"[2, 3, 4, 2, 3, 4]\", list.toString());\n+        assertTrue(list.remove(\"2\"));\n+        assertEquals(\"[3, 4, 2, 3, 4]\", list.toString());\n+        assertTrue(list.remove(\"2\"));\n+        assertEquals(\"[3, 4, 3, 4]\", list.toString());\n+        assertTrue(list.remove(\"3\"));\n+        assertEquals(\"[4, 3, 4]\", list.toString());\n+        assertTrue(list.remove(\"3\"));\n+        assertEquals(\"[4, 4]\", list.toString());\n+        assertTrue(list.remove(\"4\"));\n+        assertEquals(\"[4]\", list.toString());\n+        assertTrue(list.remove(\"4\"));\n+        assertEquals(\"[]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRetainAll() {\n+        list.add((E) \"1\");\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        list.add((E) \"5\");\n+\n+        HashSet<E> set = new HashSet<E>();\n+        set.add((E) \"A\");\n+        set.add((E) \"2\");\n+        set.add((E) \"C\");\n+        set.add((E) \"4\");\n+        set.add((E) \"D\");\n+\n+        assertTrue(list.retainAll(set));\n+        assertEquals(\"[2, 2, 4, 4]\", list.toString());\n+        assertTrue(!list.retainAll(set));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSet() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+        assertEquals(\"[1, 2, 3, 4, 5]\", list.toString());\n+        list.set(0, (E) \"A\");\n+        assertEquals(\"[A, 2, 3, 4, 5]\", list.toString());\n+        list.set(1, (E) \"B\");\n+        assertEquals(\"[A, B, 3, 4, 5]\", list.toString());\n+        list.set(2, (E) \"C\");\n+        assertEquals(\"[A, B, C, 4, 5]\", list.toString());\n+        list.set(3, (E) \"D\");\n+        assertEquals(\"[A, B, C, D, 5]\", list.toString());\n+        list.set(4, (E) \"E\");\n+        assertEquals(\"[A, B, C, D, E]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSubList() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+\n+        assertEquals(\"[A, B, C, D, E]\", list.toString());\n+        assertEquals(\"[A, B, C, D, E]\", list.subList(0, 5).toString());\n+        assertEquals(\"[B, C, D, E]\", list.subList(1, 5).toString());\n+        assertEquals(\"[C, D, E]\", list.subList(2, 5).toString());\n+        assertEquals(\"[D, E]\", list.subList(3, 5).toString());\n+        assertEquals(\"[E]\", list.subList(4, 5).toString());\n+        assertEquals(\"[]\", list.subList(5, 5).toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSubListAddEnd() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+\n+        List<E> sublist = list.subList(5, 5);\n+        sublist.add((E) \"F\");\n+        assertEquals(\"[A, B, C, D, E, F]\", list.toString());\n+        assertEquals(\"[F]\", sublist.toString());\n+        sublist.add((E) \"G\");\n+        assertEquals(\"[A, B, C, D, E, F, G]\", list.toString());\n+        assertEquals(\"[F, G]\", sublist.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSubListAddBegin() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+\n+        List<E> sublist = list.subList(0, 0);\n+        sublist.add((E) \"a\");\n+        assertEquals(\"[a, A, B, C, D, E]\", list.toString());\n+        assertEquals(\"[a]\", sublist.toString());\n+        sublist.add((E) \"b\");\n+        assertEquals(\"[a, b, A, B, C, D, E]\", list.toString());\n+        assertEquals(\"[a, b]\", sublist.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSubListAddMiddle() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+\n+        List<E> sublist = list.subList(1, 3);\n+        sublist.add((E) \"a\");\n+        assertEquals(\"[A, B, C, a, D, E]\", list.toString());\n+        assertEquals(\"[B, C, a]\", sublist.toString());\n+        sublist.add((E) \"b\");\n+        assertEquals(\"[A, B, C, a, b, D, E]\", list.toString());\n+        assertEquals(\"[B, C, a, b]\", sublist.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSubListRemove() {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+\n+        List<E> sublist = list.subList(1, 4);\n+        assertEquals(\"[B, C, D]\", sublist.toString());\n+        assertEquals(\"[A, B, C, D, E]\", list.toString());\n+        sublist.remove(\"C\");\n+        assertEquals(\"[B, D]\", sublist.toString());\n+        assertEquals(\"[A, B, D, E]\", list.toString());\n+        sublist.remove(1);\n+        assertEquals(\"[B]\", sublist.toString());\n+        assertEquals(\"[A, B, E]\", list.toString());\n+        sublist.clear();\n+        assertEquals(\"[]\", sublist.toString());\n+        assertEquals(\"[A, E]\", list.toString());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testToArray() {\n+        list.add((E) \"1\");\n+        list.add((E) \"2\");\n+        list.add((E) \"3\");\n+        list.add((E) \"4\");\n+        list.add((E) \"5\");\n+\n+        Object[] elts = list.toArray();\n+        assertEquals(\"1\", elts[0]);\n+        assertEquals(\"2\", elts[1]);\n+        assertEquals(\"3\", elts[2]);\n+        assertEquals(\"4\", elts[3]);\n+        assertEquals(\"5\", elts[4]);\n+        assertEquals(5, elts.length);\n+\n+        String[] elts2 = (list.toArray(new String[0]));\n+        assertEquals(\"1\", elts2[0]);\n+        assertEquals(\"2\", elts2[1]);\n+        assertEquals(\"3\", elts2[2]);\n+        assertEquals(\"4\", elts2[3]);\n+        assertEquals(\"5\", elts2[4]);\n+        assertEquals(5, elts2.length);\n+\n+        String[] elts3 = new String[5];\n+        assertSame(elts3, list.toArray(elts3));\n+        assertEquals(\"1\", elts3[0]);\n+        assertEquals(\"2\", elts3[1]);\n+        assertEquals(\"3\", elts3[2]);\n+        assertEquals(\"4\", elts3[3]);\n+        assertEquals(\"5\", elts3[4]);\n+        assertEquals(5, elts3.length);\n+\n+        String[] elts4 = new String[3];\n+        String[] elts4b = (list.toArray(elts4));\n+        assertTrue(elts4 != elts4b);\n+        assertEquals(\"1\", elts4b[0]);\n+        assertEquals(\"2\", elts4b[1]);\n+        assertEquals(\"3\", elts4b[2]);\n+        assertEquals(\"4\", elts4b[3]);\n+        assertEquals(\"5\", elts4b[4]);\n+        assertEquals(5, elts4b.length);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSerialization() throws Exception {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+\n+        java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n+        java.io.ObjectOutputStream out = new java.io.ObjectOutputStream(buf);\n+        out.writeObject(list);\n+        out.flush();\n+        out.close();\n+\n+        java.io.ByteArrayInputStream bufin = new java.io.ByteArrayInputStream(buf.toByteArray());\n+        java.io.ObjectInputStream in = new java.io.ObjectInputStream(bufin);\n+        Object list2 = in.readObject();\n+\n+        assertTrue(list != list2);\n+        assertTrue(list2.equals(list));\n+        assertTrue(list.equals(list2));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSerializationWithOpenCursor() throws Exception {\n+        list.add((E) \"A\");\n+        list.add((E) \"B\");\n+        list.add((E) \"C\");\n+        list.add((E) \"D\");\n+        list.add((E) \"E\");\n+        java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n+        java.io.ObjectOutputStream out = new java.io.ObjectOutputStream(buf);\n+        out.writeObject(list);\n+        out.flush();\n+        out.close();\n+\n+        java.io.ByteArrayInputStream bufin = new java.io.ByteArrayInputStream(buf.toByteArray());\n+        java.io.ObjectInputStream in = new java.io.ObjectInputStream(bufin);\n+        Object list2 = in.readObject();\n+\n+        assertTrue(list != list2);\n+        assertTrue(list2.equals(list));\n+        assertTrue(list.equals(list2));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testLongSerialization() throws Exception {\n+        // recursive serialization will cause a stack\n+        // overflow exception with long lists\n+        for (int i = 0; i < 10000; i++) {\n+            list.add((E) new Integer(i));\n+        }\n+\n+        java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n+        java.io.ObjectOutputStream out = new java.io.ObjectOutputStream(buf);\n+        out.writeObject(list);\n+        out.flush();\n+        out.close();\n+\n+        java.io.ByteArrayInputStream bufin = new java.io.ByteArrayInputStream(buf.toByteArray());\n+        java.io.ObjectInputStream in = new java.io.ObjectInputStream(bufin);\n+        Object list2 = in.readObject();\n+\n+        assertTrue(list != list2);\n+        assertTrue(list2.equals(list));\n+        assertTrue(list.equals(list2));\n+    }\n+\n+    /**\n+     *  Ignore the serialization tests for sublists and sub-sublists.\n+     *\n+     *  @return an array of sublist serialization test names\n+     */\n+    @Override\n+    public String[] ignoredTests() {\n+        ArrayList<String> list = new ArrayList<String>();\n+        String prefix = \"TestCursorableLinkedList\";\n+        String bulk = \".bulkTestSubList\";\n+        String[] ignored = new String[] {\n+                \".testEmptyListSerialization\",\n+                \".testFullListSerialization\",\n+                \".testEmptyListCompatibility\",\n+                \".testFullListCompatibility\",\n+                \".testSimpleSerialization\",\n+                \".testCanonicalEmptyCollectionExists\",\n+                \".testCanonicalFullCollectionExists\",\n+                \".testSerializeDeserializeThenCompare\"\n+        };\n+        for (int i = 0; i < ignored.length; i++) {\n+            list.add(prefix + bulk + ignored[i]);\n+            list.add(prefix + bulk + bulk + ignored[i]);\n+        }\n+        return list.toArray(new String[0]);\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"4.0\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"C:/commons/collections/data/test/CursorableLinkedList.emptyCollection.version4.0.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"C:/commons/collections/data/test/CursorableLinkedList.fullCollection.version4.0.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/FixedSizeListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Extension of {@link AbstractListTest} for exercising the {@link FixedSizeList}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision$\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class FixedSizeListTest<E> extends AbstractListTest<E> {\n+\n+    public FixedSizeListTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public List<E> makeObject() {\n+        return FixedSizeList.fixedSizeList(new ArrayList<E>());\n+    }\n+\n+    @Override\n+    public List<E> makeFullCollection() {\n+        List<E> list = new ArrayList<E>();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return FixedSizeList.fixedSizeList(list);\n+    }\n+\n+    @Override\n+    public boolean isAddSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/FixedSizeList.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/FixedSizeList.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/GrowthListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Extension of {@link AbstractListTest} for exercising the {@link GrowthList}.\n+ *\n+ * @since Commons Collections 3.2\n+ * @version $Revision$\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class GrowthListTest<E> extends AbstractListTest<E> {\n+\n+    public GrowthListTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public List<E> makeObject() {\n+        return new GrowthList<E>();\n+    }\n+\n+    @Override\n+    public List<E> makeFullCollection() {\n+        List<E> list = new ArrayList<E>();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return GrowthList.growthList(list);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGrowthAdd() {\n+        Integer one = new Integer(1);\n+        GrowthList<Integer> grower = new GrowthList<Integer>();\n+        assertEquals(0, grower.size());\n+        grower.add(1, one);\n+        assertEquals(2, grower.size());\n+        assertEquals(null, grower.get(0));\n+        assertEquals(one, grower.get(1));\n+    }\n+\n+    public void testGrowthAddAll() {\n+        Integer one = new Integer(1);\n+        Integer two = new Integer(2);\n+        Collection<Integer> coll = new ArrayList<Integer>();\n+        coll.add(one);\n+        coll.add(two);\n+        GrowthList<Integer> grower = new GrowthList<Integer>();\n+        assertEquals(0, grower.size());\n+        grower.addAll(1, coll);\n+        assertEquals(3, grower.size());\n+        assertEquals(null, grower.get(0));\n+        assertEquals(one, grower.get(1));\n+        assertEquals(two, grower.get(2));\n+    }\n+\n+    public void testGrowthSet1() {\n+        Integer one = new Integer(1);\n+        GrowthList<Integer> grower = new GrowthList<Integer>();\n+        assertEquals(0, grower.size());\n+        grower.set(1, one);\n+        assertEquals(2, grower.size());\n+        assertEquals(null, grower.get(0));\n+        assertEquals(one, grower.get(1));\n+    }\n+\n+    public void testGrowthSet2() {\n+        Integer one = new Integer(1);\n+        GrowthList<Integer> grower = new GrowthList<Integer>();\n+        assertEquals(0, grower.size());\n+        grower.set(0, one);\n+        assertEquals(1, grower.size());\n+        assertEquals(one, grower.get(0));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Override.\n+     */\n+    @Override\n+    public void testListAddByIndexBoundsChecking() {\n+        List<E> list;\n+        E element = getOtherElements()[0];\n+        try {\n+            list = makeObject();\n+            list.add(-1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     * Override.\n+     */\n+    @Override\n+    public void testListAddByIndexBoundsChecking2() {\n+        List<E> list;\n+        E element = getOtherElements()[0];\n+        try {\n+            list = makeFullCollection();\n+            list.add(-1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     * Override.\n+     */\n+    @Override\n+    public void testListSetByIndexBoundsChecking() {\n+        List<E> list = makeObject();\n+        E element = getOtherElements()[0];\n+        try {\n+            list.set(-1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     * Override.\n+     */\n+    @Override\n+    public void testListSetByIndexBoundsChecking2() {\n+        List<E> list = makeFullCollection();\n+        E element = getOtherElements()[0];\n+        try {\n+            list.set(-1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.2\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"C:/commons/collections/data/test/GrowthList.emptyCollection.version3.2.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"C:/commons/collections/data/test/GrowthList.fullCollection.version3.2.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/NodeCachingLinkedListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.Arrays;\n+import java.util.LinkedList;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Test class for NodeCachingLinkedList, a performance optimised LinkedList.\n+ *\n+ * @version $Revision$\n+ *\n+ * @author Jeff Varszegi\n+ * @author Phil Steitz\n+ */\n+public class NodeCachingLinkedListTest<E> extends AbstractLinkedListTest<E> {\n+\n+    public NodeCachingLinkedListTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(NodeCachingLinkedListTest.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public NodeCachingLinkedList<E> makeObject() {\n+        return new NodeCachingLinkedList<E>();\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3\";\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testShrinkCache() {\n+        if (isRemoveSupported() == false || isAddSupported() == false) return;\n+        resetEmpty();\n+        NodeCachingLinkedList<E> list = getCollection();\n+\n+        list.addAll(Arrays.asList((E[]) new String[] { \"1\", \"2\", \"3\", \"4\" }));\n+        list.removeAllNodes(); // Will dump all 4 elements into cache\n+        list.setMaximumCacheSize(2); // shrink cache\n+        list.addAll(Arrays.asList((E[]) new String[] { \"1\", \"2\", \"3\", \"4\" }));\n+        checkNodes();\n+        list.removeNode(list.getNode(0, false)); // no room in cache\n+        list.removeNode(list.getNode(0, false));\n+        list.removeNode(list.getNode(0, false));\n+        checkNodes();\n+        list.addAll(Arrays.asList((E[]) new String[] { \"1\", \"2\", \"3\", \"4\" }));\n+        checkNodes();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public static void compareSpeed() {\n+        NodeCachingLinkedList<Object> ncll = new NodeCachingLinkedList<Object>();\n+        LinkedList<Object> ll = new LinkedList<Object>();\n+\n+        Object o1 = new Object();\n+        Object o2 = new Object();\n+\n+        int loopCount = 4000000;\n+\n+        long startTime, endTime;\n+\n+        System.out.println(\"Testing relative execution time of commonly-used methods...\");\n+\n+        startTime = System.currentTimeMillis();\n+        for(int x = loopCount; x > 0; x--) {\n+            // unrolled a few times to minimize effect of loop\n+            ll.addFirst(o1);\n+            ll.addLast(o2);\n+            ll.removeFirst();\n+            ll.removeLast();\n+            ll.add(o1);\n+            ll.remove(0);\n+            //\n+            ll.addFirst(o1);\n+            ll.addLast(o2);\n+            ll.removeFirst();\n+            ll.removeLast();\n+            ll.add(o1);\n+            ll.remove(0);\n+            //\n+            ll.addFirst(o1);\n+            ll.addLast(o2);\n+            ll.removeFirst();\n+            ll.removeLast();\n+            ll.add(o1);\n+            ll.remove(0);\n+        }\n+        endTime = System.currentTimeMillis();\n+        System.out.println(\"Time with LinkedList: \" + (endTime - startTime) + \" ms\");\n+\n+        startTime = System.currentTimeMillis();\n+        for(int x = loopCount; x > 0; x--) {\n+            ncll.addFirst(o1);\n+            ncll.addLast(o2);\n+            ncll.removeFirst();\n+            ncll.removeLast();\n+            ncll.add(o1);\n+            ncll.remove(0);\n+            //\n+            ncll.addFirst(o1);\n+            ncll.addLast(o2);\n+            ncll.removeFirst();\n+            ncll.removeLast();\n+            ncll.add(o1);\n+            ncll.remove(0);\n+            //\n+            ncll.addFirst(o1);\n+            ncll.addLast(o2);\n+            ncll.removeFirst();\n+            ncll.removeLast();\n+            ncll.add(o1);\n+            ncll.remove(0);\n+        }\n+        endTime = System.currentTimeMillis();\n+        System.out.println(\"Time with NodeCachingLinkedList: \" + (endTime - startTime) + \" ms\");\n+\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection,\n+//           \"D:/dev/collections/data/test/NodeCachingLinkedList.emptyCollection.version3.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection,\n+//            \"D:/dev/collections/data/test/NodeCachingLinkedList.fullCollection.version3.obj\");\n+//    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public NodeCachingLinkedList<E> getCollection() {\n+        return (NodeCachingLinkedList<E>) super.getCollection();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/PredicatedListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.functors.TruePredicate;\n+\n+/**\n+ * Extension of {@link AbstractListTest} for exercising the \n+ * {@link PredicatedList} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision$\n+ *\n+ * @author Phil Steitz\n+ */\n+public class PredicatedListTest<E> extends AbstractListTest<E> {\n+\n+    public PredicatedListTest(String testName) {\n+        super(testName);\n+    }\n+\n+ //-------------------------------------------------------------------\n+\n+    protected Predicate<E> truePredicate = TruePredicate.<E>truePredicate();\n+\n+    protected List<E> decorateList(List<E> list, Predicate<E> predicate) {\n+        return PredicatedList.predicatedList(list, predicate);\n+    }\n+\n+    @Override\n+    public List<E> makeObject() {\n+        return decorateList(new ArrayList<E>(), truePredicate);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public E[] getFullElements() {\n+        return (E[]) new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n+    }\n+\n+//--------------------------------------------------------------------\n+\n+    protected Predicate<E> testPredicate =\n+        new Predicate<E>() {\n+            public boolean evaluate(E o) {\n+                return o instanceof String;\n+            }\n+        };\n+\n+    public List<E> makeTestList() {\n+        return decorateList(new ArrayList<E>(), testPredicate);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIllegalAdd() {\n+        List<E> list = makeTestList();\n+        Integer i = new Integer(3);\n+        try {\n+            list.add((E) i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\",\n+         !list.contains(i));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIllegalAddAll() {\n+        List<E> list = makeTestList();\n+        List<E> elements = new ArrayList<E>();\n+        elements.add((E) \"one\");\n+        elements.add((E) \"two\");\n+        elements.add((E) new Integer(3));\n+        elements.add((E) \"four\");\n+        try {\n+            list.addAll(0, elements);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"List shouldn't contain illegal element\",\n+         !list.contains(\"one\"));\n+        assertTrue(\"List shouldn't contain illegal element\",\n+         !list.contains(\"two\"));\n+        assertTrue(\"List shouldn't contain illegal element\",\n+         !list.contains(new Integer(3)));\n+        assertTrue(\"List shouldn't contain illegal element\",\n+         !list.contains(\"four\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIllegalSet() {\n+        List<E> list = makeTestList();\n+        try {\n+            list.set(0, (E) new Integer(3));\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testLegalAddAll() {\n+        List<E> list = makeTestList();\n+        list.add((E) \"zero\");\n+        List<E> elements = new ArrayList<E>();\n+        elements.add((E) \"one\");\n+        elements.add((E) \"two\");\n+        elements.add((E) \"three\");\n+        list.addAll(1,elements);\n+        assertTrue(\"List should contain legal element\",\n+         list.contains(\"zero\"));\n+        assertTrue(\"List should contain legal element\",\n+         list.contains(\"one\"));\n+        assertTrue(\"List should contain legal element\",\n+         list.contains(\"two\"));\n+        assertTrue(\"List should contain legal element\",\n+         list.contains(\"three\"));\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/PredicatedList.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/PredicatedList.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/SetUniqueListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Set;\n+\n+/**\n+ * JUnit tests.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision$\n+ *\n+ * @author Matthew Hawthorne\n+ * @author Tom Dunham\n+ */\n+public class SetUniqueListTest<E> extends AbstractListTest<E> {\n+\n+    public SetUniqueListTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public List<E> makeObject() {\n+        return new SetUniqueList<E>(new ArrayList<E>(), new HashSet<E>());\n+    }\n+\n+    @Override\n+    public void testListIteratorSet() {\n+        // override to block\n+        resetFull();\n+        ListIterator<E> it = getCollection().listIterator();\n+        it.next();\n+        try {\n+            it.set(null);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public E[] getFullNonNullElements() {\n+        // override to avoid duplicate \"One\"\n+        return (E[]) new Object[] {\n+                new String(\"\"),\n+                new String(\"One\"),\n+                new Integer(2),\n+                \"Three\",\n+                new Integer(4),\n+                new Double(5),\n+                new Float(6),\n+                \"Seven\",\n+                \"Eight\",\n+                new String(\"Nine\"),\n+                new Integer(10),\n+                new Short((short)11),\n+                new Long(12),\n+                \"Thirteen\",\n+                \"14\",\n+                \"15\",\n+                new Byte((byte)16)\n+        };\n+    }\n+\n+    @Override\n+    public void testListIteratorAdd() {\n+        // override to cope with Set behaviour\n+        resetEmpty();\n+        List<E> list1 = getCollection();\n+        List<E> list2 = getConfirmed();\n+\n+        E[] elements = getOtherElements();  // changed here\n+        ListIterator<E> iter1 = list1.listIterator();\n+        ListIterator<E> iter2 = list2.listIterator();\n+\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.add(elements[i]);\n+            iter2.add(elements[i]);\n+            super.verify();  // changed here\n+        }\n+\n+        resetFull();\n+        iter1 = getCollection().listIterator();\n+        iter2 = getConfirmed().listIterator();\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.next();\n+            iter2.next();\n+            iter1.add(elements[i]);\n+            iter2.add(elements[i]);\n+            super.verify();  // changed here\n+        }\n+    }\n+\n+    @Override\n+    public void testCollectionAddAll() {\n+        // override for set behaviour\n+        resetEmpty();\n+        E[] elements = getFullElements();\n+        boolean r = getCollection().addAll(Arrays.asList(elements));\n+        getConfirmed().addAll(Arrays.asList(elements));\n+        verify();\n+        assertTrue(\"Empty collection should change after addAll\", r);\n+        for (int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Collection should contain added element\",\n+                    getCollection().contains(elements[i]));\n+        }\n+\n+        resetFull();\n+        int size = getCollection().size();\n+        elements = getOtherElements();\n+        r = getCollection().addAll(Arrays.asList(elements));\n+        getConfirmed().addAll(Arrays.asList(elements));\n+        verify();\n+        assertTrue(\"Full collection should change after addAll\", r);\n+        for (int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Full collection should contain added element \" + i,\n+                    getCollection().contains(elements[i]));\n+        }\n+        assertEquals(\"Size should increase after addAll\",\n+                size + elements.length, getCollection().size());\n+    }\n+\n+    public void testIntCollectionAddAll() {\n+      // make a SetUniqueList with one element\n+      List<Integer> list = new SetUniqueList<Integer>(new ArrayList<Integer>(), new HashSet<Integer>());\n+      final Integer existingElement = new Integer(1);\n+      list.add(existingElement);\n+\n+      // add two new unique elements at index 0\n+      final Integer firstNewElement = new Integer(2);\n+      final Integer secondNewElement = new Integer(3);\n+      Collection<Integer> collection = Arrays.asList(new Integer[] {firstNewElement, secondNewElement});\n+      list.addAll(0, collection);\n+      assertEquals(\"Unique elements should be added.\", 3, list.size());\n+      assertEquals(\"First new element should be at index 0\", firstNewElement, list.get(0));\n+      assertEquals(\"Second new element should be at index 1\", secondNewElement, list.get(1));\n+      assertEquals(\"Existing element should shift to index 2\", existingElement, list.get(2));\n+\n+      // add a duplicate element and a unique element at index 0\n+      final Integer thirdNewElement = new Integer(4);\n+      collection = Arrays.asList(new Integer[] {existingElement, thirdNewElement});\n+      list.addAll(0, collection);\n+      assertEquals(\"Duplicate element should not be added, unique element should be added.\",\n+        4, list.size());\n+      assertEquals(\"Third new element should be at index 0\", thirdNewElement, list.get(0));\n+    }\n+    \n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListSetByIndex() {\n+        // override for set behaviour\n+        resetFull();\n+        int size = getCollection().size();\n+        getCollection().set(0, (E) new Long(1000));\n+        assertEquals(size, getCollection().size());\n+\n+        getCollection().set(2, (E) new Long(1000));\n+        assertEquals(size - 1, getCollection().size());\n+        assertEquals(new Long(1000), getCollection().get(1));  // set into 2, but shifted down to 1\n+    }\n+\n+    boolean extraVerify = true;\n+    @Override\n+    public void testCollectionIteratorRemove() {\n+        try {\n+            extraVerify = false;\n+            super.testCollectionIteratorRemove();\n+        } finally {\n+            extraVerify = true;\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void verify() {\n+        super.verify();\n+\n+        if (extraVerify) {\n+            int size = getCollection().size();\n+            getCollection().add((E) new Long(1000));\n+            assertEquals(size + 1, getCollection().size());\n+\n+            getCollection().add((E) new Long(1000));\n+            assertEquals(size + 1, getCollection().size());\n+            assertEquals(new Long(1000), getCollection().get(size));\n+\n+            getCollection().remove(size);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory() {\n+        Integer[] array = new Integer[] { new Integer(1), new Integer(2), new Integer(1) };\n+        ArrayList<Integer> list = new ArrayList<Integer>(Arrays.asList(array));\n+        final SetUniqueList<Integer> lset = SetUniqueList.setUniqueList(list);\n+\n+        assertEquals(\"Duplicate element was added.\", 2, lset.size());\n+        assertEquals(new Integer(1), lset.get(0));\n+        assertEquals(new Integer(2), lset.get(1));\n+        assertEquals(new Integer(1), list.get(0));\n+        assertEquals(new Integer(2), list.get(1));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testAdd() {\n+        final SetUniqueList<E> lset = new SetUniqueList<E>(new ArrayList<E>(), new HashSet<E>());\n+\n+        // Duplicate element\n+        final E obj = (E) new Integer(1);\n+        lset.add(obj);\n+        lset.add(obj);\n+        assertEquals(\"Duplicate element was added.\", 1, lset.size());\n+\n+        // Unique element\n+        lset.add((E) new Integer(2));\n+        assertEquals(\"Unique element was not added.\", 2, lset.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testAddAll() {\n+        final SetUniqueList<E> lset = new SetUniqueList<E>(new ArrayList<E>(), new HashSet<E>());\n+\n+        lset.addAll(\n+            Arrays.asList((E[]) new Integer[] { new Integer(1), new Integer(1)}));\n+\n+        assertEquals(\"Duplicate element was added.\", 1, lset.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSet() {\n+        final SetUniqueList<E> lset = new SetUniqueList<E>(new ArrayList<E>(), new HashSet<E>());\n+\n+        // Duplicate element\n+        final E obj1 = (E) new Integer(1);\n+        final E obj2 = (E) new Integer(2);\n+        final E obj3 = (E) new Integer(3);\n+\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(0, obj1);\n+        assertEquals(2, lset.size());\n+        assertSame(obj1, lset.get(0));\n+        assertSame(obj2, lset.get(1));\n+\n+        lset.clear();\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(0, obj2);\n+        assertEquals(1, lset.size());\n+        assertSame(obj2, lset.get(0));\n+\n+        lset.clear();\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(0, obj3);\n+        assertEquals(2, lset.size());\n+        assertSame(obj3, lset.get(0));\n+        assertSame(obj2, lset.get(1));\n+\n+        lset.clear();\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(1, obj1);\n+        assertEquals(1, lset.size());\n+        assertSame(obj1, lset.get(0));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListIterator() {\n+        final SetUniqueList<E> lset = new SetUniqueList<E>(new ArrayList<E>(), new HashSet<E>());\n+\n+        final E obj1 = (E) new Integer(1);\n+        final E obj2 = (E) new Integer(2);\n+        lset.add(obj1);\n+        lset.add(obj2);\n+\n+        // Attempts to add a duplicate object\n+        for (final ListIterator<E> it = lset.listIterator(); it.hasNext();) {\n+            it.next();\n+\n+            if (!it.hasNext()) {\n+                it.add(obj1);\n+                break;\n+            }\n+        }\n+\n+        assertEquals(\"Duplicate element was added\", 2, lset.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testUniqueListReInsert() {\n+        List<E> l = SetUniqueList.setUniqueList(new LinkedList<E>());\n+        l.add((E) new Object());\n+        l.add((E) new Object());\n+\n+        E a = l.get(0);\n+\n+        // duplicate is removed\n+        l.set(0, l.get(1));\n+        assertEquals(1, l.size());\n+\n+        // old object is added back in\n+        l.add(1, a);\n+        assertEquals(2, l.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testUniqueListDoubleInsert() {\n+        List<E> l = SetUniqueList.setUniqueList(new LinkedList<E>());\n+        l.add((E) new Object());\n+        l.add((E) new Object());\n+\n+        // duplicate is removed\n+        l.set(0, l.get(1));\n+        assertEquals(1, l.size());\n+\n+        // duplicate should be removed again\n+        l.add(1, l.get(0));\n+        assertEquals(1, l.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSetDownwardsInList() {\n+        /*\n+         * Checks the following semantics\n+         * [a,b]\n+         * set(0,b): [b]->a\n+         * So UniqList contains [b] and a is returned\n+         */\n+        ArrayList<E> l = new ArrayList<E>();\n+        HashSet<E> s = new HashSet<E>();\n+        final SetUniqueList<E> ul = new SetUniqueList<E>(l, s);\n+\n+        E a = (E) new Object();\n+        E b = (E) new Object();\n+        ul.add(a);\n+        ul.add(b);\n+        assertEquals(a, l.get(0));\n+        assertEquals(b, l.get(1));\n+        assertTrue(s.contains(a));\n+        assertTrue(s.contains(b));\n+\n+        assertEquals(a, ul.set(0, b));\n+        assertEquals(1, s.size());\n+        assertEquals(1, l.size());\n+        assertEquals(b, l.get(0));\n+        assertTrue(s.contains(b));\n+        assertFalse(s.contains(a));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSetInBiggerList() {\n+        /*\n+         * Checks the following semantics\n+         * [a,b,c]\n+         * set(0,b): [b,c]->a\n+         * So UniqList contains [b,c] and a is returned\n+         */\n+        ArrayList<E> l = new ArrayList<E>();\n+        HashSet<E> s = new HashSet<E>();\n+        final SetUniqueList<E> ul = new SetUniqueList<E>(l, s);\n+\n+        E a = (E) new Object();\n+        E b = (E) new Object();\n+        E c = (E) new Object();\n+\n+        ul.add(a);\n+        ul.add(b);\n+        ul.add(c);\n+        assertEquals(a, l.get(0));\n+        assertEquals(b, l.get(1));\n+        assertEquals(c, l.get(2));\n+        assertTrue(s.contains(a));\n+        assertTrue(s.contains(b));\n+        assertTrue(s.contains(c));\n+\n+        assertEquals(a, ul.set(0, b));\n+        assertEquals(2, s.size());\n+        assertEquals(2, l.size());\n+        assertEquals(b, l.get(0));\n+        assertEquals(c, l.get(1));\n+        assertFalse(s.contains(a));\n+        assertTrue(s.contains(b));\n+        assertTrue(s.contains(c));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSetUpwardsInList() {\n+        /*\n+         * Checks the following semantics\n+         * [a,b,c]\n+         * set(1,a): [a,c]->b\n+         * So UniqList contains [a,c] and b is returned\n+         */\n+        ArrayList<E> l = new ArrayList<E>();\n+        HashSet<E> s = new HashSet<E>();\n+        final SetUniqueList<E> ul = new SetUniqueList<E>(l, s);\n+\n+        E a = (E) new String(\"A\");\n+        E b = (E) new String(\"B\");\n+        E c = (E) new String(\"C\");\n+\n+        ul.add(a);\n+        ul.add(b);\n+        ul.add(c);\n+        assertEquals(a, l.get(0));\n+        assertEquals(b, l.get(1));\n+        assertEquals(c, l.get(2));\n+        assertTrue(s.contains(a));\n+        assertTrue(s.contains(b));\n+        assertTrue(s.contains(c));\n+\n+        assertEquals(b, ul.set(1, a));\n+        assertEquals(2, s.size());\n+        assertEquals(2, l.size());\n+        assertEquals(a, l.get(0));\n+        assertEquals(c, l.get(1));\n+        assertTrue(s.contains(a));\n+        assertFalse(s.contains(b));\n+        assertTrue(s.contains(c));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SetUniqueList.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SetUniqueList.fullCollection.version3.1.obj\");\n+//    }\n+\n+    // TODO: Generics\n+    public void testCollections304() {\n+        List<String> list = new LinkedList<String>();\n+        SetUniqueList<String> decoratedList = SetUniqueList.setUniqueList(list);\n+        String s1 = \"Apple\";\n+        String s2 = \"Lemon\";\n+        String s3 = \"Orange\";\n+        String s4 = \"Strawberry\";\n+\n+        decoratedList.add(s1);\n+        decoratedList.add(s2);\n+        decoratedList.add(s3);\n+\n+        assertEquals(3, decoratedList.size());\n+\n+        decoratedList.set(1, s4);\n+\n+        assertEquals(3, decoratedList.size());\n+\n+        decoratedList.add(1, s4);\n+\n+        assertEquals(3, decoratedList.size());\n+\n+        decoratedList.add(1, s2);\n+\n+        assertEquals(4, decoratedList.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testCollections307() {\n+        List<E> list = new ArrayList<E>();\n+        List<E> uniqueList = SetUniqueList.setUniqueList(list);\n+\n+        String hello = \"Hello\";\n+        String world = \"World\";\n+        uniqueList.add((E) hello);\n+        uniqueList.add((E) world);\n+\n+        List<E> subList = list.subList(0, 0);\n+        List<E> subUniqueList = uniqueList.subList(0, 0);\n+\n+        assertFalse(subList.contains(world)); // passes\n+        assertFalse(subUniqueList.contains(world)); // fails\n+\n+        List<E> worldList = new ArrayList<E>();\n+        worldList.add((E) world);\n+        assertFalse(subList.contains(\"World\")); // passes\n+        assertFalse(subUniqueList.contains(\"World\")); // fails\n+\n+        // repeat the test with a different class than HashSet;\n+        // which means subclassing SetUniqueList below\n+        list = new ArrayList<E>();\n+        uniqueList = new SetUniqueList307(list, new java.util.TreeSet<E>());\n+\n+        uniqueList.add((E) hello);\n+        uniqueList.add((E) world);\n+\n+        subList = list.subList(0, 0);\n+        subUniqueList = uniqueList.subList(0, 0);\n+\n+        assertFalse(subList.contains(world)); // passes\n+        assertFalse(subUniqueList.contains(world)); // fails\n+\n+        worldList = new ArrayList<E>();\n+        worldList.add((E) world);\n+        assertFalse(subList.contains(\"World\")); // passes\n+        assertFalse(subUniqueList.contains(\"World\")); // fails\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    class SetUniqueList307 extends SetUniqueList<E> {\n+        public SetUniqueList307(List<E> list, Set<E> set) {\n+            super(list, set);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/SynchronizedListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Extension of {@link AbstractListTest} for exercising the {@link SynchronizedList}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision$\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedListTest<E> extends AbstractListTest<E> {\n+\n+    public SynchronizedListTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public List<E> makeConfirmedCollection() {\n+        return new ArrayList<E>();\n+    }\n+\n+    @Override\n+    public List<E> makeObject() {\n+        return SynchronizedList.synchronizedList(new ArrayList<E>());\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedList.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedList.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/TransformedListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.collection.TransformedCollectionTest;\n+\n+/**\n+ * Extension of {@link AbstractListTest} for exercising the {@link TransformedList}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision$\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TransformedListTest<E> extends AbstractListTest<E> {\n+\n+    public TransformedListTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public List<E> makeConfirmedCollection() {\n+        return new ArrayList<E>();\n+    }\n+\n+    @Override\n+    public List<E> makeConfirmedFullCollection() {\n+        List<E> list = new ArrayList<E>();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<E> makeObject() {\n+        return TransformedList.transformingList(new ArrayList<E>(), (Transformer<E, E>) TransformedCollectionTest.NOOP_TRANSFORMER);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public List<E> makeFullCollection() {\n+        List<E> list = new ArrayList<E>();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return TransformedList.transformingList(list, (Transformer<E, E>) TransformedCollectionTest.NOOP_TRANSFORMER);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testTransformedList() {\n+        List<E> list = TransformedList.transformingList(new ArrayList<E>(), (Transformer<E, E>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, list.size());\n+        E[] els = (E[]) new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            list.add(els[i]);\n+            assertEquals(i + 1, list.size());\n+            assertEquals(true, list.contains(new Integer((String) els[i])));\n+            assertEquals(false, list.contains(els[i]));\n+        }\n+\n+        assertEquals(false, list.remove(els[0]));\n+        assertEquals(true, list.remove(new Integer((String) els[0])));\n+\n+        list.clear();\n+        for (int i = 0; i < els.length; i++) {\n+            list.add(0, els[i]);\n+            assertEquals(i + 1, list.size());\n+            assertEquals(new Integer((String) els[i]), list.get(0));\n+        }\n+\n+        list.set(0, (E) \"22\");\n+        assertEquals(new Integer(22), list.get(0));\n+\n+        ListIterator<E> it = list.listIterator();\n+        it.next();\n+        it.set((E) \"33\");\n+        assertEquals(new Integer(33), list.get(0));\n+        it.add((E) \"44\");\n+        assertEquals(new Integer(44), list.get(1));\n+\n+        List<E> adds = new ArrayList<E>();\n+        adds.add((E) \"1\");\n+        adds.add((E) \"2\");\n+        list.clear();\n+        list.addAll(adds);\n+        assertEquals(new Integer(1), list.get(0));\n+        assertEquals(new Integer(2), list.get(1));\n+\n+        adds.clear();\n+        adds.add((E) \"3\");\n+        list.addAll(1, adds);\n+        assertEquals(new Integer(1), list.get(0));\n+        assertEquals(new Integer(3), list.get(1));\n+        assertEquals(new Integer(2), list.get(2));\n+    }\n+\n+    public void testTransformedList_decorateTransform() {\n+        List<Object> originalList = new ArrayList<Object>();\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            originalList.add(els[i]);\n+        }\n+        List<?> list = TransformedList.transformedList(originalList, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, list.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, list.contains(new Integer((String) els[i])));\n+            assertEquals(false, list.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, list.remove(els[0]));\n+        assertEquals(true, list.remove(new Integer((String) els[0])));\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/TransformedList.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/TransformedList.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/TreeListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * JUnit tests\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision$\n+ *\n+ * @author Joerg Schmuecker\n+ */\n+public class TreeListTest<E> extends AbstractListTest<E> {\n+\n+    public TreeListTest(String name) {\n+        super(name);\n+    }\n+\n+//    public static void main(String[] args) {\n+//        junit.textui.TestRunner.run(suite());\n+//        System.out.println(\"         add; toArray; iterator; insert; get; indexOf; remove\");\n+//        System.out.print(\"   TreeList = \");\n+//        benchmark(new TreeList());\n+//        System.out.print(\"\\n  ArrayList = \");\n+//        benchmark(new java.util.ArrayList());\n+//        System.out.print(\"\\n LinkedList = \");\n+//        benchmark(new java.util.LinkedList());\n+//        benchmark(new NodeCachingLinkedList());\n+//    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TreeListTest.class);\n+    }\n+\n+    public static void benchmark(List<? super Integer> l) {\n+        long start = System.currentTimeMillis();\n+        for (int i = 0; i < 100000; i++) {\n+            l.add(new Integer(i));\n+        }\n+        System.out.print(System.currentTimeMillis() - start + \";\");\n+\n+        start = System.currentTimeMillis();\n+        for (int i = 0; i < 200; i++) {\n+            l.toArray();\n+        }\n+        System.out.print(System.currentTimeMillis() - start + \";\");\n+\n+        start = System.currentTimeMillis();\n+        for (int i = 0; i < 100; i++) {\n+            java.util.Iterator<? super Integer> it = l.iterator();\n+            while (it.hasNext()) {\n+                it.next();\n+            }\n+        }\n+        System.out.print(System.currentTimeMillis() - start + \";\");\n+\n+        start = System.currentTimeMillis();\n+        for (int i = 0; i < 10000; i++) {\n+            int j = (int) (Math.random() * 100000);\n+            l.add(j, new Integer(-j));\n+        }\n+        System.out.print(System.currentTimeMillis() - start + \";\");\n+\n+        start = System.currentTimeMillis();\n+        for (int i = 0; i < 50000; i++) {\n+            int j = (int) (Math.random() * 110000);\n+            l.get(j);\n+        }\n+        System.out.print(System.currentTimeMillis() - start + \";\");\n+\n+        start = System.currentTimeMillis();\n+        for (int i = 0; i < 200; i++) {\n+            int j = (int) (Math.random() * 100000);\n+            l.indexOf(new Integer(j));\n+        }\n+        System.out.print(System.currentTimeMillis() - start + \";\");\n+\n+        start = System.currentTimeMillis();\n+        for (int i = 0; i < 10000; i++) {\n+            int j = (int) (Math.random() * 100000);\n+            l.remove(j);\n+        }\n+        System.out.print(System.currentTimeMillis() - start + \";\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public TreeList<E> makeObject() {\n+        return new TreeList<E>();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testAddMultiple() {\n+        List<E> l = makeObject();\n+        l.add((E) \"hugo\");\n+        l.add((E) \"erna\");\n+        l.add((E) \"daniel\");\n+        l.add((E) \"andres\");\n+        l.add((E) \"harald\");\n+        l.add(0, null);\n+        assertEquals(null, l.get(0));\n+        assertEquals(\"hugo\", l.get(1));\n+        assertEquals(\"erna\", l.get(2));\n+        assertEquals(\"daniel\", l.get(3));\n+        assertEquals(\"andres\", l.get(4));\n+        assertEquals(\"harald\", l.get(5));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemove() {\n+        List<E> l = makeObject();\n+        l.add((E) \"hugo\");\n+        l.add((E) \"erna\");\n+        l.add((E) \"daniel\");\n+        l.add((E) \"andres\");\n+        l.add((E) \"harald\");\n+        l.add(0, null);\n+        int i = 0;\n+        assertEquals(null, l.get(i++));\n+        assertEquals(\"hugo\", l.get(i++));\n+        assertEquals(\"erna\", l.get(i++));\n+        assertEquals(\"daniel\", l.get(i++));\n+        assertEquals(\"andres\", l.get(i++));\n+        assertEquals(\"harald\", l.get(i++));\n+\n+        l.remove(0);\n+        i = 0;\n+        assertEquals(\"hugo\", l.get(i++));\n+        assertEquals(\"erna\", l.get(i++));\n+        assertEquals(\"daniel\", l.get(i++));\n+        assertEquals(\"andres\", l.get(i++));\n+        assertEquals(\"harald\", l.get(i++));\n+\n+        i = 0;\n+        l.remove(1);\n+        assertEquals(\"hugo\", l.get(i++));\n+        assertEquals(\"daniel\", l.get(i++));\n+        assertEquals(\"andres\", l.get(i++));\n+        assertEquals(\"harald\", l.get(i++));\n+\n+        i = 0;\n+        l.remove(2);\n+        assertEquals(\"hugo\", l.get(i++));\n+        assertEquals(\"daniel\", l.get(i++));\n+        assertEquals(\"harald\", l.get(i++));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testInsertBefore() {\n+        List<E> l = makeObject();\n+        l.add((E) \"erna\");\n+        l.add(0, (E) \"hugo\");\n+        assertEquals(\"hugo\", l.get(0));\n+        assertEquals(\"erna\", l.get(1));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIndexOf() {\n+        List<E> l = makeObject();\n+        l.add((E) \"0\");\n+        l.add((E) \"1\");\n+        l.add((E) \"2\");\n+        l.add((E) \"3\");\n+        l.add((E) \"4\");\n+        l.add((E) \"5\");\n+        l.add((E) \"6\");\n+        assertEquals(0, l.indexOf(\"0\"));\n+        assertEquals(1, l.indexOf(\"1\"));\n+        assertEquals(2, l.indexOf(\"2\"));\n+        assertEquals(3, l.indexOf(\"3\"));\n+        assertEquals(4, l.indexOf(\"4\"));\n+        assertEquals(5, l.indexOf(\"5\"));\n+        assertEquals(6, l.indexOf(\"6\"));\n+\n+        l.set(1, (E) \"0\");\n+        assertEquals(0, l.indexOf(\"0\"));\n+\n+        l.set(3, (E) \"3\");\n+        assertEquals(3, l.indexOf(\"3\"));\n+        l.set(2, (E) \"3\");\n+        assertEquals(2, l.indexOf(\"3\"));\n+        l.set(1, (E) \"3\");\n+        assertEquals(1, l.indexOf(\"3\"));\n+        l.set(0, (E) \"3\");\n+        assertEquals(0, l.indexOf(\"3\"));\n+    }\n+\n+//    public void testCheck() {\n+//        List l = makeEmptyList();\n+//        l.add(\"A1\");\n+//        l.add(\"A2\");\n+//        l.add(\"A3\");\n+//        l.add(\"A4\");\n+//        l.add(\"A5\");\n+//        l.add(\"A6\");\n+//    }\n+\n+    public void testBug35258() {\n+        Object objectToRemove = new Integer(3);\n+\n+        List<Integer> treelist = new TreeList<Integer>();\n+        treelist.add(new Integer(0));\n+        treelist.add(new Integer(1));\n+        treelist.add(new Integer(2));\n+        treelist.add(new Integer(3));\n+        treelist.add(new Integer(4));\n+\n+        // this cause inconsistence of ListIterator()\n+        treelist.remove(objectToRemove);\n+\n+        ListIterator<Integer> li = treelist.listIterator();\n+        assertEquals(new Integer(0), li.next());\n+        assertEquals(new Integer(0), li.previous());\n+        assertEquals(new Integer(0), li.next());\n+        assertEquals(new Integer(1), li.next());\n+        // this caused error in bug 35258\n+        assertEquals(new Integer(1), li.previous());\n+        assertEquals(new Integer(1), li.next());\n+        assertEquals(new Integer(2), li.next());\n+        assertEquals(new Integer(2), li.previous());\n+        assertEquals(new Integer(2), li.next());\n+        assertEquals(new Integer(4), li.next());\n+        assertEquals(new Integer(4), li.previous());\n+        assertEquals(new Integer(4), li.next());\n+        assertEquals(false, li.hasNext());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/list/UnmodifiableListTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Extension of {@link AbstractListTest} for exercising the\n+ * {@link UnmodifiableList} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision$\n+ *\n+ * @author Phil Steitz\n+ */\n+public class UnmodifiableListTest<E> extends AbstractListTest<E> {\n+\n+    public UnmodifiableListTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    public UnmodifiableList<E> makeObject() {\n+        return new UnmodifiableList<E>(new ArrayList<E>());\n+    }\n+\n+    @Override\n+    public UnmodifiableList<E> makeFullCollection() {\n+        ArrayList<E> list = new ArrayList<E>();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return new UnmodifiableList<E>(list);\n+    }\n+\n+    @Override\n+    public boolean isSetSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isAddSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    protected UnmodifiableList<E> list;\n+    protected ArrayList<E> array;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected void setupList() {\n+        list = makeFullCollection();\n+        array = new ArrayList<E>();\n+        array.add((E) new Integer(1));\n+    }\n+\n+    /**\n+     * Verify that base list and sublists are not modifiable\n+     */\n+    public void testUnmodifiable() {\n+        setupList();\n+        verifyUnmodifiable(list);\n+        verifyUnmodifiable(list.subList(0, 2));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected void verifyUnmodifiable(List<E> list) {\n+        try {\n+            list.add(0, (E) new Integer(0));\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.add((E) new Integer(0));\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.addAll(0, array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.addAll(array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.clear();\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.remove(0);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.remove(new Integer(0));\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.removeAll(array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.retainAll(array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.set(0, (E) new Integer(0));\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     * Verify that iterator is not modifiable\n+     */\n+    public void testUnmodifiableIterator() {\n+        setupList();\n+        Iterator<E> iterator = list.iterator();\n+        try {\n+            iterator.next();\n+            iterator.remove();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/UnmodifiableList.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/UnmodifiableList.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- a/src/test/java/org/apache/commons/collections/map/TestLinkedMap.java\n+++ b/src/test/java/org/apache/commons/collections/map/TestLinkedMap.java\n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.OrderedMap;\n import org.apache.commons.collections.ResettableIterator;\n-import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractListTest;\n \n /**\n  * JUnit tests.\n         return new TestListView();\n     }\n \n-    public class TestListView extends AbstractTestList<K> {\n+    public class TestListView extends AbstractListTest<K> {\n \n         TestListView() {\n             super(\"TestListView\");\n--- a/src/test/java/org/apache/commons/collections/map/TestListOrderedMap.java\n+++ b/src/test/java/org/apache/commons/collections/map/TestListOrderedMap.java\n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.OrderedMapIterator;\n-import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractListTest;\n \n /**\n  * Extension of {@link AbstractTestOrderedMap} for exercising the {@link ListOrderedMap}\n     }\n \n     //-----------------------------------------------------------------------\n-    public class TestKeyListView extends AbstractTestList<K> {\n+    public class TestKeyListView extends AbstractListTest<K> {\n         TestKeyListView() {\n             super(\"TestKeyListView\");\n         }\n     }\n \n     //-----------------------------------------------------------------------\n-    public class TestValueListView extends AbstractTestList<V> {\n+    public class TestValueListView extends AbstractListTest<V> {\n         TestValueListView() {\n             super(\"TestValueListView\");\n         }\n--- a/src/test/java/org/apache/commons/collections/map/TestListOrderedMap2.java\n+++ b/src/test/java/org/apache/commons/collections/map/TestListOrderedMap2.java\n \n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.MapIterator;\n-import org.apache.commons.collections.list.AbstractTestList;\n+import org.apache.commons.collections.list.AbstractListTest;\n \n /**\n  * Extension of {@link AbstractTestOrderedMap} for exercising the {@link ListOrderedMap}\n         return new TestListView();\n     }\n \n-    public class TestListView extends AbstractTestList<K> {\n+    public class TestListView extends AbstractListTest<K> {\n \n         TestListView() {\n             super(\"TestListView\");", "timestamp": 1344286252, "metainfo": ""}