{"sha": "b24253a157fc0860dfb2225f3eb35f54d96f188d", "log": "Cleanup of collection package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/collection/AbstractCollectionDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/collection/AbstractCollectionDecorator.java\n  *\n  * @param <E> the type of the elements in the collection\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public abstract class AbstractCollectionDecorator<E>\n         implements Collection<E>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/collection/AbstractUntypedCollectionDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/collection/AbstractUntypedCollectionDecorator.java\n  *\n  * @param <D> the type of the elements in the decorated collection\n  * @param <E> the element type of the Collection implementation\n- * @since Commons Collections 5\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n- * @author Matt Benson\n+ * @since Commons Collections 4.0\n+ * @version $Id$\n  */\n public abstract class AbstractUntypedCollectionDecorator<E, D> implements Collection<E>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/collection/CompositeCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/CompositeCollection.java\n  *\n  * @param <E> the type of the elements in the collection\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Brian McCallister\n- * @author Stephen Colebourne\n- * @author Phil Steitz\n+ * @version $Id$\n  */\n public class CompositeCollection<E> implements Collection<E>, Serializable {\n \n      * Returns an object array, populating the supplied array if possible.\n      * See <code>Collection</code> interface for full details.\n      *\n+     * @param <T>  the type of the elements in the collection\n      * @param array  the array to use, populating if possible\n      * @return an array of all the elements in the collection\n      */\n      * unless a CollectionMutator strategy is specified.\n      *\n      * @param obj  the object to add\n-     * @return true if the collection was modified\n+     * @return {@code true} if the collection was modified\n      * @throws UnsupportedOperationException if CollectionMutator hasn't been set\n      * @throws UnsupportedOperationException if add is unsupported\n      * @throws ClassCastException if the object cannot be added due to its type\n          * @throws NullPointerException if the object cannot be added because its null\n          * @throws IllegalArgumentException if the object cannot be added\n          */\n-        public boolean addAll(CompositeCollection<E> composite, List<Collection<E>> collections, Collection<? extends E> coll);\n+        public boolean addAll(CompositeCollection<E> composite,\n+                              List<Collection<E>> collections,\n+                              Collection<? extends E> coll);\n \n         /**\n          * Called when an object is to be removed to the composite.\n--- a/src/main/java/org/apache/commons/collections/collection/PredicatedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/PredicatedCollection.java\n import org.apache.commons.collections.Predicate;\n \n /**\n- * Decorates another <code>Collection</code> to validate that additions\n+ * Decorates another {@link Collection} to validate that additions\n  * match a specified predicate.\n  * <p>\n  * This collection exists to provide validation for the decorated collection.\n  *\n  * @param <E> the type of the elements in the collection\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class PredicatedCollection<E> extends AbstractCollectionDecorator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n import java.util.Iterator;\n \n /**\n- * Decorates another <code>Collection</code> to synchronize its behaviour\n+ * Decorates another {@link Collection} to synchronize its behaviour\n  * for a multi-threaded environment.\n  * <p>\n  * Iterators must be manually synchronized:\n  *\n  * @param <E> the type of the elements in the collection\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class SynchronizedCollection<E> implements Collection<E>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n import org.apache.commons.collections.Transformer;\n \n /**\n- * Decorates another <code>Collection</code> to transform objects that are added.\n+ * Decorates another {@link Collection} to transform objects that are added.\n  * <p>\n  * The add methods are affected by this class.\n  * Thus objects must be removed or searched for using their transformed form.\n  *\n  * @param <E> the type of the elements in the collection\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TransformedCollection<E> extends AbstractCollectionDecorator<E> {\n \n--- a/src/main/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n import org.apache.commons.collections.iterators.UnmodifiableIterator;\n \n /**\n- * <code>UnmodifiableBoundedCollection</code> decorates another\n- * <code>BoundedCollection</code> to ensure it can't be altered.\n+ * {@link UnmodifiableBoundedCollection} decorates another\n+ * {@link BoundedCollection} to ensure it can't be altered.\n  * <p>\n  * If a BoundedCollection is first wrapped in some other collection decorator,\n  * such as synchronized or predicated, the BoundedCollection methods are no\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableBoundedCollection<E> extends AbstractCollectionDecorator<E>\n         implements BoundedCollection<E> {\n--- a/src/main/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n import org.apache.commons.collections.iterators.UnmodifiableIterator;\n \n /**\n- * Decorates another <code>Collection</code> to ensure it can't be altered.\n+ * Decorates another {@link Collection} to ensure it can't be altered.\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  * <p>\n  *\n  * @param <E> the type of the elements in the collection\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableCollection<E>\n         extends AbstractCollectionDecorator<E>\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/collection/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * This package contains implementations of the\n+ * {@link java.util.Collection Collection} interface.\n+ * <p>\n+ * The following implementations are provided in the package:\n+ * <ul>\n+ *   <li>CompositeCollection - a collection that combines multiple collections into one\n+ * </ul>\n+ * The following decorators are provided in the package:\n+ * <ul>\n+ *   <li>Synchronized - synchronizes method access for multi-threaded environments\n+ *   <li>Unmodifiable - ensures the collection cannot be altered\n+ *   <li>Predicated - ensures that only elements that are valid according to a predicate can be added\n+ *   <li>Typed - ensures that only elements that are of a specific type can be added\n+ *   <li>Transformed - transforms elements as they are added\n+ * </ul>\n+ * \n+ * @version $Id$\n+ */\n+package org.apache.commons.collections.collection;", "timestamp": 1341348543, "metainfo": ""}