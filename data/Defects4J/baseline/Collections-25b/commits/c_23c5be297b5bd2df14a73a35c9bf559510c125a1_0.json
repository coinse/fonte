{"sha": "23c5be297b5bd2df14a73a35c9bf559510c125a1", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471192 | scolebourne | 2006-11-04 06:04:46 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getList() - use decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/GrowthList.java\n+++ b/src/java/org/apache/commons/collections/list/GrowthList.java\n  * @author Stephen Colebourne\n  * @author Paul Legato\n  */\n-public class GrowthList extends AbstractSerializableListDecorator {\n+public class GrowthList<E> extends AbstractSerializableListDecorator<E> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = -3620001881672L;\n      * @param list  the list to decorate, must not be null\n      * @throws IllegalArgumentException if list is null\n      */\n-    public static List decorate(List list) {\n-        return new GrowthList(list);\n+    public static <E> List<E> decorate(List<E> list) {\n+        return new GrowthList<E>(list);\n     }\n \n     //-----------------------------------------------------------------------\n      * Constructor that uses an ArrayList internally.\n      */\n     public GrowthList() {\n-        super(new ArrayList());\n+        super(new ArrayList<E>());\n     }\n \n     /**\n      * @throws IllegalArgumentException if initial size is invalid\n      */\n     public GrowthList(int initialSize) {\n-        super(new ArrayList(initialSize));\n+        super(new ArrayList<E>(initialSize));\n     }\n \n     /**\n      * @param list  the list to decorate, must not be null\n      * @throws IllegalArgumentException if list is null\n      */\n-    protected GrowthList(List list) {\n+    protected GrowthList(List<E> list) {\n         super(list);\n     }\n \n      * @throws ClassCastException if the underlying list rejects the element\n      * @throws IllegalArgumentException if the underlying list rejects the element\n      */\n-    public void add(int index, Object element) {\n-        int size = getList().size();\n+    public void add(int index, E element) {\n+        int size = decorated().size();\n         if (index > size) {\n-            getList().addAll(Collections.nCopies(index - size, null));\n+            decorated().addAll(Collections.<E>nCopies(index - size, null));\n         }\n-        getList().add(index, element);\n+        decorated().add(index, element);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws ClassCastException if the underlying list rejects the element\n      * @throws IllegalArgumentException if the underlying list rejects the element\n      */\n-    public boolean addAll(int index, Collection coll) {\n-        int size = getList().size();\n+    public boolean addAll(int index, Collection<? extends E> coll) {\n+        int size = decorated().size();\n         boolean result = false;\n         if (index > size) {\n-            getList().addAll(Collections.nCopies(index - size, null));\n+            decorated().addAll(Collections.<E>nCopies(index - size, null));\n             result = true;\n         }\n-        return (getList().addAll(index, coll) | result);\n+        return (decorated().addAll(index, coll) | result);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws ClassCastException if the underlying list rejects the element\n      * @throws IllegalArgumentException if the underlying list rejects the element\n      */\n-    public Object set(int index, Object element) {\n-        int size = getList().size();\n+    public E set(int index, E element) {\n+        int size = decorated().size();\n         if (index >= size) {\n-            getList().addAll(Collections.nCopies((index - size) + 1, null));\n+            decorated().addAll(Collections.<E>nCopies((index - size) + 1, null));\n         }\n-        return getList().set(index, element);\n+        return decorated().set(index, element);\n     }\n \n }", "timestamp": 1252994139, "metainfo": ""}