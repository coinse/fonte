{"sha": "21c62eb49ca6093ebb4b8525eee810a96fb29fd8", "log": "added tests for ComparatorChain class   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.22 2002/03/01 19:06:44 morgand Exp $\n- * $Revision: 1.22 $\n- * $Date: 2002/03/01 19:06:44 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.23 2002/03/01 23:31:35 morgand Exp $\n+ * $Revision: 1.23 $\n+ * $Date: 2002/03/01 23:31:35 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.22 2002/03/01 19:06:44 morgand Exp $\n+ * @version $Id: TestAll.java,v 1.23 2002/03/01 23:31:35 morgand Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestBeanMap.suite());\n         suite.addTest(TestCollectionUtils.suite());\n         suite.addTest(TestComparableComparator.suite());\n+        suite.addTest(TestComparatorChain.suite());\n         suite.addTest(TestCursorableLinkedList.suite());\n         suite.addTest(TestDoubleOrderedMap.suite());\n         suite.addTest(TestExtendedProperties.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n+package org.apache.commons.collections.comparators;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+public class TestComparatorChain extends TestComparator {\n+\n+    public TestComparatorChain(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestComparatorChain.class);\n+    }\n+\n+    /**\n+     * \n+     * @return \n+     */\n+    public Comparator makeComparator() {\n+        ComparatorChain chain = new ComparatorChain(new ColumnComparator(0));\n+        chain.addComparator(new ColumnComparator(1),true); // reverse the second column\n+        chain.addComparator(new ColumnComparator(2),false);\n+        return chain;\n+    }\n+\n+    public List getComparableObjectsOrdered() {\n+        List list = new LinkedList();\n+        // this is the correct order assuming a\n+        // \"0th forward, 1st reverse, 2nd forward\" sort\n+        list.add(new PseudoRow(1,2,3));\n+        list.add(new PseudoRow(2,3,5));\n+        list.add(new PseudoRow(2,2,4));\n+        list.add(new PseudoRow(2,2,8));\n+        list.add(new PseudoRow(3,1,0));\n+        list.add(new PseudoRow(4,4,4));\n+        list.add(new PseudoRow(4,4,7));\n+        return list;\n+    }\n+\n+    public static class PseudoRow implements Serializable {\n+\n+        public int cols[] = new int[3];\n+\n+        public PseudoRow(int col1, int col2, int col3) {\n+            cols[0] = col1;\n+            cols[1] = col2;\n+            cols[2] = col3;\n+        }\n+\n+        public int getColumn(int colIndex) {\n+            return cols[colIndex];\n+        }\n+\n+        public String toString() {\n+            StringBuffer buf = new StringBuffer();\n+            buf.append(\"[\");\n+            buf.append(cols[0]);\n+            buf.append(\",\");\n+            buf.append(cols[1]);\n+            buf.append(\",\");\n+            buf.append(cols[2]);\n+            buf.append(\"]\");\n+            return buf.toString();\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (!(o instanceof PseudoRow)) {\n+                return false;\n+            }\n+\n+            PseudoRow row = (PseudoRow) o;\n+            if (getColumn(0) != row.getColumn(0)) {\n+                return false;\n+            }\n+\n+            if (getColumn(1) != row.getColumn(1)) {\n+                return false;\n+            }            \n+            \n+            if (getColumn(2) != row.getColumn(2)) {\n+                return false;\n+            }\n+\n+            return true;\n+        }\n+\n+    }\n+\n+    public static class ColumnComparator implements Comparator,Serializable {\n+\n+        protected int colIndex = 0;\n+\n+        public ColumnComparator(int colIndex) {\n+            this.colIndex = colIndex;\n+        }\n+\n+        public int compare(Object o1, Object o2) {\n+\n+            int col1 = ( (PseudoRow) o1).getColumn(colIndex);\n+            int col2 = ( (PseudoRow) o2).getColumn(colIndex);\n+\n+            if (col1 > col2) {\n+                return 1;\n+            } else if (col1 < col2) {\n+                return -1;\n+            }\n+\n+            return 0;\n+        }\n+    }\n+}", "timestamp": 1015025495, "metainfo": ""}