{"sha": "4eee185efdfd5ba82c3e92576a2384e0e62bfa13", "log": "Remove dependency on functor subpackage   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n \n import org.apache.commons.collections.ArrayStack;\n import org.apache.commons.collections.Transformer;\n-import org.apache.commons.collections.TransformerUtils;\n \n /**\n  * An Iterator that can traverse multiple iterators down an object graph.\n  * more efficient (and convenient) than using nested for loops to extract a list.\n  * \n  * @since Commons Collections 3.1\n- * @version $Revision: 1.1 $ $Date: 2004/03/20 00:21:08 $\n+ * @version $Revision: 1.2 $ $Date: 2004/05/03 11:38:49 $\n  * \n  * @author Stephen Colebourne\n  */\n         } else {\n             this.root = root;\n         }\n-        this.transformer = (transformer == null ? TransformerUtils.nopTransformer() : transformer);\n+        this.transformer = transformer;\n     }\n \n     /**\n     public ObjectGraphIterator(Iterator rootIterator) {\n         super();\n         this.currentIterator = rootIterator;\n-        this.transformer = TransformerUtils.nopTransformer();\n+        this.transformer = null;\n     }\n \n     //-----------------------------------------------------------------------\n             if (root == null) {\n                 // do nothing, hasNext will be false\n             } else {\n-                Object value = transformer.transform(root);\n-                findNext(value);\n+                if (transformer == null) {\n+                    findNext(root);\n+                } else {\n+                    findNext(transformer.transform(root));\n+                }\n                 root = null;\n             }\n         } else {\n             \n             while (currentIterator.hasNext() && hasNext == false) {\n                 Object next = currentIterator.next();\n-                next = transformer.transform(next);\n+                if (transformer != null) {\n+                    next = transformer.transform(next);\n+                }\n                 findNext(next);\n             }\n             if (hasNext) {", "timestamp": 1083584329, "metainfo": ""}