{"sha": "04c90229bb4adcdfbb254384f1a7e3cdd59558b6", "log": "Updated logic in put() to remove pair on duplicate value.  Because of this, TestBidiMap can no longer extend TestMap since this seems to break the Map contract.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/HashBidiMap.java\n+++ b/src/java/org/apache/commons/collections/HashBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/HashBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/HashBidiMap.java,v 1.2 2003/09/26 23:28:43 matth Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n+import java.io.Serializable;\n import java.util.AbstractMap;\n import java.util.AbstractSet;\n import java.util.HashMap;\n  * Default implementation of <code>BidiMap</code>.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: HashBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n+ * @version $Id: HashBidiMap.java,v 1.2 2003/09/26 23:28:43 matth Exp $\n  * \n  * @author Matthew Hawthorne\n  */\n-public class HashBidiMap extends AbstractMap implements BidiMap {\n-\n-    /**\n-     * Delegate map array.  The first map contains standards entries, and the \n+public class HashBidiMap extends AbstractMap implements BidiMap, Serializable {\n+\n+    /**\n+     * Delegate map array.  The first map contains standard entries, and the \n      * second contains inverses.\n      */\n     final Map[] maps = new Map[] { new HashMap(), new HashMap()};\n     }\n \n     public Object put(Object key, Object value) {\n+        // Removes pair from standard map if a previous inverse entry exists\n+        final Object oldValue = maps[1].put(value, key);\n+        if (oldValue != null) {\n+            maps[0].remove(oldValue);\n+        }\n+        \n         final Object obj = maps[0].put(key, value);\n-        maps[1].put(value, key);\n         return obj;\n     }\n \n     public Set entrySet() {\n         // The entrySet is the root of most Map methods, care must be taken not \n         // to reference instance methods like size()\n-        \n+\n         // Creates anonymous AbstractSet\n         return new AbstractSet() {\n-            \n+\n             public Iterator iterator() {\n                 // Creates anonymous Iterator\n                 return new Iterator() {\n \n                     // Delegate iterator.\n                     final Iterator it = maps[0].entrySet().iterator();\n-                    \n+\n                     // Current iterator entry\n                     Map.Entry currentEntry;\n \n                     public void remove() {\n                         // Removes from standard and inverse Maps.\n-                        \n+\n                         // Object must be removed using the iterator or a \n                         // ConcurrentModificationException is thrown\n                         it.remove();\n             public int size() {\n                 return HashBidiMap.this.maps[0].size();\n             }\n-            \n+\n         }; // anonymous AbstractSet\n \n     } // entrySet()\n                     }; // anonymous Iterator\n                 }\n \n-            };  // anonymous AbstractSet\n-            \n+            }; // anonymous AbstractSet\n+\n         } // entrySet()\n \n     } // InverseBidiMap\n--- a/src/test/org/apache/commons/collections/TestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/TestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.2 2003/09/26 23:28:43 matth Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.Map;\n \n+import junit.framework.TestCase;\n+\n /**\n  * JUnit tests.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: TestBidiMap.java,v 1.1 2003/09/23 20:29:34 matth Exp $\n+ * @version $Id: TestBidiMap.java,v 1.2 2003/09/26 23:28:43 matth Exp $\n  * @see org.apache.commons.collections.BidiMap\n  */\n-public abstract class TestBidiMap extends TestMap {\n+public abstract class TestBidiMap extends TestCase {\n \n     // Test data.\n     private static final Object KEY = \"key1\";\n             inverseMap.getKey(entries[0][0]));\n     }\n \n+    /**\n+     * Ensures that calling:\n+     * \n+     * <pre>\n+     * map.add(a, c)\n+     * map.add(b, c)\n+     * </pre>\n+     * \n+     * Removes the entry (a, c)\n+     */\n+    public void testAddDuplicateValue() {\n+        final BidiMap map = createBidiMap();\n+\n+        final Object key1 = \"key1\";\n+        final Object key2 = \"key2\";\n+        final Object value = \"value\";\n+\n+        map.put(key1, value);\n+        map.put(key2, value);\n+\n+        assertTrue(\n+            \"Key/value pair was not removed on duplicate value.\",\n+            !map.containsKey(key1));\n+            \n+        assertEquals(\"Key/value mismatch\", key2, map.getKey(value));\n+    }\n+\n+    // ----------------------------------------------------------------\n     // Removal tests\n+    // ----------------------------------------------------------------\n \n     public void testClear() {\n         BidiMap map = createBidiMapWithData();\n     public void testRemove() {\n         remove(createBidiMapWithData(), KEY);\n         remove(createBidiMapWithData().inverseBidiMap(), VALUE);\n-        \n+\n         removeKey(createBidiMapWithData(), VALUE);\n         removeKey(createBidiMapWithData().inverseBidiMap(), KEY);\n     }\n         assertTrue(\"Key was not removed.\", !map.containsKey(key));\n         assertNull(\"Value was not removed.\", map.getKey(value));\n     }\n-    \n+\n     private final void removeKey(BidiMap map, Object value) {\n         final Object key = map.removeKey(value);\n         assertTrue(\"Key was not removed.\", !map.containsKey(key));\n     // Data generation methods\n     // ----------------------------------------------------------------\n \n+    /**\n+     * This classes used to extend collections.TestMap, but can't anymore since \n+     * put() breaks a contract.\n+     */\n     protected Map makeEmptyMap() {\n         return createBidiMap();\n     }\n \n-    private final BidiMap createBidiMapWithData() {\n+    protected final BidiMap createBidiMapWithData() {\n         final BidiMap map = createBidiMap();\n         fillMap(map);\n         return map;", "timestamp": 1064618923, "metainfo": ""}