{"sha": "719d0c56036111d07c46ab5b0f379f62f14ecdc6", "log": "Rename CompliantBag to CollectionBag.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/BagUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/BagUtils.java\n  */\n package org.apache.commons.collections4;\n \n-import org.apache.commons.collections4.bag.CompliantBag;\n+import org.apache.commons.collections4.bag.CollectionBag;\n import org.apache.commons.collections4.bag.HashBag;\n import org.apache.commons.collections4.bag.PredicatedBag;\n import org.apache.commons.collections4.bag.PredicatedSortedBag;\n      * @throws IllegalArgumentException if bag is null\n      * @since 4.0\n      */\n-    public static <E> Bag<E> compliantBag(final Bag<E> bag) {\n-        return CompliantBag.compliantBag(bag);\n+    public static <E> Bag<E> collectionBag(final Bag<E> bag) {\n+        return CollectionBag.collectionBag(bag);\n     }\n \n     //-----------------------------------------------------------------------\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections4/bag/CollectionBag.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.bag;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections4.Bag;\n+\n+/**\n+ * Decorates another {@link Bag} to comply with the Collection contract.\n+ *\n+ * @since 4.0\n+ * @version $Id$\n+ */\n+public final class CollectionBag<E>\n+        extends AbstractBagDecorator<E> implements Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = -2560033712679053143L;\n+\n+    /**\n+     * Factory method to create a bag that complies to the Collection contract.\n+     *\n+     * @param <E> the type of the elements in the bag\n+     * @param bag  the bag to decorate, must not be null\n+     * @return a Bag that complies to the Collection contract\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    public static <E> Bag<E> collectionBag(final Bag<E> bag) {\n+        return new CollectionBag<E>(bag);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     *\n+     * @param bag  the bag to decorate, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    public CollectionBag(final Bag<E> bag) {\n+        super(bag);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the collection out using a custom routine.\n+     *\n+     * @param out  the output stream\n+     * @throws IOException\n+     */\n+    private void writeObject(final ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(decorated());\n+    }\n+\n+    /**\n+     * Read the collection in using a custom routine.\n+     *\n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     * @throws ClassCastException if deserialised object has wrong type\n+     */\n+    @SuppressWarnings(\"unchecked\") // will throw CCE, see Javadoc\n+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        setCollection((Collection<E>) in.readObject());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // Collection interface\n+    //-----------------------------------------------------------------------\n+\n+    @Override\n+    public boolean containsAll(final Collection<?> coll) {\n+        final Iterator<?> e = coll.iterator();\n+        while (e.hasNext()) {\n+            if(!contains(e.next())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean add(final E object) {\n+        return add(object, 1);\n+    }\n+\n+    @Override\n+    public boolean addAll(final Collection<? extends E> coll) {\n+        boolean changed = false;\n+        final Iterator<? extends E> i = coll.iterator();\n+        while (i.hasNext()) {\n+            final boolean added = add(i.next(), 1);\n+            changed = changed || added;\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public boolean remove(final Object object) {\n+        return remove(object, 1);\n+    }\n+\n+    @Override\n+    public boolean removeAll(final Collection<?> coll) {\n+        boolean result = false;\n+        if (coll != null) {\n+            final Iterator<?> i = coll.iterator();\n+            while (i.hasNext()) {\n+                final Object obj = i.next();\n+                final boolean changed = remove(obj, getCount(obj));\n+                result = result || changed;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean retainAll(final Collection<?> coll) {\n+        boolean modified = false;\n+        final Iterator<E> e = iterator();\n+        while (e.hasNext()) {\n+            if (!coll.contains(e.next())) {\n+                e.remove();\n+                modified = true;\n+            }\n+        }\n+        return modified;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // Bag interface\n+    //-----------------------------------------------------------------------\n+\n+    public boolean add(final E object, final int count) {\n+        decorated().add(object, count);\n+        return true;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections4/bag/CollectionBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.bag;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections4.Bag;\n+import org.apache.commons.collections4.bag.HashBag;\n+import org.apache.commons.collections4.collection.AbstractCollectionTest;\n+\n+/**\n+ * Test class for {@link CollectionBag}.\n+ *\n+ * @version $Id$\n+ * @since 4.0\n+ */\n+public class CollectionBagTest<T> extends AbstractCollectionTest<T> {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param testName  the test class name\n+     */\n+    public CollectionBagTest(final String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    \n+    @Override\n+    public Bag<T> makeObject() {\n+        return CollectionBag.collectionBag(new HashBag<T>());\n+    }\n+\n+    /**\n+     * Returns an empty List for use in modification testing.\n+     *\n+     * @return a confirmed empty collection\n+     */\n+    @Override\n+    public Collection<T> makeConfirmedCollection() {\n+        return new ArrayList<T>();\n+    }\n+\n+    /**\n+     * Returns a full Set for use in modification testing.\n+     *\n+     * @return a confirmed full collection\n+     */\n+    @Override\n+    public Collection<T> makeConfirmedFullCollection() {\n+        final Collection<T> set = makeConfirmedCollection();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"4\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        Bag bag = makeObject();\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/CollectionBag.emptyCollection.version4.obj\");\n+//        bag = makeObject();\n+//        bag.add(\"A\");\n+//        bag.add(\"A\");\n+//        bag.add(\"B\");\n+//        bag.add(\"B\");\n+//        bag.add(\"C\");\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"src/test/resources/data/test/CollectionBag.fullCollection.version4.obj\");\n+//    }\n+    \n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagAdd() {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+        bag.add((T) \"A\");\n+        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+        bag.add((T) \"B\");\n+        assertTrue(bag.contains(\"A\"));\n+        assertTrue(bag.contains(\"B\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagEqualsSelf() {\n+        final Bag<T> bag = makeObject();\n+        assertTrue(bag.equals(bag));\n+        bag.add((T) \"elt\");\n+        assertTrue(bag.equals(bag));\n+        bag.add((T) \"elt\"); // again\n+        assertTrue(bag.equals(bag));\n+        bag.add((T) \"elt2\");\n+        assertTrue(bag.equals(bag));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemove() {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+        bag.remove(\"A\");\n+        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n+        bag.remove(\"A\", 0);\n+        assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n+        bag.remove(\"A\", 2);\n+        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+        bag.remove(\"A\");\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveAll() {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\", 2);\n+        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        assertEquals(\"Should have count of 4\", 4, bag.size());\n+        final List<String> delete = new ArrayList<String>();\n+        delete.add(\"A\");\n+        delete.add(\"B\");\n+        bag.removeAll(delete);\n+        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n+        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"B\"));\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"C\"));\n+        assertEquals(\"Should have count of 1\", 1, bag.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testContains() {\n+        final Bag<T> bag = makeObject();\n+\n+        assertEquals(\"Bag does not have at least 1 'A'\", false, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+\n+        bag.add((T) \"A\");  // bag 1A\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+\n+        bag.add((T) \"A\");  // bag 2A\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+\n+        bag.add((T) \"B\");  // bag 2A,1B\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag has at least 1 'B'\", true, bag.contains(\"B\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testContainsAll() {\n+        final Bag<T> bag = makeObject();\n+        final List<String> known = new ArrayList<String>();\n+        final List<String> known1A = new ArrayList<String>();\n+        known1A.add(\"A\");\n+        final List<String> known2A = new ArrayList<String>();\n+        known2A.add(\"A\");\n+        known2A.add(\"A\");\n+        final List<String> known1B = new ArrayList<String>();\n+        known1B.add(\"B\");\n+        final List<String> known1A1B = new ArrayList<String>();\n+        known1A1B.add(\"A\");\n+        known1A1B.add(\"B\");\n+\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag does not containsAll of 1 'A'\", false, bag.containsAll(known1A));\n+        assertEquals(\"Bag does not containsAll of 2 'A'\", false, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+\n+        bag.add((T) \"A\");  // bag 1A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag does containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+\n+        bag.add((T) \"A\");  // bag 2A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+\n+        bag.add((T) \"A\");  // bag 3A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+\n+        bag.add((T) \"B\");  // bag 3A1B\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag containsAll of 1 'B'\", true, bag.containsAll(known1B));\n+        assertEquals(\"Bag containsAll of 1 'A' 1 'B'\", true, bag.containsAll(known1A1B));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSize() {\n+        final Bag<T> bag = makeObject();\n+        assertEquals(\"Should have 0 total items\", 0, bag.size());\n+        bag.add((T) \"A\");\n+        assertEquals(\"Should have 1 total items\", 1, bag.size());\n+        bag.add((T) \"A\");\n+        assertEquals(\"Should have 2 total items\", 2, bag.size());\n+        bag.add((T) \"A\");\n+        assertEquals(\"Should have 3 total items\", 3, bag.size());\n+        bag.add((T) \"B\");\n+        assertEquals(\"Should have 4 total items\", 4, bag.size());\n+        bag.add((T) \"B\");\n+        assertEquals(\"Should have 5 total items\", 5, bag.size());\n+        bag.remove(\"A\", 2);\n+        assertEquals(\"Should have 1 'A'\", 1, bag.getCount(\"A\"));\n+        assertEquals(\"Should have 3 total items\", 3, bag.size());\n+        // this should only remove 1 occurrence of B\n+        bag.remove(\"B\");\n+        assertEquals(\"Should have 2 total item\", 2, bag.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRetainAll() {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        final List<String> retains = new ArrayList<String>();\n+        retains.add(\"B\");\n+        retains.add(\"C\");\n+        bag.retainAll(retains);\n+        assertEquals(\"Should have 3 total items\", 3, bag.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIterator() {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        assertEquals(\"Bag should have 3 items\", 3, bag.size());\n+        final Iterator<T> i = bag.iterator();\n+\n+        boolean foundA = false;\n+        while (i.hasNext()) {\n+            final String element = (String) i.next();\n+            // ignore the first A, remove the second via Iterator.remove()\n+            if (element.equals(\"A\")) {\n+                if (foundA == false) {\n+                    foundA = true;\n+                } else {\n+                    i.remove();\n+                }\n+            }\n+        }\n+\n+        assertTrue(\"Bag should still contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Bag should have 2 items\", 2, bag.size());\n+        assertEquals(\"Bag should have 1 'A'\", 1, bag.getCount(\"A\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIteratorFail() {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        final Iterator<T> it = bag.iterator();\n+        it.next();\n+        bag.remove(\"A\");\n+        try {\n+            it.next();\n+            fail(\"Should throw ConcurrentModificationException\");\n+        } catch (final ConcurrentModificationException e) {\n+            // expected\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIteratorFailNoMore() {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        final Iterator<T> it = bag.iterator();\n+        it.next();\n+        it.next();\n+        it.next();\n+        try {\n+            it.next();\n+            fail(\"Should throw NoSuchElementException\");\n+        } catch (final NoSuchElementException ex) {\n+            // expected\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIteratorFailDoubleRemove() {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        final Iterator<T> it = bag.iterator();\n+        it.next();\n+        it.next();\n+        assertEquals(3, bag.size());\n+        it.remove();\n+        assertEquals(2, bag.size());\n+        try {\n+            it.remove();\n+            fail(\"Should throw IllegalStateException\");\n+        } catch (final IllegalStateException ex) {\n+            // expected\n+        }\n+        assertEquals(2, bag.size());\n+        it.next();\n+        it.remove();\n+        assertEquals(1, bag.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIteratorRemoveProtectsInvariants() {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        assertEquals(2, bag.size());\n+        final Iterator<T> it = bag.iterator();\n+        assertEquals(\"A\", it.next());\n+        assertEquals(true, it.hasNext());\n+        it.remove();\n+        assertEquals(1, bag.size());\n+        assertEquals(true, it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertEquals(false, it.hasNext());\n+        it.remove();\n+        assertEquals(0, bag.size());\n+        assertEquals(false, it.hasNext());\n+\n+        final Iterator<T> it2 = bag.iterator();\n+        assertEquals(false, it2.hasNext());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testToArray() {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        final Object[] array = bag.toArray();\n+        int a = 0, b = 0, c = 0;\n+        for (final Object element : array) {\n+            a += element.equals(\"A\") ? 1 : 0;\n+            b += element.equals(\"B\") ? 1 : 0;\n+            c += element.equals(\"C\") ? 1 : 0;\n+        }\n+        assertEquals(2, a);\n+        assertEquals(2, b);\n+        assertEquals(1, c);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testToArrayPopulate() {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        final String[] array = bag.toArray(new String[0]);\n+        int a = 0, b = 0, c = 0;\n+        for (final String element : array) {\n+            a += element.equals(\"A\") ? 1 : 0;\n+            b += element.equals(\"B\") ? 1 : 0;\n+            c += element.equals(\"C\") ? 1 : 0;\n+        }\n+        assertEquals(2, a);\n+        assertEquals(2, b);\n+        assertEquals(1, c);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testEquals() {\n+        final Bag<T> bag = makeObject();\n+        final Bag<T> bag2 = makeObject();\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add((T) \"A\");\n+        assertEquals(false, bag.equals(bag2));\n+        bag2.add((T) \"A\");\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        bag2.add((T) \"A\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"C\");\n+        assertEquals(true, bag.equals(bag2));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testEqualsHashBag() {\n+        final Bag<T> bag = makeObject();\n+        final Bag<T> bag2 = new HashBag<T>();\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add((T) \"A\");\n+        assertEquals(false, bag.equals(bag2));\n+        bag2.add((T) \"A\");\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        bag2.add((T) \"A\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"C\");\n+        assertEquals(true, bag.equals(bag2));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testHashCode() {\n+        final Bag<T> bag = makeObject();\n+        final Bag<T> bag2 = makeObject();\n+        assertEquals(0, bag.hashCode());\n+        assertEquals(0, bag2.hashCode());\n+        assertEquals(bag.hashCode(), bag2.hashCode());\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        bag2.add((T) \"A\");\n+        bag2.add((T) \"A\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"C\");\n+        assertEquals(bag.hashCode(), bag2.hashCode());\n+\n+        int total = 0;\n+        total += \"A\".hashCode() ^ 2;\n+        total += \"B\".hashCode() ^ 2;\n+        total += \"C\".hashCode() ^ 1;\n+        assertEquals(total, bag.hashCode());\n+        assertEquals(total, bag2.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEmptyBagSerialization() throws IOException, ClassNotFoundException {\n+        final Bag<T> bag = makeObject();\n+        if (!(bag instanceof Serializable && isTestSerialization())) {\n+            return;\n+        }\n+\n+        final byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n+        final Bag<?> bag2 = (Bag<?>) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Bag should be empty\",0, bag.size());\n+        assertEquals(\"Bag should be empty\",0, bag2.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testFullBagSerialization() throws IOException, ClassNotFoundException {\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        final int size = bag.size();\n+        if (!(bag instanceof Serializable && isTestSerialization())) {\n+            return;\n+        }\n+\n+        final byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n+        final Bag<?> bag2 = (Bag<?>) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Bag should be same size\", size, bag.size());\n+        assertEquals(\"Bag should be same size\", size, bag2.size());\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Bag\n+     * against the canonical version in SVN.\n+     */\n+    public void testEmptyBagCompatibility() throws IOException, ClassNotFoundException {\n+        // test to make sure the canonical form has been preserved\n+        final Bag<T> bag = makeObject();\n+        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n+            final Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));\n+            assertTrue(\"Bag is empty\",bag2.size()  == 0);\n+            assertEquals(bag, bag2);\n+        }\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Bag\n+     * against the canonical version in SVN.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testFullBagCompatibility() throws IOException, ClassNotFoundException {\n+        // test to make sure the canonical form has been preserved\n+        final Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n+            final Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n+            assertEquals(\"Bag is the right size\",bag.size(), bag2.size());\n+            assertEquals(bag, bag2);\n+        }\n+    }\n+\n+}", "timestamp": 1373031842, "metainfo": ""}