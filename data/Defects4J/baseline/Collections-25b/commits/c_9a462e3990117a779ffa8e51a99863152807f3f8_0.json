{"sha": "9a462e3990117a779ffa8e51a99863152807f3f8", "log": "Refactor to avoid unecessary instanceof call   ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n  * more efficient (and convenient) than using nested for loops to extract a list.\n  * \n  * @since Commons Collections 3.1\n- * @version $Revision: 1.2 $ $Date: 2004/05/03 11:38:49 $\n+ * @version $Revision: 1.3 $ $Date: 2004/05/03 11:50:30 $\n  * \n  * @author Stephen Colebourne\n  */\n                 root = null;\n             }\n         } else {\n-            findNext(currentIterator);\n-        }\n-    }\n-\n-    /**\n-     * Finds the next object in the iteration.\n+            findNextByIterator(currentIterator);\n+        }\n+    }\n+\n+    /**\n+     * Finds the next object in the iteration given any start object.\n      * \n      * @param value  the value to start from\n      */\n     protected void findNext(Object value) {\n         if (value instanceof Iterator) {\n-            if (value != currentIterator) {\n-                // recurse a level\n-                if (currentIterator != null) {\n-                    stack.push(currentIterator);\n-                }\n-                currentIterator = (Iterator) value;\n-            }\n-            \n-            while (currentIterator.hasNext() && hasNext == false) {\n-                Object next = currentIterator.next();\n-                if (transformer != null) {\n-                    next = transformer.transform(next);\n-                }\n-                findNext(next);\n-            }\n-            if (hasNext) {\n-                // next value found\n-            } else if (stack.isEmpty()) {\n-                // all iterators exhausted\n-            } else {\n-                // current iterator exhausted, go up a level\n-                currentIterator = (Iterator) stack.pop();\n-                findNext(currentIterator);\n-            }\n+            // need to examine this iterator\n+            findNextByIterator((Iterator) value);\n         } else {\n             // next value found\n             currentValue = value;\n         }\n     }\n     \n-    \n+    /**\n+     * Finds the next object in the iteration given an iterator.\n+     * \n+     * @param iterator  the iterator to start from\n+     */\n+    protected void findNextByIterator(Iterator iterator) {\n+        if (iterator != currentIterator) {\n+            // recurse a level\n+            if (currentIterator != null) {\n+                stack.push(currentIterator);\n+            }\n+            currentIterator = iterator;\n+        }\n+        \n+        while (currentIterator.hasNext() && hasNext == false) {\n+            Object next = currentIterator.next();\n+            if (transformer != null) {\n+                next = transformer.transform(next);\n+            }\n+            findNext(next);\n+        }\n+        if (hasNext) {\n+            // next value found\n+        } else if (stack.isEmpty()) {\n+            // all iterators exhausted\n+        } else {\n+            // current iterator exhausted, go up a level\n+            currentIterator = (Iterator) stack.pop();\n+            findNextByIterator(currentIterator);\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Checks whether there are any more elements in the iteration to obtain.", "timestamp": 1083585030, "metainfo": ""}