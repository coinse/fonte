{"sha": "b5715ec19d7c9b0f96a41cca42c080955c6b3f51", "log": "[COLLECTIONS-393] Added ListUtils.partition method, thanks to Chris Shayan for report and patch.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ListUtils.java\n  */\n package org.apache.commons.collections;\n \n+import java.util.AbstractList;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n         }\n         return -1;\n     }\n+\n+    /**\n+     * Returns consecutive {@link List#subList(int, int) sublists} of a\n+     * list, each of the same size (the final list may be smaller). For example,\n+     * partitioning a list containing {@code [a, b, c, d, e]} with a partition\n+     * size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer list containing\n+     * two inner lists of three and two elements, all in the original order.\n+     * <p>\n+     * The outer list is unmodifiable, but reflects the latest state of the\n+     * source list. The inner lists are sublist views of the original list,\n+     * produced on demand using {@link List#subList(int, int)}, and are subject\n+     * to all the usual caveats about modification as explained in that API.\n+     * <p>\n+     * Adapted from http://code.google.com/p/guava-libraries/\n+     * \n+     * @param <T>  the element type\n+     * @param list  the list to return consecutive sublists of\n+     * @param size  the desired size of each sublist (the last may be smaller)\n+     * @return a list of consecutive sublists\n+     * @throws IllegalArgumentException if list is {@code null} or size is not strictly positive\n+     */\n+    public static <T> List<List<T>> partition(List<T> list, int size) {\n+        if (list == null) {\n+            throw new IllegalArgumentException(\"List must not be null\");          \n+        }\n+        if (size <= 0) {\n+            throw new IllegalArgumentException(\"Size must be greater than 0\");            \n+        }\n+        return new Partition<T>(list, size);\n+    }\n     \n+    /**\n+     * Provides a partition view on a {@link List}.\n+     */\n+    private static class Partition<T> extends AbstractList<List<T>> {\n+        private final List<T> list;\n+        private final int size;\n+\n+        private Partition(List<T> list, int size) {\n+            this.list = list;\n+            this.size = size;\n+        }\n+\n+        public List<T> get(int index) {\n+            int listSize = size();\n+            if (listSize < 0) {\n+                throw new IllegalArgumentException(\"negative size: \" + listSize);           \n+            }\n+            if (index < 0) {\n+                throw new IndexOutOfBoundsException(\"Index \" + index + \" must not be negative\");         \n+            }\n+            if (index >= listSize) {\n+                throw new IndexOutOfBoundsException(\"Index \" + index + \" must be less than size \" +\n+                                                    listSize);           \n+            }           \n+            int start = index * size;\n+            int end = Math.min(start + size, list.size());\n+            return list.subList(start, end);\n+        }\n+\n+        public int size() {\n+            return (list.size() + size - 1) / size;\n+        }\n+\n+        @Override\n+        public boolean isEmpty() {\n+            return list.isEmpty();\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/java/org/apache/commons/collections/TestListUtils.java\n import java.util.Collections;\n import java.util.List;\n \n+import junit.framework.Assert;\n import junit.framework.Test;\n \n import org.apache.commons.collections.functors.EqualPredicate;\n /**\n  * Tests for ListUtils.\n  *\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Neil O'Toole\n- * @author Matthew Hawthorne\n- * @author Dave Meikle\n+ * @version $Id$\n  */\n public class TestListUtils extends BulkTest {\n \n         assertEquals(ListUtils.indexOf(fullList, null), -1);\n     }\n     \n+    public void testPartition() {\n+        List<Integer> strings = new ArrayList<Integer>();\n+        for (int i = 0; i <= 6; i++) {\n+            strings.add(i);\n+        }\n+        \n+        final List<List<Integer>> partition = ListUtils.partition(strings, 3);\n+\n+        assertNotNull(partition);\n+        assertEquals(3, partition.size());\n+        assertEquals(1, partition.get(2).size());\n+        \n+        try {\n+            ListUtils.partition(null, 3);\n+            Assert.fail(\"failed to check for null argument\");\n+        } catch (IllegalArgumentException e) {}\n+        \n+        try {\n+            ListUtils.partition(strings, 0);\n+            Assert.fail(\"failed to check for size argument\");\n+        } catch (IllegalArgumentException e) {}\n+        \n+        try {\n+            ListUtils.partition(strings, -10);\n+            Assert.fail(\"failed to check for size argument\");\n+        } catch (IllegalArgumentException e) {}\n+        \n+    }    \n }", "timestamp": 1345150227, "metainfo": ""}