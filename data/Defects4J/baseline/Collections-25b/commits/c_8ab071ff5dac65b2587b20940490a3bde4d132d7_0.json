{"sha": "8ab071ff5dac65b2587b20940490a3bde4d132d7", "log": "Documented (almost) all public/protected members. PR: Obtained from: Submitted by: Reviewed by:   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/ArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ArrayIterator.java,v 1.14 2002/06/20 02:51:18 bayard Exp $\n- * $Revision: 1.14 $\n- * $Date: 2002/06/20 02:51:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ArrayIterator.java,v 1.15 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.15 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n   * @author Mauricio S. Moura\n   * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n-  * @version $Revision: 1.14 $\n+  * @version $Revision: 1.15 $\n   */\n public class ArrayIterator implements Iterator {\n     \n \n     // Iterator interface\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns true if there are more elements to return from the array.\n+     *\n+     *  @return true if there is a next element to return\n+     */\n     public boolean hasNext() {\n         return index < length;\n     }\n \n+    /**\n+     *  Returns the next element in the array.\n+     *\n+     *  @return the next element in the array\n+     *  @throws NoSuchElementException if all the elements in the array\n+     *    have already been returned\n+     */\n     public Object next() {\n         if(!hasNext()) {\n             throw new NoSuchElementException();\n         return Array.get( array, index++ );\n     }\n \n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @throws UnsupportedOperationException always\n+     */\n     public void remove() {\n         throw new UnsupportedOperationException( \"remove() method is not supported\" );\n     }\n--- a/src/java/org/apache/commons/collections/ArrayStack.java\n+++ b/src/java/org/apache/commons/collections/ArrayStack.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.7 2002/07/03 02:16:48 mas Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/07/03 02:16:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ArrayStack.java,v 1.8 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  *\n  * @since 1.0\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.7 $ $Date: 2002/07/03 02:16:48 $\n+ * @version $Revision: 1.8 $ $Date: 2002/08/15 20:04:31 $\n  * @see java.util.Stack\n  */\n \n \n     final private static long serialVersionUID = 2130079159931574599L;\n //, local class serialVersionUID = -3491241305852305742\n+\n+    /**\n+     *  Constructs a new empty <Code>ArrayStack</Code>.\n+     */\n+    public ArrayStack() {\n+        super();\n+    }\n \n     // --------------------------------------------------------- Public Methods\n \n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.12 2002/08/10 02:05:20 pjack Exp $\n- * $Revision: 1.12 $\n- * $Date: 2002/08/10 02:05:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.13 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n     private transient HashMap writeMethods = new HashMap();\n     private transient HashMap types = new HashMap();\n \n+    /**\n+     *  An empty array.  Used to invoke accessors via reflection.\n+     */\n     public static final Object[] NULL_ARGUMENTS = {};\n+\n+    /**\n+     *  Maps primitive Class types to transformers.  The transformer\n+     *  transform strings into the appropriate primitive wrapper.\n+     */\n     public static HashMap defaultTransformers = new HashMap();\n     \n     static {\n     \n     // Constructors\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Constructs a new empty <Code>BeanMap</Code>.\n+     */\n     public BeanMap() {\n     }\n \n+    /**\n+     *  Constructs a new <Code>BeanMap</Code> that operates on the \n+     *  specified bean.  If the given bean is <Code>null</COde>, then\n+     *  this map will be empty.\n+     *\n+     *  @param bean  the bean for this map to operate on\n+     */\n     public BeanMap(Object bean) {\n         this.bean = bean;\n         initialise();\n         }\n     }\n \n+    /**\n+     *  Returns true if the bean defines a property with the given name.\n+     *  The given name must be a <Code>String</Code>; if not, this method\n+     *  returns false.  This method will also return false if the bean\n+     *  does not define a property with that name.\n+     *\n+     *  @param name  the name of the property to check\n+     *  @return false if the given name is null or is not a <Code>String</Code>;\n+     *    false if the bean does not define a property with that name; or\n+     *    true if the bean does define a property with that name\n+     */\n     public boolean containsKey(Object name) {\n         Method method = getReadMethod( name );\n         return method != null;\n     }\n \n+    /**\n+     *  Returns true if the bean defines a property whose current value is\n+     *  the given object.\n+     *\n+     *  @param value  the value to check\n+     *  @return false  true if the bean has at least one property whose \n+     *    current value is that object, false otherwise\n+     */\n     public boolean containsValue(Object value) {\n         // use default implementation\n         return super.containsValue( value );\n     }\n \n+    /**\n+     *  Returns the value of the bean's property with the given name.\n+     *  The given name must be a {@link String} and must not be \n+     *  null; otherwise, this method returns <Code>null</Code>.\n+     *  If the bean defines a property with the given name, the value of\n+     *  that property is returned.  Otherwise, <Code>null</Code> is \n+     *  returned.\n+     *\n+     *  @param name  the name of the property whose value to return\n+     *  @return  the value of the property with that name\n+     */\n     public Object get(Object name) {\n         if ( bean != null ) {\n             Method method = getReadMethod( name );\n         return null;\n     }\n \n+    /**\n+     *  Sets the bean property with the given name to the given value.\n+     *\n+     *  @param name  the name of the property to set\n+     *  @param value  the value to set that property to\n+     *  @return  the previous value of that property\n+     *  @throws IllegalArgumentException  if the given name is null;\n+     *    if the given name is not a {@link String}; if the bean doesn't\n+     *    define a property with that name; or if the bean property with\n+     *    that name is read-only\n+     */\n     public Object put(Object name, Object value) throws IllegalArgumentException, ClassCastException {\n         if ( bean != null ) {\n             Object oldValue = get( name );\n         return null;\n     }\n                     \n+    /**\n+     *  Returns the number of properties defined by the bean.\n+     *\n+     *  @return  the number of properties defined by the bean\n+     */\n     public int size() {\n         return readMethods.size();\n     }\n     /**\n      * Get the keys for this BeanMap.\n      * \n-     * @return BeanMap keys.  The Set returned bu this method is not\n+     * @return BeanMap keys.  The Set returned by this method is not\n      *         modifiable.\n      */\n     public Set keySet() {\n \n     // Helper methods\n     //-------------------------------------------------------------------------\n-    \n+\n+    /**\n+     * Returns the type of the property with the given name.\n+     *\n+     * @param name  the name of the property\n+     * @return  the type of the property, or <Code>null</Code> if no such\n+     *   property exists\n+     */\n     public Class getType(String name) {\n         return (Class) types.get( name );\n     }\n \n+    /**\n+     *  Convenience method for getting an iterator over the keys.\n+     *\n+     *  @return an iterator over the keys\n+     */\n     public Iterator keyIterator() {\n         return readMethods.keySet().iterator();\n     }\n \n+    /**\n+     *  Convenience method for getting an iterator over the values.\n+     *\n+     *  @return an iterator over the values\n+     */\n     public Iterator valueIterator() {\n         final Iterator iter = keyIterator();\n         return new Iterator() {            \n         };\n     }\n \n+    /**\n+     *  Convenience method for getting an iterator over the entries.\n+     *\n+     *  @return an iterator over the entries\n+     */\n     public Iterator entryIterator() {\n         final Iterator iter = keyIterator();\n         return new Iterator() {            \n \n     // Properties\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns the bean currently being operated on.  The return value may\n+     *  be null if this map is empty.\n+     *\n+     *  @return the bean being operated on by this map\n+     */\n     public Object getBean() {\n         return bean;\n     }\n \n+    /**\n+     *  Sets the bean to be operated on by this map.  The given value may\n+     *  be null, in which case this map will be empty.\n+     *\n+     *  @param newBean  the new bean to operate on\n+     */\n     public void setBean( Object newBean ) {\n         bean = newBean;\n         reinitialise();\n     // Implementation methods\n     //-------------------------------------------------------------------------\n \n+    /**\n+     *  Returns the accessor for the property with the given name.\n+     *\n+     *  @param name  the name of the property \n+     *  @return null if the name is null; null if the name is not a \n+     *  {@link String}; null if no such property exists; or the accessor\n+     *   method for that property\n+     */\n     protected Method getReadMethod( Object name ) {\n         return (Method) readMethods.get( name );\n     }\n \n+    /**\n+     *  Returns the mutator for the property with the given name.\n+     *\n+     *  @param name  the name of the \n+     *  @return null if the name is null; null if the name is not a \n+     *  {@link String}; null if no such property exists; null if the \n+     *  property is read-only; or the mutator method for that property\n+     */\n     protected Method getWriteMethod( Object name ) {\n         return (Method) writeMethods.get( name );\n     }\n \n+    /**\n+     *  Reinitializes this bean.  Called during {@link #setBean(Object)}.\n+     *  Does introspection to find properties.\n+     */\n     protected void reinitialise() {\n         readMethods.clear();\n         writeMethods.clear();\n         }\n     }\n \n+    /**\n+     *  Called during a successful {@link #put(Object,Object)} operation.\n+     *  Default implementation does nothing.  Override to be notified of\n+     *  property changes in the bean caused by this map.\n+     *\n+     *  @param key  the name of the property that changed\n+     *  @param oldValue  the old value for that property\n+     *  @param newValue  the new value for that property\n+     */\n     protected void firePropertyChange( Object key, Object oldValue, Object newValue ) {\n     }\n \n     // Implementation classes\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Map entry used by {@link BeanMap}.\n+     */\n     protected static class MyMapEntry extends DefaultMapEntry {        \n         private BeanMap owner;\n         \n+        /**\n+         *  Constructs a new <Code>MyMapEntry</Code>.\n+         *\n+         *  @param owner  the BeanMap this entry belongs to\n+         *  @param key  the key for this entry\n+         *  @param value  the value for this entry\n+         */\n         protected MyMapEntry( BeanMap owner, Object key, Object value ) {\n             super( key, value );\n             this.owner = owner;\n         }\n \n+        /**\n+         *  Sets the value.\n+         *\n+         *  @param value  the new value for the entry\n+         *  @return the old value for the entry\n+         */\n         public Object setValue(Object value) {\n             Object key = getKey();\n             Object oldValue = owner.get( key );\n             return oldValue;\n         }\n     }\n-    \n+\n+    /**\n+     *  Creates an array of parameters to pass to the given mutator method.\n+     *  If the given object is not the right type to pass to the method \n+     *  directly, it will be converted using {@link #convertType(Class,Object)}.\n+     *\n+     *  @param method  the mutator method\n+     *  @param value  the value to pass to the mutator method\n+     *  @return an array containing one object that is either the given value\n+     *    or a transformed value\n+     *  @throws IllegalAccessException if {@link #convertType(Class,Object)}\n+     *    raises it\n+     *  @throws IllegalArgumentException if any other exception is raised\n+     *    by {@link #convertType(Class,Object)}\n+     */\n     protected Object[] createWriteMethodArguments( Method method, Object value ) throws IllegalAccessException, ClassCastException {            \n         try {\n             if ( value != null ) {\n             throw new IllegalArgumentException( e.getMessage() );\n         }\n     }\n-    \n+\n+    /**\n+     * Converts the given value to the given type.  First, reflection is\n+     * is used to find a public constructor declared by the given class \n+     * that takes one argument, which must be the precise type of the \n+     * given value.  If such a constructor is found, a new object is\n+     * created by passing the given value to that constructor, and the\n+     * newly constructed object is returned.<P>\n+     *\n+     * If no such constructor exists, and the given type is a primitive\n+     * type, then the given value is converted to a string using its \n+     * {@link Object#toString() toString()} method, and that string is\n+     * parsed into the correct primitve type using, for instance, \n+     * {@link Integer#valueOf(String)} to convert the string into an\n+     * <Code>int</Code>.<P>\n+     *\n+     * If no special constructor exists and the given type is not a \n+     * primitive type, this method returns the original value.\n+     *\n+     * @param newType  the type to convert the value to\n+     * @param value  the value to conert\n+     * @return the converted value\n+     * @throws NumberFormatException if newType is a primitive type, and \n+     *   the string representation of the given value cannot be converted\n+     *   to that type\n+     * @throws InstantiationException  if the constructor found with \n+     *   reflection raises it\n+     * @throws InvocationTargetExcetpion  if the constructor found with\n+     *   reflection raises it\n+     * @throws IllegalAccessException  never\n+     * @throws IllegalArgumentException  never\n+     */\n     protected Object convertType( Class newType, Object value ) \n         throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n         \n             return value;\n         }\n     }\n-    \n+\n+    /**\n+     *  Returns a transformer for the given primitive type.\n+     *\n+     *  @param aType  the primitive type whose transformer to return\n+     *  @return a transformer that will convert strings into that type,\n+     *   or null if the given type is not a primitive type\n+     */\n     protected Transformer getTypeTransformer( Class aType ) {\n         return (Transformer) defaultTransformers.get( aType );\n     }\n-    \n+\n+    /**\n+     *  Logs the given exception to <Code>System.out</Code>.  Used to display\n+     *  warnings while accessing/mutating the bean.\n+     *\n+     *  @param e  the exception to log\n+     */\n     protected void logInfo(Exception e) {\n         // XXXX: should probably use log4j here instead...\n         System.out.println( \"INFO: Exception: \" + e );\n     }\n-    \n+\n+    /**\n+     *  Logs the given exception to <Code>System.err</Code>.  Used to display\n+     *  errors while accessing/mutating the bean.\n+     *\n+     *  @param e  the exception to log\n+     */\n     protected void logWarn(Exception e) {\n         // XXXX: should probably use log4j here instead...\n         System.out.println( \"WARN: Exception: \" + e );\n--- a/src/java/org/apache/commons/collections/BinaryHeap.java\n+++ b/src/java/org/apache/commons/collections/BinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.9 2002/07/03 02:16:48 mas Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/07/03 02:16:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.10 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n public final class BinaryHeap extends AbstractCollection\n     implements PriorityQueue, Buffer\n {\n+\n+    /**\n+     *  The default capacity for a binary heap.\n+     */\n     protected final static int      DEFAULT_CAPACITY   = 13;\n \n+    /**\n+     *  The number of elements currently in this heap.\n+     */\n     protected int                   m_size;\n+\n+    /**\n+     *  The elements in this heap.\n+     */\n     protected Object[]              m_elements;\n+\n+    /**\n+     *  If true, the first element as determined by the sort order will \n+     *  be returned.  If false, the last element as determiend by the\n+     *  sort order will be returned.\n+     */\n     protected boolean               m_isMinHeap;\n     private Comparator              m_comparator;\n \n         this( DEFAULT_CAPACITY, true );\n     }\n \n+    /**\n+     *  Constructs a new <Code>BinaryHeap</Code> that will use the given\n+     *  comparator to order its elements.\n+     */\n     public BinaryHeap( Comparator comparator )\n     {\n         this();\n         this( capacity, true );\n     }\n \n+    /**\n+     *  Constructs a new <Code>BinaryHeap</Code>.\n+     *\n+     *  @param capacity  the initial capacity for the heap\n+     *  @param comparator  the comparator to use to order elements\n+     *  @exception IllegalArgumentException \n+     *   if <code>capacity</code> is <code>&lt;= 0</code>\n+     */\n     public BinaryHeap( final int capacity, Comparator comparator )\n     {\n         this( capacity );\n         this( DEFAULT_CAPACITY, isMinHeap );\n     }\n \n+    /**\n+     *  Constructs a new <Code>BinaryHeap</Code>.\n+     *\n+     *  @param isMinHeap  true to use the order imposed by the given \n+     *    comparator; false to reverse that order\n+     *  @param comparator  the comparator to use to order elements\n+     */\n     public BinaryHeap( final boolean isMinHeap, Comparator comparator )\n     {\n         this( isMinHeap );\n         m_elements = new Object[ capacity + 1 ];\n     }\n \n+    /**\n+     *  Constructs a new <Code>BinaryHeap</Code>.\n+     *\n+     *  @param capacity  the initial capacity for the heap\n+     *  @param isMinHeap  true to use the order imposed by the given \n+     *    comparator; false to reverse that order\n+     *  @param comparator  the comparator to use to order elements\n+     *  @exception IllegalArgumentException \n+     *   if <code>capacity</code> is <code>&lt;= 0</code>\n+     */\n     public BinaryHeap( final int capacity, final boolean isMinHeap,\n                        Comparator comparator ) \n     {\n         m_elements = elements;\n     }\n \n+    /**\n+     *  Returns a string representation of this heap.  The returned string\n+     *  is similar to those produced by standard JDK collections.\n+     *\n+     *  @return  a string representation of this heap\n+     */\n     public String toString()\n     {\n         final StringBuffer sb = new StringBuffer();\n         return m_size;\n     }\n \n-\n+    /**\n+     *  Used by testing code.\n+     *\n+     *  @return  the otherwise private comparator\n+     */\n     Comparator comparator() {\n         return m_comparator;\n     }\n--- a/src/java/org/apache/commons/collections/BufferUnderflowException.java\n+++ b/src/java/org/apache/commons/collections/BufferUnderflowException.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUnderflowException.java,v 1.3 2002/08/13 00:46:25 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/13 00:46:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUnderflowException.java,v 1.4 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n  * @author <a href=\"mailto:jefft@apache.org\">Jeff Turner</a>\n  * @since Avalon 4.0\n- * @version $Id: BufferUnderflowException.java,v 1.3 2002/08/13 00:46:25 pjack Exp $\n+ * @version $Id: BufferUnderflowException.java,v 1.4 2002/08/15 20:04:31 pjack Exp $\n  */\n public class BufferUnderflowException extends RuntimeException\n {\n         m_throwable = exception;\n     }\n \n-\n+    /**\n+     *  Constructs a new <Code>BufferUnderflowException</Code>.\n+     */\n     public BufferUnderflowException() {\n         super();\n         m_throwable = null;\n--- a/src/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/java/org/apache/commons/collections/BufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.5 2002/08/13 00:46:25 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/13 00:46:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.6 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  *  Contains static utility methods for operating on {@link Buffer} objects.\n  *\n  *  @author Paul Jack\n- *  @version $Id: BufferUtils.java,v 1.5 2002/08/13 00:46:25 pjack Exp $\n+ *  @version $Id: BufferUtils.java,v 1.6 2002/08/15 20:04:31 pjack Exp $\n  *  @since 2.1\n  */\n public class BufferUtils {\n     }\n \n \n+    /**\n+     *  Returns a bounded buffer backed by the given buffer.  New elements\n+     *  may only be added to the returned buffer if its size is less than\n+     *  the specified maximum; otherwise, an {@link IllegalStateException}\n+     *  will be thrown.\n+     *\n+     *  @param buf  the buffer whose size to bind\n+     *  @param maxSize  the maximum size of the returned buffer\n+     *  @return  a bounded buffer\n+     */\n     public static Buffer boundedBuffer(Buffer buf, int maxSize) {\n         return new BoundedBuffer(buf, maxSize);\n     }\n--- a/src/java/org/apache/commons/collections/CollatingIterator.java\n+++ b/src/java/org/apache/commons/collections/CollatingIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/CollatingIterator.java,v 1.3 2002/08/13 00:46:25 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/13 00:46:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/CollatingIterator.java,v 1.4 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  * my {@link #next} method will return the lesser of \n  * <code>A.next()</code> and <code>B.next()</code>.\n  *\n- * @version $Revision: 1.3 $ $Date: 2002/08/13 00:46:25 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/15 20:04:31 $\n  * @author Rodney Waldhoff\n  * @since 2.1\n  */\n \n     //------------------------------------------------------------ Constructors\n     \n+    /**\n+     *  Constructs a new <Code>CollatingIterator</Code>.  Natural sort order\n+     *  will be used, and child iterators will have to be manually added \n+     *  using the {@link #addIterator(Iterator)} method.\n+     */\n     public CollatingIterator() {\n         this(null,2);\n     }\n     \n+    /**\n+     *  Constructs a new <Code>CollatingIterator</Code> that will used the\n+     *  specified comparator for ordering.  Child iterators will have to be \n+     *  manually added using the {@link #addIterator(Iterator)} method.\n+     *\n+     *  @param comp  the comparator to use for ordering, or <Code>null</Code>\n+     *    to use natural sort order\n+     */\n     public CollatingIterator(Comparator comp) {\n         this(comp,2);\n     }\n     \n+    /**\n+     *  Constructs a new <Code>CollatingIterator</Code> that will used the\n+     *  specified comparator for ordering and have the specified initial\n+     *  capacity.  Child iterators will have to be \n+     *  manually added using the {@link #addIterator(Iterator)} method.\n+     *\n+     *  @param comp  the comparator to use for ordering, or <Code>null</Code>\n+     *    to use natural sort order\n+     *  @param initIterCapacity  the initial capacity for the internal list\n+     *    of child iterators\n+     */\n     public CollatingIterator(Comparator comp, int initIterCapacity) {\n         iterators = new ArrayList(initIterCapacity);\n         setComparator(comp);\n     }\n-    \n+\n+    /**\n+     *  Constructs a new <Code>CollatingIterator</Code> that will use the\n+     *  specified comparator to provide ordered iteration over the two\n+     *  given iterators.\n+     *\n+     *  @param comp  the comparator to use to sort, or null to use natural\n+     *    sort order\n+     *  @param a  the first child ordered iterator\n+     *  @param b  the second child ordered iterator\n+     */\n     public CollatingIterator(Comparator comp, Iterator a, Iterator b) {\n         this(comp,2);\n         addIterator(a);\n \n     //------------------------------------------------------- Iterator Methods\n \n+    /**\n+     *  Returns <Code>true</Code> if any child iterator has remaining elements.\n+     *\n+     *  @return true if this iterator has remaining elements\n+     */\n     public boolean hasNext() {\n         start();\n         return anyValueSet(valueSet) || anyHasNext(iterators);\n     }\n \n+    /**\n+     *  Returns the next ordered element from a child iterator.\n+     *\n+     *  @return the next ordered element\n+     *  @throws NoSuchElementException  if no child iterator has any more\n+     *    elements\n+     */\n     public Object next() throws NoSuchElementException {\n         if(!hasNext()) {\n             throw new NoSuchElementException();\n         }        \n     }\n \n+    /**\n+     *  Removes the last returned element from the child iterator that \n+     *  produced it.\n+     *\n+     *  @throws IllegalStateException  if there is no last returned element,\n+     *    or if the last returned element has already been removed\n+     */\n     public void remove() {\n         if(-1 == lastReturned) {\n             throw new NoSuchElementException(\"No value has been returned yet.\");\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.10 2002/08/13 00:26:51 pjack Exp $\n- * $Revision: 1.10 $\n- * $Date: 2002/08/13 00:26:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.11 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.11 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  * @author Rodney Waldhoff\n  *\n  * @since 1.0\n- * @version $Id: CollectionUtils.java,v 1.10 2002/08/13 00:26:51 pjack Exp $\n+ * @version $Id: CollectionUtils.java,v 1.11 2002/08/15 20:04:31 pjack Exp $\n  */\n public class CollectionUtils {\n \n         public void remove() {\n             throw new UnsupportedOperationException();\n         }\n+    }\n+\n+    /**\n+     *  Please don't ever instantiate a <Code>CollectionUtils</Code>.\n+     */\n+    public CollectionUtils() {\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/DefaultMapBag.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapBag.java,v 1.4 2002/06/16 18:56:19 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/06/16 18:56:19 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapBag.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  * interface to minimize the effort required for target implementations.\n  * Subclasses need only to call {@link #setMap(Map)} in their constructor \n  * specifying a map instance that will be used to store the contents of \n- * the bag. \n+ * the bag.<P>\n+ *\n+ * The map will be used to map bag elements to a number; the number represents\n+ * the number of occurrences of that element in the bag.<P>\n  *\n  * @since 2.0\n  * @author Chuck Burdick\n    private int _total = 0;\n    private int _mods = 0;\n \n+\n+   /**\n+    *  Constructor.  Subclasses should invoke {@link #setMap(Map)} in\n+    *  their constructors.\n+    */\n+   public DefaultMapBag() {\n+   }\n+\n+   /**\n+    *  Adds a new element to the bag by incrementing its count in the \n+    *  underlying map.\n+    *\n+    *  @see Bag#add(Object) \n+    */\n    public boolean add(Object o) {\n       return add(o, 1);\n    }\n \n+   /**\n+    *  Adds a new element to the bag by incrementing its count in the map.\n+    *\n+    *  @see Bag#add(Object, int)\n+    */\n    public boolean add(Object o, int i) {\n       _mods++;\n       if (i > 0) {\n       }\n    }\n \n+   /**\n+    *  Invokes {@link #add(Object)} for each element in the given collection.\n+    *\n+    *  @see Bag#addAll(Collection)\n+    */\n    public boolean addAll(Collection c) {\n       boolean changed = false;\n       Iterator i = c.iterator();\n       return changed;\n    }\n \n+\n+   /**\n+    *  Clears the bag by clearing the underlying map.\n+    */\n    public void clear() {\n       _mods++;\n       _map.clear();\n       _total = 0;\n    }\n \n+   /**\n+    *  Determines if the bag contains the given element by checking if the\n+    *  underlying map contains the element as a key.\n+    *\n+    *  @return true if the bag contains the given element\n+    */\n    public boolean contains(Object o) {\n       return _map.containsKey(o);\n    }\n       return result;\n    }\n \n+   /**\n+    * Returns true if the given object is not null, has the precise type \n+    * of this bag, and contains the same number of occurrences of all the\n+    * same elements.\n+    *\n+    * @param o the object to test for equality\n+    * @return true if that object equals this bag\n+    */\n    public boolean equals(Object o) {\n       return (o == this || \n               (o != null && o.getClass().equals(this.getClass()) &&\n                ((DefaultMapBag)o)._map.equals(this._map)));\n    }\n \n+   /**\n+    * Returns the hash code of the underlying map.\n+    *\n+    * @return the hash code of the underlying map\n+    */\n    public int hashCode() {\n       return _map.hashCode();\n    }\n \n+   /**\n+    * Returns true if the underlying map is empty.\n+    *\n+    * @return true if there are no elements in this bag\n+    */\n    public boolean isEmpty() {\n       return _map.isEmpty();\n    }\n       return result;\n    }\n \n+   /**\n+    * Remove any members of the bag that are not in the given\n+    * bag, respecting cardinality.\n+    *\n+    * @return true if this call changed the collection\n+    */\n    public boolean retainAll(Collection c) {\n       return retainAll(new HashBag(c));\n    }\n       return result;\n    }\n \n+   /**\n+    *  Returns an array of all of this bag's elements.\n+    *\n+    *  @return an array of all of this bag's elements\n+    */\n    public Object[] toArray() {\n       return extractList().toArray();\n    }\n \n+   /**\n+    *  Returns an array of all of this bag's elements.\n+    *\n+    *  @param a  the array to populate\n+    *  @return an array of all of this bag's elements\n+    */\n    public Object[] toArray(Object[] a) {\n       return extractList().toArray(a);\n    }\n \n+   /**\n+    *  Returns the number of occurrence of the given element in this bag\n+    *  by looking up its count in the underlying map.\n+    *\n+    *  @see Bag#getCount(Object)\n+    */\n    public int getCount(Object o) {\n       int result = 0;\n       Integer count = MapUtils.getInteger(_map, o);\n       return result;\n    }\n \n+   /**\n+    *  Returns an unmodifiable view of the underlying map's key set.\n+    *\n+    *  @return the set of unique elements in this bag\n+    */\n    public Set uniqueSet() {\n       return Collections.unmodifiableSet(_map.keySet());\n    }\n \n+   /**\n+    *  Returns the number of elements in this bag.\n+    *\n+    *  @return the number of elements in this bag\n+    */\n    public int size() {\n       return _total;\n    }\n--- a/src/java/org/apache/commons/collections/DefaultMapEntry.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.7 2002/06/16 03:39:40 mas Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/06/16 03:39:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.8 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n     private Object key;\n     private Object value;\n     \n+    /**\n+     *  Constructs a new <Code>DefaultMapEntry</Code> with a null key\n+     *  and null value.\n+     */\n     public DefaultMapEntry() {\n     }\n \n+    /**\n+     *  Constructs a new <Code>DefaultMapEntry</Code> with the given\n+     *  key and given value.\n+     *\n+     *  @param key  the key for the entry, may be null\n+     *  @param value  the value for the entyr, may be null\n+     */\n     public DefaultMapEntry(Object key, Object value) {\n         this.key = key;\n         this.value = value;\n \n     // Map.Entry interface\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns the key.\n+     *\n+     *  @return the key \n+     */\n     public Object getKey() {\n         return key;\n     }\n \n+\n+    /**\n+     *  Returns the value.\n+     *\n+     *  @return the value\n+     */\n     public Object getValue() {\n         return value;\n     }\n \n     // Properties\n     //-------------------------------------------------------------------------    \n+\n+    /**\n+     *  Sets the key.  This method does not modify any map.\n+     *\n+     *  @param key  the new key\n+     */\n     public void setKey(Object key) {\n         this.key = key;\n     }\n--- a/src/java/org/apache/commons/collections/EnumerationIterator.java\n+++ b/src/java/org/apache/commons/collections/EnumerationIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/EnumerationIterator.java,v 1.4 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/EnumerationIterator.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n \n     private Object last;\n     \n+    /**\n+     *  Constructs a new <Code>EnumerationIterator</Code> that will not\n+     *  function until {@link #setEnumeration(Enumeration)} is called.\n+     */\n     public EnumerationIterator() {\n         this(null, null);\n     }\n-    \n+\n+    /**\n+     *  Constructs a new <Code>EnumerationIterator</Code> that provides\n+     *  an iterator view of the given enumeration.\n+     *\n+     *  @param enumeration  the enumeration to use\n+     */\n     public EnumerationIterator( Enumeration enumeration ) {\n         this(enumeration, null);\n     }\n \n+    /**\n+     *  Constructs a new <Code>EnumerationIterator</Code> that will remove\n+     *  elements from the specified collection.\n+     *\n+     *  @param enum  the enumeration to use\n+     *  @param collection  the collection to remove elements form\n+     */\n     public EnumerationIterator( Enumeration enum, Collection collection ) {\n         this.enumeration = enum;\n         this.collection = collection;\n \n     // Iterator interface\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns true if the underlying enumeration has more elements.\n+     *\n+     *  @return true if the underlying enumeration has more elements\n+     *  @throws NullPointerException  if the underlying enumeration is null\n+     */\n     public boolean hasNext() {\n         return enumeration.hasMoreElements();\n     }\n \n+    /**\n+     *  Returns the next object from the enumeration.\n+     *\n+     *  @return the next object from the enumeration\n+     *  @throws NullPointerException if the enumeration is null\n+     */\n     public Object next() {\n         last = enumeration.nextElement();\n         return last;\n \n     /**\n      * Functions if an associated <code>Collection</code> is known.\n+     * If so, the first occurrence of the last returned object from this\n+     * iterator will be removed from the collection.\n      *\n      * @exception IllegalStateException <code>next()</code> not called.\n      * @exception UnsupportedOperationException No associated\n \n     // Properties\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns the underlying enumeration.\n+     *\n+     *  @return the underlying enumeration\n+     */\n     public Enumeration getEnumeration() {\n         return enumeration;\n     }\n-    \n+\n+    /**\n+     *  Sets the underlying enumeration.\n+     *\n+     *  @param enumeration  the new underlying enumeration\n+     */\n     public void setEnumeration( Enumeration enumeration ) {\n         this.enumeration = enumeration;\n     }\n--- a/src/java/org/apache/commons/collections/FactoryUtils.java\n+++ b/src/java/org/apache/commons/collections/FactoryUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FactoryUtils.java,v 1.3 2002/08/13 01:19:00 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/13 01:19:00 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FactoryUtils.java,v 1.4 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/15 20:04:31 $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * objects.\n  *\n  * @author Arron Bates\n- * @version $Revision: 1.3 $\n+ * @version $Revision: 1.4 $\n  * @since 2.1\n  */\n public class FactoryUtils {\n+\n+  private FactoryUtils() {\n+  }\n   \n   /** Creates a Factory whith a class definition, which will be\n    * used to create a new object from an empty constructor.\n--- a/src/java/org/apache/commons/collections/FastArrayList.java\n+++ b/src/java/org/apache/commons/collections/FastArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastArrayList.java,v 1.7 2002/08/13 04:34:08 pjack Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/08/13 04:34:08 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastArrayList.java,v 1.8 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  *\n  * @since 1.0\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.7 $ $Date: 2002/08/13 04:34:08 $\n+ * @version $Revision: 1.8 $ $Date: 2002/08/15 20:04:31 $\n  */\n \n public class FastArrayList extends ArrayList {\n      */\n     protected boolean fast = false;\n \n+\n+    /**\n+     *  Returns true if this list is operating in fast mode.\n+     *\n+     *  @return true if this list is operating in fast mode\n+     */\n     public boolean getFast() {\n         return (this.fast);\n     }\n \n+    /**\n+     *  Sets whether this list will operate in fast mode.\n+     *\n+     *  @param fast true if the list should operate in fast mode\n+     */\n     public void setFast(boolean fast) {\n         this.fast = fast;\n     }\n--- a/src/java/org/apache/commons/collections/FastHashMap.java\n+++ b/src/java/org/apache/commons/collections/FastHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastHashMap.java,v 1.8 2002/08/13 04:34:08 pjack Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/08/13 04:34:08 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastHashMap.java,v 1.9 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  *\n  * @since 1.0\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.8 $ $Date: 2002/08/13 04:34:08 $\n+ * @version $Revision: 1.9 $ $Date: 2002/08/15 20:04:31 $\n  */\n \n public class FastHashMap extends HashMap {\n      */\n     protected boolean fast = false;\n \n+    /**\n+     *  Returns true if this map is operating in fast mode.\n+     *\n+     *  @return true if this map is operating in fast mode\n+     */\n     public boolean getFast() {\n         return (this.fast);\n     }\n \n+    /**\n+     *  Sets whether this map is operating in fast mode.\n+     *\n+     *  @param fast true if this map should operate in fast mode\n+     */\n     public void setFast(boolean fast) {\n         this.fast = fast;\n     }\n--- a/src/java/org/apache/commons/collections/FastTreeMap.java\n+++ b/src/java/org/apache/commons/collections/FastTreeMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastTreeMap.java,v 1.8 2002/08/13 04:34:08 pjack Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/08/13 04:34:08 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/FastTreeMap.java,v 1.9 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  *\n  * @since 1.0\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.8 $ $Date: 2002/08/13 04:34:08 $\n+ * @version $Revision: 1.9 $ $Date: 2002/08/15 20:04:31 $\n  */\n \n public class FastTreeMap extends TreeMap {\n      */\n     protected boolean fast = false;\n \n+\n+    /**\n+     *  Returns true if this map is operating in fast mode.\n+     *\n+     *  @return true if this map is operating in fast mode\n+     */\n     public boolean getFast() {\n         return (this.fast);\n     }\n \n+    /**\n+     *  Sets whether this map is operating in fast mode.\n+     *\n+     *  @param fast true if this map should operate in fast mode\n+     */\n     public void setFast(boolean fast) {\n         this.fast = fast;\n     }\n--- a/src/java/org/apache/commons/collections/FilterIterator.java\n+++ b/src/java/org/apache/commons/collections/FilterIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/FilterIterator.java,v 1.5 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/FilterIterator.java,v 1.6 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n     \n     \n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Constructs a new <Code>FilterIterator</Code> that will not function\n+     *  until {@link #setIterator(Iterator) setIterator} is invoked.\n+     */\n     public FilterIterator() {\n     }\n     \n+    /**\n+     *  Constructs a new <Code>FilterIterator</Code> that will not function\n+     *  until {@link #setPredicate(Predicate) setPredicate} is invoked.\n+     *\n+     *  @param iterator  the iterator to use\n+     */\n     public FilterIterator( Iterator iterator ) {\n         super( iterator );\n     }\n \n+    /**\n+     *  Constructs a new <Code>FilterIterator</Code> that will use the\n+     *  given iterator and predicate.\n+     *\n+     *  @param iterator  the iterator to use\n+     *  @param predicate  the predicate to use\n+     */\n     public FilterIterator( Iterator iterator, Predicate predicate ) {\n         super( iterator );\n         this.predicate = predicate;\n     // Iterator interface\n     //-------------------------------------------------------------------------\n     \n-    /** @return true if there is another object that matches the given predicate */\n+    /** \n+     *  Returns true if the underlying iterator contains an object that \n+     *  matches the predicate.\n+     *\n+     *  @return true if there is another object that matches the predicate \n+     */\n     public boolean hasNext() {\n         if ( nextObjectSet ) {\n             return true;\n         }\n     }\n \n-    /** @return the next object which matches the given predicate */\n+    /** \n+     *  Returns the next object that matches the predicate.\n+     * \n+     *  @return the next object which matches the given predicate\n+     *  @throws NoSuchElementException if there are no more elements that\n+     *   match the predicate \n+     */\n     public Object next() {\n         if ( !nextObjectSet ) {\n             if (!setNextObject()) {\n     /**\n      * Always throws UnsupportedOperationException as this class \n      * does look-ahead with its internal iterator.\n+     *\n+     * @throws UnsupportedOperationException  always\n      */\n     public void remove() {\n         throw new UnsupportedOperationException();\n--- a/src/java/org/apache/commons/collections/FilterListIterator.java\n+++ b/src/java/org/apache/commons/collections/FilterListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/FilterListIterator.java,v 1.4 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/FilterListIterator.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n   * returned by the iterator.\n   * \n   * @since 2.0\n-  * @version $Revision: 1.4 $ $Date: 2002/06/12 03:59:15 $\n+  * @version $Revision: 1.5 $ $Date: 2002/08/15 20:04:31 $\n   * @author Rodney Waldhoff\n   */\n public class FilterListIterator extends ProxyListIterator {\n     // Constructors    \n     //-------------------------------------------------------------------------\n     \n+    /**\n+     *  Constructs a new <Code>FilterListIterator</Code> that will not \n+     *  function until \n+     *  {@link ProxyListIterator#setListIterator(ListIterator) setListIterator}\n+     *  and {@link #setPredicate(Predicate) setPredicate} are invoked.\n+     */\n     public FilterListIterator() {\n     }\n \n+    /**\n+     *  Constructs a new <Code>FilterListIterator</Code> that will not \n+     *  function until {@link #setPredicate(Predicate) setPredicate} is invoked.\n+     *\n+     *  @param iterator  the iterator to use\n+     */\n     public FilterListIterator(ListIterator iterator ) {\n         super(iterator);\n     }\n \n+    /**\n+     *  Constructs a new <Code>FilterListIterator</Code>.\n+     *\n+     *  @param iterator  the iterator to use\n+     *  @param predicate  the predicate to use\n+     */\n     public FilterListIterator(ListIterator iterator, Predicate predicate) {\n         super(iterator);\n         this.predicate = predicate;\n     }\n \n+    /**\n+     *  Constructs a new <Code>FilterListIterator</Code> that will not \n+     *  function until \n+     *  {@link ProxyListIterator#setListIterator(ListIterator) setListIterator}\n+     *  is invoked.\n+     *\n+     *  @param predicate  the predicate to use.\n+     */\n     public FilterListIterator(Predicate predicate) {\n         this.predicate = predicate;\n     }\n--- a/src/java/org/apache/commons/collections/HashBag.java\n+++ b/src/java/org/apache/commons/collections/HashBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/HashBag.java,v 1.5 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/HashBag.java,v 1.6 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  * @author Chuck Burdick\n  **/\n public class HashBag extends DefaultMapBag implements Bag {\n+\n+   /**\n+    *  Constructs a new empty <Code>HashBag</Code>.\n+    */\n    public HashBag() {\n       setMap(new HashMap());\n    }\n--- a/src/java/org/apache/commons/collections/IteratorEnumeration.java\n+++ b/src/java/org/apache/commons/collections/IteratorEnumeration.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/IteratorEnumeration.java,v 1.4 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/IteratorEnumeration.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n     \n     private Iterator iterator;\n     \n+    /**\n+     *  Constructs a new <Code>IteratorEnumeration</Code> that will not \n+     *  function until {@link #setIterator(Iterator) setIterator} is  \n+     *  invoked.\n+     */\n     public IteratorEnumeration() {\n     }\n \n+    /**\n+     *  Constructs a new <Code>IteratorEnumeration</Code> that will use\n+     *  the given iterator. \n+     * \n+     *  @param iterator  the iterator to use\n+     */\n     public IteratorEnumeration( Iterator iterator ) {\n         this.iterator = iterator;\n     }\n \n     // Iterator interface\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns true if the underlying iterator has more elements.\n+     *\n+     *  @return true if the underlying iterator has more elements\n+     */\n     public boolean hasMoreElements() {\n         return iterator.hasNext();\n     }\n \n+    /**\n+     *  Returns the next element from the underlying iterator.\n+     *\n+     *  @return the next element from the underlying iterator.\n+     *  @throws NoSuchElementException  if the underlying iterator has no\n+     *    more elements\n+     */\n     public Object nextElement() {\n         return iterator.next();\n     }\n \n     // Properties\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns the underlying iterator.\n+     * \n+     *  @return the underlying iterator\n+     */\n     public Iterator getIterator() {\n         return iterator;\n     }\n-    \n+\n+    /**\n+     *  Sets the underlying iterator.\n+     *\n+     *  @param iterator  the new underlying iterator\n+     */\n     public void setIterator( Iterator iterator ) {\n         this.iterator = iterator;\n     }\n--- a/src/java/org/apache/commons/collections/ListIteratorWrapper.java\n+++ b/src/java/org/apache/commons/collections/ListIteratorWrapper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ListIteratorWrapper.java,v 1.2 2002/08/13 00:46:25 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/13 00:46:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ListIteratorWrapper.java,v 1.3 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  * operations of ListIterator.\n  * \n  * @author Morgan Delagrange\n- * @version $Revision: 1.2 $ $Date: 2002/08/13 00:46:25 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/15 20:04:31 $\n  * @since 2.1\n  */\n public class ListIteratorWrapper implements ListIterator {\n     // Constructor\n     //-------------------------------------------------------------------------\n \n+    /**\n+     *  Constructs a new <Code>ListIteratorWrapper</Code> that will wrap\n+     *  the given iterator.\n+     *\n+     *  @param iterator  the iterator to wrap\n+     */\n     public ListIteratorWrapper(Iterator iterator) {\n         this.iterator = iterator;\n     }\n     // ListIterator interface\n     //-------------------------------------------------------------------------\n \n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @param o  ignored\n+     *  @throws UnsupportedOperationException always\n+     */\n     public void add(Object o) throws UnsupportedOperationException {\n         throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n     }\n \n+\n+    /**\n+     *  Returns true if there are more elements in the iterator.\n+     *\n+     *  @return true if there are more elements\n+     */\n     public boolean hasNext() {\n         if (currentIndex == wrappedIteratorIndex) {\n             return iterator.hasNext();\n         return true;\n     }\n \n+    /**\n+     *  Returns true if there are previous elements in the iterator.\n+     *\n+     *  @return true if there are previous elements\n+     */\n     public boolean hasPrevious() {\n         if (currentIndex == 0) {\n             return false;\n         return true;\n     }\n \n+    /**\n+     *  Returns the next element from the iterator.\n+     *\n+     *  @return the next element from the iterator\n+     *  @throws NoSuchElementException if there are no more elements\n+     */\n     public Object next() throws NoSuchElementException {\n         if (currentIndex < wrappedIteratorIndex) {\n             ++currentIndex;\n         return retval;\n     }\n \n+    /**\n+     *  Returns in the index of the next element.\n+     *\n+     *  @return the index of the next element\n+     */\n     public int nextIndex() {\n         return currentIndex;\n     }\n \n+    /**\n+     *  Returns the the previous element.\n+     *\n+     *  @return the previous element\n+     *  @throws NoSuchElementException  if there are no previous elements\n+     */\n     public Object previous() throws NoSuchElementException {\n         if (currentIndex == 0) {\n             throw new NoSuchElementException();\n         return list.get(currentIndex);    \n     }\n \n+    /**\n+     *  Returns the index of the previous element.\n+     *\n+     *  @return  the index of the previous element\n+     */\n     public int previousIndex() {\n         return currentIndex - 1;\n     }\n \n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @throws UnsupportedOperationException always\n+     */\n     public void remove() throws UnsupportedOperationException {\n         throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n     }\n \n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @param o  ignored\n+     *  @throws UnsupportedOperationException always\n+     */\n     public void set(Object o) throws UnsupportedOperationException {\n         throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n     }\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.6 2002/08/13 01:19:00 pjack Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/13 01:19:00 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.7 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  */\n public class ListUtils\n {\n+\n+    /**\n+     *  Please don't ever instantiate a <Code>ListUtils</Code>.\n+     */\n+    public ListUtils() {\n+    }\n+\n+    /**\n+     *  Returns a new list containing all elements that are contained in\n+     *  both given lists.\n+     *\n+     *  @param list1  the first list\n+     *  @param list2  the second list\n+     *  @return  the intersection of those two lists\n+     *  @throws NullPointerException if either list is null\n+     */\n     public static List intersection( final List list1, final List list2 )\n     {\n         final ArrayList result = new ArrayList();\n         return result;\n     }\n \n+\n+    /**\n+     *  Subtracts all elements in the second list from the first list,\n+     *  placing the results in a new list.\n+     *  This differs from {@link List#removeAll(Collection)} in that\n+     *  cardinality is respected; if <Code>list1</Code> contains two\n+     *  occurrences of <Code>null</Code> and <Code>list2</Code> only\n+     *  contains one occurrence, then the returned list will still contain\n+     *  one occurrence.\n+     *\n+     *  @param list1  the list to subtract from\n+     *  @param list2  the lsit to subtract\n+     *  @return  a new list containing the results\n+     *  @throws NullPointerException if either list is null\n+     */\n     public static List subtract( final List list1, final List list2 )\n     {\n         final ArrayList result = new ArrayList( list1 );\n         return result;\n     }\n \n+    /**\n+     *  Returns the sum of the given lists.  This is their intersection\n+     *  subtracted from their union.\n+     *\n+     *  @param list1  the first list \n+     *  @param list2  the second list\n+     *  @return  a new list containing the sum of those lists\n+     *  @throws NullPointerException if either list is null\n+     */ \n     public static List sum( final List list1, final List list2 )\n     {\n         return subtract( union( list1, list2 ),\n                          intersection( list1, list2 ) );\n     }\n \n+\n+    /**\n+     *  Returns a new list containing the second list appended to the\n+     *  first list.  The {@link List#addAll(Collection)} operation is\n+     *  used to append the two given lists into a new list.\n+     *\n+     *  @param list1  the first list \n+     *  @param list2  the second list\n+     *  @return  a new list containing the union of those lists\n+     *  @throws NullPointerException if either list is null\n+     */\n     public static List union( final List list1, final List list2 )\n     {\n         final ArrayList result = new ArrayList( list1 );\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.7 2002/08/13 01:19:00 pjack Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/08/13 01:19:00 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.8 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n \n import java.io.*;\n import java.text.*;\n+import java.text.NumberFormat;\n import java.util.*;\n \n-/** A helper class for using {@link Map Map} instances.\n+/** A helper class for using {@link Map Map} instances.<P>\n   *\n   * It contains various typesafe methods\n-  * as well as other useful features like deep copying\n+  * as well as other useful features like deep copying.<P>\n+  *\n+  * It also provides the following decorators:\n+  *\n+  *  <UL>\n+  *  <LI>{@link #boundedMap(Map,int)}\n+  *  <LI>{@link #fixedSizeMap(Map)}\n+  *  <LI>{@link #fixedSizeSortedMap(SortedMap)}\n+  *  <LI>{@link #lazyMap(Map,Factory)}\n+  *  <LI>{@link #lazySortedMap(SortedMap,Factory)}\n+  *  <LI>{@link #predicatedMap(Map,Predicate,Predicate)}\n+  *  <LI>{@link #predicatedSortedMap(SortedMap,Predicate,Predicate)}\n+  *  </UL>\n   *\n   * @since 1.0\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n public class MapUtils {\n \n     private static int debugIndent = 0;\n-    \n-    \n+\n+    /**\n+     *  Please don't instantiate a <Code>MapUtils</Code>.\n+     */\n+    public MapUtils() {\n+    }    \n     \n     // Type safe getters\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Synonym for {@link Map#get(Object)}.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key whose value to look up in that map\n+     *  @return null if the map is null; or the result of \n+     *     <Code>map.get(key)</Code>\n+     */\n     public static Object getObject( Map map, Object key ) {\n         if ( map != null ) {\n             return map.get( key );\n         return null;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a string.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key whose value to look up in that map\n+     *  @return  null if the map is null; null if the value mapped by that\n+     *    key is null; or the <Code>toString()</Code> \n+     *     result of the value for that key\n+     */\n     public static String getString( Map map, Object key ) {\n         if ( map != null ) {\n             Object answer = map.get( key );\n         return null;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a {@link Boolean}.  If the map is null, this method returns null.\n+     *  If the value mapped by the given key is a \n+     *  {@link Boolean}, then it is returned as-is.  Otherwise, if the value\n+     *  is a string, then if that string ignoring case equals \"true\", then\n+     *  a true {@link Boolean} is returned.  Any other string value will\n+     *  result in a false {@link Boolean} being returned.  OR, if the value\n+     *  is a {@link Number}, and that {@link Number} is 0, then a false\n+     *  {@link Boolean} is returned.  Any other {@link Number} value results\n+     *  in a true {@link Boolean} being returned.<P>\n+     *\n+     *  Any value that is not a {@link Boolean}, {@link String} or \n+     *  {@link Number} results in null being returned.<P>\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key whose value to look up in that map\n+     *  @return  a {@link Boolean} or null\n+     */\n     public static Boolean getBoolean( Map map, Object key ) {\n         if ( map != null ) {\n             Object answer = map.get( key );\n         return null;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a {@link Number}.  If the map is null, this method returns null.\n+     *  Otherwise, if the key maps to a {@link Number}, then that number\n+     *  is returned as-is.  Otherwise, if the key maps to a {@link String},\n+     *  that string is parsed into a number using the system default\n+     *  {@link NumberFormat}.<P>\n+     *\n+     *  If the value is not a {@link Number} or a {@link String}, or if\n+     *  the value is a {@link String} that cannot be parsed into a \n+     *  {@link Number}, then null is returned.<P>\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key whose value to look up in that map\n+     *  @return  a {@link Number} or null\n+     */\n     public static Number getNumber( Map map, Object key ) {\n         if ( map != null ) {\n             Object answer = map.get( key );\n         return null;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a {@link Byte}.  First, {@link #getNumber(Map,Object)} is invoked.\n+     *  If the result is null, then null is returned.  Otherwise, the \n+     *  byte value of the resulting {@link Number} is returned.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key whose value to look up in that map\n+     *  @return  a {@link Byte} or null\n+     */\n     public static Byte getByte( Map map, Object key ) {\n         Number answer = getNumber( map, key );\n         if ( answer == null ) {\n         return new Byte( answer.byteValue() );\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a {@link Short}.  First, {@link #getNumber(Map,Object)} is invoked.\n+     *  If the result is null, then null is returned.  Otherwise, the \n+     *  short value of the resulting {@link Number} is returned.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key whose value to look up in that map\n+     *  @return  a {@link Short} or null\n+     */\n     public static Short getShort( Map map, Object key ) {\n         Number answer = getNumber( map, key );\n         if ( answer == null ) {\n         return new Short( answer.shortValue() );\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  an {@link Integer}.  First, {@link #getNumber(Map,Object)} is invoked.\n+     *  If the result is null, then null is returned.  Otherwise, the \n+     *  integer value of the resulting {@link Number} is returned.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key whose value to look up in that map\n+     *  @return  an {@link Integer} or null\n+     */\n     public static Integer getInteger( Map map, Object key ) {\n         Number answer = getNumber( map, key );\n         if ( answer == null ) {\n         return new Integer( answer.intValue() );\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a {@link Long}.  First, {@link #getNumber(Map,Object)} is invoked.\n+     *  If the result is null, then null is returned.  Otherwise, the \n+     *  long value of the resulting {@link Number} is returned.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key whose value to look up in that map\n+     *  @return  a {@link Long} or null\n+     */\n     public static Long getLong( Map map, Object key ) {\n         Number answer = getNumber( map, key );\n         if ( answer == null ) {\n         return new Long( answer.longValue() );\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a {@link Float}.  First, {@link #getNumber(Map,Object)} is invoked.\n+     *  If the result is null, then null is returned.  Otherwise, the \n+     *  float value of the resulting {@link Number} is returned.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key whose value to look up in that map\n+     *  @return  a {@link Float} or null\n+     */\n     public static Float getFloat( Map map, Object key ) {\n         Number answer = getNumber( map, key );\n         if ( answer == null ) {\n         return new Float( answer.floatValue() );\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a {@link Double}.  First, {@link #getNumber(Map,Object)} is invoked.\n+     *  If the result is null, then null is returned.  Otherwise, the \n+     *  double value of the resulting {@link Number} is returned.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key whose value to look up in that map\n+     *  @return  a {@link Double} or null\n+     */\n     public static Double getDouble( Map map, Object key ) {\n         Number answer = getNumber( map, key );\n         if ( answer == null ) {\n         return new Double( answer.doubleValue() );\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, returning another map.\n+     *  If the given map is null or if the given key doesn't map to another\n+     *  map, then this method returns null.  Otherwise the mapped map is\n+     *  returned.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key whose value to look up in that map\n+     *  @return  a {@link Map} or null\n+     */\n     public static Map getMap( Map map, Object key ) {\n         if ( map != null ) {\n             Object answer = map.get( key );\n \n     // Type safe getters with default values\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Looks up the given key in the given map, converting null into the\n+     *  given default value.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key of the value to look up in that map\n+     *  @param defaultValue  what to return if the value is null\n+     *  @return  the value in the map, or defaultValue if the original value\n+     *    is null or the map is null\n+     */\n     public static Object getObject( Map map, Object key, Object defaultValue ) {\n         if ( map != null ) {\n             Object answer = map.get( key );\n         return defaultValue;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a string, using the default value if the the conversion fails.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key of the value to look up in that map\n+     *  @param defaultValue  what to return if the value is null or if the\n+     *     conversion fails\n+     *  @return  the value in the map as a string, or defaultValue if the \n+     *    original value is null, the map is null or the string conversion\n+     *    fails\n+     */\n     public static String getString( Map map, Object key, String defaultValue ) {\n         String answer = getString( map, key );\n         if ( answer == null ) {\n         return answer;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a boolean, using the default value if the the conversion fails.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key of the value to look up in that map\n+     *  @param defaultValue  what to return if the value is null or if the\n+     *     conversion fails\n+     *  @return  the value in the map as a boolean, or defaultValue if the \n+     *    original value is null, the map is null or the boolean conversion\n+     *    fails\n+     */\n     public static Boolean getBoolean( Map map, Object key, Boolean defaultValue ) {\n         Boolean answer = getBoolean( map, key );\n         if ( answer == null ) {\n         return answer;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a number, using the default value if the the conversion fails.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key of the value to look up in that map\n+     *  @param defaultValue  what to return if the value is null or if the\n+     *     conversion fails\n+     *  @return  the value in the map as a number, or defaultValue if the \n+     *    original value is null, the map is null or the number conversion\n+     *    fails\n+     */\n     public static Number getNumber( Map map, Object key, Number defaultValue ) {\n         Number answer = getNumber( map, key );\n         if ( answer == null ) {\n         return answer;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a byte, using the default value if the the conversion fails.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key of the value to look up in that map\n+     *  @param defaultValue  what to return if the value is null or if the\n+     *     conversion fails\n+     *  @return  the value in the map as a number, or defaultValue if the \n+     *    original value is null, the map is null or the number conversion\n+     *    fails\n+     */\n     public static Byte getByte( Map map, Object key, Byte defaultValue ) {\n         Byte answer = getByte( map, key );\n         if ( answer == null ) {\n         return answer;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a short, using the default value if the the conversion fails.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key of the value to look up in that map\n+     *  @param defaultValue  what to return if the value is null or if the\n+     *     conversion fails\n+     *  @return  the value in the map as a number, or defaultValue if the \n+     *    original value is null, the map is null or the number conversion\n+     *    fails\n+     */\n     public static Short getShort( Map map, Object key, Short defaultValue ) {\n         Short answer = getShort( map, key );\n         if ( answer == null ) {\n         return answer;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  an integer, using the default value if the the conversion fails.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key of the value to look up in that map\n+     *  @param defaultValue  what to return if the value is null or if the\n+     *     conversion fails\n+     *  @return  the value in the map as a number, or defaultValue if the \n+     *    original value is null, the map is null or the number conversion\n+     *    fails\n+     */\n     public static Integer getInteger( Map map, Object key, Integer defaultValue ) {\n         Integer answer = getInteger( map, key );\n         if ( answer == null ) {\n         return answer;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a long, using the default value if the the conversion fails.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key of the value to look up in that map\n+     *  @param defaultValue  what to return if the value is null or if the\n+     *     conversion fails\n+     *  @return  the value in the map as a number, or defaultValue if the \n+     *    original value is null, the map is null or the number conversion\n+     *    fails\n+     */\n     public static Long getLong( Map map, Object key, Long defaultValue ) {\n         Long answer = getLong( map, key );\n         if ( answer == null ) {\n         return answer;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a float, using the default value if the the conversion fails.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key of the value to look up in that map\n+     *  @param defaultValue  what to return if the value is null or if the\n+     *     conversion fails\n+     *  @return  the value in the map as a number, or defaultValue if the \n+     *    original value is null, the map is null or the number conversion\n+     *    fails\n+     */\n     public static Float getFloat( Map map, Object key, Float defaultValue ) {\n         Float answer = getFloat( map, key );\n         if ( answer == null ) {\n         return answer;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a double, using the default value if the the conversion fails.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key of the value to look up in that map\n+     *  @param defaultValue  what to return if the value is null or if the\n+     *     conversion fails\n+     *  @return  the value in the map as a number, or defaultValue if the \n+     *    original value is null, the map is null or the number conversion\n+     *    fails\n+     */\n     public static Double getDouble( Map map, Object key, Double defaultValue ) {\n         Double answer = getDouble( map, key );\n         if ( answer == null ) {\n         return answer;\n     }\n \n+    /**\n+     *  Looks up the given key in the given map, converting the result into\n+     *  a map, using the default value if the the conversion fails.\n+     *\n+     *  @param map  the map whose value to look up\n+     *  @param key  the key of the value to look up in that map\n+     *  @param defaultValue  what to return if the value is null or if the\n+     *     conversion fails\n+     *  @return  the value in the map as a number, or defaultValue if the \n+     *    original value is null, the map is null or the map conversion\n+     *    fails\n+     */\n     public static Map getMap( Map map, Object key, Map defaultValue ) {\n         Map answer = getMap( map, key );\n         if ( answer == null ) {\n \n     // Conversion methods\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Synonym for <Code>new Properties(input)</COde>.\n+     */\n     public static Properties toProperties(Map input) {\n         Properties answer = new Properties();\n         if ( input != null ) {\n \n     // Printing methods\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Prints the given map with nice line breaks.\n+     *\n+     *  @param out  the stream to print to\n+     *  @param key  the key that maps to the map in some other map\n+     *  @param map  the map to print\n+     */\n     public static synchronized void verbosePrint( PrintStream out, Object key, Map map ) {\n         debugPrintIndent( out );\n         out.println( key + \" = \" );\n         out.println( \"}\" );\n     }\n \n+    /**\n+     *  Prints the given map with nice line breaks.\n+     *\n+     *  @param out  the stream to print to\n+     *  @param key  the key that maps to the map in some other map\n+     *  @param map  the map to print\n+     */\n     public static synchronized void debugPrint( PrintStream out, Object key, Map map ) {\n         debugPrintIndent( out );\n         out.println( key + \" = \" );\n \n     // Implementation methods\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Writes indentation to the given stream.\n+     *\n+     *  @param out   the stream to indent\n+     */\n     protected static void debugPrintIndent( PrintStream out ) {\n         for ( int i = 0; i < debugIndent; i++ ) {\n             out.print( \"    \" );\n         }\n     }\n     \n+    /**\n+     *  Logs the given exception to <Code>System.out</Code>.\n+     *\n+     *  @param e  the exception to log\n+     */\n     protected static void logInfo(Exception e) {\n         // mapX: should probably use log4j here instead...\n         System.out.println( \"INFO: Exception: \" + e );\n--- a/src/java/org/apache/commons/collections/Predicate.java\n+++ b/src/java/org/apache/commons/collections/Predicate.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Predicate.java,v 1.4 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Predicate.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n   */\n public interface Predicate {\n \n-    /** @return true if the input object matches this predicate, else returns false\n+    /**\n+      *  Returns true if the input object matches this predicate. \n+      *\n+      * @return true if the input object matches this predicate, else returns false\n       */\n     public boolean evaluate(Object input);\n }\n--- a/src/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/java/org/apache/commons/collections/PredicateUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.4 2002/08/13 00:46:25 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/13 00:46:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/PredicateUtils.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  * And, Or and instanceof.\n  * \n  * @author Stephen Colebourne\n- * @version $Id: PredicateUtils.java,v 1.4 2002/08/13 00:46:25 pjack Exp $\n+ * @version $Id: PredicateUtils.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n  * @since 2.1\n  */\n public class PredicateUtils {\n     /**\n      * Predicate that checks the type of an object\n      */\n-    public static class InstanceofPredicate implements Predicate {\n+    private static class InstanceofPredicate implements Predicate {\n         private final Class iType;\n     \n     \t/**\n--- a/src/java/org/apache/commons/collections/ProxyIterator.java\n+++ b/src/java/org/apache/commons/collections/ProxyIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyIterator.java,v 1.4 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyIterator.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n   *\n   * @since 1.0\n   * @see ProxyListIterator\n-  * @version $Revision: 1.4 $ $Date: 2002/06/12 03:59:15 $\n+  * @version $Revision: 1.5 $ $Date: 2002/08/15 20:04:31 $\n   *\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n   */\n     /** Holds value of property iterator. */\n     private Iterator iterator;\n     \n-    \n+    /**\n+     *  Constructs a new <Code>ProxyIterator</Code> that will not function\n+     *  until {@link #setIterator(Iterator)} is called.\n+     */\n     public ProxyIterator() {\n     }\n     \n+    /**\n+     *  Constructs a new <Code>ProxyIterator</Code> that will use the\n+     *  given iterator.\n+     *\n+     *  @param iterator  the underyling iterator\n+     */\n     public ProxyIterator( Iterator iterator ) {\n         this.iterator = iterator;\n     }\n \n     // Iterator interface\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns true if the underlying iterator has more elements.\n+     *\n+     *  @return true if the underlying iterator has more elements\n+     */\n     public boolean hasNext() {\n         return getIterator().hasNext();\n     }\n \n+    /**\n+     *  Returns the next element from the underlying iterator.\n+     *\n+     *  @return the next element from the underlying iterator\n+     *  @throws NoSuchElementException  if the underlying iterator \n+     *    raises it because it has no more elements\n+     */\n     public Object next() {\n         return getIterator().next();\n     }\n \n+    /**\n+     *  Removes the last returned element from the collection that spawned\n+     *  the underlying iterator.\n+     */\n     public void remove() {\n         getIterator().remove();\n     }\n--- a/src/java/org/apache/commons/collections/ProxyListIterator.java\n+++ b/src/java/org/apache/commons/collections/ProxyListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyListIterator.java,v 1.2 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyListIterator.java,v 1.3 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  *\n  * @since 2.0\n  * @see ProxyIterator\n- * @version $Revision: 1.2 $ $Date: 2002/06/12 03:59:15 $\n+ * @version $Revision: 1.3 $ $Date: 2002/08/15 20:04:31 $\n  * @author Rodney Waldhoff\n  */\n public class ProxyListIterator implements ListIterator {\n     // Constructor\n     //-------------------------------------------------------------------------\n \n+    /**\n+     *  Constructs a new <Code>ProxyListIterator</Code> that will not \n+     *  function until {@link #setListIterator(ListIterator) setListIterator}\n+     *  is invoked.\n+     */\n     public ProxyListIterator() {\n     }\n \n+    /**\n+     *  Constructs a new <Code>ProxyListIterator</Code> that will use the\n+     *  given list iterator.\n+     *\n+     *  @param iterator  the list iterator to use\n+     */\n     public ProxyListIterator(ListIterator iterator) {\n         this.iterator = iterator;\n     }\n     // ListIterator interface\n     //-------------------------------------------------------------------------\n \n+    /**\n+     *  Invokes the underlying {@link ListIterator#add(Object)} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n     public void add(Object o) {\n         getListIterator().add(o);\n     }\n \n+    /**\n+     *  Invokes the underlying {@link ListIterator#hasNext()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n     public boolean hasNext() {\n         return getListIterator().hasNext();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link ListIterator#hasPrevious()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n     public boolean hasPrevious() {\n         return getListIterator().hasPrevious();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link ListIterator#next()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n     public Object next() {\n         return getListIterator().next();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link ListIterator#nextIndex()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n     public int nextIndex() {\n         return getListIterator().nextIndex();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link ListIterator#previous()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n     public Object previous() {\n         return getListIterator().previous();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link ListIterator#previousIndex()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n     public int previousIndex() {\n         return getListIterator().previousIndex();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link ListIterator#remove()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n     public void remove() {\n         getListIterator().remove();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link ListIterator#set(Object)} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n     public void set(Object o) {\n         getListIterator().set(o);\n     }\n--- a/src/java/org/apache/commons/collections/ProxyMap.java\n+++ b/src/java/org/apache/commons/collections/ProxyMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ProxyMap.java,v 1.4 2002/08/12 22:51:13 pjack Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/12 22:51:13 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ProxyMap.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n         this.map = map;\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#clear()} method.\n+     */\n     public void clear() {\n         map.clear();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#containsKey(Object)} method.\n+     */\n     public boolean containsKey(Object key) {\n         return map.containsKey(key);\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#containsValue(Object)} method.\n+     */\n     public boolean containsValue(Object value) {\n         return map.containsValue(value);\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#entrySet()} method.\n+     */\n     public Set entrySet() {\n         return map.entrySet();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#equals(Object)} method.\n+     */\n     public boolean equals(Object m) {\n         return map.equals(m);\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#get(Object)} method.\n+     */\n     public Object get(Object key) {\n         return map.get(key);\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#hashCode()} method.\n+     */\n     public int hashCode() {\n         return map.hashCode();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#isEmpty()} method.\n+     */\n     public boolean isEmpty() {\n         return map.isEmpty();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#keySet()} method.\n+     */\n     public Set keySet() {\n         return map.keySet();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#put(Object,Object)} method.\n+     */\n     public Object put(Object key, Object value) {\n         return map.put(key, value);\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#putAll(Map)} method.\n+     */\n     public void putAll(Map t) {\n         map.putAll(t);\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#remove(Object)} method.\n+     */\n     public Object remove(Object key) {\n         return map.remove(key);\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#size()} method.\n+     */\n     public int size() {\n         return map.size();\n     }\n \n+    /**\n+     *  Invokes the underlying {@link Map#values()} method.\n+     */\n     public Collection values() {\n         return map.values();\n     }\n--- a/src/java/org/apache/commons/collections/SequencedHashMap.java\n+++ b/src/java/org/apache/commons/collections/SequencedHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.12 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.12 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.13 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n   }\n \n   // per Map.size()\n+\n+  /**\n+   *  Implements {@link Map#size()}.\n+   */\n   public int size() {\n     // use the underlying Map's size since size is not maintained here.\n     return entries.size();\n   }\n \n-  // per Map.isEmpty()\n+  /**\n+   *  Implements {@link Map#isEmpty()}.\n+   */\n   public boolean isEmpty() {\n     // for quick check whether the map is entry, we can check the linked list\n     // and see if there's anything in it.\n     return sentinel.next == sentinel;\n   }\n \n-  // per Map.containsKey(Object)\n+  /**\n+   *  Implements {@link Map#containsKey(Object)}.\n+   */\n   public boolean containsKey(Object key) {\n     // pass on to underlying map implementation\n     return entries.containsKey(key);\n   }\n \n-  // per Map.containsValue(Object)\n+  /**\n+   *  Implements {@link Map#containsValue(Object)}.\n+   */\n   public boolean containsValue(Object value) {\n     // unfortunately, we cannot just pass this call to the underlying map\n     // because we are mapping keys to entries, not keys to values.  The\n     return false;      \n   }\n \n-  // per Map.get(Object)\n+  /**\n+   *  Implements {@link Map#get(Object)}.\n+   */\n   public Object get(Object o) {\n     // find entry for the specified key object\n     Entry entry = (Entry)entries.get(o);\n     return sentinel.prev.getValue();\n   }\n \n-  // per Map.put(Object,Object)\n+  /**\n+   *  Implements {@link Map#put(Object, Object)}.\n+   */\n   public Object put(Object key, Object value) {\n     modCount++;\n \n     return oldValue;\n   }\n \n-  // per Map.remove(Object)\n+  /**\n+   *  Implements {@link Map#remove(Object)}.\n+   */\n   public Object remove(Object key) {\n     Entry e = removeImpl(key);\n     return (e == null) ? null : e.getValue();\n     }\n   }\n \n-  // per Map.clear()\n+  /**\n+   *  Implements {@link Map#clear()}.\n+   */\n   public void clear() {\n     modCount++;\n \n     sentinel.prev = sentinel;\n   }\n \n-  // per Map.equals(Object)\n+  /**\n+   *  Implements {@link Map#equals(Object)}.\n+   */\n   public boolean equals(Object obj) {\n     if(obj == null) return false;\n     if(obj == this) return true;\n     return entrySet().equals(((Map)obj).entrySet());\n   }\n \n-  // per Map.hashCode()\n+  /**\n+   *  Implements {@link Map#hashCode()}.\n+   */\n   public int hashCode() {\n     return entrySet().hashCode();\n   }\n     return buf.toString();\n   }\n \n-  // per Map.keySet()\n+  /**\n+   *  Implements {@link Map#keySet()}.\n+   */\n   public Set keySet() {\n     return new AbstractSet() {\n \n     };\n   }\n \n-  // per Map.values()\n+  /**\n+   *  Implements {@link Map#values()}.\n+   */\n   public Collection values() {\n     return new AbstractCollection() {\n       // required impl\n     };\n   }\n \n-  // per Map.entrySet()\n+  /**\n+   *  Implements {@link Map#entrySet()}.\n+   */\n   public Set entrySet() {\n     return new AbstractSet() {\n       // helper\n   }\n \n   // per Externalizable.readExternal(ObjectInput)\n+\n+  /**\n+   *  Deserializes this map from the given stream.\n+   *\n+   *  @param in the stream to deserialize from\n+   *  @throws IOException if the stream raises it\n+   *  @throws ClassNotFoundException if the stream raises it\n+   */\n   public void readExternal( ObjectInput in ) \n     throws IOException, ClassNotFoundException \n   {\n     }\n   }\n   \n-  // per Externalizable.writeExternal(ObjectOutput)\n+  /**\n+   *  Serializes this map to the given stream.\n+   *\n+   *  @param out  the stream to serialize to\n+   *  @throws IOException  if the stream raises it\n+   */\n   public void writeExternal( ObjectOutput out ) throws IOException {\n     out.writeInt(size());\n     for(Entry pos = sentinel.next; pos != sentinel; pos = pos.next) {\n--- a/src/java/org/apache/commons/collections/SingletonIterator.java\n+++ b/src/java/org/apache/commons/collections/SingletonIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/SingletonIterator.java,v 1.5 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/SingletonIterator.java,v 1.6 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n   *\n   * @since 2.0\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  * @version $Revision: 1.5 $\n+  * @version $Revision: 1.6 $\n   */\n public class SingletonIterator implements Iterator {\n \n     private boolean first = true;\n     private Object object;\n     \n+    /**\n+     *  Constructs a new <Code>SingletonIterator</Code>.\n+     *\n+     *  @param object  the single object to return from the iterator\n+     */\n     public SingletonIterator(Object object) {\n         this.object = object;\n     }\n \n+    /**\n+     *  Returns true if the single object hasn't been returned yet.\n+     * \n+     *  @return true if the single object hasn't been returned yet\n+     */\n     public boolean hasNext() {\n         return first;\n     }\n \n+    /**\n+     *  Returns the single object if it hasn't been returned yet.\n+     *\n+     *  @return the single object\n+     *  @throws NoSuchElementException if the single object has already been\n+     *    returned\n+     */\n     public Object next() {\n         if (! first ) {\n             throw new NoSuchElementException();\n         return answer;\n     }\n \n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @throws UnsupportedOperationException always\n+     */\n     public void remove() {\n         throw new UnsupportedOperationException( \"remove() is not supported by this iterator\" );\n     }\n--- a/src/java/org/apache/commons/collections/StaticBucketMap.java\n+++ b/src/java/org/apache/commons/collections/StaticBucketMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/StaticBucketMap.java,v 1.3 2002/08/15 03:22:29 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/15 03:22:29 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/StaticBucketMap.java,v 1.4 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  * @author  <a href=\"mailto:g-froehlich@gmx.de\">Gerhard Froehlich</a>\n  * @author  <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n  * @author  Paul Jack\n- * @version CVS $Revision: 1.3 $ $Date: 2002/08/15 03:22:29 $\n+ * @version CVS $Revision: 1.4 $ $Date: 2002/08/15 20:04:31 $\n  * @since Avalon 4.0\n  */\n public final class StaticBucketMap implements Map\n     }\n \n     /**\n-     *  Returns a set view of this map's keys.\n+     *  Implements {@link Map#keySet()}.\n      */\n     public Set keySet()\n     {\n     }\n \n     /**\n-     * Returns the current number of key, value pairs.\n+     *  Implements {@link Map#size()}.\n      */\n     public int size()\n     {\n     }\n \n     /**\n-     * Put a reference in the Map.\n+     *  Implements {@link Map#put(Object, Object)}.\n      */\n     public Object put( final Object key, final Object value )\n     {\n     }\n \n     /**\n-     * Get an object from the Map by the key\n+     *  Implements {@link Map#get(Object)}.\n      */\n     public Object get( final Object key )\n     {\n     }\n \n     /**\n-     * Checks to see if the provided key exists in the Map.\n+     * Implements {@link Map#containsKey(Object)}.\n      */\n     public boolean containsKey( final Object key )\n     {\n     }\n \n     /**\n-     * Checks to see if a value exists.  This operation crosses bucket\n-     * boundaries, so it is less efficient, and greatly increases the chance\n-     * for thread contention.\n+     * Implements {@link Map#containsValue(Object)}.\n      */\n     public boolean containsValue( final Object value )\n     {\n     }\n \n     /**\n-     * Obtain a Set for the values.  This operation crosses bucket boundaries,\n-     * so it is less efficient, and greatly increases the chance for thread\n-     * contention.\n+     *  Implements {@link Map#values()}.\n      */\n     public Collection values()\n     {\n     }\n \n     /**\n-     * Obtain a Set for the entries.  This operation crosses bucket boundaries,\n-     * so it is less efficient, and greatly increases the chance for thread\n-     * contention.\n+     *  Implements {@link Map#entrySet()}.\n      */\n     public Set entrySet()\n     {\n     }\n \n     /**\n-     * Add all the contents of one Map into this one.\n+     *  Implements {@link Map#putAll(Map)}.\n      */\n     public void putAll( Map other )\n     {\n     }\n \n     /**\n-     * Removes the object from the Map based on the key.\n+     *  Implements {@link Map#remove(Object)}.\n      */\n     public Object remove( Object key )\n     {\n     }\n \n     /**\n-     * Tests if the Map is empty.\n+     *  Implements {@link Map#isEmpty()}.\n      */\n     public final boolean isEmpty()\n     {\n     }\n \n     /**\n-     * Removes all the entries from the Map.\n+     *  Implements {@link Map#clear()}.\n      */\n     public final void clear()\n     {\n     }\n \n     /**\n-     *  Returns true if the given object is a map with the same mappings\n-     *  as this map.\n-     *\n-     *  @return true if the given object is the a map with same mappings\n-     *   as this map\n+     *  Implements {@link Map#equals(Object)}.\n      */\n     public final boolean equals( Object obj )\n     {\n     }\n \n     /**\n-     *  Returns a hash code for this map.\n-     *\n-     *  @return a hash code for this map\n+     *  Implements {@link Map#hashCode()}.\n      */\n     public final int hashCode() \n     {\n--- a/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java\n+++ b/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java,v 1.4 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SynchronizedPriorityQueue.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n public final class SynchronizedPriorityQueue \n     implements PriorityQueue\n {\n+\n+    /**\n+     *  The underlying priority queue.\n+     */\n     protected final PriorityQueue   m_priorityQueue;\n \n+\n+    /**\n+     *  Constructs a new synchronized priority queue.\n+     *\n+     *  @param priorityQueue the priority queue to synchronize\n+     */\n     public SynchronizedPriorityQueue( final PriorityQueue priorityQueue )\n     {\n         m_priorityQueue = priorityQueue;\n         return m_priorityQueue.pop();\n     }\n \n+    /**\n+     *  Returns a string representation of the underlying queue.\n+     *\n+     *  @return a string representation of the underlying queue\n+     */\n     public synchronized String toString()\n     {\n         return m_priorityQueue.toString();\n--- a/src/java/org/apache/commons/collections/TransformIterator.java\n+++ b/src/java/org/apache/commons/collections/TransformIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/TransformIterator.java,v 1.4 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/TransformIterator.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n     private Transformer transformer;\n     \n     \n+    /**\n+     *  Constructs a new <Code>TransformIterator</Code> that will not function\n+     *  until the {@link #setIterator(Iterator) setIterator} method is \n+     *  invoked.\n+     */\n     public TransformIterator() {\n     }\n     \n+    /**\n+     *  Constructs a new <Code>TransformIterator</Code> that won't transform\n+     *  elements from the given iterator.\n+     *\n+     *  @param iterator  the iterator to use\n+     */\n     public TransformIterator( Iterator iterator ) {\n         super( iterator );\n     }\n \n+    /**\n+     *  Constructs a new <Code>TransformIterator</Code> that will use the\n+     *  given iterator and transformer.  If the given transformer is null,\n+     *  then objects will not be transformed.\n+     *\n+     *  @param iterator  the iterator to use\n+     *  @param transformer  the transformer to use\n+     */\n     public TransformIterator( Iterator iterator, Transformer transformer ) {\n         super( iterator );\n         this.transformer = transformer;\n     \n     // Implementation methods\n     //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Transforms the given object using the transformer.  If the \n+     *  transformer is null, the original object is returned as-is.\n+     *\n+     *  @param source  the object to transform\n+     *  @return  the transformed object\n+     */\n     protected Object transform( Object source ) {\n         Transformer transformer = getTransformer();\n         if ( transformer != null ) {\n--- a/src/java/org/apache/commons/collections/TreeBag.java\n+++ b/src/java/org/apache/commons/collections/TreeBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TreeBag.java,v 1.5 2002/06/12 03:59:15 mas Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/06/12 03:59:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TreeBag.java,v 1.6 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n  * @author Chuck Burdick\n  **/\n public class TreeBag extends DefaultMapBag implements SortedBag, Bag {\n+\n+   /**\n+    *  Constructs a new empty <Code>TreeBag</Code>.\n+    */\n    public TreeBag() {\n       setMap(new TreeMap());\n    }\n--- a/src/java/org/apache/commons/collections/UniqueFilterIterator.java\n+++ b/src/java/org/apache/commons/collections/UniqueFilterIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/UniqueFilterIterator.java,v 1.2 2002/08/13 00:46:25 pjack Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/08/13 00:46:25 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/UniqueFilterIterator.java,v 1.3 2002/08/15 20:04:31 pjack Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/15 20:04:31 $\n  *\n  * ====================================================================\n  *\n   * and duplicate Objects are skipped.\n   *\n   * @author Morgan Delagrange\n-  * @version $Id: UniqueFilterIterator.java,v 1.2 2002/08/13 00:46:25 pjack Exp $\n+  * @version $Id: UniqueFilterIterator.java,v 1.3 2002/08/15 20:04:31 pjack Exp $\n   * @since 2.1\n   */\n \n        \n     //-------------------------------------------------------------------------\n     \n+    /**\n+     *  Constructs a new <Code>UniqueFilterIterator</Code>.\n+     *\n+     *  @param iterator  the iterator to use\n+     */\n     public UniqueFilterIterator( Iterator iterator ) {\n         super( iterator, new UniquePredicate() );\n     }", "timestamp": 1029441871, "metainfo": ""}