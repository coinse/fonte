{"sha": "8fc1425e8457726e2c1477700f08d330f658d55f", "log": "Let JUnit 4 check the Exception  ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestPredicateUtils.java\n+++ b/src/test/org/apache/commons/collections/TestPredicateUtils.java\n         assertEquals(false, PredicateUtils.notPredicate(TruePredicate.truePredicate()).evaluate(cInteger));\n     }\n \n-    @Test public void testNotPredicateEx() {\n-        try {\n-            PredicateUtils.notPredicate(null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testNotPredicateEx() {\n+        PredicateUtils.notPredicate(null);\n     }\n \n     // andPredicate\n         assertEquals(false, PredicateUtils.andPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n     }\n \n-    @Test public void testAndPredicateEx() {\n-        try {\n-            PredicateUtils.andPredicate(null, null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testAndPredicateEx() {\n+        PredicateUtils.andPredicate(null, null);\n     }\n \n     // allPredicate\n         assertTrue(AllPredicate.allPredicate(coll), null);\n     }\n \n-    @Test public void testAllPredicateEx1() {\n-        try {\n-            AllPredicate.allPredicate((Predicate<Object>[]) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Test public void testAllPredicateEx2() {\n-        try {\n-            AllPredicate.<Object>allPredicate(new Predicate[] { null });\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Test public void testAllPredicateEx3() {\n-        try {\n-            AllPredicate.allPredicate(new Predicate[] { null, null });\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test public void testAllPredicateEx4() {\n-        try {\n-            AllPredicate.allPredicate((Collection<Predicate<Object>>) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testAllPredicateEx1() {\n+        AllPredicate.allPredicate((Predicate<Object>[]) null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testAllPredicateEx2() {\n+        AllPredicate.<Object>allPredicate(new Predicate[] { null });\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testAllPredicateEx3() {\n+        AllPredicate.allPredicate(new Predicate[] { null, null });\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testAllPredicateEx4() {\n+        AllPredicate.allPredicate((Collection<Predicate<Object>>) null);\n     }\n \n     @Test public void testAllPredicateEx5() {\n         AllPredicate.allPredicate(Collections.<Predicate<Object>>emptyList());\n     }\n \n-    @Test public void testAllPredicateEx6() {\n-        try {\n-            Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n-            coll.add(null);\n-            coll.add(null);\n-            AllPredicate.allPredicate(coll);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testAllPredicateEx6() {\n+        Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n+        coll.add(null);\n+        coll.add(null);\n+        AllPredicate.allPredicate(coll);\n     }\n \n     // orPredicate\n         assertEquals(false, PredicateUtils.orPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n     }\n \n-    @Test public void testOrPredicateEx() {\n-        try {\n-            PredicateUtils.orPredicate(null, null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testOrPredicateEx() {\n+        PredicateUtils.orPredicate(null, null);\n     }\n \n     // anyPredicate\n         assertFalse(PredicateUtils.anyPredicate(coll), null);\n     }\n \n-    @Test public void testAnyPredicateEx1() {\n-        try {\n-            PredicateUtils.anyPredicate((Predicate<Object>[]) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Test public void testAnyPredicateEx2() {\n-        try {\n-            PredicateUtils.anyPredicate(new Predicate[] {null});\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Test public void testAnyPredicateEx3() {\n-        try {\n-            PredicateUtils.anyPredicate(new Predicate[] {null, null});\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test public void testAnyPredicateEx4() {\n-        try {\n-            PredicateUtils.anyPredicate((Collection<Predicate<Object>>) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testAnyPredicateEx1() {\n+        PredicateUtils.anyPredicate((Predicate<Object>[]) null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testAnyPredicateEx2() {\n+        PredicateUtils.anyPredicate(new Predicate[] {null});\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testAnyPredicateEx3() {\n+        PredicateUtils.anyPredicate(new Predicate[] {null, null});\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testAnyPredicateEx4() {\n+        PredicateUtils.anyPredicate((Collection<Predicate<Object>>) null);\n     }\n \n     @Test public void testAnyPredicateEx5() {\n         PredicateUtils.anyPredicate(Collections.<Predicate<Object>>emptyList());\n     }\n \n-    @Test public void testAnyPredicateEx6() {\n-        try {\n-            Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n-            coll.add(null);\n-            coll.add(null);\n-            PredicateUtils.anyPredicate(coll);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testAnyPredicateEx6() {\n+        Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n+        coll.add(null);\n+        coll.add(null);\n+        PredicateUtils.anyPredicate(coll);\n     }\n \n     // eitherPredicate\n         assertEquals(false, PredicateUtils.eitherPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n     }\n \n-    @Test public void testEitherPredicateEx() {\n-        try {\n-            PredicateUtils.eitherPredicate(null, null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testEitherPredicateEx() {\n+        PredicateUtils.eitherPredicate(null, null);\n     }\n \n     // onePredicate\n         assertFalse(PredicateUtils.onePredicate(coll), null);\n     }\n \n-    @Test public void testOnePredicateEx1() {\n-        try {\n-            PredicateUtils.onePredicate((Predicate<Object>[]) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Test public void testOnePredicateEx2() {\n-        try {\n-            PredicateUtils.onePredicate(new Predicate[] {null});\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Test public void testOnePredicateEx3() {\n-        try {\n-            PredicateUtils.onePredicate(new Predicate[] {null, null});\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test public void testOnePredicateEx4() {\n-        try {\n-            PredicateUtils.onePredicate((Collection<Predicate<Object>>) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class) \n+    public void testOnePredicateEx1() {\n+        PredicateUtils.onePredicate((Predicate<Object>[]) null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testOnePredicateEx2() {\n+        PredicateUtils.onePredicate(new Predicate[] {null});\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testOnePredicateEx3() {\n+        PredicateUtils.onePredicate(new Predicate[] {null, null});\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testOnePredicateEx4() {\n+        PredicateUtils.onePredicate((Collection<Predicate<Object>>) null);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n         PredicateUtils.onePredicate(Collections.EMPTY_LIST);\n     }\n \n-    @Test public void testOnePredicateEx6() {\n-        try {\n-            Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n-            coll.add(null);\n-            coll.add(null);\n-            PredicateUtils.onePredicate(coll);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testOnePredicateEx6() {\n+        Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n+        coll.add(null);\n+        coll.add(null);\n+        PredicateUtils.onePredicate(coll);\n     }\n \n     // neitherPredicate\n         assertEquals(true, PredicateUtils.neitherPredicate(FalsePredicate.falsePredicate(), FalsePredicate.falsePredicate()).evaluate(null));\n     }\n \n-    @Test public void testNeitherPredicateEx() {\n-        try {\n-            PredicateUtils.neitherPredicate(null, null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNeitherPredicateEx() {\n+        PredicateUtils.neitherPredicate(null, null);\n     }\n \n     // nonePredicate\n         assertTrue(PredicateUtils.nonePredicate(coll), null);\n     }\n \n-    @Test public void testNonePredicateEx1() {\n-        try {\n-            PredicateUtils.nonePredicate((Predicate<Object>[]) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Test public void testNonePredicateEx2() {\n-        try {\n-            PredicateUtils.nonePredicate(new Predicate[] {null});\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Test public void testNonePredicateEx3() {\n-        try {\n-            PredicateUtils.nonePredicate(new Predicate[] {null, null});\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test public void testNonePredicateEx4() {\n-        try {\n-            PredicateUtils.nonePredicate((Collection<Predicate<Object>>) null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNonePredicateEx1() {\n+        PredicateUtils.nonePredicate((Predicate<Object>[]) null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNonePredicateEx2() {\n+        PredicateUtils.nonePredicate(new Predicate[] {null});\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNonePredicateEx3() {\n+        PredicateUtils.nonePredicate(new Predicate[] {null, null});\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNonePredicateEx4() {\n+        PredicateUtils.nonePredicate((Collection<Predicate<Object>>) null);\n     }\n \n     @Test public void testNonePredicateEx5() {\n         PredicateUtils.nonePredicate(Collections.<Predicate<Object>>emptyList());\n     }\n \n-    @Test public void testNonePredicateEx6() {\n-        try {\n-            Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n-            coll.add(null);\n-            coll.add(null);\n-            PredicateUtils.nonePredicate(coll);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNonePredicateEx6() {\n+        Collection<Predicate<Object>> coll = new ArrayList<Predicate<Object>>();\n+        coll.add(null);\n+        coll.add(null);\n+        PredicateUtils.nonePredicate(coll);\n     }\n \n     // instanceofPredicate\n         assertEquals(true, PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(true));\n     }\n \n-    @Test public void testAsPredicateTransformerEx1() {\n-        try {\n-            PredicateUtils.asPredicate(null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test public void testAsPredicateTransformerEx2() {\n-        try {\n-            PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(null);\n-        } catch (FunctorException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testAsPredicateTransformerEx1() {\n+        PredicateUtils.asPredicate(null);\n+    }\n+\n+    @Test(expected=FunctorException.class)\n+    public void testAsPredicateTransformerEx2() {\n+        PredicateUtils.asPredicate(TransformerUtils.<Boolean>nopTransformer()).evaluate(null);\n     }\n \n     // invokerPredicate\n         assertEquals(false, PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(list));\n     }\n \n-    @Test public void testInvokerPredicateEx1() {\n-        try {\n-            PredicateUtils.invokerPredicate(null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test public void testInvokerPredicateEx2() {\n-        try {\n-            PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(null);\n-        } catch (FunctorException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test public void testInvokerPredicateEx3() {\n-        try {\n-            PredicateUtils.invokerPredicate(\"noSuchMethod\").evaluate(new Object());\n-        } catch (FunctorException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testInvokerPredicateEx1() {\n+        PredicateUtils.invokerPredicate(null);\n+    }\n+\n+    @Test(expected=FunctorException.class)\n+    public void testInvokerPredicateEx2() {\n+        PredicateUtils.invokerPredicate(\"isEmpty\").evaluate(null);\n+    }\n+\n+    @Test(expected=FunctorException.class)\n+    public void testInvokerPredicateEx3() {\n+        PredicateUtils.invokerPredicate(\"noSuchMethod\").evaluate(new Object());\n     }\n \n     // invokerPredicate2\n             \"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(list));\n     }\n \n-    @Test public void testInvokerPredicate2Ex1() {\n-        try {\n-            PredicateUtils.invokerPredicate(null, null, null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test public void testInvokerPredicate2Ex2() {\n-        try {\n-            PredicateUtils.invokerPredicate(\"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(null);\n-        } catch (FunctorException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test public void testInvokerPredicate2Ex3() {\n-        try {\n-            PredicateUtils.invokerPredicate(\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testInvokerPredicate2Ex1() {\n+        PredicateUtils.invokerPredicate(null, null, null);\n+    }\n+\n+    @Test(expected=FunctorException.class)\n+    public void testInvokerPredicate2Ex2() {\n+        PredicateUtils.invokerPredicate(\"contains\", new Class[] {Object.class}, new Object[] {cString}).evaluate(null);\n+    }\n+\n+    @Test(expected=FunctorException.class)\n+    public void testInvokerPredicate2Ex3() {\n+        PredicateUtils.invokerPredicate(\n                 \"noSuchMethod\", new Class[] {Object.class}, new Object[] {cString}).evaluate(new Object());\n-        } catch (FunctorException ex) {\n-            return;\n-        }\n-        fail();\n     }\n \n     // nullIsException\n     //------------------------------------------------------------------\n \n-    @Test public void testNullIsExceptionPredicate() {\n+    @Test(expected=FunctorException.class)\n+    public void testNullIsExceptionPredicate() {\n         assertEquals(true, PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(new Object()));\n-        try {\n-            PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(null);\n-        } catch (FunctorException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test public void testNullIsExceptionPredicateEx1() {\n-        try {\n-            PredicateUtils.nullIsExceptionPredicate(null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+        PredicateUtils.nullIsExceptionPredicate(TruePredicate.truePredicate()).evaluate(null);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNullIsExceptionPredicateEx1() {\n+        PredicateUtils.nullIsExceptionPredicate(null);\n     }\n \n     // nullIsTrue\n         assertEquals(false, PredicateUtils.nullIsTruePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));\n     }\n \n-    @Test public void testNullIsTruePredicateEx1() {\n-        try {\n-            PredicateUtils.nullIsTruePredicate(null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNullIsTruePredicateEx1() {\n+        PredicateUtils.nullIsTruePredicate(null);\n     }\n \n     // nullIsFalse\n         assertEquals(false, PredicateUtils.nullIsFalsePredicate(FalsePredicate.falsePredicate()).evaluate(new Object()));\n     }\n \n-    @Test public void testNullIsFalsePredicateEx1() {\n-        try {\n-            PredicateUtils.nullIsFalsePredicate(null);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testNullIsFalsePredicateEx1() {\n+        PredicateUtils.nullIsFalsePredicate(null);\n     }\n \n     // transformed", "timestamp": 1287710299, "metainfo": ""}