{"sha": "f0ef1c8d0e63738b13df11cb4e3ac0bced206509", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestBidiMap.java\n import org.apache.commons.collections.BulkTest;\n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n-import org.apache.commons.collections.map.AbstractTestMap;\n+import org.apache.commons.collections.map.AbstractTestIterableMap;\n \n /**\n  * Abstract test class for {@link BidiMap} methods and contracts.\n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  */\n-public abstract class AbstractTestBidiMap extends AbstractTestMap {\n-\n-    // Test data.\n-    private static final Object[][] entriesKV =\n-        new Object[][] {\n-            new Object[] { \"key1\", \"value1\" },\n-            new Object[] { \"key2\", \"value2\" },\n-            new Object[] { \"key3\", \"value3\" }\n-    };\n-    private static final Object[][] entriesVK =\n-        new Object[][] {\n-            new Object[] { \"value1\", \"key1\" },\n-            new Object[] { \"value2\", \"key2\" },\n-            new Object[] { \"value3\", \"key3\" }\n-    };\n-    protected final Object[][] entries;\n+public abstract class AbstractTestBidiMap<K, V> extends AbstractTestIterableMap<K, V> {\n \n     public AbstractTestBidiMap(String testName) {\n         super(testName);\n-        entries = entriesKV;\n     }\n \n     public AbstractTestBidiMap() {\n         super(\"Inverse\");\n-        entries = entriesVK;\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Implement to create an empty <code>BidiMap</code>.\n-     * \n-     * @return an empty <code>BidiMap</code> implementation.\n-     */\n-    public abstract BidiMap makeEmptyBidiMap();\n-\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Override to create a full <code>BidiMap</code> other than the default.\n-     * \n+     *\n      * @return a full <code>BidiMap</code> implementation.\n      */\n-    public BidiMap makeFullBidiMap() {\n-        final BidiMap map = makeEmptyBidiMap();\n-        for (int i = 0; i < entries.length; i++) {\n-            map.put(entries[i][0], entries[i][1]);\n-        }\n-        return map;\n+    @Override\n+    public BidiMap<K, V> makeFullMap() {\n+        return (BidiMap<K, V>) super.makeFullMap();\n     }\n \n     /**\n      * Override to return the empty BidiMap.\n      */\n-    public final  Map makeEmptyMap() {\n-        return makeEmptyBidiMap();\n-    }\n+    public abstract BidiMap<K, V> makeObject();\n \n     /**\n      * Override to indicate to AbstractTestMap this is a BidiMap.\n     public boolean isAllowDuplicateValues() {\n         return false;\n     }\n-    \n+\n     /**\n      * Override as DualHashBidiMap didn't exist until version 3.\n      */\n \n     // BidiPut\n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testBidiPut() {\n         if (isPutAddSupported() == false || isPutChangeSupported() == false) return;\n \n-        BidiMap map = makeEmptyBidiMap();\n-        BidiMap inverse = map.inverseBidiMap();\n+        BidiMap<K, V> map = makeObject();\n+        BidiMap<V, K> inverse = map.inverseBidiMap();\n         assertEquals(0, map.size());\n         assertEquals(map.size(), inverse.size());\n-        \n-        map.put(\"A\", \"B\");\n+\n+        map.put((K) \"A\", (V) \"B\");\n         assertEquals(1, map.size());\n         assertEquals(map.size(), inverse.size());\n         assertEquals(\"B\", map.get(\"A\"));\n         assertEquals(\"A\", inverse.get(\"B\"));\n-        \n-        map.put(\"A\", \"C\");\n+\n+        map.put((K) \"A\", (V) \"C\");\n         assertEquals(1, map.size());\n         assertEquals(map.size(), inverse.size());\n         assertEquals(\"C\", map.get(\"A\"));\n         assertEquals(\"A\", inverse.get(\"C\"));\n-        \n-        map.put(\"B\", \"C\");\n+\n+        map.put((K) \"B\", (V) \"C\");\n         assertEquals(1, map.size());\n         assertEquals(map.size(), inverse.size());\n         assertEquals(\"C\", map.get(\"B\"));\n         assertEquals(\"B\", inverse.get(\"C\"));\n-        \n-        map.put(\"E\", \"F\");\n+\n+        map.put((K) \"E\", (V) \"F\");\n         assertEquals(2, map.size());\n         assertEquals(map.size(), inverse.size());\n         assertEquals(\"F\", map.get(\"E\"));\n     }\n \n     public void verifyInverse() {\n-        assertEquals(map.size(), ((BidiMap) map).inverseBidiMap().size());\n-        Map map1 = new HashMap(map);\n-        Map map2 = new HashMap(((BidiMap) map).inverseBidiMap());\n-        Set keys1 = map1.keySet();\n-        Set keys2 = map2.keySet();\n-        Collection values1 = map1.values();\n-        Collection values2 = map2.values();\n+        assertEquals(map.size(), ((BidiMap<K, V>) map).inverseBidiMap().size());\n+        Map<K, V> map1 = new HashMap<K, V>(map);\n+        Map<V, K> map2 = new HashMap<V, K>(((BidiMap<K, V>) map).inverseBidiMap());\n+        Set<K> keys1 = map1.keySet();\n+        Set<V> keys2 = map2.keySet();\n+        Collection<V> values1 = map1.values();\n+        Collection<K> values2 = map2.values();\n         assertEquals(true, keys1.containsAll(values2));\n         assertEquals(true, values2.containsAll(keys1));\n         assertEquals(true, values1.containsAll(keys2));\n         assertEquals(true, keys2.containsAll(values1));\n     }\n-    \n+\n     // testGetKey\n     //-----------------------------------------------------------------------\n     public void testBidiGetKey() {\n-        doTestGetKey(makeFullBidiMap(), entries[0][0], entries[0][1]);\n+        doTestGetKey(makeFullMap(), getSampleKeys()[0], getSampleValues()[0]);\n     }\n \n     public void testBidiGetKeyInverse() {\n         doTestGetKey(\n-            makeFullBidiMap().inverseBidiMap(),\n-            entries[0][1],\n-            entries[0][0]);\n-    }\n-\n-    private final void doTestGetKey(BidiMap map, Object key, Object value) {\n+            makeFullMap().inverseBidiMap(),\n+            getSampleValues()[0],\n+            getSampleKeys()[0]);\n+    }\n+\n+    private final void doTestGetKey(BidiMap<?, ?> map, Object key, Object value) {\n         assertEquals(\"Value not found for key.\", value, map.get(key));\n         assertEquals(\"Key not found for value.\", key, map.getKey(value));\n     }\n     // testInverse\n     //-----------------------------------------------------------------------\n     public void testBidiInverse() {\n-        final BidiMap map = makeFullBidiMap();\n-        final BidiMap inverseMap = map.inverseBidiMap();\n+        final BidiMap<K, V> map = makeFullMap();\n+        final BidiMap<V, K> inverseMap = map.inverseBidiMap();\n \n         assertSame(\n             \"Inverse of inverse is not equal to original.\",\n \n         assertEquals(\n             \"Value not found for key.\",\n-            entries[0][0],\n-            inverseMap.get(entries[0][1]));\n+            getSampleKeys()[0],\n+            inverseMap.get(getSampleValues()[0]));\n \n         assertEquals(\n             \"Key not found for value.\",\n-            entries[0][1],\n-            inverseMap.getKey(entries[0][0]));\n+            getSampleValues()[0],\n+            inverseMap.getKey(getSampleKeys()[0]));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testBidiModifyEntrySet() {\n         if (isSetValueSupported() == false) return;\n-        \n-        modifyEntrySet(makeFullBidiMap());\n-        modifyEntrySet(makeFullBidiMap().inverseBidiMap());\n-    }\n-\n-    private final void modifyEntrySet(BidiMap map) {\n+\n+        modifyEntrySet(makeFullMap());\n+        modifyEntrySet(makeFullMap().inverseBidiMap());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private final <T> void modifyEntrySet(BidiMap<?, T> map) {\n         // Gets first entry\n-        final Map.Entry entry = (Map.Entry)map.entrySet().iterator().next();\n+        final Map.Entry<?, T> entry = map.entrySet().iterator().next();\n \n         // Gets key and value\n         final Object key = entry.getKey();\n \n         // Sets new value\n         final Object newValue = \"newValue\";\n-        entry.setValue(newValue);\n+        entry.setValue((T) newValue);\n \n         assertEquals(\n             \"Modifying entrySet did not affect underlying Map.\",\n     public void testBidiClear() {\n         if (isRemoveSupported() == false) {\n             try {\n-                makeFullBidiMap().clear();\n+                makeFullMap().clear();\n                 fail();\n             } catch(UnsupportedOperationException ex) {}\n             return;\n         }\n \n-        BidiMap map = makeFullBidiMap();\n+        BidiMap<?, ?> map = makeFullMap();\n         map.clear();\n         assertTrue(\"Map was not cleared.\", map.isEmpty());\n         assertTrue(\"Inverse map was not cleared.\", map.inverseBidiMap().isEmpty());\n \n         // Tests clear on inverse\n-        map = makeFullBidiMap().inverseBidiMap();\n+        map = makeFullMap().inverseBidiMap();\n         map.clear();\n         assertTrue(\"Map was not cleared.\", map.isEmpty());\n         assertTrue(\"Inverse map was not cleared.\", map.inverseBidiMap().isEmpty());\n     public void testBidiRemove() {\n         if (isRemoveSupported() == false) {\n             try {\n-                makeFullBidiMap().remove(entries[0][0]);\n+                makeFullMap().remove(getSampleKeys()[0]);\n                 fail();\n             } catch(UnsupportedOperationException ex) {}\n             try {\n-                makeFullBidiMap().removeValue(entries[0][1]);\n+                makeFullMap().removeValue(getSampleValues()[0]);\n                 fail();\n             } catch(UnsupportedOperationException ex) {}\n             return;\n         }\n-        \n-        remove(makeFullBidiMap(), entries[0][0]);\n-        remove(makeFullBidiMap().inverseBidiMap(), entries[0][1]);\n-\n-        removeValue(makeFullBidiMap(), entries[0][1]);\n-        removeValue(makeFullBidiMap().inverseBidiMap(), entries[0][0]);\n-        \n-        assertEquals(null, makeFullBidiMap().removeValue(\"NotPresent\"));\n-    }\n-\n-    private final void remove(BidiMap map, Object key) {\n+\n+        remove(makeFullMap(), getSampleKeys()[0]);\n+        remove(makeFullMap().inverseBidiMap(), getSampleValues()[0]);\n+\n+        removeValue(makeFullMap(), getSampleValues()[0]);\n+        removeValue(makeFullMap().inverseBidiMap(), getSampleKeys()[0]);\n+\n+        assertEquals(null, makeFullMap().removeValue(\"NotPresent\"));\n+    }\n+\n+    private final void remove(BidiMap<?, ?> map, Object key) {\n         final Object value = map.remove(key);\n         assertTrue(\"Key was not removed.\", !map.containsKey(key));\n         assertNull(\"Value was not removed.\", map.getKey(value));\n     }\n \n-    private final void removeValue(BidiMap map, Object value) {\n+    private final void removeValue(BidiMap<?, ?> map, Object value) {\n         final Object key = map.removeValue(value);\n         assertTrue(\"Key was not removed.\", !map.containsKey(key));\n         assertNull(\"Value was not removed.\", map.getKey(value));\n     //-----------------------------------------------------------------------\n     public void testBidiKeySetValuesOrder() {\n         resetFull();\n-        Iterator keys = map.keySet().iterator();\n-        Iterator values = map.values().iterator();\n+        Iterator<K> keys = map.keySet().iterator();\n+        Iterator<V> values = map.values().iterator();\n         for (; keys.hasNext() && values.hasNext();) {\n-            Object key = keys.next();\n-            Object value = values.next();\n+            K key = keys.next();\n+            V value = values.next();\n             assertSame(map.get(key), value);\n         }\n         assertEquals(false, keys.hasNext());\n     //-----------------------------------------------------------------------\n     public void testBidiRemoveByKeySet() {\n         if (isRemoveSupported() == false) return;\n-        \n-        removeByKeySet(makeFullBidiMap(), entries[0][0], entries[0][1]);\n-        removeByKeySet(makeFullBidiMap().inverseBidiMap(), entries[0][1], entries[0][0]);\n-    }\n-\n-    private final void removeByKeySet(BidiMap map, Object key, Object value) {\n+\n+        removeByKeySet(makeFullMap(), getSampleKeys()[0], getSampleValues()[0]);\n+        removeByKeySet(makeFullMap().inverseBidiMap(), getSampleValues()[0], getSampleKeys()[0]);\n+    }\n+\n+    private final void removeByKeySet(BidiMap<?, ?> map, Object key, Object value) {\n         map.keySet().remove(key);\n \n         assertTrue(\"Key was not removed.\", !map.containsKey(key));\n     //-----------------------------------------------------------------------\n     public void testBidiRemoveByEntrySet() {\n         if (isRemoveSupported() == false) return;\n-        \n-        removeByEntrySet(makeFullBidiMap(), entries[0][0], entries[0][1]);\n-        removeByEntrySet(makeFullBidiMap().inverseBidiMap(), entries[0][1], entries[0][0]);\n-    }\n-\n-    private final void removeByEntrySet(BidiMap map, Object key, Object value) {\n-        Map temp = new HashMap();\n+\n+        removeByEntrySet(makeFullMap(), getSampleKeys()[0], getSampleValues()[0]);\n+        removeByEntrySet(makeFullMap().inverseBidiMap(), getSampleValues()[0], getSampleKeys()[0]);\n+    }\n+\n+    private final void removeByEntrySet(BidiMap<?, ?> map, Object key, Object value) {\n+        Map<Object, Object> temp = new HashMap<Object, Object>();\n         temp.put(key, value);\n         map.entrySet().remove(temp.entrySet().iterator().next());\n \n             !map.inverseBidiMap().containsKey(value));\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public BidiMap<K, V> getMap() {\n+        return (BidiMap<K, V>) super.getMap();\n+    }\n+\n     //-----------------------------------------------------------------------\n     public BulkTest bulkTestMapEntrySet() {\n         return new TestBidiMapEntrySet();\n             super();\n         }\n         public void testMapEntrySetIteratorEntrySetValueCrossCheck() {\n-            Object key1 = getSampleKeys()[0];\n-            Object key2 = getSampleKeys()[1];\n-            Object newValue1 = getNewSampleValues()[0];\n-            Object newValue2 = getNewSampleValues()[1];\n-                \n+            K key1 = getSampleKeys()[0];\n+            K key2 = getSampleKeys()[1];\n+            V newValue1 = getNewSampleValues()[0];\n+            V newValue2 = getNewSampleValues()[1];\n+\n             resetFull();\n             // explicitly get entries as sample values/keys are connected for some maps\n             // such as BeanMap\n-            Iterator it = TestBidiMapEntrySet.this.collection.iterator();\n-            Map.Entry entry1 = getEntry(it, key1);\n-            it = TestBidiMapEntrySet.this.collection.iterator();\n-            Map.Entry entry2 = getEntry(it, key2);\n-            Iterator itConfirmed = TestBidiMapEntrySet.this.confirmed.iterator();\n-            Map.Entry entryConfirmed1 = getEntry(itConfirmed, key1);\n-            itConfirmed = TestBidiMapEntrySet.this.confirmed.iterator();\n-            Map.Entry entryConfirmed2 = getEntry(itConfirmed, key2);\n+            Iterator<Map.Entry<K, V>> it = TestBidiMapEntrySet.this.getCollection().iterator();\n+            Map.Entry<K, V> entry1 = getEntry(it, key1);\n+            it = TestBidiMapEntrySet.this.getCollection().iterator();\n+            Map.Entry<K, V> entry2 = getEntry(it, key2);\n+            Iterator<Map.Entry<K, V>> itConfirmed = TestBidiMapEntrySet.this.getConfirmed().iterator();\n+            Map.Entry<K, V> entryConfirmed1 = getEntry(itConfirmed, key1);\n+            itConfirmed = TestBidiMapEntrySet.this.getConfirmed().iterator();\n+            Map.Entry<K, V> entryConfirmed2 = getEntry(itConfirmed, key2);\n             TestBidiMapEntrySet.this.verify();\n-                \n+\n             if (isSetValueSupported() == false) {\n                 try {\n                     entry1.setValue(newValue1);\n                 return;\n             }\n \n-            // these checked in superclass                \n+            // these checked in superclass\n             entry1.setValue(newValue1);\n             entryConfirmed1.setValue(newValue1);\n             entry2.setValue(newValue2);\n             entryConfirmed2.setValue(newValue2);\n-            \n+\n             // at this point\n             // key1=newValue1, key2=newValue2\n             try {\n                 return;  // simplest way of dealing with tricky situation\n             }\n             entryConfirmed2.setValue(newValue1);\n-            AbstractTestBidiMap.this.confirmed.remove(key1);\n+            AbstractTestBidiMap.this.getConfirmed().remove(key1);\n             assertEquals(newValue1, entry2.getValue());\n-            assertEquals(true, AbstractTestBidiMap.this.map.containsKey(entry2.getKey()));\n-            assertEquals(true, AbstractTestBidiMap.this.map.containsValue(newValue1));\n-            assertEquals(newValue1, AbstractTestBidiMap.this.map.get(entry2.getKey()));\n-            assertEquals(false, AbstractTestBidiMap.this.map.containsKey(key1));\n-            assertEquals(false, AbstractTestBidiMap.this.map.containsValue(newValue2));\n+            assertEquals(true, AbstractTestBidiMap.this.getMap().containsKey(entry2.getKey()));\n+            assertEquals(true, AbstractTestBidiMap.this.getMap().containsValue(newValue1));\n+            assertEquals(newValue1, AbstractTestBidiMap.this.getMap().get(entry2.getKey()));\n+            assertEquals(false, AbstractTestBidiMap.this.getMap().containsKey(key1));\n+            assertEquals(false, AbstractTestBidiMap.this.getMap().containsValue(newValue2));\n             TestBidiMapEntrySet.this.verify();\n-            \n+\n             // check for ConcurrentModification\n             it.next();  // if you fail here, maybe you should be throwing an IAE, see above\n             if (isRemoveSupported()) {\n             }\n         }\n     }\n-        \n+\n     public BulkTest bulkTestInverseMap() {\n         return new TestInverseBidiMap(this);\n     }\n \n-    public class TestInverseBidiMap extends AbstractTestBidiMap {\n-        final AbstractTestBidiMap main;\n-        \n-        public TestInverseBidiMap(AbstractTestBidiMap main) {\n+    public class TestInverseBidiMap extends AbstractTestBidiMap<V, K> {\n+        final AbstractTestBidiMap<K, V> main;\n+\n+        public TestInverseBidiMap(AbstractTestBidiMap<K, V> main) {\n             super();\n             this.main = main;\n         }\n-        public BidiMap makeEmptyBidiMap() {\n-            return main.makeEmptyBidiMap().inverseBidiMap();\n-        }\n-        public BidiMap makeFullBidiMap() {\n-            return main.makeFullBidiMap().inverseBidiMap();\n-        }\n-        public Map makeFullMap() {\n-            return ((BidiMap) main.makeFullMap()).inverseBidiMap();\n-        }\n-        public Object[] getSampleKeys() {\n+\n+        public BidiMap<V, K> makeObject() {\n+            return main.makeObject().inverseBidiMap();\n+        }\n+\n+        public BidiMap<V, K> makeFullMap() {\n+            return main.makeFullMap().inverseBidiMap();\n+        }\n+\n+        public V[] getSampleKeys() {\n             return main.getSampleValues();\n         }\n-        public Object[] getSampleValues() {\n+        public K[] getSampleValues() {\n             return main.getSampleKeys();\n         }\n-        \n+\n         public String getCompatibilityVersion() {\n             return main.getCompatibilityVersion();\n         }\n+\n         public boolean isAllowNullKey() {\n             return main.isAllowNullKey();\n         }\n+\n         public boolean isAllowNullValue() {\n             return main.isAllowNullValue();\n         }\n+\n         public boolean isPutAddSupported() {\n             return main.isPutAddSupported();\n         }\n+\n         public boolean isPutChangeSupported() {\n             return main.isPutChangeSupported();\n         }\n+\n         public boolean isSetValueSupported() {\n             return main.isSetValueSupported();\n         }\n+\n         public boolean isRemoveSupported() {\n             return main.isRemoveSupported();\n         }\n \n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     public BulkTest bulkTestBidiMapIterator() {\n         return new TestBidiMapIterator();\n     }\n-    \n-    public class TestBidiMapIterator extends AbstractTestMapIterator {\n+\n+    public class TestBidiMapIterator extends AbstractTestMapIterator<K, V> {\n         public TestBidiMapIterator() {\n             super(\"TestBidiMapIterator\");\n         }\n-        \n-        public Object[] addSetValues() {\n+\n+        public V[] addSetValues() {\n             return AbstractTestBidiMap.this.getNewSampleValues();\n         }\n-        \n+\n         public boolean supportsRemove() {\n             return AbstractTestBidiMap.this.isRemoveSupported();\n         }\n             return AbstractTestBidiMap.this.isSetValueSupported();\n         }\n \n-        public MapIterator makeEmptyMapIterator() {\n+        public MapIterator<K, V> makeEmptyIterator() {\n             resetEmpty();\n-            return ((BidiMap) AbstractTestBidiMap.this.map).mapIterator();\n-        }\n-\n-        public MapIterator makeFullMapIterator() {\n+            return AbstractTestBidiMap.this.getMap().mapIterator();\n+        }\n+\n+        public MapIterator<K, V> makeObject() {\n             resetFull();\n-            return ((BidiMap) AbstractTestBidiMap.this.map).mapIterator();\n-        }\n-        \n-        public Map getMap() {\n+            return AbstractTestBidiMap.this.getMap().mapIterator();\n+        }\n+\n+        public BidiMap<K, V> getMap() {\n             // assumes makeFullMapIterator() called first\n-            return AbstractTestBidiMap.this.map;\n-        }\n-        \n-        public Map getConfirmedMap() {\n+            return AbstractTestBidiMap.this.getMap();\n+        }\n+\n+        public Map<K, V> getConfirmedMap() {\n             // assumes makeFullMapIterator() called first\n-            return AbstractTestBidiMap.this.confirmed;\n-        }\n-        \n+            return AbstractTestBidiMap.this.getConfirmed();\n+        }\n+\n         public void verify() {\n             super.verify();\n             AbstractTestBidiMap.this.verify();\n         }\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     public void testBidiMapIteratorSet() {\n-        Object newValue1 = getOtherValues()[0];\n-        Object newValue2 = getOtherValues()[1];\n-        \n+        V newValue1 = getOtherValues()[0];\n+        V newValue2 = getOtherValues()[1];\n+\n         resetFull();\n-        BidiMap bidi = (BidiMap) map;\n-        MapIterator it = bidi.mapIterator();\n+        BidiMap<K, V> bidi = getMap();\n+        MapIterator<K, V> it = bidi.mapIterator();\n         assertEquals(true, it.hasNext());\n-        Object key1 = it.next();\n-        \n+        K key1 = it.next();\n+\n         if (isSetValueSupported() == false) {\n             try {\n                 it.setValue(newValue1);\n             }\n             return;\n         }\n-        \n+\n         it.setValue(newValue1);\n         confirmed.put(key1, newValue1);\n         assertSame(key1, it.getKey());\n         assertEquals(true, bidi.containsValue(newValue1));\n         assertEquals(newValue1, bidi.get(key1));\n         verify();\n-        \n+\n         it.setValue(newValue1);  // same value - should be OK\n         confirmed.put(key1, newValue1);\n         assertSame(key1, it.getKey());\n         assertEquals(true, bidi.containsValue(newValue1));\n         assertEquals(newValue1, bidi.get(key1));\n         verify();\n-        \n-        Object key2 = it.next();\n+\n+        K key2 = it.next();\n         it.setValue(newValue2);\n         confirmed.put(key2, newValue2);\n         assertSame(key2, it.getKey());\n         assertEquals(true, bidi.containsValue(newValue2));\n         assertEquals(newValue2, bidi.get(key2));\n         verify();\n-        \n+\n         // at this point\n         // key1=newValue1, key2=newValue2\n         try {\n             return;  // simplest way of dealing with tricky situation\n         }\n         confirmed.put(key2, newValue1);\n-        AbstractTestBidiMap.this.confirmed.remove(key1);\n+        AbstractTestBidiMap.this.getConfirmed().remove(key1);\n         assertEquals(newValue1, it.getValue());\n         assertEquals(true, bidi.containsKey(it.getKey()));\n         assertEquals(true, bidi.containsValue(newValue1));\n         assertEquals(false, bidi.containsKey(key1));\n         assertEquals(false, bidi.containsValue(newValue2));\n         verify();\n-            \n+\n         // check for ConcurrentModification\n         it.next();  // if you fail here, maybe you should be throwing an IAE, see above\n         if (isRemoveSupported()) {", "timestamp": 1252994219, "metainfo": ""}