{"sha": "2eb1586bf77efcacf701df14ad98d1d6a704a35e", "log": "[COLLECTIONS-557] Added support to specify the initial size of a LRUMap. Thanks to Philippe Mouawad.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/map/LRUMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/LRUMap.java\n      * Constructs a new, empty map with the specified maximum size.\n      *\n      * @param maxSize  the maximum size of the map\n+     * @param initialSize  the initial size of the map\n+     * @throws IllegalArgumentException if the maximum size is less than one\n+     * @throws IllegalArgumentException if the initial size is negative or larger than the maximum size\n+     * @since 4.1\n+     */\n+    public LRUMap(final int maxSize, final int initialSize) {\n+        this(maxSize, initialSize, DEFAULT_LOAD_FACTOR);\n+    }\n+\n+    /**\n+     * Constructs a new, empty map with the specified maximum size.\n+     *\n+     * @param maxSize  the maximum size of the map\n      * @param scanUntilRemovable  scan until a removeable entry is found, default false\n      * @throws IllegalArgumentException if the maximum size is less than one\n      * @since 3.1\n     }\n \n     /**\n-     * Constructs a new, empty map with the specified initial capacity and\n+     * Constructs a new, empty map with the specified max capacity and\n      * load factor.\n      *\n      * @param maxSize  the maximum size of the map\n+     * @param initialSize  the initial size of the map\n      * @param loadFactor  the load factor\n      * @throws IllegalArgumentException if the maximum size is less than one\n      * @throws IllegalArgumentException if the load factor is less than zero\n     }\n \n     /**\n-     * Constructs a new, empty map with the specified initial capacity and\n+     * Constructs a new, empty map with the specified max / initial capacity and\n      * load factor.\n+     *\n+     * @param maxSize  the maximum size of the map\n+     * @param loadFactor  the load factor\n+     * @throws IllegalArgumentException if the maximum size is less than one\n+     * @throws IllegalArgumentException if the initial size is negative or larger than the maximum size\n+     * @throws IllegalArgumentException if the load factor is less than zero\n+     * @since 4.1\n+     */\n+    public LRUMap(final int maxSize, final int initialSize, final float loadFactor) {\n+        this(maxSize, initialSize, loadFactor, false);\n+    }\n+\n+    /**\n+     * Constructs a new, empty map with the specified max capacity and load factor.\n      *\n      * @param maxSize  the maximum size of the map\n      * @param loadFactor  the load factor\n      * @since 3.1\n      */\n     public LRUMap(final int maxSize, final float loadFactor, final boolean scanUntilRemovable) {\n-        super(maxSize < 1 ? DEFAULT_CAPACITY : maxSize, loadFactor);\n+        this(maxSize, maxSize, loadFactor, scanUntilRemovable);\n+    }\n+\n+    /**\n+     * Constructs a new, empty map with the specified max / initial capacity and load factor.\n+     *\n+     * @param maxSize  the maximum size of the map\n+     * @param initialSize  the initial size of the map\n+     * @param loadFactor  the load factor\n+     * @param scanUntilRemovable  scan until a removeable entry is found, default false\n+     * @throws IllegalArgumentException if the maximum size is less than one\n+     * @throws IllegalArgumentException if the initial size is negative or larger than the maximum size\n+     * @throws IllegalArgumentException if the load factor is less than zero\n+     * @since 4.1\n+     */\n+    public LRUMap(final int maxSize, final int initialSize, final float loadFactor, final boolean scanUntilRemovable) {\n+        super(initialSize, loadFactor);\n         if (maxSize < 1) {\n             throw new IllegalArgumentException(\"LRUMap max size must be greater than 0\");\n+        }\n+        if (initialSize > maxSize) {\n+            throw new IllegalArgumentException(\"LRUMap initial size must not be greather than max size\");\n         }\n         this.maxSize = maxSize;\n         this.scanUntilRemovable = scanUntilRemovable;\n--- a/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/LRUMapTest.java\n         return true;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     @Override\n-    public String getCompatibilityVersion() {\n-        return \"4\";\n+    public LRUMap<K, V> getMap() {\n+        return (LRUMap<K, V>) super.getMap();\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testCtors() {\n+        try {\n+            new LRUMap<K, V>(0);\n+            fail(\"maxSize must be positive\");\n+        } catch(IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            new LRUMap<K, V>(-1, 12, 0.75f, false);\n+            fail(\"maxSize must be positive\");\n+        } catch(IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            new LRUMap<K, V>(10, -1);\n+            fail(\"initialSize must not be negative\");\n+        } catch(IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            new LRUMap<K, V>(10, 12);\n+            fail(\"initialSize must not be larger than maxSize\");\n+        } catch(IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            new LRUMap<K, V>(10, -1, 0.75f, false);\n+            fail(\"initialSize must not be negative\");\n+        } catch(IllegalArgumentException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            new LRUMap<K, V>(10, 12, 0.75f, false);\n+            fail(\"initialSize must not be larger than maxSize\");\n+        } catch(IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n     public void testLRU() {\n         if (!isPutAddSupported() || !isPutChangeSupported()) {\n             return;\n                 + counter[0] + \" did succeed\", counter[0] >= threads.length);\n     }\n \n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"4\";\n+    }\n+\n //    public void testCreate() throws Exception {\n //        resetEmpty();\n //        writeExternalFormToDisk((java.io.Serializable) map, \"src/test/resources/data/test/LRUMap.emptyCollection.version4.obj\");\n //        writeExternalFormToDisk((java.io.Serializable) map, \"src/test/resources/data/test/LRUMap.fullCollection.version4.obj\");\n //    }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public LRUMap<K, V> getMap() {\n-        return (LRUMap<K, V>) super.getMap();\n-    }\n }", "timestamp": 1433153533, "metainfo": ""}