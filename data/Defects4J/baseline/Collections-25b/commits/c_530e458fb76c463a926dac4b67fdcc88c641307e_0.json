{"sha": "530e458fb76c463a926dac4b67fdcc88c641307e", "log": "Add transformed decorators   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TransformedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedBag.java,v 1.1 2003/05/11 13:17:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * <code>TransformedBag</code> decorates another <code>Bag</code>\n+ * to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/11 13:17:57 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedBag extends TransformedCollection implements Bag {\n+\n+    /**\n+     * Factory method to create a transforming bag.\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if bag or transformer is null\n+     */\n+    public static Bag decorate(Bag bag, Transformer transformer) {\n+        return new TransformedBag(bag, transformer);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if bag or transformer is null\n+     */\n+    protected TransformedBag(Bag bag, Transformer transformer) {\n+        super(bag, transformer);\n+    }\n+\n+    /**\n+     * Gets the decorated bag.\n+     * \n+     * @return the decorated bag\n+     */\n+    protected Bag getBag() {\n+        return (Bag) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public int getCount(Object object) {\n+        return getBag().getCount(object);\n+    }\n+\n+    public boolean remove(Object object, int nCopies) {\n+        return getBag().remove(object, nCopies);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean add(Object object, int nCopies) {\n+        object = transform(object);\n+        return getBag().add(object, nCopies);\n+    }\n+\n+    public Set uniqueSet() {\n+        Set set = getBag().uniqueSet();\n+        return new TransformedSet(set, transformer);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TransformedBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedBuffer.java,v 1.1 2003/05/11 13:17:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * <code>TransformedBuffer</code> decorates another <code>Buffer</code>\n+ * to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/11 13:17:57 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedBuffer extends TransformedCollection implements Buffer {\n+\n+    /**\n+     * Factory method to create a transforming buffer.\n+     * <p>\n+     * If there are any elements already in the buffer being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if buffer or transformer is null\n+     */\n+    public static Buffer decorate(Buffer buffer, Transformer transformer) {\n+        return new TransformedBuffer(buffer, transformer);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the buffer being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if buffer or transformer is null\n+     */\n+    protected TransformedBuffer(Buffer buffer, Transformer transformer) {\n+        super(buffer, transformer);\n+    }\n+\n+    /**\n+     * Gets the decorated buffer.\n+     * \n+     * @return the decorated buffer\n+     */\n+    protected Buffer getBuffer() {\n+        return (Buffer) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get() {\n+        return getBuffer().get();\n+    }\n+\n+    public Object remove() {\n+        return getBuffer().remove();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TransformedCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedCollection.java,v 1.1 2003/05/11 13:17:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * <code>TransformedCollection</code> decorates another <code>Collection</code>\n+ * to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/11 13:17:57 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedCollection extends AbstractCollectionDecorator {\n+\n+    /** The transformer to use */\n+    protected final Transformer transformer;\n+\n+    /**\n+     * Factory method to create a transforming collection.\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if collection or transformer is null\n+     */\n+    public static Collection decorate(Collection coll, Transformer transformer) {\n+        return new TransformedCollection(coll, transformer);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if collection or transformer is null\n+     */\n+    protected TransformedCollection(Collection coll, Transformer transformer) {\n+        super(coll);\n+        if (transformer == null) {\n+            throw new IllegalArgumentException(\"Transformer must not be null\");\n+        }\n+        this.transformer = transformer;\n+    }\n+\n+    /**\n+     * Transforms an object.\n+     * <p>\n+     * The transformer itself may throw an exception if necessary.\n+     * \n+     * @param object  the object being added\n+     * @throws the transformed object\n+     */\n+    protected Object transform(Object object) {\n+        return transformer.transform(object);\n+    }\n+\n+    /**\n+     * Transforms a collection.\n+     * <p>\n+     * The transformer itself may throw an exception if necessary.\n+     * \n+     * @param object  the object being added\n+     * @throws the transformed object\n+     */\n+    protected Collection transform(Collection coll) {\n+        List list = new ArrayList(coll.size());\n+        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n+            list.add(transform(it.next()));\n+        }\n+        return list;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean add(Object object) {\n+        object = transform(object);\n+        return getCollection().add(object);\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        coll = transform(coll);\n+        return getCollection().addAll(coll);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TransformedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedList.java,v 1.1 2003/05/11 13:17:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * <code>TransformedList</code> decorates another <code>List</code>\n+ * to transform objects that are added.\n+ * <p>\n+ * The add and set methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/11 13:17:57 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedList extends TransformedCollection implements List {\n+\n+    /**\n+     * Factory method to create a transforming list.\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if list or transformer is null\n+     */\n+    public static List decorate(List list, Transformer transformer) {\n+        return new TransformedList(list, transformer);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if list or transformer is null\n+     */\n+    protected TransformedList(List list, Transformer transformer) {\n+        super(list, transformer);\n+    }\n+\n+    /**\n+     * Gets the decorated list.\n+     * \n+     * @return the decorated list\n+     */\n+    protected List getList() {\n+        return (List) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    public Object remove(int index) {\n+        return getList().remove(index);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void add(int index, Object object) {\n+        object = transform(object);\n+        getList().add(index, object);\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        coll = transform(coll);\n+        return getList().addAll(index, coll);\n+    }\n+\n+    public ListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public ListIterator listIterator(int i) {\n+        return new TransformedListIterator(getList().listIterator(i));\n+    }\n+\n+    public Object set(int index, Object object) {\n+        object = transform(object);\n+        return getList().set(index, object);\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        List sub = getList().subList(fromIndex, toIndex);\n+        return new TransformedList(sub, transformer);\n+    }\n+\n+    /**\n+     * Inner class Iterator for the TransformedList\n+     */\n+    protected class TransformedListIterator extends AbstractListIteratorDecorator {\n+        \n+        protected TransformedListIterator(ListIterator iterator) {\n+            super(iterator);\n+        }\n+        \n+        public void add(Object object) {\n+            object = transform(object);\n+            getIterator().add(object);\n+        }\n+        \n+        public void set(Object object) {\n+            object = transform(object);\n+            getIterator().set(object);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TransformedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedSet.java,v 1.1 2003/05/11 13:17:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * <code>TransformedSet</code> decorates another <code>Set</code>\n+ * to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/11 13:17:57 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedSet extends TransformedCollection implements Set {\n+\n+    /**\n+     * Factory method to create a transforming set.\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if set or transformer is null\n+     */\n+    public static Set decorate(Set set, Transformer transformer) {\n+        return new TransformedSet(set, transformer);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if set or transformer is null\n+     */\n+    protected TransformedSet(Set set, Transformer transformer) {\n+        super(set, transformer);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TransformedSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedSortedBag.java,v 1.1 2003/05/11 13:17:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * <code>TransformedSortedBag</code> decorates another <code>SortedBag</code>\n+ * to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/11 13:17:57 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedSortedBag extends TransformedBag implements SortedBag {\n+\n+    /**\n+     * Factory method to create a transforming sorted bag.\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if bag or transformer is null\n+     */\n+    public static SortedBag decorate(SortedBag bag, Transformer transformer) {\n+        return new TransformedSortedBag(bag, transformer);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if bag or transformer is null\n+     */\n+    protected TransformedSortedBag(SortedBag bag, Transformer transformer) {\n+        super(bag, transformer);\n+    }\n+\n+    /**\n+     * Gets the decorated bag.\n+     * \n+     * @return the decorated bag\n+     */\n+    protected SortedBag getSortedBag() {\n+        return (SortedBag) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object first() {\n+        return getSortedBag().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedBag().last();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedBag().comparator();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TransformedSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TransformedSortedSet.java,v 1.1 2003/05/11 13:17:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Comparator;\n+import java.util.SortedSet;\n+\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * <code>TransformedSortedSet</code> decorates another <code>SortedSet</code>\n+ * to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/11 13:17:57 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedSortedSet extends TransformedSet implements SortedSet {\n+\n+    /**\n+     * Factory method to create a transforming sorted set.\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if set or transformer is null\n+     */\n+    public static SortedSet decorate(SortedSet set, Transformer transformer) {\n+        return new TransformedSortedSet(set, transformer);\n+    }\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if set or transformer is null\n+     */\n+    protected TransformedSortedSet(SortedSet set, Transformer transformer) {\n+        super(set, transformer);\n+    }\n+\n+    /**\n+     * Gets the decorated set.\n+     * \n+     * @return the decorated set\n+     */\n+    protected SortedSet getSortedSet() {\n+        return (SortedSet) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object first() {\n+        return getSortedSet().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedSet().last();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedSet().comparator();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public SortedSet subSet(Object fromElement, Object toElement) {\n+        SortedSet set = getSortedSet().subSet(fromElement, toElement);\n+        return new TransformedSortedSet(set, transformer);\n+    }\n+\n+    public SortedSet headSet(Object toElement) {\n+        SortedSet set = getSortedSet().headSet(toElement);\n+        return new TransformedSortedSet(set, transformer);\n+    }\n+\n+    public SortedSet tailSet(Object fromElement) {\n+        SortedSet set = getSortedSet().tailSet(fromElement);\n+        return new TransformedSortedSet(set, transformer);\n+    }\n+\n+}", "timestamp": 1052659077, "metainfo": ""}