{"sha": "d1b9647e25c95b0a879101d16e94de9193197438", "log": "extract superclass TestIntList   ", "commit": "\n--- a/src/test/org/apache/commons/collections/primitives/TestArrayIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayIntList.java,v 1.4 2003/01/09 13:40:11 rwaldhoff Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/01/09 13:40:11 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayIntList.java,v 1.5 2003/01/10 13:27:55 rwaldhoff Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/01/10 13:27:55 $\n  *\n  * ====================================================================\n  *\n \n package org.apache.commons.collections.primitives;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.TestList;\n-import org.apache.commons.collections.primitives.adapters.IntListList;\n-import org.apache.commons.collections.primitives.adapters.ListIntList;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/01/09 13:40:11 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/10 13:27:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestArrayIntList extends TestList {\n+public class TestArrayIntList extends TestIntList {\n \n-    //------------------------------------------------------------ Conventional\n+    // conventional\n+    // ------------------------------------------------------------------------\n \n     public TestArrayIntList(String testName) {\n         super(testName);\n         return suite;\n     }\n \n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n \n-    //------------------------------------------------------- TestList interface\n-\n-    public List makeEmptyList() {\n-        return new IntListList(new ArrayIntList());\n+    protected IntList makeEmptyIntList() {\n+        return new ArrayIntList();\n     }\n \n-    /**\n-     *  Returns small Integer objects for testing.\n-     */\n-    protected Object[] getFullElements() {\n-        Integer[] result = new Integer[19];\n-        for (int i = 0; i < result.length; i++) {\n-            result[i] = new Integer(i + 19);\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     *  Returns small Integer objects for testing.\n-     */\n-    protected Object[] getOtherElements() {\n-        Integer[] result = new Integer[16];\n-        for (int i = 0; i < result.length; i++) {\n-            result[i] = new Integer(i + 48);\n-        }\n-        return result;\n-    }\n-\n-    // TODO:  Create canonical collections in CVS\n+    // tests\n+    // ------------------------------------------------------------------------\n \n     public void testCanonicalEmptyCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to a serialized form to cvs\n     }\n \n     public void testCanonicalFullCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to a serialized form to cvs\n     }\n \n     public void testEmptyListCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to a serialized form to cvs\n     }\n \n     public void testFullListCompatibility() {\n-    }\n-\n-    //------------------------------------------------------------------- Tests\n-\n-    public void testEqualsWithTwoIntLists() {\n-        IntList one = new ArrayIntList();\n-        assertEquals(\"Equals is reflexive on empty list\",one,one);\n-        IntList two = new ArrayIntList();\n-        assertEquals(\"Empty lists are equal\",one,two);\n-        assertEquals(\"Equals is symmetric on empty lists\",two,one);\n-        \n-        one.add(1);\n-        assertEquals(\"Equals is reflexive on non empty list\",one,one);\n-        assertTrue(!one.equals(two));\n-        assertTrue(!two.equals(one));\n-\n-        two.add(1);\n-        assertEquals(\"Non empty lists are equal\",one,two);\n-        assertEquals(\"Equals is symmetric on non empty list\",one,two);\n-        \n-        one.add(1); one.add(2); one.add(3); one.add(5); one.add(8);\n-        assertEquals(\"Equals is reflexive on larger non empty list\",one,one);\n-        assertTrue(!one.equals(two));\n-        assertTrue(!two.equals(one));\n-        \n-        two.add(1); two.add(2); two.add(3); two.add(5); two.add(8);\n-        assertEquals(\"Larger non empty lists are equal\",one,two);\n-        assertEquals(\"Equals is symmetric on larger non empty list\",two,one);\n-    }\n-\n-    public void testIntSubListEquals() {\n-        IntList one = new ArrayIntList();\n-        assertEquals(one,one.subList(0,0));\n-        assertEquals(one.subList(0,0),one);\n-        \n-        one.add(1);\n-        assertEquals(one,one.subList(0,1));\n-        assertEquals(one.subList(0,1),one);\n-\n-        one.add(1); one.add(2); one.add(3); one.add(5); one.add(8);\n-        assertEquals(one.subList(0,4),one.subList(0,4));\n-        assertEquals(one.subList(3,5),one.subList(3,5));\n-    }\n-    \n-    public void testEqualsWithIntListAndList() {\n-        IntList ilist = new ArrayIntList();\n-        List list = new ArrayList();\n-        \n-        assertTrue(\"Unwrapped, empty List is not equal to empty IntList.\",!ilist.equals(list));\n-        assertTrue(\"Unwrapped, empty IntList is not equal to empty List.\",!list.equals(ilist));\n-        \n-        assertEquals(new ListIntList(list),ilist);\n-        assertEquals(ilist,new ListIntList(list));\n-        assertEquals(new IntListList(ilist),list);\n-        assertEquals(list,new IntListList(ilist));\n-        \n-        ilist.add(1);\n-        list.add(new Integer(1));\n-\n-        assertTrue(\"Unwrapped, non-empty List is not equal to non-empty IntList.\",!ilist.equals(list));\n-        assertTrue(\"Unwrapped, non-empty IntList is not equal to non-empty List.\",!list.equals(ilist));\n-        \n-        assertEquals(new ListIntList(list),ilist);\n-        assertEquals(ilist,new ListIntList(list));\n-        assertEquals(new IntListList(ilist),list);\n-        assertEquals(list,new IntListList(ilist));\n-                \n-        ilist.add(1); ilist.add(2); ilist.add(3); ilist.add(5); ilist.add(8);\n-        list.add(new Integer(1)); list.add(new Integer(2)); list.add(new Integer(3)); list.add(new Integer(5)); list.add(new Integer(8));\n-\n-        assertTrue(\"Unwrapped, non-empty List is not equal to non-empty IntList.\",!ilist.equals(list));\n-        assertTrue(\"Unwrapped, non-empty IntList is not equal to non-empty List.\",!list.equals(ilist));\n-        \n-        assertEquals(new ListIntList(list),ilist);\n-        assertEquals(ilist,new ListIntList(list));\n-        assertEquals(new IntListList(ilist),list);\n-        assertEquals(list,new IntListList(ilist));\n-        \n-    }\n-\n-    public void testClearAndSize() {\n-        IntList list = new ArrayIntList();\n-        assertEquals(0, list.size());\n-        for(int i = 0; i < 100; i++) {\n-            list.add(i);\n-        }\n-        assertEquals(100, list.size());\n-        list.clear();\n-        assertEquals(0, list.size());\n-    }\n-\n-    public void testRemoveViaSubList() {\n-        IntList list = new ArrayIntList();\n-        for(int i = 0; i < 100; i++) {\n-            list.add(i);\n-        }\n-        IntList sub = list.subList(25,75);\n-        assertEquals(50,sub.size());\n-        for(int i = 0; i < 50; i++) {\n-            assertEquals(100-i,list.size());\n-            assertEquals(50-i,sub.size());\n-            assertEquals(25+i,sub.removeElementAt(0));\n-            assertEquals(50-i-1,sub.size());\n-            assertEquals(100-i-1,list.size());\n-        }\n-        assertEquals(0,sub.size());\n-        assertEquals(50,list.size());        \n-    }\n-    \n-\n-    public void testAddGet() {\n-        IntList list = new ArrayIntList();\n-        for (int i = 0; i < 1000; i++) {\n-            list.add(i);\n-        }\n-        for (int i = 0; i < 1000; i++) {\n-            assertEquals(i, list.get(i));\n-        }\n+        // XXX FIX ME XXX\n+        // need to a serialized form to cvs\n     }\n \n     public void testAddGetLargeValues() {\n         }\n     }\n \n-    public void testAddAndShift() {\n-        IntList list = new ArrayIntList();\n-        list.add(0, 1);\n-        assertEquals(\"Should have one entry\", 1, list.size());\n-        list.add(3);\n-        list.add(4);\n-        list.add(1, 2);\n-        for(int i = 0; i < 4; i++) {\n-            assertEquals(\"Should get entry back\", i + 1, list.get(i));\n-        }\n-        list.add(0, 0);\n-        for (int i = 0; i < 5; i++) {\n-            assertEquals(\"Should get entry back\", i, list.get(i));\n-        }\n-    }\n-\n     public void testZeroInitialCapacityIsValid() {\n         ArrayIntList list = new ArrayIntList(0);\n     }\n--- a/src/test/org/apache/commons/collections/primitives/TestArrayUnsignedShortList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayUnsignedShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayUnsignedShortList.java,v 1.2 2003/01/09 13:40:11 rwaldhoff Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/01/09 13:40:11 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayUnsignedShortList.java,v 1.3 2003/01/10 13:27:55 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.primitives.adapters.IntListList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/01/09 13:40:11 $\n+ * @version $Revision: 1.3 $ $Date: 2003/01/10 13:27:55 $\n  * @author Rodney Waldhoff\n  */\n-public class TestArrayUnsignedShortList extends TestList {\n+public class TestArrayUnsignedShortList extends TestIntList {\n \n-    //------------------------------------------------------------ Conventional\n+    // conventional\n+    // ------------------------------------------------------------------------\n \n     public TestArrayUnsignedShortList(String testName) {\n         super(testName);\n         return suite;\n     }\n \n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n \n-    //------------------------------------------------------- TestList interface\n-\n-    public List makeEmptyList() {\n-        return new IntListList(new ArrayUnsignedShortList());\n+    protected IntList makeEmptyIntList() {\n+        return new ArrayUnsignedShortList();\n     }\n \n-    /**\n-     *  Returns small Integer objects for testing.\n-     */\n-    protected Object[] getFullElements() {\n-        Integer[] result = new Integer[19];\n-        for (int i = 0; i < result.length; i++) {\n-            result[i] = new Integer(i + 19);\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     *  Returns small Integer objects for testing.\n-     */\n-    protected Object[] getOtherElements() {\n-        Integer[] result = new Integer[16];\n-        for (int i = 0; i < result.length; i++) {\n-            result[i] = new Integer(i + 48);\n-        }\n-        return result;\n-    }\n-\n-    // TODO:  Create canonical collections in CVS\n+    // tests\n+    // ------------------------------------------------------------------------\n \n     public void testCanonicalEmptyCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to a serialized form to cvs\n     }\n \n     public void testCanonicalFullCollectionExists() {\n+        // XXX FIX ME XXX\n+        // need to a serialized form to cvs\n     }\n \n     public void testEmptyListCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to a serialized form to cvs\n     }\n \n     public void testFullListCompatibility() {\n+        // XXX FIX ME XXX\n+        // need to a serialized form to cvs\n     }\n-\n-    //------------------------------------------------------------------- Tests\n \n     public void testZeroInitialCapacityIsValid() {\n         ArrayUnsignedShortList list = new ArrayUnsignedShortList(0);\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.1 2003/01/10 13:27:55 rwaldhoff Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.primitives.adapters.IntListList;\n+import org.apache.commons.collections.primitives.adapters.ListIntList;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/01/10 13:27:55 $\n+ * @author Rodney Waldhoff\n+ */\n+public abstract class TestIntList extends TestList {\n+\n+    // conventional\n+    // ------------------------------------------------------------------------\n+\n+    public TestIntList(String testName) {\n+        super(testName);\n+    }\n+\n+    // collections testing framework\n+    // ------------------------------------------------------------------------\n+\n+    // collections testing framework: int list\n+    // ------------------------------------------------------------------------\n+\n+    protected abstract IntList makeEmptyIntList();\n+\n+    protected IntList makeFullIntList() {\n+        IntList list = makeEmptyIntList();\n+        int[] values = getFullIntegers();\n+        for(int i=0;i<values.length;i++) {\n+            list.add(values[i]);\n+        }\n+        return list;\n+    }\n+\n+    protected int[] getFullIntegers() {\n+        int[] result = new int[19];\n+        for (int i = 0; i < result.length; i++) {\n+            result[i] = i + 19;\n+        }\n+        return result;\n+    }\n+\n+    protected int[] getOtherIntegers() {\n+        int[] result = new int[16];\n+        for (int i = 0; i < result.length; i++) {\n+            result[i] = i + 43;\n+        }\n+        return result;\n+    }\n+    \n+    // collections testing framework: inherited\n+    // ------------------------------------------------------------------------\n+\n+    protected List makeEmptyList() {\n+        return new IntListList(makeEmptyIntList());\n+    }\n+        \n+    protected Object[] getFullElements() {\n+        return wrapArray(getFullIntegers());\n+    }\n+\n+    protected Object[] getOtherElements() {\n+        return wrapArray(getOtherIntegers());\n+    }\n+\n+    // private utils\n+    // ------------------------------------------------------------------------\n+\n+    private Integer[] wrapArray(int[] primitives) {\n+        Integer[] result = new Integer[primitives.length];\n+        for(int i=0;i<result.length;i++) {\n+            result[i] = new Integer(primitives[i]);            \n+        }\n+        return result;\n+    }\n+\n+    // tests\n+    // ------------------------------------------------------------------------\n+\n+    public void testEqualsWithTwoIntLists() {\n+        IntList one = makeEmptyIntList();\n+        assertEquals(\"Equals is reflexive on empty list\",one,one);\n+        IntList two = makeEmptyIntList();\n+        assertEquals(\"Empty lists are equal\",one,two);\n+        assertEquals(\"Equals is symmetric on empty lists\",two,one);\n+        \n+        one.add(1);\n+        assertEquals(\"Equals is reflexive on non empty list\",one,one);\n+        assertTrue(!one.equals(two));\n+        assertTrue(!two.equals(one));\n+\n+        two.add(1);\n+        assertEquals(\"Non empty lists are equal\",one,two);\n+        assertEquals(\"Equals is symmetric on non empty list\",one,two);\n+        \n+        one.add(1); one.add(2); one.add(3); one.add(5); one.add(8);\n+        assertEquals(\"Equals is reflexive on larger non empty list\",one,one);\n+        assertTrue(!one.equals(two));\n+        assertTrue(!two.equals(one));\n+        \n+        two.add(1); two.add(2); two.add(3); two.add(5); two.add(8);\n+        assertEquals(\"Larger non empty lists are equal\",one,two);\n+        assertEquals(\"Equals is symmetric on larger non empty list\",two,one);\n+    }\n+\n+    public void testIntSubListEquals() {\n+        IntList one = makeEmptyIntList();\n+        assertEquals(one,one.subList(0,0));\n+        assertEquals(one.subList(0,0),one);\n+        \n+        one.add(1);\n+        assertEquals(one,one.subList(0,1));\n+        assertEquals(one.subList(0,1),one);\n+\n+        one.add(1); one.add(2); one.add(3); one.add(5); one.add(8);\n+        assertEquals(one.subList(0,4),one.subList(0,4));\n+        assertEquals(one.subList(3,5),one.subList(3,5));\n+    }\n+    \n+    public void testEqualsWithIntListAndList() {\n+        IntList ilist = makeEmptyIntList();\n+        List list = new ArrayList();\n+        \n+        assertTrue(\"Unwrapped, empty List is not equal to empty IntList.\",!ilist.equals(list));\n+        assertTrue(\"Unwrapped, empty IntList is not equal to empty List.\",!list.equals(ilist));\n+        \n+        assertEquals(new ListIntList(list),ilist);\n+        assertEquals(ilist,new ListIntList(list));\n+        assertEquals(new IntListList(ilist),list);\n+        assertEquals(list,new IntListList(ilist));\n+        \n+        ilist.add(1);\n+        list.add(new Integer(1));\n+\n+        assertTrue(\"Unwrapped, non-empty List is not equal to non-empty IntList.\",!ilist.equals(list));\n+        assertTrue(\"Unwrapped, non-empty IntList is not equal to non-empty List.\",!list.equals(ilist));\n+        \n+        assertEquals(new ListIntList(list),ilist);\n+        assertEquals(ilist,new ListIntList(list));\n+        assertEquals(new IntListList(ilist),list);\n+        assertEquals(list,new IntListList(ilist));\n+                \n+        ilist.add(1); ilist.add(2); ilist.add(3); ilist.add(5); ilist.add(8);\n+        list.add(new Integer(1)); list.add(new Integer(2)); list.add(new Integer(3)); list.add(new Integer(5)); list.add(new Integer(8));\n+\n+        assertTrue(\"Unwrapped, non-empty List is not equal to non-empty IntList.\",!ilist.equals(list));\n+        assertTrue(\"Unwrapped, non-empty IntList is not equal to non-empty List.\",!list.equals(ilist));\n+        \n+        assertEquals(new ListIntList(list),ilist);\n+        assertEquals(ilist,new ListIntList(list));\n+        assertEquals(new IntListList(ilist),list);\n+        assertEquals(list,new IntListList(ilist));\n+        \n+    }\n+\n+    public void testClearAndSize() {\n+        IntList list = makeEmptyIntList();\n+        assertEquals(0, list.size());\n+        for(int i = 0; i < 100; i++) {\n+            list.add(i);\n+        }\n+        assertEquals(100, list.size());\n+        list.clear();\n+        assertEquals(0, list.size());\n+    }\n+\n+    public void testRemoveViaSubList() {\n+        IntList list = makeEmptyIntList();\n+        for(int i = 0; i < 100; i++) {\n+            list.add(i);\n+        }\n+        IntList sub = list.subList(25,75);\n+        assertEquals(50,sub.size());\n+        for(int i = 0; i < 50; i++) {\n+            assertEquals(100-i,list.size());\n+            assertEquals(50-i,sub.size());\n+            assertEquals(25+i,sub.removeElementAt(0));\n+            assertEquals(50-i-1,sub.size());\n+            assertEquals(100-i-1,list.size());\n+        }\n+        assertEquals(0,sub.size());\n+        assertEquals(50,list.size());        \n+    }\n+    \n+\n+    public void testAddGet() {\n+        IntList list = makeEmptyIntList();\n+        for (int i = 0; i < 1000; i++) {\n+            list.add(i);\n+        }\n+        for (int i = 0; i < 1000; i++) {\n+            assertEquals(i, list.get(i));\n+        }\n+    }\n+\n+    public void testAddAndShift() {\n+        IntList list = makeEmptyIntList();\n+        list.add(0, 1);\n+        assertEquals(\"Should have one entry\", 1, list.size());\n+        list.add(3);\n+        list.add(4);\n+        list.add(1, 2);\n+        for(int i = 0; i < 4; i++) {\n+            assertEquals(\"Should get entry back\", i + 1, list.get(i));\n+        }\n+        list.add(0, 0);\n+        for (int i = 0; i < 5; i++) {\n+            assertEquals(\"Should get entry back\", i, list.get(i));\n+        }\n+    }\n+\n+}", "timestamp": 1042205275, "metainfo": ""}