{"sha": "66c451d618577c1a1e1bf964ff990574782c3bb5", "log": "Patched ArrayIterator to use java.lang.reflect.Array so that it can support arrays of primitive types such as int[]   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/ArrayIterator.java\n  */\n package org.apache.commons.collections;\n \n+import java.lang.reflect.Array;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n   * @author Mauricio S. Moura\n   * @\n-  * @version $Revision: 1.5 $\n+  * @version $Revision: 1.6 $\n   */\n public class ArrayIterator implements Iterator {\n     \n-    private Object[] array;\n+    private Object array;\n     private int index = 0;\n   \n     \n     public ArrayIterator() {\n     }\n     \n-    public ArrayIterator(Object[] array) {\n+    public ArrayIterator(Object array) {\n         this.array = array;\n     }\n \n     // Iterator interface\n     //-------------------------------------------------------------------------\n     public boolean hasNext() {\n-        return  index < array.length;\n+        return  index < Array.getLength( array );\n     }\n \n     public Object next() {\n         if(!hasNext()) {\n             throw new NoSuchElementException();\n         }\n-        return array[ index++ ];\n+        return Array.get( array, index++ );\n     }\n \n     public void remove() {\n \n     // Properties\n     //-------------------------------------------------------------------------\n-    public Object[] getArray() {\n+    public Object getArray() {\n         return array;\n     }\n     \n-    public void setArray( Object[] array ) {\n+    public void setArray( Object array ) {\n         this.array = array;\n         this.index = -1;\n     }\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.9 2001/08/22 10:05:38 jstrachan Exp $\n- * $Revision: 1.9 $\n- * $Date: 2001/08/22 10:05:38 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.10 2001/08/23 12:04:40 jstrachan Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2001/08/23 12:04:40 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.9 2001/08/22 10:05:38 jstrachan Exp $\n+ * @version $Id: TestAll.java,v 1.10 2001/08/23 12:04:40 jstrachan Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         suite.addTest(TestArrayIterator.suite());\n+        suite.addTest(TestArrayIterator2.suite());\n         suite.addTest(TestArrayList.suite());\n         suite.addTest(TestArrayStack.suite());\n         suite.addTest(TestCollectionUtils.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestArrayIterator2.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestArrayIterator2.java,v 1.1 2001/08/23 12:04:40 jstrachan Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2001/08/23 12:04:40 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import junit.framework.*;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the ArrayIterator with primitive type arrays\n+ *\n+ * @author James Strachan\n+ * @version $Id: TestArrayIterator2.java,v 1.1 2001/08/23 12:04:40 jstrachan Exp $\n+ */\n+public class TestArrayIterator2 extends TestObject {\n+    \n+    protected int[] testArray = {\n+        2, 4, 6, 8\n+    };\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestArrayIterator2.class);\n+    }\n+    \n+    public TestArrayIterator2(String testName) {\n+        super(testName);\n+    }\n+    \n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public Object makeObject() {\n+        return new ArrayIterator( testArray );\n+    }\n+    \n+    public void testIterator() {\n+        Iterator iter = (Iterator) makeObject();\n+        for ( int i = 0; i < testArray.length; i++ ) {\n+            Integer testValue = new Integer( testArray[i] );            \n+            Number iterValue = (Number) iter.next();\n+            \n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+        \n+        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n+\n+\ttry {\n+\t    Object testValue = iter.next();\n+\t} catch (Exception e) {\n+\t  assertTrue(\"NoSuchElementException must be thrown\", \n+\t\t e.getClass().equals((new NoSuchElementException()).getClass()));\n+\t}\n+    }\n+}\n+", "timestamp": 998568280, "metainfo": ""}