{"sha": "c2d22264b029c47fb14d39cc9c4c397401e304d1", "log": "[COLLECTIONS-231] return specific type rather than base type in factory methods, javadoc cleanup.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractBagDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractBagDecorator.java\n /**\n  * Decorates another <code>Bag</code> to provide additional behaviour.\n  * <p>\n- * Methods are forwarded directly to the decorated bag.\n+ * Methods are forwarded directly to the decorated bag.</p>\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int getCount(Object object) {\n         return decorated().getCount(object);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean add(E object, int count) {\n         return decorated().add(object, count);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean remove(Object object, int count) {\n         return decorated().remove(object, count);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Set<E> uniqueSet() {\n         return decorated().uniqueSet();\n     }\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n  * <p>\n  * Subclasses specify a Map implementation to use as the internal storage. The\n  * map will be used to map bag elements to a number; the number represents the\n- * number of occurrences of that element in the bag.\n+ * number of occurrences of that element in the bag.</p>\n  *\n  * @since Commons Collections 3.0 (previously DefaultMapBag v2.0)\n  * @version $Revision$\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java\n /**\n  * Decorates another <code>SortedBag</code> to provide additional behaviour.\n  * <p>\n- * Methods are forwarded directly to the decorated bag.\n+ * Methods are forwarded directly to the decorated bag.</p>\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n--- a/src/main/java/org/apache/commons/collections/bag/HashBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/HashBag.java\n  * count of occurrences. Extra methods on the interface allow multiple copies\n  * of an object to be added or removed at once. It is important to read the\n  * interface javadoc carefully as several methods violate the\n- * <code>Collection</code> interface specification.\n+ * <code>Collection</code> interface specification.</p>\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.0)\n  * @version $Revision$\n--- a/src/main/java/org/apache/commons/collections/bag/PredicatedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/PredicatedBag.java\n  * <p>\n  * This bag exists to provide validation for the decorated bag.\n  * It is normally created to decorate an empty bag.\n- * If an object cannot be added to the bag, an IllegalArgumentException is thrown.\n+ * If an object cannot be added to the bag, an IllegalArgumentException is thrown.</p>\n  * <p>\n  * One usage would be to ensure that no null entries are added to the bag.\n- * <pre>Bag bag = PredicatedBag.decorate(new HashBag(), NotNullPredicate.INSTANCE);</pre>\n+ * <pre>Bag bag = PredicatedBag.decorate(new HashBag(), NotNullPredicate.INSTANCE);</pre></p>\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.\n+ * This class is Serializable from Commons Collections 3.1.</p>\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n      * Factory method to create a predicated (validating) bag.\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are validated.\n+     * are validated.</p>\n      * \n+     * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated Bag\n      * @throws IllegalArgumentException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n-    public static <T> Bag<T> predicatedBag(Bag<T> bag, Predicate<? super T> predicate) {\n-        return new PredicatedBag<T>(bag, predicate);\n+    public static <E> PredicatedBag<E> predicatedBag(Bag<E> bag, Predicate<? super E> predicate) {\n+        return new PredicatedBag<E>(bag, predicate);\n     }\n \n     //-----------------------------------------------------------------------\n      * Constructor that wraps (not copies).\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are validated.\n+     * are validated.</p>\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n     }\n     \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean add(E object, int count) {\n         validate(object);\n         return decorated().add(object, count);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean remove(Object object, int count) {\n         return decorated().remove(object, count);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Set<E> uniqueSet() {\n         return decorated().uniqueSet();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int getCount(Object object) {\n         return decorated().getCount(object);\n     }\n--- a/src/main/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n  * <p>\n  * This bag exists to provide validation for the decorated bag.\n  * It is normally created to decorate an empty bag.\n- * If an object cannot be added to the bag, an IllegalArgumentException is thrown.\n+ * If an object cannot be added to the bag, an IllegalArgumentException is thrown.</p>\n  * <p>\n  * One usage would be to ensure that no null entries are added to the bag.\n- * <pre>SortedBag bag = PredicatedSortedBag.decorate(new TreeBag(), NotNullPredicate.INSTANCE);</pre>\n+ * <pre>SortedBag bag = PredicatedSortedBag.decorate(new TreeBag(), NotNullPredicate.INSTANCE);</pre></p>\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.\n+ * This class is Serializable from Commons Collections 3.1.</p>\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n      * Factory method to create a predicated (validating) bag.\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are validated.\n+     * are validated.</p>\n      * \n+     * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n      * @return a new predicated SortedBag\n      * @throws IllegalArgumentException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n-    public static <T> SortedBag<T> predicatedSortedBag(SortedBag<T> bag, Predicate<? super T> predicate) {\n-        return new PredicatedSortedBag<T>(bag, predicate);\n+    public static <E> PredicatedSortedBag<E> predicatedSortedBag(SortedBag<E> bag, Predicate<? super E> predicate) {\n+        return new PredicatedSortedBag<E>(bag, predicate);\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n-     * <p>\n-     * If there are any elements already in the bag being decorated, they\n-     * are validated.\n+     * <p>If there are any elements already in the bag being decorated, they\n+     * are validated.</p>\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param predicate  the predicate to use for validation, must not be null\n     }\n     \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E first() {\n         return decorated().first();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E last() {\n         return decorated().last();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Comparator<? super E> comparator() {\n         return decorated().comparator();\n     }\n--- a/src/main/java/org/apache/commons/collections/bag/SynchronizedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/SynchronizedBag.java\n  * for a multi-threaded environment.\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated bag.\n- * Iterators must be separately synchronized around the loop.\n+ * Iterators must be separately synchronized around the loop.</p>\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.\n+ * This class is Serializable from Commons Collections 3.1.</p>\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n     /**\n      * Factory method to create a synchronized bag.\n      * \n+     * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @return a new synchronized Bag\n      * @throws IllegalArgumentException if bag is null\n      */\n-    public static <T> Bag<T> synchronizedBag(Bag<T> bag) {\n-        return new SynchronizedBag<T>(bag);\n+    public static <E> SynchronizedBag<E> synchronizedBag(Bag<E> bag) {\n+        return new SynchronizedBag<E>(bag);\n     }\n     \n     //-----------------------------------------------------------------------\n     }\n     \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean add(E object, int count) {\n         synchronized (lock) {\n             return getBag().add(object, count);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean remove(Object object, int count) {\n         synchronized (lock) {\n             return getBag().remove(object, count);\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Set<E> uniqueSet() {\n         synchronized (lock) {\n             Set<E> set = getBag().uniqueSet();\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int getCount(Object object) {\n         synchronized (lock) {\n             return getBag().getCount(object);\n--- a/src/main/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n  * for a multi-threaded environment.\n  * <p>\n  * Methods are synchronized, then forwarded to the decorated bag.\n- * Iterators must be separately synchronized around the loop.\n+ * Iterators must be separately synchronized around the loop.</p>\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.\n+ * This class is Serializable from Commons Collections 3.1.</p>\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n     /**\n      * Factory method to create a synchronized sorted bag.\n      * \n+     * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @return a new synchronized SortedBag\n      * @throws IllegalArgumentException if bag is null\n      */\n-    public static <E> SortedBag<E> synchronizedSortedBag(SortedBag<E> bag) {\n+    public static <E> SynchronizedSortedBag<E> synchronizedSortedBag(SortedBag<E> bag) {\n         return new SynchronizedSortedBag<E>(bag);\n     }\n     \n     }\n     \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public synchronized E first() {\n         synchronized (lock) {\n             return getSortedBag().first();\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public synchronized E last() {\n         synchronized (lock) {\n             return getSortedBag().last();\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public synchronized Comparator<? super E> comparator() {\n         synchronized (lock) {\n             return getSortedBag().comparator();\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n  * The add methods are affected by this class.\n  * Thus objects must be removed or searched for using their transformed form.\n  * For example, if the transformation converts Strings to Integers, you must\n- * use the Integer form to remove objects.\n+ * use the Integer form to remove objects.</p>\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.\n+ * This class is Serializable from Commons Collections 3.1.</p>\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n      * Factory method to create a transforming bag.\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are NOT transformed.\n-     * Contrast this with {@link #transformedBag(Bag, Transformer)}.\n+     * are NOT transformed. Contrast this with {@link #transformedBag(Bag, Transformer)}.</p>\n      * \n+     * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Bag\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n      * will be transformed by this method.\n-     * Contrast this with {@link #transformingBag(Bag, Transformer)}.\n+     * Contrast this with {@link #transformingBag(Bag, Transformer)}.</p>\n      * \n+     * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Bag\n      * Constructor that wraps (not copies).\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are NOT transformed.\n+     * are NOT transformed.</p>\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int getCount(Object object) {\n         return getBag().getCount(object);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean remove(Object object, int nCopies) {\n         return getBag().remove(object, nCopies);\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public boolean add(E object, int nCopies) {\n         return getBag().add(transform(object), nCopies);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Set<E> uniqueSet() {\n         Set<E> set = getBag().uniqueSet();\n         return TransformedSet.<E>transformingSet(set, transformer);\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n  * The add methods are affected by this class.\n  * Thus objects must be removed or searched for using their transformed form.\n  * For example, if the transformation converts Strings to Integers, you must\n- * use the Integer form to remove objects.\n+ * use the Integer form to remove objects.</p>\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.\n+ * This class is Serializable from Commons Collections 3.1.</p>\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n      * Factory method to create a transforming sorted bag.\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are NOT transformed.\n-     * Contrast this with {@link #transformedSortedBag(SortedBag, Transformer)}.\n+     * are NOT transformed. Contrast this with {@link #transformedSortedBag(SortedBag, Transformer)}.</p>\n      * \n+     * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed SortedBag\n      * @throws IllegalArgumentException if bag or transformer is null\n      */\n-    public static <E> SortedBag<E> transformingSortedBag(SortedBag<E> bag, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> TransformedSortedBag<E> transformingSortedBag(SortedBag<E> bag,\n+                                                                    Transformer<? super E, ? extends E> transformer) {\n         return new TransformedSortedBag<E>(bag, transformer);\n     }\n     \n      * <p>\n      * If there are any elements already in the bag being decorated, they\n      * will be transformed by this method.\n-     * Contrast this with {@link #transformingSortedBag(SortedBag, Transformer)}.\n+     * Contrast this with {@link #transformingSortedBag(SortedBag, Transformer)}.</p>\n      * \n+     * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed SortedBag\n      * @throws IllegalArgumentException if bag or transformer is null\n      * @since Commons Collections 3.3\n      */\n-    public static <E> SortedBag<E> transformedSortedBag(SortedBag<E> bag, Transformer<? super E, ? extends E> transformer) {\n+    public static <E> TransformedSortedBag<E> transformedSortedBag(SortedBag<E> bag,\n+                                                                   Transformer<? super E, ? extends E> transformer) {\n         TransformedSortedBag<E>  decorated = new TransformedSortedBag<E>(bag, transformer);\n         if (transformer != null && bag != null && bag.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // bag is type E\n      * Constructor that wraps (not copies).\n      * <p>\n      * If there are any elements already in the bag being decorated, they\n-     * are NOT transformed.\n+     * are NOT transformed.</p>\n      * \n      * @param bag  the bag to decorate, must not be null\n      * @param transformer  the transformer to use for conversion, must not be null\n     }\n \n     //-----------------------------------------------------------------------\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E first() {\n         return getSortedBag().first();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public E last() {\n         return getSortedBag().last();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Comparator<? super E> comparator() {\n         return getSortedBag().comparator();\n     }\n--- a/src/main/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n /**\n  * Decorates another <code>Bag</code> to ensure it can't be altered.\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.\n+ * This class is Serializable from Commons Collections 3.1.</p>\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.</p> \n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n     /**\n      * Factory method to create an unmodifiable bag.\n      * <p>\n-     * If the bag passed in is already unmodifiable, it is returned.\n+     * If the bag passed in is already unmodifiable, it is returned.</p>\n      * \n+     * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @return an unmodifiable Bag\n      * @throws IllegalArgumentException if bag is null\n--- a/src/main/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n /**\n  * Decorates another <code>SortedBag</code> to ensure it can't be altered.\n  * <p>\n- * This class is Serializable from Commons Collections 3.1.\n+ * This class is Serializable from Commons Collections 3.1.</p>\n  * <p>\n- * Attempts to modify it will result in an UnsupportedOperationException. \n+ * Attempts to modify it will result in an UnsupportedOperationException.</p> \n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$\n     /**\n      * Factory method to create an unmodifiable bag.\n      * <p>\n-     * If the bag passed in is already unmodifiable, it is returned.\n+     * If the bag passed in is already unmodifiable, it is returned.</p>\n      * \n+     * @param <E> the type of the elements in the bag\n      * @param bag  the bag to decorate, must not be null\n      * @return an unmodifiable SortedBag\n      * @throws IllegalArgumentException if bag is null", "timestamp": 1340465749, "metainfo": ""}