{"sha": "76d073f5a805ff16b6ff9345696c13201c5603eb", "log": "Remove duplicate factory methods, no need for it.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n      * @since 4.1\n      */\n     public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator, long max) {\n-        return BoundedIterator.boundedIterator(iterator, max);\n+        return boundedIterator(iterator, 0, max);\n     }\n \n     /**\n      */\n     public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator,\n                                                          long offset, long max) {\n-        return BoundedIterator.boundedIterator(iterator, offset, max);\n+        return new BoundedIterator<E>(iterator, offset, max);\n     }\n \n     // Unmodifiable\n--- a/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java\n \n     /** The position of the current element */\n     private long pos;\n-\n-    //-----------------------------------------------------------------------\n-\n-    /**\n-     * Decorates the specified iterator to return at most the given number\n-     * of elements.\n-     *\n-     * @param <E>  the element type\n-     * @param iterator  the iterator to decorate\n-     * @param max  the maximum number of elements returned by this iterator\n-     * @return a new bounded iterator\n-     * @throws IllegalArgumentException if the iterator is null or max is negative\n-     */\n-    public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator,\n-                                                         final long max) {\n-        return boundedIterator(iterator, 0, max);\n-    }\n-\n-    /**\n-     * Decorates the specified iterator to return at most the given number\n-     * of elements, skipping all elements until the iterator reaches the position\n-     * at {@code offset}.\n-     * <p>\n-     * The iterator is immediately advanced until it reaches the position at {@code offset},\n-     * incurring O(n) time.\n-     *\n-     * @param <E>  the element type\n-     * @param iterator  the iterator to decorate\n-     * @param offset  the index of the first element of the decorated iterator to return\n-     * @param max  the maximum number of elements returned by this iterator\n-     * @return a new bounded iterator\n-     * @throws IllegalArgumentException if the iterator is null or either offset or max is negative\n-     */\n-    public static <E> BoundedIterator<E> boundedIterator(final Iterator<? extends E> iterator,\n-                                                         final long offset, final long max) {\n-        return new BoundedIterator<E>(iterator, 0, max);\n-    }\n \n     //-----------------------------------------------------------------------\n ", "timestamp": 1393881855, "metainfo": ""}