{"sha": "54c23b2da3b97ba926d81500d28bf6f0b4ae62af", "log": "now throws an exception for comparisons on an empty chain and added no-op constructor   ", "commit": "\n--- a/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparatorChain.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ComparatorChain.java,v 1.4 2002/03/04 19:18:56 morgand Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/03/04 19:18:56 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/comparators/ComparatorChain.java,v 1.5 2002/03/19 22:25:51 morgand Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/03/19 22:25:51 $\n  *\n  * ====================================================================\n  *\n     protected BitSet orderingBits = null;\n \n     // ComparatorChain is \"locked\" after the first time\n-    // compare(Object,Object) is called)\n+    // compare(Object,Object) is called\n     protected boolean isLocked = false;\n+\n+    /**\n+     * Construct a ComparatorChain with no Comparators.\n+     * You must add at least one Comparator before calling\n+     * the compare(Object,Object) method, or an \n+     * UnsupportedOperationException is thrown\n+     */\n+    public ComparatorChain() {\n+        this(new ArrayList(),new BitSet());\n+    }\n \n     /**\n      * Construct a ComparatorChain with a single Comparator,\n         }\n     }\n \n-    public int compare(Object o1, Object o2) {\n+    private void checkChainIntegrity() {\n+        if (comparatorChain.size() == 0) {\n+            throw new UnsupportedOperationException(\"ComparatorChains must contain at least one Comparator\");\n+        }\n+    }\n+\n+    /**\n+     * Perform comaparisons on the Objects as per\n+     * Comparator.compare(o1,o2).\n+     * \n+     * @param o1     object 1\n+     * @param o2     object 2\n+     * @return -1, 0, or 1\n+     * @exception UnsupportedOperationException\n+     *                   if the ComparatorChain does not contain at least one\n+     *                   Comparator\n+     */\n+    public int compare(Object o1, Object o2) throws UnsupportedOperationException {\n         if (isLocked == false) {\n+            checkChainIntegrity();\n             isLocked = true;\n         }\n-        \n+\n         // iterate over all comparators in the chain\n         Iterator comparators = comparatorChain.iterator();\n         for (int comparatorIndex = 0; comparators.hasNext(); ++comparatorIndex) {\n--- a/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparatorChain.java\n         chain.addComparator(new ColumnComparator(1),true); // reverse the second column\n         chain.addComparator(new ColumnComparator(2),false);\n         return chain;\n+    }\n+\n+    public void testNoopComparatorChain() {\n+        ComparatorChain chain = new ComparatorChain();\n+        Integer i1 = new Integer(4);\n+        Integer i2 = new Integer(6);\n+        chain.addComparator(new ComparableComparator());\n+\n+        int correctValue = i1.compareTo(i2);\n+        assertTrue(\"Comparison returns the right order\",chain.compare(i1,i2) == correctValue);\n+    }\n+\n+    public void testBadNoopComparatorChain() {\n+        ComparatorChain chain = new ComparatorChain();\n+        Integer i1 = new Integer(4);\n+        Integer i2 = new Integer(6);\n+        try {\n+            chain.compare(i1,i2);\n+            fail(\"An exception should be thrown when a chain contains zero comparators.\");\n+        } catch (UnsupportedOperationException e) {\n+\n+        }\n+    }\n+\n+    public void testListComparatorChain() {\n+        List list = new LinkedList();\n+        list.add(new ComparableComparator());\n+        ComparatorChain chain = new ComparatorChain(list);\n+        Integer i1 = new Integer(4);\n+        Integer i2 = new Integer(6);\n+\n+        int correctValue = i1.compareTo(i2);\n+        assertTrue(\"Comparison returns the right order\",chain.compare(i1,i2) == correctValue);\n+    }\n+\n+    public void testBadListComparatorChain() {\n+        List list = new LinkedList();\n+        ComparatorChain chain = new ComparatorChain(list);\n+        Integer i1 = new Integer(4);\n+        Integer i2 = new Integer(6);\n+        try {\n+            chain.compare(i1,i2);\n+            fail(\"An exception should be thrown when a chain contains zero comparators.\");\n+        } catch (UnsupportedOperationException e) {\n+\n+        }\n     }\n \n     public List getComparableObjectsOrdered() {", "timestamp": 1016576758, "metainfo": ""}