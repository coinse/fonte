{"sha": "f68637922c8be4088ea704597ad9996276b69b3e", "log": "Refactor test class to share code   ", "commit": "\n--- a/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n+++ b/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.10 2003/09/24 08:24:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.11 2003/09/27 12:06:36 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Assert;\n \n+import org.apache.commons.collections.SortedBag;\n import org.apache.commons.collections.observed.standard.StandardModificationHandler;\n import org.apache.commons.collections.observed.standard.StandardModificationListener;\n import org.apache.commons.collections.observed.standard.StandardPostModificationEvent;\n  * {@link ObservedCollection} implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.10 $ $Date: 2003/09/24 08:24:46 $\n+ * @version $Revision: 1.11 $ $Date: 2003/09/27 12:06:36 $\n  * \n  * @author Stephen Colebourne\n  */\n public class ObservedTestHelper extends Assert {\n+    \n+    public static Object NONE = new Object();\n     \n     public static Integer FIVE = new Integer(5);\n     public static Integer SIX = new Integer(6);\n         doTestRemoveNCopies(factory);\n     }\n     \n+//    public static void bulkTestObservedSortedBag(ObservedFactory factory) {\n+//        assertTrue(factory.createObservedCollection() instanceof ObservableSortedBag);\n+//        assertTrue(factory.createObservedCollection(LISTENER) instanceof ObservableSortedBag);\n+//        assertTrue(factory.createObservedCollection(new StandardModificationHandler()) instanceof ObservableSortedBag);\n+//        \n+//        bulkTestObservedCollection(factory);\n+//        doTestAddNCopies(factory);\n+//        doTestRemoveNCopies(factory);\n+//        // TODO\n+//    }\n+    \n     public static void bulkTestObservedBuffer(ObservedFactory factory) {\n         assertTrue(factory.createObservedCollection() instanceof ObservableBuffer);\n         assertTrue(factory.createObservedCollection(LISTENER) instanceof ObservableBuffer);\n         assertEquals(0, coll.size());\n         coll.add(SIX);\n         assertEquals(1, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD, LISTENER.preEvent.getType());\n-        assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(SIX, LISTENER.preEvent.getChangeObject());\n-        assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        assertSame(SIX, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(0, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD, LISTENER.postEvent.getType());\n-        assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(SIX, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(SIX, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.postEvent.getPrevious());\n-        assertEquals(0, LISTENER.postEvent.getPreSize());\n-        assertEquals(1, LISTENER.postEvent.getPostSize());\n-        assertEquals(1, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-        \n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(true, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(false, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n-        \n-        // this isn't a full test, but...\n-        assertEquals(false, LISTENER.postEvent.getBaseCollection() instanceof ObservableCollection);\n+        checkPrePost(coll, ModificationEventType.ADD, -1, 1, SIX, null, false, 0, 1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(1, coll.size());\n         coll.add(SEVEN);\n         assertEquals(2, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD, LISTENER.preEvent.getType());\n-        assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(SEVEN, LISTENER.preEvent.getChangeObject());\n-        assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        assertSame(SEVEN, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(1, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD, LISTENER.postEvent.getType());\n-        assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.postEvent.getPrevious());\n-        assertEquals(1, LISTENER.postEvent.getPreSize());\n-        assertEquals(2, LISTENER.postEvent.getPostSize());\n-        assertEquals(1, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-        \n-        if (coll instanceof SortedSet == false) {\n+        checkPrePost(coll, ModificationEventType.ADD, -1, 1, SEVEN, null, false, 1, 2);\n+        \n+        if (coll instanceof SortedSet == false && coll instanceof SortedBag == false) {\n             LISTENER.preEvent = null;\n             LISTENER.postEvent = null;\n             assertEquals(2, coll.size());\n             coll.add(SIX_SEVEN_LIST);\n             assertEquals(3, coll.size());\n-            // pre\n-            assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-            assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-            assertEquals(ModificationEventType.ADD, LISTENER.preEvent.getType());\n-            assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n+            // pre - don't use checkPrePost as it checks based on Collection\n             assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeObject());\n             assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n             assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeCollection().iterator().next());\n-            assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-            assertSame(null, LISTENER.preEvent.getPrevious());\n-            assertEquals(2, LISTENER.preEvent.getPreSize());\n-            // post\n-            assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-            assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-            assertEquals(ModificationEventType.ADD, LISTENER.postEvent.getType());\n-            assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n+            // post - don't use checkPrePost as it checks based on Collection\n             assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n             assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n             assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection().iterator().next());\n-            assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-            assertSame(null, LISTENER.postEvent.getPrevious());\n             assertEquals(2, LISTENER.postEvent.getPreSize());\n             assertEquals(3, LISTENER.postEvent.getPostSize());\n-            assertEquals(1, LISTENER.postEvent.getSizeChange());\n-            assertEquals(true, LISTENER.postEvent.isSizeChanged());\n         }\n     }\n \n         assertEquals(2, coll.size());\n         coll.add(1, EIGHT);\n         assertEquals(3, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD_INDEXED, LISTENER.preEvent.getType());\n-        assertEquals(1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(EIGHT, LISTENER.preEvent.getChangeObject());\n-        assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD_INDEXED, LISTENER.postEvent.getType());\n-        assertEquals(1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(3, LISTENER.postEvent.getPostSize());\n-        assertEquals(1, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(true, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(false, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.ADD_INDEXED, 1, 1, EIGHT, null, false, 2, 3);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(2, coll.size());\n         coll.add(EIGHT, 3);\n         assertEquals(5, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD_NCOPIES, LISTENER.preEvent.getType());\n-        assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(EIGHT, LISTENER.preEvent.getChangeObject());\n-        assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        assertEquals(3, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD_NCOPIES, LISTENER.postEvent.getType());\n-        assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(3, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(5, LISTENER.postEvent.getPostSize());\n-        assertEquals(3, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(true, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(false, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.ADD_NCOPIES, -1, 3, EIGHT, null, false, 2, 5);\n     }\n \n     //-----------------------------------------------------------------------\n         it.next();\n         it.add(EIGHT);\n         assertEquals(3, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD_ITERATED, LISTENER.preEvent.getType());\n-        assertEquals(1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(EIGHT, LISTENER.preEvent.getChangeObject());\n-        assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD_ITERATED, LISTENER.postEvent.getType());\n-        assertEquals(1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(3, LISTENER.postEvent.getPostSize());\n-        assertEquals(1, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(true, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(false, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.ADD_ITERATED, 1, 1, EIGHT, null, false, 2, 3);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(0, coll.size());\n         coll.addAll(SIX_SEVEN_LIST);\n         assertEquals(2, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD_ALL, LISTENER.preEvent.getType());\n-        assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeObject());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeCollection());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(0, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD_ALL, LISTENER.postEvent.getType());\n-        assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.postEvent.getPrevious());\n-        assertEquals(0, LISTENER.postEvent.getPreSize());\n-        assertEquals(2, LISTENER.postEvent.getPostSize());\n-        assertEquals(2, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(true, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(false, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(true, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.ADD_ALL, -1, 1, SIX_SEVEN_LIST, null, false, 0, 2);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(2, coll.size());\n         coll.addAll(1, SIX_SEVEN_LIST);\n         assertEquals(4, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD_ALL_INDEXED, LISTENER.preEvent.getType());\n-        assertEquals(1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeObject());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.ADD_ALL_INDEXED, LISTENER.postEvent.getType());\n-        assertEquals(1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(4, LISTENER.postEvent.getPostSize());\n-        assertEquals(2, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(true, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(false, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(true, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.ADD_ALL_INDEXED, 1, 1, SIX_SEVEN_LIST, null, false, 2, 4);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(2, coll.size());\n         coll.clear();\n         assertEquals(0, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.CLEAR, LISTENER.preEvent.getType());\n-        assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(null, LISTENER.preEvent.getChangeObject());\n-        assertEquals(0, LISTENER.preEvent.getChangeCollection().size());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.CLEAR, LISTENER.postEvent.getType());\n-        assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(null, LISTENER.postEvent.getChangeObject());\n-        assertEquals(0, LISTENER.postEvent.getChangeCollection().size());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(0, LISTENER.postEvent.getPostSize());\n-        assertEquals(-2, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(false, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(true, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(true, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.CLEAR, -1, 1, NONE, null, false, 2, 0);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(2, coll.size());\n         coll.remove(SEVEN);\n         assertEquals(1, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE, LISTENER.preEvent.getType());\n-        assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(SEVEN, LISTENER.preEvent.getChangeObject());\n-        assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        assertSame(SEVEN, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE, LISTENER.postEvent.getType());\n-        assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(1, LISTENER.postEvent.getPostSize());\n-        assertEquals(-1, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(false, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(true, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.REMOVE, -1, 1, SEVEN, SEVEN, false, 2, 1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(2, coll.size());\n         coll.remove(0);\n         assertEquals(1, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_INDEXED, LISTENER.preEvent.getType());\n-        assertEquals(0, LISTENER.preEvent.getChangeIndex());\n-        assertSame(null, LISTENER.preEvent.getChangeObject());\n-        assertEquals(0, LISTENER.preEvent.getChangeCollection().size());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_INDEXED, LISTENER.postEvent.getType());\n-        assertEquals(0, LISTENER.postEvent.getChangeIndex());\n-        assertSame(null, LISTENER.postEvent.getChangeObject());\n-        assertEquals(0, LISTENER.postEvent.getChangeCollection().size());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(SIX, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(1, LISTENER.postEvent.getPostSize());\n-        assertEquals(-1, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(false, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(true, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.REMOVE_INDEXED, 0, 1, NONE, SIX, false, 2, 1);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(13, coll.size());\n         coll.remove(SEVEN, 3);\n         assertEquals(10, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_NCOPIES, LISTENER.preEvent.getType());\n-        assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(SEVEN, LISTENER.preEvent.getChangeObject());\n-        assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        assertSame(SEVEN, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        assertEquals(3, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(13, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_NCOPIES, LISTENER.postEvent.getType());\n-        assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(3, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n-        assertEquals(13, LISTENER.postEvent.getPreSize());\n-        assertEquals(10, LISTENER.postEvent.getPostSize());\n-        assertEquals(-3, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(false, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(true, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.REMOVE_NCOPIES, -1, 3, SEVEN, SEVEN, false, 13, 10);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(2, coll.size());\n         coll.remove();\n         assertEquals(1, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_NEXT, LISTENER.preEvent.getType());\n-        assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(null, LISTENER.preEvent.getChangeObject());\n-        assertEquals(0, LISTENER.preEvent.getChangeCollection().size());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_NEXT, LISTENER.postEvent.getType());\n-        assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(1, LISTENER.postEvent.getPostSize());\n-        assertEquals(-1, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(false, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(true, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+        checkPre (coll, ModificationEventType.REMOVE_NEXT, -1, 1, NONE, null, 2, null, -1);\n+        checkPost(coll, ModificationEventType.REMOVE_NEXT, -1, 1, SEVEN, SEVEN, 2, 1, null, -1);\n     }\n \n     //-----------------------------------------------------------------------\n         Object removed = it.next();  // store remove as iterator order may vary\n         it.remove();\n         assertEquals(1, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_ITERATED, LISTENER.preEvent.getType());\n-        assertEquals(1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(removed, LISTENER.preEvent.getChangeObject());\n-        assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        assertSame(removed, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(removed, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_ITERATED, LISTENER.postEvent.getType());\n-        assertEquals(1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(removed, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(removed, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(removed, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(1, LISTENER.postEvent.getPostSize());\n-        assertEquals(-1, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(false, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(true, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n-        \n+        checkPrePost(coll, ModificationEventType.REMOVE_ITERATED, 1, 1, removed, removed, true, 2, 1);\n+\n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(1, coll.size());\n         it.next();\n         it.remove();\n         assertEquals(1, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_ITERATED, LISTENER.preEvent.getType());\n-        assertEquals(1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(SEVEN, LISTENER.preEvent.getChangeObject());\n-        assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        assertSame(SEVEN, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(SEVEN, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_ITERATED, LISTENER.postEvent.getType());\n-        assertEquals(1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(SEVEN, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(SEVEN, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(1, LISTENER.postEvent.getPostSize());\n-        assertEquals(-1, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(false, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(true, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n-        \n+        checkPrePost(coll, ModificationEventType.REMOVE_ITERATED, 1, 1, SEVEN, SEVEN, true, 2, 1);\n+\n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(1, coll.size());\n         assertEquals(3, coll.size());\n         coll.removeAll(SIX_SEVEN_LIST);\n         assertEquals(1, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_ALL, LISTENER.preEvent.getType());\n-        assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeObject());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeCollection());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(3, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.REMOVE_ALL, LISTENER.postEvent.getType());\n-        assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.postEvent.getPrevious());\n-        assertEquals(3, LISTENER.postEvent.getPreSize());\n-        assertEquals(1, LISTENER.postEvent.getPostSize());\n-        assertEquals(-2, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(false, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(true, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(true, LISTENER.postEvent.isTypeBulk());\n-        \n+        checkPrePost(coll, ModificationEventType.REMOVE_ALL, -1, 1, SIX_SEVEN_LIST, null, false, 3, 1);\n+\n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(1, coll.size());\n         assertEquals(3, coll.size());\n         coll.retainAll(SIX_SEVEN_LIST);\n         assertEquals(2, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.RETAIN_ALL, LISTENER.preEvent.getType());\n-        assertEquals(-1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeObject());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.preEvent.getChangeCollection());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(3, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.RETAIN_ALL, LISTENER.postEvent.getType());\n-        assertEquals(-1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeObject());\n-        assertSame(SIX_SEVEN_LIST, LISTENER.postEvent.getChangeCollection());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.postEvent.getPrevious());\n-        assertEquals(3, LISTENER.postEvent.getPreSize());\n-        assertEquals(2, LISTENER.postEvent.getPostSize());\n-        assertEquals(-1, LISTENER.postEvent.getSizeChange());\n-        assertEquals(true, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(false, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(true, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(false, LISTENER.postEvent.isTypeChange());\n-        assertEquals(true, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.RETAIN_ALL, -1, 1, SIX_SEVEN_LIST, null, false, 3, 2);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(2, coll.size());\n         coll.set(0, EIGHT);\n         assertEquals(2, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.SET_INDEXED, LISTENER.preEvent.getType());\n-        assertEquals(0, LISTENER.preEvent.getChangeIndex());\n-        assertSame(EIGHT, LISTENER.preEvent.getChangeObject());\n-        assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(null, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.SET_INDEXED, LISTENER.postEvent.getType());\n-        assertEquals(0, LISTENER.postEvent.getChangeIndex());\n-        assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(SIX, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(2, LISTENER.postEvent.getPostSize());\n-        assertEquals(0, LISTENER.postEvent.getSizeChange());\n-        assertEquals(false, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(false, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(false, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(true, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.SET_INDEXED, 0, 1, EIGHT, SIX, false, 2, 2);\n     }\n \n     //-----------------------------------------------------------------------\n         it.next();\n         it.set(EIGHT);\n         assertEquals(2, coll.size());\n-        // pre\n-        assertSame(coll, LISTENER.preEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n-        assertEquals(ModificationEventType.SET_ITERATED, LISTENER.preEvent.getType());\n-        assertEquals(1, LISTENER.preEvent.getChangeIndex());\n-        assertSame(EIGHT, LISTENER.preEvent.getChangeObject());\n-        assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n-        assertSame(EIGHT, LISTENER.preEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.preEvent.getChangeRepeat());\n-        assertSame(SEVEN, LISTENER.preEvent.getPrevious());\n-        assertEquals(2, LISTENER.preEvent.getPreSize());\n-        // post\n-        assertSame(coll, LISTENER.postEvent.getObservedCollection());\n-        assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n-        assertEquals(ModificationEventType.SET_ITERATED, LISTENER.postEvent.getType());\n-        assertEquals(1, LISTENER.postEvent.getChangeIndex());\n-        assertSame(EIGHT, LISTENER.postEvent.getChangeObject());\n-        assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n-        assertSame(EIGHT, LISTENER.postEvent.getChangeCollection().iterator().next());\n-        assertEquals(1, LISTENER.postEvent.getChangeRepeat());\n-        assertSame(SEVEN, LISTENER.postEvent.getPrevious());\n-        assertEquals(2, LISTENER.postEvent.getPreSize());\n-        assertEquals(2, LISTENER.postEvent.getPostSize());\n-        assertEquals(0, LISTENER.postEvent.getSizeChange());\n-        assertEquals(false, LISTENER.postEvent.isSizeChanged());\n-\n-        assertEquals(false, LISTENER.postEvent.isView());\n-        assertEquals(-1, LISTENER.postEvent.getViewOffset());\n-        assertEquals(null, LISTENER.postEvent.getView());\n-        assertEquals(false, LISTENER.postEvent.isTypeAdd());\n-        assertEquals(false, LISTENER.postEvent.isTypeReduce());\n-        assertEquals(true, LISTENER.postEvent.isTypeChange());\n-        assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+        checkPrePost(coll, ModificationEventType.SET_ITERATED, 1, 1, EIGHT, SEVEN, true, 2, 2);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(3, subList.size());\n         subList.add(EIGHT);\n         assertEquals(4, subList.size());\n-        checkPrePost(coll, ModificationEventType.ADD, -1, EIGHT, null, 5, 6, subList, 1);\n+        checkPrePost(coll, ModificationEventType.ADD, -1, 1, EIGHT, null, false, 5, 6, subList, 1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(4, subList.size());\n         subList.add(1, EIGHT);\n         assertEquals(5, subList.size());\n-        checkPrePost(coll, ModificationEventType.ADD_INDEXED, 2, EIGHT, null, 6, 7, subList, 1);\n+        checkPrePost(coll, ModificationEventType.ADD_INDEXED, 2, 1, EIGHT, null, false, 6, 7, subList, 1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(5, subList.size());\n         subList.set(3, SEVEN);\n         assertEquals(5, subList.size());\n-        checkPrePost(coll, ModificationEventType.SET_INDEXED, 4, SEVEN, SIX, 7, 7, subList, 1);\n+        checkPrePost(coll, ModificationEventType.SET_INDEXED, 4, 1, SEVEN, SIX, false, 7, 7, subList, 1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         it.next();\n         it.remove();\n         assertEquals(4, subList.size());\n-        checkPrePost(coll, ModificationEventType.REMOVE_ITERATED, 1, SEVEN, SEVEN, 7, 6, subList, 1);\n+        checkPrePost(coll, ModificationEventType.REMOVE_ITERATED, 1, 1, SEVEN, SEVEN, true, 7, 6, subList, 1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         it.next();\n         it.set(EIGHT);\n         assertEquals(4, subList.size());\n-        checkPrePost(coll, ModificationEventType.SET_ITERATED, 3, EIGHT, SEVEN, 6, 6, subList, 1);\n+        checkPrePost(coll, ModificationEventType.SET_ITERATED, 3, 1, EIGHT, SEVEN, true, 6, 6, subList, 1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(4, subList.size());\n         subList.clear();\n         assertEquals(0, subList.size());\n-        checkPrePost(coll, ModificationEventType.CLEAR, -1, null, null, 6, 2, subList, 1);\n+        checkPrePost(coll, ModificationEventType.CLEAR, -1, 1, NONE, null, false, 6, 2, subList, 1);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(2, subSet.size());\n         subSet.add(SEVEN);\n         assertEquals(3, subSet.size());\n-        checkPrePost(coll, ModificationEventType.ADD, -1, SEVEN, null, 3, 4, subSet, -1);\n+        checkPrePost(coll, ModificationEventType.ADD, -1, 1, SEVEN, null, false, 3, 4, subSet, -1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(3, subSet.size());\n         subSet.remove(SEVEN);\n         assertEquals(2, subSet.size());\n-        checkPrePost(coll, ModificationEventType.REMOVE, -1, SEVEN, SEVEN, 4, 3, subSet, -1);\n+        checkPrePost(coll, ModificationEventType.REMOVE, -1, 1, SEVEN, SEVEN, false, 4, 3, subSet, -1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         it.next();\n         it.remove();\n         assertEquals(1, subSet.size());\n-        checkPrePost(coll, ModificationEventType.REMOVE_ITERATED, 0, SIX, SIX, 3, 2, subSet, -1);\n+        checkPrePost(coll, ModificationEventType.REMOVE_ITERATED, 0, 1, SIX, SIX, true, 3, 2, subSet, -1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(1, subSet.size());\n         subSet.clear();\n         assertEquals(0, subSet.size());\n-        checkPrePost(coll, ModificationEventType.CLEAR, -1, null, null, 2, 1, subSet, -1);\n+        checkPrePost(coll, ModificationEventType.CLEAR, -1, 1, NONE, null, false, 2, 1, subSet, -1);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(2, subSet.size());\n         subSet.add(SEVEN);\n         assertEquals(3, subSet.size());\n-        checkPrePost(coll, ModificationEventType.ADD, -1, SEVEN, null, 3, 4, subSet, -1);\n+        checkPrePost(coll, ModificationEventType.ADD, -1, 1, SEVEN, null, false, 3, 4, subSet, -1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(3, subSet.size());\n         subSet.remove(SEVEN);\n         assertEquals(2, subSet.size());\n-        checkPrePost(coll, ModificationEventType.REMOVE, -1, SEVEN, SEVEN, 4, 3, subSet, -1);\n+        checkPrePost(coll, ModificationEventType.REMOVE, -1, 1, SEVEN, SEVEN, false, 4, 3, subSet, -1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         it.next();\n         it.remove();\n         assertEquals(1, subSet.size());\n-        checkPrePost(coll, ModificationEventType.REMOVE_ITERATED, 0, SIX, SIX, 3, 2, subSet, -1);\n+        checkPrePost(coll, ModificationEventType.REMOVE_ITERATED, 0, 1, SIX, SIX, true, 3, 2, subSet, -1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(1, subSet.size());\n         subSet.clear();\n         assertEquals(0, subSet.size());\n-        checkPrePost(coll, ModificationEventType.CLEAR, -1, null, null, 2, 1, subSet, -1);\n+        checkPrePost(coll, ModificationEventType.CLEAR, -1, 1, NONE, null, false, 2, 1, subSet, -1);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(2, subSet.size());\n         subSet.add(SEVEN);\n         assertEquals(3, subSet.size());\n-        checkPrePost(coll, ModificationEventType.ADD, -1, SEVEN, null, 3, 4, subSet, -1);\n+        checkPrePost(coll, ModificationEventType.ADD, -1, 1, SEVEN, null, false, 3, 4, subSet, -1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(3, subSet.size());\n         subSet.remove(SEVEN);\n         assertEquals(2, subSet.size());\n-        checkPrePost(coll, ModificationEventType.REMOVE, -1, SEVEN, SEVEN, 4, 3, subSet, -1);\n+        checkPrePost(coll, ModificationEventType.REMOVE, -1, 1, SEVEN, SEVEN, false, 4, 3, subSet, -1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         it.next();\n         it.remove();\n         assertEquals(1, subSet.size());\n-        checkPrePost(coll, ModificationEventType.REMOVE_ITERATED, 0, SIX, SIX, 3, 2, subSet, -1);\n+        checkPrePost(coll, ModificationEventType.REMOVE_ITERATED, 0, 1, SIX, SIX, true, 3, 2, subSet, -1);\n         \n         LISTENER.preEvent = null;\n         LISTENER.postEvent = null;\n         assertEquals(1, subSet.size());\n         subSet.clear();\n         assertEquals(0, subSet.size());\n-        checkPrePost(coll, ModificationEventType.CLEAR, -1, null, null, 2, 1, subSet, -1);\n-    }\n-    \n+        checkPrePost(coll, ModificationEventType.CLEAR, -1, 1, NONE, null, false, 2, 1, subSet, -1);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     protected static void checkPrePost(\n-            ObservableCollection coll, int type, int changeIndex, Object changeObject,\n-            Object previous, int preSize, int postSize, Collection view, int viewOffset) {\n+            ObservableCollection coll, int type, int changeIndex, int changeRepeat,\n+            Object changeObject, Object previous, boolean previousPre,\n+            int preSize, int postSize) {\n+        checkPrePost(\n+            coll, type, changeIndex, changeRepeat,\n+            changeObject, previous, previousPre,\n+            preSize, postSize, null, -1);\n+    }\n+    \n+    protected static void checkPrePost(\n+            ObservableCollection coll, int type, int changeIndex, int changeRepeat,\n+            Object changeObject, Object previous, boolean previousPre,\n+            int preSize, int postSize, Collection view, int viewOffset) {\n                 \n+        checkPre(\n+            coll, type, changeIndex, changeRepeat, changeObject,\n+            (previousPre ? previous : null), preSize, view, viewOffset);\n+        checkPost(\n+            coll, type, changeIndex, changeRepeat, changeObject,\n+            previous, preSize, postSize, view, viewOffset);\n+    }        \n+    protected static void checkPre(\n+            ObservableCollection coll, int type, int changeIndex, int changeRepeat,\n+            Object changeObject, Object previous,\n+            int preSize, Collection view, int viewOffset) {\n+\n         assertSame(coll, LISTENER.preEvent.getObservedCollection());\n         assertSame(coll.getHandler(), LISTENER.preEvent.getHandler());\n+        assertEquals(false, LISTENER.preEvent.getBaseCollection() instanceof ObservableCollection);\n         assertEquals(type, LISTENER.preEvent.getType());\n         assertEquals(changeIndex, LISTENER.preEvent.getChangeIndex());\n-        assertSame(changeObject, LISTENER.preEvent.getChangeObject());\n+        assertEquals(changeRepeat, LISTENER.preEvent.getChangeRepeat());\n+        if (changeObject == NONE) {\n+            assertSame(null, LISTENER.preEvent.getChangeObject());\n+            assertEquals(0, LISTENER.preEvent.getChangeCollection().size());\n+        } else if (changeObject instanceof Collection) {\n+            assertSame(changeObject, LISTENER.preEvent.getChangeObject());\n+            assertSame(changeObject, LISTENER.preEvent.getChangeCollection());\n+        } else {\n+            assertSame(changeObject, LISTENER.preEvent.getChangeObject());\n+            assertEquals(1, LISTENER.preEvent.getChangeCollection().size());\n+            assertSame(changeObject, LISTENER.preEvent.getChangeCollection().iterator().next());\n+        }\n+        assertSame(previous, LISTENER.preEvent.getPrevious());\n         assertEquals(preSize, LISTENER.preEvent.getPreSize());\n         assertEquals((view != null), LISTENER.preEvent.isView());\n         assertEquals(viewOffset, LISTENER.preEvent.getViewOffset());\n         assertSame(view, LISTENER.preEvent.getView());\n-\n+    }        \n+    protected static void checkPost(\n+            ObservableCollection coll, int type, int changeIndex, int changeRepeat,\n+            Object changeObject, Object previous,\n+            int preSize, int postSize, Collection view, int viewOffset) {\n+\n+        // post\n         assertSame(coll, LISTENER.postEvent.getObservedCollection());\n         assertSame(coll.getHandler(), LISTENER.postEvent.getHandler());\n+        assertEquals(false, LISTENER.postEvent.getBaseCollection() instanceof ObservableCollection);\n         assertEquals(type, LISTENER.postEvent.getType());\n         assertEquals(changeIndex, LISTENER.postEvent.getChangeIndex());\n-        assertSame(changeObject, LISTENER.postEvent.getChangeObject());\n+        assertEquals(changeRepeat, LISTENER.postEvent.getChangeRepeat());\n+        if (changeObject == NONE) {\n+            assertSame(null, LISTENER.postEvent.getChangeObject());\n+            assertEquals(0, LISTENER.postEvent.getChangeCollection().size());\n+        } else if (changeObject instanceof Collection) {\n+            assertSame(changeObject, LISTENER.postEvent.getChangeObject());\n+            assertSame(changeObject, LISTENER.postEvent.getChangeCollection());\n+        } else {\n+            assertSame(changeObject, LISTENER.postEvent.getChangeObject());\n+            assertEquals(1, LISTENER.postEvent.getChangeCollection().size());\n+            assertSame(changeObject, LISTENER.postEvent.getChangeCollection().iterator().next());\n+        }\n         assertSame(previous, LISTENER.postEvent.getPrevious());\n         assertEquals(preSize, LISTENER.postEvent.getPreSize());\n         assertEquals(postSize, LISTENER.postEvent.getPostSize());\n         assertEquals((view != null), LISTENER.postEvent.isView());\n         assertEquals(viewOffset, LISTENER.postEvent.getViewOffset());\n         assertSame(view, LISTENER.postEvent.getView());\n+        \n+        switch (type) {\n+            case ModificationEventType.ADD:\n+            case ModificationEventType.ADD_ALL:\n+            case ModificationEventType.ADD_ALL_INDEXED:\n+            case ModificationEventType.ADD_INDEXED:\n+            case ModificationEventType.ADD_ITERATED:\n+            case ModificationEventType.ADD_NCOPIES:\n+            assertEquals(true, LISTENER.preEvent.isTypeAdd());\n+            assertEquals(true, LISTENER.postEvent.isTypeAdd());\n+            break;\n+            default:\n+            assertEquals(false, LISTENER.preEvent.isTypeAdd());\n+            assertEquals(false, LISTENER.postEvent.isTypeAdd());\n+            break;\n+        }\n+        switch (type) {\n+            case ModificationEventType.REMOVE:\n+            case ModificationEventType.REMOVE_ALL:\n+            case ModificationEventType.REMOVE_INDEXED:\n+            case ModificationEventType.REMOVE_ITERATED:\n+            case ModificationEventType.REMOVE_NCOPIES:\n+            case ModificationEventType.REMOVE_NEXT:\n+            case ModificationEventType.RETAIN_ALL:\n+            case ModificationEventType.CLEAR:\n+            assertEquals(true, LISTENER.preEvent.isTypeReduce());\n+            assertEquals(true, LISTENER.postEvent.isTypeReduce());\n+            break;\n+            default:\n+            assertEquals(false, LISTENER.preEvent.isTypeReduce());\n+            assertEquals(false, LISTENER.postEvent.isTypeReduce());\n+            break;\n+        }\n+        switch (type) {\n+            case ModificationEventType.SET_INDEXED:\n+            case ModificationEventType.SET_ITERATED:\n+            assertEquals(true, LISTENER.preEvent.isTypeChange());\n+            assertEquals(true, LISTENER.postEvent.isTypeChange());\n+            break;\n+            default:\n+            assertEquals(false, LISTENER.preEvent.isTypeChange());\n+            assertEquals(false, LISTENER.postEvent.isTypeChange());\n+            break;\n+        }\n+        switch (type) {\n+            case ModificationEventType.ADD_ALL:\n+            case ModificationEventType.ADD_ALL_INDEXED:\n+            case ModificationEventType.REMOVE_ALL:\n+            case ModificationEventType.RETAIN_ALL:\n+            case ModificationEventType.CLEAR:\n+            assertEquals(true, LISTENER.preEvent.isTypeBulk());\n+            assertEquals(true, LISTENER.postEvent.isTypeBulk());\n+            break;\n+            default:\n+            assertEquals(false, LISTENER.preEvent.isTypeBulk());\n+            assertEquals(false, LISTENER.postEvent.isTypeBulk());\n+            break;\n+        }\n     }\n \n }", "timestamp": 1064664396, "metainfo": ""}