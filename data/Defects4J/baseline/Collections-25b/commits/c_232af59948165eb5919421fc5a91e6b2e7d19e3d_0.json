{"sha": "232af59948165eb5919421fc5a91e6b2e7d19e3d", "log": "Implement BoundedCollection, Add javadoc rfe 37473  ", "commit": "\n--- a/src/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n /*\n- *  Copyright 2005 The Apache Software Foundation\n+ *  Copyright 2005-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n package org.apache.commons.collections.buffer;\n \n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.BoundedCollection;\n import org.apache.commons.collections.Buffer;\n import org.apache.commons.collections.BufferOverflowException;\n import org.apache.commons.collections.BufferUnderflowException;\n import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n \n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.util.Collection;\n-import java.util.Iterator;\n-\n /**\n- * A wrapper class for buffers which makes them bounded.\n+ * Decorates another <code>Buffer</code> to ensure a fixed maximum size.\n+ * <p>\n+ * Note: This class should only be used if you need to add bounded\n+ * behaviour to another buffer. If you just want a bounded buffer then\n+ * you should use {@link BoundedFifoBuffer} or {@link CircularFifoBuffer}.\n+ * <p>\n+ * The decoration methods allow you to specify a timeout value, which\n+ * causes the add methods to wait for up to the specified wait period.\n  *\n  * @author James Carman\n- * @version $Revision: $ $Date: $\n+ * @author Stephen Colebourne\n+ * @version $Revision$ $Date$\n  * @since Commons Collections 3.2\n  */\n-public class BoundedBuffer extends SynchronizedBuffer {\n+public class BoundedBuffer extends SynchronizedBuffer implements BoundedCollection {\n \n     /** The serialization version. */\n     private static final long serialVersionUID = 1536432911093974264L;\n         }\n     }\n \n+    public boolean isFull() {\n+        return (collection.size() == maxSize());\n+    }\n+\n+    public int maxSize() {\n+        return maximumSize;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * BoundedBuffer iterator.\n--- a/src/test/org/apache/commons/collections/buffer/TestAll.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestAll.java\n /*\n- *  Copyright 2003-2004 The Apache Software Foundation\n+ *  Copyright 2003-2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         suite.addTest(TestUnboundedFifoBuffer.suite());\n         \n         suite.addTest(TestBlockingBuffer.suite());\n+        suite.addTest(TestBoundedBuffer.suite());\n         suite.addTest(TestPredicatedBuffer.suite());\n         suite.addTest(TestSynchronizedBuffer.suite());\n         suite.addTest(TestTransformedBuffer.suite());\n--- a/src/test/org/apache/commons/collections/buffer/TestBoundedBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestBoundedBuffer.java\n /*\n- *  Copyright 2005 The Apache Software Foundation\n+ *  Copyright 2005-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n package org.apache.commons.collections.buffer;\n \n import org.apache.commons.collections.AbstractTestObject;\n+import org.apache.commons.collections.BoundedCollection;\n import org.apache.commons.collections.Buffer;\n import org.apache.commons.collections.BufferOverflowException;\n \n import java.util.Collections;\n import java.util.Arrays;\n \n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n public class TestBoundedBuffer extends AbstractTestObject {\n \n     public TestBoundedBuffer(String testName) {\n         super(testName);\n     }\n \n+    public static Test suite() {\n+        return new TestSuite(TestBoundedBuffer.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestBoundedBuffer.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n     public String getCompatibilityVersion() {\n         return \"3.2\";\n     }\n \n     public Object makeObject() {\n         return BoundedBuffer.decorate(new UnboundedFifoBuffer(), 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMaxSize() {\n+        final Buffer bounded = BoundedBuffer.decorate(new UnboundedFifoBuffer(), 2, 500);\n+        BoundedCollection bc = (BoundedCollection) bounded;\n+        assertEquals(2, bc.maxSize());\n+        assertEquals(false, bc.isFull());\n+        bounded.add(\"A\");\n+        assertEquals(false, bc.isFull());\n+        bounded.add(\"B\");\n+        assertEquals(true, bc.isFull());\n+        bounded.remove();\n+        assertEquals(false, bc.isFull());\n     }\n \n     public void testAddToFullBufferNoTimeout() {", "timestamp": 1139870300, "metainfo": ""}