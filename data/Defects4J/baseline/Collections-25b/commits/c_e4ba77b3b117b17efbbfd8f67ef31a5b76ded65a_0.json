{"sha": "e4ba77b3b117b17efbbfd8f67ef31a5b76ded65a", "log": "PR: COLLECTIONS-331 Documented the requirement to use a comparator.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n+++ b/src/java/org/apache/commons/collections/comparators/ComparableComparator.java\n     private static final long serialVersionUID=-291439688585137865L;\n \n     /** The singleton instance. */\n+    @SuppressWarnings(\"rawtypes\")\n     public static final ComparableComparator<?> INSTANCE = new ComparableComparator();\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/collections/iterators/CollatingIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/CollatingIterator.java\n \n import org.apache.commons.collections.list.UnmodifiableList;\n \n+\n /**\n  * Provides an ordered iteration over the elements contained in a collection of\n  * ordered Iterators.\n     // Constructors\n     // ----------------------------------------------------------------------\n     /**\n-     * Constructs a new <code>CollatingIterator</code>. Natural sort order will\n-     * be used, and child iterators will have to be manually added using the\n+     * Constructs a new <code>CollatingIterator</code>. A comparator must be\n+     * set by calling {@link #setComparator(Comparator)} before invoking\n+     * {@link #hasNext()}, or {@link #next()} for the first time. Child\n+     * iterators will have to be manually added using the\n      * {@link #addIterator(Iterator)} method.\n      */\n     public CollatingIterator() {\n      * specified comparator for ordering. Child iterators will have to be\n      * manually added using the {@link #addIterator(Iterator)} method.\n      * \n-     * @param comp the comparator to use to sort, or null to use natural sort\n-     * order\n+     * @param comp the comparator to use to sort; must not be null,\n+     *   unless you'll be invoking {@link #setComparator(Comparator)}\n+     *   later on.\n      */\n     public CollatingIterator(final Comparator<? super E> comp) {\n         this(comp, 2);\n      * capacity. Child iterators will have to be manually added using the\n      * {@link #addIterator(Iterator)} method.\n      * \n-     * @param comp the comparator to use to sort, or null to use natural sort\n-     * order\n+     * @param comp the comparator to use to sort; must not be null,\n+     *   unless you'll be invoking {@link #setComparator(Comparator)}\n+     *   later on.\n      * @param initIterCapacity the initial capacity for the internal list of\n      * child iterators\n      */\n      * specified comparator to provide ordered iteration over the two given\n      * iterators.\n      * \n-     * @param comp the comparator to use to sort, or null to use natural sort\n-     * order\n+     * @param comp the comparator to use to sort; must not be null,\n+     *   unless you'll be invoking {@link #setComparator(Comparator)}\n+     *   later on.\n      * @param a the first child ordered iterator\n      * @param b the second child ordered iterator\n      * @throws NullPointerException if either iterator is null\n      * specified comparator to provide ordered iteration over the array of\n      * iterators.\n      * \n-     * @param comp the comparator to use to sort, or null to use natural sort\n-     * order\n+     * @param comp the comparator to use to sort; must not be null,\n+     *   unless you'll be invoking {@link #setComparator(Comparator)}\n+     *   later on.\n      * @param iterators the array of iterators\n      * @throws NullPointerException if iterators array is or contains null\n      */\n      * specified comparator to provide ordered iteration over the collection of\n      * iterators.\n      * \n-     * @param comp the comparator to use to sort, or null to use natural sort\n-     * order\n+     * @param comp the comparator to use to sort; must not be null,\n+     *   unless you'll be invoking {@link #setComparator(Comparator)}\n+     *   later on.\n      * @param iterators the collection of iterators\n      * @throws NullPointerException if the iterators collection is or contains\n      * null\n     }\n \n     /**\n-     * Sets the {@link Comparator} by which collation occurs.\n+     * Sets the {@link Comparator} by which collation occurs. If you\n+     * would like to use the natural sort order (or, in other words,\n+     * if the elements in the iterators are implementing the\n+     * {@link java.lang.Comparable} interface), then use the\n+     * {@link org.apache.commons.collections.comparators.ComparableComparator}.\n      * \n      * @throws IllegalStateException if iteration has started\n      */\n                     leastObject = values.get(i);\n                 } else {\n                     E curObject = values.get(i);\n+                    if (comparator == null) {\n+                        throw new NullPointerException(\"You must invoke setComparator() to set a compator first.\");\n+                    }\n                     if (comparator.compare(curObject, leastObject) < 0) {\n                         leastObject = curObject;\n                         leastIndex = i;\n--- a/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java\n package org.apache.commons.collections.iterators;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Comparator;\n+import java.util.List;\n \n import org.apache.commons.collections.comparators.ComparableComparator;\n \n         assertEquals(expectedSize, (evens.size() + odds.size()));\n     }\n \n+    public void testNullComparator() {\n+       List<Integer> l1 = Arrays.asList(1, 3, 5);\n+       List<Integer> l2 = Arrays.asList(2, 4, 6);\n+\n+       CollatingIterator<Integer> collatingIterator1 = new CollatingIterator<Integer>(null, l1.iterator(), l2.iterator());\n+       try {\n+           collatingIterator1.next();\n+       } catch (NullPointerException e) {\n+           assertTrue(e.getMessage().startsWith(\"You must invoke setComparator\"));\n+       }\n+\n+       int i = 0;\n+       CollatingIterator<Integer> collatingIterator2 = new CollatingIterator<Integer>(null, l1.iterator(), l2.iterator());\n+       collatingIterator2.setComparator(new ComparableComparator<Integer>());\n+       for ( ; collatingIterator2.hasNext(); i++ ) {\n+          Integer n = (Integer)collatingIterator2.next();\n+          assertEquals(\"wrong order\", (int)n, i + 1);\n+       }\n+       assertEquals(\"wrong size\", i, l1.size() + l2.size());\n+    }\n }\n ", "timestamp": 1299623509, "metainfo": ""}