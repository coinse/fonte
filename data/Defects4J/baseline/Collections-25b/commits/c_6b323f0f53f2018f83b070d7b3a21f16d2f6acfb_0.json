{"sha": "6b323f0f53f2018f83b070d7b3a21f16d2f6acfb", "log": "First review of MultiValuedMap: formatting, throw NullPointerException for null inputs.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/MultiMapUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/MultiMapUtils.java\n /**\n  * Provides utility methods and decorators for {@link MultiValuedMap} instances.\n  * <p>\n- * It contains various type safe and null safe methods.\n- * <p>\n- * It also provides the following decorators:\n- *\n+ * It contains various type safe and null safe methods. Additionally, it provides\n+ * the following decorators:\n  * <ul>\n  *   <li>{@link #unmodifiableMultiValuedMap(MultiValuedMap)}</li>\n  *   <li>{@link #transformedMultiValuedMap(MultiValuedMap, Transformer, Transformer)}</li>\n     /**\n      * <code>MultiMapUtils</code> should not normally be instantiated.\n      */\n-    private MultiMapUtils() {\n-    }\n+    private MultiMapUtils() {}\n \n     /**\n      * An empty {@link UnmodifiableMultiValuedMap}.\n     /**\n      * Returns immutable EMPTY_MULTI_VALUED_MAP with generic type safety.\n      *\n-     * @param <K> the type of key in the map\n-     * @param <V> the type of value in the map\n+     * @param <K>  the type of key in the map\n+     * @param <V>  the type of value in the map\n      * @return immutable and empty <code>MultiValuedMap</code>\n      */\n     @SuppressWarnings(\"unchecked\")\n      * Returns an immutable empty <code>MultiValuedMap</code> if the argument is\n      * <code>null</code>, or the argument itself otherwise.\n      *\n-     * @param <K> the type of key in the map\n-     * @param <V> the type of value in the map\n-     * @param map the map, possibly <code>null</code>\n-     * @return an empty <code>MultiValuedMap</code> if the argument is <code>null</code>\n+     * @param <K>  the type of key in the map\n+     * @param <V>  the type of value in the map\n+     * @param map  the map, may be null\n+     * @return an empty {@link MultiValuedMap} if the argument is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <K, V> MultiValuedMap<K, V> emptyIfNull(final MultiValuedMap<K, V> map) {\n     /**\n      * Null-safe check if the specified <code>MultiValuedMap</code> is empty.\n      * <p>\n-     * Null returns true.\n-     *\n-     * @param map the map to check, may be null\n-     * @return true if empty or null\n+     * If the provided map is null, returns true.\n+     *\n+     * @param map  the map to check, may be null\n+     * @return true if the map is empty or null\n      */\n     public static boolean isEmpty(final MultiValuedMap<?, ?> map) {\n         return map == null || map.isEmpty();\n     /**\n      * Gets a Collection from <code>MultiValuedMap</code> in a null-safe manner.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to use\n-     * @param key the key to look up\n-     * @return the Collection in the <code>MultiValuedMap</code>, <code>null</code> if map input is null\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the {@link MultiValuedMap} to use\n+     * @param key  the key to look up\n+     * @return the Collection in the {@link MultiValuedMap}, or null if input map is null\n      */\n     public static <K, V> Collection<V> getCollection(final MultiValuedMap<K, V> map, final K key) {\n         if (map != null) {\n         return null;\n     }\n \n+    // TODO: review the getValuesAsXXX methods - depending on the actual MultiValuedMap type, changes\n+    // to the returned collection might update the backing map. This should be clarified and/or prevented.\n+\n     /**\n      * Gets a List from <code>MultiValuedMap</code> in a null-safe manner.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to use\n-     * @param key the key to look up\n-     * @return the Collection in the <code>MultiValuedMap</code> as List,\n-     *         <code>null</code> if map input is null\n-     */\n-    public static <K, V> List<V> getList(MultiValuedMap<K, V> map, K key) {\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the {@link MultiValuedMap} to use\n+     * @param key  the key to look up\n+     * @return the Collection in the {@link MultiValuedMap} as List, or null if input map is null\n+     */\n+    public static <K, V> List<V> getValuesAsList(final MultiValuedMap<K, V> map, final K key) {\n         if (map != null) {\n             Collection<V> col = map.get(key);\n             if (col instanceof List) {\n     /**\n      * Gets a Set from <code>MultiValuedMap</code> in a null-safe manner.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to use\n-     * @param key the key to look up\n-     * @return the Collection in the <code>MultiValuedMap</code> as Set,\n-     *         <code>null</code> if map input is null\n-     */\n-    public static <K, V> Set<V> getSet(MultiValuedMap<K, V> map, K key) {\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the {@link MultiValuedMap} to use\n+     * @param key  the key to look up\n+     * @return the Collection in the {@link MultiValuedMap} as Set, or null if input map is null\n+     */\n+    public static <K, V> Set<V> getValuesAsSet(final MultiValuedMap<K, V> map, final K key) {\n         if (map != null) {\n             Collection<V> col = map.get(key);\n             if (col instanceof Set) {\n     /**\n      * Gets a Bag from <code>MultiValuedMap</code> in a null-safe manner.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to use\n-     * @param key the key to look up\n-     * @return the Collection in the <code>MultiValuedMap</code> as Bag,\n-     *         <code>null</code> if map input is null\n-     */\n-    public static <K, V> Bag<V> getBag(MultiValuedMap<K, V> map, K key) {\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the {@link MultiValuedMap} to use\n+     * @param key  the key to look up\n+     * @return the Collection in the {@link MultiValuedMap} as Bag, or null if input map is null\n+     */\n+    public static <K, V> Bag<V> getValuesAsBag(final MultiValuedMap<K, V> map, final K key) {\n         if (map != null) {\n             Collection<V> col = map.get(key);\n             if (col instanceof Bag) {\n     // -----------------------------------------------------------------------\n \n     /**\n-     * Creates a {@link ListValuedMap} with a {@link java.util.HashMap HashMap} as its internal storage.\n-     *\n-     * @param <K> the key type\n-     * @param <V> the value type\n+     * Creates a {@link ListValuedMap} with an {@link java.util.ArrayList ArrayList} as\n+     * collection class to store the values mapped to a key.\n+     *\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n      * @return a new <code>ListValuedMap</code>\n      */\n-    public static <K, V> ListValuedMap<K, V> createListValuedHashMap() {\n+    public static <K, V> ListValuedMap<K, V> newListValuedHashMap() {\n         return MultiValuedHashMap.<K, V>listValuedHashMap();\n     }\n \n      * Creates a {@link ListValuedMap} with a {@link java.util.HashMap HashMap} as its internal\n      * storage which maps the keys to list of type <code>listClass</code>.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param <C> the List class type\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param <C>  the List class type\n      * @param listClass the class of the list\n-     * @return a new <code>ListValuedMap</code>\n-     */\n-    public static <K, V, C extends List<V>> ListValuedMap<K, V> createListValuedHashMap(final Class<C> listClass) {\n+     * @return a new {@link ListValuedMap}\n+     */\n+    public static <K, V, C extends List<V>> ListValuedMap<K, V> newListValuedHashMap(final Class<C> listClass) {\n         return MultiValuedHashMap.<K, V, C>listValuedHashMap(listClass);\n     }\n \n     /**\n-     * Creates a {@link SetValuedMap} with a {@link java.util.HashMap HashMap} as its internal\n-     * storage\n-     *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @return a new <code>SetValuedMap</code>\n-     */\n-    public static <K, V> SetValuedMap<K, V> createSetValuedHashMap() {\n+     * Creates a {@link SetValuedMap} with an {@link java.util.HashSet HashSet} as\n+     * collection class to store the values mapped to a key.\n+     *\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @return a new {@link SetValuedMap}\n+     */\n+    public static <K, V> SetValuedMap<K, V> newSetValuedHashMap() {\n         return MultiValuedHashMap.<K, V>setValuedHashMap();\n     }\n \n      * Creates a {@link SetValuedMap} with a {@link java.util.HashMap HashMap} as its internal\n      * storage which maps the keys to a set of type <code>setClass</code>\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param <C> the Set class type\n-     * @param setClass the class of the set\n-     * @return a new <code>SetValuedMap</code>\n-     */\n-    public static <K, V, C extends Set<V>> SetValuedMap<K, V> createSetValuedHashMap(final Class<C> setClass) {\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param <C>  the Set class type\n+     * @param setClass  the class of the set\n+     * @return a new {@link SetValuedMap}\n+     */\n+    public static <K, V, C extends Set<V>> SetValuedMap<K, V> newSetValuedHashMap(final Class<C> setClass) {\n         return MultiValuedHashMap.<K, V, C>setValuedHashMap(setClass);\n     }\n \n      * Returns an <code>UnmodifiableMultiValuedMap</code> backed by the given\n      * map.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to make unmodifiable, must not\n-     *        be null\n-     * @return an <code>UnmodifiableMultiValuedMap</code> backed by the given\n-     *         map\n-     * @throws IllegalArgumentException if the map is null\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map  the {@link MultiValuedMap} to decorate, must not be null\n+     * @return an unmodifiable {@link MultiValuedMap} backed by the provided map\n+     * @throws IllegalArgumentException if map is null\n      */\n     public static <K, V> MultiValuedMap<K, V> unmodifiableMultiValuedMap(\n             final MultiValuedMap<? extends K, ? extends V> map) {\n      * If there are any elements already in the map being decorated, they are\n      * NOT transformed.\n      *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the <code>MultiValuedMap</code> to transform, must not be\n-     *        null, typically empty\n-     * @param keyTransformer the transformer for the map keys, null means no\n-     *        transformation\n-     * @param valueTransformer the transformer for the map values, null means no\n-     *        transformation\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param map the {@link MultiValuedMap} to transform, must not be null, typically empty\n+     * @param keyTransformer the transformer for the map keys, null means no transformation\n+     * @param valueTransformer the transformer for the map values, null means no transformation\n      * @return a transformed <code>MultiValuedMap</code> backed by the given map\n-     * @throws IllegalArgumentException if the <code>MultiValuedMap</code> is\n-     *         null\n+     * @throws IllegalArgumentException if map is null\n      */\n     public static <K, V> MultiValuedMap<K, V> transformedMultiValuedMap(final MultiValuedMap<K, V> map,\n             final Transformer<? super K, ? extends K> keyTransformer,\n--- a/src/main/java/org/apache/commons/collections4/multimap/AbstractListValuedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/AbstractListValuedMap.java\n      * @param <C> the list type\n      * @param map the map to wrap, must not be null\n      * @param listClazz the collection class\n-     * @throws IllegalArgumentException if the map is null\n-     */\n-    protected <C extends List<V>> AbstractListValuedMap(Map<K, ? super C> map, Class<C> listClazz) {\n+     * @throws NullPointerException if the map is null\n+     */\n+    protected <C extends List<V>> AbstractListValuedMap(final Map<K, ? super C> map, Class<C> listClazz) {\n         super(map, listClazz);\n     }\n \n      * @param map the map to wrap, must not be null\n      * @param listClazz the collection class\n      * @param initialListCapacity the initial size of the values list\n-     * @throws IllegalArgumentException if the map is null or if\n-     *         initialListCapacity is negative\n-     */\n-    protected <C extends List<V>> AbstractListValuedMap(Map<K, ? super C> map, Class<C> listClazz,\n-            int initialListCapacity) {\n+     * @throws NullPointerException if the map is null\n+     * @throws IllegalArgumentException if initialListCapacity is negative\n+     */\n+    protected <C extends List<V>> AbstractListValuedMap(final Map<K, ? super C> map, Class<C> listClazz,\n+                                                        final int initialListCapacity) {\n         super(map, listClazz, initialListCapacity);\n     }\n \n      * return an empty list in case the mapping is not present\n      *\n      * @param key the key to retrieve\n-     * @return the <code>List</code> of values, will return an empty\n-     *         <code>List</code> for no mapping\n+     * @return the <code>List</code> of values, will return an empty {@link List} for no mapping\n      * @throws ClassCastException if the key is of an invalid type\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java\n      * @param <C>  the collection type\n      * @param map  the map to wrap, must not be null\n      * @param collectionClazz  the collection class\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      */\n     @SuppressWarnings(\"unchecked\")\n     protected <C extends Collection<V>> AbstractMultiValuedMap(final Map<K, ? super C> map,\n                                                                final Class<C> collectionClazz) {\n         if (map == null) {\n-            throw new IllegalArgumentException(\"Map must not be null\");\n+            throw new NullPointerException(\"Map must not be null.\");\n         }\n         this.map = (Map<K, Collection<V>>) map;\n         this.collectionFactory = new InstantiateFactory<C>(collectionClazz);\n      * @param map the map to wrap, must not be null\n      * @param collectionClazz the collection class\n      * @param initialCollectionCapacity the initial capacity of the collection\n-     * @throws IllegalArgumentException if the map is null or if\n-     *         initialCollectionCapacity is negative\n+     * @throws NullPointerException if the map is null\n+     * @throws IllegalArgumentException if initialCollectionCapacity is negative\n      */\n     @SuppressWarnings(\"unchecked\")\n     protected <C extends Collection<V>> AbstractMultiValuedMap(final Map<K, ? super C> map,\n             final Class<C> collectionClazz, final int initialCollectionCapacity) {\n         if (map == null) {\n-            throw new IllegalArgumentException(\"Map must not be null\");\n+            throw new NullPointerException(\"Map must not be null.\");\n         }\n         if (initialCollectionCapacity < 0) {\n             throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCollectionCapacity);\n--- a/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMapDecorator.java\n /**\n  * Decorates another <code>MultiValuedMap</code> to provide additional behaviour.\n  * <p>\n- * Each method call made on this <code>MultiValuedMap</code> is forwarded to the decorated <code>MultiValuedMap</code>.\n- * This class is used as a framework to build to extensions such as synchronized and unmodifiable behaviour.\n+ * Each method call made on this <code>MultiValuedMap</code> is forwarded to the\n+ * decorated <code>MultiValuedMap</code>. This class is used as a framework to build\n+ * to extensions such as synchronized and unmodifiable behaviour.\n  *\n  * @param <K> the type of key elements\n  * @param <V> the type of value elements\n      * Constructor that wraps (not copies).\n      *\n      * @param map the map to decorate, must not be null\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      */\n     protected AbstractMultiValuedMapDecorator(final MultiValuedMap<K, V> map) {\n         if (map == null) {\n-            throw new IllegalArgumentException(\n-                    \"MultiValuedMap must not be null\");\n+            throw new NullPointerException(\"MultiValuedMap must not be null.\");\n         }\n         this.map = map;\n     }\n--- a/src/main/java/org/apache/commons/collections4/multimap/AbstractSetValuedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/AbstractSetValuedMap.java\n      * @param <C> the set type\n      * @param map the map to wrap, must not be null\n      * @param setClazz the collection class\n-     * @throws IllegalArgumentException if the map is null\n+     * @throws NullPointerException if the map is null\n      */\n     protected <C extends Set<V>> AbstractSetValuedMap(Map<K, ? super C> map, Class<C> setClazz) {\n         super(map, setClazz);\n      * @param map the map to wrap, must not be null\n      * @param setClazz the collection class\n      * @param initialSetCapacity the initial size of the values set\n-     * @throws IllegalArgumentException if the map is null or if\n-     *         initialSetCapacity is negative\n+     * @throws NullPointerException if the map is null\n+     * @throws IllegalArgumentException if initialSetCapacity is negative\n      */\n     protected <C extends Set<V>> AbstractSetValuedMap(Map<K, ? super C> map, Class<C> setClazz,\n             int initialSetCapacity) {\n--- a/src/main/java/org/apache/commons/collections4/multimap/MultiValuedHashMap.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/MultiValuedHashMap.java\n      *\n      * @param initialCapacity the initial capacity of the underlying hash map\n      * @param loadFactor the load factor of the underlying hash map\n-     * @param initialCollectionCapacity the initial capacity of the Collection\n-     *        of values\n+     * @param initialCollectionCapacity the initial capacity of the Collection of values\n      */\n     @SuppressWarnings(\"unchecked\")\n     public MultiValuedHashMap(int initialCapacity, float loadFactor, int initialCollectionCapacity) {\n \n     /**\n      * Creates a MultiValuedHashMap which creates the value collections using\n-     * the supplied <code>collectionClazz</code> and the initial collection\n-     * capacity .\n-     *\n-     * @param initialCapacity the initial capacity of the underlying\n-     *        <code>HashMap</code>\n+     * the supplied <code>collectionClazz</code> and the initial collection capacity.\n+     *\n+     * @param <C> the collection type\n+     * @param initialCapacity the initial capacity of the underlying <code>HashMap</code>\n      * @param loadFactor the load factor of the underlying <code>HashMap</code>\n-     * @param initialCollectionCapacity the initial capacity of the\n-     *        <code>Collection</code>\n-     * @param <C> the collection type\n-     * @param collectionClazz the class of the <code>Collection</code> to use to\n-     *        create the value collections\n+     * @param initialCollectionCapacity the initial capacity of the <code>Collection</code>\n+     * @param collectionClazz the class of the <code>Collection</code> to use to create the value collections\n      */\n     protected <C extends Collection<V>> MultiValuedHashMap(int initialCapacity, float loadFactor,\n             final Class<C> collectionClazz, int initialCollectionCapacity) {\n--- a/src/main/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/UnmodifiableMultiValuedMap.java\n      * @throws IllegalArgumentException if map is null\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <K, V> UnmodifiableMultiValuedMap<K, V>\n-            unmodifiableMultiValuedMap(MultiValuedMap<? extends K, ? extends V> map) {\n+    public static <K, V> UnmodifiableMultiValuedMap<K, V> unmodifiableMultiValuedMap(\n+            MultiValuedMap<? extends K, ? extends V> map) {\n         if (map instanceof Unmodifiable) {\n             return (UnmodifiableMultiValuedMap<K, V>) map;\n         }\n--- a/src/main/java/org/apache/commons/collections4/multimap/package-info.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/package-info.java\n  * The following implementations are provided in the package:\n  * <ul>\n  *   <li>MultiValuedHashMap - implementation that uses a HashMap to store the data\n- *   <li>MultiValuedLinkedHashMap - implementation that uses a LinkedHashMap as backing map\n  * </ul>\n  * <p>\n  * The following decorators are provided in the package:", "timestamp": 1433197642, "metainfo": ""}