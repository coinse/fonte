{"sha": "dcb64284ef6baed186379189d030e43f87982d6a", "log": "Renamed unit tests for set package.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections/collection/AbstractCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections/collection/AbstractCollectionTest.java\n  * that's compatible with your collection implementation.\n  * <p>\n  * If you're extending {@link org.apache.commons.collections.list.AbstractListTest AbstractListTest},\n- * {@link org.apache.commons.collections.set.AbstractTestSet AbstractTestSet},\n+ * {@link org.apache.commons.collections.set.AbstractSetTest AbstractTestSet},\n  * or {@link org.apache.commons.collections.bag.AbstractBagTest AbstractBagTest}, \n  * you probably don't have to worry about the\n  * above methods, because those three classes already override the methods\n--- a/src/test/java/org/apache/commons/collections/map/AbstractTestMap.java\n+++ b/src/test/java/org/apache/commons/collections/map/AbstractTestMap.java\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.commons.collections.collection.AbstractCollectionTest;\n import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n-import org.apache.commons.collections.set.AbstractTestSet;\n+import org.apache.commons.collections.set.AbstractSetTest;\n \n /**\n  * Abstract test class for {@link java.util.Map} methods and contracts.\n  * {@link #verify} method calls separate methods to verify the map and its three\n  * collection views ({@link #verifyMap}, {@link #verifyEntrySet},\n  * {@link #verifyKeySet}, and {@link #verifyValues}).  You may want to override\n- * one of the verification methodsto perform additional verifications.  For\n+ * one of the verification methods to perform additional verifications.  For\n  * instance, TestDoubleOrderedMap would want override its\n  * {@link #verifyValues()} method to verify that the values are unique and in\n  * ascending order.<P>\n \n     /**\n      * Bulk test {@link Map#entrySet()}.  This method runs through all of\n-     * the tests in {@link AbstractTestSet}.\n+     * the tests in {@link AbstractSetTest}.\n      * After modification operations, {@link #verify()} is invoked to ensure\n      * that the map and the other collection views are still valid.\n      *\n-     * @return a {@link AbstractTestSet} instance for testing the map's entry set\n+     * @return a {@link AbstractSetTest} instance for testing the map's entry set\n      */\n     public BulkTest bulkTestMapEntrySet() {\n         return new TestMapEntrySet();\n     }\n \n-    public class TestMapEntrySet extends AbstractTestSet<Map.Entry<K, V>> {\n+    public class TestMapEntrySet extends AbstractSetTest<Map.Entry<K, V>> {\n         public TestMapEntrySet() {\n             super(\"MapEntrySet\");\n         }\n \n     /**\n      * Bulk test {@link Map#keySet()}.  This method runs through all of\n-     * the tests in {@link AbstractTestSet}.\n+     * the tests in {@link AbstractSetTest}.\n      * After modification operations, {@link #verify()} is invoked to ensure\n      * that the map and the other collection views are still valid.\n      *\n-     * @return a {@link AbstractTestSet} instance for testing the map's key set\n+     * @return a {@link AbstractSetTest} instance for testing the map's key set\n      */\n     public BulkTest bulkTestMapKeySet() {\n         return new TestMapKeySet();\n     }\n \n-    public class TestMapKeySet extends AbstractTestSet<K> {\n+    public class TestMapKeySet extends AbstractSetTest<K> {\n         public TestMapKeySet() {\n             super(\"\");\n         }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/AbstractSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.collection.AbstractCollectionTest;\n+\n+/**\n+ * Abstract test class for {@link Set} methods and contracts.\n+ * <p>\n+ * Since {@link Set} doesn't stipulate much new behavior that isn't already\n+ * found in {@link Collection}, this class basically just adds tests for\n+ * {@link Set#equals} and {@link Set#hashCode()} along with an updated\n+ * {@link #verify()} that ensures elements do not appear more than once in the\n+ * set.\n+ * <p>\n+ * To use, subclass and override the {@link #makeObject()}\n+ * method.  You may have to override other protected methods if your\n+ * set is not modifiable, or if your set restricts what kinds of\n+ * elements may be added; see {@link AbstractCollectionTest} for more details.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractSetTest<E> extends AbstractCollectionTest<E> {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param name  name for test\n+     */\n+    public AbstractSetTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Provides additional verifications for sets.\n+     */\n+    @Override\n+    public void verify() {\n+        super.verify();\n+        \n+        assertEquals(\"Sets should be equal\", getConfirmed(), getCollection());\n+        assertEquals(\"Sets should have equal hashCodes\", \n+                     getConfirmed().hashCode(), getCollection().hashCode());\n+        Collection<E> set = makeConfirmedCollection();\n+        Iterator<E> iterator = getCollection().iterator();\n+        while (iterator.hasNext()) {\n+            assertTrue(\"Set.iterator should only return unique elements\", set.add(iterator.next()));\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Set equals method is defined.\n+     */\n+    @Override\n+    public boolean isEqualsCheckable() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns an empty Set for use in modification testing.\n+     *\n+     * @return a confirmed empty collection\n+     */\n+    @Override\n+    public Collection<E> makeConfirmedCollection() {\n+        return new HashSet<E>();\n+    }\n+\n+    /**\n+     * Returns a full Set for use in modification testing.\n+     *\n+     * @return a confirmed full collection\n+     */\n+    @Override\n+    public Collection<E> makeConfirmedFullCollection() {\n+        Collection<E> set = makeConfirmedCollection();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+\n+    /**\n+     * Makes an empty set.  The returned set should have no elements.\n+     *\n+     * @return an empty set\n+     */\n+    @Override\n+    public abstract Set<E> makeObject();\n+\n+    /**\n+     * Makes a full set by first creating an empty set and then adding\n+     * all the elements returned by {@link #getFullElements()}.\n+     *\n+     * Override if your set does not support the add operation.\n+     *\n+     * @return a full set\n+     */\n+    @Override\n+    public Set<E> makeFullCollection() {\n+        Set<E> set = makeObject();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Return the {@link AbstractCollectionTest#collection} fixture, but cast as a Set.  \n+     */\n+    @Override\n+    public Set<E> getCollection() {\n+        return (Set<E>) super.getCollection();\n+    }\n+\n+    /**\n+     * Return the {@link AbstractCollectionTest#confirmed} fixture, but cast as a Set.\n+     */\n+    @Override\n+    public Set<E> getConfirmed() {\n+        return (Set<E>) super.getConfirmed();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests {@link Set#equals(Object)}.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSetEquals() {\n+        resetEmpty();\n+        assertEquals(\"Empty sets should be equal\", getCollection(), getConfirmed());\n+        verify();\n+\n+        Collection<E> set2 = makeConfirmedCollection();\n+        set2.add((E) \"foo\");\n+        assertTrue(\"Empty set shouldn't equal nonempty set\", !getCollection().equals(set2));\n+\n+        resetFull();\n+        assertEquals(\"Full sets should be equal\", getCollection(), getConfirmed());\n+        verify();\n+\n+        set2.clear();\n+        set2.addAll(Arrays.asList(getOtherElements()));\n+        assertTrue(\"Sets with different contents shouldn't be equal\", !getCollection().equals(set2));\n+    }\n+\n+    /**\n+     * Tests {@link Set#hashCode()}.\n+     */\n+    public void testSetHashCode() {\n+        resetEmpty();\n+        assertEquals(\"Empty sets have equal hashCodes\", \n+                getCollection().hashCode(), getConfirmed().hashCode());\n+\n+        resetFull();\n+        assertEquals(\"Equal sets have equal hashCodes\", \n+                getCollection().hashCode(), getConfirmed().hashCode());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/AbstractSortedSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Iterator;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Abstract test class for {@link SortedSet} methods and contracts.\n+ * <p>\n+ * To use, subclass and override the {@link #makeObject()}\n+ * method.  You may have to override other protected methods if your\n+ * set is not modifiable, or if your set restricts what kinds of\n+ * elements may be added; see {@link AbstractSetTest} for more details.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractSortedSetTest<E> extends AbstractSetTest<E> {\n+\n+    /**\n+     * JUnit constructor.\n+     *\n+     * @param name  name for test\n+     */\n+    public AbstractSortedSetTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Verification extension, will check the order of elements,\n+     * the sets should already be verified equal.\n+     */\n+    @Override\n+    public void verify() {\n+        super.verify();\n+        \n+        // Check that iterator returns elements in order and first() and last()\n+        // are consistent\n+        Iterator<E> colliter = getCollection().iterator();\n+        Iterator<E> confiter = getConfirmed().iterator();\n+        E first = null;\n+        E last = null;\n+        while (colliter.hasNext()) {\n+            if (first == null) {\n+                first = colliter.next();\n+                last = first;\n+            } else {\n+              last = colliter.next();\n+            }  \n+            assertEquals(\"Element appears to be out of order.\", last, confiter.next());\n+        }\n+        if (getCollection().size() > 0) {\n+            assertEquals(\"Incorrect element returned by first().\", first,\n+                getCollection().first());\n+            assertEquals(\"Incorrect element returned by last().\", last,\n+                getCollection().last());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Overridden because SortedSets don't allow null elements (normally).\n+     * @return false\n+     */\n+    @Override\n+    public boolean isNullSupported() {\n+        return false;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public abstract SortedSet<E> makeObject();\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public SortedSet<E> makeFullCollection() {\n+        return (SortedSet<E>) super.makeFullCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an empty {@link TreeSet} for use in modification testing.\n+     *\n+     * @return a confirmed empty collection\n+     */\n+    @Override\n+    public SortedSet<E> makeConfirmedCollection() {\n+        return new TreeSet<E>();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public E[] getFullNonNullElements() {\n+        Object[] elements = new Object[30];\n+\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = new Integer(i + i + 1);\n+        }\n+        return (E[]) elements;\n+    }\n+\n+    /**\n+     * Override to return comparable objects.\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public E[] getOtherNonNullElements() {\n+        Object[] elements = new Object[30];\n+        for (int i = 0; i < 30; i++) {\n+            elements[i] = new Integer(i + i + 2);\n+        }\n+        return (E[]) elements;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Bulk test {@link SortedSet#subSet(Object, Object)}.  This method runs through all of\n+     * the tests in {@link AbstractSortedSetTest}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the set and the other collection views are still valid.\n+     *\n+     * @return a {@link AbstractSetTest} instance for testing a subset.\n+     */\n+    public BulkTest bulkTestSortedSetSubSet() {\n+        int length = getFullElements().length;\n+\n+        int lobound = length / 3;\n+        int hibound = lobound * 2;\n+        return new TestSortedSetSubSet(lobound, hibound);\n+\n+    }\n+\n+    /**\n+     * Bulk test {@link SortedSet#headSet(Object)}.  This method runs through all of\n+     * the tests in {@link AbstractSortedSetTest}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the set and the other collection views are still valid.\n+     *\n+     * @return a {@link AbstractSetTest} instance for testing a headset.\n+     */\n+    public BulkTest bulkTestSortedSetHeadSet() {\n+        int length = getFullElements().length;\n+\n+        int lobound = length / 3;\n+        int hibound = lobound * 2;\n+        return new TestSortedSetSubSet(hibound, true);\n+\n+    }\n+\n+    /**\n+     * Bulk test {@link SortedSet#tailSet(Object)}.  This method runs through all of\n+     * the tests in {@link AbstractSortedSetTest}.\n+     * After modification operations, {@link #verify()} is invoked to ensure\n+     * that the set and the other collection views are still valid.\n+     *\n+     * @return a {@link AbstractSetTest} instance for testing a tailset.\n+     */\n+    public BulkTest bulkTestSortedSetTailSet() {\n+        int length = getFullElements().length;\n+        int lobound = length / 3;\n+        return new TestSortedSetSubSet(lobound, false);\n+    }\n+\n+    public class TestSortedSetSubSet extends AbstractSortedSetTest<E> {\n+\n+        private int m_Type;\n+        private int m_LowBound;\n+        private int m_HighBound;\n+        private E[] m_FullElements;\n+        private E[] m_OtherElements;\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public TestSortedSetSubSet(int bound, boolean head) {\n+            super(\"TestSortedSetSubSet\");\n+            if (head) {\n+                //System.out.println(\"HEADSET\");\n+                m_Type = TYPE_HEADSET;\n+                m_HighBound = bound;\n+                m_FullElements = (E[]) new Object[bound];\n+                System.arraycopy(AbstractSortedSetTest.this.getFullElements(), 0, m_FullElements, 0, bound);\n+                m_OtherElements = (E[]) new Object[bound - 1];\n+                System.arraycopy(//src src_pos dst dst_pos length\n+                AbstractSortedSetTest.this.getOtherElements(), 0, m_OtherElements, 0, bound - 1);\n+                //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+                //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+            } else {\n+                //System.out.println(\"TAILSET\");\n+                m_Type = TYPE_TAILSET;\n+                m_LowBound = bound;\n+                Object[] allelements = AbstractSortedSetTest.this.getFullElements();\n+                //System.out.println(\"bound = \"+bound +\"::length=\"+allelements.length);\n+                m_FullElements = (E[]) new Object[allelements.length - bound];\n+                System.arraycopy(allelements, bound, m_FullElements, 0, allelements.length - bound);\n+                m_OtherElements = (E[]) new Object[allelements.length - bound - 1];\n+                System.arraycopy(//src src_pos dst dst_pos length\n+                AbstractSortedSetTest.this.getOtherElements(), bound, m_OtherElements, 0, allelements.length - bound - 1);\n+                //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+                //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+                //resetFull();\n+                //System.out.println(collection);\n+                //System.out.println(confirmed);\n+\n+            }\n+\n+        } //type\n+\n+        @SuppressWarnings(\"unchecked\")\n+        public TestSortedSetSubSet(int lobound, int hibound) {\n+            super(\"TestSortedSetSubSet\");\n+            //System.out.println(\"SUBSET\");\n+            m_Type = TYPE_SUBSET;\n+            m_LowBound = lobound;\n+            m_HighBound = hibound;\n+            int length = hibound - lobound;\n+            //System.out.println(\"Low=\" + lobound + \"::High=\" + hibound + \"::Length=\" + length);\n+            m_FullElements = (E[]) new Object[length];\n+            System.arraycopy(AbstractSortedSetTest.this.getFullElements(), lobound, m_FullElements, 0, length);\n+            m_OtherElements = (E[]) new Object[length - 1];\n+            System.arraycopy(//src src_pos dst dst_pos length\n+            AbstractSortedSetTest.this.getOtherElements(), lobound, m_OtherElements, 0, length - 1);\n+\n+            //System.out.println(new TreeSet(Arrays.asList(m_FullElements)));\n+            //System.out.println(new TreeSet(Arrays.asList(m_OtherElements)));\n+\n+        }\n+\n+        @Override\n+        public boolean isNullSupported() {\n+            return AbstractSortedSetTest.this.isNullSupported();\n+        }\n+        @Override\n+        public boolean isAddSupported() {\n+            return AbstractSortedSetTest.this.isAddSupported();\n+        }\n+        @Override\n+        public boolean isRemoveSupported() {\n+            return AbstractSortedSetTest.this.isRemoveSupported();\n+        }\n+        @Override\n+        public boolean isFailFastSupported() {\n+            return AbstractSortedSetTest.this.isFailFastSupported();\n+        }\n+\n+        @Override\n+        public E[] getFullElements() {\n+            return m_FullElements;\n+        }\n+        @Override\n+        public E[] getOtherElements() {\n+            return m_OtherElements;\n+        }\n+\n+        private SortedSet<E> getSubSet(SortedSet<E> set) {\n+            E[] elements = AbstractSortedSetTest.this.getFullElements();\n+            switch (m_Type) {\n+                case TYPE_SUBSET :\n+                    return set.subSet(elements[m_LowBound], elements[m_HighBound]);\n+                case TYPE_HEADSET :\n+                    return set.headSet(elements[m_HighBound]);\n+                case TYPE_TAILSET :\n+                    return set.tailSet(elements[m_LowBound]);\n+                default :\n+                    return null;\n+            }\n+        }\n+\n+        @Override\n+        public SortedSet<E> makeObject() {\n+            return getSubSet(AbstractSortedSetTest.this.makeObject());\n+        }\n+\n+        @Override\n+        public SortedSet<E> makeFullCollection() {\n+            return getSubSet(AbstractSortedSetTest.this.makeFullCollection());\n+        }\n+        \n+        @Override\n+        public boolean isTestSerialization() {\n+            return false;\n+        }\n+        \n+        @Override\n+        public BulkTest bulkTestSortedSetSubSet() {\n+            return null;  // prevent infinite recursion\n+        }\n+        @Override\n+        public BulkTest bulkTestSortedSetHeadSet() {\n+            return null;  // prevent infinite recursion\n+        }\n+        @Override\n+        public BulkTest bulkTestSortedSetTailSet() {\n+            return null;  // prevent infinite recursion\n+        }\n+\n+        static final int TYPE_SUBSET = 0;\n+        static final int TYPE_TAILSET = 1;\n+        static final int TYPE_HEADSET = 2;\n+\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public SortedSet<E> getCollection() {\n+        return (SortedSet<E>) super.getCollection();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public SortedSet<E> getConfirmed() {\n+        return (SortedSet<E>) super.getConfirmed();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/CompositeSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.collection.CompositeCollection;\n+\n+/**\n+ * Extension of {@link AbstractSetTest} for exercising the\n+ * {@link CompositeSet} implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class CompositeSetTest<E> extends AbstractSetTest<E> {\n+    public CompositeSetTest(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    public CompositeSet<E> makeObject() {\n+        final HashSet<E> contained = new HashSet<E>();\n+        CompositeSet<E> set = new CompositeSet<E>(contained);\n+        set.setMutator( new EmptySetMutator<E>(contained) );\n+        return set;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Set<E> buildOne() {\n+        HashSet<E> set = new HashSet<E>();\n+        set.add((E) \"1\");\n+        set.add((E) \"2\");\n+        return set;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public Set<E> buildTwo() {\n+        HashSet<E> set = new HashSet<E>();\n+        set.add((E) \"3\");\n+        set.add((E) \"4\");\n+        return set;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testContains() {\n+        CompositeSet<E> set = new CompositeSet<E>(new Set[]{ buildOne(), buildTwo() });\n+        assertTrue(set.contains(\"1\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveUnderlying() {\n+        Set<E> one = buildOne();\n+        Set<E> two = buildTwo();\n+        CompositeSet<E> set = new CompositeSet<E>(new Set[] { one, two });\n+        one.remove(\"1\");\n+        assertFalse(set.contains(\"1\"));\n+\n+        two.remove(\"3\");\n+        assertFalse(set.contains(\"3\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveComposited() {\n+        Set<E> one = buildOne();\n+        Set<E> two = buildTwo();\n+        CompositeSet<E> set = new CompositeSet<E>(new Set[] { one, two });\n+        set.remove(\"1\");\n+        assertFalse(one.contains(\"1\"));\n+\n+        set.remove(\"3\");\n+        assertFalse(one.contains(\"3\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testFailedCollisionResolution() {\n+        Set<E> one = buildOne();\n+        Set<E> two = buildTwo();\n+        CompositeSet<E> set = new CompositeSet<E>(new Set[] { one, two });\n+        set.setMutator(new CompositeSet.SetMutator<E>() {\n+            private static final long serialVersionUID = 1L;\n+\n+            public void resolveCollision(CompositeSet<E> comp, Set<E> existing,\n+                Set<E> added, Collection<E> intersects) {\n+                //noop\n+            }\n+\n+            public boolean add(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, E obj) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            public boolean addAll(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, Collection<? extends E> coll) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            public boolean remove(CompositeCollection<E> composite,\n+                    List<Collection<E>> collections, Object obj) {\n+                throw new UnsupportedOperationException();\n+            }\n+        });\n+\n+        HashSet<E> three = new HashSet<E>();\n+        three.add((E) \"1\");\n+        try {\n+            set.addComposited(three);\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        }\n+        catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testAddComposited() {\n+        Set<E> one = buildOne();\n+        Set<E> two = buildTwo();\n+        CompositeSet<E> set = new CompositeSet<E>();\n+        set.addComposited(one, two);\n+        CompositeSet<E> set2 = new CompositeSet<E>(buildOne());\n+        set2.addComposited(buildTwo());\n+        assertTrue(set.equals(set2));\n+        HashSet<E> set3 = new HashSet<E>();\n+        set3.add((E) \"1\");\n+        set3.add((E) \"2\");\n+        set3.add((E) \"3\");\n+        HashSet<E> set4 = new HashSet<E>();\n+        set4.add((E) \"4\");\n+        CompositeSet<E> set5 = new CompositeSet<E>(set3);\n+        set5.addComposited(set4);\n+        assertTrue(set.equals(set5));\n+        try {\n+            set.addComposited(set3);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException ex) {\n+            // expected\n+        }\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.3\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"/tmp/CompositeSet.emptyCollection.version3.3.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"/tmp/CompositeSet.fullCollection.version3.3.obj\");\n+//    }\n+\n+}\n--- a/src/test/java/org/apache/commons/collections/set/EmptySetMutator.java\n+++ b/src/test/java/org/apache/commons/collections/set/EmptySetMutator.java\n import org.apache.commons.collections.collection.CompositeCollection;\n \n /**\n- * This class is used in TestCompositeSet. When testing serialization, \n- * the class has to be separate of TestCompositeSet, else the test \n+ * This class is used in CompositeSetTest. When testing serialization, \n+ * the class has to be separate of CompositeSetTest, else the test \n  * class also has to be serialized. \n  */\n class EmptySetMutator<E> implements CompositeSet.SetMutator<E> {\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/ListOrderedSet2Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Extension of {@link AbstractSetTest} for exercising the {@link ListOrderedSet}\n+ * implementation.\n+ *\n+ * @since 3.1\n+ * @version $Id$\n+ */\n+public class ListOrderedSet2Test<E> extends AbstractSetTest<E> {\n+\n+    private static final Integer ZERO = new Integer(0);\n+    private static final Integer ONE = new Integer(1);\n+    private static final Integer TWO = new Integer(2);\n+    private static final Integer THREE = new Integer(3);\n+\n+    public ListOrderedSet2Test(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public ListOrderedSet<E> makeObject() {\n+        return new ListOrderedSet<E>();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected ListOrderedSet<E> setupSet() {\n+        ListOrderedSet<E> set = makeObject();\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add((E) Integer.toString(i));\n+        }\n+        return set;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testOrdering() {\n+        ListOrderedSet<E> set = setupSet();\n+        Iterator<E> it = set.iterator();\n+\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i += 2) {\n+            assertTrue(\"Must be able to remove int\", set.remove(Integer.toString(i)));\n+        }\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong after remove \", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add((E) Integer.toString(i));\n+        }\n+\n+        assertEquals(\"Size of set is wrong!\", 10, set.size());\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+        for (int i = 0; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListAddRemove() {\n+        ListOrderedSet<E> set = makeObject();\n+        List<E> view = set.asList();\n+        set.add((E) ZERO);\n+        set.add((E) ONE);\n+        set.add((E) TWO);\n+\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        assertEquals(3, view.size());\n+        assertSame(ZERO, view.get(0));\n+        assertSame(ONE, view.get(1));\n+        assertSame(TWO, view.get(2));\n+\n+        assertEquals(0, set.indexOf(ZERO));\n+        assertEquals(1, set.indexOf(ONE));\n+        assertEquals(2, set.indexOf(TWO));\n+\n+        set.remove(1);\n+        assertEquals(2, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(TWO, set.get(1));\n+        assertEquals(2, view.size());\n+        assertSame(ZERO, view.get(0));\n+        assertSame(TWO, view.get(1));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListAddIndexed() {\n+        ListOrderedSet<E> set = makeObject();\n+        set.add((E) ZERO);\n+        set.add((E) TWO);\n+\n+        set.add(1, (E) ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+\n+        set.add(0, (E) ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+\n+        List<E> list = new ArrayList<E>();\n+        list.add((E) ZERO);\n+        list.add((E) TWO);\n+\n+        set.addAll(0, list);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+\n+        list.add(0, (E) THREE); // list = [3,0,2]\n+        set.remove(TWO);    //  set = [0,1]\n+        set.addAll(1, list);\n+        assertEquals(4, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(THREE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        assertSame(ONE, set.get(3));\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/ListOrderedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/ListOrderedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/ListOrderedSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Extension of {@link AbstractSetTest} for exercising the {@link ListOrderedSet}\n+ * implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class ListOrderedSetTest<E> extends AbstractSetTest<E> {\n+\n+    private static final Integer ZERO = new Integer(0);\n+    private static final Integer ONE = new Integer(1);\n+    private static final Integer TWO = new Integer(2);\n+    private static final Integer THREE = new Integer(3);\n+\n+    public ListOrderedSetTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public ListOrderedSet<E> makeObject() {\n+        return ListOrderedSet.listOrderedSet(new HashSet<E>());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected ListOrderedSet<E> setupSet() {\n+        ListOrderedSet<E> set = makeObject();\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add((E) Integer.toString(i));\n+        }\n+        return set;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testOrdering() {\n+        ListOrderedSet<E> set = setupSet();\n+        Iterator<E> it = set.iterator();\n+\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i += 2) {\n+            assertTrue(\"Must be able to remove int\", set.remove(Integer.toString(i)));\n+        }\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong after remove \", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add((E) Integer.toString(i));\n+        }\n+\n+        assertEquals(\"Size of set is wrong!\", 10, set.size());\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+        for (int i = 0; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListAddRemove() {\n+        ListOrderedSet<E> set = makeObject();\n+        List<E> view = set.asList();\n+        set.add((E) ZERO);\n+        set.add((E) ONE);\n+        set.add((E) TWO);\n+\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        assertEquals(3, view.size());\n+        assertSame(ZERO, view.get(0));\n+        assertSame(ONE, view.get(1));\n+        assertSame(TWO, view.get(2));\n+\n+        assertEquals(0, set.indexOf(ZERO));\n+        assertEquals(1, set.indexOf(ONE));\n+        assertEquals(2, set.indexOf(TWO));\n+\n+        set.remove(1);\n+        assertEquals(2, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(TWO, set.get(1));\n+        assertEquals(2, view.size());\n+        assertSame(ZERO, view.get(0));\n+        assertSame(TWO, view.get(1));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListAddIndexed() {\n+        ListOrderedSet<E> set = makeObject();\n+        set.add((E) ZERO);\n+        set.add((E) TWO);\n+\n+        set.add(1, (E) ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+\n+        set.add(0, (E) ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+\n+        List<E> list = new ArrayList<E>();\n+        list.add((E) ZERO);\n+        list.add((E) TWO);\n+\n+        set.addAll(0, list);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+\n+        list.add(0, (E) THREE); // list = [3,0,2]\n+        set.remove(TWO);    //  set = [0,1]\n+        set.addAll(1, list);\n+        assertEquals(4, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(THREE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        assertSame(ONE, set.get(3));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testListAddReplacing() {\n+        ListOrderedSet<E> set = makeObject();\n+        A a = new A();\n+        B b = new B();\n+        set.add((E) a);\n+        assertEquals(1, set.size());\n+        set.add((E) b);  // will match but not replace A as equal\n+        assertEquals(1, set.size());\n+        assertSame(a, set.decorated().iterator().next());\n+        assertSame(a, set.iterator().next());\n+        assertSame(a, set.get(0));\n+        assertSame(a, set.asList().get(0));\n+    }\n+\n+    static class A {\n+        @Override\n+        public boolean equals(Object obj) {\n+            return (obj instanceof A || obj instanceof B);\n+        }\n+        @Override\n+        public int hashCode() {\n+            return 1;\n+        }\n+    }\n+\n+    static class B {\n+        @Override\n+        public boolean equals(Object obj) {\n+            return (obj instanceof A || obj instanceof B);\n+        }\n+        @Override\n+        public int hashCode() {\n+            return 1;\n+        }\n+    }\n+\n+    public void testDecorator() {\n+        try {\n+            ListOrderedSet.listOrderedSet((List<E>) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ListOrderedSet.listOrderedSet((Set<E>) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ListOrderedSet.listOrderedSet(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ListOrderedSet.listOrderedSet(new HashSet<E>(), null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ListOrderedSet.listOrderedSet(null, new ArrayList<E>());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/ListOrderedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/ListOrderedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/MapBackedSet2Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.map.LinkedMap;\n+\n+/**\n+ * JUnit test.\n+ *\n+ * @since 3.1\n+ * @version $Id$\n+ */\n+public class MapBackedSet2Test<E> extends AbstractSetTest<E> {\n+\n+    public MapBackedSet2Test(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public Set<E> makeObject() {\n+        return MapBackedSet.mapBackedSet(new LinkedMap<E, Object>());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected Set<E> setupSet() {\n+        Set<E> set = makeObject();\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add((E) Integer.toString(i));\n+        }\n+        return set;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testOrdering() {\n+        Set<E> set = setupSet();\n+        Iterator<E> it = set.iterator();\n+\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i += 2) {\n+            assertTrue(\"Must be able to remove int\", set.remove(Integer.toString(i)));\n+        }\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong after remove \", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add((E) Integer.toString(i));\n+        }\n+\n+        assertEquals(\"Size of set is wrong!\", 10, set.size());\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+        for (int i = 0; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+    }\n+\n+    @Override\n+    public void testCanonicalEmptyCollectionExists() {\n+    }\n+\n+    @Override\n+    public void testCanonicalFullCollectionExists() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/MapBackedSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.map.HashedMap;\n+\n+/**\n+ * JUnit test.\n+ *\n+ * @since 3.1\n+ * @version $Id$\n+ */\n+public class MapBackedSetTest<E> extends AbstractSetTest<E> {\n+\n+    public MapBackedSetTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public Set<E> makeObject() {\n+        return MapBackedSet.mapBackedSet(new HashedMap<E, Object>());\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/MapBackedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/MapBackedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/PredicatedSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.functors.TruePredicate;\n+\n+/**\n+ * Extension of {@link AbstractSetTest} for exercising the \n+ * {@link PredicatedSet} implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class PredicatedSetTest<E> extends AbstractSetTest<E> {\n+\n+    public PredicatedSetTest(String testName) {\n+        super(testName);\n+    }\n+\n+ //-------------------------------------------------------------------\n+\n+    protected Predicate<E> truePredicate = TruePredicate.<E>truePredicate();\n+\n+    protected PredicatedSet<E> decorateSet(Set<E> set, Predicate<? super E> predicate) {\n+        return PredicatedSet.predicatedSet(set, predicate);\n+    }\n+\n+    @Override\n+    public PredicatedSet<E> makeObject() {\n+        return decorateSet(new HashSet<E>(), truePredicate);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public E[] getFullElements() {\n+        return (E[]) new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+    }\n+\n+//--------------------------------------------------------------------\n+\n+    protected Predicate<E> testPredicate =\n+        new Predicate<E>() {\n+            public boolean evaluate(E o) {\n+                return o instanceof String;\n+            }\n+        };\n+\n+    protected PredicatedSet<E> makeTestSet() {\n+        return decorateSet(new HashSet<E>(), testPredicate);\n+    }\n+\n+    public void testGetSet() {\n+        PredicatedSet<E> set = makeTestSet();\n+        assertTrue(\"returned set should not be null\", set.decorated() != null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIllegalAdd() {\n+        Set<E> set = makeTestSet();\n+        Integer i = new Integer(3);\n+        try {\n+            set.add((E) i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\",\n+         !set.contains(i));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIllegalAddAll() {\n+        Set<E> set = makeTestSet();\n+        Set<E> elements = new HashSet<E>();\n+        elements.add((E) \"one\");\n+        elements.add((E) \"two\");\n+        elements.add((E) new Integer(3));\n+        elements.add((E) \"four\");\n+        try {\n+            set.addAll(elements);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Set shouldn't contain illegal element\",\n+         !set.contains(\"one\"));\n+        assertTrue(\"Set shouldn't contain illegal element\",\n+         !set.contains(\"two\"));\n+        assertTrue(\"Set shouldn't contain illegal element\",\n+         !set.contains(new Integer(3)));\n+        assertTrue(\"Set shouldn't contain illegal element\",\n+         !set.contains(\"four\"));\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/PredicatedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/PredicatedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/PredicatedSortedSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.functors.TruePredicate;\n+\n+/**\n+ * Extension of {@link AbstractSortedSetTest} for exercising the\n+ * {@link PredicatedSortedSet} implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class PredicatedSortedSetTest<E> extends AbstractSortedSetTest<E> {\n+\n+    public PredicatedSortedSetTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(PredicatedSortedSetTest.class);\n+    }\n+\n+ //-------------------------------------------------------------------\n+\n+    protected Predicate<E> truePredicate = TruePredicate.<E>truePredicate();\n+\n+    @Override\n+    public SortedSet<E> makeObject() {\n+        return PredicatedSortedSet.predicatedSortedSet(new TreeSet<E>(), truePredicate);\n+    }\n+\n+    @Override\n+    public SortedSet<E> makeFullCollection() {\n+        TreeSet<E> set = new TreeSet<E>();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return PredicatedSortedSet.predicatedSortedSet(set, truePredicate);\n+    }\n+\n+//--------------------------------------------------------------------\n+    protected Predicate<E> testPredicate =\n+        new Predicate<E>() {\n+            public boolean evaluate(E o) {\n+                return (o instanceof String) && (((String) o).startsWith(\"A\"));\n+            }\n+        };\n+\n+    protected PredicatedSortedSet<E> makeTestSet() {\n+        return PredicatedSortedSet.predicatedSortedSet(new TreeSet<E>(), testPredicate);\n+    }\n+\n+    public void testGetSet() {\n+        PredicatedSortedSet<E> set = makeTestSet();\n+        assertTrue(\"returned set should not be null\", set.decorated() != null);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIllegalAdd() {\n+        SortedSet<E> set = makeTestSet();\n+        String testString = \"B\";\n+        try {\n+            set.add((E) testString);\n+            fail(\"Should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\",\n+         !set.contains(testString));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIllegalAddAll() {\n+        SortedSet<E> set = makeTestSet();\n+        Set<E> elements = new TreeSet<E>();\n+        elements.add((E) \"Aone\");\n+        elements.add((E) \"Atwo\");\n+        elements.add((E) \"Bthree\");\n+        elements.add((E) \"Afour\");\n+        try {\n+            set.addAll(elements);\n+            fail(\"Should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Set shouldn't contain illegal element\", !set.contains(\"Aone\"));\n+        assertTrue(\"Set shouldn't contain illegal element\", !set.contains(\"Atwo\"));\n+        assertTrue(\"Set shouldn't contain illegal element\", !set.contains(\"Bthree\"));\n+        assertTrue(\"Set shouldn't contain illegal element\", !set.contains(\"Afour\"));\n+    }\n+\n+    public void testComparator() {\n+        SortedSet<E> set = makeTestSet();\n+        Comparator<? super E> c = set.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", c == null);\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/PredicatedSortedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/PredicatedSortedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/SynchronizedSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Extension of {@link AbstractSetTest} for exercising the\n+ * {@link SynchronizedSet} implementation.\n+ *\n+ * @since 3.1\n+ * @version $Id$\n+ */\n+public class SynchronizedSetTest<E> extends AbstractSetTest<E> {\n+\n+    public SynchronizedSetTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(SynchronizedSetTest.class);\n+    }\n+\n+   //-------------------------------------------------------------------\n+    @Override\n+    public Set<E> makeObject() {\n+        return SynchronizedSet.synchronizedSet(new HashSet<E>());\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/SynchronizedSortedSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Extension of {@link AbstractSetTest} for exercising the\n+ * {@link SynchronizedSortedSet} implementation.\n+ *\n+ * @since 3.1\n+ * @version $Id$\n+ */\n+public class SynchronizedSortedSetTest<E> extends AbstractSortedSetTest<E> {\n+\n+    public SynchronizedSortedSetTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(SynchronizedSortedSetTest.class);\n+    }\n+\n+   //-------------------------------------------------------------------\n+    @Override\n+    public SortedSet<E> makeObject() {\n+        return SynchronizedSortedSet.synchronizedSortedSet(new TreeSet<E>());\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedSortedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/SynchronizedSortedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/TransformedSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.collection.TransformedCollectionTest;\n+\n+/**\n+ * Extension of {@link AbstractSetTest} for exercising the {@link TransformedSet}\n+ * implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class TransformedSetTest<E> extends AbstractSetTest<E> {\n+\n+    public TransformedSetTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public Set<E> makeConfirmedCollection() {\n+        return new HashSet<E>();\n+    }\n+\n+    @Override\n+    public Set<E> makeConfirmedFullCollection() {\n+        Set<E> set = new HashSet<E>();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Set<E> makeObject() {\n+        return TransformedSet.transformingSet(new HashSet<E>(),\n+                (Transformer<E, E>) TransformedCollectionTest.NOOP_TRANSFORMER);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Set<E> makeFullCollection() {\n+        Set<E> list = new HashSet<E>();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return TransformedSet.transformingSet(list,\n+                (Transformer<E, E>) TransformedCollectionTest.NOOP_TRANSFORMER);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testTransformedSet() {\n+        Set<E> set = TransformedSet.transformingSet(new HashSet<E>(),\n+                (Transformer<E, E>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, set.size());\n+        E[] els = (E[]) new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n+        for (int i = 0; i < els.length; i++) {\n+            set.add(els[i]);\n+            assertEquals(i + 1, set.size());\n+            assertEquals(true, set.contains(new Integer((String) els[i])));\n+            assertEquals(false, set.contains(els[i]));\n+        }\n+\n+        assertEquals(false, set.remove(els[0]));\n+        assertEquals(true, set.remove(new Integer((String) els[0])));\n+\n+    }\n+\n+    public void testTransformedSet_decorateTransform() {\n+        Set<Object> originalSet = new HashSet<Object>();\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            originalSet.add(els[i]);\n+        }\n+        Set<?> set = TransformedSet.transformedSet(originalSet, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, set.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, set.contains(new Integer((String) els[i])));\n+            assertEquals(false, set.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, set.remove(els[0]));\n+        assertEquals(true, set.remove(new Integer((String) els[0])));\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/TransformedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/TransformedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/TransformedSortedSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Arrays;\n+import java.util.TreeSet;\n+import java.util.Set;\n+import java.util.SortedSet;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.collection.TransformedCollectionTest;\n+\n+/**\n+ * Extension of {@link AbstractSortedSetTest} for exercising the {@link TransformedSortedSet}\n+ * implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class TransformedSortedSetTest<E> extends AbstractSortedSetTest<E> {\n+\n+    public TransformedSortedSetTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TransformedSortedSetTest.class);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public SortedSet<E> makeObject() {\n+        return TransformedSortedSet.transformingSortedSet(new TreeSet<E>(), (Transformer<E, E>) TransformedCollectionTest.NOOP_TRANSFORMER);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public SortedSet<E> makeFullCollection() {\n+        SortedSet<E> set = new TreeSet<E>();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return TransformedSortedSet.transformingSortedSet(set, (Transformer<E, E>) TransformedCollectionTest.NOOP_TRANSFORMER);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testTransformedSet() {\n+        SortedSet<E> set = TransformedSortedSet.transformingSortedSet(new TreeSet<E>(),\n+                (Transformer<E, E>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, set.size());\n+        E[] els = (E[]) new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n+        for (int i = 0; i < els.length; i++) {\n+            set.add(els[i]);\n+            assertEquals(i + 1, set.size());\n+            assertEquals(true, set.contains(new Integer((String) els[i])));\n+        }\n+\n+        assertEquals(true, set.remove(new Integer((String) els[0])));\n+    }\n+\n+    public void testTransformedSet_decorateTransform() {\n+        Set<Object> originalSet = new TreeSet<Object>();\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            originalSet.add(els[i]);\n+        }\n+        Set<?> set = TransformedSortedSet.transformedSet(originalSet, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, set.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, set.contains(new Integer((String) els[i])));\n+        }\n+        \n+        assertEquals(true, set.remove(new Integer((String) els[0])));\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/TransformedSortedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/TransformedSortedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/UnmodifiableSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Extension of {@link AbstractSetTest} for exercising the\n+ * {@link UnmodifiableSet} implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class UnmodifiableSetTest<E> extends AbstractSetTest<E> {\n+\n+    public UnmodifiableSetTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(UnmodifiableSetTest.class);\n+    }\n+\n+    //-------------------------------------------------------------------\n+    @Override\n+    public Set<E> makeObject() {\n+        return UnmodifiableSet.unmodifiableSet(new HashSet<E>());\n+    }\n+\n+    @Override\n+    public Set<E> makeFullCollection() {\n+        HashSet<E> set = new HashSet<E>();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return UnmodifiableSet.unmodifiableSet(set);\n+    }\n+\n+    @Override\n+    public boolean isAddSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/UnmodifiableSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/UnmodifiableSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/set/UnmodifiableSortedSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Extension of {@link AbstractSortedSetTest} for exercising the\n+ * {@link UnmodifiableSortedSet} implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class UnmodifiableSortedSetTest<E> extends AbstractSortedSetTest<E> {\n+    protected UnmodifiableSortedSet<E> set = null;\n+    protected ArrayList<E> array = null;\n+\n+    public UnmodifiableSortedSetTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(UnmodifiableSortedSetTest.class);\n+    }\n+\n+    //-------------------------------------------------------------------\n+    @Override\n+    public SortedSet<E> makeObject() {\n+        return UnmodifiableSortedSet.unmodifiableSortedSet(new TreeSet<E>());\n+    }\n+\n+    @Override\n+    public UnmodifiableSortedSet<E> makeFullCollection() {\n+        TreeSet<E> set = new TreeSet<E>();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return (UnmodifiableSortedSet<E>) UnmodifiableSortedSet.unmodifiableSortedSet(set);\n+    }\n+\n+    @Override\n+    public boolean isAddSupported() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n+    //--------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    protected void setupSet() {\n+        set = makeFullCollection();\n+        array = new ArrayList<E>();\n+        array.add((E) new Integer(1));\n+    }\n+\n+    /**\n+     * Verify that base set and subsets are not modifiable\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testUnmodifiable() {\n+        setupSet();\n+        verifyUnmodifiable(set);\n+        verifyUnmodifiable(set.headSet((E) new Integer(1)));\n+        verifyUnmodifiable(set.tailSet((E) new Integer(1)));\n+        verifyUnmodifiable(set.subSet((E) new Integer(1), (E) new Integer(3)));\n+    }\n+\n+    /**\n+     * Verifies that a set is not modifiable\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void verifyUnmodifiable(Set<E> set) {\n+        try {\n+            set.add((E) \"value\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.addAll(new TreeSet<E>());\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.clear();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.remove(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.removeAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.retainAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testComparator() {\n+        setupSet();\n+        Comparator<? super E> c = set.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", c == null);\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/UnmodifiableSortedSet.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/UnmodifiableSortedSet.fullCollection.version3.1.obj\");\n+//    }\n+\n+}", "timestamp": 1345152300, "metainfo": ""}