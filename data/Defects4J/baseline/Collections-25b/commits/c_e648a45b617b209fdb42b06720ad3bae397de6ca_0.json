{"sha": "e648a45b617b209fdb42b06720ad3bae397de6ca", "log": "add javadocs to Int[List]Iterator fix typo in IntList javadocs   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/IntIterator.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntIterator.java,v 1.1 2003/01/04 15:00:57 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2003/01/04 15:00:57 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntIterator.java,v 1.2 2003/01/10 19:24:10 rwaldhoff Exp $\n  *\n  * ====================================================================\n  *\n  *    distribution.\n  *\n  * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n+ *    any, must include the following acknowledgment:\n  *       \"This product includes software developed by the\n  *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n  *\n  * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n  *    Foundation\" must not be used to endorse or promote products derived\n package org.apache.commons.collections.primitives;\n \n /**\n- * A {@link java.util.Iterator iterator} over int values.\n+ * An iterator over <code>int</code> values.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/01/04 15:00:57 $\n+ * @see org.apache.commons.collections.primitives.adapters.IntIteratorIterator\n+ * @see org.apache.commons.collections.primitives.adapters.IteratorIntIterator\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.2 $ $Date: 2003/01/10 19:24:10 $\n+ * \n  * @author Rodney Waldhoff \n  */\n public interface IntIterator {\n     /** \n-     * Returns <code>true</code> iff \n-     * I have more elements. \n+     * Returns <code>true</code> iff I have more elements. \n+     * (In other words, returns <code>true</code> iff \n+     * a call to {@link #next next} will return an element\n+     * rather than throwing an exception.\n+     * \n+     * @return <code>true</code> iff I have more elements\n      */\n     boolean hasNext();\n     \n     /** \n      * Returns the next element in me.\n+     * \n+     * @return the next element in me\n      * @throws NoSuchElementException if there is no next element\n      */          \n     int next();\n      * Removes from my underlying collection the last \n      * element {@link #next returned} by me \n      * (optional operation). \n-     * @throws UnsupportedOperationException if remove is not supported\n+     * \n+     * @throws UnsupportedOperationException if this operation is not supported\n      * @throws IllegalStateException if {@link #next} has not yet been \n-     *         called, or {@link #remove} has already been called after \n+     *         called, or {@link #remove} has already been called since \n      *         the last call to {@link #next}.\n      */          \n     void remove();\n--- a/src/java/org/apache/commons/collections/primitives/IntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntList.java,v 1.6 2003/01/10 18:52:37 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntList.java,v 1.7 2003/01/10 19:24:10 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see org.apache.commons.collections.primitives.adapters.ListIntList\n  *\n  * @since Commons Collections 2.2\n- * @version $Revision: 1.6 $ $Date: 2003/01/10 18:52:37 $\n+ * @version $Revision: 1.7 $ $Date: 2003/01/10 19:24:10 $\n  * \n  * @author Rodney Waldhoff \n  */\n      * \n      * @throws UnsupportedOperationException when this operation is not \n      *         supported\n-     * @throws IllegalArgumentException is some aspect of the specified element \n+     * @throws IllegalArgumentException if some aspect of the specified element \n      *         prevents it from being added to me\n      * @throws IndexOutOfBoundsException if the specified index is out of range\n      */\n--- a/src/java/org/apache/commons/collections/primitives/IntListIterator.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntListIterator.java,v 1.3 2003/01/10 18:52:37 rwaldhoff Exp $\n- * $Revision: 1.3 $\n- * $Date: 2003/01/10 18:52:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntListIterator.java,v 1.4 2003/01/10 19:24:10 rwaldhoff Exp $\n  *\n  * ====================================================================\n  *\n package org.apache.commons.collections.primitives;\n \n /**\n- * A {@link java.util.ListIterator list iterator} over int values.\n+ * A list iterator over <code>int</code> values.\n  *\n- * @version $Revision: 1.3 $ $Date: 2003/01/10 18:52:37 $\n+ * @see org.apache.commons.collections.primitives.adapters.IntListIteratorListIterator\n+ * @see org.apache.commons.collections.primitives.adapters.ListIteratorIntListIterator\n+ *\n+ * @since Commons Collections 2.2\n+ * @version $Revision: 1.4 $ $Date: 2003/01/10 19:24:10 $\n+ * \n  * @author Rodney Waldhoff \n  */\n public interface IntListIterator extends IntIterator {\n+    /**\n+     * Inserts the specified element into my underlying collection\n+     * (optional operation).\n+     * The element is inserted immediately before the next element \n+     * that would have been returned by {@link #next}, if any,\n+     * and immediately after the next element that would have been \n+     * returned by {@link #previous}, if any.\n+     * <p/>\n+     * The new element is inserted immediately before the implied\n+     * cursor. A subsequent call to {@link #previous} will return\n+     * the added element, a subsequent call to {@link #next} will\n+     * be unaffected.  This call increases by one the value that\n+     * would be returned by a call to {@link #nextIndex} or \n+     * {@link #previousIndex}.\n+     * \n+     * @param element the value to be inserted\n+     * \n+     * @throws UnsupportedOperationException when this operation is not \n+     *         supported\n+     * @throws IllegalArgumentException if some aspect of the specified element \n+     *         prevents it from being added\n+     */\n     void add(int element);\n+\n+    /** \n+     * Returns <code>true</code> iff I have more elements\n+     * when traversed in the forward direction. \n+     * (In other words, returns <code>true</code> iff \n+     * a call to {@link #next} will return an element\n+     * rather than throwing an exception.\n+     * \n+     * @return <code>true</code> iff I have more elements when \n+     *         traversed in the forward direction\n+     */\n     boolean hasNext();\n+    \n+    /** \n+     * Returns <code>true</code> iff I have more elements\n+     * when traversed in the reverse direction. \n+     * (In other words, returns <code>true</code> iff \n+     * a call to {@link #previous} will return an element\n+     * rather than throwing an exception.\n+     * \n+     * @return <code>true</code> iff I have more elements when \n+     *         traversed in the reverse direction\n+     */\n     boolean hasPrevious();\n+\n+    /** \n+     * Returns the next element in me when traversed in the\n+     * forward direction.\n+     * \n+     * @return the next element in me\n+     * @throws NoSuchElementException if there is no next element\n+     */          \n     int next();\n+    \n+    /** \n+     * Returns the index of the element that would be returned\n+     * by a subsequent call to {@link #next}, or the number \n+     * of elements in my iteration if I have no next element.\n+     * \n+     * @return the index of the next element in me\n+     */          \n     int nextIndex();\n+\n+    /** \n+     * Returns the next element in me when traversed in the\n+     * reverse direction.\n+     * \n+     * @return the previous element in me\n+     * @throws NoSuchElementException if there is no previous element\n+     */          \n     int previous();\n+\n+    /** \n+     * Returns the index of the element that would be returned\n+     * by a subsequent call to {@link #previous}, or \n+     * <code>-1</code> if I have no previous element.\n+     * \n+     * @return the index of the previous element in me\n+     */          \n     int previousIndex();\n+\n+    /** \n+     * Removes from my underlying collection the last \n+     * element returned by {@link #next} or {@link #previous}\n+     * (optional operation). \n+     * \n+     * @throws UnsupportedOperationException if this operation is not \n+     *         supported\n+     * @throws IllegalStateException if neither {@link #next} nor\n+     *         {@link #previous} has yet been called, or \n+     *         {@link #remove} or {@link #add} has already been called since \n+     *         the last call to {@link #next} or {@link #previous}.\n+     */          \n     void remove();\n+\n+    /** \n+     * Replaces in my underlying collection the last \n+     * element returned by {@link #next} or {@link #previous}\n+     * with the specified value (optional operation). \n+     * \n+     * @param element the value to replace the last returned element with\n+     * @throws UnsupportedOperationException if this operation is not \n+     *         supported\n+     * @throws IllegalStateException if neither {@link #next} nor\n+     *         {@link #previous} has yet been called, or \n+     *         {@link #remove} or {@link #add} has already been called since \n+     *         the last call to {@link #next} or {@link #previous}.\n+     * @throws IllegalArgumentException if some aspect of the specified element \n+     *         prevents it from being added\n+     */          \n     void set(int element);\n }", "timestamp": 1042226650, "metainfo": ""}