{"sha": "bdfea5682bf3331a8102a8f6b44b311a6a6ef023", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/set/SynchronizedSortedSet.java\n+++ b/src/java/org/apache/commons/collections/set/SynchronizedSortedSet.java\n  *\n  * @author Stephen Colebourne\n  */\n-public class SynchronizedSortedSet extends SynchronizedCollection implements SortedSet {\n+public class SynchronizedSortedSet<E> extends SynchronizedCollection<E> implements SortedSet<E> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 2775582861954500111L;\n \n     /**\n      * Factory method to create a synchronized set.\n-     * \n+     *\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n-    public static SortedSet decorate(SortedSet set) {\n-        return new SynchronizedSortedSet(set);\n+    public static <T> SortedSet<T> decorate(SortedSet<T> set) {\n+        return new SynchronizedSortedSet<T>(set);\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param set  the set to decorate, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n-    protected SynchronizedSortedSet(SortedSet set) {\n+    protected SynchronizedSortedSet(SortedSet<E> set) {\n         super(set);\n     }\n \n     /**\n      * Constructor that wraps (not copies).\n-     * \n+     *\n      * @param set  the set to decorate, must not be null\n      * @param lock  the lock object to use, must not be null\n      * @throws IllegalArgumentException if set is null\n      */\n-    protected SynchronizedSortedSet(SortedSet set, Object lock) {\n+    protected SynchronizedSortedSet(SortedSet<E> set, Object lock) {\n         super(set, lock);\n     }\n \n     /**\n      * Gets the decorated set.\n-     * \n+     *\n      * @return the decorated set\n      */\n-    protected SortedSet getSortedSet() {\n-        return (SortedSet) collection;\n+    protected SortedSet<E> getSortedSet() {\n+        return (SortedSet<E>) collection;\n     }\n \n     //-----------------------------------------------------------------------\n-    public SortedSet subSet(Object fromElement, Object toElement) {\n+    public SortedSet<E> subSet(E fromElement, E toElement) {\n         synchronized (lock) {\n-            SortedSet set = getSortedSet().subSet(fromElement, toElement);\n+            SortedSet<E> set = getSortedSet().subSet(fromElement, toElement);\n             // the lock is passed into the constructor here to ensure that the\n             // subset is synchronized on the same lock as the parent\n-            return new SynchronizedSortedSet(set, lock);\n+            return new SynchronizedSortedSet<E>(set, lock);\n         }\n     }\n \n-    public SortedSet headSet(Object toElement) {\n+    public SortedSet<E> headSet(E toElement) {\n         synchronized (lock) {\n-            SortedSet set = getSortedSet().headSet(toElement);\n+            SortedSet<E> set = getSortedSet().headSet(toElement);\n             // the lock is passed into the constructor here to ensure that the\n             // headset is synchronized on the same lock as the parent\n-            return new SynchronizedSortedSet(set, lock);\n+            return new SynchronizedSortedSet<E>(set, lock);\n         }\n     }\n \n-    public SortedSet tailSet(Object fromElement) {\n+    public SortedSet<E> tailSet(E fromElement) {\n         synchronized (lock) {\n-            SortedSet set = getSortedSet().tailSet(fromElement);\n+            SortedSet<E> set = getSortedSet().tailSet(fromElement);\n             // the lock is passed into the constructor here to ensure that the\n             // tailset is synchronized on the same lock as the parent\n-            return new SynchronizedSortedSet(set, lock);\n+            return new SynchronizedSortedSet<E>(set, lock);\n         }\n     }\n \n-    public Object first() {\n+    public E first() {\n         synchronized (lock) {\n             return getSortedSet().first();\n         }\n     }\n \n-    public Object last() {\n+    public E last() {\n         synchronized (lock) {\n             return getSortedSet().last();\n         }\n     }\n \n-    public Comparator comparator() {\n+    public Comparator<? super E> comparator() {\n         synchronized (lock) {\n             return getSortedSet().comparator();\n         }", "timestamp": 1252994204, "metainfo": ""}