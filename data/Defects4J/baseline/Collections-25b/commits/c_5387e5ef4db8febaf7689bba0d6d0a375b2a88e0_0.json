{"sha": "5387e5ef4db8febaf7689bba0d6d0a375b2a88e0", "log": "Cleanup of set package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/set/AbstractSerializableSetDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/set/AbstractSerializableSetDecorator.java\n /**\n  * Serializable subclass of AbstractSetDecorator.\n  *\n- * @author Stephen Colebourne\n  * @since Commons Collections 3.1\n+ * @version $Id$\n  */\n public abstract class AbstractSerializableSetDecorator<E>\n         extends AbstractSetDecorator<E>\n \n     /**\n      * Constructor.\n+     * \n+     * @param set  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n      */\n     protected AbstractSerializableSetDecorator(Set<E> set) {\n         super(set);\n--- a/src/main/java/org/apache/commons/collections/set/AbstractSetDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/set/AbstractSetDecorator.java\n  *\n  * @param <E> the type of the elements in the set\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractSetDecorator<E> extends AbstractCollectionDecorator<E> implements\n         Set<E> {\n--- a/src/main/java/org/apache/commons/collections/set/AbstractSortedSetDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/set/AbstractSortedSetDecorator.java\n  *\n  * @param <E> the type of the elements in the sorted set\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractSortedSetDecorator<E>\n         extends AbstractSetDecorator<E>\n--- a/src/main/java/org/apache/commons/collections/set/CompositeSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/CompositeSet.java\n  * If no strategy is provided then add is unsupported.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Brian McCallister\n+ * @version $Id$\n  */\n public class CompositeSet<E> extends CompositeCollection<E> implements Set<E> {\n \n     }\n \n     /**\n-     * Create a CompositeSet with just <code>set</code> composited\n-     * @param set The initial set in the composite\n+     * Create a CompositeSet with just <code>set</code> composited.\n+     *\n+     * @param set  the initial set in the composite\n      */\n     public CompositeSet(Set<E> set) {\n         super(set);\n     }\n \n     /**\n-     * Create a composite set with sets as the initial set of composited Sets\n+     * Create a composite set with sets as the initial set of composited Sets.\n+     * \n+     * @param sets  the initial sets in the composite\n      */\n     public CompositeSet(Set<E>... sets) {\n         super(sets);\n                 }\n                 else if (!(this.mutator instanceof SetMutator)) {\n                     throw new UnsupportedOperationException(\n-                        \"Collision adding composited collection to a CompositeSet with a CollectionMutator instead of a SetMutator\");\n+                        \"Collision adding composited collection to a CompositeSet with a CollectionMutator \" +\n+                        \"instead of a SetMutator\");\n                 }\n                 getMutator().resolveCollision(this, set, (Set<E>) c, intersects);\n                 if (CollectionUtils.intersection(set, c).size() > 0) {\n     }\n \n     /**\n-     * Add two sets to this composite\n-     *\n+     * Add two sets to this composite.\n+     *\n+     * @param c  the first {@link Set} to add to this composite\n+     * @param d  the second {@link Set} to add to this composite\n      * @throws IllegalArgumentException if c or d does not implement java.util.Set\n      */\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public synchronized void addComposited(Collection<E> c, Collection<E> d) {\n-        if (!(c instanceof Set)) throw new IllegalArgumentException(\"Argument must implement java.util.Set\");\n-        if (!(d instanceof Set)) throw new IllegalArgumentException(\"Argument must implement java.util.Set\");\n+        if (!(c instanceof Set)) {\n+            throw new IllegalArgumentException(\"Argument must implement java.util.Set\");\n+        }\n+        if (!(d instanceof Set)) {\n+            throw new IllegalArgumentException(\"Argument must implement java.util.Set\");\n+        }\n         this.addComposited(new Set[] { (Set<? extends E>) c, (Set<? extends E>) d });\n     }\n \n     /**\n      * Add an array of sets to this composite\n-     * @param comps\n+     * @param comps  the {@link Collection} of {@link Set}s to add to this composite\n      * @throws IllegalArgumentException if any of the collections in comps do not implement Set\n      */\n     @Override\n     }\n \n     /**\n-     * This can receive either a <code>CompositeCollection.CollectionMutator</code>\n-     * or a <code>CompositeSet.SetMutator</code>. If a\n-     * <code>CompositeCollection.CollectionMutator</code> is used than conflicts when adding\n-     * composited sets will throw IllegalArgumentException\n-     * <p>\n+     * This can receive either a {@link CompositeCollection#CollectionMutator} or a\n+     * {@link CompositeSet#SetMutator}. If a {@link CompositeCollection#CollectionMutator}\n+     * is used than conflicts when adding composited sets will throw IllegalArgumentException.\n+     * \n+     * @param mutator  the {@link CollectionMutator} to use for this composite\n      */\n     @Override\n     public void setMutator(CollectionMutator<E> mutator) {\n      * If a <code>CollectionMutator</code> is defined for this CompositeSet then this\n      * method will be called anyway.\n      *\n-     * @param obj Object to be removed\n+     * @param obj  object to be removed\n      * @return true if the object is removed, false otherwise\n      */\n     @Override\n     public boolean remove(Object obj) {\n         for (Set<? extends E> set : getCollections()) {\n-            if (set.contains(obj)) return set.remove(obj);\n+            if (set.contains(obj)) {\n+                return set.remove(obj);\n+            }\n         }\n         return false;\n     }\n     public static interface SetMutator<E> extends CompositeCollection.CollectionMutator<E> {\n \n         /**\n-         * <p>\n          * Called when a Set is added to the CompositeSet and there is a\n          * collision between existing and added sets.\n-         * </p>\n          * <p>\n          * If <code>added</code> and <code>existing</code> still have any intersects\n          * after this method returns an IllegalArgumentException will be thrown.\n-         * </p>\n-         * @param comp The CompositeSet being modified\n-         * @param existing The Set already existing in the composite\n-         * @param added the Set being added to the composite\n-         * @param intersects the intersection of th existing and added sets\n+         *\n+         * @param comp  the CompositeSet being modified\n+         * @param existing  the Set already existing in the composite\n+         * @param added  the Set being added to the composite\n+         * @param intersects  the intersection of the existing and added sets\n          */\n         public void resolveCollision(CompositeSet<E> comp, Set<E> existing, Set<E> added, Collection<E> intersects);\n     }\n--- a/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Henning P. Schmiedehausen\n+ * @version $Id$\n  */\n public class ListOrderedSet<E> extends AbstractSerializableSetDecorator<E> implements Set<E> {\n \n--- a/src/main/java/org/apache/commons/collections/set/MapBackedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/MapBackedSet.java\n  * Exceptions include <code>BidiMap</code> implementations, as they require unique values.\n  *\n  * @since Commons Collections 3.1\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class MapBackedSet<E, V> implements Set<E>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/set/PredicatedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/PredicatedSet.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class PredicatedSet<E> extends PredicatedCollection<E> implements Set<E> {\n \n--- a/src/main/java/org/apache/commons/collections/set/PredicatedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/PredicatedSortedSet.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Paul Jack\n+ * @version $Id$\n  */\n public class PredicatedSortedSet<E> extends PredicatedSet<E> implements SortedSet<E> {\n \n--- a/src/main/java/org/apache/commons/collections/set/SynchronizedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/SynchronizedSet.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class SynchronizedSet<E> extends SynchronizedCollection<E> implements Set<E> {\n \n--- a/src/main/java/org/apache/commons/collections/set/SynchronizedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/SynchronizedSortedSet.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class SynchronizedSortedSet<E> extends SynchronizedCollection<E> implements SortedSet<E> {\n \n--- a/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TransformedSet<E> extends TransformedCollection<E> implements Set<E> {\n \n--- a/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TransformedSortedSet<E> extends TransformedSet<E> implements SortedSet<E> {\n \n--- a/src/main/java/org/apache/commons/collections/set/UnmodifiableSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/UnmodifiableSet.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableSet<E>\n         extends AbstractSerializableSetDecorator<E>\n--- a/src/main/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableSortedSet<E>\n         extends AbstractSortedSetDecorator<E>\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/set/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * This package contains implementations of the {@link java.util.Set Set} and\n+ * {@link java.util.SortedSet SortedSet} interfaces.\n+ * <p>\n+ * The implementations are in the form of direct implementations and decorators.\n+ * A decorator wraps another implementation of the interface to add some\n+ * specific additional functionality.\n+ * <p>\n+ * The following implementations are provided in the package:\n+ * <ul>\n+ *   <li>CompositeSet - a set that combines multiple sets into one\n+ * </ul>\n+ * The following decorators are provided in the package:\n+ * <ul>\n+ *   <li>Synchronized - synchronizes method access for multi-threaded environments\n+ *   <li>Unmodifiable - ensures the collection cannot be altered\n+ *   <li>Predicated - ensures that only elements that are valid according to a predicate can be added\n+ *   <li>Typed - ensures that only elements that are of a specific type can be added\n+ *   <li>Transformed - transforms each element added\n+ *   <li>ListOrdered - ensures that insertion order is retained\n+ *   <li>MapBackedSet - a set formed by decorating a Map\n+ * </ul>\n+ *\n+ * @version $Id$\n+ */\n+package org.apache.commons.collections.set;", "timestamp": 1342349316, "metainfo": ""}