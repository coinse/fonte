{"sha": "f4847129e4aec0165184a1dbed14c8042fb4a268", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r572176 | skestle | 2007-09-02 15:04:41 -0700 (Sun, 02 Sep 2007) | 1 line          Generified LazySortedMap to fix build errors     ------------------------------------------------------------------------     r572156 | skestle | 2007-09-02 14:12:06 -0700 (Sun, 02 Sep 2007) | 1 line          Added <Object, Object> generification for LazySortedMap to temporarily fix javac compilation problems     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/LazySortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/LazySortedMap.java\n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n-public class LazySortedMap\n-        extends LazyMap\n-        implements SortedMap {\n+public class LazySortedMap<K,V>\n+        extends LazyMap<K,V>\n+        implements SortedMap<K,V> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 2715322183617658933L;\n      * @param map  the map to decorate, must not be null\n      * @param factory  the factory to use, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n+     * @deprecated\n      */\n-    public static SortedMap decorate(SortedMap map, Factory factory) {\n-        return new LazySortedMap(map, factory);\n+    @Deprecated\n+    public static <K,V> SortedMap<K,V> decorate(SortedMap<K,V> map, Factory<? extends V> factory) {\n+        return getLazySortedMap(map, factory);\n     }\n \n     /**\n      * @param factory  the factory to use, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n      */\n-    public static SortedMap decorate(SortedMap map, Transformer factory) {\n-        return new LazySortedMap(map, factory);\n+    public static <K, V> SortedMap<K, V> getLazySortedMap(SortedMap<K, V> map, Factory<? extends V> factory) {\n+        return new LazySortedMap<K,V>(map, factory);\n+    }\n+\n+    /**\n+     * Factory method to create a lazily instantiated sorted map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     * @deprecated\n+     */\n+    @Deprecated\n+    public static <K,V> SortedMap<K,V> decorate(SortedMap<K,V> map, Transformer<? super K, ? extends V> factory) {\n+        return getLazySortedMap(map, factory);\n+    }\n+\n+    /**\n+     * Factory method to create a lazily instantiated sorted map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static <K, V> SortedMap<K, V> getLazySortedMap(SortedMap<K, V> map, Transformer<? super K, ? extends V> factory) {\n+        return new LazySortedMap<K,V>(map, factory);\n     }\n \n     //-----------------------------------------------------------------------\n      * @param factory  the factory to use, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n      */\n-    protected LazySortedMap(SortedMap map, Factory factory) {\n+    protected LazySortedMap(SortedMap<K,V> map, Factory<? extends V> factory) {\n         super(map, factory);\n     }\n \n      * @param factory  the factory to use, must not be null\n      * @throws IllegalArgumentException if map or factory is null\n      */\n-    protected LazySortedMap(SortedMap map, Transformer factory) {\n+    protected LazySortedMap(SortedMap<K,V> map, Transformer<? super K, ? extends V> factory) {\n         super(map, factory);\n     }\n \n      * \n      * @return the decorated map\n      */\n-    protected SortedMap getSortedMap() {\n-        return (SortedMap) map;\n+    protected SortedMap<K,V> getSortedMap() {\n+        return (SortedMap<K,V>) map;\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object firstKey() {\n+    public K firstKey() {\n         return getSortedMap().firstKey();\n     }\n \n-    public Object lastKey() {\n+    public K lastKey() {\n         return getSortedMap().lastKey();\n     }\n \n-    public Comparator comparator() {\n+    public Comparator<? super K> comparator() {\n         return getSortedMap().comparator();\n     }\n \n-    public SortedMap subMap(Object fromKey, Object toKey) {\n-        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n-        return new LazySortedMap(map, factory);\n+    public SortedMap<K,V> subMap(K fromKey, K toKey) {\n+        SortedMap<K,V> map = getSortedMap().subMap(fromKey, toKey);\n+        return new LazySortedMap<K,V>(map, factory);\n     }\n \n-    public SortedMap headMap(Object toKey) {\n-        SortedMap map = getSortedMap().headMap(toKey);\n-        return new LazySortedMap(map, factory);\n+    public SortedMap<K,V> headMap(K toKey) {\n+        SortedMap<K,V> map = getSortedMap().headMap(toKey);\n+        return new LazySortedMap<K,V>(map, factory);\n     }\n \n-    public SortedMap tailMap(Object fromKey) {\n-        SortedMap map = getSortedMap().tailMap(fromKey);\n-        return new LazySortedMap(map, factory);\n+    public SortedMap<K,V> tailMap(K fromKey) {\n+        SortedMap<K,V> map = getSortedMap().tailMap(fromKey);\n+        return new LazySortedMap<K,V>(map, factory);\n     }\n \n }", "timestamp": 1252994168, "metainfo": ""}