{"sha": "8f77a02066d791c25454a5c19d24e471c4678c20", "log": "* fix problems with IntListList and ListIntList equals methods * throw IndexOutOfBounds instead of IllegalArgument, where necessary * re-enable TestArrayIntList suite * re-enable primitives.TestAll suite from root (not clear why this would have been disabled)   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractRandomAccessIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.3 2003/01/07 01:29:28 rwaldhoff Exp $\n- * $Revision: 1.3 $\n- * $Date: 2003/01/07 01:29:28 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractRandomAccessIntList.java,v 1.4 2003/01/07 13:24:52 rwaldhoff Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2003/01/07 13:24:52 $\n  *\n  * ====================================================================\n  *\n     protected static class RandomAccessIntSubList extends AbstractRandomAccessIntList implements IntList {\n         RandomAccessIntSubList(AbstractRandomAccessIntList list, int fromIndex, int toIndex) {\n             if(fromIndex < 0 || toIndex > list.size() || fromIndex > toIndex) {\n-                throw new IllegalArgumentException();\n+                throw new IndexOutOfBoundsException();\n             } else {\n                 _list = list;\n                 _offset = fromIndex;\n     \n         private void checkRange(int index) {\n             if(index < 0 || index >= size()) {\n-                throw new IllegalArgumentException(\"index \" + index + \" not in [0,\" + size() + \")\");\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \")\");\n             }\n         }\n           \n         private void checkRangeIncludingEndpoint(int index) {\n             if(index < 0 || index > size()) {\n-                throw new IllegalArgumentException(\"index \" + index + \" not in [0,\" + size() + \"]\");\n+                throw new IndexOutOfBoundsException(\"index \" + index + \" not in [0,\" + size() + \"]\");\n             }\n         }\n           \n--- a/src/java/org/apache/commons/collections/primitives/IntListList.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntListList.java,v 1.2 2003/01/07 00:59:51 rwaldhoff Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/01/07 00:59:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntListList.java,v 1.3 2003/01/07 13:24:52 rwaldhoff Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2003/01/07 13:24:52 $\n  *\n  * ====================================================================\n  *\n  * Adapts an {@link IntList} to the\n  * {@link java.util.List List} interface.\n  *\n- * @version $Revision: 1.2 $ $Date: 2003/01/07 00:59:51 $\n+ * @version $Revision: 1.3 $ $Date: 2003/01/07 13:24:52 $\n  * @author Rodney Waldhoff \n  */\n public class IntListList extends IntCollectionCollection implements List {\n     }\n \n     public boolean equals(Object that) {\n-        if(that instanceof IntList) {\n-            return _list.equals(ListIntList.wrap((List)that));\n+        if(that instanceof List) {\n+            try {\n+                return _list.equals(ListIntList.wrap((List)that));\n+            } catch(NullPointerException e) {\n+                return false;\n+            } catch(ClassCastException e) {\n+                return false;\n+            }\n         } else {\n             return super.equals(that);\n         }\n--- a/src/java/org/apache/commons/collections/primitives/ListIntList.java\n+++ b/src/java/org/apache/commons/collections/primitives/ListIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ListIntList.java,v 1.1 2003/01/07 00:59:51 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2003/01/07 00:59:51 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/ListIntList.java,v 1.2 2003/01/07 13:24:52 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2003/01/07 13:24:52 $\n  *\n  * ====================================================================\n  *\n  * Adapts a {@link Number}-valued {@link java.util.List List} \n  * to the {@link IntList} interface.\n  *\n- * @version $Revision: 1.1 $ $Date: 2003/01/07 00:59:51 $\n+ * @version $Revision: 1.2 $ $Date: 2003/01/07 13:24:52 $\n  * @author Rodney Waldhoff \n  */\n public class ListIntList extends CollectionIntCollection implements IntList {\n     }\n \n     public boolean equals(Object that) {\n-        if(that instanceof List) {\n-            try {\n-                return _list.equals(ListIntList.wrap((List)that));\n-            } catch(ClassCastException e) {\n-                return false;\n-            } catch(NullPointerException e) {\n-                return false;\n-            }\n+        if(that instanceof IntList) {\n+            return _list.equals(IntListList.wrap((IntList)that));\n         } else {\n             return super.equals(that);\n         }\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.37 2002/11/18 23:58:46 scolebourne Exp $\n- * $Revision: 1.37 $\n- * $Date: 2002/11/18 23:58:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.38 2003/01/07 13:24:52 rwaldhoff Exp $\n+ * $Revision: 1.38 $\n+ * $Date: 2003/01/07 13:24:52 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.37 2002/11/18 23:58:46 scolebourne Exp $\n+ * @version $Id: TestAll.java,v 1.38 2003/01/07 13:24:52 rwaldhoff Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestIteratorUtils.suite());\n         suite.addTest(org.apache.commons.collections.comparators.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.iterators.TestAll.suite());\n-//        suite.addTest(org.apache.commons.collections.primitives.TestAll.suite());\n+        suite.addTest(org.apache.commons.collections.primitives.TestAll.suite());\n         return suite;\n     }\n         \n--- a/src/test/org/apache/commons/collections/primitives/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.4 2003/01/07 01:29:28 rwaldhoff Exp $\n- * $Revision: 1.4 $\n- * $Date: 2003/01/07 01:29:28 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.5 2003/01/07 13:24:52 rwaldhoff Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2003/01/07 13:24:52 $\n  *\n  * ====================================================================\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/01/07 01:29:28 $\n+ * @version $Revision: 1.5 $ $Date: 2003/01/07 13:24:52 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         \n-        //suite.addTest(TestArrayIntList.suite());\n+        suite.addTest(TestArrayIntList.suite());\n         //suite.addTest(TestArrayUnsignedShortList.suite());\n         \n         suite.addTest(TestUnsignedByteArrayList.suite());\n--- a/src/test/org/apache/commons/collections/primitives/TestArrayIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestArrayIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayIntList.java,v 1.2 2003/01/07 01:29:28 rwaldhoff Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/01/07 01:29:28 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestArrayIntList.java,v 1.3 2003/01/07 13:24:52 rwaldhoff Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2003/01/07 13:24:52 $\n  *\n  * ====================================================================\n  *\n \n package org.apache.commons.collections.primitives;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n import junit.framework.Test;\n import org.apache.commons.collections.TestList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/01/07 01:29:28 $\n+ * @version $Revision: 1.3 $ $Date: 2003/01/07 13:24:52 $\n  * @author Rodney Waldhoff\n  */\n public class TestArrayIntList extends TestList {\n \n     //------------------------------------------------------------------- Tests\n \n+    public void testEqualsWithTwoIntLists() {\n+        IntList one = new ArrayIntList();\n+        assertEquals(\"Equals is reflexive on empty list\",one,one);\n+        IntList two = new ArrayIntList();\n+        assertEquals(\"Empty lists are equal\",one,two);\n+        assertEquals(\"Equals is symmetric on empty lists\",two,one);\n+        \n+        one.add(1);\n+        assertEquals(\"Equals is reflexive on non empty list\",one,one);\n+        assertTrue(!one.equals(two));\n+        assertTrue(!two.equals(one));\n+\n+        two.add(1);\n+        assertEquals(\"Non empty lists are equal\",one,two);\n+        assertEquals(\"Equals is symmetric on non empty list\",one,two);\n+        \n+        one.add(1); one.add(2); one.add(3); one.add(5); one.add(8);\n+        assertEquals(\"Equals is reflexive on larger non empty list\",one,one);\n+        assertTrue(!one.equals(two));\n+        assertTrue(!two.equals(one));\n+        \n+        two.add(1); two.add(2); two.add(3); two.add(5); two.add(8);\n+        assertEquals(\"Larger non empty lists are equal\",one,two);\n+        assertEquals(\"Equals is symmetric on larger non empty list\",two,one);\n+    }\n+\n+    public void testIntSubListEquals() {\n+        IntList one = new ArrayIntList();\n+        assertEquals(one,one.subList(0,0));\n+        assertEquals(one.subList(0,0),one);\n+        \n+        one.add(1);\n+        assertEquals(one,one.subList(0,1));\n+        assertEquals(one.subList(0,1),one);\n+\n+        one.add(1); one.add(2); one.add(3); one.add(5); one.add(8);\n+        assertEquals(one.subList(0,4),one.subList(0,4));\n+        assertEquals(one.subList(3,5),one.subList(3,5));\n+    }\n+    \n+    public void testEqualsWithIntListAndList() {\n+        IntList ilist = new ArrayIntList();\n+        List list = new ArrayList();\n+        \n+        assertTrue(\"Unwrapped, empty List is not equal to empty IntList.\",!ilist.equals(list));\n+        assertTrue(\"Unwrapped, empty IntList is not equal to empty List.\",!list.equals(ilist));\n+        \n+        assertEquals(new ListIntList(list),ilist);\n+        assertEquals(ilist,new ListIntList(list));\n+        assertEquals(new IntListList(ilist),list);\n+        assertEquals(list,new IntListList(ilist));\n+        \n+        ilist.add(1);\n+        list.add(new Integer(1));\n+\n+        assertTrue(\"Unwrapped, non-empty List is not equal to non-empty IntList.\",!ilist.equals(list));\n+        assertTrue(\"Unwrapped, non-empty IntList is not equal to non-empty List.\",!list.equals(ilist));\n+        \n+        assertEquals(new ListIntList(list),ilist);\n+        assertEquals(ilist,new ListIntList(list));\n+        assertEquals(new IntListList(ilist),list);\n+        assertEquals(list,new IntListList(ilist));\n+                \n+        ilist.add(1); ilist.add(2); ilist.add(3); ilist.add(5); ilist.add(8);\n+        list.add(new Integer(1)); list.add(new Integer(2)); list.add(new Integer(3)); list.add(new Integer(5)); list.add(new Integer(8));\n+\n+        assertTrue(\"Unwrapped, non-empty List is not equal to non-empty IntList.\",!ilist.equals(list));\n+        assertTrue(\"Unwrapped, non-empty IntList is not equal to non-empty List.\",!list.equals(ilist));\n+        \n+        assertEquals(new ListIntList(list),ilist);\n+        assertEquals(ilist,new ListIntList(list));\n+        assertEquals(new IntListList(ilist),list);\n+        assertEquals(list,new IntListList(ilist));\n+        \n+    }\n+\n     public void testClearAndSize() {\n         IntList list = new ArrayIntList();\n         assertEquals(0, list.size());\n-        for (int i = 0; i < 100; i++) {\n+        for(int i = 0; i < 100; i++) {\n             list.add(i);\n         }\n         assertEquals(100, list.size());\n         list.clear();\n         assertEquals(0, list.size());\n     }\n+\n+    public void testRemoveViaSubList() {\n+        IntList list = new ArrayIntList();\n+        for(int i = 0; i < 100; i++) {\n+            list.add(i);\n+        }\n+        IntList sub = list.subList(25,75);\n+        assertEquals(50,sub.size());\n+        for(int i = 0; i < 50; i++) {\n+            assertEquals(100-i,list.size());\n+            assertEquals(50-i,sub.size());\n+            assertEquals(25+i,sub.removeElementAt(0));\n+            assertEquals(50-i-1,sub.size());\n+            assertEquals(100-i-1,list.size());\n+        }\n+        assertEquals(0,sub.size());\n+        assertEquals(50,list.size());        \n+    }\n+    \n \n     public void testAddGet() {\n         IntList list = new ArrayIntList();", "timestamp": 1041945892, "metainfo": ""}