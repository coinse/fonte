{"sha": "5bf548140840d3a97aaf3eb9cff7572510f16132", "log": "Added documentation, and updating formatting of some documentation (i.e. put \"code\" within <code>...</code>)  Added check for a valid capacity argument passed to constructor.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BinaryHeap.java\n+++ b/src/java/org/apache/commons/collections/BinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.3 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/02/10 08:07:42 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BinaryHeap.java,v 1.4 2002/02/22 04:16:19 mas Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/02/22 04:16:19 $\n  *\n  * ====================================================================\n  *\n     protected Comparable[]          m_elements;\n     protected boolean               m_isMinHeap;\n \n+    /**\n+     *  Create a new minimum binary heap.\n+     */\n     public BinaryHeap()\n     {\n         this( DEFAULT_CAPACITY, true );\n     }\n \n+    /**\n+     *  Create a new minimum binary heap with the specified initial capacity.\n+     *  \n+     *  @param capacity the initial capacity for the heap.  This value must\n+     *  be greater than zero.\n+     *\n+     *  @exception IllegalArgumentException \n+     *   if <code>capacity</code> is &lt;= <code>0</code>\n+     **/\n     public BinaryHeap( final int capacity )\n     {\n         this( capacity, true );\n     }\n \n+    /**\n+     *  Create a new minimum or maximum binary heap\n+     *\n+     *  @param isMinHeap if <code>true</code> the heap is created as a \n+     *  minimum heap; otherwise, the heap is created as a maximum heap.\n+     **/\n     public BinaryHeap( final boolean isMinHeap )\n     {\n         this( DEFAULT_CAPACITY, isMinHeap );\n     }\n \n+    /**\n+     *  Create a new minimum or maximum binary heap with the specified \n+     *  initial capacity.\n+     *\n+     *  @param capacity the initial capacity for the heap.  This value must \n+     *  be greater than zero.\n+     *\n+     *  @param isMinHeap if <code>true</code> the heap is created as a \n+     *  minimum heap; otherwise, the heap is created as a maximum heap.\n+     *\n+     *  @exception IllegalArgumentException \n+     *   if <code>capacity</code> is <code>&lt;= 0</code>\n+     **/\n     public BinaryHeap( final int capacity, final boolean isMinHeap )\n     {\n+        if( capacity <= 0 ) {\n+            throw new IllegalArgumentException( \"invalid capacity\" );\n+        }\n         m_isMinHeap = isMinHeap;\n \n         //+1 as 0 is noop\n     /**\n      * Test if queue is empty.\n      *\n-     * @return true if queue is empty else false.\n+     * @return <code>true</code> if queue is empty; <code>false</code> \n+     * otherwise.\n      */\n     public boolean isEmpty()\n     {\n     /**\n      * Test if queue is full.\n      *\n-     * @return true if queue is full else false.\n+     * @return <code>true</code> if queue is full; <code>false</code>\n+     * otherwise.\n      */\n     public boolean isFull()\n     {\n      * Return element on top of heap but don't remove it.\n      *\n      * @return the element at top of heap\n-     * @exception NoSuchElementException if isEmpty() == true\n+     * @exception NoSuchElementException if <code>isEmpty() == true</code>\n      */\n     public Comparable peek() throws NoSuchElementException\n     {\n      * Return element on top of heap and remove it.\n      *\n      * @return the element at top of heap\n-     * @exception NoSuchElementException if isEmpty() == true\n+     * @exception NoSuchElementException if <code>isEmpty() == true</code>\n      */\n     public Comparable pop() throws NoSuchElementException\n     {\n      * Percolate element down heap from top.\n      * Assume it is a maximum heap.\n      *\n-     * @param element the element\n+     * @param index the index for the element\n      */\n     protected void percolateDownMinHeap( final int index )\n     {\n      * Percolate element down heap from top.\n      * Assume it is a maximum heap.\n      *\n-     * @param element the element\n+     * @param index the index of the element\n      */\n     protected void percolateDownMaxHeap( final int index )\n     {\n         m_elements[ hole ] = element;\n     }\n \n+    /**\n+     *  Increase the size of the heap to support additional elements\n+     **/\n     protected void grow()\n     {\n         final Comparable[] elements =", "timestamp": 1014351379, "metainfo": ""}