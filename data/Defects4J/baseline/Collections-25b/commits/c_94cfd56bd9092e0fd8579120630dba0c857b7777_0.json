{"sha": "94cfd56bd9092e0fd8579120630dba0c857b7777", "log": "Use varargs instead of arrays as input argument where applicable.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/ComparatorUtils.java\n     }\n \n     /**\n-     * Gets a comparator that compares using two {@link Comparator}s.\n-     * <p>\n-     * The second comparator is used if the first comparator returns equal.\n-     *\n-     * @param <E>  the object type to compare\n-     * @param comparator1  the first comparator to use, not null\n-     * @param comparator2  the first comparator to use, not null\n-     * @return a {@link ComparatorChain} formed from the two comparators\n-     * @throws NullPointerException if either comparator is null\n-     * @see ComparatorChain\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <E extends Comparable<? super E>> Comparator<E> chainedComparator(final Comparator<E> comparator1,\n-                                                                                    final Comparator<E> comparator2) {\n-        return chainedComparator(new Comparator[] {comparator1, comparator2});\n-    }\n-\n-    /**\n      * Gets a comparator that compares using an array of {@link Comparator}s, applied\n      * in sequence until one returns not equal or the array is exhausted.\n      *\n      * @see ComparatorChain\n      */\n     public static <E extends Comparable<? super E>> Comparator<E> chainedComparator(\n-            final Comparator<E>[] comparators) {\n+            final Comparator<E>... comparators) {\n \n         final ComparatorChain<E> chain = new ComparatorChain<E>();\n         for (final Comparator<E> comparator : comparators) {\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n      * @return  an iterator over the array\n      * @throws NullPointerException if array is null\n      */\n-    public static <E> ResettableIterator<E> arrayIterator(final E[] array) {\n+    public static <E> ResettableIterator<E> arrayIterator(final E... array) {\n         return new ObjectArrayIterator<E>(array);\n     }\n \n      * @return  a list iterator over the array\n      * @throws NullPointerException if array is null\n      */\n-    public static <E> ResettableListIterator<E> arrayListIterator(final E[] array) {\n+    public static <E> ResettableListIterator<E> arrayListIterator(final E... array) {\n         return new ObjectArrayListIterator<E>(array);\n     }\n \n     // Chained\n     //-----------------------------------------------------------------------\n     /**\n-     * Gets an iterator that iterates through two {@link Iterator}s\n-     * one after another.\n-     *\n-     * @param <E>  the element type\n-     * @param iterator1  the first iterator to use, not null\n-     * @param iterator2  the second iterator to use, not null\n-     * @return a combination iterator over the iterators\n-     * @throws NullPointerException if either iterator is null\n-     */\n-    public static <E> Iterator<E> chainedIterator(final Iterator<? extends E> iterator1,\n-                                                  final Iterator<? extends E> iterator2) {\n-        return new IteratorChain<E>(iterator1, iterator2);\n-    }\n-\n-    /**\n      * Gets an iterator that iterates through an array of {@link Iterator}s\n      * one after another.\n      *\n      * @return a combination iterator over the iterators\n      * @throws NullPointerException if iterators array is null or contains a null\n      */\n-    public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>[] iterators) {\n+    public static <E> Iterator<E> chainedIterator(final Iterator<? extends E>... iterators) {\n         return new IteratorChain<E>(iterators);\n     }\n \n      * @throws NullPointerException if iterators array is null or contains a null value\n      */\n     public static <E> Iterator<E> collatedIterator(final Comparator<? super E> comparator,\n-                                                   final Iterator<? extends E>[] iterators) {\n+                                                   final Iterator<? extends E>... iterators) {\n         return new CollatingIterator<E>(comparator, iterators);\n     }\n \n--- a/src/main/java/org/apache/commons/collections4/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/MapUtils.java\n      * @since 3.2\n      */\n     @SuppressWarnings(\"unchecked\") // As per Javadoc throws CCE for invalid array contents\n-    public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object[] array) {\n+    public static <K, V> Map<K, V> putAll(final Map<K, V> map, final Object... array) {\n         map.size();  // force NPE\n         if (array == null || array.length == 0) {\n             return map;\n--- a/src/main/java/org/apache/commons/collections4/TransformerUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/TransformerUtils.java\n     }\n \n     /**\n-     * Create a new Transformer that calls two transformers, passing the result of\n-     * the first into the second.\n-     *\n-     * @param <T>  the input/output type\n-     * @param transformer1  the first transformer\n-     * @param transformer2  the second transformer\n-     * @return the transformer\n-     * @throws IllegalArgumentException if either transformer is null\n-     * @see org.apache.commons.collections4.functors.ChainedTransformer\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static <T> Transformer<T, T> chainedTransformer(\n-            final Transformer<? super T, ? extends T> transformer1,\n-            final Transformer<? super T, ? extends T> transformer2) {\n-        return ChainedTransformer.<T> chainedTransformer(transformer1, transformer2);\n-    }\n-\n-    /**\n      * Create a new Transformer that calls each transformer in turn, passing the\n      * result into the next transformer.\n      *\n      * @throws IllegalArgumentException if the transformers array or any of the transformers is null\n      * @see org.apache.commons.collections4.functors.ChainedTransformer\n      */\n-    public static <T> Transformer<T, T> chainedTransformer(final Transformer<? super T, ? extends T>[] transformers) {\n+    public static <T> Transformer<T, T> chainedTransformer(\n+            final Transformer<? super T, ? extends T>... transformers) {\n         return ChainedTransformer.chainedTransformer(transformers);\n     }\n ", "timestamp": 1367769675, "metainfo": ""}