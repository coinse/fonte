{"sha": "f99ac98da4f1cbe2710348ebcc5645c5364e6d27", "log": "Complete javadoc, minor formatting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n      * If the input collection or predicate is null, or no element of the collection\n      * matches the predicate, null is returned.\n      *\n+     * @param <T>  the type of object the {@link Collection} contains\n      * @param collection  the collection to search, may be null\n      * @param predicate  the predicate to use, may be null\n      * @return the first element of the collection which matches the predicate or null if none could be found\n      * <p>\n      * If the input collection or closure is null, there is no change made.\n      *\n-     * @param collection\n-     *            the collection to get the input from, may be null\n-     * @param closure\n-     *            the closure to perform, may be null\n+     * @param <T>  the type of object the {@link Collection} contains\n+     * @param <C>  the closure type\n+     * @param collection  the collection to get the input from, may be null\n+     * @param closure  the closure to perform, may be null\n      * @return closure\n      */\n     public static <T, C extends Closure<? super T>> C forAllDo(final Collection<T> collection, final C closure) {\n      * <p>\n      * If the input collection or closure is null, there is no change made.\n      *\n-     * @param iterator\n-     *            the iterator to get the input from, may be null\n-     * @param closure\n-     *            the closure to perform, may be null\n+     * @param <T>  the type of object the {@link Iterator} contains\n+     * @param <C>  the closure type\n+     * @param iterator  the iterator to get the input from, may be null\n+     * @param closure  the closure to perform, may be null\n      * @return closure\n      * @since 4.0\n      */\n      * predicate returns false, remove the element.\n      * <p>\n      * If the input collection or predicate is null, there is no change made.\n-     * \n-     * @param collection\n-     *            the collection to get the input from, may be null\n-     * @param predicate\n-     *            the predicate to use as a filter, may be null\n+     *\n+     * @param <T>  the type of object the {@link Iterable} contains\n+     * @param collection  the collection to get the input from, may be null\n+     * @param predicate  the predicate to use as a filter, may be null\n      * @return true if the collection is modified by this call, false otherwise.\n      */\n     public static <T> boolean filter(final Iterable<T> collection, final Predicate<? super T> predicate) {\n      * Transformer creates duplicates (or are otherwise invalid), the collection\n      * may reduce in size due to calling this method.\n      *\n-     * @param collection\n-     *            the {@link Iterable} to get the input from, may be null\n-     * @param transformer\n-     *            the transformer to perform, may be null\n+     * @param <C>  the type of object the {@link Collection} contains\n+     * @param collection  the {@link Iterable} to get the input from, may be null\n+     * @param transformer  the transformer to perform, may be null\n      */\n     public static <C> void transform(final Collection<C> collection,\n             final Transformer<? super C, ? extends C> transformer) {\n+\n         if (collection != null && transformer != null) {\n             if (collection instanceof List<?>) {\n                 final List<C> list = (List<C>) collection;\n      * <p>\n      * A <code>null</code> collection or predicate matches no elements.\n      *\n-     * @param input\n-     *            the {@link Iterable} to get the input from, may be null\n-     * @param predicate\n-     *            the predicate to use, may be null\n+     * @param <C>  the type of object the {@link Iterable} contains\n+     * @param input  the {@link Iterable} to get the input from, may be null\n+     * @param predicate  the predicate to use, may be null\n      * @return the number of matches for the predicate in the collection\n      */\n     public static <C> int countMatches(final Iterable<C> input, final Predicate<? super C> predicate) {\n      * <p>\n      * A <code>null</code> collection or predicate returns false.\n      *\n-     * @param input\n-     *            the {@link Iterable} to get the input from, may be null\n-     * @param predicate\n-     *            the predicate to use, may be null\n-     * @return true if at least one element of the collection matches the\n-     *         predicate\n+     * @param <C>  the type of object the {@link Iterable} contains\n+     * @param input  the {@link Iterable} to get the input from, may be null\n+     * @param predicate  the predicate to use, may be null\n+     * @return true if at least one element of the collection matches the predicate\n      */\n     public static <C> boolean exists(final Iterable<C> input, final Predicate<? super C> predicate) {\n         if (input != null && predicate != null) {\n      * <p>\n      * A <code>null</code> predicate matches no elements.\n      *\n-     * @param inputCollection\n-     *            the collection to get the input from, may not be null\n-     * @param predicate\n-     *            the predicate to use, may be null\n+     * @param <O>  the type of object the {@link Collection} contains\n+     * @param inputCollection  the collection to get the input from, may not be null\n+     * @param predicate  the predicate to use, may be null\n      * @return the elements matching the predicate (new list)\n-     * @throws NullPointerException\n-     *             if the input collection is null\n+     * @throws NullPointerException if the input collection is null\n      */\n     public static <O> Collection<O> select(final Collection<? extends O> inputCollection,\n             final Predicate<? super O> predicate) {\n      * If the input collection or predicate is null, there is no change to the\n      * output collection.\n      *\n-     * @param inputCollection\n-     *            the collection to get the input from, may be null\n-     * @param predicate\n-     *            the predicate to use, may be null\n-     * @param outputCollection\n-     *            the collection to output into, may not be null if the inputCollection\n-     *            and predicate or not null\n+     * @param <O>  the type of object the {@link Collection} contains\n+     * @param <R>  the type of the output {@link Collection}\n+     * @param inputCollection  the collection to get the input from, may be null\n+     * @param predicate  the predicate to use, may be null\n+     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n+     *   and predicate or not null\n      * @return the outputCollection\n      */\n     public static <O, R extends Collection<? super O>> R select(final Collection<? extends O> inputCollection,\n             final Predicate<? super O> predicate, final R outputCollection) {\n+\n         if (inputCollection != null && predicate != null) {\n             for (final O item : inputCollection) {\n                 if (predicate.evaluate(item)) {\n      * If the input predicate is <code>null</code>, the result is an empty\n      * list.\n      *\n-     * @param inputCollection\n-     *            the collection to get the input from, may not be null\n-     * @param predicate\n-     *            the predicate to use, may be null\n+     * @param <O>  the type of object the {@link Collection} contains\n+     * @param inputCollection  the collection to get the input from, may not be null\n+     * @param predicate  the predicate to use, may be null\n      * @return the elements <b>not</b> matching the predicate (new list)\n-     * @throws NullPointerException\n-     *             if the input collection is null\n+     * @throws NullPointerException if the input collection is null\n      */\n     public static <O> Collection<O> selectRejected(final Collection<? extends O> inputCollection,\n             final Predicate<? super O> predicate) {\n      * If the input predicate is <code>null</code>, no elements are added to\n      * <code>outputCollection</code>.\n      *\n-     * @param inputCollection\n-     *            the collection to get the input from, may be null\n-     * @param predicate\n-     *            the predicate to use, may be null\n-     * @param outputCollection\n-     *            the collection to output into, may not be null if the inputCollection\n-     *            and predicate or not null\n+     * @param <O>  the type of object the {@link Collection} contains\n+     * @param <R>  the type of the output {@link Collection}\n+     * @param inputCollection  the collection to get the input from, may be null\n+     * @param predicate  the predicate to use, may be null\n+     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n+     *   and predicate or not null\n      * @return outputCollection\n      */\n     public static <O, R extends Collection<? super O>> R selectRejected(final Collection<? extends O> inputCollection,\n      * <p>\n      * If the input transformer is null, the result is an empty list.\n      *\n-     * @param inputCollection\n-     *            the collection to get the input from, may not be null\n-     * @param transformer\n-     *            the transformer to use, may be null\n+     * @param inputCollection  the collection to get the input from, may not be null\n+     * @param transformer  the transformer to use, may be null\n      * @param <I> the type of object in the input collection\n      * @param <O> the type of object in the output collection\n      * @return the transformed result (new list)\n-     * @throws NullPointerException\n-     *             if the input collection is null\n+     * @throws NullPointerException if the input collection is null\n      */\n     public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n             final Transformer<? super I, ? extends O> transformer) {\n      * If the input iterator or transformer is null, the result is an empty\n      * list.\n      *\n-     * @param inputIterator\n-     *            the iterator to get the input from, may be null\n-     * @param transformer\n-     *            the transformer to use, may be null\n+     * @param inputIterator  the iterator to get the input from, may be null\n+     * @param transformer  the transformer to use, may be null\n      * @param <I> the type of object in the input collection\n      * @param <O> the type of object in the output collection\n      * @return the transformed result (new list)\n     /**\n      * Adds an element to the collection unless the element is null.\n      *\n+     * @param <T>  the type of object the {@link Collection} contains\n      * @param collection  the collection to add to, must not be null\n      * @param object  the object to add, if null it will not be added\n      * @return true if the collection changed\n      * {@link Iterable} is a {@link Collection} then it is cast and will be\n      * added using {@link Collection#addAll(Collection)} instead of iterating.\n      *\n-     * @param collection\n-     *            the collection to add to, must not be null\n-     * @param iterable\n-     *            the iterable of elements to add, must not be null\n+     * @param <C>  the type of object the {@link Collection} contains\n+     * @param collection  the collection to add to, must not be null\n+     * @param iterable  the iterable of elements to add, must not be null\n      * @return a boolean indicating whether the collection has changed or not.\n-     * @throws NullPointerException\n-     *             if the collection or iterator is null\n+     * @throws NullPointerException if the collection or iterator is null\n      */\n     public static <C> boolean addAll(final Collection<C> collection, final Iterable<? extends C> iterable) {\n         if (iterable instanceof Collection<?>) {\n     /**\n      * Adds all elements in the iteration to the given collection.\n      *\n-     * @param collection\n-     *            the collection to add to, must not be null\n-     * @param iterator\n-     *            the iterator of elements to add, must not be null\n+     * @param <C>  the type of object the {@link Collection} contains\n+     * @param collection  the collection to add to, must not be null\n+     * @param iterator  the iterator of elements to add, must not be null\n      * @return a boolean indicating whether the collection has changed or not.\n-     * @throws NullPointerException\n-     *             if the collection or iterator is null\n+     * @throws NullPointerException if the collection or iterator is null\n      */\n     public static <C> boolean addAll(final Collection<C> collection, final Iterator<? extends C> iterator) {\n         boolean changed = false;\n     /**\n      * Adds all elements in the enumeration to the given collection.\n      *\n+     * @param <C>  the type of object the {@link Collection} contains\n      * @param collection  the collection to add to, must not be null\n      * @param enumeration  the enumeration of elements to add, must not be null\n+     * @return {@code true} if the collections was changed, {@code false} otherwise\n      * @throws NullPointerException if the collection or enumeration is null\n      */\n     public static <C> boolean addAll(final Collection<C> collection, final Enumeration<? extends C> enumeration) {\n     /**\n      * Adds all elements in the array to the given collection.\n      *\n-     * @param collection\n-     *            the collection to add to, must not be null\n-     * @param elements\n-     *            the array of elements to add, must not be null\n-     * @throws NullPointerException\n-     *             if the collection or array is null\n+     * @param <C>  the type of object the {@link Collection} contains\n+     * @param collection  the collection to add to, must not be null\n+     * @param elements  the array of elements to add, must not be null\n+     * @return {@code true} if the collection was changed, {@code false} otherwise\n+     * @throws NullPointerException if the collection or array is null\n      */\n     public static <C> boolean addAll(final Collection<C> collection, final C[] elements) {\n         boolean changed = false;\n     /**\n      * Returns the <code>index</code>-th value in {@link Iterator}, throwing\n      * <code>IndexOutOfBoundsException</code> if there is no such element.\n-     * The Iterator is advanced to\n-     *      <code>index</code> (or to the end, if <code>index</code> exceeds the\n-     *      number of entries) as a side effect of this method.</li>\n+     * <p>\n+     * The Iterator is advanced to <code>index</code> (or to the end, if\n+     * <code>index</code> exceeds the number of entries) as a side effect of this method.\n      *\n      * @param iterator  the iterator to get a value from\n      * @param index  the index to get\n     public static <T> T get(final Iterator<T> iterator, final int index) {\n         int i = index;\n         checkIndexBounds(i);\n-            while (iterator.hasNext()) {\n-                i--;\n-                if (i == -1) {\n-                    return iterator.next();\n-                }\n-                iterator.next();\n-            }\n-            throw new IndexOutOfBoundsException(\"Entry does not exist: \" + i);\n+        while (iterator.hasNext()) {\n+            i--;\n+            if (i == -1) {\n+                return iterator.next();\n+            }\n+            iterator.next();\n+        }\n+        throw new IndexOutOfBoundsException(\"Entry does not exist: \" + i);\n     }\n \n     /**\n     }\n \n     /**\n-     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>, throwing\n-     * <code>IndexOutOfBoundsException</code> if there is no such element.\n-     *\n+     * Returns the <code>index</code>-th <code>Map.Entry</code> in the <code>map</code>'s <code>entrySet</code>,\n+     * throwing <code>IndexOutOfBoundsException</code> if there is no such element.\n+     *\n+     * @param <K>  the key type in the {@link Map}\n+     * @param <V>  the key type in the {@link Map}\n      * @param map  the object to get a value from\n      * @param index  the index to get\n      * @return the object at the specified index\n      * case the cardinality is zero. This method is useful if you do not wish to modify\n      * the collection <code>c</code> and thus cannot call <code>c.retainAll(retain);</code>.\n      *\n+     * @param <C>  the type of object the {@link Collection} contains\n      * @param collection  the collection whose contents are the target of the #retailAll operation\n      * @param retain  the collection containing the elements to be retained in the returned collection\n      * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n      * case the cardinality is zero. This method is useful if you do not wish to modify\n      * the collection <code>c</code> and thus cannot call <code>collection.removeAll(remove);</code>.\n      *\n+     * @param <E>  the type of object the {@link Collection} contains\n      * @param collection  the collection from which items are removed (in the returned collection)\n      * @param remove  the items to be removed from the returned <code>collection</code>\n      * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n      *\n      * This method uses the implementation in the decorators subpackage.\n      *\n+     * @param <C>  the type of object the {@link Collection} contains\n      * @param collection  the collection to synchronize, must not be null\n      * @return a synchronized collection backed by the given collection\n      * @throws IllegalArgumentException  if the collection is null\n      * <p>\n      * This method uses the implementation in the decorators subpackage.\n      *\n+     * @param <C>  the type of object the {@link Collection} contains\n      * @param collection  the collection to make unmodifiable, must not be null\n      * @return an unmodifiable collection backed by the given collection\n      * @throws IllegalArgumentException  if the collection is null\n      * Existing entries in the specified collection will not be transformed.\n      * If you want that behaviour, see {@link TransformedCollection#transformedCollection}.\n      *\n+     * @param <E>  the type of object the {@link Collection} contains\n      * @param collection  the collection to predicate, must not be null\n      * @param transformer  the transformer for the collection, must not be null\n      * @return a transformed collection backed by the given collection", "timestamp": 1358777686, "metainfo": ""}