{"sha": "f26c68bf7bd4f73f1c21eb9d1c197bb2ebf08f2b", "log": "Moved all iterators to new iterators subpackage. Deprecated all iterator classes in the main package released in 2.0. Removed all iterator classes from the main package that were not  released yet. Moved test code for iterators into new iterators subpackage. Deleted old iterator test code in the main package. Modified main package TestAll to invoke iterators subpackage TestAll. PR: Obtained from: Submitted by: Reviewed by:   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/ArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ArrayIterator.java,v 1.15 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.15 $\n- * $Date: 2002/08/15 20:04:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ArrayIterator.java,v 1.16 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.16 $\n+ * $Date: 2002/08/15 23:13:51 $\n  *\n  * ====================================================================\n  *\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n   * @author Mauricio S. Moura\n   * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n-  * @version $Revision: 1.15 $\n+  * @version $Revision: 1.16 $\n+  * @deprecated this class has been moved to the iterators subpackage\n   */\n-public class ArrayIterator implements Iterator {\n-    \n-    private Object array;\n-    private int length = 0;\n-    private int index = 0;\n-  \n+public class ArrayIterator \n+extends org.apache.commons.collections.iterators.ArrayIterator {\n     \n     /**\n      *  Construct an ArrayIterator.  Using this constructor, the iterator is\n      *  called to establish the array to iterate over.\n      **/\n     public ArrayIterator() {\n+        super();\n     }\n    \n     /**\n      *  if <code>array</code> is <code>null</code>\n      **/\n     public ArrayIterator(Object array) {\n-        setArray( array );\n+        super(array);\n     }\n \n     /**\n      *  if <code>array</code> is <code>null</code>\n      **/\n     public ArrayIterator(Object array, int start) {\n-        setArray( array );\n-        checkBound(start, \"start\");\n-        this.index = start;\n+        super(array, start);\n     }\n \n     /**\n      *  if <code>array</code> is <code>null</code>\n      **/\n     public ArrayIterator(Object array, int start, int end) {\n-        setArray( array );\n-        checkBound(start, \"start\");\n-        checkBound(end, \"end\");\n-        if(end <= start) {\n-            throw new IllegalArgumentException(\n-                \"End index must be greater than start index. \"\n-            );\n-        }\n-        this.index = start;\n-        this.length = end;\n+        super(array, start, end);\n     }\n \n-    private void checkBound(int bound, String type ) {\n-        if(bound > this.length) {\n-            throw new ArrayIndexOutOfBoundsException(\n-              \"Attempt to make an ArrayIterator that \"+type+\n-              \"s beyond the end of the array. \"\n-            );\n-        }\n-        if(bound < 0) {\n-            throw new ArrayIndexOutOfBoundsException(\n-              \"Attempt to make an ArrayIterator that \"+type+\n-              \"s before the start of the array. \"\n-            );\n-        }\n-    }\n-\n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Returns true if there are more elements to return from the array.\n-     *\n-     *  @return true if there is a next element to return\n-     */\n-    public boolean hasNext() {\n-        return index < length;\n-    }\n-\n-    /**\n-     *  Returns the next element in the array.\n-     *\n-     *  @return the next element in the array\n-     *  @throws NoSuchElementException if all the elements in the array\n-     *    have already been returned\n-     */\n-    public Object next() {\n-        if(!hasNext()) {\n-            throw new NoSuchElementException();\n-        }\n-        return Array.get( array, index++ );\n-    }\n-\n-    /**\n-     *  Throws {@link UnsupportedOperationException}.\n-     *\n-     *  @throws UnsupportedOperationException always\n-     */\n-    public void remove() {\n-        throw new UnsupportedOperationException( \"remove() method is not supported\" );\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Retrieves the array that this iterator is iterating over. \n-     *\n-     *  @return the array this iterator iterates over, or <code>null</code> if\n-     *  the no-arg constructor was used and {@link #setArray(Object)} has never\n-     *  been called with a valid array.\n-     **/\n-    public Object getArray() {\n-        return array;\n-    }\n-    \n-    /**\n-     *  Changes the array that the ArrayIterator should iterate over.  If an\n-     *  array has previously been set (using the single-arg constructor or this\n-     *  method), that array along with the current iterator position within\n-     *  that array is discarded in favor of the argument to this method.  This\n-     *  method can be used in combination with {@link #getArray()} to \"reset\"\n-     *  the iterator to the beginning of the array:\n-     *\n-     *  <pre>\n-     *    ArrayIterator iterator = ...\n-     *    ...\n-     *    iterator.setArray(iterator.getArray());\n-     *  </pre>\n-     *\n-     *  Note: Using i.setArray(i.getArray()) may throw a NullPointerException\n-     *  if no array has ever been set for the iterator (see {@link\n-     *  #getArray()})\n-     *\n-     *  @param array the array that the iterator should iterate over.\n-     *\n-     *  @exception IllegalArgumentException if <code>array</code> is not an\n-     *  array.\n-     *\n-     *  @exception NullPointerException \n-     *  if <code>array</code> is <code>null</code>\n-     **/\n-    public void setArray( Object array ) {\n-        // Array.getLength throws IllegalArgumentException if the object is not\n-        // an array or NullPointerException if the object is null.  This call\n-        // is made before saving the array and resetting the index so that the\n-        // array iterator remains in a consistent state if the argument is not\n-        // an array or is null.\n-        this.length = Array.getLength( array );\n-        this.array = array;\n-        this.index = 0;\n-    }\n }\n--- a/src/java/org/apache/commons/collections/EnumerationIterator.java\n+++ b/src/java/org/apache/commons/collections/EnumerationIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/EnumerationIterator.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/15 20:04:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/EnumerationIterator.java,v 1.6 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/15 23:13:51 $\n  *\n  * ====================================================================\n  *\n   * @since 1.0\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n   * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n+  * @deprecated this class has been moved to the iterators subpackage\n   */\n-public class EnumerationIterator implements Iterator {\n-    \n-    private Collection collection;\n-\n-    private Enumeration enumeration;\n-\n-    private Object last;\n+public class EnumerationIterator\n+extends org.apache.commons.collections.iterators.EnumerationIterator {\n     \n     /**\n      *  Constructs a new <Code>EnumerationIterator</Code> that will not\n      *  function until {@link #setEnumeration(Enumeration)} is called.\n      */\n     public EnumerationIterator() {\n-        this(null, null);\n+        super();\n     }\n \n     /**\n      *  @param enumeration  the enumeration to use\n      */\n     public EnumerationIterator( Enumeration enumeration ) {\n-        this(enumeration, null);\n+        super(enumeration);\n     }\n \n     /**\n      *  @param collection  the collection to remove elements form\n      */\n     public EnumerationIterator( Enumeration enum, Collection collection ) {\n-        this.enumeration = enum;\n-        this.collection = collection;\n-        this.last = null;\n+        super(enum, collection);\n     }\n \n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Returns true if the underlying enumeration has more elements.\n-     *\n-     *  @return true if the underlying enumeration has more elements\n-     *  @throws NullPointerException  if the underlying enumeration is null\n-     */\n-    public boolean hasNext() {\n-        return enumeration.hasMoreElements();\n-    }\n-\n-    /**\n-     *  Returns the next object from the enumeration.\n-     *\n-     *  @return the next object from the enumeration\n-     *  @throws NullPointerException if the enumeration is null\n-     */\n-    public Object next() {\n-        last = enumeration.nextElement();\n-        return last;\n-    }\n-\n-    /**\n-     * Functions if an associated <code>Collection</code> is known.\n-     * If so, the first occurrence of the last returned object from this\n-     * iterator will be removed from the collection.\n-     *\n-     * @exception IllegalStateException <code>next()</code> not called.\n-     * @exception UnsupportedOperationException No associated\n-     * <code>Collection</code>.\n-     */\n-    public void remove() {\n-        if (collection != null) {\n-            if (last != null) {\n-                collection.remove(last);\n-            }\n-            else {\n-                throw new IllegalStateException\n-                    (\"next() must have been called for remove() to function\");\n-            }\n-        }\n-        else {\n-            throw new UnsupportedOperationException\n-                (\"No Collection associated with this Iterator\");\n-        }\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Returns the underlying enumeration.\n-     *\n-     *  @return the underlying enumeration\n-     */\n-    public Enumeration getEnumeration() {\n-        return enumeration;\n-    }\n-\n-    /**\n-     *  Sets the underlying enumeration.\n-     *\n-     *  @param enumeration  the new underlying enumeration\n-     */\n-    public void setEnumeration( Enumeration enumeration ) {\n-        this.enumeration = enumeration;\n-    }\n }\n--- a/src/java/org/apache/commons/collections/FilterIterator.java\n+++ b/src/java/org/apache/commons/collections/FilterIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/FilterIterator.java,v 1.6 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/15 20:04:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/FilterIterator.java,v 1.7 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/15 23:13:51 $\n  *\n  * ====================================================================\n  *\n   * @since 1.0\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n   * @author Jan Sorensen\n+  * @deprecated this class has been moved to the iterators subpackage\n   */\n \n-public class FilterIterator extends ProxyIterator {\n-    \n-    /** Holds value of property predicate. */\n-    private Predicate predicate;\n-\n-    private Object nextObject;\n-    private boolean nextObjectSet = false;\n-    \n-    \n-    //-------------------------------------------------------------------------\n+public class FilterIterator \n+extends org.apache.commons.collections.iterators.FilterIterator {\n \n     /**\n      *  Constructs a new <Code>FilterIterator</Code> that will not function\n      *  until {@link #setIterator(Iterator) setIterator} is invoked.\n      */\n     public FilterIterator() {\n+        super();\n     }\n     \n     /**\n      *  @param predicate  the predicate to use\n      */\n     public FilterIterator( Iterator iterator, Predicate predicate ) {\n-        super( iterator );\n-        this.predicate = predicate;\n+        super( iterator, predicate );\n     }\n \n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-    \n-    /** \n-     *  Returns true if the underlying iterator contains an object that \n-     *  matches the predicate.\n-     *\n-     *  @return true if there is another object that matches the predicate \n-     */\n-    public boolean hasNext() {\n-        if ( nextObjectSet ) {\n-            return true;\n-        } else {\n-            return setNextObject();\n-        }\n-    }\n-\n-    /** \n-     *  Returns the next object that matches the predicate.\n-     * \n-     *  @return the next object which matches the given predicate\n-     *  @throws NoSuchElementException if there are no more elements that\n-     *   match the predicate \n-     */\n-    public Object next() {\n-        if ( !nextObjectSet ) {\n-            if (!setNextObject()) {\n-                throw new NoSuchElementException();\n-            }\n-        }\n-        nextObjectSet = false;\n-        return nextObject;\n-    }\n-\n-    /**\n-     * Always throws UnsupportedOperationException as this class \n-     * does look-ahead with its internal iterator.\n-     *\n-     * @throws UnsupportedOperationException  always\n-     */\n-    public void remove() {\n-        throw new UnsupportedOperationException();\n-    }\n-        \n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-    /** Getter for property predicate.\n-     * @return Value of property predicate.\n-     */\n-    public Predicate getPredicate() {\n-        return predicate;\n-    }\n-    /** Setter for property predicate.\n-     * @param predicate New value of property predicate.\n-     */\n-    public void setPredicate(Predicate predicate) {\n-        this.predicate = predicate;\n-    }\n-\n-    /**\n-     * Set nextObject to the next object. If there are no more \n-     * objects then return false. Otherwise, return true.\n-     */\n-    private boolean setNextObject() {\n-        Iterator iterator = getIterator();\n-        Predicate predicate = getPredicate();\n-        while ( iterator.hasNext() ) {\n-            Object object = iterator.next();\n-            if ( predicate.evaluate( object ) ) {\n-                nextObject = object;\n-                nextObjectSet = true;\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n }\n--- a/src/java/org/apache/commons/collections/FilterListIterator.java\n+++ b/src/java/org/apache/commons/collections/FilterListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/FilterListIterator.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/15 20:04:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/FilterListIterator.java,v 1.6 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/15 23:13:51 $\n  *\n  * ====================================================================\n  *\n   * returned by the iterator.\n   * \n   * @since 2.0\n-  * @version $Revision: 1.5 $ $Date: 2002/08/15 20:04:31 $\n+  * @version $Revision: 1.6 $ $Date: 2002/08/15 23:13:51 $\n   * @author Rodney Waldhoff\n+  * @deprecated this class has been moved to the iterators subpackage\n   */\n-public class FilterListIterator extends ProxyListIterator {\n+public class FilterListIterator \n+extends org.apache.commons.collections.iterators.FilterListIterator {\n \n     // Constructors    \n     //-------------------------------------------------------------------------\n      *  and {@link #setPredicate(Predicate) setPredicate} are invoked.\n      */\n     public FilterListIterator() {\n+        super();\n     }\n \n     /**\n      *  @param predicate  the predicate to use\n      */\n     public FilterListIterator(ListIterator iterator, Predicate predicate) {\n-        super(iterator);\n-        this.predicate = predicate;\n+        super(iterator, predicate);\n     }\n \n     /**\n      *  @param predicate  the predicate to use.\n      */\n     public FilterListIterator(Predicate predicate) {\n-        this.predicate = predicate;\n+        super(predicate);\n     }\n \n-    // ListIterator interface\n-    //-------------------------------------------------------------------------\n-\n-    /** Not supported. */\n-    public void add(Object o) {\n-        throw new UnsupportedOperationException(\"FilterListIterator.add(Object) is not supported.\");\n-    }\n-\n-    public boolean hasNext() {\n-        if(nextObjectSet) {\n-            return true;\n-        } else {\n-            return setNextObject();\n-        }\n-    }\n-\n-    public boolean hasPrevious() {\n-        if(previousObjectSet) {\n-            return true;\n-        } else {\n-            return setPreviousObject();\n-        }\n-    }\n-\n-    public Object next() {\n-        if(!nextObjectSet) {\n-            if(!setNextObject()) {\n-                throw new NoSuchElementException();\n-            }\n-        }\n-        nextIndex++;\n-        Object temp = nextObject;\n-        clearNextObject();\n-        return temp;\n-    }\n-\n-    public int nextIndex() {\n-        return nextIndex;\n-    }\n-\n-    public Object previous() {\n-        if(!previousObjectSet) {\n-            if(!setPreviousObject()) {\n-                throw new NoSuchElementException();\n-            }\n-        }\n-        nextIndex--;\n-        Object temp = previousObject;\n-        clearPreviousObject();\n-        return temp;\n-    }\n-\n-    public int previousIndex() {\n-        return (nextIndex-1);\n-    }\n-\n-    /** Not supported. */\n-    public void remove() {\n-        throw new UnsupportedOperationException(\"FilterListIterator.remove() is not supported.\");\n-    }\n-\n-    /** Not supported. */\n-    public void set(Object o) {\n-        throw new UnsupportedOperationException(\"FilterListIterator.set(Object) is not supported.\");\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-\n-    /** \n-     * Getter for the predicate property.\n-     * @return value of the predicate property.\n-     */\n-    public Predicate getPredicate() {\n-        return predicate;\n-    }\n-    /** \n-     * Setter for the predicate property.\n-     * @param predicate new value for the predicate property.\n-     */\n-    public void setPredicate(Predicate predicate) {\n-        this.predicate = predicate;\n-    }\n-\n-    // Private Methods\n-    //-------------------------------------------------------------------------\n-\n-    private void clearNextObject() {\n-        nextObject = null;\n-        nextObjectSet = false;\n-    }\n-\n-    private boolean setNextObject() {\n-        ListIterator iterator = getListIterator();\n-        Predicate predicate = getPredicate();\n-        \n-        // if previousObjectSet,\n-        // then we've walked back one step in the \n-        // underlying list (due to a hasPrevious() call)\n-        // so skip ahead one matching object\n-        if(previousObjectSet) {\n-            clearPreviousObject();\n-            if(!setNextObject()) {\n-                return false;\n-            } else {\n-                clearNextObject();\n-            }\n-        }\n-\n-        while(iterator.hasNext()) {\n-            Object object = iterator.next();\n-            if(predicate.evaluate(object)) {\n-                nextObject = object;\n-                nextObjectSet = true;\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private void clearPreviousObject() {\n-        previousObject = null;\n-        previousObjectSet = false;\n-    }\n-\n-    private boolean setPreviousObject() {\n-        ListIterator iterator = getListIterator();\n-        Predicate predicate = getPredicate();\n-        \n-        // if nextObjectSet,\n-        // then we've walked back one step in the \n-        // underlying list (due to a hasNext() call)\n-        // so skip ahead one matching object\n-        if(nextObjectSet) {\n-            clearNextObject();\n-            if(!setPreviousObject()) {\n-                return false;\n-            } else {\n-                clearPreviousObject();\n-            }\n-        }\n-\n-        while(iterator.hasPrevious()) {\n-            Object object = iterator.previous();\n-            if(predicate.evaluate(object)) {\n-                previousObject = object;\n-                previousObjectSet = true;\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    // Attributes\n-    //-------------------------------------------------------------------------\n-\n-    /** Holds value of property \"predicate\". */\n-    private Predicate predicate;\n-\n-    /** \n-     * The value of the next (matching) object, when \n-     * {@link #nextObjectSet} is true. \n-     */\n-    private Object nextObject;\n-\n-    /** \n-     * Whether or not the {@link #nextObject} has been set\n-     * (possibly to <code>null</code>). \n-     */\n-    private boolean nextObjectSet = false;   \n-\n-    /** \n-     * The value of the previous (matching) object, when \n-     * {@link #previousObjectSet} is true. \n-     */\n-    private Object previousObject;\n-\n-    /** \n-     * Whether or not the {@link #previousObject} has been set\n-     * (possibly to <code>null</code>). \n-     */\n-    private boolean previousObjectSet = false;   \n-\n-    /** \n-     * The index of the element that would be returned by {@link #next}.\n-     */\n-    private int nextIndex = 0;\n }\n--- a/src/java/org/apache/commons/collections/IteratorEnumeration.java\n+++ b/src/java/org/apache/commons/collections/IteratorEnumeration.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/IteratorEnumeration.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/15 20:04:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/IteratorEnumeration.java,v 1.6 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/15 23:13:51 $\n  *\n  * ====================================================================\n  *\n   *\n   * @since 1.0\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @deprecated this class has been moved to the iterators subpackage\n   */\n \n-public class IteratorEnumeration implements Enumeration {\n-    \n-    private Iterator iterator;\n+public class IteratorEnumeration \n+extends org.apache.commons.collections.iterators.IteratorEnumeration {\n     \n     /**\n      *  Constructs a new <Code>IteratorEnumeration</Code> that will not \n      *  invoked.\n      */\n     public IteratorEnumeration() {\n+        super();\n     }\n \n     /**\n      *  @param iterator  the iterator to use\n      */\n     public IteratorEnumeration( Iterator iterator ) {\n-        this.iterator = iterator;\n+        super(iterator);\n     }\n \n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Returns true if the underlying iterator has more elements.\n-     *\n-     *  @return true if the underlying iterator has more elements\n-     */\n-    public boolean hasMoreElements() {\n-        return iterator.hasNext();\n-    }\n-\n-    /**\n-     *  Returns the next element from the underlying iterator.\n-     *\n-     *  @return the next element from the underlying iterator.\n-     *  @throws NoSuchElementException  if the underlying iterator has no\n-     *    more elements\n-     */\n-    public Object nextElement() {\n-        return iterator.next();\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Returns the underlying iterator.\n-     * \n-     *  @return the underlying iterator\n-     */\n-    public Iterator getIterator() {\n-        return iterator;\n-    }\n-\n-    /**\n-     *  Sets the underlying iterator.\n-     *\n-     *  @param iterator  the new underlying iterator\n-     */\n-    public void setIterator( Iterator iterator ) {\n-        this.iterator = iterator;\n-    }\n     \n }\n--- a/src/java/org/apache/commons/collections/ProxyIterator.java\n+++ b/src/java/org/apache/commons/collections/ProxyIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyIterator.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/15 20:04:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyIterator.java,v 1.6 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/15 23:13:51 $\n  *\n  * ====================================================================\n  *\n   *\n   * @since 1.0\n   * @see ProxyListIterator\n-  * @version $Revision: 1.5 $ $Date: 2002/08/15 20:04:31 $\n+  * @version $Revision: 1.6 $ $Date: 2002/08/15 23:13:51 $\n   *\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @deprecated this class has been moved to the iterators subpackage\n   */\n \n-public class ProxyIterator implements Iterator {\n-    \n-    /** Holds value of property iterator. */\n-    private Iterator iterator;\n+public class ProxyIterator\n+extends org.apache.commons.collections.iterators.ProxyIterator {\n     \n     /**\n      *  Constructs a new <Code>ProxyIterator</Code> that will not function\n      *  until {@link #setIterator(Iterator)} is called.\n      */\n     public ProxyIterator() {\n+        super();\n     }\n     \n     /**\n      *  @param iterator  the underyling iterator\n      */\n     public ProxyIterator( Iterator iterator ) {\n-        this.iterator = iterator;\n+        super(iterator);\n     }\n \n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Returns true if the underlying iterator has more elements.\n-     *\n-     *  @return true if the underlying iterator has more elements\n-     */\n-    public boolean hasNext() {\n-        return getIterator().hasNext();\n-    }\n-\n-    /**\n-     *  Returns the next element from the underlying iterator.\n-     *\n-     *  @return the next element from the underlying iterator\n-     *  @throws NoSuchElementException  if the underlying iterator \n-     *    raises it because it has no more elements\n-     */\n-    public Object next() {\n-        return getIterator().next();\n-    }\n-\n-    /**\n-     *  Removes the last returned element from the collection that spawned\n-     *  the underlying iterator.\n-     */\n-    public void remove() {\n-        getIterator().remove();\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-    /** Getter for property iterator.\n-     * @return Value of property iterator.\n-     */\n-    public Iterator getIterator() {\n-        return iterator;\n-    }\n-    /** Setter for property iterator.\n-     * @param iterator New value of property iterator.\n-     */\n-    public void setIterator(Iterator iterator) {\n-        this.iterator = iterator;\n-    }\n }\n--- a/src/java/org/apache/commons/collections/ProxyListIterator.java\n+++ b/src/java/org/apache/commons/collections/ProxyListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyListIterator.java,v 1.3 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/15 20:04:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyListIterator.java,v 1.4 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/15 23:13:51 $\n  *\n  * ====================================================================\n  *\n  *\n  * @since 2.0\n  * @see ProxyIterator\n- * @version $Revision: 1.3 $ $Date: 2002/08/15 20:04:31 $\n+ * @version $Revision: 1.4 $ $Date: 2002/08/15 23:13:51 $\n  * @author Rodney Waldhoff\n+ * @deprecated this class has been moved to the iterators subpackage\n  */\n-public class ProxyListIterator implements ListIterator {\n+public class ProxyListIterator \n+extends org.apache.commons.collections.iterators.ProxyListIterator {\n \n     // Constructor\n     //-------------------------------------------------------------------------\n      *  is invoked.\n      */\n     public ProxyListIterator() {\n+        super();\n     }\n \n     /**\n      *  @param iterator  the list iterator to use\n      */\n     public ProxyListIterator(ListIterator iterator) {\n-        this.iterator = iterator;\n+        super(iterator);\n     }\n-\n-    // ListIterator interface\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Invokes the underlying {@link ListIterator#add(Object)} method.\n-     *\n-     *  @throws NullPointerException  if the underyling iterator is null\n-     */\n-    public void add(Object o) {\n-        getListIterator().add(o);\n-    }\n-\n-    /**\n-     *  Invokes the underlying {@link ListIterator#hasNext()} method.\n-     *\n-     *  @throws NullPointerException  if the underyling iterator is null\n-     */\n-    public boolean hasNext() {\n-        return getListIterator().hasNext();\n-    }\n-\n-    /**\n-     *  Invokes the underlying {@link ListIterator#hasPrevious()} method.\n-     *\n-     *  @throws NullPointerException  if the underyling iterator is null\n-     */\n-    public boolean hasPrevious() {\n-        return getListIterator().hasPrevious();\n-    }\n-\n-    /**\n-     *  Invokes the underlying {@link ListIterator#next()} method.\n-     *\n-     *  @throws NullPointerException  if the underyling iterator is null\n-     */\n-    public Object next() {\n-        return getListIterator().next();\n-    }\n-\n-    /**\n-     *  Invokes the underlying {@link ListIterator#nextIndex()} method.\n-     *\n-     *  @throws NullPointerException  if the underyling iterator is null\n-     */\n-    public int nextIndex() {\n-        return getListIterator().nextIndex();\n-    }\n-\n-    /**\n-     *  Invokes the underlying {@link ListIterator#previous()} method.\n-     *\n-     *  @throws NullPointerException  if the underyling iterator is null\n-     */\n-    public Object previous() {\n-        return getListIterator().previous();\n-    }\n-\n-    /**\n-     *  Invokes the underlying {@link ListIterator#previousIndex()} method.\n-     *\n-     *  @throws NullPointerException  if the underyling iterator is null\n-     */\n-    public int previousIndex() {\n-        return getListIterator().previousIndex();\n-    }\n-\n-    /**\n-     *  Invokes the underlying {@link ListIterator#remove()} method.\n-     *\n-     *  @throws NullPointerException  if the underyling iterator is null\n-     */\n-    public void remove() {\n-        getListIterator().remove();\n-    }\n-\n-    /**\n-     *  Invokes the underlying {@link ListIterator#set(Object)} method.\n-     *\n-     *  @throws NullPointerException  if the underyling iterator is null\n-     */\n-    public void set(Object o) {\n-        getListIterator().set(o);\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-\n-    /** \n-     * Getter for property iterator.\n-     * @return Value of property iterator.\n-     */\n-    public ListIterator getListIterator() {\n-        return iterator;\n-    }\n-\n-    /**\n-     * Setter for property iterator.\n-     * @param iterator New value of property iterator.\n-     */\n-    public void setListIterator(ListIterator iterator) {\n-        this.iterator = iterator;\n-    }\n-\n-    // Attributes\n-    //-------------------------------------------------------------------------\n-\n-    /** Holds value of property \"iterator\". */\n-    private ListIterator iterator;\n \n }\n \n--- a/src/java/org/apache/commons/collections/SingletonIterator.java\n+++ b/src/java/org/apache/commons/collections/SingletonIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/SingletonIterator.java,v 1.6 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/15 20:04:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/SingletonIterator.java,v 1.7 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/15 23:13:51 $\n  *\n  * ====================================================================\n  *\n   *\n   * @since 2.0\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  * @version $Revision: 1.6 $\n+  * @version $Revision: 1.7 $\n+  * @deprecated this class has been moved to the iterators subpackage\n   */\n-public class SingletonIterator implements Iterator {\n-\n-    private boolean first = true;\n-    private Object object;\n+public class SingletonIterator \n+extends org.apache.commons.collections.iterators.SingletonIterator {\n     \n     /**\n      *  Constructs a new <Code>SingletonIterator</Code>.\n      *  @param object  the single object to return from the iterator\n      */\n     public SingletonIterator(Object object) {\n-        this.object = object;\n+        super(object);\n     }\n \n-    /**\n-     *  Returns true if the single object hasn't been returned yet.\n-     * \n-     *  @return true if the single object hasn't been returned yet\n-     */\n-    public boolean hasNext() {\n-        return first;\n-    }\n-\n-    /**\n-     *  Returns the single object if it hasn't been returned yet.\n-     *\n-     *  @return the single object\n-     *  @throws NoSuchElementException if the single object has already been\n-     *    returned\n-     */\n-    public Object next() {\n-        if (! first ) {\n-            throw new NoSuchElementException();\n-        }\n-        Object answer = object;\n-        object = null;\n-        first = false;\n-        return answer;\n-    }\n-\n-    /**\n-     *  Throws {@link UnsupportedOperationException}.\n-     *\n-     *  @throws UnsupportedOperationException always\n-     */\n-    public void remove() {\n-        throw new UnsupportedOperationException( \"remove() is not supported by this iterator\" );\n-    }\n }\n--- a/src/java/org/apache/commons/collections/TransformIterator.java\n+++ b/src/java/org/apache/commons/collections/TransformIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/TransformIterator.java,v 1.5 2002/08/15 20:04:31 pjack Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/15 20:04:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/TransformIterator.java,v 1.6 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/15 23:13:51 $\n  *\n  * ====================================================================\n  *\n   *\n   * @since 1.0\n   * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @deprecated this class has been moved to the iterators subpackage\n   */\n \n-public class TransformIterator extends ProxyIterator {\n-    \n-    /** Holds value of property transformer. */\n-    private Transformer transformer;\n-    \n+public class TransformIterator \n+extends org.apache.commons.collections.iterators.TransformIterator {\n     \n     /**\n      *  Constructs a new <Code>TransformIterator</Code> that will not function\n      *  invoked.\n      */\n     public TransformIterator() {\n+        super();\n     }\n     \n     /**\n      *  @param transformer  the transformer to use\n      */\n     public TransformIterator( Iterator iterator, Transformer transformer ) {\n-        super( iterator );\n-        this.transformer = transformer;\n+        super( iterator, transformer );\n     }\n \n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-    public Object next() {\n-        return transform( super.next() );\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-    /** Getter for property transformer.\n-     * @return Value of property transformer.\n-     */\n-    public Transformer getTransformer() {\n-        return transformer;\n-    }\n-    /** Setter for property transformer.\n-     * @param transformer New value of property transformer.\n-     */\n-    public void setTransformer(Transformer transformer) {\n-        this.transformer = transformer;\n-    }\n-    \n-    // Implementation methods\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     *  Transforms the given object using the transformer.  If the \n-     *  transformer is null, the original object is returned as-is.\n-     *\n-     *  @param source  the object to transform\n-     *  @return  the transformed object\n-     */\n-    protected Object transform( Object source ) {\n-        Transformer transformer = getTransformer();\n-        if ( transformer != null ) {\n-            return transformer.transform( source );\n-        }\n-        return source;\n-    }\n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.lang.reflect.Array;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/** Implements an {@link Iterator} over an array of objects.\n+  *\n+  * @since 1.0\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @author Mauricio S. Moura\n+  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n+  * @version $Revision: 1.1 $\n+  */\n+public class ArrayIterator implements Iterator {\n+    \n+    private Object array;\n+    private int length = 0;\n+    private int index = 0;\n+  \n+    \n+    /**\n+     *  Construct an ArrayIterator.  Using this constructor, the iterator is\n+     *  equivalent to an empty iterator until {@link #setArray(Object)} is\n+     *  called to establish the array to iterate over.\n+     **/\n+    public ArrayIterator() {\n+    }\n+   \n+    /**\n+     *  Construct an ArrayIterator that will iterate over the values in the\n+     *  specified array.\n+     *\n+     *  @param array the array to iterate over.\n+     *\n+     *  @exception IllegalArgumentException if <code>array</code> is not an\n+     *  array.\n+     *\n+     *  @exception NullPointerException \n+     *  if <code>array</code> is <code>null</code>\n+     **/\n+    public ArrayIterator(Object array) {\n+        setArray( array );\n+    }\n+\n+    /**\n+     *  Construct an ArrayIterator that will iterate over the values in the\n+     *  specified array.\n+     *\n+     *  @param array the array to iterate over.\n+     *  @param start the index to start iterating at.\n+     *\n+     *  @exception IllegalArgumentException if <code>array</code> is not an\n+     *  array.\n+     *\n+     *  @exception NullPointerException \n+     *  if <code>array</code> is <code>null</code>\n+     **/\n+    public ArrayIterator(Object array, int start) {\n+        setArray( array );\n+        checkBound(start, \"start\");\n+        this.index = start;\n+    }\n+\n+    /**\n+     *  Construct an ArrayIterator that will iterate over the values in the\n+     *  specified array.\n+     *\n+     *  @param array the array to iterate over.\n+     *  @param start the index to start iterating at.\n+     *  @param end the index to finish iterating at.\n+     *\n+     *  @exception IllegalArgumentException if <code>array</code> is not an\n+     *  array.\n+     *\n+     *  @exception NullPointerException \n+     *  if <code>array</code> is <code>null</code>\n+     **/\n+    public ArrayIterator(Object array, int start, int end) {\n+        setArray( array );\n+        checkBound(start, \"start\");\n+        checkBound(end, \"end\");\n+        if(end <= start) {\n+            throw new IllegalArgumentException(\n+                \"End index must be greater than start index. \"\n+            );\n+        }\n+        this.index = start;\n+        this.length = end;\n+    }\n+\n+    private void checkBound(int bound, String type ) {\n+        if(bound > this.length) {\n+            throw new ArrayIndexOutOfBoundsException(\n+              \"Attempt to make an ArrayIterator that \"+type+\n+              \"s beyond the end of the array. \"\n+            );\n+        }\n+        if(bound < 0) {\n+            throw new ArrayIndexOutOfBoundsException(\n+              \"Attempt to make an ArrayIterator that \"+type+\n+              \"s before the start of the array. \"\n+            );\n+        }\n+    }\n+\n+    // Iterator interface\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns true if there are more elements to return from the array.\n+     *\n+     *  @return true if there is a next element to return\n+     */\n+    public boolean hasNext() {\n+        return index < length;\n+    }\n+\n+    /**\n+     *  Returns the next element in the array.\n+     *\n+     *  @return the next element in the array\n+     *  @throws NoSuchElementException if all the elements in the array\n+     *    have already been returned\n+     */\n+    public Object next() {\n+        if(!hasNext()) {\n+            throw new NoSuchElementException();\n+        }\n+        return Array.get( array, index++ );\n+    }\n+\n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @throws UnsupportedOperationException always\n+     */\n+    public void remove() {\n+        throw new UnsupportedOperationException( \"remove() method is not supported\" );\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Retrieves the array that this iterator is iterating over. \n+     *\n+     *  @return the array this iterator iterates over, or <code>null</code> if\n+     *  the no-arg constructor was used and {@link #setArray(Object)} has never\n+     *  been called with a valid array.\n+     **/\n+    public Object getArray() {\n+        return array;\n+    }\n+    \n+    /**\n+     *  Changes the array that the ArrayIterator should iterate over.  If an\n+     *  array has previously been set (using the single-arg constructor or this\n+     *  method), that array along with the current iterator position within\n+     *  that array is discarded in favor of the argument to this method.  This\n+     *  method can be used in combination with {@link #getArray()} to \"reset\"\n+     *  the iterator to the beginning of the array:\n+     *\n+     *  <pre>\n+     *    ArrayIterator iterator = ...\n+     *    ...\n+     *    iterator.setArray(iterator.getArray());\n+     *  </pre>\n+     *\n+     *  Note: Using i.setArray(i.getArray()) may throw a NullPointerException\n+     *  if no array has ever been set for the iterator (see {@link\n+     *  #getArray()})\n+     *\n+     *  @param array the array that the iterator should iterate over.\n+     *\n+     *  @exception IllegalArgumentException if <code>array</code> is not an\n+     *  array.\n+     *\n+     *  @exception NullPointerException \n+     *  if <code>array</code> is <code>null</code>\n+     **/\n+    public void setArray( Object array ) {\n+        // Array.getLength throws IllegalArgumentException if the object is not\n+        // an array or NullPointerException if the object is null.  This call\n+        // is made before saving the array and resetting the index so that the\n+        // array iterator remains in a consistent state if the argument is not\n+        // an array or is null.\n+        this.length = Array.getLength( array );\n+        this.array = array;\n+        this.index = 0;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/CollatingIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/CollatingIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+\n+/**\n+ * Provides an ordered iteration over the elements contained in\n+ * a collection of ordered {@link Iterator}s.  In other words,\n+ * given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,\n+ * my {@link #next} method will return the lesser of \n+ * <code>A.next()</code> and <code>B.next()</code>.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2002/08/15 23:13:51 $\n+ * @author Rodney Waldhoff\n+ * @since 2.1\n+ */\n+public class CollatingIterator implements Iterator {\n+\n+    //------------------------------------------------------------ Constructors\n+    \n+    /**\n+     *  Constructs a new <Code>CollatingIterator</Code>.  Natural sort order\n+     *  will be used, and child iterators will have to be manually added \n+     *  using the {@link #addIterator(Iterator)} method.\n+     */\n+    public CollatingIterator() {\n+        this(null,2);\n+    }\n+    \n+    /**\n+     *  Constructs a new <Code>CollatingIterator</Code> that will used the\n+     *  specified comparator for ordering.  Child iterators will have to be \n+     *  manually added using the {@link #addIterator(Iterator)} method.\n+     *\n+     *  @param comp  the comparator to use for ordering, or <Code>null</Code>\n+     *    to use natural sort order\n+     */\n+    public CollatingIterator(Comparator comp) {\n+        this(comp,2);\n+    }\n+    \n+    /**\n+     *  Constructs a new <Code>CollatingIterator</Code> that will used the\n+     *  specified comparator for ordering and have the specified initial\n+     *  capacity.  Child iterators will have to be \n+     *  manually added using the {@link #addIterator(Iterator)} method.\n+     *\n+     *  @param comp  the comparator to use for ordering, or <Code>null</Code>\n+     *    to use natural sort order\n+     *  @param initIterCapacity  the initial capacity for the internal list\n+     *    of child iterators\n+     */\n+    public CollatingIterator(Comparator comp, int initIterCapacity) {\n+        iterators = new ArrayList(initIterCapacity);\n+        setComparator(comp);\n+    }\n+\n+    /**\n+     *  Constructs a new <Code>CollatingIterator</Code> that will use the\n+     *  specified comparator to provide ordered iteration over the two\n+     *  given iterators.\n+     *\n+     *  @param comp  the comparator to use to sort, or null to use natural\n+     *    sort order\n+     *  @param a  the first child ordered iterator\n+     *  @param b  the second child ordered iterator\n+     */\n+    public CollatingIterator(Comparator comp, Iterator a, Iterator b) {\n+        this(comp,2);\n+        addIterator(a);\n+        addIterator(b);\n+    }\n+\n+    //--------------------------------------------------------- Public Methods\n+\n+    /**\n+     * Add the given {@link Iterator} to my collection to collate.\n+     * @throws IllegalStateException if I've already started iterating\n+     */\n+    public void addIterator(Iterator iter) throws IllegalStateException {\n+        checkNotStarted();\n+        iterators.add(iter);\n+    }\n+\n+    /**\n+     * Set the {@link Comparator} by which I collate.\n+     * @throws IllegalStateException if I've already started iterating\n+     */\n+    public void setComparator(Comparator comp) throws IllegalStateException {\n+        checkNotStarted();\n+        comparator = comp;\n+    }\n+\n+    /**\n+     * Get the {@link Comparator} by which I collate.\n+     */\n+    public Comparator getComparator() {\n+        return comparator;\n+    }\n+\n+    //------------------------------------------------------- Iterator Methods\n+\n+    /**\n+     *  Returns <Code>true</Code> if any child iterator has remaining elements.\n+     *\n+     *  @return true if this iterator has remaining elements\n+     */\n+    public boolean hasNext() {\n+        start();\n+        return anyValueSet(valueSet) || anyHasNext(iterators);\n+    }\n+\n+    /**\n+     *  Returns the next ordered element from a child iterator.\n+     *\n+     *  @return the next ordered element\n+     *  @throws NoSuchElementException  if no child iterator has any more\n+     *    elements\n+     */\n+    public Object next() throws NoSuchElementException {\n+        if(!hasNext()) {\n+            throw new NoSuchElementException();\n+        } else {\n+            int leastIndex = least();\n+            if(leastIndex == -1) {\n+                throw new NoSuchElementException();\n+            } else {\n+                Object val = values.get(leastIndex);\n+                clear(leastIndex);\n+                lastReturned = leastIndex;\n+                return val;\n+            }\n+        }        \n+    }\n+\n+    /**\n+     *  Removes the last returned element from the child iterator that \n+     *  produced it.\n+     *\n+     *  @throws IllegalStateException  if there is no last returned element,\n+     *    or if the last returned element has already been removed\n+     */\n+    public void remove() {\n+        if(-1 == lastReturned) {\n+            throw new NoSuchElementException(\"No value has been returned yet.\");\n+        } else {\n+            Iterator iter = (Iterator)(iterators.get(lastReturned));\n+            iter.remove();\n+        }\n+    }\n+\n+    //--------------------------------------------------------- Private Methods\n+\n+    /** Initialize my collating state if it hasn't been already. */\n+    private void start() {\n+        if(null == values) {\n+            values = new ArrayList(iterators.size());\n+            valueSet = new BitSet(iterators.size());\n+            for(int i=0;i<iterators.size();i++) {\n+                values.add(null);\n+                valueSet.clear(i);\n+            }\n+        }\n+    }\n+\n+    /** \n+     * Set the {@link #values} and {@link #valueSet} attributes \n+     * at position <i>i</i> to the next value of the \n+     * {@link #iterators iterator} at position <i>i</i>, or \n+     * clear them if the <i>i</i><sup>th</sup> iterator\n+     * has no next value.\n+     *\n+     * @return <tt>false</tt> iff there was no value to set\n+     */\n+    private boolean set(int i) {\n+        Iterator iter = (Iterator)(iterators.get(i));\n+        if(iter.hasNext()) {\n+            values.set(i,iter.next());\n+            valueSet.set(i);\n+            return true;\n+        } else {\n+            values.set(i,null);\n+            valueSet.clear(i);\n+            return false;\n+        }\n+    }\n+\n+    /** \n+     * Clear the {@link #values} and {@link #valueSet} attributes \n+     * at position <i>i</i>.\n+     */\n+    private void clear(int i) {\n+        values.set(i,null);\n+        valueSet.clear(i);\n+    }\n+\n+    /** \n+     * Throw {@link IllegalStateException} iff I've been {@link #start started}.\n+     * @throws IllegalStateException iff I've been {@link #start started}\n+     */\n+    private void checkNotStarted() throws IllegalStateException {\n+        if(null != values) {\n+            throw new IllegalStateException(\"Can't do that after next or hasNext has been called.\");\n+        }\n+    }\n+\n+    /** \n+     * Returns the index of the least element in {@link #values},\n+     * {@link #set(int) setting} any uninitialized values.\n+     */\n+    private int least() throws IllegalStateException {\n+        int leastIndex = -1;\n+        Object leastObject = null;                \n+        for(int i=0;i<values.size();i++) {\n+            if(!valueSet.get(i)) {\n+                set(i);\n+            }\n+            if(valueSet.get(i)) {\n+                if(leastIndex == -1) {\n+                    leastIndex = i;\n+                    leastObject = values.get(i);\n+                } else {\n+                    Object curObject = values.get(i);\n+                    if(comparator.compare(curObject,leastObject) < 0) {\n+                        leastObject = curObject;\n+                        leastIndex = i;\n+                    }\n+                }\n+            }\n+        }\n+        return leastIndex;\n+    }\n+\n+    /**\n+     * Returns <code>true</code> iff any bit in the given set is \n+     * <code>true</code>.\n+     */\n+    private boolean anyValueSet(BitSet set) {\n+        for(int i=0;i<set.size();i++) {\n+            if(set.get(i)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns <code>true</code> iff any {@link Iterator} \n+     * in the given list has a next value.\n+     */\n+    private boolean anyHasNext(ArrayList iters) {\n+        for(int i=0;i<iters.size();i++) {\n+            Iterator iter = (Iterator)iters.get(i);\n+            if(iter.hasNext()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    //--------------------------------------------------------- Private Members\n+\n+    /** My {@link Comparator}. */\n+    private Comparator comparator = null;\n+\n+    /** My list of {@link Iterator}s. */\n+    private ArrayList iterators = null;\n+   \n+    /** {@link Iterator#next Next} objects peeked from each iterator. */\n+    private ArrayList values = null;\n+    \n+    /** Whether or not each {@link #values} element has been set. */\n+    private BitSet valueSet = null;\n+\n+    /** Index of the {@link #iterators iterator} from whom the last returned value was obtained. */\n+    private int lastReturned = -1;\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/EnumerationIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/EnumerationIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Collection;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+\n+/** Adapter to make {@link Enumeration Enumeration} instances appear\n+  * to be {@link Iterator Iterator} instances.\n+  *\n+  * @since 1.0\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n+  */\n+public class EnumerationIterator implements Iterator {\n+    \n+    private Collection collection;\n+\n+    private Enumeration enumeration;\n+\n+    private Object last;\n+    \n+    /**\n+     *  Constructs a new <Code>EnumerationIterator</Code> that will not\n+     *  function until {@link #setEnumeration(Enumeration)} is called.\n+     */\n+    public EnumerationIterator() {\n+        this(null, null);\n+    }\n+\n+    /**\n+     *  Constructs a new <Code>EnumerationIterator</Code> that provides\n+     *  an iterator view of the given enumeration.\n+     *\n+     *  @param enumeration  the enumeration to use\n+     */\n+    public EnumerationIterator( Enumeration enumeration ) {\n+        this(enumeration, null);\n+    }\n+\n+    /**\n+     *  Constructs a new <Code>EnumerationIterator</Code> that will remove\n+     *  elements from the specified collection.\n+     *\n+     *  @param enum  the enumeration to use\n+     *  @param collection  the collection to remove elements form\n+     */\n+    public EnumerationIterator( Enumeration enum, Collection collection ) {\n+        this.enumeration = enum;\n+        this.collection = collection;\n+        this.last = null;\n+    }\n+\n+    // Iterator interface\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns true if the underlying enumeration has more elements.\n+     *\n+     *  @return true if the underlying enumeration has more elements\n+     *  @throws NullPointerException  if the underlying enumeration is null\n+     */\n+    public boolean hasNext() {\n+        return enumeration.hasMoreElements();\n+    }\n+\n+    /**\n+     *  Returns the next object from the enumeration.\n+     *\n+     *  @return the next object from the enumeration\n+     *  @throws NullPointerException if the enumeration is null\n+     */\n+    public Object next() {\n+        last = enumeration.nextElement();\n+        return last;\n+    }\n+\n+    /**\n+     * Functions if an associated <code>Collection</code> is known.\n+     * If so, the first occurrence of the last returned object from this\n+     * iterator will be removed from the collection.\n+     *\n+     * @exception IllegalStateException <code>next()</code> not called.\n+     * @exception UnsupportedOperationException No associated\n+     * <code>Collection</code>.\n+     */\n+    public void remove() {\n+        if (collection != null) {\n+            if (last != null) {\n+                collection.remove(last);\n+            }\n+            else {\n+                throw new IllegalStateException\n+                    (\"next() must have been called for remove() to function\");\n+            }\n+        }\n+        else {\n+            throw new UnsupportedOperationException\n+                (\"No Collection associated with this Iterator\");\n+        }\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns the underlying enumeration.\n+     *\n+     *  @return the underlying enumeration\n+     */\n+    public Enumeration getEnumeration() {\n+        return enumeration;\n+    }\n+\n+    /**\n+     *  Sets the underlying enumeration.\n+     *\n+     *  @param enumeration  the new underlying enumeration\n+     */\n+    public void setEnumeration( Enumeration enumeration ) {\n+        this.enumeration = enumeration;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/FilterIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/FilterIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import org.apache.commons.collections.Predicate;\n+\n+\n+/** A Proxy {@link Iterator Iterator} which takes a {@link Predicate Predicate} instance to filter\n+  * out objects from an underlying {@link Iterator Iterator} instance.\n+  * Only objects for which the\n+  * specified <code>Predicate</code> evaluates to <code>true</code> are\n+  * returned.\n+  *\n+  * @since 1.0\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @author Jan Sorensen\n+  */\n+\n+public class FilterIterator extends ProxyIterator {\n+    \n+    /** Holds value of property predicate. */\n+    private Predicate predicate;\n+\n+    private Object nextObject;\n+    private boolean nextObjectSet = false;\n+    \n+    \n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Constructs a new <Code>FilterIterator</Code> that will not function\n+     *  until {@link #setIterator(Iterator) setIterator} is invoked.\n+     */\n+    public FilterIterator() {\n+    }\n+    \n+    /**\n+     *  Constructs a new <Code>FilterIterator</Code> that will not function\n+     *  until {@link #setPredicate(Predicate) setPredicate} is invoked.\n+     *\n+     *  @param iterator  the iterator to use\n+     */\n+    public FilterIterator( Iterator iterator ) {\n+        super( iterator );\n+    }\n+\n+    /**\n+     *  Constructs a new <Code>FilterIterator</Code> that will use the\n+     *  given iterator and predicate.\n+     *\n+     *  @param iterator  the iterator to use\n+     *  @param predicate  the predicate to use\n+     */\n+    public FilterIterator( Iterator iterator, Predicate predicate ) {\n+        super( iterator );\n+        this.predicate = predicate;\n+    }\n+\n+    // Iterator interface\n+    //-------------------------------------------------------------------------\n+    \n+    /** \n+     *  Returns true if the underlying iterator contains an object that \n+     *  matches the predicate.\n+     *\n+     *  @return true if there is another object that matches the predicate \n+     */\n+    public boolean hasNext() {\n+        if ( nextObjectSet ) {\n+            return true;\n+        } else {\n+            return setNextObject();\n+        }\n+    }\n+\n+    /** \n+     *  Returns the next object that matches the predicate.\n+     * \n+     *  @return the next object which matches the given predicate\n+     *  @throws NoSuchElementException if there are no more elements that\n+     *   match the predicate \n+     */\n+    public Object next() {\n+        if ( !nextObjectSet ) {\n+            if (!setNextObject()) {\n+                throw new NoSuchElementException();\n+            }\n+        }\n+        nextObjectSet = false;\n+        return nextObject;\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException as this class \n+     * does look-ahead with its internal iterator.\n+     *\n+     * @throws UnsupportedOperationException  always\n+     */\n+    public void remove() {\n+        throw new UnsupportedOperationException();\n+    }\n+        \n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+    /** Getter for property predicate.\n+     * @return Value of property predicate.\n+     */\n+    public Predicate getPredicate() {\n+        return predicate;\n+    }\n+    /** Setter for property predicate.\n+     * @param predicate New value of property predicate.\n+     */\n+    public void setPredicate(Predicate predicate) {\n+        this.predicate = predicate;\n+    }\n+\n+    /**\n+     * Set nextObject to the next object. If there are no more \n+     * objects then return false. Otherwise, return true.\n+     */\n+    private boolean setNextObject() {\n+        Iterator iterator = getIterator();\n+        Predicate predicate = getPredicate();\n+        while ( iterator.hasNext() ) {\n+            Object object = iterator.next();\n+            if ( predicate.evaluate( object ) ) {\n+                nextObject = object;\n+                nextObjectSet = true;\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/FilterListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/FilterListIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import org.apache.commons.collections.Predicate;\n+\n+/** \n+  * A proxy {@link ListIterator ListIterator} which \n+  * takes a {@link Predicate Predicate} instance to filter\n+  * out objects from an underlying <code>ListIterator</code> \n+  * instance. Only objects for which the specified \n+  * <code>Predicate</code> evaluates to <code>true</code> are\n+  * returned by the iterator.\n+  * \n+  * @since 2.0\n+  * @version $Revision: 1.1 $ $Date: 2002/08/15 23:13:51 $\n+  * @author Rodney Waldhoff\n+  */\n+public class FilterListIterator extends ProxyListIterator {\n+\n+    // Constructors    \n+    //-------------------------------------------------------------------------\n+    \n+    /**\n+     *  Constructs a new <Code>FilterListIterator</Code> that will not \n+     *  function until \n+     *  {@link ProxyListIterator#setListIterator(ListIterator) setListIterator}\n+     *  and {@link #setPredicate(Predicate) setPredicate} are invoked.\n+     */\n+    public FilterListIterator() {\n+    }\n+\n+    /**\n+     *  Constructs a new <Code>FilterListIterator</Code> that will not \n+     *  function until {@link #setPredicate(Predicate) setPredicate} is invoked.\n+     *\n+     *  @param iterator  the iterator to use\n+     */\n+    public FilterListIterator(ListIterator iterator ) {\n+        super(iterator);\n+    }\n+\n+    /**\n+     *  Constructs a new <Code>FilterListIterator</Code>.\n+     *\n+     *  @param iterator  the iterator to use\n+     *  @param predicate  the predicate to use\n+     */\n+    public FilterListIterator(ListIterator iterator, Predicate predicate) {\n+        super(iterator);\n+        this.predicate = predicate;\n+    }\n+\n+    /**\n+     *  Constructs a new <Code>FilterListIterator</Code> that will not \n+     *  function until \n+     *  {@link ProxyListIterator#setListIterator(ListIterator) setListIterator}\n+     *  is invoked.\n+     *\n+     *  @param predicate  the predicate to use.\n+     */\n+    public FilterListIterator(Predicate predicate) {\n+        this.predicate = predicate;\n+    }\n+\n+    // ListIterator interface\n+    //-------------------------------------------------------------------------\n+\n+    /** Not supported. */\n+    public void add(Object o) {\n+        throw new UnsupportedOperationException(\"FilterListIterator.add(Object) is not supported.\");\n+    }\n+\n+    public boolean hasNext() {\n+        if(nextObjectSet) {\n+            return true;\n+        } else {\n+            return setNextObject();\n+        }\n+    }\n+\n+    public boolean hasPrevious() {\n+        if(previousObjectSet) {\n+            return true;\n+        } else {\n+            return setPreviousObject();\n+        }\n+    }\n+\n+    public Object next() {\n+        if(!nextObjectSet) {\n+            if(!setNextObject()) {\n+                throw new NoSuchElementException();\n+            }\n+        }\n+        nextIndex++;\n+        Object temp = nextObject;\n+        clearNextObject();\n+        return temp;\n+    }\n+\n+    public int nextIndex() {\n+        return nextIndex;\n+    }\n+\n+    public Object previous() {\n+        if(!previousObjectSet) {\n+            if(!setPreviousObject()) {\n+                throw new NoSuchElementException();\n+            }\n+        }\n+        nextIndex--;\n+        Object temp = previousObject;\n+        clearPreviousObject();\n+        return temp;\n+    }\n+\n+    public int previousIndex() {\n+        return (nextIndex-1);\n+    }\n+\n+    /** Not supported. */\n+    public void remove() {\n+        throw new UnsupportedOperationException(\"FilterListIterator.remove() is not supported.\");\n+    }\n+\n+    /** Not supported. */\n+    public void set(Object o) {\n+        throw new UnsupportedOperationException(\"FilterListIterator.set(Object) is not supported.\");\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+\n+    /** \n+     * Getter for the predicate property.\n+     * @return value of the predicate property.\n+     */\n+    public Predicate getPredicate() {\n+        return predicate;\n+    }\n+    /** \n+     * Setter for the predicate property.\n+     * @param predicate new value for the predicate property.\n+     */\n+    public void setPredicate(Predicate predicate) {\n+        this.predicate = predicate;\n+    }\n+\n+    // Private Methods\n+    //-------------------------------------------------------------------------\n+\n+    private void clearNextObject() {\n+        nextObject = null;\n+        nextObjectSet = false;\n+    }\n+\n+    private boolean setNextObject() {\n+        ListIterator iterator = getListIterator();\n+        Predicate predicate = getPredicate();\n+        \n+        // if previousObjectSet,\n+        // then we've walked back one step in the \n+        // underlying list (due to a hasPrevious() call)\n+        // so skip ahead one matching object\n+        if(previousObjectSet) {\n+            clearPreviousObject();\n+            if(!setNextObject()) {\n+                return false;\n+            } else {\n+                clearNextObject();\n+            }\n+        }\n+\n+        while(iterator.hasNext()) {\n+            Object object = iterator.next();\n+            if(predicate.evaluate(object)) {\n+                nextObject = object;\n+                nextObjectSet = true;\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private void clearPreviousObject() {\n+        previousObject = null;\n+        previousObjectSet = false;\n+    }\n+\n+    private boolean setPreviousObject() {\n+        ListIterator iterator = getListIterator();\n+        Predicate predicate = getPredicate();\n+        \n+        // if nextObjectSet,\n+        // then we've walked back one step in the \n+        // underlying list (due to a hasNext() call)\n+        // so skip ahead one matching object\n+        if(nextObjectSet) {\n+            clearNextObject();\n+            if(!setPreviousObject()) {\n+                return false;\n+            } else {\n+                clearPreviousObject();\n+            }\n+        }\n+\n+        while(iterator.hasPrevious()) {\n+            Object object = iterator.previous();\n+            if(predicate.evaluate(object)) {\n+                previousObject = object;\n+                previousObjectSet = true;\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    // Attributes\n+    //-------------------------------------------------------------------------\n+\n+    /** Holds value of property \"predicate\". */\n+    private Predicate predicate;\n+\n+    /** \n+     * The value of the next (matching) object, when \n+     * {@link #nextObjectSet} is true. \n+     */\n+    private Object nextObject;\n+\n+    /** \n+     * Whether or not the {@link #nextObject} has been set\n+     * (possibly to <code>null</code>). \n+     */\n+    private boolean nextObjectSet = false;   \n+\n+    /** \n+     * The value of the previous (matching) object, when \n+     * {@link #previousObjectSet} is true. \n+     */\n+    private Object previousObject;\n+\n+    /** \n+     * Whether or not the {@link #previousObject} has been set\n+     * (possibly to <code>null</code>). \n+     */\n+    private boolean previousObjectSet = false;   \n+\n+    /** \n+     * The index of the element that would be returned by {@link #next}.\n+     */\n+    private int nextIndex = 0;\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorChain.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorChain.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * <p>An IteratorChain is an Iterator that wraps one or\n+ * more Iterators.  When any method from the\n+ * Iterator interface is called, the IteratorChain will\n+ * proxy to a single underlying Iterator.  The \n+ * IteratorChain will invoke the Iterators in sequence until \n+ * all Iterators are exhausted completely.</p>\n+ * \n+ * <p>Under many circumstances, linking Iterators together\n+ * in this manner is more efficient (and convenient)\n+ * than reading out the contents of each Iterator into a\n+ * List and creating a new Iterator.</p>\n+ * \n+ * <p>Calling a method that adds new Iterator<i>after\n+ * a method in the Iterator interface\n+ * has been called</i> will result in an\n+ * UnsupportedOperationException.  However, <i>take care</i>\n+ * to not alter the underlying List of Iterators.</p>\n+ * \n+ * @author Morgan Delagrange\n+ * @version $Id: IteratorChain.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * @since 2.1\n+ */\n+public class IteratorChain implements Iterator {\n+\n+    protected List iteratorChain = null;\n+    protected int currentIteratorIndex = 0;\n+    protected Iterator currentIterator = null;\n+    // the \"last used\" Iterator is the Iterator upon which\n+    // next() or hasNext() was most recently called\n+    // used for the remove() operation only\n+    protected Iterator lastUsedIterator = null;\n+\n+    // ComparatorChain is \"locked\" after the first time\n+    // compare(Object,Object) is called\n+    protected boolean isLocked = false;\n+\n+    /**\n+     * Construct an IteratorChain with no Iterators.\n+     * You must add at least Iterator before calling\n+     * any method from the Iterator interface, or an \n+     * UnsupportedOperationException is thrown\n+     */\n+    public IteratorChain() {\n+        this(new ArrayList());\n+    }\n+\n+    /**\n+     * Construct an IteratorChain with a single Iterator.\n+     * \n+     * @param iterator first Iterator in the IteratorChain\n+     */\n+    public IteratorChain(Iterator iterator) {\n+        iteratorChain = new ArrayList();\n+        iteratorChain.add(iterator);\n+    }\n+\n+    /**\n+     * Construct an IteratorChain from the Iterators in the\n+     * List.\n+     * \n+     * @param list   List of Iterators\n+     */\n+    public IteratorChain(List list) {\n+        iteratorChain = list;\n+    }\n+\n+    /**\n+     * Add an Iterator to the end of the chain \n+     * \n+     * @param iterator Iterator to add\n+     */\n+    public void addIterator(Iterator iterator) {\n+        checkLocked();\n+\n+        iteratorChain.add(iterator);\n+    }\n+\n+    /**\n+     * Replace the Iterator at the given index     \n+     * \n+     * @param index      index of the Iterator to replace\n+     * @param iterator   Iterator to place at the given index\n+     * @exception IndexOutOfBoundsException\n+     *                   if index < 0 or index > size()\n+     */\n+    public void setIterator(int index, Iterator iterator) \n+    throws IndexOutOfBoundsException {\n+        checkLocked();\n+\n+        iteratorChain.set(index,iterator);\n+    }\n+\n+    /**\n+     * Number of Iterators in the current IteratorChain.\n+     * \n+     * @return Iterator count\n+     */\n+    public int size() {\n+        return iteratorChain.size();\n+    }\n+\n+    /**\n+     * Determine if modifications can still be made to the\n+     * IteratorChain.  IteratorChains cannot be modified\n+     * once they have executed a method from the Iterator\n+     * interface.\n+     * \n+     * @return true = IteratorChain cannot be modified; false = \n+     *         IteratorChain can still be modified.\n+     */\n+    public boolean isLocked() {\n+        return isLocked;\n+    }\n+\n+    // throw an exception if the IteratorChain is locked\n+    private void checkLocked() {\n+        if (isLocked == true) {\n+            throw new UnsupportedOperationException(\"IteratorChain cannot be changed after the first use of a method from the Iterator interface\");\n+        }\n+    }\n+\n+    private void checkChainIntegrity() {\n+        if (iteratorChain.size() == 0) {\n+            throw new UnsupportedOperationException(\"IteratorChains must contain at least one Iterator\");\n+        }\n+    }\n+\n+    // you MUST call this method whenever you call a method in the Iterator interface, because\n+    // this method also assigns the initial value of the currentIterator variable\n+    private void lockChain() {\n+        if (isLocked == false) {\n+            checkChainIntegrity();\n+            isLocked = true;\n+        }\n+    }\n+\n+    // call this before any Iterator method to make sure that the current Iterator\n+    // is not exhausted\n+    protected void updateCurrentIterator() {\n+        if (currentIterator == null) {\n+            currentIterator = (Iterator) iteratorChain.get(0);\n+            // set last used iterator here, in case the user calls remove\n+            // before calling hasNext() or next() (although they shouldn't)\n+            lastUsedIterator = currentIterator;\n+            return;\n+        }\n+\n+        if (currentIteratorIndex == (iteratorChain.size() - 1)) {\n+            return;\n+        }\n+\n+        while (currentIterator.hasNext() == false) {\n+            ++currentIteratorIndex;\n+            currentIterator = (Iterator) iteratorChain.get(currentIteratorIndex);\n+\n+            if (currentIteratorIndex == (iteratorChain.size() - 1)) {\n+                return;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Return true if any Iterator in the IteratorChain has a remaining\n+     * element.\n+     * \n+     * @return true if elements remain\n+     * @exception UnsupportedOperationException\n+     *                   if the IteratorChain does not contain at least one\n+     *                   Iterator\n+     */\n+    public boolean hasNext() throws UnsupportedOperationException {\n+        lockChain();\n+        updateCurrentIterator();\n+        lastUsedIterator = currentIterator;\n+\n+        return currentIterator.hasNext();\n+    }\n+\n+    /**\n+     * Returns the next Object of the current Iterator\n+     * \n+     * @return Object from the current Iterator\n+     * @exception NoSuchElementException\n+     *                   if all the Iterators are exhausted\n+     * @exception UnsupportedOperationException\n+     *                   if the IteratorChain does not contain at least one\n+     *                   Iterator\n+     */\n+    public Object next() throws NoSuchElementException, UnsupportedOperationException {\n+        lockChain();\n+        updateCurrentIterator();\n+        lastUsedIterator = currentIterator;\n+\n+        return currentIterator.next();\n+    }\n+\n+    /**\n+     * Removes from the underlying collection the last element \n+     * returned by the Iterator.  As with next() and hasNext(),\n+     * this method calls remove() on the underlying Iterator.\n+     * Therefore, this method may throw an \n+     * UnsupportedOperationException if the underlying\n+     * Iterator does not support this method. \n+     * \n+     * @exception UnsupportedOperationException\n+     *                   if the remove operator is not supported by the underlying\n+     *                   Iterator or if there are no Iterators in the IteratorChain\n+     * @exception IllegalStateException\n+     *                   if the next method has not yet been called, or the\n+     *                   remove method has already been called after the last\n+     *                   call to the next method.\n+     */\n+    public void remove() throws UnsupportedOperationException, IllegalStateException  {\n+        lockChain();\n+        updateCurrentIterator();\n+\n+        lastUsedIterator.remove();\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/IteratorEnumeration.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/IteratorEnumeration.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+\n+/** Adapter to make an {@link Iterator Iterator} instance appear to be an {@link Enumeration Enumeration} instances\n+  *\n+  * @since 1.0\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  */\n+\n+public class IteratorEnumeration implements Enumeration {\n+    \n+    private Iterator iterator;\n+    \n+    /**\n+     *  Constructs a new <Code>IteratorEnumeration</Code> that will not \n+     *  function until {@link #setIterator(Iterator) setIterator} is  \n+     *  invoked.\n+     */\n+    public IteratorEnumeration() {\n+    }\n+\n+    /**\n+     *  Constructs a new <Code>IteratorEnumeration</Code> that will use\n+     *  the given iterator. \n+     * \n+     *  @param iterator  the iterator to use\n+     */\n+    public IteratorEnumeration( Iterator iterator ) {\n+        this.iterator = iterator;\n+    }\n+\n+    // Iterator interface\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns true if the underlying iterator has more elements.\n+     *\n+     *  @return true if the underlying iterator has more elements\n+     */\n+    public boolean hasMoreElements() {\n+        return iterator.hasNext();\n+    }\n+\n+    /**\n+     *  Returns the next element from the underlying iterator.\n+     *\n+     *  @return the next element from the underlying iterator.\n+     *  @throws NoSuchElementException  if the underlying iterator has no\n+     *    more elements\n+     */\n+    public Object nextElement() {\n+        return iterator.next();\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns the underlying iterator.\n+     * \n+     *  @return the underlying iterator\n+     */\n+    public Iterator getIterator() {\n+        return iterator;\n+    }\n+\n+    /**\n+     *  Sets the underlying iterator.\n+     *\n+     *  @param iterator  the new underlying iterator\n+     */\n+    public void setIterator( Iterator iterator ) {\n+        this.iterator = iterator;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * As the wrapped Iterator is traversed, ListIteratorWrapper\n+ * builds a LinkedList of its values, permitting all required\n+ * operations of ListIterator.\n+ * \n+ * @author Morgan Delagrange\n+ * @version $Revision: 1.1 $ $Date: 2002/08/15 23:13:51 $\n+ * @since 2.1\n+ */\n+public class ListIteratorWrapper implements ListIterator {\n+\n+    // Constructor\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Constructs a new <Code>ListIteratorWrapper</Code> that will wrap\n+     *  the given iterator.\n+     *\n+     *  @param iterator  the iterator to wrap\n+     */\n+    public ListIteratorWrapper(Iterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    // ListIterator interface\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @param o  ignored\n+     *  @throws UnsupportedOperationException always\n+     */\n+    public void add(Object o) throws UnsupportedOperationException {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n+    }\n+\n+\n+    /**\n+     *  Returns true if there are more elements in the iterator.\n+     *\n+     *  @return true if there are more elements\n+     */\n+    public boolean hasNext() {\n+        if (currentIndex == wrappedIteratorIndex) {\n+            return iterator.hasNext();\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     *  Returns true if there are previous elements in the iterator.\n+     *\n+     *  @return true if there are previous elements\n+     */\n+    public boolean hasPrevious() {\n+        if (currentIndex == 0) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     *  Returns the next element from the iterator.\n+     *\n+     *  @return the next element from the iterator\n+     *  @throws NoSuchElementException if there are no more elements\n+     */\n+    public Object next() throws NoSuchElementException {\n+        if (currentIndex < wrappedIteratorIndex) {\n+            ++currentIndex;\n+            return list.get(currentIndex - 1);\n+        }\n+\n+        Object retval = iterator.next();\n+        list.add(retval);\n+        ++currentIndex;\n+        ++wrappedIteratorIndex;\n+        return retval;\n+    }\n+\n+    /**\n+     *  Returns in the index of the next element.\n+     *\n+     *  @return the index of the next element\n+     */\n+    public int nextIndex() {\n+        return currentIndex;\n+    }\n+\n+    /**\n+     *  Returns the the previous element.\n+     *\n+     *  @return the previous element\n+     *  @throws NoSuchElementException  if there are no previous elements\n+     */\n+    public Object previous() throws NoSuchElementException {\n+        if (currentIndex == 0) {\n+            throw new NoSuchElementException();\n+        }\n+\n+        --currentIndex;\n+        return list.get(currentIndex);    \n+    }\n+\n+    /**\n+     *  Returns the index of the previous element.\n+     *\n+     *  @return  the index of the previous element\n+     */\n+    public int previousIndex() {\n+        return currentIndex - 1;\n+    }\n+\n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @throws UnsupportedOperationException always\n+     */\n+    public void remove() throws UnsupportedOperationException {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n+    }\n+\n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @param o  ignored\n+     *  @throws UnsupportedOperationException always\n+     */\n+    public void set(Object o) throws UnsupportedOperationException {\n+        throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n+    }\n+\n+    // Attributes\n+    //-------------------------------------------------------------------------\n+\n+    /** Holds value of property \"iterator\". */\n+    private Iterator iterator = null;\n+    private LinkedList list = new LinkedList();\n+    \n+    // position of this iterator\n+    private int currentIndex = 0;\n+    // position of the wrapped iterator\n+    // this Iterator should only be used to populate the list\n+    private int wrappedIteratorIndex = 0;\n+\n+    private static final String UNSUPPORTED_OPERATION_MESSAGE =\n+        \"ListIteratorWrapper does not support optional operations of ListIterator.\";\n+\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ProxyIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+\n+/** A Proxy {@link Iterator Iterator} which delegates its methods to a proxy instance.\n+  *\n+  * @since 1.0\n+  * @see ProxyListIterator\n+  * @version $Revision: 1.1 $ $Date: 2002/08/15 23:13:51 $\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  */\n+\n+public class ProxyIterator implements Iterator {\n+    \n+    /** Holds value of property iterator. */\n+    private Iterator iterator;\n+    \n+    /**\n+     *  Constructs a new <Code>ProxyIterator</Code> that will not function\n+     *  until {@link #setIterator(Iterator)} is called.\n+     */\n+    public ProxyIterator() {\n+    }\n+    \n+    /**\n+     *  Constructs a new <Code>ProxyIterator</Code> that will use the\n+     *  given iterator.\n+     *\n+     *  @param iterator  the underyling iterator\n+     */\n+    public ProxyIterator( Iterator iterator ) {\n+        this.iterator = iterator;\n+    }\n+\n+    // Iterator interface\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Returns true if the underlying iterator has more elements.\n+     *\n+     *  @return true if the underlying iterator has more elements\n+     */\n+    public boolean hasNext() {\n+        return getIterator().hasNext();\n+    }\n+\n+    /**\n+     *  Returns the next element from the underlying iterator.\n+     *\n+     *  @return the next element from the underlying iterator\n+     *  @throws NoSuchElementException  if the underlying iterator \n+     *    raises it because it has no more elements\n+     */\n+    public Object next() {\n+        return getIterator().next();\n+    }\n+\n+    /**\n+     *  Removes the last returned element from the collection that spawned\n+     *  the underlying iterator.\n+     */\n+    public void remove() {\n+        getIterator().remove();\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+    /** Getter for property iterator.\n+     * @return Value of property iterator.\n+     */\n+    public Iterator getIterator() {\n+        return iterator;\n+    }\n+    /** Setter for property iterator.\n+     * @param iterator New value of property iterator.\n+     */\n+    public void setIterator(Iterator iterator) {\n+        this.iterator = iterator;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ProxyListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ProxyListIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ListIterator;\n+\n+/**\n+ * A proxy {@link ListIterator ListIterator} which delegates its\n+ * methods to a proxy instance.\n+ *\n+ * @since 2.0\n+ * @see ProxyIterator\n+ * @version $Revision: 1.1 $ $Date: 2002/08/15 23:13:51 $\n+ * @author Rodney Waldhoff\n+ */\n+public class ProxyListIterator implements ListIterator {\n+\n+    // Constructor\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Constructs a new <Code>ProxyListIterator</Code> that will not \n+     *  function until {@link #setListIterator(ListIterator) setListIterator}\n+     *  is invoked.\n+     */\n+    public ProxyListIterator() {\n+    }\n+\n+    /**\n+     *  Constructs a new <Code>ProxyListIterator</Code> that will use the\n+     *  given list iterator.\n+     *\n+     *  @param iterator  the list iterator to use\n+     */\n+    public ProxyListIterator(ListIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    // ListIterator interface\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Invokes the underlying {@link ListIterator#add(Object)} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n+    public void add(Object o) {\n+        getListIterator().add(o);\n+    }\n+\n+    /**\n+     *  Invokes the underlying {@link ListIterator#hasNext()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n+    public boolean hasNext() {\n+        return getListIterator().hasNext();\n+    }\n+\n+    /**\n+     *  Invokes the underlying {@link ListIterator#hasPrevious()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n+    public boolean hasPrevious() {\n+        return getListIterator().hasPrevious();\n+    }\n+\n+    /**\n+     *  Invokes the underlying {@link ListIterator#next()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n+    public Object next() {\n+        return getListIterator().next();\n+    }\n+\n+    /**\n+     *  Invokes the underlying {@link ListIterator#nextIndex()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n+    public int nextIndex() {\n+        return getListIterator().nextIndex();\n+    }\n+\n+    /**\n+     *  Invokes the underlying {@link ListIterator#previous()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n+    public Object previous() {\n+        return getListIterator().previous();\n+    }\n+\n+    /**\n+     *  Invokes the underlying {@link ListIterator#previousIndex()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n+    public int previousIndex() {\n+        return getListIterator().previousIndex();\n+    }\n+\n+    /**\n+     *  Invokes the underlying {@link ListIterator#remove()} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n+    public void remove() {\n+        getListIterator().remove();\n+    }\n+\n+    /**\n+     *  Invokes the underlying {@link ListIterator#set(Object)} method.\n+     *\n+     *  @throws NullPointerException  if the underyling iterator is null\n+     */\n+    public void set(Object o) {\n+        getListIterator().set(o);\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+\n+    /** \n+     * Getter for property iterator.\n+     * @return Value of property iterator.\n+     */\n+    public ListIterator getListIterator() {\n+        return iterator;\n+    }\n+\n+    /**\n+     * Setter for property iterator.\n+     * @param iterator New value of property iterator.\n+     */\n+    public void setListIterator(ListIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    // Attributes\n+    //-------------------------------------------------------------------------\n+\n+    /** Holds value of property \"iterator\". */\n+    private ListIterator iterator;\n+\n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/** <p><code>SingletonIterator</code> is an {@link Iterator} over a single \n+  * object instance.</p>\n+  *\n+  * @since 2.0\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @version $Revision: 1.1 $\n+  */\n+public class SingletonIterator implements Iterator {\n+\n+    private boolean first = true;\n+    private Object object;\n+    \n+    /**\n+     *  Constructs a new <Code>SingletonIterator</Code>.\n+     *\n+     *  @param object  the single object to return from the iterator\n+     */\n+    public SingletonIterator(Object object) {\n+        this.object = object;\n+    }\n+\n+    /**\n+     *  Returns true if the single object hasn't been returned yet.\n+     * \n+     *  @return true if the single object hasn't been returned yet\n+     */\n+    public boolean hasNext() {\n+        return first;\n+    }\n+\n+    /**\n+     *  Returns the single object if it hasn't been returned yet.\n+     *\n+     *  @return the single object\n+     *  @throws NoSuchElementException if the single object has already been\n+     *    returned\n+     */\n+    public Object next() {\n+        if (! first ) {\n+            throw new NoSuchElementException();\n+        }\n+        Object answer = object;\n+        object = null;\n+        first = false;\n+        return answer;\n+    }\n+\n+    /**\n+     *  Throws {@link UnsupportedOperationException}.\n+     *\n+     *  @throws UnsupportedOperationException always\n+     */\n+    public void remove() {\n+        throw new UnsupportedOperationException( \"remove() is not supported by this iterator\" );\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/TransformIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/TransformIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+import org.apache.commons.collections.Transformer;\n+\n+/** A Proxy {@link Iterator Iterator} which uses a {@link Transformer Transformer} instance to \n+  * transform the contents of the {@link Iterator Iterator} into some other form\n+  *\n+  * @since 1.0\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  */\n+\n+public class TransformIterator extends ProxyIterator {\n+    \n+    /** Holds value of property transformer. */\n+    private Transformer transformer;\n+    \n+    \n+    /**\n+     *  Constructs a new <Code>TransformIterator</Code> that will not function\n+     *  until the {@link #setIterator(Iterator) setIterator} method is \n+     *  invoked.\n+     */\n+    public TransformIterator() {\n+    }\n+    \n+    /**\n+     *  Constructs a new <Code>TransformIterator</Code> that won't transform\n+     *  elements from the given iterator.\n+     *\n+     *  @param iterator  the iterator to use\n+     */\n+    public TransformIterator( Iterator iterator ) {\n+        super( iterator );\n+    }\n+\n+    /**\n+     *  Constructs a new <Code>TransformIterator</Code> that will use the\n+     *  given iterator and transformer.  If the given transformer is null,\n+     *  then objects will not be transformed.\n+     *\n+     *  @param iterator  the iterator to use\n+     *  @param transformer  the transformer to use\n+     */\n+    public TransformIterator( Iterator iterator, Transformer transformer ) {\n+        super( iterator );\n+        this.transformer = transformer;\n+    }\n+\n+    // Iterator interface\n+    //-------------------------------------------------------------------------\n+    public Object next() {\n+        return transform( super.next() );\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+    /** Getter for property transformer.\n+     * @return Value of property transformer.\n+     */\n+    public Transformer getTransformer() {\n+        return transformer;\n+    }\n+    /** Setter for property transformer.\n+     * @param transformer New value of property transformer.\n+     */\n+    public void setTransformer(Transformer transformer) {\n+        this.transformer = transformer;\n+    }\n+    \n+    // Implementation methods\n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     *  Transforms the given object using the transformer.  If the \n+     *  transformer is null, the original object is returned as-is.\n+     *\n+     *  @param source  the object to transform\n+     *  @return  the transformed object\n+     */\n+    protected Object transform( Object source ) {\n+        Transformer transformer = getTransformer();\n+        if ( transformer != null ) {\n+            return transformer.transform( source );\n+        }\n+        return source;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/UniqueFilterIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UniqueFilterIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:51 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import org.apache.commons.collections.Predicate;\n+\n+/** A FilterIterator which only returns \"unique\" Objects.  Internally,\n+  * the Iterator maintains a Set of objects it has already encountered,\n+  * and duplicate Objects are skipped.\n+  *\n+  * @author Morgan Delagrange\n+  * @version $Id: UniqueFilterIterator.java,v 1.1 2002/08/15 23:13:51 pjack Exp $\n+  * @since 2.1\n+  */\n+\n+public class UniqueFilterIterator extends FilterIterator {\n+       \n+    //-------------------------------------------------------------------------\n+    \n+    /**\n+     *  Constructs a new <Code>UniqueFilterIterator</Code>.\n+     *\n+     *  @param iterator  the iterator to use\n+     */\n+    public UniqueFilterIterator( Iterator iterator ) {\n+        super( iterator, new UniquePredicate() );\n+    }\n+\n+    private static class UniquePredicate implements Predicate {\n+\n+        HashSet set = new HashSet();\n+\n+        public boolean evaluate(Object object) {\n+            return set.add(object);       \n+        }\n+\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.32 2002/08/13 00:26:52 pjack Exp $\n- * $Revision: 1.32 $\n- * $Date: 2002/08/13 00:26:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.33 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.33 $\n+ * $Date: 2002/08/15 23:13:52 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.32 2002/08/13 00:26:52 pjack Exp $\n+ * @version $Id: TestAll.java,v 1.33 2002/08/15 23:13:52 pjack Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n \n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n-        suite.addTest(TestArrayIterator.suite());\n-        suite.addTest(TestArrayIterator2.suite());\n         suite.addTest(TestArrayStack.suite());\n         suite.addTest(TestBeanMap.suite());\n         suite.addTest(TestBinaryHeap.suite());\n         suite.addTest(TestBoundedFifoBuffer.suite());\n         suite.addTest(TestBoundedFifoBuffer2.suite());\n-        suite.addTest(TestCollatingIterator.suite());\n         suite.addTest(TestCollectionUtils.suite());\n         suite.addTest(TestBufferUtils.suite());\n         suite.addTest(TestSetUtils.suite());\n         suite.addTest(TestFastHashMap1.suite());\n         suite.addTest(TestFastTreeMap.suite());\n         suite.addTest(TestFastTreeMap1.suite());\n-        suite.addTest(TestFilterIterator.suite());\n-        suite.addTest(TestFilterListIterator.suite());\n         suite.addTest(TestHashBag.suite());\n-        suite.addTest(TestIteratorChain.suite());\n-        suite.addTest(TestListIteratorWrapper.suite());\n         suite.addTest(TestLRUMap.suite());\n         suite.addTest(TestMultiHashMap.suite());\n         suite.addTest(TestReverseComparator.suite());\n \tsuite.addTest(TestNullComparator.suite());\n         suite.addTest(TestSequencedHashMap.suite());\n-        suite.addTest(TestSingletonIterator.suite());\n         suite.addTest(TestStaticBucketMap.suite());\n         suite.addTest(TestTreeBag.suite());\n         suite.addTest(TestUnboundedFifoBuffer.suite());\n-        suite.addTest(TestUniqueFilterIterator.suite());\n         suite.addTest(TestReferenceMap.suite());\n+        suite.addTest(org.apache.commons.collections.iterators.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.primitives.TestAll.suite());\n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestAll.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestAll.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.iterators;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all Collections tests.\n+ * @author Rodney Waldhoff\n+ * @version $Id: TestAll.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ */\n+public class TestAll extends TestCase {\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.addTest(TestArrayIterator.suite());\n+        suite.addTest(TestArrayIterator2.suite());\n+        suite.addTest(TestCollatingIterator.suite());\n+        suite.addTest(TestFilterIterator.suite());\n+        suite.addTest(TestFilterListIterator.suite());\n+        suite.addTest(TestIteratorChain.suite());\n+        suite.addTest(TestListIteratorWrapper.suite());\n+        suite.addTest(TestSingletonIterator.suite());\n+        suite.addTest(TestUniqueFilterIterator.suite());\n+        return suite;\n+    }\n+        \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestAll.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.iterators;\n+\n+import junit.framework.*;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the ArrayIterator to ensure that the next() method will actually\n+ * perform the iteration rather than the hasNext() method.\n+ * The code of this test was supplied by Mauricio S. Moura\n+ * \n+ * @author James Strachan\n+ * @author Mauricio S. Moura\n+ * @author Morgan Delagrange\n+ * @version $Id: TestArrayIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ */\n+public class TestArrayIterator extends TestIterator {\n+    \n+    protected String[] testArray = {\n+        \"One\", \"Two\", \"Three\"\n+    };\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestArrayIterator.class);\n+    }\n+    \n+    public TestArrayIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public Iterator makeEmptyIterator() {\n+        return new ArrayIterator(new Object[0]);\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        return new ArrayIterator(testArray);\n+    }\n+    \n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    public void testIterator() {\n+        Iterator iter = (Iterator) makeFullIterator();\n+        for ( int i = 0; i < testArray.length; i++ ) {\n+            Object testValue = testArray[i];            \n+            Object iterValue = iter.next();\n+            \n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+        \n+        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n+\n+\ttry {\n+\t    Object testValue = iter.next();\n+\t} catch (Exception e) {\n+\t  assertTrue(\"NoSuchElementException must be thrown\", \n+\t\t e.getClass().equals((new NoSuchElementException()).getClass()));\n+\t}\n+    }\n+\n+    public void testNullArray() {\n+        try {\n+            Iterator iter = new ArrayIterator(null);\n+            \n+            fail(\"Constructor should throw a NullPointerException when \" +\n+                 \"constructed with a null array\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        ArrayIterator iter = new ArrayIterator();\n+        try {\n+            iter.setArray(null);\n+\n+            fail(\"setArray(null) should throw a NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestArrayIterator2.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.iterators;\n+\n+import junit.framework.*;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the ArrayIterator with primitive type arrays\n+ * \n+ * @author Morgan Delagrange\n+ * @author James Strachan\n+ * @version $Id: TestArrayIterator2.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ */\n+public class TestArrayIterator2 extends TestIterator {\n+    \n+    protected int[] testArray = {\n+        2, 4, 6, 8\n+    };\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestArrayIterator2.class);\n+    }\n+    \n+    public TestArrayIterator2(String testName) {\n+        super(testName);\n+    }\n+    \n+    public Iterator makeEmptyIterator() {\n+        return new ArrayIterator(new int[0]);\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        return new ArrayIterator(testArray);\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    public void testIterator() {\n+        Iterator iter = (Iterator) makeFullIterator();\n+        for ( int i = 0; i < testArray.length; i++ ) {\n+            Integer testValue = new Integer( testArray[i] );            \n+            Number iterValue = (Number) iter.next();\n+            \n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+        \n+        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n+\n+\ttry {\n+\t    Object testValue = iter.next();\n+\t} catch (Exception e) {\n+\t  assertTrue(\"NoSuchElementException must be thrown\", \n+\t\t e.getClass().equals((new NoSuchElementException()).getClass()));\n+\t}\n+    }\n+\n+    // proves that an ArrayIterator set with the constructor has the same number of elements\n+    // as an ArrayIterator set with setArray(Object) \n+    public void testSetArray() {\n+        Iterator iter1 = new ArrayIterator(testArray);\n+        int count1 = 0;\n+        while (iter1.hasNext()) {\n+            ++count1;\n+            iter1.next();\n+        }\n+\n+        assertEquals(\"the count should be right using the constructor\",\n+                     count1,testArray.length);\n+\n+        ArrayIterator iter2 = new ArrayIterator();\n+        iter2.setArray(testArray);\n+        int count2 = 0;\n+        while (iter2.hasNext()) {\n+            ++count2;\n+            iter2.next();\n+        }\n+\n+        assertEquals(\"the count should be right using setArray(Object)\",\n+                     count2,testArray.length);\n+    }\n+\n+    public void testIndexedArray() {\n+        Iterator iter = new ArrayIterator(testArray,2);\n+        int count = 0;\n+        while (iter.hasNext()) {\n+            ++count;\n+            iter.next();\n+        }\n+\n+        assertEquals(\"the count should be right using ArrayIterator(Object,2) \",\n+                     count,testArray.length-2);\n+\n+        iter = new ArrayIterator(testArray,1,testArray.length-1);\n+        count = 0;\n+        while (iter.hasNext()) {\n+            ++count;\n+            iter.next();\n+        }\n+\n+        assertEquals(\"the count should be right using ArrayIterator(Object,1,\"+\n+                     (testArray.length-1)+\") \", count, testArray.length-2);\n+\n+        try {\n+            iter = new ArrayIterator(testArray,-1);\n+            fail(\"new ArrayIterator(Object,-1) should throw an \"+\n+                 \"ArrayIndexOutOfBoundsException\");\n+        } catch(ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = new ArrayIterator(testArray,testArray.length+1);\n+            fail(\"new ArrayIterator(Object,length+1) should throw an \"+\n+                 \"ArrayIndexOutOfBoundsException\");\n+        } catch(ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = new ArrayIterator(testArray,0,-1);\n+            fail(\"new ArrayIterator(Object,0,-1) should throw an \"+\n+                 \"ArrayIndexOutOfBoundsException\");\n+        } catch(ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = new ArrayIterator(testArray,0,testArray.length+1);\n+            fail(\"new ArrayIterator(Object,0,length+1) should throw an \"+\n+                 \"ArrayIndexOutOfBoundsException\");\n+        } catch(ArrayIndexOutOfBoundsException aioobe) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = new ArrayIterator(testArray,1,1);\n+            fail(\"new ArrayIterator(Object,1,1) should throw an \"+\n+                 \"IllegalArgumentException\");\n+        } catch(IllegalArgumentException iae) {\n+            // expected\n+        }\n+\n+        try {\n+            iter = new ArrayIterator(testArray,testArray.length-1,testArray.length-2);\n+            fail(\"new ArrayIterator(Object,length-2,length-1) should throw an \"+\n+                 \"IllegalArgumentException\");\n+        } catch(IllegalArgumentException iae) {\n+            // expected\n+        }\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestCollatingIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.iterators;\n+\n+import junit.framework.*;\n+import java.util.Iterator;\n+import java.util.Comparator;\n+import java.util.ArrayList;\n+import org.apache.commons.collections.comparators.ComparableComparator;\n+\n+/**\n+ * Unit test suite for {@link CollatingIterator}.\n+ * @version $Revision: 1.1 $ $Date: 2002/08/15 23:13:52 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestCollatingIterator extends TestIterator {\n+\n+    //------------------------------------------------------------ Conventional\n+    \n+    public TestCollatingIterator(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestCollatingIterator.class);\n+    }\n+\n+    //--------------------------------------------------------------- Lifecycle\n+\n+    private Comparator comparator = null;\n+    private ArrayList evens = null; \n+    private ArrayList odds = null; \n+    private ArrayList fib = null; \n+\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        comparator = new ComparableComparator();\n+        evens = new ArrayList();\n+        odds = new ArrayList();\n+        for(int i=0;i<20;i++) {\n+            if(0 == i%2) {\n+                evens.add(new Integer(i));\n+            } else {\n+                odds.add(new Integer(i));\n+            }\n+        }\n+        fib = new ArrayList();\n+        fib.add(new Integer(1));\n+        fib.add(new Integer(1));\n+        fib.add(new Integer(2));\n+        fib.add(new Integer(3));\n+        fib.add(new Integer(5));\n+        fib.add(new Integer(8));\n+        fib.add(new Integer(13));\n+        fib.add(new Integer(21));\n+    }       \n+\n+    //---------------------------------------------------- TestIterator Methods\n+    \n+    public Iterator makeEmptyIterator() {\n+        return new CollatingIterator(comparator);\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(odds.iterator());\n+        iter.addIterator(fib.iterator());\n+        return iter;\n+    }\n+\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    public boolean supportsEmptyIterator() {\n+        return true;\n+    }\n+\n+    //------------------------------------------------------------------- Tests\n+\n+    public void testGetSetComparator() {\n+        CollatingIterator iter = new CollatingIterator();\n+        assertNull(iter.getComparator());\n+        iter.setComparator(comparator);\n+        assertSame(comparator,iter.getComparator());\n+        iter.setComparator(null);\n+        assertNull(iter.getComparator());\n+    }\n+\n+    public void testIterateEven() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(evens.iterator());\n+        for(int i=0;i<evens.size();i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i),iter.next());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateEvenOdd() {\n+        CollatingIterator iter = new CollatingIterator(comparator,evens.iterator(),odds.iterator());\n+        for(int i=0;i<20;i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(new Integer(i),iter.next());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateOddEven() {\n+        CollatingIterator iter = new CollatingIterator(comparator,odds.iterator(),evens.iterator());\n+        for(int i=0;i<20;i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(new Integer(i),iter.next());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testIterateEvenEven() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(evens.iterator());\n+        for(int i=0;i<evens.size();i++) {\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i),iter.next());\n+            assertTrue(iter.hasNext());\n+            assertEquals(evens.get(i),iter.next());\n+        }\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+\n+    public void testIterateFibEvenOdd() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(fib.iterator());\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(odds.iterator());\n+        \n+        assertEquals(new Integer(0),iter.next());  // even   0\n+        assertEquals(new Integer(1),iter.next());  // fib    1\n+        assertEquals(new Integer(1),iter.next());  // fib    1\n+        assertEquals(new Integer(1),iter.next());  // odd    1\n+        assertEquals(new Integer(2),iter.next());  // fib    2\n+        assertEquals(new Integer(2),iter.next());  // even   2\n+        assertEquals(new Integer(3),iter.next());  // fib    3\n+        assertEquals(new Integer(3),iter.next());  // odd    3\n+        assertEquals(new Integer(4),iter.next());  // even   4\n+        assertEquals(new Integer(5),iter.next());  // fib    5\n+        assertEquals(new Integer(5),iter.next());  // odd    5\n+        assertEquals(new Integer(6),iter.next());  // even   6\n+        assertEquals(new Integer(7),iter.next());  // odd    7\n+        assertEquals(new Integer(8),iter.next());  // fib    8\n+        assertEquals(new Integer(8),iter.next());  // even   8\n+        assertEquals(new Integer(9),iter.next());  // odd    9\n+        assertEquals(new Integer(10),iter.next()); // even  10\n+        assertEquals(new Integer(11),iter.next()); // odd   11\n+        assertEquals(new Integer(12),iter.next()); // even  12\n+        assertEquals(new Integer(13),iter.next()); // fib   13\n+        assertEquals(new Integer(13),iter.next()); // odd   13\n+        assertEquals(new Integer(14),iter.next()); // even  14\n+        assertEquals(new Integer(15),iter.next()); // odd   15\n+        assertEquals(new Integer(16),iter.next()); // even  16\n+        assertEquals(new Integer(17),iter.next()); // odd   17\n+        assertEquals(new Integer(18),iter.next()); // even  18\n+        assertEquals(new Integer(19),iter.next()); // odd   19\n+        assertEquals(new Integer(21),iter.next()); // fib   21\n+\n+        assertTrue(!iter.hasNext());\n+    }\n+\n+    public void testRemoveFromSingle() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(evens.iterator());\n+        int expectedSize = evens.size();\n+        while(iter.hasNext()) {\n+            Integer val = (Integer)(iter.next());\n+            if(val.intValue() % 4 == 0) {\n+                expectedSize--;\n+                iter.remove();\n+            }\n+        }\n+        assertEquals(expectedSize,evens.size());\n+    }\n+\n+    public void testRemoveFromDouble() {\n+        CollatingIterator iter = new CollatingIterator(comparator);\n+        iter.addIterator(evens.iterator());\n+        iter.addIterator(odds.iterator());\n+        int expectedSize = evens.size() + odds.size();\n+        while(iter.hasNext()) {\n+            Integer val = (Integer)(iter.next());\n+            if(val.intValue() % 4 == 0 || val.intValue() % 3 == 0 ) {\n+                expectedSize--;\n+                iter.remove();\n+            }\n+        }\n+        assertEquals(expectedSize,(evens.size() + odds.size()));\n+    }   \n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestFilterIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestFilterIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+\n+// TestFilterIterator.java \n+package org.apache.commons.collections.iterators;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.framework.Test;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ *\n+ * @author  Jan Sorensen\n+ */\n+public class TestFilterIterator extends TestIterator {\n+\n+    /** Creates new TestFilterIterator */\n+    public TestFilterIterator(String name) {\n+        super(name);\n+    }\n+\n+    private String[] array;\n+    private FilterIterator iterator;\n+    /**\n+     * Set up instance variables required by this test case.\n+     */\n+    public void setUp() {\n+        array = new String[] { \"a\", \"b\", \"c\" };\n+        initIterator();\n+    }\n+\n+    /**\n+     * Tear down instance variables required by this test case.\n+     */\n+    public void tearDown() {\n+        iterator = null;\n+    }\n+\n+    /**\n+     * Return the tests included in this test suite.\n+     */\n+    public static Test suite() {\n+        return (new TestSuite(TestFilterIterator.class));\n+    }\n+\n+    /**\n+     * Returns an full iterator wrapped in a\n+     * FilterIterator that blocks all the elements\n+     * \n+     * @return \"empty\" FilterIterator\n+     */\n+    public Iterator makeEmptyIterator() {\n+        return makeBlockAllFilter(new ArrayIterator(array));\n+    }\n+\n+    /**\n+     * Returns an array with elements wrapped in a pass-through\n+     * FilterIterator\n+     * \n+     * @return \n+     */\n+    public Iterator makeFullIterator() {\n+        return makePassThroughFilter(new ArrayIterator(array));\n+    }\n+\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+\n+    public void testRepeatedHasNext() {\n+        for (int i = 0; i <= array.length; i++) {\n+            assertTrue(iterator.hasNext());\n+        }\n+    }\n+\n+    public void testRepeatedNext() {\n+        for (int i = 0; i < array.length; i++)\n+            iterator.next();\n+        verifyNoMoreElements();\n+    }\n+\n+    public void testReturnValues() {\n+        verifyElementsInPredicate(new String[0]);\n+        verifyElementsInPredicate(new String[] { \"a\" });\n+        verifyElementsInPredicate(new String[] { \"b\" });\n+        verifyElementsInPredicate(new String[] { \"c\" });\n+        verifyElementsInPredicate(new String[] { \"a\", \"b\" });\n+        verifyElementsInPredicate(new String[] { \"a\", \"c\" });\n+        verifyElementsInPredicate(new String[] { \"b\", \"c\" });\n+        verifyElementsInPredicate(new String[] { \"a\", \"b\", \"c\" });\n+    }\n+\n+    private void verifyNoMoreElements() {\n+        assertTrue(!iterator.hasNext());\n+        try {\n+            iterator.next();\n+            fail(\"NoSuchElementException expected\");\n+        }\n+        catch (NoSuchElementException e) {\n+            // success\n+        }\n+    }\n+\n+    private void verifyElementsInPredicate(final String[] elements) {\n+        Predicate pred = new Predicate() {\n+            public boolean evaluate(Object x) {\n+                for (int i = 0; i < elements.length; i++)\n+                    if (elements[i].equals(x))\n+                        return true;\n+                return false;\n+            }\n+        };\n+        initIterator();\n+        iterator.setPredicate(pred);\n+        for (int i = 0; i < elements.length; i++) {\n+            String s = (String)iterator.next();\n+            assertEquals(elements[i], s);\n+            assertTrue(i == elements.length - 1 ? !iterator.hasNext() : iterator.hasNext());\n+        }\n+        verifyNoMoreElements();\n+    }\n+\n+    private void initIterator() {\n+        iterator = makePassThroughFilter(new ArrayIterator(array));\n+    }\n+\n+    /**\n+     * Returns a FilterIterator that does not filter\n+     * any of its elements\n+     * \n+     * @param i      the Iterator to \"filter\"\n+     * @return \"filtered\" iterator\n+     */\n+    protected FilterIterator makePassThroughFilter(Iterator i) {\n+        Predicate pred = new Predicate() {\n+                public boolean evaluate(Object x) { return true; }\n+        };\n+        return new FilterIterator(i,pred);\n+    }\n+\n+    /**\n+     * Returns a FilterIterator that blocks\n+     * all of its elements\n+     * \n+     * @param i      the Iterator to \"filter\"\n+     * @return \"filtered\" iterator\n+     */\n+    protected FilterIterator makeBlockAllFilter(Iterator i) {\n+        Predicate pred = new Predicate() {\n+                public boolean evaluate(Object x) { return false; }\n+        };\n+        return new FilterIterator(i,pred);\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestFilterListIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.framework.Test;\n+import java.util.NoSuchElementException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Random;\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/08/15 23:13:52 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestFilterListIterator extends TestCase {\n+    public TestFilterListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestFilterListIterator.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestFilterListIterator.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    private ArrayList list = null;\n+    private ArrayList odds = null;\n+    private ArrayList evens = null;\n+    private ArrayList threes = null;\n+    private ArrayList fours = null;\n+    private ArrayList sixes = null;\n+    private Predicate truePred = null;\n+    private Predicate falsePred = null;\n+    private Predicate evenPred = null;\n+    private Predicate oddPred = null;\n+    private Predicate threePred = null;\n+    private Predicate fourPred = null;\n+    private Random random = new Random();\n+\n+    public void setUp() {\n+        list = new ArrayList();\n+        odds = new ArrayList();\n+        evens = new ArrayList();\n+        threes = new ArrayList();\n+        fours = new ArrayList();\n+        sixes = new ArrayList();\n+        for(int i=0;i<20;i++) {\n+            list.add(new Integer(i));\n+            if(i%2 == 0) { evens.add(new Integer(i)); }\n+            if(i%2 == 1) { odds.add(new Integer(i)); }\n+            if(i%3 == 0) { threes.add(new Integer(i)); }\n+            if(i%4 == 0) { fours.add(new Integer(i)); }\n+            if(i%6 == 0) { sixes.add(new Integer(i)); }\n+        }\n+\n+        truePred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return true;\n+            }\n+        };\n+\n+        falsePred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return true;\n+            }\n+        };\n+\n+        evenPred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return (((Integer)x).intValue()%2 == 0);\n+            }\n+        };\n+\n+        oddPred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return (((Integer)x).intValue()%2 == 1);\n+            }\n+        };\n+\n+        threePred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return (((Integer)x).intValue()%3 == 0);\n+            }\n+        };\n+\n+        fourPred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return (((Integer)x).intValue()%4 == 0);\n+            }\n+        };\n+\n+    }\n+\n+    public void tearDown() {\n+        list = null;\n+        odds = null;\n+        evens = null;\n+        threes = null;\n+        fours = null;\n+        sixes = null;\n+        truePred = null;\n+        falsePred = null;\n+        evenPred = null;\n+        oddPred = null;\n+        threePred = null;\n+        fourPred = null;\n+    }\n+\n+    public void testWalkLists() {\n+        // this just confirms that our walkLists method works OK\n+        walkLists(list,list.listIterator());\n+    }\n+\n+    public void testManual() {\n+        // do this one \"by hand\" as a sanity check\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),threePred);\n+        \n+        assertEquals(new Integer(0),filtered.next());\n+        assertEquals(new Integer(3),filtered.next());\n+        assertEquals(new Integer(6),filtered.next());\n+        assertEquals(new Integer(9),filtered.next());\n+        assertEquals(new Integer(12),filtered.next());\n+        assertEquals(new Integer(15),filtered.next());\n+        assertEquals(new Integer(18),filtered.next());\n+\n+        assertEquals(new Integer(18),filtered.previous());\n+        assertEquals(new Integer(15),filtered.previous());\n+        assertEquals(new Integer(12),filtered.previous());\n+        assertEquals(new Integer(9),filtered.previous());\n+        assertEquals(new Integer(6),filtered.previous());\n+        assertEquals(new Integer(3),filtered.previous());\n+        assertEquals(new Integer(0),filtered.previous());\n+    \n+        assertTrue(!filtered.hasPrevious());\n+\n+        assertEquals(new Integer(0),filtered.next());\n+        assertEquals(new Integer(3),filtered.next());\n+        assertEquals(new Integer(6),filtered.next());\n+        assertEquals(new Integer(9),filtered.next());\n+        assertEquals(new Integer(12),filtered.next());\n+        assertEquals(new Integer(15),filtered.next());\n+        assertEquals(new Integer(18),filtered.next());\n+\n+        assertTrue(!filtered.hasNext());\n+\n+        assertEquals(new Integer(18),filtered.previous());\n+        assertEquals(new Integer(15),filtered.previous());\n+        assertEquals(new Integer(12),filtered.previous());\n+        assertEquals(new Integer(9),filtered.previous());\n+        assertEquals(new Integer(6),filtered.previous());\n+        assertEquals(new Integer(3),filtered.previous());\n+        assertEquals(new Integer(0),filtered.previous());\n+\n+        assertEquals(new Integer(0),filtered.next());\n+        assertEquals(new Integer(0),filtered.previous());\n+        assertEquals(new Integer(0),filtered.next());\n+        \n+        assertEquals(new Integer(3),filtered.next());\n+        assertEquals(new Integer(6),filtered.next());\n+        assertEquals(new Integer(6),filtered.previous());\n+        assertEquals(new Integer(3),filtered.previous());\n+        assertEquals(new Integer(3),filtered.next());\n+        assertEquals(new Integer(6),filtered.next());\n+\n+        assertEquals(new Integer(9),filtered.next());\n+        assertEquals(new Integer(12),filtered.next());\n+        assertEquals(new Integer(15),filtered.next());\n+        assertEquals(new Integer(15),filtered.previous());\n+        assertEquals(new Integer(12),filtered.previous());\n+        assertEquals(new Integer(9),filtered.previous());\n+\n+    }\n+\n+    public void testTruePredicate() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),truePred);\n+        walkLists(list,filtered);\n+    }\n+    \n+    public void testFalsePredicate() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),falsePred);\n+        walkLists(new ArrayList(),filtered);\n+    }\n+\n+    public void testEvens() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),evenPred);\n+        walkLists(evens,filtered);\n+    }\n+    \n+    public void testOdds() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),oddPred);\n+        walkLists(odds,filtered);\n+    }\n+\n+    public void testThrees() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),threePred);\n+        walkLists(threes,filtered);\n+    }\n+\n+    public void testFours() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),fourPred);\n+        walkLists(fours,filtered);\n+    }\n+\n+    public void testNestedSixes() {\n+        FilterListIterator filtered = new FilterListIterator(\n+                                        new FilterListIterator(list.listIterator(),threePred),\n+                                        evenPred\n+                                      );\n+        walkLists(sixes,filtered);\n+    }\n+\n+    public void testNestedSixes2() {\n+        FilterListIterator filtered = new FilterListIterator(\n+                                        new FilterListIterator(list.listIterator(),evenPred),\n+                                        threePred\n+                                      );\n+        walkLists(sixes,filtered);\n+    }\n+\n+    public void testNestedSixes3() {        \n+        FilterListIterator filtered = new FilterListIterator(\n+                                        new FilterListIterator(list.listIterator(),threePred),\n+                                        evenPred\n+                                      );\n+        walkLists(sixes,new FilterListIterator(filtered,truePred));\n+    }\n+\n+    public void testNextChangesPrevious() {\n+        {\n+            FilterListIterator filtered = new FilterListIterator(list.listIterator(),threePred);\n+            nextNextPrevious(threes.listIterator(),filtered);\n+        }\n+    \n+        {\n+            FilterListIterator filtered = new FilterListIterator(list.listIterator(),truePred);\n+            nextNextPrevious(list.listIterator(),filtered);\n+        }\n+    }\n+\n+    public void testPreviousChangesNext() {\n+        {\n+            FilterListIterator filtered = new FilterListIterator(list.listIterator(),threePred);\n+            ListIterator expected = threes.listIterator();\n+            walkForward(expected,filtered);\n+            previousPreviousNext(expected,filtered);\n+        }\n+        {\n+            FilterListIterator filtered = new FilterListIterator(list.listIterator(),truePred);\n+            ListIterator expected = list.listIterator();\n+            walkForward(expected,filtered);\n+            previousPreviousNext(expected,filtered);\n+        }\n+    }\n+\n+    public void testFailingHasNextBug() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),fourPred);\n+        ListIterator expected = fours.listIterator();\n+        while(expected.hasNext()) {\n+            expected.next();\n+            filtered.next();\n+        }\n+        assertTrue(filtered.hasPrevious());\n+        assertTrue(!filtered.hasNext());\n+        assertEquals(expected.previous(),filtered.previous());\n+    }\n+\n+    // Utilities\n+\n+    private void walkForward(ListIterator expected, ListIterator testing) {\n+        while(expected.hasNext()) {\n+            assertEquals(expected.nextIndex(),testing.nextIndex());\n+            assertEquals(expected.previousIndex(),testing.previousIndex());\n+            assertTrue(testing.hasNext());\n+            assertEquals(expected.next(),testing.next());\n+        }\n+    }\n+\n+    private void walkBackward(ListIterator expected, ListIterator testing) {\n+        while(expected.hasPrevious()) {\n+            assertEquals(expected.nextIndex(),testing.nextIndex());\n+            assertEquals(expected.previousIndex(),testing.previousIndex());\n+            assertTrue(testing.hasPrevious());\n+            assertEquals(expected.previous(),testing.previous());\n+        }\n+    }\n+\n+    private void nextNextPrevious(ListIterator expected, ListIterator testing) {\n+        // calls to next() should change the value returned by previous()\n+        // even after previous() has been set by a call to hasPrevious()\n+        assertEquals(expected.next(),testing.next());\n+        assertEquals(expected.hasPrevious(),testing.hasPrevious());\n+        Object expecteda = expected.next();\n+        Object testinga = testing.next();\n+        assertEquals(expecteda,testinga);\n+        Object expectedb = expected.previous();\n+        Object testingb = testing.previous();\n+        assertEquals(expecteda,expectedb);\n+        assertEquals(testinga,testingb);\n+    }\n+\n+    private void previousPreviousNext(ListIterator expected, ListIterator testing) {\n+        // calls to previous() should change the value returned by next()\n+        // even after next() has been set by a call to hasNext()\n+        assertEquals(expected.previous(),testing.previous());\n+        assertEquals(expected.hasNext(),testing.hasNext());\n+        Object expecteda = expected.previous();\n+        Object testinga = testing.previous();\n+        assertEquals(expecteda,testinga);\n+        Object expectedb = expected.next();\n+        Object testingb = testing.next();\n+        assertEquals(expecteda,testingb);\n+        assertEquals(expecteda,expectedb);\n+        assertEquals(testinga,testingb);\n+    }\n+\n+    private void walkLists(List list, ListIterator testing) {\n+        ListIterator expected = list.listIterator();\n+\n+        // walk all the way forward\n+        walkForward(expected,testing);\n+\n+        // walk all the way back\n+        walkBackward(expected,testing);\n+\n+        // forward,back,foward\n+        while(expected.hasNext()) {\n+            assertEquals(expected.nextIndex(),testing.nextIndex());\n+            assertEquals(expected.previousIndex(),testing.previousIndex());\n+            assertTrue(testing.hasNext());\n+            assertEquals(expected.next(),testing.next());\n+            assertTrue(testing.hasPrevious());\n+            assertEquals(expected.previous(),testing.previous());\n+            assertTrue(testing.hasNext());\n+            assertEquals(expected.next(),testing.next());\n+        }\n+\n+\n+        // walk all the way back\n+        walkBackward(expected,testing);\n+\n+        for(int i=0;i<list.size();i++) {\n+            // walk forward i\n+            for(int j=0;j<i;j++) {\n+                assertEquals(expected.nextIndex(),testing.nextIndex());\n+                assertEquals(expected.previousIndex(),testing.previousIndex());\n+                assertTrue(expected.hasNext()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasNext());\n+                assertEquals(expected.next(),testing.next());\n+            }\n+            // walk back i/2\n+            for(int j=0;j<i/2;j++) {\n+                assertEquals(expected.nextIndex(),testing.nextIndex());\n+                assertEquals(expected.previousIndex(),testing.previousIndex());\n+                assertTrue(expected.hasPrevious()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasPrevious());\n+                assertEquals(expected.previous(),testing.previous());\n+            }\n+            // walk foward i/2\n+            for(int j=0;j<i/2;j++) {\n+                assertEquals(expected.nextIndex(),testing.nextIndex());\n+                assertEquals(expected.previousIndex(),testing.previousIndex());\n+                assertTrue(expected.hasNext()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasNext());\n+                assertEquals(expected.next(),testing.next());\n+            }\n+            // walk back i\n+            for(int j=0;j<i;j++) {\n+                assertEquals(expected.nextIndex(),testing.nextIndex());\n+                assertEquals(expected.previousIndex(),testing.previousIndex());\n+                assertTrue(expected.hasPrevious()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasPrevious());\n+                assertEquals(expected.previous(),testing.previous());\n+            }\n+        }\n+\n+        // random walk\n+        StringBuffer walkdescr = new StringBuffer(500);\n+        for(int i=0;i<500;i++) {\n+            if(random.nextBoolean()) {\n+                // step foward\n+                walkdescr.append(\"+\");\n+                if(expected.hasNext()) {\n+                    assertEquals(walkdescr.toString(),expected.next(),testing.next());\n+                }\n+            } else {\n+                // step backward\n+                walkdescr.append(\"-\");\n+                if(expected.hasPrevious()) {\n+                    assertEquals(walkdescr.toString(),expected.previous(),testing.previous());\n+                }\n+            }\n+            assertEquals(walkdescr.toString(),expected.nextIndex(),testing.nextIndex());\n+            assertEquals(walkdescr.toString(),expected.previousIndex(),testing.previousIndex());\n+        }\n+\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/Attic/TestIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+     \n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import org.apache.commons.collections.TestObject;\n+\n+/**\n+ * Base class for tetsing Iterator interface\n+ * \n+ * @author Morgan Delagrange\n+ */\n+public abstract class TestIterator extends TestObject {\n+\n+    public TestIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public abstract Iterator makeEmptyIterator();\n+\n+    public abstract Iterator makeFullIterator();\n+\n+    /**\n+     * Whether or not we are testing an iterator that can be\n+     * empty.  Default is true.\n+     * \n+     * @return true if Iterators can be empty\n+     */\n+    public boolean supportsEmptyIterator() {\n+        return true;\n+    }\n+\n+    /**\n+     * Whether or not we are testing an iterator that can contain\n+     * elements.  Default is true.\n+     * \n+     * @return true if Iterators can be empty\n+     */\n+    public boolean supportsFullIterator() {\n+        return true;\n+    }\n+\n+    /**\n+     * Should throw a NoSuchElementException.\n+     */\n+    public void testEmptyIterator() {\n+        if (supportsEmptyIterator() == false) {\n+            return;\n+        }\n+\n+        Iterator iter = makeEmptyIterator();\n+        assertTrue(\"hasNext() should return false for empty iterators\",iter.hasNext() == false);\n+        try {\n+\t    iter.next();\n+            fail(\"NoSuchElementException must be thrown when Iterator is exhausted\");\n+\t} catch (NoSuchElementException e) {\n+\t}\n+    }\n+\n+    /**\n+     * NoSuchElementException (or any other exception)\n+     * should not be thrown for the first element.  \n+     * NoSuchElementException must be thrown when\n+     * hasNext() returns false\n+     */\n+    public void testFullIterator() {\n+        if (supportsFullIterator() == false) {\n+            return;\n+        }\n+\n+        Iterator iter = makeFullIterator();\n+\n+        assertTrue(\"hasNext() should return true for at least one element\",iter.hasNext());\n+\n+        try {\n+\t    iter.next();\n+\t} catch (NoSuchElementException e) {\n+            fail(\"Full iterators must have at least one element\");\n+\t}\n+\n+        while (iter.hasNext()) {\n+            iter.next();\n+        }\n+\n+        try {\n+\t    iter.next();\n+            fail(\"NoSuchElementException must be thrown when Iterator is exhausted\");\n+\t} catch (NoSuchElementException e) {\n+\t}\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestIteratorChain.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.iterators;\n+\n+import junit.framework.*;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the ArrayIterator to ensure that the next() method will actually\n+ * perform the iteration rather than the hasNext() method.\n+ * The code of this test was supplied by Mauricio S. Moura\n+ * \n+ * @author James Strachan\n+ * @author Mauricio S. Moura\n+ * @author Morgan Delagrange\n+ * @version $Id: TestIteratorChain.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ */\n+public class TestIteratorChain extends TestIterator {\n+\n+    protected String[] testArray = {\n+        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n+    };\n+\n+    protected List list1 = null;\n+    protected List list2 = null;\n+    protected List list3 = null;\n+\n+    public static Test suite() {\n+        return new TestSuite(TestIteratorChain.class);\n+    }\n+\n+    public TestIteratorChain(String testName) {\n+        super(testName);\n+    }\n+\n+    public void setUp() {\n+        list1 = new ArrayList();\n+        list1.add(\"One\");\n+        list1.add(\"Two\");\n+        list1.add(\"Three\");\n+        list2 = new ArrayList();\n+        list2.add(\"Four\");\n+        list3 = new ArrayList();\n+        list3.add(\"Five\");\n+        list3.add(\"Six\");        \n+    }\n+\n+    public Iterator makeEmptyIterator() {\n+        ArrayList list = new ArrayList();\n+        return new IteratorChain(list.iterator());\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        IteratorChain chain = new IteratorChain();\n+\n+        Iterator i = list1.iterator();\n+\n+        chain.addIterator(list1.iterator());\n+        chain.addIterator(list2.iterator());\n+        chain.addIterator(list3.iterator());\n+        return chain;\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+\n+    public void testIterator() {\n+        Iterator iter = (Iterator) makeFullIterator();\n+        for ( int i = 0; i < testArray.length; i++ ) {\n+            Object testValue = testArray[i];            \n+            Object iterValue = iter.next();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n+\n+        try {\n+            Object testValue = iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\", \n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+    public void testRemove() {\n+        Iterator iter = (Iterator) makeFullIterator();\n+\n+        try {\n+            iter.remove();\n+            fail(\"Calling remove before the first call to next() should throw an exception\");\n+        } catch (IllegalStateException e) {\n+\n+        }\n+\n+        for ( int i = 0; i < testArray.length; i++ ) {\n+            Object testValue = testArray[i];            \n+            Object iterValue = iter.next();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+\n+            if (! iterValue.equals(\"Four\")) {\n+                iter.remove();\n+            }\n+        }\n+\n+        assertTrue(\"List is empty\",list1.size() == 0);\n+        assertTrue(\"List is empty\",list2.size() == 1);\n+        assertTrue(\"List is empty\",list3.size() == 0);\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestListIteratorWrapper.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.iterators;\n+\n+import junit.framework.*;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the ListIteratorWrapper to insure that it simulates\n+ * a ListIterator correctly.\n+ *\n+ * @author Morgan Delagrange\n+ * @version $Id: TestListIteratorWrapper.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ */\n+public class TestListIteratorWrapper extends TestIterator {\n+\n+    protected String[] testArray = {\n+        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n+    };\n+\n+    protected List list1 = null;\n+\n+    public static Test suite() {\n+        return new TestSuite(TestListIteratorWrapper.class);\n+    }\n+\n+    public TestListIteratorWrapper(String testName) {\n+        super(testName);\n+    }\n+\n+    public void setUp() {\n+        list1 = new ArrayList();\n+        list1.add(\"One\");\n+        list1.add(\"Two\");\n+        list1.add(\"Three\");\n+        list1.add(\"Four\");\n+        list1.add(\"Five\");\n+        list1.add(\"Six\");\n+    }\n+\n+    public Iterator makeEmptyIterator() {\n+        ArrayList list = new ArrayList();\n+        return new ListIteratorWrapper(list.iterator());\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        Iterator i = list1.iterator();\n+\n+        return new ListIteratorWrapper(i);\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+\n+    public void testIterator() {\n+        ListIterator iter = (ListIterator) makeFullIterator();\n+        for ( int i = 0; i < testArray.length; i++ ) {\n+            Object testValue = testArray[i];            \n+            Object iterValue = iter.next();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n+\n+        try {\n+            Object testValue = iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\", \n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+        // now, read it backwards\n+        for (int i = testArray.length - 1; i > -1; --i) {\n+            Object testValue = testArray[i];\n+            Object iterValue = iter.previous();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+\n+        try {\n+            Object testValue = iter.previous();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\", \n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+\n+        // now, read it forwards again\n+        for ( int i = 0; i < testArray.length; i++ ) {\n+            Object testValue = testArray[i];            \n+            Object iterValue = iter.next();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+\n+    }\n+\n+    public void testRemove() {\n+        Iterator iter = (Iterator) makeFullIterator();\n+\n+        try {\n+            iter.remove();\n+            fail(\"FilterIterator does not support the remove() method\");\n+        } catch (UnsupportedOperationException e) {\n+\n+        }\n+\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.iterators;\n+\n+import junit.framework.*;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the SingletonIterator to ensure that the next() method will actually\n+ * perform the iteration rather than the hasNext() method.\n+ *\n+ * @author James Strachan\n+ * @version $Id: TestSingletonIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ */\n+public class TestSingletonIterator extends TestIterator {\n+\n+    private static final Object testValue = \"foo\";\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestSingletonIterator.class);\n+    }\n+    \n+    public TestSingletonIterator(String testName) {\n+        super(testName);\n+    }\n+    \n+    /**\n+     * Returns null. SingletonIterators can never be empty;\n+     * they always have exactly one element.\n+     * \n+     * @return null\n+     */\n+    public Iterator makeEmptyIterator() {\n+        return null;\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        return new SingletonIterator( testValue );\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+    \n+    /**\n+     * Whether or not we are testing an iterator that can be\n+     * empty.  SingletonIterators are never empty;\n+     * \n+     * @return false\n+     */\n+    public boolean supportsEmptyIterator() {\n+        return false;\n+    }\n+\n+    public void testIterator() {\n+        Iterator iter = (Iterator) makeObject();\n+        assertTrue( \"Iterator has a first item\", iter.hasNext() );\n+        \n+        Object iterValue = iter.next();\n+        assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        \n+        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n+\n+\ttry {\n+\t    Object testValue = iter.next();\n+\t} \n+        catch (Exception e) {\n+\t  assertTrue(\"NoSuchElementException must be thrown\", \n+\t\t e.getClass().equals((new NoSuchElementException()).getClass()));\n+\t}\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/iterators/TestUniqueFilterIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestUniqueFilterIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/08/15 23:13:52 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.iterators;\n+\n+import junit.framework.*;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Tests the ArrayIterator to ensure that the next() method will actually\n+ * perform the iteration rather than the hasNext() method.\n+ * The code of this test was supplied by Mauricio S. Moura\n+ * \n+ * @author James Strachan\n+ * @author Mauricio S. Moura\n+ * @author Morgan Delagrange\n+ * @version $Id: TestUniqueFilterIterator.java,v 1.1 2002/08/15 23:13:52 pjack Exp $\n+ */\n+public class TestUniqueFilterIterator extends TestIterator {\n+\n+    protected String[] testArray = {\n+        \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\n+    };\n+\n+    protected List list1 = null;\n+\n+    public static Test suite() {\n+        return new TestSuite(TestUniqueFilterIterator.class);\n+    }\n+\n+    public TestUniqueFilterIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public void setUp() {\n+        list1 = new ArrayList();\n+        list1.add(\"One\");\n+        list1.add(\"Two\");\n+        list1.add(\"Three\");\n+        list1.add(\"Two\");\n+        list1.add(\"One\");\n+        list1.add(\"Four\");\n+        list1.add(\"Five\");\n+        list1.add(\"Five\");\n+        list1.add(\"Six\");\n+        list1.add(\"Five\");\n+    }\n+\n+    public Iterator makeEmptyIterator() {\n+        ArrayList list = new ArrayList();\n+        return new UniqueFilterIterator(list.iterator());\n+    }\n+\n+    public Iterator makeFullIterator() {\n+        Iterator i = list1.iterator();\n+\n+        return new UniqueFilterIterator(i);\n+    }\n+\n+    /**\n+     * Return a new, empty {@link Object} to used for testing.\n+     */\n+    public Object makeObject() {\n+        return makeFullIterator();\n+    }\n+\n+    public void testIterator() {\n+        Iterator iter = (Iterator) makeFullIterator();\n+        for ( int i = 0; i < testArray.length; i++ ) {\n+            Object testValue = testArray[i];            \n+            Object iterValue = iter.next();\n+\n+            assertEquals( \"Iteration value is correct\", testValue, iterValue );\n+        }\n+\n+        assertTrue(\"Iterator should now be empty\", ! iter.hasNext() );\n+\n+        try {\n+            Object testValue = iter.next();\n+        } catch (Exception e) {\n+            assertTrue(\"NoSuchElementException must be thrown\", \n+                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+        }\n+    }\n+\n+    public void testRemove() {\n+        Iterator iter = (Iterator) makeFullIterator();\n+\n+        try {\n+            iter.remove();\n+            fail(\"FilterIterator does not support the remove() method\");\n+        } catch (UnsupportedOperationException e) {\n+\n+        }\n+\n+    }\n+\n+}\n+", "timestamp": 1029453232, "metainfo": ""}