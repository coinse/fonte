{"sha": "71dbf4de18bb1d532f4e788fada4bf36667aa78a", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r740150 | mbenson | 2009-02-02 15:24:00 -0800 (Mon, 02 Feb 2009) | 1 line          make all [collections] maps implement IterableMap     ------------------------------------------------------------------------     r572176 | skestle | 2007-09-02 15:04:41 -0700 (Sun, 02 Sep 2007) | 1 line          Generified LazySortedMap to fix build errors     ------------------------------------------------------------------------     r571381 | skestle | 2007-08-30 22:13:56 -0700 (Thu, 30 Aug 2007) | 1 line          Generified LazyMap     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/TestLazyMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLazyMap.java\n  */\n package org.apache.commons.collections.map;\n \n+import static org.apache.commons.collections.map.LazyMap.getLazyMap;\n+\n import java.util.HashMap;\n import java.util.Map;\n \n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-\n import org.apache.commons.collections.Factory;\n import org.apache.commons.collections.FactoryUtils;\n+import org.apache.commons.collections.Transformer;\n+import org.junit.Test;\n \n /**\n  * Extension of {@link AbstractTestMap} for exercising the \n  *\n  * @author Phil Steitz\n  */\n-public class TestLazyMap extends AbstractTestMap {\n-    \n-    protected static final Factory oneFactory = FactoryUtils.constantFactory(\"One\");\n-    protected static final Factory nullFactory = FactoryUtils.nullFactory();\n-    \n+public class TestLazyMap<K, V> extends AbstractTestIterableMap<K, V> {\n+\n+    private static final Factory<Integer> oneFactory = FactoryUtils.constantFactory(1);\n+\n     public TestLazyMap(String testName) {\n         super(testName);\n     }\n-    \n-    public static Test suite() {\n-        return new TestSuite(TestLazyMap.class);\n-    }\n-    \n+\n     public static void main(String args[]) {\n         String[] testCaseName = { TestLazyMap.class.getName()};\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    //-----------------------------------------------------------------------    \n-    protected Map decorateMap(Map map, Factory factory) {\n-        return LazyMap.decorate(map, factory);\n-    }\n-    \n-    public Map makeEmptyMap() {\n-        return decorateMap(new HashMap(), nullFactory);\n-    }\n-    \n-    protected Map makeTestMap(Factory factory) {\n-        return decorateMap(new HashMap(), factory);\n+    @Override\n+    public LazyMap<K,V> makeObject() {\n+        return getLazyMap(new HashMap<K,V>(), FactoryUtils.<V>nullFactory());\n     }\n \n-    //-----------------------------------------------------------------------    \n+    //-----------------------------------------------------------------------\n+    @Override\n     public void testMapGet() {\n-        Map map = makeTestMap(oneFactory);\n+        //TODO eliminate need for this via superclass - see svn history.\n+    }\n+\n+    @Test\n+    public void mapGetWithFactory() {\n+        Map<Integer, Number> map = getLazyMap(new HashMap<Integer,Number>(), oneFactory);\n         assertEquals(0, map.size());\n-        String s1 = (String) map.get(\"Five\");\n-        assertEquals(\"One\", s1);\n+        Number i1 = map.get(\"Five\");\n+        assertEquals(1, i1);\n         assertEquals(1, map.size());\n-        String s2 = (String) map.get(new String(new char[] {'F','i','v','e'}));\n-        assertEquals(\"One\", s2);\n+        Number i2 = map.get(new String(new char[] {'F','i','v','e'}));\n+        assertEquals(1, i2);\n         assertEquals(1, map.size());\n-        assertSame(s1, s2);\n-        \n-        map = makeTestMap(nullFactory);\n+        assertSame(i1, i2);\n+\n+        map = getLazyMap(new HashMap<Integer,Number>(), FactoryUtils.<Long>nullFactory());\n         Object o = map.get(\"Five\");\n         assertEquals(null,o);\n         assertEquals(1, map.size());\n-        \n     }\n-    \n+\n+    @Test\n+    public void mapGetWithTransformer() {\n+        Transformer<Number, Integer> intConverter = new Transformer<Number, Integer>(){\n+            public Integer transform(Number input) {\n+                return input.intValue();\n+            }\n+        };\n+        Map<Long, Number> map = getLazyMap(new HashMap<Long,Number>(), intConverter );\n+        assertEquals(0, map.size());\n+        Number i1 = map.get(123L);\n+        assertEquals(123, i1);\n+        assertEquals(1, map.size());\n+    }\n+\n+\n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n //            (java.io.Serializable) map,\n //            \"D:/dev/collections/data/test/LazyMap.fullCollection.version3.1.obj\");\n //    }\n-}\n+}", "timestamp": 1252994250, "metainfo": ""}