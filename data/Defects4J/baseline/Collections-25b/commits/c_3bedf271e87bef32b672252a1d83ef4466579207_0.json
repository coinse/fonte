{"sha": "3bedf271e87bef32b672252a1d83ef4466579207", "log": "37106: serialVersionUIDs should be private (static final long)  ", "commit": "\n--- a/src/java/org/apache/commons/collections/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/ReferenceMap.java\n     /**\n      *  For serialization.\n      */\n-    final private static long serialVersionUID = -3370601314380922368L;\n+    private static final long serialVersionUID = -3370601314380922368L;\n \n \n     /**\n--- a/src/java/org/apache/commons/collections/functors/AllPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AllPredicate.java\n public final class AllPredicate implements Predicate, PredicateDecorator, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -3094696765038308799L;\n+    private static final long serialVersionUID = -3094696765038308799L;\n     \n     /** The array of predicates to call */\n     private final Predicate[] iPredicates;\n--- a/src/java/org/apache/commons/collections/functors/AndPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AndPredicate.java\n public final class AndPredicate implements Predicate, PredicateDecorator, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 4189014213763186912L;\n+    private static final long serialVersionUID = 4189014213763186912L;\n     \n     /** The array of predicates to call */\n     private final Predicate iPredicate1;\n--- a/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/AnyPredicate.java\n public final class AnyPredicate implements Predicate, PredicateDecorator, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 7429999530934647542L;\n+    private static final long serialVersionUID = 7429999530934647542L;\n     \n     /** The array of predicates to call */\n     private final Predicate[] iPredicates;\n--- a/src/java/org/apache/commons/collections/functors/ChainedClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ChainedClosure.java\n public class ChainedClosure implements Closure, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -3520677225766901240L;\n+    private static final long serialVersionUID = -3520677225766901240L;\n \n     /** The closures to call in turn */\n     private final Closure[] iClosures;\n--- a/src/java/org/apache/commons/collections/functors/ChainedTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ChainedTransformer.java\n public class ChainedTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 3514945074733160196L;\n+    private static final long serialVersionUID = 3514945074733160196L;\n \n     /** The transformers to call in turn */\n     private final Transformer[] iTransformers;\n--- a/src/java/org/apache/commons/collections/functors/CloneTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/CloneTransformer.java\n public class CloneTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -8188742709499652567L;\n+    private static final long serialVersionUID = -8188742709499652567L;\n \n     /** Singleton predicate instance */\n     public static final Transformer INSTANCE = new CloneTransformer();\n--- a/src/java/org/apache/commons/collections/functors/ClosureTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ClosureTransformer.java\n public class ClosureTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 478466901448617286L;\n+    private static final long serialVersionUID = 478466901448617286L;\n \n     /** The closure to wrap */\n     private final Closure iClosure;\n--- a/src/java/org/apache/commons/collections/functors/ConstantFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/ConstantFactory.java\n public class ConstantFactory implements Factory, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -3520677225766901240L;\n+    private static final long serialVersionUID = -3520677225766901240L;\n     \n     /** Returns null each time */\n     public static final Factory NULL_INSTANCE = new ConstantFactory(null);\n--- a/src/java/org/apache/commons/collections/functors/ConstantTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ConstantTransformer.java\n public class ConstantTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 6374440726369055124L;\n+    private static final long serialVersionUID = 6374440726369055124L;\n     \n     /** Returns null each time */\n     public static final Transformer NULL_INSTANCE = new ConstantTransformer(null);\n--- a/src/java/org/apache/commons/collections/functors/EqualPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/EqualPredicate.java\n public final class EqualPredicate implements Predicate, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 5633766978029907089L;\n+    private static final long serialVersionUID = 5633766978029907089L;\n \n     /** The value to compare to */\n     private final Object iValue;\n--- a/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionClosure.java\n public final class ExceptionClosure implements Closure, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 7179106032121985545L;\n+    private static final long serialVersionUID = 7179106032121985545L;\n     \n \n     /** Singleton predicate instance */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionFactory.java\n public final class ExceptionFactory implements Factory, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 7179106032121985545L;\n+    private static final long serialVersionUID = 7179106032121985545L;\n     \n \n     /** Singleton predicate instance */\n--- a/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n public final class ExceptionPredicate implements Predicate, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 7179106032121985545L;\n+    private static final long serialVersionUID = 7179106032121985545L;\n     \n     /** Singleton predicate instance */\n     public static final Predicate INSTANCE = new ExceptionPredicate();\n--- a/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n public final class ExceptionTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 7179106032121985545L;\n+    private static final long serialVersionUID = 7179106032121985545L;\n     \n \n     /** Singleton predicate instance */\n--- a/src/java/org/apache/commons/collections/functors/FactoryTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/FactoryTransformer.java\n public class FactoryTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -6817674502475353160L;\n+    private static final long serialVersionUID = -6817674502475353160L;\n \n     /** The factory to wrap */\n     private final Factory iFactory;\n--- a/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/FalsePredicate.java\n public final class FalsePredicate implements Predicate, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 7533784454832764388L;\n+    private static final long serialVersionUID = 7533784454832764388L;\n     \n     /** Singleton predicate instance */\n     public static final Predicate INSTANCE = new FalsePredicate();\n--- a/src/java/org/apache/commons/collections/functors/ForClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/ForClosure.java\n public class ForClosure implements Closure, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -1190120533393621674L;\n+    private static final long serialVersionUID = -1190120533393621674L;\n \n     /** The number of times to loop */\n     private final int iCount;\n--- a/src/java/org/apache/commons/collections/functors/IdentityPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/IdentityPredicate.java\n public final class IdentityPredicate implements Predicate, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -89901658494523293L;\n+    private static final long serialVersionUID = -89901658494523293L;\n \n     \n     /** The value to compare to */\n--- a/src/java/org/apache/commons/collections/functors/IfClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/IfClosure.java\n public class IfClosure implements Closure, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 3518477308466486130L;\n+    private static final long serialVersionUID = 3518477308466486130L;\n \n     /** The test */\n     private final Predicate iPredicate;\n--- a/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n public final class InstanceofPredicate implements Predicate, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -6682656911025165584L;\n+    private static final long serialVersionUID = -6682656911025165584L;\n \n     /** The type to compare to */\n     private final Class iType;\n--- a/src/java/org/apache/commons/collections/functors/InstantiateFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/InstantiateFactory.java\n public class InstantiateFactory implements Factory, Serializable {\n \n     /** The serial version */\n-    static final long serialVersionUID = -7732226881069447957L;\n+    private static final long serialVersionUID = -7732226881069447957L;\n \n     /** The class to create */\n     private final Class iClassToInstantiate;\n--- a/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n public class InstantiateTransformer implements Transformer, Serializable {\n \n     /** The serial version */\n-    static final long serialVersionUID = 3786388740793356347L;\n+    private static final long serialVersionUID = 3786388740793356347L;\n     \n     /** Singleton instance that uses the no arg constructor */\n     public static final Transformer NO_ARG_INSTANCE = new InstantiateTransformer();\n--- a/src/java/org/apache/commons/collections/functors/InvokerTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/InvokerTransformer.java\n public class InvokerTransformer implements Transformer, Serializable {\n \n     /** The serial version */\n-    static final long serialVersionUID = -8653385846894047688L;\n+    private static final long serialVersionUID = -8653385846894047688L;\n     \n     /** The method name to call */\n     private final String iMethodName;\n--- a/src/java/org/apache/commons/collections/functors/MapTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/MapTransformer.java\n public final class MapTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 862391807045468939L;\n+    private static final long serialVersionUID = 862391807045468939L;\n     \n     /** The map of data to lookup in */\n     private final Map iMap;\n--- a/src/java/org/apache/commons/collections/functors/NOPClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/NOPClosure.java\n public class NOPClosure implements Closure, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 3518477308466486130L;\n+    private static final long serialVersionUID = 3518477308466486130L;\n \n     /** Singleton predicate instance */\n     public static final Closure INSTANCE = new NOPClosure();\n--- a/src/java/org/apache/commons/collections/functors/NOPTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/NOPTransformer.java\n public class NOPTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 2133891748318574490L;\n+    private static final long serialVersionUID = 2133891748318574490L;\n \n     /** Singleton predicate instance */\n     public static final Transformer INSTANCE = new NOPTransformer();\n--- a/src/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NonePredicate.java\n public final class NonePredicate implements Predicate, PredicateDecorator, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 2007613066565892961L;\n+    private static final long serialVersionUID = 2007613066565892961L;\n     \n     /** The array of predicates to call */\n     private final Predicate[] iPredicates;\n--- a/src/java/org/apache/commons/collections/functors/NotNullPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NotNullPredicate.java\n public final class NotNullPredicate implements Predicate, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 7533784454832764388L;\n+    private static final long serialVersionUID = 7533784454832764388L;\n     \n     /** Singleton predicate instance */\n     public static final Predicate INSTANCE = new NotNullPredicate();\n--- a/src/java/org/apache/commons/collections/functors/NotPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NotPredicate.java\n public final class NotPredicate implements Predicate, PredicateDecorator, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -2654603322338049674L;\n+    private static final long serialVersionUID = -2654603322338049674L;\n     \n     /** The predicate to decorate */\n     private final Predicate iPredicate;\n--- a/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n public final class NullIsExceptionPredicate implements Predicate, PredicateDecorator, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 3243449850504576071L;\n+    private static final long serialVersionUID = 3243449850504576071L;\n     \n     /** The predicate to decorate */\n     private final Predicate iPredicate;\n--- a/src/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n public final class NullIsFalsePredicate implements Predicate, PredicateDecorator, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -2997501534564735525L;\n+    private static final long serialVersionUID = -2997501534564735525L;\n     \n     /** The predicate to decorate */\n     private final Predicate iPredicate;\n--- a/src/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n public final class NullIsTruePredicate implements Predicate, PredicateDecorator, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -7625133768987126273L;\n+    private static final long serialVersionUID = -7625133768987126273L;\n     \n     /** The predicate to decorate */\n     private final Predicate iPredicate;\n--- a/src/java/org/apache/commons/collections/functors/NullPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/NullPredicate.java\n public final class NullPredicate implements Predicate, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 7533784454832764388L;\n+    private static final long serialVersionUID = 7533784454832764388L;\n     \n     /** Singleton predicate instance */\n     public static final Predicate INSTANCE = new NullPredicate();\n--- a/src/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/OnePredicate.java\n public final class OnePredicate implements Predicate, PredicateDecorator, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -8125389089924745785L;\n+    private static final long serialVersionUID = -8125389089924745785L;\n     \n     /** The array of predicates to call */\n     private final Predicate[] iPredicates;\n--- a/src/java/org/apache/commons/collections/functors/OrPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/OrPredicate.java\n public final class OrPredicate implements Predicate, PredicateDecorator, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -8791518325735182855L;\n+    private static final long serialVersionUID = -8791518325735182855L;\n     \n     /** The array of predicates to call */\n     private final Predicate iPredicate1;\n--- a/src/java/org/apache/commons/collections/functors/PredicateTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/PredicateTransformer.java\n public class PredicateTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 5278818408044349346L;\n+    private static final long serialVersionUID = 5278818408044349346L;\n \n     /** The closure to wrap */\n     private final Predicate iPredicate;\n--- a/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n+++ b/src/java/org/apache/commons/collections/functors/PrototypeFactory.java\n     static class PrototypeCloneFactory implements Factory, Serializable {\n         \n         /** The serial version */\n-        static final long serialVersionUID = 5604271422565175555L;\n+        private static final long serialVersionUID = 5604271422565175555L;\n         \n         /** The object to clone each time */\n         private final Object iPrototype;\n     static class PrototypeSerializationFactory implements Factory, Serializable {\n         \n         /** The serial version */\n-        static final long serialVersionUID = -8704966966139178833L;\n+        private static final long serialVersionUID = -8704966966139178833L;\n         \n         /** The object to clone via serialization each time */\n         private final Serializable iPrototype;\n--- a/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/StringValueTransformer.java\n public final class StringValueTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 7511110693171758606L;\n+    private static final long serialVersionUID = 7511110693171758606L;\n \n     /** Singleton predicate instance */\n     public static final Transformer INSTANCE = new StringValueTransformer();\n--- a/src/java/org/apache/commons/collections/functors/SwitchClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/SwitchClosure.java\n public class SwitchClosure implements Closure, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 3518477308466486130L;\n+    private static final long serialVersionUID = 3518477308466486130L;\n \n     /** The tests to consider */\n     private final Predicate[] iPredicates;\n--- a/src/java/org/apache/commons/collections/functors/SwitchTransformer.java\n+++ b/src/java/org/apache/commons/collections/functors/SwitchTransformer.java\n public class SwitchTransformer implements Transformer, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -6404460890903469332L;\n+    private static final long serialVersionUID = -6404460890903469332L;\n \n     /** The tests to consider */\n     private final Predicate[] iPredicates;\n--- a/src/java/org/apache/commons/collections/functors/TransformedPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TransformedPredicate.java\n public final class TransformedPredicate implements Predicate, PredicateDecorator, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -5596090919668315834L;\n+    private static final long serialVersionUID = -5596090919668315834L;\n     \n     /** The transformer to call */\n     private final Transformer iTransformer;\n--- a/src/java/org/apache/commons/collections/functors/TransformerClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/TransformerClosure.java\n public class TransformerClosure implements Closure, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -5194992589193388969L;\n+    private static final long serialVersionUID = -5194992589193388969L;\n \n     /** The transformer to wrap */\n     private final Transformer iTransformer;\n--- a/src/java/org/apache/commons/collections/functors/TransformerPredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TransformerPredicate.java\n public final class TransformerPredicate implements Predicate, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -2407966402920578741L;\n+    private static final long serialVersionUID = -2407966402920578741L;\n     \n     /** The transformer to call */\n     private final Transformer iTransformer;\n--- a/src/java/org/apache/commons/collections/functors/TruePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/TruePredicate.java\n public final class TruePredicate implements Predicate, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = 3374767158756189740L;\n+    private static final long serialVersionUID = 3374767158756189740L;\n     \n     /** Singleton predicate instance */\n     public static final Predicate INSTANCE = new TruePredicate();\n--- a/src/java/org/apache/commons/collections/functors/UniquePredicate.java\n+++ b/src/java/org/apache/commons/collections/functors/UniquePredicate.java\n public final class UniquePredicate implements Predicate, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -3319417438027438040L;\n+    private static final long serialVersionUID = -3319417438027438040L;\n     \n     /** The set of previously seen objects */\n     private final Set iSet = new HashSet();\n--- a/src/java/org/apache/commons/collections/functors/WhileClosure.java\n+++ b/src/java/org/apache/commons/collections/functors/WhileClosure.java\n public class WhileClosure implements Closure, Serializable {\n \n     /** Serial version UID */\n-    static final long serialVersionUID = -3110538116913760108L;\n+    private static final long serialVersionUID = -3110538116913760108L;\n \n     /** The test condition */\n     private final Predicate iPredicate;\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n         assertEquals(false, MapUtils.isNotEmpty(map));\n     }\n \n+\n+    public void testPopulateMap() {\n+        Map map = new HashMap();\n+        \n+    }\n }", "timestamp": 1132754816, "metainfo": ""}