{"sha": "7035d2262465172d8cfcebeaae800aebe9e1273d", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r572176 | skestle | 2007-09-02 15:04:41 -0700 (Sun, 02 Sep 2007) | 1 line          Generified LazySortedMap to fix build errors     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/map/TestLazySortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLazySortedMap.java\n  */\n package org.apache.commons.collections.map;\n \n+import static org.apache.commons.collections.map.LazySortedMap.getLazySortedMap;\n+\n import java.util.Comparator;\n import java.util.Map;\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n-\n import org.apache.commons.collections.Factory;\n import org.apache.commons.collections.FactoryUtils;\n import org.apache.commons.collections.Transformer;\n import org.apache.commons.collections.TransformerUtils;\n+import org.junit.Test;\n \n /**\n  * Extension of {@link TestLazyMap} for exercising the \n  *\n  * @author Phil Steitz\n  */\n-public class TestLazySortedMap extends AbstractTestSortedMap {\n+public class TestLazySortedMap<K, V> extends AbstractTestSortedMap<K, V> {\n     \n-    protected static final Factory oneFactory = FactoryUtils.constantFactory(\"One\");\n-    protected static final Factory nullFactory = FactoryUtils.nullFactory();\n-    \n+    private static final Factory<Integer> oneFactory = FactoryUtils.constantFactory(1);\n+   \n     public TestLazySortedMap(String testName) {\n         super(testName);\n-    }\n-    \n-    public static Test suite() {\n-        return new TestSuite(TestLazySortedMap.class);\n     }\n     \n     public static void main(String args[]) {\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-    //-----------------------------------------------------------------------    \n-    protected SortedMap decorateMap(SortedMap map, Factory factory) {\n-        return LazySortedMap.decorate(map, factory);\n+    @Override\n+    public SortedMap<K,V> makeObject() {\n+        return getLazySortedMap(new TreeMap<K,V>(), FactoryUtils.<V>nullFactory());\n     }\n     \n-    public Map makeEmptyMap() {\n-        return decorateMap(new TreeMap(), nullFactory);\n-    }\n-    \n-    protected SortedMap makeTestSortedMap(Factory factory) {\n-        return decorateMap(new TreeMap(), factory);\n-    }\n-    \n+    @Override\n     public boolean isSubMapViewsSerializable() {\n-        // TreeMap sub map views have a bug in deserialization.\n+        // TODO TreeMap sub map views have a bug in deserialization.\n         return false;\n     }\n \n+    @Override\n     public boolean isAllowNullKey() {\n         return false;\n     }\n \n     // from TestLazyMap\n     //-----------------------------------------------------------------------\n+    @Override\n     public void testMapGet() {\n-        Map map = makeTestSortedMap(oneFactory);\n+        //TODO eliminate need for this via superclass - see svn history.\n+    }\n+    \n+    @Test\n+    public void mapGet() {\n+        Map<Integer, Number> map = getLazySortedMap(new TreeMap<Integer,Number>(), oneFactory);\n         assertEquals(0, map.size());\n-        String s1 = (String) map.get(\"Five\");\n-        assertEquals(\"One\", s1);\n+        Number i1 = map.get(5);\n+        assertEquals(1, i1);\n         assertEquals(1, map.size());\n-        String s2 = (String) map.get(new String(new char[] {'F','i','v','e'}));\n-        assertEquals(\"One\", s2);\n-        assertEquals(1, map.size());\n-        assertSame(s1, s2);\n-        \n-        map = makeTestSortedMap(nullFactory);\n-        Object o = map.get(\"Five\");\n+\n+        map = getLazySortedMap(new TreeMap<Integer,Number>(), FactoryUtils.<Number>nullFactory());\n+        Number o = map.get(5);\n         assertEquals(null,o);\n         assertEquals(1, map.size());\n         \n     \n     //-----------------------------------------------------------------------\n     public void testSortOrder() {\n-        SortedMap map = makeTestSortedMap(oneFactory);\n-        map.put(\"A\",  \"a\");\n+        SortedMap<String, Number> map = getLazySortedMap(new TreeMap<String,Number>(), oneFactory);\n+        map.put(\"A\",  5);\n         map.get(\"B\"); // Entry with value \"One\" created\n-        map.put(\"C\", \"c\");\n+        map.put(\"C\", 8);\n         assertEquals(\"First key should be A\", \"A\", map.firstKey());\n         assertEquals(\"Last key should be C\", \"C\", map.lastKey());\n         assertEquals(\"First key in tail map should be B\", \n         assertEquals(\"Last key in submap should be B\",\n             \"B\", map.subMap(\"A\",\"C\").lastKey());\n         \n-        Comparator c = map.comparator();\n+        Comparator<?> c = map.comparator();\n         assertTrue(\"natural order, so comparator should be null\", \n             c == null);      \n     } \n     \n     public void testTransformerDecorate() {\n-        Transformer transformer = TransformerUtils.asTransformer(oneFactory);\n-        SortedMap map = LazySortedMap.decorate(new TreeMap(), transformer);     \n+        Transformer<Object, Integer> transformer = TransformerUtils.asTransformer(oneFactory);\n+        SortedMap<Integer, Number> map = getLazySortedMap(new TreeMap<Integer, Number>(), transformer);     \n         assertTrue(map instanceof LazySortedMap);  \n          try {\n-            map = LazySortedMap.decorate(new TreeMap(), (Transformer) null);\n+            map = getLazySortedMap(new TreeMap<Integer, Number>(), (Transformer<Integer, Number>) null);\n             fail(\"Expecting IllegalArgumentException for null transformer\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n         try {\n-            map = LazySortedMap.decorate(null, transformer);\n+            map = getLazySortedMap((SortedMap<Integer,Number>) null, transformer);\n             fail(\"Expecting IllegalArgumentException for null map\");\n         } catch (IllegalArgumentException e) {\n             // expected\n         } \n     }\n     \n+    @Override\n     public String getCompatibilityVersion() {\n         return \"3.1\";\n     }\n //            (java.io.Serializable) map,\n //            \"D:/dev/collections/data/test/LazySortedMap.fullCollection.version3.1.obj\");\n //    }\n-}\n+}", "timestamp": 1252994252, "metainfo": ""}