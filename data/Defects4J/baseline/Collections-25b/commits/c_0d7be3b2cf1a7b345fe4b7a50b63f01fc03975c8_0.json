{"sha": "0d7be3b2cf1a7b345fe4b7a50b63f01fc03975c8", "log": "Change to use PredicateUtils rather than own Predicate   ", "commit": "\n--- a/src/java/org/apache/commons/collections/decorators/TypedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedCollection.java,v 1.3 2003/05/09 16:41:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedCollection.java,v 1.4 2003/05/16 14:19:31 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Collection;\n \n import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n \n /**\n  * <code>TypedCollection</code> decorates another <code>Collection</code>\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/05/09 16:41:57 $\n+ * @version $Revision: 1.4 $ $Date: 2003/05/16 14:19:31 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n      * @throws IllegalArgumentException if type is null\n      */\n     protected static Predicate getPredicate(Class type) {\n-        return new InstanceofPredicate(type);\n-    }\n-\n-    /**\n-     * <code>Predicate</code> implementation that checks the type of an object.\n-     * This class may eventually be replaced by \n-     * <code>org.apache.commons.lang.functor.PredicateUtils.instanceofPredicate()</code>.\n-     */\n-    static class InstanceofPredicate implements Predicate {\n-        /** The type to check for */\n-        private final Class type;\n-\n-        /**\n-         * Constructor\n-         */\n-        public InstanceofPredicate(Class type) {\n-            if (type == null) {\n-                throw new IllegalArgumentException(\"Type must not be null\");\n-            }\n-            this.type = type;\n-        }\n-\n-        /**\n-         * Return true if the object is an instanceof the type of the predicate.\n-         * @param object an <code>Object</code>\n-         * @return <code>true</code> if the object is an instanceof the type of the predicate\n-         */\n-        public boolean evaluate(Object object) {\n-            return type.isInstance(object);\n-        }\n+        return PredicateUtils.instanceofPredicate(type);\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/iterators/UniqueFilterIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/UniqueFilterIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UniqueFilterIterator.java,v 1.3 2003/01/15 21:49:14 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/UniqueFilterIterator.java,v 1.4 2003/05/16 14:20:01 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.iterators;\n \n-import java.util.HashSet;\n import java.util.Iterator;\n-import org.apache.commons.collections.Predicate;\n+\n+import org.apache.commons.collections.PredicateUtils;\n \n /** \n  * A FilterIterator which only returns \"unique\" Objects.  Internally,\n  * and duplicate Objects are skipped.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.3 $ $Date: 2003/01/15 21:49:14 $\n+ * @version $Revision: 1.4 $ $Date: 2003/05/16 14:20:01 $\n  * \n  * @author Morgan Delagrange\n  */\n      *  @param iterator  the iterator to use\n      */\n     public UniqueFilterIterator( Iterator iterator ) {\n-        super( iterator, new UniquePredicate() );\n-    }\n-\n-    /**\n-     * Private Predicate needed to implement the unique behaviour.\n-     */\n-    private static class UniquePredicate implements Predicate {\n-        HashSet set = new HashSet();\n-\n-        public boolean evaluate(Object object) {\n-            return set.add(object);       \n-        }\n+        super(iterator, PredicateUtils.uniquePredicate());\n     }\n \n }", "timestamp": 1053094801, "metainfo": ""}