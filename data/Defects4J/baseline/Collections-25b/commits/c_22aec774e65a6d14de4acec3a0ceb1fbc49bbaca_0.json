{"sha": "22aec774e65a6d14de4acec3a0ceb1fbc49bbaca", "log": "TreeList iterator previous() broken as remove(int) could break invariants bug 35258, reported by and test case from Tomas D.  ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/TreeList.java\n+++ b/src/java/org/apache/commons/collections/list/TreeList.java\n                 if (rightIsNext) {\n                     right = leftMax.right;\n                 }\n+                AVLNode leftPrevious = left.left;\n                 left = left.removeMax();\n+                if (left == null) {\n+                    // special case where left that was deleted was a double link\n+                    // only occurs when height difference is equal\n+                    left = leftPrevious;\n+                    leftIsPrevious = true;\n+                }\n                 if (relativePosition > 0) {\n                     relativePosition--;\n                 }\n--- a/src/test/org/apache/commons/collections/list/TestTreeList.java\n+++ b/src/test/org/apache/commons/collections/list/TestTreeList.java\n /*\n- *  Copyright 2004 The Apache Software Foundation\n+ *  Copyright 2004,2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n package org.apache.commons.collections.list;\n \n import java.util.List;\n+import java.util.ListIterator;\n \n import junit.framework.Test;\n \n     }\n \n     public static void benchmark(List l) {\n-        StringBuffer sb = new StringBuffer();\n         long start = System.currentTimeMillis();\n         for (int i = 0; i < 100000; i++) {\n             l.add(new Integer(i));\n //        l.add(\"A5\");\n //        l.add(\"A6\");\n //    }\n+\n+    public void testBug35258() {\n+        Object objectToRemove = new Integer(3);\n+        \n+        List treelist = new TreeList();\n+        treelist.add(new Integer(0));\n+        treelist.add(new Integer(1));\n+        treelist.add(new Integer(2));\n+        treelist.add(new Integer(3));\n+        treelist.add(new Integer(4));\n+        \n+        // this cause inconsistence of ListIterator()\n+        treelist.remove(objectToRemove);\n+        \n+        ListIterator li = treelist.listIterator();\n+        assertEquals(new Integer(0), li.next());\n+        assertEquals(new Integer(0), li.previous());\n+        assertEquals(new Integer(0), li.next());\n+        assertEquals(new Integer(1), li.next());\n+        // this caused error in bug 35258\n+        assertEquals(new Integer(1), li.previous());\n+        assertEquals(new Integer(1), li.next());\n+        assertEquals(new Integer(2), li.next());\n+        assertEquals(new Integer(2), li.previous());\n+        assertEquals(new Integer(2), li.next());\n+        assertEquals(new Integer(4), li.next());\n+        assertEquals(new Integer(4), li.previous());\n+        assertEquals(new Integer(4), li.next());\n+        assertEquals(false, li.hasNext());\n+    }\n+\n }", "timestamp": 1137808161, "metainfo": ""}