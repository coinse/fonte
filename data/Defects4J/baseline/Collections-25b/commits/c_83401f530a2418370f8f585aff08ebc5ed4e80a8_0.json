{"sha": "83401f530a2418370f8f585aff08ebc5ed4e80a8", "log": "Added more decorator tests.   ", "commit": "\n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.19 2003/10/12 06:37:30 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.20 2003/10/13 02:48:16 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.19 $ $Date: 2003/10/12 06:37:30 $\n+ * @version $Revision: 1.20 $ $Date: 2003/10/13 02:48:16 $\n  * \n  * @author Stephen Colebourne\n  */\n         \n         suite.addTest(TestTypedBag.suite());\n         suite.addTest(TestTypedSortedBag.suite());\n+        suite.addTest(TestTypedSortedSet.suite());\n         \n         suite.addTest(TestUnmodifiableMap.suite());\n+        suite.addTest(TestUnmodifiableList.suite());\n+        suite.addTest(TestUnmodifiableSortedSet.suite());\n         \n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestTypedSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTypedSortedSet.java,v 1.1 2003/10/13 02:48:16 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestSortedSet;\n+import org.apache.commons.collections.BulkTest;\n+\n+\n+/**\n+ * Extension of {@link AbstractTestSortedSet} for exercising the \n+ * {@link TypedSortedSet} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/13 02:48:16 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestTypedSortedSet extends AbstractTestSortedSet{\n+    \n+    public TestTypedSortedSet(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestTypedSortedSet.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTypedSortedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------      \n+    protected Class integerType = new Integer(0).getClass();\n+    \n+    public Set makeEmptySet() {\n+        return TypedSortedSet.decorate(new TreeSet(), integerType);\n+    }\n+    \n+    public Set makeFullSet() {\n+        TreeSet set = new TreeSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return TypedSortedSet.decorate(set, integerType);\n+    }\n+   \n+    \n+//--------------------------------------------------------------------            \n+    protected Long getNextAsLong() {\n+        SortedSet set = (SortedSet) makeFullSet();\n+        int nextValue = ((Integer)set.last()).intValue() + 1;\n+        return new Long(nextValue);\n+    }\n+    \n+    protected Integer getNextAsInt() {\n+        SortedSet set = (SortedSet) makeFullSet();\n+        int nextValue = ((Integer)set.last()).intValue() + 1;\n+        return new Integer(nextValue);\n+    }\n+           \n+    public void testIllegalAdd() {\n+        Set set = makeFullSet();\n+        try {\n+            set.add(getNextAsLong());\n+            fail(\"Should fail type test.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't convert long to int\", \n+         !set.contains(getNextAsInt()));   \n+    }\n+\n+    public void testIllegalAddAll() {\n+        Set set = makeFullSet();\n+        Set elements = new TreeSet();\n+        elements.add(getNextAsLong());\n+        try {\n+            set.addAll(elements);\n+            fail(\"Should fail type test.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't convert long to int\", \n+         !set.contains(getNextAsInt()));  \n+    }       \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestUnmodifiableList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestUnmodifiableList.java,v 1.1 2003/10/13 02:48:16 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestList;\n+\n+/**\n+ * Extension of {@link AbstractTestList} for exercising the \n+ * {@link UnmodifiableList} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/13 02:48:16 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestUnmodifiableList extends AbstractTestList{\n+    \n+    public TestUnmodifiableList(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestUnmodifiableList.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedSortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------       \n+    public List makeEmptyList() {\n+        return UnmodifiableList.decorate(new ArrayList());\n+    }\n+    \n+    public List makeFullList() {\n+        ArrayList list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return UnmodifiableList.decorate(list);\n+    }\n+    \n+    protected boolean isSetSupported() {\n+        return false;\n+    }\n+    \n+    protected boolean isAddSupported() {\n+        return false;\n+    }\n+    \n+    protected boolean isRemoveSupported() {\n+        return false;\n+    }   \n+//--------------------------------------------------------------------   \n+    protected UnmodifiableList list = null;\n+    protected ArrayList array = null;\n+    \n+    protected void setupList() {\n+        list = (UnmodifiableList) makeFullList();\n+        array = new ArrayList();\n+        array.add(new Integer(1));\n+    }\n+    \n+    /** \n+     * Verify that base list and sublists are not modifiable\n+     */\n+    public void testUnmodifiable() {\n+        setupList();\n+        verifyUnmodifiable(list); \n+        verifyUnmodifiable(list.subList(0, 2));\n+    } \n+        \n+    protected void verifyUnmodifiable(List list) {\n+        try {\n+            list.add(0, new Integer(0));\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        } \n+        try {\n+            list.add(new Integer(0));\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.addAll(0, array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.addAll(array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.clear();\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.remove(0);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.remove(new Integer(0));\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.removeAll(array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.retainAll(array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.set(0, new Integer(0));\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * Verify that iterator is not modifiable\n+     */\n+    public void testUnmodifiableIterator() {\n+        setupList();\n+        Iterator iterator = list.iterator();\n+        try {\n+            Object obj = iterator.next();\n+            iterator.remove();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestUnmodifiableSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestUnmodifiableSortedSet.java,v 1.1 2003/10/13 02:48:16 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestSortedSet;\n+\n+/**\n+ * Extension of {@link AbstractTestSortedSet} for exercising the \n+ * {@link UnmodifiableSortedSet} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/13 02:48:16 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestUnmodifiableSortedSet extends AbstractTestSortedSet{\n+    \n+    public TestUnmodifiableSortedSet(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        // Can't run bulk tests in AbstractTestSet -- subset tests modify set\n+        return new TestSuite(TestUnmodifiableSortedSet.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestUnmodifiableSortedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //-------------------------------------------------------------------  \n+    public Set makeEmptySet() {\n+        return UnmodifiableSortedSet.decorate(new TreeSet());\n+    }\n+    \n+    public Set makeFullSet() {\n+        TreeSet set = new TreeSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return UnmodifiableSortedSet.decorate(set);\n+    }\n+    \n+    protected boolean isAddSupported() {\n+        return false;\n+    }\n+    \n+    protected boolean isRemoveSupported() {\n+        return false;\n+    }\n+           \n+    //--------------------------------------------------------------------\n+    protected UnmodifiableSortedSet set = null;\n+    protected ArrayList array = null;\n+    \n+    protected void setupSet() {\n+        set = (UnmodifiableSortedSet) makeFullSet();\n+        array = new ArrayList();\n+        array.add(new Integer(1));\n+    }\n+    \n+    /** \n+     * Verify that base set and subsets are not modifiable\n+     */\n+    public void testUnmodifiable() {\n+        setupSet();\n+        verifyUnmodifiable(set);\n+        verifyUnmodifiable(set.headSet(new Integer(1)));\n+        verifyUnmodifiable(set.tailSet(new Integer(1)));\n+        verifyUnmodifiable(set.subSet(new Integer(1), new Integer(3)));    \n+    }\n+    \n+    /**\n+     * Verifies that a set is not modifiable\n+     */\n+    public void verifyUnmodifiable(Set set) {\n+        try {\n+            set.add(\"value\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected  \n+        }\n+        try {\n+            set.addAll(new TreeSet());\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.clear();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.remove(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.removeAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.retainAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testComparator() {\n+        setupSet();\n+        Comparator c = set.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", c == null);\n+    }\n+}", "timestamp": 1066013296, "metainfo": ""}