{"sha": "f34f3d2cff90e87435be431a85aa4691a09647a9", "log": "Clarify the internal workings of the predicated decorator from the Utils classes bug 28115   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/java/org/apache/commons/collections/BagUtils.java\n  * {@link Bag} and {@link SortedBag} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.19 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.20 $ $Date: 2004/04/01 20:12:00 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n     }\n     \n     /**\n-     * Returns a predicated bag backed by the given bag.  Only objects\n-     * that pass the test in the given predicate can be added to the bag.\n-     * It is important not to use the original bag after invoking this \n-     * method, as it is a backdoor for adding unvalidated objects.\n+     * Returns a predicated (validating) bag backed by the given bag.\n+     * <p>\n+     * Only objects that pass the test in the given predicate can be added to the bag.\n+     * Trying to add an invalid object results in an IllegalArgumentException.\n+     * It is important not to use the original bag after invoking this method,\n+     * as it is a backdoor for adding invalid objects.\n      *\n      * @param bag  the bag to predicate, must not be null\n      * @param predicate  the predicate for the bag, must not be null\n     }\n     \n     /**\n-     * Returns a predicated sorted bag backed by the given sorted bag.  \n-     * Only objects that pass the test in the given predicate can be \n-     * added to the bag.\n-     * It is important not to use the original bag after invoking this \n-     * method, as it is a backdoor for adding unvalidated objects.\n+     * Returns a predicated (validating) sorted bag backed by the given sorted bag.\n+     * <p>\n+     * Only objects that pass the test in the given predicate can be added to the bag.\n+     * Trying to add an invalid object results in an IllegalArgumentException.\n+     * It is important not to use the original bag after invoking this method,\n+     * as it is a backdoor for adding invalid objects.\n      *\n      * @param bag  the sorted bag to predicate, must not be null\n      * @param predicate  the predicate for the bag, must not be null\n--- a/src/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/java/org/apache/commons/collections/BufferUtils.java\n  * Provides utility methods and decorators for {@link Buffer} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.19 $ $Date: 2004/02/18 01:15:43 $\n+ * @version $Revision: 1.20 $ $Date: 2004/04/01 20:12:00 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n     }\n \n     /**\n-     * Returns a predicated buffer backed by the given buffer.  Elements are\n-     * evaluated with the given predicate before being added to the buffer.\n-     * If the predicate evaluation returns false, then an \n-     * IllegalArgumentException is raised and the element is not added to\n-     * the buffer.\n+     * Returns a predicated (validating) buffer backed by the given buffer.\n+     * <p>\n+     * Only objects that pass the test in the given predicate can be added to the buffer.\n+     * Trying to add an invalid object results in an IllegalArgumentException.\n+     * It is important not to use the original buffer after invoking this method,\n+     * as it is a backdoor for adding invalid objects.\n      *\n      * @param buffer  the buffer to predicate, must not be null\n      * @param predicate  the predicate used to evaluate new elements, must not be null\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.58 $ $Date: 2004/03/31 23:13:50 $\n+ * @version $Revision: 1.59 $ $Date: 2004/04/01 20:12:00 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n     }\n \n     /**\n-     * Returns a predicated collection backed by the given collection.\n-     * Only objects that pass the test in the given predicate can be \n-     * added to the collection. Throws an IllegalArgumentException on adding\n-     * an element if it is invalid.\n-     * <p>\n-     * It is important not to use the original collection after invoking this \n-     * method, as it is a backdoor for adding unvalidated objects.\n+     * Returns a predicated (validating) collection backed by the given collection.\n+     * <p>\n+     * Only objects that pass the test in the given predicate can be added to the collection.\n+     * Trying to add an invalid object results in an IllegalArgumentException.\n+     * It is important not to use the original collection after invoking this method,\n+     * as it is a backdoor for adding invalid objects.\n      *\n      * @param collection  the collection to predicate, must not be null\n      * @param predicate  the predicate for the collection, must not be null\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n  * Provides utility methods and decorators for {@link List} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.27 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.28 $ $Date: 2004/04/01 20:12:00 $\n  * \n  * @author Federico Barbieri\n  * @author Peter Donald\n     }\n \n     /**\n-     * Returns a predicated list backed by the given list.  Only objects\n-     * that pass the test in the given predicate can be added to the list.\n-     * It is important not to use the original list after invoking this \n-     * method, as it is a backdoor for adding unvalidated objects.\n+     * Returns a predicated (validating) list backed by the given list.\n+     * <p>\n+     * Only objects that pass the test in the given predicate can be added to the list.\n+     * Trying to add an invalid object results in an IllegalArgumentException.\n+     * It is important not to use the original list after invoking this method,\n+     * as it is a backdoor for adding invalid objects.\n      *\n      * @param list  the list to predicate, must not be null\n      * @param predicate  the predicate for the list, must not be null\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.44 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.45 $ $Date: 2004/04/01 20:12:00 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n     }\n \n     /**\n-     * Returns a predicated map backed by the given map.  Only keys and\n-     * values that pass the given predicates can be added to the map.\n-     * It is important not to use the original map after invoking this \n-     * method, as it is a backdoor for adding unvalidated objects.\n+     * Returns a predicated (validating) map backed by the given map.\n+     * <p>\n+     * Only objects that pass the tests in the given predicates can be added to the map.\n+     * Trying to add an invalid object results in an IllegalArgumentException.\n+     * Keys must pass the key predicate, values must pass the value predicate.\n+     * It is important not to use the original map after invoking this method,\n+     * as it is a backdoor for adding invalid objects.\n      *\n      * @param map  the map to predicate, must not be null\n      * @param keyPred  the predicate for keys, null means no check\n     }\n \n     /**\n-     * Returns a predicated sorted map backed by the given map.  Only keys and\n-     * values that pass the given predicates can be added to the map.\n-     * It is important not to use the original map after invoking this \n-     * method, as it is a backdoor for adding unvalidated objects.\n+     * Returns a predicated (validating) sorted map backed by the given map.\n+     * <p>\n+     * Only objects that pass the tests in the given predicates can be added to the map.\n+     * Trying to add an invalid object results in an IllegalArgumentException.\n+     * Keys must pass the key predicate, values must pass the value predicate.\n+     * It is important not to use the original map after invoking this method,\n+     * as it is a backdoor for adding invalid objects.\n      *\n      * @param map  the map to predicate, must not be null\n      * @param keyPred  the predicate for keys, null means no check\n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n  * {@link Set} and {@link SortedSet} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.25 $ $Date: 2004/02/18 01:15:42 $\n+ * @version $Revision: 1.26 $ $Date: 2004/04/01 20:12:00 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n     }\n \n     /**\n-     * Returns a predicated set backed by the given set.  Only objects\n-     * that pass the test in the given predicate can be added to the set.\n-     * It is important not to use the original set after invoking this \n-     * method, as it is a backdoor for adding unvalidated objects.\n+     * Returns a predicated (validating) set backed by the given set.\n+     * <p>\n+     * Only objects that pass the test in the given predicate can be added to the set.\n+     * Trying to add an invalid object results in an IllegalArgumentException.\n+     * It is important not to use the original set after invoking this method,\n+     * as it is a backdoor for adding invalid objects.\n      *\n      * @param set  the set to predicate, must not be null\n      * @param predicate  the predicate for the set, must not be null\n     }\n \n     /**\n-     * Returns a predicated sorted set backed by the given sorted set.  \n-     * Only objects that pass the test in the given predicate can be added\n-     * to the sorted set.\n-     * It is important not to use the original sorted set after invoking this \n-     * method, as it is a backdoor for adding unvalidated objects.\n+     * Returns a predicated (validating) sorted set backed by the given sorted set.  \n+     * <p>\n+     * Only objects that pass the test in the given predicate can be added to the set.\n+     * Trying to add an invalid object results in an IllegalArgumentException.\n+     * It is important not to use the original set after invoking this method,\n+     * as it is a backdoor for adding invalid objects.\n      *\n      * @param set  the sorted set to predicate, must not be null\n      * @param predicate  the predicate for the sorted set, must not be null", "timestamp": 1080850320, "metainfo": ""}