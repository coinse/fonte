{"sha": "289e7a769ec9ab110f85848b281c4c143ba84e57", "log": "javadoc improvements to collect methods.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java\n     }\n \n     /**\n-     * Returns a new Collection consisting of the elements of inputCollection\n+     * Returns a new Collection containing all elements of the input collection\n      * transformed by the given transformer.\n      * <p>\n-     * If the input transformer is null, the result is an empty list.\n-     *\n-     * @param <I> the type of object in the input collection\n-     * @param <O> the type of object in the output collection\n+     * If the input collection or transformer is null, the result is an empty list.\n+     *\n+     * @param <I>  the type of object in the input collection\n+     * @param <O>  the type of object in the output collection\n      * @param inputCollection  the collection to get the input from, may not be null\n      * @param transformer  the transformer to use, may be null\n      * @return the transformed result (new list)\n      * @throws NullPointerException if the input collection is null\n      */\n     public static <I, O> Collection<O> collect(final Iterable<I> inputCollection,\n-            final Transformer<? super I, ? extends O> transformer) {\n+                                               final Transformer<? super I, ? extends O> transformer) {\n         final Collection<O> answer = inputCollection instanceof Collection<?> ?\n                 new ArrayList<O>(((Collection<?>) inputCollection).size()) : new ArrayList<O>();\n         return collect(inputCollection, transformer, answer);\n     }\n \n     /**\n-     * Transforms all elements from the inputIterator with the given transformer\n-     * and adds them to the outputCollection.\n-     * <p>\n-     * If the input iterator or transformer is null, the result is an empty\n-     * list.\n-     *\n+     * Transforms all elements from the input iterator with the given transformer\n+     * and adds them to the output collection.\n+     * <p>\n+     * If the input iterator or transformer is null, the result is an empty list.\n+     *\n+     * @param <I>  the type of object in the input collection\n+     * @param <O>  the type of object in the output collection\n      * @param inputIterator  the iterator to get the input from, may be null\n      * @param transformer  the transformer to use, may be null\n-     * @param <I> the type of object in the input collection\n-     * @param <O> the type of object in the output collection\n      * @return the transformed result (new list)\n      */\n     public static <I, O> Collection<O> collect(final Iterator<I> inputIterator,\n-            final Transformer<? super I, ? extends O> transformer) {\n+                                               final Transformer<? super I, ? extends O> transformer) {\n         return collect(inputIterator, transformer, new ArrayList<O>());\n     }\n \n     /**\n-     * Transforms all elements from inputCollection with the given transformer\n-     * and adds them to the outputCollection.\n+     * Transforms all elements from input collection with the given transformer\n+     * and adds them to the output collection.\n      * <p>\n      * If the input collection or transformer is null, there is no change to the\n      * output collection.\n      *\n-     * @param <I> the type of object in the input collection\n-     * @param <O> the type of object in the output collection\n-     * @param <R> the output type of the transformer - this extends O.\n+     * @param <I>  the type of object in the input collection\n+     * @param <O>  the type of object in the output collection\n+     * @param <R>  the type of the output collection\n      * @param inputCollection  the collection to get the input from, may be null\n      * @param transformer  the transformer to use, may be null\n-     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n+     * @param outputCollection  the collection to output into, may not be null if inputCollection\n      *   and transformer are not null\n-     * @return the outputCollection with the transformed input added\n-     * @throws NullPointerException if the output collection is null and both, inputCollection and\n+     * @return the output collection with the transformed input added\n+     * @throws NullPointerException if the outputCollection is null and both, inputCollection and\n      *   transformer are not null\n      */\n     public static <I, O, R extends Collection<? super O>> R collect(final Iterable<? extends I> inputCollection,\n     }\n \n     /**\n-     * Transforms all elements from the inputIterator with the given transformer\n-     * and adds them to the outputCollection.\n+     * Transforms all elements from the input iterator with the given transformer\n+     * and adds them to the output collection.\n      * <p>\n      * If the input iterator or transformer is null, there is no change to the\n      * output collection.\n      *\n+     * @param <I>  the type of object in the input collection\n+     * @param <O>  the type of object in the output collection\n+     * @param <R>  the type of the output collection\n      * @param inputIterator  the iterator to get the input from, may be null\n      * @param transformer  the transformer to use, may be null\n-     * @param outputCollection  the collection to output into, may not be null if the inputCollection\n+     * @param outputCollection  the collection to output into, may not be null if inputIterator\n      *   and transformer are not null\n-     * @param <I> the type of object in the input collection\n-     * @param <O> the type of object in the output collection\n-     * @param <R> the output type of the transformer - this extends O.\n      * @return the outputCollection with the transformed input added\n-     * @throws NullPointerException if the output collection is null and both, inputCollection and\n+     * @throws NullPointerException if the output collection is null and both, inputIterator and\n      *   transformer are not null\n      */\n     public static <I, O, R extends Collection<? super O>> R collect(final Iterator<? extends I> inputIterator,", "timestamp": 1432461249, "metainfo": ""}