{"sha": "a278beae5bdaf45bf61fcad08d92d587a60d6adb", "log": "Added CaseInsensitiveMap.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java,v 1.1 2004/01/05 05:26:56 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+/**\n+ * A case-insensitive <code>Map</code>.\n+ * <p>\n+ * As entries are added to the map, keys are converted to all lowercase. A new \n+ * key is compared to existing keys by comparing <code>newKey.toString().toLower()</code>\n+ * to the lowercase values in the current <code>KeySet.</code>\n+ * <p>\n+ * Null keys are supported.  \n+ * <p>\n+ * The <code>keySet()</code> method returns all lowercase keys, or nulls.\n+ * <p>\n+ * Example:\n+ * <pre><code>\n+ *  Map map = new CaseInsensitiveMap();\n+ *  map.put(\"One\", \"One\");\n+ *  map.put(\"Two\", \"Two\");\n+ *  map.put(null, \"Three\");\n+ *  map.put(\"one\", \"Four\");\n+ * </code></pre>\n+ * creates a <code>CaseInsensitiveMap</code> with three entries.<br>\n+ * <code>map.get(null)</code> returns <code>\"Three\"</code> and <code>map.get(\"ONE\")</code>\n+ * returns <code>\"Four\".</code>  The <code>Set</code> returned by <code>keySet()</code>\n+ * equals <code>{\"one\", \"two\", null}.</code>\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2004/01/05 05:26:56 $\n+ *\n+ * @author Commons-Collections team\n+ */\n+public class CaseInsensitiveMap extends AbstractHashedMap implements Serializable, Cloneable {\n+\n+    /** Serialisation version */\n+    private static final long serialVersionUID = -7074655917369299456L;\n+\n+    /**\n+     * Constructs a new empty map with default size and load factor.\n+     */\n+    public CaseInsensitiveMap() {\n+        super(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, DEFAULT_THRESHOLD);\n+    }\n+\n+    /**\n+     * Constructs a new, empty map with the specified initial capacity. \n+     *\n+     * @param initialCapacity  the initial capacity\n+     * @throws IllegalArgumentException if the initial capacity is less than one\n+     */\n+    public CaseInsensitiveMap(int initialCapacity) {\n+        super(initialCapacity);\n+    }\n+\n+    /**\n+     * Constructs a new, empty map with the specified initial capacity and\n+     * load factor. \n+     *\n+     * @param initialCapacity  the initial capacity\n+     * @param loadFactor  the load factor\n+     * @throws IllegalArgumentException if the initial capacity is less than one\n+     * @throws IllegalArgumentException if the load factor is less than zero\n+     */\n+    public CaseInsensitiveMap(int initialCapacity, float loadFactor) {\n+        super(initialCapacity, loadFactor);\n+    }\n+\n+    /**\n+     * Constructor copying elements from another map.\n+     * <p>\n+     * Keys will be converted to lower case strings, which may cause\n+     * some entries to be removed (if string representation of keys differ\n+     * only by character case).\n+     *\n+     * @param map  the map to copy\n+     * @throws NullPointerException if the map is null\n+     */\n+    public CaseInsensitiveMap(Map map) {\n+        super(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Overrides convertKey() from {@link AbstractHashedMap} to convert keys to \n+     * lower case.\n+     * <p>\n+     * Returns null if key is null or does not implement toString().\n+     * \n+     * @param key  the key convert\n+     * @return the converted key\n+     */\n+    protected Object convertKey(Object key) {\n+        if (key != null) {\n+            return key.toString().toLowerCase();\n+        } else {\n+            return AbstractHashedMap.NULL;\n+        }\n+    }   \n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Clones the map without cloning the keys or values.\n+     *\n+     * @return a shallow clone\n+     */\n+    public Object clone() {\n+        return super.clone();\n+    }\n+\n+    /**\n+     * Write the map out using a custom routine.\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        doWriteObject(out);\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        doReadObject(in);\n+    }\n+ \n+}\n--- a/src/test/org/apache/commons/collections/map/TestAll.java\n+++ b/src/test/org/apache/commons/collections/map/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestAll.java,v 1.11 2003/12/14 21:42:55 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestAll.java,v 1.12 2004/01/05 05:26:56 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.11 $ $Date: 2003/12/14 21:42:55 $\n+ * @version $Revision: 1.12 $ $Date: 2004/01/05 05:26:56 $\n  * \n  * @author Stephen Colebourne\n  */\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         \n+        suite.addTest(TestCaseInsensitiveMap.suite());\n         suite.addTest(TestCompositeMap.suite());\n         suite.addTest(TestFlat3Map.suite());\n         suite.addTest(TestHashedMap.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java,v 1.1 2004/01/05 05:26:56 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.textui.TestRunner;\n+\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Tests for the {@link CaseInsensitiveMap} implementation.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2004/01/05 05:26:56 $\n+ * \n+ * @author Commons-Collections team\n+ */\n+public class TestCaseInsensitiveMap extends AbstractTestIterableMap {\n+\n+    public TestCaseInsensitiveMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+    \n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestCaseInsensitiveMap.class);\n+    }\n+\n+    public Map makeEmptyMap() {\n+        return new CaseInsensitiveMap();\n+    }\n+    \n+    public String getCompatibilityVersion() {\n+        return \"3\";\n+    }\n+   \n+    //-------------------------------------------------------------------------\n+    \n+    public void testCaseInsensitive() {\n+        Map map = new CaseInsensitiveMap();\n+        map.put(\"One\", \"One\");\n+        map.put(\"Two\", \"Two\");\n+        assertEquals(\"One\", (String) map.get(\"one\"));\n+        assertEquals(\"One\", (String) map.get(\"oNe\"));\n+        map.put(\"two\", \"Three\");\n+        assertEquals(\"Three\", (String) map.get(\"Two\"));\n+    } \n+    \n+    public void testNullHandling() {\n+        Map map = new CaseInsensitiveMap();\n+        map.put(\"One\", \"One\");\n+        map.put(\"Two\", \"Two\");\n+        map.put(null, \"Three\");\n+        assertEquals(\"Three\", (String) map.get(null));\n+        map.put(null, \"Four\");\n+        assertEquals(\"Four\", (String) map.get(null));\n+        Set keys = map.keySet();\n+        assertTrue(keys.contains(\"one\"));\n+        assertTrue(keys.contains(\"two\"));\n+        assertTrue(keys.contains(null));\n+        assertTrue(keys.size() == 3);\n+    }\n+        \n+    public void testPutAll() {\n+        Map map = new HashMap();\n+        map.put(\"One\", \"One\");\n+        map.put(\"Two\", \"Two\");\n+        map.put(\"one\", \"Three\");\n+        map.put(null, \"Four\");\n+        map.put(new Integer(20), \"Five\");\n+        Map caseInsensitiveMap = new CaseInsensitiveMap(map);\n+        assertTrue(caseInsensitiveMap.size() == 4); // ones collapsed\n+        Set keys = caseInsensitiveMap.keySet();\n+        assertTrue(keys.contains(\"one\"));\n+        assertTrue(keys.contains(\"two\"));\n+        assertTrue(keys.contains(null));\n+        assertTrue(keys.contains(Integer.toString(20)));\n+        assertTrue(keys.size() == 4);\n+        assertTrue(!caseInsensitiveMap.containsValue(\"One\") \n+            || !caseInsensitiveMap.containsValue(\"Three\")); // ones collaped\n+        assertEquals(caseInsensitiveMap.get(null), \"Four\");\n+    } \n+\n+    /*\n+    public void testCreate() throws Exception {\n+        resetEmpty();\n+        writeExternalFormToDisk((java.io.Serializable) map, \"/home/phil/jakarta-commons/collections/data/test/CaseInsensitiveMap.emptyCollection.version3.obj\");\n+        resetFull();\n+        writeExternalFormToDisk((java.io.Serializable) map, \"/home/phil/jakarta-commons/collections/data/test/CaseInsensitiveMap.fullCollection.version3.obj\");\n+    }\n+     */\n+}", "timestamp": 1073280416, "metainfo": ""}