{"sha": "eda112cfac4da0ac058cbd1dbbe07a170e0a0b26", "log": "Add MapIterator to BidiMap   ", "commit": "\n--- a/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.3 2003/10/10 21:09:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.4 2003/10/29 00:06:25 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <code>createMap</code> method.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.3 2003/10/10 21:09:49 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.4 2003/10/29 00:06:25 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n \n     // BidiMap\n     //-----------------------------------------------------------------------\n+    public MapIterator mapIterator() {\n+        return new BidiMapIterator(this);\n+    }\n+    \n     public Object getKey(Object value) {\n         return maps[1].get(value);\n     }\n         }\n     }\n     \n+    /**\n+     * Inner class MapIterator.\n+     */\n+    protected static class BidiMapIterator extends AbstractIteratorDecorator implements MapIterator {\n+        \n+        protected final AbstractDualBidiMap map;\n+        private Map.Entry last = null;\n+        private boolean canRemove = false;\n+        \n+        protected BidiMapIterator(AbstractDualBidiMap map) {\n+            super(map.maps[0].entrySet().iterator());\n+            this.map = map;\n+        }\n+        \n+        public Object next() {\n+            last = new MapEntry((Map.Entry) super.next(), map);\n+            canRemove = true;\n+            return last.getKey();\n+        }\n+        \n+        public void remove() {\n+            if (canRemove == false) {\n+                throw new IllegalStateException(\"Iterator remove() can only be called once after next()\");\n+            }\n+            // store value as remove may change the entry in the decorator (eg.TreeMap)\n+            Object value = last.getValue();\n+            super.remove();\n+            map.maps[1].remove(value);\n+            last = null;\n+            canRemove = false;\n+        }\n+        \n+        public Object getKey() {\n+            if (last == null) {\n+                throw new IllegalStateException(\"Iterator getKey() can only be called after next() and before remove()\");\n+            }\n+            return last.getKey();\n+        }\n+\n+        public Object getValue() {\n+            if (last == null) {\n+                throw new IllegalStateException(\"Iterator getValue() can only be called after next() and before remove()\");\n+            }\n+            return last.getValue();\n+        }\n+        \n+        public Object setValue(Object value) {\n+            if (last == null) {\n+                throw new IllegalStateException(\"Iterator setValue() can only be called after next() and before remove()\");\n+            }\n+            Object oldValue = last.setValue(value);\n+\n+            // Gets old key and pairs with new value\n+            final Object inverseKey = map.maps[1].remove(oldValue);\n+            map.maps[1].put(value, inverseKey);\n+\n+            return oldValue;\n+        }\n+    }\n+    \n }\n--- a/src/java/org/apache/commons/collections/BidiMap.java\n+++ b/src/java/org/apache/commons/collections/BidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.3 2003/10/06 23:47:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BidiMap.java,v 1.4 2003/10/29 00:06:25 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * <p>\n  * Implementations should allow a value to be looked up from a key and\n  * a key to be looked up from a value with equal performance.\n- * It should be noted that the quickest way to implement the <code>values</code>\n- * method is usually to return <code>inverseBidiMap().keySet()</code>.\n  * \n  * @see org.apache.commons.collections.DualHashBidiMap\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/10/06 23:47:17 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/29 00:06:25 $\n  *\n  * @author Stephen Colebourne\n  */\n public interface BidiMap extends Map {\n+    \n+    /**\n+     * Obtains a <code>MapIterator</code> over the map.\n+     * <p>\n+     * A map iterator is an efficient way of iterating over maps.\n+     * It does not require that the map is stored using Map Entry objects\n+     * which can increase performance.\n+     * <pre>\n+     * BidiMap map = new DualHashBidiMap();\n+     * MapIterator it = map.mapIterator();\n+     * Object key = it.next();\n+     * Object value = it.getValue();\n+     * it.setValue(\"newValue\");\n+     * </pre>\n+     * \n+     * @return a map iterator\n+     */\n+    MapIterator mapIterator();\n     \n     /**\n      * Puts the key-value pair into the map, replacing any previous pair.\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/MapIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapIterator.java,v 1.1 2003/10/29 00:06:25 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * Defines an iterator that operates over a <code>Map</code>.\n+ * <p>\n+ * This iterator is a special version designed for maps. It is much more\n+ * efficient to use this rather than an entry set iterator where the option\n+ * is available. A map that provides this interface may not hold the data\n+ * internally using Map Entry objects, thus this interface can avoid lots\n+ * of object creation.\n+ * <p>\n+ * In use, this iterator iterates through the keys in the map. After each\n+ * call to <code>next()</code>, the <code>getValue()</code> method provides\n+ * direct access to the value. The value can also be set using\n+ * <code>setValue()</code>.\n+ *  \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/29 00:06:25 $\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public interface MapIterator extends Iterator {\n+    \n+    /**\n+     * Checks to see if there are more entries still to be iterated.\n+     *\n+     * @return <code>true</code> if the iterator has more elements\n+     */\n+    boolean hasNext();\n+\n+    /**\n+     * Gets the next <em>key</em> from the <code>Map</code>.\n+     *\n+     * @return the next key in the iteration\n+     * @throws NoSuchElementException if the iteration is finished\n+     */\n+    Object next();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the current key, which is the key returned by the last call\n+     * to <code>next()</code>.\n+     *\n+     * @return the current key\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     */\n+    Object getKey();\n+\n+    /**\n+     * Gets the current value, which is the value associated with the last key\n+     * returned by <code>next()</code>.\n+     *\n+     * @return the current value\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     */\n+    Object getValue();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Removes the last returned key from the underlying <code>Map</code> (optional operation).\n+     * <p>\n+     * This method can be called once per call to <code>next()</code>.\n+     *\n+     * @throws UnsupportedOperationException if remove is not supported by the map\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     * @throws IllegalStateException if <code>remove()</code> has already been called\n+     *  since the last call to <code>next()</code>\n+     */\n+    void remove();\n+    \n+    /**\n+     * Sets the value associated with the current key.\n+     *\n+     * @param value  the new value\n+     * @return the previous value\n+     * @throws IllegalStateException if <code>next()</code> has not yet been called\n+     * @throws IllegalStateException if <code>remove()</code> has been called since the\n+     *  last call to <code>next()</code>\n+     */\n+    Object setValue(Object value);\n+\n+}\n--- a/src/test/org/apache/commons/collections/AbstractTestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestBidiMap.java,v 1.1 2003/10/10 21:11:39 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestBidiMap.java,v 1.2 2003/10/29 00:06:25 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.NoSuchElementException;\n \n /**\n- * JUnit tests.\n+ * Abstract test class for {@link BidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/10/10 21:11:39 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/29 00:06:25 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n \n     }\n     \n+    //-----------------------------------------------------------------------\n+    public void testBidiMapIteratorEmpty() {\n+        resetEmpty();\n+        BidiMap bidi = (BidiMap) map;\n+        MapIterator it = bidi.mapIterator();\n+        assertEquals(false, it.hasNext());\n+        try {\n+            it.next();\n+        } catch (NoSuchElementException ex) {}\n+        try {\n+            it.getKey();\n+        } catch (IllegalStateException ex) {\n+        }\n+        try {\n+            it.getValue();\n+        } catch (IllegalStateException ex) {\n+        }\n+        try {\n+            it.remove();\n+        } catch (UnsupportedOperationException ex) {\n+        } catch (IllegalStateException ex) {\n+        }\n+        try {\n+            it.setValue(null);\n+        } catch (UnsupportedOperationException ex) {\n+        } catch (IllegalStateException ex) {\n+        }\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiMapIteratorFull() {\n+        resetFull();\n+        BidiMap bidi = (BidiMap) map;\n+        MapIterator it = bidi.mapIterator();\n+        \n+        assertEquals(true, it.hasNext());\n+        while (it.hasNext()) {\n+            Object key = it.next();\n+            assertSame(key, it.getKey());\n+        \n+            Object value = it.getValue();\n+            assertSame(bidi.get(key), value);\n+        }\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiMapIteratorRemove() {\n+        resetFull();\n+        BidiMap bidi = (BidiMap) map;\n+        MapIterator it = bidi.mapIterator();\n+        assertEquals(true, it.hasNext());\n+        Object key = it.next();\n+        \n+        if (isRemoveSupported() == false) {\n+            try {\n+                it.remove();\n+            } catch (UnsupportedOperationException ex) {\n+            }\n+            return;\n+        }\n+        \n+        it.remove();\n+        confirmed.remove(key);\n+        assertEquals(false, bidi.containsKey(key));\n+        verify();\n+        \n+        try {\n+            it.remove();  // second remove fails\n+        } catch (IllegalStateException ex) {\n+        }\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiMapIteratorSet() {\n+        resetFull();\n+        BidiMap bidi = (BidiMap) map;\n+        MapIterator it = bidi.mapIterator();\n+        assertEquals(true, it.hasNext());\n+        Object key = it.next();\n+        \n+        if (isPutChangeSupported() == false) {\n+            try {\n+                it.setValue(getOtherValues()[0]);\n+            } catch (UnsupportedOperationException ex) {\n+            }\n+            return;\n+        }\n+        \n+        it.setValue(getOtherValues()[0]);\n+        confirmed.put(key, getOtherValues()[0]);\n+        assertEquals(getOtherValues()[0], bidi.get(key));\n+        verify();\n+        \n+        it.remove();\n+        confirmed.remove(key);\n+        try {\n+            it.setValue(getOtherValues()[0]);\n+        } catch (IllegalStateException ex) {\n+        }\n+        verify();\n+    }\n+\n }", "timestamp": 1067385985, "metainfo": ""}