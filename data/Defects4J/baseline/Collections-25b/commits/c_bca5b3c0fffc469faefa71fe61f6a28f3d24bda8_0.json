{"sha": "bca5b3c0fffc469faefa71fe61f6a28f3d24bda8", "log": "Fix PMD warnings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IteratorUtils.java\n                     return it;\n                 }\n             }\n-        } catch (final RuntimeException e) {\n+        } catch (final RuntimeException e) { // NOPMD\n             // ignore\n-        } catch (final NoSuchMethodException e) {\n+        } catch (final NoSuchMethodException e) { // NOPMD\n             // ignore\n-        } catch (final IllegalAccessException e) {\n+        } catch (final IllegalAccessException e) { // NOPMD\n             // ignore\n-        } catch (final InvocationTargetException e) {\n+        } catch (final InvocationTargetException e) { // NOPMD\n             // ignore\n         }\n         return singletonIterator(obj);\n--- a/src/main/java/org/apache/commons/collections4/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/MapUtils.java\n                     try {\n                         final String text = (String) answer;\n                         return NumberFormat.getInstance().parse(text);\n-                    } catch (final ParseException e) {\n+                    } catch (final ParseException e) { // NOPMD\n                         // failure means null is returned\n                     }\n                 }\n--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectGraphIterator.java\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectGraphIterator.java\n             return;\n         }\n         if (currentIterator == null) {\n-            if (root == null) {\n+            if (root == null) { // NOPMD\n                 // do nothing, hasNext will be false\n             } else {\n                 if (transformer == null) {\n             }\n             findNext(next);\n         }\n-        if (hasNext) {\n-            // next value found\n-        } else if (stack.isEmpty()) {\n-            // all iterators exhausted\n-        } else {\n+        // if we havn't found the next value and iterators are not yet exhausted\n+        if (!hasNext && !stack.isEmpty()) {\n             // current iterator exhausted, go up a level\n             currentIterator = stack.pop();\n             findNextByIterator(currentIterator);\n--- a/src/main/java/org/apache/commons/collections4/list/CursorableLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/CursorableLinkedList.java\n         public void remove() {\n             // overridden, as the nodeRemoved() method updates the iterator\n             // state in the parent.removeNode() call below\n-            if (current == null && currentRemovedByAnother) {\n+            if (current == null && currentRemovedByAnother) { // NOPMD\n                 // quietly ignore, as the last returned node was removed\n                 // by the list or some other iterator\n                 // by ignoring it, we keep this iterator independent from\n--- a/src/main/java/org/apache/commons/collections4/map/StaticBucketMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/StaticBucketMap.java\n      *   the number of buckets.\n      * </p>\n      */\n-    private final int getHash(final Object key) {\n+    private int getHash(final Object key) {\n         if (key == null) {\n             return 0;\n         }", "timestamp": 1367073338, "metainfo": ""}