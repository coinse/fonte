{"sha": "28ff2455d823461c1c58c45bfe8b44522d5a932f", "log": "Change to InstanceofPredicate to avoid indirect references via PredicateUtils   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bag/TypedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TypedBag.java\n package org.apache.commons.collections.bag;\n \n import org.apache.commons.collections.Bag;\n-import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.functors.InstanceofPredicate;\n \n /**\n  * Decorates another <code>Bag</code> to validate that elements added\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:56:25 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/07 23:28:38 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n     public static Bag decorate(Bag bag, Class type) {\n-        return new PredicatedBag(bag, PredicateUtils.instanceofPredicate(type));\n+        return new PredicatedBag(bag, InstanceofPredicate.getInstance(type));\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/bag/TypedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/TypedSortedBag.java\n  */\n package org.apache.commons.collections.bag;\n \n-import org.apache.commons.collections.PredicateUtils;\n import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.functors.InstanceofPredicate;\n \n /**\n  * Decorates another <code>SortedBag</code> to validate that elements added\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2004/02/18 00:56:25 $\n+ * @version $Revision: 1.5 $ $Date: 2004/05/07 23:28:38 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n     public static SortedBag decorate(SortedBag bag, Class type) {\n-        return new PredicatedSortedBag(bag, PredicateUtils.instanceofPredicate(type));\n+        return new PredicatedSortedBag(bag, InstanceofPredicate.getInstance(type));\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/buffer/TypedBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/TypedBuffer.java\n package org.apache.commons.collections.buffer;\n \n import org.apache.commons.collections.Buffer;\n-import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.functors.InstanceofPredicate;\n \n /**\n  * Decorates another <code>Buffer</code> to validate that elements added\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:58:18 $\n+ * @version $Revision: 1.4 $ $Date: 2004/05/07 23:28:38 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n      * @throws IllegalArgumentException if the buffer contains invalid elements\n      */\n     public static Buffer decorate(Buffer buffer, Class type) {\n-        return new PredicatedBuffer(buffer, PredicateUtils.instanceofPredicate(type));\n+        return new PredicatedBuffer(buffer, InstanceofPredicate.getInstance(type));\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/collections/collection/TypedCollection.java\n+++ b/src/java/org/apache/commons/collections/collection/TypedCollection.java\n \n import java.util.Collection;\n \n-import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.functors.InstanceofPredicate;\n \n /**\n  * Decorates a <code>Collection</code> to validate that elements added are of a specific type.\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:58:53 $\n+ * @version $Revision: 1.4 $ $Date: 2004/05/07 23:28:38 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n      * @throws IllegalArgumentException if the collection contains invalid elements\n      */\n     public static Collection decorate(Collection coll, Class type) {\n-        return new PredicatedCollection(coll, PredicateUtils.instanceofPredicate(type));\n+        return new PredicatedCollection(coll, InstanceofPredicate.getInstance(type));\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/collections/list/TypedList.java\n+++ b/src/java/org/apache/commons/collections/list/TypedList.java\n \n import java.util.List;\n \n-import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.functors.InstanceofPredicate;\n \n /**\n  * Decorates another <code>List</code> to validate that elements\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 01:12:26 $\n+ * @version $Revision: 1.4 $ $Date: 2004/05/07 23:28:38 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n      * @throws IllegalArgumentException if the list contains invalid elements\n      */\n     public static List decorate(List list, Class type) {\n-        return new PredicatedList(list, PredicateUtils.instanceofPredicate(type));\n+        return new PredicatedList(list, InstanceofPredicate.getInstance(type));\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/collections/set/TypedSet.java\n+++ b/src/java/org/apache/commons/collections/set/TypedSet.java\n \n import java.util.Set;\n \n-import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.functors.InstanceofPredicate;\n \n /**\n  * Decorates another <code>Set</code> to validate that elements\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 01:14:27 $\n+ * @version $Revision: 1.4 $ $Date: 2004/05/07 23:28:38 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n      * @throws IllegalArgumentException if the set contains invalid elements\n      */\n     public static Set decorate(Set set, Class type) {\n-        return new PredicatedSet(set, PredicateUtils.instanceofPredicate(type));\n+        return new PredicatedSet(set, InstanceofPredicate.getInstance(type));\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/collections/set/TypedSortedSet.java\n+++ b/src/java/org/apache/commons/collections/set/TypedSortedSet.java\n \n import java.util.SortedSet;\n \n-import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.functors.InstanceofPredicate;\n \n /**\n  * Decorates another <code>SortedSet</code> to validate that elements\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 01:14:27 $\n+ * @version $Revision: 1.4 $ $Date: 2004/05/07 23:28:38 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n      * @throws IllegalArgumentException if the set contains invalid elements\n      */\n     public static SortedSet decorate(SortedSet set, Class type) {\n-        return new PredicatedSortedSet(set, PredicateUtils.instanceofPredicate(type));\n+        return new PredicatedSortedSet(set, InstanceofPredicate.getInstance(type));\n     }\n     \n     /**", "timestamp": 1083972518, "metainfo": ""}