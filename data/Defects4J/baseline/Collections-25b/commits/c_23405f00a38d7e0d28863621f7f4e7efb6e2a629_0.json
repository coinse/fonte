{"sha": "23405f00a38d7e0d28863621f7f4e7efb6e2a629", "log": "Changed test classes for bag package to <Class>Test.java notation.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/bag/AbstractBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.AbstractTestObject;\n+import org.apache.commons.collections.Bag;\n+\n+/**\n+ * Abstract test class for {@link org.apache.commons.collections.Bag Bag} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeObject} method.\n+ * <p>\n+ * If your bag fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your bag fails.\n+ *\n+ * @version $Id$\n+ */\n+public abstract class AbstractBagTest<T> extends AbstractTestObject {\n+//  TODO: this class should really extend from TestCollection, but the bag\n+//  implementations currently do not conform to the Collection interface.  Once\n+//  those are fixed or at least a strategy is made for resolving the issue, this\n+//  can be changed back to extend TestCollection instead.\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test class name\n+     */\n+    public AbstractBagTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Return a new, empty bag to used for testing.\n+     * \n+     * @return the bag to be tested\n+     */\n+    @Override\n+    public abstract Bag<T> makeObject();\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagAdd() {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+        bag.add((T) \"A\");\n+        assertTrue(\"Should contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+        bag.add((T) \"B\");\n+        assertTrue(bag.contains(\"A\"));\n+        assertTrue(bag.contains(\"B\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testBagEqualsSelf() {\n+        Bag<T> bag = makeObject();\n+        assertTrue(bag.equals(bag));\n+        bag.add((T) \"elt\");\n+        assertTrue(bag.equals(bag));\n+        bag.add((T) \"elt\"); // again\n+        assertTrue(bag.equals(bag));\n+        bag.add((T) \"elt2\");\n+        assertTrue(bag.equals(bag));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemove() {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+        bag.remove(\"A\");\n+        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n+        bag.remove(\"A\", 0);\n+        assertEquals(\"Should have count of 4\", 4, bag.getCount(\"A\"));\n+        bag.remove(\"A\", 2);\n+        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+        bag.remove(\"A\");\n+        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"A\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testRemoveAll() {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\", 2);\n+        assertEquals(\"Should have count of 2\", 2, bag.getCount(\"A\"));\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        assertEquals(\"Should have count of 4\", 4, bag.size());\n+        List<String> delete = new ArrayList<String>();\n+        delete.add(\"A\");\n+        delete.add(\"B\");\n+        bag.removeAll(delete);\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"A\"));\n+        assertEquals(\"Should have count of 0\", 0, bag.getCount(\"B\"));\n+        assertEquals(\"Should have count of 1\", 1, bag.getCount(\"C\"));\n+        assertEquals(\"Should have count of 2\", 2, bag.size());\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public void testContains() {\n+        Bag<T> bag = makeObject();\n+        \n+        assertEquals(\"Bag does not have at least 1 'A'\", false, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+        \n+        bag.add((T) \"A\");  // bag 1A\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+        \n+        bag.add((T) \"A\");  // bag 2A\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag does not have at least 1 'B'\", false, bag.contains(\"B\"));\n+        \n+        bag.add((T) \"B\");  // bag 2A,1B\n+        assertEquals(\"Bag has at least 1 'A'\", true, bag.contains(\"A\"));\n+        assertEquals(\"Bag has at least 1 'B'\", true, bag.contains(\"B\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testContainsAll() {\n+        Bag<T> bag = makeObject();\n+        List<String> known = new ArrayList<String>();\n+        List<String> known1A = new ArrayList<String>();\n+        known1A.add(\"A\");\n+        List<String> known2A = new ArrayList<String>();\n+        known2A.add(\"A\");\n+        known2A.add(\"A\");\n+        List<String> known1B = new ArrayList<String>();\n+        known1B.add(\"B\");\n+        List<String> known1A1B = new ArrayList<String>();\n+        known1A1B.add(\"A\");\n+        known1A1B.add(\"B\");\n+        \n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag does not containsAll of 1 'A'\", false, bag.containsAll(known1A));\n+        assertEquals(\"Bag does not containsAll of 2 'A'\", false, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add((T) \"A\");  // bag 1A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag does not containsAll of 2 'A'\", false, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add((T) \"A\");  // bag 2A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add((T) \"A\");  // bag 3A\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag does not containsAll of 1 'B'\", false, bag.containsAll(known1B));\n+        assertEquals(\"Bag does not containsAll of 1 'A' 1 'B'\", false, bag.containsAll(known1A1B));\n+        \n+        bag.add((T) \"B\");  // bag 3A1B\n+        assertEquals(\"Bag containsAll of empty\", true, bag.containsAll(known));\n+        assertEquals(\"Bag containsAll of 1 'A'\", true, bag.containsAll(known1A));\n+        assertEquals(\"Bag containsAll of 2 'A'\", true, bag.containsAll(known2A));\n+        assertEquals(\"Bag containsAll of 1 'B'\", true, bag.containsAll(known1B));\n+        assertEquals(\"Bag containsAll of 1 'A' 1 'B'\", true, bag.containsAll(known1A1B));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSize() {\n+        Bag<T> bag = makeObject();\n+        assertEquals(\"Should have 0 total items\", 0, bag.size());\n+        bag.add((T) \"A\");\n+        assertEquals(\"Should have 1 total items\", 1, bag.size());\n+        bag.add((T) \"A\");\n+        assertEquals(\"Should have 2 total items\", 2, bag.size());\n+        bag.add((T) \"A\");\n+        assertEquals(\"Should have 3 total items\", 3, bag.size());\n+        bag.add((T) \"B\");\n+        assertEquals(\"Should have 4 total items\", 4, bag.size());\n+        bag.add((T) \"B\");\n+        assertEquals(\"Should have 5 total items\", 5, bag.size());\n+        bag.remove(\"A\", 2);\n+        assertEquals(\"Should have 1 'A'\", 1, bag.getCount(\"A\"));\n+        assertEquals(\"Should have 3 total items\", 3, bag.size());\n+        bag.remove(\"B\");\n+        assertEquals(\"Should have 1 total item\", 1, bag.size());\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public void testRetainAll() {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        List<String> retains = new ArrayList<String>();\n+        retains.add(\"B\");\n+        retains.add(\"C\");\n+        bag.retainAll(retains);\n+        assertEquals(\"Should have 2 total items\", 2, bag.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIterator() {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        assertEquals(\"Bag should have 3 items\", 3, bag.size());\n+        Iterator<T> i = bag.iterator();\n+    \n+        boolean foundA = false;\n+        while (i.hasNext()) {\n+            String element = (String) i.next();\n+            // ignore the first A, remove the second via Iterator.remove()\n+            if (element.equals(\"A\")) {\n+                if (foundA == false) {\n+                    foundA = true;\n+                } else {\n+                    i.remove();\n+                }\n+            }\n+        }\n+    \n+        assertTrue(\"Bag should still contain 'A'\", bag.contains(\"A\"));\n+        assertEquals(\"Bag should have 2 items\", 2, bag.size());\n+        assertEquals(\"Bag should have 1 'A'\", 1, bag.getCount(\"A\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIteratorFail() {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        Iterator<T> it = bag.iterator();\n+        it.next();\n+        bag.remove(\"A\");\n+        try {\n+            it.next();\n+            fail(\"Should throw ConcurrentModificationException\");\n+        } catch (ConcurrentModificationException e) {\n+            // expected\n+        }\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public void testIteratorFailNoMore() {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        Iterator<T> it = bag.iterator();\n+        it.next();\n+        it.next();\n+        it.next();\n+        try {\n+            it.next();\n+            fail(\"Should throw NoSuchElementException\");\n+        } catch (NoSuchElementException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public void testIteratorFailDoubleRemove() {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        Iterator<T> it = bag.iterator();\n+        it.next();\n+        it.next();\n+        assertEquals(3, bag.size());\n+        it.remove();\n+        assertEquals(2, bag.size());\n+        try {\n+            it.remove();\n+            fail(\"Should throw IllegalStateException\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+        assertEquals(2, bag.size());\n+        it.next();\n+        it.remove();\n+        assertEquals(1, bag.size());\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public void testIteratorRemoveProtectsInvariants() {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        assertEquals(2, bag.size());\n+        Iterator<T> it = bag.iterator();\n+        assertEquals(\"A\", it.next());\n+        assertEquals(true, it.hasNext());\n+        it.remove();\n+        assertEquals(1, bag.size());\n+        assertEquals(true, it.hasNext());\n+        assertEquals(\"A\", it.next());\n+        assertEquals(false, it.hasNext());\n+        it.remove();\n+        assertEquals(0, bag.size());\n+        assertEquals(false, it.hasNext());\n+        \n+        Iterator<T> it2 = bag.iterator();\n+        assertEquals(false, it2.hasNext());\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    public void testToArray() {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        Object[] array = bag.toArray();\n+        int a = 0, b = 0, c = 0;\n+        for (int i = 0; i < array.length; i++) {\n+            a += (array[i].equals(\"A\") ? 1 : 0);\n+            b += (array[i].equals(\"B\") ? 1 : 0);\n+            c += (array[i].equals(\"C\") ? 1 : 0);\n+        }\n+        assertEquals(2, a);\n+        assertEquals(2, b);\n+        assertEquals(1, c);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testToArrayPopulate() {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        String[] array = bag.toArray(new String[0]);\n+        int a = 0, b = 0, c = 0;\n+        for (int i = 0; i < array.length; i++) {\n+            a += (array[i].equals(\"A\") ? 1 : 0);\n+            b += (array[i].equals(\"B\") ? 1 : 0);\n+            c += (array[i].equals(\"C\") ? 1 : 0);\n+        }\n+        assertEquals(2, a);\n+        assertEquals(2, b);\n+        assertEquals(1, c);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n+    public void testEquals() {\n+        Bag<T> bag = makeObject();\n+        Bag<T> bag2 = makeObject();\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add((T) \"A\");\n+        assertEquals(false, bag.equals(bag2));\n+        bag2.add((T) \"A\");\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        bag2.add((T) \"A\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"C\");\n+        assertEquals(true, bag.equals(bag2));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testEqualsHashBag() {\n+        Bag<T> bag = makeObject();\n+        Bag<T> bag2 = new HashBag<T>();\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add((T) \"A\");\n+        assertEquals(false, bag.equals(bag2));\n+        bag2.add((T) \"A\");\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        bag2.add((T) \"A\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"C\");\n+        assertEquals(true, bag.equals(bag2));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testHashCode() {\n+        Bag<T> bag = makeObject();\n+        Bag<T> bag2 = makeObject();\n+        assertEquals(0, bag.hashCode());\n+        assertEquals(0, bag2.hashCode());\n+        assertEquals(bag.hashCode(), bag2.hashCode());\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        bag2.add((T) \"A\");\n+        bag2.add((T) \"A\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"B\");\n+        bag2.add((T) \"C\");\n+        assertEquals(bag.hashCode(), bag2.hashCode());\n+        \n+        int total = 0;\n+        total += (\"A\".hashCode() ^ 2);\n+        total += (\"B\".hashCode() ^ 2);\n+        total += (\"C\".hashCode() ^ 1);\n+        assertEquals(total, bag.hashCode());\n+        assertEquals(total, bag2.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEmptyBagSerialization() throws IOException, ClassNotFoundException {\n+        Bag<T> bag = makeObject();\n+        if (!(bag instanceof Serializable && isTestSerialization())) return;\n+        \n+        byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n+        Bag<?> bag2 = (Bag<?>) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Bag should be empty\",0, bag.size());\n+        assertEquals(\"Bag should be empty\",0, bag2.size());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testFullBagSerialization() throws IOException, ClassNotFoundException {\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        int size = bag.size();\n+        if (!(bag instanceof Serializable && isTestSerialization())) return;\n+        \n+        byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n+        Bag<?> bag2 = (Bag<?>) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Bag should be same size\", size, bag.size());\n+        assertEquals(\"Bag should be same size\", size, bag2.size());\n+    }\n+\n+    /**\n+     * Skip the serialized cannonical tests for now.\n+     *\n+     * @return true\n+     *\n+     * TODO: store a new serialized object on the disk.\n+     */\n+    @Override\n+    protected boolean skipSerializedCanonicalTests() {\n+        return true;\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Bag\n+     * against the canonical version in SVN.\n+     */\n+    public void testEmptyBagCompatibility() throws IOException, ClassNotFoundException {\n+        // test to make sure the canonical form has been preserved\n+        Bag<T> bag = makeObject();\n+        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n+            Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));\n+            assertTrue(\"Bag is empty\",bag2.size()  == 0);\n+            assertEquals(bag, bag2);\n+        }\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the Bag\n+     * against the canonical version in SVN.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void testFullBagCompatibility() throws IOException, ClassNotFoundException {\n+        // test to make sure the canonical form has been preserved\n+        Bag<T> bag = makeObject();\n+        bag.add((T) \"A\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"C\");\n+        if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n+            Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalFullCollectionName(bag));\n+            assertEquals(\"Bag is the right size\",bag.size(), bag2.size());\n+            assertEquals(bag, bag2);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/bag/AbstractSortedBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import org.apache.commons.collections.SortedBag;\n+\n+/**\n+ * Abstract test class for\n+ * {@link org.apache.commons.collections.SortedBag SortedBag}\n+ * methods and contracts.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public abstract class AbstractSortedBagTest<T> extends AbstractBagTest<T> {\n+\n+    public AbstractSortedBagTest(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public abstract SortedBag<T> makeObject();\n+\n+    // TODO: Add the SortedBag tests!\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/bag/HashBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import org.apache.commons.collections.Bag;\n+\n+/**\n+ * Extension of {@link AbstractBagTest} for exercising the {@link HashBag}\n+ * implementation.\n+ *\n+ * @version $Id$\n+ */\n+public class HashBagTest<T> extends AbstractBagTest<T> {\n+    \n+    public HashBagTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public Bag<T> makeObject() {\n+        return new HashBag<T>();\n+    }\n+    \n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3\";\n+    }\n+    \n+//    public void testCreate() throws Exception {\n+//        Bag bag = makeBag();\n+//        writeExternalFormToDisk((Serializable) bag, \"D:/dev/collections/data/test/HashBag.emptyCollection.version3.obj\");\n+//        bag = makeBag();\n+//        bag.add(\"A\");\n+//        bag.add(\"A\");\n+//        bag.add(\"B\");\n+//        bag.add(\"B\");\n+//        bag.add(\"C\");\n+//        writeExternalFormToDisk((Serializable) bag, \"D:/dev/collections/data/test/HashBag.fullCollection.version3.obj\");\n+//    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/bag/PredicatedBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.functors.TruePredicate;\n+\n+/**\n+ * Extension of {@link AbstractBagTest} for exercising the {@link PredicatedBag}\n+ * implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class PredicatedBagTest<T> extends AbstractBagTest<T> {\n+\n+    public PredicatedBagTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    protected Predicate<T> stringPredicate() {\n+        return new Predicate<T>() {\n+            public boolean evaluate(T o) {\n+                return o instanceof String;\n+            }\n+        };\n+    }\n+\n+    protected Predicate<T> truePredicate = TruePredicate.<T>truePredicate();\n+\n+    protected Bag<T> decorateBag(HashBag<T> bag, Predicate<T> predicate) {\n+        return PredicatedBag.predicatedBag(bag, predicate);\n+    }\n+\n+    @Override\n+    public Bag<T> makeObject() {\n+        return decorateBag(new HashBag<T>(), truePredicate);\n+    }\n+\n+    protected Bag<T> makeTestBag() {\n+        return decorateBag(new HashBag<T>(), stringPredicate());\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testlegalAddRemove() {\n+        Bag<T> bag = makeTestBag();\n+        assertEquals(0, bag.size());\n+        T[] els = (T[]) new Object[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"1\" };\n+        for (int i = 0; i < els.length; i++) {\n+            bag.add(els[i]);\n+            assertEquals(i + 1, bag.size());\n+            assertEquals(true, bag.contains(els[i]));\n+        }\n+        Set<T> set = ((PredicatedBag<T>) bag).uniqueSet();\n+        assertTrue(\"Unique set contains the first element\",set.contains(els[0]));\n+        assertEquals(true, bag.remove(els[0]));\n+        set = ((PredicatedBag<T>) bag).uniqueSet();\n+        assertTrue(\"Unique set now does not contain the first element\",\n+            !set.contains(els[0]));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIllegalAdd() {\n+        Bag<T> bag = makeTestBag();\n+        Integer i = new Integer(3);\n+        try {\n+            bag.add((T) i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\",\n+         !bag.contains(i));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testIllegalDecorate() {\n+        HashBag<Object> elements = new HashBag<Object>();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            decorateBag((HashBag<T>) elements, stringPredicate());\n+            fail(\"Bag contains an element that should fail the predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        try {\n+            decorateBag(new HashBag<T>(), null);\n+            fail(\"Expectiing IllegalArgumentException for null predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        Bag bag = makeBag();\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"D:/dev/collections/data/test/PredicatedBag.emptyCollection.version3.1.obj\");\n+//        bag = makeBag();\n+//        bag.add(\"A\");\n+//        bag.add(\"A\");\n+//        bag.add(\"B\");\n+//        bag.add(\"B\");\n+//        bag.add(\"C\");\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"D:/dev/collections/data/test/PredicatedBag.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/bag/PredicatedSortedBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.functors.TruePredicate;\n+\n+/**\n+ * Extension of {@link AbstractSortedBagTest} for exercising the {@link PredicatedSortedBag}\n+ * implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class PredicatedSortedBagTest<T> extends AbstractSortedBagTest<T> {\n+\n+    private SortedBag<T> nullBag = null;\n+\n+    public PredicatedSortedBagTest(String testName) {\n+        super(testName);\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    protected Predicate<T> stringPredicate() {\n+        return new Predicate<T>() {\n+            public boolean evaluate(T o) {\n+                return o instanceof String;\n+            }\n+        };\n+    }\n+\n+    protected Predicate<T> truePredicate = TruePredicate.<T>truePredicate();\n+\n+    protected SortedBag<T> decorateBag(SortedBag<T> bag, Predicate<T> predicate) {\n+        return PredicatedSortedBag.predicatedSortedBag(bag, predicate);\n+    }\n+\n+    @Override\n+    public SortedBag<T> makeObject() {\n+        return decorateBag(new TreeBag<T>(), truePredicate);\n+    }\n+\n+    protected SortedBag<T> makeTestBag() {\n+        return decorateBag(new TreeBag<T>(), stringPredicate());\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    public void testDecorate() {\n+        SortedBag<T> bag = decorateBag(new TreeBag<T>(), stringPredicate());\n+        ((PredicatedSortedBag<T>) bag).decorated();\n+        try {\n+            decorateBag(new TreeBag<T>(), null);\n+            fail(\"Expecting IllegalArgumentException for null predicate\");\n+        } catch (IllegalArgumentException e) {}\n+        try {\n+            decorateBag(nullBag, stringPredicate());\n+            fail(\"Expecting IllegalArgumentException for null bag\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSortOrder() {\n+        SortedBag<T> bag = decorateBag(new TreeBag<T>(), stringPredicate());\n+        String one = \"one\";\n+        String two = \"two\";\n+        String three = \"three\";\n+        bag.add((T) one);\n+        bag.add((T) two);\n+        bag.add((T) three);\n+        assertEquals(\"first element\", bag.first(), one);\n+        assertEquals(\"last element\", bag.last(), two);\n+        Comparator<? super T> c = bag.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", c == null);\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        Bag bag = makeBag();\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"D:/dev/collections/data/test/PredicatedSortedBag.emptyCollection.version3.1.obj\");\n+//        bag = makeBag();\n+//        bag.add(\"A\");\n+//        bag.add(\"A\");\n+//        bag.add(\"B\");\n+//        bag.add(\"B\");\n+//        bag.add(\"C\");\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"D:/dev/collections/data/test/PredicatedSortedBag.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/bag/TransformedBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.collection.TestTransformedCollection;\n+\n+/**\n+ * Extension of {@link AbstractBagTest} for exercising the {@link TransformedBag}\n+ * implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class TransformedBagTest<T> extends AbstractBagTest<T> {\n+\n+    public TransformedBagTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public Bag<T> makeObject() {\n+        return TransformedBag.transformingBag(new HashBag<T>(), (Transformer<T, T>) TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testTransformedBag() {\n+        //T had better be Object!\n+        Bag<T> bag = TransformedBag.transformingBag(new HashBag<T>(), (Transformer<T, T>) TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, bag.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            bag.add((T) els[i]);\n+            assertEquals(i + 1, bag.size());\n+            assertEquals(true, bag.contains(new Integer((String) els[i])));\n+            assertEquals(false, bag.contains(els[i]));\n+        }\n+\n+        assertEquals(false, bag.remove(els[0]));\n+        assertEquals(true, bag.remove(new Integer((String) els[0])));\n+    }\n+\n+    // TODO: Generics\n+    public void testTransformedBag_decorateTransform() {\n+        Bag originalBag = new HashBag();\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            originalBag.add(els[i]);\n+        }\n+        Bag bag = TransformedBag.transformedBag(originalBag, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, bag.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, bag.contains(new Integer((String) els[i])));\n+            assertEquals(false, bag.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, bag.remove(els[0]));\n+        assertEquals(true, bag.remove(new Integer((String) els[0])));\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        Bag bag = makeBag();\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"D:/dev/collections/data/test/TransformedBag.emptyCollection.version3.1.obj\");\n+//        bag = makeBag();\n+//        bag.add(\"A\");\n+//        bag.add(\"A\");\n+//        bag.add(\"B\");\n+//        bag.add(\"B\");\n+//        bag.add(\"C\");\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"D:/dev/collections/data/test/TransformedBag.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/bag/TransformedSortedBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.collection.TestTransformedCollection;\n+\n+/**\n+ * Extension of {@link AbstractSortedBagTest} for exercising the {@link TransformedSortedBag}\n+ * implementation.\n+ *\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class TransformedSortedBagTest<T> extends AbstractSortedBagTest<T> {\n+\n+    public TransformedSortedBagTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public SortedBag<T> makeObject() {\n+        return TransformedSortedBag.transformingSortedBag(new TreeBag<T>(), (Transformer<T, T>) TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testTransformedBag() {\n+        SortedBag<T> bag = TransformedSortedBag.transformingSortedBag(new TreeBag<T>(), (Transformer<T, T>) TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, bag.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            bag.add((T) els[i]);\n+            assertEquals(i + 1, bag.size());\n+            assertEquals(true, bag.contains(new Integer((String) els[i])));\n+        }\n+\n+        assertEquals(true, bag.remove(new Integer((String) els[0])));\n+\n+    }\n+\n+    public void testTransformedBag_decorateTransform() {\n+        Bag<Object> originalBag = new TreeBag<Object>();\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            originalBag.add(els[i]);\n+        }\n+        Bag<?> bag = TransformedBag.transformedBag(originalBag, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(els.length, bag.size());\n+        for (int i = 0; i < els.length; i++) {\n+            assertEquals(true, bag.contains(new Integer((String) els[i])));\n+        }\n+        \n+        assertEquals(true, bag.remove(new Integer((String) els[0])));\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        Bag bag = makeBag();\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"D:/dev/collections/data/test/TransformedSortedBag.emptyCollection.version3.1.obj\");\n+//        bag = makeBag();\n+//        bag.add(\"A\");\n+//        bag.add(\"A\");\n+//        bag.add(\"B\");\n+//        bag.add(\"B\");\n+//        bag.add(\"C\");\n+//        writeExternalFormToDisk((java.io.Serializable) bag, \"D:/dev/collections/data/test/TransformedSortedBag.fullCollection.version3.1.obj\");\n+//    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/collections/bag/TreeBagTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.SortedBag;\n+\n+/**\n+ * Extension of {@link AbstractBagTest} for exercising the {@link TreeBag}\n+ * implementation.\n+ *\n+ * @version $Id$\n+ */\n+public class TreeBagTest<T> extends AbstractSortedBagTest<T> {\n+\n+    public TreeBagTest(String testName) {\n+        super(testName);\n+    }\n+\n+    @Override\n+    public SortedBag<T> makeObject() {\n+        return new TreeBag<T>();\n+    }\n+\n+   // TODO: Generics (for example... is this even needed?)\n+   public void testCollections265() {\n+       Bag<Object> bag = new TreeBag<Object>();\n+       try {\n+           bag.add(new Object());\n+           fail(\"IllegalArgumentException expected\");\n+       } catch(IllegalArgumentException iae) {\n+           // expected;\n+       }\n+   }\n+   \n+    @SuppressWarnings(\"unchecked\")\n+    public SortedBag<T> setupBag() {\n+        SortedBag<T> bag = makeObject();\n+        bag.add((T) \"C\");\n+        bag.add((T) \"A\");\n+        bag.add((T) \"B\");\n+        bag.add((T) \"D\");\n+        return bag;\n+    }\n+\n+    public void testOrdering() {\n+        Bag<T> bag = setupBag();\n+        assertEquals(\"Should get elements in correct order\", \"A\", bag.toArray()[0]);\n+        assertEquals(\"Should get elements in correct order\", \"B\", bag.toArray()[1]);\n+        assertEquals(\"Should get elements in correct order\", \"C\", bag.toArray()[2]);\n+        assertEquals(\"Should get first key\", \"A\", ((SortedBag<T>) bag).first());\n+        assertEquals(\"Should get last key\", \"D\", ((SortedBag<T>) bag).last());\n+    }\n+\n+    @Override\n+    public String getCompatibilityVersion() {\n+        return \"3\";\n+    }\n+\n+    //   public void testCreate() throws Exception {\n+    //       Bag bag = makeBag();\n+    //       writeExternalFormToDisk((Serializable) bag, \"D:/dev/collections/data/test/TreeBag.emptyCollection.version3.obj\");\n+    //       bag = makeBag();\n+    //       bag.add(\"A\");\n+    //       bag.add(\"A\");\n+    //       bag.add(\"B\");\n+    //       bag.add(\"B\");\n+    //       bag.add(\"C\");\n+    //       writeExternalFormToDisk((Serializable) bag, \"D:/dev/collections/data/test/TreeBag.fullCollection.version3.obj\");\n+    //   }\n+}\n--- a/src/test/java/org/apache/commons/collections/collection/AbstractTestCollection.java\n+++ b/src/test/java/org/apache/commons/collections/collection/AbstractTestCollection.java\n  * <p>\n  * If you're extending {@link org.apache.commons.collections.list.AbstractTestList AbstractTestList},\n  * {@link org.apache.commons.collections.set.AbstractTestSet AbstractTestSet},\n- * or {@link org.apache.commons.collections.bag.AbstractTestBag AbstractTestBag}, \n+ * or {@link org.apache.commons.collections.bag.AbstractBagTest AbstractTestBag}, \n  * you probably don't have to worry about the\n  * above methods, because those three classes already override the methods\n  * to provide standard JDK confirmed collections.<P>", "timestamp": 1343557307, "metainfo": ""}