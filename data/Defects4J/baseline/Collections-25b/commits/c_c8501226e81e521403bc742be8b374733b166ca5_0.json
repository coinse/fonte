{"sha": "c8501226e81e521403bc742be8b374733b166ca5", "log": "Add TransformedMap and TransformedSortedMap   ", "commit": "\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.23 2003/05/09 18:41:34 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.24 2003/05/17 15:03:25 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.LazySortedMap;\n import org.apache.commons.collections.decorators.PredicatedMap;\n import org.apache.commons.collections.decorators.PredicatedSortedMap;\n+import org.apache.commons.collections.decorators.TransformedMap;\n+import org.apache.commons.collections.decorators.TransformedSortedMap;\n import org.apache.commons.collections.decorators.TypedMap;\n import org.apache.commons.collections.decorators.TypedSortedMap;\n \n  *  <li>{@link #fixedSizeMap(Map)}\n  *  <li>{@link #fixedSizeSortedMap(SortedMap)}\n  *  <li>{@link #lazyMap(Map,Factory)}\n- *  <li>{@link #typedMap(Map, Class, Class)}\n+ *  <li>{@link #lazyMap(Map,Transformer)}\n  *  <li>{@link #lazySortedMap(SortedMap,Factory)}\n+ *  <li>{@link #lazySortedMap(SortedMap,Transformer)}\n  *  <li>{@link #predicatedMap(Map,Predicate,Predicate)}\n  *  <li>{@link #predicatedSortedMap(SortedMap,Predicate,Predicate)}\n+ *  <li>{@link #transformedMap(Map, Transformer, Transformer)}\n+ *  <li>{@link #transformedSortedMap(Map, Transformer, Transformer)}\n+ *  <li>{@link #typedMap(Map, Class, Class)}\n  *  <li>{@link #typedSortedMap(Map, Class, Class)}\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.23 $ $Date: 2003/05/09 18:41:34 $\n+ * @version $Revision: 1.24 $ $Date: 2003/05/17 15:03:25 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n      * method, as it is a backdoor for adding unvalidated objects.\n      *\n      * @param map  the map to predicate, must not be null\n-     * @param keyPred  the predicate for keys, must not be null\n-     * @param valuePred  the predicate for values, must not be null\n+     * @param keyPred  the predicate for keys, null means no check\n+     * @param valuePred  the predicate for values, null means no check\n      * @return a predicated map backed by the given map\n-     * @throws IllegalArgumentException  if the Map or Predicates are null\n+     * @throws IllegalArgumentException  if the Map is null\n      */\n     public static Map predicatedMap(Map map, Predicate keyPred, Predicate valuePred) {\n         return PredicatedMap.decorate(map, keyPred, valuePred);\n      * Only keys and values of the specified types can be added to the map.\n      * \n      * @param map  the map to limit to a specific type, must not be null\n-     * @param keyType  the type of keys which may be added to the map\n-     * @param valueType  the type of values which may be added to the map\n+     * @param keyType  the type of keys which may be added to the map, must not be null\n+     * @param valueType  the type of values which may be added to the map, must not be null\n      * @return a typed map backed by the specified map\n+     * @throws IllegalArgumentException  if the Map or Class is null\n      */\n     public static Map typedMap(Map map, Class keyType, Class valueType) {\n         return TypedMap.decorate(map, keyType, valueType);\n+    }\n+    \n+    /**\n+     * Returns a transformed map backed by the given map.\n+     * <p>\n+     * Each object is passed through the transformers as it is added to the\n+     * Map. It is important not to use the original map after invoking this \n+     * method, as it is a backdoor for adding untransformed objects.\n+     *\n+     * @param map  the map to predicate, must not be null\n+     * @param keyTransformer  the transformer for the map keys, null means no transformation\n+     * @param valueTransformer  the transformer for the map values, null means no transformation\n+     * @return a transformed map backed by the given map\n+     * @throws IllegalArgumentException  if the Map is null\n+     */\n+    public static Map transformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) {\n+        return TransformedMap.decorate(map, keyTransformer, valueTransformer);\n     }\n     \n     /**\n      * method, as it is a backdoor for adding unvalidated objects.\n      *\n      * @param map  the map to predicate, must not be null\n-     * @param keyPred  the predicate for keys, must not be null\n-     * @param valuePred  the predicate for values, must not be null\n+     * @param keyPred  the predicate for keys, null means no check\n+     * @param valuePred  the predicate for values, null means no check\n      * @return a predicated map backed by the given map\n-     * @throws IllegalArgumentException  if the SortedMap or Predicates are null\n+     * @throws IllegalArgumentException  if the SortedMap is null\n      */\n     public static SortedMap predicatedSortedMap(SortedMap map, Predicate keyPred, Predicate valuePred) {\n         return PredicatedSortedMap.decorate(map, keyPred, valuePred);\n      * Only keys and values of the specified types can be added to the map.\n      * \n      * @param map  the map to limit to a specific type, must not be null\n-     * @param keyType  the type of keys which may be added to the map\n-     * @param valueType  the type of values which may be added to the map\n+     * @param keyType  the type of keys which may be added to the map, must not be null\n+     * @param valueType  the type of values which may be added to the map, must not be null\n      * @return a typed map backed by the specified map\n      */\n     public static SortedMap typedSortedMap(SortedMap map, Class keyType, Class valueType) {\n         return TypedSortedMap.decorate(map, keyType, valueType);\n+    }\n+    \n+    /**\n+     * Returns a transformed sorted map backed by the given map.\n+     * <p>\n+     * Each object is passed through the transformers as it is added to the\n+     * Map. It is important not to use the original map after invoking this \n+     * method, as it is a backdoor for adding untransformed objects.\n+     *\n+     * @param map  the map to predicate, must not be null\n+     * @param keyTransformer  the transformer for the map keys, null means no transformation\n+     * @param valueTransformer  the transformer for the map values, null means no transformation\n+     * @return a transformed map backed by the given map\n+     * @throws IllegalArgumentException  if the Map is null\n+     */\n+    public static SortedMap transformedSortedMap(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n+        return TransformedSortedMap.decorate(map, keyTransformer, valueTransformer);\n     }\n     \n     /**", "timestamp": 1053183805, "metainfo": ""}