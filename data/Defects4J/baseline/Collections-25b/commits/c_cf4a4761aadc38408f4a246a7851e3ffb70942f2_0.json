{"sha": "cf4a4761aadc38408f4a246a7851e3ffb70942f2", "log": "Added TestPredicatedSortedSet. Added first() and last() checks to AbstractTestSortedSet verify. Modified TestTransformedSortedSet and TestObservedSortedSet to use BulkTest.makeSuite.   ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestSortedSet.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestSortedSet.java,v 1.3 2003/10/10 21:19:39 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestSortedSet.java,v 1.4 2003/10/12 06:37:30 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * elements may be added; see {@link AbstractTestCollection} for more details.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/10/10 21:19:39 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/12 06:37:30 $\n  * \n  * @author Stephen Colebourne\n  * @author Dieter Wimberger\n     protected void verify() {\n         super.verify();\n         \n-        //Sorted sets should return in-order iterators by contract\n+        // Check that iterator returns elements in order and first() and last()\n+        // are consistent\n         Iterator colliter = collection.iterator();\n         Iterator confiter = confirmed.iterator();\n+        Object first = null;\n+        Object last = null;\n         while (colliter.hasNext()) {\n-            assertEquals(\"Element appears to be out of order.\", colliter.next(), confiter.next());\n+            if (first == null) {\n+                first = colliter.next();\n+                last = first;\n+            } else {\n+              last = colliter.next();\n+            }  \n+            assertEquals(\"Element appears to be out of order.\", last, confiter.next());\n+        }\n+        if (collection.size() > 0) {\n+            assertEquals(\"Incorrect element returned by first().\", first,\n+                ((SortedSet) collection).first());\n+            assertEquals(\"Incorrect element returned by last().\", last,\n+                ((SortedSet) collection).last());\n         }\n     }\n \n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.18 2003/10/06 05:06:05 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.19 2003/10/12 06:37:30 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.18 $ $Date: 2003/10/06 05:06:05 $\n+ * @version $Revision: 1.19 $ $Date: 2003/10/12 06:37:30 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestPredicatedBuffer.suite());\n         suite.addTest(TestPredicatedList.suite());\n         suite.addTest(TestPredicatedSet.suite());\n+        suite.addTest(TestPredicatedSortedSet.suite());\n         suite.addTest(TestPredicatedMap.suite());\n         suite.addTest(TestPredicatedSortedMap.suite());\n         \n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedSortedSet.java,v 1.1 2003/10/12 06:37:30 psteitz Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestSortedSet;\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Extension of {@link AbstractTestSortedSet} for exercising the \n+ * {@link PredicatedSortedSet} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/10/12 06:37:30 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedSortedSet extends AbstractTestSortedSet{\n+    \n+    public TestPredicatedSortedSet(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestPredicatedSortedSet.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedSortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------    \n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    public Set makeEmptySet() {\n+        return PredicatedSortedSet.decorate(new TreeSet(), truePredicate);\n+    }\n+    \n+    public Set makeFullSet() {\n+        TreeSet set = new TreeSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return PredicatedSortedSet.decorate(set, truePredicate);\n+    }\n+   \n+    \n+//--------------------------------------------------------------------   \n+    protected Predicate testPredicate =  \n+        new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return (o instanceof String) && (((String) o).startsWith(\"A\"));\n+            }\n+        };      \n+     \n+    \n+    protected SortedSet makeTestSet() {\n+        return PredicatedSortedSet.decorate(new TreeSet(), testPredicate);\n+    }\n+    \n+    public void testGetSet() {\n+        SortedSet set = makeTestSet();\n+        assertTrue(\"returned set should not be null\",\n+            ((PredicatedSortedSet) set).getSet() != null);\n+    }\n+    \n+    public void testIllegalAdd() {\n+        SortedSet set = makeTestSet();\n+        String testString = \"B\";\n+        try {\n+            set.add(testString);\n+            fail(\"Should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !set.contains(testString));   \n+    }\n+\n+    public void testIllegalAddAll() {\n+        SortedSet set = makeTestSet();\n+        Set elements = new TreeSet();\n+        elements.add(\"Aone\");\n+        elements.add(\"Atwo\");\n+        elements.add(\"Bthree\");\n+        elements.add(\"Afour\");\n+        try {\n+            set.addAll(elements);\n+            fail(\"Should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"Aone\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"Atwo\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"Bthree\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"Afour\"));   \n+    }\n+    \n+    public void testComparator() {\n+        SortedSet set = makeTestSet();\n+        Comparator c = set.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", c == null);\n+    }\n+        \n+}\n--- a/src/test/org/apache/commons/collections/decorators/TestTransformedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestTransformedSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedSortedSet.java,v 1.4 2003/10/02 22:48:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedSortedSet.java,v 1.5 2003/10/12 06:37:30 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.Set;\n+import java.util.SortedSet;\n import java.util.TreeSet;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.AbstractTestSortedSet;\n+import org.apache.commons.collections.BulkTest;\n \n /**\n  * Extension of {@link TestSortedSet} for exercising the {@link TransformedSortedSet}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.4 $ $Date: 2003/10/02 22:48:41 $\n+ * @version $Revision: 1.5 $ $Date: 2003/10/12 06:37:30 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     public static Test suite() {\n-        return new TestSuite(TestTransformedSortedSet.class);\n+        return BulkTest.makeSuite(TestTransformedSortedSet.class);\n     }\n \n     public static void main(String args[]) {\n     }\n \n     protected Set makeFullSet() {\n-        Set set = new TreeSet();\n+        SortedSet set = new TreeSet();\n         set.addAll(Arrays.asList(getFullElements()));\n         return TransformedSortedSet.decorate(set, TestTransformedCollection.NOOP_TRANSFORMER);\n     }\n     \n-    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------   \n     public void testTransformedSet() {\n         Set set = TransformedSortedSet.decorate(new HashSet(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(0, set.size());\n         assertEquals(false, set.remove(els[0]));\n         assertEquals(true, set.remove(new Integer((String) els[0])));\n         \n-    }\n+    } \n }\n--- a/src/test/org/apache/commons/collections/observed/TestObservableSortedSet.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedSet.java,v 1.3 2003/10/02 22:48:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedSet.java,v 1.4 2003/10/12 06:37:30 psteitz Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.Arrays;\n import java.util.Set;\n+import java.util.SortedSet;\n import java.util.TreeSet;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.AbstractTestSortedSet;\n+import org.apache.commons.collections.BulkTest;\n \n /**\n  * Extension of {@link TestSortedSet} for exercising the\n  * {@link ObservedSortedSet} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/10/02 22:48:40 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/12 06:37:30 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n \n     public static Test suite() {\n-        return new TestSuite(TestObservableSortedSet.class);\n+        return BulkTest.makeSuite(TestObservableSortedSet.class);\n     }\n \n     public static void main(String args[]) {\n     }\n \n     protected Set makeFullSet() {\n-        Set set = new TreeSet();\n+        SortedSet set = new TreeSet();\n         set.addAll(Arrays.asList(getFullElements()));\n         return ObservableSortedSet.decorate(set, ObservedTestHelper.LISTENER);\n     }", "timestamp": 1065940650, "metainfo": ""}