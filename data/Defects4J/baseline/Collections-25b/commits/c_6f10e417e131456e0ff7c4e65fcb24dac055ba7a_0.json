{"sha": "6f10e417e131456e0ff7c4e65fcb24dac055ba7a", "log": "Make ReferenceMap serializable   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/map/ReferenceMap.java\n  */\n package org.apache.commons.collections.map;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n \n /**\n  * A <code>Map</code> implementation that allows mappings to be\n  * weak values, or any other combination. The default constructor uses\n  * hard keys and soft values, providing a memory-sensitive cache.\n  * <p>\n+ * This map is similar to\n+ * {@link org.apache.commons.collections.map.ReferenceIdentityMap ReferenceIdentityMap}.\n+ * It differs in that keys and values in this class are compared using <code>equals()</code>.\n+ * <p>\n  * This {@link Map} implementation does <i>not</i> allow null elements.\n  * Attempting to add a null key or value to the map will raise a <code>NullPointerException</code>.\n  * <p>\n  * This implementation is not synchronized.\n  * You can use {@link java.util.Collections#synchronizedMap} to \n  * provide synchronized access to a <code>ReferenceMap</code>.\n+ * Remember that synchronization will not stop the garbage collecter removing entries.\n  * <p>\n  * All the available iterators can be reset back to the start by casting to\n  * <code>ResettableIterator</code> and calling <code>reset()</code>.\n  * <p>\n- * NOTE: As from Commons Collections 3.1 this map extends <code>AbstractHashedMap</code>\n+ * NOTE: As from Commons Collections 3.1 this map extends <code>AbstractReferenceMap</code>\n  * (previously it extended AbstractMap). As a result, the implementation is now\n  * extensible and provides a <code>MapIterator</code>.\n  *\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 3.0 (previously in main package v2.1)\n- * @version $Revision: 1.12 $ $Date: 2004/04/09 22:18:18 $\n+ * @version $Revision: 1.13 $ $Date: 2004/04/27 21:35:23 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n  */\n-public class ReferenceMap extends AbstractReferenceMap {\n+public class ReferenceMap extends AbstractReferenceMap implements Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 1555089888138299607L;\n \n     /**\n      * Constructs a new <code>ReferenceMap</code> that will\n         super(keyType, valueType, capacity, loadFactor, purgeValues);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the map out using a custom routine.\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        doWriteObject(out);\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        doReadObject(in);\n+    }\n+\n }\n--- a/src/test/org/apache/commons/collections/map/TestReferenceMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestReferenceMap.java\n /**\n  * Tests for ReferenceMap. \n  * \n- * @version $Revision: 1.5 $ $Date: 2004/04/09 22:18:17 $\n+ * @version $Revision: 1.6 $ $Date: 2004/04/27 21:35:23 $\n  *\n  * @author Paul Jack\n  */\n \n \n     public String getCompatibilityVersion() {\n-        return \"2.1\";  // previously in main package\n+        return \"3.1\";\n     }\n \n     /** Tests whether purge values setting works */", "timestamp": 1083101723, "metainfo": ""}