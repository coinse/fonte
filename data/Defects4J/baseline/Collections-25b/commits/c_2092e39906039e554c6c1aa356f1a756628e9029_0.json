{"sha": "2092e39906039e554c6c1aa356f1a756628e9029", "log": "Rename TestBidiMap to AbstractTestBidiMap to promote to testframework jar   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/AbstractTestBidiMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestBidiMap.java,v 1.1 2003/10/10 21:11:39 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/10/10 21:11:39 $\n+ * \n+ * @author Matthew Hawthorne\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestBidiMap extends AbstractTestMap {\n+\n+    // Test data.\n+    private static final Object[][] entriesKV =\n+        new Object[][] {\n+            new Object[] { \"key1\", \"value1\" },\n+            new Object[] { \"key2\", \"value2\" },\n+            new Object[] { \"key3\", \"value3\" }\n+    };\n+    private static final Object[][] entriesVK =\n+        new Object[][] {\n+            new Object[] { \"value1\", \"key1\" },\n+            new Object[] { \"value2\", \"key2\" },\n+            new Object[] { \"value3\", \"key3\" }\n+    };\n+    private final Object[][] entries;\n+\n+    public AbstractTestBidiMap(String testName) {\n+        super(testName);\n+        entries = entriesKV;\n+    }\n+\n+    public AbstractTestBidiMap() {\n+        super(\"Inverse\");\n+        entries = entriesVK;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implement to create an empty <code>BidiMap</code>.\n+     * \n+     * @return an empty <code>BidiMap</code> implementation.\n+     */\n+    protected abstract BidiMap makeEmptyBidiMap();\n+\n+    /**\n+     * Override to create a full <code>BidiMap</code> other than the default.\n+     * \n+     * @return a full <code>BidiMap</code> implementation.\n+     */\n+    protected BidiMap makeFullBidiMap() {\n+        final BidiMap map = makeEmptyBidiMap();\n+        for (int i = 0; i < entries.length; i++) {\n+            map.put(entries[i][0], entries[i][1]);\n+        }\n+        return map;\n+    }\n+\n+    /**\n+     * Override to return the empty BidiMap.\n+     */\n+    protected final  Map makeEmptyMap() {\n+        return makeEmptyBidiMap();\n+    }\n+\n+    /**\n+     * Override to indicate to AbstractTestMap this is a BidiMap.\n+     */\n+    protected boolean isAllowDuplicateValues() {\n+        return false;\n+    }\n+    \n+    /**\n+     * Override as DualHashBidiMap didn't exist until version 3.\n+     */\n+    protected String getCompatibilityVersion() {\n+        return \"3\";\n+    }\n+\n+    // BidiPut\n+    //-----------------------------------------------------------------------\n+    public void testBidiPut() {\n+        BidiMap map = makeEmptyBidiMap();\n+        BidiMap inverse = map.inverseBidiMap();\n+        assertEquals(0, map.size());\n+        assertEquals(map.size(), inverse.size());\n+        \n+        map.put(\"A\", \"B\");\n+        assertEquals(1, map.size());\n+        assertEquals(map.size(), inverse.size());\n+        assertEquals(\"B\", map.get(\"A\"));\n+        assertEquals(\"A\", inverse.get(\"B\"));\n+        \n+        map.put(\"A\", \"C\");\n+        assertEquals(1, map.size());\n+        assertEquals(map.size(), inverse.size());\n+        assertEquals(\"C\", map.get(\"A\"));\n+        assertEquals(\"A\", inverse.get(\"C\"));\n+        \n+        map.put(\"B\", \"C\");\n+        assertEquals(1, map.size());\n+        assertEquals(map.size(), inverse.size());\n+        assertEquals(\"C\", map.get(\"B\"));\n+        assertEquals(\"B\", inverse.get(\"C\"));\n+        \n+        map.put(\"E\", \"F\");\n+        assertEquals(2, map.size());\n+        assertEquals(map.size(), inverse.size());\n+        assertEquals(\"F\", map.get(\"E\"));\n+        assertEquals(\"E\", inverse.get(\"F\"));\n+    }\n+\n+    /**\n+     * Verifies that {@link #map} is still equal to {@link #confirmed}.\n+     * <p>\n+     * This implementation checks the inverse map as well.\n+     */\n+    protected void verify() {\n+        verifyInverse();\n+        super.verify();\n+    }\n+\n+    protected void verifyInverse() {\n+        assertEquals(map.size(), ((BidiMap) map).inverseBidiMap().size());\n+    }\n+    \n+    // testGetKey\n+    //-----------------------------------------------------------------------\n+    public void testBidiGetKey() {\n+        doTestGetKey(makeFullBidiMap(), entries[0][0], entries[0][1]);\n+    }\n+\n+    public void testBidiGetKeyInverse() {\n+        doTestGetKey(\n+            makeFullBidiMap().inverseBidiMap(),\n+            entries[0][1],\n+            entries[0][0]);\n+    }\n+\n+    private final void doTestGetKey(BidiMap map, Object key, Object value) {\n+        assertEquals(\"Value not found for key.\", value, map.get(key));\n+        assertEquals(\"Key not found for value.\", key, map.getKey(value));\n+    }\n+\n+    // testInverse\n+    //-----------------------------------------------------------------------\n+    public void testBidiInverse() {\n+        final BidiMap map = makeFullBidiMap();\n+        final BidiMap inverseMap = map.inverseBidiMap();\n+\n+        assertSame(\n+            \"Inverse of inverse is not equal to original.\",\n+            map,\n+            inverseMap.inverseBidiMap());\n+\n+        assertEquals(\n+            \"Value not found for key.\",\n+            entries[0][0],\n+            inverseMap.get(entries[0][1]));\n+\n+        assertEquals(\n+            \"Key not found for value.\",\n+            entries[0][1],\n+            inverseMap.getKey(entries[0][0]));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiModifyEntrySet() {\n+        modifyEntrySet(makeFullBidiMap());\n+        modifyEntrySet(makeFullBidiMap().inverseBidiMap());\n+    }\n+\n+    private final void modifyEntrySet(BidiMap map) {\n+        // Gets first entry\n+        final Map.Entry entry = (Map.Entry)map.entrySet().iterator().next();\n+\n+        // Gets key and value\n+        final Object key = entry.getKey();\n+        final Object oldValue = entry.getValue();\n+\n+        // Sets new value\n+        final Object newValue = \"newValue\";\n+        entry.setValue(newValue);\n+\n+        assertEquals(\n+            \"Modifying entrySet did not affect underlying Map.\",\n+            newValue,\n+            map.get(key));\n+\n+        assertNull(\n+            \"Modifying entrySet did not affect inverse Map.\",\n+            map.getKey(oldValue));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiClear() {\n+        BidiMap map = makeFullBidiMap();\n+        map.clear();\n+        assertTrue(\"Map was not cleared.\", map.isEmpty());\n+        assertTrue(\"Inverse map was not cleared.\", map.inverseBidiMap().isEmpty());\n+\n+        // Tests clear on inverse\n+        map = makeFullBidiMap().inverseBidiMap();\n+        map.clear();\n+        assertTrue(\"Map was not cleared.\", map.isEmpty());\n+        assertTrue(\"Inverse map was not cleared.\", map.inverseBidiMap().isEmpty());\n+\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiRemove() {\n+        remove(makeFullBidiMap(), entries[0][0]);\n+        remove(makeFullBidiMap().inverseBidiMap(), entries[0][1]);\n+\n+        removeKey(makeFullBidiMap(), entries[0][1]);\n+        removeKey(makeFullBidiMap().inverseBidiMap(), entries[0][0]);\n+    }\n+\n+    private final void remove(BidiMap map, Object key) {\n+        final Object value = map.remove(key);\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertNull(\"Value was not removed.\", map.getKey(value));\n+    }\n+\n+    private final void removeKey(BidiMap map, Object value) {\n+        final Object key = map.removeKey(value);\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertNull(\"Value was not removed.\", map.getKey(value));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiRemoveByKeySet() {\n+        removeByKeySet(makeFullBidiMap(), entries[0][0], entries[0][1]);\n+        removeByKeySet(makeFullBidiMap().inverseBidiMap(), entries[0][1], entries[0][0]);\n+    }\n+\n+    private final void removeByKeySet(BidiMap map, Object key, Object value) {\n+        map.keySet().remove(key);\n+\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertTrue(\"Value was not removed.\", !map.containsValue(value));\n+\n+        assertTrue(\n+            \"Key was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsValue(key));\n+        assertTrue(\n+            \"Value was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsKey(value));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBidiRemoveByEntrySet() {\n+        removeByEntrySet(makeFullBidiMap(), entries[0][0], entries[0][1]);\n+        removeByEntrySet(makeFullBidiMap().inverseBidiMap(), entries[0][1], entries[0][0]);\n+    }\n+\n+    private final void removeByEntrySet(BidiMap map, Object key, Object value) {\n+        Map temp = new HashMap();\n+        temp.put(key, value);\n+        map.entrySet().remove(temp.entrySet().iterator().next());\n+\n+        assertTrue(\"Key was not removed.\", !map.containsKey(key));\n+        assertTrue(\"Value was not removed.\", !map.containsValue(value));\n+\n+        assertTrue(\n+            \"Key was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsValue(key));\n+        assertTrue(\n+            \"Value was not removed from inverse map.\",\n+            !map.inverseBidiMap().containsKey(value));\n+    }\n+\n+    public BulkTest bulkTestInverseMap() {\n+        return new TestInverseBidiMap(this);\n+    }\n+\n+    class TestInverseBidiMap extends AbstractTestBidiMap {\n+        final AbstractTestBidiMap main;\n+        \n+        public TestInverseBidiMap(AbstractTestBidiMap main) {\n+            super();\n+            this.main = main;\n+        }\n+        protected BidiMap makeEmptyBidiMap() {\n+            return main.makeEmptyBidiMap().inverseBidiMap();\n+        }\n+        protected BidiMap makeFullBidiMap() {\n+            return main.makeFullBidiMap().inverseBidiMap();\n+        }\n+        protected Object[] getSampleKeys() {\n+            return main.getSampleValues();\n+        }\n+        protected Object[] getSampleValues() {\n+            return main.getSampleKeys();\n+        }\n+        \n+        protected String getCompatibilityVersion() {\n+            return main.getCompatibilityVersion();\n+        }\n+        protected boolean isAllowNullKey() {\n+            return main.isAllowNullKey();\n+        }\n+        protected boolean isAllowNullValue() {\n+            return main.isAllowNullValue();\n+        }\n+        protected boolean isPutAddSupported() {\n+            return main.isPutAddSupported();\n+        }\n+        protected boolean isPutChangeSupported() {\n+            return main.isPutChangeSupported();\n+        }\n+        protected boolean isRemoveSupported() {\n+            return main.isRemoveSupported();\n+        }\n+\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/collections/TestDualHashBidiMap.java\n+++ b/src/test/org/apache/commons/collections/TestDualHashBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestDualHashBidiMap.java,v 1.1 2003/10/06 23:47:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestDualHashBidiMap.java,v 1.2 2003/10/10 21:11:39 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/10/06 23:47:17 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/10 21:11:39 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  */\n-public class TestDualHashBidiMap extends TestBidiMap {\n+public class TestDualHashBidiMap extends AbstractTestBidiMap {\n \n     public static void main(String[] args) {\n         TestRunner.run(suite());", "timestamp": 1065820314, "metainfo": ""}