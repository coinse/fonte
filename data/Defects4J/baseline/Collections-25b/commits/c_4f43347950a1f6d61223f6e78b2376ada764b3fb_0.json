{"sha": "4f43347950a1f6d61223f6e78b2376ada764b3fb", "log": "Remove unnecessary parentheses (except for some bit expressions.)  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n      * @see Collection#containsAll\n      */\n     public static boolean isProperSubCollection(final Collection<?> a, final Collection<?> b) {\n-        return (a.size() < b.size()) && CollectionUtils.isSubCollection(a, b);\n+        return a.size() < b.size() && CollectionUtils.isSubCollection(a, b);\n     }\n \n     /**\n      */\n     public static <O> int cardinality(O obj, final Iterable<? super O> coll) {\n         if (coll instanceof Set<?>) {\n-            return (((Set<? super O>) coll).contains(obj) ? 1 : 0);\n+            return ((Set<? super O>) coll).contains(obj) ? 1 : 0;\n         }\n         if (coll instanceof Bag<?>) {\n             return ((Bag<? super O>) coll).getCount(obj);\n         if (collection == null) {\n             throw new NullPointerException(\"The collection must not be null\");\n         }\n-        return (object != null && collection.add(object));\n+        return object != null && collection.add(object);\n     }\n \n     /**\n      * @since 3.2\n      */\n     public static boolean isEmpty(Collection<?> coll) {\n-        return (coll == null || coll.isEmpty());\n+        return coll == null || coll.isEmpty();\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n             comparator = NATURAL_COMPARATOR;\n         }\n         int c = comparator.compare(o1, o2);\n-        return (c < 0) ? o1 : o2;\n+        return c < 0 ? o1 : o2;\n     }\n \n     /**\n             comparator = NATURAL_COMPARATOR;\n         }\n         int c = comparator.compare(o1, o2);\n-        return (c > 0) ? o1 : o2;\n+        return c > 0 ? o1 : o2;\n     }\n     \n }\n--- a/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n      */\n     protected String interpolate(String base) {\n         // COPIED from [configuration] 2003-12-29\n-        return (interpolateHelper(base, null));\n+        return interpolateHelper(base, null);\n     }\n \n     /**\n         StringBuilder result = new StringBuilder();\n \n         // FIXME: we should probably allow the escaping of the start token\n-        while (((begin = base.indexOf(START_TOKEN, prec + END_TOKEN.length())) > -1)\n-            && ((end = base.indexOf(END_TOKEN, begin)) > -1)) {\n+        while ((begin = base.indexOf(START_TOKEN, prec + END_TOKEN.length())) > -1\n+            && (end = base.indexOf(END_TOKEN, begin)) > -1) {\n             result.append(base.substring(prec + END_TOKEN.length(), begin));\n             variable = base.substring(begin + START_TOKEN.length(), end);\n \n         if (!line.endsWith(\"\\\\\")) {\n             return false;\n         }\n-        return (countPreceding(line, line.length() - 1, '\\\\') % 2 == 0);\n+        return countPreceding(line, line.length() - 1, '\\\\') % 2 == 0;\n     }\n \n     /**\n             String line = readLine();\n             while (line != null) {\n                 line = line.trim();\n-                if ((line.length() != 0) && (line.charAt(0) != '#')) {\n+                if (line.length() != 0 && line.charAt(0) != '#') {\n                     if (endsWithSlash(line)) {\n                         line = line.substring(0, line.length() - 1);\n                         buffer.append(line);\n             // we also need to rebuild the keysAsListed or else\n             // things get *very* confusing\n             for (int i = 0; i < keysAsListed.size(); i++) {\n-                if (( keysAsListed.get(i)).equals(key)) {\n+                if (keysAsListed.get(i).equals(key)) {\n                     keysAsListed.remove(i);\n                     break;\n                 }\n             if (defaults != null) {\n                 return defaults.getVector(key, defaultValue);\n             } else {\n-                return ((defaultValue == null) ? new Vector<String>() : defaultValue);\n+                return defaultValue == null ? new Vector<String>() : defaultValue;\n             }\n         } else {\n             throw new ClassCastException('\\'' + key + \"' doesn't map to a Vector object\");\n             if (defaults != null) {\n                 return defaults.getList(key, defaultValue);\n             } else {\n-                return ((defaultValue == null) ? new ArrayList<String>() : defaultValue);\n+                return defaultValue == null ? new ArrayList<String>() : defaultValue;\n             }\n         } else {\n             throw new ClassCastException('\\'' + key + \"' doesn't map to a List object\");\n--- a/src/main/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections/MapUtils.java\n                 }\n                 if (answer instanceof Number) {\n                     Number n = (Number) answer;\n-                    return (n.intValue() != 0) ? Boolean.TRUE : Boolean.FALSE;\n+                    return n.intValue() != 0 ? Boolean.TRUE : Boolean.FALSE;\n                 }\n             }\n         }\n             if (childValue instanceof Map && !lineage.contains(childValue)) {\n                 verbosePrintInternal(\n                     out,\n-                    (childKey == null ? \"null\" : childKey),\n+                    childKey == null ? \"null\" : childKey,\n                     (Map<?, ?>) childValue,\n                     lineage,\n                     debug);\n      * @since 3.2\n      */\n     public static boolean isEmpty(Map<?,?> map) {\n-        return (map == null || map.isEmpty());\n+        return map == null || map.isEmpty();\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n \n         /** {@inheritDoc} */\n         public boolean hasNext() {\n-            return (itemCount > 0 || entryIterator.hasNext());\n+            return itemCount > 0 || entryIterator.hasNext();\n         }\n \n         /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n      * @return true if the map is empty\n      */\n     public boolean isEmpty() {\n-        return (nodeCount == 0);\n+        return nodeCount == 0;\n     }\n \n     /**\n      */\n     public boolean containsKey(final Object key) {\n         checkKey(key);\n-        return (lookupKey(key) != null);\n+        return lookupKey(key) != null;\n     }\n \n     /**\n      */\n     public boolean containsValue(final Object value) {\n         checkValue(value);\n-        return (lookupValue(value) != null);\n+        return lookupValue(value) != null;\n     }\n \n     /**\n                 rval = node;\n                 break;\n             } else {\n-                node = (cmp < 0) ? node.getLeft(dataElement) : node.getRight(dataElement);\n+                node = cmp < 0 ? node.getLeft(dataElement) : node.getRight(dataElement);\n             }\n         }\n \n             Node<K, V> parent = node.getParent(dataElement);\n             Node<K, V> child = node;\n \n-            while ((parent != null) && (child == parent.getRight(dataElement))) {\n+            while (parent != null && child == parent.getRight(dataElement)) {\n                 child = parent;\n                 parent = parent.getParent(dataElement);\n             }\n             Node<K, V> parent = node.getParent(dataElement);\n             Node<K, V> child = node;\n \n-            while ((parent != null) && (child == parent.getLeft(dataElement))) {\n+            while (parent != null && child == parent.getLeft(dataElement)) {\n                 child = parent;\n                 parent = parent.getParent(dataElement);\n             }\n         Node<K, V> currentNode = insertedNode;\n         makeRed(currentNode, dataElement);\n \n-        while ((currentNode != null)\n-            && (currentNode != rootNode[dataElement.ordinal()])\n-            && (isRed(currentNode.getParent(dataElement), dataElement))) {\n+        while (currentNode != null\n+            && currentNode != rootNode[dataElement.ordinal()]\n+            && isRed(currentNode.getParent(dataElement), dataElement)) {\n             if (currentNode.isLeftChild(dataElement)) {\n                 Node<K, V> y = getRightChild(getGrandParent(currentNode, dataElement), dataElement);\n \n         for (DataElement dataElement : DataElement.values()) {\n             // if deleted node has both left and children, swap with\n             // the next greater node\n-            if ((deletedNode.getLeft(dataElement) != null) && (deletedNode.getRight(dataElement) != null)) {\n+            if (deletedNode.getLeft(dataElement) != null && deletedNode.getRight(dataElement) != null) {\n                 swapPosition(nextGreater(deletedNode, dataElement), deletedNode, dataElement);\n             }\n \n-            Node<K, V> replacement = ((deletedNode.getLeft(dataElement) != null) ?\n-                    deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement));\n+            Node<K, V> replacement = deletedNode.getLeft(dataElement) != null ?\n+                    deletedNode.getLeft(dataElement) : deletedNode.getRight(dataElement);\n \n             if (replacement != null) {\n                 replacement.setParent(deletedNode.getParent(dataElement), dataElement);\n     private void doRedBlackDeleteFixup(final Node<K, V> replacementNode, final DataElement dataElement) {\n         Node<K, V> currentNode = replacementNode;\n \n-        while ((currentNode != rootNode[dataElement.ordinal()]) && (isBlack(currentNode, dataElement))) {\n+        while (currentNode != rootNode[dataElement.ordinal()] && isBlack(currentNode, dataElement)) {\n             if (currentNode.isLeftChild(dataElement)) {\n                 Node<K, V> siblingNode = getRightChild(getParent(currentNode, dataElement), dataElement);\n \n         Node<K, V> yFormerLeftChild = y.getLeft(dataElement);\n         Node<K, V> yFormerRightChild = y.getRight(dataElement);\n         boolean xWasLeftChild =\n-                (x.getParent(dataElement) != null) && (x == x.getParent(dataElement).getLeft(dataElement));\n+                x.getParent(dataElement) != null && x == x.getParent(dataElement).getLeft(dataElement);\n         boolean yWasLeftChild =\n-                (y.getParent(dataElement) != null) && (y == y.getParent(dataElement).getLeft(dataElement));\n+                y.getParent(dataElement) != null && y == y.getParent(dataElement).getLeft(dataElement);\n \n         // Swap, handling special cases of one being the other's parent.\n         if (x == yFormerParent) { // x was y's parent\n             for (MapIterator<?, ?> it = getMapIterator(dataElement); it.hasNext(); ) {\n                 Object key = it.next();\n                 Object value = it.getValue();\n-                total += (key.hashCode() ^ value.hashCode());\n+                total += key.hashCode() ^ value.hashCode();\n             }\n         }\n         return total;\n         @Override\n         public boolean contains(final Object obj) {\n             checkNonNullComparable(obj, KEY);\n-            return (lookupKey(obj) != null);\n+            return lookupKey(obj) != null;\n         }\n \n         @Override\n         @Override\n         public boolean contains(final Object obj) {\n             checkNonNullComparable(obj, VALUE);\n-            return (lookupValue(obj) != null);\n+            return lookupValue(obj) != null;\n         }\n \n         @Override\n--- a/src/main/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n      */\n     protected BlockingBuffer(Buffer<E> buffer, long timeoutMillis) {\n         super(buffer);\n-        this.timeout = (timeoutMillis < 0 ? 0 : timeoutMillis);\n+        this.timeout = timeoutMillis < 0 ? 0 : timeoutMillis;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n \n     public boolean isFull() {\n         // size() is synchronized\n-        return (size() == maxSize());\n+        return size() == maxSize();\n     }\n \n     public int maxSize() {\n--- a/src/main/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n             elements[i] = (E) in.readObject();\n         }\n         start = 0;\n-        full = (size == maxElements);\n+        full = size == maxElements;\n         if (full) {\n             end = 0;\n         } else {\n         if (end < start) {\n             size = maxElements - start + end;\n         } else if (end == start) {\n-            size = (full ? maxElements : 0);\n+            size = full ? maxElements : 0;\n         } else {\n             size = end - start;\n         }\n             private boolean isFirst = full;\n \n             public boolean hasNext() {\n-                return isFirst || (index != end);\n+                return isFirst || index != end;\n             }\n \n             public E next() {\n--- a/src/main/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n         final E element = elements[index];\n         int hole = index;\n \n-        while ((hole * 2) <= size) {\n+        while (hole * 2 <= size) {\n             int child = hole * 2;\n \n             // if we have a right child and that child can not be percolated\n         final E element = elements[index];\n         int hole = index;\n \n-        while ((hole * 2) <= size) {\n+        while (hole * 2 <= size) {\n             int child = hole * 2;\n \n             // if we have a right child and that child can not be percolated\n--- a/src/main/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n      */\n     @Override\n     public boolean isEmpty() {\n-        return (size() == 0);\n+        return size() == 0;\n     }\n \n     /**\n \n         if (size() + 1 >= buffer.length) {\n             // copy contents to a new buffer array\n-            E[] tmp = (E[]) new Object[((buffer.length - 1) * 2) + 1];\n+            E[] tmp = (E[]) new Object[(buffer.length - 1) * 2 + 1];\n             int j = 0;\n             // move head to element zero in the new array\n             for (int i = head; i != tail;) {\n--- a/src/main/java/org/apache/commons/collections/comparators/ComparableComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/ComparableComparator.java\n      */\n     @Override\n     public boolean equals(Object object) {\n-        return (this == object) || \n-               ((null != object) && (object.getClass().equals(this.getClass())));\n+        return this == object || \n+               null != object && object.getClass().equals(this.getClass());\n     }\n \n }\n--- a/src/main/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/ComparatorChain.java\n         }\n         if (object.getClass().equals(this.getClass())) {\n             ComparatorChain<?> chain = (ComparatorChain<?>) object;\n-            return ((null == orderingBits ? null == chain.orderingBits : orderingBits\n+            return (null == orderingBits ? null == chain.orderingBits : orderingBits\n                     .equals(chain.orderingBits)) && (null == comparatorChain ? null == chain.comparatorChain\n-                    : comparatorChain.equals(chain.comparatorChain)));\n+                    : comparatorChain.equals(chain.comparatorChain));\n         }\n         return false;\n     }\n--- a/src/main/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n     public boolean add(T obj) {\n         checkLocked();\n         Integer position = map.put(obj, new Integer(counter++));\n-        return (position == null);\n+        return position == null;\n     }\n \n     /**\n             throw new IllegalArgumentException(existingObj + \" not known to \" + this);\n         }\n         Integer result = map.put(newObj, position);\n-        return (result == null);\n+        return result == null;\n     }\n \n     // Comparator methods\n             case AFTER:\n                 return position1 == null ? position2 == null ? 0 : 1 : -1;\n             case EXCEPTION:\n-                Object unknownObj = (position1 == null) ? obj1 : obj2;\n+                Object unknownObj = position1 == null ? obj1 : obj2;\n                 throw new IllegalArgumentException(\"Attempting to compare unknown object \"\n                         + unknownObj);\n             default: //could be null\n         }\n         if (object.getClass().equals(this.getClass())) {\n             FixedOrderComparator<?> comp = (FixedOrderComparator<?>) object;\n-            return (null == map ? null == comp.map : map.equals(comp.map) &&\n+            return null == map ? null == comp.map : map.equals(comp.map) &&\n                     null == unknownObjectBehavior ? null == comp.unknownObjectBehavior :\n                         unknownObjectBehavior == comp.unknownObjectBehavior &&\n                     counter == comp.counter &&\n                     isLocked == comp.isLocked &&\n-                    unknownObjectBehavior == comp.unknownObjectBehavior);\n+                    unknownObjectBehavior == comp.unknownObjectBehavior;\n         }\n         return false;\n     }\n--- a/src/main/java/org/apache/commons/collections/comparators/NullComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/NullComparator.java\n      **/\n     public int compare(E o1, E o2) {\n         if(o1 == o2) { return 0; }\n-        if(o1 == null) { return (this.nullsAreHigh ? 1 : -1); }\n-        if(o2 == null) { return (this.nullsAreHigh ? -1 : 1); }\n+        if(o1 == null) { return this.nullsAreHigh ? 1 : -1; }\n+        if(o2 == null) { return this.nullsAreHigh ? -1 : 1; }\n         return this.nonNullComparator.compare(o1, o2);\n     }\n \n \n         NullComparator<?> other = (NullComparator<?>) obj;\n \n-        return ((this.nullsAreHigh == other.nullsAreHigh) &&\n-                (this.nonNullComparator.equals(other.nonNullComparator)));\n+        return this.nullsAreHigh == other.nullsAreHigh &&\n+                this.nonNullComparator.equals(other.nonNullComparator);\n     }\n \n }\n--- a/src/main/java/org/apache/commons/collections/comparators/TransformingComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/TransformingComparator.java\n         }\n         if (object.getClass().equals(this.getClass())) {\n             TransformingComparator<?> comp = (TransformingComparator<?>) object;\n-            return (null == decorated ? null == comp.decorated : decorated.equals(comp.decorated) &&\n-                    null == transformer ? null == comp.transformer : transformer.equals(comp.transformer));\n+            return null == decorated ? null == comp.decorated : decorated.equals(comp.decorated) &&\n+                    null == transformer ? null == comp.transformer : transformer.equals(comp.transformer);\n         }\n         return false;\n     }\n--- a/src/main/java/org/apache/commons/collections/comparators/sequence/SequencesComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/sequence/SequencesComparator.java\n      */\n     private Snake buildSnake(int start, int diag, int end1, int end2) {\n         int end = start;\n-        while (((end - diag) < end2)\n-                && (end < end1)\n+        while (end - diag < end2\n+                && end < end1\n                 && sequence1.get(end).equals(sequence2.get(end - diag))) {\n             ++end;\n         }\n         // Initialisations\n         int m = end1 - start1;\n         int n = end2 - start2;\n-        if ((m == 0) || (n == 0)) {\n+        if (m == 0 || n == 0) {\n             return null;\n         }\n \n         int delta  = m - n;\n         int sum    = n + m;\n-        int offset = ((sum % 2 == 0) ? sum : (sum + 1)) / 2;\n+        int offset = (sum % 2 == 0 ? sum : sum + 1) / 2;\n         vDown[1+offset] = start1;\n         vUp[1+offset]   = end1 + 1;\n \n                 // First step\n \n                 int i = k + offset;\n-                if ((k == -d) || ((k != d) && (vDown[i-1] < vDown[i+1]))) {\n+                if (k == -d || k != d && vDown[i-1] < vDown[i+1]) {\n                     vDown[i] = vDown[i+1];\n                 } else {\n                     vDown[i] = vDown[i-1] + 1;\n                 int x = vDown[i];\n                 int y = x - start1 + start2 - k;\n \n-                while ((x < end1) && (y < end2) && (sequence1.get(x).equals(sequence2.get(y)))) {\n+                while (x < end1 && y < end2 && sequence1.get(x).equals(sequence2.get(y))) {\n                     vDown[i] = ++x;\n                     ++y;\n                 }\n                 // Second step\n-                if (((delta % 2) != 0 ) && ((delta - d) <= k) && (k <= (delta + d))) {\n+                if (delta % 2 != 0 && delta - d <= k && k <= delta + d) {\n                     if (vUp[i-delta] <= vDown[i]) {\n                         return buildSnake(vUp[i-delta], k + start1 - start2, end1, end2);\n                     }\n             }\n \n             // Up\n-            for (int k = (delta - d); k <= (delta + d); k += 2) {\n+            for (int k = delta - d; k <= delta + d; k += 2) {\n                 // First step\n                 int i = k + offset - delta;\n-                if ((k == (delta - d))\n-                        || ((k != (delta + d)) && (vUp[i+1] <= vUp[i-1]))) {\n+                if (k == delta - d\n+                        || k != delta + d && vUp[i+1] <= vUp[i-1]) {\n                     vUp[i] = vUp[i+1] - 1;\n                 } else {\n                     vUp[i] = vUp[i-1];\n \n                 int x = vUp[i] - 1;\n                 int y = x - start1 + start2 - k;\n-                while ((x >= start1) && (y >= start2)\n+                while (x >= start1 && y >= start2\n                         && sequence1.get(x).equals(sequence2.get(y))) {\n                     vUp[i] = x--;\n                     y--;\n                 }\n                 // Second step\n-                if (((delta % 2) == 0) && (-d <= k) && (k <= d) ) {\n+                if (delta % 2 == 0 && -d <= k && k <= d ) {\n                     if (vUp[i] <= vDown[i + delta]) {\n                         return buildSnake(vUp[i], k + start1 - start2, end1, end2);\n                     }\n \n         Snake middle = getMiddleSnake(start1, end1, start2, end2);\n \n-        if ((middle == null)\n-                || ((middle.getStart() == end1) && (middle.getDiag() == (end1 - end2)))\n-                || ((middle.getEnd() == start1) && (middle.getDiag() == (start1 - start2)))) {\n+        if (middle == null\n+                || middle.getStart() == end1 && middle.getDiag() == end1 - end2\n+                || middle.getEnd() == start1 && middle.getDiag() == start1 - start2) {\n \n             int i = start1;\n             int j = start2;\n-            while ((i < end1) || (j < end2)) {\n-                if ((i < end1) && (j < end2) && sequence1.get(i).equals(sequence2.get(j))) {\n+            while (i < end1 || j < end2) {\n+                if (i < end1 && j < end2 && sequence1.get(i).equals(sequence2.get(j))) {\n                     script.append(new KeepCommand<T>(sequence1.get(i)));\n                     ++i;\n                     ++j;\n                 } else {\n-                    if ((end1 - start1) > (end2 - start2)) {\n+                    if (end1 - start1 > end2 - start2) {\n                         script.append(new DeleteCommand<T>(sequence1.get(i)));\n                         ++i;\n                     } else {\n--- a/src/main/java/org/apache/commons/collections/functors/AndPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/AndPredicate.java\n      * @return true if both decorated predicates return true\n      */\n     public boolean evaluate(T object) {\n-       return (iPredicate1.evaluate(object) && iPredicate2.evaluate(object));\n+       return iPredicate1.evaluate(object) && iPredicate2.evaluate(object);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/functors/ComparatorPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ComparatorPredicate.java\n         int comparison = comparator.compare(object, target);\n         switch (criterion) {\n         case EQUAL:\n-            result = (comparison == 0);\n+            result = comparison == 0;\n             break;\n         case GREATER:\n-            result = (comparison > 0);\n+            result = comparison > 0;\n             break;\n         case LESS:\n-            result = (comparison < 0);\n+            result = comparison < 0;\n             break;\n         case GREATER_OR_EQUAL:\n-            result = (comparison >= 0);\n+            result = comparison >= 0;\n             break;\n         case LESS_OR_EQUAL:\n-            result = (comparison <= 0);\n+            result = comparison <= 0;\n             break;\n         default:\n             throw new IllegalStateException(\"The current criterion '\" + criterion + \"' is invalid.\");\n--- a/src/main/java/org/apache/commons/collections/functors/IdentityPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/IdentityPredicate.java\n      * @return true if input is the same object as the stored value\n      */\n     public boolean evaluate(T object) {\n-        return (iValue == object);\n+        return iValue == object;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n      * @return true if input is of stored type\n      */\n     public boolean evaluate(Object object) {\n-        return (iType.isInstance(object));\n+        return iType.isInstance(object);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/functors/InstantiateFactory.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InstantiateFactory.java\n         if (classToInstantiate == null) {\n             throw new IllegalArgumentException(\"Class to instantiate must not be null\");\n         }\n-        if (((paramTypes == null) && (args != null))\n-            || ((paramTypes != null) && (args == null))\n-            || ((paramTypes != null) && (args != null) && (paramTypes.length != args.length))) {\n+        if (paramTypes == null && args != null\n+            || paramTypes != null && args == null\n+            || paramTypes != null && args != null && paramTypes.length != args.length) {\n             throw new IllegalArgumentException(\"Parameter types must match the arguments\");\n         }\n \n--- a/src/main/java/org/apache/commons/collections/functors/NotNullPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NotNullPredicate.java\n      * @return true if not null\n      */\n     public boolean evaluate(T object) {\n-        return (object != null);\n+        return object != null;\n     }\n \n     private Object readResolve() {\n--- a/src/main/java/org/apache/commons/collections/functors/NotPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NotPredicate.java\n      * @return true if predicate returns false\n      */\n     public boolean evaluate(T object) {\n-        return !(iPredicate.evaluate(object));\n+        return !iPredicate.evaluate(object);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/functors/NullPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullPredicate.java\n      * @return true if input is null\n      */\n     public boolean evaluate(T object) {\n-        return (object == null);\n+        return object == null;\n     }\n \n     private Object readResolve() {\n--- a/src/main/java/org/apache/commons/collections/functors/OrPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/OrPredicate.java\n      * @return true if either decorated predicate returns true\n      */\n     public boolean evaluate(T object) {\n-       return (iPredicate1.evaluate(object) || iPredicate2.evaluate(object));\n+       return iPredicate1.evaluate(object) || iPredicate2.evaluate(object);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/iterators/ArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ArrayIterator.java\n      * @return true if there is a next element to return\n      */\n     public boolean hasNext() {\n-        return (index < endIndex);\n+        return index < endIndex;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n      * @return true if there is a previous element to return\n      */\n     public boolean hasPrevious() {\n-        return (this.index > this.startIndex);\n+        return this.index > this.startIndex;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/iterators/FilterListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/FilterListIterator.java\n     }\n \n     public int previousIndex() {\n-        return (nextIndex-1);\n+        return nextIndex-1;\n     }\n \n     /** Not supported. */\n--- a/src/main/java/org/apache/commons/collections/iterators/LoopingIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/LoopingIterator.java\n      * @return <code>true</code> if there are more elements\n      */\n     public boolean hasNext() {\n-        return (collection.size() > 0);\n+        return collection.size() > 0;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java\n      * @return true if there is a next element to return\n      */\n     public boolean hasNext() {\n-        return (this.index < this.endIndex);\n+        return this.index < this.endIndex;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n      * @return true if there is a previous element to return\n      */\n     public boolean hasPrevious() {\n-        return (this.index > this.startIndex);\n+        return this.index > this.startIndex;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/iterators/SingletonIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/SingletonIterator.java\n      * @return true if the single object hasn't been returned yet\n      */\n     public boolean hasNext() {\n-        return (beforeFirst && !removed);\n+        return beforeFirst && !removed;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n      * @return 0 or 1 depending on current state. \n      */\n     public int nextIndex() {\n-        return (beforeFirst ? 0 : 1);\n+        return beforeFirst ? 0 : 1;\n     }\n \n     /**\n      * @return 0 or -1 depending on current state. \n      */\n     public int previousIndex() {\n-        return (beforeFirst ? -1 : 0);\n+        return beforeFirst ? -1 : 0;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n     }\n \n     public boolean isEmpty() {\n-        return (size() == 0);\n+        return size() == 0;\n     }\n \n     public E get(int index) {\n      * @return true if equal\n      */\n     protected boolean isEqualValue(Object value1, Object value2) {\n-        return (value1 == value2 || (value1 == null ? false : value1.equals(value2)));\n+        return value1 == value2 || (value1 == null ? false : value1.equals(value2));\n     }\n \n     /**\n         }\n         // Search the list and get the node\n         Node<E> node;\n-        if (index < (size / 2)) {\n+        if (index < size / 2) {\n             // Search forwards\n             node = header.next;\n             for (int currentIndex = 0; currentIndex < index; currentIndex++) {\n \n         @Override\n         public boolean hasNext() {\n-            return (nextIndex() < sub.size);\n+            return nextIndex() < sub.size;\n         }\n \n         @Override\n         public boolean hasPrevious() {\n-            return (previousIndex() >= 0);\n+            return previousIndex() >= 0;\n         }\n \n         @Override\n         public int nextIndex() {\n-            return (super.nextIndex() - sub.offset);\n+            return super.nextIndex() - sub.offset;\n         }\n \n         @Override\n--- a/src/main/java/org/apache/commons/collections/list/CursorableLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/CursorableLinkedList.java\n \n         @Override\n         public boolean hasNext() {\n-            return (nextIndex() < sub.size);\n+            return nextIndex() < sub.size;\n         }\n \n         @Override\n         public boolean hasPrevious() {\n-            return (previousIndex() >= 0);\n+            return previousIndex() >= 0;\n         }\n \n         @Override\n         public int nextIndex() {\n-            return (super.nextIndex() - sub.offset);\n+            return super.nextIndex() - sub.offset;\n         }\n \n         @Override\n--- a/src/main/java/org/apache/commons/collections/list/GrowthList.java\n+++ b/src/main/java/org/apache/commons/collections/list/GrowthList.java\n             decorated().addAll(Collections.<E>nCopies(index - size, null));\n             result = true;\n         }\n-        return (decorated().addAll(index, coll) | result);\n+        return decorated().addAll(index, coll) | result;\n     }\n \n     //-----------------------------------------------------------------------\n     public E set(int index, E element) {\n         int size = decorated().size();\n         if (index >= size) {\n-            decorated().addAll(Collections.<E>nCopies((index - size) + 1, null));\n+            decorated().addAll(Collections.<E>nCopies(index - size + 1, null));\n         }\n         return decorated().set(index, element);\n     }\n--- a/src/main/java/org/apache/commons/collections/list/SetUniqueList.java\n+++ b/src/main/java/org/apache/commons/collections/list/SetUniqueList.java\n         add(size(), object);\n \n         // compares sizes to detect if collection changed\n-        return (sizeBefore != size());\n+        return sizeBefore != size();\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/list/TreeList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TreeList.java\n      */\n     @Override\n     public boolean contains(Object object) {\n-        return (indexOf(object) >= 0);\n+        return indexOf(object) >= 0;\n     }\n \n     /**\n                 return this;\n             }\n \n-            AVLNode<E> nextNode = ((indexRelativeToMe < 0) ? getLeftSubTree() : getRightSubTree());\n+            AVLNode<E> nextNode = indexRelativeToMe < 0 ? getLeftSubTree() : getRightSubTree();\n             if (nextNode == null) {\n                 return null;\n             }\n          * Gets the left node, returning null if its a faedelung.\n          */\n         private AVLNode<E> getLeftSubTree() {\n-            return (leftIsPrevious ? null : left);\n+            return leftIsPrevious ? null : left;\n         }\n \n         /**\n          * Gets the right node, returning null if its a faedelung.\n          */\n         private AVLNode<E> getRightSubTree() {\n-            return (rightIsNext ? null : right);\n+            return rightIsNext ? null : right;\n         }\n \n         /**\n          * @return the rightmost child (greatest index)\n          */\n         private AVLNode<E> max() {\n-            return (getRightSubTree() == null) ? this : right.max();\n+            return getRightSubTree() == null ? this : right.max();\n         }\n \n         /**\n          * @return the leftmost child (smallest index)\n          */\n         private AVLNode<E> min() {\n-            return (getLeftSubTree() == null) ? this : left.min();\n+            return getLeftSubTree() == null ? this : left.min();\n         }\n \n         /**\n          * Returns the height of the node or -1 if the node is null.\n          */\n         private int getHeight(AVLNode<E> node) {\n-            return (node == null ? -1 : node.height);\n+            return node == null ? -1 : node.height;\n         }\n \n         /**\n          * @param previous  the previous node in the linked list\n          */\n         private void setLeft(AVLNode<E> node, AVLNode<E> previous) {\n-            leftIsPrevious = (node == null);\n-            left = (leftIsPrevious ? previous : node);\n+            leftIsPrevious = node == null;\n+            left = leftIsPrevious ? previous : node;\n             recalcHeight();\n         }\n \n          * @param next  the next node in the linked list\n          */\n         private void setRight(AVLNode<E> node, AVLNode<E> next) {\n-            rightIsNext = (node == null);\n-            right = (rightIsNext ? next : node);\n+            rightIsNext = node == null;\n+            right = rightIsNext ? next : node;\n             recalcHeight();\n         }\n \n             super();\n             this.parent = parent;\n             this.expectedModCount = parent.modCount;\n-            this.next = (parent.root == null ? null : parent.root.get(fromIndex));\n+            this.next = parent.root == null ? null : parent.root.get(fromIndex);\n             this.nextIndex = fromIndex;\n             this.currentIndex = -1;\n         }\n         }\n \n         public boolean hasNext() {\n-            return (nextIndex < parent.size());\n+            return nextIndex < parent.size();\n         }\n \n         public E next() {\n         }\n \n         public boolean hasPrevious() {\n-            return (nextIndex > 0);\n+            return nextIndex > 0;\n         }\n \n         public E previous() {\n--- a/src/main/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractHashedMap.java\n      */\n     @Override\n     public boolean isEmpty() {\n-        return (size == 0);\n+        return size == 0;\n     }\n \n     //-----------------------------------------------------------------------\n      * @return the converted key\n      */\n     protected Object convertKey(Object key) {\n-        return (key == null ? NULL : key);\n+        return key == null ? NULL : key;\n     }\n \n     /**\n         // same as JDK 1.4\n         int h = key.hashCode();\n         h += ~(h << 9);\n-        h ^=  (h >>> 14);\n-        h +=  (h << 4);\n-        h ^=  (h >>> 10);\n+        h ^=  h >>> 14;\n+        h +=  h << 4;\n+        h ^=  h >>> 10;\n         return h;\n     }\n \n      * @return true if equal\n      */\n     protected boolean isEqualKey(Object key1, Object key2) {\n-        return (key1 == key2 || key1.equals(key2));\n+        return key1 == key2 || key1.equals(key2);\n     }\n \n     /**\n      * @return true if equal\n      */\n     protected boolean isEqualValue(Object value1, Object value2) {\n-        return (value1 == value2 || value1.equals(value2));\n+        return value1 == value2 || value1.equals(value2);\n     }\n \n     /**\n      * @return the bucket index\n      */\n     protected int hashIndex(int hashCode, int dataSize) {\n-        return hashCode & (dataSize - 1);\n+        return hashCode & dataSize - 1;\n     }\n \n     //-----------------------------------------------------------------------\n             if (entry instanceof Map.Entry) {\n                 Map.Entry<?, ?> e = (Map.Entry<?, ?>) entry;\n                 Entry<K, V> match = parent.getEntry(e.getKey());\n-                return (match != null && match.equals(e));\n+                return match != null && match.equals(e);\n             }\n             return false;\n         }\n         }\n \n         public boolean hasNext() {\n-            return (next != null);\n+            return next != null;\n         }\n \n         protected HashEntry<K, V> nextEntry() {\n--- a/src/main/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n      */\n     public K nextKey(Object key) {\n         LinkEntry<K, V> entry = getEntry(key);\n-        return (entry == null || entry.after == header ? null : entry.after.getKey());\n+        return entry == null || entry.after == header ? null : entry.after.getKey();\n     }\n \n     @Override\n      */\n     public K previousKey(Object key) {\n         LinkEntry<K, V> entry = getEntry(key);\n-        return (entry == null || entry.before == header ? null : entry.before.getKey());\n+        return entry == null || entry.before == header ? null : entry.before.getKey();\n     }\n \n     //-----------------------------------------------------------------------    \n             throw new IndexOutOfBoundsException(\"Index \" + index + \" is invalid for size \" + size);\n         }\n         LinkEntry<K, V> entry;\n-        if (index < (size / 2)) {\n+        if (index < size / 2) {\n             // Search forwards\n             entry = header.after;\n             for (int currentIndex = 0; currentIndex < index; currentIndex++) {\n         }\n \n         public boolean hasNext() {\n-            return (next != parent.header);\n+            return next != parent.header;\n         }\n \n         public boolean hasPrevious() {\n-            return (next.before != parent.header);\n+            return next.before != parent.header;\n         }\n \n         protected LinkEntry<K, V> nextEntry() {\n--- a/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n         if (entry == null) {\n             return false;\n         }\n-        return (entry.getValue() != null);\n+        return entry.getValue() != null;\n     }\n \n     /**\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     protected boolean isEqualKey(Object key1, Object key2) {\n-        key2 = (keyType == ReferenceStrength.HARD ? key2 : ((Reference<K>) key2).get());\n-        return (key1 == key2 || key1.equals(key2));\n+        key2 = keyType == ReferenceStrength.HARD ? key2 : ((Reference<K>) key2).get();\n+        return key1 == key2 || key1.equals(key2);\n     }\n \n     /**\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public K getKey() {\n-            return (K) ((parent.keyType == ReferenceStrength.HARD) ? key : ((Reference<K>) key).get());\n+            return (K) (parent.keyType == ReferenceStrength.HARD ? key : ((Reference<K>) key).get());\n         }\n \n         /**\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public V getValue() {\n-            return (V) ((parent.valueType == ReferenceStrength.HARD) ? value : ((Reference<V>) value).get());\n+            return (V) (parent.valueType == ReferenceStrength.HARD ? value : ((Reference<V>) value).get());\n         }\n \n         /**\n             Map.Entry<?, ?> entry = (Map.Entry<?, ?>)obj;\n             Object entryKey = entry.getKey();  // convert to hard reference\n             Object entryValue = entry.getValue();  // convert to hard reference\n-            if ((entryKey == null) || (entryValue == null)) {\n+            if (entryKey == null || entryValue == null) {\n                 return false;\n             }\n             // compare using map methods, aiding identity subclass\n          * @return true or false\n          */\n         boolean purge(Reference<?> ref) {\n-            boolean r = (parent.keyType != ReferenceStrength.HARD) && (key == ref);\n-            r = r || ((parent.valueType != ReferenceStrength.HARD) && (value == ref));\n+            boolean r = parent.keyType != ReferenceStrength.HARD && key == ref;\n+            r = r || parent.valueType != ReferenceStrength.HARD && value == ref;\n             if (r) {\n                 if (parent.keyType != ReferenceStrength.HARD) {\n                     ((Reference<?>) key).clear();\n         public ReferenceBaseIterator(AbstractReferenceMap<K, V> parent) {\n             super();\n             this.parent = parent;\n-            index = (parent.size() != 0 ? parent.data.length : 0);\n+            index = parent.size() != 0 ? parent.data.length : 0;\n             // have to do this here!  size() invocation above\n             // may have altered the modCount.\n             expectedModCount = parent.modCount;\n             while (nextNull()) {\n                 ReferenceEntry<K, V> e = entry;\n                 int i = index;\n-                while ((e == null) && (i > 0)) {\n+                while (e == null && i > 0) {\n                     i--;\n                     e = (ReferenceEntry<K, V>) parent.data[i];\n                 }\n         }\n \n         private boolean nextNull() {\n-            return (nextKey == null) || (nextValue == null);\n+            return nextKey == null || nextValue == null;\n         }\n \n         protected ReferenceEntry<K, V> nextEntry() {\n--- a/src/main/java/org/apache/commons/collections/map/CompositeMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/CompositeMap.java\n     public boolean equals(Object obj) {\n         if (obj instanceof Map) {\n             Map<?, ?> map = (Map<?, ?>) obj;\n-            return (this.entrySet().equals(map.entrySet()));\n+            return this.entrySet().equals(map.entrySet());\n         }\n         return false;\n     }\n--- a/src/main/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/main/java/org/apache/commons/collections/map/Flat3Map.java\n      * @return true if the map is currently size zero\n      */\n     public boolean isEmpty() {\n-        return (size() == 0);\n+        return size() == 0;\n     }\n \n     //-----------------------------------------------------------------------\n                 delegateMap.put(key, value);\n                 return null;\n             case 2:\n-                hash3 = (key == null ? 0 : key.hashCode());\n+                hash3 = key == null ? 0 : key.hashCode();\n                 key3 = key;\n                 value3 = value;\n                 break;\n             case 1:\n-                hash2 = (key == null ? 0 : key.hashCode());\n+                hash2 = key == null ? 0 : key.hashCode();\n                 key2 = key;\n                 value2 = value;\n                 break;\n             case 0:\n-                hash1 = (key == null ? 0 : key.hashCode());\n+                hash1 = key == null ? 0 : key.hashCode();\n                 key1 = key;\n                 value1 = value;\n                 break;\n         }\n \n         public boolean hasNext() {\n-            return (nextIndex < parent.size);\n+            return nextIndex < parent.size;\n         }\n \n         public K next() {\n         }\n \n         public boolean hasNext() {\n-            return (nextIndex < parent.size);\n+            return nextIndex < parent.size;\n         }\n \n         public Map.Entry<K, V> nextEntry() {\n         int total = 0;\n         switch (size) {  // drop through\n             case 3:\n-                total += (hash3 ^ (value3 == null ? 0 : value3.hashCode()));\n+                total += hash3 ^ (value3 == null ? 0 : value3.hashCode());\n             case 2:\n-                total += (hash2 ^ (value2 == null ? 0 : value2.hashCode()));\n+                total += hash2 ^ (value2 == null ? 0 : value2.hashCode());\n             case 1:\n-                total += (hash1 ^ (value1 == null ? 0 : value1.hashCode()));\n+                total += hash1 ^ (value1 == null ? 0 : value1.hashCode());\n         }\n         return total;\n     }\n         buf.append('{');\n         switch (size) {  // drop through\n             case 3:\n-                buf.append((key3 == this ? \"(this Map)\" : key3));\n+                buf.append(key3 == this ? \"(this Map)\" : key3);\n                 buf.append('=');\n-                buf.append((value3 == this ? \"(this Map)\" : value3));\n+                buf.append(value3 == this ? \"(this Map)\" : value3);\n                 buf.append(',');\n             case 2:\n-                buf.append((key2 == this ? \"(this Map)\" : key2));\n+                buf.append(key2 == this ? \"(this Map)\" : key2);\n                 buf.append('=');\n-                buf.append((value2 == this ? \"(this Map)\" : value2));\n+                buf.append(value2 == this ? \"(this Map)\" : value2);\n                 buf.append(',');\n             case 1:\n-                buf.append((key1 == this ? \"(this Map)\" : key1));\n+                buf.append(key1 == this ? \"(this Map)\" : key1);\n                 buf.append('=');\n-                buf.append((value1 == this ? \"(this Map)\" : value1));\n+                buf.append(value1 == this ? \"(this Map)\" : value1);\n         }\n         buf.append('}');\n         return buf.toString();\n--- a/src/main/java/org/apache/commons/collections/map/IdentityMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/IdentityMap.java\n      */\n     @Override\n     protected boolean isEqualKey(Object key1, Object key2) {\n-        return (key1 == key2);\n+        return key1 == key2;\n     }\n \n     /**\n      */\n     @Override\n     protected boolean isEqualValue(Object value1, Object value2) {\n-        return (value1 == value2);\n+        return value1 == value2;\n     }\n \n     /**\n             }\n             Map.Entry<?, ?> other = (Map.Entry<?, ?>) obj;\n             return\n-                (getKey() == other.getKey()) &&\n-                (getValue() == other.getValue());\n+                getKey() == other.getKey() &&\n+                getValue() == other.getValue();\n         }\n \n         @Override\n--- a/src/main/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LRUMap.java\n      * @since 3.1\n      */\n     public LRUMap(int maxSize, float loadFactor, boolean scanUntilRemovable) {\n-        super((maxSize < 1 ? DEFAULT_CAPACITY : maxSize), loadFactor);\n+        super(maxSize < 1 ? DEFAULT_CAPACITY : maxSize, loadFactor);\n         if (maxSize < 1) {\n             throw new IllegalArgumentException(\"LRUMap max size must be greater than 0\");\n         }\n      * @return <code>true</code> if the map is full\n      */\n     public boolean isFull() {\n-        return (size >= maxSize);\n+        return size >= maxSize;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/map/MultiKeyMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiKeyMap.java\n             h ^= key2.hashCode();\n         }\n         h += ~(h << 9);\n-        h ^=  (h >>> 14);\n-        h +=  (h << 4);\n-        h ^=  (h >>> 10);\n+        h ^=  h >>> 14;\n+        h +=  h << 4;\n+        h ^=  h >>> 10;\n         return h;\n     }\n \n             h ^= key3.hashCode();\n         }\n         h += ~(h << 9);\n-        h ^=  (h >>> 14);\n-        h +=  (h << 4);\n-        h ^=  (h >>> 10);\n+        h ^=  h >>> 14;\n+        h +=  h << 4;\n+        h ^=  h >>> 10;\n         return h;\n     }\n \n             h ^= key4.hashCode();\n         }\n         h += ~(h << 9);\n-        h ^=  (h >>> 14);\n-        h +=  (h << 4);\n-        h ^=  (h >>> 10);\n+        h ^=  h >>> 14;\n+        h +=  h << 4;\n+        h ^=  h >>> 10;\n         return h;\n     }\n \n             h ^= key5.hashCode();\n         }\n         h += ~(h << 9);\n-        h ^=  (h >>> 14);\n-        h +=  (h << 4);\n-        h ^=  (h >>> 10);\n+        h ^=  h >>> 14;\n+        h +=  h << 4;\n+        h ^=  h >>> 10;\n         return h;\n     }\n \n--- a/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n         } else {\n             result = coll.add((V) value);\n         }\n-        return (result ? value : null);\n+        return result ? value : null;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/collections/map/PassiveExpiringMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/PassiveExpiringMap.java\n     private boolean isExpired(long now, Long expirationTimeObject) {\n         if (expirationTimeObject != null) {\n             long expirationTime = expirationTimeObject.longValue();\n-            return (expirationTime >= 0 && now >= expirationTime);\n+            return expirationTime >= 0 && now >= expirationTime;\n         }\n         return false;\n     }\n--- a/src/main/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/PredicatedMap.java\n      */\n     @Override\n     protected boolean isSetValueChecking() {\n-        return (valuePredicate != null);\n+        return valuePredicate != null;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections/map/SingletonMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/SingletonMap.java\n      * @return true if the map contains the key\n      */\n     public boolean containsKey(Object key) {\n-        return (isEqualKey(key));\n+        return isEqualKey(key);\n     }\n \n     /**\n      * @return true if the map contains the key\n      */\n     public boolean containsValue(Object value) {\n-        return (isEqualValue(value));\n+        return isEqualValue(value);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return true if equal\n      */\n     protected boolean isEqualKey(Object key) {\n-        return (key == null ? getKey() == null : key.equals(getKey()));\n+        return key == null ? getKey() == null : key.equals(getKey());\n     }\n \n     /**\n      * @return true if equal\n      */\n     protected boolean isEqualValue(Object value) {\n-        return (value == null ? getValue() == null : value.equals(getValue()));\n+        return value == null ? getValue() == null : value.equals(getValue());\n     }\n \n     //-----------------------------------------------------------------------\n         }\n \n         public boolean hasPrevious() {\n-            return (hasNext == false);\n+            return hasNext == false;\n         }\n \n         public K previous() {\n     public String toString() {\n         return new StringBuilder(128)\n             .append('{')\n-            .append((getKey() == this ? \"(this Map)\" : getKey()))\n+            .append(getKey() == this ? \"(this Map)\" : getKey())\n             .append('=')\n-            .append((getValue() == this ? \"(this Map)\" : getValue()))\n+            .append(getValue() == this ? \"(this Map)\" : getValue())\n             .append('}')\n             .toString();\n     }\n--- a/src/main/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/TransformedMap.java\n      */\n     @Override\n     protected boolean isSetValueChecking() {\n-        return (valueTransformer != null);\n+        return valueTransformer != null;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/apache/commons/collections/set/CompositeSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/CompositeSet.java\n     public int hashCode() {\n         int code = 0;\n         for (E e : this) {\n-            code += (e == null ? 0 : e.hashCode());\n+            code += e == null ? 0 : e.hashCode();\n         }\n         return code;\n     }\n--- a/src/main/java/org/apache/commons/collections/set/MapBackedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/MapBackedSet.java\n     public boolean add(E obj) {\n         int size = map.size();\n         map.put(obj, dummyValue);\n-        return (map.size() != size);\n+        return map.size() != size;\n     }\n \n     public boolean addAll(Collection<? extends E> coll) {\n         for (E e : coll) {\n             map.put(e, dummyValue);\n         }\n-        return (map.size() != size);\n+        return map.size() != size;\n     }\n \n     public boolean remove(Object obj) {\n         int size = map.size();\n         map.remove(obj);\n-        return (map.size() != size);\n+        return map.size() != size;\n     }\n \n     public boolean removeAll(Collection<?> coll) {\n--- a/src/main/java/org/apache/commons/collections/trie/AbstractKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/AbstractKeyAnalyzer.java\n     @SuppressWarnings(\"unchecked\")\n     public int compare(K o1, K o2) {\n         if (o1 == null) {\n-            return (o2 == null) ? 0 : -1;\n+            return o2 == null ? 0 : -1;\n         } else if (o2 == null) {\n-            return (o1 == null) ? 0 : 1;\n+            return o1 == null ? 0 : 1;\n         }\n         \n         return ((Comparable<K>)o1).compareTo(o2);\n--- a/src/main/java/org/apache/commons/collections/trie/AbstractTrie.java\n+++ b/src/main/java/org/apache/commons/collections/trie/AbstractTrie.java\n      */\n     final boolean compareKeys(K key, K other) {\n         if (key == null) {\n-            return (other == null);\n+            return other == null;\n         } else if (other == null) {\n-            return (key == null);\n+            return key == null;\n         }\n         \n         return keyAnalyzer.compare(key, other) == 0;\n      * Returns true if both values are either null or equal\n      */\n     static boolean compare(Object a, Object b) {\n-        return (a == null ? b == null : a.equals(b));\n+        return a == null ? b == null : a.equals(b);\n     }\n     \n     /**\n         \n         public BasicEntry(K key) {\n             this.key = key;\n-            this.hashCode = (key != null ? key.hashCode() : 0);\n+            this.hashCode = key != null ? key.hashCode() : 0;\n         }\n         \n         public BasicEntry(K key, V value) {\n--- a/src/main/java/org/apache/commons/collections/trie/ByteArrayKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/ByteArrayKeyAnalyzer.java\n      * {@inheritDoc}\n      */\n     public int lengthInBits(byte[] key) {\n-        return (key != null ? key.length * bitsPerElement() : 0);\n+        return key != null ? key.length * bitsPerElement() : 0;\n     }\n     \n     /**\n         }\n         \n         for (int i = 0; i < length; i++) {\n-            int index = prefix + (offsetInBits + i);\n+            int index = prefix + offsetInBits + i;\n             boolean value = isBitSet(key, index, lengthInBits);\n                 \n             if (value) {\n                 allNull = false;\n             }\n             \n-            int otherIndex = prefix + (otherOffsetInBits + i);\n+            int otherIndex = prefix + otherOffsetInBits + i;\n             boolean otherValue = isBitSet(other, otherIndex, otherLengthInBits);\n             \n             if (value != otherValue) {\n     @Override\n     public int compare(byte[] o1, byte[] o2) {\n         if (o1 == null) {\n-            return (o2 == null) ? 0 : -1;\n+            return o2 == null ? 0 : -1;\n         } else if (o2 == null) {\n-            return (o1 == null) ? 0 : 1;\n+            return o1 == null ? 0 : 1;\n         }\n         \n         if (o1.length != o2.length) {\n--- a/src/main/java/org/apache/commons/collections/trie/ByteKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/ByteKeyAnalyzer.java\n             return NULL_BIT_KEY;\n         }\n \n-        byte otherValue = (other != null ? other.byteValue() : 0);\n+        byte otherValue = other != null ? other.byteValue() : 0;\n         \n         if (keyValue != otherValue) {\n             int xorValue = keyValue ^ otherValue;\n     public boolean isPrefix(Byte prefix, int offsetInBits, \n             int lengthInBits, Byte key) {\n         \n-        int value1 = (prefix.byteValue() << offsetInBits);\n+        int value1 = prefix.byteValue() << offsetInBits;\n         int value2 = key.byteValue();\n         \n         int mask = 0;\n         for (int i = 0; i < lengthInBits; i++) {\n-            mask |= (0x1 << i);\n+            mask |= 0x1 << i;\n         }\n         \n         return (value1 & mask) == (value2 & mask);\n--- a/src/main/java/org/apache/commons/collections/trie/CharArrayKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/CharArrayKeyAnalyzer.java\n      * {@inheritDoc}\n      */\n     public int lengthInBits(char[] key) {\n-        return (key != null ? key.length * LENGTH : 0);\n+        return key != null ? key.length * LENGTH : 0;\n     }\n \n     /**\n \n             if (k != f) {\n                int x = k ^ f;\n-               return i * LENGTH + (Integer.numberOfLeadingZeros(x) - LENGTH);\n+               return i * LENGTH + Integer.numberOfLeadingZeros(x) - LENGTH;\n             }\n \n             if (k != 0) {\n--- a/src/main/java/org/apache/commons/collections/trie/CharacterKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/CharacterKeyAnalyzer.java\n             other = Character.MIN_VALUE;\n         }\n         \n-        char otherValue = (other != null ? other.charValue() : Character.MIN_VALUE);\n+        char otherValue = other != null ? other.charValue() : Character.MIN_VALUE;\n         \n         if (keyValue != otherValue) {\n             int xorValue = keyValue ^ otherValue;\n     public boolean isPrefix(Character prefix, int offsetInBits, \n             int lengthInBits, Character key) {\n         \n-        int value1 = (prefix.charValue() << offsetInBits);\n+        int value1 = prefix.charValue() << offsetInBits;\n         int value2 = key.charValue();\n         \n         int mask = 0;\n         for(int i = 0; i < lengthInBits; i++) {\n-            mask |= (0x1 << i);\n+            mask |= 0x1 << i;\n         }\n         \n         return (value1 & mask) == (value2 & mask);\n--- a/src/main/java/org/apache/commons/collections/trie/IntegerKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/IntegerKeyAnalyzer.java\n             return NULL_BIT_KEY;\n         }\n \n-        int otherValue = (other != null ? other.intValue() : 0);\n+        int otherValue = other != null ? other.intValue() : 0;\n         \n         if (keyValue != otherValue) {\n             int xorValue = keyValue ^ otherValue;\n     public boolean isPrefix(Integer prefix, int offsetInBits, \n             int lengthInBits, Integer key) {\n         \n-        int value1 = (prefix.intValue() << offsetInBits);\n+        int value1 = prefix.intValue() << offsetInBits;\n         int value2 = key.intValue();\n         \n         int mask = 0;\n         for (int i = 0; i < lengthInBits; i++) {\n-            mask |= (0x1 << i);\n+            mask |= 0x1 << i;\n         }\n         \n         return (value1 & mask) == (value2 & mask);\n--- a/src/main/java/org/apache/commons/collections/trie/LongKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/LongKeyAnalyzer.java\n             return NULL_BIT_KEY;\n         }\n \n-        long otherValue = (other != null ? other.longValue() : 0L);\n+        long otherValue = other != null ? other.longValue() : 0L;\n         \n         if (keyValue != otherValue) {\n             long xorValue = keyValue ^ otherValue;\n     public boolean isPrefix(Long prefix, int offsetInBits, \n             int lengthInBits, Long key) {\n         \n-        long value1 = (prefix.longValue() << offsetInBits);\n+        long value1 = prefix.longValue() << offsetInBits;\n         long value2 = key.longValue();\n         \n         long mask = 0L;\n         for (int i = 0; i < lengthInBits; i++) {\n-            mask |= (0x1L << i);\n+            mask |= 0x1L << i;\n         }\n         \n         return (value1 & mask) == (value2 & mask);\n--- a/src/main/java/org/apache/commons/collections/trie/PatriciaTrie.java\n+++ b/src/main/java/org/apache/commons/collections/trie/PatriciaTrie.java\n                     TrieEntry<K,V> last) {\n                 super(first);\n                 \n-                this.excludedKey = (last != null ? last.getKey() : null);\n+                this.excludedKey = last != null ? last.getKey() : null;\n             }\n \n             /**\n--- a/src/main/java/org/apache/commons/collections/trie/PatriciaTrieBase.java\n+++ b/src/main/java/org/apache/commons/collections/trie/PatriciaTrieBase.java\n         } \n         \n         TrieEntry<K, V> parent = h.parent;\n-        TrieEntry<K, V> child = (h.left == h) ? h.right : h.left;\n+        TrieEntry<K, V> child = h.left == h ? h.right : h.left;\n         \n         if (parent.left == h) {\n             parent.left = child;\n         // Fix P's parent, predecessor and child Nodes\n         {\n             TrieEntry<K, V> parent = p.parent;\n-            TrieEntry<K, V> child = (p.left == h) ? p.right : p.left;\n+            TrieEntry<K, V> child = p.left == h ? p.right : p.left;\n             \n             // if it was looping to itself previously,\n             // it will now be pointed from it's parent\n--- a/src/main/java/org/apache/commons/collections/trie/ShortKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/ShortKeyAnalyzer.java\n             return NULL_BIT_KEY;\n         }\n \n-        int otherValue = (other != null ? other.shortValue() : 0);\n+        int otherValue = other != null ? other.shortValue() : 0;\n         \n         if (keyValue != otherValue) {\n             int xorValue = keyValue ^ otherValue;\n     public boolean isPrefix(Short prefix, int offsetInBits, \n             int lengthInBits, Short key) {\n         \n-        int value1 = (prefix.shortValue() << offsetInBits);\n+        int value1 = prefix.shortValue() << offsetInBits;\n         int value2 = key.shortValue();\n         \n         int mask = 0;\n         for (int i = 0; i < lengthInBits; i++) {\n-            mask |= (0x1 << i);\n+            mask |= 0x1 << i;\n         }\n         \n         return (value1 & mask) == (value2 & mask);\n--- a/src/main/java/org/apache/commons/collections/trie/StringKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/StringKeyAnalyzer.java\n      * {@inheritDoc}\n      */\n     public int lengthInBits(String key) {\n-        return (key != null ? key.length() * LENGTH : 0);\n+        return key != null ? key.length() * LENGTH : 0;\n     }\n     \n     /**\n             \n             if (k != f) {\n                int x = k ^ f;\n-               return i * LENGTH + (Integer.numberOfLeadingZeros(x) - LENGTH);\n+               return i * LENGTH + Integer.numberOfLeadingZeros(x) - LENGTH;\n             }\n             \n             if (k != 0) {\n--- a/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n     // -----------------------------------------------------------------------\n     private static Predicate<Number> EQUALS_TWO = new Predicate<Number>() {\n         public boolean evaluate(Number input) {\n-            return (input.intValue() == 2);\n+            return input.intValue() == 2;\n         }\n     };\n \n         // or eltb, although this isn't strictly part of the\n         // contract.\n         Object eltc = intersection.iterator().next();\n-        assertTrue((eltc == elta && eltc != eltb) || (eltc != elta && eltc == eltb));\n+        assertTrue(eltc == elta && eltc != eltb || eltc != elta && eltc == eltb);\n \n         // In any event, this element remains equal,\n         // to both elta and eltb.\n--- a/src/test/java/org/apache/commons/collections/ExtendedPropertiesTest.java\n+++ b/src/test/java/org/apache/commons/collections/ExtendedPropertiesTest.java\n          * now add another and get a Vector/list\n          */\n         eprop.addProperty(\"number\", \"2\");\n-        assertTrue(\"This returns array\", (eprop.getVector(\"number\") instanceof java.util.Vector));\n-        assertTrue(\"This returns array\", (eprop.getList(\"number\") instanceof java.util.List));\n+        assertTrue(\"This returns array\", eprop.getVector(\"number\") instanceof java.util.Vector);\n+        assertTrue(\"This returns array\", eprop.getList(\"number\") instanceof java.util.List);\n \n         /*\n          *  now test dan's new fix where we get the first scalar \n          *  when we access a vector/list valued\n          *  property\n          */\n-        assertTrue(\"This returns scalar\", (eprop.getString(\"number\") instanceof String));\n+        assertTrue(\"This returns scalar\", eprop.getString(\"number\") instanceof String);\n \n         /*\n          * test comma separated string properties\n          */\n         String prop = \"hey, that's a test\";\n         eprop.setProperty(\"prop.string\", prop);\n-        assertTrue(\"This returns vector\", (eprop.getVector(\"prop.string\") instanceof java.util.Vector));\n-        assertTrue(\"This returns list\", (eprop.getList(\"prop.string\") instanceof java.util.List));\n+        assertTrue(\"This returns vector\", eprop.getVector(\"prop.string\") instanceof java.util.Vector);\n+        assertTrue(\"This returns list\", eprop.getList(\"prop.string\") instanceof java.util.List);\n \n         String prop2 = \"hey\\\\, that's a test\";\n         eprop.remove(\"prop.string\");\n         eprop.setProperty(\"prop.string\", prop2);\n-        assertTrue(\"This returns array\", (eprop.getString(\"prop.string\") instanceof java.lang.String));\n+        assertTrue(\"This returns array\", eprop.getString(\"prop.string\") instanceof java.lang.String);\n \n         /*\n          * test subset : we want to make sure that the EP doesn't reprocess the data \n         ExtendedProperties subEprop = eprop.subset(\"prop\");\n \n         assertTrue(\"Returns the full string\", subEprop.getString(\"string\").equals(prop));\n-        assertTrue(\"This returns string for subset\", (subEprop.getString(\"string\") instanceof java.lang.String));\n-        assertTrue(\"This returns array for subset\", (subEprop.getVector(\"string\") instanceof java.util.Vector));\n-        assertTrue(\"This returns array for subset\", (subEprop.getList(\"string\") instanceof java.util.List));\n+        assertTrue(\"This returns string for subset\", subEprop.getString(\"string\") instanceof java.lang.String);\n+        assertTrue(\"This returns array for subset\", subEprop.getVector(\"string\") instanceof java.util.Vector);\n+        assertTrue(\"This returns array for subset\", subEprop.getList(\"string\") instanceof java.util.List);\n \n     }\n \n--- a/src/test/java/org/apache/commons/collections/ListUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/ListUtilsTest.java\n     \n     private static Predicate<Number> EQUALS_TWO = new Predicate<Number>() {\n         public boolean evaluate(Number input) {\n-            return (input.intValue() == 2);\n+            return input.intValue() == 2;\n         }\n     };\n \n--- a/src/test/java/org/apache/commons/collections/MockTestCase.java\n+++ b/src/test/java/org/apache/commons/collections/MockTestCase.java\n             try {\n                 EasyMock.verify(i.next());\n             } catch (AssertionError e) {\n-                throw new AssertionError((i.previousIndex() + 1) + \"\"\n+                throw new AssertionError(i.previousIndex() + 1 + \"\"\n                         + e.getMessage());\n             }\n         }\n--- a/src/test/java/org/apache/commons/collections/bag/AbstractBagTest.java\n+++ b/src/test/java/org/apache/commons/collections/bag/AbstractBagTest.java\n         Object[] array = bag.toArray();\n         int a = 0, b = 0, c = 0;\n         for (Object element : array) {\n-            a += (element.equals(\"A\") ? 1 : 0);\n-            b += (element.equals(\"B\") ? 1 : 0);\n-            c += (element.equals(\"C\") ? 1 : 0);\n+            a += element.equals(\"A\") ? 1 : 0;\n+            b += element.equals(\"B\") ? 1 : 0;\n+            c += element.equals(\"C\") ? 1 : 0;\n         }\n         assertEquals(2, a);\n         assertEquals(2, b);\n         String[] array = bag.toArray(new String[0]);\n         int a = 0, b = 0, c = 0;\n         for (String element : array) {\n-            a += (element.equals(\"A\") ? 1 : 0);\n-            b += (element.equals(\"B\") ? 1 : 0);\n-            c += (element.equals(\"C\") ? 1 : 0);\n+            a += element.equals(\"A\") ? 1 : 0;\n+            b += element.equals(\"B\") ? 1 : 0;\n+            c += element.equals(\"C\") ? 1 : 0;\n         }\n         assertEquals(2, a);\n         assertEquals(2, b);\n         assertEquals(bag.hashCode(), bag2.hashCode());\n         \n         int total = 0;\n-        total += (\"A\".hashCode() ^ 2);\n-        total += (\"B\".hashCode() ^ 2);\n-        total += (\"C\".hashCode() ^ 1);\n+        total += \"A\".hashCode() ^ 2;\n+        total += \"B\".hashCode() ^ 2;\n+        total += \"C\".hashCode() ^ 1;\n         assertEquals(total, bag.hashCode());\n         assertEquals(total, bag2.hashCode());\n     }\n--- a/src/test/java/org/apache/commons/collections/collection/AbstractCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections/collection/AbstractCollectionTest.java\n                     // skip values already matched\n                     continue;\n                 }\n-                if (o == confirmedValues[i] || (o != null && o.equals(confirmedValues[i]))) {\n+                if (o == confirmedValues[i] || o != null && o.equals(confirmedValues[i])) {\n                     // values matched\n                     matched[i] = true;\n                     match = true;\n         // make sure calls to \"containsAll\" don't change anything\n         verify();\n \n-        int min = (getFullElements().length < 2 ? 0 : 2);\n-        int max = (getFullElements().length == 1 ? 1 :\n-                (getFullElements().length <= 5 ? getFullElements().length - 1 : 5));\n+        int min = getFullElements().length < 2 ? 0 : 2;\n+        int max = getFullElements().length == 1 ? 1 :\n+                getFullElements().length <= 5 ? getFullElements().length - 1 : 5;\n         col = Arrays.asList(getFullElements()).subList(min, max);\n         assertTrue(\"Full collection should containAll partial full elements\",\n                 getCollection().containsAll(col));\n \n         resetFull();\n         int size = getCollection().size();\n-        int min = (getFullElements().length < 2 ? 0 : 2);\n-        int max = (getFullElements().length == 1 ? 1 :\n-                (getFullElements().length <= 5 ? getFullElements().length - 1 : 5));\n+        int min = getFullElements().length < 2 ? 0 : 2;\n+        int max = getFullElements().length == 1 ? 1 :\n+                getFullElements().length <= 5 ? getFullElements().length - 1 : 5;\n         Collection<E> all = Arrays.asList(getFullElements()).subList(min, max);\n         assertTrue(\"Full collection removeAll should work\", getCollection().removeAll(all));\n         getConfirmed().removeAll(all);\n         if (getFullElements().length > 1) {\n             resetFull();\n             size = getCollection().size();\n-            int min = (getFullElements().length < 2 ? 0 : 2);\n-            int max = (getFullElements().length <= 5 ? getFullElements().length - 1 : 5);\n+            int min = getFullElements().length < 2 ? 0 : 2;\n+            int max = getFullElements().length <= 5 ? getFullElements().length - 1 : 5;\n             assertTrue(\"Collection should changed by partial retainAll\",\n                     getCollection().retainAll(elements.subList(min, max)));\n             getConfirmed().retainAll(elements.subList(min, max));\n                     continue;\n                 }\n                 if (array[i] == confirmedArray[j]\n-                        || (array[i] != null && array[i].equals(confirmedArray[j]))) {\n+                        || array[i] != null && array[i].equals(confirmedArray[j])) {\n                     matched[j] = true;\n                     match = true;\n                     break;\n         // TODO: It'd be nicer to detect a common superclass\n         HashSet<Class<?>> classes = new HashSet<Class<?>>();\n         for (Object element : array) {\n-            classes.add((element == null) ? null : element.getClass());\n+            classes.add(element == null ? null : element.getClass());\n         }\n         if (classes.size() > 1) {\n             return;\n--- a/src/test/java/org/apache/commons/collections/comparators/BooleanComparatorTest.java\n+++ b/src/test/java/org/apache/commons/collections/comparators/BooleanComparatorTest.java\n         assertEquals(new BooleanComparator(true),BooleanComparator.getTrueFirstComparator());\n         assertSame(BooleanComparator.getTrueFirstComparator(),BooleanComparator.booleanComparator(true));\n \n-        assertTrue(!(new BooleanComparator().equals(new BooleanComparator(true))));\n-        assertTrue(!(new BooleanComparator(true).equals(new BooleanComparator(false))));\n+        assertTrue(!new BooleanComparator().equals(new BooleanComparator(true)));\n+        assertTrue(!new BooleanComparator(true).equals(new BooleanComparator(false)));\n     }\n \n     // utilities\n--- a/src/test/java/org/apache/commons/collections/iterators/AbstractMapIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/AbstractMapIteratorTest.java\n         }\n \n         V newValue = addSetValues()[0];\n-        V newValue2 = (addSetValues().length == 1 ? addSetValues()[0] : addSetValues()[1]);\n+        V newValue2 = addSetValues().length == 1 ? addSetValues()[0] : addSetValues()[1];\n         MapIterator<K, V> it = makeObject();\n         Map<K, V> map = getMap();\n         Map<K, V> confirmed = getConfirmedMap();\n--- a/src/test/java/org/apache/commons/collections/iterators/ArrayIterator2Test.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ArrayIterator2Test.java\n         } catch (Exception e) {\n             assertTrue(\n                 \"NoSuchElementException must be thrown\",\n-                e.getClass().equals((new NoSuchElementException()).getClass()));\n+                e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/collections/iterators/ArrayIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ArrayIteratorTest.java\n         } catch (Exception e) {\n             assertTrue(\n                 \"NoSuchElementException must be thrown\",\n-                e.getClass().equals((new NoSuchElementException()).getClass()));\n+                e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/collections/iterators/ArrayListIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ArrayListIteratorTest.java\n         } catch (Exception e) {\n             assertTrue(\n                 \"NoSuchElementException must be thrown\",\n-                e.getClass().equals((new NoSuchElementException()).getClass()));\n+                e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n \n     }\n--- a/src/test/java/org/apache/commons/collections/iterators/CollatingIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/CollatingIteratorTest.java\n         for (int i = 0; i < 20; i++) {\n             assertTrue(iter.hasNext());\n             assertEquals(new Integer(i),iter.next());\n-            assertEquals((i % 2) == 0 ? 1 : 0,iter.getIteratorIndex());\n+            assertEquals(i % 2 == 0 ? 1 : 0,iter.getIteratorIndex());\n         }\n         assertTrue(!iter.hasNext());\n     }\n                 iter.remove();\n             }\n         }\n-        assertEquals(expectedSize, (evens.size() + odds.size()));\n+        assertEquals(expectedSize, evens.size() + odds.size());\n     }\n \n     public void testNullComparator() {\n--- a/src/test/java/org/apache/commons/collections/iterators/IteratorChainTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/IteratorChainTest.java\n             iter.next();\n         } catch (Exception e) {\n             assertTrue(\"NoSuchElementException must be thrown\", \n-                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+                       e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/collections/iterators/ListIteratorWrapper2Test.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ListIteratorWrapper2Test.java\n             iter.next();\n         } catch (Exception e) {\n             assertTrue(\"NoSuchElementException must be thrown\",\n-                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+                       e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n \n         // now, read it backwards\n             iter.previous();\n         } catch (Exception e) {\n             assertTrue(\"NoSuchElementException must be thrown\",\n-                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+                       e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n \n         // now, read it forwards again\n--- a/src/test/java/org/apache/commons/collections/iterators/ListIteratorWrapperTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ListIteratorWrapperTest.java\n             iter.next();\n         } catch (Exception e) {\n             assertTrue(\"NoSuchElementException must be thrown\",\n-                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+                       e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n \n         // now, read it backwards\n             iter.previous();\n         } catch (Exception e) {\n             assertTrue(\"NoSuchElementException must be thrown\",\n-                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+                       e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n \n         // now, read it forwards again\n--- a/src/test/java/org/apache/commons/collections/iterators/ObjectArrayIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ObjectArrayIteratorTest.java\n         } catch (Exception e) {\n             assertTrue(\n                 \"NoSuchElementException must be thrown\",\n-                e.getClass().equals((new NoSuchElementException()).getClass()));\n+                e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/collections/iterators/ObjectArrayListIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ObjectArrayListIteratorTest.java\n         } catch (Exception e) {\n             assertTrue(\n                 \"NoSuchElementException must be thrown\",\n-                e.getClass().equals((new NoSuchElementException()).getClass()));\n+                e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n \n     }\n--- a/src/test/java/org/apache/commons/collections/iterators/SingletonIterator2Test.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/SingletonIterator2Test.java\n         } catch (Exception e) {\n             assertTrue(\n                 \"NoSuchElementException must be thrown\",\n-                e.getClass().equals((new NoSuchElementException()).getClass()));\n+                e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/collections/iterators/SingletonIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/SingletonIteratorTest.java\n         } catch (Exception e) {\n             assertTrue(\n                 \"NoSuchElementException must be thrown\",\n-                e.getClass().equals((new NoSuchElementException()).getClass()));\n+                e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/collections/iterators/SingletonListIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/SingletonListIteratorTest.java\n             iter.next();\n         } catch (Exception e) {\n           assertTrue(\"NoSuchElementException must be thrown\", \n-             e.getClass().equals((new NoSuchElementException()).getClass()));\n+             e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n         iter.previous();\n         try {\n             iter.previous();\n         } catch (Exception e) {\n           assertTrue(\"NoSuchElementException must be thrown\", \n-             e.getClass().equals((new NoSuchElementException()).getClass()));\n+             e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n     }\n     \n--- a/src/test/java/org/apache/commons/collections/iterators/UniqueFilterIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/UniqueFilterIteratorTest.java\n             iter.next();\n         } catch (Exception e) {\n             assertTrue(\"NoSuchElementException must be thrown\", \n-                       e.getClass().equals((new NoSuchElementException()).getClass()));\n+                       e.getClass().equals(new NoSuchElementException().getClass()));\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/collections/list/AbstractListTest.java\n+++ b/src/test/java/org/apache/commons/collections/list/AbstractListTest.java\n \n         for (int i = 0; i < elements.length; i++) {\n             E n = other[i % other.length];\n-            E v = (getCollection()).set(i, n);\n+            E v = getCollection().set(i, n);\n             assertEquals(\"Set should return correct element\", elements[i], v);\n-            (getConfirmed()).set(i, n);\n+            getConfirmed().set(i, n);\n             verify();\n         }\n     }\n \n         resetFull();\n         try {\n-            (getCollection()).set(0, getFullElements()[0]);\n+            getCollection().set(0, getFullElements()[0]);\n             fail(\"Emtpy collection should not support set.\");\n         } catch (UnsupportedOperationException e) {\n             // expected\n         int max = getFullElements().length;\n         for (int i = 0; i < max; i++) {\n             resetFull();\n-            E o1 = (getCollection()).remove(i);\n-            E o2 = (getConfirmed()).remove(i);\n+            E o1 = getCollection().remove(i);\n+            E o2 = getConfirmed().remove(i);\n             assertEquals(\"remove should return correct element\", o1, o2);\n             verify();\n         }\n--- a/src/test/java/org/apache/commons/collections/list/CursorableLinkedListTest.java\n+++ b/src/test/java/org/apache/commons/collections/list/CursorableLinkedListTest.java\n         assertEquals(\"5\", elts[4]);\n         assertEquals(5, elts.length);\n \n-        String[] elts2 = (list.toArray(new String[0]));\n+        String[] elts2 = list.toArray(new String[0]);\n         assertEquals(\"1\", elts2[0]);\n         assertEquals(\"2\", elts2[1]);\n         assertEquals(\"3\", elts2[2]);\n         assertEquals(5, elts3.length);\n \n         String[] elts4 = new String[3];\n-        String[] elts4b = (list.toArray(elts4));\n+        String[] elts4b = list.toArray(elts4);\n         assertTrue(elts4 != elts4b);\n         assertEquals(\"1\", elts4b[0]);\n         assertEquals(\"2\", elts4b[1]);\n--- a/src/test/java/org/apache/commons/collections/list/SetUniqueListTest.java\n+++ b/src/test/java/org/apache/commons/collections/list/SetUniqueListTest.java\n         // make sure retainAll completes under 5 seconds\n         // TODO if test is migrated to JUnit 4, add a Timeout rule.\n         // http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/Timeout.html\n-        assertTrue((stop - start) < 5000);\n+        assertTrue(stop - start < 5000);\n     }\n     \n     @SuppressWarnings(\"serial\")\n--- a/src/test/java/org/apache/commons/collections/map/AbstractMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/AbstractMapTest.java\n             \"hello\", \"goodbye\", \"we'll\", \"see\", \"you\", \"all\", \"again\",\n             \"key\",\n             \"key2\",\n-            (isAllowNullKey() && !JDK12) ? null : \"nonnullkey\"\n+            isAllowNullKey() && !JDK12 ? null : \"nonnullkey\"\n         };\n         return (K[]) result;\n     }\n         Object[] result = new Object[] {\n             \"blahv\", \"foov\", \"barv\", \"bazv\", \"tmpv\", \"goshv\", \"gollyv\", \"geev\",\n             \"hellov\", \"goodbyev\", \"we'llv\", \"seev\", \"youv\", \"allv\", \"againv\",\n-            (isAllowNullValue() && !JDK12) ? null : \"nonnullvalue\",\n+            isAllowNullValue() && !JDK12 ? null : \"nonnullvalue\",\n             \"value\",\n-            (isAllowDuplicateValues()) ? \"value\" : \"value2\",\n+            isAllowDuplicateValues() ? \"value\" : \"value2\",\n         };\n         return (V[]) result;\n     }\n     @SuppressWarnings(\"unchecked\")\n     public V[] getNewSampleValues() {\n         Object[] result = new Object[] {\n-            (isAllowNullValue() && !JDK12 && isAllowDuplicateValues()) ? null : \"newnonnullvalue\",\n+            isAllowNullValue() && !JDK12 && isAllowDuplicateValues() ? null : \"newnonnullvalue\",\n             \"newvalue\",\n-            (isAllowDuplicateValues()) ? \"newvalue\" : \"newvalue2\",\n+            isAllowDuplicateValues() ? \"newvalue\" : \"newvalue2\",\n             \"newblahv\", \"newfoov\", \"newbarv\", \"newbazv\", \"newtmpv\", \"newgoshv\",\n             \"newgollyv\", \"newgeev\", \"newhellov\", \"newgoodbyev\", \"newwe'llv\",\n             \"newseev\", \"newyouv\", \"newallv\", \"newagainv\",\n         for (int i = 0; i < keys.length - 1; i++) {\n             for (int j = i + 1; j < keys.length; j++) {\n                 assertTrue(\"failure in test: duplicate null keys.\",\n-                        (keys[i] != null || keys[j] != null));\n+                        keys[i] != null || keys[j] != null);\n                 assertTrue(\n                         \"failure in test: duplicate non-null key.\",\n-                        (keys[i] == null || keys[j] == null || (!keys[i].equals(keys[j]) && !keys[j]\n-                                .equals(keys[i]))));\n+                        keys[i] == null || keys[j] == null || !keys[i].equals(keys[j]) && !keys[j]\n+                                .equals(keys[i]));\n             }\n             assertTrue(\"failure in test: found null key, but isNullKeySupported \" + \"is false.\",\n                     keys[i] != null || isAllowNullKey());\n \n         public void testMapEntrySetIteratorEntrySetValue() {\n             K key1 = getSampleKeys()[0];\n-            K key2 = (getSampleKeys().length == 1 ? getSampleKeys()[0] : getSampleKeys()[1]);\n+            K key2 = getSampleKeys().length == 1 ? getSampleKeys()[0] : getSampleKeys()[1];\n             V newValue1 = getNewSampleValues()[0];\n-            V newValue2 = (getNewSampleValues().length ==1 ? getNewSampleValues()[0] : getNewSampleValues()[1]);\n+            V newValue2 = getNewSampleValues().length ==1 ? getNewSampleValues()[0] : getNewSampleValues()[1];\n \n             resetFull();\n             // explicitly get entries as sample values/keys are connected for some maps\n--- a/src/test/java/org/apache/commons/collections/map/PredicatedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/PredicatedMapTest.java\n \n     protected static final Predicate<Object> testPredicate = new Predicate<Object>() {\n         public boolean evaluate(Object o) {\n-            return (o instanceof String);\n+            return o instanceof String;\n         }\n     };\n \n--- a/src/test/java/org/apache/commons/collections/map/PredicatedSortedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/PredicatedSortedMapTest.java\n \n     protected static final Predicate<Object> testPredicate = new Predicate<Object>() {\n         public boolean evaluate(Object o) {\n-            return (o instanceof String);\n+            return o instanceof String;\n         }\n     };\n \n--- a/src/test/java/org/apache/commons/collections/set/ListOrderedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections/set/ListOrderedSetTest.java\n         // make sure retainAll completes under 5 seconds\n         // TODO if test is migrated to JUnit 4, add a Timeout rule.\n         // http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/Timeout.html\n-        assertTrue((stop - start) < 5000);\n+        assertTrue(stop - start < 5000);\n     }\n \n     static class A {\n \n         @Override\n         public boolean equals(Object obj) {\n-            return (obj instanceof A || obj instanceof B);\n+            return obj instanceof A || obj instanceof B;\n         }\n \n         @Override\n \n         @Override\n         public boolean equals(Object obj) {\n-            return (obj instanceof A || obj instanceof B);\n+            return obj instanceof A || obj instanceof B;\n         }\n \n         @Override\n--- a/src/test/java/org/apache/commons/collections/set/PredicatedSortedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections/set/PredicatedSortedSetTest.java\n     protected Predicate<E> testPredicate =\n         new Predicate<E>() {\n             public boolean evaluate(E o) {\n-                return (o instanceof String) && (((String) o).startsWith(\"A\"));\n+                return o instanceof String && ((String) o).startsWith(\"A\");\n             }\n         };\n ", "timestamp": 1357578292, "metainfo": ""}