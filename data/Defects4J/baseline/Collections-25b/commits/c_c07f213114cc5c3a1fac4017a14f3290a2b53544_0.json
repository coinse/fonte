{"sha": "c07f213114cc5c3a1fac4017a14f3290a2b53544", "log": "Test cleanups.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections/buffer/TransformedBufferTest.java\n+++ b/src/test/java/org/apache/commons/collections/buffer/TransformedBufferTest.java\n         for (final Object el : els) {\n             originalBuffer.add(el);\n         }\n-        final Buffer buffer = TransformedBuffer.transformedBuffer(originalBuffer, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n+        final Buffer<?> buffer = TransformedBuffer.transformedBuffer(originalBuffer, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, buffer.size());\n         for (final Object el : els) {\n             assertEquals(true, buffer.contains(new Integer((String) el)));\n--- a/src/test/java/org/apache/commons/collections/buffer/UnboundedFifoBufferTest.java\n+++ b/src/test/java/org/apache/commons/collections/buffer/UnboundedFifoBufferTest.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"unchecked\")\n     public void testCollections220() throws Exception {\n          UnboundedFifoBuffer<String> buffer = new UnboundedFifoBuffer<String>();\n          \n--- a/src/test/java/org/apache/commons/collections/iterators/FilterIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/FilterIteratorTest.java\n     }\n \n     public void testRepeatedNext() {\n-        for (final String element : array) {\n+        for (@SuppressWarnings(\"unused\") final String element : array) {\n             iterator.next();\n         }\n         verifyNoMoreElements();\n--- a/src/test/java/org/apache/commons/collections/keyvalue/MultiKeyTest.java\n+++ b/src/test/java/org/apache/commons/collections/keyvalue/MultiKeyTest.java\n import java.util.HashMap;\n import java.util.Map;\n \n-import junit.framework.Assert;\n import junit.framework.TestCase;\n \n /**\n     public void testConstructors() throws Exception {\n         MultiKey<Integer> mk = null;\n         mk = new MultiKey<Integer>(ONE, TWO);\n-        Assert.assertTrue(Arrays.equals(new Object[] { ONE, TWO }, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] { ONE, TWO }, mk.getKeys()));\n \n         mk = new MultiKey<Integer>(ONE, TWO, THREE);\n-        Assert.assertTrue(Arrays.equals(new Object[] { ONE, TWO, THREE }, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] { ONE, TWO, THREE }, mk.getKeys()));\n \n         mk = new MultiKey<Integer>(ONE, TWO, THREE, FOUR);\n-        Assert.assertTrue(Arrays.equals(new Object[] { ONE, TWO, THREE, FOUR }, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] { ONE, TWO, THREE, FOUR }, mk.getKeys()));\n \n         mk = new MultiKey<Integer>(ONE, TWO, THREE, FOUR, FIVE);\n-        Assert.assertTrue(Arrays.equals(new Object[] { ONE, TWO, THREE, FOUR, FIVE }, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] { ONE, TWO, THREE, FOUR, FIVE }, mk.getKeys()));\n \n         mk = new MultiKey<Integer>(new Integer[] { THREE, FOUR, ONE, TWO }, false);\n-        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n     }\n \n     public void testConstructorsByArray() throws Exception {\n         MultiKey<Integer> mk = null;\n         Integer[] keys = new Integer[] { THREE, FOUR, ONE, TWO };\n         mk = new MultiKey<Integer>(keys);\n-        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n         keys[3] = FIVE;  // no effect\n-        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n \n         keys = new Integer[] {};\n         mk = new MultiKey<Integer>(keys);\n-        Assert.assertTrue(Arrays.equals(new Object[] {}, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] {}, mk.getKeys()));\n \n         keys = new Integer[] { THREE, FOUR, ONE, TWO };\n         mk = new MultiKey<Integer>(keys, true);\n-        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n         keys[3] = FIVE;  // no effect\n-        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n \n         keys = new Integer[] { THREE, FOUR, ONE, TWO };\n         mk = new MultiKey<Integer>(keys, false);\n-        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, TWO }, mk.getKeys()));\n         // change key - don't do this!\n         // the hashcode of the MultiKey is now broken\n         keys[3] = FIVE;\n-        Assert.assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, FIVE }, mk.getKeys()));\n+        assertTrue(Arrays.equals(new Object[] { THREE, FOUR, ONE, FIVE }, mk.getKeys()));\n     }\n \n     public void testConstructorsByArrayNull() throws Exception {\n     }\n \n     public void testSize() {\n-        Assert.assertEquals(2, new MultiKey<Integer>(ONE, TWO).size());\n-        Assert.assertEquals(2, new MultiKey<Object>(null, null).size());\n-        Assert.assertEquals(3, new MultiKey<Integer>(ONE, TWO, THREE).size());\n-        Assert.assertEquals(3, new MultiKey<Object>(null, null, null).size());\n-        Assert.assertEquals(4, new MultiKey<Integer>(ONE, TWO, THREE, FOUR).size());\n-        Assert.assertEquals(4, new MultiKey<Object>(null, null, null, null).size());\n-        Assert.assertEquals(5, new MultiKey<Integer>(ONE, TWO, THREE, FOUR, FIVE).size());\n-        Assert.assertEquals(5, new MultiKey<Object>(null, null, null, null, null).size());\n-\n-        Assert.assertEquals(0, new MultiKey<Object>(new Object[] {}).size());\n-        Assert.assertEquals(1, new MultiKey<Integer>(new Integer[] { ONE }).size());\n-        Assert.assertEquals(2, new MultiKey<Integer>(new Integer[] { ONE, TWO }).size());\n-        Assert.assertEquals(7, new MultiKey<Integer>(new Integer[] { ONE, TWO, ONE, TWO, ONE, TWO, ONE }).size());\n+        assertEquals(2, new MultiKey<Integer>(ONE, TWO).size());\n+        assertEquals(2, new MultiKey<Object>(null, null).size());\n+        assertEquals(3, new MultiKey<Integer>(ONE, TWO, THREE).size());\n+        assertEquals(3, new MultiKey<Object>(null, null, null).size());\n+        assertEquals(4, new MultiKey<Integer>(ONE, TWO, THREE, FOUR).size());\n+        assertEquals(4, new MultiKey<Object>(null, null, null, null).size());\n+        assertEquals(5, new MultiKey<Integer>(ONE, TWO, THREE, FOUR, FIVE).size());\n+        assertEquals(5, new MultiKey<Object>(null, null, null, null, null).size());\n+\n+        assertEquals(0, new MultiKey<Object>(new Object[] {}).size());\n+        assertEquals(1, new MultiKey<Integer>(new Integer[] { ONE }).size());\n+        assertEquals(2, new MultiKey<Integer>(new Integer[] { ONE, TWO }).size());\n+        assertEquals(7, new MultiKey<Integer>(new Integer[] { ONE, TWO, ONE, TWO, ONE, TWO, ONE }).size());\n     }\n \n     public void testGetIndexed() {\n         final MultiKey<Integer> mk = new MultiKey<Integer>(ONE, TWO);\n-        Assert.assertSame(ONE, mk.getKey(0));\n-        Assert.assertSame(TWO, mk.getKey(1));\n+        assertSame(ONE, mk.getKey(0));\n+        assertSame(TWO, mk.getKey(1));\n         try {\n             mk.getKey(-1);\n             fail();\n     public void testGetKeysSimpleConstructor() {\n         final MultiKey<Integer> mk = new MultiKey<Integer>(ONE, TWO);\n         final Object[] array = mk.getKeys();\n-        Assert.assertSame(ONE, array[0]);\n-        Assert.assertSame(TWO, array[1]);\n-        Assert.assertEquals(2, array.length);\n+        assertSame(ONE, array[0]);\n+        assertSame(TWO, array[1]);\n+        assertEquals(2, array.length);\n     }\n \n     public void testGetKeysArrayConstructorCloned() {\n         final Integer[] keys = new Integer[] { ONE, TWO };\n         final MultiKey<Integer> mk = new MultiKey<Integer>(keys, true);\n         final Object[] array = mk.getKeys();\n-        Assert.assertTrue(array != keys);\n-        Assert.assertTrue(Arrays.equals(array, keys));\n-        Assert.assertSame(ONE, array[0]);\n-        Assert.assertSame(TWO, array[1]);\n-        Assert.assertEquals(2, array.length);\n+        assertTrue(array != keys);\n+        assertTrue(Arrays.equals(array, keys));\n+        assertSame(ONE, array[0]);\n+        assertSame(TWO, array[1]);\n+        assertEquals(2, array.length);\n     }\n \n     public void testGetKeysArrayConstructorNonCloned() {\n         final Integer[] keys = new Integer[] { ONE, TWO };\n         final MultiKey<Integer> mk = new MultiKey<Integer>(keys, false);\n         final Object[] array = mk.getKeys();\n-        Assert.assertTrue(array != keys);  // still not equal\n-        Assert.assertTrue(Arrays.equals(array, keys));\n-        Assert.assertSame(ONE, array[0]);\n-        Assert.assertSame(TWO, array[1]);\n-        Assert.assertEquals(2, array.length);\n+        assertTrue(array != keys);  // still not equal\n+        assertTrue(Arrays.equals(array, keys));\n+        assertSame(ONE, array[0]);\n+        assertSame(TWO, array[1]);\n+        assertEquals(2, array.length);\n     }\n \n     public void testHashCode() {\n         final MultiKey<Integer> mk2 = new MultiKey<Integer>(ONE, TWO);\n         final MultiKey<Object> mk3 = new MultiKey<Object>(ONE, \"TWO\");\n \n-        Assert.assertTrue(mk1.hashCode() == mk1.hashCode());\n-        Assert.assertTrue(mk1.hashCode() == mk2.hashCode());\n-        Assert.assertTrue(mk1.hashCode() != mk3.hashCode());\n+        assertTrue(mk1.hashCode() == mk1.hashCode());\n+        assertTrue(mk1.hashCode() == mk2.hashCode());\n+        assertTrue(mk1.hashCode() != mk3.hashCode());\n \n         final int total = (0 ^ ONE.hashCode()) ^ TWO.hashCode();\n-        Assert.assertEquals(total, mk1.hashCode());\n+        assertEquals(total, mk1.hashCode());\n     }\n \n     public void testEquals() {\n         final MultiKey<Integer> mk2 = new MultiKey<Integer>(ONE, TWO);\n         final MultiKey<Object> mk3 = new MultiKey<Object>(ONE, \"TWO\");\n \n-        Assert.assertEquals(mk1, mk1);\n-        Assert.assertEquals(mk1, mk2);\n-        Assert.assertTrue(mk1.equals(mk3) == false);\n-        Assert.assertTrue(mk1.equals(\"\") == false);\n-        Assert.assertTrue(mk1.equals(null) == false);\n+        assertEquals(mk1, mk1);\n+        assertEquals(mk1, mk2);\n+        assertTrue(mk1.equals(mk3) == false);\n+        assertTrue(mk1.equals(\"\") == false);\n+        assertTrue(mk1.equals(null) == false);\n     }\n \n     static class SystemHashCodeSimulatingKey implements Serializable {", "timestamp": 1360263583, "metainfo": ""}