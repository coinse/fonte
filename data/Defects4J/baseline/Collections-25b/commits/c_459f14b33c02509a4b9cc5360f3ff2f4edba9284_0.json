{"sha": "459f14b33c02509a4b9cc5360f3ff2f4edba9284", "log": "[COLLECTIONS-239] to keep backwards compatibility, do not use DefaultEquator in case no equator is specific, but rather use the original equals method.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java\n      * @param object  the object to compare to\n      */\n     public EqualPredicate(T object) {\n-        this(object, new DefaultEquator<T>());\n+        // do not use the DefaultEquator to keep backwards compatibility\n+        // the DefaultEquator returns also true if the two object references are equal\n+        this(object, null);\n     }\n \n     /**\n      * @return true if input object equals stored value\n      */\n     public boolean evaluate(T object) {\n-        return equator.equate(iValue, object);\n+        if (equator != null) {\n+            return equator.equate(iValue, object);\n+        } else {\n+            return iValue.equals(object);\n+        }\n     }\n \n     /**", "timestamp": 1343334267, "metainfo": ""}