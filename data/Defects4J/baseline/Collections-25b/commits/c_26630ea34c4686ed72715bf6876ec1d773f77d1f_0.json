{"sha": "26630ea34c4686ed72715bf6876ec1d773f77d1f", "log": "added simple serialization tests   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestList.java\n+++ b/src/test/org/apache/commons/collections/TestList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.6 2002/02/25 23:51:24 morgand Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/02/25 23:51:24 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.7 2002/02/26 17:32:20 morgand Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/02/26 17:32:20 $\n  *\n  * ====================================================================\n  *\n package org.apache.commons.collections;\n \n import junit.framework.*;\n+import java.io.IOException;\n+import java.io.Serializable;\n import java.util.List;\n import java.util.Collection;\n import java.util.Arrays;\n  * test case (method) your {@link List} fails.\n  *\n  * @author Rodney Waldhoff\n- * @version $Id: TestList.java,v 1.6 2002/02/25 23:51:24 morgand Exp $\n+ * @version $Id: TestList.java,v 1.7 2002/02/26 17:32:20 morgand Exp $\n  */\n public abstract class TestList extends TestCollection {\n     public TestList(String testName) {\n      * Return a new, empty {@link List} to used for testing.\n      */\n     public abstract List makeEmptyList();\n+\n+    public List makeFullList() {\n+        // only works if list supports optional \"add(Object)\" \n+        // and \"add(int,Object)\" operations\n+        List list = makeEmptyList();\n+        list.add(\"1\");\n+        // must be able to add to the end this way\n+        list.add(list.size(),\"4\");\n+        // must support duplicates\n+        list.add(\"1\");\n+        // must support insertions\n+        list.add(1,\"3\");\n+\n+        // resultant list: 1, 3, 4, 1\n+        return list;\n+    }\n \n     public Collection makeCollection() {\n         return makeEmptyList();\n         }\n     }\n \n+    public void testEmptyListSerialization() \n+    throws IOException, ClassNotFoundException {\n+        List list = makeEmptyList();\n+        if (!(list instanceof Serializable)) return;\n+        \n+        byte[] objekt = writeExternalFormToBytes((Serializable) list);\n+        List list2 = (List) readExternalFormFromBytes(objekt);\n+\n+        assertTrue(\"Both lists are empty\",list.size()  == 0);\n+        assertTrue(\"Both lists are empty\",list2.size() == 0);\n+    }\n+\n+    public void testFullListSerialization() \n+    throws IOException, ClassNotFoundException {\n+        List list = makeFullList();\n+        if (!(list instanceof Serializable)) return;\n+        \n+        byte[] objekt = writeExternalFormToBytes((Serializable) list);\n+        List list2 = (List) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Both lists are same size\",list.size(), 4);\n+        assertEquals(\"Both lists are same size\",list2.size(),4);\n+    }\n+\n }", "timestamp": 1014744740, "metainfo": ""}