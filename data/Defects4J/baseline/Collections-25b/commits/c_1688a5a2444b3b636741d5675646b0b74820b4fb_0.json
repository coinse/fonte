{"sha": "1688a5a2444b3b636741d5675646b0b74820b4fb", "log": "Fixed the problem reported by Thomas Fahrmeyer <thomas.fahrmeyer@einsurance.de> where ExtendedProperties would re-process data when making a subset.  Hope no one was depending on that :)  Also adjusted the testcase to test this. PR: Obtained from: Submitted by: Reviewed by:   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n  * @author <a href=\"mailto:kjohnson@transparent.com>Kent Johnson</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com>Daniel Rall</a>\n  * @author <a href=\"mailto:ipriha@surfeu.fi>Ilkka Priha</a>\n- * @version $Id: ExtendedProperties.java,v 1.2 2001/05/04 02:22:48 geirm Exp $\n+ * @version $Id: ExtendedProperties.java,v 1.3 2001/05/10 00:40:08 geirm Exp $\n  */\n public class ExtendedProperties extends Hashtable\n {\n                     else\n                     {\n                         addProperty(key,value);\n-                        //setProperty(key,value);\n                     }                       \n                 }\n             }\n      * @param String key\n      * @param String value\n      */\n-    //public void setProperty(String key, Object token)\n     public void addProperty(String key, Object token)\n     {\n         Object o = this.get(key);\n                 while (tokenizer.hasMoreTokens())\n                 {\n                     String value = tokenizer.nextToken();\n-                    \n+                   \n                     /*\n                      * we know this is a string, so make sure it\n                      * just goes in rather than risking vectorization\n                  * in a definite order it will be possible.\n                  */\n \n-                /*\n-                 * safety check\n-                 */\n-\n-                if( !containsKey( key ) )\n-                {\n-                    keysAsListed.add(key);\n-                }\n-\n-                /*\n-                 * and the value\n-                 */\n-                put(key, token);\n+                addPropertyDirect( key, token );\n             }                \n         }\n     }\n \n+    /**\n+     *   Adds a key/value pair to the map.  This routine does\n+     *   no magic morphing.  It ensures the keylist is maintained\n+     *\n+     *  @param key key to use for mapping\n+     *  @param obj object to store\n+     */\n+    private void addPropertyDirect( String key, Object obj )\n+    {\n+        /*\n+         * safety check\n+         */\n+        \n+        if( !containsKey( key ) )\n+        {\n+            keysAsListed.add(key);\n+        }\n+        \n+        /*\n+         * and the value\n+         */\n+        put(key, obj);\n+    }\n \n     /**\n      *  Sets a string property w/o checking for commas - used\n         }\n         else\n         {\n-            if( !containsKey( key ) )\n-            {\n-                keysAsListed.add(key);\n-            }\n-\n-            put( key, token);\n+            addPropertyDirect( key, token );\n         }\n     }\n \n         for (Iterator i = c.getKeys() ; i.hasNext() ;)\n         {\n             String key = (String) i.next();\n-            //clearProperty(key);\n             setProperty( key, c.get(key) );\n         }\n     }\n                 }                    \n                 \n                 /*\n-                 * Make sure to use the setProperty() method and not\n-                 * just put(). setProperty() takes care of catching\n-                 * all the keys in the order they appear in a\n-                 * properties files or the order they are set\n-                 * dynamically.\n+                 *  use addPropertyDirect() - this will plug the data as \n+                 *  is into the Map, but will also do the right thing\n+                 *  re key accounting\n                  */\n \n-                c.setProperty(newKey, get(key));\n+                c.addPropertyDirect( newKey, get(key) );\n             }\n         }\n         \n--- a/src/test/org/apache/commons/collections/TestExtendedProperties.java\n+++ b/src/test/org/apache/commons/collections/TestExtendedProperties.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestExtendedProperties.java,v 1.1 2001/05/04 02:23:44 geirm Exp $\n- * $Revision: 1.1 $\n- * $Date: 2001/05/04 02:23:44 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestExtendedProperties.java,v 1.2 2001/05/10 00:40:09 geirm Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2001/05/10 00:40:09 $\n  *\n  * ====================================================================\n  *\n  *   class\n  * \n  *   @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n- *   @version $Id: TestExtendedProperties.java,v 1.1 2001/05/04 02:23:44 geirm Exp $\n+ *   @version $Id: TestExtendedProperties.java,v 1.2 2001/05/10 00:40:09 geirm Exp $\n  */\n public class TestExtendedProperties extends TestCase\n {\n          *  property\n          */\n         assert(\"This returns scalar\", ( eprop.getString(\"number\") instanceof String ) );\n+\n+        /*\n+         * test comma separated string properties\n+         */\n+        String prop = \"hey, that's a test\";\n+        eprop.setProperty(\"prop.string\", prop);\n+        assert(\"This returns vector\", ( eprop.getVector(\"prop.string\") instanceof java.util.Vector ) );\n+        \n+        String prop2 = \"hey\\\\, that's a test\";\n+        eprop.remove(\"prop.string\");\n+        eprop.setProperty(\"prop.string\", prop2);\n+        assert(\"This returns array\", ( eprop.getString(\"prop.string\") instanceof java.lang.String) );\n+        \n+        /*\n+         * test subset : we want to make sure that the EP doesn't reprocess the data \n+         *  elements when generating the subset\n+         */\n+\n+        ExtendedProperties subEprop = eprop.subset(\"prop\");\n+\n+        assert(\"Returns the full string\",  subEprop.getString(\"string\").equals( prop ) );\n+        assert(\"This returns string for subset\", ( subEprop.getString(\"string\") instanceof java.lang.String) );\n+        assert(\"This returns array for subset\", ( subEprop.getVector(\"string\") instanceof java.util.Vector) );\n+        \n     }\n }", "timestamp": 989455209, "metainfo": ""}