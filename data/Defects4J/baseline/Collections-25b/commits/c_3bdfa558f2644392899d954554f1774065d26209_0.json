{"sha": "3bdfa558f2644392899d954554f1774065d26209", "log": "Make buffers serializable   ", "commit": "\n--- a/src/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n  */\n package org.apache.commons.collections.buffer;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.util.AbstractCollection;\n import java.util.Arrays;\n import java.util.Collection;\n  * </pre>\n  * <p>\n  * This buffer prevents null objects from being added.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0 (previously in main package v2.1)\n- * @version $Revision: 1.7 $ $Date: 2004/02/18 00:58:18 $\n+ * @version $Revision: 1.8 $ $Date: 2004/06/02 23:12:44 $\n  * \n  * @author Avalon\n  * @author Berin Loritsch\n  * @author Herve Quiroz\n  */\n public class BoundedFifoBuffer extends AbstractCollection\n-        implements Buffer, BoundedCollection {\n-            \n-    private final Object[] elements;\n-    private int start = 0;\n-    private int end = 0;\n-    private boolean full = false;\n+        implements Buffer, BoundedCollection, Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 5603722811189451017L;\n+\n+    private transient Object[] elements;\n+    private transient int start = 0;\n+    private transient int end = 0;\n+    private transient boolean full = false;\n     private final int maxElements;\n \n     /**\n         addAll(coll);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the buffer out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeInt(size());\n+        for (Iterator it = iterator(); it.hasNext();) {\n+            out.writeObject(it.next());\n+        }\n+    }\n+\n+    /**\n+     * Read the buffer in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        elements = new Object[maxElements];\n+        int size = in.readInt();\n+        for (int i = 0; i < size; i++) {\n+            elements[i] = in.readObject();\n+        }\n+        start = 0;\n+        end = size;\n+        full = (size == maxElements);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the number of elements stored in the buffer.\n      *\n--- a/src/java/org/apache/commons/collections/buffer/CircularFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/buffer/CircularFifoBuffer.java\n  * </pre>\n  * <p>\n  * This buffer prevents null objects from being added.\n+ * <p>\n+ * This class is Serializable from Commons Collections 3.1.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2004/02/18 00:58:18 $\n+ * @version $Revision: 1.4 $ $Date: 2004/06/02 23:12:44 $\n  * \n  * @author Stefano Fornari\n  * @author Stephen Colebourne\n--- a/src/test/org/apache/commons/collections/buffer/TestBoundedFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestBoundedFifoBuffer.java\n /**\n  * Test cases for BoundedFifoBuffer.\n  * \n- * @version $Revision: 1.3 $ $Date: 2004/02/18 01:20:37 $\n+ * @version $Revision: 1.4 $ $Date: 2004/06/02 23:12:45 $\n  * \n  * @author Paul Jack\n  */\n         }\n         fail();\n     }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/BoundedFifoBuffer.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/BoundedFifoBuffer.fullCollection.version3.1.obj\");\n+//    }\n+\n }\n--- a/src/test/org/apache/commons/collections/buffer/TestCircularFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/buffer/TestCircularFifoBuffer.java\n /**\n  * Test cases for CircularFifoBuffer.\n  * \n- * @version $Revision: 1.3 $ $Date: 2004/02/18 01:20:37 $\n+ * @version $Revision: 1.4 $ $Date: 2004/06/02 23:12:45 $\n  * \n  * @author Stephen Colebourne\n  */\n         }\n         fail();\n     }\n+\n+    public String getCompatibilityVersion() {\n+        return \"3.1\";\n+    }\n+\n+//    public void testCreate() throws Exception {\n+//        resetEmpty();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/CircularFifoBuffer.emptyCollection.version3.1.obj\");\n+//        resetFull();\n+//        writeExternalFormToDisk((java.io.Serializable) collection, \"D:/dev/collections/data/test/CircularFifoBuffer.fullCollection.version3.1.obj\");\n+//    }\n+\n }", "timestamp": 1086217965, "metainfo": ""}