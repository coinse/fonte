{"sha": "e02e9818cf3e5c125e5fbc8417afd892c8dfeed0", "log": "Add BoundedCollection, from Herve Quiroz   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/BoundedCollection.java\n+/*\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+/**\n+ * A BoundedCollection is a collection that is bounded in size.\n+ * <p>\n+ * The size of the collection can vary, but it can never exceed a preset \n+ * maximum number of elements. This interface allows the querying of details\n+ * associated with the maximum number of elements.\n+ *\n+ * @since 2.2\n+ * @author <a href=\"herve.quiroz@esil.univ-mrs.fr\">Herve Quiroz</a>\n+ * @author Stephen Colebourne\n+ * @version $Id: BoundedCollection.java,v 1.1 2002/11/24 16:23:21 scolebourne Exp $\n+ */\n+public interface BoundedCollection extends Collection {\n+\n+    /**\n+     * Returns true if this collection is full and no new elements can be added.\n+     *\n+     * @return <code>true</code> if the collection is full\n+     */\n+    boolean isFull();\n+    \n+    /**\n+     * Gets the maximum size of the collection (the bound).\n+     *\n+     * @return the maximum number of elements the collection can hold\n+     */\n+    int maxSize();\n+    \n+}\n--- a/src/java/org/apache/commons/collections/BoundedFifoBuffer.java\n+++ b/src/java/org/apache/commons/collections/BoundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BoundedFifoBuffer.java,v 1.5 2002/10/13 12:59:04 scolebourne Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/10/13 12:59:04 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BoundedFifoBuffer.java,v 1.6 2002/11/24 16:23:21 scolebourne Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/11/24 16:23:21 $\n  *\n  * ====================================================================\n  *\n  * <p>\n  * This buffer prevents null objects from being added.\n  *\n+ * @since 2.1\n  * @author Avalon\n  * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n  * @author Paul Jack\n  * @author Stephen Colebourne\n- * @since 2.1\n- * @version $Id: BoundedFifoBuffer.java,v 1.5 2002/10/13 12:59:04 scolebourne Exp $\n+ * @author <a href=\"herve.quiroz@esil.univ-mrs.fr\">Herve Quiroz</a>\n+ * @version $Id: BoundedFifoBuffer.java,v 1.6 2002/11/24 16:23:21 scolebourne Exp $\n  */\n-public class BoundedFifoBuffer extends AbstractCollection implements Buffer {\n+public class BoundedFifoBuffer extends AbstractCollection implements Buffer, BoundedCollection {\n     private final Object[] m_elements;\n     private int m_start = 0;\n     private int m_end = 0;\n         return size() == 0;\n     }\n \n+    /**\n+     * Returns true if this collection is full and no new elements can be added.\n+     *\n+     * @return <code>true</code> if the collection is full\n+     */\n+    public boolean isFull() {\n+        return size() == m_elements.length;\n+    }\n+    \n+    /**\n+     * Gets the maximum size of the collection (the bound).\n+     *\n+     * @return the maximum number of elements the collection can hold\n+     */\n+    public int maxSize() {\n+        return m_elements.length;\n+    }\n+    \n     /**\n      * Clears this buffer.\n      */\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Id: CollectionUtils.java,v 1.19 2002/11/01 19:54:26 rwaldhoff Exp $\n- * $Revision: 1.19 $\n- * $Date: 2002/11/01 19:54:26 $\n+ * $Id: CollectionUtils.java,v 1.20 2002/11/24 16:23:21 scolebourne Exp $\n+ * $Revision: 1.20 $\n+ * $Date: 2002/11/24 16:23:21 $\n  *\n  * ====================================================================\n  *\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.collections;\n \n import java.util.ArrayList;\n \n import org.apache.commons.collections.iterators.ArrayIterator;\n import org.apache.commons.collections.iterators.EnumerationIterator;\n-\n /**\n  * A set of {@link Collection} related utility methods.\n  *\n  * @author Paul Jack\n  * @author Stephen Colebourne\n  * @author Steve Downey\n- * @version $Revision: 1.19 $ $Date: 2002/11/01 19:54:26 $\n+ * @author <a href=\"herve.quiroz@esil.univ-mrs.fr\">Herve Quiroz</a>\n+ * @version $Revision: 1.20 $ $Date: 2002/11/24 16:23:21 $\n  */\n public class CollectionUtils {\n \n     }\n \n \n-    /** Reverses the order of the given array */\n+    /** \n+     * Reverses the order of the given array \n+     * \n+     * @param array  the array to reverse\n+     */\n     public static void reverseArray(Object[] array) {\n         int i = 0;\n         int j = array.length - 1;\n         Object tmp;\n-        \n-        while(j>i) {\n+\n+        while (j > i) {\n             tmp = array[j];\n             array[j] = array[i];\n             array[i] = tmp;\n             // ignored\n         }\n         return 0;\n+    }\n+\n+    /**\n+     * Returns true if no more elements can be added to the Collection.\n+     * <p>\n+     * This method uses the {@link BoundedCollection} class to determine the\n+     * full status. If the collection does not implement this interface then\n+     * false is returned.\n+     * <p>\n+     * This method handles the synchronized, blocking, unmodifiable \n+     * and predicated decorators.\n+     *\n+     * @return  true if the Collection is full\n+     * @throws NullPointerException if the collection is null\n+     */\n+    public static boolean isFull(Collection coll) {\n+        if (coll == null) {\n+            throw new NullPointerException(\"The collection must not be null\");\n+        }\n+        Collection unwrappedCollection = coll;\n+        \n+        // handle decorators\n+        while (true) {\n+            if (unwrappedCollection instanceof CollectionUtils.CollectionWrapper) {\n+                unwrappedCollection = ((CollectionUtils.CollectionWrapper) unwrappedCollection).collection;\n+            } else if (unwrappedCollection instanceof CollectionUtils.SynchronizedCollection) {\n+                unwrappedCollection = ((CollectionUtils.SynchronizedCollection) unwrappedCollection).collection;\n+            } else {\n+                break;\n+            }\n+        }\n+        \n+        // is it full\n+        if (unwrappedCollection instanceof BoundedCollection) {\n+            return ((BoundedCollection) unwrappedCollection).isFull();\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Get the maximum number of elements that the Collection can contain.\n+     * <p>\n+     * This method uses the {@link BoundedCollection} class to determine the\n+     * maximum size. If the collection does not implement this interface then\n+     * -1 is returned.\n+     * <p>\n+     * This method handles the synchronized, blocking, unmodifiable \n+     * and predicated decorators.\n+     *\n+     * @return the maximum size of the Collection, -1 if no maximum size\n+     * @throws NullPointerException if the collection is null\n+     */\n+    public static int maxSize(Collection coll) {\n+        if (coll == null) {\n+            throw new NullPointerException(\"The collection must not be null\");\n+        }\n+        Collection unwrappedCollection = coll;\n+        \n+        // handle decorators\n+        while (true) {\n+            if (unwrappedCollection instanceof CollectionUtils.CollectionWrapper) {\n+                unwrappedCollection = ((CollectionUtils.CollectionWrapper) unwrappedCollection).collection;\n+            } else if (unwrappedCollection instanceof CollectionUtils.SynchronizedCollection) {\n+                unwrappedCollection = ((CollectionUtils.SynchronizedCollection) unwrappedCollection).collection;\n+            } else {\n+                break;\n+            }\n+        }\n+        \n+        // get max size\n+        if (unwrappedCollection instanceof BoundedCollection) {\n+            return ((BoundedCollection) unwrappedCollection).maxSize();\n+        }\n+        return -1;\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/TestBoundedFifoBuffer2.java\n+++ b/src/test/org/apache/commons/collections/TestBoundedFifoBuffer2.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBoundedFifoBuffer2.java,v 1.3 2002/10/12 22:36:21 scolebourne Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/10/12 22:36:21 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBoundedFifoBuffer2.java,v 1.4 2002/11/24 16:23:21 scolebourne Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/11/24 16:23:21 $\n  *\n  * ====================================================================\n  *\n         verify();\n     }\n \n+    /**\n+     * Tests is full\n+     */\n+    public void testIsFull() {\n+        resetFull();\n+        assertEquals(true, ((BoundedCollection) collection).isFull());\n+        ((BoundedFifoBuffer) collection).remove();\n+        assertEquals(false, ((BoundedCollection) collection).isFull());\n+        ((BoundedFifoBuffer) collection).add(\"jj\");\n+        assertEquals(true, ((BoundedCollection) collection).isFull());\n+    }\n+\n+    /**\n+     * Tests max size\n+     */\n+    public void testMaxSize() {\n+        resetFull();\n+        assertEquals(getFullElements().length, ((BoundedCollection) collection).maxSize());\n+        ((BoundedFifoBuffer) collection).remove();\n+        assertEquals(getFullElements().length, ((BoundedCollection) collection).maxSize());\n+        ((BoundedFifoBuffer) collection).add(\"jj\");\n+        assertEquals(getFullElements().length, ((BoundedCollection) collection).maxSize());\n+    }\n+\n }\n \n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Id: TestCollectionUtils.java,v 1.7 2002/11/01 19:54:27 rwaldhoff Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/11/01 19:54:27 $\n+ * $Id: TestCollectionUtils.java,v 1.8 2002/11/24 16:23:21 scolebourne Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/11/24 16:23:21 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author Rodney Waldhoff\n- * @version $Revision: 1.7 $ $Date: 2002/11/01 19:54:27 $\n+ * @version $Revision: 1.8 $ $Date: 2002/11/24 16:23:21 $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n         };\n     }\n \n+    public void testIsFull() {\n+        Set set = new HashSet();\n+        set.add(\"1\");\n+        set.add(\"2\");\n+        set.add(\"3\");\n+        try {\n+            CollectionUtils.isFull(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        assertEquals(false, CollectionUtils.isFull(set));\n+        \n+        BoundedFifoBuffer buf = new BoundedFifoBuffer(set);\n+        assertEquals(true, CollectionUtils.isFull(buf));\n+        buf.remove(\"2\");\n+        assertEquals(false, CollectionUtils.isFull(buf));\n+        buf.add(\"2\");\n+        assertEquals(true, CollectionUtils.isFull(buf));\n+        \n+        Buffer buf2 = BufferUtils.synchronizedBuffer(buf);\n+        assertEquals(true, CollectionUtils.isFull(buf2));\n+        buf2.remove(\"2\");\n+        assertEquals(false, CollectionUtils.isFull(buf2));\n+        buf2.add(\"2\");\n+        assertEquals(true, CollectionUtils.isFull(buf2));\n+    }\n+\n+    public void testMaxSize() {\n+        Set set = new HashSet();\n+        set.add(\"1\");\n+        set.add(\"2\");\n+        set.add(\"3\");\n+        try {\n+            CollectionUtils.maxSize(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        assertEquals(-1, CollectionUtils.maxSize(set));\n+        \n+        BoundedFifoBuffer buf = new BoundedFifoBuffer(set);\n+        assertEquals(3, CollectionUtils.maxSize(buf));\n+        buf.remove(\"2\");\n+        assertEquals(3, CollectionUtils.maxSize(buf));\n+        buf.add(\"2\");\n+        assertEquals(3, CollectionUtils.maxSize(buf));\n+        \n+        Buffer buf2 = BufferUtils.synchronizedBuffer(buf);\n+        assertEquals(3, CollectionUtils.maxSize(buf2));\n+        buf2.remove(\"2\");\n+        assertEquals(3, CollectionUtils.maxSize(buf2));\n+        buf2.add(\"2\");\n+        assertEquals(3, CollectionUtils.maxSize(buf2));\n+    }\n+\n }", "timestamp": 1038155001, "metainfo": ""}