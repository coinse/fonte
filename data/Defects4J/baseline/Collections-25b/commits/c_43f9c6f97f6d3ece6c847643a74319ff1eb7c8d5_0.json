{"sha": "43f9c6f97f6d3ece6c847643a74319ff1eb7c8d5", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r643795 | skestle | 2008-04-02 01:49:57 -0700 (Wed, 02 Apr 2008) | 5 lines          Generified EqualPredicate and created individual test class moved from TestPredicateUtils          Added assertFalse() and assertTrue to BasicPredicateTestBase with (Predicate, Object) parameters          Issues: COLLECTIONS-243, COLLECTIONS-253, COLLECTIONS-293     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/java/org/apache/commons/collections/TransformerUtils.java\n package org.apache.commons.collections;\n \n import java.util.Collection;\n-import java.util.Iterator;\n import java.util.Map;\n \n import org.apache.commons.collections.functors.ChainedTransformer;\n      * \n      * @return the transformer\n      */\n-    public static Transformer exceptionTransformer() {\n-        return ExceptionTransformer.INSTANCE;\n+    public static <I, O> Transformer<I, O> exceptionTransformer() {\n+        return ExceptionTransformer.<I, O>getInstance();\n     }\n \n     /**\n      * \n      * @return the transformer\n      */\n-    public static Transformer nullTransformer() {\n-        return ConstantTransformer.NULL_INSTANCE;\n+    public static <I, O> Transformer<I, O> nullTransformer() {\n+        return ConstantTransformer.<I, O>getNullInstance();\n     }\n \n     /**\n      * \n      * @return the transformer\n      */\n-    public static Transformer nopTransformer() {\n-        return NOPTransformer.INSTANCE;\n+    public static <T> Transformer<T, T> nopTransformer() {\n+        return NOPTransformer.<T>getInstance();\n     }\n \n     /**\n      * \n      * @return the transformer\n      */\n-    public static Transformer cloneTransformer() {\n-        return CloneTransformer.INSTANCE;\n+    public static <T> Transformer<T, T> cloneTransformer() {\n+        return CloneTransformer.<T>getInstance();\n     }\n \n     /**\n      * @param constantToReturn  the constant object to return each time in the transformer\n      * @return the transformer.\n      */\n-    public static Transformer constantTransformer(Object constantToReturn) {\n+    public static <I, O> Transformer<I, O> constantTransformer(O constantToReturn) {\n         return ConstantTransformer.getInstance(constantToReturn);\n     }\n \n      * @return the transformer\n      * @throws IllegalArgumentException if the closure is null\n      */\n-    public static Transformer asTransformer(Closure closure) {\n+    public static <T> Transformer<T, T> asTransformer(Closure<? super T> closure) {\n         return ClosureTransformer.getInstance(closure);\n     }\n \n      * @return the transformer\n      * @throws IllegalArgumentException if the predicate is null\n      */\n-    public static Transformer asTransformer(Predicate predicate) {\n+    public static <T> Transformer<T, Boolean> asTransformer(Predicate<? super T> predicate) {\n         return PredicateTransformer.getInstance(predicate);\n     }\n \n      * @return the transformer\n      * @throws IllegalArgumentException if the factory is null\n      */\n-    public static Transformer asTransformer(Factory factory) {\n+    public static <I, O> Transformer<I, O> asTransformer(Factory<? extends O> factory) {\n         return FactoryTransformer.getInstance(factory);\n     }\n \n      * @return the transformer\n      * @throws IllegalArgumentException if either transformer is null\n      */\n-    public static Transformer chainedTransformer(Transformer transformer1, Transformer transformer2) {\n-        return ChainedTransformer.getInstance(transformer1, transformer2);\n+    public static <T> Transformer<T, T> chainedTransformer(\n+            Transformer<? super T, ? extends T> transformer1,\n+            Transformer<? super T, ? extends T> transformer2) {\n+        return ChainedTransformer.<T>getInstance(transformer1, transformer2);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the transformers array is null\n      * @throws IllegalArgumentException if any transformer in the array is null\n      */\n-    public static Transformer chainedTransformer(Transformer[] transformers) {\n+    public static <T> Transformer<T, T> chainedTransformer(Transformer<? super T, ? extends T>[] transformers) {\n         return ChainedTransformer.getInstance(transformers);\n     }\n \n      * @throws IllegalArgumentException if the transformers collection is null\n      * @throws IllegalArgumentException if any transformer in the collection is null\n      */\n-    public static Transformer chainedTransformer(Collection transformers) {\n+    public static <T> Transformer<T, T> chainedTransformer(\n+            Collection<? extends Transformer<T, T>> transformers) {\n         return ChainedTransformer.getInstance(transformers);\n     }\n \n      * @throws IllegalArgumentException if the predicate is null\n      * @throws IllegalArgumentException if either transformer is null\n      */\n-    public static Transformer switchTransformer(Predicate predicate, Transformer trueTransformer, Transformer falseTransformer) {\n-        return SwitchTransformer.getInstance(new Predicate[] { predicate }, new Transformer[] { trueTransformer }, falseTransformer);\n+    @SuppressWarnings(\"unchecked\")\n+    public static <I, O> Transformer<I, O> switchTransformer(Predicate<? super I> predicate,\n+            Transformer<? super I, ? extends O> trueTransformer,\n+            Transformer<? super I, ? extends O> falseTransformer) {\n+        return SwitchTransformer.getInstance(new Predicate[] { predicate },\n+                new Transformer[] { trueTransformer }, falseTransformer);\n     }\n \n     /**\n      * @throws IllegalArgumentException if any element in the arrays is null\n      * @throws IllegalArgumentException if the arrays are different sizes\n      */\n-    public static Transformer switchTransformer(Predicate[] predicates, Transformer[] transformers) {\n-        return SwitchTransformer.getInstance(predicates, transformers, null);\n+    public static <I, O> Transformer<I, O> switchTransformer(Predicate<? super I>[] predicates,\n+            Transformer<? super I, ? extends O>[] transformers) {\n+        return SwitchTransformer.<I, O>getInstance(predicates, transformers, null);\n     }\n \n     /**\n      * @throws IllegalArgumentException if any element in the arrays is null\n      * @throws IllegalArgumentException if the arrays are different sizes\n      */\n-    public static Transformer switchTransformer(Predicate[] predicates, Transformer[] transformers, Transformer defaultTransformer) {\n-        return SwitchTransformer.getInstance(predicates, transformers, defaultTransformer);\n+    public static <I, O> Transformer<I, O> switchTransformer(Predicate<? super I>[] predicates,\n+            Transformer<? super I, ? extends O>[] transformers,\n+            Transformer<? super I, ? extends O> defaultTransformer) {\n+        return SwitchTransformer.<I, O>getInstance(predicates, transformers, defaultTransformer);\n     }\n \n     /**\n      * @throws IllegalArgumentException if any transformer in the map is null\n      * @throws ClassCastException  if the map elements are of the wrong type\n      */\n-    public static Transformer switchTransformer(Map predicatesAndTransformers) {\n-        return SwitchTransformer.getInstance(predicatesAndTransformers);\n+    public static <I, O> Transformer<I, O> switchTransformer(\n+            Map<Predicate<I>, Transformer<I, O>> predicatesAndTransformers) {\n+        return SwitchTransformer.<I, O>getInstance(predicatesAndTransformers);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the map is empty\n      * @throws IllegalArgumentException if any transformer in the map is null\n      */\n-    public static Transformer switchMapTransformer(Map objectsAndTransformers) {\n-        Transformer[] trs = null;\n-        Predicate[] preds = null;\n+    @SuppressWarnings(\"unchecked\")\n+    public static <I, O> Transformer<I, O> switchMapTransformer(Map<I, Transformer<I, O>> objectsAndTransformers) {\n+        Transformer<? super I, ? extends O>[] trs = null;\n+        Predicate<I>[] preds = null;\n         if (objectsAndTransformers == null) {\n             throw new IllegalArgumentException(\"The object and transformer map must not be null\");\n         }\n-        Transformer def = (Transformer) objectsAndTransformers.remove(null);\n+        Transformer<? super I, ? extends O> def = objectsAndTransformers.remove(null);\n         int size = objectsAndTransformers.size();\n         trs = new Transformer[size];\n         preds = new Predicate[size];\n         int i = 0;\n-        for (Iterator it = objectsAndTransformers.entrySet().iterator(); it.hasNext();) {\n-            Map.Entry entry = (Map.Entry) it.next();\n-            preds[i] = EqualPredicate.getInstance(entry.getKey());\n-            trs[i] = (Transformer) entry.getValue();\n-            i++;\n+        for (Map.Entry<I, Transformer<I, O>> entry : objectsAndTransformers.entrySet()) {\n+            preds[i] = EqualPredicate.<I>equalPredicate(entry.getKey());\n+            trs[i++] = entry.getValue();\n         }\n-        return switchTransformer(preds, trs, def);\n+        return TransformerUtils.<I, O>switchTransformer(preds, trs, def);\n     }\n \n     /**\n      * \n      * @return the transformer\n      */\n-    public static Transformer instantiateTransformer() {\n-        return InstantiateTransformer.NO_ARG_INSTANCE;\n+    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {\n+        return InstantiateTransformer.<T>getInstance();\n     }\n \n     /** \n      * @return the transformer\n      * @throws IllegalArgumentException if the paramTypes and args don't match\n      */\n-    public static Transformer instantiateTransformer(Class[] paramTypes, Object[] args) {\n-        return InstantiateTransformer.getInstance(paramTypes, args);\n+    public static <T> Transformer<Class<? extends T>, T> instantiateTransformer(\n+            Class<?>[] paramTypes, Object[] args) {\n+        return InstantiateTransformer.<T>getInstance(paramTypes, args);\n     }\n \n     /** \n      * @return the transformer\n      * @throws IllegalArgumentException if the map is null\n      */\n-    public static Transformer mapTransformer(Map map) {\n+    public static <I, O> Transformer<I, O> mapTransformer(Map<? super I, ? extends O> map) {\n         return MapTransformer.getInstance(map);\n     }\n \n      * @return the transformer\n      * @throws IllegalArgumentException if the methodName is null.\n      */\n-    public static Transformer invokerTransformer(String methodName){\n-        return InvokerTransformer.getInstance(methodName, null, null);\n+    public static <I, O> Transformer<I, O> invokerTransformer(String methodName){\n+        return InvokerTransformer.<I, O>getInstance(methodName, null, null);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the method name is null\n      * @throws IllegalArgumentException if the paramTypes and args don't match\n      */\n-    public static Transformer invokerTransformer(String methodName, Class[] paramTypes, Object[] args){\n-        return InvokerTransformer.getInstance(methodName, paramTypes, args);\n+    public static <I, O> Transformer<I, O> invokerTransformer(String methodName, Class<?>[] paramTypes, Object[] args){\n+        return InvokerTransformer.<I, O>getInstance(methodName, paramTypes, args);\n     }\n \n     /**\n      * \n      * @return the transformer\n      */\n-    public static Transformer stringValueTransformer() {\n-        return StringValueTransformer.INSTANCE;\n+    public static <T> Transformer<T, String> stringValueTransformer() {\n+        return StringValueTransformer.<T>getInstance();\n     }\n     \n }", "timestamp": 1252994211, "metainfo": ""}