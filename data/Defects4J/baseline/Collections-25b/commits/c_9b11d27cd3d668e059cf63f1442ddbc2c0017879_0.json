{"sha": "9b11d27cd3d668e059cf63f1442ddbc2c0017879", "log": "Add missing javadoc for generic type, rearrange order of javadoc tags, remove deprecation -> see COLLECTIONS-251.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/main/java/org/apache/commons/collections/PredicateUtils.java\n      * Gets a Predicate that always throws an exception.\n      * This could be useful during testing as a placeholder.\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @return the predicate\n      * @see org.apache.commons.collections.functors.ExceptionPredicate\n-     *\n-     * @return the predicate\n      */\n     public static <T> Predicate<T> exceptionPredicate() {\n         return ExceptionPredicate.<T>exceptionPredicate();\n     /**\n      * Gets a Predicate that always returns true.\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @return the predicate\n      * @see org.apache.commons.collections.functors.TruePredicate\n-     *\n-     * @return the predicate\n-     * @deprecated use {@link TruePredicate#truePredicate()} instead.\n-     */\n-    @Deprecated\n+     */\n     public static <T> Predicate<T> truePredicate() {\n         return TruePredicate.truePredicate();\n     }\n     /**\n      * Gets a Predicate that always returns false.\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @return the predicate\n      * @see org.apache.commons.collections.functors.FalsePredicate\n-     *\n-     * @return the predicate\n-     * @deprecated use {@link FalsePredicate#falsePredicate()} instead.\n-     */\n-    @Deprecated\n+     */\n     public static <T> Predicate<T> falsePredicate() {\n         return FalsePredicate.<T> falsePredicate();\n     }\n     /**\n      * Gets a Predicate that checks if the input object passed in is null.\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @return the predicate\n      * @see org.apache.commons.collections.functors.NullPredicate\n-     *\n-     * @return the predicate\n-     * @deprecated use {@link NullPredicate#nullPredicate()} instead\n-     */\n-    @Deprecated\n+     */\n     public static <T> Predicate<T> nullPredicate() {\n         return NullPredicate.nullPredicate();\n     }\n     /**\n      * Gets a Predicate that checks if the input object passed in is not null.\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @return the predicate\n      * @see org.apache.commons.collections.functors.NotNullPredicate\n-     *\n-     * @return the predicate\n      */\n     public static <T> Predicate<T> notNullPredicate() {\n         return NotNullPredicate.<T>notNullPredicate();\n      * Creates a Predicate that checks if the input object is equal to the\n      * specified object using equals().\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @param value  the value to compare against\n+     * @return the predicate\n      * @see org.apache.commons.collections.functors.EqualPredicate\n-     *\n-     * @param value  the value to compare against\n-     * @return the predicate\n-     * @deprecated use {@link EqualPredicate#equalPredicate(Object)} instead.\n-     */\n-    @Deprecated\n+     */\n     public static <T> Predicate<T> equalPredicate(final T value) {\n         return EqualPredicate.equalPredicate(value);\n     }\n      * Creates a Predicate that checks if the input object is equal to the\n      * specified object by identity.\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @param value  the value to compare against\n+     * @return the predicate\n      * @see org.apache.commons.collections.functors.IdentityPredicate\n-     *\n-     * @param value  the value to compare against\n-     * @return the predicate\n      */\n     public static <T> Predicate<T> identityPredicate(final T value) {\n         return IdentityPredicate.<T>identityPredicate(value);\n      * a particular type, using instanceof. A <code>null</code> input\n      * object will return <code>false</code>.\n      *\n+     * @param type  the type to check for, may not be null\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the class is null\n      * @see org.apache.commons.collections.functors.InstanceofPredicate\n-     *\n-     * @param type  the type to check for, may not be null\n-     * @return the predicate\n-     * @throws IllegalArgumentException if the class is null\n      */\n     public static Predicate<Object> instanceofPredicate(final Class<?> type) {\n         return InstanceofPredicate.instanceOfPredicate(type);\n      * is accepted and will return true the first time, and false subsequently\n      * as well.\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @return the predicate\n      * @see org.apache.commons.collections.functors.UniquePredicate\n-     *\n-     * @return the predicate\n      */\n     public static <T> Predicate<T> uniquePredicate() {\n         // must return new instance each time\n      * will call the <code>isEmpty</code> method on the input object to\n      * determine the predicate result.\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @param methodName  the method name to call on the input object, may not be null\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the methodName is null.\n      * @see org.apache.commons.collections.functors.InvokerTransformer\n      * @see org.apache.commons.collections.functors.TransformerPredicate\n-     *\n-     * @param methodName  the method name to call on the input object, may not be null\n-     * @return the predicate\n-     * @throws IllegalArgumentException if the methodName is null.\n-     */\n-    public static <T> Predicate<T> invokerPredicate(final String methodName){\n+     */\n+    public static <T> Predicate<T> invokerPredicate(final String methodName) {\n         // reuse transformer as it has caching - this is lazy really, should have inner class here\n         return asPredicate(InvokerTransformer.<Object, Boolean>invokerTransformer(methodName));\n     }\n      * will call the <code>isEmpty</code> method on the input object to\n      * determine the predicate result.\n      *\n-     * @see org.apache.commons.collections.functors.InvokerTransformer\n-     * @see org.apache.commons.collections.functors.TransformerPredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param methodName  the method name to call on the input object, may not be null\n      * @param paramTypes  the parameter types\n      * @param args  the arguments\n      * @return the predicate\n      * @throws IllegalArgumentException if the method name is null\n      * @throws IllegalArgumentException if the paramTypes and args don't match\n+     * @see org.apache.commons.collections.functors.InvokerTransformer\n+     * @see org.apache.commons.collections.functors.TransformerPredicate\n      */\n     public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes,\n                                                     final Object[] args) {\n      * Create a new Predicate that returns true only if both of the specified\n      * predicates are true.\n      *\n-     * @see org.apache.commons.collections.functors.AndPredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>and</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n+     * @see org.apache.commons.collections.functors.AndPredicate\n      */\n     public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1,\n                                                 final Predicate<? super T> predicate2) {\n      * predicates are true.\n      * If the array of predicates is empty, then this predicate returns true.\n      *\n-     * @see org.apache.commons.collections.functors.AllPredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n-     * @deprecated use {@link AllPredicate#allPredicate(Predicate...)} instead.\n-     */\n-    @Deprecated\n+     * @see org.apache.commons.collections.functors.AllPredicate\n+     */\n     public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates) {\n         return AllPredicate.allPredicate(predicates);\n     }\n      * predicates are true. The predicates are checked in iterator order.\n      * If the collection of predicates is empty, then this predicate returns true.\n      *\n-     * @see org.apache.commons.collections.functors.AllPredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n+     * @see org.apache.commons.collections.functors.AllPredicate\n      */\n     public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<T>> predicates) {\n         return AllPredicate.allPredicate(predicates);\n      * Create a new Predicate that returns true if either of the specified\n      * predicates are true.\n      *\n-     * @see org.apache.commons.collections.functors.OrPredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>or</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n+     * @see org.apache.commons.collections.functors.OrPredicate\n      */\n     public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1,\n                                                final Predicate<? super T> predicate2) {\n      * predicates are true.\n      * If the array of predicates is empty, then this predicate returns false.\n      *\n-     * @see org.apache.commons.collections.functors.AnyPredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n+     * @see org.apache.commons.collections.functors.AnyPredicate\n      */\n     public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates) {\n         return AnyPredicate.anyPredicate(predicates);\n      * predicates are true. The predicates are checked in iterator order.\n      * If the collection of predicates is empty, then this predicate returns false.\n      *\n-     * @see org.apache.commons.collections.functors.AnyPredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n+     * @see org.apache.commons.collections.functors.AnyPredicate\n      */\n     public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<T>> predicates) {\n         return AnyPredicate.anyPredicate(predicates);\n      * Create a new Predicate that returns true if one, but not both, of the\n      * specified predicates are true. XOR\n      *\n-     * @see org.apache.commons.collections.functors.OnePredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>either</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n+     * @see org.apache.commons.collections.functors.OnePredicate\n      */\n     public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1,\n                                                    final Predicate<? super T> predicate2) {\n         @SuppressWarnings(\"unchecked\")\n-        final\n-        Predicate<T> onePredicate = PredicateUtils.<T>onePredicate(predicate1, predicate2);\n+        final Predicate<T> onePredicate = PredicateUtils.<T>onePredicate(predicate1, predicate2);\n         return onePredicate;\n     }\n \n      * predicates are true.\n      * If the array of predicates is empty, then this predicate returns false.\n      *\n-     * @see org.apache.commons.collections.functors.OnePredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n+     * @see org.apache.commons.collections.functors.OnePredicate\n      */\n     public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates) {\n         return OnePredicate.onePredicate(predicates);\n      * predicates are true. The predicates are checked in iterator order.\n      * If the collection of predicates is empty, then this predicate returns false.\n      *\n-     * @see org.apache.commons.collections.functors.OnePredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n+     * @see org.apache.commons.collections.functors.OnePredicate\n      */\n     public static <T> Predicate<T> onePredicate(final Collection<Predicate<T>> predicates) {\n         return OnePredicate.onePredicate(predicates);\n      * Create a new Predicate that returns true if neither of the specified\n      * predicates are true.\n      *\n-     * @see org.apache.commons.collections.functors.NonePredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicate1  the first predicate, may not be null\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>neither</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n+     * @see org.apache.commons.collections.functors.NonePredicate\n      */\n     public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1,\n                                                     final Predicate<? super T> predicate2) {\n         @SuppressWarnings(\"unchecked\")\n-        final\n-        Predicate<T> nonePredicate = PredicateUtils.<T>nonePredicate(predicate1, predicate2);\n+        final Predicate<T> nonePredicate = PredicateUtils.<T>nonePredicate(predicate1, predicate2);\n         return nonePredicate;\n     }\n \n      * predicates are true.\n      * If the array of predicates is empty, then this predicate returns true.\n      *\n-     * @see org.apache.commons.collections.functors.NonePredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicates  an array of predicates to check, may not be null\n      * @return the <code>none</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n+     * @see org.apache.commons.collections.functors.NonePredicate\n      */\n     public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates) {\n         return NonePredicate.nonePredicate(predicates);\n      * predicates are true. The predicates are checked in iterator order.\n      * If the collection of predicates is empty, then this predicate returns true.\n      *\n-     * @see org.apache.commons.collections.functors.NonePredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicates  a collection of predicates to check, may not be null\n      * @return the <code>none</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n+     * @see org.apache.commons.collections.functors.NonePredicate\n      */\n     public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<T>> predicates) {\n         return NonePredicate.nonePredicate(predicates);\n      * Create a new Predicate that returns true if the specified predicate\n      * returns false and vice versa.\n      *\n-     * @see org.apache.commons.collections.functors.NotPredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param predicate  the predicate to not\n      * @return the <code>not</code> predicate\n      * @throws IllegalArgumentException if the predicate is null\n+     * @see org.apache.commons.collections.functors.NotPredicate\n      */\n     public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate) {\n         return NotPredicate.notPredicate(predicate);\n      * return either Boolean.TRUE or Boolean.FALSE otherwise a PredicateException\n      * will be thrown.\n      *\n-     * @see org.apache.commons.collections.functors.TransformerPredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param transformer  the transformer to wrap, may not be null\n      * @return the transformer wrapping predicate\n      * @throws IllegalArgumentException if the transformer is null\n+     * @see org.apache.commons.collections.functors.TransformerPredicate\n      */\n     public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer) {\n         return TransformerPredicate.transformerPredicate(transformer);\n      * otherwise it calls the specified Predicate. This allows null handling\n      * behaviour to be added to Predicates that don't support nulls.\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @param predicate  the predicate to wrap, may not be null\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the predicate is null.\n      * @see org.apache.commons.collections.functors.NullIsExceptionPredicate\n-     *\n-     * @param predicate  the predicate to wrap, may not be null\n-     * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null.\n      */\n     public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate){\n         return NullIsExceptionPredicate.nullIsExceptionPredicate(predicate);\n      * it calls the specified Predicate. This allows null handling behaviour to\n      * be added to Predicates that don't support nulls.\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @param predicate  the predicate to wrap, may not be null\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the predicate is null.\n      * @see org.apache.commons.collections.functors.NullIsFalsePredicate\n-     *\n-     * @param predicate  the predicate to wrap, may not be null\n-     * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null.\n      */\n     public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate){\n         return NullIsFalsePredicate.nullIsFalsePredicate(predicate);\n      * it calls the specified Predicate. This allows null handling behaviour to\n      * be added to Predicates that don't support nulls.\n      *\n+     * @param <T>  the type that the predicate queries\n+     * @param predicate  the predicate to wrap, may not be null\n+     * @return the predicate\n+     * @throws IllegalArgumentException if the predicate is null.\n      * @see org.apache.commons.collections.functors.NullIsTruePredicate\n-     *\n-     * @param predicate  the predicate to wrap, may not be null\n-     * @return the predicate\n-     * @throws IllegalArgumentException if the predicate is null.\n      */\n     public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate){\n         return NullIsTruePredicate.nullIsTruePredicate(predicate);\n      * Creates a predicate that transforms the input object before passing it\n      * to the predicate.\n      *\n-     * @see org.apache.commons.collections.functors.TransformedPredicate\n-     *\n+     * @param <T>  the type that the predicate queries\n      * @param transformer  the transformer to call first\n      * @param predicate  the predicate to call with the result of the transform\n      * @return the predicate\n      * @throws IllegalArgumentException if the transformer or the predicate is null\n+     * @see org.apache.commons.collections.functors.TransformedPredicate\n      * @since 3.1\n      */\n     public static <T> Predicate<T> transformedPredicate(", "timestamp": 1358776193, "metainfo": ""}