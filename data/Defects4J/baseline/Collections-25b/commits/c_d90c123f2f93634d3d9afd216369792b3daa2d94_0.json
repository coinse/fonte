{"sha": "d90c123f2f93634d3d9afd216369792b3daa2d94", "log": "Fix putAll(MultiMap) bug 35631, reported by Sven Macke  ", "commit": "\n--- a/src/java/org/apache/commons/collections/MultiHashMap.java\n+++ b/src/java/org/apache/commons/collections/MultiHashMap.java\n      * <p>\n      * NOTE: From Commons Collections 3.1 this method correctly copies a MultiMap\n      * to form a truly independent new map.\n+     * NOTE: From Commons Collections 3.2 this method delegates to the newly\n+     * added putAll(Map) override method.\n      * \n      * @param mapToCopy  a Map to copy\n      */\n     public MultiHashMap(Map mapToCopy) {\n         // be careful of JDK 1.3 vs 1.4 differences\n         super((int) (mapToCopy.size() * 1.4f));\n-        if (mapToCopy instanceof MultiMap) {\n-            for (Iterator it = mapToCopy.entrySet().iterator(); it.hasNext();) {\n-                Map.Entry entry = (Map.Entry) it.next();\n-                Collection coll = (Collection) entry.getValue();\n-                Collection newColl = createCollection(coll);\n-                super.put(entry.getKey(), newColl);\n-            }\n-        } else {\n-            putAll(mapToCopy);\n-        }\n+        putAll(mapToCopy);\n     }\n \n     /**\n     }\n \n     /**\n+     * Override superclass to ensure that MultiMap instances are\n+     * correctly handled.\n+     * <p>\n+     * NOTE: Prior to version 3.2, putAll(map) did not work properly\n+     * when passed a MultiMap.\n+     * \n+     * @param map  the map to copy (either a normal or multi map)\n+     */\n+    public void putAll(Map map) {\n+        if (map instanceof MultiMap) {\n+            for (Iterator it = map.entrySet().iterator(); it.hasNext();) {\n+                Map.Entry entry = (Map.Entry) it.next();\n+                Collection coll = (Collection) entry.getValue();\n+                putAll(entry.getKey(), coll);\n+            }\n+        } else {\n+            for (Iterator it = map.entrySet().iterator(); it.hasNext();) {\n+                Map.Entry entry = (Map.Entry) it.next();\n+                put(entry.getKey(), entry.getValue());\n+            }\n+        }\n+    }\n+\n+    /**\n      * Adds a collection of values to the collection associated with the specified key.\n      *\n      * @param key  the key to store against\n--- a/src/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/java/org/apache/commons/collections/map/MultiValueMap.java\n     }\n \n     /**\n+     * Override superclass to ensure that MultiMap instances are\n+     * correctly handled.\n+     * <p>\n+     * If you call this method with a normal map, each entry is\n+     * added using <code>put(Object,Object)</code>.\n+     * If you call this method with a multi map, each entry is\n+     * added using <code>putAll(Object,Collection)</code>.\n+     *\n+     * @param map  the map to copy (either a normal or multi map)\n+     */\n+    public void putAll(Map map) {\n+        if (map instanceof MultiMap) {\n+            for (Iterator it = map.entrySet().iterator(); it.hasNext();) {\n+                Map.Entry entry = (Map.Entry) it.next();\n+                Collection coll = (Collection) entry.getValue();\n+                putAll(entry.getKey(), coll);\n+            }\n+        } else {\n+            for (Iterator it = map.entrySet().iterator(); it.hasNext();) {\n+                Map.Entry entry = (Map.Entry) it.next();\n+                put(entry.getKey(), entry.getValue());\n+            }\n+        }\n+    }\n+\n+    /**\n      * Gets a collection containing all the values in the map.\n      * <p>\n      * This returns a collection containing the combination of values from all keys.\n--- a/src/test/org/apache/commons/collections/TestMultiHashMap.java\n+++ b/src/test/org/apache/commons/collections/TestMultiHashMap.java\n         assertEquals(true, map.containsValue(\"A\", \"AA\"));\n         assertEquals(false, map.containsValue(\"A\", \"AB\"));\n     }\n-    \n+\n+    public void testPutAll_Map1() {\n+        MultiMap original = new MultiHashMap();\n+        original.put(\"key\", \"object1\");\n+        original.put(\"key\", \"object2\");\n+\n+        MultiHashMap test = new MultiHashMap();\n+        test.put(\"keyA\", \"objectA\");\n+        test.put(\"key\", \"object0\");\n+        test.putAll(original);\n+\n+        assertEquals(2, test.size());\n+        assertEquals(4, test.totalSize());\n+        assertEquals(1, test.getCollection(\"keyA\").size());\n+        assertEquals(3, test.getCollection(\"key\").size());\n+        assertEquals(true, test.containsValue(\"objectA\"));\n+        assertEquals(true, test.containsValue(\"object0\"));\n+        assertEquals(true, test.containsValue(\"object1\"));\n+        assertEquals(true, test.containsValue(\"object2\"));\n+    }\n+\n+    public void testPutAll_Map2() {\n+        Map original = new HashMap();\n+        original.put(\"keyX\", \"object1\");\n+        original.put(\"keyY\", \"object2\");\n+\n+        MultiHashMap test = new MultiHashMap();\n+        test.put(\"keyA\", \"objectA\");\n+        test.put(\"keyX\", \"object0\");\n+        test.putAll(original);\n+\n+        assertEquals(3, test.size());\n+        assertEquals(4, test.totalSize());\n+        assertEquals(1, test.getCollection(\"keyA\").size());\n+        assertEquals(2, test.getCollection(\"keyX\").size());\n+        assertEquals(1, test.getCollection(\"keyY\").size());\n+        assertEquals(true, test.containsValue(\"objectA\"));\n+        assertEquals(true, test.containsValue(\"object0\"));\n+        assertEquals(true, test.containsValue(\"object1\"));\n+        assertEquals(true, test.containsValue(\"object2\"));\n+    }\n+\n     public void testPutAll_KeyCollection() {\n         MultiHashMap map = new MultiHashMap();\n         Collection coll = Arrays.asList(new Object[] {\"X\", \"Y\", \"Z\"});\n--- a/src/test/org/apache/commons/collections/map/TestMultiValueMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestMultiValueMap.java\n  */\n package org.apache.commons.collections.map;\n \n-import junit.framework.TestCase;\n-\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.HashSet;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n-import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n \n import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.MultiMap;\n+import org.apache.commons.collections.TestMultiHashMap;\n \n /**\n  * TestMultiValueMap.\n  *\n  * @author <a href=\"mailto:jcarman@apache.org\">James Carman</a>\n+ * @author Stephen Colebourne\n  * @since Commons Collections 3.2\n  */\n public class TestMultiValueMap extends TestCase {\n+\n+    public TestMultiValueMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestMultiHashMap.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestMultiHashMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n     public void testNoMappingReturnsNull() {\n         final MultiValueMap map = createTestMap();\n         assertNull(map.get(\"whatever\"));\n         assertEquals(4, map.totalSize());\n     }\n \n+    public void testTotalSizeA() {\n+        assertEquals(6, createTestMap().totalSize());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMapEquals() {\n+        MultiValueMap one = new MultiValueMap();\n+        Integer value = new Integer(1);\n+        one.put(\"One\", value);\n+        one.remove(\"One\", value);\n+        \n+        MultiValueMap two = new MultiValueMap();\n+        assertEquals(two, one);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetCollection() {\n+        MultiValueMap map = new MultiValueMap();\n+        map.put(\"A\", \"AA\");\n+        assertSame(map.get(\"A\"), map.getCollection(\"A\"));\n+    }\n+    \n     public void testTotalSize() {\n-        assertEquals(6, createTestMap().totalSize());\n-    }\n+        MultiValueMap map = new MultiValueMap();\n+        assertEquals(0, map.totalSize());\n+        map.put(\"A\", \"AA\");\n+        assertEquals(1, map.totalSize());\n+        map.put(\"B\", \"BA\");\n+        assertEquals(2, map.totalSize());\n+        map.put(\"B\", \"BB\");\n+        assertEquals(3, map.totalSize());\n+        map.put(\"B\", \"BC\");\n+        assertEquals(4, map.totalSize());\n+        map.remove(\"A\");\n+        assertEquals(3, map.totalSize());\n+        map.remove(\"B\", \"BC\");\n+        assertEquals(2, map.totalSize());\n+    }\n+    \n+    public void testSize() {\n+        MultiValueMap map = new MultiValueMap();\n+        assertEquals(0, map.size());\n+        map.put(\"A\", \"AA\");\n+        assertEquals(1, map.size());\n+        map.put(\"B\", \"BA\");\n+        assertEquals(2, map.size());\n+        map.put(\"B\", \"BB\");\n+        assertEquals(2, map.size());\n+        map.put(\"B\", \"BC\");\n+        assertEquals(2, map.size());\n+        map.remove(\"A\");\n+        assertEquals(2, map.size());\n+        map.remove(\"B\", \"BC\");\n+        assertEquals(2, map.size());\n+    }\n+    \n+    public void testSize_Key() {\n+        MultiValueMap map = new MultiValueMap();\n+        assertEquals(0, map.size(\"A\"));\n+        assertEquals(0, map.size(\"B\"));\n+        map.put(\"A\", \"AA\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(0, map.size(\"B\"));\n+        map.put(\"B\", \"BA\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(1, map.size(\"B\"));\n+        map.put(\"B\", \"BB\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(2, map.size(\"B\"));\n+        map.put(\"B\", \"BC\");\n+        assertEquals(1, map.size(\"A\"));\n+        assertEquals(3, map.size(\"B\"));\n+        map.remove(\"A\");\n+        assertEquals(0, map.size(\"A\"));\n+        assertEquals(3, map.size(\"B\"));\n+        map.remove(\"B\", \"BC\");\n+        assertEquals(0, map.size(\"A\"));\n+        assertEquals(2, map.size(\"B\"));\n+    }\n+    \n+    public void testIterator_Key() {\n+        MultiValueMap map = new MultiValueMap();\n+        assertEquals(false, map.iterator(\"A\").hasNext());\n+        map.put(\"A\", \"AA\");\n+        Iterator it = map.iterator(\"A\");\n+        assertEquals(true, it.hasNext());\n+        it.next();\n+        assertEquals(false, it.hasNext());\n+    }\n+    \n+    public void testContainsValue_Key() {\n+        MultiValueMap map = new MultiValueMap();\n+        assertEquals(false, map.containsValue(\"A\", \"AA\"));\n+        assertEquals(false, map.containsValue(\"B\", \"BB\"));\n+        map.put(\"A\", \"AA\");\n+        assertEquals(true, map.containsValue(\"A\", \"AA\"));\n+        assertEquals(false, map.containsValue(\"A\", \"AB\"));\n+    }\n+\n+    public void testPutAll_Map1() {\n+        MultiMap original = new MultiValueMap();\n+        original.put(\"key\", \"object1\");\n+        original.put(\"key\", \"object2\");\n+\n+        MultiValueMap test = new MultiValueMap();\n+        test.put(\"keyA\", \"objectA\");\n+        test.put(\"key\", \"object0\");\n+        test.putAll(original);\n+\n+        assertEquals(2, test.size());\n+        assertEquals(4, test.totalSize());\n+        assertEquals(1, test.getCollection(\"keyA\").size());\n+        assertEquals(3, test.getCollection(\"key\").size());\n+        assertEquals(true, test.containsValue(\"objectA\"));\n+        assertEquals(true, test.containsValue(\"object0\"));\n+        assertEquals(true, test.containsValue(\"object1\"));\n+        assertEquals(true, test.containsValue(\"object2\"));\n+    }\n+\n+    public void testPutAll_Map2() {\n+        Map original = new HashMap();\n+        original.put(\"keyX\", \"object1\");\n+        original.put(\"keyY\", \"object2\");\n+\n+        MultiValueMap test = new MultiValueMap();\n+        test.put(\"keyA\", \"objectA\");\n+        test.put(\"keyX\", \"object0\");\n+        test.putAll(original);\n+\n+        assertEquals(3, test.size());\n+        assertEquals(4, test.totalSize());\n+        assertEquals(1, test.getCollection(\"keyA\").size());\n+        assertEquals(2, test.getCollection(\"keyX\").size());\n+        assertEquals(1, test.getCollection(\"keyY\").size());\n+        assertEquals(true, test.containsValue(\"objectA\"));\n+        assertEquals(true, test.containsValue(\"object0\"));\n+        assertEquals(true, test.containsValue(\"object1\"));\n+        assertEquals(true, test.containsValue(\"object2\"));\n+    }\n+\n+    public void testPutAll_KeyCollection() {\n+        MultiValueMap map = new MultiValueMap();\n+        Collection coll = Arrays.asList(new Object[] {\"X\", \"Y\", \"Z\"});\n+        \n+        assertEquals(true, map.putAll(\"A\", coll));\n+        assertEquals(3, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        \n+        assertEquals(false, map.putAll(\"A\", null));\n+        assertEquals(3, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        \n+        assertEquals(false, map.putAll(\"A\", new ArrayList()));\n+        assertEquals(3, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        \n+        coll = Arrays.asList(new Object[] {\"M\"});\n+        assertEquals(true, map.putAll(\"A\", coll));\n+        assertEquals(4, map.size(\"A\"));\n+        assertEquals(true, map.containsValue(\"A\", \"X\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Y\"));\n+        assertEquals(true, map.containsValue(\"A\", \"Z\"));\n+        assertEquals(true, map.containsValue(\"A\", \"M\"));\n+    }\n+\n+    public void testRemove_KeyItem() {\n+        MultiValueMap map = new MultiValueMap();\n+        map.put(\"A\", \"AA\");\n+        map.put(\"A\", \"AB\");\n+        map.put(\"A\", \"AC\");\n+        assertEquals(null, map.remove(\"C\", \"CA\"));\n+        assertEquals(null, map.remove(\"A\", \"AD\"));\n+        assertEquals(\"AC\", map.remove(\"A\", \"AC\"));\n+        assertEquals(\"AB\", map.remove(\"A\", \"AB\"));\n+        assertEquals(\"AA\", map.remove(\"A\", \"AA\"));\n+        assertEquals(new MultiValueMap(), map);\n+    }\n+\n }", "timestamp": 1120781030, "metainfo": ""}