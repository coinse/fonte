{"sha": "047b8fb527010439594f7af5ca9d3452a81589cd", "log": "ignore false-positive from pmd  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java\n         final TransformedBag<E> decorated = new TransformedBag<E>(bag, transformer);\n         if (transformer != null && bag != null && bag.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // Bag is of type E\n-            final E[] values = (E[]) bag.toArray();\n+            final E[] values = (E[]) bag.toArray(); // NOPMD - false positive for generics\n             bag.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java\n         final TransformedSortedBag<E>  decorated = new TransformedSortedBag<E>(bag, transformer);\n         if (transformer != null && bag != null && bag.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // bag is type E\n-            final E[] values = (E[]) bag.toArray();\n+            final E[] values = (E[]) bag.toArray(); // NOPMD - false positive for generics\n             bag.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java\n+++ b/src/main/java/org/apache/commons/collections4/collection/TransformedCollection.java\n         // null collection & transformer are disallowed by the constructor call above \n         if (collection.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // collection is of type E\n-            final E[] values = (E[]) collection.toArray();\n+            final E[] values = (E[]) collection.toArray(); // NOPMD - false positive for generics\n             collection.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections4/list/TransformedList.java\n+++ b/src/main/java/org/apache/commons/collections4/list/TransformedList.java\n         final TransformedList<E> decorated = new TransformedList<E>(list, transformer);\n         if (transformer != null && list != null && list.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // list is of type E\n-            final E[] values = (E[]) list.toArray();\n+            final E[] values = (E[]) list.toArray(); // NOPMD - false positive for generics\n             list.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java\n         final TransformedQueue<E> decorated = new TransformedQueue<E>(queue, transformer); \n         if (queue.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // queue is type <E>\n-            final E[] values = (E[]) queue.toArray();\n+            final E[] values = (E[]) queue.toArray(); // NOPMD - false positive for generics\n             queue.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections4/set/TransformedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/TransformedSet.java\n         final TransformedSet<E> decorated = new TransformedSet<E>(set, transformer);\n         if (transformer != null && set != null && set.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // set is type E\n-            final E[] values = (E[]) set.toArray();\n+            final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics\n             set.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));\n--- a/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java\n         final TransformedSortedSet<E> decorated = new TransformedSortedSet<E>(set, transformer);\n         if (transformer != null && set != null && set.size() > 0) {\n             @SuppressWarnings(\"unchecked\") // set is type E\n-            final E[] values = (E[]) set.toArray();\n+            final E[] values = (E[]) set.toArray(); // NOPMD - false positive for generics\n             set.clear();\n             for (final E value : values) {\n                 decorated.decorated().add(transformer.transform(value));", "timestamp": 1367073888, "metainfo": ""}