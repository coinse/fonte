{"sha": "335945a34d62b9c90139158a020533f91c5c4f35", "log": "Refactor decorators to interface based subpackages   ", "commit": "\n--- a/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.10 2003/11/14 22:58:27 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.11 2003/11/16 00:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections.decorators.AbstractCollectionDecorator;\n-import org.apache.commons.collections.decorators.AbstractIteratorDecorator;\n-import org.apache.commons.collections.decorators.AbstractMapEntryDecorator;\n+import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n+import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n import org.apache.commons.collections.iterators.MapIterator;\n import org.apache.commons.collections.iterators.ResettableIterator;\n+import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n \n /**\n  * Abstract <code>BidiMap</code> implemented using two maps.\n  * <code>createMap</code> method.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.10 2003/11/14 22:58:27 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.11 2003/11/16 00:05:44 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/java/org/apache/commons/collections/BagUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.14 2003/09/28 21:54:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BagUtils.java,v 1.15 2003/11/16 00:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n-import org.apache.commons.collections.decorators.PredicatedBag;\n-import org.apache.commons.collections.decorators.PredicatedSortedBag;\n-import org.apache.commons.collections.decorators.SynchronizedBag;\n-import org.apache.commons.collections.decorators.SynchronizedSortedBag;\n-import org.apache.commons.collections.decorators.TransformedBag;\n-import org.apache.commons.collections.decorators.TransformedSortedBag;\n-import org.apache.commons.collections.decorators.TypedBag;\n-import org.apache.commons.collections.decorators.TypedSortedBag;\n-import org.apache.commons.collections.decorators.UnmodifiableBag;\n-import org.apache.commons.collections.decorators.UnmodifiableSortedBag;\n+import org.apache.commons.collections.bag.PredicatedBag;\n+import org.apache.commons.collections.bag.PredicatedSortedBag;\n+import org.apache.commons.collections.bag.SynchronizedBag;\n+import org.apache.commons.collections.bag.SynchronizedSortedBag;\n+import org.apache.commons.collections.bag.TransformedBag;\n+import org.apache.commons.collections.bag.TransformedSortedBag;\n+import org.apache.commons.collections.bag.TypedBag;\n+import org.apache.commons.collections.bag.TypedSortedBag;\n+import org.apache.commons.collections.bag.UnmodifiableBag;\n+import org.apache.commons.collections.bag.UnmodifiableSortedBag;\n import org.apache.commons.collections.observed.ModificationListener;\n import org.apache.commons.collections.observed.ObservableBag;\n import org.apache.commons.collections.observed.ObservableSortedBag;\n  * {@link Bag} and {@link SortedBag} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.14 $ $Date: 2003/09/28 21:54:35 $\n+ * @version $Revision: 1.15 $ $Date: 2003/11/16 00:05:44 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/java/org/apache/commons/collections/BufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.14 2003/09/21 16:26:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BufferUtils.java,v 1.15 2003/11/16 00:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n-import org.apache.commons.collections.decorators.BlockingBuffer;\n-import org.apache.commons.collections.decorators.PredicatedBuffer;\n-import org.apache.commons.collections.decorators.SynchronizedBuffer;\n-import org.apache.commons.collections.decorators.TransformedBuffer;\n-import org.apache.commons.collections.decorators.TypedBuffer;\n-import org.apache.commons.collections.decorators.UnmodifiableBuffer;\n+import org.apache.commons.collections.buffer.BlockingBuffer;\n+import org.apache.commons.collections.buffer.PredicatedBuffer;\n+import org.apache.commons.collections.buffer.SynchronizedBuffer;\n+import org.apache.commons.collections.buffer.TransformedBuffer;\n+import org.apache.commons.collections.buffer.TypedBuffer;\n+import org.apache.commons.collections.buffer.UnmodifiableBuffer;\n import org.apache.commons.collections.observed.ModificationListener;\n import org.apache.commons.collections.observed.ObservableBuffer;\n \n  * Provides utility methods and decorators for {@link Buffer} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.14 $ $Date: 2003/09/21 16:26:08 $\n+ * @version $Revision: 1.15 $ $Date: 2003/11/16 00:05:44 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.45 2003/10/05 19:48:00 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.46 2003/11/16 00:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.commons.collections.decorators.PredicatedCollection;\n-import org.apache.commons.collections.decorators.SynchronizedCollection;\n-import org.apache.commons.collections.decorators.TransformedCollection;\n-import org.apache.commons.collections.decorators.TypedCollection;\n-import org.apache.commons.collections.decorators.UnmodifiableBoundedCollection;\n-import org.apache.commons.collections.decorators.UnmodifiableCollection;\n+import org.apache.commons.collections.collection.PredicatedCollection;\n+import org.apache.commons.collections.collection.SynchronizedCollection;\n+import org.apache.commons.collections.collection.TransformedCollection;\n+import org.apache.commons.collections.collection.TypedCollection;\n+import org.apache.commons.collections.collection.UnmodifiableBoundedCollection;\n+import org.apache.commons.collections.collection.UnmodifiableCollection;\n import org.apache.commons.collections.iterators.ArrayIterator;\n import org.apache.commons.collections.iterators.EnumerationIterator;\n import org.apache.commons.collections.observed.ModificationListener;\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.45 $ $Date: 2003/10/05 19:48:00 $\n+ * @version $Revision: 1.46 $ $Date: 2003/11/16 00:05:44 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n--- a/src/java/org/apache/commons/collections/DualTreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/DualTreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/DualTreeBidiMap.java,v 1.2 2003/11/01 18:47:18 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/DualTreeBidiMap.java,v 1.3 2003/11/16 00:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n-import org.apache.commons.collections.decorators.AbstractSortedMapDecorator;\n+import org.apache.commons.collections.map.AbstractSortedMapDecorator;\n \n /**\n  * Implementation of <code>BidiMap</code> that uses two <code>TreeMap</code> instances.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: DualTreeBidiMap.java,v 1.2 2003/11/01 18:47:18 scolebourne Exp $\n+ * @version $Id: DualTreeBidiMap.java,v 1.3 2003/11/16 00:05:44 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n--- a/src/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/java/org/apache/commons/collections/ListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.21 2003/09/21 16:26:08 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ListUtils.java,v 1.22 2003/11/16 00:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Iterator;\n import java.util.List;\n \n-import org.apache.commons.collections.decorators.FixedSizeList;\n-import org.apache.commons.collections.decorators.LazyList;\n-import org.apache.commons.collections.decorators.PredicatedList;\n-import org.apache.commons.collections.decorators.SynchronizedList;\n-import org.apache.commons.collections.decorators.TransformedList;\n-import org.apache.commons.collections.decorators.TypedList;\n-import org.apache.commons.collections.decorators.UnmodifiableList;\n+import org.apache.commons.collections.list.FixedSizeList;\n+import org.apache.commons.collections.list.LazyList;\n+import org.apache.commons.collections.list.PredicatedList;\n+import org.apache.commons.collections.list.SynchronizedList;\n+import org.apache.commons.collections.list.TransformedList;\n+import org.apache.commons.collections.list.TypedList;\n+import org.apache.commons.collections.list.UnmodifiableList;\n import org.apache.commons.collections.observed.ModificationListener;\n import org.apache.commons.collections.observed.ObservableList;\n \n  * Provides utility methods and decorators for {@link List} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.21 $ $Date: 2003/09/21 16:26:08 $\n+ * @version $Revision: 1.22 $ $Date: 2003/11/16 00:05:44 $\n  * \n  * @author Federico Barbieri\n  * @author Peter Donald\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.38 2003/10/03 06:24:13 bayard Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.39 2003/11/16 00:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n-import org.apache.commons.collections.decorators.FixedSizeMap;\n-import org.apache.commons.collections.decorators.FixedSizeSortedMap;\n-import org.apache.commons.collections.decorators.LazyMap;\n-import org.apache.commons.collections.decorators.LazySortedMap;\n-import org.apache.commons.collections.decorators.OrderedMap;\n-import org.apache.commons.collections.decorators.PredicatedMap;\n-import org.apache.commons.collections.decorators.PredicatedSortedMap;\n-import org.apache.commons.collections.decorators.TransformedMap;\n-import org.apache.commons.collections.decorators.TransformedSortedMap;\n-import org.apache.commons.collections.decorators.TypedMap;\n-import org.apache.commons.collections.decorators.TypedSortedMap;\n-import org.apache.commons.collections.decorators.UnmodifiableMap;\n-import org.apache.commons.collections.decorators.UnmodifiableSortedMap;\n+import org.apache.commons.collections.map.FixedSizeMap;\n+import org.apache.commons.collections.map.FixedSizeSortedMap;\n+import org.apache.commons.collections.map.LazyMap;\n+import org.apache.commons.collections.map.LazySortedMap;\n+import org.apache.commons.collections.map.ListOrderedMap;\n+import org.apache.commons.collections.map.PredicatedMap;\n+import org.apache.commons.collections.map.PredicatedSortedMap;\n+import org.apache.commons.collections.map.TransformedMap;\n+import org.apache.commons.collections.map.TransformedSortedMap;\n+import org.apache.commons.collections.map.TypedMap;\n+import org.apache.commons.collections.map.TypedSortedMap;\n+import org.apache.commons.collections.map.UnmodifiableMap;\n+import org.apache.commons.collections.map.UnmodifiableSortedMap;\n \n /** \n  * Provides utility methods and decorators for\n  *  </ul>\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.38 $ $Date: 2003/10/03 06:24:13 $\n+ * @version $Revision: 1.39 $ $Date: 2003/11/16 00:05:44 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n      * @throws IllegalArgumentException  if the Map is null\n      */\n     public static Map orderedMap(Map map) {\n-        return OrderedMap.decorate(map);\n+        return ListOrderedMap.decorate(map);\n     }\n     \n     // SortedMap decorators\n--- a/src/java/org/apache/commons/collections/PriorityQueueUtils.java\n+++ b/src/java/org/apache/commons/collections/PriorityQueueUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/PriorityQueueUtils.java,v 1.2 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/PriorityQueueUtils.java,v 1.3 2003/11/16 00:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections;\n \n-import org.apache.commons.collections.decorators.SynchronizedPriorityQueue;\n-import org.apache.commons.collections.decorators.UnmodifiablePriorityQueue;\n+import org.apache.commons.collections.buffer.SynchronizedPriorityQueue;\n+import org.apache.commons.collections.buffer.UnmodifiablePriorityQueue;\n \n /**\n  * Provides static utility methods and decorators for {@link PriorityQueue}.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/16 00:05:44 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.18 2003/09/28 21:54:35 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.19 2003/11/16 00:05:44 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.SortedSet;\n import java.util.TreeSet;\n \n-import org.apache.commons.collections.decorators.OrderedSet;\n-import org.apache.commons.collections.decorators.PredicatedSet;\n-import org.apache.commons.collections.decorators.PredicatedSortedSet;\n-import org.apache.commons.collections.decorators.SynchronizedSet;\n-import org.apache.commons.collections.decorators.SynchronizedSortedSet;\n-import org.apache.commons.collections.decorators.TransformedSet;\n-import org.apache.commons.collections.decorators.TransformedSortedSet;\n-import org.apache.commons.collections.decorators.TypedSet;\n-import org.apache.commons.collections.decorators.TypedSortedSet;\n-import org.apache.commons.collections.decorators.UnmodifiableSet;\n-import org.apache.commons.collections.decorators.UnmodifiableSortedSet;\n import org.apache.commons.collections.observed.ModificationListener;\n import org.apache.commons.collections.observed.ObservableSet;\n import org.apache.commons.collections.observed.ObservableSortedSet;\n+import org.apache.commons.collections.set.ListOrderedSet;\n+import org.apache.commons.collections.set.PredicatedSet;\n+import org.apache.commons.collections.set.PredicatedSortedSet;\n+import org.apache.commons.collections.set.SynchronizedSet;\n+import org.apache.commons.collections.set.SynchronizedSortedSet;\n+import org.apache.commons.collections.set.TransformedSet;\n+import org.apache.commons.collections.set.TransformedSortedSet;\n+import org.apache.commons.collections.set.TypedSet;\n+import org.apache.commons.collections.set.TypedSortedSet;\n+import org.apache.commons.collections.set.UnmodifiableSet;\n+import org.apache.commons.collections.set.UnmodifiableSortedSet;\n \n /**\n  * Provides utility methods and decorators for\n  * {@link Set} and {@link SortedSet} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.18 $ $Date: 2003/09/28 21:54:35 $\n+ * @version $Revision: 1.19 $ $Date: 2003/11/16 00:05:44 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n      * @throws IllegalArgumentException  if the Set is null\n      */\n     public static Set orderedSet(Set set) {\n-        return OrderedSet.decorate(set);\n+        return ListOrderedSet.decorate(set);\n     }\n     \n     //-----------------------------------------------------------------------\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/AbstractBagDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractBagDecorator.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n+\n+/**\n+ * Decorates another <code>Bag</code> to provide additional behaviour.\n+ * <p>\n+ * Methods are forwarded directly to the decorated bag.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractBagDecorator extends AbstractCollectionDecorator implements Bag {\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected AbstractBagDecorator(Bag bag) {\n+        super(bag);\n+    }\n+\n+    /**\n+     * Gets the bag being decorated.\n+     * \n+     * @return the decorated bag\n+     */\n+    protected Bag getBag() {\n+        return (Bag) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public int getCount(Object object) {\n+        return getBag().getCount(object);\n+    }\n+\n+    public boolean add(Object object, int count) {\n+        return getBag().add(object, count);\n+    }\n+\n+    public boolean remove(Object object, int count) {\n+        return getBag().remove(object, count);\n+    }\n+\n+    public Set uniqueSet() {\n+        return getBag().uniqueSet();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.SortedBag;\n+\n+/**\n+ * Decorates another <code>SortedBag</code> to provide additional behaviour.\n+ * <p>\n+ * Methods are forwarded directly to the decorated bag.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractSortedBagDecorator extends AbstractBagDecorator implements SortedBag {\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected AbstractSortedBagDecorator(SortedBag bag) {\n+        super(bag);\n+    }\n+\n+    /**\n+     * Gets the bag being decorated.\n+     * \n+     * @return the decorated bag\n+     */\n+    protected SortedBag getSortedBag() {\n+        return (SortedBag) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object first() {\n+        return getSortedBag().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedBag().last();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedBag().comparator();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/PredicatedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/PredicatedBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.collection.PredicatedCollection;\n+\n+/**\n+ * Decorates another <code>Bag</code> to validate that additions\n+ * match a specified predicate.\n+ * <p>\n+ * If an object cannot be added to the list, an IllegalArgumentException\n+ * is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedBag extends PredicatedCollection implements Bag {\n+\n+    /**\n+     * Factory method to create a predicated (validating) bag.\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are validated.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if bag or predicate is null\n+     * @throws IllegalArgumentException if the bag contains invalid elements\n+     */\n+    public static Bag decorate(Bag bag, Predicate predicate) {\n+        return new PredicatedBag(bag, predicate);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are validated.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if bag or predicate is null\n+     * @throws IllegalArgumentException if the bag contains invalid elements\n+     */\n+    protected PredicatedBag(Bag bag, Predicate predicate) {\n+        super(bag, predicate);\n+    }\n+\n+    /**\n+     * Gets the decorated bag.\n+     * \n+     * @return the decorated bag\n+     */\n+    protected Bag getBag() {\n+        return (Bag) getCollection();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public boolean add(Object object, int count) {\n+        validate(object);\n+        return getBag().add(object, count);\n+    }\n+\n+    public boolean remove(Object object, int count) {\n+        return getBag().remove(object, count);\n+    }\n+\n+    public Set uniqueSet() {\n+        return getBag().uniqueSet();\n+    }\n+\n+    public int getCount(Object object) {\n+        return getBag().getCount(object);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/PredicatedSortedBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.SortedBag;\n+\n+/**\n+ * Decorates another <code>SortedBag</code> to validate that additions\n+ * match a specified predicate.\n+ * <p>\n+ * If an object cannot be added to the list, an IllegalArgumentException\n+ * is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedSortedBag extends PredicatedBag implements SortedBag {\n+\n+    /**\n+     * Factory method to create a predicated (validating) bag.\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are validated.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if bag or predicate is null\n+     * @throws IllegalArgumentException if the bag contains invalid elements\n+     */\n+    public static SortedBag decorate(SortedBag bag, Predicate predicate) {\n+        return new PredicatedSortedBag(bag, predicate);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are validated.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if bag or predicate is null\n+     * @throws IllegalArgumentException if the bag contains invalid elements\n+     */\n+    protected PredicatedSortedBag(SortedBag bag, Predicate predicate) {\n+        super(bag, predicate);\n+    }\n+\n+    /**\n+     * Gets the decorated sorted bag.\n+     * \n+     * @return the decorated bag\n+     */\n+    protected SortedBag getSortedBag() {\n+        return (SortedBag) getCollection();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public Object first() {\n+        return getSortedBag().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedBag().last();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedBag().comparator();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/SynchronizedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/SynchronizedBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.collection.SynchronizedCollection;\n+import org.apache.commons.collections.set.SynchronizedSet;\n+\n+/**\n+ * Decorates another <code>Bag</code> to synchronize its behaviour\n+ * for a multi-threaded environment.\n+ * <p>\n+ * Methods are synchronized, then forwarded to the decorated bag.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedBag extends SynchronizedCollection implements Bag {\n+\n+    /**\n+     * Factory method to create a synchronized bag.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    public static Bag decorate(Bag bag) {\n+        return new SynchronizedBag(bag);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    protected SynchronizedBag(Bag bag) {\n+        super(bag);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param lock  the lock to use, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    protected SynchronizedBag(Bag bag, Object lock) {\n+        super(bag, lock);\n+    }\n+\n+    protected Bag getBag() {\n+        return (Bag) collection;\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public boolean add(Object object, int count) {\n+        synchronized (lock) {\n+            return getBag().add(object, count);\n+        }\n+    }\n+\n+    public boolean remove(Object object, int count) {\n+        synchronized (lock) {\n+            return getBag().remove(object, count);\n+        }\n+    }\n+\n+    public Set uniqueSet() {\n+        synchronized (lock) {\n+            Set set = getBag().uniqueSet();\n+            return new SynchronizedBagSet(set, lock);\n+        }\n+    }\n+\n+    public int getCount(Object object) {\n+        synchronized (lock) {\n+            return getBag().getCount(object);\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Synchronized Set for the Bag class.\n+     */\n+    class SynchronizedBagSet extends SynchronizedSet {\n+        SynchronizedBagSet(Set set, Object lock) {\n+            super(set, lock);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.SortedBag;\n+\n+/**\n+ * Decorates another <code>SortedBag</code> to synchronize its behaviour\n+ * for a multi-threaded environment.\n+ * <p>\n+ * Methods are synchronized, then forwarded to the decorated bag.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedSortedBag extends SynchronizedBag implements SortedBag {\n+\n+    /**\n+     * Factory method to create a synchronized sorted bag.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    public static SortedBag decorate(SortedBag bag) {\n+        return new SynchronizedSortedBag(bag);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    protected SynchronizedSortedBag(SortedBag bag) {\n+        super(bag);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param lock  the lock to use, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    protected SynchronizedSortedBag(Bag bag, Object lock) {\n+        super(bag, lock);\n+    }\n+\n+    protected SortedBag getSortedBag() {\n+        return (SortedBag) collection;\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public synchronized Object first() {\n+        synchronized (lock) {\n+            return getSortedBag().first();\n+        }\n+    }\n+\n+    public synchronized Object last() {\n+        synchronized (lock) {\n+            return getSortedBag().last();\n+        }\n+    }\n+\n+    public synchronized Comparator comparator() {\n+        synchronized (lock) {\n+            return getSortedBag().comparator();\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/TransformedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TransformedBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.collection.TransformedCollection;\n+import org.apache.commons.collections.set.TransformedSet;\n+\n+/**\n+ * Decorates another <code>Bag</code> to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedBag extends TransformedCollection implements Bag {\n+\n+    /**\n+     * Factory method to create a transforming bag.\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if bag or transformer is null\n+     */\n+    public static Bag decorate(Bag bag, Transformer transformer) {\n+        return new TransformedBag(bag, transformer);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if bag or transformer is null\n+     */\n+    protected TransformedBag(Bag bag, Transformer transformer) {\n+        super(bag, transformer);\n+    }\n+\n+    /**\n+     * Gets the decorated bag.\n+     * \n+     * @return the decorated bag\n+     */\n+    protected Bag getBag() {\n+        return (Bag) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public int getCount(Object object) {\n+        return getBag().getCount(object);\n+    }\n+\n+    public boolean remove(Object object, int nCopies) {\n+        return getBag().remove(object, nCopies);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean add(Object object, int nCopies) {\n+        object = transform(object);\n+        return getBag().add(object, nCopies);\n+    }\n+\n+    public Set uniqueSet() {\n+        Set set = getBag().uniqueSet();\n+        return TransformedSet.decorate(set, transformer);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TransformedSortedBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * Decorates another <code>SortedBag</code> to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedSortedBag extends TransformedBag implements SortedBag {\n+\n+    /**\n+     * Factory method to create a transforming sorted bag.\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if bag or transformer is null\n+     */\n+    public static SortedBag decorate(SortedBag bag, Transformer transformer) {\n+        return new TransformedSortedBag(bag, transformer);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if bag or transformer is null\n+     */\n+    protected TransformedSortedBag(SortedBag bag, Transformer transformer) {\n+        super(bag, transformer);\n+    }\n+\n+    /**\n+     * Gets the decorated bag.\n+     * \n+     * @return the decorated bag\n+     */\n+    protected SortedBag getSortedBag() {\n+        return (SortedBag) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object first() {\n+        return getSortedBag().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedBag().last();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedBag().comparator();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/TypedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TypedBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Decorates another <code>Bag</code> to validate that elements added\n+ * are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be added to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedBag {\n+\n+    /**\n+     * Factory method to create a typed bag.\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are validated.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param type  the type to allow into the bag, must not be null\n+     * @throws IllegalArgumentException if bag or type is null\n+     * @throws IllegalArgumentException if the bag contains invalid elements\n+     */\n+    public static Bag decorate(Bag bag, Class type) {\n+        return new PredicatedBag(bag, PredicateUtils.instanceofPredicate(type));\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedBag() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/TypedSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/TypedSortedBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.SortedBag;\n+\n+/**\n+ * Decorates another <code>SortedBag</code> to validate that elements added\n+ * are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be added to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedSortedBag {\n+\n+    /**\n+     * Factory method to create a typed sorted bag.\n+     * <p>\n+     * If there are any elements already in the bag being decorated, they\n+     * are validated.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param type  the type to allow into the bag, must not be null\n+     * @throws IllegalArgumentException if bag or type is null\n+     * @throws IllegalArgumentException if the bag contains invalid elements\n+     */\n+    public static SortedBag decorate(SortedBag bag, Class type) {\n+        return new PredicatedSortedBag(bag, PredicateUtils.instanceofPredicate(type));\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedSortedBag() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/UnmodifiableBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.set.UnmodifiableSet;\n+\n+/**\n+ * Decorates another <code>Bag</code> to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableBag extends UnmodifiableCollection implements Bag {\n+\n+    /**\n+     * Factory method to create an unmodifiable bag.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    public static Bag decorate(Bag bag) {\n+        if (bag instanceof Unmodifiable) {\n+            return bag;\n+        }\n+        return new UnmodifiableBag(bag);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    protected UnmodifiableBag(Bag bag) {\n+        super(bag);\n+    }\n+\n+    /**\n+     * Gets the bag being decorated.\n+     * \n+     * @return the decorated bag\n+     */\n+    protected Bag getBag() {\n+        return (Bag) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean add(Object o, int count) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean remove(Object o, int count) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Set uniqueSet() {\n+        Set set = getBag().uniqueSet();\n+        return UnmodifiableSet.decorate(set);\n+    }\n+\n+    public int getCount(Object o) {\n+        return getBag().getCount(o);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java,v 1.1 2003/11/16 00:05:43 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.Unmodifiable;\n+\n+/**\n+ * Decorates another <code>SortedBag</code> to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:43 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableSortedBag extends UnmodifiableBag implements SortedBag {\n+\n+    /**\n+     * Factory method to create an unmodifiable bag.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    public static SortedBag decorate(SortedBag bag) {\n+        if (bag instanceof Unmodifiable) {\n+            return bag;\n+        }\n+        return new UnmodifiableSortedBag(bag);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    protected UnmodifiableSortedBag(SortedBag bag) {\n+        super(bag);\n+    }\n+\n+    /**\n+     * Gets the bag being decorated.\n+     * \n+     * @return the decorated bag\n+     */\n+    protected SortedBag getSortedBag() {\n+        return (SortedBag) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object first() {\n+        return getSortedBag().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedBag().last();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedBag().comparator();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/buffer/AbstractBufferDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/AbstractBufferDecorator.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n+\n+/**\n+ * Decorates another <code>Buffer</code> to provide additional behaviour.\n+ * <p>\n+ * Methods are forwarded directly to the decorated buffer.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractBufferDecorator extends AbstractCollectionDecorator implements Buffer {\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected AbstractBufferDecorator(Buffer buffer) {\n+        super(buffer);\n+    }\n+\n+    /**\n+     * Gets the buffer being decorated.\n+     * \n+     * @return the decorated buffer\n+     */\n+    protected Buffer getBuffer() {\n+        return (Buffer) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get() {\n+        return getBuffer().get();\n+    }\n+\n+    public Object remove() {\n+        return getBuffer().remove();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/BlockingBuffer.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.BufferUnderflowException;\n+\n+/**\n+ * Decorates another <code>Buffer</code> to make {@link #get()} and\n+ * {@link #remove()} block when the <code>Buffer</code> is empty.\n+ * <p>\n+ * If either <code>get</code> or <code>remove</code> is called on an empty\n+ * <code>Buffer</code>, the calling thread waits for notification that\n+ * an {@link #add} or {@link #addAll} operation has completed.\n+ * <p>\n+ * When one or more entries are added to an empty <code>Buffer</code>,\n+ * all threads blocked in <code>get</code> or <code>remove</code> are notified.\n+ * There is no guarantee that concurrent blocked <code>get</code> or \n+ * <code>remove</code> requests will be \"unblocked\" and receive data in the \n+ * order that they arrive.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Janek Bogucki\n+ * @author Phil Steitz\n+ */\n+public class BlockingBuffer extends SynchronizedBuffer {\n+    \n+    /**\n+     * Factory method to create a blocking buffer.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @throws IllegalArgumentException if buffer is null\n+     */\n+    public static Buffer decorate(Buffer buffer) {\n+        return new BlockingBuffer(buffer);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @throws IllegalArgumentException if the buffer is null\n+     */\n+    protected BlockingBuffer(Buffer buffer) {\n+        super(buffer);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean add(Object o) {\n+        synchronized (lock) {\n+            boolean result = collection.add(o);\n+            notifyAll();\n+            return result;\n+        }\n+    }\n+    \n+    public boolean addAll(Collection c) {\n+        synchronized (lock) {\n+            boolean result = collection.addAll(c);\n+            notifyAll();\n+            return result;\n+        }\n+    }\n+    \n+    public Object get() {\n+        synchronized (lock) {\n+            while (collection.isEmpty()) {\n+                try {\n+                    wait();\n+                } catch (InterruptedException e) {\n+                    throw new BufferUnderflowException();\n+                }\n+            }\n+            return getBuffer().get();\n+        }\n+    }\n+    \n+    public Object remove() {\n+        synchronized (lock) {\n+            while (collection.isEmpty()) {\n+                try {\n+                    wait();\n+                } catch (InterruptedException e) {\n+                    throw new BufferUnderflowException();\n+                }\n+            }\n+            return getBuffer().remove();\n+        }\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/buffer/PredicatedBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/PredicatedBuffer.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.collection.PredicatedCollection;\n+\n+/**\n+ * Decorates another <code>Buffer</code> to validate that additions\n+ * match a specified predicate.\n+ * <p>\n+ * If an object cannot be added to the collection, an IllegalArgumentException\n+ * is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedBuffer extends PredicatedCollection implements Buffer {\n+\n+    /**\n+     * Factory method to create a predicated (validating) buffer.\n+     * <p>\n+     * If there are any elements already in the buffer being decorated, they\n+     * are validated.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if buffer or predicate is null\n+     * @throws IllegalArgumentException if the buffer contains invalid elements\n+     */\n+    public static Buffer decorate(Buffer buffer, Predicate predicate) {\n+        return new PredicatedBuffer(buffer, predicate);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are validated.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if buffer or predicate is null\n+     * @throws IllegalArgumentException if the buffer contains invalid elements\n+     */\n+    protected PredicatedBuffer(Buffer buffer, Predicate predicate) {\n+        super(buffer, predicate);\n+    }\n+\n+    /**\n+     * Gets the buffer being decorated.\n+     * \n+     * @return the decorated buffer\n+     */\n+    protected Buffer getBuffer() {\n+        return (Buffer) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get() {\n+        return getBuffer().get();\n+    }\n+\n+    public Object remove() {\n+        return getBuffer().remove();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.collection.SynchronizedCollection;\n+\n+/**\n+ * Decorates another <code>Buffer</code> to synchronize its behaviour\n+ * for a multi-threaded environment.\n+ * <p>\n+ * Methods are synchronized, then forwarded to the decorated buffer.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedBuffer extends SynchronizedCollection implements Buffer {\n+\n+    /**\n+     * Factory method to create a synchronized buffer.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @throws IllegalArgumentException if buffer is null\n+     */\n+    public static Buffer decorate(Buffer buffer) {\n+        return new SynchronizedBuffer(buffer);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @throws IllegalArgumentException if the buffer is null\n+     */\n+    protected SynchronizedBuffer(Buffer buffer) {\n+        super(buffer);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param lock  the lock object to use, must not be null\n+     * @throws IllegalArgumentException if the buffer is null\n+     */\n+    protected SynchronizedBuffer(Buffer buffer, Object lock) {\n+        super(buffer, lock);\n+    }\n+\n+    /**\n+     * Gets the buffer being decorated.\n+     * \n+     * @return the decorated buffer\n+     */\n+    protected Buffer getBuffer() {\n+        return (Buffer) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get() {\n+        synchronized (lock) {\n+            return getBuffer().get();\n+        }\n+    }\n+\n+    public Object remove() {\n+        synchronized (lock) {\n+            return getBuffer().remove();\n+        }\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/buffer/SynchronizedPriorityQueue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/SynchronizedPriorityQueue.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.PriorityQueue;\n+\n+/**\n+ * <code>SynchronizedPriorityQueue</code> decorates another <code>PriorityQueue</code>\n+ * to synchronize its behaviour for a multi-threaded environment.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author <a href=\"mailto:ram.chidambaram@telus.com\">Ram Chidambaram</a>\n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedPriorityQueue implements PriorityQueue {\n+\n+    /** The priority queue to decorate */\n+    protected final PriorityQueue priorityQueue;\n+\n+    /**\n+     * Factory method to create a synchronized priority queue.\n+     * \n+     * @param priorityQueue  the priority queue to decorate, must not be null\n+     * @throws IllegalArgumentException if priority queue is null\n+     */\n+    public static PriorityQueue decorate(PriorityQueue priorityQueue) {\n+        return new SynchronizedPriorityQueue(priorityQueue);\n+    }\n+    \n+    /**\n+     * Constructs a new synchronized priority queue.\n+     *\n+     * @param priorityQueue  the priority queue to synchronize\n+     */\n+    protected SynchronizedPriorityQueue(PriorityQueue priorityQueue) {\n+        if (priorityQueue == null) {\n+            throw new IllegalArgumentException(\"PriorityQueue must not be null\");\n+        }\n+        this.priorityQueue = priorityQueue;\n+    }\n+\n+    /**\n+     * Clear all elements from queue.\n+     */\n+    public synchronized void clear() {\n+        priorityQueue.clear();\n+    }\n+\n+    /**\n+     * Test if queue is empty.\n+     *\n+     * @return true if queue is empty else false.\n+     */\n+    public synchronized boolean isEmpty() {\n+        return priorityQueue.isEmpty();\n+    }\n+\n+    /**\n+     * Insert an element into queue.\n+     *\n+     * @param element the element to be inserted\n+     */\n+    public synchronized void insert(Object element) {\n+        priorityQueue.insert(element);\n+    }\n+\n+    /**\n+     * Return element on top of heap but don't remove it.\n+     *\n+     * @return the element at top of heap\n+     * @throws NoSuchElementException if isEmpty() == true\n+     */\n+    public synchronized Object peek() throws NoSuchElementException {\n+        return priorityQueue.peek();\n+    }\n+\n+    /**\n+     * Return element on top of heap and remove it.\n+     *\n+     * @return the element at top of heap\n+     * @throws NoSuchElementException if isEmpty() == true\n+     */\n+    public synchronized Object pop() throws NoSuchElementException {\n+        return priorityQueue.pop();\n+    }\n+\n+    /**\n+     * Returns a string representation of the underlying queue.\n+     *\n+     * @return a string representation of the underlying queue\n+     */\n+    public synchronized String toString() {\n+        return priorityQueue.toString();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/TransformedBuffer.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.collection.TransformedCollection;\n+\n+/**\n+ * Decorates another <code>Buffer</code> to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedBuffer extends TransformedCollection implements Buffer {\n+\n+    /**\n+     * Factory method to create a transforming buffer.\n+     * <p>\n+     * If there are any elements already in the buffer being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if buffer or transformer is null\n+     */\n+    public static Buffer decorate(Buffer buffer, Transformer transformer) {\n+        return new TransformedBuffer(buffer, transformer);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the buffer being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if buffer or transformer is null\n+     */\n+    protected TransformedBuffer(Buffer buffer, Transformer transformer) {\n+        super(buffer, transformer);\n+    }\n+\n+    /**\n+     * Gets the decorated buffer.\n+     * \n+     * @return the decorated buffer\n+     */\n+    protected Buffer getBuffer() {\n+        return (Buffer) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get() {\n+        return getBuffer().get();\n+    }\n+\n+    public Object remove() {\n+        return getBuffer().remove();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/buffer/TypedBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/TypedBuffer.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Decorates another <code>Buffer</code> to validate that elements added\n+ * are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be added to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedBuffer {\n+\n+    /**\n+     * Factory method to create a typed list.\n+     * <p>\n+     * If there are any elements already in the buffer being decorated, they\n+     * are validated.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param type  the type to allow into the buffer, must not be null\n+     * @throws IllegalArgumentException if buffer or type is null\n+     * @throws IllegalArgumentException if the buffer contains invalid elements\n+     */\n+    public static Buffer decorate(Buffer buffer, Class type) {\n+        return new PredicatedBuffer(buffer, PredicateUtils.instanceofPredicate(type));\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedBuffer() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.collection.UnmodifiableCollection;\n+\n+/**\n+ * Decorates another <code>Buffer</code> to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableBuffer extends UnmodifiableCollection implements Buffer {\n+\n+    /**\n+     * Factory method to create an unmodifiable buffer.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @throws IllegalArgumentException if buffer is null\n+     */\n+    public static Buffer decorate(Buffer buffer) {\n+        if (buffer instanceof Unmodifiable) {\n+            return buffer;\n+        }\n+        return new UnmodifiableBuffer(buffer);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @throws IllegalArgumentException if buffer is null\n+     */\n+    protected UnmodifiableBuffer(Buffer buffer) {\n+        super(buffer);\n+    }\n+\n+    /**\n+     * Gets the buffer being decorated.\n+     * \n+     * @return the decorated buffer\n+     */\n+    protected Buffer getBuffer() {\n+        return (Buffer) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get() {\n+        return getBuffer().get();\n+    }\n+\n+    public Object remove() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/buffer/UnmodifiablePriorityQueue.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/buffer/Attic/UnmodifiablePriorityQueue.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections.PriorityQueue;\n+\n+/**\n+ * <code>UnmodifiablePriorityQueue</code> decorates another <code>PriorityQueue</code>\n+ * to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiablePriorityQueue implements PriorityQueue {\n+\n+    /** The priority queue to decorate */\n+    protected final PriorityQueue priorityQueue;\n+\n+    /**\n+     * Factory method to create an unmodifiable priority queue.\n+     * \n+     * @param priorityQueue  the priority queue to decorate, must not be null\n+     * @throws IllegalArgumentException if priority queue is null\n+     */\n+    public static PriorityQueue decorate(PriorityQueue priorityQueue) {\n+        return new UnmodifiablePriorityQueue(priorityQueue);\n+    }\n+    \n+    /**\n+     * Constructs a new synchronized priority queue.\n+     *\n+     * @param priorityQueue  the priority queue to synchronize\n+     */\n+    protected UnmodifiablePriorityQueue(PriorityQueue priorityQueue) {\n+        if (priorityQueue == null) {\n+            throw new IllegalArgumentException(\"PriorityQueue must not be null\");\n+        }\n+        this.priorityQueue = priorityQueue;\n+    }\n+\n+    /**\n+     * Clear all elements from queue - Unsupported as unmodifiable.\n+     */\n+    public synchronized void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Test if queue is empty.\n+     *\n+     * @return true if queue is empty else false.\n+     */\n+    public synchronized boolean isEmpty() {\n+        return priorityQueue.isEmpty();\n+    }\n+\n+    /**\n+     * Insert an element into queue - Unsupported as unmodifiable.\n+     *\n+     * @param element the element to be inserted\n+     */\n+    public synchronized void insert(Object element) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Return element on top of heap but don't remove it.\n+     *\n+     * @return the element at top of heap\n+     * @throws NoSuchElementException if isEmpty() == true\n+     */\n+    public synchronized Object peek() throws NoSuchElementException {\n+        return priorityQueue.peek();\n+    }\n+\n+    /**\n+     * Return element on top of heap and remove it - Unsupported as unmodifiable.\n+     *\n+     * @return the element at top of heap\n+     * @throws NoSuchElementException if isEmpty() == true\n+     */\n+    public synchronized Object pop() throws NoSuchElementException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Returns a string representation of the underlying queue.\n+     *\n+     * @return a string representation of the underlying queue\n+     */\n+    public synchronized String toString() {\n+        return priorityQueue.toString();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/collection/AbstractCollectionDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/AbstractCollectionDecorator.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+/**\n+ * Decorates another <code>Collection</code> to provide additional behaviour.\n+ * <p>\n+ * Each method call made on this <code>Collection</code> is forwarded to the\n+ * decorated <code>Collection</code>. This class is used as a framework on which\n+ * to build to extensions such as synchronized and unmodifiable behaviour. The\n+ * main advantage of decoration is that one decorator can wrap any implementation\n+ * of <code>Collection</code>, whereas sub-classing requires a new class to be\n+ * written for each implementation.\n+ * <p>\n+ * This implementation does not perform any special processing with\n+ * {@link #iterator()}. Instead it simply returns the value from the \n+ * wrapped collection. This may be undesirable, for example if you are trying\n+ * to write an unmodifiable implementation it might provide a loophole.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public abstract class AbstractCollectionDecorator implements Collection {\n+\n+    /** The collection being decorated */\n+    protected final Collection collection;\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    protected AbstractCollectionDecorator(Collection coll) {\n+        if (coll == null) {\n+            throw new IllegalArgumentException(\"Collection must not be null\");\n+        }\n+        this.collection = coll;\n+    }\n+\n+    /**\n+     * Gets the collection being decorated.\n+     * \n+     * @return the decorated collection\n+     */\n+    protected Collection getCollection() {\n+        return collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean add(Object object) {\n+        return collection.add(object);\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        return collection.addAll(coll);\n+    }\n+\n+    public void clear() {\n+        collection.clear();\n+    }\n+\n+    public boolean contains(Object object) {\n+        return collection.contains(object);\n+    }\n+\n+    public boolean isEmpty() {\n+        return collection.isEmpty();\n+    }\n+\n+    public Iterator iterator() {\n+        return collection.iterator();\n+    }\n+\n+    public boolean remove(Object object) {\n+        return collection.remove(object);\n+    }\n+\n+    public int size() {\n+        return collection.size();\n+    }\n+\n+    public Object[] toArray() {\n+        return collection.toArray();\n+    }\n+\n+    public Object[] toArray(Object[] object) {\n+        return collection.toArray(object);\n+    }\n+\n+    public boolean containsAll(Collection coll) {\n+        return collection.containsAll(coll);\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        return collection.removeAll(coll);\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        return collection.retainAll(coll);\n+    }\n+\n+    public boolean equals(Object object) {\n+        if (object == this) {\n+            return true;\n+        }\n+        return collection.equals(object);\n+    }\n+\n+    public int hashCode() {\n+        return collection.hashCode();\n+    }\n+\n+    public String toString() {\n+        return collection.toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/collection/CompositeCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/CompositeCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.iterators.IteratorChain;\n+\n+/**\n+ * Decorates a other collections to provide a single unified view.\n+ * <p>\n+ * Changes made to this collection will actually be made on the decorated collection.\n+ * Add and remove operations require the use of a pluggable strategy. If no \n+ * strategy is provided then add and remove are unsupported.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ *\n+ * @author Brian McCallister\n+ * @author Stephen Colebourne\n+ * @author Phil Steitz\n+ */\n+public class CompositeCollection implements Collection {\n+    \n+    /** CollectionMutator to handle changes to the collection */\n+    protected CollectionMutator mutator;\n+    \n+    /** Collections in the composite */\n+    protected Collection[] all;\n+    \n+    /**\n+     * Create an empty CompositeCollection.\n+     */\n+    public CompositeCollection() {\n+        super();\n+        this.all = new Collection[0];\n+    }\n+    \n+    /**\n+     * Create a Composite Collection with only coll composited.\n+     * \n+     * @param coll  a collection to decorate\n+     */\n+    public CompositeCollection(Collection coll) {\n+        super();\n+        this.addComposited(coll);\n+    }\n+    \n+    /**\n+     * Create a CompositeCollection with colls as the initial list of\n+     * composited collections.\n+     * \n+     * @param colls  an array of collections to decorate\n+     */\n+    public CompositeCollection(Collection[] colls) {\n+        super();\n+        this.addComposited(colls);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the size of this composite collection.\n+     * <p>\n+     * This implementation calls <code>size()</code> on each collection.\n+     *\n+     * @return total number of elements in all contained containers\n+     */\n+    public int size() {\n+        int size = 0;\n+        for (int i = this.all.length - 1; i >= 0; i--) {\n+            size += this.all[i].size();\n+        }\n+        return size;\n+    }\n+    \n+    /**\n+     * Checks whether this composite collection is empty.\n+     * <p>\n+     * This implementation calls <code>isEmpty()</code> on each collection.\n+     *\n+     * @return true if all of the contained collections are empty\n+     */\n+    public boolean isEmpty() {\n+        for (int i = this.all.length - 1; i >= 0; i--) {\n+            if (this.all[i].isEmpty() == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Checks whether this composite collection contains the object.\n+     * <p>\n+     * This implementation calls <code>contains()</code> on each collection.\n+     *\n+     * @return true if obj is contained in any of the contained collections\n+     */\n+    public boolean contains(Object obj) {\n+        for (int i = this.all.length - 1; i >= 0; i--) {\n+            if (this.all[i].contains(obj)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    /**\n+     * Gets an iterator over all the collections in this composite.\n+     * <p>\n+     * This implementation uses an <code>IteratorChain</code>.\n+     *\n+     * @return an <code>IteratorChain</code> instance which supports\n+     *  <code>remove()</code>. Iteration occurs over contained collections in\n+     *  the order they were added, but this behavior should not be relied upon.\n+     * @see IteratorChain\n+     */\n+    public Iterator iterator() {\n+        if (this.all.length == 0) {\n+            return IteratorUtils.EMPTY_ITERATOR;\n+        }\n+        IteratorChain chain = new IteratorChain();\n+        for (int i = 0; i < this.all.length; ++i) {\n+            chain.addIterator(this.all[i].iterator());\n+        }\n+        return chain;\n+    }\n+    \n+    /**\n+     * Returns an array containing all of the elements in this composite.\n+     *\n+     * @return an object array of all the elements in the collection\n+     */\n+    public Object[] toArray() {\n+        final Object[] result = new Object[this.size()];\n+        int i = 0;\n+        for (Iterator it = this.iterator(); it.hasNext(); i++) {\n+            result[i] = it.next();\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * Returns an object array, populating the supplied array if possible.\n+     * See <code>Collection</code> interface for full details.\n+     *\n+     * @return an array of all the elements in the collection\n+     */\n+    public Object[] toArray(Object array[]) {\n+        int size = this.size();\n+        Object[] result = null;\n+        if (array.length >= size) {\n+            result = array;\n+        }\n+        else {\n+            result = (Object[]) Array.newInstance(array.getClass().getComponentType(), size);\n+        }\n+        \n+        int offset = 0;\n+        for (int i = 0; i < this.all.length; ++i) {\n+            for (Iterator it = this.all[i].iterator(); it.hasNext();) {\n+                result[offset++] = it.next();\n+            }\n+        }\n+        if (result.length > size) {\n+            result[size] = null;\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * Adds an object to the collection, throwing UnsupportedOperationException\n+     * unless a CollectionMutator strategy is specified.\n+     *\n+     * @param obj  the object to add\n+     * @return true if the collection was modified\n+     * @throws UnsupportedOperationException if CollectionMutator hasn't been set\n+     * @throws UnsupportedOperationException if add is unsupported\n+     * @throws ClassCastException if the object cannot be added due to its type\n+     * @throws NullPointerException if the object cannot be added because its null\n+     * @throws IllegalArgumentException if the object cannot be added\n+     */\n+    public boolean add(Object obj) {\n+        if (this.mutator == null) {\n+           throw new UnsupportedOperationException(\n+           \"add() is not supported on CompositeCollection without a CollectionMutator strategy\");\n+        }\n+        return this.mutator.add(this, this.all, obj);\n+    }\n+    \n+    /**\n+     * Removes an object from the collection, throwing UnsupportedOperationException\n+     * unless a CollectionMutator strategy is specified.\n+     *\n+     * @param obj  the object being removed\n+     * @return true if the collection is changed\n+     * @throws UnsupportedOperationException if removed is unsupported\n+     * @throws ClassCastException if the object cannot be removed due to its type\n+     * @throws NullPointerException if the object cannot be removed because its null\n+     * @throws IllegalArgumentException if the object cannot be removed\n+     */\n+    public boolean remove(Object obj) {\n+        if (this.mutator == null) {\n+            throw new UnsupportedOperationException(\n+            \"remove() is not supported on CompositeCollection without a CollectionMutator strategy\");\n+        }\n+        return this.mutator.remove(this, this.all, obj);\n+    }\n+    \n+    /**\n+     * Checks whether this composite contains all the elements in the specified collection.\n+     * <p>\n+     * This implementation calls <code>contains()</code> for each element in the\n+     * specified collection.\n+     *\n+     * @param coll  the collection to check for\n+     * @return true if all elements contained\n+     */\n+    public boolean containsAll(Collection coll) {\n+        for (Iterator it = coll.iterator(); it.hasNext();) {\n+            if (this.contains(it.next()) == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    /**\n+     * Adds a collection of elements to this collection, throwing\n+     * UnsupportedOperationException unless a CollectionMutator strategy is specified.\n+     *\n+     * @param coll  the collection to add\n+     * @return true if the collection was modified\n+     * @throws UnsupportedOperationException if CollectionMutator hasn't been set\n+     * @throws UnsupportedOperationException if add is unsupported\n+     * @throws ClassCastException if the object cannot be added due to its type\n+     * @throws NullPointerException if the object cannot be added because its null\n+     * @throws IllegalArgumentException if the object cannot be added\n+     */\n+    public boolean addAll(Collection coll) {\n+        if (this.mutator == null) {\n+            throw new UnsupportedOperationException(\n+            \"addAll() is not supported on CompositeCollection without a CollectionMutator strategy\");\n+        }\n+        return this.mutator.addAll(this, this.all, coll);\n+    }\n+    \n+    /**\n+     * Removes the elements in the specified collection from this composite collection.\n+     * <p>\n+     * This implementation calls <code>removeAll</code> on each collection.\n+     *\n+     * @param coll  the collection to remove\n+     * @return true if the collection was modified\n+     * @throws UnsupportedOperationException if removeAll is unsupported\n+     */\n+    public boolean removeAll(Collection coll) {\n+        if (coll.size() == 0) {\n+            return false;\n+        }\n+        boolean changed = false;\n+        for (int i = this.all.length - 1; i >= 0; i--) {\n+            changed = (this.all[i].removeAll(coll) || changed);\n+        }\n+        return changed;\n+    }\n+    \n+    /**\n+     * Retains all the elements in the specified collection in this composite collection,\n+     * removing all others.\n+     * <p>\n+     * This implementation calls <code>retainAll()</code> on each collection.\n+     *\n+     * @param coll  the collection to remove\n+     * @return true if the collection was modified\n+     * @throws UnsupportedOperationException if retainAll is unsupported\n+     */\n+    public boolean retainAll(final Collection coll) {\n+        boolean changed = false;\n+        for (int i = this.all.length - 1; i >= 0; i--) {\n+            changed = (this.all[i].retainAll(coll) || changed);\n+        }\n+        return changed;\n+    }\n+    \n+    /**\n+     * Removes all of the elements from this collection .\n+     * <p>\n+     * This implementation calls <code>clear()</code> on each collection.\n+     *\n+     * @throws UnsupportedOperationException if clear is unsupported\n+     */\n+    public void clear() {\n+        for (int i = 0; i < this.all.length; ++i) {\n+            this.all[i].clear();\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Specify a CollectionMutator strategy instance to handle changes.\n+     *\n+     * @param mutator  the mutator to use\n+     */\n+    public void setMutator(CollectionMutator mutator) {\n+        this.mutator = mutator;\n+    }\n+    \n+    /**\n+     * Add these Collections to the list of collections in this composite\n+     *\n+     * @param comps Collections to be appended to the composite\n+     */\n+    public void addComposited(Collection[] comps) {\n+        ArrayList list = new ArrayList(Arrays.asList(this.all));\n+        list.addAll(Arrays.asList(comps));\n+        all = (Collection[]) list.toArray(new Collection[list.size()]);\n+    }\n+    \n+    /**\n+     * Add an additional collection to this composite.\n+     */\n+    public void addComposited(Collection c) {\n+        this.addComposited(new Collection[]{c});\n+    }\n+    \n+    /**\n+     * Add two additional collection to this composite.\n+     */\n+    public void addComposited(Collection c, Collection d) {\n+        this.addComposited(new Collection[]{c, d});\n+    }\n+    \n+    /**\n+     * Removes a collection from the those being decorated in this composite.\n+     *\n+     * @param coll  collection to be removed\n+     */\n+    public void removeComposited(Collection coll) {\n+        ArrayList list = new ArrayList(this.all.length);\n+        list.addAll(Arrays.asList(this.all));\n+        list.remove(coll);\n+        this.all = (Collection[]) list.toArray(new Collection[list.size()]);\n+    }\n+    \n+    /**\n+     * Returns a new collection containing all of the elements\n+     *\n+     * @return A new ArrayList containing all of the elements in this composite.\n+     *         The new collection is <i>not</i> backed by this composite.\n+     */\n+    public Collection toCollection() {\n+        return new ArrayList(this);\n+    }\n+    \n+    /**\n+     * Gets the collections being decorated.\n+     *\n+     * @return Unmodifiable collection of all collections in this composite.\n+     */\n+    public Collection getCollections() {\n+        return Collections.unmodifiableList(Arrays.asList(this.all));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Pluggable strategy to handle changes to the composite.\n+     */\n+    public interface CollectionMutator {\n+        \n+        /**\n+         * Called when an object is to be added to the composite.\n+         *\n+         * @param composite  the CompositeCollection being changed\n+         * @param collections  all of the Collection instances in this CompositeCollection\n+         * @param obj  the object being added\n+         * @return true if the collection is changed\n+         * @throws UnsupportedOperationException if add is unsupported\n+         * @throws ClassCastException if the object cannot be added due to its type\n+         * @throws NullPointerException if the object cannot be added because its null\n+         * @throws IllegalArgumentException if the object cannot be added\n+         */\n+        public boolean add(CompositeCollection composite, Collection[] collections, Object obj);\n+        \n+        /**\n+         * Called when a collection is to be added to the composite.\n+         *\n+         * @param composite  the CompositeCollection being changed\n+         * @param collections  all of the Collection instances in this CompositeCollection\n+         * @param coll  the collection being added\n+         * @return true if the collection is changed\n+         * @throws UnsupportedOperationException if add is unsupported\n+         * @throws ClassCastException if the object cannot be added due to its type\n+         * @throws NullPointerException if the object cannot be added because its null\n+         * @throws IllegalArgumentException if the object cannot be added\n+         */\n+        public boolean addAll(CompositeCollection composite, Collection[] collections, Collection coll);\n+        \n+        /**\n+         * Called when an object is to be removed to the composite.\n+         *\n+         * @param composite  the CompositeCollection being changed\n+         * @param collections  all of the Collection instances in this CompositeCollection\n+         * @param obj  the object being removed\n+         * @return true if the collection is changed\n+         * @throws UnsupportedOperationException if removed is unsupported\n+         * @throws ClassCastException if the object cannot be removed due to its type\n+         * @throws NullPointerException if the object cannot be removed because its null\n+         * @throws IllegalArgumentException if the object cannot be removed\n+         */\n+        public boolean remove(CompositeCollection composite, Collection[] collections, Object obj);\n+        \n+    }\n+    \n+}\n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/collection/PredicatedCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/PredicatedCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Decorates another <code>Collection</code> to validate that additions\n+ * match a specified predicate.\n+ * <p>\n+ * If an object cannot be added to the collection, an IllegalArgumentException\n+ * is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedCollection extends AbstractCollectionDecorator {\n+\n+    /** The predicate to use */\n+    protected final Predicate predicate;\n+\n+    /**\n+     * Factory method to create a predicated (validating) collection.\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are validated.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if collection or predicate is null\n+     * @throws IllegalArgumentException if the collection contains invalid elements\n+     */\n+    public static Collection decorate(Collection coll, Predicate predicate) {\n+        return new PredicatedCollection(coll, predicate);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are validated.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if collection or predicate is null\n+     * @throws IllegalArgumentException if the collection contains invalid elements\n+     */\n+    protected PredicatedCollection(Collection coll, Predicate predicate) {\n+        super(coll);\n+        if (predicate == null) {\n+            throw new IllegalArgumentException(\"Predicate must not be null\");\n+        }\n+        this.predicate = predicate;\n+        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n+            validate(it.next());\n+        }\n+    }\n+\n+    /**\n+     * Validates the object being added to ensure it matches the predicate.\n+     * <p>\n+     * The predicate itself should not throw an exception, but return false to\n+     * indicate that the object cannot be added.\n+     * \n+     * @param object  the object being added\n+     * @throws IllegalArgumentException if the add is invalid\n+     */\n+    protected void validate(Object object) {\n+        if (predicate.evaluate(object) == false) {\n+            throw new IllegalArgumentException(\"Cannot add Object '\" + object + \"' - Predicate rejected it\");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Override to validate the object being added to ensure it matches\n+     * the predicate.\n+     * \n+     * @param object  the object being added\n+     * @return the result of adding to the underlying collection\n+     * @throws IllegalArgumentException if the add is invalid\n+     */\n+    public boolean add(Object object) {\n+        validate(object);\n+        return getCollection().add(object);\n+    }\n+\n+    /**\n+     * Override to validate the objects being added to ensure they match\n+     * the predicate. If any one fails, no update is made to the underlying\n+     * collection.\n+     * \n+     * @param coll  the collection being added\n+     * @return the result of adding to the underlying collection\n+     * @throws IllegalArgumentException if the add is invalid\n+     */\n+    public boolean addAll(Collection coll) {\n+        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n+            validate(it.next());\n+        }\n+        return getCollection().addAll(coll);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/SynchronizedCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+/**\n+ * Decorates another <code>Collection</code> to synchronize its behaviour\n+ * for a multi-threaded environment.\n+ * <p>\n+ * Iterators must be manually synchronized:\n+ * <pre>\n+ * synchronized (coll) {\n+ *   Iterator it = coll.iterator();\n+ *   // do stuff with iterator\n+ * }\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedCollection implements Collection {\n+\n+    /** The collection to decorate */\n+    protected final Collection collection;\n+    /** The object to lock on, needed for List/SortedSet views */\n+    protected final Object lock;\n+\n+    /**\n+     * Factory method to create a synchronized collection.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @throws IllegalArgumentException if collection is null\n+     */\n+    public static Collection decorate(Collection coll) {\n+        return new SynchronizedCollection(coll);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param collection  the collection to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    protected SynchronizedCollection(Collection collection) {\n+        if (collection == null) {\n+            throw new IllegalArgumentException(\"Collection must not be null\");\n+        }\n+        this.collection = collection;\n+        this.lock = this;\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param collection  the collection to decorate, must not be null\n+     * @param lock  the lock object to use, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    protected SynchronizedCollection(Collection collection, Object lock) {\n+        if (collection == null) {\n+            throw new IllegalArgumentException(\"Collection must not be null\");\n+        }\n+        this.collection = collection;\n+        this.lock = lock;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean add(Object object) {\n+        synchronized (lock) {\n+            return collection.add(object);\n+        }\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        synchronized (lock) {\n+            return collection.addAll(coll);\n+        }\n+    }\n+\n+    public void clear() {\n+        synchronized (lock) {\n+            collection.clear();\n+        }\n+    }\n+\n+    public boolean contains(Object object) {\n+        synchronized (lock) {\n+            return collection.contains(object);\n+        }\n+    }\n+\n+    public boolean containsAll(Collection coll) {\n+        synchronized (lock) {\n+            return collection.containsAll(coll);\n+        }\n+    }\n+\n+    public boolean isEmpty() {\n+        synchronized (lock) {\n+            return collection.isEmpty();\n+        }\n+    }\n+\n+    /**\n+     * Iterators must be manually synchronized.\n+     * <pre>\n+     * synchronized (coll) {\n+     *   Iterator it = coll.iterator();\n+     *   // do stuff with iterator\n+     * }\n+     * \n+     * @return an iterator that must be manually synchronized on the collection\n+     */\n+    public Iterator iterator() {\n+        return collection.iterator();\n+    }\n+\n+    public Object[] toArray() {\n+        synchronized (lock) {\n+            return collection.toArray();\n+        }\n+    }\n+\n+    public Object[] toArray(Object[] object) {\n+        synchronized (lock) {\n+            return collection.toArray(object);\n+        }\n+    }\n+\n+    public boolean remove(Object object) {\n+        synchronized (lock) {\n+            return collection.remove(object);\n+        }\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        synchronized (lock) {\n+            return collection.removeAll(coll);\n+        }\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        synchronized (lock) {\n+            return collection.retainAll(coll);\n+        }\n+    }\n+\n+    public int size() {\n+        synchronized (lock) {\n+            return collection.size();\n+        }\n+    }\n+\n+    public boolean equals(Object object) {\n+        synchronized (lock) {\n+            if (object == this) {\n+                return true;\n+            }\n+            return collection.equals(object);\n+        }\n+    }\n+\n+    public int hashCode() {\n+        synchronized (lock) {\n+            return collection.hashCode();\n+        }\n+    }\n+\n+    public String toString() {\n+        synchronized (lock) {\n+            return collection.toString();\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/collection/TransformedCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/TransformedCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * Decorates another <code>Collection</code> to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedCollection extends AbstractCollectionDecorator {\n+\n+    /** The transformer to use */\n+    protected final Transformer transformer;\n+\n+    /**\n+     * Factory method to create a transforming collection.\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if collection or transformer is null\n+     */\n+    public static Collection decorate(Collection coll, Transformer transformer) {\n+        return new TransformedCollection(coll, transformer);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if collection or transformer is null\n+     */\n+    protected TransformedCollection(Collection coll, Transformer transformer) {\n+        super(coll);\n+        if (transformer == null) {\n+            throw new IllegalArgumentException(\"Transformer must not be null\");\n+        }\n+        this.transformer = transformer;\n+    }\n+\n+    /**\n+     * Transforms an object.\n+     * <p>\n+     * The transformer itself may throw an exception if necessary.\n+     * \n+     * @param object  the object to transform\n+     * @throws the transformed object\n+     */\n+    protected Object transform(Object object) {\n+        return transformer.transform(object);\n+    }\n+\n+    /**\n+     * Transforms a collection.\n+     * <p>\n+     * The transformer itself may throw an exception if necessary.\n+     * \n+     * @param coll  the collection to transform\n+     * @throws the transformed object\n+     */\n+    protected Collection transform(Collection coll) {\n+        List list = new ArrayList(coll.size());\n+        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n+            list.add(transform(it.next()));\n+        }\n+        return list;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean add(Object object) {\n+        object = transform(object);\n+        return getCollection().add(object);\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        coll = transform(coll);\n+        return getCollection().addAll(coll);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/collection/TypedCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/TypedCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Decorates a <code>Collection</code> to validate that elements added are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be added to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedCollection {\n+\n+    /**\n+     * Factory method to create a typed collection.\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are validated.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @param type  the type to allow into the collection, must not be null\n+     * @throws IllegalArgumentException if collection or type is null\n+     * @throws IllegalArgumentException if the collection contains invalid elements\n+     */\n+    public static Collection decorate(Collection coll, Class type) {\n+        return new PredicatedCollection(coll, PredicateUtils.instanceofPredicate(type));\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedCollection() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.Collection;\n+\n+import org.apache.commons.collections.BoundedCollection;\n+\n+/**\n+ * <code>UnmodifiableBoundedCollection</code> decorates another <code>BoundedCollection</code>\n+ * to ensure it can't be altered.\n+ * <p>\n+ * If a BoundedCollection is first wrapped in some other collection decorator,\n+ * such as synchronized or predicated, the BoundedCollection nature is lost.\n+ * The factory on this class will attempt to retrieve the bounded nature by\n+ * examining the package scope variables.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableBoundedCollection extends UnmodifiableCollection implements BoundedCollection {\n+    \n+    /**\n+     * Factory method to create an unmodifiable bounded collection.\n+     * \n+     * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    public static BoundedCollection decorate(BoundedCollection coll) {\n+        return new UnmodifiableBoundedCollection(coll);\n+    }\n+    \n+    /**\n+     * Factory method to create an unmodifiable bounded collection.\n+     * <p>\n+     * This method is capable of drilling down through up to 1000 other decorators \n+     * to find a suitable BoundedCollection.\n+     * \n+     * @param coll  the <code>BoundedCollection</code> to decorate, must not be null\n+     * @throws IllegalArgumentException if bag is null\n+     */\n+    public static BoundedCollection decorateUsing(Collection coll) {\n+        if (coll == null) {\n+            throw new IllegalArgumentException(\"The collection must not be null\");\n+        }\n+        \n+        // handle decorators\n+        for (int i = 0; i < 1000; i++) {  // counter to prevent infinite looping\n+            if (coll instanceof BoundedCollection) {\n+                break;  // normal loop exit\n+            } else if (coll instanceof AbstractCollectionDecorator) {\n+                coll = ((AbstractCollectionDecorator) coll).collection;\n+            } else if (coll instanceof SynchronizedCollection) {\n+                coll = ((SynchronizedCollection) coll).collection;\n+            } else {\n+                break;  // normal loop exit\n+            }\n+        }\n+            \n+        if (coll instanceof BoundedCollection == false) {\n+            throw new IllegalArgumentException(\"The collection is not a bounded collection\");\n+        }\n+        return new UnmodifiableBoundedCollection((BoundedCollection) coll);\n+    }    \n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @throws IllegalArgumentException if coll is null\n+     */\n+    protected UnmodifiableBoundedCollection(BoundedCollection coll) {\n+        super(coll);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public boolean isFull() {\n+        return ((BoundedCollection) collection).isFull();\n+    }\n+\n+    public int maxSize() {\n+        return ((BoundedCollection) collection).maxSize();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/collection/UnmodifiableCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.Unmodifiable;\n+\n+/**\n+ * Decorates another <code>Collection</code> to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableCollection extends AbstractCollectionDecorator implements Unmodifiable {\n+\n+    /**\n+     * Factory method to create an unmodifiable collection.\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @throws IllegalArgumentException if collection is null\n+     */\n+    public static Collection decorate(Collection coll) {\n+        if (coll instanceof Unmodifiable) {\n+            return coll;\n+        }\n+        return new UnmodifiableCollection(coll);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param coll  the collection to decorate, must not be null\n+     * @throws IllegalArgumentException if collection is null\n+     */\n+    protected UnmodifiableCollection(Collection coll) {\n+        super(coll);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public boolean add(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public boolean addAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Override to return an unmodifiable iterator.\n+     * \n+     * @return unmodifiable iterator\n+     */\n+    public Iterator iterator() {\n+        return IteratorUtils.unmodifiableIterator(getCollection().iterator());\n+    }\n+\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public boolean remove(Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public boolean removeAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Override as method unsupported.\n+     * @throws UnsupportedOperationException\n+     */\n+    public boolean retainAll(Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/list/AbstractListDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/AbstractListDecorator.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n+\n+/**\n+ * Decorates another <code>List</code> to provide additional behaviour.\n+ * <p>\n+ * Methods are forwarded directly to the decorated list.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractListDecorator extends AbstractCollectionDecorator implements List {\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected AbstractListDecorator(List list) {\n+        super(list);\n+    }\n+\n+    /**\n+     * Gets the list being decorated.\n+     * \n+     * @return the decorated list\n+     */\n+    protected List getList() {\n+        return (List) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void add(int index, Object object) {\n+        getList().add(index, object);\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        return getList().addAll(index, coll);\n+    }\n+\n+    public Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    public ListIterator listIterator() {\n+        return getList().listIterator();\n+    }\n+\n+    public ListIterator listIterator(int index) {\n+        return getList().listIterator(index);\n+    }\n+\n+    public Object remove(int index) {\n+        return getList().remove(index);\n+    }\n+\n+    public Object set(int index, Object object) {\n+        return getList().set(index, object);\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        return getList().subList(fromIndex, toIndex);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/list/FixedSizeList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/FixedSizeList.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.iterators.AbstractListIteratorDecorator;\n+\n+/**\n+ * Decorates another <code>List</code> to fix the size preventing add/remove.\n+ * <p>\n+ * The add, remove, clear and retain operations are unsupported.\n+ * The set method is allowed (as it doesn't change the list size).\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class FixedSizeList extends AbstractListDecorator {\n+\n+    /**\n+     * Factory method to create a fixed size list.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    public static List decorate(List list) {\n+        return new FixedSizeList(list);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected FixedSizeList(List list) {\n+        super(list);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public boolean add(Object object) {\n+        throw new UnsupportedOperationException(\"List is fixed size\");\n+    }\n+\n+    public void add(int index, Object object) {\n+        throw new UnsupportedOperationException(\"List is fixed size\");\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        throw new UnsupportedOperationException(\"List is fixed size\");\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        throw new UnsupportedOperationException(\"List is fixed size\");\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException(\"List is fixed size\");\n+    }\n+\n+    public Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public Iterator iterator() {\n+        return IteratorUtils.unmodifiableIterator(getCollection().iterator());\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    public ListIterator listIterator() {\n+        return new FixedSizeListIterator(getList().listIterator(0));\n+    }\n+\n+    public ListIterator listIterator(int index) {\n+        return new FixedSizeListIterator(getList().listIterator(index));\n+    }\n+\n+    public Object remove(int index) {\n+        throw new UnsupportedOperationException(\"List is fixed size\");\n+    }\n+\n+    public boolean remove(Object object) {\n+        throw new UnsupportedOperationException(\"List is fixed size\");\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        throw new UnsupportedOperationException(\"List is fixed size\");\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        throw new UnsupportedOperationException(\"List is fixed size\");\n+    }\n+\n+    public Object set(int index, Object object) {\n+        return getList().set(index, object);\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        List sub = getList().subList(fromIndex, toIndex);\n+        return new FixedSizeList(sub);\n+    }\n+\n+    /**\n+     * List iterator that only permits changes via set()\n+     */\n+    protected static class FixedSizeListIterator extends AbstractListIteratorDecorator {\n+        protected FixedSizeListIterator(ListIterator iterator) {\n+            super(iterator);\n+        }\n+        public void remove() {\n+            throw new UnsupportedOperationException(\"List is fixed size\");\n+        }\n+        public void add(Object object) {\n+            throw new UnsupportedOperationException(\"List is fixed size\");\n+        }\n+        public void remove(Object object) {\n+            throw new UnsupportedOperationException(\"List is fixed size\");\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/list/LazyList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/LazyList.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.List;\n+\n+import org.apache.commons.collections.Factory;\n+\n+/**\n+ * Decorates another <code>List</code> to create objects in the list on demand.\n+ * <p>\n+ * When the {@link #get(int)} method is called with an index greater than\n+ * the size of the list, the list will automatically grow in size and return\n+ * a new object from the specified factory. The gaps will be filled by null.\n+ * If a get method call encounters a null, it will be replaced with a new\n+ * object from the factory. Thus this list is unsuitable for storing null\n+ * objects.\n+ * <p>\n+ * For instance:\n+ *\n+ * <pre>\n+ * Factory factory = new Factory() {\n+ *     public Object create() {\n+ *         return new Date();\n+ *     }\n+ * }\n+ * List lazy = LazyList.decorate(new ArrayList(), factory);\n+ * Object obj = lazy.get(3);\n+ * </pre>\n+ *\n+ * After the above code is executed, <code>obj</code> will contain\n+ * a new <code>Date</code> instance.  Furthermore, that <code>Date</code>\n+ * instance is the fourth element in the list.  The first, second, \n+ * and third element are all set to <code>null</code>.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Arron Bates\n+ * @author Paul Jack\n+ */\n+public class LazyList extends AbstractListDecorator {\n+    \n+    /** The factory to use to lazily instantiate the objects */\n+    protected final Factory factory;\n+\n+    /**\n+     * Factory method to create a lazily instantiating list.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param factory  the factory to use for creation, must not be null\n+     * @throws IllegalArgumentException if list or factory is null\n+     */\n+    public static List decorate(List list, Factory factory) {\n+        return new LazyList(list, factory);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param factory  the factory to use for creation, must not be null\n+     * @throws IllegalArgumentException if list or factory is null\n+     */\n+    protected LazyList(List list, Factory factory) {\n+        super(list);\n+        if (factory == null) {\n+            throw new IllegalArgumentException(\"Factory must not be null\");\n+        }\n+        this.factory = factory;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Decorate the get method to perform the lazy behaviour.\n+     * <p>\n+     * If the requested index is greater than the current size, the list will \n+     * grow to the new size and a new object will be returned from the factory.\n+     * Indexes inbetween the old size and the requested size are left with a \n+     * placeholder that is replaced with a factory object when requested.\n+     * \n+     * @param index  the index to retrieve\n+     */\n+    public Object get(int index) {\n+        int size = getList().size();\n+        if (index < size) {\n+            // within bounds, get the object\n+            Object object = getList().get(index);\n+            if (object == null) {\n+                // item is a place holder, create new one, set and return\n+                object = factory.create();\n+                getList().set(index, object);\n+                return object;\n+            } else {\n+                // good and ready to go\n+                return object;\n+            }\n+        } else {\n+            // we have to grow the list\n+            for (int i = size; i < index; i++) {\n+                getList().add(null);\n+            }\n+            // create our last object, set and return\n+            Object object = factory.create();\n+            getList().add(object);\n+            return object;\n+        }\n+    }\n+\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        List sub = getList().subList(fromIndex, toIndex);\n+        return new LazyList(sub, factory);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/list/PredicatedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/PredicatedList.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.collection.PredicatedCollection;\n+import org.apache.commons.collections.iterators.AbstractListIteratorDecorator;\n+\n+/**\n+ * Decorates another <code>List</code> to validate that all additions\n+ * match a specified predicate.\n+ * <p>\n+ * If an object cannot be added to the list, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedList extends PredicatedCollection implements List {\n+\n+    /**\n+     * Factory method to create a predicated (validating) list.\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are validated.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if list or predicate is null\n+     * @throws IllegalArgumentException if the list contains invalid elements\n+     */\n+    public static List decorate(List list, Predicate predicate) {\n+        return new PredicatedList(list, predicate);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are validated.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if list or predicate is null\n+     * @throws IllegalArgumentException if the list contains invalid elements\n+     */\n+    protected PredicatedList(List list, Predicate predicate) {\n+        super(list, predicate);\n+    }\n+\n+    /**\n+     * Gets the list being decorated.\n+     * \n+     * @return the decorated list\n+     */\n+    protected List getList() {\n+        return (List) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    public Object remove(int index) {\n+        return getList().remove(index);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void add(int index, Object object) {\n+        validate(object);\n+        getList().add(index, object);\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        for (Iterator it = coll.iterator(); it.hasNext(); ) {\n+            validate(it.next());\n+        }\n+        return getList().addAll(index, coll);\n+    }\n+\n+    public ListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public ListIterator listIterator(int i) {\n+        return new PredicatedListIterator(getList().listIterator(i));\n+    }\n+\n+    public Object set(int index, Object object) {\n+        validate(object);\n+        return getList().set(index, object);\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        List sub = getList().subList(fromIndex, toIndex);\n+        return new PredicatedList(sub, predicate);\n+    }\n+\n+    /**\n+     * Inner class Iterator for the PredicatedList\n+     */\n+    protected class PredicatedListIterator extends AbstractListIteratorDecorator {\n+        \n+        protected PredicatedListIterator(ListIterator iterator) {\n+            super(iterator);\n+        }\n+        \n+        public void add(Object object) {\n+            validate(object);\n+            iterator.add(object);\n+        }\n+        \n+        public void set(Object object) {\n+            validate(object);\n+            iterator.set(object);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/list/SetUniqueList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/SetUniqueList.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n+import org.apache.commons.collections.iterators.AbstractListIteratorDecorator;\n+\n+/**\n+ * Decorates a <code>List</code> to ensure that no duplicates are present\n+ * much like a <code>Set</code>.\n+ * <p>\n+ * The <code>List</code> interface makes certain assumptions/requirements.\n+ * This implementation breaks these in certain ways, but this is merely the\n+ * result of rejecting duplicates.\n+ * Each violation is explained in the method, but it should not affect you.\n+ * <p>\n+ * The {@link ListOrderedSet} class provides an alternative approach, by wrapping\n+ * an existing Set and retaining insertion order in the iterator.\n+ * This class offers the <code>List</code> interface implementation as well.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Matthew Hawthorne\n+ * @author Stephen Colebourne\n+ */\n+public class SetUniqueList extends AbstractListDecorator {\n+\n+    /**\n+     * Internal Set to maintain uniqueness.\n+     */\n+    protected final Set set;\n+\n+    /**\n+     * Factory method to create a SetList using the supplied list to retain order.\n+     * <p>\n+     * If the list contains duplicates, these are removed (first indexed one kept).\n+     * A <code>HashSet</code> is used for the set behaviour.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    public static SetUniqueList decorate(List list) {\n+        if (list == null) {\n+            throw new IllegalArgumentException(\"List must not be null\");\n+        }\n+        if (list.isEmpty()) {\n+            return new SetUniqueList(list, new HashSet());\n+        } else {\n+            List temp = new ArrayList(list);\n+            list.clear();\n+            SetUniqueList sl = new SetUniqueList(list, new HashSet());\n+            sl.addAll(temp);\n+            return sl;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies) the List and specifies the set to use.\n+     * <p>\n+     * The set and list must both be correctly initialised to the same elements.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if set or list is null\n+     */\n+    protected SetUniqueList(List list, Set set) {\n+        super(list);\n+        if (set == null) {\n+            throw new IllegalArgumentException(\"Set must not be null\");\n+        }\n+        this.set = set;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an unmodifiable view as a Set.\n+     * \n+     * @return an unmodifiable set view\n+     */\n+    public Set asSet() {\n+        return Collections.unmodifiableSet(set);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds an element to the list if it is not already present.\n+     * <p>\n+     * <i>(Violation)</i>\n+     * The <code>List</code> interface requires that this method returns\n+     * <code>true</code> always. However this class may return <code>false</code>\n+     * because of the <code>Set</code> behaviour.\n+     * \n+     * @param object the object to add\n+     * @return true if object was added\n+     */\n+    public boolean add(Object object) {\n+        // gets initial size\n+        final int sizeBefore = size();\n+\n+        // adds element if unique\n+        add(size(), object);\n+\n+        // compares sizes to detect if collection changed\n+        return (sizeBefore != size());\n+    }\n+\n+    /**\n+     * Adds an element to a specific index in the list if it is not already present.\n+     * <p>\n+     * <i>(Violation)</i>\n+     * The <code>List</code> interface makes the assumption that the element is\n+     * always inserted. This may not happen with this implementation.\n+     * \n+     * @param index  the index to insert at\n+     * @param object  the object to add\n+     */\n+    public void add(int index, Object object) {\n+        // adds element if it is not contained already\n+        if (set.contains(object) == false) {\n+            super.add(index, object);\n+            set.add(object);\n+        }\n+    }\n+\n+    /**\n+     * Adds an element to the end of the list if it is not already present.\n+     * <p>\n+     * <i>(Violation)</i>\n+     * The <code>List</code> interface makes the assumption that the element is\n+     * always inserted. This may not happen with this implementation.\n+     * \n+     * @param coll  the collection to add\n+     */\n+    public boolean addAll(Collection coll) {\n+        return addAll(size(), coll);\n+    }\n+\n+    /**\n+     * Adds a collection of objects to the end of the list avoiding duplicates.\n+     * <p>\n+     * Only elements that are not already in this list will be added, and\n+     * duplicates from the specified collection will be ignored.\n+     * <p>\n+     * <i>(Violation)</i>\n+     * The <code>List</code> interface makes the assumption that the elements\n+     * are always inserted. This may not happen with this implementation.\n+     * \n+     * @param index  the index to insert at\n+     * @param coll  the collection to add in iterator order\n+     * @return true if this collection changed\n+     */\n+    public boolean addAll(int index, Collection coll) {\n+        // gets initial size\n+        final int sizeBefore = size();\n+\n+        // adds all elements\n+        for (final Iterator it = coll.iterator(); it.hasNext();) {\n+            add(it.next());\n+        }\n+\n+        // compares sizes to detect if collection changed\n+        return sizeBefore != size();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the value at the specified index avoiding duplicates.\n+     * <p>\n+     * The object is set into the specified index.\n+     * Afterwards, any previous duplicate is removed\n+     * If the object is not already in the list then a normal set occurs.\n+     * If it is present, then the old version is removed and re-added at this index\n+     * \n+     * @param index  the index to insert at\n+     * @param object  the object to set\n+     * @return the previous object\n+     */\n+    public Object set(int index, Object object) {\n+        int pos = indexOf(object);\n+        Object result = super.set(index, object);\n+        if (pos == -1 || pos == index) {\n+            return result;\n+        }\n+        return remove(pos);\n+    }\n+\n+    public boolean remove(Object object) {\n+        boolean result = super.remove(object);\n+        set.remove(object);\n+        return result;\n+    }\n+\n+    public Object remove(int index) {\n+        Object result = super.remove(index);\n+        set.remove(result);\n+        return result;\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        boolean result = super.removeAll(coll);\n+        set.removeAll(coll);\n+        return result;\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        boolean result = super.retainAll(coll);\n+        set.retainAll(coll);\n+        return result;\n+    }\n+\n+    public void clear() {\n+        super.clear();\n+        set.clear();\n+    }\n+\n+    public boolean contains(Object object) {\n+        return set.contains(object);\n+    }\n+\n+    public boolean containsAll(Collection coll) {\n+        return set.containsAll(coll);\n+    }\n+\n+    public Iterator iterator() {\n+        return new SetListIterator(super.iterator(), set);\n+    }\n+\n+    public ListIterator listIterator() {\n+        return new SetListListIterator(super.listIterator(), set);\n+    }\n+\n+    public ListIterator listIterator(int index) {\n+        return new SetListListIterator(super.listIterator(index), set);\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        return new SetUniqueList(super.subList(fromIndex, toIndex), set);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Inner class iterator.\n+     */\n+    protected static class SetListIterator extends AbstractIteratorDecorator {\n+        \n+        protected final Set set;\n+        protected Object last = null;\n+        \n+        protected SetListIterator(Iterator it, Set set) {\n+            super(it);\n+            this.set = set;\n+        }\n+        \n+        public Object next() {\n+            last = super.next();\n+            return last;\n+        }\n+\n+        public void remove() {\n+            super.remove();\n+            set.remove(last);\n+            last = null;\n+        }\n+\n+    }\n+    \n+    /**\n+     * Inner class iterator.\n+     */\n+    protected static class SetListListIterator extends AbstractListIteratorDecorator {\n+        \n+        protected final Set set;\n+        protected Object last = null;\n+        \n+        protected SetListListIterator(ListIterator it, Set set) {\n+            super(it);\n+            this.set = set;\n+        }\n+        \n+        public Object next() {\n+            last = super.next();\n+            return last;\n+        }\n+\n+        public Object previous() {\n+            last = super.previous();\n+            return last;\n+        }\n+\n+        public void remove() {\n+            super.remove();\n+            set.remove(last);\n+            last = null;\n+        }\n+\n+        public void add(Object object) {\n+            if (set.contains(object) == false) {\n+                super.add(object);\n+                set.add(object);\n+            }\n+        }\n+        \n+        public void set(Object object) {\n+            throw new UnsupportedOperationException(\"ListIterator does not support set\");\n+        }\n+\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/list/SynchronizedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/SynchronizedList.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.collection.SynchronizedCollection;\n+\n+/**\n+ * Decorates another <code>List</code> to synchronize its behaviour\n+ * for a multi-threaded environment.\n+ * <p>\n+ * Methods are synchronized, then forwarded to the decorated list.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedList extends SynchronizedCollection implements List {\n+\n+    /**\n+     * Factory method to create a synchronized list.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    public static List decorate(List list) {\n+        return new SynchronizedList(list);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected SynchronizedList(List list) {\n+        super(list);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param lock  the lock to use, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected SynchronizedList(List list, Object lock) {\n+        super(list, lock);\n+    }\n+\n+    /**\n+     * Gets the decorated list.\n+     * \n+     * @return the decorated list\n+     */\n+    protected List getList() {\n+        return (List) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void add(int index, Object object) {\n+        synchronized (lock) {\n+            getList().add(index, object);\n+        }\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        synchronized (lock) {\n+            return getList().addAll(index, coll);\n+        }\n+    }\n+\n+    public Object get(int index) {\n+        synchronized (lock) {\n+            return getList().get(index);\n+        }\n+    }\n+\n+    public int indexOf(Object object) {\n+        synchronized (lock) {\n+            return getList().indexOf(object);\n+        }\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        synchronized (lock) {\n+            return getList().lastIndexOf(object);\n+        }\n+    }\n+\n+    /**\n+     * Iterators must be manually synchronized.\n+     * <pre>\n+     * synchronized (coll) {\n+     *   ListIterator it = coll.listIterator();\n+     *   // do stuff with iterator\n+     * }\n+     * \n+     * @return an iterator that must be manually synchronized on the collection\n+     */\n+    public ListIterator listIterator() {\n+        return getList().listIterator();\n+    }\n+\n+    /**\n+     * Iterators must be manually synchronized.\n+     * <pre>\n+     * synchronized (coll) {\n+     *   ListIterator it = coll.listIterator(3);\n+     *   // do stuff with iterator\n+     * }\n+     * \n+     * @return an iterator that must be manually synchronized on the collection\n+     */\n+    public ListIterator listIterator(int index) {\n+        return getList().listIterator(index);\n+    }\n+\n+    public Object remove(int index) {\n+        synchronized (lock) {\n+            return getList().remove(index);\n+        }\n+    }\n+\n+    public Object set(int index, Object object) {\n+        synchronized (lock) {\n+            return getList().set(index, object);\n+        }\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        synchronized (lock) {\n+            List list = getList().subList(fromIndex, toIndex);\n+            // the lock is passed into the constructor here to ensure that the sublist is\n+            // synchronized on the same lock as the parent list\n+            return new SynchronizedList(list, lock);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/list/TransformedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/TransformedList.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.collection.TransformedCollection;\n+import org.apache.commons.collections.iterators.AbstractListIteratorDecorator;\n+\n+/**\n+ * Decorates another <code>List</code> to transform objects that are added.\n+ * <p>\n+ * The add and set methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedList extends TransformedCollection implements List {\n+\n+    /**\n+     * Factory method to create a transforming list.\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if list or transformer is null\n+     */\n+    public static List decorate(List list, Transformer transformer) {\n+        return new TransformedList(list, transformer);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if list or transformer is null\n+     */\n+    protected TransformedList(List list, Transformer transformer) {\n+        super(list, transformer);\n+    }\n+\n+    /**\n+     * Gets the decorated list.\n+     * \n+     * @return the decorated list\n+     */\n+    protected List getList() {\n+        return (List) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    public Object remove(int index) {\n+        return getList().remove(index);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void add(int index, Object object) {\n+        object = transform(object);\n+        getList().add(index, object);\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        coll = transform(coll);\n+        return getList().addAll(index, coll);\n+    }\n+\n+    public ListIterator listIterator() {\n+        return listIterator(0);\n+    }\n+\n+    public ListIterator listIterator(int i) {\n+        return new TransformedListIterator(getList().listIterator(i));\n+    }\n+\n+    public Object set(int index, Object object) {\n+        object = transform(object);\n+        return getList().set(index, object);\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        List sub = getList().subList(fromIndex, toIndex);\n+        return new TransformedList(sub, transformer);\n+    }\n+\n+    /**\n+     * Inner class Iterator for the TransformedList\n+     */\n+    protected class TransformedListIterator extends AbstractListIteratorDecorator {\n+        \n+        protected TransformedListIterator(ListIterator iterator) {\n+            super(iterator);\n+        }\n+        \n+        public void add(Object object) {\n+            object = transform(object);\n+            iterator.add(object);\n+        }\n+        \n+        public void set(Object object) {\n+            object = transform(object);\n+            iterator.set(object);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/list/TypedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/TypedList.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.List;\n+\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Decorates another <code>List</code> to validate that elements\n+ * added are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be added to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedList {\n+\n+    /**\n+     * Factory method to create a typed list.\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are validated.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @param type  the type to allow into the collection, must not be null\n+     * @throws IllegalArgumentException if list or type is null\n+     * @throws IllegalArgumentException if the list contains invalid elements\n+     */\n+    public static List decorate(List list, Class type) {\n+        return new PredicatedList(list, PredicateUtils.instanceofPredicate(type));\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedList() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/list/UnmodifiableList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/list/UnmodifiableList.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.collection.UnmodifiableCollection;\n+\n+/**\n+ * Decorates another <code>List</code> to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableList extends UnmodifiableCollection implements List {\n+\n+    /**\n+     * Factory method to create an unmodifiable list.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    public static List decorate(List list) {\n+        if (list instanceof Unmodifiable) {\n+            return list;\n+        }\n+        return new UnmodifiableList(list);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if list is null\n+     */\n+    protected UnmodifiableList(List list) {\n+        super(list);\n+    }\n+\n+    /**\n+     * Gets the list being decorated.\n+     * \n+     * @return the list being decorated\n+     */\n+    protected List getList() {\n+        return (List) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void add(int index, Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object get(int index) {\n+        return getList().get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return getList().indexOf(object);\n+    }\n+\n+    public int lastIndexOf(Object object) {\n+        return getList().lastIndexOf(object);\n+    }\n+\n+    public ListIterator listIterator() {\n+        return IteratorUtils.unmodifiableListIterator(getList().listIterator());\n+    }\n+\n+    public ListIterator listIterator(int index) {\n+        return IteratorUtils.unmodifiableListIterator(getList().listIterator(index));\n+    }\n+\n+    public Object remove(int index) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object set(int index, Object object) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public List subList(int fromIndex, int toIndex) {\n+        List sub = getList().subList(fromIndex, toIndex);\n+        return new UnmodifiableList(sub);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/AbstractMapDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractMapDecorator.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Provides a base decorator that enables additional functionality to be added\n+ * to a Map via decoration.\n+ * <p>\n+ * Methods are forwarded directly to the decorated map.\n+ * <p>\n+ * This implementation does not perform any special processing with\n+ * {@link #entrySet()}, {@link #keySet()} or {@link #values()}. Instead\n+ * it simply returns the set/collection from the wrapped map. This may be\n+ * undesirable, for example if you are trying to write a validating\n+ * implementation it would provide a loophole around the validation.\n+ * But, you might want that loophole, so this class is kept simple.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Daniel Rall\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractMapDecorator implements Map {\n+    \n+    /** The map to decorate */\n+    protected final Map map;\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     *\n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    public AbstractMapDecorator(Map map) {\n+        if (map == null) {\n+            throw new IllegalArgumentException(\"Map must not be null\");\n+        }\n+        this.map = map;\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected Map getMap() {\n+        return map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void clear() {\n+        map.clear();\n+    }\n+\n+    public boolean containsKey(Object key) {\n+        return map.containsKey(key);\n+    }\n+\n+    public boolean containsValue(Object value) {\n+        return map.containsValue(value);\n+    }\n+\n+    public Set entrySet() {\n+        return map.entrySet();\n+    }\n+\n+    public Object get(Object key) {\n+        return map.get(key);\n+    }\n+\n+    public boolean isEmpty() {\n+        return map.isEmpty();\n+    }\n+\n+    public Set keySet() {\n+        return map.keySet();\n+    }\n+\n+    public Object put(Object key, Object value) {\n+        return map.put(key, value);\n+    }\n+\n+    public void putAll(Map mapToCopy) {\n+        map.putAll(mapToCopy);\n+    }\n+\n+    public Object remove(Object key) {\n+        return map.remove(key);\n+    }\n+\n+    public int size() {\n+        return map.size();\n+    }\n+\n+    public Collection values() {\n+        return map.values();\n+    }\n+   \n+    public boolean equals(Object object) {\n+        if (object == this) {\n+            return true;\n+        }\n+        return map.equals(object);\n+    }\n+\n+    public int hashCode() {\n+        return map.hashCode();\n+    }\n+\n+    public String toString() {\n+        return map.toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+\n+/** \n+ * Provides a base decorator that enables additional functionality to be added\n+ * to a Map via decoration.\n+ * <p>\n+ * Methods are forwarded directly to the decorated map.\n+ * <p>\n+ * This implementation does not perform any special processing with the map views.\n+ * Instead it simply returns the set/collection from the wrapped map. This may be\n+ * undesirable, for example if you are trying to write a validating implementation\n+ * it would provide a loophole around the validation.\n+ * But, you might want that loophole, so this class is kept simple.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractSortedMapDecorator extends AbstractMapDecorator implements SortedMap {\n+    \n+    /**\n+     * Constructor that wraps (not copies).\n+     *\n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    public AbstractSortedMapDecorator(SortedMap map) {\n+        super(map);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n+    }\n+\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n+    }\n+\n+    public SortedMap headMap(Object toKey) {\n+        return getSortedMap().headMap(toKey);\n+    }\n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n+    public SortedMap subMap(Object fromKey, Object toKey) {\n+        return getSortedMap().subMap(fromKey, toKey);\n+    }\n+\n+    public SortedMap tailMap(Object fromKey) {\n+        return getSortedMap().tailMap(fromKey);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/FixedSizeMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/FixedSizeMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.set.UnmodifiableSet;\n+\n+/**\n+ * Decorates another <code>Map</code> to fix the size, preventing add/remove.\n+ * <p>\n+ * Any action that would change the size of the map is disallowed.\n+ * The put method is allowed to change the value associated with an existing\n+ * key however.\n+ * <p>\n+ * If trying to remove or clear the map, an UnsupportedOperationException is\n+ * thrown. If trying to put a new mapping into the map, an \n+ * IllegalArgumentException is thrown. This is because the put method can \n+ * succeed if the mapping's key already exists in the map, so the put method\n+ * is not always unsupported.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class FixedSizeMap extends AbstractMapDecorator implements Map {\n+\n+    /**\n+     * Factory method to create a fixed size map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static Map decorate(Map map) {\n+        return new FixedSizeMap(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected FixedSizeMap(Map map) {\n+        super(map);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public Object put(Object key, Object value) {\n+        if (map.containsKey(key) == false) {\n+            throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n+        }\n+        return map.put(key, value);\n+    }\n+\n+    public void putAll(Map mapToCopy) {\n+        for (Iterator it = mapToCopy.keySet().iterator(); it.hasNext(); ) {\n+            if (mapToCopy.containsKey(it.next()) == false) {\n+                throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n+            }\n+        }\n+        map.putAll(mapToCopy);\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException(\"Map is fixed size\");\n+    }\n+\n+    public Object remove(Object key) {\n+        throw new UnsupportedOperationException(\"Map is fixed size\");\n+    }\n+\n+    public Set entrySet() {\n+        Set set = map.entrySet();\n+        return UnmodifiableSet.decorate(set);\n+    }\n+\n+    public Set keySet() {\n+        Set set = map.keySet();\n+        return UnmodifiableSet.decorate(set);\n+    }\n+\n+    public Collection values() {\n+        Collection coll = map.values();\n+        return UnmodifiableCollection.decorate(coll);\n+    }\n+   \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/FixedSizeSortedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+\n+/**\n+ * Decorates another <code>SortedMap</code> to fix the size blocking add/remove.\n+ * <p>\n+ * Any action that would change the size of the map is disallowed.\n+ * The put method is allowed to change the value associated with an existing\n+ * key however.\n+ * <p>\n+ * If trying to remove or clear the map, an UnsupportedOperationException is\n+ * thrown. If trying to put a new mapping into the map, an \n+ * IllegalArgumentException is thrown. This is because the put method can \n+ * succeed if the mapping's key already exists in the map, so the put method\n+ * is not always unsupported.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class FixedSizeSortedMap extends FixedSizeMap implements SortedMap {\n+\n+    /**\n+     * Factory method to create a fixed size sorted map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static SortedMap decorate(SortedMap map) {\n+        return new FixedSizeSortedMap(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected FixedSizeSortedMap(SortedMap map) {\n+        super(map);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n+    }\n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n+    }\n+\n+    public SortedMap subMap(Object fromKey, Object toKey) {\n+        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n+        return new FixedSizeSortedMap(map);\n+    }\n+\n+    public SortedMap headMap(Object toKey) {\n+        SortedMap map = getSortedMap().headMap(toKey);\n+        return new FixedSizeSortedMap(map);\n+    }\n+\n+    public SortedMap tailMap(Object fromKey) {\n+        SortedMap map = getSortedMap().tailMap(fromKey);\n+        return new FixedSizeSortedMap(map);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/LazyMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/LazyMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.TransformerUtils;\n+\n+/**\n+ * Decorates another <code>Map</code> to create objects in the map on demand.\n+ * <p>\n+ * When the {@link #get(Object)} method is called with a key that does not\n+ * exist in the map, the factory is used to create the object. The created\n+ * object will be added to the map using the requested key.\n+ * <p>\n+ * For instance:\n+ * <pre>\n+ * Factory factory = new Factory() {\n+ *     public Object create() {\n+ *         return new Date();\n+ *     }\n+ * }\n+ * Map lazy = Lazy.map(new HashMap(), factory);\n+ * Object obj = lazy.get(\"NOW\");\n+ * </pre>\n+ *\n+ * After the above code is executed, <code>obj</code> will contain\n+ * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n+ * instance is mapped to the \"NOW\" key in the map.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class LazyMap extends AbstractMapDecorator implements Map {\n+\n+    /** The factory to use to construct elements */\n+    protected final Transformer factory;\n+\n+    /**\n+     * Factory method to create a lazily instantiated map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static Map decorate(Map map, Factory factory) {\n+        return new LazyMap(map, factory);\n+    }\n+\n+    /**\n+     * Factory method to create a lazily instantiated map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static Map decorate(Map map, Transformer factory) {\n+        return new LazyMap(map, factory);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    protected LazyMap(Map map, Factory factory) {\n+        super(map);\n+        if (factory == null) {\n+            throw new IllegalArgumentException(\"Factory must not be null\");\n+        }\n+        this.factory = TransformerUtils.asTransformer(factory);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    protected LazyMap(Map map, Transformer factory) {\n+        super(map);\n+        if (factory == null) {\n+            throw new IllegalArgumentException(\"Factory must not be null\");\n+        }\n+        this.factory = factory;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get(Object key) {\n+        // create value for key if key is not currently in the map\n+        if (map.containsKey(key) == false) {\n+            Object value = factory.transform(key);\n+            map.put(key, value);\n+            return value;\n+        }\n+        return map.get(key);\n+    }\n+\n+    // no need to wrap keySet, entrySet or values as they are views of\n+    // existing map entries - you can't do a map-style get on them.\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/LazySortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/LazySortedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+\n+import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * Decorates another <code>SortedMap</code> to create objects in the map on demand.\n+ * <p>\n+ * When the {@link #get(Object)} method is called with a key that does not\n+ * exist in the map, the factory is used to create the object. The created\n+ * object will be added to the map using the requested key.\n+ * <p>\n+ * For instance:\n+ * <pre>\n+ * Factory factory = new Factory() {\n+ *     public Object create() {\n+ *         return new Date();\n+ *     }\n+ * }\n+ * SortedMap lazy = Lazy.sortedMap(new HashMap(), factory);\n+ * Object obj = lazy.get(\"NOW\");\n+ * </pre>\n+ *\n+ * After the above code is executed, <code>obj</code> will contain\n+ * a new <code>Date</code> instance. Furthermore, that <code>Date</code>\n+ * instance is mapped to the \"NOW\" key in the map.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class LazySortedMap extends LazyMap implements SortedMap {\n+\n+    /**\n+     * Factory method to create a lazily instantiated sorted map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static SortedMap decorate(SortedMap map, Factory factory) {\n+        return new LazySortedMap(map, factory);\n+    }\n+\n+    /**\n+     * Factory method to create a lazily instantiated sorted map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    public static SortedMap decorate(SortedMap map, Transformer factory) {\n+        return new LazySortedMap(map, factory);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    protected LazySortedMap(SortedMap map, Factory factory) {\n+        super(map, factory);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param factory  the factory to use, must not be null\n+     * @throws IllegalArgumentException if map or factory is null\n+     */\n+    protected LazySortedMap(SortedMap map, Transformer factory) {\n+        super(map, factory);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n+    }\n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n+    }\n+\n+    public SortedMap subMap(Object fromKey, Object toKey) {\n+        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n+        return new LazySortedMap(map, factory);\n+    }\n+\n+    public SortedMap headMap(Object toKey) {\n+        SortedMap map = getSortedMap().headMap(toKey);\n+        return new LazySortedMap(map, factory);\n+    }\n+\n+    public SortedMap tailMap(Object fromKey) {\n+        SortedMap map = getSortedMap().tailMap(fromKey);\n+        return new LazySortedMap(map, factory);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/ListOrderedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ListOrderedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.AbstractCollection;\n+import java.util.AbstractSet;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n+import org.apache.commons.collections.iterators.EntrySetMapIterator;\n+import org.apache.commons.collections.iterators.MapIterator;\n+import org.apache.commons.collections.pairs.AbstractMapEntry;\n+\n+/**\n+ * Decorates a <code>Map</code> to ensure that the order of addition is retained.\n+ * <p>\n+ * The order will be used via the iterators and toArray methods on the views.\n+ * The order is also returned by the <code>MapIterator</code>.\n+ * <p>\n+ * If an object is added to the Map for a second time, it will remain in the\n+ * original position in the iteration.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Henri Yandell\n+ * @author Stephen Colebourne\n+ */\n+public class ListOrderedMap extends AbstractMapDecorator implements Map {\n+\n+    /** Internal list to hold the sequence of objects */\n+    protected final List insertOrder = new ArrayList();\n+\n+    /**\n+     * Factory method to create an ordered map.\n+     * <p>\n+     * An <code>ArrayList</code> is used to retain order.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static Map decorate(Map map) {\n+        return new ListOrderedMap(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected ListOrderedMap(Map map) {\n+        super(map);\n+        insertOrder.addAll(getMap().keySet());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object put(Object key, Object value) {\n+        if (getMap().containsKey(key)) {\n+            // re-adding doesn't change order\n+            return getMap().put(key, value);\n+        } else {\n+            // first add, so add to both map and list\n+            Object result = getMap().put(key, value);\n+            insertOrder.add(key);\n+            return result;\n+        }\n+    }\n+\n+    public void putAll(Map map) {\n+        for (Iterator it = map.entrySet().iterator(); it.hasNext();) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            put(entry.getKey(), entry.getValue());\n+        }\n+    }\n+\n+    public Object remove(Object key) {\n+        Object result = getMap().remove(key);\n+        insertOrder.remove(key);\n+        return result;\n+    }\n+\n+    public void clear() {\n+        getMap().clear();\n+        insertOrder.clear();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public MapIterator mapIterator() {\n+        return new EntrySetMapIterator(this);\n+    }\n+    \n+    public Set keySet() {\n+        return new KeySetView(this);\n+    }\n+\n+    public Collection values() {\n+        return new ValuesView(this);\n+    }\n+\n+    public Set entrySet() {\n+        return new EntrySetView(this, this.insertOrder);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the Map as a string.\n+     * \n+     * @return the Map as a String\n+     */\n+    public String toString() {\n+        if (isEmpty()) {\n+            return \"{}\";\n+        }\n+        StringBuffer buf = new StringBuffer();\n+        buf.append('{');\n+        boolean first = true;\n+        Iterator it = entrySet().iterator();\n+        while (it.hasNext()) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            Object key = entry.getKey();\n+            Object value = entry.getValue();\n+            buf.append(key == this ? \"(this Map)\" : key);\n+            buf.append('=');\n+            buf.append(value == this ? \"(this Map)\" : value);\n+            if (first) {\n+                first = false;\n+            } else {\n+                buf.append(\", \");\n+            }\n+        }\n+        buf.append('}');\n+        return buf.toString();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class ValuesView extends AbstractCollection {\n+        private final ListOrderedMap parent;\n+\n+        ValuesView(ListOrderedMap parent) {\n+            super();\n+            this.parent = parent;\n+        }\n+\n+        public int size() {\n+            return this.parent.size();\n+        }\n+\n+        public boolean contains(Object value) {\n+            return this.parent.containsValue(value);\n+        }\n+\n+        public void clear() {\n+            this.parent.clear();\n+        }\n+\n+        public Iterator iterator() {\n+            return new AbstractIteratorDecorator(parent.entrySet().iterator()) {\n+                public Object next() {\n+                    return ((Map.Entry) iterator.next()).getValue();\n+                }\n+            };\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    static class KeySetView extends AbstractSet {\n+        private final ListOrderedMap parent;\n+\n+        KeySetView(ListOrderedMap parent) {\n+            super();\n+            this.parent = parent;\n+        }\n+\n+        public int size() {\n+            return this.parent.size();\n+        }\n+\n+        public boolean contains(Object value) {\n+            return this.parent.containsKey(value);\n+        }\n+\n+        public void clear() {\n+            this.parent.clear();\n+        }\n+\n+        public Iterator iterator() {\n+            return new AbstractIteratorDecorator(parent.entrySet().iterator()) {\n+                public Object next() {\n+                    return ((Map.Entry) super.next()).getKey();\n+                }\n+            };\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    static class EntrySetView extends AbstractSet {\n+        private final ListOrderedMap parent;\n+        private final List insertOrder;\n+        private Set entrySet;\n+\n+        public EntrySetView(ListOrderedMap parent, List insertOrder) {\n+            super();\n+            this.parent = parent;\n+            this.insertOrder = insertOrder;\n+        }\n+\n+        private Set getEntrySet() {\n+            if (entrySet == null) {\n+                entrySet = parent.getMap().entrySet();\n+            }\n+            return entrySet;\n+        }\n+        \n+        public int size() {\n+            return this.parent.size();\n+        }\n+        public boolean isEmpty() {\n+            return this.parent.isEmpty();\n+        }\n+\n+        public boolean contains(Object obj) {\n+            return getEntrySet().contains(obj);\n+        }\n+\n+        public boolean containsAll(Collection coll) {\n+            return getEntrySet().containsAll(coll);\n+        }\n+\n+        public boolean remove(Object obj) {\n+            if (obj instanceof Map.Entry == false) {\n+                return false;\n+            }\n+            Object key = ((Map.Entry) obj).getKey();\n+            if (parent.getMap().containsKey(key) == false) {\n+                return false;\n+            }\n+            parent.remove(key);\n+            return true;\n+        }\n+\n+        public void clear() {\n+            this.parent.clear();\n+        }\n+        \n+        public boolean equals(Object obj) {\n+            if (obj == this) {\n+                return true;\n+            }\n+            return getEntrySet().equals(obj);\n+        }\n+        \n+        public int hashCode() {\n+            return getEntrySet().hashCode();\n+        }\n+\n+        public String toString() {\n+            return getEntrySet().toString();\n+        }\n+        \n+        public Iterator iterator() {\n+            return new OrderedIterator(parent, insertOrder);\n+        }\n+    }\n+    \n+    static class OrderedIterator extends AbstractIteratorDecorator {\n+        private final ListOrderedMap parent;\n+        private Object last = null;\n+        \n+        OrderedIterator(ListOrderedMap parent, List insertOrder) {\n+            super(insertOrder.iterator());\n+            this.parent = parent;\n+        }\n+        \n+        public Object next() {\n+            last = super.next();\n+            return new OrderedMapEntry(parent, last);\n+        }\n+\n+        public void remove() {\n+            super.remove();\n+            parent.getMap().remove(last);\n+        }\n+    }\n+    \n+    static class OrderedMapEntry extends AbstractMapEntry {\n+        private final ListOrderedMap parent;\n+        \n+        OrderedMapEntry(ListOrderedMap parent, Object key) {\n+            super(key, null);\n+            this.parent = parent;\n+        }\n+        \n+        public Object getValue() {\n+            return parent.get(key);\n+        }\n+\n+        public Object setValue(Object value) {\n+            return parent.getMap().put(key, value);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/PredicatedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/PredicatedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.lang.reflect.Array;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n+import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n+import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n+\n+/**\n+ * Decorates another <code>Map</code> to validate that additions\n+ * match a specified predicate.\n+ * <p>\n+ * If an object cannot be added to the map, an IllegalArgumentException\n+ * is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedMap extends AbstractMapDecorator {\n+\n+    /** The key predicate to use */\n+    protected final Predicate keyPredicate;\n+    /** The value predicate to use */\n+    protected final Predicate valuePredicate;\n+\n+    /**\n+     * Factory method to create a predicated (validating) map.\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are validated.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyPredicate  the predicate to validate the keys, null means no check\n+     * @param valuePredicate  the predicate to validate to values, null means no check\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    public static Map decorate(Map map, Predicate keyPredicate, Predicate valuePredicate) {\n+        return new PredicatedMap(map, keyPredicate, valuePredicate);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyPredicate  the predicate to validate the keys, null means no check\n+     * @param valuePredicate  the predicate to validate to values, null means no check\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    protected PredicatedMap(Map map, Predicate keyPredicate, Predicate valuePredicate) {\n+        super(map);\n+        this.keyPredicate = keyPredicate;\n+        this.valuePredicate = valuePredicate;\n+        \n+        Iterator it = map.entrySet().iterator();\n+        while (it.hasNext()) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            Object key = entry.getKey();\n+            Object value = entry.getValue();\n+            validate(key, value);\n+        }\n+    }\n+\n+    protected void validate(Object key, Object value) {\n+        if (keyPredicate != null && keyPredicate.evaluate(key) == false) {\n+            throw new IllegalArgumentException(\"Cannot add key - Predicate rejected it\");\n+        }\n+        if (valuePredicate != null && valuePredicate.evaluate(value) == false) {\n+            throw new IllegalArgumentException(\"Cannot add value - Predicate rejected it\");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object put(Object key, Object value) {\n+        validate(key, value);\n+        return map.put(key, value);\n+    }\n+\n+    public void putAll(Map mapToCopy) {\n+        Iterator it = mapToCopy.entrySet().iterator();\n+        while (it.hasNext()) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            Object key = entry.getKey();\n+            Object value = entry.getValue();\n+            validate(key, value);\n+        }\n+        map.putAll(mapToCopy);\n+    }\n+\n+    public Set entrySet() {\n+        if (valuePredicate == null) {\n+            return map.entrySet();\n+        }\n+        return new PredicatedMapEntrySet(map.entrySet(), valuePredicate);\n+    }\n+\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implementation of an entry set that checks (predicates) additions.\n+     */\n+    protected static class PredicatedMapEntrySet extends AbstractCollectionDecorator implements Set {\n+        \n+        /** The predicate to use */\n+        private final Predicate valuePredicate;\n+\n+        protected PredicatedMapEntrySet(Set set, Predicate valuePred) {\n+            super(set);\n+            this.valuePredicate = valuePred;\n+        }\n+\n+        public Iterator iterator() {\n+            return new PredicatedMapEntrySetIterator(collection.iterator(), valuePredicate);\n+        }\n+        \n+        public Object[] toArray() {\n+            Object[] array = collection.toArray();\n+            for (int i = 0; i < array.length; i++) {\n+                array[i] = new PredicatedMapEntry((Map.Entry) array[i], valuePredicate);\n+            }\n+            return array;\n+        }\n+        \n+        public Object[] toArray(Object array[]) {\n+            Object[] result = array;\n+            if (array.length > 0) {\n+                // we must create a new array to handle multi-threaded situations\n+                // where another thread could access data before we decorate it\n+                result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);\n+            }\n+            result = collection.toArray(result);\n+            for (int i = 0; i < result.length; i++) {\n+                result[i] = new PredicatedMapEntry((Map.Entry) result[i], valuePredicate);\n+            }\n+\n+            // check to see if result should be returned straight\n+            if (result.length > array.length) {\n+                return result;\n+            }\n+\n+            // copy back into input array to fulfil the method contract\n+            System.arraycopy(result, 0, array, 0, result.length);\n+            if (array.length > result.length) {\n+                array[result.length] = null;\n+            }\n+            return array;\n+        }\n+    }\n+\n+    /**\n+     * Implementation of an entry set iterator.\n+     */\n+    protected static class PredicatedMapEntrySetIterator extends AbstractIteratorDecorator {\n+        \n+        /** The predicate to use */\n+        private final Predicate valuePredicate;\n+        \n+        protected PredicatedMapEntrySetIterator(Iterator iterator, Predicate valuePredicate) {\n+            super(iterator);\n+            this.valuePredicate = valuePredicate;\n+        }\n+        \n+        public Object next() {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            return new PredicatedMapEntry(entry, valuePredicate);\n+        }\n+    }\n+\n+    /**\n+     * Implementation of a map entry that checks (predicates) additions.\n+     */\n+    protected static class PredicatedMapEntry extends AbstractMapEntryDecorator {\n+\n+        /** The predicate to use */\n+        private final Predicate predicate;\n+\n+        protected PredicatedMapEntry(Map.Entry entry, Predicate valuePredicate) {\n+            super(entry);\n+            this.predicate = valuePredicate;\n+        }\n+\n+        public Object setValue(Object o) {\n+            if (predicate != null && predicate.evaluate(o) == false) {\n+                throw new IllegalArgumentException(\"Cannot set value - Predicate rejected it\");\n+            }\n+            return entry.setValue(o);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/PredicatedSortedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Decorates another <code>SortedMap </code> to validate that additions\n+ * match a specified predicate.\n+ * <p>\n+ * If an object cannot be added to the map, an IllegalArgumentException\n+ * is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedSortedMap extends PredicatedMap implements SortedMap {\n+\n+    /**\n+     * Factory method to create a predicated (validating) sorted map.\n+     * <p>\n+     * If there are any elements already in the list being decorated, they\n+     * are validated.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyPredicate  the predicate to validate the keys, null means no check\n+     * @param valuePredicate  the predicate to validate to values, null means no check\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    public static SortedMap decorate(SortedMap map, Predicate keyPredicate, Predicate valuePredicate) {\n+        return new PredicatedSortedMap(map, keyPredicate, valuePredicate);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyPredicate  the predicate to validate the keys, null means no check\n+     * @param valuePredicate  the predicate to validate to values, null means no check\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    protected PredicatedSortedMap(SortedMap map, Predicate keyPredicate, Predicate valuePredicate) {\n+        super(map, keyPredicate, valuePredicate);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n+    }\n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n+    }\n+\n+    public SortedMap subMap(Object fromKey, Object toKey) {\n+        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n+        return new PredicatedSortedMap(map, keyPredicate, valuePredicate);\n+    }\n+\n+    public SortedMap headMap(Object toKey) {\n+        SortedMap map = getSortedMap().headMap(toKey);\n+        return new PredicatedSortedMap(map, keyPredicate, valuePredicate);\n+    }\n+\n+    public SortedMap tailMap(Object fromKey) {\n+        SortedMap map = getSortedMap().tailMap(fromKey);\n+        return new PredicatedSortedMap(map, keyPredicate, valuePredicate);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/TransformedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/TransformedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.lang.reflect.Array;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n+import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n+import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n+\n+/**\n+ * Decorates another <code>Map</code> to transform objects that are added.\n+ * <p>\n+ * The Map put methods and Map.Entry setValue method are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedMap extends AbstractMapDecorator {\n+\n+    /** The transformer to use for the key */\n+    protected final Transformer keyTransformer;\n+    /** The transformer to use for the value */\n+    protected final Transformer valueTransformer;\n+\n+    /**\n+     * Factory method to create a transforming map.\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyTransformer  the transformer to use for key conversion, null means no conversion\n+     * @param valueTransformer  the transformer to use for value conversion, null means no conversion\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) {\n+        return new TransformedMap(map, keyTransformer, valueTransformer);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyTransformer  the transformer to use for key conversion, null means no conversion\n+     * @param valueTransformer  the transformer to use for value conversion, null means no conversion\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) {\n+        super(map);\n+        this.keyTransformer = keyTransformer;\n+        this.valueTransformer = valueTransformer;\n+    }\n+\n+    /**\n+     * Transforms a key.\n+     * <p>\n+     * The transformer itself may throw an exception if necessary.\n+     * \n+     * @param object  the object to transform\n+     * @throws the transformed object\n+     */\n+    protected Object transformKey(Object object) {\n+        if (keyTransformer == null) {\n+            return object;\n+        }\n+        return keyTransformer.transform(object);\n+    }\n+\n+    /**\n+     * Transforms a value.\n+     * <p>\n+     * The transformer itself may throw an exception if necessary.\n+     * \n+     * @param object  the object to transform\n+     * @throws the transformed object\n+     */\n+    protected Object transformValue(Object object) {\n+        if (valueTransformer == null) {\n+            return object;\n+        }\n+        return valueTransformer.transform(object);\n+    }\n+\n+    /**\n+     * Transforms a map.\n+     * <p>\n+     * The transformer itself may throw an exception if necessary.\n+     * \n+     * @param map  the map to transform\n+     * @throws the transformed object\n+     */\n+    protected Map transformMap(Map map) {\n+        Map result = new HashMap(map.size());\n+        for (Iterator it = map.entrySet().iterator(); it.hasNext(); ) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));\n+        }\n+        return result;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object put(Object key, Object value) {\n+        key = transformKey(key);\n+        value = transformValue(value);\n+        return getMap().put(key, value);\n+    }\n+\n+    public void putAll(Map mapToCopy) {\n+        mapToCopy = transformMap(mapToCopy);\n+        getMap().putAll(mapToCopy);\n+    }\n+\n+    public Set entrySet() {\n+        if (valueTransformer == null) {\n+            return map.entrySet();\n+        }\n+        return new TransformedMapEntrySet(map.entrySet(), valueTransformer);\n+    }\n+\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implementation of an entry set that uses a transforming map entry.\n+     */\n+    protected static class TransformedMapEntrySet extends AbstractCollectionDecorator implements Set {\n+        \n+        /** The transformer to use */\n+        private final Transformer valueTransformer;\n+\n+        protected TransformedMapEntrySet(Set set, Transformer valueTransformer) {\n+            super(set);\n+            this.valueTransformer = valueTransformer;\n+        }\n+\n+        public Iterator iterator() {\n+            return new TransformedMapEntrySetIterator(collection.iterator(), valueTransformer);\n+        }\n+        \n+        public Object[] toArray() {\n+            Object[] array = collection.toArray();\n+            for (int i = 0; i < array.length; i++) {\n+                array[i] = new TransformedMapEntry((Map.Entry) array[i], valueTransformer);\n+            }\n+            return array;\n+        }\n+        \n+        public Object[] toArray(Object array[]) {\n+            Object[] result = array;\n+            if (array.length > 0) {\n+                // we must create a new array to handle multi-threaded situations\n+                // where another thread could access data before we decorate it\n+                result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);\n+            }\n+            result = collection.toArray(result);\n+            for (int i = 0; i < result.length; i++) {\n+                result[i] = new TransformedMapEntry((Map.Entry) result[i], valueTransformer);\n+            }\n+\n+            // check to see if result should be returned straight\n+            if (result.length > array.length) {\n+                return result;\n+            }\n+\n+            // copy back into input array to fulfil the method contract\n+            System.arraycopy(result, 0, array, 0, result.length);\n+            if (array.length > result.length) {\n+                array[result.length] = null;\n+            }\n+            return array;\n+        }\n+    }\n+\n+    /**\n+     * Implementation of an entry set iterator.\n+     */\n+    protected static class TransformedMapEntrySetIterator extends AbstractIteratorDecorator {\n+        \n+        /** The transformer to use */\n+        private final Transformer valueTransformer;\n+        \n+        protected TransformedMapEntrySetIterator(Iterator iterator, Transformer valueTransformer) {\n+            super(iterator);\n+            this.valueTransformer = valueTransformer;\n+        }\n+        \n+        public Object next() {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            return new TransformedMapEntry(entry, valueTransformer);\n+        }\n+    }\n+\n+    /**\n+     * Implementation of a map entry that transforms additions.\n+     */\n+    protected static class TransformedMapEntry extends AbstractMapEntryDecorator {\n+\n+        /** The transformer to use */\n+        private final Transformer valueTransformer;\n+\n+        protected TransformedMapEntry(Map.Entry entry, Transformer valueTransformer) {\n+            super(entry);\n+            this.valueTransformer = valueTransformer;\n+        }\n+\n+        public Object setValue(Object object) {\n+            if (valueTransformer != null) {\n+                object = valueTransformer.transform(object);\n+            }\n+            return entry.setValue(object);\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/TransformedSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/TransformedSortedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * Decorates another <code>SortedMap </code> to transform objects that are added.\n+ * <p>\n+ * The Map put methods and Map.Entry setValue method are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedSortedMap extends TransformedMap implements SortedMap {\n+\n+    /**\n+     * Factory method to create a transforming sorted map.\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyTransformer  the predicate to validate the keys, null means no transformation\n+     * @param valueTransformer  the predicate to validate to values, null means no transformation\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    public static SortedMap decorate(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n+        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the collection being decorated, they\n+     * are NOT transformed.</p>\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyTransformer  the predicate to validate the keys, null means no transformation\n+     * @param valueTransformer  the predicate to validate to values, null means no transformation\n+     * @throws IllegalArgumentException if the map is null\n+     */\n+    protected TransformedSortedMap(SortedMap map, Transformer keyTransformer, Transformer valueTransformer) {\n+        super(map, keyTransformer, valueTransformer);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n+    }\n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n+    }\n+\n+    public SortedMap subMap(Object fromKey, Object toKey) {\n+        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n+        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    }\n+\n+    public SortedMap headMap(Object toKey) {\n+        SortedMap map = getSortedMap().headMap(toKey);\n+        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    }\n+\n+    public SortedMap tailMap(Object fromKey) {\n+        SortedMap map = getSortedMap().tailMap(fromKey);\n+        return new TransformedSortedMap(map, keyTransformer, valueTransformer);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/TypedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/TypedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Map;\n+\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Decorates another <code>Map</code> to validate that elements added\n+ * are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be added to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedMap {\n+\n+    /**\n+     * Factory method to create a typed map.\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * are validated.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyType  the type to allow as keys, must not be null\n+     * @param valueType  the type to allow as values, must not be null\n+     * @throws IllegalArgumentException if list or type is null\n+     * @throws IllegalArgumentException if the list contains invalid elements\n+     */\n+    public static Map decorate(Map map, Class keyType, Class valueType) {\n+        return new PredicatedMap(\n+            map,\n+            PredicateUtils.instanceofPredicate(keyType),\n+            PredicateUtils.instanceofPredicate(valueType)\n+        );\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedMap() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/TypedSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/TypedSortedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.SortedMap;\n+\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Decorates another <code>SortedMap</code> to validate that elements added\n+ * are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be added to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedSortedMap {\n+\n+    /**\n+     * Factory method to create a typed sorted map.\n+     * <p>\n+     * If there are any elements already in the map being decorated, they\n+     * are validated.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @param keyType  the type to allow as keys, must not be null\n+     * @param valueType  the type to allow as values, must not be null\n+     * @throws IllegalArgumentException if list or type is null\n+     * @throws IllegalArgumentException if the list contains invalid elements\n+     */\n+    public static SortedMap decorate(SortedMap map, Class keyType, Class valueType) {\n+        return new PredicatedSortedMap(\n+            map,\n+            PredicateUtils.instanceofPredicate(keyType),\n+            PredicateUtils.instanceofPredicate(valueType)\n+        );\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedSortedMap() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.lang.reflect.Array;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n+import org.apache.commons.collections.pairs.AbstractMapEntryDecorator;\n+import org.apache.commons.collections.set.UnmodifiableSet;\n+\n+/**\n+ * Decorates another <code>Map</code> to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableMap extends AbstractMapDecorator {\n+\n+    /**\n+     * Factory method to create an unmodifiable map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static Map decorate(Map map) {\n+        return new UnmodifiableMap(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected UnmodifiableMap(Map map) {\n+        super(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void clear() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object put(Object key, Object value) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void putAll(Map mapToCopy) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Object remove(Object key) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public Set entrySet() {\n+        Set set = super.entrySet();\n+        return new UnmodifiableEntrySet(set);\n+    }\n+\n+    public Set keySet() {\n+        Set set = super.keySet();\n+        return UnmodifiableSet.decorate(set);\n+    }\n+\n+    public Collection values() {\n+        Collection coll = super.values();\n+        return UnmodifiableCollection.decorate(coll);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implementation of an entry set that checks (predicates) additions.\n+     */\n+    protected static class UnmodifiableEntrySet extends UnmodifiableSet {\n+        \n+        protected UnmodifiableEntrySet(Set set) {\n+            super(set);\n+        }\n+\n+        public Iterator iterator() {\n+            return new UnmodifiableEntrySetIterator(collection.iterator());\n+        }\n+        \n+        public Object[] toArray() {\n+            Object[] array = collection.toArray();\n+            for (int i = 0; i < array.length; i++) {\n+                array[i] = new UnmodifiableEntry((Map.Entry) array[i]);\n+            }\n+            return array;\n+        }\n+        \n+        public Object[] toArray(Object array[]) {\n+            Object[] result = array;\n+            if (array.length > 0) {\n+                // we must create a new array to handle multi-threaded situations\n+                // where another thread could access data before we decorate it\n+                result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);\n+            }\n+            result = collection.toArray(result);\n+            for (int i = 0; i < result.length; i++) {\n+                result[i] = new UnmodifiableEntry((Map.Entry) result[i]);\n+            }\n+\n+            // check to see if result should be returned straight\n+            if (result.length > array.length) {\n+                return result;\n+            }\n+\n+            // copy back into input array to fulfil the method contract\n+            System.arraycopy(result, 0, array, 0, result.length);\n+            if (array.length > result.length) {\n+                array[result.length] = null;\n+            }\n+            return array;\n+        }\n+    }\n+\n+    /**\n+     * Implementation of an entry set iterator.\n+     */\n+    protected static class UnmodifiableEntrySetIterator extends AbstractIteratorDecorator {\n+        \n+        protected UnmodifiableEntrySetIterator(Iterator iterator) {\n+            super(iterator);\n+        }\n+        \n+        public Object next() {\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            return new UnmodifiableEntry(entry);\n+        }\n+        \n+        public void remove() {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+    /**\n+     * Implementation of a map entry that is unmodifiable.\n+     */\n+    protected static class UnmodifiableEntry extends AbstractMapEntryDecorator {\n+\n+        protected UnmodifiableEntry(Map.Entry entry) {\n+            super(entry);\n+        }\n+\n+        public Object setValue(Object o) {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.SortedMap;\n+\n+/**\n+ * Decorates another <code>SortedMap</code> to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableSortedMap extends UnmodifiableMap implements SortedMap {\n+\n+    /**\n+     * Factory method to create an unmodifiable sorted map.\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    public static SortedMap decorate(SortedMap map) {\n+        return new UnmodifiableSortedMap(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param map  the map to decorate, must not be null\n+     * @throws IllegalArgumentException if map is null\n+     */\n+    protected UnmodifiableSortedMap(Map map) {\n+        super(map);\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected SortedMap getSortedMap() {\n+        return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object firstKey() {\n+        return getSortedMap().firstKey();\n+    }\n+\n+    public Object lastKey() {\n+        return getSortedMap().lastKey();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedMap().comparator();\n+    }\n+\n+    public SortedMap subMap(Object fromKey, Object toKey) {\n+        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n+        return new UnmodifiableSortedMap(map);\n+    }\n+\n+    public SortedMap headMap(Object toKey) {\n+        SortedMap map = getSortedMap().headMap(toKey);\n+        return new UnmodifiableSortedMap(map);\n+    }\n+\n+    public SortedMap tailMap(Object fromKey) {\n+        SortedMap map = getSortedMap().tailMap(fromKey);\n+        return new UnmodifiableSortedMap(map);\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/observed/ObservableCollection.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservableCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableCollection.java,v 1.2 2003/10/09 20:50:04 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableCollection.java,v 1.3 2003/11/16 00:05:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Collection;\n import java.util.Iterator;\n \n-import org.apache.commons.collections.decorators.AbstractCollectionDecorator;\n-import org.apache.commons.collections.decorators.AbstractIteratorDecorator;\n+import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n+import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n import org.apache.commons.collections.observed.standard.StandardModificationHandler;\n \n /**\n  * See this class for details of configuration available.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/10/09 20:50:04 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/16 00:05:47 $\n  * \n  * @author Stephen Colebourne\n  */\n--- a/src/java/org/apache/commons/collections/observed/ObservableList.java\n+++ b/src/java/org/apache/commons/collections/observed/ObservableList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableList.java,v 1.3 2003/10/13 21:18:56 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableList.java,v 1.4 2003/11/16 00:05:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.List;\n import java.util.ListIterator;\n \n-import org.apache.commons.collections.decorators.AbstractListIteratorDecorator;\n+import org.apache.commons.collections.iterators.AbstractListIteratorDecorator;\n \n /**\n  * Decorates a <code>List</code> implementation to observe modifications.\n  * base <code>List</code>.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/10/13 21:18:56 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 00:05:47 $\n  * \n  * @author Stephen Colebourne\n  */\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/pairs/AbstractMapEntryDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/pairs/Attic/AbstractMapEntryDecorator.java,v 1.1 2003/11/16 00:05:48 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.pairs;\n+\n+import java.util.Map;\n+\n+/**\n+ * Provides a base decorator that allows additional functionality to be added\n+ * to a Map Entry.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:48 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractMapEntryDecorator implements Map.Entry {\n+    \n+    /** The <code>Map.Entry</code> to decorate */\n+    protected final Map.Entry entry;\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     *\n+     * @param entry  the <code>Map.Entry</code> to decorate, must not be null\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    public AbstractMapEntryDecorator(Map.Entry entry) {\n+        if (entry == null) {\n+            throw new IllegalArgumentException(\"Map entry must not be null\");\n+        }\n+        this.entry = entry;\n+    }\n+\n+    /**\n+     * Gets the map being decorated.\n+     * \n+     * @return the decorated map\n+     */\n+    protected Map.Entry getMapEntry() {\n+        return entry;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object getKey() {\n+        return entry.getKey();\n+    }\n+\n+    public Object getValue() {\n+        return entry.getValue();\n+    }\n+\n+    public Object setValue(Object object) {\n+        return entry.setValue(object);\n+    }\n+   \n+    public boolean equals(Object object) {\n+        if (object == this) {\n+            return true;\n+        }\n+        return entry.equals(object);\n+    }\n+\n+    public int hashCode() {\n+        return entry.hashCode();\n+    }\n+\n+    public String toString() {\n+        return entry.toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/AbstractSetDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/AbstractSetDecorator.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.collection.AbstractCollectionDecorator;\n+\n+/**\n+ * Decorates another <code>Set</code> to provide additional behaviour.\n+ * <p>\n+ * Methods are forwarded directly to the decorated set.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractSetDecorator extends AbstractCollectionDecorator implements Set {\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    protected AbstractSetDecorator(Set set) {\n+        super(set);\n+    }\n+\n+    /**\n+     * Gets the set being decorated.\n+     * \n+     * @return the decorated set\n+     */\n+    protected Set getSet() {\n+        return (Set) getCollection();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/AbstractSortedSetDecorator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/AbstractSortedSetDecorator.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.SortedSet;\n+\n+/**\n+ * Decorates another <code>SortedSet</code> to provide additional behaviour.\n+ * <p>\n+ * Methods are forwarded directly to the decorated set.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractSortedSetDecorator extends AbstractSetDecorator implements SortedSet {\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    protected AbstractSortedSetDecorator(Set set) {\n+        super(set);\n+    }\n+\n+    /**\n+     * Gets the sorted set being decorated.\n+     * \n+     * @return the decorated set\n+     */\n+    protected SortedSet getSortedSet() {\n+        return (SortedSet) getCollection();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public SortedSet subSet(Object fromElement, Object toElement) {\n+        return getSortedSet().subSet(fromElement, toElement);\n+    }\n+\n+    public SortedSet headSet(Object toElement) {\n+        return getSortedSet().headSet(toElement);\n+    }\n+\n+    public SortedSet tailSet(Object fromElement) {\n+        return getSortedSet().tailSet(fromElement);\n+    }\n+\n+    public Object first() {\n+        return getSortedSet().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedSet().last();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedSet().comparator();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/ListOrderedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/ListOrderedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.collections.iterators.AbstractIteratorDecorator;\n+\n+/**\n+ * Decorates another <code>Set</code> to ensure that the order of addition\n+ * is retained and used by the iterator.\n+ * <p>\n+ * If an object is added to the set for a second time, it will remain in the\n+ * original position in the iteration.\n+ * The order can be observed from the set via the iterator or toArray methods.\n+ * <p>\n+ * The ListOrderedSet also has various useful direct methods. These include many\n+ * from <code>List</code>, such as <code>get(int)</code>, <code>remove(int)</code>\n+ * and <code>indexOf(int)</code>. An unmodifiable <code>List</code> view of \n+ * the set can be obtained via <code>asList()</code>.\n+ * <p>\n+ * This class cannot implement the <code>List</code> interface directly as\n+ * various interface methods (notably equals/hashCode) are incompatable with a set.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Henning P. Schmiedehausen\n+ */\n+public class ListOrderedSet extends AbstractSetDecorator implements Set {\n+\n+    /** Internal list to hold the sequence of objects */\n+    protected final List setOrder;\n+\n+    /**\n+     * Factory method to create an ordered set.\n+     * <p>\n+     * An <code>ArrayList</code> is used to retain order.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    public static ListOrderedSet decorate(Set set) {\n+        return new ListOrderedSet(set);\n+    }\n+\n+    /**\n+     * Factory method to create an ordered set using the supplied list to retain order.\n+     * <p>\n+     * A <code>HashSet</code> is used for the set behaviour.\n+     * \n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    public static ListOrderedSet decorate(List list) {\n+        Set set = new HashSet(list);\n+        list.retainAll(set);\n+        \n+        return new ListOrderedSet(set, list);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    protected ListOrderedSet(Set set) {\n+        super(set);\n+        setOrder = new ArrayList(set);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies) the Set and specifies the list to use.\n+     * <p>\n+     * The set and list must both be correctly initialised to the same elements.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param list  the list to decorate, must not be null\n+     * @throws IllegalArgumentException if set or list is null\n+     */\n+    protected ListOrderedSet(Set set, List list) {\n+        super(set);\n+        if (list == null) {\n+            throw new IllegalArgumentException(\"List must not be null\");\n+        }\n+        setOrder = list;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an unmodifiable view of the order of the Set.\n+     * \n+     * @return an unmodifiable list view\n+     */\n+    public List asList() {\n+        return Collections.unmodifiableList(setOrder);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void clear() {\n+        collection.clear();\n+        setOrder.clear();\n+    }\n+\n+    public Iterator iterator() {\n+        return new OrderedSetIterator(setOrder.iterator(), collection);\n+    }\n+\n+    public boolean add(Object object) {\n+        if (collection.contains(object)) {\n+            // re-adding doesn't change order\n+            return collection.add(object);\n+        } else {\n+            // first add, so add to both set and list\n+            boolean result = collection.add(object);\n+            setOrder.add(object);\n+            return result;\n+        }\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        boolean result = false;\n+        for (Iterator it = coll.iterator(); it.hasNext();) {\n+            Object object = it.next();\n+            result = result | add(object);\n+        }\n+        return result;\n+    }\n+\n+    public boolean remove(Object object) {\n+        boolean result = collection.remove(object);\n+        setOrder.remove(object);\n+        return result;\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        boolean result = false;\n+        for (Iterator it = coll.iterator(); it.hasNext();) {\n+            Object object = it.next();\n+            result = result | remove(object);\n+        }\n+        return result;\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        boolean result = collection.retainAll(coll);\n+        if (result == false) {\n+            return false;\n+        } else if (collection.size() == 0) {\n+            setOrder.clear();\n+        } else {\n+            for (Iterator it = setOrder.iterator(); it.hasNext();) {\n+                Object object = (Object) it.next();\n+                if (collection.contains(object) == false) {\n+                    it.remove();\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    public Object[] toArray() {\n+        return setOrder.toArray();\n+    }\n+\n+    public Object[] toArray(Object a[]) {\n+        return setOrder.toArray(a);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object get(int index) {\n+        return setOrder.get(index);\n+    }\n+\n+    public int indexOf(Object object) {\n+        return setOrder.indexOf(object);\n+    }\n+\n+    public void add(int index, Object object) {\n+        if (contains(object) == false) {\n+            collection.add(object);\n+            setOrder.add(index, object);\n+        }\n+    }\n+\n+    public boolean addAll(int index, Collection coll) {\n+        boolean changed = false;\n+        for (Iterator it = coll.iterator(); it.hasNext();) {\n+            Object object = (Object) it.next();\n+            if (contains(object) == false) {\n+                collection.add(object);\n+                setOrder.add(index, object);\n+                index++;\n+                changed = true;\n+            }\n+        }\n+        return changed;\n+    }\n+\n+    public Object remove(int index) {\n+        Object obj = setOrder.remove(index);\n+        remove(obj);\n+        return obj;\n+    }\n+\n+    /**\n+     * Uses the underlying List's toString so that order is achieved. \n+     * This means that the decorated Set's toString is not used, so \n+     * any custom toStrings will be ignored. \n+     */\n+    // Fortunately List.toString and Set.toString look the same\n+    public String toString() {\n+        return setOrder.toString();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Internal iterator handle remove.\n+     */\n+    protected static class OrderedSetIterator extends AbstractIteratorDecorator {\n+        \n+        /** Object we iterate on */\n+        protected final Collection set;\n+        /** Last object retrieved */\n+        protected Object last;\n+\n+        private OrderedSetIterator(Iterator iterator, Collection set) {\n+            super(iterator);\n+            this.set = set;\n+        }\n+\n+        public Object next() {\n+            last = iterator.next();\n+            return last;\n+        }\n+\n+        public void remove() {\n+            set.remove(last);\n+            iterator.remove();\n+            last = null;\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/PredicatedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/PredicatedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.collection.PredicatedCollection;\n+\n+/**\n+ * Decorates another <code>Set</code> to validate that all additions\n+ * match a specified predicate.\n+ * <p>\n+ * If an object cannot be added to the set, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedSet extends PredicatedCollection implements Set {\n+\n+    /**\n+     * Factory method to create a predicated (validating) set.\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are validated.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if set or predicate is null\n+     * @throws IllegalArgumentException if the set contains invalid elements\n+     */\n+    public static Set decorate(Set set, Predicate predicate) {\n+        return new PredicatedSet(set, predicate);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are validated.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if set or predicate is null\n+     * @throws IllegalArgumentException if the set contains invalid elements\n+     */\n+    protected PredicatedSet(Set set, Predicate predicate) {\n+        super(set, predicate);\n+    }\n+\n+    /**\n+     * Gets the set being decorated.\n+     * \n+     * @return the decorated set\n+     */\n+    protected Set getSet() {\n+        return (Set) getCollection();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/PredicatedSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/PredicatedSortedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Comparator;\n+import java.util.SortedSet;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Decorates another <code>SortedSet</code> to validate that all additions\n+ * match a specified predicate.\n+ * <p>\n+ * If an object cannot be added to the set, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Paul Jack\n+ */\n+public class PredicatedSortedSet extends PredicatedSet implements SortedSet {\n+\n+    /**\n+     * Factory method to create a predicated (validating) sorted set.\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are validated.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if set or predicate is null\n+     * @throws IllegalArgumentException if the set contains invalid elements\n+     */\n+    public static SortedSet decorate(SortedSet set, Predicate predicate) {\n+        return new PredicatedSortedSet(set, predicate);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are validated.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param predicate  the predicate to use for validation, must not be null\n+     * @throws IllegalArgumentException if set or predicate is null\n+     * @throws IllegalArgumentException if the set contains invalid elements\n+     */\n+    protected PredicatedSortedSet(SortedSet set, Predicate predicate) {\n+        super(set, predicate);\n+    }\n+\n+    /**\n+     * Gets the sorted set being decorated.\n+     * \n+     * @return the decorated sorted set\n+     */\n+    private SortedSet getSortedSet() {\n+        return (SortedSet) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public SortedSet subSet(Object fromElement, Object toElement) {\n+        SortedSet sub = getSortedSet().subSet(fromElement, toElement);\n+        return new PredicatedSortedSet(sub, predicate);\n+    }\n+\n+    public SortedSet headSet(Object toElement) {\n+        SortedSet sub = getSortedSet().headSet(toElement);\n+        return new PredicatedSortedSet(sub, predicate);\n+    }\n+\n+    public SortedSet tailSet(Object fromElement) {\n+        SortedSet sub = getSortedSet().tailSet(fromElement);\n+        return new PredicatedSortedSet(sub, predicate);\n+    }\n+\n+    public Object first() {\n+        return getSortedSet().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedSet().last();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedSet().comparator();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/SynchronizedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/SynchronizedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.collection.SynchronizedCollection;\n+\n+/**\n+ * Decorates another <code>Set</code> to synchronize its behaviour for a\n+ * multi-threaded environment.\n+ * <p>\n+ * Methods are synchronized, then forwarded to the decorated set.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedSet extends SynchronizedCollection implements Set {\n+\n+    /**\n+     * Factory method to create a synchronized set.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    public static Set decorate(Set set) {\n+        return new SynchronizedSet(set);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    protected SynchronizedSet(Set set) {\n+        super(set);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param lock  the lock object to use, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    protected SynchronizedSet(Set set, Object lock) {\n+        super(set, lock);\n+    }\n+\n+    /**\n+     * Gets the decorated set.\n+     * \n+     * @return the decorated set\n+     */\n+    protected Set getSet() {\n+        return (Set) collection;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/SynchronizedSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/SynchronizedSortedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Comparator;\n+import java.util.SortedSet;\n+\n+import org.apache.commons.collections.collection.SynchronizedCollection;\n+\n+/**\n+ * Decorates another <code>SortedSet</code> to synchronize its behaviour\n+ * for a multi-threaded environment.\n+ * <p>\n+ * Methods are synchronized, then forwarded to the decorated set.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class SynchronizedSortedSet extends SynchronizedCollection implements SortedSet {\n+\n+    /**\n+     * Factory method to create a synchronized set.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    public static SortedSet decorate(SortedSet set) {\n+        return new SynchronizedSortedSet(set);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    protected SynchronizedSortedSet(SortedSet set) {\n+        super(set);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param lock  the lock object to use, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    protected SynchronizedSortedSet(SortedSet set, Object lock) {\n+        super(set, lock);\n+    }\n+\n+    /**\n+     * Gets the decorated set.\n+     * \n+     * @return the decorated set\n+     */\n+    protected SortedSet getSortedSet() {\n+        return (SortedSet) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public SortedSet subSet(Object fromElement, Object toElement) {\n+        synchronized (lock) {\n+            SortedSet set = getSortedSet().subSet(fromElement, toElement);\n+            // the lock is passed into the constructor here to ensure that the\n+            // subset is synchronized on the same lock as the parent\n+            return new SynchronizedSortedSet(set, lock);\n+        }\n+    }\n+\n+    public SortedSet headSet(Object toElement) {\n+        synchronized (lock) {\n+            SortedSet set = getSortedSet().headSet(toElement);\n+            // the lock is passed into the constructor here to ensure that the\n+            // headset is synchronized on the same lock as the parent\n+            return new SynchronizedSortedSet(set, lock);\n+        }\n+    }\n+\n+    public SortedSet tailSet(Object fromElement) {\n+        synchronized (lock) {\n+            SortedSet set = getSortedSet().tailSet(fromElement);\n+            // the lock is passed into the constructor here to ensure that the\n+            // tailset is synchronized on the same lock as the parent\n+            return new SynchronizedSortedSet(set, lock);\n+        }\n+    }\n+\n+    public Object first() {\n+        synchronized (lock) {\n+            return getSortedSet().first();\n+        }\n+    }\n+\n+    public Object last() {\n+        synchronized (lock) {\n+            return getSortedSet().last();\n+        }\n+    }\n+\n+    public Comparator comparator() {\n+        synchronized (lock) {\n+            return getSortedSet().comparator();\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/TransformedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/TransformedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.collection.TransformedCollection;\n+\n+/**\n+ * Decorates another <code>Set</code> to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedSet extends TransformedCollection implements Set {\n+\n+    /**\n+     * Factory method to create a transforming set.\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if set or transformer is null\n+     */\n+    public static Set decorate(Set set, Transformer transformer) {\n+        return new TransformedSet(set, transformer);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if set or transformer is null\n+     */\n+    protected TransformedSet(Set set, Transformer transformer) {\n+        super(set, transformer);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/TransformedSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/TransformedSortedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Comparator;\n+import java.util.SortedSet;\n+\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * Decorates another <code>SortedSet</code> to transform objects that are added.\n+ * <p>\n+ * The add methods are affected by this class.\n+ * Thus objects must be removed or searched for using their transformed form.\n+ * For example, if the transformation converts Strings to Integers, you must\n+ * use the Integer form to remove objects.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TransformedSortedSet extends TransformedSet implements SortedSet {\n+\n+    /**\n+     * Factory method to create a transforming sorted set.\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if set or transformer is null\n+     */\n+    public static SortedSet decorate(SortedSet set, Transformer transformer) {\n+        return new TransformedSortedSet(set, transformer);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are NOT transformed.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param transformer  the transformer to use for conversion, must not be null\n+     * @throws IllegalArgumentException if set or transformer is null\n+     */\n+    protected TransformedSortedSet(SortedSet set, Transformer transformer) {\n+        super(set, transformer);\n+    }\n+\n+    /**\n+     * Gets the decorated set.\n+     * \n+     * @return the decorated set\n+     */\n+    protected SortedSet getSortedSet() {\n+        return (SortedSet) collection;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object first() {\n+        return getSortedSet().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedSet().last();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedSet().comparator();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public SortedSet subSet(Object fromElement, Object toElement) {\n+        SortedSet set = getSortedSet().subSet(fromElement, toElement);\n+        return new TransformedSortedSet(set, transformer);\n+    }\n+\n+    public SortedSet headSet(Object toElement) {\n+        SortedSet set = getSortedSet().headSet(toElement);\n+        return new TransformedSortedSet(set, transformer);\n+    }\n+\n+    public SortedSet tailSet(Object fromElement) {\n+        SortedSet set = getSortedSet().tailSet(fromElement);\n+        return new TransformedSortedSet(set, transformer);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/TypedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/TypedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Decorates another <code>Set</code> to validate that elements\n+ * added are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be added to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedSet {\n+\n+    /**\n+     * Factory method to create a typed set.\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are validated.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param type  the type to allow into the collection, must not be null\n+     * @throws IllegalArgumentException if set or type is null\n+     * @throws IllegalArgumentException if the set contains invalid elements\n+     */\n+    public static Set decorate(Set set, Class type) {\n+        return new PredicatedSet(set, PredicateUtils.instanceofPredicate(type));\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedSet() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/TypedSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/TypedSortedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.SortedSet;\n+\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Decorates another <code>SortedSet</code> to validate that elements\n+ * added are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be added to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedSortedSet {\n+\n+    /**\n+     * Factory method to create a typed sorted set.\n+     * <p>\n+     * If there are any elements already in the set being decorated, they\n+     * are validated.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @param type  the type to allow into the collection, must not be null\n+     * @throws IllegalArgumentException if set or type is null\n+     * @throws IllegalArgumentException if the set contains invalid elements\n+     */\n+    public static SortedSet decorate(SortedSet set, Class type) {\n+        return new PredicatedSortedSet(set, PredicateUtils.instanceofPredicate(type));\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedSortedSet() {\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/UnmodifiableSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/UnmodifiableSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.collections.Unmodifiable;\n+import org.apache.commons.collections.collection.UnmodifiableCollection;\n+\n+/**\n+ * Decorates another <code>Set</code> to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableSet extends UnmodifiableCollection implements Set {\n+\n+    /**\n+     * Factory method to create an unmodifiable set.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    public static Set decorate(Set set) {\n+        if (set instanceof Unmodifiable) {\n+            return set;\n+        }\n+        return new UnmodifiableSet(set);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    protected UnmodifiableSet(Set set) {\n+        super(set);\n+    }\n+\n+    /**\n+     * Gets the set being decorated.\n+     * \n+     * @return the decorated set\n+     */\n+    protected Set getSet() {\n+        return (Set) getCollection();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java,v 1.1 2003/11/16 00:05:45 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Comparator;\n+import java.util.SortedSet;\n+\n+import org.apache.commons.collections.Unmodifiable;\n+\n+/**\n+ * Decorates another <code>SortedSet</code> to ensure it can't be altered.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:45 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class UnmodifiableSortedSet extends UnmodifiableSet implements SortedSet {\n+\n+    /**\n+     * Factory method to create an unmodifiable set.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    public static SortedSet decorate(SortedSet set) {\n+        if (set instanceof Unmodifiable) {\n+            return set;\n+        }\n+        return new UnmodifiableSortedSet(set);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    protected UnmodifiableSortedSet(SortedSet set) {\n+        super(set);\n+    }\n+\n+    /**\n+     * Gets the set being decorated.\n+     * \n+     * @return the decorated set\n+     */\n+    protected SortedSet getSortedSet() {\n+        return (SortedSet) getCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public SortedSet subSet(Object fromElement, Object toElement) {\n+        SortedSet sub = getSortedSet().subSet(fromElement, toElement);\n+        return new UnmodifiableSortedSet(sub);\n+    }\n+\n+    public SortedSet headSet(Object toElement) {\n+        SortedSet sub = getSortedSet().headSet(toElement);\n+        return new UnmodifiableSortedSet(sub);\n+    }\n+\n+    public SortedSet tailSet(Object fromElement) {\n+        SortedSet sub = getSortedSet().tailSet(fromElement);\n+        return new UnmodifiableSortedSet(sub);\n+    }\n+\n+    public Object first() {\n+        return getSortedSet().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedSet().last();\n+    }\n+\n+    public Comparator comparator() {\n+        return getSortedSet().comparator();\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestAllPackages.java\n+++ b/src/test/org/apache/commons/collections/TestAllPackages.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAllPackages.java,v 1.5 2003/10/05 21:03:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAllPackages.java,v 1.6 2003/11/16 00:05:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Entry point for all Collections project tests.\n  * \n- * @version $Revision: 1.5 $ $Date: 2003/10/05 21:03:44 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/16 00:05:47 $\n  * \n  * @author Stephen Colebourne\n  */\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         suite.addTest(org.apache.commons.collections.TestAll.suite());\n+        suite.addTest(org.apache.commons.collections.bag.TestAll.suite());\n+        suite.addTest(org.apache.commons.collections.buffer.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.comparators.TestAll.suite());\n-        suite.addTest(org.apache.commons.collections.decorators.TestAll.suite());\n+        suite.addTest(org.apache.commons.collections.collection.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.iterators.TestAll.suite());\n+        suite.addTest(org.apache.commons.collections.list.TestAll.suite());\n+        suite.addTest(org.apache.commons.collections.map.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.observed.TestAll.suite());\n         suite.addTest(org.apache.commons.collections.pairs.TestAll.suite());\n-        suite.addTest(org.apache.commons.collections.primitives.TestAll.suite());\n+        suite.addTest(org.apache.commons.collections.set.TestAll.suite());\n         return suite;\n     }\n         \n--- a/src/test/org/apache/commons/collections/TestBagUtils.java\n+++ b/src/test/org/apache/commons/collections/TestBagUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBagUtils.java,v 1.3 2003/10/05 21:03:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBagUtils.java,v 1.4 2003/11/16 00:05:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.decorators.PredicatedBag;\n-import org.apache.commons.collections.decorators.PredicatedSortedBag;\n-import org.apache.commons.collections.decorators.SynchronizedBag;\n-import org.apache.commons.collections.decorators.SynchronizedSortedBag;\n-import org.apache.commons.collections.decorators.TransformedBag;\n-import org.apache.commons.collections.decorators.TransformedSortedBag;\n-import org.apache.commons.collections.decorators.UnmodifiableBag;\n-import org.apache.commons.collections.decorators.UnmodifiableSortedBag;\n+import org.apache.commons.collections.bag.PredicatedBag;\n+import org.apache.commons.collections.bag.PredicatedSortedBag;\n+import org.apache.commons.collections.bag.SynchronizedBag;\n+import org.apache.commons.collections.bag.SynchronizedSortedBag;\n+import org.apache.commons.collections.bag.TransformedBag;\n+import org.apache.commons.collections.bag.TransformedSortedBag;\n+import org.apache.commons.collections.bag.UnmodifiableBag;\n+import org.apache.commons.collections.bag.UnmodifiableSortedBag;\n \n /**\n  * Tests for BagUtils factory methods.\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/10/05 21:03:44 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/16 00:05:47 $\n  *\n  * @author Phil Steitz\n  */\n--- a/src/test/org/apache/commons/collections/TestBufferUtils.java\n+++ b/src/test/org/apache/commons/collections/TestBufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBufferUtils.java,v 1.8 2003/10/05 21:03:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBufferUtils.java,v 1.9 2003/11/16 00:05:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.decorators.PredicatedBuffer;\n+import org.apache.commons.collections.buffer.PredicatedBuffer;\n \n /**\n  * Tests for BufferUtils.\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/10/05 21:03:44 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/16 00:05:47 $\n  * \n  * @author Unknown\n  */\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.29 2003/10/09 11:03:55 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCollectionUtils.java,v 1.30 2003/11/16 00:05:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.decorators.PredicatedCollection;\n-import org.apache.commons.collections.decorators.SynchronizedCollection;\n-import org.apache.commons.collections.decorators.TransformedCollection;\n-import org.apache.commons.collections.decorators.UnmodifiableCollection;\n- \n+import org.apache.commons.collections.collection.PredicatedCollection;\n+import org.apache.commons.collections.collection.SynchronizedCollection;\n+import org.apache.commons.collections.collection.TransformedCollection;\n+import org.apache.commons.collections.collection.UnmodifiableCollection;\n \n /**\n  * Tests for CollectionUtils.\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  * \n- * @version $Revision: 1.29 $ $Date: 2003/10/09 11:03:55 $\n+ * @version $Revision: 1.30 $ $Date: 2003/11/16 00:05:47 $\n  */\n public class TestCollectionUtils extends TestCase {\n     \n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.14 2003/10/05 21:17:39 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.15 2003/11/16 00:05:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.decorators.PredicatedList;\n+import org.apache.commons.collections.list.PredicatedList;\n \n /**\n  * Tests for ListUtils.\n  * \n- * @version $Revision: 1.14 $ $Date: 2003/10/05 21:17:39 $\n+ * @version $Revision: 1.15 $ $Date: 2003/11/16 00:05:47 $\n  * \n  * @author Stephen Colebourne\n  * @author Neil O'Toole\n--- a/src/test/org/apache/commons/collections/TestMapUtils.java\n+++ b/src/test/org/apache/commons/collections/TestMapUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.18 2003/10/07 22:20:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestMapUtils.java,v 1.19 2003/11/16 00:05:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.decorators.LazyMap;\n-import org.apache.commons.collections.decorators.PredicatedMap;\n+import org.apache.commons.collections.map.LazyMap;\n+import org.apache.commons.collections.map.PredicatedMap;\n \n /**\n  * Tests for MapUtils.\n  * \n- * @version $Revision: 1.18 $ $Date: 2003/10/07 22:20:57 $\n+ * @version $Revision: 1.19 $ $Date: 2003/11/16 00:05:47 $\n  * \n  * @author Stephen Colebourne\n  * @author Arun Mammen Thomas\n--- a/src/test/org/apache/commons/collections/TestSetUtils.java\n+++ b/src/test/org/apache/commons/collections/TestSetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.11 2003/10/05 21:23:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestSetUtils.java,v 1.12 2003/11/16 00:05:47 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n-import org.apache.commons.collections.decorators.PredicatedSet;\n+import org.apache.commons.collections.set.PredicatedSet;\n \n /**\n  * Tests for SetUtils.\n  * \n- * @version $Revision: 1.11 $ $Date: 2003/10/05 21:23:21 $\n+ * @version $Revision: 1.12 $ $Date: 2003/11/16 00:05:47 $\n  * \n  * @author Stephen Colebourne\n  * @author Neil O'Toole\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bag/TestAll.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestAll.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for tests.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+    \n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestAll.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestPredicatedBag.suite());\n+        suite.addTest(TestPredicatedSortedBag.suite());\n+        suite.addTest(TestTransformedBag.suite());\n+        suite.addTest(TestTransformedSortedBag.suite());\n+        suite.addTest(TestTypedBag.suite());\n+        suite.addTest(TestTypedSortedBag.suite());\n+        \n+        return suite;\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestPredicatedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestBag;\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.HashBag;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link PredicatedBag}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedBag extends AbstractTestBag {\n+    \n+    public TestPredicatedBag(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedBag.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+\n+    protected Predicate stringPredicate() {\n+        return new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };\n+    }   \n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    protected Bag decorateBag(HashBag bag, Predicate predicate) {\n+        return PredicatedBag.decorate(bag, predicate);\n+    }\n+\n+    protected Bag makeBag() {\n+        return decorateBag(new HashBag(), truePredicate);\n+    }\n+    \n+    protected Bag makeTestBag() {\n+        return decorateBag(new HashBag(), stringPredicate());\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+\n+    public void testlegalAddRemove() {\n+        Bag bag = makeTestBag();\n+        assertEquals(0, bag.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"1\"};\n+        for (int i = 0; i < els.length; i++) {\n+            bag.add(els[i]);\n+            assertEquals(i + 1, bag.size());\n+            assertEquals(true, bag.contains(els[i]));\n+        }\n+        Set set = ((PredicatedBag) bag).uniqueSet();\n+        assertTrue(\"Unique set contains the first element\",set.contains(els[0]));\n+        assertEquals(true, bag.remove(els[0])); \n+        set = ((PredicatedBag) bag).uniqueSet();\n+        assertTrue(\"Unique set now does not contain the first element\",\n+            !set.contains(els[0])); \n+    }\n+ \n+    public void testIllegalAdd() {\n+        Bag bag = makeTestBag();\n+        Integer i = new Integer(3);\n+        try {\n+            bag.add(i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !bag.contains(i));   \n+    }\n+\n+    public void testIllegalDecorate() {\n+        HashBag elements = new HashBag();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            Bag bag = decorateBag(elements, stringPredicate());\n+            fail(\"Bag contains an element that should fail the predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        try {\n+            Bag bag = decorateBag(new HashBag(), null);\n+            fail(\"Expectiing IllegalArgumentException for null predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }              \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestPredicatedSortedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Comparator;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestSortedBag;\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.TreeBag;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link PredicatedSortedBag}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedSortedBag extends AbstractTestSortedBag {\n+    \n+    private SortedBag emptyBag = new TreeBag();\n+    private SortedBag nullBag = null;\n+    \n+    public TestPredicatedSortedBag(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedSortedBag.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedSortedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    \n+    protected Predicate stringPredicate() {\n+        return new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };\n+    }   \n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    protected SortedBag decorateBag(SortedBag bag, Predicate predicate) {\n+        return PredicatedSortedBag.decorate(bag, predicate);\n+    }\n+    \n+    protected Bag makeBag() {\n+        return decorateBag(emptyBag, truePredicate);\n+    }\n+    \n+    protected Bag makeTestBag() {\n+        return decorateBag(emptyBag, stringPredicate());\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    \n+    public void testDecorate() {\n+        SortedBag bag = decorateBag(emptyBag, stringPredicate());\n+        SortedBag bag2 = ((PredicatedSortedBag) bag).getSortedBag();\n+        try {\n+            SortedBag bag3 = decorateBag(emptyBag, null);\n+            fail(\"Expecting IllegalArgumentException for null predicate\");\n+        } catch (IllegalArgumentException e) {}\n+        try {\n+            SortedBag bag4 = decorateBag(nullBag, stringPredicate());\n+            fail(\"Expecting IllegalArgumentException for null bag\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n+    \n+    public void testSortOrder() {\n+        SortedBag bag = decorateBag(emptyBag, stringPredicate());\n+        String one = \"one\";\n+        String two = \"two\";\n+        String three = \"three\";\n+        bag.add(one);\n+        bag.add(two);\n+        bag.add(three);\n+        assertEquals(\"first element\", bag.first(), one);\n+        assertEquals(\"last element\", bag.last(), two); \n+        Comparator c = bag.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", \n+            c == null);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bag/TestTransformedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTransformedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestBag;\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.HashBag;\n+import org.apache.commons.collections.collection.TestTransformedCollection;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link TransformedBag}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformedBag extends AbstractTestBag {\n+    \n+    public TestTransformedBag(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTransformedBag.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTransformedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    protected Bag makeBag() {\n+        return TransformedBag.decorate(new HashBag(), TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+\n+    public void testTransformedBag() {\n+        Bag bag = TransformedBag.decorate(new HashBag(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, bag.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            bag.add(els[i]);\n+            assertEquals(i + 1, bag.size());\n+            assertEquals(true, bag.contains(new Integer((String) els[i])));\n+            assertEquals(false, bag.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, bag.remove(els[0]));\n+        assertEquals(true, bag.remove(new Integer((String) els[0])));\n+        \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestSortedBag;\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.TreeBag;\n+import org.apache.commons.collections.collection.TestTransformedCollection;\n+\n+/**\n+ * Extension of {@link TestSortedBag} for exercising the {@link TransformedSortedBag}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformedSortedBag extends AbstractTestSortedBag {\n+    \n+    public TestTransformedSortedBag(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTransformedSortedBag.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTransformedSortedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    protected Bag makeBag() {\n+        return TransformedSortedBag.decorate(new TreeBag(), TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+\n+    public void testTransformedBag() {\n+        Bag bag = TransformedSortedBag.decorate(new TreeBag(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, bag.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            bag.add(els[i]);\n+            assertEquals(i + 1, bag.size());\n+            assertEquals(true, bag.contains(new Integer((String) els[i])));\n+        }\n+        \n+        assertEquals(true, bag.remove(new Integer((String) els[0])));\n+        \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bag/TestTypedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTypedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestBag;\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.HashBag;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link TypedBag}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestTypedBag extends AbstractTestBag {\n+    \n+    public TestTypedBag(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTypedBag.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTypedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //--------------------------------------------------------------------------\n+    \n+    protected Class stringClass = this.getName().getClass();\n+    private Object obj = new Object();\n+    protected Class objectClass = obj.getClass();\n+    \n+    protected Bag decorateBag(HashBag bag, Class claz) {\n+        return TypedBag.decorate(bag, claz);\n+    }\n+\n+    protected Bag makeBag() {\n+        return decorateBag(new HashBag(), objectClass);\n+    }\n+    \n+    protected Bag makeTestBag() {\n+        return decorateBag(new HashBag(), stringClass);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+\n+    public void testlegalAddRemove() {\n+        Bag bag = makeTestBag();\n+        assertEquals(0, bag.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"1\"};\n+        for (int i = 0; i < els.length; i++) {\n+            bag.add(els[i]);\n+            assertEquals(i + 1, bag.size());\n+            assertEquals(true, bag.contains(els[i]));\n+        }\n+        Set set = ((PredicatedBag) bag).uniqueSet();\n+        assertTrue(\"Unique set contains the first element\",set.contains(els[0]));\n+        assertEquals(true, bag.remove(els[0])); \n+        set = ((PredicatedBag) bag).uniqueSet();\n+        assertTrue(\"Unique set now does not contain the first element\",\n+            !set.contains(els[0])); \n+    }\n+ \n+    public void testIllegalAdd() {\n+        Bag bag = makeTestBag();\n+        Integer i = new Integer(3);\n+        try {\n+            bag.add(i);\n+            fail(\"Integer should fail type check.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !bag.contains(i));   \n+    }\n+\n+    public void testIllegalDecorate() {\n+        HashBag elements = new HashBag();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            Bag bag = decorateBag(elements, stringClass);\n+            fail(\"Bag contains an element that should fail the type test.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        try {\n+            Bag bag = decorateBag(new HashBag(), null);\n+            fail(\"Expectiing IllegalArgumentException for null predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }              \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/bag/TestTypedSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/TestTypedSortedBag.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.bag;\n+\n+import java.util.Comparator;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestSortedBag;\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.SortedBag;\n+import org.apache.commons.collections.TreeBag;\n+\n+/**\n+ * Extension of {@link TestBag} for exercising the {@link TypedSortedBag}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestTypedSortedBag extends AbstractTestSortedBag {\n+       \n+    public TestTypedSortedBag(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestTypedSortedBag.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTypedSortedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    \n+    protected Class stringClass = this.getName().getClass();\n+    private Object obj = new Object();\n+    protected Class objectClass = obj.getClass();\n+    protected SortedBag emptyBag = new TreeBag();\n+    protected SortedBag nullBag = null;\n+    \n+    protected SortedBag decorateBag(SortedBag bag, Class claz) {\n+        return TypedSortedBag.decorate(bag, claz);\n+    }\n+\n+    protected Bag makeBag() {\n+        return decorateBag(emptyBag, objectClass);\n+    }\n+    \n+    protected Bag makeTestBag() {\n+        return decorateBag(emptyBag, stringClass);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    \n+    public void testDecorate() {\n+        SortedBag bag = decorateBag(emptyBag, stringClass);\n+        try {\n+            SortedBag bag3 = decorateBag(emptyBag, null);\n+            fail(\"Expecting IllegalArgumentException for null predicate\");\n+        } catch (IllegalArgumentException e) {}\n+        try {\n+            SortedBag bag4 = decorateBag(nullBag, stringClass);\n+            fail(\"Expecting IllegalArgumentException for null bag\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n+    \n+    public void testSortOrder() {\n+        SortedBag bag = decorateBag(emptyBag, stringClass);\n+        String one = \"one\";\n+        String two = \"two\";\n+        String three = \"three\";\n+        bag.add(one);\n+        bag.add(two);\n+        bag.add(three);\n+        assertEquals(\"first element\", bag.first(), one);\n+        assertEquals(\"last element\", bag.last(), two); \n+        Comparator c = bag.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", \n+            c == null);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/buffer/TestAll.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/buffer/TestAll.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for tests.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+    \n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestAll.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestBlockingBuffer.suite());\n+        suite.addTest(TestPredicatedBuffer.suite());\n+        suite.addTest(TestTransformedBuffer.suite());\n+        \n+        return suite;\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/buffer/TestBlockingBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/buffer/TestBlockingBuffer.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestObject;\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.BufferUnderflowException;\n+\n+/**\n+ * Extension of {@link TestObject} for exercising the {@link BlockingBuffer}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $\n+ * \n+ * @author Janek Bogucki\n+ * @author Phil Steitz\n+ */\n+public class TestBlockingBuffer extends AbstractTestObject {\n+\n+    public TestBlockingBuffer(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestBlockingBuffer.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestBlockingBuffer.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    protected Object makeObject() {\n+        return BlockingBuffer.decorate(new MyBuffer());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link BlockingBuffer#get()} in combination with {@link BlockingBuffer#add()}.\n+     */\n+    public void testGetWithAdd() {\n+      \n+        Buffer blockingBuffer = BlockingBuffer.decorate(new MyBuffer());\n+        Object obj = new Object();\n+\n+        new DelayedAdd(blockingBuffer, obj).start();\n+\n+        // verify does not throw BufferUnderflowException; should block until other thread has added to the buffer .\n+        assertSame(obj, blockingBuffer.get());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link BlockingBuffer#get()} in combination with {@link BlockingBuffer#addAll()}.\n+     */\n+    public void testGetWithAddAll() {\n+        \n+        Buffer blockingBuffer = BlockingBuffer.decorate(new MyBuffer());\n+        Object obj = new Object();\n+\n+        new DelayedAddAll(blockingBuffer, obj).start();\n+\n+        // verify does not throw BufferUnderflowException; should block until other thread has added to the buffer .\n+        assertSame(obj, blockingBuffer.get());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link BlockingBuffer#remove()} in combination with {@link BlockingBuffer#add()}.\n+     */\n+    public void testRemoveWithAdd() {\n+        \n+        Buffer blockingBuffer = BlockingBuffer.decorate(new MyBuffer());\n+        Object obj = new Object();\n+\n+        new DelayedAdd(blockingBuffer, obj).start();\n+\n+        // verify does not throw BufferUnderflowException; should block until other thread has added to the buffer .\n+        assertSame(obj, blockingBuffer.remove());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link BlockingBuffer#remove()} in combination with {@link BlockingBuffer#addAll()}.\n+     */\n+    public void testRemoveWithAddAll() {\n+        \n+        Buffer blockingBuffer = BlockingBuffer.decorate(new MyBuffer());\n+        Object obj = new Object();\n+\n+        new DelayedAddAll(blockingBuffer, obj).start();\n+\n+        // verify does not throw BufferUnderflowException; should block until other thread has added to the buffer .\n+        assertSame(obj, blockingBuffer.remove());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link BlockingBuffer#get()} in combination with {@link BlockingBuffer#add()} using multiple read threads.\n+     *\n+     *  Two read threads should block on an empty buffer until one object\n+     *  is added then both threads should complete.\n+     */\n+    public void testBlockedGetWithAdd() {\n+        \n+        Buffer blockingBuffer = BlockingBuffer.decorate(new MyBuffer());\n+        Object obj = new Object();\n+        \n+        // run methods will get and compare -- must wait for add\n+        Thread thread1 = new ReadThread(blockingBuffer, obj);\n+        Thread thread2 = new ReadThread(blockingBuffer, obj);\n+        thread1.start();\n+        thread2.start();\n+        \n+        // give hungry read threads ample time to hang\n+        delay();\n+           \n+        // notifyAll should allow both read threads to complete\n+        blockingBuffer.add(obj);\n+        \n+        // allow notified threads to complete \n+        delay();\n+        \n+        // There should not be any threads waiting.\n+        if (thread1.isAlive() || thread2.isAlive())\n+            fail(\"Live thread(s) when both should be dead.\");\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link BlockingBuffer#get()} in combination with {@link BlockingBuffer#addAll()} using multiple read threads.\n+     *\n+     *  Two read threads should block on an empty buffer until a\n+     *  singleton is added then both threads should complete.\n+     */\n+    public void testBlockedGetWithAddAll() {\n+        \n+        Buffer blockingBuffer = BlockingBuffer.decorate(new MyBuffer());\n+        Object obj = new Object();\n+        \n+        // run methods will get and compare -- must wait for addAll\n+        Thread thread1 = new ReadThread(blockingBuffer, obj);\n+        Thread thread2 = new ReadThread(blockingBuffer, obj);\n+        thread1.start();\n+        thread2.start();\n+        \n+        // give hungry read threads ample time to hang\n+        delay();\n+           \n+        // notifyAll should allow both read threads to complete\n+        blockingBuffer.addAll(Collections.singleton(obj));\n+               \n+        // allow notified threads to complete \n+        delay();\n+        \n+        // There should not be any threads waiting.\n+        if (thread1.isAlive() || thread2.isAlive())\n+            fail(\"Live thread(s) when both should be dead.\");\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests interrupted {@link BlockingBuffer#get()}.\n+     */\n+    public void testInterruptedGet() {\n+        \n+        Buffer blockingBuffer = BlockingBuffer.decorate(new MyBuffer());\n+        Object obj = new Object();\n+        \n+        // spawn a read thread to wait on the empty buffer\n+        ArrayList exceptionList = new ArrayList();\n+        Thread thread = new ReadThread(blockingBuffer, obj, exceptionList);\n+        thread.start();\n+        \n+        // Interrupting the thread should cause it to throw BufferUnderflowException\n+        thread.interrupt();\n+        \n+        // Chill, so thread can throw and add message to exceptionList\n+        delay();\n+        \n+        assertTrue(\"Thread interrupt should have led to underflow\", \n+            exceptionList.contains(\"BufferUnderFlow\"));\n+        \n+        if (thread.isAlive()) {\n+            fail(\"Read thread has hung.\");\n+        }\n+        \n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link BlockingBuffer#remove()} in combination with {@link BlockingBuffer#add()} using multiple read threads.\n+     *\n+     *  Two read threads should block on an empty buffer until one\n+     *  object is added then one thread should complete. The remaining\n+     *  thread should complete after the addition of a second object.\n+     */\n+    public void testBlockedRemoveWithAdd() {\n+        \n+        Buffer blockingBuffer = BlockingBuffer.decorate(new MyBuffer());\n+        Object obj = new Object();\n+        \n+        // run methods will remove and compare -- must wait for add\n+        Thread thread1 = new ReadThread(blockingBuffer, obj, null, \"remove\");\n+        Thread thread2 = new ReadThread(blockingBuffer, obj, null, \"remove\");\n+        thread1.start();\n+        thread2.start();\n+        \n+        // give hungry read threads ample time to hang\n+        delay();\n+           \n+        blockingBuffer.add(obj);\n+        \n+        // allow notified threads to complete \n+        delay();\n+        \n+        // There should be one thread waiting.\n+        assertTrue (\"There is one thread waiting\", thread1.isAlive() ^ thread2.isAlive());\n+           \n+        blockingBuffer.add(obj);\n+        \n+        // allow notified thread to complete \n+        delay();\n+\n+        // There should not be any threads waiting.\n+        if(thread1.isAlive() || thread2.isAlive())\n+            fail(\"Live thread(s) when both should be dead.\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link BlockingBuffer#remove()} in combination with {@link BlockingBuffer#addAll()} using multiple read threads.\n+     *\n+     *  Two read threads should block on an empty buffer until a\n+     *  singleton collection is added then one thread should\n+     *  complete. The remaining thread should complete after the\n+     *  addition of a second singleton.\n+     */\n+    public void testBlockedRemoveWithAddAll1() {\n+        \n+        Buffer blockingBuffer = BlockingBuffer.decorate(new MyBuffer());\n+        Object obj = new Object();\n+        \n+        // run methods will remove and compare -- must wait for addAll\n+        Thread thread1 = new ReadThread(blockingBuffer, obj, null, \"remove\");\n+        Thread thread2 = new ReadThread(blockingBuffer, obj, null, \"remove\");\n+        thread1.start();\n+        thread2.start();\n+        \n+        // give hungry read threads ample time to hang\n+        delay();\n+           \n+        blockingBuffer.addAll(Collections.singleton(obj));\n+        \n+        // allow notified threads to complete \n+        delay();\n+        \n+        // There should be one thread waiting.\n+        assertTrue (\"There is one thread waiting\", thread1.isAlive() ^ thread2.isAlive());\n+           \n+        blockingBuffer.addAll(Collections.singleton(obj));\n+        \n+        // allow notified thread to complete \n+        delay();\n+\n+        // There should not be any threads waiting.\n+        if(thread1.isAlive() || thread2.isAlive())\n+            fail(\"Live thread(s) when both should be dead.\");\n+    }\n+\n+   \n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link BlockingBuffer#remove()} in combination with {@link BlockingBuffer#addAll()} using multiple read threads.\n+     *\n+     *  Two read threads should block on an empty buffer until a\n+     *  collection with two distinct objects is added then both\n+     *  threads should complete. Each thread should have read a\n+     *  different object.\n+     */\n+    public void testBlockedRemoveWithAddAll2() {\n+        \n+        Buffer blockingBuffer = BlockingBuffer.decorate(new MyBuffer());\n+        Object obj1 = new Object();\n+        Object obj2 = new Object();\n+        \n+        Set objs = Collections.synchronizedSet(new HashSet());\n+        objs.add(obj1);\n+        objs.add(obj2);\n+\n+        // run methods will remove and compare -- must wait for addAll\n+        Thread thread1 = new ReadThread(blockingBuffer, objs, \"remove\");\n+        Thread thread2 = new ReadThread(blockingBuffer, objs, \"remove\");\n+        thread1.start();\n+        thread2.start();\n+        \n+        // give hungry read threads ample time to hang\n+        delay();\n+           \n+        blockingBuffer.addAll(objs);\n+        \n+        // allow notified threads to complete \n+        delay();\n+        \n+        assertEquals(\"Both objects were removed\", 0, objs.size());\n+\n+        // There should not be any threads waiting.\n+        if(thread1.isAlive() || thread2.isAlive())\n+            fail(\"Live thread(s) when both should be dead.\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests interrupted remove.\n+     */\n+    public void testInterruptedRemove() {\n+        \n+        Buffer blockingBuffer = BlockingBuffer.decorate(new MyBuffer());\n+        Object obj = new Object();\n+        \n+        // spawn a read thread to wait on the empty buffer\n+        ArrayList exceptionList = new ArrayList();\n+        Thread thread = new ReadThread(blockingBuffer, obj, exceptionList, \"remove\");\n+        thread.start();\n+        \n+        // Interrupting the thread should cause it to throw BufferUnderflowException\n+        thread.interrupt();\n+        \n+        // Chill, so thread can throw and add message to exceptionList\n+        delay();\n+        \n+        assertTrue(\"Thread interrupt should have led to underflow\", \n+            exceptionList.contains(\"BufferUnderFlow\"));\n+        \n+        if (thread.isAlive()) {\n+            fail(\"Read thread has hung.\");\n+        }\n+        \n+    }\n+    \n+    protected static class DelayedAdd extends Thread {\n+\n+        Buffer buffer;\n+        Object obj;\n+\n+        DelayedAdd (Buffer buffer, Object obj) {\n+            super();\n+            this.buffer = buffer;\n+            this.obj = obj;\n+        }\n+                \n+        public void run() {\n+\n+            try {\n+                // wait for other thread to block on get() or remove()\n+                Thread.currentThread().sleep(100);\n+            }\n+            catch (InterruptedException e) {}\n+\n+            buffer.add(obj);\n+        }\n+    }\n+    \n+    protected static class DelayedAddAll extends Thread {\n+\n+        Buffer buffer;\n+        Object obj;\n+\n+        DelayedAddAll (Buffer buffer, Object obj) {\n+            super();\n+            this.buffer = buffer;\n+            this.obj = obj;\n+        }\n+                \n+        public void run() {\n+\n+            try {\n+                // wait for other thread to block on get() or remove()\n+                Thread.currentThread().sleep(100);\n+            }\n+            catch (InterruptedException e) {}\n+\n+            buffer.addAll(Collections.singleton(obj));\n+        }\n+    }\n+    \n+    protected static class ReadThread extends Thread {\n+\n+        Buffer buffer;\n+        Object obj;\n+        ArrayList exceptionList = null;\n+        String action = \"get\";\n+        Set objs;\n+        \n+        ReadThread (Buffer buffer, Object obj) {\n+            super();\n+            this.buffer = buffer;\n+            this.obj = obj;\n+        }\n+\n+        ReadThread (Buffer buffer, Object obj, ArrayList exceptionList) {\n+            super();\n+            this.buffer = buffer;\n+            this.obj = obj;\n+            this.exceptionList = exceptionList;\n+        }\n+        \n+        ReadThread (Buffer buffer, Object obj, ArrayList exceptionList, String action) {\n+            super();\n+            this.buffer = buffer;\n+            this.obj = obj;\n+            this.exceptionList = exceptionList;\n+            this.action = action;\n+        }\n+                \n+        ReadThread (Buffer buffer, Set objs, String action) {\n+            super();\n+            this.buffer = buffer;\n+            this.objs = objs;\n+            this.action = action;\n+        }\n+                \n+        public void run()  {\n+            try {\n+                if (action == \"get\") {\n+                    assertSame(obj, buffer.get());\n+                } else {\n+                    if (null != obj)\n+                        assertSame(obj, buffer.remove());\n+                    else\n+                        assertTrue(objs.remove(buffer.remove()));\n+                }\n+            } catch (BufferUnderflowException ex) {\n+                exceptionList.add(\"BufferUnderFlow\");\n+            }\n+        }\n+    }\n+        \n+\n+    protected static class MyBuffer extends LinkedList implements Buffer {\n+\n+        public Object get() {\n+            if(isEmpty())\n+                throw new BufferUnderflowException();\n+            return get(0);\n+        }\n+\n+        public Object remove() {\n+            if(isEmpty())\n+                throw new BufferUnderflowException();\n+            return remove(0);\n+        }\n+    }\n+\n+    private void delay(){\n+        try {\n+            Thread.currentThread().sleep(100);\n+        } catch (InterruptedException e) {}\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/buffer/TestPredicatedBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/buffer/TestPredicatedBuffer.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import java.util.Collection;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.ArrayStack;\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.BufferUnderflowException;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.collection.TestPredicatedCollection;\n+\n+/**\n+ * Extension of {@link TestPredicatedCollection} for exercising the \n+ * {@link PredicatedBuffer} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedBuffer extends TestPredicatedCollection {\n+    \n+    public TestPredicatedBuffer(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedBuffer.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedBuffer.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //---------------------------------------------------------------\n+    \n+    protected Buffer decorateBuffer(Buffer buffer, Predicate predicate) {\n+        return PredicatedBuffer.decorate(buffer, predicate);\n+    }\n+    \n+    public Collection makeCollection() {\n+        return decorateBuffer(new ArrayStack(), truePredicate);\n+    }\n+    \n+    public Collection makeConfirmedCollection() {\n+        return new ArrayStack();\n+    }\n+    \n+    public Collection makeConfirmedFullCollection() {\n+        ArrayStack list = new ArrayStack();\n+        list.addAll(java.util.Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+    \n+    //------------------------------------------------------------\n+    \n+    public Buffer makeTestBuffer() {\n+        return decorateBuffer(new ArrayStack(), testPredicate);\n+    }\n+    \n+    public void testGet() {\n+        Buffer buffer = makeTestBuffer();\n+        try {\n+            Object o = buffer.get();\n+            fail(\"Expecting BufferUnderflowException\");\n+        } catch (BufferUnderflowException ex) {\n+            // expected\n+        }\n+        buffer.add(\"one\");\n+        buffer.add(\"two\");\n+        buffer.add(\"three\");\n+        assertEquals(\"Buffer get\", buffer.get(), \"three\");\n+    }\n+    \n+    public void testRemove() {\n+        Buffer buffer = makeTestBuffer();\n+        buffer.add(\"one\");\n+        assertEquals(\"Buffer get\", buffer.remove(), \"one\");\n+        try {\n+            buffer.remove();\n+            fail(\"Expecting BufferUnderflowException\");\n+        } catch (BufferUnderflowException ex) {\n+            // expected\n+        }      \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/buffer/TestTransformedBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/buffer/TestTransformedBuffer.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.buffer;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.ArrayStack;\n+import org.apache.commons.collections.Buffer;\n+import org.apache.commons.collections.collection.TestTransformedCollection;\n+\n+/**\n+ * Extension of {@link TestBuffer} for exercising the {@link TransformedBuffer}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformedBuffer extends TestCase {\n+    \n+    public TestTransformedBuffer(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTransformedBuffer.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTransformedBuffer.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public void testTransformedBuffer() {\n+        Buffer buffer = TransformedBuffer.decorate(new ArrayStack(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, buffer.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            buffer.add(els[i]);\n+            assertEquals(i + 1, buffer.size());\n+            assertEquals(true, buffer.contains(new Integer((String) els[i])));\n+            assertEquals(false, buffer.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, buffer.remove(els[0]));\n+        assertEquals(true, buffer.remove(new Integer((String) els[0])));\n+        \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/collection/TestAll.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestAll.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for tests.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+    \n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestAll.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestCompositeCollection.suite());\n+        suite.addTest(TestPredicatedCollection.suite());\n+        suite.addTest(TestTransformedCollection.suite());\n+        \n+        return suite;\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Turbine\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestCollection;\n+\n+/**\n+ * Extension of {@link AbstractTestCollection} for exercising the \n+ * {@link CompositeCollection} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Brian McCallister\n+ * @author Phil Steitz\n+ */\n+public class TestCompositeCollection extends AbstractTestCollection {\n+    \n+    public TestCompositeCollection(String name) {\n+        super(name);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestCompositeCollection.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestCompositeCollection.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+ \n+ //-----------------------------------------------------------------------------\n+    /**\n+     * Run stock collection tests without Mutator, so turn off add, remove\n+     */\n+    protected boolean isAddSupported() {\n+        return false;\n+    }\n+    \n+    protected boolean isRemoveSupported() {\n+        return false;\n+    }\n+    \n+    /**\n+     * Empty collection is empty composite\n+     */\n+    public Collection makeCollection() {\n+        return new CompositeCollection();\n+    }\n+    \n+    public Collection makeConfirmedCollection() {\n+        return new HashSet();\n+    }\n+    \n+    protected Object[] getFullElements() {\n+        return new Object[] {\"1\", \"2\", \"3\", \"4\"};\n+    }\n+    \n+    /**\n+     * Full collection consists of 5 collections, each with one element\n+     */\n+    protected Collection makeFullCollection() {\n+        CompositeCollection compositeCollection = new CompositeCollection();\n+        Object[] elements = getFullElements();\n+        for (int i = 0; i < elements.length; i++) {\n+            Collection summand = new HashSet();\n+            summand.add(elements[i]);\n+            compositeCollection.addComposited(summand);\n+        }\n+        return compositeCollection;\n+    }\n+    \n+    /**\n+     * Full collection should look like a collection with 5 elements\n+     */\n+    protected Collection makeConfirmedFullCollection() {\n+        Collection collection = new HashSet();\n+        collection.addAll(Arrays.asList(getFullElements()));\n+        return collection;\n+    }\n+    \n+    /**\n+     * Override testUnsupportedRemove, since the default impl expects removeAll,\n+     * retainAll and iterator().remove to throw\n+     */\n+    public void testUnsupportedRemove() {    \n+        resetFull();\n+        try {\n+            collection.remove(null);\n+            fail(\"remove should raise UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        verify();\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    \n+    protected CompositeCollection c;\n+    protected Collection one;\n+    protected Collection two;\n+    \n+    protected void setUpTest() {\n+        c = new CompositeCollection();\n+        one = new HashSet();\n+        two = new HashSet();\n+    }\n+    \n+    protected void setUpMutatorTest() {\n+        setUpTest();\n+        c.setMutator(new CompositeCollection.CollectionMutator() {\n+            public boolean add(CompositeCollection composite, \n+            Collection[] collections, Object obj) {\n+                for (int i = 0; i < collections.length; i++) {\n+                    collections[i].add(obj);\n+                }\n+                return true;\n+            }\n+            \n+            public boolean addAll(CompositeCollection composite, \n+            Collection[] collections, Collection coll) {\n+                for (int i = 0; i < collections.length; i++) {\n+                    collections[i].addAll(coll);\n+                }\n+                return true;\n+            }\n+            \n+            public boolean remove(CompositeCollection composite, \n+            Collection[] collections, Object obj) {\n+                for (int i = 0; i < collections.length; i++) {\n+                    collections[i].remove(obj);\n+                }\n+                return true;\n+            }\n+        });\n+    }\n+            \n+    public void testSize() {\n+        setUpTest();\n+        HashSet set = new HashSet();\n+        set.add(\"a\");\n+        set.add(\"b\");\n+        c.addComposited(set);\n+        assertEquals(set.size(), c.size());\n+    }\n+    \n+    public void testMultipleCollectionsSize() {\n+        setUpTest();\n+        HashSet set = new HashSet();\n+        set.add(\"a\");\n+        set.add(\"b\");\n+        c.addComposited(set);\n+        HashSet other = new HashSet();\n+        other.add(\"c\");\n+        c.addComposited(other);\n+        assertEquals(set.size() + other.size(), c.size());\n+    }\n+    \n+    public void testIsEmpty() {\n+        setUpTest();\n+        assertTrue(c.isEmpty());\n+        HashSet empty = new HashSet();\n+        c.addComposited(empty);\n+        assertTrue(c.isEmpty());\n+        empty.add(\"a\");\n+        assertTrue(!c.isEmpty());\n+    }\n+    \n+    \n+    public void testIterator() {\n+        setUpTest();\n+        one.add(\"1\");\n+        two.add(\"2\");\n+        c.addComposited(one);\n+        c.addComposited(two);\n+        Iterator i = c.iterator();\n+        Object next = i.next();\n+        assertTrue(c.contains(next));\n+        assertTrue(one.contains(next));\n+        next = i.next();\n+        i.remove();\n+        assertTrue(!c.contains(next));\n+        assertTrue(!two.contains(next));\n+    }\n+    \n+    public void testClear() {\n+        setUpTest();\n+        one.add(\"1\");\n+        two.add(\"2\");\n+        c.addComposited(one, two);\n+        c.clear();\n+        assertTrue(one.isEmpty());\n+        assertTrue(two.isEmpty());\n+        assertTrue(c.isEmpty());\n+    }\n+    \n+    public void testContainsAll() {\n+        setUpTest();\n+        one.add(\"1\");\n+        two.add(\"1\");\n+        c.addComposited(one);\n+        assertTrue(c.containsAll(two));\n+    }\n+    \n+    public void testRetainAll() {\n+        setUpTest();\n+        one.add(\"1\");\n+        one.add(\"2\");\n+        two.add(\"1\");\n+        c.addComposited(one);\n+        c.retainAll(two);\n+        assertTrue(!c.contains(\"2\"));\n+        assertTrue(!one.contains(\"2\"));\n+        assertTrue(c.contains(\"1\"));\n+        assertTrue(one.contains(\"1\"));\n+    }\n+    \n+    public void testAddAllMutator() {\n+        setUpTest();\n+        c.setMutator(new CompositeCollection.CollectionMutator() {\n+            public boolean add(CompositeCollection composite, \n+            Collection[] collections, Object obj) {\n+                for (int i = 0; i < collections.length; i++) {\n+                    collections[i].add(obj);\n+                }\n+                return true;\n+            }\n+            \n+            public boolean addAll(CompositeCollection composite, \n+            Collection[] collections, Collection coll) {\n+                for (int i = 0; i < collections.length; i++) {\n+                    collections[i].addAll(coll);\n+                }\n+                return true;\n+            }\n+            \n+            public boolean remove(CompositeCollection composite, \n+            Collection[] collections, Object obj) {\n+                return false;\n+            }\n+        });\n+        \n+        c.addComposited(one);\n+        two.add(\"foo\");\n+        c.addAll(two);\n+        assertTrue(c.contains(\"foo\"));\n+        assertTrue(one.contains(\"foo\"));\n+    }\n+    \n+    public void testAddMutator() {\n+        setUpTest();\n+        c.setMutator(new CompositeCollection.CollectionMutator() {\n+            public boolean add(CompositeCollection composite, \n+            Collection[] collections, Object obj) {\n+                for (int i = 0; i < collections.length; i++) {\n+                    collections[i].add(obj);\n+                }\n+                return true;\n+            }\n+            \n+            public boolean addAll(CompositeCollection composite, \n+            Collection[] collections, Collection coll) {\n+                for (int i = 0; i < collections.length; i++) {\n+                    collections[i].addAll(coll);\n+                }\n+                return true;\n+            }\n+            \n+            public boolean remove(CompositeCollection composite, \n+            Collection[] collections, Object obj) {\n+                return false;\n+            }\n+        });\n+        \n+        c.addComposited(one);\n+        c.add(\"foo\");\n+        assertTrue(c.contains(\"foo\"));\n+        assertTrue(one.contains(\"foo\"));\n+    }\n+    \n+    public void testToCollection() {\n+        setUpTest();\n+        one.add(\"1\");\n+        two.add(\"2\");\n+        c.addComposited(one, two);\n+        Collection foo = c.toCollection();\n+        assertTrue(foo.containsAll(c));\n+        assertEquals(c.size(), foo.size());\n+        one.add(\"3\");\n+        assertTrue(!foo.containsAll(c));\n+    }\n+    \n+    public void testAddAllToCollection() {\n+        setUpTest();\n+        one.add(\"1\");\n+        two.add(\"2\");\n+        c.addComposited(one, two);\n+        Collection toCollection = new HashSet();\n+        toCollection.addAll(c);\n+        assertTrue(toCollection.containsAll(c));\n+        assertEquals(c.size(), toCollection.size());\n+    }   \n+    \n+    public void testRemove() {\n+        setUpMutatorTest();\n+        one.add(\"1\");\n+        two.add(\"2\");\n+        two.add(\"1\");\n+        c.addComposited(one, two);\n+        c.remove(\"1\");\n+        assertTrue(!c.contains(\"1\"));\n+        assertTrue(!one.contains(\"1\"));\n+        assertTrue(!two.contains(\"1\"));\n+    }\n+    \n+    public void testRemoveAll() {\n+        setUpMutatorTest();\n+        one.add(\"1\");\n+        two.add(\"2\");\n+        two.add(\"1\");\n+        c.addComposited(one, two);\n+        c.removeAll(one);\n+        assertTrue(!c.contains(\"1\"));\n+        assertTrue(!one.contains(\"1\"));\n+        assertTrue(!two.contains(\"1\"));\n+    }\n+    \n+    public void testRemoveComposited() {\n+        setUpMutatorTest();\n+        one.add(\"1\");\n+        two.add(\"2\");\n+        two.add(\"1\");\n+        c.addComposited(one, two);    \n+        c.removeComposited(one);\n+        assertTrue(c.contains(\"1\"));\n+        assertEquals(c.size(), 2);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/collection/TestPredicatedCollection.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Turbine\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Turbine\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestCollection;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Extension of {@link TestCollection} for exercising the \n+ * {@link PredicatedCollection} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedCollection extends AbstractTestCollection {\n+\n+    public TestPredicatedCollection(String name) {\n+        super(name);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedCollection.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedCollection.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+ \n+ //------------------------------------------------------------------------\n+        \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    protected Collection decorateCollection(Collection collection, \n+        Predicate predicate) {\n+        return PredicatedCollection.decorate(collection, predicate);\n+    }\n+    \n+    public Collection makeCollection() {\n+        return decorateCollection(new ArrayList(), truePredicate);\n+    }\n+    \n+    public Collection makeConfirmedCollection() {\n+        return new ArrayList();\n+    }\n+    \n+    protected Object[] getFullElements() {\n+        return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+    }\n+    \n+    protected Collection makeFullCollection() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return decorateCollection(list, truePredicate);\n+    }\n+    \n+    protected Collection makeConfirmedFullCollection() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+ //-----------------------------------------------------------------\n+    protected Predicate testPredicate =  \n+        new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };\n+    \n+    public Collection makeTestCollection() {\n+        return decorateCollection(new ArrayList(), testPredicate);\n+    }\n+     \n+    public void testIllegalAdd() {\n+        Collection c = makeTestCollection();\n+        Integer i = new Integer(3);\n+        try {\n+            c.add(i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(i));   \n+    }\n+\n+    public void testIllegalAddAll() {\n+        Collection c = makeTestCollection();\n+        List elements = new ArrayList();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            c.addAll(elements);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"one\"));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"two\"));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(new Integer(3)));   \n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !c.contains(\"four\"));   \n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/collection/TestTransformedCollection.java,v 1.1 2003/11/16 00:05:47 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.collection;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestCollection;\n+import org.apache.commons.collections.Transformer;\n+\n+/**\n+ * Extension of {@link TestCollection} for exercising the {@link TransformedCollection}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:47 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformedCollection extends AbstractTestCollection {\n+    \n+    private static class Noop implements Transformer, Serializable {\n+        public Object transform(Object input) {\n+            return input;\n+        }\n+    }\n+    \n+    private static class StringToInteger implements Transformer, Serializable {\n+        public Object transform(Object input) {\n+            return new Integer((String) input);\n+        }\n+    }\n+    \n+    public static final Transformer NOOP_TRANSFORMER = new Noop();\n+    public static final Transformer STRING_TO_INTEGER_TRANSFORMER = new StringToInteger();\n+\n+    public TestTransformedCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTransformedCollection.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTransformedCollection.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Collection makeConfirmedCollection() {\n+        return new ArrayList();\n+    }\n+\n+    protected Collection makeConfirmedFullCollection() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+    \n+    public Collection makeCollection() {\n+        return TransformedCollection.decorate(new ArrayList(), NOOP_TRANSFORMER);\n+    }\n+\n+    protected Collection makeFullCollection() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return TransformedCollection.decorate(list, NOOP_TRANSFORMER);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    protected Object[] getFullElements() {\n+        return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+    }\n+\n+    protected Object[] getOtherElements() {\n+        return new Object[] {\"9\", \"88\", \"678\", \"87\", \"98\", \"78\", \"99\"};\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTransformedCollection() {\n+        Collection coll = TransformedCollection.decorate(new ArrayList(), STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, coll.size());\n+        Object[] els = getFullElements();\n+        for (int i = 0; i < els.length; i++) {\n+            coll.add(els[i]);\n+            assertEquals(i + 1, coll.size());\n+            assertEquals(true, coll.contains(new Integer((String) els[i])));\n+            assertEquals(false, coll.contains(els[i]));\n+        }\n+        \n+        assertEquals(true, coll.remove(new Integer((String) els[0])));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/list/TestAll.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestAll.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for tests.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+    \n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestAll.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestFixedSizeList.suite());\n+        suite.addTest(TestPredicatedList.suite());\n+        suite.addTest(TestSetUniqueList.suite());\n+        suite.addTest(TestTransformedList.suite());\n+        suite.addTest(TestUnmodifiableList.suite());\n+        \n+        return suite;\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/list/TestFixedSizeList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestFixedSizeList.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestList;\n+\n+/**\n+ * Extension of {@link TestList} for exercising the {@link FixedSizeList}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestFixedSizeList extends AbstractTestList {\n+\n+    public TestFixedSizeList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestFixedSizeList.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestFixedSizeList.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public List makeEmptyList() {\n+        return FixedSizeList.decorate(new ArrayList());\n+    }\n+\n+    protected List makeFullList() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return FixedSizeList.decorate(list);\n+    }\n+    \n+    protected boolean isAddSupported() {\n+        return false;\n+    }\n+\n+    protected boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/list/TestPredicatedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestPredicatedList.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Extension of {@link TestList} for exercising the \n+ * {@link PredicatedList} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedList extends AbstractTestList{\n+    \n+    public TestPredicatedList(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedList.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedList.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------\n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    protected List decorateList(List list, Predicate predicate) {\n+        return PredicatedList.decorate(list, predicate);\n+    }\n+    \n+    public List makeEmptyList() {\n+        return decorateList(new ArrayList(), truePredicate);\n+    }\n+    \n+    protected Object[] getFullElements() {\n+        return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+     protected Predicate testPredicate =  \n+        new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };      \n+    \n+    public List makeTestList() {\n+        return decorateList(new ArrayList(), testPredicate);\n+    }\n+    \n+    public void testIllegalAdd() {\n+        List list = makeTestList();\n+        Integer i = new Integer(3);\n+        try {\n+            list.add(i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !list.contains(i));   \n+    }\n+\n+    public void testIllegalAddAll() {\n+        List list = makeTestList();\n+        List elements = new ArrayList();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            list.addAll(0,elements);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"List shouldn't contain illegal element\", \n+         !list.contains(\"one\"));   \n+        assertTrue(\"List shouldn't contain illegal element\", \n+         !list.contains(\"two\"));   \n+        assertTrue(\"List shouldn't contain illegal element\", \n+         !list.contains(new Integer(3)));   \n+        assertTrue(\"List shouldn't contain illegal element\", \n+         !list.contains(\"four\"));   \n+    }\n+    \n+    public void testIllegalSet() {\n+        List list = makeTestList();\n+        try {\n+            list.set(0,new Integer(3));\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testLegalAddAll() {\n+        List list = makeTestList();\n+        list.add(\"zero\");\n+        List elements = new ArrayList();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(\"three\");\n+        list.addAll(1,elements);\n+        assertTrue(\"List should contain legal element\", \n+         list.contains(\"zero\"));   \n+        assertTrue(\"List should contain legal element\", \n+         list.contains(\"one\"));   \n+        assertTrue(\"List should contain legal element\", \n+         list.contains(\"two\"));   \n+        assertTrue(\"List should contain legal element\", \n+         list.contains(\"three\"));   \n+    }       \n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/list/TestSetUniqueList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestSetUniqueList.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+import org.apache.commons.collections.AbstractTestList;\n+\n+/**\n+ * JUnit tests.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Matthew Hawthorne\n+ */\n+public class TestSetUniqueList extends AbstractTestList {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestSetUniqueList.class);\n+    }\n+\n+    public TestSetUniqueList(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    protected List makeEmptyList() {\n+        return new SetUniqueList(new ArrayList(), new HashSet());\n+    }\n+\n+    public void testListIteratorSet() {\n+        // override to block\n+        resetFull();\n+        ListIterator it = getList().listIterator();\n+        it.next();\n+        try {\n+            it.set(null);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+    \n+    protected Object[] getFullNonNullElements() {\n+        // override to avoid duplicate \"One\"\n+        return new Object[] {\n+            new String(\"\"),\n+            new String(\"One\"),\n+            new Integer(2),\n+            \"Three\",\n+            new Integer(4),\n+            new Double(5),\n+            new Float(6),\n+            \"Seven\",\n+            \"Eight\",\n+            new String(\"Nine\"),\n+            new Integer(10),\n+            new Short((short)11),\n+            new Long(12),\n+            \"Thirteen\",\n+            \"14\",\n+            \"15\",\n+            new Byte((byte)16)\n+        };\n+    }\n+    \n+    public void testListIteratorAdd() {\n+        // override to cope with Set behaviour\n+        resetEmpty();\n+        List list1 = getList();\n+        List list2 = getConfirmedList();\n+\n+        Object[] elements = getOtherElements();  // changed here\n+        ListIterator iter1 = list1.listIterator();\n+        ListIterator iter2 = list2.listIterator();\n+\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.add(elements[i]);\n+            iter2.add(elements[i]);\n+            super.verify();  // changed here\n+        }\n+\n+        resetFull();\n+        iter1 = getList().listIterator();\n+        iter2 = getConfirmedList().listIterator();\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.next();\n+            iter2.next();\n+            iter1.add(elements[i]);\n+            iter2.add(elements[i]);\n+            super.verify();  // changed here\n+        }\n+    }\n+    \n+    public void testCollectionAddAll() {\n+        // override for set behaviour\n+        resetEmpty();\n+        Object[] elements = getFullElements();\n+        boolean r = collection.addAll(Arrays.asList(elements));\n+        confirmed.addAll(Arrays.asList(elements));\n+        verify();\n+        assertTrue(\"Empty collection should change after addAll\", r);\n+        for (int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Collection should contain added element\",\n+                       collection.contains(elements[i]));\n+        }\n+\n+        resetFull();\n+        int size = collection.size();\n+        elements = getOtherElements();\n+        r = collection.addAll(Arrays.asList(elements));\n+        confirmed.addAll(Arrays.asList(elements));\n+        verify();\n+        assertTrue(\"Full collection should change after addAll\", r);\n+        for (int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Full collection should contain added element \" + i,\n+                       collection.contains(elements[i]));\n+        }\n+        assertEquals(\"Size should increase after addAll\", \n+                     size + elements.length, collection.size());\n+    }\n+    \n+    public void testListSetByIndex() {\n+        // override for set behaviour\n+        resetFull();\n+        int size = collection.size();\n+        getList().set(0, new Long(1000));\n+        assertEquals(size, collection.size());\n+\n+        getList().set(2, new Long(1000));\n+        assertEquals(size - 1, collection.size());\n+        assertEquals(new Long(1000), getList().get(1));  // set into 2, but shifted down to 1\n+    }\n+    \n+    boolean extraVerify = true;\n+    public void testCollectionIteratorRemove() {\n+        try {\n+            extraVerify = false;\n+            super.testCollectionIteratorRemove();\n+        } finally {\n+            extraVerify = true;\n+        }\n+    }\n+    \n+    protected void verify() {\n+        super.verify();\n+        \n+        if (extraVerify) {\n+            int size = collection.size();\n+            getList().add(new Long(1000));\n+            assertEquals(size + 1, collection.size());\n+\n+            getList().add(new Long(1000));\n+            assertEquals(size + 1, collection.size());\n+            assertEquals(new Long(1000), getList().get(size));\n+        \n+            getList().remove(size);\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testFactory() {\n+        Integer[] array = new Integer[] {new Integer(1), new Integer(2), new Integer(1)};\n+        ArrayList list = new ArrayList(Arrays.asList(array));\n+        final SetUniqueList lset = SetUniqueList.decorate(list);\n+\n+        assertEquals(\"Duplicate element was added.\", 2, lset.size());\n+        assertEquals(new Integer(1), lset.get(0));\n+        assertEquals(new Integer(2), lset.get(1));\n+        assertEquals(new Integer(1), list.get(0));\n+        assertEquals(new Integer(2), list.get(1));\n+    }\n+\n+    public void testAdd() {\n+        final SetUniqueList lset = new SetUniqueList(new ArrayList(), new HashSet());\n+\n+        // Duplicate element\n+        final Object obj = new Integer(1);\n+        lset.add(obj);\n+        lset.add(obj);\n+        assertEquals(\"Duplicate element was added.\", 1, lset.size());\n+\n+        // Unique element\n+        lset.add(new Integer(2));\n+        assertEquals(\"Unique element was not added.\", 2, lset.size());\n+    }\n+\n+    public void testAddAll() {\n+        final SetUniqueList lset = new SetUniqueList(new ArrayList(), new HashSet());\n+\n+        lset.addAll(\n+            Arrays.asList(new Integer[] { new Integer(1), new Integer(1)}));\n+\n+        assertEquals(\"Duplicate element was added.\", 1, lset.size());\n+    }\n+\n+    public void testSet() {\n+        final SetUniqueList lset = new SetUniqueList(new ArrayList(), new HashSet());\n+\n+        // Duplicate element\n+        final Object obj1 = new Integer(1);\n+        final Object obj2 = new Integer(2);\n+        final Object obj3 = new Integer(3);\n+\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(0, obj1);\n+        assertEquals(2, lset.size());\n+        assertSame(obj1, lset.get(0));\n+        assertSame(obj2, lset.get(1));\n+\n+        lset.clear();\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(0, obj2);\n+        assertEquals(1, lset.size());\n+        assertSame(obj2, lset.get(0));\n+\n+        lset.clear();\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(0, obj3);\n+        assertEquals(2, lset.size());\n+        assertSame(obj3, lset.get(0));\n+        assertSame(obj2, lset.get(1));\n+\n+        lset.clear();\n+        lset.add(obj1);\n+        lset.add(obj2);\n+        lset.set(1, obj1);\n+        assertEquals(1, lset.size());\n+        assertSame(obj1, lset.get(0));\n+    }\n+\n+    public void testListIterator() {\n+        final SetUniqueList lset = new SetUniqueList(new ArrayList(), new HashSet());\n+\n+        final Object obj1 = new Integer(1);\n+        final Object obj2 = new Integer(2);\n+        lset.add(obj1);\n+        lset.add(obj2);\n+\n+        // Attempts to add a duplicate object\n+        for (final ListIterator it = lset.listIterator(); it.hasNext();) {\n+            it.next();\n+\n+            if (!it.hasNext()) {\n+                it.add(obj1);\n+                break;\n+            }\n+        }\n+\n+        assertEquals(\"Duplicate element was added\", 2, lset.size());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/list/TestTransformedList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestTransformedList.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.collection.TestTransformedCollection;\n+\n+/**\n+ * Extension of {@link TestList} for exercising the {@link TransformedList}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformedList extends AbstractTestList {\n+    \n+    public TestTransformedList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTransformedList.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTransformedList.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Collection makeConfirmedCollection() {\n+        return new ArrayList();\n+    }\n+\n+    protected Collection makeConfirmedFullCollection() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+    \n+    public List makeEmptyList() {\n+        return TransformedList.decorate(new ArrayList(), TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+\n+    protected List makeFullList() {\n+        List list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return TransformedList.decorate(list, TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+    \n+    public void testTransformedList() {\n+        List list = TransformedList.decorate(new ArrayList(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, list.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            list.add(els[i]);\n+            assertEquals(i + 1, list.size());\n+            assertEquals(true, list.contains(new Integer((String) els[i])));\n+            assertEquals(false, list.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, list.remove(els[0]));\n+        assertEquals(true, list.remove(new Integer((String) els[0])));\n+        \n+        list.clear();\n+        for (int i = 0; i < els.length; i++) {\n+            list.add(0, els[i]);\n+            assertEquals(i + 1, list.size());\n+            assertEquals(new Integer((String) els[i]), list.get(0));\n+        }\n+        \n+        list.set(0, \"22\");\n+        assertEquals(new Integer(22), list.get(0));\n+        \n+        ListIterator it = list.listIterator();\n+        it.next();\n+        it.set(\"33\");\n+        assertEquals(new Integer(33), list.get(0));\n+        it.add(\"44\");\n+        assertEquals(new Integer(44), list.get(1));\n+        \n+        List adds = new ArrayList();\n+        adds.add(\"1\");\n+        adds.add(\"2\");\n+        list.clear();\n+        list.addAll(adds);\n+        assertEquals(new Integer(1), list.get(0));\n+        assertEquals(new Integer(2), list.get(1));\n+        \n+        adds.clear();\n+        adds.add(\"3\");\n+        list.addAll(1, adds);\n+        assertEquals(new Integer(1), list.get(0));\n+        assertEquals(new Integer(3), list.get(1));\n+        assertEquals(new Integer(2), list.get(2));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/list/TestUnmodifiableList.java,v 1.1 2003/11/16 00:05:44 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.list;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestList;\n+import org.apache.commons.collections.map.TestPredicatedSortedMap;\n+\n+/**\n+ * Extension of {@link AbstractTestList} for exercising the \n+ * {@link UnmodifiableList} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:44 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestUnmodifiableList extends AbstractTestList{\n+    \n+    public TestUnmodifiableList(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestUnmodifiableList.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedSortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------       \n+    public List makeEmptyList() {\n+        return UnmodifiableList.decorate(new ArrayList());\n+    }\n+    \n+    public List makeFullList() {\n+        ArrayList list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return UnmodifiableList.decorate(list);\n+    }\n+    \n+    protected boolean isSetSupported() {\n+        return false;\n+    }\n+    \n+    protected boolean isAddSupported() {\n+        return false;\n+    }\n+    \n+    protected boolean isRemoveSupported() {\n+        return false;\n+    }   \n+//--------------------------------------------------------------------   \n+    protected UnmodifiableList list = null;\n+    protected ArrayList array = null;\n+    \n+    protected void setupList() {\n+        list = (UnmodifiableList) makeFullList();\n+        array = new ArrayList();\n+        array.add(new Integer(1));\n+    }\n+    \n+    /** \n+     * Verify that base list and sublists are not modifiable\n+     */\n+    public void testUnmodifiable() {\n+        setupList();\n+        verifyUnmodifiable(list); \n+        verifyUnmodifiable(list.subList(0, 2));\n+    } \n+        \n+    protected void verifyUnmodifiable(List list) {\n+        try {\n+            list.add(0, new Integer(0));\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        } \n+        try {\n+            list.add(new Integer(0));\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.addAll(0, array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.addAll(array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.clear();\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.remove(0);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.remove(new Integer(0));\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.removeAll(array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.retainAll(array);\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            list.set(0, new Integer(0));\n+             fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * Verify that iterator is not modifiable\n+     */\n+    public void testUnmodifiableIterator() {\n+        setupList();\n+        Iterator iterator = list.iterator();\n+        try {\n+            Object obj = iterator.next();\n+            iterator.remove();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestAll.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestAll.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for tests.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+    \n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestAll.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestFixedSizeMap.suite());\n+        suite.addTest(TestFixedSizeSortedMap.suite());\n+        suite.addTest(TestLazyMap.suite());\n+        suite.addTest(TestLazySortedMap.suite());\n+        suite.addTest(TestListOrderedMap.suite());\n+        suite.addTest(TestTransformedMap.suite());\n+        suite.addTest(TestTransformedSortedMap.suite());\n+        suite.addTest(TestPredicatedMap.suite());\n+        suite.addTest(TestPredicatedSortedMap.suite());\n+        suite.addTest(TestUnmodifiableMap.suite());\n+        \n+        return suite;\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFixedSizeMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestMap;\n+\n+/**\n+ * Extension of {@link AbstractTestMap} for exercising the {@link FixedSizeMap}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestFixedSizeMap extends AbstractTestMap {\n+\n+    public TestFixedSizeMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestFixedSizeMap.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestFixedSizeMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    protected Map makeEmptyMap() {\n+        return FixedSizeMap.decorate(new HashMap());\n+    }\n+\n+    protected Map makeFullMap() {\n+        Map map = new HashMap();\n+        addSampleMappings(map);\n+        return FixedSizeMap.decorate(map);\n+    }\n+    \n+    protected boolean isPutAddSupported() {\n+        return false;\n+    }\n+\n+    protected boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestFixedSizeSortedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.AbstractTestSortedMap;\n+import org.apache.commons.collections.BulkTest;\n+\n+/**\n+ * Extension of {@link TestSortedMap} for exercising the {@link FixedSizeSortedMap}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestFixedSizeSortedMap extends AbstractTestSortedMap {\n+\n+    public TestFixedSizeSortedMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestFixedSizeSortedMap.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestFixedSizeSortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Map makeEmptyMap() {\n+        return FixedSizeSortedMap.decorate(new TreeMap());\n+    }\n+\n+    protected Map makeFullMap() {\n+        SortedMap map = new TreeMap();\n+        addSampleMappings(map);\n+        return FixedSizeSortedMap.decorate(map);\n+    }\n+    \n+    protected boolean isPutAddSupported() {\n+        return false;\n+    }\n+\n+    protected boolean isRemoveSupported() {\n+        return false;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestLazyMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestLazyMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestMap;\n+import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.FactoryUtils;\n+\n+/**\n+ * Extension of {@link TestMap} for exercising the \n+ * {@link LazyMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestLazyMap extends AbstractTestMap {\n+    \n+    public TestLazyMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestLazyMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestLazyMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------\n+    \n+    protected Factory oneFactory = FactoryUtils.constantFactory(\"One\");\n+    protected Factory nullFactory = FactoryUtils.nullFactory();\n+    \n+    protected Map decorateMap(Map map, Factory factory) {\n+        return LazyMap.decorate(map, factory);\n+    }\n+    \n+    protected Map makeEmptyMap() {\n+        return decorateMap(new HashMap(), nullFactory);\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+    protected Map makeTestMap(Factory factory) {\n+        return decorateMap(new HashMap(), factory);\n+    }\n+    \n+    public void testMapGet() {\n+        Map map = makeTestMap(oneFactory);\n+        assertEquals(0, map.size());\n+        String s1 = (String) map.get(\"Five\");\n+        assertEquals(\"One\", s1);\n+        assertEquals(1, map.size());\n+        String s2 = (String) map.get(new String(new char[] {'F','i','v','e'}));\n+        assertEquals(\"One\", s2);\n+        assertEquals(1, map.size());\n+        assertSame(s1, s2);\n+        \n+        map = makeTestMap(nullFactory);\n+        Object o = map.get(\"Five\");\n+        assertEquals(null,o);\n+        assertEquals(1, map.size());\n+        \n+    }       \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestLazySortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestLazySortedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.Factory;\n+import org.apache.commons.collections.Transformer;\n+import org.apache.commons.collections.TransformerUtils;\n+\n+/**\n+ * Extension of {@link TestLazyMap} for exercising the \n+ * {@link LazySortedMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestLazySortedMap extends TestLazyMap {\n+    \n+    public TestLazySortedMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestLazySortedMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestLazySortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------\n+    \n+    protected SortedMap decorateMap(SortedMap map, Factory factory) {\n+        return LazySortedMap.decorate(map, factory);\n+    }\n+    \n+    public Map makeEmptyMap() {\n+        return decorateMap(new TreeMap(), nullFactory);\n+    }\n+    \n+    protected boolean isAllowNullKey() {\n+        return false;\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+    protected SortedMap makeTestSortedMap(Factory factory) {\n+        return decorateMap(new TreeMap(), factory);\n+    }\n+    \n+    public void testSortOrder() {\n+        SortedMap map = makeTestSortedMap(oneFactory);\n+        map.put(\"A\",  \"a\");\n+        map.get(\"B\"); // Entry with value \"One\" created\n+        map.put(\"C\", \"c\");\n+        assertEquals(\"First key should be A\", map.firstKey(), \"A\");\n+        assertEquals(\"Last key should be C\", map.lastKey(), \"C\");\n+        assertEquals(\"First key in tail map should be B\", \n+            map.tailMap(\"B\").firstKey(), \"B\");\n+        assertEquals(\"Last key in head map should be B\", \n+            map.headMap(\"C\").lastKey(), \"B\");\n+        assertEquals(\"Last key in submap should be B\",\n+           map.subMap(\"A\",\"C\").lastKey(), \"B\");\n+        \n+        Comparator c = map.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", \n+            c == null);      \n+    } \n+    \n+    public void testTransformerDecorate() {\n+        Transformer transformer = TransformerUtils.asTransformer(oneFactory);\n+        SortedMap map = LazySortedMap.decorate(new TreeMap(), transformer);     \n+        assertTrue(map instanceof LazySortedMap);  \n+         try {\n+            map = LazySortedMap.decorate(new TreeMap(), (Transformer) null);\n+            fail(\"Expecting IllegalArgumentException for null transformer\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        try {\n+            map = LazySortedMap.decorate(null, transformer);\n+            fail(\"Expecting IllegalArgumentException for null map\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        } \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestListOrderedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestListOrderedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.AbstractTestMap;\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.iterators.AbstractTestMapIterator;\n+import org.apache.commons.collections.iterators.MapIterator;\n+\n+/**\n+ * Extension of {@link TestMap} for exercising the {@link ListOrderedMap}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Henri Yandell\n+ * @author Stephen Colebourne\n+ */\n+public class TestListOrderedMap extends AbstractTestMap {\n+\n+    public TestListOrderedMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestListOrderedMap.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestListOrderedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Map makeEmptyMap() {\n+        return ListOrderedMap.decorate(new HashMap());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public BulkTest bulkTestMapIterator() {\n+        return new TestOrderedMapIterator();\n+    }\n+    \n+    public class TestOrderedMapIterator extends AbstractTestMapIterator {\n+        public TestOrderedMapIterator() {\n+            super(\"TestOrderedMapIterator\");\n+        }\n+        \n+        protected Object addSetValue() {\n+            return TestListOrderedMap.this.getNewSampleValues()[0];\n+        }\n+        \n+        protected boolean supportsRemove() {\n+            return TestListOrderedMap.this.isRemoveSupported();\n+        }\n+\n+        protected boolean supportsSetValue() {\n+            return TestListOrderedMap.this.isSetValueSupported();\n+        }\n+\n+        protected MapIterator makeEmptyMapIterator() {\n+            resetEmpty();\n+            return ((ListOrderedMap) TestListOrderedMap.this.map).mapIterator();\n+        }\n+\n+        protected MapIterator makeFullMapIterator() {\n+            resetFull();\n+            return ((ListOrderedMap) TestListOrderedMap.this.map).mapIterator();\n+        }\n+        \n+        protected Map getMap() {\n+            // assumes makeFullMapIterator() called first\n+            return TestListOrderedMap.this.map;\n+        }\n+        \n+        protected Map getConfirmedMap() {\n+            // assumes makeFullMapIterator() called first\n+            return TestListOrderedMap.this.confirmed;\n+        }\n+        \n+        protected void verify() {\n+            super.verify();\n+            TestListOrderedMap.this.verify();\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testMapIteratorRemove() {\n+        resetFull();\n+        ListOrderedMap testMap = (ListOrderedMap) map;\n+        MapIterator it = testMap.mapIterator();\n+        assertEquals(true, it.hasNext());\n+        Object key = it.next();\n+        \n+        if (isRemoveSupported() == false) {\n+            try {\n+                it.remove();\n+                fail();\n+            } catch (UnsupportedOperationException ex) {\n+            }\n+            return;\n+        }\n+        \n+        it.remove();\n+        confirmed.remove(key);\n+        assertEquals(false, testMap.containsKey(key));\n+        verify();\n+        \n+        try {\n+            it.remove();  // second remove fails\n+        } catch (IllegalStateException ex) {\n+        }\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMapIteratorSet() {\n+        Object newValue1 = getOtherValues()[0];\n+        Object newValue2 = getOtherValues()[1];\n+        \n+        resetFull();\n+        ListOrderedMap testMap = (ListOrderedMap) map;\n+        MapIterator it = testMap.mapIterator();\n+        assertEquals(true, it.hasNext());\n+        Object key1 = it.next();\n+        \n+        if (isSetValueSupported() == false) {\n+            try {\n+                it.setValue(newValue1);\n+                fail();\n+            } catch (UnsupportedOperationException ex) {\n+            }\n+            return;\n+        }\n+        \n+        it.setValue(newValue1);\n+        confirmed.put(key1, newValue1);\n+        assertSame(key1, it.getKey());\n+        assertSame(newValue1, it.getValue());\n+        assertEquals(true, testMap.containsKey(key1));\n+        assertEquals(true, testMap.containsValue(newValue1));\n+        assertEquals(newValue1, testMap.get(key1));\n+        verify();\n+        \n+        it.setValue(newValue1);  // same value - should be OK\n+        confirmed.put(key1, newValue1);\n+        assertSame(key1, it.getKey());\n+        assertSame(newValue1, it.getValue());\n+        assertEquals(true, testMap.containsKey(key1));\n+        assertEquals(true, testMap.containsValue(newValue1));\n+        assertEquals(newValue1, testMap.get(key1));\n+        verify();\n+        \n+        Object key2 = it.next();\n+        it.setValue(newValue2);\n+        confirmed.put(key2, newValue2);\n+        assertSame(key2, it.getKey());\n+        assertSame(newValue2, it.getValue());\n+        assertEquals(true, testMap.containsKey(key2));\n+        assertEquals(true, testMap.containsValue(newValue2));\n+        assertEquals(newValue2, testMap.get(key2));\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // Creates a known series of Objects, puts them in \n+    // an OrderedMap and ensures that all three Collection \n+    // methods return in the correct order.\n+    public void testInsertionOrder() {\n+        int size = 10; // number to try\n+        ArrayList list = new ArrayList(size);\n+        for( int i=0; i<size; i++ ) {\n+            list.add( new Object() );\n+        }\n+\n+        Map map = makeEmptyMap();\n+        for( Iterator itr = list.iterator(); itr.hasNext(); ) {\n+            Object obj = itr.next();\n+            map.put( obj, obj );\n+        }\n+\n+        assertSameContents(map.values(), list);\n+        assertSameContents(map.keySet(), list);\n+\n+        // check entrySet\n+        Set entries = map.entrySet();\n+        assertEquals( entries.size(), list.size() );\n+        Iterator i1 = entries.iterator();\n+        Iterator i2 = list.iterator();\n+        while( i1.hasNext() && i2.hasNext() ) {\n+            Map.Entry entry = (Map.Entry) i1.next();\n+            Object obj = i2.next();\n+            assertSame( entry.getKey(), obj );\n+            assertSame( entry.getValue(), obj );\n+        }\n+        assertTrue( !(i1.hasNext() && i2.hasNext()) );\n+\n+    }\n+\n+    private void assertSameContents(Collection c1, Collection c2) {\n+        assertNotNull(c1);\n+        assertNotNull(c2);\n+        assertEquals( c1.size(), c2.size() );\n+        Iterator i1 = c1.iterator();\n+        Iterator i2 = c2.iterator();\n+        while( i1.hasNext() && i2.hasNext() ) {\n+            assertSame( i1.next(), i2.next() );\n+        }\n+        // ensure they've both ended\n+        assertTrue( !(i1.hasNext() && i2.hasNext()) );\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestPredicatedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestPredicatedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestMap;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Extension of {@link TestMap} for exercising the \n+ * {@link PredicatedMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedMap extends AbstractTestMap{\n+    \n+    public TestPredicatedMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------\n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    protected Map decorateMap(Map map, Predicate keyPredicate, \n+        Predicate valuePredicate) {\n+        return PredicatedMap.decorate(map, keyPredicate, valuePredicate);\n+    }\n+    \n+    protected Map makeEmptyMap() {\n+        return decorateMap(new HashMap(), truePredicate, truePredicate);\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+     protected Predicate testPredicate =  \n+        new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };      \n+    \n+    public Map makeTestMap() {\n+        return decorateMap(new HashMap(), testPredicate, testPredicate);\n+    }\n+    \n+    public void testEntrySet() {\n+        Map map = makeTestMap();\n+        assertTrue(\"returned entryset should not be null\",\n+            map.entrySet() != null);\n+        map = decorateMap(new HashMap(), null, null);\n+        map.put(\"oneKey\", \"oneValue\");\n+        assertTrue(\"returned entryset should contain one entry\",\n+            map.entrySet().size() == 1); \n+        map = decorateMap(map, null, null);\n+    }\n+    \n+    public void testPut() {\n+        Map map = makeTestMap();\n+        try {\n+            map.put(\"Hi\", new Integer(3));\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.put(new Integer(3), \"Hi\");\n+            fail(\"Illegal key should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        assertTrue(!map.containsKey(new Integer(3)));\n+        assertTrue(!map.containsValue(new Integer(3)));\n+\n+        Map map2 = new HashMap();\n+        map2.put(\"A\", \"a\");\n+        map2.put(\"B\", \"b\");\n+        map2.put(\"C\", \"c\");\n+        map2.put(\"c\", new Integer(3));\n+\n+        try {\n+            map.putAll(map2);\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        map.put(\"E\", \"e\");\n+        Iterator iterator = map.entrySet().iterator();\n+        try {\n+            Map.Entry entry = (Map.Entry)iterator.next();\n+            entry.setValue(new Integer(3));\n+            fail(\"Illegal value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        map.put(\"F\", \"f\");\n+        iterator = map.entrySet().iterator();\n+        Map.Entry entry = (Map.Entry)iterator.next();\n+        entry.setValue(\"x\");\n+        \n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestPredicatedSortedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Comparator;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.Predicate;\n+\n+/**\n+ * Extension of {@link TestPredicatedMap} for exercising the \n+ * {@link PredicatedSortedMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedSortedMap extends TestPredicatedMap{\n+    \n+    public TestPredicatedSortedMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedSortedMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedSortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------    \n+    \n+    protected SortedMap decorateMap(SortedMap map, Predicate keyPredicate, \n+        Predicate valuePredicate) {\n+        return PredicatedSortedMap.decorate(map, keyPredicate, valuePredicate);\n+    }\n+    \n+    public Map makeEmptyMap() {\n+        return decorateMap(new TreeMap(), truePredicate, truePredicate);\n+    }\n+   \n+    public Map makeTestMap() {\n+        return decorateMap(new TreeMap(), testPredicate, testPredicate);\n+    } \n+    \n+    protected boolean isAllowNullKey() {\n+        return false;\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+    public SortedMap makeTestSortedMap() {\n+        return decorateMap(new TreeMap(), testPredicate, testPredicate);\n+    }\n+    \n+    public void testSortOrder() {\n+        SortedMap map = makeTestSortedMap();\n+        map.put(\"A\",  \"a\");\n+        map.put(\"B\", \"b\");\n+        try {\n+            map.put(null, \"c\");\n+            fail(\"Null key should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        map.put(\"C\", \"c\");\n+        try {\n+            map.put(\"D\", null);\n+            fail(\"Null value should raise IllegalArgument\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertEquals(\"First key should be A\", map.firstKey(), \"A\");\n+        assertEquals(\"Last key should be C\", map.lastKey(), \"C\");\n+        assertEquals(\"First key in tail map should be B\", \n+            map.tailMap(\"B\").firstKey(), \"B\");\n+        assertEquals(\"Last key in head map should be B\", \n+            map.headMap(\"C\").lastKey(), \"B\");\n+        assertEquals(\"Last key in submap should be B\",\n+           map.subMap(\"A\",\"C\").lastKey(), \"B\");\n+        \n+        Comparator c = map.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", \n+            c == null);\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestTransformedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestMap;\n+import org.apache.commons.collections.collection.TestTransformedCollection;\n+\n+/**\n+ * Extension of {@link TestMap} for exercising the {@link TransformedMap}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformedMap extends AbstractTestMap {\n+    \n+    public TestTransformedMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTransformedMap.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTransformedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    protected Map makeEmptyMap() {\n+        return TransformedMap.decorate(new HashMap(), TestTransformedCollection.NOOP_TRANSFORMER, TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+\n+    public void testTransformedMap() {\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+\n+        Map map = TransformedMap.decorate(new HashMap(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER, null);\n+        assertEquals(0, map.size());\n+        for (int i = 0; i < els.length; i++) {\n+            map.put(els[i], els[i]);\n+            assertEquals(i + 1, map.size());\n+            assertEquals(true, map.containsKey(new Integer((String) els[i])));\n+            assertEquals(false, map.containsKey(els[i]));\n+            assertEquals(true, map.containsValue(els[i]));\n+            assertEquals(els[i], map.get(new Integer((String) els[i])));\n+        }\n+        \n+        assertEquals(null, map.remove(els[0]));\n+        assertEquals(els[0], map.remove(new Integer((String) els[0])));\n+        \n+        map = TransformedMap.decorate(new HashMap(), null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, map.size());\n+        for (int i = 0; i < els.length; i++) {\n+            map.put(els[i], els[i]);\n+            assertEquals(i + 1, map.size());\n+            assertEquals(true, map.containsValue(new Integer((String) els[i])));\n+            assertEquals(false, map.containsValue(els[i]));\n+            assertEquals(true, map.containsKey(els[i]));\n+            assertEquals(new Integer((String) els[i]), map.get(els[i]));\n+        }\n+\n+        assertEquals(new Integer((String) els[0]), map.remove(els[0]));\n+        \n+        Set entrySet = map.entrySet();\n+        Map.Entry[] array = (Map.Entry[]) entrySet.toArray(new Map.Entry[0]);\n+        array[0].setValue(\"66\");\n+        assertEquals(new Integer(66), array[0].getValue());\n+        assertEquals(new Integer(66), map.get(array[0].getKey()));\n+        \n+        Map.Entry entry = (Map.Entry) entrySet.iterator().next();\n+        entry.setValue(\"88\");\n+        assertEquals(new Integer(88), entry.getValue());\n+        assertEquals(new Integer(88), map.get(entry.getKey()));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.AbstractTestSortedMap;\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.collection.TestTransformedCollection;\n+\n+/**\n+ * Extension of {@link AbstractTestSortedMap} for exercising the {@link TransformedSortedMap}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformedSortedMap extends AbstractTestSortedMap {\n+    \n+    public TestTransformedSortedMap(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestTransformedSortedMap.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTransformedSortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Map makeEmptyMap() {\n+        return TransformedSortedMap.decorate(new TreeMap(), TestTransformedCollection.NOOP_TRANSFORMER, TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+\n+    public void testTransformedMap() {\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+\n+        Map map = TransformedSortedMap.decorate(new TreeMap(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER, null);\n+        assertEquals(0, map.size());\n+        for (int i = 0; i < els.length; i++) {\n+            map.put(els[i], els[i]);\n+            assertEquals(i + 1, map.size());\n+            assertEquals(true, map.containsKey(new Integer((String) els[i])));\n+            try {\n+                map.containsKey(els[i]);\n+                fail();\n+            } catch (ClassCastException ex) {}\n+            assertEquals(true, map.containsValue(els[i]));\n+            assertEquals(els[i], map.get(new Integer((String) els[i])));\n+        }\n+        \n+        try {\n+            map.remove(els[0]);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        assertEquals(els[0], map.remove(new Integer((String) els[0])));\n+        \n+        map = TransformedSortedMap.decorate(new TreeMap(), null, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, map.size());\n+        for (int i = 0; i < els.length; i++) {\n+            map.put(els[i], els[i]);\n+            assertEquals(i + 1, map.size());\n+            assertEquals(true, map.containsValue(new Integer((String) els[i])));\n+            assertEquals(false, map.containsValue(els[i]));\n+            assertEquals(true, map.containsKey(els[i]));\n+            assertEquals(new Integer((String) els[i]), map.get(els[i]));\n+        }\n+\n+        assertEquals(new Integer((String) els[0]), map.remove(els[0]));\n+        \n+        Set entrySet = map.entrySet();\n+        Map.Entry[] array = (Map.Entry[]) entrySet.toArray(new Map.Entry[0]);\n+        array[0].setValue(\"66\");\n+        assertEquals(new Integer(66), array[0].getValue());\n+        assertEquals(new Integer(66), map.get(array[0].getKey()));\n+        \n+        Map.Entry entry = (Map.Entry) entrySet.iterator().next();\n+        entry.setValue(\"88\");\n+        assertEquals(new Integer(88), entry.getValue());\n+        assertEquals(new Integer(88), map.get(entry.getKey()));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/map/TestUnmodifiableMap.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.map;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestMap;\n+\n+/**\n+ * Extension of {@link AbstractTestMap} for exercising the \n+ * {@link UnmodifiableMap} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestUnmodifiableMap extends AbstractTestMap{\n+    \n+    public TestUnmodifiableMap(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestUnmodifiableMap.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestUnmodifiableMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //-------------------------------------------------------------------\n+    \n+    protected Map makeEmptyMap() {\n+        return UnmodifiableMap.decorate(new HashMap());\n+    }\n+    \n+    protected boolean isPutChangeSupported() {\n+        return false;\n+    }\n+    \n+    protected boolean isPutAddSupported() {\n+        return false;\n+    }\n+    \n+    protected boolean isRemoveSupported() {\n+        return false;\n+    }\n+    \n+    protected Map makeFullMap() {\n+        Map m = new HashMap();\n+        addSampleMappings(m);\n+        return UnmodifiableMap.decorate(m);\n+    }\n+    \n+    //--------------------------------------------------------------------\n+    protected UnmodifiableMap map = null;\n+    protected ArrayList array = null;\n+    \n+    protected void setupMap() {\n+        map = (UnmodifiableMap) makeFullMap();\n+        array = new ArrayList();\n+        array.add(\"one\");\n+    }\n+    \n+    public void testUnmodifiableBase() {\n+        setupMap();\n+        try {\n+            map.put(\"key\", \"value\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            map.putAll(new HashMap());\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            map.clear();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            map.remove(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * Verifies that the keyset is not modifiable -- effectively tests\n+     * protection of UnmodifiableSet decorator\n+     */\n+    public void testUnmodifiableKeySet() {\n+        setupMap();\n+        Set keys = map.keySet();\n+        try {\n+            keys.add(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            keys.addAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            keys.clear();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            keys.remove(\"one\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            keys.removeAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            keys.retainAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            Iterator iterator = keys.iterator();\n+            iterator.next();\n+            iterator.remove();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+        \n+    /**\n+     * Verifies that the values collection is not modifiable -- effectively tests\n+     * protection of UnmodifiableCollection decorator\n+     */\n+    public void testUnmodifiableValues() {\n+        setupMap();\n+        Collection values = map.values();\n+        try {\n+            values.add(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            values.addAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            values.clear();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            values.remove(\"one\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            values.removeAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            values.retainAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            Iterator iterator = values.iterator();\n+            iterator.next();\n+            iterator.remove();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * Verifies that the entrySet is not modifiable -- effectively tests\n+     * protection of UnmodifiableEntrySet \n+     */\n+    public void testUnmodifiableEntries() {\n+        setupMap();\n+        Set entries = map.entrySet();\n+        try {\n+            entries.add(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            entries.addAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            entries.clear();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            entries.remove(\"one\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            entries.removeAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            entries.retainAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            Iterator iterator = entries.iterator();\n+            iterator.next();\n+            iterator.remove();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            Iterator iterator = entries.iterator();\n+            Map.Entry entry = (Map.Entry) iterator.next();\n+            entry.setValue(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }                 \n+    }\n+    \n+    /**\n+     * Verifies that entries consists of Map.Entries corresponding to the parallel\n+     * keys and values arrays  (not necessarily in order)\n+     */\n+    protected void checkEntries(Object[] keys, Object[] values, Object[] entries,\n+        boolean checkLengths) {\n+        if (checkLengths) {\n+            assertEquals(keys.length, entries.length);\n+        }\n+        for (int i = 0; i < keys.length; i++) {\n+            Map.Entry entry = (Map.Entry) entries[i];\n+            boolean found = false;\n+            // Can't assume entries are in insertion order, so have\n+            // to search for the key\n+            for (int j = 0; j < keys.length; j++) {\n+                if (entry.getKey() == keys[j]) {\n+                    found = true;\n+                    assertEquals(entry.getValue(), values[j]);\n+                    break;\n+                }\n+            }\n+            assertTrue(found);\n+        }\n+    }\n+    \n+    /**\n+     * Tests EntrySet toArray() implementation\n+     */\n+    public void testToArray() {\n+        setupMap();\n+        Object[] keys = getSampleKeys();\n+        Object[] values = getSampleValues();\n+        Object[] entries = map.entrySet().toArray();\n+        assertTrue(keys.length == entries.length);\n+        checkEntries(keys, values, entries, true);\n+        entries = map.entrySet().toArray(entries);\n+        checkEntries(keys, values, entries, true);\n+        Object[] testArray = new Object[2];\n+        entries = map.entrySet().toArray(testArray);\n+        checkEntries(keys, values, entries, true);\n+        testArray = new Object[50];\n+        entries = map.entrySet().toArray(testArray);\n+        checkEntries(keys, values, entries, false);\n+        assertEquals(testArray[map.size()], null);\n+        testArray = new Object[0];\n+        Object[] resultArray = new Object[0];\n+        resultArray = map.entrySet().toArray(testArray);\n+        checkEntries(keys, values, resultArray, true);   \n+    }         \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestAll.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestAll.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for tests.\n+ * \n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+    \n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestAll.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestListOrderedSet.suite());\n+        suite.addTest(TestPredicatedSet.suite());\n+        suite.addTest(TestPredicatedSortedSet.suite());\n+        suite.addTest(TestTransformedSet.suite());\n+        suite.addTest(TestTransformedSortedSet.suite());\n+        suite.addTest(TestTypedSortedSet.suite());\n+        suite.addTest(TestUnmodifiableSortedSet.suite());\n+        \n+        return suite;\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestListOrderedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestListOrderedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestSet;\n+\n+/**\n+ * Extension of {@link TestSet} for exercising the {@link ListOrderedSet}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Henning P. Schmiedehausen\n+ * @author Stephen Colebourne\n+ */\n+public class TestListOrderedSet extends AbstractTestSet {\n+\n+    public TestListOrderedSet(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestListOrderedSet.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestListOrderedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    protected Set makeEmptySet() {\n+        return ListOrderedSet.decorate(new HashSet());\n+    }\n+\n+    protected Set setupSet() {\n+        Set set = makeEmptySet();\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add(Integer.toString(i));\n+        }\n+        return set;\n+    }\n+\n+    public void testOrdering() {\n+        Set set = setupSet();\n+        Iterator it = set.iterator();\n+\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i += 2) {\n+            assertTrue(\"Must be able to remove int\", set.remove(Integer.toString(i)));\n+        }\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong after remove \", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add(Integer.toString(i));\n+        }\n+\n+        assertEquals(\"Size of set is wrong!\", 10, set.size());\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+        for (int i = 0; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+    }\n+    \n+    private static final Integer ZERO = new Integer(0);\n+    private static final Integer ONE = new Integer(1);\n+    private static final Integer TWO = new Integer(2);\n+    private static final Integer THREE = new Integer(3);\n+    \n+    public void testListAddRemove() {\n+        ListOrderedSet set = (ListOrderedSet) makeEmptySet();\n+        List view = set.asList();\n+        set.add(ZERO);\n+        set.add(ONE);\n+        set.add(TWO);\n+        \n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        assertEquals(3, view.size());\n+        assertSame(ZERO, view.get(0));\n+        assertSame(ONE, view.get(1));\n+        assertSame(TWO, view.get(2));\n+        \n+        assertEquals(0, set.indexOf(ZERO));\n+        assertEquals(1, set.indexOf(ONE));\n+        assertEquals(2, set.indexOf(TWO));\n+        \n+        set.remove(1);\n+        assertEquals(2, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(TWO, set.get(1));\n+        assertEquals(2, view.size());\n+        assertSame(ZERO, view.get(0));\n+        assertSame(TWO, view.get(1));\n+    }        \n+    \n+    public void testListAddIndexed() {\n+        ListOrderedSet set = (ListOrderedSet) makeEmptySet();\n+        List view = set.asList();\n+        set.add(ZERO);\n+        set.add(TWO);\n+        \n+        set.add(1, ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        \n+        set.add(0, ONE);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        \n+        List list = new ArrayList();\n+        list.add(ZERO);\n+        list.add(TWO);\n+        \n+        set.addAll(0, list);\n+        assertEquals(3, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(ONE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        \n+        list.add(0, THREE); // list = [3,0,2]\n+        set.remove(TWO);    //  set = [0,1]\n+        set.addAll(1, list);\n+        assertEquals(4, set.size());\n+        assertSame(ZERO, set.get(0));\n+        assertSame(THREE, set.get(1));\n+        assertSame(TWO, set.get(2));\n+        assertSame(ONE, set.get(3));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestPredicatedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestPredicatedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestSet;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+\n+/**\n+ * Extension of {@link TestSet} for exercising the \n+ * {@link PredicatedSet} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedSet extends AbstractTestSet{\n+    \n+    public TestPredicatedSet(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(TestPredicatedSet.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------\n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    protected Set decorateSet(Set set, Predicate predicate) {\n+        return PredicatedSet.decorate(set, predicate);\n+    }\n+    \n+    protected Set makeEmptySet() {\n+        return decorateSet(new HashSet(), truePredicate);\n+    }\n+    \n+    protected Object[] getFullElements() {\n+        return new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+    }\n+    \n+//--------------------------------------------------------------------   \n+    \n+    protected Predicate testPredicate =  \n+        new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return o instanceof String;\n+            }\n+        };      \n+    \n+    protected Set makeTestSet() {\n+        return decorateSet(new HashSet(), testPredicate);\n+    }\n+    \n+    public void testGetSet() {\n+         Set set = makeTestSet();\n+        assertTrue(\"returned set should not be null\",\n+            ((PredicatedSet) set).getSet() != null);\n+    }\n+    \n+    public void testIllegalAdd() {\n+        Set set = makeTestSet();\n+        Integer i = new Integer(3);\n+        try {\n+            set.add(i);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !set.contains(i));   \n+    }\n+\n+    public void testIllegalAddAll() {\n+        Set set = makeTestSet();\n+        Set elements = new HashSet();\n+        elements.add(\"one\");\n+        elements.add(\"two\");\n+        elements.add(new Integer(3));\n+        elements.add(\"four\");\n+        try {\n+            set.addAll(elements);\n+            fail(\"Integer should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"one\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"two\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(new Integer(3)));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"four\"));   \n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestPredicatedSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestPredicatedSortedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.AbstractTestSortedSet;\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.Predicate;\n+import org.apache.commons.collections.PredicateUtils;\n+import org.apache.commons.collections.map.TestPredicatedSortedMap;\n+\n+/**\n+ * Extension of {@link AbstractTestSortedSet} for exercising the \n+ * {@link PredicatedSortedSet} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestPredicatedSortedSet extends AbstractTestSortedSet{\n+    \n+    public TestPredicatedSortedSet(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestPredicatedSortedSet.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestPredicatedSortedMap.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------    \n+    \n+    protected Predicate truePredicate = PredicateUtils.truePredicate();\n+    \n+    public Set makeEmptySet() {\n+        return PredicatedSortedSet.decorate(new TreeSet(), truePredicate);\n+    }\n+    \n+    public Set makeFullSet() {\n+        TreeSet set = new TreeSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return PredicatedSortedSet.decorate(set, truePredicate);\n+    }\n+   \n+    \n+//--------------------------------------------------------------------   \n+    protected Predicate testPredicate =  \n+        new Predicate() {\n+            public boolean evaluate(Object o) {\n+                return (o instanceof String) && (((String) o).startsWith(\"A\"));\n+            }\n+        };      \n+     \n+    \n+    protected SortedSet makeTestSet() {\n+        return PredicatedSortedSet.decorate(new TreeSet(), testPredicate);\n+    }\n+    \n+    public void testGetSet() {\n+        SortedSet set = makeTestSet();\n+        assertTrue(\"returned set should not be null\",\n+            ((PredicatedSortedSet) set).getSet() != null);\n+    }\n+    \n+    public void testIllegalAdd() {\n+        SortedSet set = makeTestSet();\n+        String testString = \"B\";\n+        try {\n+            set.add(testString);\n+            fail(\"Should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't contain illegal element\", \n+         !set.contains(testString));   \n+    }\n+\n+    public void testIllegalAddAll() {\n+        SortedSet set = makeTestSet();\n+        Set elements = new TreeSet();\n+        elements.add(\"Aone\");\n+        elements.add(\"Atwo\");\n+        elements.add(\"Bthree\");\n+        elements.add(\"Afour\");\n+        try {\n+            set.addAll(elements);\n+            fail(\"Should fail string predicate.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"Aone\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"Atwo\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"Bthree\"));   \n+        assertTrue(\"Set shouldn't contain illegal element\", \n+         !set.contains(\"Afour\"));   \n+    }\n+    \n+    public void testComparator() {\n+        SortedSet set = makeTestSet();\n+        Comparator c = set.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", c == null);\n+    }\n+        \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTransformedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestSet;\n+import org.apache.commons.collections.collection.TestTransformedCollection;\n+\n+/**\n+ * Extension of {@link TestSet} for exercising the {@link TransformedSet}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformedSet extends AbstractTestSet {\n+    \n+    public TestTransformedSet(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestTransformedSet.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTransformedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    protected Collection makeConfirmedCollection() {\n+        return new HashSet();\n+    }\n+\n+    protected Collection makeConfirmedFullCollection() {\n+        Set set = new HashSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return set;\n+    }\n+    \n+    protected Set makeEmptySet() {\n+        return TransformedSet.decorate(new HashSet(), TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+\n+    protected Set makeFullSet() {\n+        Set list = new HashSet();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return TransformedSet.decorate(list, TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+    \n+    public void testTransformedSet() {\n+        Set set = TransformedSet.decorate(new HashSet(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, set.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            set.add(els[i]);\n+            assertEquals(i + 1, set.size());\n+            assertEquals(true, set.contains(new Integer((String) els[i])));\n+            assertEquals(false, set.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, set.remove(els[0]));\n+        assertEquals(true, set.remove(new Integer((String) els[0])));\n+        \n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.AbstractTestSortedSet;\n+import org.apache.commons.collections.BulkTest;\n+import org.apache.commons.collections.collection.TestTransformedCollection;\n+\n+/**\n+ * Extension of {@link TestSortedSet} for exercising the {@link TransformedSortedSet}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestTransformedSortedSet extends AbstractTestSortedSet {\n+    \n+    public TestTransformedSortedSet(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestTransformedSortedSet.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTransformedSortedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    protected Set makeEmptySet() {\n+        return TransformedSortedSet.decorate(new TreeSet(), TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+\n+    protected Set makeFullSet() {\n+        SortedSet set = new TreeSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return TransformedSortedSet.decorate(set, TestTransformedCollection.NOOP_TRANSFORMER);\n+    }\n+    \n+    //-----------------------------------------------------------------------   \n+    public void testTransformedSet() {\n+        Set set = TransformedSortedSet.decorate(new HashSet(), TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        assertEquals(0, set.size());\n+        Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n+        for (int i = 0; i < els.length; i++) {\n+            set.add(els[i]);\n+            assertEquals(i + 1, set.size());\n+            assertEquals(true, set.contains(new Integer((String) els[i])));\n+            assertEquals(false, set.contains(els[i]));\n+        }\n+        \n+        assertEquals(false, set.remove(els[0]));\n+        assertEquals(true, set.remove(new Integer((String) els[0])));\n+        \n+    } \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestTypedSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestTypedSortedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+\n+import org.apache.commons.collections.AbstractTestSortedSet;\n+import org.apache.commons.collections.BulkTest;\n+\n+\n+/**\n+ * Extension of {@link AbstractTestSortedSet} for exercising the \n+ * {@link TypedSortedSet} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestTypedSortedSet extends AbstractTestSortedSet{\n+    \n+    public TestTypedSortedSet(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestTypedSortedSet.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestTypedSortedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+ //-------------------------------------------------------------------      \n+    protected Class integerType = new Integer(0).getClass();\n+    \n+    public Set makeEmptySet() {\n+        return TypedSortedSet.decorate(new TreeSet(), integerType);\n+    }\n+    \n+    public Set makeFullSet() {\n+        TreeSet set = new TreeSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return TypedSortedSet.decorate(set, integerType);\n+    }\n+   \n+    \n+//--------------------------------------------------------------------            \n+    protected Long getNextAsLong() {\n+        SortedSet set = (SortedSet) makeFullSet();\n+        int nextValue = ((Integer)set.last()).intValue() + 1;\n+        return new Long(nextValue);\n+    }\n+    \n+    protected Integer getNextAsInt() {\n+        SortedSet set = (SortedSet) makeFullSet();\n+        int nextValue = ((Integer)set.last()).intValue() + 1;\n+        return new Integer(nextValue);\n+    }\n+           \n+    public void testIllegalAdd() {\n+        Set set = makeFullSet();\n+        try {\n+            set.add(getNextAsLong());\n+            fail(\"Should fail type test.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't convert long to int\", \n+         !set.contains(getNextAsInt()));   \n+    }\n+\n+    public void testIllegalAddAll() {\n+        Set set = makeFullSet();\n+        Set elements = new TreeSet();\n+        elements.add(getNextAsLong());\n+        try {\n+            set.addAll(elements);\n+            fail(\"Should fail type test.\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        assertTrue(\"Collection shouldn't convert long to int\", \n+         !set.contains(getNextAsInt()));  \n+    }       \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/set/TestUnmodifiableSortedSet.java,v 1.1 2003/11/16 00:05:46 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.set;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.AbstractTestSortedSet;\n+\n+/**\n+ * Extension of {@link AbstractTestSortedSet} for exercising the \n+ * {@link UnmodifiableSortedSet} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/16 00:05:46 $\n+ * \n+ * @author Phil Steitz\n+ */\n+public class TestUnmodifiableSortedSet extends AbstractTestSortedSet{\n+    \n+    public TestUnmodifiableSortedSet(String testName) {\n+        super(testName);\n+    }\n+    \n+    public static Test suite() {\n+        // Can't run bulk tests in AbstractTestSet -- subset tests modify set\n+        return new TestSuite(TestUnmodifiableSortedSet.class);\n+    }\n+    \n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestUnmodifiableSortedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+    \n+    //-------------------------------------------------------------------  \n+    public Set makeEmptySet() {\n+        return UnmodifiableSortedSet.decorate(new TreeSet());\n+    }\n+    \n+    public Set makeFullSet() {\n+        TreeSet set = new TreeSet();\n+        set.addAll(Arrays.asList(getFullElements()));\n+        return UnmodifiableSortedSet.decorate(set);\n+    }\n+    \n+    protected boolean isAddSupported() {\n+        return false;\n+    }\n+    \n+    protected boolean isRemoveSupported() {\n+        return false;\n+    }\n+           \n+    //--------------------------------------------------------------------\n+    protected UnmodifiableSortedSet set = null;\n+    protected ArrayList array = null;\n+    \n+    protected void setupSet() {\n+        set = (UnmodifiableSortedSet) makeFullSet();\n+        array = new ArrayList();\n+        array.add(new Integer(1));\n+    }\n+    \n+    /** \n+     * Verify that base set and subsets are not modifiable\n+     */\n+    public void testUnmodifiable() {\n+        setupSet();\n+        verifyUnmodifiable(set);\n+        verifyUnmodifiable(set.headSet(new Integer(1)));\n+        verifyUnmodifiable(set.tailSet(new Integer(1)));\n+        verifyUnmodifiable(set.subSet(new Integer(1), new Integer(3)));    \n+    }\n+    \n+    /**\n+     * Verifies that a set is not modifiable\n+     */\n+    public void verifyUnmodifiable(Set set) {\n+        try {\n+            set.add(\"value\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected  \n+        }\n+        try {\n+            set.addAll(new TreeSet());\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.clear();\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.remove(\"x\");\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.removeAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        try {\n+            set.retainAll(array);\n+            fail(\"Expecting UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+    \n+    public void testComparator() {\n+        setupSet();\n+        Comparator c = set.comparator();\n+        assertTrue(\"natural order, so comparator should be null\", c == null);\n+    }\n+}", "timestamp": 1068941148, "metainfo": ""}