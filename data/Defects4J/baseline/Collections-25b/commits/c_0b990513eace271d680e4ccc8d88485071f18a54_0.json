{"sha": "0b990513eace271d680e4ccc8d88485071f18a54", "log": "Update tests   ", "commit": "\n--- a/src/test/org/apache/commons/collections/AbstractTestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/AbstractTestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestBidiMap.java,v 1.7 2003/11/02 19:48:39 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestBidiMap.java,v 1.8 2003/11/08 18:46:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Abstract test class for {@link BidiMap} methods and contracts.\n  * \n- * @version $Revision: 1.7 $ $Date: 2003/11/02 19:48:39 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/08 18:46:57 $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n \n     //-----------------------------------------------------------------------\n     public void testBidiModifyEntrySet() {\n+        if (isSetValueSupported() == false) return;\n+        \n         modifyEntrySet(makeFullBidiMap());\n         modifyEntrySet(makeFullBidiMap().inverseBidiMap());\n     }\n         remove(makeFullBidiMap(), entries[0][0]);\n         remove(makeFullBidiMap().inverseBidiMap(), entries[0][1]);\n \n-        removeKey(makeFullBidiMap(), entries[0][1]);\n-        removeKey(makeFullBidiMap().inverseBidiMap(), entries[0][0]);\n+        removeValue(makeFullBidiMap(), entries[0][1]);\n+        removeValue(makeFullBidiMap().inverseBidiMap(), entries[0][0]);\n     }\n \n     private final void remove(BidiMap map, Object key) {\n         assertNull(\"Value was not removed.\", map.getKey(value));\n     }\n \n-    private final void removeKey(BidiMap map, Object value) {\n-        final Object key = map.removeKey(value);\n+    private final void removeValue(BidiMap map, Object value) {\n+        final Object key = map.removeValue(value);\n         assertTrue(\"Key was not removed.\", !map.containsKey(key));\n         assertNull(\"Value was not removed.\", map.getKey(value));\n     }\n             super(\"TestBidiMapIterator\");\n         }\n         \n-        protected Object addSetValue() {\n-            return AbstractTestBidiMap.this.getNewSampleValues()[0];\n+        protected Object[] addSetValues() {\n+            return AbstractTestBidiMap.this.getNewSampleValues();\n         }\n         \n         protected boolean supportsRemove() {\n             return AbstractTestBidiMap.this.map;\n         }\n         \n+        protected Map getConfirmedMap() {\n+            // assumes makeFullMapIterator() called first\n+            return AbstractTestBidiMap.this.confirmed;\n+        }\n+        \n         protected void verify() {\n             super.verify();\n-            AbstractTestBidiMap.this.verifyInverse();\n+            AbstractTestBidiMap.this.verify();\n         }\n     }\n     \n-    //-----------------------------------------------------------------------\n-    public void testBidiMapIteratorRemove() {\n-        resetFull();\n-        BidiMap bidi = (BidiMap) map;\n-        MapIterator it = bidi.mapIterator();\n-        assertEquals(true, it.hasNext());\n-        Object key = it.next();\n-        \n-        if (isRemoveSupported() == false) {\n-            try {\n-                it.remove();\n-                fail();\n-            } catch (UnsupportedOperationException ex) {\n-            }\n-            return;\n-        }\n-        \n-        it.remove();\n-        confirmed.remove(key);\n-        assertEquals(false, bidi.containsKey(key));\n-        verify();\n-        \n-        try {\n-            it.remove();  // second remove fails\n-        } catch (IllegalStateException ex) {\n-        }\n-        verify();\n-    }\n-\n     //-----------------------------------------------------------------------\n     public void testBidiMapIteratorSet() {\n         Object newValue1 = getOtherValues()[0];\n--- a/src/test/org/apache/commons/collections/TestFlat3Map.java\n+++ b/src/test/org/apache/commons/collections/TestFlat3Map.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestFlat3Map.java,v 1.1 2003/11/02 23:41:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestFlat3Map.java,v 1.2 2003/11/08 18:46:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * JUnit tests.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/11/02 23:41:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/08 18:46:57 $\n  * \n  * @author Stephen Colebourne\n  */\n             super(\"TestFlatMapIterator\");\n         }\n         \n-        protected Object addSetValue() {\n-            return TestFlat3Map.this.getNewSampleValues()[0];\n+        protected Object[] addSetValues() {\n+            return TestFlat3Map.this.getNewSampleValues();\n         }\n         \n         protected boolean supportsRemove() {\n             return TestFlat3Map.this.map;\n         }\n         \n+        protected Map getConfirmedMap() {\n+            // assumes makeFullMapIterator() called first\n+            return TestFlat3Map.this.confirmed;\n+        }\n+        \n         protected void verify() {\n             super.verify();\n-            // cannot cross verify as we don't know what superclass did\n+            TestFlat3Map.this.verify();\n         }\n     }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testMapIteratorRemove() {\n-        resetFull();\n-        Flat3Map testMap = (Flat3Map) map;\n-        MapIterator it = testMap.mapIterator();\n-        assertEquals(true, it.hasNext());\n-        Object key = it.next();\n-        \n-        if (isRemoveSupported() == false) {\n-            try {\n-                it.remove();\n-                fail();\n-            } catch (UnsupportedOperationException ex) {\n-            }\n-            return;\n-        }\n-        \n-        it.remove();\n-        confirmed.remove(key);\n-        assertEquals(false, testMap.containsKey(key));\n-        verify();\n-        \n-        try {\n-            it.remove();  // second remove fails\n-        } catch (IllegalStateException ex) {\n-        }\n-        verify();\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testMapIteratorSet() {\n-        Object newValue1 = getOtherValues()[0];\n-        Object newValue2 = getOtherValues()[1];\n-        \n-        resetFull();\n-        Flat3Map testMap = (Flat3Map) map;\n-        MapIterator it = testMap.mapIterator();\n-        assertEquals(true, it.hasNext());\n-        Object key1 = it.next();\n-        \n-        if (isSetValueSupported() == false) {\n-            try {\n-                it.setValue(newValue1);\n-                fail();\n-            } catch (UnsupportedOperationException ex) {\n-            }\n-            return;\n-        }\n-        \n-        it.setValue(newValue1);\n-        confirmed.put(key1, newValue1);\n-        assertSame(key1, it.getKey());\n-        assertSame(newValue1, it.getValue());\n-        assertEquals(true, testMap.containsKey(key1));\n-        assertEquals(true, testMap.containsValue(newValue1));\n-        assertEquals(newValue1, testMap.get(key1));\n-        verify();\n-        \n-        it.setValue(newValue1);  // same value - should be OK\n-        confirmed.put(key1, newValue1);\n-        assertSame(key1, it.getKey());\n-        assertSame(newValue1, it.getValue());\n-        assertEquals(true, testMap.containsKey(key1));\n-        assertEquals(true, testMap.containsValue(newValue1));\n-        assertEquals(newValue1, testMap.get(key1));\n-        verify();\n-        \n-        Object key2 = it.next();\n-        it.setValue(newValue2);\n-        confirmed.put(key2, newValue2);\n-        assertSame(key2, it.getKey());\n-        assertSame(newValue2, it.getValue());\n-        assertEquals(true, testMap.containsKey(key2));\n-        assertEquals(true, testMap.containsValue(newValue2));\n-        assertEquals(newValue2, testMap.get(key2));\n-        verify();\n-    }\n-\n }\n--- a/src/test/org/apache/commons/collections/TestIteratorUtils.java\n+++ b/src/test/org/apache/commons/collections/TestIteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.8 2003/11/02 15:27:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.9 2003/11/08 18:47:38 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.iterators.MapIterator;\n+import org.apache.commons.collections.iterators.OrderedMapIterator;\n import org.apache.commons.collections.iterators.ResetableIterator;\n import org.apache.commons.collections.iterators.ResetableListIterator;\n+import org.apache.commons.collections.iterators.ResetableMapIterator;\n+import org.apache.commons.collections.iterators.ResetableOrderedMapIterator;\n \n /**\n  * Tests for IteratorUtils.\n  * \n- * @version $Revision: 1.8 $ $Date: 2003/11/02 15:27:54 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/08 18:47:38 $\n  * \n  * @author Unknown\n  */\n      * Test empty iterator\n      */\n     public void testEmptyIterator() {\n+        assertTrue(IteratorUtils.EMPTY_ITERATOR instanceof Iterator);\n+        assertTrue(IteratorUtils.EMPTY_ITERATOR instanceof ResetableIterator);\n         assertEquals(false, IteratorUtils.EMPTY_ITERATOR.hasNext());\n         IteratorUtils.EMPTY_ITERATOR.reset();\n         assertSame(IteratorUtils.EMPTY_ITERATOR, IteratorUtils.EMPTY_ITERATOR);\n      * Test empty list iterator\n      */\n     public void testEmptyListIterator() {\n+        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof Iterator);\n+        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ListIterator);\n+        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResetableIterator);\n+        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResetableListIterator);\n         assertEquals(false, IteratorUtils.EMPTY_LIST_ITERATOR.hasNext());\n         assertEquals(0, IteratorUtils.EMPTY_LIST_ITERATOR.nextIndex());\n         assertEquals(-1, IteratorUtils.EMPTY_LIST_ITERATOR.previousIndex());\n      * Test empty map iterator\n      */\n     public void testEmptyMapIterator() {\n+        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof Iterator);\n+        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof MapIterator);\n+        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof ResetableIterator);\n+        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof ResetableMapIterator);\n         assertEquals(false, IteratorUtils.EMPTY_MAP_ITERATOR.hasNext());\n         IteratorUtils.EMPTY_MAP_ITERATOR.reset();\n         assertSame(IteratorUtils.EMPTY_MAP_ITERATOR, IteratorUtils.EMPTY_MAP_ITERATOR);\n             IteratorUtils.EMPTY_MAP_ITERATOR.setValue(null);\n             fail();\n         } catch (IllegalStateException ex) {}\n-        try {\n-            IteratorUtils.EMPTY_MAP_ITERATOR.asMapEntry();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test empty map iterator\n+     */\n+    public void testEmptyOrderedMapIterator() {\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof Iterator);\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof MapIterator);\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof OrderedMapIterator);\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResetableIterator);\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResetableMapIterator);\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResetableOrderedMapIterator);\n+        assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasNext());\n+        assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasPrevious());\n+        IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.reset();\n+        assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);\n+        assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR, IteratorUtils.emptyOrderedMapIterator());\n+        try {\n+            IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.previous();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.remove();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.getKey();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.getValue();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+        try {\n+            IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.setValue(null);\n             fail();\n         } catch (IllegalStateException ex) {}\n     }\n--- a/src/test/org/apache/commons/collections/decorators/TestOrderedMap.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestOrderedMap.java,v 1.3 2003/11/04 23:36:23 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestOrderedMap.java,v 1.4 2003/11/08 18:46:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/04 23:36:23 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/08 18:46:57 $\n  * \n  * @author Henri Yandell\n  * @author Stephen Colebourne\n         protected Map getMap() {\n             // assumes makeFullMapIterator() called first\n             return TestOrderedMap.this.map;\n+        }\n+        \n+        protected Map getConfirmedMap() {\n+            // assumes makeFullMapIterator() called first\n+            return TestOrderedMap.this.confirmed;\n+        }\n+        \n+        protected void verify() {\n+            super.verify();\n+            TestOrderedMap.this.verify();\n         }\n     }\n     \n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java,v 1.3 2003/11/02 19:47:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java,v 1.4 2003/11/08 18:46:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * overriding the supportsXxx() methods if necessary.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/11/02 19:47:10 $\n+ * @version $Revision: 1.4 $ $Date: 2003/11/08 18:46:57 $\n  * \n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n         // remove after next should be fine\n         it.next();\n         it.remove();\n-        verify();\n         \n         // should throw IllegalStateException for second remove()\n         try {\n             it.remove();\n             fail();\n         } catch (IllegalStateException ex) {}\n-        verify();\n     }\n     \n }\n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java,v 1.2 2003/11/02 19:47:10 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestMapIterator.java,v 1.3 2003/11/08 18:46:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Map;\n import java.util.NoSuchElementException;\n import java.util.Set;\n-import java.util.Map.Entry;\n \n /**\n  * Abstract class for testing the MapIterator interface.\n  * overriding the supportsXxx() methods if necessary.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/02 19:47:10 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/08 18:46:57 $\n  * \n  * @author Stephen Colebourne\n  */\n     protected abstract Map getMap();\n     \n     /**\n-     * Override if the map returned by getMap() is NOT the one tied to the iterator.\n-     * \n-     * @return true if the getMap() map is the one tied to the iterator\n-     */\n-    protected boolean supportsTiedMap() {\n-        return true;\n-    }\n-\n+     * Implement this method to return the confirmed map which contains the same\n+     * data as the iterator.\n+     * \n+     * @return a full map which can be updated\n+     */\n+    protected abstract Map getConfirmedMap();\n+    \n     /**\n      * Implements the abstract superclass method to return the list iterator.\n      * \n     }\n \n     /**\n-     * The value to be used in the add and set tests.\n-     * Default is null.\n-     */\n-    protected Object addSetValue() {\n-        return null;\n+     * The values to be used in the add and set tests.\n+     * Default is two strings.\n+     */\n+    protected Object[] addSetValues() {\n+        return new Object[] {\"A\", \"B\"};\n     }\n \n     //-----------------------------------------------------------------------\n             fail();\n         } catch (IllegalStateException ex) {}\n         \n-        // asMapEntry() should throw an IllegalStateException\n-        try {\n-            it.asMapEntry();\n-            fail();\n-        } catch (IllegalStateException ex) {}\n-        \n         if (supportsSetValue() == false) {\n             // setValue() should throw an UnsupportedOperationException/IllegalStateException\n             try {\n-                it.setValue(addSetValue());\n+                it.setValue(addSetValues()[0]);\n                 fail();\n             } catch (UnsupportedOperationException ex) {\n             } catch (IllegalStateException ex) {}\n         } else {\n             // setValue() should throw an IllegalStateException\n             try {\n-                it.setValue(addSetValue());\n+                it.setValue(addSetValues()[0]);\n                 fail();\n             } catch (IllegalStateException ex) {}\n         }\n         assertEquals(true, it.hasNext());\n         \n         assertEquals(true, it.hasNext());\n-        Map.Entry lastEntry = null;\n-        Object lastKey = null;\n-        Object lastValue = null;\n         Set set = new HashSet();\n         while (it.hasNext()) {\n             // getKey\n             assertSame(\"Value must be mapped to key\", map.get(key), value);\n             assertTrue(\"Value must be in map\",  map.containsValue(value));\n             assertSame(\"Value must be mapped to key\", map.get(key), value);\n-            \n-            // asMapEntry\n-            Map.Entry entry = it.asMapEntry();\n-            assertSame(\"MapEntry key must match\", key, entry.getKey());\n-            assertSame(\"MapEntry value must match\", value, entry.getValue());\n-            \n-            assertTrue(\"MapEntry must be independent\", entry != lastEntry);\n-            if (lastKey != null && lastValue != null) {\n-                assertSame(\"MapEntry must not change after next()\", lastKey, lastEntry.getKey());\n-                assertSame(\"MapEntry must not change after next()\", lastValue, lastEntry.getValue());\n-            }\n-            \n-            lastEntry = entry;\n-            lastKey = key;\n-            lastValue = value;\n+\n             verify();\n         }\n     }\n             return;\n         }\n \n-        Object newValue = addSetValue();\n+        Object newValue = addSetValues()[0];\n+        Object newValue2 = addSetValues()[1];\n         MapIterator it = makeFullMapIterator();\n         Map map = getMap();\n+        Map confirmed = getConfirmedMap();\n         assertEquals(true, it.hasNext());\n         Object key = it.next();\n         Object value = it.getValue();\n-        Entry entry = it.asMapEntry();\n         \n         if (supportsSetValue() == false) {\n             try {\n         }\n         \n         Object old = it.setValue(newValue);\n+        confirmed.put(key, newValue);\n         assertSame(\"Key must not change after setValue\", key, it.getKey());\n-        assertSame(\"Key must not change after setValue\", key, entry.getKey());\n         assertSame(\"Value must be changed after setValue\", newValue, it.getValue());\n-        assertSame(\"Value must be changed after setValue\", newValue, entry.getValue());\n         assertSame(\"setValue must return old value\", value, old);\n-        if (supportsTiedMap()) {\n-            assertTrue(\"Key must be in map\",  map.containsKey(key));\n-            assertTrue(\"Old value must not be in map\",  map.containsValue(value) == false);\n-            assertTrue(\"Value must be in map\",  map.containsValue(newValue));\n-            assertSame(\"Value must be mapped to key\", map.get(key), newValue);\n-        }\n         verify();\n         \n         it.setValue(newValue);  // same value - should be OK\n+        confirmed.put(key, newValue);\n         assertSame(\"Key must not change after setValue\", key, it.getKey());\n-        assertSame(\"Key must not change after setValue\", key, entry.getKey());\n         assertSame(\"Value must be changed after setValue\", newValue, it.getValue());\n-        assertSame(\"Value must be changed after setValue\", newValue, entry.getValue());\n-        if (supportsTiedMap()) {\n-            assertTrue(\"Key must be in map\",  map.containsKey(key));\n-            assertTrue(\"Old value must not be in map\",  map.containsValue(value) == false);\n-            assertTrue(\"Value must be in map\",  map.containsValue(newValue));\n-            assertSame(\"Value must be mapped to key\", map.get(key), newValue);\n-        }\n-        verify();\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testMapIteratorMapEntrySet() {\n-        if (supportsFullIterator() == false) {\n-            return;\n-        }\n-\n-        Object newValue = addSetValue();\n+        verify();\n+        \n+        it.setValue(newValue2);  // new value\n+        confirmed.put(key, newValue2);\n+        assertSame(\"Key must not change after setValue\", key, it.getKey());\n+        assertSame(\"Value must be changed after setValue\", newValue2, it.getValue());\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemove() { // override\n         MapIterator it = makeFullMapIterator();\n         Map map = getMap();\n+        Map confirmed = getConfirmedMap();\n         assertEquals(true, it.hasNext());\n         Object key = it.next();\n-        Object value = it.getValue();\n-        Entry entry = it.asMapEntry();\n-        \n-        if (supportsSetValue() == false) {\n+        \n+        if (supportsRemove() == false) {\n             try {\n-                entry.setValue(newValue);\n+                it.remove();\n                 fail();\n-            } catch (UnsupportedOperationException ex) {}\n-            return;\n-        }\n-        \n-        Object old = entry.setValue(newValue);\n-        assertSame(\"Key must not change after setValue\", key, it.getKey());\n-        assertSame(\"Key must not change after setValue\", key, entry.getKey());\n-        assertSame(\"Value must be changed after setValue\", newValue, it.getValue());\n-        assertSame(\"Value must be changed after setValue\", newValue, entry.getValue());\n-        assertSame(\"setValue must return old value\", value, old);\n-        if (supportsTiedMap()) {\n-            assertTrue(\"Key must be in map\",  map.containsKey(key));\n-            assertTrue(\"Old value must not be in map\",  map.containsValue(value) == false);\n-            assertTrue(\"Value must be in map\",  map.containsValue(newValue));\n-            assertSame(\"Value must be mapped to key\", map.get(key), newValue);\n-        }\n-        verify();\n-        \n-        entry.setValue(newValue);  // same value - should be OK\n-        assertSame(\"Key must not change after setValue\", key, it.getKey());\n-        assertSame(\"Key must not change after setValue\", key, entry.getKey());\n-        assertSame(\"Value must be changed after setValue\", newValue, it.getValue());\n-        assertSame(\"Value must be changed after setValue\", newValue, entry.getValue());\n-        if (supportsTiedMap()) {\n-            assertTrue(\"Key must be in map\",  map.containsKey(key));\n-            assertTrue(\"Old value must not be in map\",  map.containsValue(value) == false);\n-            assertTrue(\"Value must be in map\",  map.containsValue(newValue));\n-            assertSame(\"Value must be mapped to key\", map.get(key), newValue);\n-        }\n-        verify();\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testBidiMapIteratorSetRemoveSet() {\n+            } catch (UnsupportedOperationException ex) {\n+            }\n+            return;\n+        }\n+        \n+        it.remove();\n+        confirmed.remove(key);\n+        assertEquals(false, map.containsKey(key));\n+        verify();\n+        \n+        try {\n+            it.remove();  // second remove fails\n+        } catch (IllegalStateException ex) {\n+        }\n+        verify();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMapIteratorSetRemoveSet() {\n         if (supportsSetValue() == false || supportsRemove() == false) {\n             return;\n         }\n-        Object newValue = addSetValue();\n-        \n+        Object newValue = addSetValues()[0];\n         MapIterator it = makeFullMapIterator();\n         Map map = getMap();\n+        Map confirmed = getConfirmedMap();\n+        \n         assertEquals(true, it.hasNext());\n         Object key = it.next();\n         \n         it.setValue(newValue);\n         it.remove();\n+        confirmed.remove(key);\n         verify();\n         \n         try {\n--- a/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java,v 1.1 2003/11/02 18:29:59 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestUnmodifiableMapIterator.java,v 1.2 2003/11/08 18:46:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n package org.apache.commons.collections.iterators;\n \n+import java.util.HashMap;\n import java.util.Map;\n \n import junit.framework.Test;\n /**\n  * Tests the UnmodifiableMapIterator.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/11/02 18:29:59 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/08 18:46:57 $\n  * \n  * @author Stephen Colebourne\n  */\n         return testMap;\n     }\n \n+    protected Map getConfirmedMap() {\n+        Map testMap = new HashMap();\n+        testMap.put(\"A\", \"a\");\n+        testMap.put(\"B\", \"b\");\n+        testMap.put(\"C\", \"c\");\n+        return testMap;\n+    }\n \n     public boolean supportsRemove() {\n         return false;", "timestamp": 1068317258, "metainfo": ""}