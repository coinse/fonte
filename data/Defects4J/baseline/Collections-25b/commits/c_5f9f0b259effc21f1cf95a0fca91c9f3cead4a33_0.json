{"sha": "5f9f0b259effc21f1cf95a0fca91c9f3cead4a33", "log": "Add support for accessing primitive arrays in get(Object,int) and size(Object)   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n  */\n package org.apache.commons.collections;\n \n+import java.lang.reflect.Array;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Enumeration;\n  * Provides utility methods and decorators for {@link Collection} instances.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.59 $ $Date: 2004/04/01 20:12:00 $\n+ * @version $Revision: 1.60 $ $Date: 2004/04/01 22:43:13 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n      *      <code>index</code> in the map's <code>entrySet</code> iterator, \n      *      if there is such an entry.</li>\n      * <li> List -- this method is equivalent to the list's get method.</li>\n-     * <li> Object Array -- the <code>index</code>-th array entry is returned, \n-     *      if there is such an entry; otherwise an <code>ArrayIndexOutOfBoundsException</code>\n+     * <li> Array -- the <code>index</code>-th array entry is returned, \n+     *      if there is such an entry; otherwise an <code>IndexOutOfBoundsException</code>\n      *      is thrown.</li>\n      * <li> Collection -- the value returned is the <code>index</code>-th object \n      *      returned by the collection's default iterator, if there is such an element.</li>\n      * @param object  the object to get a value from\n      * @param index  the index to get\n      * @return the object at the specified index\n-     * @throws IndexOutOfBoundsException\n-     * @throws IllegalArgumentException\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     * @throws IllegalArgumentException if the object type is invalid\n      */\n     public static Object get(Object object, int index) {\n         if (index < 0) {\n             return ((List) object).get(index);\n         } else if (object instanceof Object[]) {\n             return ((Object[]) object)[index];\n+        } else if (object instanceof Iterator) {\n+            Iterator it = (Iterator) object;\n+            while (it.hasNext()) {\n+                index--;\n+                if (index == -1) {\n+                    return it.next();\n+                } else {\n+                    it.next();\n+                }\n+            }\n+            throw new IndexOutOfBoundsException(\"Entry does not exist: \" + index);\n+        } else if (object instanceof Collection) {\n+            Iterator iterator = ((Collection) object).iterator();\n+            return get(iterator, index);\n         } else if (object instanceof Enumeration) {\n             Enumeration it = (Enumeration) object;\n             while (it.hasMoreElements()) {\n                 }\n             }\n             throw new IndexOutOfBoundsException(\"Entry does not exist: \" + index);\n-        } else if (object instanceof Iterator) {\n-            Iterator it = (Iterator) object;\n-            while (it.hasNext()) {\n-                index--;\n-                if (index == -1) {\n-                    return it.next();\n-                } else {\n-                    it.next();\n-                }\n-            }\n-            throw new IndexOutOfBoundsException(\"Entry does not exist: \" + index);\n-        } else if (object instanceof Collection) {\n-            Iterator iterator = ((Collection) object).iterator();\n-            return get(iterator, index);\n+        } else if (object == null) {\n+            throw new IllegalArgumentException(\"Unsupported object type: null\");\n         } else {\n-            throw new IllegalArgumentException(\"Unsupported object type: \" +\n-                (object == null ? \"null\" : object.getClass().getName()));\n+            try {\n+                return Array.get(object, index);\n+            } catch (IllegalArgumentException ex) {\n+                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n+            }\n         }\n     }\n     \n      * <ul>\n      * <li>Collection - the collection size\n      * <li>Map - the map size\n-     * <li>Object array - the array size\n+     * <li>Array - the array size\n      * <li>Iterator - the number of elements remaining in the iterator\n      * <li>Enumeration - the number of elements remaining in the enumeration\n      * </ul>\n                 total++;\n                 it.nextElement();\n             }\n+        } else if (object == null) {\n+            throw new IllegalArgumentException(\"Unsupported object type: null\");\n         } else {\n-            throw new IllegalArgumentException(\"Unsupported object type: \" +\n-                (object == null ? \"null\" : object.getClass().getName()));\n+            try {\n+                total = Array.getLength(object);\n+            } catch (IllegalArgumentException ex) {\n+                throw new IllegalArgumentException(\"Unsupported object type: \" + object.getClass().getName());\n+            }\n         }\n         return total;\n     }\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.apache.commons.collections.bag.HashBag;\n+import org.apache.commons.collections.buffer.BoundedFifoBuffer;\n import org.apache.commons.collections.collection.AbstractTestCollection;\n import org.apache.commons.collections.collection.PredicatedCollection;\n import org.apache.commons.collections.collection.SynchronizedCollection;\n  * @author Phil Steitz\n  * @author Steven Melzer\n  * \n- * @version $Revision: 1.36 $ $Date: 2004/03/31 21:43:27 $\n+ * @version $Revision: 1.37 $ $Date: 2004/04/01 22:43:12 $\n  */\n public class TestCollectionUtils extends TestCase {\n     \n         }\n         \n         {\n+            // Primitive array, entry exists\n+            int[] array = new int[2];\n+            array[0] = 10;\n+            array[1] = 20;\n+            assertEquals(new Integer(10), CollectionUtils.get(array,0));\n+            assertEquals(new Integer(20), CollectionUtils.get(array,1));\n+        \n+            // Object array, non-existent entry -- ArrayIndexOutOfBoundsException\n+            try {\n+                CollectionUtils.get(array,2);\n+                fail(\"Expecting IndexOutOfBoundsException.\");\n+            } catch (IndexOutOfBoundsException ex) {\n+                // expected\n+            }\n+        }\n+        \n+        {\n             // Invalid object\n             Object obj = new Object();\n             try {\n             } catch (IllegalArgumentException e) {\n                 // expected\n             }\n+            try {\n+                CollectionUtils.get(null, 0);\n+                fail(\"Expecting IllegalArgumentException.\");\n+            } catch (IllegalArgumentException e) {\n+                // expected\n+            }\n         }\n     }\n \n         stringArray[2] = \"c\";\n         assertEquals(3, CollectionUtils.size(stringArray));\n     }\n+    public void testSize_PrimitiveArray() {\n+        int[] intArray = new int[0];\n+        assertEquals(0, CollectionUtils.size(intArray));\n+        \n+        double[] doubleArray = new double[3];\n+        assertEquals(3, CollectionUtils.size(doubleArray));\n+        doubleArray[0] = 0.0d;\n+        doubleArray[1] = 1.0d;\n+        doubleArray[2] = 2.5d;\n+        assertEquals(3, CollectionUtils.size(doubleArray));\n+    }\n     public void testSize_Enumeration() {\n         Vector list = new Vector();\n         assertEquals(0, CollectionUtils.size(list.elements()));\n         } catch (IllegalArgumentException e) {}\n         try {\n             CollectionUtils.size(\"not a list\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {}\n-        try {\n-            CollectionUtils.size(new int[0]);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {}\n     }", "timestamp": 1080859393, "metainfo": ""}