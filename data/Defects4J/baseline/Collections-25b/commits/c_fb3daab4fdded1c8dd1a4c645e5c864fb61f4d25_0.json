{"sha": "fb3daab4fdded1c8dd1a4c645e5c864fb61f4d25", "log": "Fix up generics and other warnings  ", "commit": "\n--- a/src/test/org/apache/commons/collections/BulkTest.java\n+++ b/src/test/org/apache/commons/collections/BulkTest.java\n     private static <T extends BulkTest> BulkTest makeTestCase(Class<T> c, Method m) {\n         Constructor<T> con = getTestCaseConstructor(c);\n         try {\n-            return (BulkTest) con.newInstance(new Object[] { m.getName() });\n+            return con.newInstance(new Object[] { m.getName() });\n         } catch (InvocationTargetException e) {\n             e.printStackTrace();\n             throw new RuntimeException(); // FIXME;\n--- a/src/test/org/apache/commons/collections/LocalTestNode.java\n+++ b/src/test/org/apache/commons/collections/LocalTestNode.java\n     /**\n      * Method compareTo\n      *\n-     * @param o\n+     * @param other\n      *\n      * @return a negative integer, zero, or a positive integer\n      *  as this object is less than, equal to, or greater than the specified object.\n      * @return true if equal\n      */\n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public boolean equals(Object o) {\n \n         if (o == null) {\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n      * Tests intersecting two lists in different orders.\n      */\n     public void testIntersectionOrderInsensitivity() {\n-\t\tList one = new ArrayList();\n-\t\tList two = new ArrayList();\n+\t\tList<String> one = new ArrayList<String>();\n+\t\tList<String> two = new ArrayList<String>();\n \t\tone.add(\"a\");\n \t\tone.add(\"b\");\n \t\ttwo.add(\"a\");\n      */\n     // TODO: Generics\n     public void testIndexOf() {\n-        Predicate testPredicate = PredicateUtils.equalPredicate(\"d\");\n+        Predicate<String> testPredicate = PredicateUtils.equalPredicate(\"d\");\n         int index = ListUtils.indexOf(fullList, testPredicate);\n         assertEquals(d, fullList.get(index));\n \n--- a/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n+++ b/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n         bag.add((T) \"B\");\n         bag.add((T) \"B\");\n         bag.add((T) \"C\");\n-        String[] array = (String[]) bag.toArray(new String[0]);\n+        String[] array = bag.toArray(new String[0]);\n         int a = 0, b = 0, c = 0;\n         for (int i = 0; i < array.length; i++) {\n             a += (array[i].equals(\"A\") ? 1 : 0);\n     }\n \n     //-----------------------------------------------------------------------\n-    @SuppressWarnings(\"unchecked\")\n     public void testEmptyBagSerialization() throws IOException, ClassNotFoundException {\n         Bag<T> bag = makeObject();\n         if (!(bag instanceof Serializable && isTestSerialization())) return;\n         \n         byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n-        Bag bag2 = (Bag) readExternalFormFromBytes(objekt);\n+        Bag<?> bag2 = (Bag<?>) readExternalFormFromBytes(objekt);\n \n         assertEquals(\"Bag should be empty\",0, bag.size());\n         assertEquals(\"Bag should be empty\",0, bag2.size());\n         if (!(bag instanceof Serializable && isTestSerialization())) return;\n         \n         byte[] objekt = writeExternalFormToBytes((Serializable) bag);\n-        Bag bag2 = (Bag) readExternalFormFromBytes(objekt);\n+        Bag<?> bag2 = (Bag<?>) readExternalFormFromBytes(objekt);\n \n         assertEquals(\"Bag should be same size\", size, bag.size());\n         assertEquals(\"Bag should be same size\", size, bag2.size());\n      * Compare the current serialized form of the Bag\n      * against the canonical version in SVN.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public void testEmptyBagCompatibility() throws IOException, ClassNotFoundException {\n         // test to make sure the canonical form has been preserved\n         Bag<T> bag = makeObject();\n         if (bag instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n-            Bag bag2 = (Bag) readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));\n+            Bag<?> bag2 = (Bag<?>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(bag));\n             assertTrue(\"Bag is empty\",bag2.size()  == 0);\n             assertEquals(bag, bag2);\n         }\n--- a/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java\n+++ b/src/test/org/apache/commons/collections/bag/TestTransformedSortedBag.java\n     }\n \n     public void testTransformedBag_decorateTransform() {\n-        Bag originalBag = new TreeBag();\n+        Bag<Object> originalBag = new TreeBag<Object>();\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n         for (int i = 0; i < els.length; i++) {\n             originalBag.add(els[i]);\n         }\n-        Bag bag = TransformedBag.decorateTransform(originalBag, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        Bag<?> bag = TransformedBag.decorateTransform(originalBag, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, bag.size());\n         for (int i = 0; i < els.length; i++) {\n             assertEquals(true, bag.contains(new Integer((String) els[i])));\n--- a/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n+++ b/src/test/org/apache/commons/collections/bidimap/AbstractTestSortedBidiMap.java\n package org.apache.commons.collections.bidimap;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n--- a/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap2.java\n+++ b/src/test/org/apache/commons/collections/bidimap/TestDualTreeBidiMap2.java\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n         assertTrue(bidi.comparator() instanceof ReverseComparator);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public void testSerializeDeserializeCheckComparator() throws Exception {\n-        SortedBidiMap obj = (SortedBidiMap) makeObject();\n+        SortedBidiMap<?, ?> obj = makeObject();\n         if (obj instanceof Serializable && isTestSerialization()) {\n             ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n             ObjectOutputStream out = new ObjectOutputStream(buffer);\n--- a/src/test/org/apache/commons/collections/list/AbstractTestList.java\n+++ b/src/test/org/apache/commons/collections/list/AbstractTestList.java\n \n         for (int i = 0; i <= max; i++) {\n             resetFull();\n-            ((List<E>) getCollection()).add(i, element);\n-            ((List<E>) getConfirmed()).add(i, element);\n+            getCollection().add(i, element);\n+            getConfirmed().add(i, element);\n             verify();\n         }\n     }\n \n         for (int i = 0; i < elements.length; i++) {\n             E n = other[i % other.length];\n-            E v = ((List<E>) getCollection()).set(i, n);\n+            E v = (getCollection()).set(i, n);\n             assertEquals(\"Set should return correct element\", elements[i], v);\n-            ((List<E>) getConfirmed()).set(i, n);\n+            (getConfirmed()).set(i, n);\n             verify();\n         }\n     }\n \n         resetFull();\n         try {\n-            ((List<E>) getCollection()).set(0, getFullElements()[0]);\n+            (getCollection()).set(0, getFullElements()[0]);\n             fail(\"Emtpy collection should not support set.\");\n         } catch (UnsupportedOperationException e) {\n             // expected\n         int max = getFullElements().length;\n         for (int i = 0; i < max; i++) {\n             resetFull();\n-            E o1 = ((List<E>) getCollection()).remove(i);\n-            E o2 = ((List<E>) getConfirmed()).remove(i);\n+            E o1 = (getCollection()).remove(i);\n+            E o2 = (getConfirmed()).remove(i);\n             assertEquals(\"remove should return correct element\", o1, o2);\n             verify();\n         }\n--- a/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n+++ b/src/test/org/apache/commons/collections/map/AbstractTestMap.java\n      * Compare the current serialized form of the Map\n      * against the canonical version in SVN.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public void testEmptyMapCompatibility() throws Exception {\n         /**\n          * Create canonical objects with this code\n         */\n \n         // test to make sure the canonical form has been preserved\n-        Map map = makeObject();\n+        Map<K, V> map = makeObject();\n         if (map instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n-            Map map2 = (Map) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n+            @SuppressWarnings(\"unchecked\")\n+            Map<K, V> map2 = (Map<K, V>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n             assertEquals(\"Map is empty\", 0, map2.size());\n         }\n     }\n      * Compare the current serialized form of the Map\n      * against the canonical version in SVN.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public void testFullMapCompatibility() throws Exception {\n         /**\n          * Create canonical objects with this code\n         */\n \n         // test to make sure the canonical form has been preserved\n-        Map map = makeFullMap();\n+        Map<K, V> map = makeFullMap();\n         if (map instanceof Serializable && !skipSerializedCanonicalTests() && isTestSerialization()) {\n-            Map map2 = (Map) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n+            @SuppressWarnings(\"unchecked\")\n+            Map<K, V> map2 = (Map<K, V>) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n             assertEquals(\"Map is the right size\", getSampleKeys().length, map2.size());\n         }\n     }\n--- a/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestCaseInsensitiveMap.java\n                 Locale.setDefault(locales[i]);\n                 for (int j = 0; j < data.length; j++) {\n                     assertTrue(\"Test data corrupt: \" + j, data[j][0].equalsIgnoreCase(data[j][1]));\n-                    CaseInsensitiveMap map = new CaseInsensitiveMap();\n+                    CaseInsensitiveMap<String, String> map = new CaseInsensitiveMap<String, String>();\n                     map.put(data[j][0], \"value\");\n                     assertEquals(Locale.getDefault() + \": \" + j, \"value\", map.get(data[j][1]));\n                 }\n--- a/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n+++ b/src/test/org/apache/commons/collections/map/TestFlat3Map.java\n         assertSame(TWO, cloned.get(TWENTY));\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     public void testSerialisation0() throws Exception {\n         Flat3Map<K, V> map = makeObject();\n         ByteArrayOutputStream bout = new ByteArrayOutputStream();\n         out.close();\n         ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n         ObjectInputStream in = new ObjectInputStream(bin);\n-        Flat3Map ser = (Flat3Map) in.readObject();\n+        Flat3Map<?, ?> ser = (Flat3Map<?, ?>) in.readObject();\n         in.close();\n         assertEquals(0, map.size());\n         assertEquals(0, ser.size());\n         out.close();\n         ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n         ObjectInputStream in = new ObjectInputStream(bin);\n-        Flat3Map ser = (Flat3Map) in.readObject();\n+        Flat3Map<?, ?> ser = (Flat3Map<?, ?>) in.readObject();\n         in.close();\n         assertEquals(2, map.size());\n         assertEquals(2, ser.size());\n         out.close();\n         ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n         ObjectInputStream in = new ObjectInputStream(bin);\n-        Flat3Map ser = (Flat3Map) in.readObject();\n+        Flat3Map<?, ?> ser = (Flat3Map<?, ?>) in.readObject();\n         in.close();\n         assertEquals(4, map.size());\n         assertEquals(4, ser.size());\n //    }\n \n     public void testCollections261() {\n-        Flat3Map m = new Flat3Map();\n+        Flat3Map<Integer, Integer> m = new Flat3Map<Integer, Integer>();\n         m.put( new Integer(1), new Integer(1) );\n         m.put( new Integer(0), new Integer(0) );\n         assertEquals( new Integer(1), m.remove( new Integer(1) ) ); \n--- a/src/test/org/apache/commons/collections/map/TestIdentityMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestIdentityMap.java\n      * Compare the current serialized form of the Map\n      * against the canonical version in SVN.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public void testEmptyMapCompatibility() throws IOException, ClassNotFoundException {\n         // test to make sure the canonical form has been preserved\n         Map<K, V> map = makeObject();\n         if (map instanceof Serializable && !skipSerializedCanonicalTests()) {\n-            Map map2 = (Map) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n+            @SuppressWarnings(\"unchecked\")\n+            Map<K, V> map2 = (Map<K, V>) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n             assertEquals(\"Map is empty\", 0, map2.size());\n         }\n     }\n--- a/src/test/org/apache/commons/collections/map/TestLRUMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestLRUMap.java\n \n     @SuppressWarnings(\"unchecked\")\n     public void testRemoveLRU() {\n-        MockLRUMapSubclass map = new MockLRUMapSubclass(2);\n+        MockLRUMapSubclass<K, String> map = new MockLRUMapSubclass<K, String>(2);\n         assertNull(map.entry);\n         map.put((K) \"A\", \"a\");\n         assertNull(map.entry);\n     // TODO: COLLECTIONS-330\n     public void todoTestSynchronizedRemoveFromMapIterator() throws InterruptedException {\n \n-        final LRUMap map = new LRUMap(10000);\n+        final LRUMap<Object, Thread> map = new LRUMap<Object, Thread>(10000);\n         \n-        final Map exceptions = new HashMap();\n+        final Map<Throwable, String> exceptions = new HashMap<Throwable, String>();\n         final ThreadGroup tg = new ThreadGroup(getName()) {\n             @Override\n             public void uncaughtException(Thread t, Throwable e) {\n                             }\n                         }\n                         synchronized (map) {\n-                            for (MapIterator iter = map.mapIterator(); iter.hasNext();) {\n+                            for (MapIterator<Object, Thread> iter = map.mapIterator(); iter.hasNext();) {\n                                 String name = (String)iter.next();\n                                 if (map.get(name) == this) {\n                                     iter.remove();\n     \n     public void testSynchronizedRemoveFromEntrySet() throws InterruptedException {\n \n-        final Map map = new LRUMap(10000);\n+        final Map<Object, Thread> map = new LRUMap<Object, Thread>(10000);\n         \n-        final Map exceptions = new HashMap();\n+        final Map<Throwable, String> exceptions = new HashMap<Throwable, String>();\n         final ThreadGroup tg = new ThreadGroup(getName()) {\n             @Override\n             public void uncaughtException(Thread t, Throwable e) {\n                             }\n                         }\n                         synchronized (map) {\n-                            for (Iterator iter = map.entrySet().iterator(); iter.hasNext();) {\n-                                Map.Entry entry = (Map.Entry)iter.next();\n+                            for (Iterator<Map.Entry<Object, Thread>> iter = map.entrySet().iterator(); iter.hasNext();) {\n+                                Map.Entry<Object, Thread> entry = iter.next();\n                                 if (entry.getValue() == this) {\n                                     iter.remove();\n                                 }\n     // TODO: COLLECTIONS-330\n     public void todoTestSynchronizedRemoveFromKeySet() throws InterruptedException {\n \n-        final Map map = new LRUMap(10000);\n+        final Map<Object, Thread> map = new LRUMap<Object, Thread>(10000);\n         \n-        final Map exceptions = new HashMap();\n+        final Map<Throwable, String> exceptions = new HashMap<Throwable, String>();\n         final ThreadGroup tg = new ThreadGroup(getName()) {\n             @Override\n             public void uncaughtException(Thread t, Throwable e) {\n                             }\n                         }\n                         synchronized (map) {\n-                            for (Iterator iter = map.keySet().iterator(); iter.hasNext();) {\n+                            for (Iterator<Object> iter = map.keySet().iterator(); iter.hasNext();) {\n                                 String name = (String)iter.next();\n                                 if (map.get(name) == this) {\n                                     iter.remove();\n     \n     public void testSynchronizedRemoveFromValues() throws InterruptedException {\n \n-        final Map map = new LRUMap(10000);\n+        final Map<Object, Thread> map = new LRUMap<Object, Thread>(10000);\n         \n-        final Map exceptions = new HashMap();\n+        final Map<Throwable, String> exceptions = new HashMap<Throwable, String>();\n         final ThreadGroup tg = new ThreadGroup(getName()) {\n             @Override\n             public void uncaughtException(Thread t, Throwable e) {\n                             }\n                         }\n                         synchronized (map) {\n-                            for (Iterator iter = map.values().iterator(); iter.hasNext();) {\n+                            for (Iterator<Thread> iter = map.values().iterator(); iter.hasNext();) {\n                                 if (iter.next() == this) {\n                                     iter.remove();\n                                 }\n--- a/src/test/org/apache/commons/collections/map/TestMultiKeyMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestMultiKeyMap.java\n     @SuppressWarnings(\"unchecked\")\n     private MultiKey<K>[] getMultiKeyKeys() {\n         return new MultiKey[] {\n-            new MultiKey(I1, I2),\n-            new MultiKey(I2, I3),\n-            new MultiKey(I3, I4),\n-            new MultiKey(I1, I1, I2),\n-            new MultiKey(I2, I3, I4),\n-            new MultiKey(I3, I7, I6),\n-            new MultiKey(I1, I1, I2, I3),\n-            new MultiKey(I2, I4, I5, I6),\n-            new MultiKey(I3, I6, I7, I8),\n-            new MultiKey(I1, I1, I2, I3, I4),\n-            new MultiKey(I2, I3, I4, I5, I6),\n-            new MultiKey(I3, I5, I6, I7, I8),\n+            new MultiKey<Integer>(I1, I2),\n+            new MultiKey<Integer>(I2, I3),\n+            new MultiKey<Integer>(I3, I4),\n+            new MultiKey<Integer>(I1, I1, I2),\n+            new MultiKey<Integer>(I2, I3, I4),\n+            new MultiKey<Integer>(I3, I7, I6),\n+            new MultiKey<Integer>(I1, I1, I2, I3),\n+            new MultiKey<Integer>(I2, I4, I5, I6),\n+            new MultiKey<Integer>(I3, I6, I7, I8),\n+            new MultiKey<Integer>(I1, I1, I2, I3, I4),\n+            new MultiKey<Integer>(I2, I3, I4, I5, I6),\n+            new MultiKey<Integer>(I3, I5, I6, I7, I8),\n         };\n     }\n \n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public MultiKey<K>[] getOtherKeys() {\n-        return (MultiKey<K>[]) new MultiKey[] {\n-            new MultiKey(I1, I7),\n-            new MultiKey(I1, I8),\n-            new MultiKey(I2, I4),\n-            new MultiKey(I2, I5),\n+        return new MultiKey[] {\n+            new MultiKey<Integer>(I1, I7),\n+            new MultiKey<Integer>(I1, I8),\n+            new MultiKey<Integer>(I2, I4),\n+            new MultiKey<Integer>(I2, I5),\n         };\n     }\n \n--- a/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedMap.java\n         assertEquals(new Integer(66), array[0].getValue());\n         assertEquals(new Integer(66), map.get(array[0].getKey()));\n \n-        Map.Entry entry = (Map.Entry) entrySet.iterator().next();\n+        Map.Entry entry = entrySet.iterator().next();\n         entry.setValue(\"88\");\n         assertEquals(new Integer(88), entry.getValue());\n         assertEquals(new Integer(88), map.get(entry.getKey()));\n--- a/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java\n+++ b/src/test/org/apache/commons/collections/map/TestTransformedSortedMap.java\n         assertEquals(new Integer((String) els[0]), map.remove(els[0]));\n \n         Set<Map.Entry<K, V>> entrySet = map.entrySet();\n-        Map.Entry<K, V>[] array = (Map.Entry<K, V>[]) entrySet.toArray(new Map.Entry[0]);\n+        Map.Entry<K, V>[] array = entrySet.toArray(new Map.Entry[0]);\n         array[0].setValue((V) \"66\");\n         assertEquals(new Integer(66), array[0].getValue());\n         assertEquals(new Integer(66), map.get(array[0].getKey()));\n--- a/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/AbstractTestSortedSet.java\n  * To use, subclass and override the {@link #makeEmptySet()}\n  * method.  You may have to override other protected methods if your\n  * set is not modifiable, or if your set restricts what kinds of\n- * elements may be added; see {@link AbstractTestCollection} for more details.\n+ * elements may be added; see {@link AbstractTestSet} for more details.\n  *\n  * @since Commons Collections 3.0\n  * @version $Revision$ $Date$\n--- a/src/test/org/apache/commons/collections/set/EmptySetMutator.java\n+++ b/src/test/org/apache/commons/collections/set/EmptySetMutator.java\n  * class also has to be serialized. \n  */\n class EmptySetMutator<E> implements CompositeSet.SetMutator<E> {\n-    private Set contained;\n+    private Set<E> contained;\n \n-    public EmptySetMutator(Set set) {\n+    public EmptySetMutator(Set<E> set) {\n         this.contained = set;\n     }\n \n--- a/src/test/org/apache/commons/collections/set/TestCompositeSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestCompositeSet.java\n     public CompositeSet<E> makeObject() {\n         final HashSet<E> contained = new HashSet<E>();\n         CompositeSet<E> set = new CompositeSet<E>(contained);\n-        set.setMutator( new EmptySetMutator(contained) );\n+        set.setMutator( new EmptySetMutator<E>(contained) );\n         return set;\n     }\n \n--- a/src/test/org/apache/commons/collections/set/TestTransformedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSet.java\n     }\n \n     public void testTransformedSet_decorateTransform() {\n-        Set originalSet = new HashSet();\n+        Set<Object> originalSet = new HashSet<Object>();\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n         for (int i = 0; i < els.length; i++) {\n             originalSet.add(els[i]);\n         }\n-        Set set = TransformedSet.decorateTransform(originalSet, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        Set<?> set = TransformedSet.decorateTransform(originalSet, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, set.size());\n         for (int i = 0; i < els.length; i++) {\n             assertEquals(true, set.contains(new Integer((String) els[i])));\n--- a/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java\n+++ b/src/test/org/apache/commons/collections/set/TestTransformedSortedSet.java\n     }\n \n     public void testTransformedSet_decorateTransform() {\n-        Set originalSet = new TreeSet();\n+        Set<Object> originalSet = new TreeSet<Object>();\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n         for (int i = 0; i < els.length; i++) {\n             originalSet.add(els[i]);\n         }\n-        Set set = TransformedSortedSet.decorateTransform(originalSet, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n+        Set<?> set = TransformedSortedSet.decorateTransform(originalSet, TestTransformedCollection.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, set.size());\n         for (int i = 0; i < els.length; i++) {\n             assertEquals(true, set.contains(new Integer((String) els[i])));\n--- a/src/test/org/apache/commons/collections/splitmap/TestTransformedMap.java\n+++ b/src/test/org/apache/commons/collections/splitmap/TestTransformedMap.java\n     private Transformer<Integer, String> intToString = new Transformer<Integer, String>() {\n         public String transform(Integer input) {\n             return String.valueOf(input);\n-        };\n+        }\n     };\n \n     private Transformer<Object, Class<?>> objectToClass = new Transformer<Object, Class<?>>() {\n     }\n \n     // -----------------------------------------------------------------------\n-    @SuppressWarnings(\"unchecked\")\n     public void testTransformedMap() {\n         TransformedMap<Integer, String, Object, Class<?>> map = TransformedMap.decorate(\n                 new HashMap<String, Class<?>>(), intToString, objectToClass);\n \n         Integer[] k = new Integer[] { 0, 1, 2, 3, 4, 5, 6 };\n-        Object[] v = new Object[] { \"\", new Object(), new HashMap(), 0, BigInteger.TEN, null,\n+        Object[] v = new Object[] { \"\", new Object(), new HashMap<Object, Object>(), 0, BigInteger.TEN, null,\n                 new Object[0] };\n \n         assertEquals(0, map.size());", "timestamp": 1279739177, "metainfo": ""}