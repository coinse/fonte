{"sha": "e57282bd9cdde1c4f707dbe111459b4f8e370bde", "log": "Add collating, zipping, reversing methods to FluentIterable, add ZippingIterator.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/FluentIterable.java\n+++ b/src/main/java/org/apache/commons/collections4/FluentIterable.java\n \n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Comparator;\n import java.util.Enumeration;\n import java.util.Iterator;\n import java.util.List;\n     }\n \n     /**\n+     * Returns a new FluentIterable whose iterator will traverse the\n+     * elements of the current and provided iterable in natural order.\n+     * <p>\n+     * Example: natural ordering\n+     * <ul>\n+     *   <li>this contains elements [1, 3, 5, 7]\n+     *   <li>other contains elements [2, 4, 6, 8]\n+     * </ul>\n+     * <p>\n+     * The returned iterable will traverse the elements in the following\n+     * order: [1, 2, 3, 4, 5, 6, 7, 8]\n+     * <p>\n+     * A <code>null</code> iterable will be treated as an empty iterable.\n+     *\n+     * @param other  the other iterable to collate, may be null\n+     * @return a new iterable, collating this iterable with the other in natural order\n+     * @see {@link org.apache.commons.collections4.iterators.CollatingIterator CollatingIterator}\n+     */\n+    public FluentIterable<E> collate(final Iterable<E> other) {\n+        return of(IterableUtils.collatedIterable(iterable, other, null));\n+    }\n+\n+    /**\n+     * Returns a new FluentIterable whose iterator will traverse the\n+     * elements of the current and provided iterable according to the\n+     * ordering defined by an comparator.\n+     * <p>\n+     * Example: descending order\n+     * <ul>\n+     *   <li>this contains elements [7, 5, 3, 1]\n+     *   <li>other contains elements [8, 6, 4, 2]\n+     * </ul>\n+     * <p>\n+     * The returned iterable will traverse the elements in the following\n+     * order: [8, 7, 6, 5, 4, 3, 2, 1]\n+     * <p>\n+     * A <code>null</code> iterable will be treated as an empty iterable.\n+     *\n+     * @param other  the other iterable to collate, may be null\n+     * @param comparator  the comparator to define an ordering, may be null,\n+     *   in which case natural ordering will be used\n+     * @return a new iterable, collating this iterable with the other in natural order\n+     * @see {@link org.apache.commons.collections4.iterators.CollatingIterator CollatingIterator}\n+     */\n+    public FluentIterable<E> collate(final Iterable<E> other, Comparator<? super E> comparator) {\n+        return of(IterableUtils.collatedIterable(iterable, other, comparator));\n+    }\n+\n+    /**\n      * This method fully traverses an iterator of this iterable and returns\n      * a new iterable with the same contents, but without any reference\n      * to the originating iterables and/or iterators.\n     }\n \n     /**\n+     * Returns a new FluentIterable whose iterator will traverse the\n+     * elements from this iterable in reverse order.\n+     *\n+     * @return a new iterable, providing a reversed view of this iterable\n+     */\n+    public FluentIterable<E> reverse() {\n+        return of(IterableUtils.reversedIterable(iterable));\n+    }\n+\n+    /**\n      * Returns a new FluentIterable whose iterator will skip the first\n      * N elements from this iterable.\n      *\n     public FluentIterable<E> unique() {\n         return of(IterableUtils.uniqueIterable(iterable));\n     }\n-    \n+\n+    /**\n+     * Returns a new FluentIterable whose iterator will traverse\n+     * the elements of this iterable and the provided elements in\n+     * alternating order.\n+     *\n+     * @param elements  the elements to interleave\n+     * @return a new iterable, interleaving this iterable with the elements\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public FluentIterable<E> zip(final E... elements) {\n+        return zip(Arrays.asList(elements));\n+    }\n+\n+    /**\n+     * Returns a new FluentIterable whose iterator will traverse\n+     * the elements of this iterable and the other iterable in\n+     * alternating order.\n+     *\n+     * @param other  the other iterable to interleave\n+     * @return a new iterable, interleaving this iterable with others\n+     */\n+    public FluentIterable<E> zip(final Iterable<E>... others) {\n+        @SuppressWarnings(\"unchecked\")\n+        Iterable<E>[] iterables = new Iterable[1 + others.length];\n+        iterables[0] = iterable;\n+        System.arraycopy(others, 0, iterables, 1, others.length);\n+        return of(IterableUtils.zippingIterable(iterables));\n+    }\n+\n     // convenience methods\n     // ----------------------------------------------------------------------\n \n     }\n \n     /**\n-     * Returns a list containing all elements of this iterable by traversing\n-     * its iterator.\n-     * <p>\n-     * The returned list is mutable.\n+     * Returns a list containing all elements of this iterable by\n+     * traversing its iterator.\n+     * <p>\n+     * The returned list is guaranteed to be mutable.\n      *\n      * @return a list of the iterable contents\n      */\n--- a/src/main/java/org/apache/commons/collections4/IterableUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/IterableUtils.java\n package org.apache.commons.collections4;\n \n import java.util.Collection;\n+import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n \n import org.apache.commons.collections4.iterators.LazyIteratorChain;\n+import org.apache.commons.collections4.iterators.ReverseListIterator;\n import org.apache.commons.collections4.iterators.UniqueFilterIterator;\n+import org.apache.commons.collections4.iterators.ZippingIterator;\n \n /**\n  * Provides utility methods and decorators for {@link Iterable} instances.\n         };\n     }\n \n+    // Collated\n+    // ----------------------------------------------------------------------\n+\n+    /**\n+     * Combines the two provided iterables into an ordered iterable using the\n+     * provided comparator. If the comparator is null, natural ordering will be\n+     * used.\n+     * <p>\n+     * The returned iterable's iterator supports {@code remove()} when the corresponding\n+     * input iterator supports it.\n+     *\n+     * @param <E>  the element type\n+     * @param a  the first iterable, may be null\n+     * @param b  the second iterable, may be null\n+     * @param comparator  the comparator defining an ordering over the elements,\n+     *   may be null, in which case natural ordering will be used\n+     * @return a filtered view on the specified iterable\n+     */\n+    public static <E> Iterable<E> collatedIterable(final Iterable<E> a,\n+                                                   final Iterable<E> b,\n+                                                   final Comparator<? super E> comparator) {\n+        return new FluentIterable<E>() {\n+            @Override\n+            public Iterator<E> iterator() {\n+                return IteratorUtils.collatedIterator(comparator,\n+                                                      emptyIteratorIfNull(a),\n+                                                      emptyIteratorIfNull(b));\n+            }\n+        };\n+    }\n+\n     // Filtered\n     // ----------------------------------------------------------------------\n \n      * @return a filtered view on the specified iterable\n      * @throws NullPointerException if predicate is null\n      */\n-    public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable, final Predicate<? super E> predicate) {\n+    public static <E> Iterable<E> filteredIterable(final Iterable<E> iterable,\n+                                                   final Predicate<? super E> predicate) {\n         if (predicate == null) {\n             throw new NullPointerException(\"predicate must not be null.\");\n         }\n         };\n     }\n \n+    // Reversed\n+    // ----------------------------------------------------------------------\n+\n+    /**\n+     * Returns a reversed view of the given iterable.\n+     * <p>\n+     * In case the provided iterable is a {@link List} instance, a \n+     * {@link ReverseListIterator} will be used to reverse the traversal\n+     * order, otherwise an intermediate {@link List} needs to be\n+     * created.\n+     * <p>\n+     * The returned iterable's iterator supports {@code remove()} if the\n+     * provided iterable is a {@link List} instance.\n+     *\n+     * @param <E>  the element type\n+     * @param iterable  the iterable to use, may be null\n+     * @return a reversed view of the specified iterable\n+     * @see ReverseListIterator\n+     */\n+    public static <E> Iterable<E> reversedIterable(final Iterable<E> iterable) {\n+        return new FluentIterable<E>() {\n+            @Override\n+            public Iterator<E> iterator() {\n+                final List<E> list = (iterable instanceof List<?>) ?\n+                        (List<E>) iterable :\n+                        IteratorUtils.toList(emptyIteratorIfNull(iterable));\n+\n+                return new ReverseListIterator<E>(list);\n+            }\n+        };\n+    }\n+\n     // Skipping\n     // ----------------------------------------------------------------------\n \n      * @return a transformed view of the specified iterable\n      * @throws NullPointerException if transformer is null\n      */\n-    public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable, final Transformer<? super I, ? extends O> transformer) {\n+    public static <I, O> Iterable<O> transformedIterable(final Iterable<I> iterable,\n+                                                         final Transformer<? super I, ? extends O> transformer) {\n         if (transformer == null) {\n             throw new NullPointerException(\"transformer must not be null.\");\n         }\n             @Override\n             public Iterator<E> iterator() {\n                 return new UniqueFilterIterator<E>(emptyIteratorIfNull(iterable));\n+            }            \n+        };\n+    }\n+\n+    // Zipping\n+    // ----------------------------------------------------------------------\n+\n+    /**\n+     * Interleaves two iterables into a single iterable.\n+     * <p>\n+     * The returned iterable has an iterator that traverses the elements in {@code a}\n+     * and {@code b} in alternating order. The source iterators are not polled until\n+     * necessary.\n+     * <p>\n+     * The returned iterable's iterator supports {@code remove()} when the corresponding\n+     * input iterator supports it.\n+     *\n+     * @param <E>  the element type\n+     * @param a  the first iterable\n+     * @param b  the second iterable\n+     * @return a new iterable, interleaving the provided iterables\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <E> Iterable<E> zippingIterable(final Iterable<E> a, final Iterable<E> b) {\n+        return zippingIterable(new Iterable[] {a, b});\n+    }\n+\n+    /**\n+     * Interleaves two iterables into a single iterable.\n+     * <p>\n+     * The returned iterable has an iterator that traverses the elements in {@code a}\n+     * and {@code b} in alternating order. The source iterators are not polled until\n+     * necessary.\n+     * <p>\n+     * The returned iterable's iterator supports {@code remove()} when the corresponding\n+     * input iterator supports it.\n+     *\n+     * @param <E>  the element type\n+     * @param a  the first iterable\n+     * @param b  the second iterable\n+     * @return a new iterable, interleaving the provided iterables\n+     */\n+    public static <E> Iterable<E> zippingIterable(final Iterable<E>... iterables) {\n+        return new FluentIterable<E>() {\n+            @Override\n+            public Iterator<E> iterator() {\n+                @SuppressWarnings(\"unchecked\")\n+                Iterator<E>[] iterators = new Iterator[iterables.length];\n+                for (int i = 0; i < iterables.length; i++) {\n+                    iterators[i] = emptyIteratorIfNull(iterables[i]);\n+                }\n+                return new ZippingIterator<E>(iterators);\n             }            \n         };\n     }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections4.iterators;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import org.apache.commons.collections4.FluentIterable;\n+\n+/**\n+ * Provides an interleaved iteration over the elements contained in a\n+ * collection of Iterators.\n+ * <p>\n+ * Given two {@link Iterator} instances <code>A</code> and\n+ * <code>B</code>, the {@link #next} method on this iterator will\n+ * alternate between <code>A.next()</code> and <code>B.next()</code>.\n+ *\n+ * @since 4.1\n+ * @version $Id$\n+ */\n+public class ZippingIterator<E> implements Iterator<E> {\n+\n+    /** The {@link Iterator}s to evaluate. */\n+    private final Iterator<Iterator<? extends E>> iterators;\n+    /** The next iterator to use for next(). */\n+    private Iterator<? extends E> nextIterator = null;\n+    /** The last iterator which was used for next(). */\n+    private Iterator<? extends E> lastReturned = null;\n+\n+    // Constructors\n+    // ----------------------------------------------------------------------\n+\n+    /**\n+     * Constructs a new <code>ZippingIterator</code> that will provide\n+     * interleaved iteration over the two given iterators.\n+     *\n+     * @param a the first child iterator\n+     * @param b the second child iterator\n+     * @throws NullPointerException if either iterator is null\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public ZippingIterator(final Iterator<? extends E> a, final Iterator<? extends E> b) {\n+        this(new Iterator[] {a, b});\n+    }\n+\n+    /**\n+     * Constructs a new <code>ZippingIterator</code> that will use the\n+     * specified comparator to provide ordered iteration over the array of\n+     * iterators.\n+     *\n+     * @param iterators the array of iterators\n+     * @throws NullPointerException if iterators array is or contains null\n+     */\n+    public ZippingIterator(final Iterator<? extends E>... iterators) {\n+        // create a mutable list\n+        final List<Iterator<? extends E>> list = new ArrayList<Iterator<? extends E>>();\n+        for (Iterator<? extends E> iterator : iterators) {\n+            if (iterator == null) {\n+                throw new NullPointerException(\"Iterator must not be null\");\n+            }\n+            list.add(iterator);\n+        }\n+        this.iterators = FluentIterable.of(list).loop().iterator();\n+    }\n+\n+    // Iterator Methods\n+    // -------------------------------------------------------------------\n+\n+    /**\n+     * Returns <code>true</code> if any child iterator has remaining elements.\n+     *\n+     * @return true if this iterator has remaining elements\n+     */\n+    public boolean hasNext() {\n+        // the next iterator has already been determined\n+        // this might happen if hasNext() was called multiple\n+        if (nextIterator != null) {\n+            return true;\n+        }\n+\n+        while(iterators.hasNext()) {\n+            final Iterator<? extends E> iterator = iterators.next();\n+            if (iterator.hasNext()) {\n+                nextIterator = iterator;\n+                return true;\n+            } else {\n+                // iterator is exhausted, remove it\n+                iterators.remove();\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns the next element from a child iterator.\n+     *\n+     * @return the next interleaved element\n+     * @throws NoSuchElementException if no child iterator has any more elements\n+     */\n+    public E next() throws NoSuchElementException {\n+        if (!hasNext()) {\n+            throw new NoSuchElementException();\n+        }\n+\n+        final E val = nextIterator.next();\n+        lastReturned = nextIterator;\n+        nextIterator = null;\n+        return val;\n+    }\n+\n+    /**\n+     * Removes the last returned element from the child iterator that produced it.\n+     *\n+     * @throws IllegalStateException if there is no last returned element, or if\n+     *   the last returned element has already been removed\n+     */\n+    public void remove() {\n+        if (lastReturned == null) {\n+            throw new IllegalStateException(\"No value can be removed at present\");\n+        }\n+        lastReturned.remove();\n+        lastReturned = null;\n+    }\n+\n+}", "timestamp": 1432761499, "metainfo": ""}