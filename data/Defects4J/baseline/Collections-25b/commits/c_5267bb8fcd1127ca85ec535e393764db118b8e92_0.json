{"sha": "5267bb8fcd1127ca85ec535e393764db118b8e92", "log": "Add javadoc about requiring Comparable entries bug 26470 from Jeff Skubick   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n import org.apache.commons.collections.keyvalue.UnmodifiableMapEntry;\n \n /**\n- * Red-Black tree-based implementation of BidiMap.\n+ * Red-Black tree-based implementation of BidiMap where all objects added\n+ * implement the <code>Comparable</code> interface.\n  * <p>\n  * This class guarantees that the map will be in both ascending key order\n  * and ascending value order, sorted according to the natural order for\n  * UnsupportedOperationException on attempts to call that method.\n  *\n  * @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0)\n- * @version $Revision: 1.9 $ $Date: 2004/01/14 21:43:16 $\n+ * @version $Revision: 1.10 $ $Date: 2004/01/29 21:13:05 $\n  * \n  * @author Marc Johnson\n  * @author Stephen Colebourne\n \n     /**\n      * Checks whether this map contains the a mapping for the specified key.\n+     * <p>\n+     * The key must implement <code>Comparable</code>.\n      *\n      * @param key  key whose presence in this map is to be tested\n      * @return true if this map contains a mapping for the specified key\n \n     /**\n      * Checks whether this map contains the a mapping for the specified value.\n+     * <p>\n+     * The value must implement <code>Comparable</code>.\n      *\n      * @param value  value whose presence in this map is to be tested\n      * @return true if this map contains a mapping for the specified value\n     /**\n      * Gets the value to which this map maps the specified key.\n      * Returns null if the map contains no mapping for this key.\n+     * <p>\n+     * The key must implement <code>Comparable</code>.\n      *\n      * @param key  key whose associated value is to be returned\n      * @return the value to which this map maps the specified key,\n      *  map.put(\"A\",\"B\");  // contains A mapped to B, as per Map\n      *  map.put(\"C\",\"B\");  // contains C mapped to B, key A is removed\n      * </pre>\n+     * <p>\n+     * Both key and value must implement <code>Comparable</code>.\n      *\n      * @param key  key with which the specified value is to be  associated\n      * @param value  value to be associated with the specified key\n \n     /**\n      * Puts all the mappings from the specified map into this map.\n+     * <p>\n+     * All keys and values must implement <code>Comparable</code>.\n      * \n      * @param map  the map to copy from\n      */\n         \n     /**\n      * Removes the mapping for this key from this map if present.\n+     * <p>\n+     * The key must implement <code>Comparable</code>.\n      *\n      * @param key  key whose mapping is to be removed from the map.\n      * @return previous value associated with specified key,\n     /**\n      * Returns the key to which this map maps the specified value.\n      * Returns null if the map contains no mapping for this value.\n+     * <p>\n+     * The value must implement <code>Comparable</code>.\n      *\n      * @param value  value whose associated key is to be returned.\n      * @return the key to which this map maps the specified value,\n \n     /**\n      * Removes the mapping for this value from this map if present\n+     * <p>\n+     * The value must implement <code>Comparable</code>.\n      *\n      * @param value  value whose mapping is to be removed from the map\n      * @return previous key associated with specified value,\n     \n     /**\n      * Gets the next key after the one specified.\n+     * <p>\n+     * The key must implement <code>Comparable</code>.\n      *\n      * @param key the key to search for next from\n      * @return the next key, null if no match or at end\n \n     /**\n      * Gets the previous key before the one specified.\n+     * <p>\n+     * The key must implement <code>Comparable</code>.\n      *\n      * @param key the key to search for previous from\n      * @return the previous key, null if no match or at start", "timestamp": 1075410785, "metainfo": ""}