{"sha": "1a3337262c7bff09eae06e3b4247f6c7133f8fee", "log": "Simplify.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/PredicateUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/PredicateUtils.java\n      *\n      * @param <T>  the type that the predicate queries\n      * @return the predicate\n-     * @see org.apache.commons.collections4.functors.ExceptionPredicate\n+     * @see ExceptionPredicate\n      */\n     public static <T> Predicate<T> exceptionPredicate() {\n-        return ExceptionPredicate.<T>exceptionPredicate();\n+        return ExceptionPredicate.exceptionPredicate();\n     }\n \n     /**\n      *\n      * @param <T>  the type that the predicate queries\n      * @return the predicate\n-     * @see org.apache.commons.collections4.functors.TruePredicate\n+     * @see TruePredicate\n      */\n     public static <T> Predicate<T> truePredicate() {\n         return TruePredicate.truePredicate();\n      *\n      * @param <T>  the type that the predicate queries\n      * @return the predicate\n-     * @see org.apache.commons.collections4.functors.FalsePredicate\n+     * @see FalsePredicate\n      */\n     public static <T> Predicate<T> falsePredicate() {\n-        return FalsePredicate.<T> falsePredicate();\n+        return FalsePredicate.falsePredicate();\n     }\n \n     /**\n      *\n      * @param <T>  the type that the predicate queries\n      * @return the predicate\n-     * @see org.apache.commons.collections4.functors.NullPredicate\n+     * @see NullPredicate\n      */\n     public static <T> Predicate<T> nullPredicate() {\n         return NullPredicate.nullPredicate();\n      *\n      * @param <T>  the type that the predicate queries\n      * @return the predicate\n-     * @see org.apache.commons.collections4.functors.NotNullPredicate\n+     * @see NotNullPredicate\n      */\n     public static <T> Predicate<T> notNullPredicate() {\n-        return NotNullPredicate.<T>notNullPredicate();\n+        return NotNullPredicate.notNullPredicate();\n     }\n \n     /**\n      * @param <T>  the type that the predicate queries\n      * @param value  the value to compare against\n      * @return the predicate\n-     * @see org.apache.commons.collections4.functors.EqualPredicate\n+     * @see EqualPredicate\n      */\n     public static <T> Predicate<T> equalPredicate(final T value) {\n         return EqualPredicate.equalPredicate(value);\n      * @param <T>  the type that the predicate queries\n      * @param value  the value to compare against\n      * @return the predicate\n-     * @see org.apache.commons.collections4.functors.IdentityPredicate\n+     * @see IdentityPredicate\n      */\n     public static <T> Predicate<T> identityPredicate(final T value) {\n-        return IdentityPredicate.<T>identityPredicate(value);\n+        return IdentityPredicate.identityPredicate(value);\n     }\n \n     /**\n      * @param type  the type to check for, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the class is null\n-     * @see org.apache.commons.collections4.functors.InstanceofPredicate\n+     * @see InstanceofPredicate\n      */\n     public static Predicate<Object> instanceofPredicate(final Class<?> type) {\n         return InstanceofPredicate.instanceOfPredicate(type);\n      *\n      * @param <T>  the type that the predicate queries\n      * @return the predicate\n-     * @see org.apache.commons.collections4.functors.UniquePredicate\n+     * @see UniquePredicate\n      */\n     public static <T> Predicate<T> uniquePredicate() {\n         // must return new instance each time\n-        return UniquePredicate.<T>uniquePredicate();\n+        return UniquePredicate.uniquePredicate();\n     }\n \n     /**\n      * @param methodName  the method name to call on the input object, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the methodName is null.\n-     * @see org.apache.commons.collections4.functors.InvokerTransformer\n-     * @see org.apache.commons.collections4.functors.TransformerPredicate\n+     * @see InvokerTransformer\n+     * @see TransformerPredicate\n      */\n     public static <T> Predicate<T> invokerPredicate(final String methodName) {\n         // reuse transformer as it has caching - this is lazy really, should have inner class here\n      * @return the predicate\n      * @throws IllegalArgumentException if the method name is null\n      * @throws IllegalArgumentException if the paramTypes and args don't match\n-     * @see org.apache.commons.collections4.functors.InvokerTransformer\n-     * @see org.apache.commons.collections4.functors.TransformerPredicate\n+     * @see InvokerTransformer\n+     * @see TransformerPredicate\n      */\n     public static <T> Predicate<T> invokerPredicate(final String methodName, final Class<?>[] paramTypes,\n                                                     final Object[] args) {\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>and</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n-     * @see org.apache.commons.collections4.functors.AndPredicate\n+     * @see AndPredicate\n      */\n     public static <T> Predicate<T> andPredicate(final Predicate<? super T> predicate1,\n                                                 final Predicate<? super T> predicate2) {\n-        return AndPredicate.<T>andPredicate(predicate1, predicate2);\n+        return AndPredicate.andPredicate(predicate1, predicate2);\n     }\n \n     /**\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n-     * @see org.apache.commons.collections4.functors.AllPredicate\n+     * @see AllPredicate\n      */\n     public static <T> Predicate<T> allPredicate(final Predicate<? super T>... predicates) {\n         return AllPredicate.allPredicate(predicates);\n      * @return the <code>all</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n-     * @see org.apache.commons.collections4.functors.AllPredicate\n+     * @see AllPredicate\n      */\n     public static <T> Predicate<T> allPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         return AllPredicate.allPredicate(predicates);\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>or</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n-     * @see org.apache.commons.collections4.functors.OrPredicate\n+     * @see OrPredicate\n      */\n     public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1,\n                                                final Predicate<? super T> predicate2) {\n-        return OrPredicate.<T>orPredicate(predicate1, predicate2);\n+        return OrPredicate.orPredicate(predicate1, predicate2);\n     }\n \n     /**\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n-     * @see org.apache.commons.collections4.functors.AnyPredicate\n+     * @see AnyPredicate\n      */\n     public static <T> Predicate<T> anyPredicate(final Predicate<? super T>... predicates) {\n         return AnyPredicate.anyPredicate(predicates);\n      * @return the <code>any</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n-     * @see org.apache.commons.collections4.functors.AnyPredicate\n+     * @see AnyPredicate\n      */\n     public static <T> Predicate<T> anyPredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         return AnyPredicate.anyPredicate(predicates);\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>either</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n-     * @see org.apache.commons.collections4.functors.OnePredicate\n+     * @see OnePredicate\n      */\n     public static <T> Predicate<T> eitherPredicate(final Predicate<? super T> predicate1,\n                                                    final Predicate<? super T> predicate2) {\n         @SuppressWarnings(\"unchecked\")\n-        final Predicate<T> onePredicate = PredicateUtils.<T>onePredicate(predicate1, predicate2);\n+        final Predicate<T> onePredicate = PredicateUtils.onePredicate(predicate1, predicate2);\n         return onePredicate;\n     }\n \n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n-     * @see org.apache.commons.collections4.functors.OnePredicate\n+     * @see OnePredicate\n      */\n     public static <T> Predicate<T> onePredicate(final Predicate<? super T>... predicates) {\n         return OnePredicate.onePredicate(predicates);\n      * @return the <code>one</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n-     * @see org.apache.commons.collections4.functors.OnePredicate\n+     * @see OnePredicate\n      */\n     public static <T> Predicate<T> onePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         return OnePredicate.onePredicate(predicates);\n      * @param predicate2  the second predicate, may not be null\n      * @return the <code>neither</code> predicate\n      * @throws IllegalArgumentException if either predicate is null\n-     * @see org.apache.commons.collections4.functors.NonePredicate\n+     * @see NonePredicate\n      */\n     public static <T> Predicate<T> neitherPredicate(final Predicate<? super T> predicate1,\n                                                     final Predicate<? super T> predicate2) {\n         @SuppressWarnings(\"unchecked\")\n-        final Predicate<T> nonePredicate = PredicateUtils.<T>nonePredicate(predicate1, predicate2);\n+        final Predicate<T> nonePredicate = PredicateUtils.nonePredicate(predicate1, predicate2);\n         return nonePredicate;\n     }\n \n      * @return the <code>none</code> predicate\n      * @throws IllegalArgumentException if the predicates array is null\n      * @throws IllegalArgumentException if any predicate in the array is null\n-     * @see org.apache.commons.collections4.functors.NonePredicate\n+     * @see NonePredicate\n      */\n     public static <T> Predicate<T> nonePredicate(final Predicate<? super T>... predicates) {\n         return NonePredicate.nonePredicate(predicates);\n      * @return the <code>none</code> predicate\n      * @throws IllegalArgumentException if the predicates collection is null\n      * @throws IllegalArgumentException if any predicate in the collection is null\n-     * @see org.apache.commons.collections4.functors.NonePredicate\n+     * @see NonePredicate\n      */\n     public static <T> Predicate<T> nonePredicate(final Collection<? extends Predicate<? super T>> predicates) {\n         return NonePredicate.nonePredicate(predicates);\n      * @param predicate  the predicate to not\n      * @return the <code>not</code> predicate\n      * @throws IllegalArgumentException if the predicate is null\n-     * @see org.apache.commons.collections4.functors.NotPredicate\n+     * @see NotPredicate\n      */\n     public static <T> Predicate<T> notPredicate(final Predicate<? super T> predicate) {\n         return NotPredicate.notPredicate(predicate);\n      * @param transformer  the transformer to wrap, may not be null\n      * @return the transformer wrapping predicate\n      * @throws IllegalArgumentException if the transformer is null\n-     * @see org.apache.commons.collections4.functors.TransformerPredicate\n+     * @see TransformerPredicate\n      */\n     public static <T> Predicate<T> asPredicate(final Transformer<? super T, Boolean> transformer) {\n         return TransformerPredicate.transformerPredicate(transformer);\n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null.\n-     * @see org.apache.commons.collections4.functors.NullIsExceptionPredicate\n+     * @see NullIsExceptionPredicate\n      */\n     public static <T> Predicate<T> nullIsExceptionPredicate(final Predicate<? super T> predicate){\n         return NullIsExceptionPredicate.nullIsExceptionPredicate(predicate);\n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null.\n-     * @see org.apache.commons.collections4.functors.NullIsFalsePredicate\n+     * @see NullIsFalsePredicate\n      */\n     public static <T> Predicate<T> nullIsFalsePredicate(final Predicate<? super T> predicate){\n         return NullIsFalsePredicate.nullIsFalsePredicate(predicate);\n      * @param predicate  the predicate to wrap, may not be null\n      * @return the predicate\n      * @throws IllegalArgumentException if the predicate is null.\n-     * @see org.apache.commons.collections4.functors.NullIsTruePredicate\n+     * @see NullIsTruePredicate\n      */\n     public static <T> Predicate<T> nullIsTruePredicate(final Predicate<? super T> predicate){\n         return NullIsTruePredicate.nullIsTruePredicate(predicate);\n      * @param predicate  the predicate to call with the result of the transform\n      * @return the predicate\n      * @throws IllegalArgumentException if the transformer or the predicate is null\n-     * @see org.apache.commons.collections4.functors.TransformedPredicate\n+     * @see TransformedPredicate\n      * @since 3.1\n      */\n     public static <T> Predicate<T> transformedPredicate(\n             final Transformer<? super T, ? extends T> transformer, final Predicate<? super T> predicate) {\n-        return TransformedPredicate.<T>transformedPredicate(transformer, predicate);\n+        return TransformedPredicate.transformedPredicate(transformer, predicate);\n     }\n \n }", "timestamp": 1432888746, "metainfo": ""}