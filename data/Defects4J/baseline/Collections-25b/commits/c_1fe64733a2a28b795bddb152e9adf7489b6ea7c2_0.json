{"sha": "1fe64733a2a28b795bddb152e9adf7489b6ea7c2", "log": "[COLLECTIONS-466] Replaced Collection with Iterable in MapUtils.populateMap methods.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/MapUtils.java\n     }\n \n     /**\n-     * Populates a Map using the supplied <code>Transformer</code> to transform the collection\n-     * values into keys, using the unaltered collection value as the value in the <code>Map</code>.\n+     * Populates a Map using the supplied <code>Transformer</code> to transform the elements\n+     * into keys, using the unaltered element as the value in the <code>Map</code>.\n      *\n      * @param <K>  the key type\n      * @param <V>  the value type\n      * @param map the <code>Map</code> to populate.\n-     * @param collection the <code>Collection</code> to use as input values for the map.\n-     * @param keyTransformer the <code>Transformer</code> used to transform the collection value into a key value\n-     * @throws NullPointerException if the map, collection or transformer are null\n-     */\n-    public static <K, V> void populateMap(final Map<K, V> map, final Collection<? extends V> collection,\n+     * @param elements the <code>Iterable</code> containing the input values for the map.\n+     * @param keyTransformer the <code>Transformer</code> used to transform the element into a key value\n+     * @throws NullPointerException if the map, elements or transformer are null\n+     */\n+    public static <K, V> void populateMap(final Map<K, V> map, final Iterable<? extends V> elements,\n                                           final Transformer<V, K> keyTransformer) {\n-        populateMap(map, collection, keyTransformer, TransformerUtils.<V>nopTransformer());\n-    }\n-\n-    /**\n-     * Populates a Map using the supplied <code>Transformer</code>s to transform the collection\n-     * values into keys and values.\n-     *\n-     * @param <K>  the key type\n-     * @param <V>  the value type\n-     * @param <E>  the type of object contained in the {@link Collection}\n+        populateMap(map, elements, keyTransformer, TransformerUtils.<V>nopTransformer());\n+    }\n+\n+    /**\n+     * Populates a Map using the supplied <code>Transformer</code>s to transform the elements\n+     * into keys and values.\n+     *\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param <E>  the type of object contained in the {@link Iterable}\n      * @param map the <code>Map</code> to populate.\n-     * @param collection the <code>Collection</code> to use as input values for the map.\n-     * @param keyTransformer the <code>Transformer</code> used to transform the collection value into a key value\n-     * @param valueTransformer the <code>Transformer</code> used to transform the collection value into a value\n-     * @throws NullPointerException if the map, collection or transformers are null\n-     */\n-    public static <K, V, E> void populateMap(final Map<K, V> map, final Collection<? extends E> collection,\n+     * @param elements the <code>Iterable</code> containing the input values for the map.\n+     * @param keyTransformer the <code>Transformer</code> used to transform the element into a key value\n+     * @param valueTransformer the <code>Transformer</code> used to transform the element into a value\n+     * @throws NullPointerException if the map, elements or transformers are null\n+     */\n+    public static <K, V, E> void populateMap(final Map<K, V> map, final Iterable<? extends E> elements,\n                                              final Transformer<E, K> keyTransformer,\n                                              final Transformer<E, V> valueTransformer) {\n-        final Iterator<? extends E> iter = collection.iterator();\n+        final Iterator<? extends E> iter = elements.iterator();\n         while (iter.hasNext()) {\n             final E temp = iter.next();\n             map.put(keyTransformer.transform(temp), valueTransformer.transform(temp));\n     }\n \n     /**\n-     * Populates a MultiMap using the supplied <code>Transformer</code> to transform the collection\n-     * values into keys, using the unaltered collection value as the value in the <code>MultiMap</code>.\n+     * Populates a MultiMap using the supplied <code>Transformer</code> to transform the elements\n+     * into keys, using the unaltered element as the value in the <code>MultiMap</code>.\n      *\n      * @param <K>  the key type\n      * @param <V>  the value type\n      * @param map the <code>MultiMap</code> to populate.\n-     * @param collection the <code>Collection</code> to use as input values for the map.\n-     * @param keyTransformer the <code>Transformer</code> used to transform the collection value into a key value\n-     * @throws NullPointerException if the map, collection or transformer are null\n-     */\n-    public static <K, V> void populateMap(final MultiMap<K, V> map, final Collection<? extends V> collection,\n+     * @param elements the <code>Iterable</code> to use as input values for the map.\n+     * @param keyTransformer the <code>Transformer</code> used to transform the element into a key value\n+     * @throws NullPointerException if the map, elements or transformer are null\n+     */\n+    public static <K, V> void populateMap(final MultiMap<K, V> map, final Iterable<? extends V> elements,\n                                           final Transformer<V, K> keyTransformer) {\n-        populateMap(map, collection, keyTransformer, TransformerUtils.<V>nopTransformer());\n-    }\n-\n-    /**\n-     * Populates a MultiMap using the supplied <code>Transformer</code>s to transform the collection\n-     * values into keys and values.\n-     *\n-     * @param <K>  the key type\n-     * @param <V>  the value type\n-     * @param <E>  the type of object contained in the {@link Collection}\n+        populateMap(map, elements, keyTransformer, TransformerUtils.<V>nopTransformer());\n+    }\n+\n+    /**\n+     * Populates a MultiMap using the supplied <code>Transformer</code>s to transform the elements\n+     * into keys and values.\n+     *\n+     * @param <K>  the key type\n+     * @param <V>  the value type\n+     * @param <E>  the type of object contained in the {@link Iterable}\n      * @param map the <code>MultiMap</code> to populate.\n-     * @param collection the <code>Collection</code> to use as input values for the map.\n-     * @param keyTransformer the <code>Transformer</code> used to transform the collection value into a key value\n-     * @param valueTransformer the <code>Transformer</code> used to transform the collection value into a value\n+     * @param elements the <code>Iterable</code> containing the input values for the map.\n+     * @param keyTransformer the <code>Transformer</code> used to transform the element into a key value\n+     * @param valueTransformer the <code>Transformer</code> used to transform the element into a value\n      * @throws NullPointerException if the map, collection or transformers are null\n      */\n-    public static <K, V, E> void populateMap(final MultiMap<K, V> map, final Collection<? extends E> collection,\n+    public static <K, V, E> void populateMap(final MultiMap<K, V> map, final Iterable<? extends E> elements,\n                                              final Transformer<E, K> keyTransformer,\n                                              final Transformer<E, V> valueTransformer) {\n-        final Iterator<? extends E> iter = collection.iterator();\n+        final Iterator<? extends E> iter = elements.iterator();\n         while (iter.hasNext()) {\n             final E temp = iter.next();\n             map.put(keyTransformer.transform(temp), valueTransformer.transform(temp));", "timestamp": 1368012920, "metainfo": ""}