{"sha": "d7f1ac38d086461d150f2d10174a8afef2215219", "log": "add FloatArrayList and test   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/FloatArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/FloatArrayList.java,v 1.1 2002/06/04 16:50:09 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:50:09 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:50:09 $\n+ * @author Rodney Waldhoff \n+ */\n+public class FloatArrayList extends AbstractList implements List, Serializable {\n+\n+    //------------------------------------------------------------ Constructors\n+    \n+    public FloatArrayList() {\n+        this(8);\n+    }\n+\n+    public FloatArrayList(int capacity) {\n+        _data = new float[capacity];\n+    }\n+\n+    //--------------------------------------------------------------- Accessors\n+    \n+    public int capacity() {\n+        return _data.length;\n+    }\n+\n+    public int size() {\n+        return _size;\n+    }\n+\n+    public Object get(int index) {\n+        checkRange(index);\n+        return new Float(_data[index]);\n+    }\n+\n+    public float getFloat(int index) {\n+        checkRange(index);\n+        return _data[index];\n+    }\n+\n+    public boolean containsFloat(float value) {\n+        return (-1 != indexOfFloat(value));\n+    }\n+\n+    public int indexOfFloat(float value) {\n+        for(int i=0;i<_size;i++) {\n+            if(value == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    public int lastIndexOfFloat(float value) {\n+        for(int i=_size-1;i>=0;i--) {\n+            if(value == _data[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    //--------------------------------------------------------------- Modifiers\n+    \n+    public float setFloat(int index, float value) {\n+        checkRange(index);\n+        float old = _data[index];\n+        _data[index] = value;\n+        return old;\n+    }\n+\n+    public boolean addFloat(float value) {\n+        ensureCapacity(_size+1);\n+        _data[_size++] = value;\n+        return true;\n+    }\n+\n+    public void addFloat(int index, float value) {\n+        checkRangeIncludingEndpoint(index);\n+        ensureCapacity(_size+1);\n+        int numtomove = _size-index;\n+        System.arraycopy(_data,index,_data,index+1,numtomove);\n+        _data[index] = value;\n+        _size++;\n+    }\n+\n+    public void add(int index, Object value) {\n+        addFloat(index,((Float)value).floatValue());\n+    }\n+\n+    public void clear() {\n+        modCount++;\n+        _size = 0;\n+    }\n+\n+    public float removeFloatAt(int index) {\n+        checkRange(index);\n+        modCount++;\n+        float oldval = _data[index];\n+        int numtomove = _size - index - 1;\n+        if(numtomove > 0) {\n+            System.arraycopy(_data,index+1,_data,index,numtomove);\n+        }\n+        _size--;\n+        return oldval;\n+    }\n+\n+    public boolean removeFloat(float value) {\n+        int index = indexOfFloat(value);\n+        if(-1 == index) {\n+            return false;\n+        } else {\n+            removeFloatAt(index);\n+            return true;\n+        }\n+    }\n+\n+    public void ensureCapacity(int mincap) {\n+        modCount++;\n+        if(mincap > _data.length) {\n+            int newcap = (_data.length * 3)/2 + 1;\n+            float[] olddata = _data;\n+            _data = new float[newcap < mincap ? mincap : newcap];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    public void trimToSize() {\n+        modCount++;\n+        if(_size < _data.length) {\n+            float[] olddata = _data;\n+            _data = new float[_size];\n+            System.arraycopy(olddata,0,_data,0,_size);\n+        }\n+    }\n+\n+    //---------------------------------------------------------------\n+\n+    private void writeObject(ObjectOutputStream out) throws IOException{\n+        out.defaultWriteObject();\n+        out.writeInt(_data.length);\n+        for(int i=0;i<_size;i++) {\n+            out.writeFloat(_data[i]);\n+        }\n+    }\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        _data = new float[in.readInt()];\n+        for(int i=0;i<_size;i++) {\n+            _data[i] = in.readFloat();\n+        }\n+    }\n+    \n+    private final void checkRange(int index) {\n+        if(index < 0 || index >= _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and less than \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private final void checkRangeIncludingEndpoint(int index) {\n+        if(index < 0 || index > _size) {\n+            throw new IndexOutOfBoundsException(\"Should be at least 0 and at most \" + _size + \", found \" + index);\n+        }\n+    }\n+\n+    private transient float[] _data = null;\n+    private int _size = 0;\n+}\n--- a/src/test/org/apache/commons/collections/primitives/TestAll.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.1 2002/06/04 16:01:28 rwaldhoff Exp $\n- * $Revision: 1.1 $\n- * $Date: 2002/06/04 16:01:28 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAll.java,v 1.2 2002/06/04 16:50:09 rwaldhoff Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/06/04 16:50:09 $\n  *\n  * ====================================================================\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2002/06/04 16:01:28 $\n+ * @version $Revision: 1.2 $ $Date: 2002/06/04 16:50:09 $\n  * @author Rodney Waldhoff\n  */\n public class TestAll extends TestCase {\n         suite.addTest(TestIntArrayList.suite());\n         suite.addTest(TestUnsignedIntArrayList.suite());\n         suite.addTest(TestLongArrayList.suite());\n+        suite.addTest(TestFloatArrayList.suite());\n         return suite;\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/primitives/TestFloatArrayList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestFloatArrayList.java,v 1.1 2002/06/04 16:50:09 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/04 16:50:09 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import org.apache.commons.collections.TestList;\n+import java.util.List;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/06/04 16:50:09 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestFloatArrayList extends /* TestList */ TestCase {\n+\n+    //------------------------------------------------------------ Conventional\n+\n+    public TestFloatArrayList(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(TestFloatArrayList.class);\n+        return suite;\n+    }\n+\n+    //--------------------------------------------------------------- Protected\n+\n+    protected FloatArrayList createList() {\n+        return new FloatArrayList();\n+    }\n+\n+    //------------------------------------------------------ TestList interface\n+\n+    public List makeEmptyList() {\n+        return createList();\n+    }\n+\n+    //------------------------------------------------------------------- Tests\n+\n+    public void testAddGet() {\n+        FloatArrayList list = createList();\n+        for(float i=0F;i<1000F;i++) {\n+            list.addFloat(i);\n+        }\n+        for(int i=0;i<1000;i++) {\n+            assertEquals((float)i,list.getFloat(i),Float.MAX_VALUE);\n+        }\n+    }\n+}\n+", "timestamp": 1023209409, "metainfo": ""}