{"sha": "cfb9865f41626ae2ee3ec512af0b27611a627bfc", "log": "Removed bad line-endings (multiple ^Ms).  Thanks to Christopher Elkins. see: http://www.mail-archive.com/commons-dev@jakarta.apache.org/msg04102.html   ", "commit": "\n--- a/src/java/org/apache/commons/collections/AbstractBag.java\n+++ b/src/java/org/apache/commons/collections/AbstractBag.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractBag.java,v 1.4 2002/02/22 04:58:17 mas Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/02/22 04:58:17 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-\n-package org.apache.commons.collections;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.ConcurrentModificationException;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.NoSuchElementException;\n-import java.util.Set;\n-\n-/**\n- * This class provides a skeletal implementation of the {@link Bag}\n- * interface to minimize the effort required for target implementations.\n- * Subclasses need only to call {@link #setMap(Map)} in their constructor \n- * specifying a map instance that will be used to store the contents of \n- * the bag. \n- *\n- * @author Chuck Burdick\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractBag.java,v 1.5 2002/03/13 05:40:30 mas Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/03/13 05:40:30 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+\n+/**\n+ * This class provides a skeletal implementation of the {@link Bag}\n+ * interface to minimize the effort required for target implementations.\n+ * Subclasses need only to call {@link #setMap(Map)} in their constructor \n+ * specifying a map instance that will be used to store the contents of \n+ * the bag. \n+ *\n+ * @author Chuck Burdick\n  * @author <a href=\"mas@apache.org\">Michael A. Smith</a>\n- **/\n-public abstract class AbstractBag implements Bag {\n-   private Map _map = null;\n-   private int _total = 0;\n-   private int _mods = 0;\n-\n-   public boolean add(Object o) {\n-      return add(o, 1);\n-   }\n-\n-   public boolean add(Object o, int i) {\n-      _mods++;\n-      if (i > 0) {\n-         int count = (i + getCount(o));\n-         _map.put(o, new Integer(count));\n-         _total += i;\n-         return (count == i);\n-      } else {\n-         return false;\n-      }\n-   }\n-\n-   public boolean addAll(Collection c) {\n-      boolean changed = false;\n-      Iterator i = c.iterator();\n-      while (i.hasNext()) {\n-         boolean added = add(i.next());\n-         changed = changed || added;\n-      }\n-      return changed;\n-   }\n-\n-   public void clear() {\n-      _mods++;\n-      _map.clear();\n-      _total = 0;\n-   }\n-\n-   public boolean contains(Object o) {\n-      return _map.containsKey(o);\n-   }\n-\n-   public boolean containsAll(Collection c) {\n-      return containsAll(new HashBag(c));\n-   }\n-\n-   /**\n-    * Returns <code>true</code> if the bag contains all elements in\n-    * the given collection, respecting cardinality.\n-    * @see #containsAll(Collection)\n-    **/\n-   public boolean containsAll(Bag other) {\n-      boolean result = true;\n-      Iterator i = other.uniqueSet().iterator();\n-      while (i.hasNext()) {\n-         Object current = i.next();\n-         boolean contains =\n-            getCount(current) >= ((Bag)other).getCount(current);\n-         result = result && contains;\n-      }\n-      return result;\n-   }\n-\n-   public boolean equals(Object o) {\n-      return (o == this || \n-              (o != null && o.getClass().equals(this.getClass()) &&\n-               ((AbstractBag)o)._map.equals(this._map)));\n-   }\n-\n-   public int hashCode() {\n-      return _map.hashCode();\n-   }\n-\n-   public boolean isEmpty() {\n-      return _map.isEmpty();\n-   }\n-\n-   public Iterator iterator() {\n-      return new BagIterator(this, extractList().iterator()); \n-   }\n-\n-   private class BagIterator implements Iterator {\n-      private AbstractBag _parent = null;\n-      private Iterator _support = null;\n-      private Object _current = null;\n-      private int _mods = 0;\n-\n-      public BagIterator(AbstractBag parent, Iterator support) {\n-         _parent = parent;\n-         _support = support;\n-         _current = null;\n-         _mods = parent.modCount();\n-      }\n-\n-      public boolean hasNext() {\n-         return _support.hasNext();\n-      }\n-\n-      public Object next() {\n-         if (_parent.modCount() != _mods) {\n-            throw new ConcurrentModificationException();\n-         }\n-         _current = _support.next();\n-         return _current;\n-      }\n-      \n-      public void remove() {\n-         if (_parent.modCount() != _mods) {\n-            throw new ConcurrentModificationException();\n-         }\n-         _support.remove();\n-         _parent.remove(_current, 1);\n-         _mods++;\n-      }\n-   }\n-\n-   public boolean remove (Object o) {\n-      return remove(o, getCount(o));\n-   }\n-\n-   public boolean remove (Object o, int i) {\n-      _mods++;\n-      boolean result = false;\n-      int count = getCount(o);\n-      if (i <= 0) {\n-         result = false;\n-      } else if (count > i) {\n-         _map.put(o, new Integer(count - i));\n-         result = true;\n-         _total -= i;\n-      } else { // count > 0 && count <= i  \n-         // need to remove all\n-         result = (_map.remove(o) != null);\n-         _total -= count;\n-      }\n-      return result;\n-   }\n-\n-   public boolean removeAll(Collection c) {\n-      boolean result = false;\n-      if (c != null) {\n-         Iterator i = c.iterator();\n-         while (i.hasNext()) {\n-            boolean changed = remove(i.next(), 1);\n-            result = result || changed;\n-         }\n-      }\n-      return result;\n-   }\n-\n-   public boolean retainAll(Collection c) {\n-      return retainAll(new HashBag(c));\n-   }\n-\n-   /**\n-    * Remove any members of the bag that are not in the given\n-    * bag, respecting cardinality.\n-    * @see #retainAll(Collection)\n-    * @return <code>true</code> if this call changed the collection\n-    **/\n-   public boolean retainAll(Bag other) {\n-      boolean result = false;\n-      Bag excess = new HashBag();\n-      Iterator i = uniqueSet().iterator();\n-      while (i.hasNext()) {\n-         Object current = i.next();\n-         int myCount = getCount(current);\n-         int otherCount = other.getCount(current);\n-         if (1 <= otherCount && otherCount <= myCount) {\n-            excess.add(current, myCount - otherCount);\n-         } else {\n-            excess.add(current, myCount);\n-         }\n-      }\n-      if (!excess.isEmpty()) {\n-         result = removeAll(excess);\n-      }\n-      return result;\n-   }\n-\n-   public Object[] toArray() {\n-      return extractList().toArray();\n-   }\n-\n-   public Object[] toArray(Object[] a) {\n-      return extractList().toArray(a);\n-   }\n-\n-   public int getCount(Object o) {\n-      int result = 0;\n-      Integer count = MapUtils.getInteger(_map, o);\n-      if (count != null) {\n-         result = count.intValue();\n-      }\n-      return result;\n-   }\n-\n-   public Set uniqueSet() {\n-      return Collections.unmodifiableSet(_map.keySet());\n-   }\n-\n-   public int size() {\n-      return _total;\n-   }\n-\n-   /**\n-    * Actually walks the bag to make sure the count is correct and\n-    * resets the running total\n-    **/\n-   protected int calcTotalSize() {\n-      _total = extractList().size();\n-      return _total;\n-   }\n-\n-   /**\n-    * Utility method for implementations to set the map that backs\n-    * this bag. Not intended for interactive use outside of\n-    * subclasses.\n-    **/\n-   protected void setMap(Map m) {\n-      _map = m;\n-   }\n-\n-   /**\n-    * Utility method for implementations to access the map that backs\n-    * this bag. Not intended for interactive use outside of\n-    * subclasses.\n-    **/\n-   protected Map getMap() {\n-      return _map;\n-   }\n-\n-   /**\n-    * Create a list for use in iteration, etc.\n-    **/\n-   private List extractList() {\n-      List result = new ArrayList();\n-      Iterator i = uniqueSet().iterator();\n-      while (i.hasNext()) {\n-         Object current = i.next();\n-         for (int index = getCount(current); index > 0; index--) {\n-            result.add(current);\n-         }\n-      }\n-      return result;\n-   }\n-\n-   /**\n-    * Return number of modifications for iterator\n-    **/\n-   private int modCount() {\n-      return _mods;\n-   }\n-}\n-\n-\n-\n+ **/\n+public abstract class AbstractBag implements Bag {\n+   private Map _map = null;\n+   private int _total = 0;\n+   private int _mods = 0;\n+\n+   public boolean add(Object o) {\n+      return add(o, 1);\n+   }\n+\n+   public boolean add(Object o, int i) {\n+      _mods++;\n+      if (i > 0) {\n+         int count = (i + getCount(o));\n+         _map.put(o, new Integer(count));\n+         _total += i;\n+         return (count == i);\n+      } else {\n+         return false;\n+      }\n+   }\n+\n+   public boolean addAll(Collection c) {\n+      boolean changed = false;\n+      Iterator i = c.iterator();\n+      while (i.hasNext()) {\n+         boolean added = add(i.next());\n+         changed = changed || added;\n+      }\n+      return changed;\n+   }\n+\n+   public void clear() {\n+      _mods++;\n+      _map.clear();\n+      _total = 0;\n+   }\n+\n+   public boolean contains(Object o) {\n+      return _map.containsKey(o);\n+   }\n+\n+   public boolean containsAll(Collection c) {\n+      return containsAll(new HashBag(c));\n+   }\n+\n+   /**\n+    * Returns <code>true</code> if the bag contains all elements in\n+    * the given collection, respecting cardinality.\n+    * @see #containsAll(Collection)\n+    **/\n+   public boolean containsAll(Bag other) {\n+      boolean result = true;\n+      Iterator i = other.uniqueSet().iterator();\n+      while (i.hasNext()) {\n+         Object current = i.next();\n+         boolean contains =\n+            getCount(current) >= ((Bag)other).getCount(current);\n+         result = result && contains;\n+      }\n+      return result;\n+   }\n+\n+   public boolean equals(Object o) {\n+      return (o == this || \n+              (o != null && o.getClass().equals(this.getClass()) &&\n+               ((AbstractBag)o)._map.equals(this._map)));\n+   }\n+\n+   public int hashCode() {\n+      return _map.hashCode();\n+   }\n+\n+   public boolean isEmpty() {\n+      return _map.isEmpty();\n+   }\n+\n+   public Iterator iterator() {\n+      return new BagIterator(this, extractList().iterator()); \n+   }\n+\n+   private class BagIterator implements Iterator {\n+      private AbstractBag _parent = null;\n+      private Iterator _support = null;\n+      private Object _current = null;\n+      private int _mods = 0;\n+\n+      public BagIterator(AbstractBag parent, Iterator support) {\n+         _parent = parent;\n+         _support = support;\n+         _current = null;\n+         _mods = parent.modCount();\n+      }\n+\n+      public boolean hasNext() {\n+         return _support.hasNext();\n+      }\n+\n+      public Object next() {\n+         if (_parent.modCount() != _mods) {\n+            throw new ConcurrentModificationException();\n+         }\n+         _current = _support.next();\n+         return _current;\n+      }\n+      \n+      public void remove() {\n+         if (_parent.modCount() != _mods) {\n+            throw new ConcurrentModificationException();\n+         }\n+         _support.remove();\n+         _parent.remove(_current, 1);\n+         _mods++;\n+      }\n+   }\n+\n+   public boolean remove (Object o) {\n+      return remove(o, getCount(o));\n+   }\n+\n+   public boolean remove (Object o, int i) {\n+      _mods++;\n+      boolean result = false;\n+      int count = getCount(o);\n+      if (i <= 0) {\n+         result = false;\n+      } else if (count > i) {\n+         _map.put(o, new Integer(count - i));\n+         result = true;\n+         _total -= i;\n+      } else { // count > 0 && count <= i  \n+         // need to remove all\n+         result = (_map.remove(o) != null);\n+         _total -= count;\n+      }\n+      return result;\n+   }\n+\n+   public boolean removeAll(Collection c) {\n+      boolean result = false;\n+      if (c != null) {\n+         Iterator i = c.iterator();\n+         while (i.hasNext()) {\n+            boolean changed = remove(i.next(), 1);\n+            result = result || changed;\n+         }\n+      }\n+      return result;\n+   }\n+\n+   public boolean retainAll(Collection c) {\n+      return retainAll(new HashBag(c));\n+   }\n+\n+   /**\n+    * Remove any members of the bag that are not in the given\n+    * bag, respecting cardinality.\n+    * @see #retainAll(Collection)\n+    * @return <code>true</code> if this call changed the collection\n+    **/\n+   public boolean retainAll(Bag other) {\n+      boolean result = false;\n+      Bag excess = new HashBag();\n+      Iterator i = uniqueSet().iterator();\n+      while (i.hasNext()) {\n+         Object current = i.next();\n+         int myCount = getCount(current);\n+         int otherCount = other.getCount(current);\n+         if (1 <= otherCount && otherCount <= myCount) {\n+            excess.add(current, myCount - otherCount);\n+         } else {\n+            excess.add(current, myCount);\n+         }\n+      }\n+      if (!excess.isEmpty()) {\n+         result = removeAll(excess);\n+      }\n+      return result;\n+   }\n+\n+   public Object[] toArray() {\n+      return extractList().toArray();\n+   }\n+\n+   public Object[] toArray(Object[] a) {\n+      return extractList().toArray(a);\n+   }\n+\n+   public int getCount(Object o) {\n+      int result = 0;\n+      Integer count = MapUtils.getInteger(_map, o);\n+      if (count != null) {\n+         result = count.intValue();\n+      }\n+      return result;\n+   }\n+\n+   public Set uniqueSet() {\n+      return Collections.unmodifiableSet(_map.keySet());\n+   }\n+\n+   public int size() {\n+      return _total;\n+   }\n+\n+   /**\n+    * Actually walks the bag to make sure the count is correct and\n+    * resets the running total\n+    **/\n+   protected int calcTotalSize() {\n+      _total = extractList().size();\n+      return _total;\n+   }\n+\n+   /**\n+    * Utility method for implementations to set the map that backs\n+    * this bag. Not intended for interactive use outside of\n+    * subclasses.\n+    **/\n+   protected void setMap(Map m) {\n+      _map = m;\n+   }\n+\n+   /**\n+    * Utility method for implementations to access the map that backs\n+    * this bag. Not intended for interactive use outside of\n+    * subclasses.\n+    **/\n+   protected Map getMap() {\n+      return _map;\n+   }\n+\n+   /**\n+    * Create a list for use in iteration, etc.\n+    **/\n+   private List extractList() {\n+      List result = new ArrayList();\n+      Iterator i = uniqueSet().iterator();\n+      while (i.hasNext()) {\n+         Object current = i.next();\n+         for (int index = getCount(current); index > 0; index--) {\n+            result.add(current);\n+         }\n+      }\n+      return result;\n+   }\n+\n+   /**\n+    * Return number of modifications for iterator\n+    **/\n+   private int modCount() {\n+      return _mods;\n+   }\n+}\n+\n+\n+\n--- a/src/java/org/apache/commons/collections/Bag.java\n+++ b/src/java/org/apache/commons/collections/Bag.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Bag.java,v 1.3 2002/02/22 04:39:53 mas Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/02/22 04:39:53 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-\n-package org.apache.commons.collections;\n-\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.Set;\n-\n-/**\n- * A {@link Collection} that keeps a count of its members of the same\n- * type, using <code>hashCode</code> to check for equality. Suppose\n- * you have a Bag that contains <code>{a, a, b, c}</code>.  Calling\n- * {@link #getCount} on <code>a</code> would return 2, while calling\n- * {@link #uniqueSet} would return <code>{a, b, c}</code>.\n- *\n- * @author Chuck Burdick\n- **/\n-public interface Bag extends Collection {\n-   /**\n-    * Return the number of occurrences (cardinality) of the given\n-    * object currently in the bag. If the object does not exist in the\n-    * bag, return 0.\n-    **/\n-   public int getCount(Object o);\n-\n-   /**\n-    * Add the given object to the bag and keep a count. If the object\n-    * is already in the {@link #uniqueSet} then increment its count as\n-    * reported by {@link #getCount}. Otherwise add it to the {@link\n-    * #uniqueSet} and report its count as 1.\n-    * @return <code>true</code> if the object was not already in the\n-    *         <code>uniqueSet</code>\n-    * @see #getCount\n-    **/\n-   public boolean add(Object o);\n-\n-   /**\n-    * Add <code>i</code> copies of the given object to the bag and\n-    * keep a count.\n-    * @return <code>true</code> if the object was not already in the\n-    *         <code>uniqueSet</code>\n-    * @see #add(Object)\n-    * @see #getCount\n-    **/\n-   public boolean add(Object o, int i);\n-\n-   /**\n-    * Remove all occurrences of the given object from the bag, and do\n-    * not represent the object in the {@link #uniqueSet}.\n-    * @see #remove(Object, int)\n-    * @return <code>true</code> if this call changed the collection\n-    **/\n-   public boolean remove(Object o);\n-\n-   /**\n-    * Remove the given number of occurrences from the bag. If the bag\n-    * contains <code>i</code> occurrences or less, the item will be\n-    * removed from the {@link #uniqueSet}.\n-    * @see #getCount\n-    * @see #remove(Object)\n-    * @return <code>true</code> if this call changed the collection\n-    **/\n-   public boolean remove(Object o, int i);\n-\n-   /**\n-    * The {@link Set} of unique members that represent all members in\n-    * the bag. Uniqueness constraints are the same as those in {@link\n-    * Set}.\n-    **/\n-   public Set uniqueSet();\n-\n-   /**\n-    * Returns the total number of items in the bag across all types.\n-    * @see #size\n-    **/\n-   public int size();\n-\n-   /**\n-    * Returns <code>true</code> if the bag contains all elements in\n-    * the given collection, respecting cardinality.  That is, if the\n-    * given collection <code>C</code> contains <code>n</code> copies\n-    * of a given object, calling {@link #getCount} on that object must\n-    * be >= <code>n</code> for all <code>n</code> in <code>C</code>.\n-    **/\n-   public boolean containsAll(Collection c);\n-\n-   /**\n-    * Remove all elements represented in the given collection,\n-    * respecting cardinality.  That is, if the given collection\n-    * <code>C</code> contains <code>n</code> copies of a given object,\n-    * the bag will have <code>n</code> fewer copies, assuming the bag\n-    * had at least <code>n</code> copies to begin with.\n-    * @return <code>true</code> if this call changed the collection\n-    **/\n-   public boolean removeAll(Collection c);\n-\n-   /**\n-    * Remove any members of the bag that are not in the given\n-    * collection, respecting cardinality.  That is, if the given\n-    * collection <code>C</code> contains <code>n</code> copies of a\n-    * given object and the bag has <code>m &gt; n</code> copies, then\n-    * delete <code>m - n</code> copies from the bag.  In addition, if\n-    * <code>e</code> is an object in the bag but\n-    * <code>!C.contains(e)</code>, then remove <code>e</code> and any\n-    * of its copies.\n-    *\n-    * @return <code>true</code> if this call changed the collection\n-    **/\n-   public boolean retainAll(Collection c);\n-\n-   /**\n-    * Returns an {@link Iterator} over the entire set of members,\n-    * including copies due to cardinality. This iterator is fail-fast\n-    * and will not tolerate concurrent modifications.\n-    **/\n-   public Iterator iterator();\n-}\n-\n-\n-\n-\n-\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Bag.java,v 1.4 2002/03/13 05:40:30 mas Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/03/13 05:40:30 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+/**\n+ * A {@link Collection} that keeps a count of its members of the same\n+ * type, using <code>hashCode</code> to check for equality. Suppose\n+ * you have a Bag that contains <code>{a, a, b, c}</code>.  Calling\n+ * {@link #getCount} on <code>a</code> would return 2, while calling\n+ * {@link #uniqueSet} would return <code>{a, b, c}</code>.\n+ *\n+ * @author Chuck Burdick\n+ **/\n+public interface Bag extends Collection {\n+   /**\n+    * Return the number of occurrences (cardinality) of the given\n+    * object currently in the bag. If the object does not exist in the\n+    * bag, return 0.\n+    **/\n+   public int getCount(Object o);\n+\n+   /**\n+    * Add the given object to the bag and keep a count. If the object\n+    * is already in the {@link #uniqueSet} then increment its count as\n+    * reported by {@link #getCount}. Otherwise add it to the {@link\n+    * #uniqueSet} and report its count as 1.\n+    * @return <code>true</code> if the object was not already in the\n+    *         <code>uniqueSet</code>\n+    * @see #getCount\n+    **/\n+   public boolean add(Object o);\n+\n+   /**\n+    * Add <code>i</code> copies of the given object to the bag and\n+    * keep a count.\n+    * @return <code>true</code> if the object was not already in the\n+    *         <code>uniqueSet</code>\n+    * @see #add(Object)\n+    * @see #getCount\n+    **/\n+   public boolean add(Object o, int i);\n+\n+   /**\n+    * Remove all occurrences of the given object from the bag, and do\n+    * not represent the object in the {@link #uniqueSet}.\n+    * @see #remove(Object, int)\n+    * @return <code>true</code> if this call changed the collection\n+    **/\n+   public boolean remove(Object o);\n+\n+   /**\n+    * Remove the given number of occurrences from the bag. If the bag\n+    * contains <code>i</code> occurrences or less, the item will be\n+    * removed from the {@link #uniqueSet}.\n+    * @see #getCount\n+    * @see #remove(Object)\n+    * @return <code>true</code> if this call changed the collection\n+    **/\n+   public boolean remove(Object o, int i);\n+\n+   /**\n+    * The {@link Set} of unique members that represent all members in\n+    * the bag. Uniqueness constraints are the same as those in {@link\n+    * Set}.\n+    **/\n+   public Set uniqueSet();\n+\n+   /**\n+    * Returns the total number of items in the bag across all types.\n+    * @see #size\n+    **/\n+   public int size();\n+\n+   /**\n+    * Returns <code>true</code> if the bag contains all elements in\n+    * the given collection, respecting cardinality.  That is, if the\n+    * given collection <code>C</code> contains <code>n</code> copies\n+    * of a given object, calling {@link #getCount} on that object must\n+    * be >= <code>n</code> for all <code>n</code> in <code>C</code>.\n+    **/\n+   public boolean containsAll(Collection c);\n+\n+   /**\n+    * Remove all elements represented in the given collection,\n+    * respecting cardinality.  That is, if the given collection\n+    * <code>C</code> contains <code>n</code> copies of a given object,\n+    * the bag will have <code>n</code> fewer copies, assuming the bag\n+    * had at least <code>n</code> copies to begin with.\n+    * @return <code>true</code> if this call changed the collection\n+    **/\n+   public boolean removeAll(Collection c);\n+\n+   /**\n+    * Remove any members of the bag that are not in the given\n+    * collection, respecting cardinality.  That is, if the given\n+    * collection <code>C</code> contains <code>n</code> copies of a\n+    * given object and the bag has <code>m &gt; n</code> copies, then\n+    * delete <code>m - n</code> copies from the bag.  In addition, if\n+    * <code>e</code> is an object in the bag but\n+    * <code>!C.contains(e)</code>, then remove <code>e</code> and any\n+    * of its copies.\n+    *\n+    * @return <code>true</code> if this call changed the collection\n+    **/\n+   public boolean retainAll(Collection c);\n+\n+   /**\n+    * Returns an {@link Iterator} over the entire set of members,\n+    * including copies due to cardinality. This iterator is fail-fast\n+    * and will not tolerate concurrent modifications.\n+    **/\n+   public Iterator iterator();\n+}\n+\n+\n+\n+\n+\n--- a/src/java/org/apache/commons/collections/Closure.java\n+++ b/src/java/org/apache/commons/collections/Closure.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Closure.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-/** An interface to represent some Closure, a block of code which is executed \n-  * from inside some block, function or iteration which operates on an input \n-  * object.\n-  *\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  */\n-public interface Closure {\n-\n-    /** Performs some operation on the input object\n-      */\n-    public void execute(Object input);\n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Closure.java,v 1.3 2002/03/13 05:40:30 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/13 05:40:30 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+/** An interface to represent some Closure, a block of code which is executed \n+  * from inside some block, function or iteration which operates on an input \n+  * object.\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  */\n+public interface Closure {\n+\n+    /** Performs some operation on the input object\n+      */\n+    public void execute(Object input);\n+}\n--- a/src/java/org/apache/commons/collections/DefaultMapEntry.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapEntry.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.3 2002/02/22 04:58:17 mas Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/02/22 04:58:17 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.Map;\n-\n-/** A default implementation of {@link Map.Entry Map.Entry}\n-  *\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n-  */\n-  \n-public class DefaultMapEntry implements Map.Entry {\n-    \n-    private Object key;\n-    private Object value;\n-    \n-    public DefaultMapEntry() {\n-    }\n-\n-    public DefaultMapEntry(Object key, Object value) {\n-        this.key = key;\n-        this.value = value;\n-    }\n-\n-    /**\n-     *  Implemented per API documentation of {@link Map.Entry#equals(Object)}\n-     **/\n-    public boolean equals(Object o) {\n-        if( o == null ) return false;\n-        if( o == this ) return true;        \n-\n-        if ( ! (o instanceof Map.Entry ) )\n-            return false;\n-        Map.Entry e2 = (Map.Entry)o;    \n-        return ((getKey() == null ?\n-                 e2.getKey() == null : getKey().equals(e2.getKey())) &&\n-                (getValue() == null ?\n-                 e2.getValue() == null : getValue().equals(e2.getValue())));\n-    }\n-     \n-     \n-    /**\n-     *  Implemented per API documentation of {@link Map.Entry#hashCode()}\n-     **/\n-    public int hashCode() {\n-        return ( ( getKey() == null ? 0 : getKey().hashCode() ) ^\n-                 ( getValue() == null ? 0 : getValue().hashCode() ) ); \n-    }\n-    \n-\n-\n-    // Map.Entry interface\n-    //-------------------------------------------------------------------------\n-    public Object getKey() {\n-        return key;\n-    }\n-\n-    public Object getValue() {\n-        return value;\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------    \n-    public void setKey(Object key) {\n-        this.key = key;\n-    }\n-    \n-    /** Note that this method only sets the local reference inside this object and\n-      * does not modify the original Map.\n-      *\n-      * @return the old value of the value\n-      * @param value the new value\n-      */\n-    public Object setValue(Object value) {\n-        Object answer = this.value;\n-        this.value = value;\n-        return answer;\n-    }\n-\n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.4 2002/03/13 05:40:30 mas Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/03/13 05:40:30 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Map;\n+\n+/** A default implementation of {@link Map.Entry Map.Entry}\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n+  */\n+  \n+public class DefaultMapEntry implements Map.Entry {\n+    \n+    private Object key;\n+    private Object value;\n+    \n+    public DefaultMapEntry() {\n+    }\n+\n+    public DefaultMapEntry(Object key, Object value) {\n+        this.key = key;\n+        this.value = value;\n+    }\n+\n+    /**\n+     *  Implemented per API documentation of {@link Map.Entry#equals(Object)}\n+     **/\n+    public boolean equals(Object o) {\n+        if( o == null ) return false;\n+        if( o == this ) return true;        \n+\n+        if ( ! (o instanceof Map.Entry ) )\n+            return false;\n+        Map.Entry e2 = (Map.Entry)o;    \n+        return ((getKey() == null ?\n+                 e2.getKey() == null : getKey().equals(e2.getKey())) &&\n+                (getValue() == null ?\n+                 e2.getValue() == null : getValue().equals(e2.getValue())));\n+    }\n+     \n+     \n+    /**\n+     *  Implemented per API documentation of {@link Map.Entry#hashCode()}\n+     **/\n+    public int hashCode() {\n+        return ( ( getKey() == null ? 0 : getKey().hashCode() ) ^\n+                 ( getValue() == null ? 0 : getValue().hashCode() ) ); \n+    }\n+    \n+\n+\n+    // Map.Entry interface\n+    //-------------------------------------------------------------------------\n+    public Object getKey() {\n+        return key;\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------    \n+    public void setKey(Object key) {\n+        this.key = key;\n+    }\n+    \n+    /** Note that this method only sets the local reference inside this object and\n+      * does not modify the original Map.\n+      *\n+      * @return the old value of the value\n+      * @param value the new value\n+      */\n+    public Object setValue(Object value) {\n+        Object answer = this.value;\n+        this.value = value;\n+        return answer;\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/HashBag.java\n+++ b/src/java/org/apache/commons/collections/HashBag.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/HashBag.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-\n-package org.apache.commons.collections;\n-\n-import java.util.Collection;\n-import java.util.HashMap;\n-\n-/**\n- * An implementation of {@link Bag} that is backed by a {@link\n- * HashMap}.\n- *\n- * @author Chuck Burdick\n- **/\n-public class HashBag extends AbstractBag implements Bag {\n-   public HashBag() {\n-      setMap(new HashMap());\n-   }\n-\n-   /**\n-    * New {@link Bag} containing all the members of the given\n-    * collection.\n-    * @see #addAll\n-    **/\n-   public HashBag(Collection c) {\n-      this();\n-      addAll(c);\n-   }\n-}\n-\n-\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/HashBag.java,v 1.3 2002/03/13 05:40:30 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/13 05:40:30 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+\n+/**\n+ * An implementation of {@link Bag} that is backed by a {@link\n+ * HashMap}.\n+ *\n+ * @author Chuck Burdick\n+ **/\n+public class HashBag extends AbstractBag implements Bag {\n+   public HashBag() {\n+      setMap(new HashMap());\n+   }\n+\n+   /**\n+    * New {@link Bag} containing all the members of the given\n+    * collection.\n+    * @see #addAll\n+    **/\n+   public HashBag(Collection c) {\n+      this();\n+      addAll(c);\n+   }\n+}\n+\n+\n--- a/src/java/org/apache/commons/collections/IteratorEnumeration.java\n+++ b/src/java/org/apache/commons/collections/IteratorEnumeration.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/IteratorEnumeration.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.Enumeration;\n-import java.util.Iterator;\n-\n-/** Adapter to make an {@link Iterator Iterator} instance appear to be an {@link Enumeration Enumeration} instances\n-  *\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  */\n-\n-public class IteratorEnumeration implements Enumeration {\n-    \n-    private Iterator iterator;\n-    \n-    public IteratorEnumeration() {\n-    }\n-\n-    public IteratorEnumeration( Iterator iterator ) {\n-        this.iterator = iterator;\n-    }\n-\n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-    public boolean hasMoreElements() {\n-        return iterator.hasNext();\n-    }\n-\n-    public Object nextElement() {\n-        return iterator.next();\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-    public Iterator getIterator() {\n-        return iterator;\n-    }\n-    \n-    public void setIterator( Iterator iterator ) {\n-        this.iterator = iterator;\n-    }\n-    \n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/IteratorEnumeration.java,v 1.3 2002/03/13 05:40:31 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/13 05:40:31 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+\n+/** Adapter to make an {@link Iterator Iterator} instance appear to be an {@link Enumeration Enumeration} instances\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  */\n+\n+public class IteratorEnumeration implements Enumeration {\n+    \n+    private Iterator iterator;\n+    \n+    public IteratorEnumeration() {\n+    }\n+\n+    public IteratorEnumeration( Iterator iterator ) {\n+        this.iterator = iterator;\n+    }\n+\n+    // Iterator interface\n+    //-------------------------------------------------------------------------\n+    public boolean hasMoreElements() {\n+        return iterator.hasNext();\n+    }\n+\n+    public Object nextElement() {\n+        return iterator.next();\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+    public Iterator getIterator() {\n+        return iterator;\n+    }\n+    \n+    public void setIterator( Iterator iterator ) {\n+        this.iterator = iterator;\n+    }\n+    \n+}\n--- a/src/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/java/org/apache/commons/collections/MapUtils.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.3 2002/02/23 03:50:23 bayard Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/02/23 03:50:23 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-import java.io.*;\n-import java.text.*;\n-import java.util.*;\n-\n-/** A helper class for using {@link Map Map} instances.\n-  *\n-  * It contains various typesafe methods\n-  * as well as other useful features like deep copying\n-  *\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  *\n-  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n-  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n-  */\n-public class MapUtils {\n-\n-    private static int debugIndent = 0;\n-    \n-    \n-    \n-    // Type safe getters\n-    //-------------------------------------------------------------------------\n-    public static Object getObject( Map map, Object key ) {\n-        if ( map != null ) {\n-            return map.get( key );\n-        }\n-        return null;\n-    }\n-\n-    public static String getString( Map map, Object key ) {\n-        if ( map != null ) {\n-            Object answer = map.get( key );\n-            if ( answer != null ) {\n-                return answer.toString();\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static Boolean getBoolean( Map map, Object key ) {\n-        if ( map != null ) {\n-            Object answer = map.get( key );\n-            if ( answer != null ) {\n-                if ( answer instanceof Boolean ) {\n-                    return (Boolean) answer;\n-                }\n-                else\n-                if ( answer instanceof String ) {\n-                    return new Boolean( (String) answer );\n-                }\n-                else\n-                if ( answer instanceof Number ) {\n-                    Number n = (Number) answer;\n-                    return ( n.intValue() != 0 ) ? Boolean.TRUE : Boolean.FALSE;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static Number getNumber( Map map, Object key ) {\n-        if ( map != null ) {\n-            Object answer = map.get( key );\n-            if ( answer != null ) {\n-                if ( answer instanceof Number ) {\n-                    return (Number) answer;\n-                }\n-                else\n-                if ( answer instanceof String ) {\n-                    try {\n-                        String text = (String) answer;\n-                        return NumberFormat.getInstance().parse( text );\n-                    }\n-                    catch (ParseException e) {\n-                        logInfo( e );\n-                    }\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static Byte getByte( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n-            return null;\n-        }\n-        else\n-        if ( answer instanceof Byte ) {\n-            return (Byte) answer;\n-        }\n-        return new Byte( answer.byteValue() );\n-    }\n-\n-    public static Short getShort( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n-            return null;\n-        }\n-        else\n-        if ( answer instanceof Short ) {\n-            return (Short) answer;\n-        }\n-        return new Short( answer.shortValue() );\n-    }\n-\n-    public static Integer getInteger( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n-            return null;\n-        }\n-        else\n-        if ( answer instanceof Integer ) {\n-            return (Integer) answer;\n-        }\n-        return new Integer( answer.intValue() );\n-    }\n-\n-    public static Long getLong( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n-            return null;\n-        }\n-        else\n-        if ( answer instanceof Long ) {\n-            return (Long) answer;\n-        }\n-        return new Long( answer.longValue() );\n-    }\n-\n-    public static Float getFloat( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n-            return null;\n-        }\n-        else\n-        if ( answer instanceof Float ) {\n-            return (Float) answer;\n-        }\n-        return new Float( answer.floatValue() );\n-    }\n-\n-    public static Double getDouble( Map map, Object key ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n-            return null;\n-        }\n-        else\n-        if ( answer instanceof Double ) {\n-            return (Double) answer;\n-        }\n-        return new Double( answer.doubleValue() );\n-    }\n-\n-    public static Map getMap( Map map, Object key ) {\n-        if ( map != null ) {\n-            Object answer = map.get( key );\n-            if ( answer != null && answer instanceof Map ) {\n-                return (Map) answer;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    // Type safe getters with default values\n-    //-------------------------------------------------------------------------\n-    public static Object getObject( Map map, Object key, Object defaultValue ) {\n-        if ( map != null ) {\n-            Object answer = map.get( key );\n-            if ( answer != null ) {\n-                return answer;\n-            }\n-        }\n-        return defaultValue;\n-    }\n-\n-    public static String getString( Map map, Object key, String defaultValue ) {\n-        String answer = getString( map, key );\n-        if ( answer == null ) {\n-            answer = defaultValue;\n-        }\n-        return answer;\n-    }\n-\n-    public static Boolean getBoolean( Map map, Object key, Boolean defaultValue ) {\n-        Boolean answer = getBoolean( map, key );\n-        if ( answer == null ) {\n-            answer = defaultValue;\n-        }\n-        return answer;\n-    }\n-\n-    public static Number getNumber( Map map, Object key, Number defaultValue ) {\n-        Number answer = getNumber( map, key );\n-        if ( answer == null ) {\n-            answer = defaultValue;\n-        }\n-        return answer;\n-    }\n-\n-    public static Byte getByte( Map map, Object key, Byte defaultValue ) {\n-        Byte answer = getByte( map, key );\n-        if ( answer == null ) {\n-            answer = defaultValue;\n-        }\n-        return answer;\n-    }\n-\n-    public static Short getShort( Map map, Object key, Short defaultValue ) {\n-        Short answer = getShort( map, key );\n-        if ( answer == null ) {\n-            answer = defaultValue;\n-        }\n-        return answer;\n-    }\n-\n-    public static Integer getInteger( Map map, Object key, Integer defaultValue ) {\n-        Integer answer = getInteger( map, key );\n-        if ( answer == null ) {\n-            answer = defaultValue;\n-        }\n-        return answer;\n-    }\n-\n-    public static Long getLong( Map map, Object key, Long defaultValue ) {\n-        Long answer = getLong( map, key );\n-        if ( answer == null ) {\n-            answer = defaultValue;\n-        }\n-        return answer;\n-    }\n-\n-    public static Float getFloat( Map map, Object key, Float defaultValue ) {\n-        Float answer = getFloat( map, key );\n-        if ( answer == null ) {\n-            answer = defaultValue;\n-        }\n-        return answer;\n-    }\n-\n-    public static Double getDouble( Map map, Object key, Double defaultValue ) {\n-        Double answer = getDouble( map, key );\n-        if ( answer == null ) {\n-            answer = defaultValue;\n-        }\n-        return answer;\n-    }\n-\n-    public static Map getMap( Map map, Object key, Map defaultValue ) {\n-        Map answer = getMap( map, key );\n-        if ( answer == null ) {\n-            answer = defaultValue;\n-        }\n-        return answer;\n-    }\n-\n-    // Conversion methods\n-    //-------------------------------------------------------------------------\n-    public static Properties toProperties(Map input) {\n-        Properties answer = new Properties();\n-        if ( input != null ) {\n-            for ( Iterator iter = input.entrySet().iterator(); iter.hasNext(); ) {\n-                Map.Entry entry = (Map.Entry) iter.next();\n-                Object key = entry.getKey();\n-                Object value = entry.getValue();\n-                answer.put(key, value);\n-            }\n-        }\n-        return answer;\n-    }\n-\n-    // Printing methods\n-    //-------------------------------------------------------------------------\n-    public static synchronized void verbosePrint( PrintStream out, Object key, Map map ) {\n-        debugPrintIndent( out );\n-        out.println( key + \" = \" );\n-\n-        debugPrintIndent( out );\n-        out.println( \"{\" );\n-        ++debugIndent;\n-\n-        for ( Iterator iter = map.entrySet().iterator(); iter.hasNext(); ) {\n-            Map.Entry entry = (Map.Entry) iter.next();\n-            String childKey = (String) entry.getKey();\n-            Object childValue = entry.getValue();\n-            if ( childValue instanceof Map ) {\n-                verbosePrint( out, childKey, (Map) childValue );\n-            }\n-            else {\n-                debugPrintIndent( out );\n-                out.println( childKey + \" = \" + childValue);\n-            }\n-        }\n-        --debugIndent;\n-        debugPrintIndent( out );\n-        out.println( \"}\" );\n-    }\n-\n-    public static synchronized void debugPrint( PrintStream out, Object key, Map map ) {\n-        debugPrintIndent( out );\n-        out.println( key + \" = \" );\n-\n-        debugPrintIndent( out );\n-        out.println( \"{\" );\n-        ++debugIndent;\n-\n-        for ( Iterator iter = map.entrySet().iterator(); iter.hasNext(); ) {\n-            Map.Entry entry = (Map.Entry) iter.next();\n-            String childKey = (String) entry.getKey();\n-            Object childValue = entry.getValue();\n-            if ( childValue instanceof Map ) {\n-                verbosePrint( out, childKey, (Map) childValue );\n-            }\n-            else {\n-                debugPrintIndent( out );\n-\n-                String typeName = ( childValue != null )\n-                    ? childValue.getClass().getName()\n-                    : null;\n-\n-                out.println( childKey + \" = \" + childValue + \" class: \" + typeName );\n-            }\n-        }\n-        --debugIndent;\n-        debugPrintIndent( out );\n-        out.println( \"}\" );\n-    }\n-\n-    // Implementation methods\n-    //-------------------------------------------------------------------------\n-    protected static void debugPrintIndent( PrintStream out ) {\n-        for ( int i = 0; i < debugIndent; i++ ) {\n-            out.print( \"    \" );\n-        }\n-    }\n-    \n-    protected static void logInfo(Exception e) {\n-        // XXXX: should probably use log4j here instead...\n-        System.out.println( \"INFO: Exception: \" + e );\n-    }\n-\n-\n-    /**\n-     * Nice method for adding data to a map in such a way\n-     * as to not get NPE's. The point being that if the\n-     * value is null, map.put() will throw an exception.\n-     * That blows in the case of this class cause you may want to\n-     * essentially treat put(\"Not Null\", null ) == put(\"Not Null\", \"\")\n-     * We will still throw a NPE if the key is null cause that should\n-     * never happen.\n-     */\n-    public static final void safeAddToMap(Map map, Object key, Object value)\n-        throws NullPointerException\n-    {\n-        if (value == null)\n-        {\n-            map.put ( key, \"\" );\n-        }\n-        else\n-        {\n-           map.put ( key, value );\n-        }\n-    }\n-\n-\n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MapUtils.java,v 1.4 2002/03/13 05:40:31 mas Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/03/13 05:40:31 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.io.*;\n+import java.text.*;\n+import java.util.*;\n+\n+/** A helper class for using {@link Map Map} instances.\n+  *\n+  * It contains various typesafe methods\n+  * as well as other useful features like deep copying\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  *\n+  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n+  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n+  */\n+public class MapUtils {\n+\n+    private static int debugIndent = 0;\n+    \n+    \n+    \n+    // Type safe getters\n+    //-------------------------------------------------------------------------\n+    public static Object getObject( Map map, Object key ) {\n+        if ( map != null ) {\n+            return map.get( key );\n+        }\n+        return null;\n+    }\n+\n+    public static String getString( Map map, Object key ) {\n+        if ( map != null ) {\n+            Object answer = map.get( key );\n+            if ( answer != null ) {\n+                return answer.toString();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static Boolean getBoolean( Map map, Object key ) {\n+        if ( map != null ) {\n+            Object answer = map.get( key );\n+            if ( answer != null ) {\n+                if ( answer instanceof Boolean ) {\n+                    return (Boolean) answer;\n+                }\n+                else\n+                if ( answer instanceof String ) {\n+                    return new Boolean( (String) answer );\n+                }\n+                else\n+                if ( answer instanceof Number ) {\n+                    Number n = (Number) answer;\n+                    return ( n.intValue() != 0 ) ? Boolean.TRUE : Boolean.FALSE;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static Number getNumber( Map map, Object key ) {\n+        if ( map != null ) {\n+            Object answer = map.get( key );\n+            if ( answer != null ) {\n+                if ( answer instanceof Number ) {\n+                    return (Number) answer;\n+                }\n+                else\n+                if ( answer instanceof String ) {\n+                    try {\n+                        String text = (String) answer;\n+                        return NumberFormat.getInstance().parse( text );\n+                    }\n+                    catch (ParseException e) {\n+                        logInfo( e );\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static Byte getByte( Map map, Object key ) {\n+        Number answer = getNumber( map, key );\n+        if ( answer == null ) {\n+            return null;\n+        }\n+        else\n+        if ( answer instanceof Byte ) {\n+            return (Byte) answer;\n+        }\n+        return new Byte( answer.byteValue() );\n+    }\n+\n+    public static Short getShort( Map map, Object key ) {\n+        Number answer = getNumber( map, key );\n+        if ( answer == null ) {\n+            return null;\n+        }\n+        else\n+        if ( answer instanceof Short ) {\n+            return (Short) answer;\n+        }\n+        return new Short( answer.shortValue() );\n+    }\n+\n+    public static Integer getInteger( Map map, Object key ) {\n+        Number answer = getNumber( map, key );\n+        if ( answer == null ) {\n+            return null;\n+        }\n+        else\n+        if ( answer instanceof Integer ) {\n+            return (Integer) answer;\n+        }\n+        return new Integer( answer.intValue() );\n+    }\n+\n+    public static Long getLong( Map map, Object key ) {\n+        Number answer = getNumber( map, key );\n+        if ( answer == null ) {\n+            return null;\n+        }\n+        else\n+        if ( answer instanceof Long ) {\n+            return (Long) answer;\n+        }\n+        return new Long( answer.longValue() );\n+    }\n+\n+    public static Float getFloat( Map map, Object key ) {\n+        Number answer = getNumber( map, key );\n+        if ( answer == null ) {\n+            return null;\n+        }\n+        else\n+        if ( answer instanceof Float ) {\n+            return (Float) answer;\n+        }\n+        return new Float( answer.floatValue() );\n+    }\n+\n+    public static Double getDouble( Map map, Object key ) {\n+        Number answer = getNumber( map, key );\n+        if ( answer == null ) {\n+            return null;\n+        }\n+        else\n+        if ( answer instanceof Double ) {\n+            return (Double) answer;\n+        }\n+        return new Double( answer.doubleValue() );\n+    }\n+\n+    public static Map getMap( Map map, Object key ) {\n+        if ( map != null ) {\n+            Object answer = map.get( key );\n+            if ( answer != null && answer instanceof Map ) {\n+                return (Map) answer;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    // Type safe getters with default values\n+    //-------------------------------------------------------------------------\n+    public static Object getObject( Map map, Object key, Object defaultValue ) {\n+        if ( map != null ) {\n+            Object answer = map.get( key );\n+            if ( answer != null ) {\n+                return answer;\n+            }\n+        }\n+        return defaultValue;\n+    }\n+\n+    public static String getString( Map map, Object key, String defaultValue ) {\n+        String answer = getString( map, key );\n+        if ( answer == null ) {\n+            answer = defaultValue;\n+        }\n+        return answer;\n+    }\n+\n+    public static Boolean getBoolean( Map map, Object key, Boolean defaultValue ) {\n+        Boolean answer = getBoolean( map, key );\n+        if ( answer == null ) {\n+            answer = defaultValue;\n+        }\n+        return answer;\n+    }\n+\n+    public static Number getNumber( Map map, Object key, Number defaultValue ) {\n+        Number answer = getNumber( map, key );\n+        if ( answer == null ) {\n+            answer = defaultValue;\n+        }\n+        return answer;\n+    }\n+\n+    public static Byte getByte( Map map, Object key, Byte defaultValue ) {\n+        Byte answer = getByte( map, key );\n+        if ( answer == null ) {\n+            answer = defaultValue;\n+        }\n+        return answer;\n+    }\n+\n+    public static Short getShort( Map map, Object key, Short defaultValue ) {\n+        Short answer = getShort( map, key );\n+        if ( answer == null ) {\n+            answer = defaultValue;\n+        }\n+        return answer;\n+    }\n+\n+    public static Integer getInteger( Map map, Object key, Integer defaultValue ) {\n+        Integer answer = getInteger( map, key );\n+        if ( answer == null ) {\n+            answer = defaultValue;\n+        }\n+        return answer;\n+    }\n+\n+    public static Long getLong( Map map, Object key, Long defaultValue ) {\n+        Long answer = getLong( map, key );\n+        if ( answer == null ) {\n+            answer = defaultValue;\n+        }\n+        return answer;\n+    }\n+\n+    public static Float getFloat( Map map, Object key, Float defaultValue ) {\n+        Float answer = getFloat( map, key );\n+        if ( answer == null ) {\n+            answer = defaultValue;\n+        }\n+        return answer;\n+    }\n+\n+    public static Double getDouble( Map map, Object key, Double defaultValue ) {\n+        Double answer = getDouble( map, key );\n+        if ( answer == null ) {\n+            answer = defaultValue;\n+        }\n+        return answer;\n+    }\n+\n+    public static Map getMap( Map map, Object key, Map defaultValue ) {\n+        Map answer = getMap( map, key );\n+        if ( answer == null ) {\n+            answer = defaultValue;\n+        }\n+        return answer;\n+    }\n+\n+    // Conversion methods\n+    //-------------------------------------------------------------------------\n+    public static Properties toProperties(Map input) {\n+        Properties answer = new Properties();\n+        if ( input != null ) {\n+            for ( Iterator iter = input.entrySet().iterator(); iter.hasNext(); ) {\n+                Map.Entry entry = (Map.Entry) iter.next();\n+                Object key = entry.getKey();\n+                Object value = entry.getValue();\n+                answer.put(key, value);\n+            }\n+        }\n+        return answer;\n+    }\n+\n+    // Printing methods\n+    //-------------------------------------------------------------------------\n+    public static synchronized void verbosePrint( PrintStream out, Object key, Map map ) {\n+        debugPrintIndent( out );\n+        out.println( key + \" = \" );\n+\n+        debugPrintIndent( out );\n+        out.println( \"{\" );\n+        ++debugIndent;\n+\n+        for ( Iterator iter = map.entrySet().iterator(); iter.hasNext(); ) {\n+            Map.Entry entry = (Map.Entry) iter.next();\n+            String childKey = (String) entry.getKey();\n+            Object childValue = entry.getValue();\n+            if ( childValue instanceof Map ) {\n+                verbosePrint( out, childKey, (Map) childValue );\n+            }\n+            else {\n+                debugPrintIndent( out );\n+                out.println( childKey + \" = \" + childValue);\n+            }\n+        }\n+        --debugIndent;\n+        debugPrintIndent( out );\n+        out.println( \"}\" );\n+    }\n+\n+    public static synchronized void debugPrint( PrintStream out, Object key, Map map ) {\n+        debugPrintIndent( out );\n+        out.println( key + \" = \" );\n+\n+        debugPrintIndent( out );\n+        out.println( \"{\" );\n+        ++debugIndent;\n+\n+        for ( Iterator iter = map.entrySet().iterator(); iter.hasNext(); ) {\n+            Map.Entry entry = (Map.Entry) iter.next();\n+            String childKey = (String) entry.getKey();\n+            Object childValue = entry.getValue();\n+            if ( childValue instanceof Map ) {\n+                verbosePrint( out, childKey, (Map) childValue );\n+            }\n+            else {\n+                debugPrintIndent( out );\n+\n+                String typeName = ( childValue != null )\n+                    ? childValue.getClass().getName()\n+                    : null;\n+\n+                out.println( childKey + \" = \" + childValue + \" class: \" + typeName );\n+            }\n+        }\n+        --debugIndent;\n+        debugPrintIndent( out );\n+        out.println( \"}\" );\n+    }\n+\n+    // Implementation methods\n+    //-------------------------------------------------------------------------\n+    protected static void debugPrintIndent( PrintStream out ) {\n+        for ( int i = 0; i < debugIndent; i++ ) {\n+            out.print( \"    \" );\n+        }\n+    }\n+    \n+    protected static void logInfo(Exception e) {\n+        // XXXX: should probably use log4j here instead...\n+        System.out.println( \"INFO: Exception: \" + e );\n+    }\n+\n+\n+    /**\n+     * Nice method for adding data to a map in such a way\n+     * as to not get NPE's. The point being that if the\n+     * value is null, map.put() will throw an exception.\n+     * That blows in the case of this class cause you may want to\n+     * essentially treat put(\"Not Null\", null ) == put(\"Not Null\", \"\")\n+     * We will still throw a NPE if the key is null cause that should\n+     * never happen.\n+     */\n+    public static final void safeAddToMap(Map map, Object key, Object value)\n+        throws NullPointerException\n+    {\n+        if (value == null)\n+        {\n+            map.put ( key, \"\" );\n+        }\n+        else\n+        {\n+           map.put ( key, value );\n+        }\n+    }\n+\n+\n+}\n--- a/src/java/org/apache/commons/collections/MultiHashMap.java\n+++ b/src/java/org/apache/commons/collections/MultiHashMap.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MultiHashMap.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.*;\n-import java.io.*;\n-\n-/** see MultiMap for details of an important semantic difference\n- * between this and a typical HashMap\n- *\n- * @author Christopher Berry\n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n- */\n-public class MultiHashMap extends HashMap implements MultiMap\n-{\n-    //----------------- Data\n-    private static int sCount = 0;\n-    private String mName = null;\n-    \n-    public MultiHashMap()\n-    {\n-        super();\n-        setName();\n-    }\n-    \n-    public MultiHashMap( int initialCapacity )\n-    {\n-        super( initialCapacity );\n-        setName();\n-    }\n-    \n-    public MultiHashMap(int initialCapacity, float loadFactor )\n-    {\n-        super( initialCapacity, loadFactor);\n-        setName();\n-    }\n-    \n-    public MultiHashMap( Map mapToCopy )\n-    {\n-        super( mapToCopy );\n-    }\n-    \n-    private void setName()\n-    {\n-        sCount++;\n-        mName = \"MultiMap-\" + sCount;\n-    }\n-    \n-    public String getName()\n-    { return mName; }\n-    \n-    public Object put( Object key, Object value )\n-    {\n-        // NOTE:: put might be called during deserialization !!!!!!\n-        //        so we must provide a hook to handle this case\n-        //        This means that we cannot make MultiMaps of ArrayLists !!!\n-        \n-        if ( value instanceof ArrayList ) {\n-            return ( super.put( key, value ) );\n-        }\n-        \n-        ArrayList keyList = (ArrayList)(super.get( key ));\n-        if ( keyList == null ) {\n-            keyList = new ArrayList(10);\n-            \n-            super.put( key, keyList );\n-        }\n-        \n-        boolean results = keyList.add( value );\n-        \n-        return ( results ? value : null );\n-    }\n-    \n-    public boolean containsValue( Object value )\n-    {\n-        Set pairs = super.entrySet();\n-        \n-        if ( pairs == null )\n-            return false;\n-        \n-        Iterator pairsIterator = pairs.iterator();\n-        while ( pairsIterator.hasNext() ) {\n-            Map.Entry keyValuePair = (Map.Entry)(pairsIterator.next());\n-            ArrayList list = (ArrayList)(keyValuePair.getValue());\n-            if( list.contains( value ) )\n-                return true;\n-        }\n-        return false;\n-    }\n-    \n-    public Object remove( Object key, Object item )\n-    {\n-        ArrayList valuesForKey = (ArrayList) super.get( key );\n-        \n-        if ( valuesForKey == null )\n-            return null;\n-        \n-        valuesForKey.remove( item );\n-        return item;\n-    }\n-    \n-    public void clear()\n-    {\n-        Set pairs = super.entrySet();\n-        Iterator pairsIterator = pairs.iterator();\n-        while ( pairsIterator.hasNext() ) {\n-            Map.Entry keyValuePair = (Map.Entry)(pairsIterator.next());\n-            ArrayList list = (ArrayList)(keyValuePair.getValue());\n-            list.clear();\n-        }\n-        super.clear();\n-    }\n-    \n-    public void putAll( Map mapToPut )\n-    {\n-        super.putAll( mapToPut );\n-    }\n-    \n-    public Collection values()\n-    {\n-        ArrayList returnList = new ArrayList( super.size() );\n-        \n-        Set pairs = super.entrySet();\n-        Iterator pairsIterator = pairs.iterator();\n-        while ( pairsIterator.hasNext() ) {\n-            Map.Entry keyValuePair = (Map.Entry)(pairsIterator.next());\n-            ArrayList list = (ArrayList)(keyValuePair.getValue());\n-            \n-            Object[] values = list.toArray();\n-            for( int ii=0; ii < values.length; ii++ ) {\n-                boolean successfulAdd = returnList.add( values[ii] );\n-            }\n-        }\n-        return returnList;\n-    }\n-    \n-    // FIXME:: do we need to implement this??\n-    // public boolean equals( Object obj ) {}\n-    \n-    // --------------- From Cloneable\n-    public Object clone()\n-    {\n-        MultiHashMap obj = (MultiHashMap)(super.clone());\n-        obj.mName = mName;\n-        return obj;\n-    }\n-    \n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MultiHashMap.java,v 1.3 2002/03/13 05:40:31 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/13 05:40:31 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.*;\n+import java.io.*;\n+\n+/** see MultiMap for details of an important semantic difference\n+ * between this and a typical HashMap\n+ *\n+ * @author Christopher Berry\n+ * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ */\n+public class MultiHashMap extends HashMap implements MultiMap\n+{\n+    //----------------- Data\n+    private static int sCount = 0;\n+    private String mName = null;\n+    \n+    public MultiHashMap()\n+    {\n+        super();\n+        setName();\n+    }\n+    \n+    public MultiHashMap( int initialCapacity )\n+    {\n+        super( initialCapacity );\n+        setName();\n+    }\n+    \n+    public MultiHashMap(int initialCapacity, float loadFactor )\n+    {\n+        super( initialCapacity, loadFactor);\n+        setName();\n+    }\n+    \n+    public MultiHashMap( Map mapToCopy )\n+    {\n+        super( mapToCopy );\n+    }\n+    \n+    private void setName()\n+    {\n+        sCount++;\n+        mName = \"MultiMap-\" + sCount;\n+    }\n+    \n+    public String getName()\n+    { return mName; }\n+    \n+    public Object put( Object key, Object value )\n+    {\n+        // NOTE:: put might be called during deserialization !!!!!!\n+        //        so we must provide a hook to handle this case\n+        //        This means that we cannot make MultiMaps of ArrayLists !!!\n+        \n+        if ( value instanceof ArrayList ) {\n+            return ( super.put( key, value ) );\n+        }\n+        \n+        ArrayList keyList = (ArrayList)(super.get( key ));\n+        if ( keyList == null ) {\n+            keyList = new ArrayList(10);\n+            \n+            super.put( key, keyList );\n+        }\n+        \n+        boolean results = keyList.add( value );\n+        \n+        return ( results ? value : null );\n+    }\n+    \n+    public boolean containsValue( Object value )\n+    {\n+        Set pairs = super.entrySet();\n+        \n+        if ( pairs == null )\n+            return false;\n+        \n+        Iterator pairsIterator = pairs.iterator();\n+        while ( pairsIterator.hasNext() ) {\n+            Map.Entry keyValuePair = (Map.Entry)(pairsIterator.next());\n+            ArrayList list = (ArrayList)(keyValuePair.getValue());\n+            if( list.contains( value ) )\n+                return true;\n+        }\n+        return false;\n+    }\n+    \n+    public Object remove( Object key, Object item )\n+    {\n+        ArrayList valuesForKey = (ArrayList) super.get( key );\n+        \n+        if ( valuesForKey == null )\n+            return null;\n+        \n+        valuesForKey.remove( item );\n+        return item;\n+    }\n+    \n+    public void clear()\n+    {\n+        Set pairs = super.entrySet();\n+        Iterator pairsIterator = pairs.iterator();\n+        while ( pairsIterator.hasNext() ) {\n+            Map.Entry keyValuePair = (Map.Entry)(pairsIterator.next());\n+            ArrayList list = (ArrayList)(keyValuePair.getValue());\n+            list.clear();\n+        }\n+        super.clear();\n+    }\n+    \n+    public void putAll( Map mapToPut )\n+    {\n+        super.putAll( mapToPut );\n+    }\n+    \n+    public Collection values()\n+    {\n+        ArrayList returnList = new ArrayList( super.size() );\n+        \n+        Set pairs = super.entrySet();\n+        Iterator pairsIterator = pairs.iterator();\n+        while ( pairsIterator.hasNext() ) {\n+            Map.Entry keyValuePair = (Map.Entry)(pairsIterator.next());\n+            ArrayList list = (ArrayList)(keyValuePair.getValue());\n+            \n+            Object[] values = list.toArray();\n+            for( int ii=0; ii < values.length; ii++ ) {\n+                boolean successfulAdd = returnList.add( values[ii] );\n+            }\n+        }\n+        return returnList;\n+    }\n+    \n+    // FIXME:: do we need to implement this??\n+    // public boolean equals( Object obj ) {}\n+    \n+    // --------------- From Cloneable\n+    public Object clone()\n+    {\n+        MultiHashMap obj = (MultiHashMap)(super.clone());\n+        obj.mName = mName;\n+        return obj;\n+    }\n+    \n+}\n--- a/src/java/org/apache/commons/collections/MultiMap.java\n+++ b/src/java/org/apache/commons/collections/MultiMap.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MultiMap.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.Map;\n-\n-/** \n- * This is simply a Map with slightly different semantics.\n- * Instead of returning an Object, it returns a Collection.\n- * So for example, you can put( key, new Integer(1) ); \n- * and then a Object get( key ); will return you a Collection \n- * instead of an Integer.\n- * Thus, this is simply a tag interface.\n- *\n- * @author Christopher Berry\n- * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n- */\n-public interface MultiMap extends Map {\n-    \n-    public Object remove( Object key, Object item );\n-   \n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/MultiMap.java,v 1.3 2002/03/13 05:40:31 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/13 05:40:31 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Map;\n+\n+/** \n+ * This is simply a Map with slightly different semantics.\n+ * Instead of returning an Object, it returns a Collection.\n+ * So for example, you can put( key, new Integer(1) ); \n+ * and then a Object get( key ); will return you a Collection \n+ * instead of an Integer.\n+ * Thus, this is simply a tag interface.\n+ *\n+ * @author Christopher Berry\n+ * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+ */\n+public interface MultiMap extends Map {\n+    \n+    public Object remove( Object key, Object item );\n+   \n+}\n--- a/src/java/org/apache/commons/collections/Predicate.java\n+++ b/src/java/org/apache/commons/collections/Predicate.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Predicate.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-/** Performs some predicate which returns true or false based on the input object.\n-  * Predicate instances can be used to implement queries or to do filtering.\n-  *\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  */\n-public interface Predicate {\n-\n-    /** @return true if the input object matches this predicate, else returns false\n-      */\n-    public boolean evaluate(Object input);\n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Predicate.java,v 1.3 2002/03/13 05:40:31 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/13 05:40:31 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+/** Performs some predicate which returns true or false based on the input object.\n+  * Predicate instances can be used to implement queries or to do filtering.\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  */\n+public interface Predicate {\n+\n+    /** @return true if the input object matches this predicate, else returns false\n+      */\n+    public boolean evaluate(Object input);\n+}\n--- a/src/java/org/apache/commons/collections/SingletonIterator.java\n+++ b/src/java/org/apache/commons/collections/SingletonIterator.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/SingletonIterator.java,v 1.3 2002/02/26 21:30:40 morgand Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/02/26 21:30:40 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.Iterator;\n-import java.util.NoSuchElementException;\n-\n-/** <p><code>SingletonIterator</code> is an {@link Iterator} over a single \n-  * object instance.</p>\n-  *\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  * @version $Revision: 1.3 $\n-  */\n-public class SingletonIterator implements Iterator {\n-\n-    private boolean first = true;\n-    private Object object;\n-    \n-    public SingletonIterator(Object object) {\n-        this.object = object;\n-    }\n-\n-    public boolean hasNext() {\n-        return first;\n-    }\n-\n-    public Object next() {\n-        if (! first ) {\n-            throw new NoSuchElementException();\n-        }\n-        Object answer = object;\n-        object = null;\n-        first = false;\n-        return answer;\n-    }\n-\n-    public void remove() {\n-        throw new UnsupportedOperationException( \"remove() is not supported by this iterator\" );\n-    }\n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/SingletonIterator.java,v 1.4 2002/03/13 05:40:31 mas Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/03/13 05:40:31 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/** <p><code>SingletonIterator</code> is an {@link Iterator} over a single \n+  * object instance.</p>\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @version $Revision: 1.4 $\n+  */\n+public class SingletonIterator implements Iterator {\n+\n+    private boolean first = true;\n+    private Object object;\n+    \n+    public SingletonIterator(Object object) {\n+        this.object = object;\n+    }\n+\n+    public boolean hasNext() {\n+        return first;\n+    }\n+\n+    public Object next() {\n+        if (! first ) {\n+            throw new NoSuchElementException();\n+        }\n+        Object answer = object;\n+        object = null;\n+        first = false;\n+        return answer;\n+    }\n+\n+    public void remove() {\n+        throw new UnsupportedOperationException( \"remove() is not supported by this iterator\" );\n+    }\n+}\n--- a/src/java/org/apache/commons/collections/SoftRefHashMap.java\n+++ b/src/java/org/apache/commons/collections/SoftRefHashMap.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/SoftRefHashMap.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-import java.lang.ref.*;\n-import java.lang.reflect.*;\n-import java.util.*;\n-\n-/** <p>\n-  * HashMap with SoftReference links to values which allows the values of the Map\n-  * to be garbage collected by the JVM if it becomes low on memory.  \n-  * Derive from this class and \n-  * override the factory method <code>createReference()</code> method to make \n-  * a Map wrapped in other types of Reference.\n-  * </p>\n-  * \n-  * <p>\n-  * A synchronized version can be obtained with:\n-  * <code>Collections.synchronizedMap( theMapToSynchronize )</code>\n-  * </p>\n-  *\n-  * <p>\n-  * <b>WARNING</b> the values() and entrySet() methods require optimisation\n-  * like the standard {@link HashMap} implementations so that iteration\n-  * over this Map is efficient.\n-  * </p>\n-  * \n-  * @author  James.Dodd\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  */\n-public class SoftRefHashMap implements Map {\n-    \n-    /** The wrapped HashMap */\n-    private Map hashMap = new HashMap();\n-\n-    \n-    public SoftRefHashMap() {\n-    }\n-\n-    \n-    /** \n-     * Removes References that have had their referents garbage collected\n-     */\n-    public void purge() {\n-        Map map = getMap();\n-        Set keys = map.keySet();\n-        if ( keys == null ) {\n-            return;\n-        }\n-        for ( Iterator i = keys.iterator(); i.hasNext(); ) {\n-            Object key = (Object) i.next();\n-            Reference ref = (Reference) map.get( key );\n-            if ( ref.get() == null ) {\n-                map.remove( key );\n-            }\n-        }\n-    }\n-    \n-    // Map implementation\n-    // -------------------------------------------------------\n-\n-    /**\n-     * Retrieves the referent of the Referenced value\n-     * @param key The key with which to retrieve the value\n-     */\n-    public Object get( final Object key ) {\n-        Reference ref = (Reference) getMap().get( key );\n-        if ( ref == null ) {\n-            return null;\n-        }\n-        return ref.get();    \n-    }\n-    \n-    /**\n-     * Adds a key-value mapping, wrapping the value in a Reference \n-     */\n-    public Object put( final Object key, final Object value ) {\n-        Object answer = getMap().put( key, createReference( value ) );\n-        if ( answer != null ) {\n-            return ((Reference) answer).get();\n-        }\n-        return null;\n-    }\n-\n-    /** \n-      * Returns a collection of the Referenced values\n-      */\n-    public Collection values() {\n-        Set wrappedValues = (Set) getMap().values();\n-        Set values = new TreeSet();\n-        if ( wrappedValues == null ) {\n-            return values;\n-        }\n-        for ( Iterator i = wrappedValues.iterator(); i.hasNext(); ) {\n-            Reference ref = (Reference) i.next();\n-            if ( ref != null ) {\n-                values.add( ref.get() );\n-            }\n-        }\n-        return values;\n-    }\n-\n-    /**\n-     * Answers whether the argument is in the domain of the mappings\n-     */\n-    public boolean containsKey( Object key ) {\n-        return getMap().containsKey( key );\n-    }\n-\n-    /**\n-     * Answers whether the argument is a Referenced value\n-     */\n-    public boolean containsValue( Object value ) {\n-        Collection values = (Collection) getMap().values();\n-        if ( values == null ) {\n-            return false;\n-        }\n-        for ( Iterator i = values.iterator(); i.hasNext(); ) {\n-            Reference ref = (Reference) i.next();\n-            if ( ref == null ) {\n-                continue;\n-            }\n-            Object target = ref.get();\n-            if ( target == value ) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    /** \n-      * Put all of the mappings in the argument into this wrapped map\n-      */\n-    public void putAll( final java.util.Map map ) {\n-        if ( map == null || map.size() == 0 ) {\n-            return;\n-        }   \n-        for ( Iterator i = map.keySet().iterator(); i.hasNext(); ) {\n-            Object key = (Object) i.next();\n-            put( key, map.get( key ) );\n-        }\n-    }\n-    \n-    /**\n-      * Returns a set view of the mappings in the wrapped map\n-      */\n-    public Set entrySet() {\n-        Set entries = new HashSet();\n-        if ( size() == 0 ) {\n-            return entries;\n-        }\n-        for ( Iterator i = keySet().iterator(); i.hasNext(); ) {\n-            Object key = i.next();\n-            Object value = get( key );\n-            Entry entry = new Entry( key, value );\n-            entries.add( entry );\n-        }\n-        return entries;\n-    }\n-    \n-    /** \n-      * Removes a mapping from this map\n-      */\n-    public Object remove( final Object key ) {\n-        Reference ref = (Reference) getMap().remove( key );\n-        if ( ref != null ) {\n-            return ref.get();\n-        }\n-        return null;\n-    }\n-    \n-    /** \n-      * Clears all  mappings \n-      */\n-    public void clear() {\n-        getMap().clear();\n-    }\n-\n-    /** \n-      * Calculates the hash code for this map\n-      */\n-    public int hashCode() {\n-        return getMap().hashCode();\n-    }\n-    \n-    /** \n-      * Returns the domain of the mappings\n-      */\n-    public Set keySet() {\n-        return getMap().keySet();\n-    }\n-               \n-    /** \n-      * Answers whether there are any mappings\n-      */\n-    public boolean isEmpty() {\n-        return getMap().isEmpty();\n-    }\n-    \n-    /** \n-      * Answers whether this map and the argument are 'the same' \n-      */\n-    public boolean equals( final Object object ) {\n-        return getMap().equals( object );\n-    }\n-    \n-    /**\n-      * Returns the number of mappings in this map\n-      */\n-    public int size() {\n-        return getMap().size();\n-    }\n-    \n-    // Inner Classes \n-    // ---------------------------------------------------------------------\n-    \n-    /** \n-     * A map entry, which is backed by this RefHashMap\n-     */\n-    class Entry implements Map.Entry {\n-        \n-        /**\n-         * Constructor\n-         */\n-        public Entry( Object key, Object value ) {\n-            this.key = key;\n-            this.value = value;\n-        }\n-\n-        // Map.Entry interface\n-        // -----------------------------------------------------------\n-        \n-        /**\n-         * Retrieves the key of this mapping\n-         */\n-        public Object getKey() {\n-            return key;\n-        }\n-        \n-        /**\n-         * Retrieves the value of this mapping\n-         */\n-        public Object getValue() {\n-           return value;\n-        }\n-        \n-        /**\n-         * Sets the value of this mapping\n-         */\n-        public Object setValue( Object value ) {\n-            this.value = value;\n-            put( key, value ); \n-            return value;\n-        }\n-        \n-        /**\n-         * Return the hash code of this mapping.\n-         * This algorithm was taken from the JavaDoc for Map.Entry\n-         */\n-        public int hashCode() {\n-            return ( getKey() == null ? 0 : getKey().hashCode() ) ^\n-                ( getValue() == null ? 0 : getValue().hashCode() );\n-         }\n-        \n-        /** The domain of this mapping */\n-        private Object key;\n-        /** The range of this mapping */\n-        private Object value;    \n-    }\n-\n-    /**\n-     * Returns a reference to the argument.\n-     * Override this method to make wrapped maps for other Reference types\n-     */\n-    protected Reference createReference( Object referent ) {\n-        return new SoftReference( referent );\n-    }\n-    \n-    /** \n-     * Retrieves the wrapped HashMap\n-     * @return The wrapped HashMap\n-     */\n-    protected Map getMap() {\n-        return hashMap;\n-    }\n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/SoftRefHashMap.java,v 1.3 2002/03/13 05:40:31 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/13 05:40:31 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.lang.ref.*;\n+import java.lang.reflect.*;\n+import java.util.*;\n+\n+/** <p>\n+  * HashMap with SoftReference links to values which allows the values of the Map\n+  * to be garbage collected by the JVM if it becomes low on memory.  \n+  * Derive from this class and \n+  * override the factory method <code>createReference()</code> method to make \n+  * a Map wrapped in other types of Reference.\n+  * </p>\n+  * \n+  * <p>\n+  * A synchronized version can be obtained with:\n+  * <code>Collections.synchronizedMap( theMapToSynchronize )</code>\n+  * </p>\n+  *\n+  * <p>\n+  * <b>WARNING</b> the values() and entrySet() methods require optimisation\n+  * like the standard {@link HashMap} implementations so that iteration\n+  * over this Map is efficient.\n+  * </p>\n+  * \n+  * @author  James.Dodd\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  */\n+public class SoftRefHashMap implements Map {\n+    \n+    /** The wrapped HashMap */\n+    private Map hashMap = new HashMap();\n+\n+    \n+    public SoftRefHashMap() {\n+    }\n+\n+    \n+    /** \n+     * Removes References that have had their referents garbage collected\n+     */\n+    public void purge() {\n+        Map map = getMap();\n+        Set keys = map.keySet();\n+        if ( keys == null ) {\n+            return;\n+        }\n+        for ( Iterator i = keys.iterator(); i.hasNext(); ) {\n+            Object key = (Object) i.next();\n+            Reference ref = (Reference) map.get( key );\n+            if ( ref.get() == null ) {\n+                map.remove( key );\n+            }\n+        }\n+    }\n+    \n+    // Map implementation\n+    // -------------------------------------------------------\n+\n+    /**\n+     * Retrieves the referent of the Referenced value\n+     * @param key The key with which to retrieve the value\n+     */\n+    public Object get( final Object key ) {\n+        Reference ref = (Reference) getMap().get( key );\n+        if ( ref == null ) {\n+            return null;\n+        }\n+        return ref.get();    \n+    }\n+    \n+    /**\n+     * Adds a key-value mapping, wrapping the value in a Reference \n+     */\n+    public Object put( final Object key, final Object value ) {\n+        Object answer = getMap().put( key, createReference( value ) );\n+        if ( answer != null ) {\n+            return ((Reference) answer).get();\n+        }\n+        return null;\n+    }\n+\n+    /** \n+      * Returns a collection of the Referenced values\n+      */\n+    public Collection values() {\n+        Set wrappedValues = (Set) getMap().values();\n+        Set values = new TreeSet();\n+        if ( wrappedValues == null ) {\n+            return values;\n+        }\n+        for ( Iterator i = wrappedValues.iterator(); i.hasNext(); ) {\n+            Reference ref = (Reference) i.next();\n+            if ( ref != null ) {\n+                values.add( ref.get() );\n+            }\n+        }\n+        return values;\n+    }\n+\n+    /**\n+     * Answers whether the argument is in the domain of the mappings\n+     */\n+    public boolean containsKey( Object key ) {\n+        return getMap().containsKey( key );\n+    }\n+\n+    /**\n+     * Answers whether the argument is a Referenced value\n+     */\n+    public boolean containsValue( Object value ) {\n+        Collection values = (Collection) getMap().values();\n+        if ( values == null ) {\n+            return false;\n+        }\n+        for ( Iterator i = values.iterator(); i.hasNext(); ) {\n+            Reference ref = (Reference) i.next();\n+            if ( ref == null ) {\n+                continue;\n+            }\n+            Object target = ref.get();\n+            if ( target == value ) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /** \n+      * Put all of the mappings in the argument into this wrapped map\n+      */\n+    public void putAll( final java.util.Map map ) {\n+        if ( map == null || map.size() == 0 ) {\n+            return;\n+        }   \n+        for ( Iterator i = map.keySet().iterator(); i.hasNext(); ) {\n+            Object key = (Object) i.next();\n+            put( key, map.get( key ) );\n+        }\n+    }\n+    \n+    /**\n+      * Returns a set view of the mappings in the wrapped map\n+      */\n+    public Set entrySet() {\n+        Set entries = new HashSet();\n+        if ( size() == 0 ) {\n+            return entries;\n+        }\n+        for ( Iterator i = keySet().iterator(); i.hasNext(); ) {\n+            Object key = i.next();\n+            Object value = get( key );\n+            Entry entry = new Entry( key, value );\n+            entries.add( entry );\n+        }\n+        return entries;\n+    }\n+    \n+    /** \n+      * Removes a mapping from this map\n+      */\n+    public Object remove( final Object key ) {\n+        Reference ref = (Reference) getMap().remove( key );\n+        if ( ref != null ) {\n+            return ref.get();\n+        }\n+        return null;\n+    }\n+    \n+    /** \n+      * Clears all  mappings \n+      */\n+    public void clear() {\n+        getMap().clear();\n+    }\n+\n+    /** \n+      * Calculates the hash code for this map\n+      */\n+    public int hashCode() {\n+        return getMap().hashCode();\n+    }\n+    \n+    /** \n+      * Returns the domain of the mappings\n+      */\n+    public Set keySet() {\n+        return getMap().keySet();\n+    }\n+               \n+    /** \n+      * Answers whether there are any mappings\n+      */\n+    public boolean isEmpty() {\n+        return getMap().isEmpty();\n+    }\n+    \n+    /** \n+      * Answers whether this map and the argument are 'the same' \n+      */\n+    public boolean equals( final Object object ) {\n+        return getMap().equals( object );\n+    }\n+    \n+    /**\n+      * Returns the number of mappings in this map\n+      */\n+    public int size() {\n+        return getMap().size();\n+    }\n+    \n+    // Inner Classes \n+    // ---------------------------------------------------------------------\n+    \n+    /** \n+     * A map entry, which is backed by this RefHashMap\n+     */\n+    class Entry implements Map.Entry {\n+        \n+        /**\n+         * Constructor\n+         */\n+        public Entry( Object key, Object value ) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        // Map.Entry interface\n+        // -----------------------------------------------------------\n+        \n+        /**\n+         * Retrieves the key of this mapping\n+         */\n+        public Object getKey() {\n+            return key;\n+        }\n+        \n+        /**\n+         * Retrieves the value of this mapping\n+         */\n+        public Object getValue() {\n+           return value;\n+        }\n+        \n+        /**\n+         * Sets the value of this mapping\n+         */\n+        public Object setValue( Object value ) {\n+            this.value = value;\n+            put( key, value ); \n+            return value;\n+        }\n+        \n+        /**\n+         * Return the hash code of this mapping.\n+         * This algorithm was taken from the JavaDoc for Map.Entry\n+         */\n+        public int hashCode() {\n+            return ( getKey() == null ? 0 : getKey().hashCode() ) ^\n+                ( getValue() == null ? 0 : getValue().hashCode() );\n+         }\n+        \n+        /** The domain of this mapping */\n+        private Object key;\n+        /** The range of this mapping */\n+        private Object value;    \n+    }\n+\n+    /**\n+     * Returns a reference to the argument.\n+     * Override this method to make wrapped maps for other Reference types\n+     */\n+    protected Reference createReference( Object referent ) {\n+        return new SoftReference( referent );\n+    }\n+    \n+    /** \n+     * Retrieves the wrapped HashMap\n+     * @return The wrapped HashMap\n+     */\n+    protected Map getMap() {\n+        return hashMap;\n+    }\n+}\n--- a/src/java/org/apache/commons/collections/SortedBag.java\n+++ b/src/java/org/apache/commons/collections/SortedBag.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SortedBag.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-\n-package org.apache.commons.collections;\n-\n-import java.util.Comparator;\n-\n-/**\n- * A type of {@link Bag} that maintains order among its unique\n- * representative members.\n- * @author Chuck Burdick\n- **/\n-public interface SortedBag extends Bag {\n-\n-   /**\n-    * Returns the comparator associated with this sorted set, or null\n-    * if it uses its elements' natural ordering.\n-    **/\n-   public Comparator comparator();\n-\n-   /**\n-    * Returns the first (lowest) member.\n-    **/\n-   public Object first();\n-\n-   /**\n-    * Returns the last (highest) member.\n-    **/\n-   public Object last();\n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SortedBag.java,v 1.3 2002/03/13 05:40:31 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/13 05:40:31 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * A type of {@link Bag} that maintains order among its unique\n+ * representative members.\n+ * @author Chuck Burdick\n+ **/\n+public interface SortedBag extends Bag {\n+\n+   /**\n+    * Returns the comparator associated with this sorted set, or null\n+    * if it uses its elements' natural ordering.\n+    **/\n+   public Comparator comparator();\n+\n+   /**\n+    * Returns the first (lowest) member.\n+    **/\n+   public Object first();\n+\n+   /**\n+    * Returns the last (highest) member.\n+    **/\n+   public Object last();\n+}\n--- a/src/java/org/apache/commons/collections/TransformIterator.java\n+++ b/src/java/org/apache/commons/collections/TransformIterator.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/TransformIterator.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.Enumeration;\n-import java.util.Iterator;\n-\n-/** A Proxy {@link Iterator Iterator} which uses a {@link Transformer Transformer} instance to \n-  * transform the contents of the {@link Iterator Iterator} into some other form\n-  *\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  */\n-\n-public class TransformIterator extends ProxyIterator {\n-    \n-    /** Holds value of property transformer. */\n-    private Transformer transformer;\n-    \n-    \n-    public TransformIterator() {\n-    }\n-    \n-    public TransformIterator( Iterator iterator ) {\n-        super( iterator );\n-    }\n-\n-    public TransformIterator( Iterator iterator, Transformer transformer ) {\n-        super( iterator );\n-        this.transformer = transformer;\n-    }\n-\n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-    public Object next() {\n-        return transform( super.next() );\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-    /** Getter for property transformer.\n-     * @return Value of property transformer.\n-     */\n-    public Transformer getTransformer() {\n-        return transformer;\n-    }\n-    /** Setter for property transformer.\n-     * @param transformer New value of property transformer.\n-     */\n-    public void setTransformer(Transformer transformer) {\n-        this.transformer = transformer;\n-    }\n-    \n-    // Implementation methods\n-    //-------------------------------------------------------------------------\n-    protected Object transform( Object source ) {\n-        Transformer transformer = getTransformer();\n-        if ( transformer != null ) {\n-            return transformer.transform( source );\n-        }\n-        return source;\n-    }\n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/TransformIterator.java,v 1.3 2002/03/13 05:40:31 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/13 05:40:31 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+\n+/** A Proxy {@link Iterator Iterator} which uses a {@link Transformer Transformer} instance to \n+  * transform the contents of the {@link Iterator Iterator} into some other form\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  */\n+\n+public class TransformIterator extends ProxyIterator {\n+    \n+    /** Holds value of property transformer. */\n+    private Transformer transformer;\n+    \n+    \n+    public TransformIterator() {\n+    }\n+    \n+    public TransformIterator( Iterator iterator ) {\n+        super( iterator );\n+    }\n+\n+    public TransformIterator( Iterator iterator, Transformer transformer ) {\n+        super( iterator );\n+        this.transformer = transformer;\n+    }\n+\n+    // Iterator interface\n+    //-------------------------------------------------------------------------\n+    public Object next() {\n+        return transform( super.next() );\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+    /** Getter for property transformer.\n+     * @return Value of property transformer.\n+     */\n+    public Transformer getTransformer() {\n+        return transformer;\n+    }\n+    /** Setter for property transformer.\n+     * @param transformer New value of property transformer.\n+     */\n+    public void setTransformer(Transformer transformer) {\n+        this.transformer = transformer;\n+    }\n+    \n+    // Implementation methods\n+    //-------------------------------------------------------------------------\n+    protected Object transform( Object source ) {\n+        Transformer transformer = getTransformer();\n+        if ( transformer != null ) {\n+            return transformer.transform( source );\n+        }\n+        return source;\n+    }\n+}\n--- a/src/java/org/apache/commons/collections/Transformer.java\n+++ b/src/java/org/apache/commons/collections/Transformer.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Transformer.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-/** An object capable of transforming an input object into some output object.\n-  *\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  */\n-public interface Transformer {\n-\n-    /** Transforms the input object (leaving it unchanged) into some output object.\n-      * @return the transformation of the input object to the output object\n-      */\n-    public Object transform(Object input);\n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Transformer.java,v 1.3 2002/03/13 05:40:31 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/13 05:40:31 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+/** An object capable of transforming an input object into some output object.\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  */\n+public interface Transformer {\n+\n+    /** Transforms the input object (leaving it unchanged) into some output object.\n+      * @return the transformation of the input object to the output object\n+      */\n+    public Object transform(Object input);\n+}\n--- a/src/java/org/apache/commons/collections/TreeBag.java\n+++ b/src/java/org/apache/commons/collections/TreeBag.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TreeBag.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-\n-package org.apache.commons.collections;\n-\n-import java.util.Collection;\n-import java.util.Comparator;\n-import java.util.SortedMap;\n-import java.util.TreeMap;\n-\n-/**\n- * An implementation of {@link Bag} that is backed by a {@link\n- * TreeMap}. Order will be maintained among the unique representative\n- * members.\n- *\n- * @author Chuck Burdick\n- **/\n-public class TreeBag extends AbstractBag implements SortedBag, Bag {\n-   public TreeBag() {\n-      setMap(new TreeMap());\n-   }\n-\n-   /**\n-    * New {@link Bag} that maintains order on its unique\n-    * representative members according to the given {@link\n-    * Comparator}.\n-    **/\n-   public TreeBag(Comparator c) {\n-      setMap(new TreeMap(c));\n-   }\n-\n-   /**\n-    * New {@link Bag} containing all the members of the given\n-    * collection.\n-    * @see #addAll\n-    **/\n-   public TreeBag(Collection c) {\n-      this();\n-      addAll(c);\n-   }\n-\n-   public Object first() {\n-      return ((SortedMap)getMap()).firstKey();\n-   }\n-\n-   public Object last() {\n-      return ((SortedMap)getMap()).lastKey();\n-   }\n-\n-   public Comparator comparator() {\n-      return ((SortedMap)getMap()).comparator();\n-   }\n-}\n-\n-\n-\n-\n-\n-\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/TreeBag.java,v 1.3 2002/03/13 05:40:31 mas Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/03/13 05:40:31 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+import java.util.Comparator;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * An implementation of {@link Bag} that is backed by a {@link\n+ * TreeMap}. Order will be maintained among the unique representative\n+ * members.\n+ *\n+ * @author Chuck Burdick\n+ **/\n+public class TreeBag extends AbstractBag implements SortedBag, Bag {\n+   public TreeBag() {\n+      setMap(new TreeMap());\n+   }\n+\n+   /**\n+    * New {@link Bag} that maintains order on its unique\n+    * representative members according to the given {@link\n+    * Comparator}.\n+    **/\n+   public TreeBag(Comparator c) {\n+      setMap(new TreeMap(c));\n+   }\n+\n+   /**\n+    * New {@link Bag} containing all the members of the given\n+    * collection.\n+    * @see #addAll\n+    **/\n+   public TreeBag(Collection c) {\n+      this();\n+      addAll(c);\n+   }\n+\n+   public Object first() {\n+      return ((SortedMap)getMap()).firstKey();\n+   }\n+\n+   public Object last() {\n+      return ((SortedMap)getMap()).lastKey();\n+   }\n+\n+   public Comparator comparator() {\n+      return ((SortedMap)getMap()).comparator();\n+   }\n+}\n+\n+\n+\n+\n+\n+", "timestamp": 1015998031, "metainfo": ""}