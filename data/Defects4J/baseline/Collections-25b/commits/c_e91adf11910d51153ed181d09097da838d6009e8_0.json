{"sha": "e91adf11910d51153ed181d09097da838d6009e8", "log": "Added Jan Sorensen's Test for FilterIterator. Submitted by:\tJan Sorensen <jan.sorensen@aragost.com>   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestFilterIterator.java\n+// TestFilterIterator.java \n+package org.apache.commons.collections;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.framework.Test;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ *\n+ * @author  Jan Sorensen\n+ */\n+public class TestFilterIterator extends TestCase {\n+\n+    /** Creates new TestFilterIterator */\n+    public TestFilterIterator(String name) {\n+        super(name);\n+    }\n+\n+    private String[] array;\n+    private FilterIterator iterator;\n+    /**\n+     * Set up instance variables required by this test case.\n+     */\n+    public void setUp() {\n+        array = new String[] { \"a\", \"b\", \"c\" };\n+        initIterator();\n+    }\n+\n+    /**\n+     * Tear down instance variables required by this test case.\n+     */\n+    public void tearDown() {\n+        iterator = null;\n+    }\n+\n+    /**\n+     * Return the tests included in this test suite.\n+     */\n+    public static Test suite() {\n+        return (new TestSuite(TestFilterIterator.class));\n+    }\n+\n+    public void testRepeatedHasNext() {\n+        for (int i = 0; i <= array.length; i++) {\n+            assertTrue(iterator.hasNext());\n+        }\n+    }\n+\n+    public void testRepeatedNext() {\n+        for (int i = 0; i < array.length; i++)\n+            iterator.next();\n+        verifyNoMoreElements();\n+    }\n+\n+    public void testReturnValues() {\n+        verifyElementsInPredicate(new String[0]);\n+        verifyElementsInPredicate(new String[] { \"a\" });\n+        verifyElementsInPredicate(new String[] { \"b\" });\n+        verifyElementsInPredicate(new String[] { \"c\" });\n+        verifyElementsInPredicate(new String[] { \"a\", \"b\" });\n+        verifyElementsInPredicate(new String[] { \"a\", \"c\" });\n+        verifyElementsInPredicate(new String[] { \"b\", \"c\" });\n+        verifyElementsInPredicate(new String[] { \"a\", \"b\", \"c\" });\n+    }\n+\n+    private void verifyNoMoreElements() {\n+        assertTrue(!iterator.hasNext());\n+        try {\n+            iterator.next();\n+            fail(\"NoSuchElementException expected\");\n+        }\n+        catch (NoSuchElementException e) {\n+            // success\n+        }\n+    }\n+\n+    private void verifyElementsInPredicate(final String[] elements) {\n+        Predicate pred = new Predicate() {\n+            public boolean evaluate(Object x) {\n+                for (int i = 0; i < elements.length; i++)\n+                    if (elements[i].equals(x))\n+                        return true;\n+                return false;\n+            }\n+        };\n+        initIterator();\n+        iterator.setPredicate(pred);\n+        for (int i = 0; i < elements.length; i++) {\n+            String s = (String)iterator.next();\n+            assertEquals(elements[i], s);\n+            assertTrue(i == elements.length - 1 ? !iterator.hasNext() : iterator.hasNext());\n+        }\n+        verifyNoMoreElements();\n+    }\n+\n+    private void initIterator() {\n+        iterator = new FilterIterator(new ArrayIterator(array));\n+        Predicate pred = new Predicate() {\n+            public boolean evaluate(Object x) { return true; }\n+        };\n+        iterator.setPredicate(pred);\n+    }\n+}\n+", "timestamp": 1003523581, "metainfo": ""}