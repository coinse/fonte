{"sha": "1377fa84d78751f3271a9ef51170ce810f2fe112", "log": "Fix javadoc links and code examples.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/EnumerationUtils.java\n+++ b/src/main/java/org/apache/commons/collections4/EnumerationUtils.java\n     }\n \n     /**\n-     * Override toList(Enumeration) for StringTokenizer as it implements Enumeration<String>\n+     * Override toList(Enumeration) for StringTokenizer as it implements Enumeration&lt;Object&gt;\n      * for the sake of backward compatibility.\n      *\n      * @param stringTokenizer  the tokenizer to convert to a {@link #List(String)}\n-     * @return List<String>\n+     * @return a list containing all tokens of the given StringTokenizer\n      */\n     public static List<String> toList(final StringTokenizer stringTokenizer) {\n         final List<String> result = new ArrayList<String>(stringTokenizer.countTokens());\n--- a/src/main/java/org/apache/commons/collections4/comparators/sequence/CommandVisitor.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/sequence/CommandVisitor.java\n  * The first example is a visitor that build the longest common\n  * subsequence:\n  * <pre>\n- * import org.apache.commons.collections.list.difference.CommandVisitor;\n+ * import org.apache.commons.collections4.comparators.sequence.CommandVisitor;\n  * \n  * import java.util.ArrayList;\n  *\n  * The second example is a visitor that shows the commands and the way\n  * they transform the first sequence into the second one:\n  * <pre>\n- * import org.apache.commons.collections.list.difference.CommandVisitor;\n+ * import org.apache.commons.collections4.comparators.sequence.CommandVisitor;\n  * \n  * import java.util.Arrays;\n  * import java.util.ArrayList;\n--- a/src/main/java/org/apache/commons/collections4/comparators/sequence/package-info.java\n+++ b/src/main/java/org/apache/commons/collections4/comparators/sequence/package-info.java\n  * Eugene W. Myers and described in his paper: <a\n  * href=\"http://www.cis.upenn.edu/~bcpierce/courses/dd/papers/diff.ps\">An O(ND)\n  * Difference Algorithm and Its Variations</a>. This algorithm produces\n- * the shortest possible {@link\n- * org.apache.commons.collections.list.difference.EditScript edit script} containing\n- * all the {@link org.apache.commons.collections.list.difference.EditCommand\n- * commands} needed to transform the first sequence into the second\n- * one. The entry point for the user to this algorithm is the {@link\n- * org.apache.commons.collections.list.difference.SequencesComparator\n- * SequencesComparator} class.\n+ * the shortest possible {@link EditScript edit script} containing\n+ * all the {@link EditCommand commands} needed to transform the first sequence\n+ * into the second one.\n+ * The entry point for the user to this algorithm is the\n+ * {@link SequencesComparator} class.\n  * <p>\n  * As explained in Gene Myers paper, the edit script is equivalent to all\n  * other representations and contains all the needed information either\n  * <p>\n  * If the user needs a very fine grained access to the comparison result,\n  * he needs to go through this script by providing a visitor implementing\n- * the {@link org.apache.commons.collections.list.difference.CommandVisitor\n- * CommandVisitor} interface.\n+ * the {@link CommandVisitor} interface.\n  * <p>\n  * Sometimes however, a more synthetic approach is needed. If the user\n  * prefers to see the differences between the two sequences as global\n  * <code>replacement</code> operations acting on complete subsequences of\n  * the original sequences, he will provide an object implementing the\n- * simple {@link org.apache.commons.collections.list.difference.ReplacementsHandler\n- * ReplacementsHandler} interface, using an instance of the {@link\n- * org.apache.commons.collections.list.difference.ReplacementsFinder\n- * ReplacementsFinder} class as a command converting layer between his\n+ * simple {@link ReplacementsHandler} interface, using an instance of the\n+ * {@link ReplacementsFinder} class as a command converting layer between his\n  * object and the edit script. The number of objects which are common to\n  * both initial arrays and hence are skipped between each call to the user\n- * {@link org.apache.commons.collections.list.difference.ReplacementsHandler#handleReplacement\n- * handleReplacement} method is also provided. This allows the user to keep\n- * track of the current index in both arrays if he needs so.\n+ * {@link ReplacementsHandler#handleReplacement handleReplacement} method is\n+ * also provided. This allows the user to keep track of the current index in\n+ * both arrays if he needs so.\n  *\n  * @version $Id$\n  */\n--- a/src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java\n  * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n  * exceptions when accessed by concurrent threads without synchronization.\n  * <p>\n- * <strong>Note that ListOrderedMap doesn't work with {@link IdentityMap},\n- * {@link CaseInsensitiveMap}, or similar maps that violate the general\n- * contract of {@link java.util.Map}.</strong> The <code>ListOrderedMap</code>\n- * (or, more precisely, the underlying <code>List</code>) is relying on\n- * {@link Object#equals(Object) equals()}. This is fine, as long as the\n+ * <strong>Note that ListOrderedMap doesn't work with\n+ * {@link java.util.IdentityHashMap IdentityHashMap}, {@link CaseInsensitiveMap},\n+ * or similar maps that violate the general contract of {@link java.util.Map}.</strong>\n+ * The <code>ListOrderedMap</code> (or, more precisely, the underlying <code>List</code>)\n+ * is relying on {@link Object#equals(Object) equals()}. This is fine, as long as the\n  * decorated <code>Map</code> is also based on {@link Object#equals(Object) equals()},\n- * and {@link Object#hashCode() hashCode()}, which {@link IdentityMap}, and\n+ * and {@link Object#hashCode() hashCode()}, which\n+ * {@link java.util.IdentityHashMap IdentityHashMap}, and\n  * {@link CaseInsensitiveMap} don't: The former uses <code>==</code>, and\n  * the latter uses {@link Object#equals(Object) equals()} on a lower-cased\n  * key.\n--- a/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java\n      * The iterator will return multiple Entry objects with the same key\n      * if there are multiple values mapped to this key.\n      * <p>\n-     * NOTE: calling {@link Map.Entry#setValue(Object)} on any of the returned\n+     * NOTE: calling {@link Entry#setValue(Object)} on any of the returned\n      * elements will result in a {@link UnsupportedOperationException}.\n      *\n      * @return the iterator of all mappings in this map\n--- a/src/main/java/org/apache/commons/collections4/map/TransformedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/map/TransformedMap.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  * <p>\n- * @see org.apache.commons.collections.splitmap.TransformedMap\n+ * @see org.apache.commons.collections4.splitmap.TransformedMap\n  *\n  * @since 3.0\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java\n+++ b/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java\n  * insertion order; elements are removed in the same order in which they\n  * were added.  The iteration order is the same as the removal order.\n  * <p>\n- * The {@link #add(Object)}, {@link #remove()} and {@link #get()} operations\n- * all perform in constant time.  All other operations perform in linear\n- * time or worse.\n+ * The {@link #add(Object)}, {@link #remove()}, {@link #peek()}, {@link #poll},\n+ * {@link #offer(Object) operations all perform in constant time.\n+ * All other operations perform in linear time or worse.\n  * <p>\n  * This queue prevents null objects from being added.\n  *", "timestamp": 1367075562, "metainfo": ""}