{"sha": "52f05aba785cce6845a03ee4852812b872ffdcb5", "log": "Add ObservableSortedBag   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/observed/ObservableSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/Attic/ObservableSortedBag.java,v 1.1 2003/09/28 21:50:37 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed;\n+\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.SortedBag;\n+\n+/**\n+ * Decorates a <code>SortedBag</code> implementation to observe modifications.\n+ * <p>\n+ * Each modifying method call made on this <code>SortedBag</code> is forwarded to a\n+ * {@link ModificationHandler}.\n+ * The handler manages the event, notifying listeners and optionally vetoing changes.\n+ * The default handler is {@link StandardModificationHandler}.\n+ * See this class for details of configuration available.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/28 21:50:37 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class ObservableSortedBag extends ObservableBag implements SortedBag {\n+    \n+    // Factories\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Factory method to create an observable bag.\n+     * <p>\n+     * A {@link StandardModificationHandler} will be created.\n+     * This can be accessed by {@link #getHandler()} to add listeners.\n+     *\n+     * @param bag  the bag to decorate, must not be null\n+     * @return the observed bag\n+     * @throws IllegalArgumentException if the collection is null\n+     */\n+    public static ObservableSortedBag decorate(final SortedBag bag) {\n+        return new ObservableSortedBag(bag, null);\n+    }\n+\n+    /**\n+     * Factory method to create an observable bag using a listener or a handler.\n+     * <p>\n+     * A lot of functionality is available through this method.\n+     * If you don't need the extra functionality, simply implement the\n+     * {@link org.apache.commons.collections.observed.standard.StandardModificationListener}\n+     * interface and pass it in as the second parameter.\n+     * <p>\n+     * Internally, an <code>ObservableSortedBag</code> relies on a {@link ModificationHandler}.\n+     * The handler receives all the events and processes them, typically by\n+     * calling listeners. Different handler implementations can be plugged in\n+     * to provide a flexible event system.\n+     * <p>\n+     * The handler implementation is determined by the listener parameter via\n+     * the registered factories. The listener may be a manually configured \n+     * <code>ModificationHandler</code> instance.\n+     * <p>\n+     * The listener is defined as an Object for maximum flexibility.\n+     * It does not have to be a listener in the classic JavaBean sense.\n+     * It is entirely up to the factory and handler as to how the parameter\n+     * is interpretted. An IllegalArgumentException is thrown if no suitable\n+     * handler can be found for this listener.\n+     * <p>\n+     * A <code>null</code> listener will create a {@link StandardModificationHandler}.\n+     *\n+     * @param bag  the bag to decorate, must not be null\n+     * @param listener  bag listener, may be null\n+     * @return the observed bag\n+     * @throws IllegalArgumentException if the bag is null\n+     * @throws IllegalArgumentException if there is no valid handler for the listener\n+     */\n+    public static ObservableSortedBag decorate(\n+            final SortedBag bag,\n+            final Object listener) {\n+        \n+        if (bag == null) {\n+            throw new IllegalArgumentException(\"SortedBag must not be null\");\n+        }\n+        return new ObservableSortedBag(bag, listener);\n+    }\n+\n+    // Constructors\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor that wraps (not copies) and takes a handler.\n+     * <p>\n+     * The handler implementation is determined by the listener parameter via\n+     * the registered factories. The listener may be a manually configured \n+     * <code>ModificationHandler</code> instance.\n+     * \n+     * @param bag  the bag to decorate, must not be null\n+     * @param listener  the listener, may be null\n+     * @throws IllegalArgumentException if the bag is null\n+     */\n+    protected ObservableSortedBag(\n+            final SortedBag bag,\n+            final Object listener) {\n+        super(bag, listener);\n+    }\n+\n+    /**\n+     * Typecast the collection to a SortedBag.\n+     * \n+     * @return the wrapped collection as a SortedBag\n+     */\n+    private SortedBag getSortedBag() {\n+        return (SortedBag) getCollection();\n+    }\n+\n+    // SortedBag API\n+    //-----------------------------------------------------------------------\n+    public Comparator comparator() {\n+        return getSortedBag().comparator();\n+    }\n+\n+    public Object first() {\n+        return getSortedBag().first();\n+    }\n+\n+    public Object last() {\n+        return getSortedBag().last();\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n+++ b/src/test/org/apache/commons/collections/observed/ObservedTestHelper.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.11 2003/09/27 12:06:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/ObservedTestHelper.java,v 1.12 2003/09/28 21:50:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * {@link ObservedCollection} implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.11 $ $Date: 2003/09/27 12:06:36 $\n+ * @version $Revision: 1.12 $ $Date: 2003/09/28 21:50:37 $\n  * \n  * @author Stephen Colebourne\n  */\n         doTestRemoveNCopies(factory);\n     }\n     \n-//    public static void bulkTestObservedSortedBag(ObservedFactory factory) {\n-//        assertTrue(factory.createObservedCollection() instanceof ObservableSortedBag);\n-//        assertTrue(factory.createObservedCollection(LISTENER) instanceof ObservableSortedBag);\n-//        assertTrue(factory.createObservedCollection(new StandardModificationHandler()) instanceof ObservableSortedBag);\n-//        \n-//        bulkTestObservedCollection(factory);\n-//        doTestAddNCopies(factory);\n-//        doTestRemoveNCopies(factory);\n-//        // TODO\n-//    }\n+    public static void bulkTestObservedSortedBag(ObservedFactory factory) {\n+        assertTrue(factory.createObservedCollection() instanceof ObservableSortedBag);\n+        assertTrue(factory.createObservedCollection(LISTENER) instanceof ObservableSortedBag);\n+        assertTrue(factory.createObservedCollection(new StandardModificationHandler()) instanceof ObservableSortedBag);\n+        \n+        bulkTestObservedCollection(factory);\n+        doTestAddNCopies(factory);\n+        doTestRemoveNCopies(factory);\n+    }\n     \n     public static void bulkTestObservedBuffer(ObservedFactory factory) {\n         assertTrue(factory.createObservedCollection() instanceof ObservableBuffer);\n--- a/src/test/org/apache/commons/collections/observed/TestAll.java\n+++ b/src/test/org/apache/commons/collections/observed/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestAll.java,v 1.3 2003/09/21 20:01:53 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestAll.java,v 1.4 2003/09/28 21:50:37 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections observed tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/09/21 20:01:53 $\n+ * @version $Revision: 1.4 $ $Date: 2003/09/28 21:50:37 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestObservableCollection.suite());\n         suite.addTest(TestObservableList.suite());\n         suite.addTest(TestObservableSet.suite());\n+        suite.addTest(TestObservableSortedBag.suite());\n         suite.addTest(TestObservableSortedSet.suite());\n         \n         return suite;\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableSortedBag.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableSortedBag.java,v 1.1 2003/09/28 21:50:37 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.observed;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.Bag;\n+import org.apache.commons.collections.TestSortedBag;\n+import org.apache.commons.collections.TreeBag;\n+\n+/**\n+ * Extension of {@link TestSortedBag} for exercising the\n+ * {@link ObservedSortedBag} implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/28 21:50:37 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestObservableSortedBag extends TestSortedBag implements ObservedTestHelper.ObservedFactory {\n+    \n+    public TestObservableSortedBag(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestObservableSortedBag.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestObservableSortedBag.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Bag makeBag() {\n+        return ObservableSortedBag.decorate(new TreeBag(), ObservedTestHelper.LISTENER);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testObservedSortedBag() {\n+        ObservedTestHelper.bulkTestObservedSortedBag(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public ObservableCollection createObservedCollection() {\n+        return ObservableSortedBag.decorate(new TreeBag());\n+    }\n+\n+    public ObservableCollection createObservedCollection(Object listener) {\n+        return ObservableSortedBag.decorate(new TreeBag(), listener);\n+    }\n+\n+}", "timestamp": 1064785837, "metainfo": ""}