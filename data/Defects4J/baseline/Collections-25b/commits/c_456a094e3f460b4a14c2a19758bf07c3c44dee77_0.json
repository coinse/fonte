{"sha": "456a094e3f460b4a14c2a19758bf07c3c44dee77", "log": "add base int collection impl   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/primitives/AbstractIntCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/AbstractIntCollection.java,v 1.1 2003/01/05 03:03:14 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/01/05 03:03:14 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.collections.primitives;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2003/01/05 03:03:14 $\n+ * @author Rodney Waldhoff \n+ */\n+abstract class AbstractIntCollection implements IntCollection {\n+    public abstract IntIterator iterator();\n+    public abstract int size();\n+          \n+    \n+    protected AbstractIntCollection() { }\n+              \n+    /** Unsupported in this base implementation. */\n+    public boolean add(int element) {\n+        throw new UnsupportedOperationException(\"add(int) is not supported.\");\n+    }\n+\n+    public boolean addAll(IntCollection c) {\n+        boolean modified = false;\n+        for(IntIterator iter = c.iterator(); iter.hasNext(); ) {\n+            modified  |= add(iter.next());\n+        }\n+        return modified;\n+    }\n+    \n+    public void clear() {\n+        for(IntIterator iter = iterator(); iter.hasNext();) {\n+            iter.next();\n+            iter.remove();\n+        }\n+    }        \n+\n+    public boolean contains(int element) {\n+        for(IntIterator iter = iterator(); iter.hasNext();) {\n+            if(iter.next() == element) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+        \n+    public boolean containsAll(IntCollection c) {\n+        for(IntIterator iter = c.iterator(); iter.hasNext();) {\n+            if(!contains(iter.next())) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    \n+    public boolean isEmpty() {\n+        return (0 == size());\n+    }\n+       \n+    public boolean removeElement(int element) {\n+        for(IntIterator iter = iterator(); iter.hasNext();) {\n+            if(iter.next() == element) {\n+                iter.remove();\n+                return true;\n+            }\n+        }\n+        return false;\n+    }        \n+    \n+    public boolean removeAll(IntCollection c) {\n+        boolean modified = false;\n+        for(IntIterator iter = c.iterator(); iter.hasNext(); ) {\n+            modified  |= removeElement(iter.next());\n+        }\n+        return modified;\n+    }       \n+    \n+    public boolean retainAll(IntCollection c) {\n+        boolean modified = false;\n+        for(IntIterator iter = iterator(); iter.hasNext();) {\n+            if(!c.contains(iter.next())) {\n+                iter.remove();\n+                modified = true;\n+            }\n+        }\n+        return modified;\n+    }\n+    \n+    public int[] toArray() {\n+        int[] array = new int[size()];\n+        int i = 0;\n+        for(IntIterator iter = iterator(); iter.hasNext();) {\n+            array[i] = iter.next();\n+            i++;\n+        }\n+        return array;\n+    }\n+        \n+    public int[] toArray(int[] a) {\n+        if(a.length < size()) {\n+            return toArray();\n+        } else {\n+            int i = 0;\n+            for(IntIterator iter = iterator(); iter.hasNext();) {\n+                a[i] = iter.next();\n+                i++;\n+            }\n+            return a;\n+        }            \n+    }\n+}", "timestamp": 1041735794, "metainfo": ""}