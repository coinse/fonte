{"sha": "f9f92677a92ef76f92c90521904c20b8512b05ff", "log": "Added Bay's helper methods to CollectionUtils   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.4 2001/05/22 15:53:06 jstrachan Exp $\n- * $Revision: 1.4 $\n- * $Date: 2001/05/22 15:53:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.5 2001/08/29 16:10:29 jstrachan Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2001/08/29 16:10:29 $\n  *\n  * ====================================================================\n  *\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n import java.util.Set;\n  *\n  * @author Rodney Waldhoff\n  *\n- * @version $Id: CollectionUtils.java,v 1.4 2001/05/22 15:53:06 jstrachan Exp $\n+ * @version $Id: CollectionUtils.java,v 1.5 2001/08/29 16:10:29 jstrachan Exp $\n  */\n public class CollectionUtils {\n     /**\n         }\n     }    \n     \n+    /**\n+     * Given an Object, and an index, it will get the nth value in the\n+     * object.\n+     */\n+    public static Object index(Object obj, int idx) {\n+        return index(obj, new Integer(idx));\n+    }\n+    \n+    /**\n+     * Given an Object, and an index, it will get the nth value in the\n+     * object.\n+     */\n+    public static Object index(Object obj, Object index) {\n+        if(obj instanceof Map) {\n+            Map map = (Map)obj;\n+            if(map.containsKey(index)) {\n+                return map.get(index);\n+            }\n+        }\n+        int idx = -1;\n+        if(index instanceof Integer) {\n+            idx = ((Integer)index).intValue();\n+        }\n+        if(idx < 0) {\n+            return obj;\n+        } \n+        else if(obj instanceof Map) {\n+            Map map = (Map)obj;\n+            Iterator iterator = map.keySet().iterator();\n+            while(iterator.hasNext()) {\n+                idx--;\n+                if(idx == -1) {\n+                    return iterator.next();\n+                } else {\n+                    iterator.next();\n+                }\n+            }\n+        } \n+        else if(obj instanceof List) {\n+            return ((List)obj).get(idx);\n+        } \n+        else if(obj instanceof Object[]) {\n+            return ((Object[])obj)[idx];\n+        } \n+        else if(obj instanceof Enumeration) {\n+            Enumeration enum = (Enumeration)obj;\n+            while(enum.hasMoreElements()) {\n+                idx--;\n+                if(idx == -1) {\n+                    return enum.nextElement();\n+                } else {\n+                    enum.nextElement();\n+                }\n+            }\n+        } \n+        else if(obj instanceof Iterator) {\n+            Iterator iterator = (Iterator)obj;\n+            while(iterator.hasNext()) {\n+                idx--;\n+                if(idx == -1) {\n+                    return iterator.next();\n+                } else {\n+                    iterator.next();\n+                }\n+            }\n+        }\n+        return obj;\n+    }\n+\n+    /** Returns an Iterator for the given object. Currently this method can handle\n+     * Iterator, Enumeration, Collection, Map, Object[] or array */\n+    public static Iterator getIterator(Object obj) {\n+        if(obj instanceof Iterator) {\n+            return (Iterator)obj;\n+        } \n+        else if(obj instanceof Collection) {\n+            return ((Collection)obj).iterator();\n+        } \n+        else if(obj instanceof Object[]) {\n+            return new ArrayIterator( obj );\n+        } \n+        else if(obj instanceof Enumeration) {\n+            return new EnumerationIterator( (Enumeration)obj );\n+        } \n+        else if(obj instanceof Map) {\n+            return ((Map)obj).values().iterator();\n+        } \n+        else if(obj != null && obj.getClass().isArray()) {\n+            return new ArrayIterator( obj );\n+        }\n+        else{\n+            return null;\n+        }\n+    }\n+\n+    /** Reverses the order of the given array */\n+    public static void reverseArray(Object[] array) {\n+        int i = 0;\n+        int j = array.length - 1;\n+        Object tmp;\n+        \n+        while(j>i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n     private static final int getFreq(final Object obj, final Map freqMap) {\n         try {\n             return ((Integer)(freqMap.get(obj))).intValue();", "timestamp": 999101429, "metainfo": ""}