{"sha": "2c82062b7ce0c2ac36e7e52da1a22295a67d9edb", "log": "Javadoc syntax fixes  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/Get.java\n+++ b/src/main/java/org/apache/commons/collections/Get.java\n import java.util.Set;\n \n /**\n- * The \"read\" subset of the {@link Map} interface.\n+ * The \"read\" subset of the {@link java.util.Map} interface.\n  * \n  * @since 4.0\n  * @version $Id$\n public interface Get<K, V> {\n \n     /**\n-     * @see Map#containsKey(Object)\n+     * @see java.util.Map#containsKey(Object)\n      */\n     public boolean containsKey(Object key);\n \n     /**\n-     * @see Map#containsValue(Object)\n+     * @see java.util.Map#containsValue(Object)\n      */\n     public boolean containsValue(Object value);\n \n     /**\n-     * @see Map#entrySet()\n+     * @see java.util.Map#entrySet()\n      */\n     public Set<java.util.Map.Entry<K, V>> entrySet();\n \n     /**\n-     * @see Map#get(Object)\n+     * @see java.util.Map#get(Object)\n      */\n     public V get(Object key);\n \n     /**\n-     * @see Map#remove(Object)\n+     * @see java.util.Map#remove(Object)\n      */\n     public V remove(Object key);\n \n     /**\n-     * @see Map#isEmpty()\n+     * @see java.util.Map#isEmpty()\n      */\n     public boolean isEmpty();\n \n     /**\n-     * @see Map#keySet()\n+     * @see java.util.Map#keySet()\n      */\n     public Set<K> keySet();\n \n     /**\n-     * @see Map#size()\n+     * @see java.util.Map#size()\n      */\n     public int size();\n \n     /**\n-     * @see Map#values()\n+     * @see java.util.Map#values()\n      */\n     public Collection<V> values();\n \n--- a/src/main/java/org/apache/commons/collections/IterableGet.java\n+++ b/src/main/java/org/apache/commons/collections/IterableGet.java\n package org.apache.commons.collections;\n \n /**\n- * The \"read\" subset of the {@link Map} interface.\n+ * The \"read\" subset of the {@link java.util.Map} interface.\n  *\n  * @since 4.0\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/collections/OrderedIterator.java\n+++ b/src/main/java/org/apache/commons/collections/OrderedIterator.java\n import java.util.Iterator;\n \n /**\n- * Defines an iterator that operates over an ordered container. Subset of {@link ListIterator}.\n+ * Defines an iterator that operates over an ordered container. Subset of {@link java.util.ListIterator}.\n  * <p>\n  * This iterator allows both forward and reverse iteration through the container.\n  *\n--- a/src/main/java/org/apache/commons/collections/Trie.java\n+++ b/src/main/java/org/apache/commons/collections/Trie.java\n      * value is closest in an XOR metric to the given key. After the closest\n      * entry is found, the {@link Trie} will call select on that entry and continue\n      * calling select for each entry (traversing in order of XOR closeness,\n-     * NOT lexicographically) until the cursor returns {@link Decision#EXIT}.\n-     * <p>\n-     * The cursor can return {@link Decision#CONTINUE} to continue traversing.\n-     * <p>\n-     * {@link Decision#REMOVE_AND_EXIT} is used to remove the current element\n+     * NOT lexicographically) until the cursor returns {@link Cursor.Decision#EXIT}.\n+     * <p>\n+     * The cursor can return {@link Cursor.Decision#CONTINUE} to continue traversing.\n+     * <p>\n+     * {@link Cursor.Decision#REMOVE_AND_EXIT} is used to remove the current element\n      * and stop traversing.\n      * <p>\n-     * Note: The {@link Decision#REMOVE} operation is not supported.\n+     * Note: The {@link Cursor.Decision#REMOVE} operation is not supported.\n      * \n      * @param key  the key to use in the search\n      * @param cursor  the cursor used throughout the search\n-     * @return the entry the cursor returned {@link Decision#EXIT} on, or null \n+     * @return the entry the cursor returned {@link Cursor.Decision#EXIT} on, or null \n      * if it continued till the end\n      */\n     public Map.Entry<K,V> select(K key, Cursor<? super K, ? super V> cursor);\n      * Traverses the {@link Trie} in lexicographical order. \n      * {@link Cursor#select(java.util.Map.Entry)} will be called on each entry.\n      * <p>\n-     * The traversal will stop when the cursor returns {@link Decision#EXIT}, \n-     * {@link Decision#CONTINUE} is used to continue traversing and \n-     * {@link Decision#REMOVE} is used to remove the element that was selected \n+     * The traversal will stop when the cursor returns {@link Cursor.Decision#EXIT}, \n+     * {@link Cursor.Decision#CONTINUE} is used to continue traversing and \n+     * {@link Cursor.Decision#REMOVE} is used to remove the element that was selected \n      * and continue traversing.\n      * <p>\n-     * {@link Decision#REMOVE_AND_EXIT} is used to remove the current element\n+     * {@link Cursor.Decision#REMOVE_AND_EXIT} is used to remove the current element\n      * and stop traversing.\n      *   \n      * @param cursor  the cursor used while traversing the {@link Trie}\n-     * @return the entry the cursor returned {@link Decision#EXIT} on, or null \n+     * @return the entry the cursor returned {@link Cursor.Decision#EXIT} on, or null \n      * if it continued till the end\n      */\n     public Map.Entry<K,V> traverse(Cursor<? super K, ? super V> cursor);\n     public SortedMap<K, V> getPrefixedByBits(K key, int offsetInBits, int lengthInBits);\n     \n     /**\n-     * A {@link Cursor} can be used to traverse a {@link Trie}, visit each node \n+     * A {@link Trie.Cursor} can be used to traverse a {@link Trie}, visit each node \n      * step by step and make {@link Decision}s on each step how to continue with \n      * traversing the {@link Trie}.\n      */\n     public interface Cursor<K, V> {\n         \n         /**\n-         * The {@link Decision} tells the {@link Cursor} what to do on each step \n+         * The {@link Decision} tells the {@link Trie.Cursor} what to do on each step \n          * while traversing the {@link Trie}.\n          * \n-         * NOTE: Not all operations that work with a {@link Cursor} support all \n+         * NOTE: Not all operations that work with a {@link Trie.Cursor} support all \n          * {@link Decision} types\n          */\n         public static enum Decision {\n--- a/src/main/java/org/apache/commons/collections/TrieUtils.java\n+++ b/src/main/java/org/apache/commons/collections/TrieUtils.java\n     /**\n      * Returns a synchronized instance of a {@link Trie}\n      * \n-     * @see Collections#synchronizedMap(Map)\n+     * @see java.util.Collections#synchronizedMap(java.util.Map)\n      */\n     public static <K, V> Trie<K, V> synchronizedTrie(final Trie<K, V> trie) {\n         return SynchronizedTrie.synchronizedTrie(trie);\n     /**\n      * Returns an unmodifiable instance of a {@link Trie}\n      * \n-     * @see Collections#unmodifiableMap(Map)\n+     * @see java.util.Collections#unmodifiableMap(java.util.Map)\n      */\n     public static <K, V> Trie<K, V> unmodifiableTrie(final Trie<K, V> trie) {\n         return UnmodifiableTrie.unmodifiableTrie(trie);\n--- a/src/main/java/org/apache/commons/collections/bag/TreeBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TreeBag.java\n  * Order will be maintained among the bag members and can be viewed through the\n  * iterator.\n  * <p>\n- * A {@link Bag} stores each object in the collection together with a count\n+ * A {@link org.apache.commons.collections.Bag Bag} stores each object in the collection together with a count\n  * of occurrences. Extra methods on the interface allow multiple copies of an\n  * object to be added or removed at once. It is important to read the interface\n  * javadoc carefully as several methods violate the {@link Collection}\n--- a/src/main/java/org/apache/commons/collections/comparators/ComparableComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/ComparableComparator.java\n  * objects.\n  * <p>\n  * This Comparator is useful, for example, for enforcing the natural order in\n- * custom implementations of {@link SortedSet} and {@link SortedMap}.\n+ * custom implementations of {@link java.util.SortedSet SortedSet} and {@link java.util.SortedMap SortedMap}.\n  * <p>\n  * Note: In the 2.0 and 2.1 releases of Commons Collections, this class would\n  * throw a {@link ClassCastException} if either of the arguments to\n--- a/src/main/java/org/apache/commons/collections/comparators/sequence/SequencesComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/sequence/SequencesComparator.java\n  * <a href=\"http://www.cis.upenn.edu/~bcpierce/courses/dd/papers/diff.ps\">\n  * An O(ND) Difference Algorithm and Its Variations</a>. This algorithm produces\n  * the shortest possible\n- * {@link org.apache.commons.collections.list.difference.EditScript edit script}\n+ * {@link EditScript edit script}\n  * containing all the\n- * {@link org.apache.commons.collections.list.difference.EditCommand commands}\n+ * {@link EditCommand commands}\n  * needed to transform the first sequence into the second one.\n  * \n  * @see EditScript\n--- a/src/main/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n /**\n  * Converts an {@link Iterator} into a {@link ResettableListIterator}.\n  * For plain <code>Iterator</code>s this is accomplished by caching the returned\n- * elements.  This class can also be used to simply add {@link ResettableIterator}\n+ * elements.  This class can also be used to simply add \n+ * {@link org.apache.commons.collections.ResettableIterator ResettableIterator}\n  * functionality to a given {@link ListIterator}.\n  * <p>\n  * The <code>ListIterator</code> interface has additional useful methods\n--- a/src/main/java/org/apache/commons/collections/keyvalue/DefaultMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/DefaultMapEntry.java\n import org.apache.commons.collections.KeyValue;\n \n /**\n- * A restricted implementation of {@link Map.Entry} that prevents\n- * the {@link Map.Entry} contract from being broken.\n+ * A restricted implementation of {@link java.util.Map.Entry Map.Entry} that prevents\n+ * the {@link java.util.Map.Entry Map.Entry} contract from being broken.\n  *\n  * @since 3.0\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/collections/map/PassiveExpiringMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/PassiveExpiringMap.java\n     implements Serializable {\n \n     /**\n-     * A {@link ExpirationPolicy} that returns a expiration time that is a\n+     * A {@link org.apache.commons.collections.map.PassiveExpiringMap.ExpirationPolicy ExpirationPolicy}\n+     * that returns a expiration time that is a\n      * constant about of time in the future from the current time.\n      * \n      * @param <K> the type of the keys in the map\n      *        expire. A zero value results in entries that ALWAYS expire.\n      * @param timeUnit the unit of time for the <code>timeToLive</code>\n      *        parameter, must not be null.\n+     * @param map the map to decorate, must not be null.\n      * @throws IllegalArgumentException if the time unit is null.\n-     * @param map the map to decorate, must not be null.\n      * @throws IllegalArgumentException if the map is null.\n      */\n     public PassiveExpiringMap(final long timeToLive, final TimeUnit timeUnit, final Map<K, V> map) {\n--- a/src/main/java/org/apache/commons/collections/set/CompositeSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/CompositeSet.java\n     }\n \n     /**\n-     * This can receive either a {@link CompositeCollection#CollectionMutator} or a\n-     * {@link CompositeSet#SetMutator}. If a {@link CompositeCollection#CollectionMutator}\n+     * This can receive either a {@link org.apache.commons.collections.collection.CompositeCollection.CollectionMutator CompositeCollection.CollectionMutator} or a\n+     * {@link CompositeSet.SetMutator}. \n+     * If a {@link org.apache.commons.collections.collection.CompositeCollection.CollectionMutator CompositeCollection.CollectionMutator}\n      * is used than conflicts when adding composited sets will throw IllegalArgumentException.\n      * \n-     * @param mutator  the {@link CollectionMutator} to use for this composite\n+     * @param mutator  the {@link org.apache.commons.collections.collection.CompositeCollection.CollectionMutator CompositeCollection.CollectionMutator} \n+     * to use for this composite\n      */\n     @Override\n     public void setMutator(final CollectionMutator<E> mutator) {\n--- a/src/main/java/org/apache/commons/collections/splitmap/TransformedMap.java\n+++ b/src/main/java/org/apache/commons/collections/splitmap/TransformedMap.java\n  * much of the usefulness of having parameterized types.\n  * <p>\n  * On the downside, this class is not drop-in compatible with {@link java.util.Map}\n- * but is intended to be worked with either directly or by {@link Put} and {@link Get}\n+ * but is intended to be worked with either directly or by {@link Put} and {@link org.apache.commons.collections.Get Get}\n  * generalizations.\n  *\n  * @since 4.0\n  * @version $Id$\n  *\n- * @see SplitMapUtils#readableMap(Get)\n- * @see SplitMapUtils#writableMap(Put)\n+ * @see org.apache.commons.collections.SplitMapUtils#readableMap(Get)\n+ * @see org.apache.commons.collections.SplitMapUtils#writableMap(Put)\n  */\n public class TransformedMap<J, K, U, V> extends AbstractIterableGetMapDecorator<K, V>\n         implements Put<J, U>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/trie/KeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/KeyAnalyzer.java\n import java.util.Comparator;\n \n /** \n- * Defines the interface to analyze {@link Trie} keys on a bit level. \n+ * Defines the interface to analyze {@link org.apache.commons.collections.Trie Trie} keys on a bit level. \n  * {@link KeyAnalyzer}'s methods return the length of the key in bits, \n  * whether or not a bit is set, and bits per element in the key. \n  * <p>\n--- a/src/main/java/org/apache/commons/collections/trie/PatriciaTrie.java\n+++ b/src/main/java/org/apache/commons/collections/trie/PatriciaTrie.java\n      * {@inheritDoc}\n      * \n      * The view that this returns is optimized to have a very efficient\n-     * {@link Iterator}. The {@link SortedMap#firstEntry()}, \n+     * {@link Iterator}. The {@link SortedMap#firstKey()}, \n      * {@link SortedMap#lastKey()} &amp; {@link Map#size()} methods must \n      * iterate over all possible values in order to determine the results. \n      * This information is cached until the PATRICIA {@link Trie} changes. \n--- a/src/main/java/org/apache/commons/collections/trie/PatriciaTrieBase.java\n+++ b/src/main/java/org/apache/commons/collections/trie/PatriciaTrieBase.java\n      */\n     transient int modCount = 0;\n     \n-    /** \n-     * {@inheritDoc}\n-     */\n     public PatriciaTrieBase(final KeyAnalyzer<? super K> keyAnalyzer) {\n         super(keyAnalyzer);\n     }\n     \n     /**\n-     * Constructs a new {@link Trie} using the given {@link KeyAnalyzer} \n-     * and initializes the {@link Trie} with the values from the \n+     * Constructs a new {@link org.apache.commons.collections.Trie Trie} using the given {@link KeyAnalyzer} \n+     * and initializes the {@link org.apache.commons.collections.Trie Trie} with the values from the \n      * provided {@link Map}.\n      */\n     public PatriciaTrieBase(final KeyAnalyzer<? super K> keyAnalyzer, ", "timestamp": 1358729720, "metainfo": ""}