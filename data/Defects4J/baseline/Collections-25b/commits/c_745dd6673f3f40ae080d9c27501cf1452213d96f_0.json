{"sha": "745dd6673f3f40ae080d9c27501cf1452213d96f", "log": "Convert to Java 5 enhanced loops.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n      */\n     public static <C> boolean addAll(Collection<C> collection, C[] elements) {\n         boolean changed = false;\n-        for (int i = 0, size = elements.length; i < size; i++) {\n-            changed |= collection.add(elements[i]);\n+        for (C element : elements) {\n+            changed |= collection.add(element);\n         }\n         return changed;\n     }\n--- a/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n      */\n     public static <E extends Comparable<? super E>> Comparator<E> chainedComparator(Comparator<E>[] comparators) {\n         ComparatorChain<E> chain = new ComparatorChain<E>();\n-        for (int i = 0; i < comparators.length; i++) {\n-            if (comparators[i] == null) {\n+        for (Comparator<E> comparator : comparators) {\n+            if (comparator == null) {\n                 throw new NullPointerException(\"Comparator cannot be null\");\n             }\n-            chain.addComparator(comparators[i]);\n+            chain.addComparator(comparator);\n         }\n         return chain;\n     }\n--- a/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n                 } else if (value instanceof List) {\n                     @SuppressWarnings(\"unchecked\") // we only add Strings to the Lists\n                     List<String> values = (List<String>) value;\n-                    for (Iterator<String> it = values.iterator(); it.hasNext(); ) {\n-                        String currentElement = it.next();\n+                    for (String currentElement : values) {\n                         StringBuilder currentOutput = new StringBuilder();\n                         currentOutput.append(key);\n                         currentOutput.append(\"=\");\n \n         // Each token is of the form 'key=value'.\n         Properties props = new Properties(defaults);\n-        for (int i = 0; i < tokens.length; i++) {\n-            String token = tokens[i];\n+        for (String token : tokens) {\n             int equalSign = token.indexOf('=');\n             if (equalSign > 0) {\n                 String pkey = token.substring(0, equalSign).trim();\n         } else {\n             @SuppressWarnings(\"unchecked\") // OK to downcast here\n             Map<String, Object> mapso = (Map<String,Object>) map;\n-            for (Iterator<Map.Entry<String, Object>> it = mapso.entrySet().iterator(); it.hasNext(); ) {\n-                Map.Entry<String,Object> entry = it.next();\n+            for (java.util.Map.Entry<String, Object> entry : mapso.entrySet()) {\n                 put(entry.getKey(), entry.getValue());\n             }\n         }\n--- a/src/main/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections/MapUtils.java\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Properties;\n import java.util.ResourceBundle;\n import java.util.SortedMap;\n     public static <K, V> Properties toProperties(final Map<K, V> map) {\n         Properties answer = new Properties();\n         if (map != null) {\n-            for (Iterator<Map.Entry<K, V>> iter = map.entrySet().iterator(); iter.hasNext();) {\n-                Map.Entry<?, ?> entry = iter.next();\n+            for (Entry<K, V> entry2 : map.entrySet()) {\n+                Map.Entry<?, ?> entry = entry2;\n                 Object key = entry.getKey();\n                 Object value = entry.getValue();\n                 answer.put(key, value);\n      */\n     public static <K, V> Map<V, K> invertMap(Map<K, V> map) {\n         Map<V, K> out = new HashMap<V, K>(map.size());\n-        for (Iterator<Map.Entry<K, V>> it = map.entrySet().iterator(); it.hasNext();) {\n-            Map.Entry<K, V> entry = it.next();\n+        for (Entry<K, V> entry : map.entrySet()) {\n             out.put(entry.getValue(), entry.getKey());\n         }\n         return out;\n         }\n         Object obj = array[0];\n         if (obj instanceof Map.Entry) {\n-            for (int i = 0; i < array.length; i++) {\n-                Map.Entry<K, V> entry = (Map.Entry<K, V>) array[i];\n+            for (Object element : array) {\n+                Map.Entry<K, V> entry = (Map.Entry<K, V>) element;\n                 map.put(entry.getKey(), entry.getValue());\n             }\n         } else if (obj instanceof KeyValue) {\n-            for (int i = 0; i < array.length; i++) {\n-                KeyValue<K, V> keyval = (KeyValue<K, V>) array[i];\n+            for (Object element : array) {\n+                KeyValue<K, V> keyval = (KeyValue<K, V>) element;\n                 map.put(keyval.getKey(), keyval.getValue());\n             }\n         } else if (obj instanceof Object[]) {\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n import java.util.ConcurrentModificationException;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Set;\n \n import org.apache.commons.collections.Bag;\n      */\n     protected void doWriteObject(ObjectOutputStream out) throws IOException {\n         out.writeInt(map.size());\n-        for (Iterator<Map.Entry<E, MutableInteger>> it = map.entrySet().iterator(); it.hasNext();) {\n-            Map.Entry<E, MutableInteger> entry = it.next();\n+        for (Entry<E, MutableInteger> entry : map.entrySet()) {\n             out.writeObject(entry.getKey());\n             out.writeInt(entry.getValue().value);\n         }\n         if (other.size() != size()) {\n             return false;\n         }\n-        for (Iterator<E> it = map.keySet().iterator(); it.hasNext();) {\n-            E element = it.next();\n+        for (E element : map.keySet()) {\n             if (other.getCount(element) != getCount(element)) {\n                 return false;\n             }\n     @Override\n     public int hashCode() {\n         int total = 0;\n-        for (Iterator<Map.Entry<E, MutableInteger>> it = map.entrySet().iterator(); it.hasNext();) {\n-            Map.Entry<E, MutableInteger> entry = it.next();\n+        for (Entry<E, MutableInteger> entry : map.entrySet()) {\n             E element = entry.getKey();\n             MutableInteger count = entry.getValue();\n             total += (element == null ? 0 : element.hashCode()) ^ count.value;\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n             @SuppressWarnings(\"unchecked\") // Bag is of type E\n             E[] values = (E[]) bag.toArray();\n             bag.clear();\n-            for (int i = 0; i < values.length; i++) {\n-                decorated.decorated().add(transformer.transform(values[i]));\n+            for (E value : values) {\n+                decorated.decorated().add(transformer.transform(value));\n             }\n         }\n         return decorated;\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n             @SuppressWarnings(\"unchecked\") // bag is type E\n             E[] values = (E[]) bag.toArray();\n             bag.clear();\n-            for(int i=0; i<values.length; i++) {\n-                decorated.decorated().add(transformer.transform(values[i]));\n+            for (E value : values) {\n+                decorated.decorated().add(transformer.transform(value));\n             }\n         }\n         return decorated;\n--- a/src/main/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n         out.writeInt(size());\n-        for (Iterator<E> it = iterator(); it.hasNext();) {\n-            out.writeObject(it.next());\n+        for (E e : this) {\n+            out.writeObject(e);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n             @SuppressWarnings(\"unchecked\") // buffer is type <E>\n             E[] values = (E[]) buffer.toArray();\n             buffer.clear();\n-            for(int i=0; i<values.length; i++) {\n-                decorated.decorated().add(transformer.transform(values[i]));\n+            for (E value : values) {\n+                decorated.decorated().add(transformer.transform(value));\n             }\n         }\n         return decorated;\n--- a/src/main/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n         out.defaultWriteObject();\n         out.writeInt(size());\n         out.writeInt(buffer.length);\n-        for (Iterator<E> it = iterator(); it.hasNext();) {\n-            out.writeObject(it.next());\n+        for (E e : this) {\n+            out.writeObject(e);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n             @SuppressWarnings(\"unchecked\") // collection is of type E\n             E[] values = (E[]) collection.toArray();\n             collection.clear();\n-            for(int i=0; i<values.length; i++) {\n-                decorated.decorated().add(transformer.transform(values[i]));\n+            for (E value : values) {\n+                decorated.decorated().add(transformer.transform(value));\n             }\n         }\n         return decorated;\n--- a/src/main/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n         if (items == null) {\n             throw new IllegalArgumentException(\"The list of items must not be null\");\n         }\n-        for (int i = 0; i < items.length; i++) {\n-            add(items[i]);\n+        for (T item : items) {\n+            add(item);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections/functors/AnyPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/AnyPredicate.java\n      * @return true if any decorated predicate return true\n      */\n     public boolean evaluate(T object) {\n-        for (int i = 0; i < iPredicates.length; i++) {\n-            if (iPredicates[i].evaluate(object)) {\n+        for (Predicate<? super T> iPredicate : iPredicates) {\n+            if (iPredicate.evaluate(object)) {\n                 return true;\n             }\n         }\n--- a/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java\n      * @param input  the input object passed to each closure\n      */\n     public void execute(E input) {\n-        for (int i = 0; i < iClosures.length; i++) {\n-            iClosures[i].execute(input);\n+        for (Closure<? super E> iClosure : iClosures) {\n+            iClosure.execute(input);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java\n      * @return the transformed result\n      */\n     public T transform(T object) {\n-        for (int i = 0; i < iTransformers.length; i++) {\n-            object = iTransformers[i].transform(object);\n+        for (Transformer<? super T, ? extends T> iTransformer : iTransformers) {\n+            object = iTransformer.transform(object);\n         }\n         return object;\n     }\n--- a/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n      * @return true if none of decorated predicates return true\n      */\n     public boolean evaluate(T object) {\n-        for (int i = 0; i < iPredicates.length; i++) {\n-            if (iPredicates[i].evaluate(object)) {\n+        for (Predicate<? super T> iPredicate : iPredicates) {\n+            if (iPredicate.evaluate(object)) {\n                 return false;\n             }\n         }\n--- a/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n      */\n     public boolean evaluate(T object) {\n         boolean match = false;\n-        for (int i = 0; i < iPredicates.length; i++) {\n-            if (iPredicates[i].evaluate(object)) {\n+        for (Predicate<? super T> iPredicate : iPredicates) {\n+            if (iPredicate.evaluate(object)) {\n                 if (match) {\n                     return false;\n                 }\n--- a/src/main/java/org/apache/commons/collections/iterators/CollatingIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/CollatingIterator.java\n      */\n     public CollatingIterator(final Comparator<? super E> comp, final Iterator<? extends E>[] iterators) {\n         this(comp, iterators.length);\n-        for (int i = 0; i < iterators.length; i++) {\n-            addIterator(iterators[i]);\n+        for (Iterator<? extends E> iterator : iterators) {\n+            addIterator(iterator);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/IteratorChain.java\n      */\n     public IteratorChain(Iterator<? extends E>... iteratorChain) {\n         super();\n-        for (int i = 0; i < iteratorChain.length; i++) {\n-            addIterator(iteratorChain[i]);\n+        for (Iterator<? extends E> element : iteratorChain) {\n+            addIterator(element);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections/keyvalue/MultiKey.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/MultiKey.java\n     private void calculateHashCode(Object[] keys)\n     {\n         int total = 0;\n-        for (int i = 0; i < keys.length; i++) {\n-            if (keys[i] != null) {\n-                total ^= keys[i].hashCode();\n+        for (Object key : keys) {\n+            if (key != null) {\n+                total ^= key.hashCode();\n             }\n         }\n         hashCode = total;\n--- a/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n     protected void doWriteObject(ObjectOutputStream outputStream) throws IOException {\n         // Write the size so we know how many nodes to read back\n         outputStream.writeInt(size());\n-        for (Iterator<E> itr = iterator(); itr.hasNext();) {\n-            outputStream.writeObject(itr.next());\n+        for (E e : this) {\n+            outputStream.writeObject(e);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/collections/list/SetUniqueList.java\n+++ b/src/main/java/org/apache/commons/collections/list/SetUniqueList.java\n     @Override\n     public boolean removeAll(Collection<?> coll) {\n         boolean result = false;\n-        for (Iterator<?> it = coll.iterator(); it.hasNext();) {\n-            result |= remove(it.next());\n+        for (Object name : coll) {\n+            result |= remove(name);\n         }\n         return result;\n     }\n     @Override\n     public boolean retainAll(Collection<?> coll) {\n         Set<Object> setRetainAll = new HashSet<Object>();\n-        for (Iterator<?> it = coll.iterator(); it.hasNext();) {\n-            Object next = it.next();\n+        for (Object next : coll) {\n             if (set.contains(next)) {\n                 setRetainAll.add(next);\n             }\n--- a/src/main/java/org/apache/commons/collections/list/TransformedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TransformedList.java\n             @SuppressWarnings(\"unchecked\") // list is of type E\n             E[] values = (E[]) list.toArray();\n             list.clear();\n-            for(int i=0; i<values.length; i++) {\n-                decorated.decorated().add(transformer.transform(values[i]));\n+            for (E value : values) {\n+                decorated.decorated().add(transformer.transform(value));\n             }\n         }\n         return decorated;\n--- a/src/main/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractHashedMap.java\n     @Override\n     public boolean containsValue(Object value) {\n         if (value == null) {\n-            for (int i = 0, isize = data.length; i < isize; i++) {\n-                HashEntry<K, V> entry = data[i];\n+            for (HashEntry<K, V> element : data) {\n+                HashEntry<K, V> entry = element;\n                 while (entry != null) {\n                     if (entry.getValue() == null) {\n                         return true;\n                 }\n             }\n         } else {\n-            for (int i = 0, isize = data.length; i < isize; i++) {\n-                HashEntry<K, V> entry = data[i];\n+            for (HashEntry<K, V> element : data) {\n+                HashEntry<K, V> entry = element;\n                 while (entry != null) {\n                     if (isEqualValue(value, entry.getValue())) {\n                         return true;\n--- a/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n         @Override\n         public Iterator<V> iterator() {\n             final IteratorChain<V> chain = new IteratorChain<V>();\n-            for (Iterator<K> it = keySet().iterator(); it.hasNext();) {\n-                chain.addIterator(new ValuesIterator(it.next()));\n+            for (K k : keySet()) {\n+                chain.addIterator(new ValuesIterator(k));\n             }\n             return chain;\n         }\n--- a/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java\n     @Override\n     public boolean removeAll(Collection<?> coll) {\n         boolean result = false;\n-        for (Iterator<?> it = coll.iterator(); it.hasNext();) {\n-            result |= remove(it.next());\n+        for (Object name : coll) {\n+            result |= remove(name);\n         }\n         return result;\n     }\n     @Override\n     public boolean retainAll(Collection<?> coll) {\n         Set<Object> collectionRetainAll = new HashSet<Object>();\n-        for (Iterator<?> it = coll.iterator(); it.hasNext();) {\n-            Object next = it.next();\n+        for (Object next : coll) {\n             if (collection.contains(next)) {\n                 collectionRetainAll.add(next);\n             }\n--- a/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n             @SuppressWarnings(\"unchecked\") // set is type E\n             E[] values = (E[]) set.toArray();\n             set.clear();\n-            for(int i=0; i<values.length; i++) {\n-                decorated.decorated().add(transformer.transform(values[i]));\n+            for (E value : values) {\n+                decorated.decorated().add(transformer.transform(value));\n             }\n         }\n         return decorated;\n--- a/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n             @SuppressWarnings(\"unchecked\") // set is type E\n             E[] values = (E[]) set.toArray();\n             set.clear();\n-            for(int i=0; i<values.length; i++) {\n-                decorated.decorated().add(transformer.transform(values[i]));\n+            for (E value : values) {\n+                decorated.decorated().add(transformer.transform(value));\n             }\n         }\n         return decorated;\n--- a/src/test/java/org/apache/commons/collections/BulkTest.java\n+++ b/src/test/java/org/apache/commons/collections/BulkTest.java\n     void make(BulkTest bulk) {\n         Class<? extends BulkTest> c = bulk.getClass();\n         Method[] all = c.getMethods();\n-        for (int i = 0; i < all.length; i++) {\n-            if (isTest(all[i])) addTest(bulk, all[i]);\n-            if (isBulk(all[i])) addBulk(bulk, all[i]);\n+        for (Method element : all) {\n+            if (isTest(element)) addTest(bulk, element);\n+            if (isBulk(element)) addBulk(bulk, element);\n         }\n     }\n \n \n     private static <T extends BulkTest> BulkTest makeFirstTestCase(Class<T> c) {\n         Method[] all = c.getMethods();\n-        for (int i = 0; i < all.length; i++) {\n-            if (isTest(all[i])) return makeTestCase(c, all[i]);\n+        for (Method element : all) {\n+            if (isTest(element)) return makeTestCase(c, element);\n         }\n         throw new IllegalArgumentException(c.getName() + \" must provide \" \n           + \" at least one test method.\");\n--- a/src/test/java/org/apache/commons/collections/bag/AbstractBagTest.java\n+++ b/src/test/java/org/apache/commons/collections/bag/AbstractBagTest.java\n         bag.add((T) \"C\");\n         Object[] array = bag.toArray();\n         int a = 0, b = 0, c = 0;\n-        for (int i = 0; i < array.length; i++) {\n-            a += (array[i].equals(\"A\") ? 1 : 0);\n-            b += (array[i].equals(\"B\") ? 1 : 0);\n-            c += (array[i].equals(\"C\") ? 1 : 0);\n+        for (Object element : array) {\n+            a += (element.equals(\"A\") ? 1 : 0);\n+            b += (element.equals(\"B\") ? 1 : 0);\n+            c += (element.equals(\"C\") ? 1 : 0);\n         }\n         assertEquals(2, a);\n         assertEquals(2, b);\n         bag.add((T) \"C\");\n         String[] array = bag.toArray(new String[0]);\n         int a = 0, b = 0, c = 0;\n-        for (int i = 0; i < array.length; i++) {\n-            a += (array[i].equals(\"A\") ? 1 : 0);\n-            b += (array[i].equals(\"B\") ? 1 : 0);\n-            c += (array[i].equals(\"C\") ? 1 : 0);\n+        for (String element : array) {\n+            a += (element.equals(\"A\") ? 1 : 0);\n+            b += (element.equals(\"B\") ? 1 : 0);\n+            c += (element.equals(\"C\") ? 1 : 0);\n         }\n         assertEquals(2, a);\n         assertEquals(2, b);\n--- a/src/test/java/org/apache/commons/collections/bag/TransformedBagTest.java\n+++ b/src/test/java/org/apache/commons/collections/bag/TransformedBagTest.java\n     public void testTransformedBag_decorateTransform() {\n         Bag<T> originalBag = new HashBag<T>();\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n-        for (int i = 0; i < els.length; i++) {\n-            originalBag.add((T) els[i]);\n+        for (Object el : els) {\n+            originalBag.add((T) el);\n         }\n         Bag<T> bag = TransformedBag.transformedBag(originalBag,\n                 (Transformer<T, T>) TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, bag.size());\n-        for (int i = 0; i < els.length; i++) {\n-            assertEquals(true, bag.contains(new Integer((String) els[i])));\n-            assertEquals(false, bag.contains(els[i]));\n+        for (Object el : els) {\n+            assertEquals(true, bag.contains(new Integer((String) el)));\n+            assertEquals(false, bag.contains(el));\n         }\n         \n         assertEquals(false, bag.remove(els[0]));\n--- a/src/test/java/org/apache/commons/collections/bag/TransformedSortedBagTest.java\n+++ b/src/test/java/org/apache/commons/collections/bag/TransformedSortedBagTest.java\n     public void testTransformedBag_decorateTransform() {\n         Bag<Object> originalBag = new TreeBag<Object>();\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n-        for (int i = 0; i < els.length; i++) {\n-            originalBag.add(els[i]);\n+        for (Object el : els) {\n+            originalBag.add(el);\n         }\n         Bag<?> bag = TransformedBag.transformedBag(originalBag, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, bag.size());\n-        for (int i = 0; i < els.length; i++) {\n-            assertEquals(true, bag.contains(new Integer((String) els[i])));\n+        for (Object el : els) {\n+            assertEquals(true, bag.contains(new Integer((String) el)));\n         }\n         \n         assertEquals(true, bag.remove(new Integer((String) els[0])));\n--- a/src/test/java/org/apache/commons/collections/buffer/TransformedBufferTest.java\n+++ b/src/test/java/org/apache/commons/collections/buffer/TransformedBufferTest.java\n     public void testTransformedBuffer_decorateTransform() {\n         Buffer originalBuffer = new ArrayStack();\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n-        for (int i = 0; i < els.length; i++) {\n-            originalBuffer.add(els[i]);\n+        for (Object el : els) {\n+            originalBuffer.add(el);\n         }\n         Buffer buffer = TransformedBuffer.transformedBuffer(originalBuffer, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, buffer.size());\n-        for (int i = 0; i < els.length; i++) {\n-            assertEquals(true, buffer.contains(new Integer((String) els[i])));\n-            assertEquals(false, buffer.contains(els[i]));\n+        for (Object el : els) {\n+            assertEquals(true, buffer.contains(new Integer((String) el)));\n+            assertEquals(false, buffer.contains(el));\n         }\n         \n         assertEquals(false, buffer.remove(els[0]));\n--- a/src/test/java/org/apache/commons/collections/collection/AbstractCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections/collection/AbstractCollectionTest.java\n         if (!isAddSupported()) return;\n \n         E[] elements = getFullElements();\n-        for (int i = 0; i < elements.length; i++) {\n+        for (E element : elements) {\n             resetEmpty();\n-            boolean r = getCollection().add(elements[i]);\n-            getConfirmed().add(elements[i]);\n+            boolean r = getCollection().add(element);\n+            getConfirmed().add(element);\n             verify();\n             assertTrue(\"Empty collection changed after add\", r);\n             assertEquals(\"Collection size is 1 after first add\", 1, getCollection().size());\n \n         resetEmpty();\n         int size = 0;\n-        for (int i = 0; i < elements.length; i++) {\n-            boolean r = getCollection().add(elements[i]);\n-            getConfirmed().add(elements[i]);\n+        for (E element : elements) {\n+            boolean r = getCollection().add(element);\n+            getConfirmed().add(element);\n             verify();\n             if (r) size++;\n             assertEquals(\"Collection size should grow after add\", size, getCollection().size());\n-            assertTrue(\"Collection should contain added element\", getCollection().contains(elements[i]));\n+            assertTrue(\"Collection should contain added element\", getCollection().contains(element));\n         }\n     }\n \n         getConfirmed().addAll(Arrays.asList(elements));\n         verify();\n         assertTrue(\"Empty collection should change after addAll\", r);\n-        for (int i = 0; i < elements.length; i++) {\n-            assertTrue(\"Collection should contain added element\", getCollection().contains(elements[i]));\n+        for (E element : elements) {\n+            assertTrue(\"Collection should contain added element\", getCollection().contains(element));\n         }\n \n         resetFull();\n         getConfirmed().addAll(Arrays.asList(elements));\n         verify();\n         assertTrue(\"Full collection should change after addAll\", r);\n-        for (int i = 0; i < elements.length; i++) {\n+        for (E element : elements) {\n             assertTrue(\"Full collection should contain added element\",\n-                    getCollection().contains(elements[i]));\n+                    getCollection().contains(element));\n         }\n         assertEquals(\"Size should increase after addAll\", size + elements.length, getCollection().size());\n \n         }\n \n         int size = getCollection().size();\n-        for (int i = 0; i < elements.length; i++) {\n+        for (E element : elements) {\n             resetFull();\n-            assertTrue(\"Collection should remove extant element: \" + elements[i],\n-                    getCollection().remove(elements[i]));\n+            assertTrue(\"Collection should remove extant element: \" + element,\n+                    getCollection().remove(element));\n \n             // if the elements aren't distinguishable, we can just remove a\n             // matching element from the confirmed collection and verify\n             //\n             // see areEqualElementsDistinguishable()\n             if (!areEqualElementsDistinguishable()) {\n-                getConfirmed().remove(elements[i]);\n+                getConfirmed().remove(element);\n                 verify();\n             }\n \n                         + \"in the confirmed collection's array\");\n             }\n         }\n-        for (int i = 0; i < matched.length; i++) {\n+        for (boolean element : matched) {\n             assertEquals(\"Collection should return all its elements in \" + \"toArray\", true,\n-                    matched[i]);\n+                    element);\n         }\n     }\n \n         // Figure out if they're all the same class\n         // TODO: It'd be nicer to detect a common superclass\n         HashSet<Class<?>> classes = new HashSet<Class<?>>();\n-        for (int i = 0; i < array.length; i++) {\n-            classes.add((array[i] == null) ? null : array[i].getClass());\n+        for (Object element : array) {\n+            classes.add((element == null) ? null : element.getClass());\n         }\n         if (classes.size() > 1) return;\n \n--- a/src/test/java/org/apache/commons/collections/collection/CompositeCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections/collection/CompositeCollectionTest.java\n     public Collection<E> makeFullCollection() {\n         CompositeCollection<E> compositeCollection = new CompositeCollection<E>();\n         E[] elements = getFullElements();\n-        for (int i = 0; i < elements.length; i++) {\n+        for (E element : elements) {\n             Collection<E> summand = new HashSet<E>();\n-            summand.add(elements[i]);\n+            summand.add(element);\n             compositeCollection.addComposited(summand);\n         }\n         return compositeCollection;\n--- a/src/test/java/org/apache/commons/collections/collection/TransformedCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections/collection/TransformedCollectionTest.java\n     public void testTransformedCollection_decorateTransform() {\n         Collection originalCollection = new ArrayList();\n         Object[] els = getFullElements();\n-        for (int i = 0; i < els.length; i++) {\n-            originalCollection.add(els[i]);\n+        for (Object el : els) {\n+            originalCollection.add(el);\n         }\n         Collection<Object> collection = TransformedCollection.transformedCollection(originalCollection, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, collection.size());\n-        for (int i = 0; i < els.length; i++) {\n-            assertEquals(true, collection.contains(new Integer((String) els[i])));\n-            assertEquals(false, collection.contains(els[i]));\n+        for (Object el : els) {\n+            assertEquals(true, collection.contains(new Integer((String) el)));\n+            assertEquals(false, collection.contains(el));\n         }\n         \n         assertEquals(false, collection.remove(els[0]));\n--- a/src/test/java/org/apache/commons/collections/comparators/FixedOrderComparatorTest.java\n+++ b/src/test/java/org/apache/commons/collections/comparators/FixedOrderComparatorTest.java\n     @Test\n     public void testConstructorPlusAdd() {\n         FixedOrderComparator<String> comparator = new FixedOrderComparator<String>();\n-        for (int i = 0; i < topCities.length; i++) {\n-            comparator.add(topCities[i]);\n+        for (String topCitie : topCities) {\n+            comparator.add(topCitie);\n         }\n         String[] keys = topCities.clone();\n         assertComparatorYieldsOrder(keys, comparator);\n--- a/src/test/java/org/apache/commons/collections/comparators/sequence/SequencesComparatorTest.java\n+++ b/src/test/java/org/apache/commons/collections/comparators/sequence/SequencesComparatorTest.java\n         for (int lg=0; lg<lgMax; ++lg) {\n             List<List<String>> newTab = new ArrayList<List<String>>();\n             newTab.add(new ArrayList<String>());\n-            for (int k = 0; k < shadokAlph.length; k++) {\n+            for (String element : shadokAlph) {\n                 for (List<String> sentence : shadokSentences) {\n                     List<String> newSentence = new ArrayList<String>(sentence);\n-                    newSentence.add(shadokAlph[k]);\n+                    newSentence.add(element);\n                     newTab.add(newSentence);\n                 }\n             }\n--- a/src/test/java/org/apache/commons/collections/iterators/ArrayIterator2Test.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ArrayIterator2Test.java\n \n     public void testIterator() {\n         Iterator<E> iter = makeObject();\n-        for (int i = 0; i < testArray.length; i++) {\n-            Integer testValue = new Integer(testArray[i]);\n+        for (int element : testArray) {\n+            Integer testValue = new Integer(element);\n             Number iterValue = (Number) iter.next();\n \n             assertEquals(\"Iteration value is correct\", testValue, iterValue);\n--- a/src/test/java/org/apache/commons/collections/iterators/ArrayIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ArrayIteratorTest.java\n \n     public void testIterator() {\n         Iterator<E> iter = makeObject();\n-        for (int i = 0; i < testArray.length; i++) {\n-            Object testValue = testArray[i];\n+        for (String testValue : testArray) {\n             E iterValue = iter.next();\n \n             assertEquals(\"Iteration value is correct\", testValue, iterValue);\n--- a/src/test/java/org/apache/commons/collections/iterators/FilterIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/FilterIteratorTest.java\n     }\n \n     public void testRepeatedNext() {\n-        for (int i = 0; i < array.length; i++) {\n+        for (String element : array) {\n             iterator.next();\n         }\n         verifyNoMoreElements();\n     private void verifyElementsInPredicate(final String[] elements) {\n         Predicate<E> pred = new Predicate<E>() {\n             public boolean evaluate(E x) {\n-                for (int i = 0; i < elements.length; i++) {\n-                    if (elements[i].equals(x)) {\n+                for (String element : elements) {\n+                    if (element.equals(x)) {\n                         return true;\n                     }\n                 }\n--- a/src/test/java/org/apache/commons/collections/iterators/IteratorChainTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/IteratorChainTest.java\n \n     public void testIterator() {\n         Iterator<String> iter = makeObject();\n-        for (int i = 0; i < testArray.length; i++) {\n-            Object testValue = testArray[i];            \n+        for (String testValue : testArray) {\n             Object iterValue = iter.next();\n \n             assertEquals( \"Iteration value is correct\", testValue, iterValue );\n \n         }\n \n-        for (int i = 0; i < testArray.length; i++) {\n-            String testValue = testArray[i];            \n+        for (String testValue : testArray) {\n             String iterValue = iter.next();\n \n             assertEquals(\"Iteration value is correct\", testValue, iterValue);\n--- a/src/test/java/org/apache/commons/collections/iterators/ListIteratorWrapper2Test.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ListIteratorWrapper2Test.java\n \n     public void testIterator() {\n         ListIterator<E> iter = makeObject();\n-        for (int i = 0; i < testArray.length; i++) {\n-            Object testValue = testArray[i];\n+        for (String testValue : testArray) {\n             Object iterValue = iter.next();\n \n             assertEquals(\"Iteration value is correct\", testValue, iterValue);\n         }\n \n         // now, read it forwards again\n-        for (int i = 0; i < testArray.length; i++) {\n-            Object testValue = testArray[i];\n+        for (String testValue : testArray) {\n             Object iterValue = iter.next();\n \n             assertEquals(\"Iteration value is correct\", testValue, iterValue);\n--- a/src/test/java/org/apache/commons/collections/iterators/ListIteratorWrapperTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ListIteratorWrapperTest.java\n \n     public void testIterator() {\n         ListIterator<E> iter = makeObject();\n-        for (int i = 0; i < testArray.length; i++) {\n-            Object testValue = testArray[i];\n+        for (String testValue : testArray) {\n             Object iterValue = iter.next();\n \n             assertEquals(\"Iteration value is correct\", testValue, iterValue);\n         }\n \n         // now, read it forwards again\n-        for (int i = 0; i < testArray.length; i++) {\n-            Object testValue = testArray[i];\n+        for (String testValue : testArray) {\n             Object iterValue = iter.next();\n \n             assertEquals(\"Iteration value is correct\", testValue, iterValue);\n--- a/src/test/java/org/apache/commons/collections/iterators/ObjectArrayIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/ObjectArrayIteratorTest.java\n \n     public void testIterator() {\n         Iterator<E> iter = makeObject();\n-        for (int i = 0; i < testArray.length; i++) {\n-            Object testValue = testArray[i];\n+        for (String testValue : testArray) {\n             E iterValue = iter.next();\n \n             assertEquals(\"Iteration value is correct\", testValue, iterValue);\n--- a/src/test/java/org/apache/commons/collections/iterators/UniqueFilterIteratorTest.java\n+++ b/src/test/java/org/apache/commons/collections/iterators/UniqueFilterIteratorTest.java\n \n     public void testIterator() {\n         Iterator<E> iter = makeObject();\n-        for (int i = 0; i < testArray.length; i++) {\n-            Object testValue = testArray[i];            \n+        for (String testValue : testArray) {\n             E iterValue = iter.next();\n \n             assertEquals( \"Iteration value is correct\", testValue, iterValue );\n--- a/src/test/java/org/apache/commons/collections/list/AbstractListTest.java\n+++ b/src/test/java/org/apache/commons/collections/list/AbstractListTest.java\n         }\n \n         E[] other = getOtherElements();\n-        for (int i = 0; i < other.length; i++) {\n+        for (E element : other) {\n             assertEquals(\"indexOf should return -1 for nonexistent element\",\n-                -1, list1.indexOf(other[i]));\n+                -1, list1.indexOf(element));\n             verify();\n         }\n     }\n         }\n \n         E[] other = getOtherElements();\n-        for (int i = 0; i < other.length; i++) {\n+        for (E element : other) {\n             assertEquals(\"lastIndexOf should return -1 for nonexistent \" +\n-                \"element\", -1, list1.lastIndexOf(other[i]));\n+                \"element\", -1, list1.lastIndexOf(element));\n             verify();\n         }\n     }\n         ListIterator<E> iter1 = list1.listIterator();\n         ListIterator<E> iter2 = list2.listIterator();\n \n-        for (int i = 0; i < elements.length; i++) {\n-            iter1.add(elements[i]);\n-            iter2.add(elements[i]);\n+        for (E element : elements) {\n+            iter1.add(element);\n+            iter2.add(element);\n             verify();\n         }\n \n         resetFull();\n         iter1 = getCollection().listIterator();\n         iter2 = getConfirmed().listIterator();\n-        for (int i = 0; i < elements.length; i++) {\n+        for (E element : elements) {\n             iter1.next();\n             iter2.next();\n-            iter1.add(elements[i]);\n-            iter2.add(elements[i]);\n+            iter1.add(element);\n+            iter2.add(element);\n             verify();\n         }\n     }\n         resetFull();\n         ListIterator<E> iter1 = getCollection().listIterator();\n         ListIterator<E> iter2 = getConfirmed().listIterator();\n-        for (int i = 0; i < elements.length; i++) {\n+        for (E element : elements) {\n             iter1.next();\n             iter2.next();\n-            iter1.set(elements[i]);\n-            iter2.set(elements[i]);\n+            iter1.set(element);\n+            iter2.set(element);\n             verify();\n         }\n     }\n     */\n    protected void failFastAll(List<E> list) {\n        Method[] methods = List.class.getMethods();\n-       for (int i = 0; i < methods.length; i++) {\n-           failFastMethod(list, methods[i]);\n+       for (Method method : methods) {\n+           failFastMethod(list, method);\n        }\n    }\n \n--- a/src/test/java/org/apache/commons/collections/list/CursorableLinkedListTest.java\n+++ b/src/test/java/org/apache/commons/collections/list/CursorableLinkedListTest.java\n                 \".testCanonicalFullCollectionExists\",\n                 \".testSerializeDeserializeThenCompare\"\n         };\n-        for (int i = 0; i < ignored.length; i++) {\n-            list.add(prefix + bulk + ignored[i]);\n-            list.add(prefix + bulk + bulk + ignored[i]);\n+        for (String element : ignored) {\n+            list.add(prefix + bulk + element);\n+            list.add(prefix + bulk + bulk + element);\n         }\n         return list.toArray(new String[0]);\n     }\n--- a/src/test/java/org/apache/commons/collections/list/SetUniqueListTest.java\n+++ b/src/test/java/org/apache/commons/collections/list/SetUniqueListTest.java\n         ListIterator<E> iter1 = list1.listIterator();\n         ListIterator<E> iter2 = list2.listIterator();\n \n-        for (int i = 0; i < elements.length; i++) {\n-            iter1.add(elements[i]);\n-            iter2.add(elements[i]);\n+        for (E element : elements) {\n+            iter1.add(element);\n+            iter2.add(element);\n             super.verify();  // changed here\n         }\n \n         resetFull();\n         iter1 = getCollection().listIterator();\n         iter2 = getConfirmed().listIterator();\n-        for (int i = 0; i < elements.length; i++) {\n+        for (E element : elements) {\n             iter1.next();\n             iter2.next();\n-            iter1.add(elements[i]);\n-            iter2.add(elements[i]);\n+            iter1.add(element);\n+            iter2.add(element);\n             super.verify();  // changed here\n         }\n     }\n         getConfirmed().addAll(Arrays.asList(elements));\n         verify();\n         assertTrue(\"Empty collection should change after addAll\", r);\n-        for (int i = 0; i < elements.length; i++) {\n+        for (E element : elements) {\n             assertTrue(\"Collection should contain added element\",\n-                    getCollection().contains(elements[i]));\n+                    getCollection().contains(element));\n         }\n \n         resetFull();\n--- a/src/test/java/org/apache/commons/collections/list/TransformedListTest.java\n+++ b/src/test/java/org/apache/commons/collections/list/TransformedListTest.java\n     public void testTransformedList_decorateTransform() {\n         List<Object> originalList = new ArrayList<Object>();\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n-        for (int i = 0; i < els.length; i++) {\n-            originalList.add(els[i]);\n+        for (Object el : els) {\n+            originalList.add(el);\n         }\n         List<?> list = TransformedList.transformedList(originalList, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, list.size());\n-        for (int i = 0; i < els.length; i++) {\n-            assertEquals(true, list.contains(new Integer((String) els[i])));\n-            assertEquals(false, list.contains(els[i]));\n+        for (Object el : els) {\n+            assertEquals(true, list.contains(new Integer((String) el)));\n+            assertEquals(false, list.contains(el));\n         }\n         \n         assertEquals(false, list.remove(els[0]));\n--- a/src/test/java/org/apache/commons/collections/map/AbstractMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/AbstractMapTest.java\n         verify();\n \n         resetFull();\n-        for(int i = 0; i < keys.length; i++) {\n+        for (Object key : keys) {\n             assertTrue(\"Map must contain key for a mapping in the map. \" +\n-                       \"Missing: \" + keys[i], getMap().containsKey(keys[i]));\n+                       \"Missing: \" + key, getMap().containsKey(key));\n         }\n         verify();\n     }\n         verify();\n \n         resetFull();\n-        for(int i = 0; i < values.length; i++) {\n+        for (Object value : values) {\n             assertTrue(\"Map must contain value for a mapping in the map.\",\n-                    getMap().containsValue(values[i]));\n+                    getMap().containsValue(value));\n         }\n         verify();\n     }\n         Object[] keys = getSampleKeys();\n         Object[] values = getSampleValues();\n \n-        for (int i = 0; i < keys.length; i++) {\n+        for (Object key : keys) {\n             assertTrue(\"Empty map.get() should return null.\",\n-                    getMap().get(keys[i]) == null);\n+                    getMap().get(key) == null);\n         }\n         verify();\n \n \n         Object[] keys = getSampleKeys();\n         Object[] values = getSampleValues();\n-        for (int i = 0; i < keys.length; i++) {\n-            Object o = getMap().remove(keys[i]);\n+        for (Object key : keys) {\n+            Object o = getMap().remove(key);\n             assertTrue(\"First map.remove should return null\", o == null);\n         }\n         verify();\n \n         resetFull();\n         int size = getMap().size();\n-        for (int i = 0; i < other.length; i++) {\n-            Object o = getMap().remove(other[i]);\n+        for (Object element : other) {\n+            Object o = getMap().remove(element);\n             assertNull(\"map.remove for nonexistent key should return null\", o);\n             assertEquals(\"map.remove for nonexistent key should not \" +\n                          \"shrink map\", size, getMap().size());\n                    \"\\nTest: \" + test + \"\\nReal: \" + known,\n                    known.containsAll(test));\n         // originally coded to use a HashBag, but now separate jar so...\n-        for (Iterator<V> it = known.iterator(); it.hasNext();) {\n-            boolean removed = test.remove(it.next());\n+        for (V v : known) {\n+            boolean removed = test.remove(v);\n             assertTrue(\"Map's values should still equal HashMap's\", removed);\n         }\n         assertTrue(\"Map's values should still equal HashMap's\", test.isEmpty());\n--- a/src/test/java/org/apache/commons/collections/map/AbstractSortedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/AbstractSortedMapTest.java\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n         public TestHeadMap(AbstractMapTest<K, V> main) {\n             super(\"SortedMap.HeadMap\", main);\n             Map<K, V> sm = main.makeFullMap();\n-            for (Iterator<Map.Entry<K, V>> it = sm.entrySet().iterator(); it.hasNext();) {\n-                Map.Entry<K, V> entry = it.next();\n+            for (Entry<K, V> entry : sm.entrySet()) {\n                 this.subSortedKeys.add(entry.getKey());\n                 this.subSortedValues.add(entry.getValue());\n             }\n         public TestTailMap(AbstractMapTest<K, V> main) {\n             super(\"SortedMap.TailMap\", main);\n             Map<K, V> sm = main.makeFullMap();\n-            for (Iterator<Map.Entry<K, V>> it = sm.entrySet().iterator(); it.hasNext();) {\n-                Map.Entry<K, V> entry = it.next();\n+            for (Entry<K, V> entry : sm.entrySet()) {\n                 this.subSortedKeys.add(entry.getKey());\n                 this.subSortedValues.add(entry.getValue());\n             }\n         public TestSubMap(AbstractMapTest<K, V> main) {\n             super(\"SortedMap.SubMap\", main);\n             Map<K, V> sm = main.makeFullMap();\n-            for (Iterator<Map.Entry<K, V>> it = sm.entrySet().iterator(); it.hasNext();) {\n-                Map.Entry<K, V> entry = it.next();\n+            for (Entry<K, V> entry : sm.entrySet()) {\n                 this.subSortedKeys.add(entry.getKey());\n                 this.subSortedValues.add(entry.getValue());\n             }\n--- a/src/test/java/org/apache/commons/collections/map/CaseInsensitiveMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/CaseInsensitiveMapTest.java\n         };\n \n         try {\n-            for (int i = 0; i < locales.length; i++) {\n-                Locale.setDefault(locales[i]);\n+            for (Locale locale : locales) {\n+                Locale.setDefault(locale);\n                 for (int j = 0; j < data.length; j++) {\n                     assertTrue(\"Test data corrupt: \" + j, data[j][0].equalsIgnoreCase(data[j][1]));\n                     CaseInsensitiveMap<String, String> map = new CaseInsensitiveMap<String, String>();\n--- a/src/test/java/org/apache/commons/collections/map/LRUMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/LRUMapTest.java\n             };\n         }\n \n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].start();\n-                threads[i].wait();\n-            }\n-        }\n-\n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].notifyAll();\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.start();\n+                thread.wait();\n+            }\n+        }\n+\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.notifyAll();\n             }\n         }\n \n         Thread.sleep(1000);\n \n-        for (int i = 0; i < threads.length; ++i) {\n-            threads[i].interrupt();\n-        }\n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].join();\n+        for (Thread thread : threads) {\n+            thread.interrupt();\n+        }\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.join();\n             }\n         }\n \n             };\n         }\n \n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].start();\n-                threads[i].wait();\n-            }\n-        }\n-\n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].notifyAll();\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.start();\n+                thread.wait();\n+            }\n+        }\n+\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.notifyAll();\n             }\n         }\n \n         Thread.sleep(1000);\n \n-        for (int i = 0; i < threads.length; ++i) {\n-            threads[i].interrupt();\n-        }\n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].join();\n+        for (Thread thread : threads) {\n+            thread.interrupt();\n+        }\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.join();\n             }\n         }\n \n             };\n         }\n \n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].start();\n-                threads[i].wait();\n-            }\n-        }\n-\n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].notifyAll();\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.start();\n+                thread.wait();\n+            }\n+        }\n+\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.notifyAll();\n             }\n         }\n \n         Thread.sleep(1000);\n \n-        for (int i = 0; i < threads.length; ++i) {\n-            threads[i].interrupt();\n-        }\n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].join();\n+        for (Thread thread : threads) {\n+            thread.interrupt();\n+        }\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.join();\n             }\n         }\n \n             };\n         }\n \n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].start();\n-                threads[i].wait();\n-            }\n-        }\n-\n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].notifyAll();\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.start();\n+                thread.wait();\n+            }\n+        }\n+\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.notifyAll();\n             }\n         }\n \n         Thread.sleep(1000);\n \n-        for (int i = 0; i < threads.length; ++i) {\n-            threads[i].interrupt();\n-        }\n-        for (int i = 0; i < threads.length; ++i) {\n-            synchronized (threads[i]) {\n-                threads[i].join();\n+        for (Thread thread : threads) {\n+            thread.interrupt();\n+        }\n+        for (Thread thread : threads) {\n+            synchronized (thread) {\n+                thread.join();\n             }\n         }\n \n--- a/src/test/java/org/apache/commons/collections/map/MultiKeyMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/MultiKeyMapTest.java\n         MultiKeyMap<K, V> multimap = getMap();\n         MultiKey<K>[] keys = getMultiKeyKeys();\n \n-        for (int i = 0; i < keys.length; i++) {\n-            MultiKey<K> key = keys[i];\n-\n+        for (MultiKey<K> key : keys) {\n             switch (key.size()) {\n                 case 2:\n                 assertEquals(true, multimap.containsKey(key.getKey(0), key.getKey(1)));\n--- a/src/test/java/org/apache/commons/collections/map/MultiValueMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/MultiValueMapTest.java\n         Map<?,?> map = (Map<?,?>) makeObject();\n         Map<?,?> map2 = (Map<?,?>) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n         assertEquals(\"Map is the right size\", map.size(), map2.size());\n-        for (Iterator<?> it = map.keySet().iterator(); it.hasNext();) {\n-            Object key = it.next();\n+        for (Object key : map.keySet()) {\n             assertEquals( \"Map had inequal elements\", map.get(key), map2.get(key) );\n             map2.remove(key);\n         }\n--- a/src/test/java/org/apache/commons/collections/set/TransformedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections/set/TransformedSetTest.java\n     public void testTransformedSet_decorateTransform() {\n         Set<Object> originalSet = new HashSet<Object>();\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n-        for (int i = 0; i < els.length; i++) {\n-            originalSet.add(els[i]);\n+        for (Object el : els) {\n+            originalSet.add(el);\n         }\n         Set<?> set = TransformedSet.transformedSet(originalSet, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, set.size());\n-        for (int i = 0; i < els.length; i++) {\n-            assertEquals(true, set.contains(new Integer((String) els[i])));\n-            assertEquals(false, set.contains(els[i]));\n+        for (Object el : els) {\n+            assertEquals(true, set.contains(new Integer((String) el)));\n+            assertEquals(false, set.contains(el));\n         }\n         \n         assertEquals(false, set.remove(els[0]));\n--- a/src/test/java/org/apache/commons/collections/set/TransformedSortedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections/set/TransformedSortedSetTest.java\n     public void testTransformedSet_decorateTransform() {\n         Set<Object> originalSet = new TreeSet<Object>();\n         Object[] els = new Object[] {\"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\"};\n-        for (int i = 0; i < els.length; i++) {\n-            originalSet.add(els[i]);\n+        for (Object el : els) {\n+            originalSet.add(el);\n         }\n         Set<?> set = TransformedSortedSet.transformedSet(originalSet, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);\n         assertEquals(els.length, set.size());\n-        for (int i = 0; i < els.length; i++) {\n-            assertEquals(true, set.contains(new Integer((String) els[i])));\n+        for (Object el : els) {\n+            assertEquals(true, set.contains(new Integer((String) el)));\n         }\n         \n         assertEquals(true, set.remove(new Integer((String) els[0])));", "timestamp": 1357577290, "metainfo": ""}