{"sha": "2067c96f3fc0304e2a5e3e165a339cabd569b0d7", "log": "[COLLECTIONS-285] Add serialization support for TreeBidiMap, thanks to Christian Gruenberg.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections4/bidimap/TreeBidiMap.java\n  */\n package org.apache.commons.collections4.bidimap;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n import java.util.AbstractSet;\n import java.util.Collection;\n import java.util.ConcurrentModificationException;\n  * not allow setValue() and will throw an\n  * UnsupportedOperationException on attempts to call that method.\n  *\n- * TODO: serialization does not work anymore\n- *\n  * @since 3.0 (previously DoubleOrderedMap v2.0)\n  * @version $Id$\n  */\n-public class TreeBidiMap<K extends Comparable<K>, V extends Comparable<V>> implements OrderedBidiMap<K, V> {\n+public class TreeBidiMap<K extends Comparable<K>, V extends Comparable<V>>\n+    implements OrderedBidiMap<K, V>, Serializable {\n \n     static enum DataElement {\n         KEY(\"key\"), VALUE(\"value\");\n         }\n     }\n \n-    private Node<K, V>[] rootNode;\n-    private int nodeCount = 0;\n-    private int modifications = 0;\n-    private Set<K> keySet;\n-    private Set<V> valuesSet;\n-    private Set<Map.Entry<K, V>> entrySet;\n-    private Inverse inverse = null;\n+    private static final long serialVersionUID = 721969328361807L;\n+\n+    private transient Node<K, V>[] rootNode;\n+    private transient int nodeCount = 0;\n+    private transient int modifications = 0;\n+    private transient Set<K> keySet;\n+    private transient Set<V> valuesSet;\n+    private transient Set<Map.Entry<K, V>> entrySet;\n+    private transient Inverse inverse = null;\n \n     //-----------------------------------------------------------------------\n     /**\n         }\n     }\n \n+    /**\n+     * Reads the content of the stream.\n+     */\n+    @SuppressWarnings(\"unchecked\") // This will fail at runtime if the stream is incorrect\n+    private void readObject(final ObjectInputStream stream) throws IOException, ClassNotFoundException{\n+        stream.defaultReadObject();\n+        rootNode = new Node[2];\n+        int size = stream.readInt();\n+        for(int i = 0; i < size; i++){\n+            K k =(K) stream.readObject();\n+            V v =(V) stream.readObject();\n+            put(k, v);\n+        }\n+    }\n+\n+    /**\n+     * Writes the content to the stream for serialization.\n+     */\n+    private void writeObject(final ObjectOutputStream stream) throws IOException{\n+        stream.defaultWriteObject();\n+        stream.writeInt(this.size());\n+        for (final Entry<K, V> entry : entrySet()) {\n+            stream.writeObject(entry.getKey());\n+            stream.writeObject(entry.getValue());\n+        }\n+    }\n+    \n     //-----------------------------------------------------------------------\n     /**\n      * A view of this map.", "timestamp": 1366223569, "metainfo": ""}