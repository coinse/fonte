{"sha": "32200eb896ae3e8ff31194568657585a198f71de", "log": "Unify handling of equals and hashCode   ", "commit": "\n--- a/src/java/org/apache/commons/collections/DefaultMapBag.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapBag.java,v 1.12 2003/12/03 11:37:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapBag.java,v 1.13 2003/12/24 23:22:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * @deprecated Moved to bag subpackage as AbstractMapBag. Due to be removed in v4.0.\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.12 $ $Date: 2003/12/03 11:37:44 $\n+ * @version $Revision: 1.13 $ $Date: 2003/12/24 23:22:54 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n         if (object == this) {\n             return true;\n         }\n-        return (object != null &&\n-                object.getClass().equals(this.getClass()) &&\n-                ((DefaultMapBag) object)._map.equals(this._map));\n+        if (object instanceof Bag == false) {\n+            return false;\n+        }\n+        Bag other = (Bag) object;\n+        if (other.size() != size()) {\n+            return false;\n+        }\n+        for (Iterator it = _map.keySet().iterator(); it.hasNext();) {\n+            Object element = (Object) it.next();\n+            if (other.getCount(element) != getCount(element)) {\n+                return false;\n+            }\n+        }\n+        return true;\n     }\n \n     /**\n--- a/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/java/org/apache/commons/collections/bag/AbstractMapBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.6 2003/12/24 23:09:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bag/AbstractMapBag.java,v 1.7 2003/12/24 23:22:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * the number of occurrences of that element in the bag.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.6 $ $Date: 2003/12/24 23:09:26 $\n+ * @version $Revision: 1.7 $ $Date: 2003/12/24 23:22:54 $\n  * \n  * @author Chuck Burdick\n  * @author Michael A. Smith\n         MutableInteger(int value) {\n             this.value = value;\n         }\n+        \n+        public boolean equals(Object obj) {\n+            if (obj instanceof MutableInteger == false) {\n+                return false;\n+            }\n+            return ((MutableInteger) obj).value == value;\n+        }\n+\n+        public int hashCode() {\n+            return value;\n+        }\n     }\n     \n     //-----------------------------------------------------------------------\n     \n     //-----------------------------------------------------------------------\n     /**\n-     * Returns true if the given object is not null, has the precise type \n-     * of this bag, and contains the same number of occurrences of all the\n-     * same elements.\n-     *\n-     * @param object  the object to test for equality\n-     * @return true if that object equals this bag\n+     * Compares this Bag to another.\n+     * This Bag equals another Bag if it contains the same number of occurances of\n+     * the same elements.\n+     * \n+     * @param obj  the Bag to compare to\n+     * @return true if equal\n      */\n     public boolean equals(Object object) {\n         if (object == this) {\n             return true;\n         }\n-        return (object != null &&\n-                object.getClass().equals(this.getClass()) &&\n-                ((AbstractMapBag) object).map.equals(this.map));\n-    }\n-\n-    /**\n-     * Returns the hash code of the underlying map.\n-     *\n-     * @return the hash code of the underlying map\n+        if (object instanceof Bag == false) {\n+            return false;\n+        }\n+        Bag other = (Bag) object;\n+        if (other.size() != size()) {\n+            return false;\n+        }\n+        for (Iterator it = map.keySet().iterator(); it.hasNext();) {\n+            Object element = (Object) it.next();\n+            if (other.getCount(element) != getCount(element)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Gets a hash code for the Bag compatable with the definition of equals.\n+     * The hash code is defined as the sum total of a hash code for each element.\n+     * The per element hash code is defined as\n+     * <code>(e==null ? 0 : e.hashCode()) ^ noOccurances)</code>.\n+     * This hash code is compatable with the Set interface.\n+     * \n+     * @return the hash code of the Bag\n      */\n     public int hashCode() {\n-        return map.hashCode();\n+        int total = 0;\n+        for (Iterator it = map.entrySet().iterator(); it.hasNext();) {\n+            Map.Entry entry = (Map.Entry) it.next();\n+            Object element = entry.getKey();\n+            MutableInteger count = (MutableInteger) entry.getValue();\n+            total += (element == null ? 0 : element.hashCode()) ^ count.value;\n+        }\n+        return total;\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n+++ b/src/test/org/apache/commons/collections/bag/AbstractTestBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/AbstractTestBag.java,v 1.4 2003/12/24 23:09:26 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/bag/AbstractTestBag.java,v 1.5 2003/12/24 23:22:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link Bag} fails.\n  *\n- * @version $Revision: 1.4 $ $Date: 2003/12/24 23:09:26 $\n+ * @version $Revision: 1.5 $ $Date: 2003/12/24 23:22:54 $\n  * \n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testEquals() {\n+        Bag bag = makeBag();\n+        Bag bag2 = makeBag();\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add(\"A\");\n+        assertEquals(false, bag.equals(bag2));\n+        bag2.add(\"A\");\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        bag.add(\"B\");\n+        bag.add(\"C\");\n+        bag2.add(\"A\");\n+        bag2.add(\"B\");\n+        bag2.add(\"B\");\n+        bag2.add(\"C\");\n+        assertEquals(true, bag.equals(bag2));\n+    }\n+\n+    public void testEqualsHashBag() {\n+        Bag bag = makeBag();\n+        Bag bag2 = new HashBag();\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add(\"A\");\n+        assertEquals(false, bag.equals(bag2));\n+        bag2.add(\"A\");\n+        assertEquals(true, bag.equals(bag2));\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        bag.add(\"B\");\n+        bag.add(\"C\");\n+        bag2.add(\"A\");\n+        bag2.add(\"B\");\n+        bag2.add(\"B\");\n+        bag2.add(\"C\");\n+        assertEquals(true, bag.equals(bag2));\n+    }\n+\n+    public void testHashCode() {\n+        Bag bag = makeBag();\n+        Bag bag2 = makeBag();\n+        assertEquals(0, bag.hashCode());\n+        assertEquals(0, bag2.hashCode());\n+        assertEquals(bag.hashCode(), bag2.hashCode());\n+        bag.add(\"A\");\n+        bag.add(\"A\");\n+        bag.add(\"B\");\n+        bag.add(\"B\");\n+        bag.add(\"C\");\n+        bag2.add(\"A\");\n+        bag2.add(\"A\");\n+        bag2.add(\"B\");\n+        bag2.add(\"B\");\n+        bag2.add(\"C\");\n+        assertEquals(bag.hashCode(), bag2.hashCode());\n+        \n+        int total = 0;\n+        total += (\"A\".hashCode() ^ 2);\n+        total += (\"B\".hashCode() ^ 2);\n+        total += (\"C\".hashCode() ^ 1);\n+        assertEquals(total, bag.hashCode());\n+        assertEquals(total, bag2.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testEmptyBagSerialization() throws IOException, ClassNotFoundException {\n         Bag bag = makeBag();\n         if (!(bag instanceof Serializable)) return;", "timestamp": 1072308174, "metainfo": ""}