{"sha": "30a8d35e54aa57f8a3dfc31e394491b25b171a30", "log": "- adding ${variable} interpolation to the getString() methods. the   code was taken from the jetspeed codebase. PR: Obtained from: Submitted by: Reviewed by:   ", "commit": "\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n  * @author <a href=\"mailto:kjohnson@transparent.com\">Kent Johnson</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author <a href=\"mailto:ipriha@surfeu.fi\">Ilkka Priha</a>\n- * @version $Id: ExtendedProperties.java,v 1.4 2001/05/13 21:46:22 geirm Exp $\n+ * @version $Id: ExtendedProperties.java,v 1.5 2001/09/21 03:14:40 jvanzyl Exp $\n  */\n public class ExtendedProperties extends Hashtable\n {\n      * information in a particular order.\n      */\n     protected ArrayList keysAsListed = new ArrayList();\n+\n+    protected final static String START_TOKEN=\"${\";\n+    protected final static String END_TOKEN=\"}\";\n+\n+    protected String interpolate(String base)\n+    {\n+        if (base == null)\n+        {\n+            return null;\n+        }                        \n+        \n+        int begin = -1;\n+        int end = -1;\n+        int prec = 0 - END_TOKEN.length();\n+        String variable = null;\n+        StringBuffer result = new StringBuffer();\n+        \n+        // FIXME: we should probably allow the escaping of the start token\n+        while ( ((begin=base.indexOf(START_TOKEN,prec+END_TOKEN.length()))>-1)\n+                && ((end=base.indexOf(END_TOKEN,begin))>-1) ) \n+        {\n+            result.append(base.substring(prec+END_TOKEN.length(),begin));\n+            variable = base.substring(begin+START_TOKEN.length(),end);\n+            if (get(variable)!=null) \n+            {\n+                result.append(get(variable));\n+            }\n+            prec=end;\n+        }\n+        result.append(base.substring(prec+END_TOKEN.length(),base.length()));\n+        \n+        return result.toString();\n+    }\n \n     /**\n      * This class is used to read properties lines.  These lines do\n \n         if (value instanceof String)\n         {\n-            return (String) value;\n+            return (String) interpolate((String)value);\n         }\n         else if (value == null)\n         {\n             if (defaults != null)\n             {\n-                return defaults.getString(key, defaultValue);\n+                return interpolate(defaults.getString(key, defaultValue));\n             }\n             else\n             {\n-                return defaultValue;\n+                return interpolate(defaultValue);\n             }\n         }\n         else if (value instanceof Vector)\n         {\n-            return (String) ((Vector) value).get(0);\n+            return interpolate((String) ((Vector) value).get(0));\n         }\n         else\n         {", "timestamp": 1001042080, "metainfo": ""}