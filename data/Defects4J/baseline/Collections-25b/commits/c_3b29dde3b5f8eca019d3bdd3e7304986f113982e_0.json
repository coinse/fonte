{"sha": "3b29dde3b5f8eca019d3bdd3e7304986f113982e", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/Bag.java\n+++ b/src/java/org/apache/commons/collections/Bag.java\n  * In an ideal world, the interface would be changed to fix the problems, however\n  * it has been decided to maintain backwards compatibility instead.\n  *\n+ * @param <E> the type held in the bag\n  * @since Commons Collections 2.0\n  * @version $Revision$ $Date$\n  *\n  * @author Chuck Burdick\n  * @author Stephen Colebourne\n  */\n-public interface Bag extends Collection {\n+public interface Bag<E> extends Collection<E> {\n \n     /**\n      * Returns the number of occurrences (cardinality) of the given\n      * @param object  the object to add\n      * @return <code>true</code> if the object was not already in the <code>uniqueSet</code>\n      */\n-    boolean add(Object object);\n+    boolean add(E object);\n \n     /**\n      * Adds <code>nCopies</code> copies of the specified object to the Bag.\n      * @param nCopies  the number of copies to add\n      * @return <code>true</code> if the object was not already in the <code>uniqueSet</code>\n      */\n-    boolean add(Object object, int nCopies);\n+    boolean add(E object, int nCopies);\n \n     /**\n      * <i>(Violation)</i>\n      * \n      * @return the Set of unique Bag elements\n      */\n-    Set uniqueSet();\n+    Set<E> uniqueSet();\n \n     /**\n      * Returns the total number of items in the bag across all types.\n      * @param coll  the collection to check against\n      * @return <code>true</code> if the Bag contains all the collection\n      */\n-    boolean containsAll(Collection coll);\n+    boolean containsAll(Collection<?> coll);\n \n     /**\n      * <i>(Violation)</i>\n      * @param coll  the collection to remove\n      * @return <code>true</code> if this call changed the collection\n      */\n-    boolean removeAll(Collection coll);\n+    boolean removeAll(Collection<?> coll);\n \n     /**\n      * <i>(Violation)</i>\n      * @param coll  the collection to retain\n      * @return <code>true</code> if this call changed the collection\n      */\n-    boolean retainAll(Collection coll);\n+    boolean retainAll(Collection<?> coll);\n \n     /**\n      * Returns an {@link Iterator} over the entire set of members,\n      * \n      * @return iterator over all elements in the Bag\n      */\n-    Iterator iterator();\n+    Iterator<E> iterator();\n \n     // The following is not part of the formal Bag interface, however where possible\n     // Bag implementations should follow these comments.\n //     * @return the hash code of the Bag\n //     */\n //    int hashCode();\n-    \n+\n }", "timestamp": 1252994050, "metainfo": ""}