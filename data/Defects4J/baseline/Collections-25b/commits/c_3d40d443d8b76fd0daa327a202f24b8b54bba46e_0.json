{"sha": "3d40d443d8b76fd0daa327a202f24b8b54bba46e", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r643795 | skestle | 2008-04-02 01:49:57 -0700 (Wed, 02 Apr 2008) | 5 lines          Generified EqualPredicate and created individual test class moved from TestPredicateUtils          Added assertFalse() and assertTrue to BasicPredicateTestBase with (Predicate, Object) parameters          Issues: COLLECTIONS-243, COLLECTIONS-253, COLLECTIONS-293     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestClosureUtils.java\n+++ b/src/test/org/apache/commons/collections/TestClosureUtils.java\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n+import org.apache.commons.collections.functors.EqualPredicate;\n+import org.apache.commons.collections.functors.FalsePredicate;\n import org.apache.commons.collections.functors.NOPClosure;\n+import org.apache.commons.collections.functors.TruePredicate;\n \n /**\n  * Tests the org.apache.commons.collections.ClosureUtils class.\n     /**\n      * Main.\n      * @param args\n-     */    \n+     */\n     public static void main(String[] args) {\n         TestRunner.run(suite());\n     }\n      */\n     public void tearDown() {\n     }\n-    \n-    static class MockClosure implements Closure {\n+\n+    static class MockClosure<T> implements Closure<T> {\n         int count = 0;\n-        \n-        public void execute(Object object) {\n+\n+        public void execute(T object) {\n             count++;\n         }\n-    }\n-    static class MockTransformer implements Transformer {\n+\n+        public void reset() {\n+            count = 0;\n+        }\n+    }\n+\n+    static class MockTransformer<T> implements Transformer<T, T> {\n         int count = 0;\n-        \n-        public Object transform(Object object) {\n+\n+        public T transform(T object) {\n             count++;\n             return object;\n         }\n         }\n         fail();\n     }\n-    \n+\n     // nopClosure\n     //------------------------------------------------------------------\n \n     //------------------------------------------------------------------\n \n     public void testForClosure() {\n-        MockClosure cmd = new MockClosure();\n+        MockClosure<Object> cmd = new MockClosure<Object>();\n         ClosureUtils.forClosure(5, cmd).execute(null);\n         assertEquals(5, cmd.count);\n-        assertSame(NOPClosure.INSTANCE, ClosureUtils.forClosure(0, new MockClosure()));\n-        assertSame(NOPClosure.INSTANCE, ClosureUtils.forClosure(-1, new MockClosure()));\n+        assertSame(NOPClosure.INSTANCE, ClosureUtils.forClosure(0, new MockClosure<Object>()));\n+        assertSame(NOPClosure.INSTANCE, ClosureUtils.forClosure(-1, new MockClosure<Object>()));\n         assertSame(NOPClosure.INSTANCE, ClosureUtils.forClosure(1, null));\n         assertSame(NOPClosure.INSTANCE, ClosureUtils.forClosure(3, null));\n         assertSame(cmd, ClosureUtils.forClosure(1, cmd));\n     //------------------------------------------------------------------\n \n     public void testWhileClosure() {\n-        MockClosure cmd = new MockClosure();\n-        ClosureUtils.whileClosure(PredicateUtils.falsePredicate(), cmd).execute(null);\n+        MockClosure<Object> cmd = new MockClosure<Object>();\n+        ClosureUtils.whileClosure(FalsePredicate.falsePredicate(), cmd).execute(null);\n         assertEquals(0, cmd.count);\n-        \n-        cmd = new MockClosure();\n+\n+        cmd = new MockClosure<Object>();\n         ClosureUtils.whileClosure(PredicateUtils.uniquePredicate(), cmd).execute(null);\n         assertEquals(1, cmd.count);\n-        \n+\n         try {\n             ClosureUtils.whileClosure(null, ClosureUtils.nopClosure());\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            ClosureUtils.whileClosure(PredicateUtils.falsePredicate(), null);\n+            ClosureUtils.whileClosure(FalsePredicate.falsePredicate(), null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n     //------------------------------------------------------------------\n \n     public void testDoWhileClosure() {\n-        MockClosure cmd = new MockClosure();\n-        ClosureUtils.doWhileClosure(cmd, PredicateUtils.falsePredicate()).execute(null);\n+        MockClosure<Object> cmd = new MockClosure<Object>();\n+        ClosureUtils.doWhileClosure(cmd, FalsePredicate.falsePredicate()).execute(null);\n         assertEquals(1, cmd.count);\n-        \n-        cmd = new MockClosure();\n+\n+        cmd = new MockClosure<Object>();\n         ClosureUtils.doWhileClosure(cmd, PredicateUtils.uniquePredicate()).execute(null);\n         assertEquals(2, cmd.count);\n-        \n+\n         try {\n             ClosureUtils.doWhileClosure(null, null);\n             fail();\n     // chainedClosure\n     //------------------------------------------------------------------\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testChainedClosure() {\n-        MockClosure a = new MockClosure();\n-        MockClosure b = new MockClosure();\n+        MockClosure<Object> a = new MockClosure<Object>();\n+        MockClosure<Object> b = new MockClosure<Object>();\n         ClosureUtils.chainedClosure(a, b).execute(null);\n         assertEquals(1, a.count);\n         assertEquals(1, b.count);\n-        \n-        a = new MockClosure();\n-        b = new MockClosure();\n-        ClosureUtils.chainedClosure(new Closure[] {a, b, a}).execute(null);\n+\n+        a = new MockClosure<Object>();\n+        b = new MockClosure<Object>();\n+        ClosureUtils.<Object>chainedClosure(new Closure[] {a, b, a}).execute(null);\n         assertEquals(2, a.count);\n         assertEquals(1, b.count);\n-        \n-        a = new MockClosure();\n-        b = new MockClosure();\n-        Collection coll = new ArrayList();\n+\n+        a = new MockClosure<Object>();\n+        b = new MockClosure<Object>();\n+        Collection<Closure<Object>> coll = new ArrayList<Closure<Object>>();\n         coll.add(b);\n         coll.add(a);\n         coll.add(b);\n-        ClosureUtils.chainedClosure(coll).execute(null);\n+        ClosureUtils.<Object>chainedClosure(coll).execute(null);\n         assertEquals(1, a.count);\n         assertEquals(2, b.count);\n-        \n-        assertSame(NOPClosure.INSTANCE, ClosureUtils.chainedClosure(new Closure[0]));\n-        assertSame(NOPClosure.INSTANCE, ClosureUtils.chainedClosure(Collections.EMPTY_LIST));\n-        \n+\n+        assertSame(NOPClosure.INSTANCE, ClosureUtils.<Object>chainedClosure(new Closure[0]));\n+        assertSame(NOPClosure.INSTANCE, ClosureUtils.<Object>chainedClosure(Collections.<Closure<Object>>emptyList()));\n+\n         try {\n             ClosureUtils.chainedClosure(null, null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            ClosureUtils.chainedClosure((Closure[]) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            ClosureUtils.chainedClosure((Collection) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            ClosureUtils.chainedClosure(new Closure[] {null, null});\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            coll = new ArrayList();\n+            ClosureUtils.<Object>chainedClosure((Closure[]) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ClosureUtils.<Object>chainedClosure((Collection<Closure<Object>>) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ClosureUtils.<Object>chainedClosure(new Closure[] {null, null});\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            coll = new ArrayList<Closure<Object>>();\n             coll.add(null);\n             coll.add(null);\n             ClosureUtils.chainedClosure(coll);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n-    \n+\n     // ifClosure\n     //------------------------------------------------------------------\n \n     public void testIfClosure() {\n-        MockClosure a = new MockClosure();\n-        MockClosure b = null;\n-        ClosureUtils.ifClosure(PredicateUtils.truePredicate(), a).execute(null);\n+        MockClosure<Object> a = new MockClosure<Object>();\n+        MockClosure<Object> b = null;\n+        ClosureUtils.ifClosure(TruePredicate.truePredicate(), a).execute(null);\n         assertEquals(1, a.count);\n \n-        a = new MockClosure();\n-        ClosureUtils.ifClosure(PredicateUtils.falsePredicate(), a).execute(null);\n-        assertEquals(0, a.count);\n-\n-        a = new MockClosure();\n-        b = new MockClosure();\n-        ClosureUtils.ifClosure(PredicateUtils.truePredicate(), a, b).execute(null);\n+        a = new MockClosure<Object>();\n+        ClosureUtils.ifClosure(FalsePredicate.<Object>falsePredicate(), a).execute(null);\n+        assertEquals(0, a.count);\n+\n+        a = new MockClosure<Object>();\n+        b = new MockClosure<Object>();\n+        ClosureUtils.ifClosure(TruePredicate.<Object>truePredicate(), a, b).execute(null);\n         assertEquals(1, a.count);\n         assertEquals(0, b.count);\n-        \n-        a = new MockClosure();\n-        b = new MockClosure();\n-        ClosureUtils.ifClosure(PredicateUtils.falsePredicate(), a, b).execute(null);\n+\n+        a = new MockClosure<Object>();\n+        b = new MockClosure<Object>();\n+        ClosureUtils.ifClosure(FalsePredicate.<Object>falsePredicate(), a, b).execute(null);\n         assertEquals(0, a.count);\n         assertEquals(1, b.count);\n-    }        \n+    }\n \n     // switchClosure\n     //------------------------------------------------------------------\n \n+    @SuppressWarnings(\"unchecked\")\n     public void testSwitchClosure() {\n-        MockClosure a = new MockClosure();\n-        MockClosure b = new MockClosure();\n-        ClosureUtils.switchClosure(\n-            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n-            new Closure[] {a, b}).execute(\"WELL\");\n-        assertEquals(0, a.count);\n-        assertEquals(0, b.count);\n-        \n-        a = new MockClosure();\n-        b = new MockClosure();\n-        ClosureUtils.switchClosure(\n-            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n-            new Closure[] {a, b}).execute(\"HELLO\");\n+        MockClosure<String> a = new MockClosure<String>();\n+        MockClosure<String> b = new MockClosure<String>();\n+        ClosureUtils.<String>switchClosure(\n+            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n+            new Closure[] { a, b }).execute(\"WELL\");\n+        assertEquals(0, a.count);\n+        assertEquals(0, b.count);\n+\n+        a.reset();\n+        b.reset();\n+        ClosureUtils.<String>switchClosure(\n+            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n+            new Closure[] { a, b }).execute(\"HELLO\");\n         assertEquals(1, a.count);\n         assertEquals(0, b.count);\n-        \n-        a = new MockClosure();\n-        b = new MockClosure();\n-        MockClosure c = new MockClosure();\n-        ClosureUtils.switchClosure(\n-            new Predicate[] {PredicateUtils.equalPredicate(\"HELLO\"), PredicateUtils.equalPredicate(\"THERE\")}, \n-            new Closure[] {a, b}, c).execute(\"WELL\");\n+\n+        a.reset();\n+        b.reset();\n+        MockClosure<String> c = new MockClosure<String>();\n+        ClosureUtils.<String>switchClosure(\n+            new Predicate[] { EqualPredicate.equalPredicate(\"HELLO\"), EqualPredicate.equalPredicate(\"THERE\") },\n+            new Closure[] { a, b }, c).execute(\"WELL\");\n         assertEquals(0, a.count);\n         assertEquals(0, b.count);\n         assertEquals(1, c.count);\n-        \n-        a = new MockClosure();\n-        b = new MockClosure();\n-        Map map = new HashMap();\n-        map.put(PredicateUtils.equalPredicate(\"HELLO\"), a);\n-        map.put(PredicateUtils.equalPredicate(\"THERE\"), b);\n-        ClosureUtils.switchClosure(map).execute(null);\n-        assertEquals(0, a.count);\n-        assertEquals(0, b.count);\n-\n-        a = new MockClosure();\n-        b = new MockClosure();\n-        map = new HashMap();\n-        map.put(PredicateUtils.equalPredicate(\"HELLO\"), a);\n-        map.put(PredicateUtils.equalPredicate(\"THERE\"), b);\n+\n+        a.reset();\n+        b.reset();\n+        Map<Predicate<String>, Closure<String>> map = new HashMap<Predicate<String>, Closure<String>>();\n+        map.put(EqualPredicate.equalPredicate(\"HELLO\"), a);\n+        map.put(EqualPredicate.equalPredicate(\"THERE\"), b);\n+        ClosureUtils.<String>switchClosure(map).execute(null);\n+        assertEquals(0, a.count);\n+        assertEquals(0, b.count);\n+\n+        a.reset();\n+        b.reset();\n+        map.clear();\n+        map.put(EqualPredicate.equalPredicate(\"HELLO\"), a);\n+        map.put(EqualPredicate.equalPredicate(\"THERE\"), b);\n         ClosureUtils.switchClosure(map).execute(\"THERE\");\n         assertEquals(0, a.count);\n         assertEquals(1, b.count);\n \n-        a = new MockClosure();\n-        b = new MockClosure();\n-        c = new MockClosure();\n-        map = new HashMap();\n-        map.put(PredicateUtils.equalPredicate(\"HELLO\"), a);\n-        map.put(PredicateUtils.equalPredicate(\"THERE\"), b);\n+        a.reset();\n+        b.reset();\n+        c.reset();\n+        map.clear();\n+        map.put(EqualPredicate.equalPredicate(\"HELLO\"), a);\n+        map.put(EqualPredicate.equalPredicate(\"THERE\"), b);\n         map.put(null, c);\n         ClosureUtils.switchClosure(map).execute(\"WELL\");\n         assertEquals(0, a.count);\n         assertEquals(0, b.count);\n         assertEquals(1, c.count);\n-        \n-        assertSame(NOPClosure.INSTANCE, ClosureUtils.switchClosure(new Predicate[0], new Closure[0]));\n-        assertSame(NOPClosure.INSTANCE, ClosureUtils.switchClosure(new HashMap()));\n-        map = new HashMap();\n+\n+        assertEquals(NOPClosure.INSTANCE, ClosureUtils.<String>switchClosure(new Predicate[0], new Closure[0]));\n+        assertEquals(NOPClosure.INSTANCE, ClosureUtils.<String>switchClosure(new HashMap<Predicate<String>, Closure<String>>()));\n+        map.clear();\n         map.put(null, null);\n-        assertSame(NOPClosure.INSTANCE, ClosureUtils.switchClosure(map));\n+        assertEquals(NOPClosure.INSTANCE, ClosureUtils.switchClosure(map));\n \n         try {\n             ClosureUtils.switchClosure(null, null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            ClosureUtils.switchClosure((Predicate[]) null, (Closure[]) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            ClosureUtils.switchClosure((Map) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            ClosureUtils.switchClosure(new Predicate[2], new Closure[2]);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            ClosureUtils.switchClosure(\n-                    new Predicate[] {PredicateUtils.truePredicate()},\n-                    new Closure[] {a,b});\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-    \n+            ClosureUtils.<String>switchClosure((Predicate<String>[]) null, (Closure<String>[]) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ClosureUtils.<String>switchClosure((Map<Predicate<String>, Closure<String>>) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ClosureUtils.<String>switchClosure(new Predicate[2], new Closure[2]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ClosureUtils.<String>switchClosure(\n+                    new Predicate[] { TruePredicate.<String>truePredicate() },\n+                    new Closure[] { a, b });\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n     // switchMapClosure\n     //------------------------------------------------------------------\n \n     public void testSwitchMapClosure() {\n-        MockClosure a = new MockClosure();\n-        MockClosure b = new MockClosure();\n-        Map map = new HashMap();\n+        MockClosure<String> a = new MockClosure<String>();\n+        MockClosure<String> b = new MockClosure<String>();\n+        Map<String, Closure<String>> map = new HashMap<String, Closure<String>>();\n         map.put(\"HELLO\", a);\n         map.put(\"THERE\", b);\n         ClosureUtils.switchMapClosure(map).execute(null);\n         assertEquals(0, a.count);\n         assertEquals(0, b.count);\n \n-        a = new MockClosure();\n-        b = new MockClosure();\n-        map = new HashMap();\n+        a.reset();\n+        b.reset();\n+        map.clear();\n         map.put(\"HELLO\", a);\n         map.put(\"THERE\", b);\n         ClosureUtils.switchMapClosure(map).execute(\"THERE\");\n         assertEquals(0, a.count);\n         assertEquals(1, b.count);\n \n-        a = new MockClosure();\n-        b = new MockClosure();\n-        MockClosure c = new MockClosure();\n-        map = new HashMap();\n+        a.reset();\n+        b.reset();\n+        map.clear();\n+        MockClosure<String> c = new MockClosure<String>();\n         map.put(\"HELLO\", a);\n         map.put(\"THERE\", b);\n         map.put(null, c);\n         assertEquals(0, b.count);\n         assertEquals(1, c.count);\n \n-        assertSame(NOPClosure.INSTANCE, ClosureUtils.switchMapClosure(new HashMap()));\n-        \n+        assertEquals(NOPClosure.INSTANCE, ClosureUtils.switchMapClosure(new HashMap<String, Closure<String>>()));\n+\n         try {\n             ClosureUtils.switchMapClosure(null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n-    \n+\n     // asClosure\n     //------------------------------------------------------------------\n \n     public void testTransformerClosure() {\n-        MockTransformer mock = new MockTransformer();\n-        Closure closure = ClosureUtils.asClosure(mock);\n+        MockTransformer<Object> mock = new MockTransformer<Object>();\n+        Closure<Object> closure = ClosureUtils.asClosure(mock);\n         closure.execute(null);\n         assertEquals(1, mock.count);\n         closure.execute(null);\n         assertEquals(2, mock.count);\n-        \n-        assertSame(ClosureUtils.nopClosure(), ClosureUtils.asClosure(null));\n-    }\n-    \n+\n+        assertEquals(ClosureUtils.nopClosure(), ClosureUtils.asClosure(null));\n+    }\n+\n }", "timestamp": 1252994278, "metainfo": ""}