{"sha": "b0580d508bdee2903f05d95d59e6e9a1dc9d710f", "log": "[COLLECTIONS-508] Updating equals and hashCode for ListValuedMap, SetValuedMap and MultiValuedMap  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/multimap/AbstractListValuedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/AbstractListValuedMap.java\n \n import java.io.Serializable;\n import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Map.Entry;\n \n import org.apache.commons.collections4.ListUtils;\n import org.apache.commons.collections4.ListValuedMap;\n         return ListUtils.emptyIfNull((List<V>) getMap().remove(key));\n     }\n \n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj instanceof ListValuedMap == false) {\n+            return false;\n+        }\n+        ListValuedMap<?, ?> other = (ListValuedMap<?, ?>) obj;\n+        if (other.size() != size()) {\n+            return false;\n+        }\n+        Iterator<?> it = keySet().iterator();\n+        while (it.hasNext()) {\n+            Object key = it.next();\n+            List<?> list = get(key);\n+            List<?> otherList = other.get(key);\n+            if (otherList == null) {\n+                return false;\n+            }\n+            if (ListUtils.isEqualList(list, otherList) == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int h = 0;\n+        Iterator<Entry<K, Collection<V>>> it = getMap().entrySet().iterator();\n+        while (it.hasNext()) {\n+            Entry<K, Collection<V>> entry = it.next();\n+            K key = entry.getKey();\n+            List<V> valueList = (List<V>) entry.getValue();\n+            h += (key == null ? 0 : key.hashCode()) ^ ListUtils.hashCodeForList(valueList);\n+        }\n+        return h;\n+    }\n+\n     /**\n      * Wrapped list to handle add and remove on the list returned by get(object)\n      */\n             return list.subList(fromIndex, toIndex);\n         }\n \n+        @Override\n+        public boolean equals(Object other) {\n+            final List<V> list = (List<V>) getMapping();\n+            if (list == null) {\n+                return Collections.emptyList().equals(other);\n+            }\n+            if (other == null) {\n+                return false;\n+            }\n+            if (!(other instanceof List)) {\n+                return false;\n+            }\n+            List<?> otherList = (List<?>) other;\n+            if (ListUtils.isEqualList(list, otherList) == false) {\n+                return false;\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            final List<V> list = (List<V>) getMapping();\n+            if (list == null) {\n+                return Collections.emptyList().hashCode();\n+            }\n+            return ListUtils.hashCodeForList(list);\n+        }\n+\n     }\n \n     /** Values ListItrerator */\n--- a/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/AbstractMultiValuedMap.java\n         return new MultiValuedMapIterator();\n     }\n \n-    @SuppressWarnings(\"rawtypes\")\n     @Override\n     public boolean equals(Object obj) {\n         if (this == obj) {\n         if (other.size() != size()) {\n             return false;\n         }\n-        Iterator it = keySet().iterator();\n+        Iterator<?> it = keySet().iterator();\n         while (it.hasNext()) {\n             Object key = it.next();\n             Collection<?> col = get(key);\n             if (otherCol == null) {\n                 return false;\n             }\n-            if (col.size() != otherCol.size()) {\n+            if (CollectionUtils.isEqualCollection(col, otherCol) == false) {\n                 return false;\n-            }\n-            for (Object value : col) {\n-                if (!otherCol.contains(value)) {\n-                    return false;\n-                }\n             }\n         }\n         return true;\n \n     @Override\n     public int hashCode() {\n-        return getMap().hashCode();\n+        int h = 0;\n+        Iterator<Entry<K, Collection<V>>> it = getMap().entrySet().iterator();\n+        while (it.hasNext()) {\n+            Entry<K, Collection<V>> entry = it.next();\n+            K key = entry.getKey();\n+            Collection<V> valueCol = entry.getValue();\n+            int vh = 0;\n+            if (valueCol != null) {\n+                Iterator<V> colIt = valueCol.iterator();\n+                while (colIt.hasNext()) {\n+                    V val = colIt.next();\n+                    if (val != null) {\n+                        vh += val.hashCode();\n+                    }\n+                }\n+            }\n+            h += (key == null ? 0 : key.hashCode()) ^ vh;\n+        }\n+        return h;\n     }\n \n     @Override\n             return col.toArray(a);\n         }\n \n-        @SuppressWarnings(\"rawtypes\")\n         @Override\n         public boolean equals(Object other) {\n             final Collection<V> col = getMapping();\n             if(!(other instanceof Collection)){\n                 return false;\n             }\n-            Collection otherCol = (Collection) other;\n-            if (col.size() != otherCol.size()) {\n+            Collection<?> otherCol = (Collection<?>) other;\n+            if (CollectionUtils.isEqualCollection(col, otherCol) == false) {\n                 return false;\n-            }\n-            for (Object value : col) {\n-                if (!otherCol.contains(value)) {\n-                    return false;\n-                }\n             }\n             return true;\n         }\n             if (col == null) {\n                 return CollectionUtils.EMPTY_COLLECTION.hashCode();\n             }\n-            return col.hashCode();\n+            int h = 0;\n+            Iterator<V> it = col.iterator();\n+            while (it.hasNext()) {\n+                V val = it.next();\n+                if (val != null) {\n+                    h += val.hashCode();\n+                }\n+            }\n+            return h;\n         }\n \n         @Override\n--- a/src/main/java/org/apache/commons/collections4/multimap/AbstractSetValuedMap.java\n+++ b/src/main/java/org/apache/commons/collections4/multimap/AbstractSetValuedMap.java\n  */\n package org.apache.commons.collections4.multimap;\n \n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n import java.util.Map;\n import java.util.Set;\n+import java.util.Map.Entry;\n \n import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.collections4.SetValuedMap;\n         return SetUtils.emptyIfNull((Set<V>) getMap().remove(key));\n     }\n \n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj instanceof SetValuedMap == false) {\n+            return false;\n+        }\n+        SetValuedMap<?, ?> other = (SetValuedMap<?, ?>) obj;\n+        if (other.size() != size()) {\n+            return false;\n+        }\n+        Iterator<?> it = keySet().iterator();\n+        while (it.hasNext()) {\n+            Object key = it.next();\n+            Set<?> set = get(key);\n+            Set<?> otherSet = other.get(key);\n+            if (otherSet == null) {\n+                return false;\n+            }\n+            if (SetUtils.isEqualSet(set, otherSet) == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int h = 0;\n+        Iterator<Entry<K, Collection<V>>> it = getMap().entrySet().iterator();\n+        while (it.hasNext()) {\n+            Entry<K, Collection<V>> entry = it.next();\n+            K key = entry.getKey();\n+            Set<V> valueSet = (Set<V>) entry.getValue();\n+            h += (key == null ? 0 : key.hashCode()) ^ SetUtils.hashCodeForSet(valueSet);\n+        }\n+        return h;\n+    }\n+\n     /**\n      * Wrapped set to handle add and remove on the collection returned by\n      * get(object)\n             super(key);\n         }\n \n+        @Override\n+        public boolean equals(Object other) {\n+            final Set<V> set = (Set<V>) getMapping();\n+            if (set == null) {\n+                return Collections.emptySet().equals(other);\n+            }\n+            if (other == null) {\n+                return false;\n+            }\n+            if (!(other instanceof Set)) {\n+                return false;\n+            }\n+            Set<?> otherSet = (Set<?>) other;\n+            if (SetUtils.isEqualSet(set, otherSet) == false) {\n+                return false;\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            final Set<V> set = (Set<V>) getMapping();\n+            if (set == null) {\n+                return Collections.emptySet().hashCode();\n+            }\n+            return SetUtils.hashCodeForSet(set);\n+        }\n+\n     }\n \n }\n--- a/src/test/java/org/apache/commons/collections4/multimap/MultiValuedHashMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/multimap/MultiValuedHashMapTest.java\n         assertEquals(2, listMap.get(\"B\").size());\n     }\n \n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public void testEqualsHashCodeContract() {\n+        MultiValuedMap map1 = new MultiValuedHashMap();\n+        MultiValuedMap map2 = new MultiValuedHashMap();\n+\n+        map1.put(\"a\", \"a1\");\n+        map1.put(\"a\", \"a2\");\n+        map2.put(\"a\", \"a2\");\n+        map2.put(\"a\", \"a1\");\n+        assertEquals(map1, map2);\n+        assertEquals(map1.hashCode(), map2.hashCode());\n+\n+        map2.put(\"a\", \"a2\");\n+        assertNotSame(map1, map2);\n+        assertNotSame(map1.hashCode(), map2.hashCode());\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public void testListValuedMapEqualsHashCodeContract() {\n+        ListValuedMap map1 = MultiValuedHashMap.listValuedHashMap();\n+        ListValuedMap map2 = MultiValuedHashMap.listValuedHashMap();\n+\n+        map1.put(\"a\", \"a1\");\n+        map1.put(\"a\", \"a2\");\n+        map2.put(\"a\", \"a1\");\n+        map2.put(\"a\", \"a2\");\n+        assertEquals(map1, map2);\n+        assertEquals(map1.hashCode(), map2.hashCode());\n+\n+        map1.put(\"b\", \"b1\");\n+        map1.put(\"b\", \"b2\");\n+        map2.put(\"b\", \"b2\");\n+        map2.put(\"b\", \"b1\");\n+        assertNotSame(map1, map2);\n+        assertNotSame(map1.hashCode(), map2.hashCode());\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public void testSetValuedMapEqualsHashCodeContract() {\n+        SetValuedMap map1 = MultiValuedHashMap.setValuedHashMap();\n+        SetValuedMap map2 = MultiValuedHashMap.setValuedHashMap();\n+\n+        map1.put(\"a\", \"a1\");\n+        map1.put(\"a\", \"a2\");\n+        map2.put(\"a\", \"a2\");\n+        map2.put(\"a\", \"a1\");\n+        assertEquals(map1, map2);\n+        assertEquals(map1.hashCode(), map2.hashCode());\n+\n+        map2.put(\"a\", \"a2\");\n+        assertEquals(map1, map2);\n+        assertEquals(map1.hashCode(), map2.hashCode());\n+\n+        map2.put(\"a\", \"a3\");\n+        assertNotSame(map1, map2);\n+        assertNotSame(map1.hashCode(), map2.hashCode());\n+    }\n+\n //    public void testCreate() throws Exception {\n //        writeExternalFormToDisk((java.io.Serializable) makeObject(),\n //                \"src/test/resources/data/test/MultiValuedHashMap.emptyCollection.version4.1.obj\");", "timestamp": 1405199423, "metainfo": ""}