{"sha": "e238eff5de5d0ea30ab7568f6e703986fceea732", "log": "adding ProxyListIterator, FilterListIterator, and tests removing unneeded import from ProxyIterartor, javadoc tweaks   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/FilterListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/FilterListIterator.java,v 1.1 2002/02/25 23:53:20 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/02/25 23:53:20 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+/** \n+ * A proxy {@link ListIterator ListIterator} which takes a {@link Predicate Predicate} instance to filter\n+  * out objects from an underlying {@link Iterator Iterator} instance.\n+  * Only objects for which the\n+  * specified <code>Predicate</code> evaluates to <code>true</code> are\n+  * returned.\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  * @author Jan Sorensen\n+  */\n+\n+public class FilterListIterator extends ProxyListIterator {\n+\n+    //-------------------------------------------------------------------------\n+    public FilterListIterator() {\n+    }\n+\n+    public FilterListIterator(ListIterator iterator ) {\n+        super(iterator);\n+    }\n+\n+    public FilterListIterator(ListIterator iterator, Predicate predicate) {\n+        super(iterator);\n+        this.predicate = predicate;\n+    }\n+\n+    // ListIterator interface\n+    //-------------------------------------------------------------------------\n+\n+    public void add(Object o) {\n+        throw new UnsupportedOperationException(\"FilterListIterator.add(Object) is not supported.\");\n+    }\n+\n+    public boolean hasNext() {\n+        if(nextObjectSet) {\n+            return true;\n+        } else {\n+            return setNextObject();\n+        }\n+    }\n+\n+    public boolean hasPrevious() {\n+        if(previousObjectSet) {\n+            return true;\n+        } else {\n+            return setPreviousObject();\n+        }\n+    }\n+\n+    public Object next() {\n+        if(!nextObjectSet) {\n+            if(!setNextObject()) {\n+                throw new NoSuchElementException();\n+            }\n+        }\n+        nextObjectSet = false;\n+        nextIndex++;\n+        return nextObject;\n+    }\n+\n+    public int nextIndex() {\n+        return nextIndex;\n+    }\n+\n+    public Object previous() {\n+        if(!previousObjectSet) {\n+            if(!setPreviousObject()) {\n+                throw new NoSuchElementException();\n+            }\n+        }\n+        previousObjectSet = false;\n+        nextIndex--;\n+        return previousObject;\n+    }\n+\n+    public int previousIndex() {\n+        return (nextIndex-1);\n+    }\n+\n+    public void remove() {\n+        throw new UnsupportedOperationException(\"FilterListIterator.remove() is not supported.\");\n+    }\n+\n+    public void set(Object o) {\n+        throw new UnsupportedOperationException(\"FilterListIterator.set(Object) is not supported.\");\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+\n+    /** \n+     * Getter for the predicate property.\n+     * @return value of the predicate property.\n+     */\n+    public Predicate getPredicate() {\n+        return predicate;\n+    }\n+    /** \n+     * Setter for the predicate property.\n+     * @param predicate new value for the predicate property.\n+     */\n+    public void setPredicate(Predicate predicate) {\n+        this.predicate = predicate;\n+    }\n+\n+    /**\n+     * Set {@link #nextObject} to the next object. If there \n+     * are no more objects then return <code>false</code>. \n+     * Otherwise, return <code>true</code>.\n+     */\n+    private boolean setNextObject() {\n+        ListIterator iterator = getListIterator();\n+        Predicate predicate = getPredicate();\n+        while(iterator.hasNext()) {\n+            Object object = iterator.next();\n+            if(predicate.evaluate(object)) {\n+                nextObject = object;\n+                nextObjectSet = true;\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Set {@link #nextObject} to the next object. If there \n+     * are no more objects then return <code>false</code>. \n+     * Otherwise, return <code>true</code>.\n+     */\n+    private boolean setPreviousObject() {\n+        ListIterator iterator = getListIterator();\n+        Predicate predicate = getPredicate();\n+        while(iterator.hasPrevious()) {\n+            Object object = iterator.previous();\n+            if(predicate.evaluate(object)) {\n+                previousObject = object;\n+                previousObjectSet = true;\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    // Attributes\n+    //-------------------------------------------------------------------------\n+\n+    /** Holds value of property \"predicate\". */\n+    private Predicate predicate;\n+\n+    /** \n+     * The value of the next (matching) object, when \n+     * {@link #nextObjectSet} is true. \n+     */\n+    private Object nextObject;\n+\n+    /** \n+     * Whether or not the {@link #nextObject} has been set\n+     * (possibly to <code>null</code>). \n+     */\n+    private boolean nextObjectSet = false;   \n+\n+\n+    /** \n+     * The value of the previous (matching) object, when \n+     * {@link #previousObjectSet} is true. \n+     */\n+    private Object previousObject;\n+\n+    /** \n+     * Whether or not the {@link #previousObject} has been set\n+     * (possibly to <code>null</code>). \n+     */\n+    private boolean previousObjectSet = false;   \n+\n+    /** \n+     * The index of the element that would be returned by {@link #next}.\n+     */\n+    private int nextIndex = 0;\n+}\n--- a/src/java/org/apache/commons/collections/ProxyIterator.java\n+++ b/src/java/org/apache/commons/collections/ProxyIterator.java\n-/*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyIterator.java,v 1.2 2002/02/10 08:07:42 jstrachan Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/02/10 08:07:42 $\n- *\n- * ====================================================================\n- *\n- * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution, if\n- *    any, must include the following acknowlegement:\n- *       \"This product includes software developed by the\n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowlegement may appear in the software itself,\n- *    if and wherever such third-party acknowlegements normally appear.\n- *\n- * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written\n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\"\n- *    nor may \"Apache\" appear in their names without prior written\n- *    permission of the Apache Group.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n- * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */\n-package org.apache.commons.collections;\n-\n-import java.util.Enumeration;\n-import java.util.Iterator;\n-\n-/** A Proxy {@link Iterator Iterator} which delegates its methods to a proxy instance.\n-  *\n-  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n-  */\n-\n-public class ProxyIterator implements Iterator {\n-    \n-    /** Holds value of property iterator. */\n-    private Iterator iterator;\n-    \n-    \n-    public ProxyIterator() {\n-    }\n-    \n-    public ProxyIterator( Iterator iterator ) {\n-        this.iterator = iterator;\n-    }\n-\n-    // Iterator interface\n-    //-------------------------------------------------------------------------\n-    public boolean hasNext() {\n-        return getIterator().hasNext();\n-    }\n-\n-    public Object next() {\n-        return getIterator().next();\n-    }\n-\n-    public void remove() {\n-        getIterator().remove();\n-    }\n-\n-    // Properties\n-    //-------------------------------------------------------------------------\n-    /** Getter for property iterator.\n-     * @return Value of property iterator.\n-     */\n-    public Iterator getIterator() {\n-        return iterator;\n-    }\n-    /** Setter for property iterator.\n-     * @param iterator New value of property iterator.\n-     */\n-    public void setIterator(Iterator iterator) {\n-        this.iterator = iterator;\n-    }\n-}\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyIterator.java,v 1.3 2002/02/25 23:53:20 rwaldhoff Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/02/25 23:53:20 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Iterator;\n+\n+/** A Proxy {@link Iterator Iterator} which delegates its methods to a proxy instance.\n+  *\n+  * @see ProxyListIterator\n+  * @version $Revision: 1.3 $ $Date: 2002/02/25 23:53:20 $\n+  *\n+  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n+  */\n+\n+public class ProxyIterator implements Iterator {\n+    \n+    /** Holds value of property iterator. */\n+    private Iterator iterator;\n+    \n+    \n+    public ProxyIterator() {\n+    }\n+    \n+    public ProxyIterator( Iterator iterator ) {\n+        this.iterator = iterator;\n+    }\n+\n+    // Iterator interface\n+    //-------------------------------------------------------------------------\n+    public boolean hasNext() {\n+        return getIterator().hasNext();\n+    }\n+\n+    public Object next() {\n+        return getIterator().next();\n+    }\n+\n+    public void remove() {\n+        getIterator().remove();\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+    /** Getter for property iterator.\n+     * @return Value of property iterator.\n+     */\n+    public Iterator getIterator() {\n+        return iterator;\n+    }\n+    /** Setter for property iterator.\n+     * @param iterator New value of property iterator.\n+     */\n+    public void setIterator(Iterator iterator) {\n+        this.iterator = iterator;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/ProxyListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyListIterator.java,v 1.1 2002/02/25 23:53:20 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/02/25 23:53:20 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ListIterator;\n+\n+/**\n+ * A proxy {@link ListIterator ListIterator} which delegates its\n+ * methods to a proxy instance.\n+ *\n+ * @see ProxyIterator\n+ * @version $Revision: 1.1 $ $Date: 2002/02/25 23:53:20 $\n+ * @author Rodney Waldhoff\n+ */\n+public class ProxyListIterator implements ListIterator {\n+\n+    // Constructor\n+    //-------------------------------------------------------------------------\n+\n+    public ProxyListIterator() {\n+    }\n+\n+    public ProxyListIterator(ListIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    // ListIterator interface\n+    //-------------------------------------------------------------------------\n+\n+    public void add(Object o) {\n+        getListIterator().add(o);\n+    }\n+\n+    public boolean hasNext() {\n+        return getListIterator().hasNext();\n+    }\n+\n+    public boolean hasPrevious() {\n+        return getListIterator().hasPrevious();\n+    }\n+\n+    public Object next() {\n+        return getListIterator().next();\n+    }\n+\n+    public int nextIndex() {\n+        return getListIterator().nextIndex();\n+    }\n+\n+    public Object previous() {\n+        return getListIterator().previous();\n+    }\n+\n+    public int previousIndex() {\n+        return getListIterator().previousIndex();\n+    }\n+\n+    public void remove() {\n+        getListIterator().remove();\n+    }\n+\n+    public void set(Object o) {\n+        getListIterator().set(o);\n+    }\n+\n+    // Properties\n+    //-------------------------------------------------------------------------\n+\n+    /** \n+     * Getter for property iterator.\n+     * @return Value of property iterator.\n+     */\n+    public ListIterator getListIterator() {\n+        return iterator;\n+    }\n+\n+    /**\n+     * Setter for property iterator.\n+     * @param iterator New value of property iterator.\n+     */\n+    public void setListIterator(ListIterator iterator) {\n+        this.iterator = iterator;\n+    }\n+\n+    // Attributes\n+    //-------------------------------------------------------------------------\n+\n+    /** Holds value of property \"iterator\". */\n+    private ListIterator iterator;\n+\n+}\n+\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.17 2002/02/25 23:15:29 morgand Exp $\n- * $Revision: 1.17 $\n- * $Date: 2002/02/25 23:15:29 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.18 2002/02/25 23:53:20 rwaldhoff Exp $\n+ * $Revision: 1.18 $\n+ * $Date: 2002/02/25 23:53:20 $\n  *\n  * ====================================================================\n  *\n /**\n  * Entry point for all Collections tests.\n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.17 2002/02/25 23:15:29 morgand Exp $\n+ * @version $Id: TestAll.java,v 1.18 2002/02/25 23:53:20 rwaldhoff Exp $\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestFastTreeMap.suite());\n         suite.addTest(TestFastTreeMap1.suite());\n         suite.addTest(TestFilterIterator.suite());\n+        suite.addTest(TestFilterListIterator.suite());\n         suite.addTest(TestHashBag.suite());\n         suite.addTest(TestHashMap.suite());\n         suite.addTest(TestLRUMap.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestFilterListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestFilterListIterator.java,v 1.1 2002/02/25 23:53:20 rwaldhoff Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/02/25 23:53:20 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.framework.Test;\n+import java.util.NoSuchElementException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Random;\n+\n+/**\n+ * @version $Revision: 1.1 $ $Date: 2002/02/25 23:53:20 $\n+ * @author Rodney Waldhoff\n+ */\n+public class TestFilterListIterator extends TestCase {\n+    public TestFilterListIterator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestFilterListIterator.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestFilterListIterator.class.getName() };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    private ArrayList list = null;\n+    private ArrayList odds = null;\n+    private ArrayList evens = null;\n+    private ArrayList threes = null;\n+    private ArrayList fours = null;\n+    private ArrayList sixes = null;\n+    private Predicate truePred = null;\n+    private Predicate falsePred = null;\n+    private Predicate evenPred = null;\n+    private Predicate oddPred = null;\n+    private Predicate threePred = null;\n+    private Predicate fourPred = null;\n+    private Random random = new Random();\n+\n+    public void setUp() {\n+        list = new ArrayList();\n+        odds = new ArrayList();\n+        evens = new ArrayList();\n+        threes = new ArrayList();\n+        fours = new ArrayList();\n+        sixes = new ArrayList();\n+        for(int i=0;i<20;i++) {\n+            list.add(new Integer(i));\n+            if(i%2 == 0) { evens.add(new Integer(i)); }\n+            if(i%2 == 1) { odds.add(new Integer(i)); }\n+            if(i%4 == 0) { fours.add(new Integer(i)); }\n+            if(i%6 == 0) { sixes.add(new Integer(i)); }\n+        }\n+\n+        truePred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return true;\n+            }\n+        };\n+\n+        falsePred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return true;\n+            }\n+        };\n+\n+        evenPred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return (((Integer)x).intValue()%2 == 0);\n+            }\n+        };\n+\n+        oddPred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return (((Integer)x).intValue()%2 == 1);\n+            }\n+        };\n+\n+        threePred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return (((Integer)x).intValue()%3 == 0);\n+            }\n+        };\n+\n+        fourPred = new Predicate() {\n+            public boolean evaluate(Object x) { \n+                return (((Integer)x).intValue()%4 == 0);\n+            }\n+        };\n+\n+    }\n+\n+    public void tearDown() {\n+        list = null;\n+        odds = null;\n+        evens = null;\n+        threes = null;\n+        fours = null;\n+        sixes = null;\n+        truePred = null;\n+        falsePred = null;\n+        evenPred = null;\n+        oddPred = null;\n+        threePred = null;\n+        fourPred = null;\n+    }\n+\n+    public void testWalkLists() {\n+        // this just confirms that our walkLists method works OK\n+        walkLists(list,list.listIterator());\n+    }\n+\n+    public void testManual() {\n+        // do this one \"by hand\" as a sanity check\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),threePred);\n+        \n+        assertEquals(new Integer(0),filtered.next());\n+        assertEquals(new Integer(3),filtered.next());\n+        assertEquals(new Integer(6),filtered.next());\n+        assertEquals(new Integer(9),filtered.next());\n+        assertEquals(new Integer(12),filtered.next());\n+        assertEquals(new Integer(15),filtered.next());\n+        assertEquals(new Integer(18),filtered.next());\n+\n+        assertEquals(new Integer(18),filtered.previous());\n+        assertEquals(new Integer(15),filtered.previous());\n+        assertEquals(new Integer(12),filtered.previous());\n+        assertEquals(new Integer(9),filtered.previous());\n+        assertEquals(new Integer(6),filtered.previous());\n+        assertEquals(new Integer(3),filtered.previous());\n+        assertEquals(new Integer(0),filtered.previous());\n+    \n+        assertTrue(!filtered.hasPrevious());\n+\n+        assertEquals(new Integer(0),filtered.next());\n+        assertEquals(new Integer(3),filtered.next());\n+        assertEquals(new Integer(6),filtered.next());\n+        assertEquals(new Integer(9),filtered.next());\n+        assertEquals(new Integer(12),filtered.next());\n+        assertEquals(new Integer(15),filtered.next());\n+        assertEquals(new Integer(18),filtered.next());\n+\n+        assertTrue(!filtered.hasNext());\n+\n+        assertEquals(new Integer(18),filtered.previous());\n+        assertEquals(new Integer(15),filtered.previous());\n+        assertEquals(new Integer(12),filtered.previous());\n+        assertEquals(new Integer(9),filtered.previous());\n+        assertEquals(new Integer(6),filtered.previous());\n+        assertEquals(new Integer(3),filtered.previous());\n+        assertEquals(new Integer(0),filtered.previous());\n+\n+        assertEquals(new Integer(0),filtered.next());\n+        assertEquals(new Integer(0),filtered.previous());\n+        assertEquals(new Integer(0),filtered.next());\n+        \n+        assertEquals(new Integer(3),filtered.next());\n+        assertEquals(new Integer(6),filtered.next());\n+        assertEquals(new Integer(6),filtered.previous());\n+        assertEquals(new Integer(3),filtered.previous());\n+        assertEquals(new Integer(3),filtered.next());\n+        assertEquals(new Integer(6),filtered.next());\n+\n+        assertEquals(new Integer(9),filtered.next());\n+        assertEquals(new Integer(12),filtered.next());\n+        assertEquals(new Integer(15),filtered.next());\n+        assertEquals(new Integer(15),filtered.previous());\n+        assertEquals(new Integer(12),filtered.previous());\n+        assertEquals(new Integer(9),filtered.previous());\n+\n+    }\n+\n+    public void testTruePredicate() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),truePred);\n+        walkLists(list,filtered);\n+    }\n+\n+    public void testFalsePredicate() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),falsePred);\n+        walkLists(new ArrayList(),filtered);\n+    }\n+\n+    public void testEvens() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),evenPred);\n+        walkLists(evens,filtered);\n+    }\n+    \n+    public void testOdds() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),oddPred);\n+        walkLists(odds,filtered);\n+    }\n+\n+    public void testThrees() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),threePred);\n+        walkLists(threes,filtered);\n+    }\n+\n+    public void testFours() {\n+        FilterListIterator filtered = new FilterListIterator(list.listIterator(),fourPred);\n+        walkLists(fours,filtered);\n+    }\n+\n+    public void testNestedSixes() {\n+        FilterListIterator filtered = new FilterListIterator(\n+                                        new FilterListIterator(list.listIterator(),threePred),\n+                                        evenPred\n+                                      );\n+        walkLists(sixes,filtered);\n+    }\n+\n+    public void testNestedSixes2() {\n+        FilterListIterator filtered = new FilterListIterator(\n+                                        new FilterListIterator(list.listIterator(),evenPred),\n+                                        threePred\n+                                      );\n+        walkLists(sixes,filtered);\n+    }\n+\n+    // Utilities\n+\n+    private void walkLists(List list, ListIterator testing) {\n+        ListIterator expected = list.listIterator();\n+\n+        // walk all the way forward\n+        while(expected.hasNext()) {\n+            assertEquals(expected.nextIndex(),testing.nextIndex());\n+            assertEquals(expected.previousIndex(),testing.previousIndex());\n+            assertTrue(\"a\",testing.hasNext());\n+            assertEquals(\"b\",expected.next(),testing.next());\n+        }\n+        \n+        // walk all the way back\n+        while(expected.hasPrevious()) {\n+            assertEquals(expected.nextIndex(),testing.nextIndex());\n+            assertEquals(expected.previousIndex(),testing.previousIndex());\n+            assertTrue(\"c\",testing.hasPrevious());\n+            assertEquals(\"d\",expected.previous(),testing.previous());\n+        }\n+\n+        // forward,back,foward\n+        while(expected.hasNext()) {\n+            assertEquals(expected.nextIndex(),testing.nextIndex());\n+            assertEquals(expected.previousIndex(),testing.previousIndex());\n+            assertTrue(testing.hasNext());\n+            assertEquals(expected.next(),testing.next());\n+            assertTrue(testing.hasPrevious());\n+            assertEquals(expected.previous(),testing.previous());\n+            assertTrue(testing.hasNext());\n+            assertEquals(expected.next(),testing.next());\n+        }\n+\n+        // walk all the way back\n+        while(expected.hasPrevious()) {\n+            assertEquals(expected.nextIndex(),testing.nextIndex());\n+            assertEquals(expected.previousIndex(),testing.previousIndex());\n+            assertTrue(testing.hasPrevious());\n+            assertEquals(expected.previous(),testing.previous());\n+        }\n+\n+        for(int i=0;i<list.size();i++) {\n+            // walk forward i\n+            for(int j=0;j<i;j++) {\n+                assertEquals(expected.nextIndex(),testing.nextIndex());\n+                assertEquals(expected.previousIndex(),testing.previousIndex());\n+                assertTrue(expected.hasNext()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasNext());\n+                assertEquals(expected.next(),testing.next());\n+            }\n+            // walk back i/2\n+            for(int j=0;j<i/2;j++) {\n+                assertEquals(expected.nextIndex(),testing.nextIndex());\n+                assertEquals(expected.previousIndex(),testing.previousIndex());\n+                assertTrue(expected.hasPrevious()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasPrevious());\n+                assertEquals(expected.previous(),testing.previous());\n+            }\n+            // walk foward i/2\n+            for(int j=0;j<i/2;j++) {\n+                assertEquals(expected.nextIndex(),testing.nextIndex());\n+                assertEquals(expected.previousIndex(),testing.previousIndex());\n+                assertTrue(expected.hasNext()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasNext());\n+                assertEquals(expected.next(),testing.next());\n+            }\n+            // walk back i\n+            for(int j=0;j<i;j++) {\n+                assertEquals(expected.nextIndex(),testing.nextIndex());\n+                assertEquals(expected.previousIndex(),testing.previousIndex());\n+                assertTrue(expected.hasPrevious()); // if this one fails we've got a logic error in the test\n+                assertTrue(testing.hasPrevious());\n+                assertEquals(expected.previous(),testing.previous());\n+            }\n+        }\n+\n+        // random walk\n+        StringBuffer walkdescr = new StringBuffer(500);\n+        for(int i=0;i<500;i++) {\n+            if(random.nextBoolean()) {\n+                // step foward\n+                walkdescr.append(\"+\");\n+                if(expected.hasNext()) {\n+                    assertEquals(walkdescr.toString(),expected.next(),testing.next());\n+                }\n+            } else {\n+                // step backward\n+                walkdescr.append(\"-\");\n+                if(expected.hasPrevious()) {\n+                    assertEquals(walkdescr.toString(),expected.previous(),testing.previous());\n+                }\n+            }\n+            assertEquals(walkdescr.toString(),expected.nextIndex(),testing.nextIndex());\n+            assertEquals(walkdescr.toString(),expected.previousIndex(),testing.previousIndex());\n+        }\n+\n+    }\n+\n+}", "timestamp": 1014681200, "metainfo": ""}