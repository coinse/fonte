{"sha": "eb1e54d9910f8b15779177e9bd1d6cd77da9bb60", "log": "Fix @since tag: remove redundant Commons Collections, change 5 to 4.0 where applicable.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/ArrayStack.java\n+++ b/src/main/java/org/apache/commons/collections/ArrayStack.java\n  * Unlike <code>Stack</code>, <code>ArrayStack</code> accepts null entries.\n  *\n  * @see java.util.Stack\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author Craig R. McClanahan\n--- a/src/main/java/org/apache/commons/collections/Bag.java\n+++ b/src/main/java/org/apache/commons/collections/Bag.java\n  * it has been decided to maintain backwards compatibility instead.\n  *\n  * @param <E> the type held in the bag\n- * @since Commons Collections 2.0\n+ * @since 2.0\n  * @version $Revision$\n  *\n  * @author Chuck Burdick\n--- a/src/main/java/org/apache/commons/collections/BagUtils.java\n+++ b/src/main/java/org/apache/commons/collections/BagUtils.java\n  * Provides utility methods and decorators for {@link Bag} and {@link SortedBag}\n  * instances.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  * 2007) $\n  *\n--- a/src/main/java/org/apache/commons/collections/BidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/BidiMap.java\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/BoundedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/BoundedCollection.java\n  * @see CollectionUtils#isFull\n  * @see CollectionUtils#maxSize\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Herve Quiroz\n--- a/src/main/java/org/apache/commons/collections/BoundedMap.java\n+++ b/src/main/java/org/apache/commons/collections/BoundedMap.java\n  * maximum number of elements. This interface allows the querying of details\n  * associated with the maximum number of elements.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/Buffer.java\n+++ b/src/main/java/org/apache/commons/collections/Buffer.java\n  * {@link Bag}.\n  *\n  * @param <E> the type of the elements in the buffer\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Avalon\n--- a/src/main/java/org/apache/commons/collections/BufferOverflowException.java\n+++ b/src/main/java/org/apache/commons/collections/BufferOverflowException.java\n  * The BufferOverflowException is used when the buffer's capacity has been\n  * exceeded.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Avalon\n--- a/src/main/java/org/apache/commons/collections/BufferUnderflowException.java\n+++ b/src/main/java/org/apache/commons/collections/BufferUnderflowException.java\n  * <p>\n  * NOTE: From version 3.0, this exception extends NoSuchElementException.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Avalon\n--- a/src/main/java/org/apache/commons/collections/BufferUtils.java\n+++ b/src/main/java/org/apache/commons/collections/BufferUtils.java\n /**\n  * Provides utility methods and decorators for {@link Buffer} instances.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Paul Jack\n      * @param timeoutMillis  the timeout value in milliseconds, zero or less for no timeout\n      * @return a blocking buffer backed by that buffer\n      * @throws IllegalArgumentException  if the Buffer is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <E> Buffer<E> blockingBuffer(Buffer<E> buffer, long timeoutMillis) {\n         return BlockingBuffer.blockingBuffer(buffer, timeoutMillis);\n      * @param maximumSize  the maximum size\n      * @return a bounded buffer backed by the given buffer\n      * @throws IllegalArgumentException if the given buffer is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <E> Buffer<E> boundedBuffer(Buffer<E> buffer, int maximumSize) {\n         return BoundedBuffer.boundedBuffer(buffer, maximumSize);\n      * @param timeoutMillis  the timeout value in milliseconds, zero or less for no timeout\n      * @return a bounded buffer backed by the given buffer\n      * @throws IllegalArgumentException if the given buffer is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <E> Buffer<E> boundedBuffer(Buffer<E> buffer, int maximumSize, long timeoutMillis) {\n         return BoundedBuffer.boundedBuffer(buffer, maximumSize, timeoutMillis);\n--- a/src/main/java/org/apache/commons/collections/Closure.java\n+++ b/src/main/java/org/apache/commons/collections/Closure.java\n  * {@link ClosureUtils}. These include method invocation and for/while loops.\n  *\n  * @param <T> the type that the closure acts on\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author James Strachan\n--- a/src/main/java/org/apache/commons/collections/ClosureUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ClosureUtils.java\n  * </ul>\n  * All the supplied closures are Serializable.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * @return the <code>if</code> closure\n      * @throws IllegalArgumentException if the predicate is null\n      * @throws IllegalArgumentException if the closure is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <E> Closure<E> ifClosure(Predicate<? super E> predicate, Closure<? super E> trueClosure) {\n         return IfClosure.<E>ifClosure(predicate, trueClosure);\n--- a/src/main/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/main/java/org/apache/commons/collections/CollectionUtils.java\n  * Provides utility methods and decorators for {@link Collection} instances.\n  * Method parameters will take {@link Iterable} objects when possible.\n  *\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author Rodney Waldhoff\n      * @param object  the object to add, if null it will not be added\n      * @return true if the collection changed\n      * @throws NullPointerException if the collection is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <T> boolean addIgnoreNull(Collection<T> collection, T object) {\n         if (collection == null) {\n      * @param object  the object to get the size of, may be null\n      * @return the size of the specified collection or 0 if the object was null\n      * @throws IllegalArgumentException thrown if object is not recognised\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public static int size(Object object) {\n         if (object == null) {\n      * @param object  the object to get the size of, may be null\n      * @return true if empty or null\n      * @throws IllegalArgumentException thrown if object is not recognised\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static boolean sizeIsEmpty(Object object) {\n         if (object == null) {\n      *\n      * @param coll  the collection to check, may be null\n      * @return true if empty or null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static boolean isEmpty(Collection<?> coll) {\n         return (coll == null || coll.isEmpty());\n      *\n      * @param coll  the collection to check, may be null\n      * @return true if non-null and non-empty\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static boolean isNotEmpty(Collection<?> coll) {\n         return !isEmpty(coll);\n      * @return a <code>Collection</code> containing all the elements of <code>collection</code>\n      * that occur at least once in <code>retain</code>.\n      * @throws NullPointerException if either parameter is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <C> Collection<C> retainAll(Collection<C> collection, Collection<?> retain) {\n         return ListUtils.retainAll(collection, retain);\n      * @return a <code>Collection</code> containing all the elements of <code>collection</code> except\n      * any elements that also occur in <code>remove</code>.\n      * @throws NullPointerException if either parameter is null\n-     * @since Commons Collections 3.3 (method existed in 3.2 but was completely broken)\n+     * @since 3.3 (method existed in 3.2 but was completely broken)\n      */\n     public static <E> Collection<E> removeAll(Collection<E> collection, Collection<?> remove) {\n         return ListUtils.removeAll(collection, remove);\n--- a/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ComparatorUtils.java\n  * convenient central place if you have use for more than one class\n  * in the <code>comparators</code> subpackage.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Paul Jack\n--- a/src/main/java/org/apache/commons/collections/EnumerationUtils.java\n+++ b/src/main/java/org/apache/commons/collections/EnumerationUtils.java\n /**\n  * Provides utility methods for {@link Enumeration} instances.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  *\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n--- a/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/main/java/org/apache/commons/collections/ExtendedProperties.java\n  * much time to improve it), I wrote it this way.  If you don't like\n  * it, go ahead and tune it up!\n  *\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>\n      * @return The associated List object.\n      * @throws ClassCastException is thrown if the key maps to an\n      * object that is not a List.\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public List<String> getList(String key) {\n         return getList(key, null);\n      * @return The associated List.\n      * @throws ClassCastException is thrown if the key maps to an\n      * object that is not a List.\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public List<String> getList(String key, List<String> defaultValue) {\n         Object value = get(key);\n--- a/src/main/java/org/apache/commons/collections/Factory.java\n+++ b/src/main/java/org/apache/commons/collections/Factory.java\n  *\n  * @param <T> the type that the factory creates\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Arron Bates\n--- a/src/main/java/org/apache/commons/collections/FactoryUtils.java\n+++ b/src/main/java/org/apache/commons/collections/FactoryUtils.java\n  * </ul>\n  * All the supplied factories are Serializable.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/FunctorException.java\n+++ b/src/main/java/org/apache/commons/collections/FunctorException.java\n  * Runtime exception thrown from functors.\n  * If required, a root cause error can be wrapped within this one.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/Get.java\n+++ b/src/main/java/org/apache/commons/collections/Get.java\n /**\n  * The \"read\" subset of the {@link Map} interface.\n  * \n- * @since Commons Collections 4.0\n+ * @since 4.0\n  * @version $Id$\n  *\n  * @see Put\n--- a/src/main/java/org/apache/commons/collections/IterableGet.java\n+++ b/src/main/java/org/apache/commons/collections/IterableGet.java\n \n /**\n  * The \"read\" subset of the {@link Map} interface.\n- * @since Commons Collections 5\n- * TODO fix version\n- * @version $Revision$\n+ *\n+ * @since 4.0\n+ * @version $Id$\n+ *\n  * @see Put\n- * @author Matt Benson\n  */\n public interface IterableGet<K, V> extends Get<K, V> {\n     /**\n--- a/src/main/java/org/apache/commons/collections/IterableMap.java\n+++ b/src/main/java/org/apache/commons/collections/IterableMap.java\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/IterableSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/IterableSortedMap.java\n  *\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n- * @since Commons Collections 5\n- * TODO fix version\n- * @version $Revision$\n  *\n- * @author Matt Benson\n+ * @since 4.0\n+ * @version $Id$\n  */\n public interface IterableSortedMap<K, V> extends SortedMap<K, V>, OrderedMap<K, V> {\n }\n--- a/src/main/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/IteratorUtils.java\n  * such, together with alternate solutions that are binary compatible\n  * against versions 2.1.1 and 3.1.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * @param root  the root object to start iterating from, null results in an empty iterator\n      * @param transformer  the transformer to use, see above, null uses no effect transformer\n      * @return a new object graph iterator\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public static <E> Iterator<E> objectGraphIterator(E root, Transformer<? super E, ? extends E> transformer) {\n         return new ObjectGraphIterator<E>(root, transformer);\n      * @param list  the list to iterate over, not null\n      * @return a new looping iterator\n      * @throws NullPointerException if the list is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <E> ResettableListIterator<E> loopingListIterator(List<E> list) {\n         if (list == null) {\n--- a/src/main/java/org/apache/commons/collections/KeyValue.java\n+++ b/src/main/java/org/apache/commons/collections/KeyValue.java\n  *\n  * @param <K> the type of the key\n  * @param <V> the type of the value\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/ListUtils.java\n+++ b/src/main/java/org/apache/commons/collections/ListUtils.java\n /**\n  * Provides utility methods and decorators for {@link List} instances.\n  *\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Id$\n  */\n public class ListUtils {\n      * @return a <code>List</code> containing all the elements of <code>c</code>\n      * that occur at least once in <code>retain</code>.\n      * @throws NullPointerException if either parameter is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <E> List<E> retainAll(Collection<E> collection, Collection<?> retain) {\n         List<E> list = new ArrayList<E>(Math.min(collection.size(), retain.size()));\n      * @return a <code>List</code> containing all the elements of <code>c</code> except\n      * any elements that also occur in <code>remove</code>.\n      * @throws NullPointerException if either parameter is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <E> List<E> removeAll(Collection<E> collection, Collection<?> remove) {\n         List<E> list = new ArrayList<E>();\n--- a/src/main/java/org/apache/commons/collections/MapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/MapIterator.java\n  *\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/MapUtils.java\n+++ b/src/main/java/org/apache/commons/collections/MapUtils.java\n  *  <li>{@link #multiValueMap( Map, Factory )}\n  *  </ul>\n  *\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n      * @throws IllegalArgumentException  if sub-array or entry matching used and an\n      *  entry is invalid\n      * @throws ClassCastException if the array contents is mixed\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <K, V> Map<K, V> putAll(Map<K, V> map, Object[] array) {\n      *\n      * @param map  the map to check, may be null\n      * @return true if empty or null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static boolean isEmpty(Map<?,?> map) {\n         return (map == null || map.isEmpty());\n      *\n      * @param map  the map to check, may be null\n      * @return true if non-null and non-empty\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static boolean isNotEmpty(Map<?,?> map) {\n         return !MapUtils.isEmpty(map);\n      * @param map  the map to decorate\n      * @return a multi-value map backed by the given map which returns ArrayLists of values.\n      * @see MultiValueMap\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <K, V> MultiValueMap<K, V> multiValueMap(Map<K, ? super Collection<V>> map) {\n         return MultiValueMap.<K, V>multiValueMap(map);\n      *  and extend Collection).\n      * @return a multi-value map backed by the given map which returns collections of the specified type\n      * @see MultiValueMap\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(Map<K, C> map, Class<C> collectionClass) {\n         return MultiValueMap.multiValueMap(map, collectionClass);\n      * @return a multi-value map backed by the given map which returns collections\n      * created by the specified collection factory\n      * @see MultiValueMap\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(Map<K, C> map, Factory<C> collectionFactory) {\n         return MultiValueMap.multiValueMap(map, collectionFactory);\n      * @param <V>\n      * @param map to wrap if necessary.\n      * @return IterableMap<K, V>\n-     * @since Commons Collections 5\n-     * TODO fix version\n+     * @since 4.0\n      */\n     public static <K, V> IterableMap<K, V> iterableMap(Map<K, V> map) {\n         if (map == null) {\n      * @param <V>\n      * @param sortedMap to wrap if necessary\n      * @return {@link IterableSortedMap}<K, V>\n-     * @since Commons Collections 5\n-     * TODO fix version\n+     * @since 4.0\n      */\n     public static <K, V> IterableSortedMap<K, V> iterableSortedMap(SortedMap<K, V> sortedMap) {\n         if (sortedMap == null) {\n--- a/src/main/java/org/apache/commons/collections/MultiMap.java\n+++ b/src/main/java/org/apache/commons/collections/MultiMap.java\n  * These were added solely for documentation purposes and do not change the interface\n  * as they were defined in the superinterface <code>Map</code> anyway.\n  *\n- * @since Commons Collections 2.0\n+ * @since 2.0\n  * @version $Revision$\n  *\n  * @author Christopher Berry\n--- a/src/main/java/org/apache/commons/collections/OrderedBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/OrderedBidiMap.java\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/OrderedIterator.java\n+++ b/src/main/java/org/apache/commons/collections/OrderedIterator.java\n  * This iterator allows both forward and reverse iteration through the container.\n  *\n  * @param <E> the type to iterate over\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/OrderedMap.java\n+++ b/src/main/java/org/apache/commons/collections/OrderedMap.java\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/OrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/OrderedMapIterator.java\n  *\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/Predicate.java\n+++ b/src/main/java/org/apache/commons/collections/Predicate.java\n  *\n  * @param <T> the type that the predicate queries\n  *\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author James Strachan\n--- a/src/main/java/org/apache/commons/collections/PredicateUtils.java\n+++ b/src/main/java/org/apache/commons/collections/PredicateUtils.java\n  * </ul>\n  * All the supplied predicates are Serializable.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class PredicateUtils {\n      * @param predicate  the predicate to call with the result of the transform\n      * @return the predicate\n      * @throws IllegalArgumentException if the transformer or the predicate is null\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public static <T> Predicate<T> transformedPredicate(\n             Transformer<? super T, ? extends T> transformer, Predicate<? super T> predicate) {\n--- a/src/main/java/org/apache/commons/collections/Put.java\n+++ b/src/main/java/org/apache/commons/collections/Put.java\n /**\n  * The \"write\" subset of the {@link Map} interface.\n  * \n- * @since Commons Collections 4.0\n+ * @since 4.0\n  * @version $Id$\n  * \n  * @see Get\n--- a/src/main/java/org/apache/commons/collections/ResettableIterator.java\n+++ b/src/main/java/org/apache/commons/collections/ResettableIterator.java\n  * This interface allows an iterator to be repeatedly reused.\n  *\n  * @param <E> the type to iterate over\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/ResettableListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/ResettableListIterator.java\n  * This interface allows an iterator to be repeatedly reused.\n  *\n  * @param <E> the type to iterate over\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/main/java/org/apache/commons/collections/SetUtils.java\n  * Provides utility methods and decorators for\n  * {@link Set} and {@link SortedSet} instances.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Paul Jack\n--- a/src/main/java/org/apache/commons/collections/SortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/SortedBag.java\n  * its unique representative members.\n  *\n  * @param <E> the type to iterate over\n- * @since Commons Collections 2.0\n+ * @since 2.0\n  * @version $Revision$\n  *\n  * @author Chuck Burdick\n--- a/src/main/java/org/apache/commons/collections/SortedBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/SortedBidiMap.java\n  *  \n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/SplitMapUtils.java\n+++ b/src/main/java/org/apache/commons/collections/SplitMapUtils.java\n  * Utilities for working with \"split maps:\" objects that implement {@link Put}\n  * and/or {@link Get} but not {@link Map}.\n  *\n- * @since Commons Collections 4.0\n+ * @since 4.0\n  * @version $Id$\n  *\n  * @see Get\n--- a/src/main/java/org/apache/commons/collections/Transformer.java\n+++ b/src/main/java/org/apache/commons/collections/Transformer.java\n  * @param <I> the input type to the transformer\n  * @param <O> the output type from the transformer\n  *\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author James Strachan\n--- a/src/main/java/org/apache/commons/collections/TransformerUtils.java\n+++ b/src/main/java/org/apache/commons/collections/TransformerUtils.java\n  * </ul>\n  * All the supplied transformers are Serializable.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/Unmodifiable.java\n+++ b/src/main/java/org/apache/commons/collections/Unmodifiable.java\n  * in this library. If you use the JDK unmodifiable class via java util Collections\n  * then the interface won't be there.\n  *  \n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractBagDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractBagDecorator.java\n  * <p>\n  * Methods are forwarded directly to the decorated bag.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractBagDecorator<E>\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractBagDecorator() {\n         super();\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractMapBag.java\n  * map will be used to map bag elements to a number; the number represents the\n  * number of occurrences of that element in the bag.\n  *\n- * @since Commons Collections 3.0 (previously DefaultMapBag v2.0)\n+ * @since 3.0 (previously DefaultMapBag v2.0)\n  * @version $Id$\n  */\n public abstract class AbstractMapBag<E> implements Bag<E> {\n--- a/src/main/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bag/AbstractSortedBagDecorator.java\n  * <p>\n  * Methods are forwarded directly to the decorated bag.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractSortedBagDecorator<E>\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractSortedBagDecorator() {\n         super();\n--- a/src/main/java/org/apache/commons/collections/bag/HashBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/HashBag.java\n  * interface javadoc carefully as several methods violate the\n  * {@link Collection} interface specification.\n  *\n- * @since Commons Collections 3.0 (previously in main package v2.0)\n+ * @since 3.0 (previously in main package v2.0)\n  * @version $Id$\n  */\n public class HashBag<E>\n--- a/src/main/java/org/apache/commons/collections/bag/PredicatedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/PredicatedBag.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class PredicatedBag<E>\n--- a/src/main/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/PredicatedSortedBag.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class PredicatedSortedBag<E>\n--- a/src/main/java/org/apache/commons/collections/bag/SynchronizedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/SynchronizedBag.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class SynchronizedBag<E>\n--- a/src/main/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/SynchronizedSortedBag.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class SynchronizedSortedBag<E>\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedBag.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class TransformedBag<E>\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Bag\n      * @throws IllegalArgumentException if bag or transformer is null\n-     * @since Commons Collections 3.3\n+     * @since 3.3\n      */\n     public static <E> Bag<E> transformedBag(Bag<E> bag, Transformer<? super E, ? extends E> transformer) {\n         TransformedBag<E> decorated = new TransformedBag<E>(bag, transformer);\n--- a/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TransformedSortedBag.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class TransformedSortedBag<E>\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed SortedBag\n      * @throws IllegalArgumentException if bag or transformer is null\n-     * @since Commons Collections 3.3\n+     * @since 3.3\n      */\n     public static <E> TransformedSortedBag<E> transformedSortedBag(SortedBag<E> bag,\n                                                                    Transformer<? super E, ? extends E> transformer) {\n--- a/src/main/java/org/apache/commons/collections/bag/TreeBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/TreeBag.java\n  * javadoc carefully as several methods violate the {@link Collection}\n  * interface specification.\n  *\n- * @since Commons Collections 3.0 (previously in main package v2.0)\n+ * @since 3.0 (previously in main package v2.0)\n  * @version $Id$\n  */\n public class TreeBag<E> extends AbstractMapBag<E> implements SortedBag<E>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/UnmodifiableBag.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableBag<E>\n--- a/src/main/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n+++ b/src/main/java/org/apache/commons/collections/bag/UnmodifiableSortedBag.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableSortedBag<E>\n--- a/src/main/java/org/apache/commons/collections/bidimap/AbstractBidiMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/AbstractBidiMapDecorator.java\n  * it would provide a loophole around the validation.\n  * But, you might want that loophole, so this class is kept simple.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractBidiMapDecorator<K, V>\n--- a/src/main/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/AbstractDualBidiMap.java\n  *\n  * @see DualHashBidiMap\n  * @see DualTreeBidiMap\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractDualBidiMap<K, V> implements BidiMap<K, V> {\n      *\n      * @param normalMap  the normal direction map\n      * @param reverseMap  the reverse direction map\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractDualBidiMap(Map<K, V> normalMap, Map<V, K> reverseMap) {\n         super();\n--- a/src/main/java/org/apache/commons/collections/bidimap/AbstractOrderedBidiMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/AbstractOrderedBidiMapDecorator.java\n  * it would provide a loophole around the validation.\n  * But, you might want that loophole, so this class is kept simple.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractOrderedBidiMapDecorator<K, V>\n--- a/src/main/java/org/apache/commons/collections/bidimap/AbstractSortedBidiMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/AbstractSortedBidiMapDecorator.java\n  * it would provide a loophole around the validation.\n  * But, you might want that loophole, so this class is kept simple.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractSortedBidiMapDecorator<K, V>\n--- a/src/main/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/DualHashBidiMap.java\n  * NOTE: From Commons Collections 3.1, all subclasses will use {@link HashMap}\n  * and the flawed <code>createMap</code> method is ignored.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class DualHashBidiMap<K, V> extends AbstractDualBidiMap<K, V> implements Serializable {\n--- a/src/main/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/DualTreeBidiMap.java\n  * NOTE: From Commons Collections 3.1, all subclasses will use {@link TreeMap}\n  * and the flawed <code>createMap</code> method is ignored.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class DualTreeBidiMap<K, V> extends AbstractDualBidiMap<K, V>\n--- a/src/main/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n  * not allow setValue() and will throw an\n  * UnsupportedOperationException on attempts to call that method.\n  *\n- * @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0)\n+ * @since 3.0 (previously DoubleOrderedMap v2.0)\n  * @version $Id$\n  */\n public class TreeBidiMap<K extends Comparable<K>, V extends Comparable<V>> implements OrderedBidiMap<K, V> {\n--- a/src/main/java/org/apache/commons/collections/bidimap/UnmodifiableBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/UnmodifiableBidiMap.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableBidiMap<K, V>\n--- a/src/main/java/org/apache/commons/collections/bidimap/UnmodifiableOrderedBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/UnmodifiableOrderedBidiMap.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableOrderedBidiMap<K, V>\n--- a/src/main/java/org/apache/commons/collections/bidimap/UnmodifiableSortedBidiMap.java\n+++ b/src/main/java/org/apache/commons/collections/bidimap/UnmodifiableSortedBidiMap.java\n  * <p>\n  * Attempts to modify it will result in an {@link UnsupportedOperationException}. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableSortedBidiMap<K, V>\n--- a/src/main/java/org/apache/commons/collections/buffer/AbstractBufferDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/AbstractBufferDecorator.java\n  * Methods are forwarded directly to the decorated buffer.\n  *\n  * @param <E> the type of the elements in the buffer\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractBufferDecorator<E> extends AbstractCollectionDecorator<E>\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractBufferDecorator() {\n         super();\n--- a/src/main/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BlockingBuffer.java\n  *\n  * @param <E> the type of the elements in the buffer\n  * @version $Revision$\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  */\n public class BlockingBuffer<E> extends SynchronizedBuffer<E> {\n \n      * @param timeoutMillis  the timeout value in milliseconds, zero or less for no timeout\n      * @return a new blocking buffer\n      * @throws IllegalArgumentException if the buffer is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <E> BlockingBuffer<E> blockingBuffer(Buffer<E> buffer, long timeoutMillis) {\n         return new BlockingBuffer<E>(buffer, timeoutMillis);\n      * @param buffer  the buffer to decorate, must not be null\n      * @param timeoutMillis  the timeout value in milliseconds, zero or less for no timeout\n      * @throws IllegalArgumentException if the buffer is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     protected BlockingBuffer(Buffer<E> buffer, long timeoutMillis) {\n         super(buffer);\n      * @return the next object in the buffer\n      * @throws BufferUnderflowException if an interrupt is received\n      * @throws BufferUnderflowException if the timeout expires\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public E get(final long timeout) {\n         synchronized (lock) {\n      * @return the next object in the buffer, which is also removed\n      * @throws BufferUnderflowException if an interrupt is received\n      * @throws BufferUnderflowException if the timeout expires\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public E remove(final long timeout) {\n         synchronized (lock) {\n--- a/src/main/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BoundedBuffer.java\n  * With a timeout, the add methods will wait for up to the timeout period\n  * to try and add the elements.\n  *\n- * @since Commons Collections 3.2\n+ * @since 3.2\n  * @version $Id$\n  */\n public class BoundedBuffer<E> extends SynchronizedBuffer<E> implements BoundedCollection<E> {\n--- a/src/main/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/BoundedFifoBuffer.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0 (previously in main package v2.1)\n+ * @since 3.0 (previously in main package v2.1)\n  * @version $Id$\n  */\n public class BoundedFifoBuffer<E> extends AbstractCollection<E>\n--- a/src/main/java/org/apache/commons/collections/buffer/CircularFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/CircularFifoBuffer.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class CircularFifoBuffer<E> extends BoundedFifoBuffer<E> {\n--- a/src/main/java/org/apache/commons/collections/buffer/PredicatedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/PredicatedBuffer.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class PredicatedBuffer<E> extends PredicatedCollection<E> implements Buffer<E> {\n--- a/src/main/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/PriorityBuffer.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.2.\n  *\n- * @since Commons Collections 3.0 (previously BinaryHeap v1.0)\n+ * @since 3.0 (previously BinaryHeap v1.0)\n  * @version $Id$\n  */\n public class PriorityBuffer<E> extends AbstractCollection<E> implements Buffer<E>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/SynchronizedBuffer.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @param <E> the type of the elements in the buffer\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class SynchronizedBuffer<E>\n--- a/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/TransformedBuffer.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class TransformedBuffer<E> extends TransformedCollection<E> implements Buffer<E> {\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Buffer\n      * @throws IllegalArgumentException if buffer or transformer is null\n-     * @since Commons Collections 3.3\n+     * @since 3.3\n      */\n     public static <E> TransformedBuffer<E> transformedBuffer(Buffer<E> buffer,\n                                                              Transformer<? super E, ? extends E> transformer) {\n--- a/src/main/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/UnboundedFifoBuffer.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0 (previously in main package v2.1)\n+ * @since 3.0 (previously in main package v2.1)\n  * @version $Id$\n  */\n public class UnboundedFifoBuffer<E> extends AbstractCollection<E> implements Buffer<E>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n+++ b/src/main/java/org/apache/commons/collections/buffer/UnmodifiableBuffer.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableBuffer<E>\n--- a/src/main/java/org/apache/commons/collections/collection/AbstractCollectionDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/collection/AbstractCollectionDecorator.java\n  * to write an unmodifiable implementation it might provide a loophole.\n  *\n  * @param <E> the type of the elements in the collection\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractCollectionDecorator<E>\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractCollectionDecorator() {\n         super();\n--- a/src/main/java/org/apache/commons/collections/collection/AbstractUntypedCollectionDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/collection/AbstractUntypedCollectionDecorator.java\n  *\n  * @param <D> the type of the elements in the decorated collection\n  * @param <E> the element type of the Collection implementation\n- * @since Commons Collections 4.0\n+ * @since 4.0\n  * @version $Id$\n  */\n public abstract class AbstractUntypedCollectionDecorator<E, D> implements Collection<E>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/collection/CompositeCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/CompositeCollection.java\n  * strategy is provided then add and remove are unsupported.\n  *\n  * @param <E> the type of the elements in the collection\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class CompositeCollection<E> implements Collection<E>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/collection/PredicatedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/PredicatedCollection.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @param <E> the type of the elements in the collection\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class PredicatedCollection<E> extends AbstractCollectionDecorator<E> {\n--- a/src/main/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/SynchronizedCollection.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @param <E> the type of the elements in the collection\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class SynchronizedCollection<E> implements Collection<E>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/TransformedCollection.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @param <E> the type of the elements in the collection\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class TransformedCollection<E> extends AbstractCollectionDecorator<E> {\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed Collection\n      * @throws IllegalArgumentException if collection or transformer is null\n-     * @since Commons Collections 3.3\n+     * @since 3.3\n      */\n     public static <E> TransformedCollection<E> transformedCollection(Collection<E> collection,\n                                                                      Transformer<? super E, ? extends E> transformer) {\n--- a/src/main/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/UnmodifiableBoundedCollection.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableBoundedCollection<E> extends AbstractCollectionDecorator<E>\n--- a/src/main/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n+++ b/src/main/java/org/apache/commons/collections/collection/UnmodifiableCollection.java\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n  * @param <E> the type of the elements in the collection\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableCollection<E>\n--- a/src/main/java/org/apache/commons/collections/comparators/BooleanComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/BooleanComparator.java\n  * @see #getFalseFirstComparator()\n  * @see #booleanComparator(boolean)\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class BooleanComparator implements Comparator<Boolean>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/comparators/ComparableComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/ComparableComparator.java\n  * This is no longer the case. See {@link #compare(Object, Object) compare} for\n  * details.\n  * \n- * @since Commons Collections 2.0\n+ * @since 2.0\n  * @version $Id$\n  * \n  * @see java.util.Collections#reverseOrder()\n      * {@link #equals(Object) equals}.\n      *\n      * @return a hash code for this comparator.\n-     * @since Commons Collections 3.0\n+     * @since 3.0\n      */\n     @Override\n     public int hashCode() {\n      * \n      * @param object  the object to compare with\n      * @return {@code true} if equal\n-     * @since Commons Collections 3.0\n+     * @since 3.0\n      */\n     @Override\n     public boolean equals(Object object) {\n--- a/src/main/java/org/apache/commons/collections/comparators/ComparatorChain.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/ComparatorChain.java\n  * thread-safe at construction time, but it <i>is</i> thread-safe to perform\n  * multiple comparisons after all the setup operations are complete.\n  * \n- * @since Commons Collections 2.0\n+ * @since 2.0\n  * @version $Id$\n  */\n public class ComparatorChain<E> implements Comparator<E>, Serializable {\n      * {@link #equals(Object) equals}.\n      *\n      * @return a suitable hash code\n-     * @since Commons Collections 3.0\n+     * @since 3.0\n      */\n     @Override\n     public int hashCode() {\n      *\n      * @param object  the object to compare with\n      * @return true if equal\n-     * @since Commons Collections 3.0\n+     * @since 3.0\n      */\n     @Override\n     public boolean equals(Object object) {\n--- a/src/main/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/FixedOrderComparator.java\n  * thread-safe at construction time, but it is thread-safe to perform\n  * multiple comparisons  after all the setup operations are complete.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class FixedOrderComparator<T> implements Comparator<T> {\n \n     /**\n      * Unknown object behavior enum.\n-     * @since Commons Collections 4.0\n+     * @since 4.0\n      */\n     public static enum UnknownObjectBehavior {\n         BEFORE, AFTER, EXCEPTION;\n--- a/src/main/java/org/apache/commons/collections/comparators/NullComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/NullComparator.java\n  * A Comparator that will compare nulls to be either lower or higher than\n  * other objects.\n  *\n- * @since Commons Collections 2.0\n+ * @since 2.0\n  * @version $Id$\n  */\n public class NullComparator<E> implements Comparator<E>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/comparators/ReverseComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/ReverseComparator.java\n  * Reverses the order of another comparator by reversing the arguments\n  * to its {@link #compare(Object, Object) compare} method.\n  *\n- * @since Commons Collections 2.0\n+ * @since 2.0\n  * @version $Id$\n  *\n  * @see java.util.Collections#reverseOrder()\n      * {@link #equals(Object) equals}.\n      * \n      * @return a suitable hash code\n-     * @since Commons Collections 3.0\n+     * @since 3.0\n      */\n     @Override\n     public int hashCode() {\n      * \n      * @param object  the object to compare to\n      * @return true if equal\n-     * @since Commons Collections 3.0\n+     * @since 3.0\n      */\n     @Override\n     public boolean equals(Object object) {\n--- a/src/main/java/org/apache/commons/collections/comparators/TransformingComparator.java\n+++ b/src/main/java/org/apache/commons/collections/comparators/TransformingComparator.java\n  * return value from the transform operation will be passed to the decorated\n  * {@link Comparator#compare(Object,Object) compare} method.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Id$\n  *\n  * @see org.apache.commons.collections.Transformer\n--- a/src/main/java/org/apache/commons/collections/functors/AllPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/AllPredicate.java\n  * NOTE: In versions prior to 3.2 an array size of zero or one\n  * threw an exception.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicates, do not modify the array.\n      * \n      * @return the predicates\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Predicate<? super T>[] getPredicates() {\n         return iPredicates;\n--- a/src/main/java/org/apache/commons/collections/functors/AndPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/AndPredicate.java\n /**\n  * Predicate implementation that returns true if both the predicates return true.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the two predicates being decorated as an array.\n      *\n      * @return the predicates\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public Predicate<? super T>[] getPredicates() {\n--- a/src/main/java/org/apache/commons/collections/functors/AnyPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/AnyPredicate.java\n  * NOTE: In versions prior to 3.2 an array size of zero or one\n  * threw an exception.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicates, do not modify the array.\n      *\n      * @return the predicates\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Predicate<? super T>[] getPredicates() {\n         return iPredicates;\n--- a/src/main/java/org/apache/commons/collections/functors/CatchAndRethrowClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/CatchAndRethrowClosure.java\n  * }\n  * </pre>\n  * \n- * @since Commons Collections 4.0\n+ * @since 4.0\n  * @version $Revision$\n  */\n public abstract class CatchAndRethrowClosure<E> implements Closure<E> {\n--- a/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java\n /**\n  * Closure implementation that chains the specified closures together.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n     /**\n      * Gets the closures, do not modify the array.\n      * @return the closures\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Closure<? super E>[] getClosures() {\n         return iClosures;\n--- a/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java\n  * The input object is passed to the first transformer. The transformed result\n  * is passed to the second transformer and so on.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n     /**\n      * Gets the transformers, do not modify the array.\n      * @return the transformers\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Transformer<? super T, ? extends T>[] getTransformers() {\n         return iTransformers;\n--- a/src/main/java/org/apache/commons/collections/functors/CloneTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/CloneTransformer.java\n  * <p>\n  * Clone is performed using <code>PrototypeFactory.getInstance(input).create()</code>.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Transformer<T, T> cloneTransformer() {\n--- a/src/main/java/org/apache/commons/collections/functors/ClosureTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ClosureTransformer.java\n  * Transformer implementation that calls a Closure using the input object\n  * and then returns the input.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the closure.\n      * \n      * @return the closure\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Closure<? super T> getClosure() {\n         return iClosure;\n--- a/src/main/java/org/apache/commons/collections/functors/ComparatorPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ComparatorPredicate.java\n  * using the <code>GREATER</code> evaluation criterion constant. This instructs the predicate to\n  * return <code>true</code> if the comparator returns a value greater than <code>0</code>.\n  *\n- * @since Commons Collections 4.0\n+ * @since 4.0\n  * @version $Revision$\n  *\n  * @author Rune Peter Bjrnstad.\n--- a/src/main/java/org/apache/commons/collections/functors/ConstantFactory.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ConstantFactory.java\n  * objects should use the constant factory. Mutable objects should\n  * use the prototype factory.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the constant.\n      * \n      * @return the constant\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public T getConstant() {\n         return iConstant;\n--- a/src/main/java/org/apache/commons/collections/functors/ConstantTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ConstantTransformer.java\n  * objects should use the constant factory. Mutable objects should\n  * use the prototype factory.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the constant.\n      * \n      * @return the constant\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public O getConstant() {\n         return iConstant;\n--- a/src/main/java/org/apache/commons/collections/functors/DefaultEquator.java\n+++ b/src/main/java/org/apache/commons/collections/functors/DefaultEquator.java\n  * Default {@link Equator} implementation.\n  * \n  * @param <T>\n- * @since Commons Collections 4.0\n+ * @since 4.0\n  * @version $Revision$\n  */\n public class DefaultEquator<T> implements Equator<T> {\n--- a/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/EqualPredicate.java\n  * Predicate implementation that returns true if the input is the same object\n  * as the one stored in this predicate by equals.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the value.\n      * \n      * @return the value\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Object getValue() {\n         return iValue;\n--- a/src/main/java/org/apache/commons/collections/functors/Equator.java\n+++ b/src/main/java/org/apache/commons/collections/functors/Equator.java\n  * \n  * @param <T> the types of object this {@link Equator} can evaluate.\n  * @author Stephen Kestle\n- * @since Commons Collections 4.0\n+ * @since 4.0\n  * @version $Revision$\n  */\n public interface Equator<T> {\n--- a/src/main/java/org/apache/commons/collections/functors/ExceptionClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ExceptionClosure.java\n /**\n  * Closure implementation that always throws an exception.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Closure<E> exceptionClosure() {\n--- a/src/main/java/org/apache/commons/collections/functors/ExceptionFactory.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ExceptionFactory.java\n /**\n  * Factory implementation that always throws an exception.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Factory returning the singleton instance.\n      * \n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Factory<T> exceptionFactory() {\n--- a/src/main/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ExceptionPredicate.java\n /**\n  * Predicate implementation that always throws an exception.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Factory returning the singleton instance.\n      *\n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Predicate<T> exceptionPredicate() {\n--- a/src/main/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ExceptionTransformer.java\n /**\n  * Transformer implementation that always throws an exception.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Factory returning the singleton instance.\n      *\n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <I, O> Transformer<I, O> exceptionTransformer() {\n--- a/src/main/java/org/apache/commons/collections/functors/FactoryTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/FactoryTransformer.java\n /**\n  * Transformer implementation that calls a Factory and returns the result.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the factory.\n      * \n      * @return the factory\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Factory<? extends O> getFactory() {\n         return iFactory;\n--- a/src/main/java/org/apache/commons/collections/functors/FalsePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/FalsePredicate.java\n /**\n  * Predicate implementation that always returns false.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Get a typed instance.\n      *\n      * @return the singleton instance\n-     * @since Commons Collections 4.0\n+     * @since 4.0\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Predicate<T> falsePredicate() {\n--- a/src/main/java/org/apache/commons/collections/functors/ForClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/ForClosure.java\n /**\n  * Closure implementation that calls another closure n times, like a for loop.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the closure.\n      * \n      * @return the closure\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Closure<? super E> getClosure() {\n         return iClosure;\n      * Gets the count.\n      * \n      * @return the count\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public int getCount() {\n         return iCount;\n--- a/src/main/java/org/apache/commons/collections/functors/FunctorUtils.java\n+++ b/src/main/java/org/apache/commons/collections/functors/FunctorUtils.java\n /**\n  * Internal utilities for functors.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/functors/IdentityPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/IdentityPredicate.java\n  * Predicate implementation that returns true if the input is the same object\n  * as the one stored in this predicate.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the value.\n      *\n      * @return the value\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public T getValue() {\n         return iValue;\n--- a/src/main/java/org/apache/commons/collections/functors/IfClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/IfClosure.java\n  * Closure implementation acts as an if statement calling one or other closure\n  * based on a predicate.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * @param trueClosure  closure used if true\n      * @return the <code>if</code> closure\n      * @throws IllegalArgumentException if either argument is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <E> Closure<E> ifClosure(Predicate<? super E> predicate, Closure<? super E> trueClosure) {\n         return IfClosure.<E>ifClosure(predicate, trueClosure, NOPClosure.<E>nopClosure());\n      * \n      * @param predicate  predicate to switch on, not null\n      * @param trueClosure  closure used if true, not null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public IfClosure(Predicate<? super E> predicate, Closure<? super E> trueClosure) {\n         this(predicate, trueClosure, NOPClosure.INSTANCE);\n      * Gets the predicate.\n      * \n      * @return the predicate\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Predicate<? super E> getPredicate() {\n         return iPredicate;\n      * Gets the closure called when true.\n      * \n      * @return the closure\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Closure<? super E> getTrueClosure() {\n         return iTrueClosure;\n      * Gets the closure called when false.\n      * \n      * @return the closure\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Closure<? super E> getFalseClosure() {\n         return iFalseClosure;\n--- a/src/main/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InstanceofPredicate.java\n  * Predicate implementation that returns true if the input is an instanceof\n  * the type stored in this predicate.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the type to compare to.\n      *\n      * @return the type\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Class<?> getType() {\n         return iType;\n--- a/src/main/java/org/apache/commons/collections/functors/InstantiateFactory.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InstantiateFactory.java\n /**\n  * Factory implementation that creates a new object instance by reflection.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InstantiateTransformer.java\n /**\n  * Transformer implementation that creates a new object instance by reflection.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/functors/InvokerTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/InvokerTransformer.java\n /**\n  * Transformer implementation that creates a new object instance by reflection.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * \n      * @param methodName  the method name to call\n      * @return an invoker transformer\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public static <I, O> Transformer<I, O> invokerTransformer(String methodName) {\n         if (methodName == null) {\n--- a/src/main/java/org/apache/commons/collections/functors/MapTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/MapTransformer.java\n  * Transformer implementation that returns the value held in a specified map\n  * using the input parameter as a key.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the map to lookup in.\n      *\n      * @return the map\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Map<? super I, ? extends O> getMap() {\n         return iMap;\n--- a/src/main/java/org/apache/commons/collections/functors/NOPClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NOPClosure.java\n /**\n  * Closure implementation that does nothing.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Factory returning the singleton instance.\n      *\n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <E> Closure<E> nopClosure() {\n--- a/src/main/java/org/apache/commons/collections/functors/NOPTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NOPTransformer.java\n /**\n  * Transformer implementation that does nothing.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Factory returning the singleton instance.\n      *\n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Transformer<T, T> nopTransformer() {\n--- a/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NonePredicate.java\n  * NOTE: In versions prior to 3.2 an array size of zero or one\n  * threw an exception.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicates, do not modify the array.\n      *\n      * @return the predicates\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Predicate<? super T>[] getPredicates() {\n         return iPredicates;\n--- a/src/main/java/org/apache/commons/collections/functors/NotNullPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NotNullPredicate.java\n /**\n  * Predicate implementation that returns true if the input is not null.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Factory returning the singleton instance.\n      *\n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Predicate<T> notNullPredicate() {\n--- a/src/main/java/org/apache/commons/collections/functors/NotPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NotPredicate.java\n /**\n  * Predicate implementation that returns the opposite of the decorated predicate.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicate being decorated.\n      * \n      * @return the predicate as the only element in an array\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public Predicate<? super T>[] getPredicates() {\n--- a/src/main/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullIsExceptionPredicate.java\n /**\n  * Predicate implementation that throws an exception if the input is null.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicate being decorated.\n      * \n      * @return the predicate as the only element in an array\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public Predicate<? super T>[] getPredicates() {\n--- a/src/main/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullIsFalsePredicate.java\n /**\n  * Predicate implementation that returns false if the input is null.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicate being decorated.\n      *\n      * @return the predicate as the only element in an array\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public Predicate<? super T>[] getPredicates() {\n--- a/src/main/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullIsTruePredicate.java\n /**\n  * Predicate implementation that returns true if the input is null.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicate being decorated.\n      * \n      * @return the predicate as the only element in an array\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public Predicate<? super T>[] getPredicates() {\n--- a/src/main/java/org/apache/commons/collections/functors/NullPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/NullPredicate.java\n /**\n  * Predicate implementation that returns true if the input is null.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Factory returning the singleton instance.\n      *\n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Predicate<T> nullPredicate() {\n--- a/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/OnePredicate.java\n  * NOTE: In versions prior to 3.2 an array size of zero or one\n  * threw an exception.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicates, do not modify the array.\n      * \n      * @return the predicates\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Predicate<? super T>[] getPredicates() {\n         return iPredicates;\n--- a/src/main/java/org/apache/commons/collections/functors/OrPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/OrPredicate.java\n /**\n  * Predicate implementation that returns true if either of the predicates return true.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the two predicates being decorated as an array.\n      *\n      * @return the predicates\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public Predicate<? super T>[] getPredicates() {\n--- a/src/main/java/org/apache/commons/collections/functors/PredicateDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/functors/PredicateDecorator.java\n  * <p>\n  * This interface enables tools to access the decorated predicates.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/functors/PredicateTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/PredicateTransformer.java\n  * Transformer implementation that calls a Predicate using the input object\n  * and then returns the result.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicate.\n      * \n      * @return the predicate\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Predicate<? super T> getPredicate() {\n         return iPredicate;\n--- a/src/main/java/org/apache/commons/collections/functors/PrototypeFactory.java\n+++ b/src/main/java/org/apache/commons/collections/functors/PrototypeFactory.java\n /**\n  * Factory implementation that creates a new instance each time based on a prototype.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/functors/StringValueTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/StringValueTransformer.java\n  * Transformer implementation that returns the result of calling\n  * <code>String.valueOf</code> on the input object.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Factory returning the singleton instance.\n      *\n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Transformer<T, String> stringValueTransformer() {\n--- a/src/main/java/org/apache/commons/collections/functors/SwitchClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/SwitchClosure.java\n  * Closure implementation calls the closure whose predicate returns true,\n  * like a switch statement.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicates, do not modify the array.\n      *\n      * @return the predicates\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Predicate<? super E>[] getPredicates() {\n         return iPredicates;\n      * Gets the closures, do not modify the array.\n      *\n      * @return the closures\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Closure<? super E>[] getClosures() {\n         return iClosures;\n      * Gets the default closure.\n      *\n      * @return the default closure\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Closure<? super E> getDefaultClosure() {\n         return iDefault;\n--- a/src/main/java/org/apache/commons/collections/functors/SwitchTransformer.java\n+++ b/src/main/java/org/apache/commons/collections/functors/SwitchTransformer.java\n  * Transformer implementation calls the transformer whose predicate returns true,\n  * like a switch statement.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicates, do not modify the array.\n      * \n      * @return the predicates\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Predicate<? super I>[] getPredicates() {\n         return iPredicates;\n      * Gets the transformers, do not modify the array.\n      * \n      * @return the transformers\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Transformer<? super I, ? extends O>[] getTransformers() {\n         return iTransformers;\n      * Gets the default transformer.\n      * \n      * @return the default transformer\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Transformer<? super I, ? extends O> getDefaultTransformer() {\n         return iDefault;\n--- a/src/main/java/org/apache/commons/collections/functors/TransformedPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/TransformedPredicate.java\n  * Predicate implementation that transforms the given object before invoking\n  * another <code>Predicate</code>.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Revision$\n  * @author Alban Peignier\n  * @author Stephen Colebourne\n      * Gets the predicate being decorated.\n      *\n      * @return the predicate as the only element in an array\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public Predicate<? super T>[] getPredicates() {\n--- a/src/main/java/org/apache/commons/collections/functors/TransformerClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/TransformerClosure.java\n  * Closure implementation that calls a Transformer using the input object\n  * and ignore the result.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the transformer.\n      * \n      * @return the transformer\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Transformer<? super E, ?> getTransformer() {\n         return iTransformer;\n--- a/src/main/java/org/apache/commons/collections/functors/TransformerPredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/TransformerPredicate.java\n /**\n  * Predicate implementation that returns the result of a transformer.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the transformer.\n      *\n      * @return the transformer\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Transformer<? super T, Boolean> getTransformer() {\n         return iTransformer;\n--- a/src/main/java/org/apache/commons/collections/functors/TruePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/TruePredicate.java\n /**\n  * Predicate implementation that always returns true.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Factory returning the singleton instance.\n      *\n      * @return the singleton instance\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Predicate<T> truePredicate() {\n--- a/src/main/java/org/apache/commons/collections/functors/UniquePredicate.java\n+++ b/src/main/java/org/apache/commons/collections/functors/UniquePredicate.java\n  * Predicate implementation that returns true the first time an object is\n  * passed into the predicate.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/functors/WhileClosure.java\n+++ b/src/main/java/org/apache/commons/collections/functors/WhileClosure.java\n  * Closure implementation that executes a closure repeatedly until a condition is met,\n  * like a do-while or while loop.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Gets the predicate in use.\n      * \n      * @return the predicate\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Predicate<? super E> getPredicate() {\n         return iPredicate;\n      * Gets the closure.\n      * \n      * @return the closure\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public Closure<? super E> getClosure() {\n         return iClosure;\n      * Is the loop a do-while loop.\n      * \n      * @return true is do-while, false if while\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public boolean isDoLoop() {\n         return iDoLoop;\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractEmptyIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractEmptyIterator.java\n /** \n  * Provides an implementation of an empty iterator.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractEmptyMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractEmptyMapIterator.java\n /** \n  * Provides an implementation of an empty map iterator.\n  *\n- * @since Commons Collections 5\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n- * @author Matt Benson\n+ * @since 4.0\n+ * @version $Id$\n  */\n public abstract class AbstractEmptyMapIterator<K, V> extends AbstractEmptyIterator<K> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractIteratorDecorator.java\n  * <p>\n  * All methods are forwarded to the decorated iterator.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author James Strachan\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractListIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractListIteratorDecorator.java\n  * <p>\n  * All methods are forwarded to the decorated list iterator.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Rodney Waldhoff\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractMapIteratorDecorator.java\n  * <p>\n  * All methods are forwarded to the decorated map iterator.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractOrderedMapIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractOrderedMapIteratorDecorator.java\n  * <p>\n  * All methods are forwarded to the decorated map iterator.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/iterators/AbstractUntypedIteratorDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/AbstractUntypedIteratorDecorator.java\n  * <p>\n  * All methods are forwarded to the decorated iterator.\n  *\n- * @since Commons Collections 5\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Stephen Colebourne\n- * @author Matt Benson\n+ * @since 4.0\n+ * @version $Id$\n  */\n public abstract class AbstractUntypedIteratorDecorator<I, O> implements Iterator<O> {\n \n--- a/src/main/java/org/apache/commons/collections/iterators/ArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ArrayIterator.java\n  * The iterator implements a {@link #reset} method, allowing the reset of \n  * the iterator back to the start if required.\n  *\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author James Strachan\n--- a/src/main/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n  * @see java.util.Iterator\n  * @see java.util.ListIterator\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Neil O'Toole\n--- a/src/main/java/org/apache/commons/collections/iterators/CollatingIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/CollatingIterator.java\n  * <code>B</code>, the {@link #next} method on this iterator will return the\n  * lesser of <code>A.next()</code> and <code>B.next()</code>.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Rodney Waldhoff\n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyIterator.java\n  * This class provides for binary compatability between Commons Collections\n  * 2.1.1 and 3.1 due to issues with <code>IteratorUtils</code>.\n  *\n- * @since Commons Collections 2.1.1 and 3.1\n+ * @since 2.1.1 and 3.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n \n     /**\n      * Singleton instance of the iterator.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public static final ResettableIterator<Object> RESETTABLE_INSTANCE = new EmptyIterator<Object>();\n \n     /**\n      * Singleton instance of the iterator.\n-     * @since Commons Collections 2.1.1 and 3.1\n+     * @since 2.1.1 and 3.1\n      */\n     public static final Iterator<Object> INSTANCE = RESETTABLE_INSTANCE;\n \n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyListIterator.java\n  * provides for binary compatability between Commons Collections 2.1.1 and 3.1\n  * due to issues with <code>IteratorUtils</code>.\n  *\n- * @since Commons Collections 2.1.1 and 3.1\n+ * @since 2.1.1 and 3.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n \n     /**\n      * Singleton instance of the iterator.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public static final ResettableListIterator<Object> RESETTABLE_INSTANCE = new EmptyListIterator<Object>();\n \n     /**\n      * Singleton instance of the iterator.\n-     * @since Commons Collections 2.1.1 and 3.1\n+     * @since 2.1.1 and 3.1\n      */\n     public static final ListIterator<Object> INSTANCE = RESETTABLE_INSTANCE;\n \n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyMapIterator.java\n /** \n  * Provides an implementation of an empty map iterator.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n \n     /**\n      * Singleton instance of the iterator.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public static final MapIterator<Object, Object> INSTANCE = new EmptyMapIterator<Object, Object>();\n \n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedIterator.java\n /** \n  * Provides an implementation of an empty ordered iterator.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n \n     /**\n      * Singleton instance of the iterator.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public static final OrderedIterator<Object> INSTANCE = new EmptyOrderedIterator<Object>();\n \n--- a/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EmptyOrderedMapIterator.java\n /** \n  * Provides an implementation of an empty ordered map iterator.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n \n     /**\n      * Singleton instance of the iterator.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public static final OrderedMapIterator<Object, Object> INSTANCE = new EmptyOrderedMapIterator<Object, Object>();\n \n--- a/src/main/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n  * }\n  * </pre>\n  *  \n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/iterators/EnumerationIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/EnumerationIterator.java\n  * Adapter to make {@link Enumeration Enumeration} instances appear\n  * to be {@link Iterator Iterator} instances.\n  *\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n--- a/src/main/java/org/apache/commons/collections/iterators/FilterIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/FilterIterator.java\n  * This iterator decorates the underlying iterator, only allowing through\n  * those elements that match the specified {@link Predicate Predicate}.\n  *\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author James Strachan\n--- a/src/main/java/org/apache/commons/collections/iterators/FilterListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/FilterListIterator.java\n  * This iterator decorates the underlying iterator, only allowing through\n  * those elements that match the specified {@link Predicate Predicate}.\n  *\n- * @since Commons Collections 2.0\n+ * @since 2.0\n  * @version $Revision$\n  *\n  * @author Rodney Waldhoff\n--- a/src/main/java/org/apache/commons/collections/iterators/IteratorChain.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/IteratorChain.java\n  * NOTE: As from version 3.0, the IteratorChain may contain no iterators. In\n  * this case the class will function as an empty iterator.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  * 2006) $\n  *\n--- a/src/main/java/org/apache/commons/collections/iterators/IteratorEnumeration.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/IteratorEnumeration.java\n  * Adapter to make an {@link Iterator Iterator} instance appear to be an\n  * {@link Enumeration Enumeration} instance.\n  *\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n--- a/src/main/java/org/apache/commons/collections/iterators/IteratorIterable.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/IteratorIterable.java\n  * </pre>\n  * </p>\n  * \n- * @since Commons Collections 4.0\n+ * @since 4.0\n  * @version $Revision$\n  */\n public class IteratorIterable<E> implements Iterable<E> {\n--- a/src/main/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n  * <p>\n  * This class implements ResettableListIterator from Commons Collections 3.2.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Morgan Delagrange\n      * Resets this iterator back to the position at which the iterator\n      * was created.\n      *\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public void reset()  {\n         if (iterator instanceof ListIterator) {\n--- a/src/main/java/org/apache/commons/collections/iterators/LoopingIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/LoopingIterator.java\n  * Concurrent modifications are not directly supported, and for most collection\n  * implementations will throw a ConcurrentModificationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author <a href=\"mailto:joncrlsn@users.sf.net\">Jonathan Carlson</a>\n--- a/src/main/java/org/apache/commons/collections/iterators/LoopingListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/LoopingListIterator.java\n  * collection implementations will throw a\n  * ConcurrentModificationException.\n  *\n- * @since Commons Collections 3.2\n+ * @since 3.2\n  * @version $Revision$\n  *\n  * @author Eric Crampton <ccesc@eonomine.com>\n--- a/src/main/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java\n  * The iterator implements a {@link #reset} method, allowing the reset of the iterator\n  * back to the start if required.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author James Strachan\n--- a/src/main/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n  * @see java.util.Iterator\n  * @see java.util.ListIterator\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Neil O'Toole\n--- a/src/main/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ObjectGraphIterator.java\n  * Under many circumstances, linking Iterators together in this manner is\n  * more efficient (and convenient) than using nested for loops to extract a list.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/iterators/ReverseListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/ReverseListIterator.java\n  *\n  * @author Serge Knystautas\n  * @author Stephen Colebourne\n- * @since Commons Collections 3.2\n+ * @since 3.2\n  * @version $Revision$\n  */\n public class ReverseListIterator<E> implements ResettableListIterator<E> {\n--- a/src/main/java/org/apache/commons/collections/iterators/SingletonIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/SingletonIterator.java\n  * <code>SingletonIterator</code> is an {@link Iterator} over a single \n  * object instance.\n  *\n- * @since Commons Collections 2.0\n+ * @since 2.0\n  * @version $Revision$\n  *\n  * @author James Strachan\n      *\n      * @param object  the single object to return from the iterator\n      * @param removeAllowed  true if remove is allowed\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public SingletonIterator(E object, boolean removeAllowed) {\n         super();\n--- a/src/main/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n  * <code>SingletonIterator</code> is an {@link ListIterator} over a single \n  * object instance.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/iterators/TransformIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/TransformIterator.java\n /** \n  * Decorates an iterator such that each element returned is transformed.\n  *\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Revision$\n  *\n  * @author James Strachan\n--- a/src/main/java/org/apache/commons/collections/iterators/UniqueFilterIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UniqueFilterIterator.java\n  * the Iterator maintains a Set of objects it has already encountered,\n  * and duplicate Objects are skipped.\n  *\n- * @since Commons Collections 2.1\n+ * @since 2.1\n  * @version $Revision$\n  *\n  * @author Morgan Delagrange\n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableIterator.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableListIterator.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableMapIterator.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n+++ b/src/main/java/org/apache/commons/collections/iterators/UnmodifiableOrderedMapIterator.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java\n  * Abstract pair class to assist with creating <code>KeyValue</code>\n  * and {@link java.util.Map.Entry Map.Entry} implementations.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractKeyValue<K, V> implements KeyValue<K, V> {\n--- a/src/main/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n  * Abstract Pair class to assist with creating correct\n  * {@link java.util.Map.Entry Map.Entry} implementations.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractMapEntry<K, V> extends AbstractKeyValue<K, V> implements Map.Entry<K, V> {\n--- a/src/main/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n  * Provides a base decorator that allows additional functionality to be\n  * added to a {@link java.util.Map.Entry Map.Entry}.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractMapEntryDecorator<K, V> implements Map.Entry<K, V>, KeyValue<K, V> {\n--- a/src/main/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n  * Note that a <code>DefaultKeyValue</code> instance may not contain\n  * itself as a key or value.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class DefaultKeyValue<K, V> extends AbstractKeyValue<K, V> {\n--- a/src/main/java/org/apache/commons/collections/keyvalue/DefaultMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/DefaultMapEntry.java\n  * A restricted implementation of {@link Map.Entry} that prevents\n  * the {@link Map.Entry} contract from being broken.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class DefaultMapEntry<K, V> extends AbstractMapEntry<K, V> {\n--- a/src/main/java/org/apache/commons/collections/keyvalue/MultiKey.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/MultiKey.java\n  * String localizedText = (String) map.get(multiKey);\n  * </pre>\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class MultiKey<K> implements Serializable {\n      * @param keys  the array of keys, not null\n      * @param makeClone  true to clone the array, false to assign it\n      * @throws IllegalArgumentException if the key array is null\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public MultiKey(K[] keys, boolean makeClone) {\n         super();\n      * @param index  the index to retrieve\n      * @return the key at the index\n      * @throws IndexOutOfBoundsException if the index is invalid\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public K getKey(int index) {\n         return keys[index];\n      * Gets the size of the list of keys.\n      * \n      * @return the size of the list of keys\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public int size() {\n         return keys.length;\n--- a/src/main/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java\n  * This can be used to enable a map entry to make changes on the underlying\n  * map, however this will probably mess up any iterators.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class TiedMapEntry<K, V> implements Map.Entry<K, V>, KeyValue<K, V>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/keyvalue/UnmodifiableMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/UnmodifiableMapEntry.java\n  * A {@link java.util.Map.Entry Map.Entry} that throws\n  * UnsupportedOperationException when <code>setValue</code> is called.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableMapEntry<K, V> extends AbstractMapEntry<K, V> implements Unmodifiable {\n--- a/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractLinkedList.java\n  * nodes are added to and removed. Hopefully, all you need for unusual subclasses\n  * is here.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractLinkedList<E> implements List<E> {\n          * Gets the value of the node.\n          *\n          * @return the value\n-         * @since Commons Collections 3.1\n+         * @since 3.1\n          */\n         protected E getValue() {\n             return value;\n          * Sets the value of the node.\n          *\n          * @param value  the value\n-         * @since Commons Collections 3.1\n+         * @since 3.1\n          */\n         protected void setValue(E value) {\n             this.value = value;\n          * Gets the previous node.\n          *\n          * @return the previous node\n-         * @since Commons Collections 3.1\n+         * @since 3.1\n          */\n         protected Node<E> getPreviousNode() {\n             return previous;\n          * Sets the previous node.\n          *\n          * @param previous  the previous node\n-         * @since Commons Collections 3.1\n+         * @since 3.1\n          */\n         protected void setPreviousNode(Node<E> previous) {\n             this.previous = previous;\n          * Gets the next node.\n          *\n          * @return the next node\n-         * @since Commons Collections 3.1\n+         * @since 3.1\n          */\n         protected Node<E> getNextNode() {\n             return next;\n          * Sets the next node.\n          *\n          * @param next  the next node\n-         * @since Commons Collections 3.1\n+         * @since 3.1\n          */\n         protected void setNextNode(Node<E> next) {\n             this.next = next;\n--- a/src/main/java/org/apache/commons/collections/list/AbstractListDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractListDecorator.java\n  * Methods are forwarded directly to the decorated list.\n  *\n  * @param <E> the type of the elements in the list\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractListDecorator<E> extends AbstractCollectionDecorator<E>\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractListDecorator() {\n         super();\n--- a/src/main/java/org/apache/commons/collections/list/AbstractSerializableListDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/list/AbstractSerializableListDecorator.java\n /**\n  * Serializable subclass of AbstractListDecorator.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Id$\n  */\n public abstract class AbstractSerializableListDecorator<E>\n--- a/src/main/java/org/apache/commons/collections/list/CursorableLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/CursorableLinkedList.java\n  * <b>Note that this implementation is not synchronized.</b>\n  *\n  * @see java.util.LinkedList\n- * @since Commons Collections 1.0\n+ * @since 1.0\n  * @version $Id$\n  */\n public class CursorableLinkedList<E> extends AbstractLinkedList<E> implements Serializable {\n     /**\n      * A cursor for the sublist based on LinkedSubListIterator.\n      *\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     protected static class SubCursor<E> extends Cursor<E> {\n \n--- a/src/main/java/org/apache/commons/collections/list/FixedSizeList.java\n+++ b/src/main/java/org/apache/commons/collections/list/FixedSizeList.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class FixedSizeList<E>\n--- a/src/main/java/org/apache/commons/collections/list/GrowthList.java\n+++ b/src/main/java/org/apache/commons/collections/list/GrowthList.java\n  * can be used together by decorating twice.\n  *\n  * @see LazyList\n- * @since Commons Collections 3.2\n+ * @since 3.2\n  * @version $Id$\n  */\n public class GrowthList<E> extends AbstractSerializableListDecorator<E> {\n--- a/src/main/java/org/apache/commons/collections/list/LazyList.java\n+++ b/src/main/java/org/apache/commons/collections/list/LazyList.java\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @see GrowthList\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class LazyList<E> extends AbstractSerializableListDecorator<E> {\n--- a/src/main/java/org/apache/commons/collections/list/NodeCachingLinkedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/NodeCachingLinkedList.java\n  * <p>\n  * <b>Note that this implementation is not synchronized.</b>\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class NodeCachingLinkedList<E> extends AbstractLinkedList<E> implements Serializable {\n--- a/src/main/java/org/apache/commons/collections/list/PredicatedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/PredicatedList.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class PredicatedList<E> extends PredicatedCollection<E> implements List<E> {\n--- a/src/main/java/org/apache/commons/collections/list/SetUniqueList.java\n+++ b/src/main/java/org/apache/commons/collections/list/SetUniqueList.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class SetUniqueList<E> extends AbstractSerializableListDecorator<E> {\n--- a/src/main/java/org/apache/commons/collections/list/SynchronizedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/SynchronizedList.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class SynchronizedList<E> extends SynchronizedCollection<E> implements List<E> {\n--- a/src/main/java/org/apache/commons/collections/list/TransformedList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TransformedList.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class TransformedList<E> extends TransformedCollection<E> implements List<E> {\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed List\n      * @throws IllegalArgumentException if list or transformer is null\n-     * @since Commons Collections 3.3\n+     * @since 3.3\n      */\n     public static <E> TransformedList<E> transformedList(List<E> list,\n                                                          Transformer<? super E, ? extends E> transformer) {\n--- a/src/main/java/org/apache/commons/collections/list/TreeList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TreeList.java\n  * <code>TreeList</code> is almost always a good replacement for it, although it\n  * does use slightly more memory.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Id$\n  */\n public class TreeList<E> extends AbstractList<E> {\n--- a/src/main/java/org/apache/commons/collections/list/UnmodifiableList.java\n+++ b/src/main/java/org/apache/commons/collections/list/UnmodifiableList.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableList<E>\n--- a/src/main/java/org/apache/commons/collections/map/AbstractHashedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractHashedMap.java\n  * This is to provide backwards compatibility for ReferenceMap between v3.0 and v3.1.\n  * This extends clause will be removed in v4.0.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author java util HashMap\n      * @param entry  the entry to query, must not be null\n      * @return the <code>next</code> field of the entry\n      * @throws NullPointerException if the entry is null\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected HashEntry<K, V> entryNext(HashEntry<K, V> entry) {\n         return entry.next;\n      * @param entry  the entry to query, must not be null\n      * @return the <code>hashCode</code> field of the entry\n      * @throws NullPointerException if the entry is null\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected int entryHashCode(HashEntry<K, V> entry) {\n         return entry.hashCode;\n      * @param entry  the entry to query, must not be null\n      * @return the <code>key</code> field of the entry\n      * @throws NullPointerException if the entry is null\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected K entryKey(HashEntry<K, V> entry) {\n         return entry.getKey();\n      * @param entry  the entry to query, must not be null\n      * @return the <code>value</code> field of the entry\n      * @throws NullPointerException if the entry is null\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected V entryValue(HashEntry<K, V> entry) {\n         return entry.getValue();\n--- a/src/main/java/org/apache/commons/collections/map/AbstractInputCheckedMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractInputCheckedMapDecorator.java\n  * This class is package-scoped, and may be withdrawn or replaced in future\n  * versions of Commons Collections.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/map/AbstractIterableMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractIterableMap.java\n \n /**\n  * Provide a basic {@link IterableMap} implementation.\n- * @since Commons Collections 5\n- * TODO fix version\n- * @version $Revision$\n  *\n- * @author Matt Benson\n+ * @since 4.0\n+ * @version $Id$\n  */\n public abstract class AbstractIterableMap<K, V> implements IterableMap<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractLinkedMap.java\n  * The implementation is also designed to be subclassed, with lots of useful\n  * methods exposed.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author java util LinkedHashMap\n      * @param entry  the entry to query, must not be null\n      * @return the <code>before</code> field of the entry\n      * @throws NullPointerException if the entry is null\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected LinkEntry<K, V> entryBefore(LinkEntry<K, V> entry) {\n         return entry.before;\n      * @param entry  the entry to query, must not be null\n      * @return the <code>after</code> field of the entry\n      * @throws NullPointerException if the entry is null\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected LinkEntry<K, V> entryAfter(LinkEntry<K, V> entry) {\n         return entry.after;\n--- a/src/main/java/org/apache/commons/collections/map/AbstractMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractMapDecorator.java\n  *\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Daniel Rall\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractMapDecorator() {\n         super();\n--- a/src/main/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractOrderedMapDecorator.java\n  * it would provide a loophole around the validation.\n  * But, you might want that loophole, so this class is kept simple.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractOrderedMapDecorator() {\n         super();\n--- a/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractReferenceMap.java\n  * provide synchronized access to a <code>ReferenceMap</code>.\n  *\n  * @see java.lang.ref.Reference\n- * @since Commons Collections 3.1 (extracted from ReferenceMap in 3.0)\n+ * @since 3.1 (extracted from ReferenceMap in 3.0)\n  * @version $Revision$\n  *\n  * @author Paul Jack\n      * If getKey() or getValue() returns null, it means\n      * the mapping is stale and should be removed.\n      *\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected static class ReferenceEntry<K, V> extends HashEntry<K, V> {\n         /** The parent map */\n--- a/src/main/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/map/AbstractSortedMapDecorator.java\n  *\n  * @param <K> the type of the keys in the map\n  * @param <V> the type of the values in the map\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractSortedMapDecorator() {\n         super();\n--- a/src/main/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/CaseInsensitiveMap.java\n  * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Commons-Collections team\n--- a/src/main/java/org/apache/commons/collections/map/CompositeMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/CompositeMap.java\n  * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Brian McCallister\n--- a/src/main/java/org/apache/commons/collections/map/DefaultedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/DefaultedMap.java\n  * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n- * @since Commons Collections 3.2\n+ * @since 3.2\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/map/EntrySetToMapIteratorAdapter.java\n+++ b/src/main/java/org/apache/commons/collections/map/EntrySetToMapIteratorAdapter.java\n /**\n  * Adapts a Map entrySet to the MapIterator interface.\n  *\n- * @since Commons Collections 5\n- * TODO fix version\n- * @version $Revision$\n- *\n- * @author Matt Benson\n+ * @since 4.0\n+ * @version $Id$\n  */\n public class EntrySetToMapIteratorAdapter<K, V> implements MapIterator<K, V>, ResettableIterator<K> {\n     /** The adapted Map entry Set. */\n--- a/src/main/java/org/apache/commons/collections/map/FixedSizeMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/FixedSizeMap.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * \n      * @param out  the output stream\n      * @throws IOException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n--- a/src/main/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/map/Flat3Map.java\n+++ b/src/main/java/org/apache/commons/collections/map/Flat3Map.java\n  * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * would be poor choices.\n      *\n      * @return a new AbstractHashedMap or subclass\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractHashedMap<K, V> createDelegateMap() {\n         return new HashedMap<K, V>();\n      * Clones the map without cloning the keys or values.\n      *\n      * @return a shallow clone\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @Override\n     @SuppressWarnings(\"unchecked\")\n--- a/src/main/java/org/apache/commons/collections/map/HashedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/HashedMap.java\n  * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/map/IdentityMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/IdentityMap.java\n  * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author java util HashMap\n--- a/src/main/java/org/apache/commons/collections/map/LRUMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LRUMap.java\n  * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw\n  * <code>NullPointerException</code>'s when accessed by concurrent threads.\n  *\n- * @since Commons Collections 3.0 (previously in main package v1.0)\n+ * @since 3.0 (previously in main package v1.0)\n  * @version $Revision$\n  *\n  * @author James Strachan\n      * @param maxSize  the maximum size of the map\n      * @param scanUntilRemovable  scan until a removeable entry is found, default false\n      * @throws IllegalArgumentException if the maximum size is less than one\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public LRUMap(int maxSize, boolean scanUntilRemovable) {\n         this(maxSize, DEFAULT_LOAD_FACTOR, scanUntilRemovable);\n      * @param scanUntilRemovable  scan until a removeable entry is found, default false\n      * @throws IllegalArgumentException if the maximum size is less than one\n      * @throws IllegalArgumentException if the load factor is less than zero\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public LRUMap(int maxSize, float loadFactor, boolean scanUntilRemovable) {\n         super((maxSize < 1 ? DEFAULT_CAPACITY : maxSize), loadFactor);\n      * @param scanUntilRemovable  scan until a removeable entry is found, default false\n      * @throws NullPointerException if the map is null\n      * @throws IllegalArgumentException if the map is empty\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public LRUMap(Map<K, V> map, boolean scanUntilRemovable) {\n         this(map.size(), DEFAULT_LOAD_FACTOR, scanUntilRemovable);\n      * map is full.\n      *\n      * @return true if this map scans\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public boolean isScanUntilRemovable() {\n         return scanUntilRemovable;\n--- a/src/main/java/org/apache/commons/collections/map/LazyMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LazyMap.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * \n      * @param out  the output stream\n      * @throws IOException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n--- a/src/main/java/org/apache/commons/collections/map/LazySortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LazySortedMap.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/map/LinkedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/LinkedMap.java\n  * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw \n  * exceptions when accessed by concurrent threads without synchronization.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/map/ListOrderedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/ListOrderedMap.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * Constructs a new empty <code>ListOrderedMap</code> that decorates\n      * a <code>HashMap</code>.\n      * \n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public ListOrderedMap() {\n         this(new HashMap<K, V>());\n      * \n      * @param out  the output stream\n      * @throws IOException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n      *\n      * @see #keySet()\n      * @return the unmodifiable list view over the keys\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public List<K> keyList() {\n         return UnmodifiableList.unmodifiableList(insertOrder);\n      *\n      * @see #values()\n      * @return the partially modifiable list view over the values\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public List<V> valueList() {\n         return new ValuesView<V>(this);\n      * @param index  the index of the value to set\n      * @return the previous value at that index\n      * @throws IndexOutOfBoundsException if the index is invalid\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public V setValue(int index, V value) {\n         K key = insertOrder.get(index);\n      * @param value  the value\n      * @return the value previously mapped to the key\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public V put(int index, K key, V value) {\n         Map<K, V> m = decorated();\n--- a/src/main/java/org/apache/commons/collections/map/MultiKeyMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiKeyMap.java\n  * appropriate synchronization. This class may throw exceptions when accessed\n  * by concurrent threads without synchronization.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiValueMap.java\n  * @author Julien Buret\n  * @author Serhiy Yevtushenko\n  * @version $Revision$\n- * @since Commons Collections 3.2\n+ * @since 3.2\n  */\n public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> implements MultiMap<K, V>, Serializable {\n \n      * \n      * @param out  the output stream\n      * @throws IOException\n-     * @since Commons Collections 3.3\n+     * @since 3.3\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n-     * @since Commons Collections 3.3\n+     * @since 3.3\n      */\n     @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n--- a/src/main/java/org/apache/commons/collections/map/PredicatedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/PredicatedMap.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * \n      * @param out  the output stream\n      * @throws IOException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n      * \n      * @param value  the value to validate\n      * @throws IllegalArgumentException if invalid\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @Override\n     protected V checkSetValue(V value) {\n      * Override to only return true when there is a value transformer.\n      * \n      * @return true if a value predicate is in use\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @Override\n     protected boolean isSetValueChecking() {\n--- a/src/main/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/PredicatedSortedMap.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/map/ReferenceIdentityMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/ReferenceIdentityMap.java\n  *\n  * @see java.lang.ref.Reference\n  *\n- * @since Commons Collections 3.0 (previously in main package v2.1)\n+ * @since 3.0 (previously in main package v2.1)\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/map/ReferenceMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/ReferenceMap.java\n  *\n  * @see java.lang.ref.Reference\n  *\n- * @since Commons Collections 3.0 (previously in main package v2.1)\n+ * @since 3.0 (previously in main package v2.1)\n  * @version $Revision$\n  *\n  * @author Paul Jack\n--- a/src/main/java/org/apache/commons/collections/map/SingletonMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/SingletonMap.java\n  * <li>the <code>KeyValue</code> interface (just cast - no object creation)\n  * </ul>\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/map/StaticBucketMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/StaticBucketMap.java\n  * iterations, or if you can make your own guarantees about how bulk \n  * operations will affect the map.<p>\n  *\n- * @since Commons Collections 3.0 (previously in main package v2.1)\n+ * @since 3.0 (previously in main package v2.1)\n  * @version $Revision$\n  *\n  * @author Berin Loritsch\n--- a/src/main/java/org/apache/commons/collections/map/TransformedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/TransformedMap.java\n  * <p>\n  * @see org.apache.commons.collections.splitmap.TransformedMap\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * @param keyTransformer  the transformer to use for key conversion, null means no transformation\n      * @param valueTransformer  the transformer to use for value conversion, null means no transformation\n      * @throws IllegalArgumentException if map is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <K, V> TransformedMap<K, V> transformedMap(Map<K, V> map,\n             Transformer<? super K, ? extends K> keyTransformer,\n      *\n      * @param out  the output stream\n      * @throws IOException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n      *\n      * @param value  the value to transform\n      * @return the transformed value\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @Override\n     protected V checkSetValue(V value) {\n      * Override to only return true when there is a value transformer.\n      *\n      * @return true if a value transformer is in use\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @Override\n     protected boolean isSetValueChecking() {\n--- a/src/main/java/org/apache/commons/collections/map/TransformedSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/TransformedSortedMap.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * @param keyTransformer  the transformer to use for key conversion, null means no transformation\n      * @param valueTransformer  the transformer to use for value conversion, null means no transformation\n      * @throws IllegalArgumentException if map is null\n-     * @since Commons Collections 3.2\n+     * @since 3.2\n      */\n     public static <K, V> TransformedSortedMap<K, V> transformedSortedMap(SortedMap<K, V> map,\n             Transformer<? super K, ? extends K> keyTransformer,\n--- a/src/main/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java\n+++ b/src/main/java/org/apache/commons/collections/map/UnmodifiableEntrySet.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n--- a/src/main/java/org/apache/commons/collections/map/UnmodifiableMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/UnmodifiableMap.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * \n      * @param out  the output stream\n      * @throws IOException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n--- a/src/main/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/UnmodifiableOrderedMap.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * \n      * @param out  the output stream\n      * @throws IOException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n--- a/src/main/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Revision$\n  *\n  * @author Stephen Colebourne\n      * \n      * @param out  the output stream\n      * @throws IOException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     private void writeObject(ObjectOutputStream out) throws IOException {\n         out.defaultWriteObject();\n      * @param in  the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n--- a/src/main/java/org/apache/commons/collections/set/AbstractSerializableSetDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/set/AbstractSerializableSetDecorator.java\n /**\n  * Serializable subclass of AbstractSetDecorator.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Id$\n  */\n public abstract class AbstractSerializableSetDecorator<E>\n--- a/src/main/java/org/apache/commons/collections/set/AbstractSetDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/set/AbstractSetDecorator.java\n  * Methods are forwarded directly to the decorated set.\n  *\n  * @param <E> the type of the elements in the set\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractSetDecorator<E> extends AbstractCollectionDecorator<E> implements\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractSetDecorator() {\n         super();\n--- a/src/main/java/org/apache/commons/collections/set/AbstractSortedSetDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/set/AbstractSortedSetDecorator.java\n  * Methods are forwarded directly to the decorated set.\n  *\n  * @param <E> the type of the elements in the sorted set\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public abstract class AbstractSortedSetDecorator<E>\n \n     /**\n      * Constructor only used in deserialization, do not use otherwise.\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     protected AbstractSortedSetDecorator() {\n         super();\n--- a/src/main/java/org/apache/commons/collections/set/CompositeSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/CompositeSet.java\n  * Add operations require the use of a pluggable strategy.\n  * If no strategy is provided then add is unsupported.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class CompositeSet<E> extends CompositeCollection<E> implements Set<E> {\n--- a/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class ListOrderedSet<E> extends AbstractSerializableSetDecorator<E> implements Set<E> {\n      * @return a new ordered set\n      * @throws IllegalArgumentException if set or list is null\n      * @throws IllegalArgumentException if either the set or list is not empty\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public static <E> ListOrderedSet<E> listOrderedSet(Set<E> set, List<E> list) {\n         if (set == null) {\n      * Constructs a new empty <code>ListOrderedSet</code> using\n      * a <code>HashSet</code> and an <code>ArrayList</code> internally.\n      *\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     public ListOrderedSet() {\n         super(new HashSet<E>());\n--- a/src/main/java/org/apache/commons/collections/set/MapBackedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/MapBackedSet.java\n  * Most map implementation can be used to create a set by passing in dummy values.\n  * Exceptions include <code>BidiMap</code> implementations, as they require unique values.\n  *\n- * @since Commons Collections 3.1\n+ * @since 3.1\n  * @version $Id$\n  */\n public final class MapBackedSet<E, V> implements Set<E>, Serializable {\n--- a/src/main/java/org/apache/commons/collections/set/PredicatedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/PredicatedSet.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class PredicatedSet<E> extends PredicatedCollection<E> implements Set<E> {\n--- a/src/main/java/org/apache/commons/collections/set/PredicatedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/PredicatedSortedSet.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class PredicatedSortedSet<E> extends PredicatedSet<E> implements SortedSet<E> {\n--- a/src/main/java/org/apache/commons/collections/set/SynchronizedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/SynchronizedSet.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class SynchronizedSet<E> extends SynchronizedCollection<E> implements Set<E> {\n--- a/src/main/java/org/apache/commons/collections/set/SynchronizedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/SynchronizedSortedSet.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class SynchronizedSortedSet<E> extends SynchronizedCollection<E> implements SortedSet<E> {\n--- a/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSet.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class TransformedSet<E> extends TransformedCollection<E> implements Set<E> {\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed set\n      * @throws IllegalArgumentException if set or transformer is null\n-     * @since Commons Collections 3.3\n+     * @since 3.3\n      */\n     public static <E> Set<E> transformedSet(Set<E> set, Transformer<? super E, ? extends E> transformer) {\n         TransformedSet<E> decorated = new TransformedSet<E>(set, transformer);\n--- a/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/TransformedSortedSet.java\n  * <p>\n  * This class is Serializable from Commons Collections 3.1.\n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public class TransformedSortedSet<E> extends TransformedSet<E> implements SortedSet<E> {\n      * @param transformer  the transformer to use for conversion, must not be null\n      * @return a new transformed {@link SortedSet}\n      * @throws IllegalArgumentException if set or transformer is null\n-     * @since Commons Collections 3.3\n+     * @since 3.3\n      */\n     public static <E> TransformedSortedSet<E> transformedSortedSet(SortedSet<E> set,\n                                                                    Transformer<? super E, ? extends E> transformer) {\n--- a/src/main/java/org/apache/commons/collections/set/UnmodifiableSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/UnmodifiableSet.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableSet<E>\n--- a/src/main/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n+++ b/src/main/java/org/apache/commons/collections/set/UnmodifiableSortedSet.java\n  * <p>\n  * Attempts to modify it will result in an UnsupportedOperationException. \n  *\n- * @since Commons Collections 3.0\n+ * @since 3.0\n  * @version $Id$\n  */\n public final class UnmodifiableSortedSet<E>\n--- a/src/main/java/org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/splitmap/AbstractIterableGetMapDecorator.java\n  * {@link IterableGet} that uses a {@link Map}<K, V> for the\n  * {@link org.apache.commons.collections.Get Get}<K, V> implementation.\n  *\n- * @since Commons Collections 4.0\n+ * @since 4.0\n  * @version $Id$\n  */\n public class AbstractIterableGetMapDecorator<K, V> implements IterableGet<K, V> {\n--- a/src/main/java/org/apache/commons/collections/splitmap/TransformedMap.java\n+++ b/src/main/java/org/apache/commons/collections/splitmap/TransformedMap.java\n  * but is intended to be worked with either directly or by {@link Put} and {@link Get}\n  * generalizations.\n  *\n- * @since Commons Collections 4.0\n+ * @since 4.0\n  * @version $Id$\n  *\n  * @see SplitMapUtils#readableMap(Get)\n      * @param in the input stream\n      * @throws IOException\n      * @throws ClassNotFoundException\n-     * @since Commons Collections 3.1\n+     * @since 3.1\n      */\n     @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect \n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {", "timestamp": 1342352757, "metainfo": ""}