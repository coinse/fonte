{"sha": "2298039999ea4b56eb70f686c119974ef94bc95b", "log": "Improve javadoc to clatify role of read-only properties noted by BluePhelix@web.de   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.16 2003/02/19 20:14:25 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.17 2003/03/03 19:41:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * property is considered non existent in the Map\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.16 $ $Date: 2003/02/19 20:14:25 $\n+ * @version $Revision: 1.17 $ $Date: 2003/03/03 19:41:29 $\n  * \n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author Stephen Colebourne\n     private transient HashMap types = new HashMap();\n \n     /**\n-     *  An empty array.  Used to invoke accessors via reflection.\n+     * An empty array.  Used to invoke accessors via reflection.\n      */\n     public static final Object[] NULL_ARGUMENTS = {};\n \n     /**\n-     *  Maps primitive Class types to transformers.  The transformer\n-     *  transform strings into the appropriate primitive wrapper.\n+     * Maps primitive Class types to transformers.  The transformer\n+     * transform strings into the appropriate primitive wrapper.\n      */\n     public static HashMap defaultTransformers = new HashMap();\n     \n     //-------------------------------------------------------------------------\n \n     /**\n-     *  Constructs a new empty <Code>BeanMap</Code>.\n+     * Constructs a new empty <code>BeanMap</code>.\n      */\n     public BeanMap() {\n     }\n \n     /**\n-     *  Constructs a new <Code>BeanMap</Code> that operates on the \n-     *  specified bean.  If the given bean is <Code>null</COde>, then\n-     *  this map will be empty.\n-     *\n-     *  @param bean  the bean for this map to operate on\n+     * Constructs a new <code>BeanMap</code> that operates on the \n+     * specified bean.  If the given bean is <code>null</COde>, then\n+     * this map will be empty.\n+     *\n+     * @param bean  the bean for this map to operate on\n      */\n     public BeanMap(Object bean) {\n         this.bean = bean;\n     //-------------------------------------------------------------------------\n \n     /**\n-     *  Clone this bean map using the following process: \n-     *\n-     *  <ul>\n-\n-     *  <li>If there is no underlying bean, return a cloned BeanMap without a\n-     *  bean.\n-     *\n-     *  <li>Since there is an underlying bean, try to instantiate a new bean of\n-     *  the same type using Class.newInstance().\n+     * Clone this bean map using the following process: \n+     *\n+     * <ul>\n+     * <li>If there is no underlying bean, return a cloned BeanMap without a\n+     * bean.\n+     *\n+     * <li>Since there is an underlying bean, try to instantiate a new bean of\n+     * the same type using Class.newInstance().\n      * \n-     *  <li>If the instantiation fails, throw a CloneNotSupportedException\n-     *\n-     *  <li>Clone the bean map and set the newly instantiated bean as the\n-     *  underyling bean for the bean map.\n-     *\n-     *  <li>Copy each property that is both readable and writable from the\n-     *  existing object to a cloned bean map.  \n-     *\n-     *  <li>If anything fails along the way, throw a\n-     *  CloneNotSupportedException.\n-     *\n-     *  <ul>\n-     **/\n+     * <li>If the instantiation fails, throw a CloneNotSupportedException\n+     *\n+     * <li>Clone the bean map and set the newly instantiated bean as the\n+     * underyling bean for the bean map.\n+     *\n+     * <li>Copy each property that is both readable and writable from the\n+     * existing object to a cloned bean map.  \n+     *\n+     * <li>If anything fails along the way, throw a\n+     * CloneNotSupportedException.\n+     *\n+     * <ul>\n+     */\n     public Object clone() throws CloneNotSupportedException {\n         BeanMap newMap = (BeanMap)super.clone();\n \n     }\n \n     /**\n-     *  Puts all of the writeable properties from the given BeanMap into this\n-     *  BeanMap.  Read-only properties will be ignored.\n-     *\n-     *  @param map  the BeanMap whose properties to put\n+     * Puts all of the writeable properties from the given BeanMap into this\n+     * BeanMap. Read-only and Write-only properties will be ignored.\n+     *\n+     * @param map  the BeanMap whose properties to put\n      */\n     public void putAllWriteable(BeanMap map) {\n         Iterator readableKeys = map.readMethods.keySet().iterator();\n-        while(readableKeys.hasNext()) {\n+        while (readableKeys.hasNext()) {\n             Object key = readableKeys.next();\n-            if(getWriteMethod(key) != null) {\n+            if (getWriteMethod(key) != null) {\n                 this.put(key, map.get(key));\n             }\n         }\n \n \n     /**\n-     *  This method reinitializes the bean map to have default values for the\n-     *  bean's properties.  This is accomplished by constructing a new instance\n-     *  of the bean which the map uses as its underlying data source.  This\n-     *  behavior for <code>clear()</code> differs from the Map contract in that\n-     *  the mappings are not actually removed from the map (the mappings for a\n-     *  BeanMap are fixed).\n-     **/\n+     * This method reinitializes the bean map to have default values for the\n+     * bean's properties.  This is accomplished by constructing a new instance\n+     * of the bean which the map uses as its underlying data source.  This\n+     * behavior for <code>clear()</code> differs from the Map contract in that\n+     * the mappings are not actually removed from the map (the mappings for a\n+     * BeanMap are fixed).\n+     */\n     public void clear() {\n         if(bean == null) return;\n \n     }\n \n     /**\n-     *  Returns true if the bean defines a property with the given name.\n-     *  The given name must be a <Code>String</Code>; if not, this method\n-     *  returns false.  This method will also return false if the bean\n-     *  does not define a property with that name.\n-     *\n-     *  @param name  the name of the property to check\n-     *  @return false if the given name is null or is not a <Code>String</Code>;\n-     *    false if the bean does not define a property with that name; or\n-     *    true if the bean does define a property with that name\n+     * Returns true if the bean defines a property with the given name.\n+     * <p>\n+     * The given name must be a <code>String</code>; if not, this method\n+     * returns false. This method will also return false if the bean\n+     * does not define a property with that name.\n+     * <p>\n+     * Write-only properties will not be matched as the test operates against\n+     * property read methods.\n+     *\n+     * @param name  the name of the property to check\n+     * @return false if the given name is null or is not a <code>String</code>;\n+     *   false if the bean does not define a property with that name; or\n+     *   true if the bean does define a property with that name\n      */\n     public boolean containsKey(Object name) {\n-        Method method = getReadMethod( name );\n+        Method method = getReadMethod(name);\n         return method != null;\n     }\n \n     /**\n-     *  Returns true if the bean defines a property whose current value is\n-     *  the given object.\n-     *\n-     *  @param value  the value to check\n-     *  @return false  true if the bean has at least one property whose \n-     *    current value is that object, false otherwise\n+     * Returns true if the bean defines a property whose current value is\n+     * the given object.\n+     *\n+     * @param value  the value to check\n+     * @return false  true if the bean has at least one property whose \n+     *   current value is that object, false otherwise\n      */\n     public boolean containsValue(Object value) {\n         // use default implementation\n-        return super.containsValue( value );\n-    }\n-\n-    /**\n-     *  Returns the value of the bean's property with the given name.\n-     *  The given name must be a {@link String} and must not be \n-     *  null; otherwise, this method returns <Code>null</Code>.\n-     *  If the bean defines a property with the given name, the value of\n-     *  that property is returned.  Otherwise, <Code>null</Code> is \n-     *  returned.\n-     *\n-     *  @param name  the name of the property whose value to return\n-     *  @return  the value of the property with that name\n+        return super.containsValue(value);\n+    }\n+\n+    /**\n+     * Returns the value of the bean's property with the given name.\n+     * <p>\n+     * The given name must be a {@link String} and must not be \n+     * null; otherwise, this method returns <code>null</code>.\n+     * If the bean defines a property with the given name, the value of\n+     * that property is returned.  Otherwise, <code>null</code> is \n+     * returned.\n+     * <p>\n+     * Write-only properties will not be matched as the test operates against\n+     * property read methods.\n+     *\n+     * @param name  the name of the property whose value to return\n+     * @return  the value of the property with that name\n      */\n     public Object get(Object name) {\n         if ( bean != null ) {\n     }\n \n     /**\n-     *  Sets the bean property with the given name to the given value.\n-     *\n-     *  @param name  the name of the property to set\n-     *  @param value  the value to set that property to\n-     *  @return  the previous value of that property\n-     *  @throws IllegalArgumentException  if the given name is null;\n-     *    if the given name is not a {@link String}; if the bean doesn't\n-     *    define a property with that name; or if the bean property with\n-     *    that name is read-only\n+     * Sets the bean property with the given name to the given value.\n+     *\n+     * @param name  the name of the property to set\n+     * @param value  the value to set that property to\n+     * @return  the previous value of that property\n+     * @throws IllegalArgumentException  if the given name is null;\n+     *   if the given name is not a {@link String}; if the bean doesn't\n+     *   define a property with that name; or if the bean property with\n+     *   that name is read-only\n      */\n     public Object put(Object name, Object value) throws IllegalArgumentException, ClassCastException {\n         if ( bean != null ) {\n     }\n                     \n     /**\n-     *  Returns the number of properties defined by the bean.\n-     *\n-     *  @return  the number of properties defined by the bean\n+     * Returns the number of properties defined by the bean.\n+     *\n+     * @return  the number of properties defined by the bean\n      */\n     public int size() {\n         return readMethods.size();\n     \n     /**\n      * Get the keys for this BeanMap.\n+     * <p>\n+     * Write-only properties are <b>not</b> included in the returned set of\n+     * property names, although it is possible to set their value and to get \n+     * their type.\n      * \n      * @return BeanMap keys.  The Set returned by this method is not\n-     *         modifiable.\n+     *        modifiable.\n      */\n     public Set keySet() {\n         return Collections.unmodifiableSet(readMethods.keySet());\n      * Get the mappings for this BeanMap\n      * \n      * @return BeanMap mappings.  The Set returned by this method\n-     *         is not modifiable.\n+     *        is not modifiable.\n      */\n     public Set entrySet() {\n         return Collections.unmodifiableSet(new AbstractSet() {\n      * Returns the values for the BeanMap.\n      * \n      * @return values for the BeanMap.  The returned collection is not\n-     *         modifiable.\n+     *        modifiable.\n      */\n     public Collection values() {\n         ArrayList answer = new ArrayList( readMethods.size() );\n      * Returns the type of the property with the given name.\n      *\n      * @param name  the name of the property\n-     * @return  the type of the property, or <Code>null</Code> if no such\n-     *   property exists\n+     * @return  the type of the property, or <code>null</code> if no such\n+     *  property exists\n      */\n     public Class getType(String name) {\n         return (Class) types.get( name );\n     }\n \n     /**\n-     *  Convenience method for getting an iterator over the keys.\n-     *\n-     *  @return an iterator over the keys\n+     * Convenience method for getting an iterator over the keys.\n+     * <p>\n+     * Write-only properties will not be returned in the iterator.\n+     *\n+     * @return an iterator over the keys\n      */\n     public Iterator keyIterator() {\n         return readMethods.keySet().iterator();\n     }\n \n     /**\n-     *  Convenience method for getting an iterator over the values.\n-     *\n-     *  @return an iterator over the values\n+     * Convenience method for getting an iterator over the values.\n+     *\n+     * @return an iterator over the values\n      */\n     public Iterator valueIterator() {\n         final Iterator iter = keyIterator();\n     }\n \n     /**\n-     *  Convenience method for getting an iterator over the entries.\n-     *\n-     *  @return an iterator over the entries\n+     * Convenience method for getting an iterator over the entries.\n+     *\n+     * @return an iterator over the entries\n      */\n     public Iterator entryIterator() {\n         final Iterator iter = keyIterator();\n     //-------------------------------------------------------------------------\n \n     /**\n-     *  Returns the bean currently being operated on.  The return value may\n-     *  be null if this map is empty.\n-     *\n-     *  @return the bean being operated on by this map\n+     * Returns the bean currently being operated on.  The return value may\n+     * be null if this map is empty.\n+     *\n+     * @return the bean being operated on by this map\n      */\n     public Object getBean() {\n         return bean;\n     }\n \n     /**\n-     *  Sets the bean to be operated on by this map.  The given value may\n-     *  be null, in which case this map will be empty.\n-     *\n-     *  @param newBean  the new bean to operate on\n+     * Sets the bean to be operated on by this map.  The given value may\n+     * be null, in which case this map will be empty.\n+     *\n+     * @param newBean  the new bean to operate on\n      */\n     public void setBean( Object newBean ) {\n         bean = newBean;\n     //-------------------------------------------------------------------------\n \n     /**\n-     *  Returns the accessor for the property with the given name.\n-     *\n-     *  @param name  the name of the property \n-     *  @return null if the name is null; null if the name is not a \n-     *  {@link String}; null if no such property exists; or the accessor\n-     *   method for that property\n+     * Returns the accessor for the property with the given name.\n+     *\n+     * @param name  the name of the property \n+     * @return null if the name is null; null if the name is not a \n+     * {@link String}; null if no such property exists; or the accessor\n+     *  method for that property\n      */\n     protected Method getReadMethod( Object name ) {\n         return (Method) readMethods.get( name );\n     }\n \n     /**\n-     *  Returns the mutator for the property with the given name.\n-     *\n-     *  @param name  the name of the \n-     *  @return null if the name is null; null if the name is not a \n-     *  {@link String}; null if no such property exists; null if the \n-     *  property is read-only; or the mutator method for that property\n+     * Returns the mutator for the property with the given name.\n+     *\n+     * @param name  the name of the \n+     * @return null if the name is null; null if the name is not a \n+     * {@link String}; null if no such property exists; null if the \n+     * property is read-only; or the mutator method for that property\n      */\n     protected Method getWriteMethod( Object name ) {\n         return (Method) writeMethods.get( name );\n     }\n \n     /**\n-     *  Reinitializes this bean.  Called during {@link #setBean(Object)}.\n-     *  Does introspection to find properties.\n+     * Reinitializes this bean.  Called during {@link #setBean(Object)}.\n+     * Does introspection to find properties.\n      */\n     protected void reinitialise() {\n         readMethods.clear();\n     }\n \n     /**\n-     *  Called during a successful {@link #put(Object,Object)} operation.\n-     *  Default implementation does nothing.  Override to be notified of\n-     *  property changes in the bean caused by this map.\n-     *\n-     *  @param key  the name of the property that changed\n-     *  @param oldValue  the old value for that property\n-     *  @param newValue  the new value for that property\n+     * Called during a successful {@link #put(Object,Object)} operation.\n+     * Default implementation does nothing.  Override to be notified of\n+     * property changes in the bean caused by this map.\n+     *\n+     * @param key  the name of the property that changed\n+     * @param oldValue  the old value for that property\n+     * @param newValue  the new value for that property\n      */\n     protected void firePropertyChange( Object key, Object oldValue, Object newValue ) {\n     }\n     //-------------------------------------------------------------------------\n \n     /**\n-     *  Map entry used by {@link BeanMap}.\n+     * Map entry used by {@link BeanMap}.\n      */\n     protected static class MyMapEntry extends DefaultMapEntry {        \n         private BeanMap owner;\n         \n         /**\n-         *  Constructs a new <Code>MyMapEntry</Code>.\n+         * Constructs a new <code>MyMapEntry</code>.\n          *\n-         *  @param owner  the BeanMap this entry belongs to\n-         *  @param key  the key for this entry\n-         *  @param value  the value for this entry\n+         * @param owner  the BeanMap this entry belongs to\n+         * @param key  the key for this entry\n+         * @param value  the value for this entry\n          */\n         protected MyMapEntry( BeanMap owner, Object key, Object value ) {\n             super( key, value );\n         }\n \n         /**\n-         *  Sets the value.\n+         * Sets the value.\n          *\n-         *  @param value  the new value for the entry\n-         *  @return the old value for the entry\n+         * @param value  the new value for the entry\n+         * @return the old value for the entry\n          */\n         public Object setValue(Object value) {\n             Object key = getKey();\n     }\n \n     /**\n-     *  Creates an array of parameters to pass to the given mutator method.\n-     *  If the given object is not the right type to pass to the method \n-     *  directly, it will be converted using {@link #convertType(Class,Object)}.\n-     *\n-     *  @param method  the mutator method\n-     *  @param value  the value to pass to the mutator method\n-     *  @return an array containing one object that is either the given value\n-     *    or a transformed value\n-     *  @throws IllegalAccessException if {@link #convertType(Class,Object)}\n-     *    raises it\n-     *  @throws IllegalArgumentException if any other exception is raised\n-     *    by {@link #convertType(Class,Object)}\n+     * Creates an array of parameters to pass to the given mutator method.\n+     * If the given object is not the right type to pass to the method \n+     * directly, it will be converted using {@link #convertType(Class,Object)}.\n+     *\n+     * @param method  the mutator method\n+     * @param value  the value to pass to the mutator method\n+     * @return an array containing one object that is either the given value\n+     *   or a transformed value\n+     * @throws IllegalAccessException if {@link #convertType(Class,Object)}\n+     *   raises it\n+     * @throws IllegalArgumentException if any other exception is raised\n+     *   by {@link #convertType(Class,Object)}\n      */\n     protected Object[] createWriteMethodArguments( Method method, Object value ) throws IllegalAccessException, ClassCastException {            \n         try {\n      * {@link Object#toString() toString()} method, and that string is\n      * parsed into the correct primitve type using, for instance, \n      * {@link Integer#valueOf(String)} to convert the string into an\n-     * <Code>int</Code>.<P>\n+     * <code>int</code>.<P>\n      *\n      * If no special constructor exists and the given type is not a \n      * primitive type, this method returns the original value.\n      * @param value  the value to conert\n      * @return the converted value\n      * @throws NumberFormatException if newType is a primitive type, and \n-     *   the string representation of the given value cannot be converted\n-     *   to that type\n+     *  the string representation of the given value cannot be converted\n+     *  to that type\n      * @throws InstantiationException  if the constructor found with \n-     *   reflection raises it\n+     *  reflection raises it\n      * @throws InvocationTargetExcetpion  if the constructor found with\n-     *   reflection raises it\n+     *  reflection raises it\n      * @throws IllegalAccessException  never\n      * @throws IllegalArgumentException  never\n      */\n     }\n \n     /**\n-     *  Returns a transformer for the given primitive type.\n-     *\n-     *  @param aType  the primitive type whose transformer to return\n-     *  @return a transformer that will convert strings into that type,\n-     *   or null if the given type is not a primitive type\n+     * Returns a transformer for the given primitive type.\n+     *\n+     * @param aType  the primitive type whose transformer to return\n+     * @return a transformer that will convert strings into that type,\n+     *  or null if the given type is not a primitive type\n      */\n     protected Transformer getTypeTransformer( Class aType ) {\n         return (Transformer) defaultTransformers.get( aType );\n     }\n \n     /**\n-     *  Logs the given exception to <Code>System.out</Code>.  Used to display\n-     *  warnings while accessing/mutating the bean.\n-     *\n-     *  @param e  the exception to log\n-     */\n-    protected void logInfo(Exception e) {\n-        // XXXX: should probably use log4j here instead...\n-        System.out.println( \"INFO: Exception: \" + e );\n-    }\n-\n-    /**\n-     *  Logs the given exception to <Code>System.err</Code>.  Used to display\n-     *  errors while accessing/mutating the bean.\n-     *\n-     *  @param e  the exception to log\n-     */\n-    protected void logWarn(Exception e) {\n-        // XXXX: should probably use log4j here instead...\n-        System.out.println( \"WARN: Exception: \" + e );\n-        e.printStackTrace();\n+     * Logs the given exception to <code>System.out</code>.  Used to display\n+     * warnings while accessing/mutating the bean.\n+     *\n+     * @param ex  the exception to log\n+     */\n+    protected void logInfo(Exception ex) {\n+        // Deliberately do not use LOG4J or Commons Logging to avoid dependencies\n+        System.out.println( \"INFO: Exception: \" + ex );\n+    }\n+\n+    /**\n+     * Logs the given exception to <code>System.err</code>.  Used to display\n+     * errors while accessing/mutating the bean.\n+     *\n+     * @param ex  the exception to log\n+     */\n+    protected void logWarn(Exception ex) {\n+        // Deliberately do not use LOG4J or Commons Logging to avoid dependencies\n+        System.out.println( \"WARN: Exception: \" + ex );\n+        ex.printStackTrace();\n     }\n }\n-\n-", "timestamp": 1046720489, "metainfo": ""}