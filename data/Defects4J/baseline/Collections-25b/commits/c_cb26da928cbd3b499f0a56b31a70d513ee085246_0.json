{"sha": "cb26da928cbd3b499f0a56b31a70d513ee085246", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r471189 | scolebourne | 2006-11-04 05:57:57 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getMap(), getOrderedMap() and getSortedMap() - use decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/UnmodifiableSortedMap.java\n  *\n  * @author Stephen Colebourne\n  */\n-public final class UnmodifiableSortedMap\n-        extends AbstractSortedMapDecorator\n+public final class UnmodifiableSortedMap<K, V>\n+        extends AbstractSortedMapDecorator<K, V>\n         implements Unmodifiable, Serializable {\n \n     /** Serialization version */\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    public static SortedMap decorate(SortedMap map) {\n+    public static <K, V> SortedMap<K, V> decorate(SortedMap<K, V> map) {\n         if (map instanceof Unmodifiable) {\n             return map;\n         }\n-        return new UnmodifiableSortedMap(map);\n+        return new UnmodifiableSortedMap<K, V>(map);\n     }\n \n     //-----------------------------------------------------------------------\n      * @param map  the map to decorate, must not be null\n      * @throws IllegalArgumentException if map is null\n      */\n-    private UnmodifiableSortedMap(SortedMap map) {\n+    private UnmodifiableSortedMap(SortedMap<K, V> map) {\n         super(map);\n     }\n-\n+    \n     //-----------------------------------------------------------------------\n     /**\n      * Write the map out using a custom routine.\n      * @throws ClassNotFoundException\n      * @since Commons Collections 3.1\n      */\n+    @SuppressWarnings(\"unchecked\")\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n-        map = (Map) in.readObject();\n+        map = (Map<K, V>) in.readObject();\n     }\n \n     //-----------------------------------------------------------------------\n         throw new UnsupportedOperationException();\n     }\n \n-    public Object put(Object key, Object value) {\n+    public V put(K key, V value) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public void putAll(Map mapToCopy) {\n+    public void putAll(Map<? extends K, ? extends V> mapToCopy) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public Object remove(Object key) {\n+    public V remove(Object key) {\n         throw new UnsupportedOperationException();\n     }\n \n-    public Set entrySet() {\n-        Set set = super.entrySet();\n-        return UnmodifiableEntrySet.decorate(set);\n+    public Set<Map.Entry<K, V>> entrySet() {\n+        return UnmodifiableEntrySet.decorate(super.entrySet());\n     }\n \n-    public Set keySet() {\n-        Set set = super.keySet();\n-        return UnmodifiableSet.decorate(set);\n+    public Set<K> keySet() {\n+        return UnmodifiableSet.decorate(super.keySet());\n     }\n \n-    public Collection values() {\n-        Collection coll = super.values();\n-        return UnmodifiableCollection.decorate(coll);\n+    public Collection<V> values() {\n+        return UnmodifiableCollection.decorate(super.values());\n     }\n \n     //-----------------------------------------------------------------------\n-    public Object firstKey() {\n-        return getSortedMap().firstKey();\n+    public K firstKey() {\n+        return decorated().firstKey();\n     }\n \n-    public Object lastKey() {\n-        return getSortedMap().lastKey();\n+    public K lastKey() {\n+        return decorated().lastKey();\n     }\n \n-    public Comparator comparator() {\n-        return getSortedMap().comparator();\n+    public Comparator<? super K> comparator() {\n+        return decorated().comparator();\n     }\n \n-    public SortedMap subMap(Object fromKey, Object toKey) {\n-        SortedMap map = getSortedMap().subMap(fromKey, toKey);\n-        return new UnmodifiableSortedMap(map);\n+    public SortedMap<K, V> subMap(K fromKey, K toKey) {\n+        return new UnmodifiableSortedMap<K, V>(decorated().subMap(fromKey, toKey));\n     }\n \n-    public SortedMap headMap(Object toKey) {\n-        SortedMap map = getSortedMap().headMap(toKey);\n-        return new UnmodifiableSortedMap(map);\n+    public SortedMap<K, V> headMap(K toKey) {\n+        return new UnmodifiableSortedMap<K, V>(decorated().headMap(toKey));\n     }\n \n-    public SortedMap tailMap(Object fromKey) {\n-        SortedMap map = getSortedMap().tailMap(fromKey);\n-        return new UnmodifiableSortedMap(map);\n+    public SortedMap<K, V> tailMap(K fromKey) {\n+        return new UnmodifiableSortedMap<K, V>(decorated().tailMap(fromKey));\n     }\n \n }", "timestamp": 1252994182, "metainfo": ""}