{"sha": "3f09772b742d7886c5a18427c9838fb267cc335b", "log": "COLLECTIONS-214 - ExtendedProperties - Include property name had confused static/instance semantics  ", "commit": "\n--- a/src/java/org/apache/commons/collections/ExtendedProperties.java\n+++ b/src/java/org/apache/commons/collections/ExtendedProperties.java\n      * This is the name of the property that can point to other\n      * properties file for including other properties files.\n      */\n+    private String includePropertyName = null;\n+\n+    /**\n+     * This is the default name of the property that can point to other\n+     * properties file for including other properties files.\n+     * \n+     * @deprecated Use getInclude() and setInclude() methods which operate\n+     * on an instance variable from v3.3. Due to be removed in v4.0.\n+     */\n     protected static String include = \"include\";\n \n     /**\n     /**\n      * Gets the property value for including other properties files.\n      * By default it is \"include\".\n-     *\n-     * @return A String.\n+     * <p>\n+     * NOTE: Prior to v3.3 this method accessed a static variable.\n+     * It now accesses an instance variable. For compatability, if the\n+     * instance variable has not been set then the previous static\n+     * variable is then accessed. However, the protected static variable\n+     * can now only be set by subclasses.\n+     * In v4.0, the static variable will be removed.\n+     *\n+     * @return the property name which includes another property\n      */\n     public String getInclude() {\n-        return include;\n+        if (includePropertyName == null) {\n+            return include;  // backwards compatability\n+        }\n+        if (\"\".equals(includePropertyName)) {\n+            return null;  // hack to allow backwards compatability\n+        }\n+        return includePropertyName;\n     }\n \n     /**\n      * Sets the property value for including other properties files.\n      * By default it is \"include\".\n-     *\n-     * @param inc A String.\n+     * <p>\n+     * NOTE: Prior to v3.3 this method set a static variable and affected all\n+     * users of the class. It now sets an instance variable.\n+     * An empty string is also now converted to null internally.\n+     * In v4.0, the static variable will be removed.\n+     *\n+     * @param inc  the property name which includes another property, empty converted to null\n      */\n     public void setInclude(String inc) {\n-        include = inc;\n+        if (inc == null) {\n+            inc = \"\";  // hack to allow backwards compatability\n+        }\n+        includePropertyName = inc;\n     }\n \n     /**\n         }\n \n         try {\n+            String includeProperty = getInclude();\n             while (true) {\n                 String line = reader.readProperty();\n                 if (line == null) {\n                         continue;\n                     }\n \n-                    if (getInclude() != null && key.equalsIgnoreCase(getInclude())) {\n+                    if (includeProperty != null && key.equalsIgnoreCase(includeProperty)) {\n                         // Recursively load properties files.\n                         File file = null;\n \n--- a/src/test/org/apache/commons/collections/TestExtendedProperties.java\n+++ b/src/test/org/apache/commons/collections/TestExtendedProperties.java\n /*\n- *  Copyright 2001-2005 The Apache Software Foundation\n+ *  Copyright 2001-2006 The Apache Software Foundation\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(\"class\", extended.getString(\"resource.loader\"));\n     }\n \n+    public void testInclude() {\n+        ExtendedProperties a = new ExtendedProperties();\n+        ExtendedProperties b = new ExtendedProperties();\n+        \n+        assertEquals(\"include\", a.getInclude());\n+        assertEquals(\"include\", b.getInclude());\n+        \n+        a.setInclude(\"import\");\n+        assertEquals(\"import\", a.getInclude());\n+        assertEquals(\"include\", b.getInclude());\n+        \n+        a.setInclude(\"\");\n+        assertEquals(null, a.getInclude());\n+        assertEquals(\"include\", b.getInclude());\n+        \n+        a.setInclude(\"hi\");\n+        assertEquals(\"hi\", a.getInclude());\n+        assertEquals(\"include\", b.getInclude());\n+        \n+        a.setInclude(null);\n+        assertEquals(null, a.getInclude());\n+        assertEquals(\"include\", b.getInclude());\n+    }\n+\n }", "timestamp": 1153262689, "metainfo": ""}