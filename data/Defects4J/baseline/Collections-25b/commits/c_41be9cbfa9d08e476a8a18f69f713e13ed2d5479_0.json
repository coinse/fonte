{"sha": "41be9cbfa9d08e476a8a18f69f713e13ed2d5479", "log": "Add filter() and transform() Add lots of javadoc Deprecate empty iterator   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.13 2002/08/17 21:10:46 pjack Exp $\n- * $Revision: 1.13 $\n- * $Date: 2002/08/17 21:10:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CollectionUtils.java,v 1.14 2002/08/18 15:26:20 scolebourne Exp $\n+ * $Revision: 1.14 $\n+ * $Date: 2002/08/18 15:26:20 $\n  *\n  * ====================================================================\n  *\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Map;\n import java.util.NoSuchElementException;\n import java.util.Set;\n /**\n  * A set of {@link Collection} related utility methods.\n  *\n+ * @since 1.0\n  * @author Rodney Waldhoff\n- *\n- * @since 1.0\n- * @version $Id: CollectionUtils.java,v 1.13 2002/08/17 21:10:46 pjack Exp $\n+ * @author Paul Jack\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: CollectionUtils.java,v 1.14 2002/08/18 15:26:20 scolebourne Exp $\n  */\n public class CollectionUtils {\n \n     /**\n      * The empty iterator (immutable).\n-     */\n-    public static final Iterator EMPTY_ITERATOR = new EmptyIterator();\n-\n-    /**\n-     * 'Hidden' class which acts as an EmptyIterator.\n-     * An alternative is to use: Collections.EMPTY_LIST.iterator();\n-     * however that will create a new iterator object each time.\n-     */\n-    private static class EmptyIterator implements Iterator {\n-        public boolean hasNext() {\n-            return false;\n-        }\n-\n-        public Object next() {\n-            throw new NoSuchElementException();\n-        }\n-\n-        public void remove() {\n-            throw new UnsupportedOperationException();\n-        }\n-    }\n-\n-    /**\n-     *  Please don't ever instantiate a <Code>CollectionUtils</Code>.\n+     * @deprecated use IteratorUtils.EMPTY_ITERATOR\n+     */\n+    public static final Iterator EMPTY_ITERATOR = IteratorUtils.EMPTY_ITERATOR;\n+\n+    /**\n+     * Please don't ever instantiate a <code>CollectionUtils</code>.\n      */\n     public CollectionUtils() {\n     }\n         return count;\n     }\n \n-    \n-    \n-    \n-    /** Finds the first element in the given collection which matches the given predicate\n-      *\n-      * @return the first element of the collection which matches the predicate or null if none could be found\n-      */\n-    public static Object find( Collection collection, Predicate predicate ) {\n-        if ( collection != null && predicate != null ) {            \n-            for ( Iterator iter = collection.iterator(); iter.hasNext(); ) {\n+    /** \n+     * Finds the first element in the given collection which matches the given predicate.\n+     * <p>\n+     * If the input collection or predicate is null, null is returned.\n+     *\n+     * @param collection  the collection to search, may be null\n+     * @param predicate  the predicate to use, may be null\n+     * @return the first element of the collection which matches the predicate or null if none could be found\n+     */\n+    public static Object find(Collection collection, Predicate predicate) {\n+        if (collection != null && predicate != null) {\n+            for (Iterator iter = collection.iterator(); iter.hasNext();) {\n                 Object item = iter.next();\n-                if ( predicate.evaluate( item ) ) {\n+                if (predicate.evaluate(item)) {\n                     return item;\n                 }\n             }\n         return null;\n     }\n     \n-    /** Executes the given closure on each element in the colleciton\n-      */\n-    public static void forAllDo( Collection collection, Closure closure) {\n-        if ( collection != null ) {\n-            for ( Iterator iter = collection.iterator(); iter.hasNext(); ) {\n+    /** \n+     * Executes the given closure on each element in the collection.\n+     * <p>\n+     * If the input collection is null, there is no change made.\n+     * \n+     * @param collection  the collection to get the input from, may be null\n+     * @param closure  the closure to perform, may not be null\n+     * @throws NullPointerException if the closure is null\n+     */\n+    public static void forAllDo(Collection collection, Closure closure) {\n+        if (collection != null) {\n+            for (Iterator iter = collection.iterator(); iter.hasNext();) {\n                 Object element = iter.next();\n-                closure.execute( element );\n-            }\n-        }\n-    }\n-\n-    /** Selects all elements from inputCollection which match the given predicate\n-      * into an output collection\n-      */\n-    public static Collection select( Collection inputCollection, Predicate predicate ) {\n-        ArrayList answer = new ArrayList( inputCollection.size() );\n-        select( inputCollection, predicate, answer );\n+                closure.execute(element);\n+            }\n+        }\n+    }\n+\n+    /** \n+     * Filter the collection by applying a Predicate to each element. If the\n+     * predicate returns false, remove the element.\n+     * <p>\n+     * If the input collection or predicate is null, there is no change made.\n+     * \n+     * @param collection  the collection to get the input from, may be null\n+     * @param predicate  the predicate to use as a filter, may be null\n+     */\n+    public static void filter(Collection collection, Predicate predicate) {\n+        if (collection != null && predicate != null) {\n+            for (Iterator iter = collection.iterator(); iter.hasNext();) {\n+                Object element = iter.next();\n+                if (predicate.evaluate(element) == false) {\n+                    iter.remove();\n+                }\n+            }\n+        }\n+    }\n+\n+    /** \n+     * Transform the collection by applying a Transformer to each element.\n+     * <p>\n+     * If the input collection or transformer is null, there is no change made.\n+     * <p>\n+     * This routine is best for Lists and uses set(), however it adapts for all\n+     * Collections that support clear() and addAll().\n+     * <p>\n+     * If the input collection controls its input, such as a Set, and the\n+     * Transformer creates duplicates (or are otherwise invalid), the \n+     * collection may reduce in size due to calling this method.\n+     * \n+     * @param collection  the collection to get the input from, may be null\n+     * @param transformer  the transformer to perform, may be null\n+     */\n+    public static void transform(Collection collection, Transformer transformer) {\n+        if (collection != null && transformer != null) {\n+            if (collection instanceof List) {\n+                List list = (List) collection;\n+                for (ListIterator iter = list.listIterator(); iter.hasNext();) {\n+                    Object element = iter.next();\n+                    iter.set(transformer.transform(element));\n+                }\n+            } else {\n+                Collection resultCollection = collect(collection, transformer);\n+                collection.clear();\n+                collection.addAll(resultCollection);\n+            }\n+        }\n+    }\n+\n+    /** \n+     * Selects all elements from input collection which match the given predicate\n+     * into an output collection.\n+     * \n+     * @param inputCollection  the collection to get the input from, may not be null\n+     * @param predicate  the predicate to use, may be null\n+     * @return the elements matching the predicate (new list)\n+     * @throws NullPointerException if the input collection is null\n+     */\n+    public static Collection select(Collection inputCollection, Predicate predicate) {\n+        ArrayList answer = new ArrayList(inputCollection.size());\n+        select(inputCollection, predicate, answer);\n         return answer;\n     }\n+\n+    /** \n+     * Selects all elements from input collection which match the given predicate\n+     * and adds them to outputCollection.\n+     * <p>\n+     * If the input collection or predicate is null, there is no change to the \n+     * output collection.\n+     * \n+     * @param inputCollection  the collection to get the input from, may be null\n+     * @param predicate  the predicate to use, may be null\n+     * @param outputCollection  the collection to output into, may not be null\n+     * @return the outputCollection with the the elements matching the predicate added\n+     * @throws NullPointerException if the input collection is null\n+     */\n+    public static void select(Collection inputCollection, Predicate predicate, Collection outputCollection) {\n+        if (inputCollection != null && predicate != null) {\n+            for (Iterator iter = inputCollection.iterator(); iter.hasNext();) {\n+                Object item = iter.next();\n+                if (predicate.evaluate(item)) {\n+                    outputCollection.add(item);\n+                }\n+            }\n+        }\n+    }\n     \n-    /** Selects all elements from inputCollection which match the given predicate\n-      * and adds them to outputCollection\n-      */\n-    public static void select( Collection inputCollection, Predicate predicate, Collection outputCollection ) {\n-        if ( inputCollection != null && predicate != null ) {            \n-            for ( Iterator iter = inputCollection.iterator(); iter.hasNext(); ) {\n-                Object item = iter.next();\n-                if ( predicate.evaluate( item ) ) {\n-                    outputCollection.add( item );\n-                }\n-            }\n-        }\n+    /** \n+     * Transforms all elements from inputCollection with the given transformer \n+     * and adds them to the outputCollection.\n+     * <p>\n+     * If the input transfomer is null, the result is an empty list.\n+     * \n+     * @param inputCollection  the collection to get the input from, may not be null\n+     * @param transformer  the transformer to use, may be null\n+     * @return the transformed result (new list)\n+     * @throws NullPointerException if the input collection is null\n+     */\n+    public static Collection collect(Collection inputCollection, Transformer transformer) {\n+        ArrayList answer = new ArrayList(inputCollection.size());\n+        collect(inputCollection, transformer, answer);\n+        return answer;\n     }\n     \n-    /** Transforms all elements from inputCollection with the given transformer \n-      * and adds them to the outputCollection\n-      */\n-    public static Collection collect( Collection inputCollection, Transformer transformer ) {\n-        ArrayList answer = new ArrayList( inputCollection.size() );\n-        collect( inputCollection, transformer, answer );\n+    /** \n+     * Transforms all elements from the inputIterator  with the given transformer \n+     * and adds them to the outputCollection.\n+     * <p>\n+     * If the input iterator or transfomer is null, the result is an empty list.\n+     * \n+     * @param inputIterator  the iterator to get the input from, may be null\n+     * @param transformer  the transformer to use, may be null\n+     * @return the transformed result (new list)\n+     */\n+    public static Collection collect(Iterator inputIterator, Transformer transformer) {\n+        ArrayList answer = new ArrayList();\n+        collect(inputIterator, transformer, answer);\n         return answer;\n     }\n     \n-    /** Transforms all elements from the inputIterator  with the given transformer \n-      * and adds them to the outputCollection\n-      */\n-    public static Collection collect( Iterator inputIterator, Transformer transformer ) {\n-        ArrayList answer = new ArrayList();\n-        collect( inputIterator, transformer, answer );\n-        return answer;\n+    /** \n+     * Transforms all elements from inputCollection with the given transformer \n+     * and adds them to the outputCollection.\n+     * <p>\n+     * If the input collection or transfomer is null, there is no change to the \n+     * output collection.\n+     *\n+     * @param inputCollection  the collection to get the input from, may be null\n+     * @param transformer  the transformer to use, may be null\n+     * @param outputCollection  the collection to output into, may not be null\n+     * @return the outputCollection with the transformed input added\n+     * @throws NullPointerException if the output collection is null\n+     */\n+    public static Collection collect(Collection inputCollection, final Transformer transformer, final Collection outputCollection) {\n+        if (inputCollection != null) {\n+            return collect(inputCollection.iterator(), transformer, outputCollection);\n+        }\n+        return outputCollection;\n+    }\n+\n+    /** \n+     * Transforms all elements from the inputIterator with the given transformer \n+     * and adds them to the outputCollection.\n+     * <p>\n+     * If the input iterator or transfomer is null, there is no change to the \n+     * output collection.\n+     *\n+     * @param inputIterator  the iterator to get the input from, may be null\n+     * @param transformer  the transformer to use, may be null\n+     * @param outputCollection  the collection to output into, may not be null\n+     * @return the outputCollection with the transformed input added\n+     * @throws NullPointerException if the output collection is null\n+     */\n+    public static Collection collect(Iterator inputIterator, final Transformer transformer, final Collection outputCollection) {\n+        if (inputIterator != null && transformer != null) {\n+            while (inputIterator.hasNext()) {\n+                Object item = inputIterator.next();\n+                Object value = transformer.transform(item);\n+                outputCollection.add(value);\n+            }\n+        }\n+        return outputCollection;\n+    }\n+\n+    /**\n+     * Adds all elements in the iteration to the given collection.\n+     * \n+     * @param collection  the collection to add to\n+     * @param iterator  the iterator of elements to add, may not be null\n+     * @throws NullPointerException if the collection or iterator is null\n+     */\n+    public static void addAll(Collection collection, Iterator iterator) {\n+        while (iterator.hasNext()) {\n+            collection.add(iterator.next());\n+        }\n     }\n     \n-    /** Transforms all elements from inputCollection with the given transformer \n-      * and adds them to the outputCollection\n-      *\n-      * @return the outputCollection\n-      */\n-    public static Collection collect( Collection inputCollection, final Transformer transformer, final Collection outputCollection ) {\n-        if ( inputCollection != null ) {\n-            return collect( inputCollection.iterator(), transformer, outputCollection );\n-        }\n-        return outputCollection;\n-    }\n-\n-    /** Transforms all elements from the inputIterator with the given transformer \n-      * and adds them to the outputCollection\n-      *\n-      * @return the outputCollection\n-      */\n-    public static Collection collect( Iterator inputIterator, final Transformer transformer, final Collection outputCollection ) {\n-        if ( inputIterator != null && transformer != null ) {            \n-            while ( inputIterator.hasNext() ) {\n-                Object item = inputIterator.next();\n-                Object value = transformer.transform( item );\n-                outputCollection.add( value );\n-            }\n-        }\n-        return outputCollection;\n-    }\n-\n-    /** Adds all elements in the iteration to the given collection \n-      */\n-    public static void addAll( Collection collection, Iterator iterator ) {\n-        while ( iterator.hasNext() ) {\n-            collection.add( iterator.next() );\n-        }\n-    }\n-    \n-    /** Adds all elements in the enumeration to the given collection \n-      */\n-    public static void addAll( Collection collection, Enumeration enumeration ) {\n-        while ( enumeration.hasMoreElements() ) {\n-            collection.add( enumeration.nextElement() );\n+    /**\n+     * Adds all elements in the enumeration to the given collection.\n+     * \n+     * @param collection  the collection to add to\n+     * @param enumeration  the enumeration of elements to add, may not be null\n+     * @throws NullPointerException if the collection or enumeration is null\n+     */\n+    public static void addAll(Collection collection, Enumeration enumeration) {\n+        while (enumeration.hasMoreElements()) {\n+            collection.add(enumeration.nextElement());\n         }\n     }    \n     \n-    /** Adds all elements in the array to the given collection \n-      */\n-    public static void addAll( Collection collection, Object[] elements ) {\n-        for ( int i = 0, size = elements.length; i < size; i++ ) {\n-            collection.add( elements[i] );\n+    /** \n+     * Adds all elements in the array to the given collection.\n+     * \n+     * @param collection  the collection to add to\n+     * @param elements  the array of elements to add, may be null\n+     * @throws NullPointerException if the collection or array is null\n+     */\n+    public static void addAll(Collection collection, Object[] elements) {\n+        for (int i = 0, size = elements.length; i < size; i++) {\n+            collection.add(elements[i]);\n         }\n     }    \n     \n     /**\n      * Given an Object, and an index, it will get the nth value in the\n      * object.\n+     * <ul>\n+     * <li>If obj is a Map, get the nth value from the <b>key</b> iterator.\n+     * <li>If obj is a List or an array, get the nth value.\n+     * <li>If obj is an iterator, enumeration or Collection, get the nth value from the iterator.\n+     * <li>Return the original obj.\n+     * </ul>\n+     * \n+     * @param obj  the object to get an index of\n+     * @param index  the index to get\n+     * @throws IndexOutOfBoundsException\n+     * @throws NoSuchElementException\n      */\n     public static Object index(Object obj, int idx) {\n         return index(obj, new Integer(idx));\n     }\n     \n     /**\n-     * Given an Object, and an index, it will get the nth value in the\n-     * object.\n+     * Given an Object, and a key (index), it will get value associated with\n+     * that key in the Object. The following checks are made:\n+     * <ul>\n+     * <li>If obj is a Map, use the index as a key to get a value. If no match continue.\n+     * <li>Check key is an Integer. If not, return the object passed in.\n+     * <li>If obj is a Map, get the nth value from the <b>key</b> iterator.\n+     * <li>If obj is a List or an array, get the nth value.\n+     * <li>If obj is an iterator, enumeration or Collection, get the nth value from the iterator.\n+     * <li>Return the original obj.\n+     * </ul>\n+     * \n+     * @param obj  the object to get an index of\n+     * @param index  the index to get\n+     * @return the object at the specified index\n+     * @throws IndexOutOfBoundsException\n+     * @throws NoSuchElementException\n      */\n     public static Object index(Object obj, Object index) {\n         if(obj instanceof Map) {", "timestamp": 1029684380, "metainfo": ""}