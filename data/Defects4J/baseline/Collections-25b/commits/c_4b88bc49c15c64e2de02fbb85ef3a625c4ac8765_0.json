{"sha": "4b88bc49c15c64e2de02fbb85ef3a625c4ac8765", "log": "dynamically disable certain serialization tests when run under clover   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestList.java\n+++ b/src/test/org/apache/commons/collections/TestList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.15 2003/01/25 12:55:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestList.java,v 1.16 2003/02/26 01:33:22 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * you may still use this base set of cases.  Simply override the\n  * test case (method) your {@link List} fails.\n  *\n- * @version $Revision: 1.15 $ $Date: 2003/01/25 12:55:43 $\n+ * @version $Revision: 1.16 $ $Date: 2003/02/26 01:33:22 $\n  * \n  * @author Rodney Waldhoff\n  * @author Paul Jack\n         */\n \n         // test to make sure the canonical form has been preserved\n-        if (!(makeEmptyList() instanceof Serializable)) return;\n-        List list = (List) readExternalFormFromDisk(getCanonicalEmptyCollectionName(makeEmptyList()));\n-        assertTrue(\"List is empty\",list.size()  == 0);\n+        List list = makeEmptyList();\n+        if(list instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            List list2 = (List) readExternalFormFromDisk(getCanonicalEmptyCollectionName(list));\n+            assertTrue(\"List is empty\",list2.size()  == 0);\n+        }\n     }\n \n     /**\n         */\n \n         // test to make sure the canonical form has been preserved\n-        if (!(makeFullList() instanceof Serializable)) return;\n-        List list = (List) readExternalFormFromDisk(getCanonicalFullCollectionName(makeFullList()));\n-        assertEquals(\"List is the right size\",list.size(), 4);\n+        List list = makeFullList();\n+        if(list instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            List list2 = (List) readExternalFormFromDisk(getCanonicalFullCollectionName(list));\n+            assertEquals(\"List is the right size\",list2.size(), 4);\n+        }\n     }\n \n \n--- a/src/test/org/apache/commons/collections/TestMap.java\n+++ b/src/test/org/apache/commons/collections/TestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.22 2002/11/01 19:36:54 rwaldhoff Exp $\n- * $Revision: 1.22 $\n- * $Date: 2002/11/01 19:36:54 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.23 2003/02/26 01:33:22 rwaldhoff Exp $\n+ * $Revision: 1.23 $\n+ * $Date: 2003/02/26 01:33:22 $\n  *\n  * ====================================================================\n  *\n  * @author Michael Smith\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n- * @version $Revision: 1.22 $ $Date: 2002/11/01 19:36:54 $\n+ * @version $Revision: 1.23 $ $Date: 2003/02/26 01:33:22 $\n  */\n public abstract class TestMap extends TestObject {\n \n         */\n \n         // test to make sure the canonical form has been preserved\n-        if (!(makeEmptyMap() instanceof Serializable)) return;\n-        Map map = (Map) readExternalFormFromDisk(getCanonicalEmptyCollectionName(makeEmptyMap()));\n-        assertTrue(\"Map is empty\",map.isEmpty()  == true);\n+        Map map = makeEmptyMap();\n+        if(map instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            Map map2 = (Map) readExternalFormFromDisk(getCanonicalEmptyCollectionName(map));\n+            assertTrue(\"Map is empty\",map2.isEmpty());\n+        }\n     }\n \n         /**\n         */\n \n         // test to make sure the canonical form has been preserved\n-        if (!(makeFullMap() instanceof Serializable)) return;\n-        Map map = (Map) readExternalFormFromDisk(getCanonicalFullCollectionName(makeFullMap()));\n-        assertEquals(\"Map is the right size\",map.size(), getSampleKeys().length);\n+        Map map = makeFullMap();\n+        if(map instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            Map map2 = (Map) readExternalFormFromDisk(getCanonicalFullCollectionName(map));\n+            assertEquals(\"Map is the right size\",map2.size(), getSampleKeys().length);\n+        }\n     }\n \n     /**\n--- a/src/test/org/apache/commons/collections/TestObject.java\n+++ b/src/test/org/apache/commons/collections/TestObject.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.19 2003/02/26 00:35:19 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestObject.java,v 1.20 2003/02/26 01:33:22 rwaldhoff Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @author Rodney Waldhoff\n  * @author Anonymous\n  * \n- * @version $Revision: 1.19 $ $Date: 2003/02/26 00:35:19 $\n+ * @version $Revision: 1.20 $ $Date: 2003/02/26 01:33:22 $\n  */\n public abstract class TestObject extends BulkTest {\n \n         return readExternalFormFromStream(stream);\n     }\n \n+    protected boolean skipSerializedCanonicalTests() {\n+        return Boolean.getBoolean(\"org.apache.commons.collections:with-clover\");\n+    }\n+\n     // private\n     // ------------------------------------------------------------------------\n \n--- a/src/test/org/apache/commons/collections/comparators/TestComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/TestComparator.java\n      * against the canonical version in CVS.\n      */\n     public void testComparatorCompatibility() throws IOException, ClassNotFoundException {\n-        Comparator comparator = null;\n-\n-        // test to make sure the canonical form has been preserved\n-\ttry {\n-\t    comparator = \n-\t\t(Comparator) readExternalFormFromDisk\n-\t\t(getCanonicalComparatorName(makeComparator()));\n-\t} catch (FileNotFoundException exception) {\n-\n-\t    boolean autoCreateSerialized = false;\n-\n-\t    if(autoCreateSerialized) {\n-\t\tcomparator = makeComparator();\n-\t\tString fileName = getCanonicalComparatorName(comparator);\n-\t\twriteExternalFormToDisk((Serializable) comparator, fileName);\n-\t\tfail(\"Serialized form could not be found.  A serialized version \" +\n-\t\t     \"has now been written (and should be added to CVS): \" + fileName);\n-\t    } else {\n-\t\tfail(\"The Serialized form could be located to test serialization \" +\n-\t\t     \"compatibility: \" + exception.getMessage());\n-\t    }\n-\t}\n-\n-        \n-        // make sure the canonical form produces the ordering we currently\n-        // expect\n-        List randomList = getComparableObjectsOrdered();\n-        reverseObjects(randomList);\n-        sortObjects(randomList,comparator);\n-\n-        List orderedList = getComparableObjectsOrdered();\n-\n-        assertTrue(\"Comparator did not reorder the List correctly\",\n-                   orderedList.equals(randomList));\n+        if(!skipSerializedCanonicalTests()) {\n+            Comparator comparator = null;\n+    \n+            // test to make sure the canonical form has been preserved\n+            try {\n+                comparator = (Comparator) readExternalFormFromDisk(getCanonicalComparatorName(makeComparator()));\n+        \t} catch (FileNotFoundException exception) {\n+    \n+                boolean autoCreateSerialized = false;\n+    \n+        \t    if(autoCreateSerialized) {\n+    \t          \tcomparator = makeComparator();\n+            \t\tString fileName = getCanonicalComparatorName(comparator);\n+            \t\twriteExternalFormToDisk((Serializable) comparator, fileName);\n+            \t\tfail(\"Serialized form could not be found.  A serialized version \" +\n+            \t\t     \"has now been written (and should be added to CVS): \" + fileName);\n+                } else {\n+                    fail(\"The Serialized form could be located to test serialization \" +\n+                        \"compatibility: \" + exception.getMessage());\n+                }\n+            }\n+    \n+            \n+            // make sure the canonical form produces the ordering we currently\n+            // expect\n+            List randomList = getComparableObjectsOrdered();\n+            reverseObjects(randomList);\n+            sortObjects(randomList,comparator);\n+    \n+            List orderedList = getComparableObjectsOrdered();\n+    \n+            assertTrue(\"Comparator did not reorder the List correctly\",\n+                       orderedList.equals(randomList));\n+        }\n     }\n \n }", "timestamp": 1046223202, "metainfo": ""}