{"sha": "9bc0e82584952052f400efccc9640bc0e68d34fb", "log": "Rename ResetableIterator to ResettableIterator Remove Map and Ordered variants to avoid too many classes   ", "commit": "\n--- a/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n+++ b/src/java/org/apache/commons/collections/AbstractDualBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.9 2003/11/08 18:40:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/AbstractDualBidiMap.java,v 1.10 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.decorators.AbstractIteratorDecorator;\n import org.apache.commons.collections.decorators.AbstractMapEntryDecorator;\n import org.apache.commons.collections.iterators.MapIterator;\n-import org.apache.commons.collections.iterators.ResetableMapIterator;\n+import org.apache.commons.collections.iterators.ResettableIterator;\n \n /**\n  * Abstract <code>BidiMap</code> implemented using two maps.\n  * <code>createMap</code> method.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: AbstractDualBidiMap.java,v 1.9 2003/11/08 18:40:17 scolebourne Exp $\n+ * @version $Id: AbstractDualBidiMap.java,v 1.10 2003/11/14 22:58:27 scolebourne Exp $\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n     /**\n      * Inner class MapIterator.\n      */\n-    protected static class BidiMapIterator implements ResetableMapIterator {\n+    protected static class BidiMapIterator implements MapIterator, ResettableIterator {\n         \n         protected final AbstractDualBidiMap map;\n         protected Iterator iterator;\n--- a/src/java/org/apache/commons/collections/Flat3Map.java\n+++ b/src/java/org/apache/commons/collections/Flat3Map.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/Flat3Map.java,v 1.2 2003/11/08 18:49:06 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/Flat3Map.java,v 1.3 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.iterators.EntrySetMapIterator;\n import org.apache.commons.collections.iterators.MapIterator;\n-import org.apache.commons.collections.iterators.ResetableMapIterator;\n+import org.apache.commons.collections.iterators.ResettableIterator;\n \n /**\n  * A <code>Map</code> implementation that stores data in simple fields until\n  * (Note that the impact of this has not actually been tested!)\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/11/08 18:49:06 $\n+ * @version $Revision: 1.3 $ $Date: 2003/11/14 22:58:27 $\n  *\n  * @author Stephen Colebourne\n  */\n     /**\n      * FlatMapIterator\n      */\n-    static class FlatMapIterator implements ResetableMapIterator {\n+    static class FlatMapIterator implements MapIterator, ResettableIterator {\n         private final Flat3Map iFlatMap;\n         private int iIndex = 0;\n         private boolean iCanRemove = false;\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.16 2003/11/08 19:26:28 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/IteratorUtils.java,v 1.17 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.iterators.MapIterator;\n import org.apache.commons.collections.iterators.ObjectArrayIterator;\n import org.apache.commons.collections.iterators.ObjectArrayListIterator;\n-import org.apache.commons.collections.iterators.ResetableIterator;\n-import org.apache.commons.collections.iterators.ResetableListIterator;\n-import org.apache.commons.collections.iterators.ResetableMapIterator;\n-import org.apache.commons.collections.iterators.ResetableOrderedIterator;\n-import org.apache.commons.collections.iterators.ResetableOrderedMapIterator;\n+import org.apache.commons.collections.iterators.OrderedIterator;\n+import org.apache.commons.collections.iterators.OrderedMapIterator;\n+import org.apache.commons.collections.iterators.ResettableIterator;\n+import org.apache.commons.collections.iterators.ResettableListIterator;\n import org.apache.commons.collections.iterators.SingletonIterator;\n import org.apache.commons.collections.iterators.SingletonListIterator;\n import org.apache.commons.collections.iterators.TransformIterator;\n  * {@link org.apache.commons.collections.iterators} subpackage.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.16 $ $Date: 2003/11/08 19:26:28 $\n+ * @version $Revision: 1.17 $ $Date: 2003/11/14 22:58:27 $\n  * \n  * @author Stephen Colebourne\n  * @author Phil Steitz\n     /**\n      * An iterator over no elements\n      */    \n-    public static final ResetableIterator EMPTY_ITERATOR = new EmptyIterator();\n+    public static final ResettableIterator EMPTY_ITERATOR = new EmptyIterator();\n     /**\n      * A list iterator over no elements\n      */    \n-    public static final ResetableListIterator EMPTY_LIST_ITERATOR = new EmptyListIterator();\n+    public static final ResettableListIterator EMPTY_LIST_ITERATOR = new EmptyListIterator();\n     /**\n      * An ordered iterator over no elements\n      */    \n-    public static final ResetableOrderedIterator EMPTY_ORDERED_ITERATOR = new EmptyOrderedIterator();\n+    public static final OrderedIterator EMPTY_ORDERED_ITERATOR = new EmptyOrderedIterator();\n     /**\n      * A map iterator over no elements\n      */    \n-    public static final ResetableMapIterator EMPTY_MAP_ITERATOR = new EmptyMapIterator();\n+    public static final MapIterator EMPTY_MAP_ITERATOR = new EmptyMapIterator();\n     /**\n      * An ordered map iterator over no elements\n      */    \n-    public static final ResetableOrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = new EmptyOrderedMapIterator();\n+    public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = new EmptyOrderedMapIterator();\n \n     /**\n      * Prevents instantiation.\n     private IteratorUtils() {\n     }\n \n-    // Iterator creators\n-    //----------------------------------------------------------------------\n-    \n+    // Empty\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets an empty iterator.\n      * <p>\n      *\n      * @return  an iterator over nothing\n      */\n-    public static ResetableIterator emptyIterator() {\n+    public static ResettableIterator emptyIterator() {\n         return EMPTY_ITERATOR;\n     }\n \n      *\n      * @return  a list iterator over nothing\n      */\n-    public static ResetableListIterator emptyListIterator() {\n+    public static ResettableListIterator emptyListIterator() {\n         return EMPTY_LIST_ITERATOR;\n     }\n \n      *\n      * @return  an ordered iterator over nothing\n      */\n-    public static ResetableOrderedIterator emptyOrderedIterator() {\n+    public static OrderedIterator emptyOrderedIterator() {\n         return EMPTY_ORDERED_ITERATOR;\n     }\n \n      *\n      * @return  a map iterator over nothing\n      */\n-    public static ResetableMapIterator emptyMapIterator() {\n+    public static MapIterator emptyMapIterator() {\n         return EMPTY_MAP_ITERATOR;\n     }\n \n      *\n      * @return  a map iterator over nothing\n      */\n-    public static ResetableOrderedMapIterator emptyOrderedMapIterator() {\n+    public static OrderedMapIterator emptyOrderedMapIterator() {\n         return EMPTY_ORDERED_MAP_ITERATOR;\n     }\n \n+    // Singleton\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets a singleton iterator.\n      * <p>\n      * @param object  the single object over which to iterate\n      * @return  a singleton iterator over the object\n      */\n-    public static ResetableIterator singletonIterator(Object object) {\n+    public static ResettableIterator singletonIterator(Object object) {\n         return new SingletonIterator(object);\n     }\n \n      * @param object  the single object over which to iterate\n      * @return  a singleton list iterator over the object\n      */\n-    public static ResetableListIterator singletonListIterator(Object object) {\n+    public static ListIterator singletonListIterator(Object object) {\n         return new SingletonListIterator(object);\n     }\n \n     // Arrays\n-    //----------------------------------------------------------------------\n-\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets an iterator over an object array.\n      *\n      * @return  an iterator over the array\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableIterator arrayIterator(Object[] array) {\n+    public static ResettableIterator arrayIterator(Object[] array) {\n         return new ObjectArrayIterator(array);\n     }\n \n      * @throws IllegalArgumentException if the array is not an array\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableIterator arrayIterator(Object array) {\n+    public static ResettableIterator arrayIterator(Object array) {\n         return new ArrayIterator(array);\n     }\n \n      *  than the length of the array\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableIterator arrayIterator(Object[] array, int start) {\n+    public static ResettableIterator arrayIterator(Object[] array, int start) {\n         return new ObjectArrayIterator(array, start);\n     }\n \n      *  than the length of the array\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableIterator arrayIterator(Object array, int start) {\n+    public static ResettableIterator arrayIterator(Object array, int start) {\n         return new ArrayIterator(array, start);\n     }\n \n      * @throws IllegalArgumentException if end is before start\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableIterator arrayIterator(Object[] array, int start, int end) {\n+    public static ResettableIterator arrayIterator(Object[] array, int start, int end) {\n         return new ObjectArrayIterator(array, start, end);\n     }\n \n      * @throws IllegalArgumentException if end is before start\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableIterator arrayIterator(Object array, int start, int end) {\n+    public static ResettableIterator arrayIterator(Object array, int start, int end) {\n         return new ArrayIterator(array, start, end);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Gets a list iterator over an object array.\n      *\n      * @return  a list iterator over the array\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableListIterator arrayListIterator(Object[] array) {\n+    public static ResettableListIterator arrayListIterator(Object[] array) {\n         return new ObjectArrayListIterator(array);\n     }\n \n      * @throws IllegalArgumentException if the array is not an array\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableListIterator arrayListIterator(Object array) {\n+    public static ResettableListIterator arrayListIterator(Object array) {\n         return new ArrayListIterator(array);\n     }\n \n      * @throws IndexOutOfBoundsException if start is less than zero\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableListIterator arrayListIterator(Object[] array, int start) {\n+    public static ResettableListIterator arrayListIterator(Object[] array, int start) {\n         return new ObjectArrayListIterator(array, start);\n     }\n \n      * @throws IndexOutOfBoundsException if start is less than zero\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableListIterator arrayListIterator(Object array, int start) {\n+    public static ResettableListIterator arrayListIterator(Object array, int start) {\n         return new ArrayListIterator(array, start);\n     }\n \n      * @throws IllegalArgumentException if end is before start\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableListIterator arrayListIterator(Object[] array, int start, int end) {\n+    public static ResettableListIterator arrayListIterator(Object[] array, int start, int end) {\n         return new ObjectArrayListIterator(array, start, end);\n     }\n     \n      * @throws IllegalArgumentException if end is before start\n      * @throws NullPointerException if array is null\n      */\n-    public static ResetableListIterator arrayListIterator(Object array, int start, int end) {\n+    public static ResettableListIterator arrayListIterator(Object array, int start, int end) {\n         return new ArrayListIterator(array, start, end);\n     }\n     \n-    // Iterator wrappers\n-    //----------------------------------------------------------------------\n-    \n+    // Unmodifiable\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets an immutable version of an {@link Iterator}. The returned object\n      * will always throw an {@link UnsupportedOperationException} for\n         return UnmodifiableMapIterator.decorate(mapIterator);\n     }\n \n+    // Chained\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets an iterator that iterates through two {@link Iterator}s \n      * one after another.\n         return new IteratorChain(iterators);\n     }\n \n+    // Collated\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets an iterator that provides an ordered iteration over the elements\n      * contained in a collection of ordered {@link Iterator}s.\n         return new CollatingIterator(comparator, iterators);\n     }\n \n+    // Transformed\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets an iterator that transforms the elements of another iterator.\n      * <p>\n         return new TransformIterator(iterator, transform);\n     }\n     \n+    // Filtered\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets an iterator that filters another iterator.\n      * <p>\n         return new FilterListIterator(listIterator, predicate);\n     }\n     \n+    // Looping\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets an iterator that loops continuously over the supplied collection.\n      * <p>\n      * @param coll  the collection to iterate over, not null\n      * @throws NullPointerException if the collection is null\n      */\n-    public static ResetableIterator loopingIterator(Collection coll) {\n+    public static ResettableIterator loopingIterator(Collection coll) {\n         if (coll == null) {\n             throw new NullPointerException(\"Collection must not be null\");\n         }\n         return new LoopingIterator(coll);\n     }\n     \n+    // Views\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets an iterator that provides an iterator view of the given enumeration.\n      *\n     /**\n      * EmptyIterator class\n      */\n-    static class EmptyIterator implements ResetableIterator {\n+    static class EmptyIterator implements ResettableIterator {\n         \n         EmptyIterator() {\n             super();\n     /**\n      * EmptyListIterator class\n      */\n-    static class EmptyListIterator extends EmptyIterator implements ResetableListIterator {\n+    static class EmptyListIterator extends EmptyIterator implements ResettableListIterator {\n         \n         EmptyListIterator() {\n             super();\n     /**\n      * EmptyOrderedIterator class\n      */\n-    static class EmptyOrderedIterator extends EmptyIterator implements ResetableOrderedIterator {\n+    static class EmptyOrderedIterator extends EmptyIterator implements OrderedIterator, ResettableIterator {\n         \n         EmptyOrderedIterator() {\n             super();\n     /**\n      * EmptyMapIterator class\n      */\n-    static class EmptyMapIterator extends EmptyIterator implements ResetableMapIterator {\n+    static class EmptyMapIterator extends EmptyIterator implements MapIterator, ResettableIterator {\n         \n         EmptyMapIterator() {\n             super();\n     /**\n      * EmptyOrderedMapIterator class\n      */\n-    static class EmptyOrderedMapIterator extends EmptyMapIterator implements ResetableOrderedMapIterator {\n+    static class EmptyOrderedMapIterator extends EmptyMapIterator implements OrderedMapIterator, ResettableIterator {\n         \n         EmptyOrderedMapIterator() {\n             super();\n--- a/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayIterator.java,v 1.6 2003/09/29 22:37:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayIterator.java,v 1.7 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * the iterator back to the start if required.\n  *\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.6 $ $Date: 2003/09/29 22:37:40 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/14 22:58:27 $\n  *\n  * @author James Strachan\n  * @author Mauricio S. Moura\n  * @author Neil O'Toole\n  * @author Stephen Colebourne\n  */\n-public class ArrayIterator implements ResetableIterator {\n+public class ArrayIterator implements ResettableIterator {\n \n     /** The array to iterate over */    \n     protected Object array;\n--- a/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java,v 1.8 2003/10/09 20:44:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ArrayListIterator.java,v 1.9 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see java.util.ListIterator\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2003/10/09 20:44:32 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:58:27 $\n  *\n  * @author Neil O'Toole\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  */\n public class ArrayListIterator extends ArrayIterator\n-\t\timplements ListIterator, ResetableListIterator {\n+\t\timplements ListIterator, ResettableListIterator {\n \n     /**\n      * Holds the index of the last item returned by a call to <code>next()</code>\n--- a/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java,v 1.1 2003/11/08 18:43:13 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/EntrySetMapIterator.java,v 1.2 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * </pre>\n  *  \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/11/08 18:43:13 $\n+ * @version $Revision: 1.2 $ $Date: 2003/11/14 22:58:27 $\n  *\n  * @author Stephen Colebourne\n  */\n-public class EntrySetMapIterator implements MapIterator, ResetableMapIterator {\n+public class EntrySetMapIterator implements MapIterator, ResettableIterator {\n     \n     private final Map map;\n     private Iterator iterator;\n--- a/src/java/org/apache/commons/collections/iterators/LoopingIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/LoopingIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/LoopingIterator.java,v 1.5 2003/08/31 17:25:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/LoopingIterator.java,v 1.6 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * implementations will throw a ConcurrentModificationException. \n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/08/31 17:25:49 $\n+ * @version $Revision: 1.6 $ $Date: 2003/11/14 22:58:27 $\n  *\n  * @author <a href=\"mailto:joncrlsn@users.sf.net\">Jonathan Carlson</a>\n  * @author Stephen Colebourne\n  */\n-public class LoopingIterator implements ResetableIterator {\n+public class LoopingIterator implements ResettableIterator {\n     \n     /** The collection to base the iterator on */\n     private Collection collection;\n--- a/src/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java,v 1.8 2003/10/10 21:06:18 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ObjectArrayIterator.java,v 1.9 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * back to the start if required.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2003/10/10 21:06:18 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:58:27 $\n  * \n  * @author James Strachan\n  * @author Mauricio S. Moura\n  * @author Phil Steitz\n  */\n public class ObjectArrayIterator\n-        implements Iterator, ResetableIterator {\n+        implements Iterator, ResettableIterator {\n \n     /** The array */\n     protected Object[] array = null;\n--- a/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java,v 1.9 2003/11/08 18:37:16 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/ObjectArrayListIterator.java,v 1.10 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see java.util.ListIterator\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.9 $ $Date: 2003/11/08 18:37:16 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:58:27 $\n  * \n  * @author Neil O'Toole\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  */\n public class ObjectArrayListIterator extends ObjectArrayIterator\n-\t\timplements ListIterator, ResetableListIterator {\n+\t\timplements ListIterator, ResettableListIterator {\n \n     /**\n      * Holds the index of the last item returned by a call to <code>next()</code> \n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ResettableIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/ResettableIterator.java,v 1.1 2003/11/14 22:58:27 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+\n+/** \n+ * Interface implemented by those iterators that can be reset back to an \n+ * initial state.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/14 22:58:27 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public interface ResettableIterator extends Iterator {\n+\n+    /**\n+     * Resets the iterator back to the position at which the iterator\n+     * was created.\n+     */\n+    public void reset();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/ResettableListIterator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/Attic/ResettableListIterator.java,v 1.1 2003/11/14 22:58:27 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ListIterator;\n+\n+/** \n+ * Interface implemented by those list iterators that can be reset back \n+ * to an initial state.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/11/14 22:58:27 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public interface ResettableListIterator extends ListIterator, ResettableIterator {\n+\n+    /**\n+     * Resets the iterator back to the position at which the iterator\n+     * was created.\n+     */\n+    public void reset();\n+\n+}\n--- a/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/SingletonIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonIterator.java,v 1.8 2003/10/09 20:44:32 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonIterator.java,v 1.9 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * object instance.\n  *\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.8 $ $Date: 2003/10/09 20:44:32 $\n+ * @version $Revision: 1.9 $ $Date: 2003/11/14 22:58:27 $\n  * \n  * @author James Strachan\n  * @author Stephen Colebourne\n  * @author Rodney Waldhoff\n  */\n public class SingletonIterator\n-\t\timplements Iterator, ResetableIterator {\n+\t\timplements Iterator, ResettableIterator {\n \n     private boolean beforeFirst = true;\n     private boolean removed = false;\n--- a/src/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n+++ b/src/java/org/apache/commons/collections/iterators/SingletonListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonListIterator.java,v 1.9 2003/11/08 18:38:27 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/iterators/SingletonListIterator.java,v 1.10 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * object instance.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.9 $ $Date: 2003/11/08 18:38:27 $\n+ * @version $Revision: 1.10 $ $Date: 2003/11/14 22:58:27 $\n  * \n  * @author Stephen Colebourne\n  * @author Rodney Waldhoff\n  */\n-public class SingletonListIterator implements ListIterator, ResetableListIterator {\n+public class SingletonListIterator implements ListIterator, ResettableListIterator {\n \n     private boolean beforeFirst = true;\n     private boolean nextCalled = false;\n--- a/src/test/org/apache/commons/collections/TestIteratorUtils.java\n+++ b/src/test/org/apache/commons/collections/TestIteratorUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.10 2003/11/08 19:26:29 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestIteratorUtils.java,v 1.11 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import org.apache.commons.collections.iterators.MapIterator;\n import org.apache.commons.collections.iterators.OrderedIterator;\n import org.apache.commons.collections.iterators.OrderedMapIterator;\n-import org.apache.commons.collections.iterators.ResetableIterator;\n-import org.apache.commons.collections.iterators.ResetableListIterator;\n-import org.apache.commons.collections.iterators.ResetableMapIterator;\n-import org.apache.commons.collections.iterators.ResetableOrderedIterator;\n-import org.apache.commons.collections.iterators.ResetableOrderedMapIterator;\n+import org.apache.commons.collections.iterators.ResettableIterator;\n+import org.apache.commons.collections.iterators.ResettableListIterator;\n \n /**\n  * Tests for IteratorUtils.\n  * \n- * @version $Revision: 1.10 $ $Date: 2003/11/08 19:26:29 $\n+ * @version $Revision: 1.11 $ $Date: 2003/11/14 22:58:27 $\n  * \n  * @author Unknown\n  */\n     \n     public void testArrayIterator() {\n         Object[] objArray = {\"a\", \"b\", \"c\"};\n-        ResetableIterator iterator = IteratorUtils.arrayIterator(objArray);\n+        ResettableIterator iterator = IteratorUtils.arrayIterator(objArray);\n         assertTrue(iterator.next().equals(\"a\"));\n         assertTrue(iterator.next().equals(\"b\"));\n         iterator.reset();\n     \n     public void testArrayListIterator() {\n         Object[] objArray = {\"a\", \"b\", \"c\", \"d\"};\n-        ResetableListIterator iterator = IteratorUtils.arrayListIterator(objArray);\n+        ResettableListIterator iterator = IteratorUtils.arrayListIterator(objArray);\n         assertTrue(!iterator.hasPrevious());\n         assertTrue(iterator.previousIndex() == -1);\n         assertTrue(iterator.nextIndex() == 0);\n      */\n     public void testEmptyIterator() {\n         assertTrue(IteratorUtils.EMPTY_ITERATOR instanceof Iterator);\n-        assertTrue(IteratorUtils.EMPTY_ITERATOR instanceof ResetableIterator);\n+        assertTrue(IteratorUtils.EMPTY_ITERATOR instanceof ResettableIterator);\n         assertEquals(false, IteratorUtils.EMPTY_ITERATOR.hasNext());\n         IteratorUtils.EMPTY_ITERATOR.reset();\n         assertSame(IteratorUtils.EMPTY_ITERATOR, IteratorUtils.EMPTY_ITERATOR);\n     public void testEmptyListIterator() {\n         assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof Iterator);\n         assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ListIterator);\n-        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResetableIterator);\n-        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResetableListIterator);\n+        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableIterator);\n+        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableListIterator);\n         assertEquals(false, IteratorUtils.EMPTY_LIST_ITERATOR.hasNext());\n         assertEquals(0, IteratorUtils.EMPTY_LIST_ITERATOR.nextIndex());\n         assertEquals(-1, IteratorUtils.EMPTY_LIST_ITERATOR.previousIndex());\n     public void testEmptyMapIterator() {\n         assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof Iterator);\n         assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof MapIterator);\n-        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof ResetableIterator);\n-        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof ResetableMapIterator);\n+        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof ResettableIterator);\n         assertEquals(false, IteratorUtils.EMPTY_MAP_ITERATOR.hasNext());\n-        IteratorUtils.EMPTY_MAP_ITERATOR.reset();\n+        ((ResettableIterator) IteratorUtils.EMPTY_MAP_ITERATOR).reset();\n         assertSame(IteratorUtils.EMPTY_MAP_ITERATOR, IteratorUtils.EMPTY_MAP_ITERATOR);\n         assertSame(IteratorUtils.EMPTY_MAP_ITERATOR, IteratorUtils.emptyMapIterator());\n         try {\n     public void testEmptyOrderedIterator() {\n         assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof Iterator);\n         assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof OrderedIterator);\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ResetableIterator);\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ResetableOrderedIterator);\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ResettableIterator);\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_ITERATOR.hasNext());\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_ITERATOR.hasPrevious());\n-        IteratorUtils.EMPTY_ORDERED_ITERATOR.reset();\n+        ((ResettableIterator) IteratorUtils.EMPTY_ORDERED_ITERATOR).reset();\n         assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR, IteratorUtils.EMPTY_ORDERED_ITERATOR);\n         assertSame(IteratorUtils.EMPTY_ORDERED_ITERATOR, IteratorUtils.emptyOrderedIterator());\n         try {\n         assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof Iterator);\n         assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof MapIterator);\n         assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof OrderedMapIterator);\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResetableIterator);\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResetableMapIterator);\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResetableOrderedIterator);\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResetableOrderedMapIterator);\n+        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResettableIterator);\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasNext());\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasPrevious());\n-        IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.reset();\n+        ((ResettableIterator) IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR).reset();\n         assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);\n         assertSame(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR, IteratorUtils.emptyOrderedMapIterator());\n         try {\n--- a/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java,v 1.7 2003/10/09 11:05:27 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonIterator.java,v 1.8 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Tests the SingletonIterator to ensure that the next() method will actually\n  * perform the iteration rather than the hasNext() method.\n  *\n- * @version $Revision: 1.7 $ $Date: 2003/10/09 11:05:27 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:58:27 $\n  * \n  * @author James Strachan\n  */\n     }\n     \n     public void testSingletonIteratorRemove() {\n-        ResetableIterator iter = new SingletonIterator(\"xyzzy\");\n+        ResettableIterator iter = new SingletonIterator(\"xyzzy\");\n         assertTrue(iter.hasNext());\n         assertEquals(\"xyzzy\",iter.next());\n         iter.remove();\n     }\n     \n     public void testReset() {\n-        ResetableIterator it = (ResetableIterator) makeObject();\n+        ResettableIterator it = (ResettableIterator) makeObject();\n         \n         assertEquals(true, it.hasNext());\n         assertEquals(testValue, it.next());\n--- a/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java,v 1.7 2003/10/09 11:05:27 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/TestSingletonListIterator.java,v 1.8 2003/11/14 22:58:27 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Tests the SingletonListIterator.\n  *\n- * @version $Revision: 1.7 $ $Date: 2003/10/09 11:05:27 $\n+ * @version $Revision: 1.8 $ $Date: 2003/11/14 22:58:27 $\n  * \n  * @author Stephen Colebourne\n  */\n     }\n     \n     public void testReset() {\n-        ResetableListIterator it = (ResetableListIterator) makeObject();\n+        ResettableListIterator it = (ResettableListIterator) makeObject();\n         \n         assertEquals(true, it.hasNext());\n         assertEquals(false, it.hasPrevious());", "timestamp": 1068850707, "metainfo": ""}