{"sha": "12d9e8743dc8290838fc74f650b16c27f7054111", "log": "Remove unnecessary casts.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/trie/ByteArrayKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/ByteArrayKeyAnalyzer.java\n             return false;\n         }\n         \n-        int index = (int)(keyBitIndex / LENGTH);\n-        int bit = (int)(keyBitIndex % LENGTH);\n+        int index = keyBitIndex / LENGTH;\n+        int bit = keyBitIndex % LENGTH;\n         return (key[index] & mask(bit)) != 0;\n     }\n \n--- a/src/main/java/org/apache/commons/collections/trie/CharArrayKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/CharArrayKeyAnalyzer.java\n             return false;\n         }\n \n-        int index = (int)(bitIndex / LENGTH);\n-        int bit = (int)(bitIndex % LENGTH);\n+        int index = bitIndex / LENGTH;\n+        int bit = bitIndex % LENGTH;\n \n         return (key[index] & mask(bit)) != 0;\n     }\n--- a/src/main/java/org/apache/commons/collections/trie/StringKeyAnalyzer.java\n+++ b/src/main/java/org/apache/commons/collections/trie/StringKeyAnalyzer.java\n             return false;\n         }\n         \n-        int index = (int)(bitIndex / LENGTH);\n-        int bit = (int)(bitIndex % LENGTH);\n+        int index = bitIndex / LENGTH;\n+        int bit = bitIndex % LENGTH;\n         \n         return (key.charAt(index) & mask(bit)) != 0;\n     }\n--- a/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections/CollectionUtilsTest.java\n         ints.add(3);\n         Iterable<Integer> iterable = ints;\n         assertTrue(CollectionUtils.filter(iterable, EQUALS_TWO));\n-        assertEquals(1, (int) ints.size());\n+        assertEquals(1, ints.size());\n         assertEquals(2, (int) ints.get(0));\n     }\n \n--- a/src/test/java/org/apache/commons/collections/collection/IndexedCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections/collection/IndexedCollectionTest.java\n \n     @Override\n     public String[] getFullElements() {\n-        return (String[]) new String[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n+        return new String[] { \"1\", \"3\", \"5\", \"7\", \"2\", \"4\", \"6\" };\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/collections/map/MultiValueMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/MultiValueMapTest.java\n     @SuppressWarnings(\"unchecked\")\n     public void testKeyContainsValue() {\n         final MultiValueMap<K, V> map = createTestMap(HashSet.class);\n-        assertTrue(map.containsValue((K) \"one\", \"uno\"));\n-        assertTrue(map.containsValue((K) \"one\", \"un\"));\n-        assertTrue(map.containsValue((K) \"two\", \"dos\"));\n-        assertTrue(map.containsValue((K) \"two\", \"deux\"));\n-        assertTrue(map.containsValue((K) \"three\", \"tres\"));\n-        assertTrue(map.containsValue((K) \"three\", \"trois\"));\n-        assertFalse(map.containsValue((K) \"four\", \"quatro\"));\n+        assertTrue(map.containsValue(\"one\", \"uno\"));\n+        assertTrue(map.containsValue(\"one\", \"un\"));\n+        assertTrue(map.containsValue(\"two\", \"dos\"));\n+        assertTrue(map.containsValue(\"two\", \"deux\"));\n+        assertTrue(map.containsValue(\"three\", \"tres\"));\n+        assertTrue(map.containsValue(\"three\", \"trois\"));\n+        assertFalse(map.containsValue(\"four\", \"quatro\"));\n     }\n \n     @SuppressWarnings(\"unchecked\")", "timestamp": 1357577494, "metainfo": ""}