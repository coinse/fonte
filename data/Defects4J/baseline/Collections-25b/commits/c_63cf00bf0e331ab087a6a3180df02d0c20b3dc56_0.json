{"sha": "63cf00bf0e331ab087a6a3180df02d0c20b3dc56", "log": "Made BeanMap.values() and BeanMap.keySet() unmodifiable.  This brings it more in line with the Map contract where any modifications will throw UnsupportedOperationException rather than allow modifications that are not reflected in the underlying map.  This also keeps values(), keySet() and entrySet() consistent with each other.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/BeanMap.java\n+++ b/src/java/org/apache/commons/collections/BeanMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.8 2002/03/21 17:11:01 morgand Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/03/21 17:11:01 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/BeanMap.java,v 1.9 2002/03/24 21:53:27 mas Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/03/24 21:53:27 $\n  *\n  * ====================================================================\n  *\n     /**\n      * Get the keys for this BeanMap.\n      * \n-     * @return BeanMap keys.  Modifications to this Set (i.e. removes)\n-     *         <i>will</i> be reflected in the BeanMap.\n+     * @return BeanMap keys.  The Set returned bu this method is not\n+     *         modifiable.\n      */\n     public Set keySet() {\n-        return readMethods.keySet();\n+        return Collections.unmodifiableSet(readMethods.keySet());\n     }\n \n     /**\n         for ( Iterator iter = valueIterator(); iter.hasNext(); ) {\n             answer.add( iter.next() );\n         }\n-        return answer;\n+        return Collections.unmodifiableList(answer);\n     }\n \n ", "timestamp": 1017006807, "metainfo": ""}