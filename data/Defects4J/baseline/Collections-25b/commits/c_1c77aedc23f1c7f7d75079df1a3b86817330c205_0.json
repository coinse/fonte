{"sha": "1c77aedc23f1c7f7d75079df1a3b86817330c205", "log": "Change typed collections to not implement the interface.  Instead they are just placeholders. This makes the decorate method more usable in IDEs.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/decorators/TypedBag.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedBag.java,v 1.1 2003/05/07 13:19:18 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedBag.java,v 1.2 2003/05/09 16:41:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/07 13:19:18 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/09 16:41:57 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  */\n-public class TypedBag extends PredicatedBag {\n+public class TypedBag {\n \n     /**\n      * Factory method to create a typed bag.\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n     public static Bag decorate(Bag bag, Class type) {\n-        return new TypedBag(bag, type);\n+        return new PredicatedBag(bag, TypedCollection.getPredicate(type));\n     }\n     \n     /**\n-     * Constructor that wraps (not copies).\n-     * <p>\n-     * If there are any elements already in the bag being decorated, they\n-     * are validated.\n-     * \n-     * @param bag  the bag to decorate, must not be null\n-     * @param type  the type to allow into the bag, must not be null\n-     * @throws IllegalArgumentException if bag or type is null\n-     * @throws IllegalArgumentException if the bag contains invalid elements\n+     * Restrictive constructor.\n      */\n-    protected TypedBag(Bag bag, Class type) {\n-        super(bag, TypedCollection.getPredicate(type));\n+    protected TypedBag() {\n     }\n \n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/TypedBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedBuffer.java,v 1.1 2003/05/09 16:41:57 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import org.apache.commons.collections.Buffer;\n+\n+/**\n+ * <code>TypedBuffer</code> decorates another <code>Buffer</code>\n+ * to validate that elements added are of a specific type.\n+ * <p>\n+ * The validation of additions is performed via an instanceof test against \n+ * a specified <code>Class</code>. If an object cannot be addded to the\n+ * collection, an IllegalArgumentException is thrown.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/05/09 16:41:57 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Matthew Hawthorne\n+ */\n+public class TypedBuffer {\n+\n+    /**\n+     * Factory method to create a typed list.\n+     * <p>\n+     * If there are any elements already in the buffer being decorated, they\n+     * are validated.\n+     * \n+     * @param buffer  the buffer to decorate, must not be null\n+     * @param type  the type to allow into the buffer, must not be null\n+     * @throws IllegalArgumentException if buffer or type is null\n+     * @throws IllegalArgumentException if the buffer contains invalid elements\n+     */\n+    public static Buffer decorate(Buffer buffer, Class type) {\n+        return new PredicatedBuffer(buffer, TypedCollection.getPredicate(type));\n+    }\n+    \n+    /**\n+     * Restrictive constructor.\n+     */\n+    protected TypedBuffer() {\n+    }\n+\n+}\n--- a/src/java/org/apache/commons/collections/decorators/TypedCollection.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedCollection.java,v 1.2 2003/05/05 23:25:22 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedCollection.java,v 1.3 2003/05/09 16:41:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/05 23:25:22 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/09 16:41:57 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  */\n-public class TypedCollection extends PredicatedCollection {\n+public class TypedCollection {\n \n     /**\n      * Factory method to create a typed collection.\n      * @throws IllegalArgumentException if the collection contains invalid elements\n      */\n     public static Collection decorate(Collection coll, Class type) {\n-        return new TypedCollection(coll, type);\n+        return new PredicatedCollection(coll, TypedCollection.getPredicate(type));\n     }\n     \n     /**\n-     * Constructor that wraps (not copies).\n-     * <p>\n-     * If there are any elements already in the collection being decorated, they\n-     * are validated.\n-     * \n-     * @param coll  the collection to decorate, must not be null\n-     * @param type  the type to allow into the collection, must not be null\n-     * @throws IllegalArgumentException if collection or type is null\n-     * @throws IllegalArgumentException if the collection contains invalid elements\n+     * Restrictive constructor.\n      */\n-    protected TypedCollection(Collection coll, Class type) {\n-        super(coll, getPredicate(type));\n+    protected TypedCollection() {\n     }\n \n     /**\n      * @param type  the type, must not be null\n      * @throws IllegalArgumentException if type is null\n      */\n-    static Predicate getPredicate(Class type) {\n+    protected static Predicate getPredicate(Class type) {\n         return new InstanceofPredicate(type);\n     }\n \n--- a/src/java/org/apache/commons/collections/decorators/TypedList.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedList.java,v 1.2 2003/05/07 11:20:21 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedList.java,v 1.3 2003/05/09 16:41:56 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/05/07 11:20:21 $\n+ * @version $Revision: 1.3 $ $Date: 2003/05/09 16:41:56 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  */\n-public class TypedList extends PredicatedList {\n+public class TypedList {\n \n     /**\n      * Factory method to create a typed list.\n      * @throws IllegalArgumentException if the list contains invalid elements\n      */\n     public static List decorate(List list, Class type) {\n-        return new TypedList(list, type);\n+        return new PredicatedList(list, TypedCollection.getPredicate(type));\n     }\n     \n     /**\n-     * Constructor that wraps (not copies).\n-     * <p>\n-     * If there are any elements already in the list being decorated, they\n-     * are validated.\n-     * \n-     * @param list  the list to decorate, must not be null\n-     * @param type  the type to allow into the collection, must not be null\n-     * @throws IllegalArgumentException if list or type is null\n-     * @throws IllegalArgumentException if the list contains invalid elements\n+     * Restrictive constructor.\n      */\n-    protected TypedList(List list, Class type) {\n-        super(list, TypedCollection.getPredicate(type));\n+    protected TypedList() {\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/decorators/TypedSet.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSet.java,v 1.1 2003/05/07 11:19:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSet.java,v 1.2 2003/05/09 16:41:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/07 11:19:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/09 16:41:57 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  */\n-public class TypedSet extends PredicatedSet {\n+public class TypedSet {\n \n     /**\n      * Factory method to create a typed set.\n      * @throws IllegalArgumentException if the set contains invalid elements\n      */\n     public static Set decorate(Set set, Class type) {\n-        return new TypedSet(set, type);\n+        return new PredicatedSet(set, TypedCollection.getPredicate(type));\n     }\n     \n     /**\n-     * Constructor that wraps (not copies).\n-     * <p>\n-     * If there are any elements already in the collection being decorated, they\n-     * are validated.\n-     * \n-     * @param set  the set to decorate, must not be null\n-     * @param type  the type to allow into the collection, must not be null\n-     * @throws IllegalArgumentException if set or type is null\n-     * @throws IllegalArgumentException if the set contains invalid elements\n+     * Restrictive constructor.\n      */\n-    protected TypedSet(Set set, Class type) {\n-        super(set, TypedCollection.getPredicate(type));\n+    protected TypedSet() {\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/decorators/TypedSortedBag.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedSortedBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSortedBag.java,v 1.1 2003/05/07 13:19:17 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSortedBag.java,v 1.2 2003/05/09 16:41:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/07 13:19:17 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/09 16:41:57 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  */\n-public class TypedSortedBag extends PredicatedSortedBag {\n+public class TypedSortedBag {\n \n     /**\n      * Factory method to create a typed sorted bag.\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n     public static SortedBag decorate(SortedBag bag, Class type) {\n-        return new TypedSortedBag(bag, type);\n+        return new PredicatedSortedBag(bag, TypedCollection.getPredicate(type));\n     }\n     \n     /**\n-     * Constructor that wraps (not copies).\n-     * <p>\n-     * If there are any elements already in the bag being decorated, they\n-     * are validated.\n-     * \n-     * @param bag  the bag to decorate, must not be null\n-     * @param type  the type to allow into the bag, must not be null\n-     * @throws IllegalArgumentException if bag or type is null\n-     * @throws IllegalArgumentException if the bag contains invalid elements\n+     * Restrictive constructor.\n      */\n-    protected TypedSortedBag(SortedBag bag, Class type) {\n-        super(bag, TypedCollection.getPredicate(type));\n+    protected TypedSortedBag() {\n     }\n \n }\n--- a/src/java/org/apache/commons/collections/decorators/TypedSortedSet.java\n+++ b/src/java/org/apache/commons/collections/decorators/TypedSortedSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSortedSet.java,v 1.1 2003/05/07 11:19:46 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/TypedSortedSet.java,v 1.2 2003/05/09 16:41:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * collection, an IllegalArgumentException is thrown.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/05/07 11:19:46 $\n+ * @version $Revision: 1.2 $ $Date: 2003/05/09 16:41:57 $\n  * \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  */\n-public class TypedSortedSet extends PredicatedSortedSet {\n+public class TypedSortedSet {\n \n     /**\n      * Factory method to create a typed sorted set.\n      * @throws IllegalArgumentException if the set contains invalid elements\n      */\n     public static SortedSet decorate(SortedSet set, Class type) {\n-        return new TypedSortedSet(set, type);\n+        return new PredicatedSortedSet(set, TypedCollection.getPredicate(type));\n     }\n     \n     /**\n-     * Constructor that wraps (not copies).\n-     * <p>\n-     * If there are any elements already in the collection being decorated, they\n-     * are validated.\n-     * \n-     * @param set  the set to decorate, must not be null\n-     * @param type  the type to allow into the collection, must not be null\n-     * @throws IllegalArgumentException if set or type is null\n-     * @throws IllegalArgumentException if the set contains invalid elements\n+     * Restrictive constructor.\n      */\n-    protected TypedSortedSet(SortedSet set, Class type) {\n-        super(set, TypedCollection.getPredicate(type));\n+    protected TypedSortedSet() {\n     }\n \n }", "timestamp": 1052498517, "metainfo": ""}