{"sha": "bdc35b5beebbd3c8f4249a97a60e2ffafe31ad3b", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r571381 | skestle | 2007-08-30 22:13:56 -0700 (Thu, 30 Aug 2007) | 1 line          Generified LazyMap     ------------------------------------------------------------------------     r570378 | skestle | 2007-08-28 04:03:40 -0700 (Tue, 28 Aug 2007) | 1 line          Generified InstantiateFactory     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/FactoryUtils.java\n+++ b/src/java/org/apache/commons/collections/FactoryUtils.java\n      * \n      * @return the factory\n      */\n-    public static Factory exceptionFactory() {\n-        return ExceptionFactory.INSTANCE;\n+    public static <T> Factory<T> exceptionFactory() {\n+        return ExceptionFactory.<T>getInstance();\n     }\n \n     /**\n      * This could be useful during testing as a placeholder.\n      *\n      * @see org.apache.commons.collections.functors.ConstantFactory\n-     * \n+     * @param <T> the \"type\" of null object the factory should return.\n      * @return the factory\n      */\n-    public static Factory nullFactory() {\n-        return ConstantFactory.NULL_INSTANCE;\n+    public static <T> Factory<T> nullFactory() {\n+        return ConstantFactory.<T>getInstance(null);\n     }\n \n     /**\n      * @param constantToReturn  the constant object to return each time in the factory\n      * @return the <code>constant</code> factory.\n      */\n-    public static Factory constantFactory(Object constantToReturn) {\n+    public static <T> Factory<T> constantFactory(T constantToReturn) {\n         return ConstantFactory.getInstance(constantToReturn);\n     }\n \n      * @throws IllegalArgumentException if the prototype is null\n      * @throws IllegalArgumentException if the prototype cannot be cloned\n      */\n-    public static Factory prototypeFactory(Object prototype) {\n-        return PrototypeFactory.getInstance(prototype);\n+    public static <T> Factory<T> prototypeFactory(T  prototype) {\n+        return PrototypeFactory.<T>getInstance(prototype);\n     }\n \n     /**\n      * @return the <code>reflection</code> factory\n      * @throws IllegalArgumentException if the classToInstantiate is null\n      */\n-    public static Factory instantiateFactory(Class classToInstantiate) {\n+    public static <T> Factory<T> instantiateFactory(Class<T> classToInstantiate) {\n         return InstantiateFactory.getInstance(classToInstantiate, null, null);\n     }\n \n      * @throws IllegalArgumentException if the paramTypes and args don't match\n      * @throws IllegalArgumentException if the constructor doesn't exist\n      */\n-    public static Factory instantiateFactory(Class classToInstantiate, Class[] paramTypes, Object[] args) {\n+    public static <T> Factory<T> instantiateFactory(Class<T> classToInstantiate, Class<?>[] paramTypes, Object[] args) {\n         return InstantiateFactory.getInstance(classToInstantiate, paramTypes, args);\n     }\n ", "timestamp": 1252994098, "metainfo": ""}