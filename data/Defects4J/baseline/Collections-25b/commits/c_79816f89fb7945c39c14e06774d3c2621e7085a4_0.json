{"sha": "79816f89fb7945c39c14e06774d3c2621e7085a4", "log": "Convert EmptyIterator classes in IteratorUtils to public in iterator package   ", "commit": "\n--- a/src/java/org/apache/commons/collections/IteratorUtils.java\n+++ b/src/java/org/apache/commons/collections/IteratorUtils.java\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Map;\n-import java.util.NoSuchElementException;\n \n import org.apache.commons.collections.iterators.ArrayIterator;\n import org.apache.commons.collections.iterators.ArrayListIterator;\n import org.apache.commons.collections.iterators.CollatingIterator;\n+import org.apache.commons.collections.iterators.EmptyIterator;\n+import org.apache.commons.collections.iterators.EmptyListIterator;\n+import org.apache.commons.collections.iterators.EmptyMapIterator;\n+import org.apache.commons.collections.iterators.EmptyOrderedMapIterator;\n import org.apache.commons.collections.iterators.EnumerationIterator;\n import org.apache.commons.collections.iterators.FilterIterator;\n import org.apache.commons.collections.iterators.FilterListIterator;\n /**\n  * Provides static utility methods and decorators for {@link Iterator} \n  * instances. The implementations are provided in the iterators subpackage.\n+ * <p>\n+ * WARNING: Due to human error certain binary incompatabilities were introduced\n+ * between Commons Collections 2.1 and 3.0. The class remained source and test\n+ * compatible, so if you can recompile all your classes and dependencies\n+ * everything is OK. Those methods which are binary incompatible are marked as\n+ * such, together with alternate solutions that are binary compatible\n+ * against versions 2.1.1 and 3.1.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.25 $ $Date: 2004/05/21 22:43:10 $\n+ * @version $Revision: 1.26 $ $Date: 2004/05/22 09:46:39 $\n  * \n  * @author Stephen Colebourne\n  * @author Phil Steitz\n      * An iterator over no elements.\n      * <p>\n      * WARNING: This constant is binary incompatible with Commons Collections 2.1.\n-     */    \n-    public static final ResettableIterator EMPTY_ITERATOR = new EmptyIterator();\n+     * Use <code>EmptyIterator.INSTANCE</code> for compatability with Commons Collections 2.1.1.\n+     */\n+    public static final ResettableIterator EMPTY_ITERATOR = EmptyIterator.RESETTABLE_INSTANCE;\n     /**\n      * A list iterator over no elements.\n      * <p>\n      * WARNING: This constant is binary incompatible with Commons Collections 2.1.\n-     */    \n-    public static final ResettableListIterator EMPTY_LIST_ITERATOR = new EmptyListIterator();\n+     * Use <code>EmptyListIterator.INSTANCE</code> for compatability with Commons Collections 2.1.1.\n+     */\n+    public static final ResettableListIterator EMPTY_LIST_ITERATOR = EmptyListIterator.RESETTABLE_INSTANCE;\n     /**\n      * An ordered iterator over no elements.\n      */    \n-    public static final OrderedIterator EMPTY_ORDERED_ITERATOR = new EmptyOrderedIterator();\n+    public static final OrderedIterator EMPTY_ORDERED_ITERATOR = EmptyListIterator.ORDERED_INSTANCE;\n     /**\n      * A map iterator over no elements.\n      */    \n-    public static final MapIterator EMPTY_MAP_ITERATOR = new EmptyMapIterator();\n+    public static final MapIterator EMPTY_MAP_ITERATOR = EmptyMapIterator.INSTANCE;\n     /**\n      * An ordered map iterator over no elements.\n      */    \n-    public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = new EmptyOrderedMapIterator();\n+    public static final OrderedMapIterator EMPTY_ORDERED_MAP_ITERATOR = EmptyOrderedMapIterator.INSTANCE;\n \n     /**\n      * IteratorUtils is not normally instantiated.\n      * nothing.\n      * <p>\n      * WARNING: This method is binary incompatible with Commons Collections 2.1.\n+     * Use <code>EmptyIterator.INSTANCE</code> for compatability with Commons Collections 2.1.1.\n      *\n      * @return  an iterator over nothing\n      */\n      * over nothing.\n      * <p>\n      * WARNING: This method is binary incompatible with Commons Collections 2.1.\n+     * Use <code>EmptyListIterator.INSTANCE</code> for compatability with Commons Collections 2.1.1.\n      *\n      * @return  a list iterator over nothing\n      */\n             return singletonIterator(obj);\n         }\n     }\n-    \n-    //-----------------------------------------------------------------------\n-    /**\n-     * EmptyIterator class\n-     */\n-    static class EmptyIterator implements ResettableIterator {\n-        \n-        EmptyIterator() {\n-            super();\n-        }\n-\n-        public boolean hasNext() {\n-            return false;\n-        }\n-\n-        public Object next() {\n-            throw new NoSuchElementException(\"Iterator contains no elements\");\n-        }\n-\n-        public void remove() {\n-            throw new IllegalStateException(\"Iterator contains no elements\");\n-        }\n-        \n-        public void reset() {\n-            // do nothing\n-        }\n-    }\n-    \n-    //-----------------------------------------------------------------------    \n-    /**\n-     * EmptyListIterator class\n-     */\n-    static class EmptyListIterator extends EmptyIterator implements ResettableListIterator {\n-        \n-        EmptyListIterator() {\n-            super();\n-        }\n-\n-        public boolean hasPrevious() {\n-            return false;\n-        }\n-\n-        public Object previous() {\n-            throw new NoSuchElementException(\"Iterator contains no elements\");\n-        }\n-\n-        public int nextIndex() {\n-            return 0;\n-        }\n-\n-        public int previousIndex() {\n-            return -1;\n-        }\n-\n-        public void add(Object o) {\n-            throw new UnsupportedOperationException(\"add() not supported for empty Iterator\");\n-        }\n-\n-        public void set(Object o) {\n-            throw new IllegalStateException(\"Iterator contains no elements\");\n-        }\n-    }\n-\n-    //-----------------------------------------------------------------------    \n-    /**\n-     * EmptyOrderedIterator class\n-     */\n-    static class EmptyOrderedIterator extends EmptyIterator implements OrderedIterator, ResettableIterator {\n-        \n-        EmptyOrderedIterator() {\n-            super();\n-        }\n-        \n-        public boolean hasPrevious() {\n-            return false;\n-        }\n-        \n-        public Object previous() {\n-            throw new NoSuchElementException(\"Iterator contains no elements\");\n-        }\n-    }\n-\n-    //-----------------------------------------------------------------------    \n-    /**\n-     * EmptyMapIterator class\n-     */\n-    static class EmptyMapIterator extends EmptyIterator implements MapIterator, ResettableIterator {\n-        \n-        EmptyMapIterator() {\n-            super();\n-        }\n-        \n-        public Object getKey() {\n-            throw new IllegalStateException(\"Iterator contains no elements\");\n-        }\n-\n-        public Object getValue() {\n-            throw new IllegalStateException(\"Iterator contains no elements\");\n-        }\n-\n-        public Object setValue(Object value) {\n-            throw new IllegalStateException(\"Iterator contains no elements\");\n-        }\n-    }\n-\n-    //-----------------------------------------------------------------------    \n-    /**\n-     * EmptyOrderedMapIterator class\n-     */\n-    static class EmptyOrderedMapIterator extends EmptyMapIterator implements OrderedMapIterator, ResettableIterator {\n-        \n-        EmptyOrderedMapIterator() {\n-            super();\n-        }\n-        \n-        public boolean hasPrevious() {\n-            return false;\n-        }\n-        \n-        public Object previous() {\n-            throw new NoSuchElementException(\"Iterator contains no elements\");\n-        }\n-    }\n \n }\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/AbstractEmptyIterator.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.NoSuchElementException;\n+\n+/** \n+ * Provides an implementation of an empty iterator.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/05/22 09:46:39 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractEmptyIterator {\n+ \n+    /**\n+     * Constructor.\n+     */\n+    protected AbstractEmptyIterator() {\n+        super();\n+    }\n+\n+    public boolean hasNext() {\n+        return false;\n+    }\n+\n+    public Object next() {\n+        throw new NoSuchElementException(\"Iterator contains no elements\");\n+    }\n+\n+    public boolean hasPrevious() {\n+        return false;\n+    }\n+\n+    public Object previous() {\n+        throw new NoSuchElementException(\"Iterator contains no elements\");\n+    }\n+\n+    public int nextIndex() {\n+        return 0;\n+    }\n+\n+    public int previousIndex() {\n+        return -1;\n+    }\n+\n+    public void add(Object obj) {\n+        throw new UnsupportedOperationException(\"add() not supported for empty Iterator\");\n+    }\n+\n+    public void set(Object obj) {\n+        throw new IllegalStateException(\"Iterator contains no elements\");\n+    }\n+\n+    public void remove() {\n+        throw new IllegalStateException(\"Iterator contains no elements\");\n+    }\n+\n+    public Object getKey() {\n+        throw new IllegalStateException(\"Iterator contains no elements\");\n+    }\n+\n+    public Object getValue() {\n+        throw new IllegalStateException(\"Iterator contains no elements\");\n+    }\n+\n+    public Object setValue(Object value) {\n+        throw new IllegalStateException(\"Iterator contains no elements\");\n+    }\n+\n+    public void reset() {\n+        // do nothing\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/EmptyIterator.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.Iterator;\n+\n+import org.apache.commons.collections.ResettableIterator;\n+\n+/** \n+ * Provides an implementation of an empty iterator.\n+ * <p>\n+ * This class provides an implementation of an empty iterator.\n+ * This class provides for binary compatability between Commons Collections\n+ * 2.1.1 and 3.1 due to issues with <code>IteratorUtils</code>.\n+ *\n+ * @since Commons Collections 2.1.1 and 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/05/22 09:46:39 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class EmptyIterator extends AbstractEmptyIterator implements ResettableIterator {\n+\n+    /**\n+     * Singleton instance of the iterator.\n+     * @since Commons Collections 3.1\n+     */\n+    public static final ResettableIterator RESETTABLE_INSTANCE = new EmptyIterator();\n+    /**\n+     * Singleton instance of the iterator.\n+     * @since Commons Collections 2.1.1 and 3.1\n+     */\n+    public static final Iterator INSTANCE = RESETTABLE_INSTANCE;\n+\n+    /**\n+     * Constructor.\n+     */\n+    protected EmptyIterator() {\n+        super();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/EmptyListIterator.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import java.util.ListIterator;\n+\n+import org.apache.commons.collections.OrderedIterator;\n+import org.apache.commons.collections.ResettableListIterator;\n+\n+/** \n+ * Provides an implementation of an empty list iterator.\n+ * <p>\n+ * This class provides an implementation of an empty list iterator.\n+ * This class provides for binary compatability between Commons Collections\n+ * 2.1.1 and 3.1 due to issues with <code>IteratorUtils</code>.\n+ *\n+ * @since Commons Collections 2.1.1 and 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/05/22 09:46:39 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class EmptyListIterator extends AbstractEmptyIterator implements ResettableListIterator, OrderedIterator {\n+\n+    /**\n+     * Singleton instance of the iterator.\n+     * @since Commons Collections 3.1\n+     */\n+    public static final ResettableListIterator RESETTABLE_INSTANCE = new EmptyListIterator();\n+    /**\n+     * Singleton instance of the iterator.\n+     * @since Commons Collections 2.1.1 and 3.1\n+     */\n+    public static final ListIterator INSTANCE = RESETTABLE_INSTANCE;\n+    /**\n+     * Singleton instance of the iterator.\n+     * @since Commons Collections 3.1\n+     */\n+    public static final OrderedIterator ORDERED_INSTANCE = (OrderedIterator) RESETTABLE_INSTANCE;\n+\n+    /**\n+     * Constructor.\n+     */\n+    protected EmptyListIterator() {\n+        super();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/EmptyMapIterator.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import org.apache.commons.collections.MapIterator;\n+import org.apache.commons.collections.ResettableIterator;\n+\n+/** \n+ * Provides an implementation of an empty map iterator.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/05/22 09:46:39 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class EmptyMapIterator extends AbstractEmptyIterator implements MapIterator, ResettableIterator {\n+\n+    /**\n+     * Singleton instance of the iterator.\n+     * @since Commons Collections 3.1\n+     */\n+    public static final MapIterator INSTANCE = new EmptyMapIterator();\n+\n+    /**\n+     * Constructor.\n+     */\n+    protected EmptyMapIterator() {\n+        super();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/iterators/EmptyOrderedMapIterator.java\n+/*\n+ *  Copyright 2004 The Apache Software Foundation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.commons.collections.iterators;\n+\n+import org.apache.commons.collections.OrderedMapIterator;\n+import org.apache.commons.collections.ResettableIterator;\n+\n+/** \n+ * Provides an implementation of an empty ordered map iterator.\n+ *\n+ * @since Commons Collections 3.1\n+ * @version $Revision: 1.1 $ $Date: 2004/05/22 09:46:39 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class EmptyOrderedMapIterator extends AbstractEmptyIterator implements OrderedMapIterator, ResettableIterator {\n+\n+    /**\n+     * Singleton instance of the iterator.\n+     * @since Commons Collections 3.1\n+     */\n+    public static final OrderedMapIterator INSTANCE = new EmptyOrderedMapIterator();\n+\n+    /**\n+     * Constructor.\n+     */\n+    protected EmptyOrderedMapIterator() {\n+        super();\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/TestIteratorUtils.java\n+++ b/src/test/org/apache/commons/collections/TestIteratorUtils.java\n \n import junit.framework.Test;\n \n+import org.apache.commons.collections.iterators.EmptyIterator;\n+import org.apache.commons.collections.iterators.EmptyListIterator;\n+import org.apache.commons.collections.iterators.EmptyMapIterator;\n+import org.apache.commons.collections.iterators.EmptyOrderedMapIterator;\n \n /**\n  * Tests for IteratorUtils.\n  * \n- * @version $Revision: 1.14 $ $Date: 2004/02/18 01:20:35 $\n+ * @version $Revision: 1.15 $ $Date: 2004/05/22 09:46:39 $\n  * \n  * @author Unknown\n  */\n      * Test empty iterator\n      */\n     public void testEmptyIterator() {\n-        assertTrue(IteratorUtils.EMPTY_ITERATOR instanceof Iterator);\n-        assertTrue(IteratorUtils.EMPTY_ITERATOR instanceof ResettableIterator);\n+        assertSame(EmptyIterator.INSTANCE, IteratorUtils.EMPTY_ITERATOR);\n+        assertSame(EmptyIterator.RESETTABLE_INSTANCE, IteratorUtils.EMPTY_ITERATOR);\n+        assertEquals(true, IteratorUtils.EMPTY_ITERATOR instanceof Iterator);\n+        assertEquals(true, IteratorUtils.EMPTY_ITERATOR instanceof ResettableIterator);\n+        assertEquals(false, IteratorUtils.EMPTY_ITERATOR instanceof OrderedIterator);\n+        assertEquals(false, IteratorUtils.EMPTY_ITERATOR instanceof ListIterator);\n+        assertEquals(false, IteratorUtils.EMPTY_ITERATOR instanceof MapIterator);\n         assertEquals(false, IteratorUtils.EMPTY_ITERATOR.hasNext());\n         IteratorUtils.EMPTY_ITERATOR.reset();\n         assertSame(IteratorUtils.EMPTY_ITERATOR, IteratorUtils.EMPTY_ITERATOR);\n      * Test empty list iterator\n      */\n     public void testEmptyListIterator() {\n-        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof Iterator);\n-        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ListIterator);\n-        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableIterator);\n-        assertTrue(IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableListIterator);\n+        assertSame(EmptyListIterator.INSTANCE, IteratorUtils.EMPTY_LIST_ITERATOR);\n+        assertSame(EmptyListIterator.RESETTABLE_INSTANCE, IteratorUtils.EMPTY_LIST_ITERATOR);\n+        assertEquals(true, IteratorUtils.EMPTY_LIST_ITERATOR instanceof Iterator);\n+        assertEquals(true, IteratorUtils.EMPTY_LIST_ITERATOR instanceof ListIterator);\n+        assertEquals(true, IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableIterator);\n+        assertEquals(true, IteratorUtils.EMPTY_LIST_ITERATOR instanceof ResettableListIterator);\n+        assertEquals(false, IteratorUtils.EMPTY_LIST_ITERATOR instanceof MapIterator);\n         assertEquals(false, IteratorUtils.EMPTY_LIST_ITERATOR.hasNext());\n         assertEquals(0, IteratorUtils.EMPTY_LIST_ITERATOR.nextIndex());\n         assertEquals(-1, IteratorUtils.EMPTY_LIST_ITERATOR.previousIndex());\n      * Test empty map iterator\n      */\n     public void testEmptyMapIterator() {\n-        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof Iterator);\n-        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof MapIterator);\n-        assertTrue(IteratorUtils.EMPTY_MAP_ITERATOR instanceof ResettableIterator);\n+        assertSame(EmptyMapIterator.INSTANCE, IteratorUtils.EMPTY_MAP_ITERATOR);\n+        assertEquals(true, IteratorUtils.EMPTY_MAP_ITERATOR instanceof Iterator);\n+        assertEquals(true, IteratorUtils.EMPTY_MAP_ITERATOR instanceof MapIterator);\n+        assertEquals(true, IteratorUtils.EMPTY_MAP_ITERATOR instanceof ResettableIterator);\n+        assertEquals(false, IteratorUtils.EMPTY_MAP_ITERATOR instanceof ListIterator);\n+        assertEquals(false, IteratorUtils.EMPTY_MAP_ITERATOR instanceof OrderedIterator);\n+        assertEquals(false, IteratorUtils.EMPTY_MAP_ITERATOR instanceof OrderedMapIterator);\n         assertEquals(false, IteratorUtils.EMPTY_MAP_ITERATOR.hasNext());\n         ((ResettableIterator) IteratorUtils.EMPTY_MAP_ITERATOR).reset();\n         assertSame(IteratorUtils.EMPTY_MAP_ITERATOR, IteratorUtils.EMPTY_MAP_ITERATOR);\n      * Test empty map iterator\n      */\n     public void testEmptyOrderedIterator() {\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof Iterator);\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof OrderedIterator);\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ResettableIterator);\n+        assertSame(EmptyListIterator.ORDERED_INSTANCE, IteratorUtils.EMPTY_ORDERED_ITERATOR);\n+        assertEquals(true, IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof Iterator);\n+        assertEquals(true, IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof OrderedIterator);\n+        assertEquals(true, IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof ResettableIterator);\n+        assertEquals(false, IteratorUtils.EMPTY_ORDERED_ITERATOR instanceof MapIterator);\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_ITERATOR.hasNext());\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_ITERATOR.hasPrevious());\n         ((ResettableIterator) IteratorUtils.EMPTY_ORDERED_ITERATOR).reset();\n      * Test empty map iterator\n      */\n     public void testEmptyOrderedMapIterator() {\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof Iterator);\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof MapIterator);\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof OrderedMapIterator);\n-        assertTrue(IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResettableIterator);\n+        assertSame(EmptyOrderedMapIterator.INSTANCE, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR);\n+        assertEquals(true, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof Iterator);\n+        assertEquals(true, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof MapIterator);\n+        assertEquals(true, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof OrderedMapIterator);\n+        assertEquals(true, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ResettableIterator);\n+        assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR instanceof ListIterator);\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasNext());\n         assertEquals(false, IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR.hasPrevious());\n         ((ResettableIterator) IteratorUtils.EMPTY_ORDERED_MAP_ITERATOR).reset();", "timestamp": 1085219199, "metainfo": ""}