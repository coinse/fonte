{"sha": "046411c42b540cbd203931b33e0af0f8353d6864", "log": "Test new buffer implementation that overwrites the oldest entry when full   ", "commit": "\n--- a/src/test/org/apache/commons/collections/TestAll.java\n+++ b/src/test/org/apache/commons/collections/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.41 2003/03/09 00:07:41 scolebourne Exp $\n- * $Revision: 1.41 $\n- * $Date: 2003/03/09 00:07:41 $\n- *\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestAll.java,v 1.42 2003/04/26 15:13:54 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * Copyright (c) 1999-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.collections;\n \n import junit.framework.Test;\n \n /**\n  * Entry point for all Collections tests.\n+ * \n+ * @version $Revision: 1.42 $ $Date: 2003/04/26 15:13:54 $\n+ * \n  * @author Rodney Waldhoff\n- * @version $Id: TestAll.java,v 1.41 2003/03/09 00:07:41 scolebourne Exp $\n+ * @author Stephen Colebourne\n  */\n public class TestAll extends TestCase {\n     public TestAll(String testName) {\n         suite.addTest(TestBinaryHeap.suite());\n         suite.addTest(TestBoundedFifoBuffer.suite());\n         suite.addTest(TestBoundedFifoBuffer2.suite());\n+        suite.addTest(TestCircularFifoBuffer.suite());\n         suite.addTest(TestCollectionUtils.suite());\n         suite.addTest(TestCommonsLinkedList.suite());\n         suite.addTest(TestBufferUtils.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/TestCircularFifoBuffer.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCircularFifoBuffer.java,v 1.1 2003/04/26 15:13:22 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+\n+/**\n+ * Test cases for CircularFifoBuffer.\n+ * \n+ * @version $Revision: 1.1 $ $Date: 2003/04/26 15:13:22 $\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestCircularFifoBuffer extends TestCollection {\n+\n+    public TestCircularFifoBuffer(String n) {\n+        super(n);\n+    }\n+\n+    public static Test suite() {\n+        return BulkTest.makeSuite(TestCircularFifoBuffer.class);\n+    }\n+\n+    /**\n+     * Returns an empty BoundedFifoBuffer that won't overflow.  \n+     *  \n+     * @return an empty BoundedFifoBuffer\n+     */\n+    public Collection makeCollection() {\n+        return new CircularFifoBuffer(100);\n+    }\n+\n+    /**\n+     * Returns an empty ArrayList.\n+     *\n+     * @return an empty ArrayList\n+     */\n+    public Collection makeConfirmedCollection() {\n+        return new ArrayList();\n+    }\n+\n+    /**\n+     * Returns a full ArrayList.\n+     *\n+     * @return a full ArrayList\n+     */\n+    public Collection makeConfirmedFullCollection() {\n+        Collection c = makeConfirmedCollection();\n+        c.addAll(java.util.Arrays.asList(getFullElements()));\n+        return c;\n+    }\n+\n+    /**\n+     *  Overridden because CircularFifoBuffer doesn't support null elements.\n+     *\n+     *  @return an array of random objects without a null element\n+     */\n+    public Object[] getFullElements() {\n+        return getFullNonNullElements();\n+    }\n+\n+    /**\n+     *  Overridden, because CircularFifoBuffer's iterators aren't fail-fast.\n+     */\n+    public void testCollectionIteratorFailFast() {\n+    }\n+\n+    /**\n+     *  Runs through the regular verifications, but also verifies that \n+     *  the buffer contains the same elements in the same sequence as the\n+     *  list.\n+     */\n+    public void verify() {\n+        super.verify();\n+        Iterator iterator1 = collection.iterator();\n+        Iterator iterator2 = confirmed.iterator();\n+        while (iterator2.hasNext()) {\n+            assertTrue(iterator1.hasNext());\n+            Object o1 = iterator1.next();\n+            Object o2 = iterator2.next();\n+            assertEquals(o1, o2);\n+        }\n+    }\n+\n+    /**\n+     * Tests that the removal operation actually removes the first element.\n+     */\n+    public void testCircularFifoBufferCircular() {\n+        List list = new ArrayList();\n+        list.add(\"A\");\n+        list.add(\"B\");\n+        list.add(\"C\");\n+        Buffer buf = new CircularFifoBuffer(list);\n+        \n+        assertEquals(true, buf.contains(\"A\"));\n+        assertEquals(true, buf.contains(\"B\"));\n+        assertEquals(true, buf.contains(\"C\"));\n+        \n+        buf.add(\"D\");\n+        \n+        assertEquals(false, buf.contains(\"A\"));\n+        assertEquals(true, buf.contains(\"B\"));\n+        assertEquals(true, buf.contains(\"C\"));\n+        assertEquals(true, buf.contains(\"D\"));\n+        \n+        assertEquals(\"B\", buf.get());\n+        assertEquals(\"B\", buf.remove());\n+        assertEquals(\"C\", buf.remove());\n+        assertEquals(\"D\", buf.remove());\n+    }\n+\n+    /**\n+     * Tests that the removal operation actually removes the first element.\n+     */\n+    public void testCircularFifoBufferRemove() {\n+        resetFull();\n+        int size = confirmed.size();\n+        for (int i = 0; i < size; i++) {\n+            Object o1 = ((CircularFifoBuffer) collection).remove();\n+            Object o2 = ((ArrayList) confirmed).remove(0);\n+            assertEquals(\"Removed objects should be equal\", o1, o2);\n+            verify();\n+        }\n+\n+        try {\n+            ((CircularFifoBuffer) collection).remove();\n+            fail(\"Empty buffer should raise Underflow.\");\n+        } catch (BufferUnderflowException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     * Tests that the constructor correctly throws an exception.\n+     */\n+    public void testConstructorException1() {\n+        try {\n+            new CircularFifoBuffer(0);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    /**\n+     * Tests that the constructor correctly throws an exception.\n+     */\n+    public void testConstructorException2() {\n+        try {\n+            new CircularFifoBuffer(-20);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    /**\n+     * Tests that the constructor correctly throws an exception.\n+     */\n+    public void testConstructorException3() {\n+        try {\n+            new CircularFifoBuffer(null);\n+        } catch (NullPointerException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+}", "timestamp": 1051370034, "metainfo": ""}