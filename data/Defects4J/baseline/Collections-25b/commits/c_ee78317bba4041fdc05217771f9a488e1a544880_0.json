{"sha": "ee78317bba4041fdc05217771f9a488e1a544880", "log": "add IntCollections.singleton* and tests   ", "commit": "\n--- a/src/java/org/apache/commons/collections/primitives/IntCollections.java\n+++ b/src/java/org/apache/commons/collections/primitives/IntCollections.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntCollections.java,v 1.1 2003/05/20 17:05:28 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/IntCollections.java,v 1.2 2003/07/08 18:04:49 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * The methods of this class all throw a NullPointerException is the \n  * provided collections are null.\n  * \n- * @version $Revision: 1.1 $ $Date: 2003/05/20 17:05:28 $\n+ * @version $Revision: 1.2 $ $Date: 2003/07/08 18:04:49 $\n  * \n  * @author Rodney Waldhoff \n  */\n-public class IntCollections {\n+public final class IntCollections {\n+\n+    /**\n+     * Returns an unmodifiable IntList containing only the specified element.\n+     * @param value the single value\n+     * @return an unmodifiable IntList containing only the specified element.\n+     */    \n+    public static IntList singletonIntList(int value) {\n+        // TODO: a specialized implementation of IntList may be more performant\n+        IntList list = new ArrayIntList(1);\n+        list.add(value);\n+        return UnmodifiableIntList.wrap(list);\n+    }\n+\n+    /**\n+     * Returns an unmodifiable IntIterator containing only the specified element.\n+     * @param value the single value\n+     * @return an unmodifiable IntIterator containing only the specified element.\n+     */    \n+    public static IntIterator singletonIntIterator(int value) {\n+        return singletonIntList(value).iterator();\n+    }\n+\n+    /**\n+     * Returns an unmodifiable IntListIterator containing only the specified element.\n+     * @param value the single value\n+     * @return an unmodifiable IntListIterator containing only the specified element.\n+     */    \n+    public static IntListIterator singletonIntListIterator(int value) {\n+        return singletonIntList(value).listIterator();\n+    }\n \n     /**\n      * Returns an unmodifiable version of the given non-null IntList.\n      * @throws NullPointerException if the given IntList is null\n      * @see org.apache.commons.collections.primitives.decorators.UnmodifiableIntList#wrap\n      */    \n-    public static final IntList unmodifiableIntList(IntList list) throws NullPointerException {\n+    public static IntList unmodifiableIntList(IntList list) throws NullPointerException {\n         if(null == list) {\n             throw new NullPointerException();\n         }\n      * @throws NullPointerException if the given IntIterator is null\n      * @see org.apache.commons.collections.primitives.decorators.UnmodifiableIntIterator#wrap\n      */    \n-    public static final IntIterator unmodifiableIntIterator(IntIterator iter) {\n+    public static IntIterator unmodifiableIntIterator(IntIterator iter) {\n         if(null == iter) {\n             throw new NullPointerException();\n         }\n      * @throws NullPointerException if the given IntListIterator is null\n      * @see org.apache.commons.collections.primitives.decorators.UnmodifiableIntListIterator#wrap\n      */    \n-    public static final IntListIterator unmodifiableIntListIterator(IntListIterator iter) {\n+    public static IntListIterator unmodifiableIntListIterator(IntListIterator iter) {\n         if(null == iter) {\n             throw new NullPointerException();\n         }\n      * @return an unmodifiable, empty IntList.\n      * @see #EMPTY_INT_LIST\n      */    \n-    public static final IntList getEmptyIntList() {\n+    public static IntList getEmptyIntList() {\n         return EMPTY_INT_LIST;\n     }\n     \n      * @return an unmodifiable, empty IntIterator.\n      * @see #EMPTY_INT_ITERATOR\n      */    \n-    public static final IntIterator getEmptyIntIterator() {\n+    public static IntIterator getEmptyIntIterator() {\n         return EMPTY_INT_ITERATOR;\n     }\n     \n      * @return an unmodifiable, empty IntListIterator.\n      * @see #EMPTY_INT_LIST_ITERATOR\n      */    \n-    public static final IntListIterator getEmptyIntListIterator() {\n+    public static IntListIterator getEmptyIntListIterator() {\n         return EMPTY_INT_LIST_ITERATOR;\n     }    \n \n--- a/src/test/org/apache/commons/collections/primitives/TestIntCollections.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntCollections.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntCollections.java,v 1.1 2003/05/20 17:05:28 rwaldhoff Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntCollections.java,v 1.2 2003/07/08 18:04:49 rwaldhoff Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n /**\n- * @version $Revision: 1.1 $ $Date: 2003/05/20 17:05:28 $\n+ * @version $Revision: 1.2 $ $Date: 2003/07/08 18:04:49 $\n  * @author Rodney Waldhoff\n  * @deprecated as the tested classes are deprecated also\n  */\n     }\n \n     //---------------------------------------------------------------- Tests\n+\n+    public void testSingletonIntListIterator() {\n+        IntListIterator iter = IntCollections.singletonIntListIterator(17);\n+        assertTrue(!iter.hasPrevious());        \n+        assertTrue(iter.hasNext());        \n+        assertEquals(17,iter.next());        \n+        assertTrue(iter.hasPrevious());        \n+        assertTrue(!iter.hasNext());        \n+        assertEquals(17,iter.previous());        \n+        try {\n+            iter.set(18);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testSingletonIntIterator() {\n+        IntIterator iter = IntCollections.singletonIntIterator(17);\n+        assertTrue(iter.hasNext());        \n+        assertEquals(17,iter.next());        \n+        assertTrue(!iter.hasNext());        \n+        try {\n+            iter.remove();\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testSingletonIntList() {\n+        IntList list = IntCollections.singletonIntList(17);\n+        assertEquals(1,list.size());\n+        assertEquals(17,list.get(0));        \n+        try {\n+            list.add(18);\n+            fail(\"Expected UnsupportedOperationException\");\n+        } catch(UnsupportedOperationException e) {\n+            // expected\n+        }\n+    }\n \n     public void testUnmodifiableIntListNull() {\n         try {", "timestamp": 1057687489, "metainfo": ""}