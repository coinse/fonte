{"sha": "df02176925218c2f0311011ac9cdcc8637d75fda", "log": "Rename SequencedSet to OrderedSet   ", "commit": "\n--- a/src/java/org/apache/commons/collections/SequencedHashMap.java\n+++ b/src/java/org/apache/commons/collections/SequencedHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.19 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.20 2003/09/09 22:28:35 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Set;\n \n /**\n- *  A map of objects whose mapping entries are sequenced based on the order in\n- *  which they were added.  This data structure has fast <i>O(1)</i> search\n- *  time, deletion time, and insertion time.\n- *\n- *  <p>Although this map is sequenced, it cannot implement {@link\n- *  java.util.List} because of incompatible interface definitions.  The remove\n- *  methods in List and Map have different return values (see: {@link\n- *  java.util.List#remove(Object)} and {@link java.util.Map#remove(Object)}).\n- *\n- *  <p>This class is not thread safe.  When a thread safe implementation is\n- *  required, use {@link Collections#synchronizedMap(Map)} as it is documented,\n- *  or use explicit synchronization controls.\n- *\n+ * A map of objects whose mapping entries are sequenced based on the order in\n+ * which they were added.  This data structure has fast <i>O(1)</i> search\n+ * time, deletion time, and insertion time.\n+ * <p>\n+ * Although this map is sequenced, it cannot implement\n+ * {@link java.util.List} because of incompatible interface definitions.\n+ * The remove methods in List and Map have different return values \n+ * (see: {@link java.util.List#remove(Object)} and {@link java.util.Map#remove(Object)}).\n+ * <p>\n+ * This class is not thread safe.  When a thread safe implementation is\n+ * required, use {@link Collections#synchronizedMap(Map)} as it is documented,\n+ * or use explicit synchronization controls.\n+ *\n+ * @see org.apache.commons.collections.decorators.OrderedSet\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.19 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.20 $ $Date: 2003/09/09 22:28:35 $\n  * \n- * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</A>\n- * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n- * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n+ * @author Michael A. Smith\n+ * @author Daniel Rall\n+ * @author Henning P. Schmiedehausen\n  * @author Stephen Colebourne\n  */\n public class SequencedHashMap implements Map, Cloneable, Externalizable {\n \n     /**\n-     *  {@link java.util.Map.Entry} that doubles as a node in the linked list\n-     *  of sequenced mappings.  \n-     **/\n+     * {@link java.util.Map.Entry} that doubles as a node in the linked list\n+     * of sequenced mappings.  \n+     */\n     private static class Entry implements Map.Entry {\n         // Note: This class cannot easily be made clonable.  While the actual\n         // implementation of a clone would be simple, defining the semantics is\n      *  Construct an empty sentinel used to hold the head (sentinel.next) and the\n      *  tail (sentinel.prev) of the list.  The sentinel has a <code>null</code>\n      *  key and value.\n-     **/\n+     */\n     private static final Entry createSentinel() {\n         Entry s = new Entry(null, null);\n         s.prev = s;\n \n     /**\n      *  Sentinel used to hold the head and tail of the list of entries.\n-     **/\n+     */\n     private Entry sentinel;\n \n     /**\n      *  Map of keys to entries\n-     **/\n+     */\n     private HashMap entries;\n \n     /**\n      *  excluding modifications made through a collection view's iterator\n      *  (e.g. entrySet().iterator().remove()).  This is used to create a\n      *  fail-fast behavior with the iterators.\n-     **/\n+     */\n     private transient long modCount = 0;\n \n     /**\n      *  Construct a new sequenced hash map with default initial size and load\n      *  factor.\n-     **/\n+     */\n     public SequencedHashMap() {\n         sentinel = createSentinel();\n         entries = new HashMap();\n      *  @param initialSize the initial size for the hash table \n      *\n      *  @see HashMap#HashMap(int)\n-     **/\n+     */\n     public SequencedHashMap(int initialSize) {\n         sentinel = createSentinel();\n         entries = new HashMap(initialSize);\n      *  @param loadFactor the load factor for the hash table.\n      *\n      *  @see HashMap#HashMap(int,float)\n-     **/\n+     */\n     public SequencedHashMap(int initialSize, float loadFactor) {\n         sentinel = createSentinel();\n         entries = new HashMap(initialSize, loadFactor);\n      *  Construct a new sequenced hash map and add all the elements in the\n      *  specified map.  The order in which the mappings in the specified map are\n      *  added is defined by {@link #putAll(Map)}.  \n-     **/\n+     */\n     public SequencedHashMap(Map m) {\n         this();\n         putAll(m);\n     /**\n      *  Removes an internal entry from the linked list.  This does not remove\n      *  it from the underlying map.\n-     **/\n+     */\n     private void removeEntry(Entry entry) {\n         entry.next.prev = entry.prev;\n         entry.prev.next = entry.next;\n     /**\n      *  Inserts a new internal entry to the tail of the linked list.  This does\n      *  not add the entry to the underlying map.\n-     **/\n+     */\n     private void insertEntry(Entry entry) {\n         entry.next = sentinel;\n         entry.prev = sentinel.prev;\n      *\n      *  @return The first entry in the sequence, or <code>null</code> if the\n      *  map is empty.\n-     **/\n+     */\n     public Map.Entry getFirst() {\n         // sentinel.next points to the \"first\" element of the sequence -- the head\n         // of the list, which is exactly the entry we need to return.  We must test\n      *\n      *  @return The first key in the sequence, or <code>null</code> if the\n      *  map is empty.\n-     **/\n+     */\n     public Object getFirstKey() {\n         // sentinel.next points to the \"first\" element of the sequence -- the head\n         // of the list -- and the requisite key is returned from it.  An empty list\n      *\n      *  @return The first value in the sequence, or <code>null</code> if the\n      *  map is empty.\n-     **/\n+     */\n     public Object getFirstValue() {\n         // sentinel.next points to the \"first\" element of the sequence -- the head\n         // of the list -- and the requisite value is returned from it.  An empty\n      *\n      *  @return The last entry in the sequence, or <code>null</code> if the map\n      *  is empty.\n-     **/\n+     */\n     public Map.Entry getLast() {\n         // sentinel.prev points to the \"last\" element of the sequence -- the tail\n         // of the list, which is exactly the entry we need to return.  We must test\n      *\n      *  @return The last key in the sequence, or <code>null</code> if the map is\n      *  empty.\n-     **/\n+     */\n     public Object getLastKey() {\n         // sentinel.prev points to the \"last\" element of the sequence -- the tail\n         // of the list -- and the requisite key is returned from it.  An empty list\n      *\n      *  @return The last value in the sequence, or <code>null</code> if the map\n      *  is empty.\n-     **/\n+     */\n     public Object getLastValue() {\n         // sentinel.prev points to the \"last\" element of the sequence -- the tail\n         // of the list -- and the requisite value is returned from it.  An empty\n     /**\n      *  Fully remove an entry from the map, returning the old entry or null if\n      *  there was no such entry with the specified key.\n-     **/\n+     */\n     private Entry removeImpl(Object key) {\n         Entry e = (Entry) entries.remove(key);\n         if (e == null)\n      *  @param t the mappings that should be added to this map.\n      *\n      *  @throws NullPointerException if <code>t</code> is <code>null</code>\n-     **/\n+     */\n     public void putAll(Map t) {\n         Iterator iter = t.entrySet().iterator();\n         while (iter.hasNext()) {\n      *  method is suitable for debugging purposes only.  If a specific format is\n      *  required, use {@link #entrySet()}.{@link Set#iterator() iterator()} and\n      *  iterate over the entries in the map formatting them as appropriate.\n-     **/\n+     */\n     public String toString() {\n         StringBuffer buf = new StringBuffer();\n         buf.append('[');\n          *  on the same element.  Essientially, if this value is negative (i.e. the\n          *  bit specified by {@link #REMOVED_MASK} is set), the current position\n          *  has been removed.  If positive, remove can still be called.\n-         **/\n+         */\n         private int returnType;\n \n         /**\n          *  Holds the \"current\" position in the iterator.  When pos.next is the\n          *  sentinel, we've reached the end of the list.\n-         **/\n+         */\n         private Entry pos = sentinel;\n \n         /**\n          *  Holds the expected modification count.  If the actual modification\n          *  count of the map differs from this value, then a concurrent\n          *  modification has occurred.\n-         **/\n+         */\n         private transient long expectedModCount = modCount;\n \n         /**\n          *  they were added.  The {@link #next()} method returns the type specified\n          *  by <code>returnType</code> which must be either {@link #KEY}, {@link\n          *  #VALUE}, or {@link #ENTRY}.\n-         **/\n+         */\n         public OrderedIterator(int returnType) {\n             //// Since this is a private inner class, nothing else should have\n             //// access to the constructor.  Since we know the rest of the outer\n          *\n          *  @return <code>true</code> if there are more elements left to be\n          *  returned from the iterator; <code>false</code> otherwise.\n-         **/\n+         */\n         public boolean hasNext() {\n             return pos.next != sentinel;\n         }\n          *\n          *  @throws ConcurrentModificationException if a modification occurs in\n          *  the underlying map.\n-         **/\n+         */\n         public Object next() {\n             if (modCount != expectedModCount) {\n                 throw new ConcurrentModificationException();\n          *\n          *  @throws ConcurrentModificationException if a modification occurs in\n          *  the underlying map.\n-         **/\n+         */\n         public void remove() {\n             if ((returnType & REMOVED_MASK) != 0) {\n                 throw new IllegalStateException(\"remove() must follow next()\");\n      *\n      *  @throws ArrayIndexOutOfBoundsException if the specified index is\n      *  <code>&lt; 0</code> or <code>&gt;</code> the size of the map.\n-     **/\n+     */\n     private Map.Entry getEntry(int index) {\n         Entry pos = sentinel;\n \n--- a/src/java/org/apache/commons/collections/SetUtils.java\n+++ b/src/java/org/apache/commons/collections/SetUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.15 2003/08/31 17:26:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SetUtils.java,v 1.16 2003/09/09 22:28:36 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.SortedSet;\n import java.util.TreeSet;\n \n+import org.apache.commons.collections.decorators.OrderedSet;\n import org.apache.commons.collections.decorators.PredicatedSet;\n import org.apache.commons.collections.decorators.PredicatedSortedSet;\n import org.apache.commons.collections.decorators.TransformedSet;\n  * and {@link SortedSet} instances.\n  *\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.15 $ $Date: 2003/08/31 17:26:44 $\n+ * @version $Revision: 1.16 $ $Date: 2003/09/09 22:28:36 $\n  * \n  * @author Paul Jack\n  * @author Stephen Colebourne\n \n     /**\n      * An empty unmodifiable set.\n-     * This uses the {@link Collections Collections} implementation \n+     * This uses the {@link Collections} implementation \n      * and is provided for completeness.\n      */\n     public static final Set EMPTY_SET = Collections.EMPTY_SET;\n      * Set. It is important not to use the original set after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n      *\n-     * @param set  the set to predicate, must not be null\n+     * @param set  the set to transform, must not be null\n      * @param transformer  the transformer for the set, must not be null\n      * @return a transformed set backed by the given set\n      * @throws IllegalArgumentException  if the Set or Transformer is null\n      */\n     public static Set transformedSet(Set set, Transformer transformer) {\n         return TransformedSet.decorate(set, transformer);\n+    }\n+    \n+    \n+    /**\n+     * Returns a set that maintains the order of elements that are added\n+     * backed by the given set.\n+     * <p>\n+     * If an element is added twice, the order is determined by the first add.\n+     * The order is observed through the iterator or toArray.\n+     *\n+     * @param set  the set to order, must not be null\n+     * @return an ordered set backed by the given set\n+     * @throws IllegalArgumentException  if the Set is null\n+     */\n+    public static Set orderedSet(Set set) {\n+        return OrderedSet.decorate(set);\n     }\n     \n     //-----------------------------------------------------------------------\n      * Set. It is important not to use the original set after invoking this \n      * method, as it is a backdoor for adding untransformed objects.\n      *\n-     * @param set  the set to predicate, must not be null\n+     * @param set  the set to transform, must not be null\n      * @param transformer  the transformer for the set, must not be null\n      * @return a transformed set backed by the given set\n      * @throws IllegalArgumentException  if the Set or Transformer is null\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/decorators/OrderedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/decorators/Attic/OrderedSet.java,v 1.1 2003/09/09 22:28:35 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Decorates a <code>Set</code> to ensure that the order of addition\n+ * is retained and used by the iterator.\n+ * <p>\n+ * If an object is added to the Set for a second time, it will remain in the\n+ * original position in the iteration.\n+ * <p>\n+ * The order can be observed via the iterator or toArray methods.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/09 22:28:35 $\n+ * \n+ * @author Stephen Colebourne\n+ * @author Henning P. Schmiedehausen\n+ */\n+public class OrderedSet extends AbstractSetDecorator implements Set {\n+\n+    /** Internal list to hold the sequence of objects */\n+    protected final List setOrder = new ArrayList();\n+\n+    /**\n+     * Factory method to create an ordered set.\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    public static Set decorate(Set set) {\n+        return new OrderedSet(set);\n+    }\n+\n+    /**\n+     * Constructor that wraps (not copies).\n+     * \n+     * @param set  the set to decorate, must not be null\n+     * @throws IllegalArgumentException if set is null\n+     */\n+    protected OrderedSet(Set set) {\n+        super(set);\n+        setOrder.addAll(set);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void clear() {\n+        collection.clear();\n+        setOrder.clear();\n+    }\n+\n+    public Iterator iterator() {\n+        return new OrderedSetIterator(setOrder.iterator(), collection);\n+    }\n+\n+    public boolean add(Object object) {\n+        if (collection.contains(object)) {\n+            // re-adding doesn't change order\n+            return collection.add(object);\n+        } else {\n+            // first add, so add to both set and list\n+            boolean result = collection.add(object);\n+            setOrder.add(object);\n+            return result;\n+        }\n+    }\n+\n+    public boolean addAll(Collection coll) {\n+        boolean result = false;\n+        for (Iterator it = coll.iterator(); it.hasNext();) {\n+            Object object = it.next();\n+            result = result | add(object);\n+        }\n+        return result;\n+    }\n+\n+    public boolean remove(Object object) {\n+        boolean result = collection.remove(object);\n+        setOrder.remove(object);\n+        return result;\n+    }\n+\n+    public boolean removeAll(Collection coll) {\n+        boolean result = false;\n+        for (Iterator it = coll.iterator(); it.hasNext();) {\n+            Object object = it.next();\n+            result = result | remove(object);\n+        }\n+        return result;\n+    }\n+\n+    public boolean retainAll(Collection coll) {\n+        boolean result = collection.retainAll(coll);\n+        if (result == false) {\n+            return false;\n+        } else if (collection.size() == 0) {\n+            setOrder.clear();\n+        } else {\n+            for (Iterator it = setOrder.iterator(); it.hasNext();) {\n+                Object object = (Object) it.next();\n+                if (collection.contains(object) == false) {\n+                    it.remove();\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    public Object[] toArray() {\n+        return setOrder.toArray();\n+    }\n+\n+    public Object[] toArray(Object a[]) {\n+        return setOrder.toArray(a);\n+    }\n+\n+    /**\n+     * Internal iterator handle remove.\n+     */\n+    protected static class OrderedSetIterator extends AbstractIteratorDecorator {\n+        \n+        /** Object we iterate on */\n+        protected final Collection set;\n+        /** Last object retrieved */\n+        protected Object last;\n+\n+        private OrderedSetIterator(Iterator iterator, Collection set) {\n+            super(iterator);\n+            this.set = set;\n+        }\n+\n+        public Object next() {\n+            last = iterator.next();\n+            return last;\n+        }\n+\n+        public void remove() {\n+            set.remove(last);\n+            iterator.remove();\n+            last = null;\n+        }\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/decorators/TestAll.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestAll.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.8 2003/09/09 03:03:57 psteitz Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestAll.java,v 1.9 2003/09/09 22:28:36 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Entry point for all collections decorators tests.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.8 $ $Date: 2003/09/09 03:03:57 $\n+ * @version $Revision: 1.9 $ $Date: 2003/09/09 22:28:36 $\n  * \n  * @author Stephen Colebourne\n  */\n         suite.addTest(TestFixedSizeMap.suite());\n         suite.addTest(TestFixedSizeSortedMap.suite());\n         \n-        suite.addTest(TestSequencedSet.suite());\n+        suite.addTest(TestOrderedSet.suite());\n         \n         suite.addTest(TestTransformedBag.suite());\n         suite.addTest(TestTransformedBuffer.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/decorators/TestOrderedSet.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestOrderedSet.java,v 1.1 2003/09/09 22:28:36 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections.decorators;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.collections.TestSet;\n+\n+/**\n+ * Extension of {@link TestSet} for exercising the {@link OrderedSet}\n+ * implementation.\n+ *\n+ * @since Commons Collections 3.0\n+ * @version $Revision: 1.1 $ $Date: 2003/09/09 22:28:36 $\n+ * \n+ * @author Henning P. Schmiedehausen\n+ * @author Stephen Colebourne\n+ */\n+public class TestOrderedSet extends TestSet {\n+\n+    public TestOrderedSet(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(TestOrderedSet.class);\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = { TestOrderedSet.class.getName()};\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+    public Set makeEmptySet() {\n+        return OrderedSet.decorate(new HashSet());\n+    }\n+\n+    public Set setupSet() {\n+        Set set = makeEmptySet();\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add(Integer.toString(i));\n+        }\n+        return set;\n+    }\n+\n+    public void testOrdering() {\n+        Set set = setupSet();\n+        Iterator it = set.iterator();\n+\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i += 2) {\n+            assertTrue(\"Must be able to remove int\", set.remove(Integer.toString(i)));\n+        }\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong after remove \", Integer.toString(i), it.next());\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            set.add(Integer.toString(i));\n+        }\n+\n+        assertEquals(\"Size of set is wrong!\", 10, set.size());\n+\n+        it = set.iterator();\n+        for (int i = 1; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+        for (int i = 0; i < 10; i += 2) {\n+            assertEquals(\"Sequence is wrong\", Integer.toString(i), it.next());\n+        }\n+    }\n+    \n+}", "timestamp": 1063146516, "metainfo": ""}