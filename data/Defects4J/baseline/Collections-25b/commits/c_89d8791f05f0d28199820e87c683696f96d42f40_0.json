{"sha": "89d8791f05f0d28199820e87c683696f96d42f40", "log": "[COLLECTIONS-441] Cleanup MultiKeyMap, remove duplicated field map.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/map/MultiKeyMap.java\n+++ b/src/main/java/org/apache/commons/collections/map/MultiKeyMap.java\n  */\n package org.apache.commons.collections.map;\n \n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.Map;\n \n     /** Serialisation version */\n     private static final long serialVersionUID = -1788199231038721040L;\n \n-    /** The decorated map */\n-    //keep this member around for serialization BC with older Collections releases assuming we want to do that\n-    protected AbstractHashedMap<MultiKey<? extends K>, V> map;\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Decorates the specified map to add the MultiKeyMap API and fast query.\n      *\n      * @return a shallow clone\n      */\n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public MultiKeyMap<K, V> clone() {\n-        return new MultiKeyMap<K, V>(decorated().clone());\n+        try {\n+            return (MultiKeyMap<K, V>) super.clone();\n+        } catch (CloneNotSupportedException e) {\n+            throw new InternalError();\n+        }\n     }\n \n     /**\n      */\n     @Override\n     protected AbstractHashedMap<MultiKey<? extends K>, V> decorated() {\n-        return map;\n-    }\n+        return (AbstractHashedMap<MultiKey<? extends K>, V>) super.decorated();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the map out using a custom routine.\n+     * \n+     * @param out  the output stream\n+     * @throws IOException\n+     */\n+    private void writeObject(final ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(map);\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     * \n+     * @param in  the input stream\n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        map = (Map<MultiKey<? extends K>, V>) in.readObject();\n+    }\n+    \n }\n--- a/src/test/java/org/apache/commons/collections/map/MultiKeyMapTest.java\n+++ b/src/test/java/org/apache/commons/collections/map/MultiKeyMapTest.java\n     //-----------------------------------------------------------------------\n     @Override\n     public String getCompatibilityVersion() {\n-        return \"3.1\";\n+        return \"4.0\";\n     }\n \n //    public void testCreate() throws Exception {\n //        resetEmpty();\n //        writeExternalFormToDisk(\n //            (java.io.Serializable) map,\n-//            \"D:/dev/collections/data/test/MultiKeyMap.emptyCollection.version3.1.obj\");\n+//            \"src/test/resources/data/test/MultiKeyMap.emptyCollection.version4.0.obj\");\n //        resetFull();\n //        writeExternalFormToDisk(\n //            (java.io.Serializable) map,\n-//            \"D:/dev/collections/data/test/MultiKeyMap.fullCollection.version3.1.obj\");\n+//            \"src/test/resources/data/test/MultiKeyMap.fullCollection.version4.0.obj\");\n //    }\n \n     /**", "timestamp": 1361729847, "metainfo": ""}