{"sha": "95e20438a0c5f2469f5abdf3274c0bfabcadb31b", "log": "Generics  ", "commit": "\n--- a/src/java/org/apache/commons/collections/list/TransformedList.java\n+++ b/src/java/org/apache/commons/collections/list/TransformedList.java\n      * @throws IllegalArgumentException if list or transformer is null\n      * @since Commons Collections 3.3\n      */\n-    // TODO: Generics\n-    public static List decorateTransform(List list, Transformer transformer) {\n-        TransformedList decorated = new TransformedList(list, transformer);\n+    public static <E> List<E> decorateTransform(List<E> list, Transformer<? super E, ? extends E> transformer) {\n+        TransformedList<E> decorated = new TransformedList<E>(list, transformer);\n         if (transformer != null && list != null && list.size() > 0) {\n-            Object[] values = list.toArray();\n+            @SuppressWarnings(\"unchecked\") // list is of type E\n+            E[] values = (E[]) list.toArray();\n             list.clear();\n             for(int i=0; i<values.length; i++) {\n                 decorated.decorated().add(transformer.transform(values[i]));", "timestamp": 1287458175, "metainfo": ""}