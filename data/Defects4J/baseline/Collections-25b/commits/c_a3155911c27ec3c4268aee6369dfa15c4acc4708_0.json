{"sha": "a3155911c27ec3c4268aee6369dfa15c4acc4708", "log": "Rename TestObject to AbstractTestObject Rename TestCollection to AbstractTestCollection Rename TestList to AbstractTestList Javadoc and tidy   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/AbstractTestCollection.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestCollection.java,v 1.1 2003/10/02 22:14:29 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.lang.reflect.Array;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Abstract test class for the  {@link java.util.Collection} methods and contracts.\n+ * <p>\n+ * You should create a concrete subclass of this class to test any custom\n+ * {@link Collection} implementation.  At minimum, you'll have to \n+ * implement the {@link #makeCollection()} method.  You might want to \n+ * override some of the additional protected methods as well:\n+ * <p>\n+ * <b>Element Population Methods</b>\n+ * <p>\n+ * Override these if your collection restricts what kind of elements are\n+ * allowed (for instance, if <code>null</code> is not permitted):\n+ * <ul>\n+ * <li>{@link #getFullElements()}\n+ * <li>{@link #getOtherElements()}\n+ * </ul>\n+ * <p>\n+ * <b>Supported Operation Methods</b>\n+ * <p>\n+ * Override these if your collection doesn't support certain operations:\n+ * <ul>\n+ * <li>{@link #isAddSupported()}\n+ * <li>{@link #isRemoveSupported()}\n+ * <li>{@link #areEqualElementsDistinguishable()}\n+ * <li>{@link #isNullSupported()}\n+ * <li>{@link #isFailFastSupported()}\n+ * </ul>\n+ * <p>\n+ * <b>Fixture Methods</b>\n+ * <p>\n+ * Fixtures are used to verify that the the operation results in correct state\n+ * for the collection.  Basically, the operation is performed against your\n+ * collection implementation, and an identical operation is performed against a\n+ * <i>confirmed</i> collection implementation.  A confirmed collection\n+ * implementation is something like <code>java.util.ArrayList</code>, which is\n+ * known to conform exactly to its collection interface's contract.  After the\n+ * operation takes place on both your collection implementation and the\n+ * confirmed collection implementation, the two collections are compared to see\n+ * if their state is identical.  The comparison is usually much more involved\n+ * than a simple <code>equals</code> test.  This verification is used to ensure\n+ * proper modifications are made along with ensuring that the collection does\n+ * not change when read-only modifications are made.\n+ * <p>\n+ * The {@link #collection} field holds an instance of your collection\n+ * implementation; the {@link #confirmed} field holds an instance of the\n+ * confirmed collection implementation.  The {@link #resetEmpty()} and \n+ * {@link #resetFull()} methods set these fields to empty or full collections,\n+ * so that tests can proceed from a known state.\n+ * <p>\n+ * After a modification operation to both {@link #collection} and\n+ * {@link #confirmed}, the {@link #verify()} method is invoked to compare\n+ * the results.  You may want to override {@link #verify()} to perform\n+ * additional verifications.  For instance, when testing the collection\n+ * views of a map, {@link TestMap} would override {@link #verify()} to make\n+ * sure the map is changed after the collection view is changed.\n+ * <p>\n+ * If you're extending this class directly, you will have to provide \n+ * implementations for the following:\n+ * <ul>\n+ * <li>{@link #makeConfirmedCollection()}\n+ * <li>{@link #makeConfirmedFullCollection()}\n+ * </ul>\n+ * <p>\n+ * Those methods should provide a confirmed collection implementation \n+ * that's compatible with your collection implementation.\n+ * <p>\n+ * If you're extending {@link TestList}, {@link TestSet},\n+ * or {@link TestBag}, you probably don't have to worry about the\n+ * above methods, because those three classes already override the methods\n+ * to provide standard JDK confirmed collections.<P>\n+ * <p>\n+ * <b>Other notes</b>\n+ * <p>\n+ * If your {@link Collection} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link Collection} fails.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/10/02 22:14:29 $\n+ * \n+ * @author Rodney Waldhoff\n+ * @author Paul Jack\n+ * @author Michael A. Smith\n+ * @author Neil O'Toole\n+ * @author Stephen Colebourne\n+ */\n+public abstract class AbstractTestCollection extends AbstractTestObject {\n+\n+    //\n+    // NOTE: \n+    //\n+    // Collection doesn't define any semantics for equals, and recommends you\n+    // use reference-based default behavior of Object.equals.  (And a test for\n+    // that already exists in TestObject).  Tests for equality of lists, sets\n+    // and bags will have to be written in test subclasses.  Thus, there is no\n+    // tests on Collection.equals nor any for Collection.hashCode.\n+    //\n+\n+\n+    // These fields are used by reset() and verify(), and any test\n+    // method that tests a modification.\n+\n+    /** \n+     *  A collection instance that will be used for testing.\n+     */\n+    protected Collection collection;\n+\n+    /** \n+     *  Confirmed collection.  This is an instance of a collection that is\n+     *  confirmed to conform exactly to the java.util.Collection contract.\n+     *  Modification operations are tested by performing a mod on your \n+     *  collection, performing the exact same mod on an equivalent confirmed\n+     *  collection, and then calling verify() to make sure your collection\n+     *  still matches the confirmed collection.\n+     */\n+    protected Collection confirmed;\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test class name\n+     */\n+    public AbstractTestCollection(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Specifies whether equal elements in the collection are, in fact,\n+     *  distinguishable with information not readily available.  That is, if a\n+     *  particular value is to be removed from the collection, then there is\n+     *  one and only one value that can be removed, even if there are other\n+     *  elements which are equal to it.  \n+     *\n+     *  <P>In most collection cases, elements are not distinguishable (equal is\n+     *  equal), thus this method defaults to return false.  In some cases,\n+     *  however, they are.  For example, the collection returned from the map's\n+     *  values() collection view are backed by the map, so while there may be\n+     *  two values that are equal, their associated keys are not.  Since the\n+     *  keys are distinguishable, the values are.\n+     *\n+     *  <P>This flag is used to skip some verifications for iterator.remove()\n+     *  where it is impossible to perform an equivalent modification on the\n+     *  confirmed collection because it is not possible to determine which\n+     *  value in the confirmed collection to actually remove.  Tests that\n+     *  override the default (i.e. where equal elements are distinguishable),\n+     *  should provide additional tests on iterator.remove() to make sure the\n+     *  proper elements are removed when remove() is called on the iterator.\n+     **/\n+    protected boolean areEqualElementsDistinguishable() {\n+        return false;\n+    }\n+\n+    /**\n+     *  Returns true if the collections produced by \n+     *  {@link #makeCollection()} and {@link #makeFullCollection()}\n+     *  support the <code>add</code> and <code>addAll</code>\n+     *  operations.<P>\n+     *  Default implementation returns true.  Override if your collection\n+     *  class does not support add or addAll.\n+     */\n+    protected boolean isAddSupported() {\n+        return true;\n+    }\n+\n+    /**\n+     *  Returns true if the collections produced by \n+     *  {@link #makeCollection()} and {@link #makeFullCollection()}\n+     *  support the <code>remove</code>, <code>removeAll</code>,\n+     *  <code>retainAll</code>, <code>clear</code> and\n+     *  <code>iterator().remove()</code> methods.\n+     *  Default implementation returns true.  Override if your collection\n+     *  class does not support removal operations.\n+     */\n+    protected boolean isRemoveSupported() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true to indicate that the collection supports holding null.\n+     * The default implementation returns true;\n+     */\n+    protected boolean isNullSupported() {\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true to indicate that the collection supports fail fast iterators.\n+     * The default implementation returns true;\n+     */\n+    protected boolean isFailFastSupported() {\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Verifies that {@link #collection} and {@link #confirmed} have \n+     *  identical state.\n+     */\n+    protected void verify() {\n+        int confirmedSize = confirmed.size();\n+        assertEquals(\"Collection size should match confirmed collection's\",\n+                     confirmedSize, collection.size());\n+        assertEquals(\"Collection isEmpty() result should match confirmed \" +\n+                     \" collection's\", \n+                     confirmed.isEmpty(), collection.isEmpty());\n+\n+        // verify the collections are the same by attempting to match each\n+        // object in the collection and confirmed collection.  To account for\n+        // duplicates and differing orders, each confirmed element is copied\n+        // into an array and a flag is maintained for each element to determine\n+        // whether it has been matched once and only once.  If all elements in\n+        // the confirmed collection are matched once and only once and there\n+        // aren't any elements left to be matched in the collection,\n+        // verification is a success.\n+\n+        // copy each collection value into an array\n+        Object[] confirmedValues = new Object[confirmedSize];\n+\n+        Iterator iter;\n+\n+        iter = confirmed.iterator(); \n+        int pos = 0;\n+        while(iter.hasNext()) {\n+            confirmedValues[pos++] = iter.next();\n+        }\n+\n+        // allocate an array of boolean flags for tracking values that have\n+        // been matched once and only once.\n+        boolean[] matched = new boolean[confirmedSize];\n+        \n+        // now iterate through the values of the collection and try to match\n+        // the value with one in the confirmed array.\n+        iter = collection.iterator();\n+        while(iter.hasNext()) {\n+            Object o = iter.next();\n+            boolean match = false;\n+            for(int i = 0; i < confirmedSize; i++) {\n+                if(matched[i]) {\n+                    // skip values already matched\n+                    continue;\n+                }\n+                if(o == confirmedValues[i] ||\n+                   (o != null && o.equals(confirmedValues[i]))) {\n+                    // values matched\n+                    matched[i] = true;\n+                    match = true;\n+                    break;\n+                }\n+            }\n+            // no match found!\n+            if(!match) {\n+                fail(\"Collection should not contain a value that the \" +\n+                     \"confirmed collection does not have.\");\n+            }\n+        }\n+        \n+        // make sure there aren't any unmatched values\n+        for(int i = 0; i < confirmedSize; i++) {\n+            if(!matched[i]) {\n+                // the collection didn't match all the confirmed values\n+                fail(\"Collection should contain all values that are in the \" +\n+                     \"confirmed collection\");\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Resets the {@link #collection} and {@link #confirmed} fields to empty\n+     *  collections.  Invoke this method before performing a modification\n+     *  test.\n+     */\n+    protected void resetEmpty() {\n+        this.collection = makeCollection();\n+        this.confirmed = makeConfirmedCollection();\n+    }\n+\n+    /**\n+     *  Resets the {@link #collection} and {@link #confirmed} fields to full\n+     *  collections.  Invoke this method before performing a modification\n+     *  test.\n+     */\n+    protected void resetFull() {\n+        this.collection = makeFullCollection();\n+        this.confirmed = makeConfirmedFullCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns a confirmed empty collection.\n+     *  For instance, an {@link java.util.ArrayList} for lists or a\n+     *  {@link java.util.HashSet} for sets.\n+     *\n+     *  @return a confirmed empty collection\n+     */\n+    protected abstract Collection makeConfirmedCollection();\n+\n+    /**\n+     *  Returns a confirmed full collection.\n+     *  For instance, an {@link java.util.ArrayList} for lists or a\n+     *  {@link java.util.HashSet} for sets.  The returned collection\n+     *  should contain the elements returned by {@link #getFullElements()}.\n+     *\n+     *  @return a confirmed full collection\n+     */\n+    protected abstract Collection makeConfirmedFullCollection();\n+\n+    /**\n+     * Return a new, empty {@link Collection} to be used for testing.\n+     */\n+    protected abstract Collection makeCollection();\n+\n+    /**\n+     *  Returns a full collection to be used for testing.  The collection\n+     *  returned by this method should contain every element returned by\n+     *  {@link #getFullElements()}.  The default implementation, in fact,\n+     *  simply invokes <code>addAll</code> on an empty collection with\n+     *  the results of {@link #getFullElements()}.  Override this default\n+     *  if your collection doesn't support addAll.\n+     */\n+    protected Collection makeFullCollection() {\n+        Collection c = makeCollection();\n+        c.addAll(Arrays.asList(getFullElements()));\n+        return c;\n+    }\n+\n+    /**\n+     *  Returns an empty collection for Object tests.\n+     */\n+    protected Object makeObject() {\n+        return makeCollection();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns an array of objects that are contained in a collection\n+     *  produced by {@link #makeFullCollection()}.  Every element in the\n+     *  returned array <I>must</I> be an element in a full collection.<P>\n+     *  The default implementation returns a heterogenous array of \n+     *  objects with some duplicates. null is added if allowed.\n+     *  Override if you require specific testing elements.  Note that if you\n+     *  override {@link #makeFullCollection()}, you <I>must</I> override\n+     *  this method to reflect the contents of a full collection.\n+     */\n+    protected Object[] getFullElements() {\n+        if (isNullSupported()) {\n+            ArrayList list = new ArrayList();\n+            list.addAll(Arrays.asList(getFullNonNullElements()));\n+            list.add(4, null);\n+            return list.toArray();\n+        } else {\n+            return (Object[]) getFullNonNullElements().clone();\n+        }\n+    }\n+\n+    /**\n+     *  Returns an array of elements that are <I>not</I> contained in a\n+     *  full collection.  Every element in the returned array must \n+     *  not exist in a collection returned by {@link #makeFullCollection()}.\n+     *  The default implementation returns a heterogenous array of elements\n+     *  without null.  Note that some of the tests add these elements\n+     *  to an empty or full collection, so if your collection restricts\n+     *  certain kinds of elements, you should override this method.\n+     */\n+    protected Object[] getOtherElements() {\n+        return getOtherNonNullElements();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns a list of elements suitable for return by\n+     *  {@link #getFullElements()}.  The array returned by this method\n+     *  does not include null, but does include a variety of objects \n+     *  of different types.  Override getFullElements to return\n+     *  the results of this method if your collection does not support\n+     *  the null element.\n+     */\n+    protected Object[] getFullNonNullElements() {\n+        return new Object[] {\n+            new String(\"\"),\n+            new String(\"One\"),\n+            new Integer(2),\n+            \"Three\",\n+            new Integer(4),\n+            \"One\",\n+            new Double(5),\n+            new Float(6),\n+            \"Seven\",\n+            \"Eight\",\n+            new String(\"Nine\"),\n+            new Integer(10),\n+            new Short((short)11),\n+            new Long(12),\n+            \"Thirteen\",\n+            \"14\",\n+            \"15\",\n+            new Byte((byte)16)\n+        };\n+    }\n+\n+    /**\n+     *  Returns the default list of objects returned by \n+     *  {@link #getOtherElements()}.  Includes many objects\n+     *  of different types.\n+     */\n+    protected Object[] getOtherNonNullElements() {\n+        return new Object[] {\n+            new Integer(0),\n+            new Float(0),\n+            new Double(0),\n+            \"Zero\",\n+            new Short((short)0),\n+            new Byte((byte)0),\n+            new Long(0),\n+            new Character('\\u0000'),\n+            \"0\"\n+        };\n+    }\n+\n+    /**\n+     *  Returns a list of string elements suitable for return by\n+     *  {@link #getFullElements()}.  Override getFullElements to return\n+     *  the results of this method if your collection does not support\n+     *  heterogenous elements or the null element.\n+     */\n+    protected Object[] getFullNonNullStringElements() {\n+        return new Object[] {\n+            \"If\",\"the\",\"dull\",\"substance\",\"of\",\"my\",\"flesh\",\"were\",\"thought\",\n+            \"Injurious\",\"distance\",\"could\",\"not\",\"stop\",\"my\",\"way\",\n+        };\n+    }\n+\n+    /**\n+     *  Returns a list of string elements suitable for return by\n+     *  {@link #getOtherElements()}.  Override getOtherElements to return\n+     *  the results of this method if your collection does not support\n+     *  heterogenous elements or the null element.\n+     */\n+    protected Object[] getOtherNonNullStringElements() {\n+        return new Object[] {\n+            \"For\",\"then\",\"despite\",/* of */\"space\",\"I\",\"would\",\"be\",\"brought\",\n+            \"From\",\"limits\",\"far\",\"remote\",\"where\",\"thou\",\"dost\",\"stay\"\n+        };\n+    }\n+\n+    // Tests    \n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests {@link Collection#add(Object)}.\n+     */\n+    public void testCollectionAdd() {\n+        if (!isAddSupported()) return;\n+        \n+        Object[] elements = getFullElements();\n+        for (int i = 0; i < elements.length; i++) {\n+            resetEmpty();\n+            boolean r = collection.add(elements[i]);\n+            confirmed.add(elements[i]);\n+            verify();\n+            assertTrue(\"Empty collection changed after add\", r);\n+            assertTrue(\"Collection size is 1 after first add\", \n+                       collection.size() == 1);\n+        }\n+        \n+        resetEmpty();\n+        int size = 0;\n+        for (int i = 0; i < elements.length; i++) {\n+            boolean r = collection.add(elements[i]);\n+            confirmed.add(elements[i]);\n+            verify();\n+            if (r) size++;\n+            assertEquals(\"Collection size should grow after add\", \n+                         size, collection.size());\n+            assertTrue(\"Collection should contain added element\",\n+                       collection.contains(elements[i]));\n+        }\n+    }\n+    \n+    \n+    /**\n+     *  Tests {@link Collection#addAll(Collection)}.\n+     */\n+    public void testCollectionAddAll() {\n+        if (!isAddSupported()) return;\n+\n+        resetEmpty();\n+        Object[] elements = getFullElements();\n+        boolean r = collection.addAll(Arrays.asList(elements));\n+        confirmed.addAll(Arrays.asList(elements));\n+        verify();\n+        assertTrue(\"Empty collection should change after addAll\", r);\n+        for (int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Collection should contain added element\",\n+                       collection.contains(elements[i]));\n+        }\n+\n+        resetFull();\n+        int size = collection.size();\n+        elements = getOtherElements();\n+        r = collection.addAll(Arrays.asList(elements));\n+        confirmed.addAll(Arrays.asList(elements));\n+        verify();\n+        assertTrue(\"Full collection should change after addAll\", r);\n+        for (int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Full collection should contain added element\",\n+                       collection.contains(elements[i]));\n+        }\n+        assertEquals(\"Size should increase after addAll\", \n+                     size + elements.length, collection.size());\n+        \n+        resetFull();\n+        size = collection.size();\n+        r = collection.addAll(Arrays.asList(getFullElements()));\n+        confirmed.addAll(Arrays.asList(getFullElements()));\n+        verify();\n+        if (r) {\n+            assertTrue(\"Size should increase if addAll returns true\", \n+                       size < collection.size());\n+        } else {\n+            assertEquals(\"Size should not change if addAll returns false\",\n+                         size, collection.size());\n+        } \n+    }\n+\n+\n+    /**\n+     *  If {@link #isAddSupported()} returns false, tests that add operations\n+     *  raise <code>UnsupportedOperationException.\n+     */\n+    public void testUnsupportedAdd() {\n+        if (isAddSupported()) return;\n+        \n+        resetEmpty();\n+        try {\n+            collection.add(new Object());\n+            fail(\"Emtpy collection should not support add.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        // make sure things didn't change even if the expected exception was\n+        // thrown.\n+        verify();\n+\n+        try {\n+            collection.addAll(Arrays.asList(getFullElements()));\n+            fail(\"Emtpy collection should not support addAll.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        // make sure things didn't change even if the expected exception was\n+        // thrown.\n+        verify();\n+\n+        resetFull();\n+        try {\n+            collection.add(new Object());\n+            fail(\"Full collection should not support add.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        // make sure things didn't change even if the expected exception was\n+        // thrown.\n+        verify();\n+        \n+        try {\n+            collection.addAll(Arrays.asList(getOtherElements()));\n+            fail(\"Full collection should not support addAll.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        // make sure things didn't change even if the expected exception was\n+        // thrown.\n+        verify();\n+    }\n+\n+\n+    /**\n+     *  Test {@link Collection#clear()}.\n+     */\n+    public void testCollectionClear() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        collection.clear(); // just to make sure it doesn't raise anything\n+        verify();\n+\n+        resetFull();\n+        collection.clear();\n+        confirmed.clear();\n+        verify();\n+    }    \n+\n+    \n+    /**\n+     *  Tests {@link Collection#contains(Object)}.\n+     */\n+    public void testCollectionContains() {\n+        Object[] elements;\n+\n+        resetEmpty();\n+        elements = getFullElements();\n+        for(int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Empty collection shouldn't contain element[\" + i + \"]\",\n+                       !collection.contains(elements[i]));\n+        }\n+        // make sure calls to \"contains\" don't change anything\n+        verify();\n+\n+        elements = getOtherElements();\n+        for(int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Empty collection shouldn't contain element[\" + i + \"]\",\n+                       !collection.contains(elements[i]));\n+        }\n+        // make sure calls to \"contains\" don't change anything\n+        verify();\n+\n+        resetFull();\n+        elements = getFullElements();\n+        for(int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Full collection should contain element[\" + i + \"]\", \n+                       collection.contains(elements[i]));\n+        }\n+        // make sure calls to \"contains\" don't change anything\n+        verify();\n+\n+        resetFull();\n+        elements = getOtherElements();\n+        for(int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Full collection shouldn't contain element\", \n+                       !collection.contains(elements[i]));\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Collection#containsAll(Collection)}.\n+     */\n+    public void testCollectionContainsAll() {\n+        resetEmpty();\n+        Collection col = new HashSet();\n+        assertTrue(\"Every Collection should contain all elements of an \" +\n+                   \"empty Collection.\", collection.containsAll(col));\n+        col.addAll(Arrays.asList(getOtherElements()));\n+        assertTrue(\"Empty Collection shouldn't contain all elements of \" +\n+                   \"a non-empty Collection.\", !collection.containsAll(col));\n+        // make sure calls to \"containsAll\" don't change anything\n+        verify();\n+\n+        resetFull();\n+        assertTrue(\"Full collection shouldn't contain other elements\", \n+                   !collection.containsAll(col));\n+        \n+        col.clear();\n+        col.addAll(Arrays.asList(getFullElements()));\n+        assertTrue(\"Full collection should containAll full elements\",\n+                   collection.containsAll(col));\n+        // make sure calls to \"containsAll\" don't change anything\n+        verify();\n+\n+        col = Arrays.asList(getFullElements()).subList(2, 5);\n+        assertTrue(\"Full collection should containAll partial full \" +\n+                   \"elements\", collection.containsAll(col));\n+        assertTrue(\"Full collection should containAll itself\", \n+                   collection.containsAll(collection));\n+\n+        // make sure calls to \"containsAll\" don't change anything\n+        verify();\n+        \n+        col = new ArrayList();\n+        col.addAll(Arrays.asList(getFullElements()));\n+        col.addAll(Arrays.asList(getFullElements()));\n+        assertTrue(\"Full collection should containAll duplicate full \" +\n+                   \"elements\", collection.containsAll(col));\n+\n+        // make sure calls to \"containsAll\" don't change anything\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link Collection#isEmpty()}.\n+     */\n+    public void testCollectionIsEmpty() {\n+        resetEmpty();\n+        assertEquals(\"New Collection should be empty.\", \n+                     true, collection.isEmpty());\n+        // make sure calls to \"isEmpty() don't change anything\n+        verify();\n+\n+        resetFull();\n+        assertEquals(\"Full collection shouldn't be empty\", \n+                     false, collection.isEmpty());\n+        // make sure calls to \"isEmpty() don't change anything\n+        verify();\n+    }\n+\n+\n+    /**\n+     *  Tests the read-only functionality of {@link Collection#iterator()}.\n+     */\n+    public void testCollectionIterator() {\n+        resetEmpty();\n+        Iterator it1 = collection.iterator();\n+        assertEquals(\"Iterator for empty Collection shouldn't have next.\",\n+                     false, it1.hasNext());\n+        try {\n+            it1.next();\n+            fail(\"Iterator at end of Collection should throw \" +\n+                 \"NoSuchElementException when next is called.\");\n+        } catch(NoSuchElementException e) {\n+            // expected\n+        } \n+        // make sure nothing has changed after non-modification\n+        verify();\n+\n+        resetFull();\n+        it1 = collection.iterator();\n+        for (int i = 0; i < collection.size(); i++) {\n+            assertTrue(\"Iterator for full collection should haveNext\", \n+                       it1.hasNext());\n+            it1.next();\n+        }\n+        assertTrue(\"Iterator should be finished\", !it1.hasNext());\n+        \n+        ArrayList list = new ArrayList();\n+        it1 = collection.iterator();\n+        for (int i = 0; i < collection.size(); i++) {\n+            Object next = it1.next();\n+            assertTrue(\"Collection should contain element returned by \" +\n+                       \"its iterator\", collection.contains(next));\n+            list.add(next);\n+        }\n+        try {\n+            it1.next();\n+            fail(\"iterator.next() should raise NoSuchElementException \" +\n+                 \"after it finishes\");\n+        } catch (NoSuchElementException e) {\n+            // expected\n+        }\n+        // make sure nothing has changed after non-modification\n+        verify();\n+    }\n+\n+\n+    /**\n+     *  Tests removals from {@link Collection#iterator()}.\n+     */\n+    public void testCollectionIteratorRemove() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        try {\n+            collection.iterator().remove();\n+            fail(\"New iterator.remove should raise IllegalState\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        try {\n+            Iterator iter = collection.iterator();\n+            iter.hasNext();\n+            iter.remove();\n+            fail(\"New iterator.remove should raise IllegalState \" +\n+                 \"even after hasNext\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        resetFull();\n+        int size = collection.size();\n+        Iterator iter = collection.iterator();\n+        while (iter.hasNext()) {\n+            Object o = iter.next();\n+            iter.remove();\n+\n+            // if the elements aren't distinguishable, we can just remove a\n+            // matching element from the confirmed collection and verify\n+            // contents are still the same.  Otherwise, we don't have the\n+            // ability to distinguish the elements and determine which to\n+            // remove from the confirmed collection (in which case, we don't\n+            // verify because we don't know how). \n+            //\n+            // see areEqualElementsDistinguishable()\n+            if(!areEqualElementsDistinguishable()) {\n+                confirmed.remove(o);\n+                verify();\n+            }\n+\n+            size--;\n+            assertEquals(\"Collection should shrink by one after \" +\n+                         \"iterator.remove\", size, collection.size());\n+        }\n+        assertTrue(\"Collection should be empty after iterator purge\",\n+                   collection.isEmpty());\n+        \n+        resetFull();\n+        iter = collection.iterator();\n+        iter.next();\n+        iter.remove();\n+        try {\n+            iter.remove();\n+            fail(\"Second iter.remove should raise IllegalState\");\n+        } catch (IllegalStateException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Collection#remove(Object)}.\n+     */\n+    public void testCollectionRemove() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        Object[] elements = getFullElements();\n+        for (int i = 0; i < elements.length; i++) {\n+            assertTrue(\"Shouldn't remove nonexistent element\", \n+                       !collection.remove(elements[i]));\n+            verify();\n+        }\n+        \n+        Object[] other = getOtherElements();\n+        \n+        resetFull();\n+        for (int i = 0; i < other.length; i++) {\n+            assertTrue(\"Shouldn't remove nonexistent other element\", \n+                       !collection.remove(other[i]));\n+            verify();\n+        }\n+        \n+        int size = collection.size();\n+        for (int i = 0; i < elements.length; i++) {\n+            resetFull();\n+            assertTrue(\"Collection should remove extant element\",\n+                       collection.remove(elements[i]));\n+\n+            // if the elements aren't distinguishable, we can just remove a\n+            // matching element from the confirmed collection and verify\n+            // contents are still the same.  Otherwise, we don't have the\n+            // ability to distinguish the elements and determine which to\n+            // remove from the confirmed collection (in which case, we don't\n+            // verify because we don't know how). \n+            //\n+            // see areEqualElementsDistinguishable()\n+            if(!areEqualElementsDistinguishable()) {\n+                confirmed.remove(elements[i]);\n+                verify();\n+            }\n+\n+            assertEquals(\"Collection should shrink after remove\", \n+                         size - 1, collection.size());\n+        }\n+    }\n+    \n+\n+    /**\n+     *  Tests {@link Collection#removeAll(Collection)}.\n+     */\n+    public void testCollectionRemoveAll() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        assertTrue(\"Emtpy collection removeAll should return false for \" +\n+                   \"empty input\", \n+                   !collection.removeAll(Collections.EMPTY_SET));\n+        verify();\n+        \n+        assertTrue(\"Emtpy collection removeAll should return false for \" +\n+                   \"nonempty input\", \n+                   !collection.removeAll(new ArrayList(collection)));\n+        verify();\n+        \n+        resetFull();\n+        assertTrue(\"Full collection removeAll should return false for \" + \n+                   \"empty input\", \n+                   !collection.removeAll(Collections.EMPTY_SET));\n+        verify();\n+        \n+        assertTrue(\"Full collection removeAll should return false for \" +\n+                   \"other elements\", \n+                   !collection.removeAll(Arrays.asList(getOtherElements())));\n+        verify();\n+        \n+        assertTrue(\"Full collection removeAll should return true for \" +\n+                   \"full elements\", \n+                   collection.removeAll(new HashSet(collection)));\n+        confirmed.removeAll(new HashSet(confirmed));\n+        verify();\n+        \n+        resetFull();\n+        int size = collection.size();\n+        Collection all = Arrays.asList(getFullElements()).subList(2, 5);\n+        assertTrue(\"Full collection removeAll should work\", \n+                   collection.removeAll(all));\n+        confirmed.removeAll(all);\n+        verify();\n+        \n+        assertTrue(\"Collection should shrink after removeAll\", \n+                   collection.size() < size);\n+        Iterator iter = all.iterator();\n+        while (iter.hasNext()) {\n+            assertTrue(\"Collection shouldn't contain removed element\",\n+                       !collection.contains(iter.next()));\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Collection#retainAll(Collection)}.\n+     */\n+    public void testCollectionRetainAll() {\n+        if (!isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        List elements = Arrays.asList(getFullElements());\n+        List other = Arrays.asList(getOtherElements());\n+\n+        assertTrue(\"Empty retainAll() should return false\", \n+                   !collection.retainAll(Collections.EMPTY_SET));\n+        verify();\n+        \n+        assertTrue(\"Empty retainAll() should return false\", \n+                   !collection.retainAll(elements));\n+        verify();\n+        \n+        resetFull();\n+        assertTrue(\"Collection should change from retainAll empty\", \n+                   collection.retainAll(Collections.EMPTY_SET));\n+        confirmed.retainAll(Collections.EMPTY_SET);\n+        verify();\n+        \n+        resetFull();\n+        assertTrue(\"Collection changed from retainAll other\", \n+                   collection.retainAll(other));\n+        confirmed.retainAll(other);\n+        verify();\n+        \n+        resetFull();\n+        int size = collection.size();\n+        assertTrue(\"Collection shouldn't change from retainAll elements\",\n+                   !collection.retainAll(elements));\n+        verify();\n+        assertEquals(\"Collection size shouldn't change\", size, \n+                     collection.size());\n+        \n+        resetFull();\n+        size = collection.size();\n+        assertTrue(\"Collection should changed by partial retainAll\",\n+                   collection.retainAll(elements.subList(2, 5)));\n+        confirmed.retainAll(elements.subList(2, 5));\n+        verify();\n+        \n+        Iterator iter = collection.iterator();\n+        while (iter.hasNext()) {\n+            assertTrue(\"Collection only contains retained element\", \n+                       elements.subList(2, 5).contains(iter.next()));\n+        }\n+        \n+        resetFull();\n+        HashSet set = new HashSet(elements);\n+        size = collection.size();\n+        assertTrue(\"Collection shouldn't change from retainAll without \" +\n+                   \"duplicate elements\", !collection.retainAll(set));\n+        verify();\n+        assertEquals(\"Collection size didn't change from nonduplicate \" +\n+                     \"retainAll\", size, collection.size());\n+    }\n+    \n+    \n+    /**\n+     *  Tests {@link Collection#size()}.\n+     */\n+    public void testCollectionSize() {\n+        resetEmpty();\n+        assertEquals(\"Size of new Collection is 0.\", 0, collection.size());\n+\n+        resetFull();\n+        assertTrue(\"Size of full collection should be greater than zero\", \n+                   collection.size() > 0);\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Collection#toArray()}.\n+     */\n+    public void testCollectionToArray() {\n+        resetEmpty();\n+        assertEquals(\"Empty Collection should return empty array for toArray\",\n+                     0, collection.toArray().length);\n+\n+        resetFull();\n+        Object[] array = collection.toArray();\n+        assertEquals(\"Full collection toArray should be same size as \" +\n+                     \"collection\", array.length, collection.size());\n+        Object[] confirmedArray = confirmed.toArray();\n+        assertEquals(\"length of array from confirmed collection should \" +\n+                     \"match the length of the collection's array\", \n+                     confirmedArray.length, array.length);\n+        boolean[] matched = new boolean[array.length];\n+\n+        for (int i = 0; i < array.length; i++) {\n+            assertTrue(\"Collection should contain element in toArray\",\n+                       collection.contains(array[i]));\n+\n+            boolean match = false;\n+            // find a match in the confirmed array\n+            for(int j = 0; j < array.length; j++) {\n+                // skip already matched\n+                if(matched[j]) continue;\n+                if(array[i] == confirmedArray[j] ||\n+                   (array[i] != null && array[i].equals(confirmedArray[j]))) {\n+                    matched[j] = true;\n+                    match = true;\n+                    break;\n+                }\n+            }\n+            if(!match) {\n+                fail(\"element \" + i + \" in returned array should be found \" +\n+                     \"in the confirmed collection's array\");\n+            }\n+        }\n+        for(int i = 0; i < matched.length; i++) {\n+            assertEquals(\"Collection should return all its elements in \" +\n+                         \"toArray\", true, matched[i]);\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests {@link Collection#toArray(Object[])}.\n+     */\n+    public void testCollectionToArray2() {\n+        resetEmpty();\n+        Object[] a = new Object[] { new Object(), null, null };\n+        Object[] array = collection.toArray(a);\n+        assertEquals(\"Given array shouldn't shrink\", array, a);\n+        assertEquals(\"Last element should be set to null\", a[0], null);\n+        verify();\n+\n+        resetFull();\n+        try {\n+            array = collection.toArray(new Void[0]);\n+            fail(\"toArray(new Void[0]) should raise ArrayStore\");\n+        } catch (ArrayStoreException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        try {\n+            array = collection.toArray(null);\n+            fail(\"toArray(null) should raise NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        verify();\n+        \n+        array = collection.toArray(new Object[0]);\n+        a = collection.toArray();\n+        assertEquals(\"toArrays should be equal\", \n+                     Arrays.asList(array), Arrays.asList(a));\n+\n+        // Figure out if they're all the same class\n+        // TODO: It'd be nicer to detect a common superclass\n+        HashSet classes = new HashSet();\n+        for (int i = 0; i < array.length; i++) {\n+            classes.add((array[i] == null) ? null : array[i].getClass());\n+        }\n+        if (classes.size() > 1) return;\n+        \n+        Class cl = (Class)classes.iterator().next();\n+        if (Map.Entry.class.isAssignableFrom(cl)) {  // check needed for protective cases like Predicated/Unmod map entrySet\n+            cl = Map.Entry.class;\n+        }\n+        a = (Object[])Array.newInstance(cl, 0);\n+        array = collection.toArray(a);\n+        assertEquals(\"toArray(Object[]) should return correct array type\",\n+                     a.getClass(), array.getClass());\n+        assertEquals(\"type-specific toArrays should be equal\", \n+                     Arrays.asList(array), \n+                     Arrays.asList(collection.toArray()));\n+        verify();\n+    }\n+\n+\n+    /**\n+     *  Tests <code>toString</code> on a collection.\n+     */\n+    public void testCollectionToString() {\n+        resetEmpty();\n+        assertTrue(\"toString shouldn't return null\", \n+                   collection.toString() != null);\n+\n+        resetFull();\n+        assertTrue(\"toString shouldn't return null\", \n+                   collection.toString() != null);\n+    }\n+\n+\n+    /**\n+     *  If isRemoveSupported() returns false, tests to see that remove\n+     *  operations raise an UnsupportedOperationException.\n+     */\n+    public void testUnsupportedRemove() {\n+        if (isRemoveSupported()) return;\n+\n+        resetEmpty();\n+        try {\n+            collection.clear();\n+            fail(\"clear should raise UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        try {\n+            collection.remove(null);\n+            fail(\"remove should raise UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        try {\n+            collection.removeAll(null);\n+            fail(\"removeAll should raise UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        try {\n+            collection.retainAll(null);\n+            fail(\"removeAll should raise UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        verify();\n+\n+        resetFull();\n+        try {\n+            Iterator iterator = collection.iterator();\n+            iterator.next();\n+            iterator.remove();\n+            fail(\"iterator.remove should raise UnsupportedOperationException\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        verify();\n+\n+    }\n+\n+\n+    /**\n+     *  Tests that the collection's iterator is fail-fast.  \n+     */\n+    public void testCollectionIteratorFailFast() {\n+        if (!isFailFastSupported()) return;\n+        \n+        if (isAddSupported()) {\n+            resetFull();\n+            try {\n+                Iterator iter = collection.iterator();\n+                Object o = getOtherElements()[0];\n+                collection.add(o);\n+                confirmed.add(o);\n+                iter.next();\n+                fail(\"next after add should raise ConcurrentModification\");\n+            } catch (ConcurrentModificationException e) {\n+                // expected\n+            }\n+            verify();\n+            \n+            resetFull();\n+            try {\n+                Iterator iter = collection.iterator();\n+                collection.addAll(Arrays.asList(getOtherElements()));\n+                confirmed.addAll(Arrays.asList(getOtherElements()));\n+                iter.next();\n+                fail(\"next after addAll should raise ConcurrentModification\");\n+            } catch (ConcurrentModificationException e) {\n+                // expected\n+            }\n+            verify();\n+        }\n+\n+        if (!isRemoveSupported()) return;\n+\n+        resetFull();\n+        try {\n+            Iterator iter = collection.iterator();\n+            collection.clear();\n+            iter.next();\n+            fail(\"next after clear should raise ConcurrentModification\");\n+        } catch (ConcurrentModificationException e) {\n+            // expected\n+        } catch (NoSuchElementException e) {\n+            // (also legal given spec)\n+        }\n+        \n+        resetFull();\n+        try {\n+            Iterator iter = collection.iterator();\n+            collection.remove(getFullElements()[0]);\n+            iter.next();\n+            fail(\"next after remove should raise ConcurrentModification\");\n+        } catch (ConcurrentModificationException e) {\n+            // expected\n+        }\n+\n+        resetFull();\n+        try {\n+            Iterator iter = collection.iterator();\n+            List sublist = Arrays.asList(getFullElements()).subList(2,5);\n+            collection.removeAll(sublist);\n+            iter.next();\n+            fail(\"next after removeAll should raise ConcurrentModification\");\n+        } catch (ConcurrentModificationException e) {\n+            // expected\n+        }\n+\n+        resetFull();\n+        try {\n+            Iterator iter = collection.iterator();\n+            List sublist = Arrays.asList(getFullElements()).subList(2,5);\n+            collection.retainAll(sublist);\n+            iter.next();\n+            fail(\"next after retainAll should raise ConcurrentModification\");\n+        } catch (ConcurrentModificationException e) {\n+            // expected\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/AbstractTestList.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/AbstractTestList.java,v 1.1 2003/10/02 22:14:29 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.AbstractCollection;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.ConcurrentModificationException;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Abstract test class for {@link java.util.List} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeList} method.\n+ * <p>\n+ * If your {@link List} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link List} fails or override one of the\n+ * protected methods from AbstractTestCollection.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/10/02 22:14:29 $\n+ * \n+ * @author Rodney Waldhoff\n+ * @author Paul Jack\n+ * @author Stephen Colebourne\n+ * @author Neil O'Toole\n+ */\n+public abstract class AbstractTestList extends AbstractTestCollection {\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test class name\n+     */\n+    public AbstractTestList(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns true if the collections produced by \n+     *  {@link #makeCollection()} and {@link #makeFullCollection()}\n+     *  support the <code>set operation.<p>\n+     *  Default implementation returns true.  Override if your collection\n+     *  class does not support set.\n+     */\n+    protected boolean isSetSupported() {\n+        return true;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Verifies that the test list implementation matches the confirmed list\n+     *  implementation.\n+     */\n+    protected void verify() {\n+        super.verify();\n+\n+        List list1 = getList();\n+        List list2 = getConfirmedList();\n+\n+        assertEquals(\"List should equal confirmed\", list1, list2);\n+        assertEquals(\"Confirmed should equal list\", list2, list1);\n+\n+        assertEquals(\"Hash codes should be equal\", list1.hashCode(), list2.hashCode());\n+\n+        int i = 0;\n+        Iterator iterator1 = list1.iterator();\n+        Iterator iterator2 = list2.iterator();\n+        Object[] array = list1.toArray();\n+        while (iterator2.hasNext()) {\n+            assertTrue(\"List iterator should have next\", iterator1.hasNext());\n+            Object o1 = iterator1.next();\n+            Object o2 = iterator2.next();\n+            assertEquals(\"Iterator elements should be equal\", o1, o2);\n+            o2 = list1.get(i);\n+            assertEquals(\"get should return correct element\", o1, o2);\n+            o2 = array[i];\n+            assertEquals(\"toArray should have correct element\", o1, o2);\n+            i++;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns an empty {@link ArrayList}.\n+     */\n+    protected Collection makeConfirmedCollection() {\n+        ArrayList list = new ArrayList();\n+        return list;\n+    }\n+\n+    /**\n+     * Returns a full {@link ArrayList}.\n+     */\n+    protected Collection makeConfirmedFullCollection() {\n+        ArrayList list = new ArrayList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+    /**\n+     * Return a new, empty {@link List} to be used for testing.\n+     *\n+     * @return an empty list for testing.\n+     */\n+    protected abstract List makeEmptyList();\n+\n+    /**\n+     * Return a new, full {@link List} to be used for testing.\n+     *\n+     * @return a full list for testing\n+     */\n+    protected List makeFullList() {\n+        // only works if list supports optional \"addAll(Collection)\" \n+        List list = makeEmptyList();\n+        list.addAll(Arrays.asList(getFullElements()));\n+        return list;\n+    }\n+\n+    /**\n+     * Returns {@link makeEmptyList()}.\n+     *\n+     * @return an empty list to be used for testing\n+     */\n+    protected final Collection makeCollection() {\n+        return makeEmptyList();\n+    }\n+\n+    /**\n+     * Returns {@link makeFullList()}.\n+     *\n+     * @return a full list to be used for testing\n+     */\n+    protected final Collection makeFullCollection() {\n+        return makeFullList();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the {@link collection} field cast to a {@link List}.\n+     *\n+     * @return the collection field as a List\n+     */\n+    protected List getList() {\n+        return (List) collection;\n+    }\n+\n+    /**\n+     * Returns the {@link confirmed} field cast to a {@link List}.\n+     *\n+     * @return the confirmed field as a List\n+     */\n+    protected List getConfirmedList() {\n+        return (List) confirmed;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Tests bounds checking for {@link List#add(int, Object)} on an\n+     *  empty list.\n+     */\n+    public void testListAddByIndexBoundsChecking() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        List list;\n+        Object element = getOtherElements()[0];\n+\n+        try {\n+            list = makeEmptyList();\n+            list.add(Integer.MIN_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeEmptyList();\n+            list.add(-1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeEmptyList();\n+            list.add(1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeEmptyList();\n+            list.add(Integer.MAX_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#add(int, Object)} on a\n+     *  full list.\n+     */\n+    public void testListAddByIndexBoundsChecking2() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        List list;\n+        Object element = getOtherElements()[0];\n+\n+        try {\n+            list = makeFullList();\n+            list.add(Integer.MIN_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeFullList();\n+            list.add(-1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeFullList();\n+            list.add(list.size() + 1, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [size + 1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list = makeFullList();\n+            list.add(Integer.MAX_VALUE, element);\n+            fail(\"List.add should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#add(int,Object)}.\n+     */\n+    public void testListAddByIndex() {\n+        if (!isAddSupported()) {\n+            return;\n+        }\n+\n+        Object element = getOtherElements()[0];\n+        int max = getFullElements().length;\n+\n+        for (int i = 0; i <= max; i++) {\n+            resetFull();\n+            ((List) collection).add(i, element);\n+            ((List) confirmed).add(i, element);\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#equals(Object)}.\n+     */\n+    public void testListEquals() {\n+        resetEmpty();\n+        List list = getList();\n+        assertEquals(\"Empty lists should be equal\", true, list.equals(confirmed));\n+        verify();\n+        assertEquals(\"Empty list should equal self\", true, list.equals(list));\n+        verify();\n+\n+        List list2 = Arrays.asList(getFullElements());\n+        assertEquals(\"Empty list shouldn't equal full\", false, list.equals(list2));\n+        verify();\n+\n+        list2 = Arrays.asList(getOtherElements());\n+        assertEquals(\"Empty list shouldn't equal other\", false, list.equals(list2));\n+        verify();\n+\n+        resetFull();\n+        list = getList();\n+        assertEquals(\"Full lists should be equal\", true, list.equals(confirmed));\n+        verify();\n+        assertEquals(\"Full list should equal self\", true, list.equals(list));\n+        verify();\n+\n+        list2 = makeEmptyList();\n+        assertEquals(\"Full list shouldn't equal empty\", false, list.equals(list2));\n+        verify();\n+\n+        list2 = Arrays.asList(getOtherElements());\n+        assertEquals(\"Full list shouldn't equal other\", false, list.equals(list2));\n+        verify();\n+\n+        list2 = Arrays.asList(getFullElements());\n+        Collections.reverse(list2);\n+        assertEquals(\n+            \"Full list shouldn't equal full list with same elements but different order\",\n+            false, list.equals(list2));\n+        verify();\n+\n+        assertEquals(\"List shouldn't equal String\", false, list.equals(\"\"));\n+        verify();\n+\n+        final List listForC = Arrays.asList(getFullElements());\n+        Collection c = new AbstractCollection() {\n+            public int size() {\n+                return listForC.size();\n+            }\n+\n+            public Iterator iterator() {\n+                return listForC.iterator();\n+            }\n+        };\n+\n+        assertEquals(\"List shouldn't equal nonlist with same elements in same order\", false, list.equals(c));\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link List#hashCode()}.\n+     */\n+    public void testListHashCode() {\n+        resetEmpty();\n+        int hash1 = collection.hashCode();\n+        int hash2 = confirmed.hashCode();\n+        assertEquals(\"Empty lists should have equal hashCodes\", hash1, hash2);\n+        verify();\n+\n+        resetFull();\n+        hash1 = collection.hashCode();\n+        hash2 = confirmed.hashCode();\n+        assertEquals(\"Full lists should have equal hashCodes\", hash1, hash2);\n+        verify();\n+    }\n+\n+    /**\n+     *  Tests {@link List#get(int)}.\n+     */\n+    public void testListGetByIndex() {\n+        resetFull();\n+        List list = getList();\n+        Object[] elements = getFullElements();\n+        for (int i = 0; i < elements.length; i++) {\n+            assertEquals(\"List should contain correct elements\", elements[i], list.get(i));\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#get(int)} on an\n+     *  empty list.\n+     */\n+    public void testListGetByIndexBoundsChecking() {\n+        List list = makeEmptyList();\n+\n+        try {\n+            list.get(Integer.MIN_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(-1);\n+            fail(\"List.get should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(0);\n+            fail(\"List.get should throw IndexOutOfBoundsException [0]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(1);\n+            fail(\"List.get should throw IndexOutOfBoundsException [1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(Integer.MAX_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#get(int)} on a\n+     *  full list.\n+     */\n+    public void testListGetByIndexBoundsChecking2() {\n+        List list = makeFullList();\n+\n+        try {\n+            list.get(Integer.MIN_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(-1);\n+            fail(\"List.get should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(getFullElements().length);\n+            fail(\"List.get should throw IndexOutOfBoundsException [size]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.get(Integer.MAX_VALUE);\n+            fail(\"List.get should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#indexOf()}.\n+     */\n+    public void testListIndexOf() {\n+        resetFull();\n+        List list1 = getList();\n+        List list2 = getConfirmedList();\n+\n+        Iterator iterator = list2.iterator();\n+        while (iterator.hasNext()) {\n+            Object element = iterator.next();\n+            assertEquals(\"indexOf should return correct result\",\n+                list1.indexOf(element), list2.indexOf(element));\n+            verify();\n+        }\n+\n+        Object[] other = getOtherElements();\n+        for (int i = 0; i < other.length; i++) {\n+            assertEquals(\"indexOf should return -1 for nonexistent element\",\n+                list1.indexOf(other[i]), -1);\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests {@link List#lastIndexOf()}.\n+     */\n+    public void testListLastIndexOf() {\n+        resetFull();\n+        List list1 = getList();\n+        List list2 = getConfirmedList();\n+\n+        Iterator iterator = list2.iterator();\n+        while (iterator.hasNext()) {\n+            Object element = iterator.next();\n+            assertEquals(\"lastIndexOf should return correct result\",\n+              list1.lastIndexOf(element), list2.lastIndexOf(element));\n+            verify();\n+        }\n+\n+        Object[] other = getOtherElements();\n+        for (int i = 0; i < other.length; i++) {\n+            assertEquals(\"lastIndexOf should return -1 for nonexistent \" +\n+              \"element\", list1.lastIndexOf(other[i]), -1);\n+            verify();\n+        }\n+    }\n+\n+    /**\n+     *  Tests bounds checking for {@link List#set(int,Object)} on an\n+     *  empty list.\n+     */\n+    public void testListSetByIndexBoundsChecking() {\n+        if (!isSetSupported()) {\n+            return;\n+        }\n+\n+        List list = makeEmptyList();\n+        Object element = getOtherElements()[0];\n+\n+        try {\n+            list.set(Integer.MIN_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [Integer.MIN_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(-1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(0, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [0]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [1]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            list.set(Integer.MAX_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [Integer.MAX_VALUE]\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests bounds checking for {@link List#set(int,Object)} on a\n+     *  full list.\n+     */\n+    public void testListSetByIndexBoundsChecking2() {\n+        if (!isSetSupported()) return;\n+\n+        List list = makeFullList();\n+        Object element = getOtherElements()[0];\n+\n+        try {\n+            list.set(Integer.MIN_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.set(-1, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.set(getFullElements().length, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException [size]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.set(Integer.MAX_VALUE, element);\n+            fail(\"List.set should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+    }\n+\n+\n+    /**\n+     *  Test {@link List#set(int,Object)}.\n+     */\n+    public void testListSetByIndex() {\n+        if (!isSetSupported()) return;\n+\n+        resetFull();\n+        Object[] elements = getFullElements();\n+        Object[] other = getOtherElements();\n+\n+        for (int i = 0; i < elements.length; i++) {\n+            Object n = other[i % other.length];\n+            Object v = ((List)collection).set(i, n);\n+            assertEquals(\"Set should return correct element\", elements[i], v);\n+            ((List)confirmed).set(i, n);\n+            verify();\n+        }\n+    }\n+\n+\n+    /**\n+     *  If {@link #isSetSupported()} returns false, tests that set operation\n+     *  raises <Code>UnsupportedOperationException.\n+     */\n+    public void testUnsupportedSet() {\n+        if (isSetSupported()) return;\n+        \n+        resetFull();\n+        try {\n+            ((List) collection).set(0, new Object());\n+            fail(\"Emtpy collection should not support set.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+        // make sure things didn't change even if the expected exception was\n+        // thrown.\n+        verify();\n+    }\n+    \n+\n+    /**\n+     *  Tests bounds checking for {@link List#remove(int)} on an\n+     *  empty list.\n+     */\n+    public void testListRemoveByIndexBoundsChecking() {\n+        if (!isRemoveSupported()) return;\n+\n+        List list = makeEmptyList();\n+\n+        try {\n+            list.remove(Integer.MIN_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(-1);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(0);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [0]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(1);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(Integer.MAX_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests bounds checking for {@link List#remove(int)} on a\n+     *  full list.\n+     */\n+    public void testListRemoveByIndexBoundsChecking2() {\n+        if (!isRemoveSupported()) return;\n+\n+        List list = makeFullList();\n+\n+        try {\n+            list.remove(Integer.MIN_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MIN_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(-1);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [-1]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(getFullElements().length);\n+            fail(\"List.remove should throw IndexOutOfBoundsException [size]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+\n+        try {\n+            list.remove(Integer.MAX_VALUE);\n+            fail(\"List.remove should throw IndexOutOfBoundsException \" +\n+              \"[Integer.MAX_VALUE]\");\n+        } catch(IndexOutOfBoundsException e) {\n+            // expected\n+        } \n+    }\n+\n+\n+    /**\n+     *  Tests {@link List#remove(int)}.\n+     */\n+    public void testListRemoveByIndex() {\n+        if (!isRemoveSupported()) return;\n+\n+        int max = getFullElements().length;\n+        for (int i = 0; i < max; i++) {\n+            resetFull();\n+            Object o1 = ((List)collection).remove(i);\n+            Object o2 = ((List)confirmed).remove(i);\n+            assertEquals(\"remove should return correct element\", o1, o2);\n+            verify();\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests the read-only bits of {@link List#listIterator()}.\n+     */\n+    public void testListListIterator() {\n+        resetFull();\n+        forwardTest(getList().listIterator(), 0);\n+        backwardTest(getList().listIterator(), 0);\n+    }\n+\n+\n+    /**\n+     *  Tests the read-only bits of {@link List#listIterator(int)}.\n+     */\n+    public void testListListIteratorByIndex() {\n+        resetFull();\n+        for (int i = 0; i < confirmed.size(); i++) {\n+            forwardTest(getList().listIterator(i), i);\n+            backwardTest(getList().listIterator(i), i);\n+        }\n+    }\n+\n+\n+    /**\n+     *  Traverses to the end of the given iterator.\n+     *\n+     *  @param iter  the iterator to traverse\n+     *  @param i     the starting index\n+     */\n+    private void forwardTest(ListIterator iter, int i) {\n+        List list = getList();\n+        int max = getFullElements().length;\n+\n+        while (i < max) {\n+            assertTrue(\"Iterator should have next\", iter.hasNext());\n+            assertEquals(\"Iterator.nextIndex should work\", \n+              iter.nextIndex(), i);\n+            assertEquals(\"Iterator.previousIndex should work\",\n+              iter.previousIndex(), i - 1);\n+            Object o = iter.next();\n+            assertEquals(\"Iterator returned correct element\", list.get(i), o);\n+            i++;\n+        }\n+\n+        assertTrue(\"Iterator shouldn't have next\", !iter.hasNext());\n+        assertEquals(\"nextIndex should be size\", iter.nextIndex(), max);\n+        assertEquals(\"previousIndex should be size - 1\", \n+          iter.previousIndex(), max - 1);\n+\n+        try {\n+            iter.next();\n+            fail(\"Exhausted iterator should raise NoSuchElement\");\n+        } catch (NoSuchElementException e) {\n+            // expected\n+        }\n+    }\n+\n+\n+    /**\n+     *  Traverses to the beginning of the given iterator.\n+     *\n+     *  @param iter  the iterator to traverse\n+     *  @param i     the starting index\n+     */\n+    private void backwardTest(ListIterator iter, int i) {\n+        List list = getList();\n+\n+        while (i > 0) {\n+            assertTrue(\"Iterator should have previous, i:\" + i, iter.hasPrevious());\n+            assertEquals(\"Iterator.nextIndex should work, i:\" + i, iter.nextIndex(), i);\n+            assertEquals(\"Iterator.previousIndex should work, i:\" + i, iter.previousIndex(), i - 1);\n+            Object o = iter.previous();\n+            assertEquals(\"Iterator returned correct element\", list.get(i - 1), o);\n+            i--;\n+        }\n+\n+        assertTrue(\"Iterator shouldn't have previous\", !iter.hasPrevious());\n+        int nextIndex = iter.nextIndex();\n+        assertEquals(\"nextIndex should be 0, actual value: \" + nextIndex, nextIndex, 0);\n+        int prevIndex = iter.previousIndex();\n+        assertEquals(\"previousIndex should be -1, actual value: \" + prevIndex, prevIndex, -1);\n+\n+        try {\n+            iter.previous();\n+            fail(\"Exhausted iterator should raise NoSuchElement\");\n+        } catch (NoSuchElementException e) {\n+            // expected\n+        }\n+\n+    }\n+\n+\n+    /**\n+     *  Tests the {@link ListIterator#add(Object)} method of the list\n+     *  iterator.\n+     */\n+    public void testListIteratorAdd() {\n+        if (!isAddSupported()) return;\n+\n+        resetEmpty();\n+        List list1 = getList();\n+        List list2 = getConfirmedList();\n+\n+        Object[] elements = getFullElements();\n+        ListIterator iter1 = list1.listIterator();\n+        ListIterator iter2 = list2.listIterator();\n+\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.add(elements[i]);\n+            iter2.add(elements[i]);\n+            verify();\n+        }\n+\n+        resetFull();\n+        iter1 = getList().listIterator();\n+        iter2 = getConfirmedList().listIterator();\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.next();\n+            iter2.next();\n+            iter1.add(elements[i]);\n+            iter2.add(elements[i]);\n+            verify();\n+        }\n+    }\n+\n+\n+    /**\n+     *  Tests the {@link ListIterator#set(Object)} method of the list\n+     *  iterator.\n+     */\n+    public void testListIteratorSet() {\n+        if (!isSetSupported()) return;\n+\n+        Object[] elements = getFullElements();\n+\n+        resetFull();\n+        ListIterator iter1 = getList().listIterator();\n+        ListIterator iter2 = getConfirmedList().listIterator();\n+        for (int i = 0; i < elements.length; i++) {\n+            iter1.next();\n+            iter2.next();\n+            iter1.set(elements[i]);\n+            iter2.set(elements[i]);\n+            verify();\n+        }\n+    }\n+\n+\n+    public void testEmptyListSerialization() \n+    throws IOException, ClassNotFoundException {\n+        List list = makeEmptyList();\n+        if (!(list instanceof Serializable)) return;\n+        \n+        byte[] objekt = writeExternalFormToBytes((Serializable) list);\n+        List list2 = (List) readExternalFormFromBytes(objekt);\n+\n+        assertTrue(\"Both lists are empty\",list.size()  == 0);\n+        assertTrue(\"Both lists are empty\",list2.size() == 0);\n+    }\n+\n+    public void testFullListSerialization() \n+    throws IOException, ClassNotFoundException {\n+        List list = makeFullList();\n+        int size = getFullElements().length;\n+        if (!(list instanceof Serializable)) return;\n+        \n+        byte[] objekt = writeExternalFormToBytes((Serializable) list);\n+        List list2 = (List) readExternalFormFromBytes(objekt);\n+\n+        assertEquals(\"Both lists are same size\",list.size(), size);\n+        assertEquals(\"Both lists are same size\",list2.size(), size);\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the List\n+     * against the canonical version in CVS.\n+     */\n+    public void testEmptyListCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        List list = makeEmptyList();\n+        if (!(list instanceof Serializable)) return;\n+        \n+        writeExternalFormToDisk((Serializable) list, getCanonicalEmptyCollectionName(list));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        List list = makeEmptyList();\n+        if(list instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            List list2 = (List) readExternalFormFromDisk(getCanonicalEmptyCollectionName(list));\n+            assertTrue(\"List is empty\",list2.size()  == 0);\n+        }\n+    }\n+\n+    /**\n+     * Compare the current serialized form of the List\n+     * against the canonical version in CVS.\n+     */\n+    public void testFullListCompatibility() throws IOException, ClassNotFoundException {\n+        /**\n+         * Create canonical objects with this code\n+        List list = makeFullList();\n+        if (!(list instanceof Serializable)) return;\n+        \n+        writeExternalFormToDisk((Serializable) list, getCanonicalFullCollectionName(list));\n+        */\n+\n+        // test to make sure the canonical form has been preserved\n+        List list = makeFullList();\n+        if(list instanceof Serializable && !skipSerializedCanonicalTests()) {\n+            List list2 = (List) readExternalFormFromDisk(getCanonicalFullCollectionName(list));\n+            assertEquals(\"List is the right size\",list2.size(), 4);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Returns a {@link BulkTest} for testing {@link List#subList(int,int)}.\n+     *  The returned bulk test will run through every <code>TestList</code>\n+     *  method, <i>including</i> another <code>bulkTestSubList</code>.\n+     *  Sublists are tested until the size of the sublist is less than 10.\n+     *  Each sublist is 6 elements smaller than its parent list.\n+     *  (By default this means that two rounds of sublists will be tested).\n+     *  The verify() method is overloaded to test that the original list is\n+     *  modified when the sublist is.\n+     */\n+    public BulkTest bulkTestSubList() {\n+        if (getFullElements().length - 6 < 10) return null;\n+        return new BulkTestSubList(this);\n+    }\n+\n+\n+   static class BulkTestSubList extends AbstractTestList {\n+\n+       private AbstractTestList outer;\n+\n+\n+       BulkTestSubList(AbstractTestList outer) {\n+           super(\"\");\n+           this.outer = outer;\n+       }\n+\n+\n+       protected Object[] getFullElements() {\n+           List l = Arrays.asList(outer.getFullElements());\n+           return l.subList(3, l.size() - 3).toArray();\n+       }\n+\n+\n+       protected Object[] getOtherElements() {\n+           return outer.getOtherElements();\n+       }\n+\n+\n+       protected boolean isAddSupported() {\n+           return outer.isAddSupported();\n+       }\n+\n+       protected boolean isSetSupported() {\n+           return outer.isSetSupported();\n+       }\n+\n+       protected boolean isRemoveSupported() {\n+           return outer.isRemoveSupported();\n+       }\n+\n+\n+       protected List makeEmptyList() { \n+           return outer.makeFullList().subList(4, 4); \n+       }\n+\n+\n+       protected List makeFullList() {\n+           int size = getFullElements().length;\n+           return outer.makeFullList().subList(3, size - 3);\n+       }\n+\n+\n+       protected void resetEmpty() {\n+           outer.resetFull();\n+           this.collection = outer.getList().subList(4, 4);\n+           this.confirmed = outer.getConfirmedList().subList(4, 4);\n+       }\n+\n+       protected void resetFull() {\n+           outer.resetFull();\n+           int size = outer.confirmed.size();\n+           this.collection = outer.getList().subList(3, size - 3);\n+           this.confirmed = outer.getConfirmedList().subList(3, size - 3);\n+       }\n+\n+\n+       protected void verify() {\n+           super.verify();\n+           outer.verify();\n+       }\n+\n+   }\n+\n+\n+   /**\n+    *  Tests that a sublist raises a {@link java.util.ConcurrentModificationException ConcurrentModificationException}\n+    *  if elements are added to the original list.\n+    */\n+   public void testListSubListFailFastOnAdd() {\n+       if (!isFailFastSupported()) return;\n+       if (!isAddSupported()) return;\n+\n+       resetFull();\n+       int size = collection.size();\n+       List sub = getList().subList(1, size);\n+       getList().add(getOtherElements()[0]);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().add(0, getOtherElements()[0]);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().addAll(Arrays.asList(getOtherElements()));\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().addAll(0, Arrays.asList(getOtherElements()));\n+       failFastAll(sub);\n+\n+   }\n+\n+\n+   /**\n+    *  Tests that a sublist raises a {@link java.util.ConcurrentModificationException ConcurrentModificationException}\n+    *  if elements are removed from the original list.\n+    */\n+   public void testListSubListFailFastOnRemove() {\n+       if (!isFailFastSupported()) return;\n+       if (!isRemoveSupported()) return;\n+\n+       resetFull();\n+       int size = collection.size();\n+       List sub = getList().subList(1, size);\n+       getList().remove(0);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().remove(getFullElements()[2]);\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().removeAll(Arrays.asList(getFullElements()));\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().retainAll(Arrays.asList(getOtherElements()));\n+       failFastAll(sub);\n+\n+       resetFull();\n+       sub = getList().subList(1, size);\n+       getList().clear();\n+       failFastAll(sub);\n+   }\n+\n+\n+   /**\n+    *  Invokes all the methods on the given sublist to make sure they raise\n+    *  a {@link java.util.ConcurrentModificationException ConcurrentModificationException}.\n+    */\n+   protected void failFastAll(List list) {\n+       Method[] methods = List.class.getMethods();\n+       for (int i = 0; i < methods.length; i++) {\n+           failFastMethod(list, methods[i]);\n+       }\n+   }\n+\n+\n+   /**\n+    *  Invokes the given method on the given sublist to make sure it raises\n+    *  a {@link java.util.ConcurrentModificationException ConcurrentModificationException}.\n+    *\n+    *  Unless the method happens to be the equals() method, in which case\n+    *  the test is skipped.  There seems to be a bug in\n+    *  java.util.AbstractList.subList(int,int).equals(Object) -- it never\n+    *  raises a ConcurrentModificationException.\n+    *\n+    *  @param list  the sublist to test\n+    *  @param m     the method to invoke\n+    */\n+   protected void failFastMethod(List list, Method m) {\n+       if (m.getName().equals(\"equals\")) return;\n+\n+       Object element = getOtherElements()[0];\n+       Collection c = Collections.singleton(element);\n+\n+       Class[] types = m.getParameterTypes();\n+       Object[] params = new Object[types.length];\n+       for (int i = 0; i < params.length; i++) {\n+           if (types[i] == Integer.TYPE) params[i] = new Integer(0);\n+           else if (types[i] == Collection.class) params[i] = c;\n+           else if (types[i] == Object.class) params[i] = element;\n+           else if (types[i] == Object[].class) params[i] = new Object[0];\n+       }\n+\n+       try {\n+           m.invoke(list, params);\n+           fail(m.getName() + \" should raise ConcurrentModification\");\n+       } catch (IllegalAccessException e) {\n+           // impossible\n+       } catch (InvocationTargetException e) {\n+           Throwable t = e.getTargetException();\n+           if (t instanceof ConcurrentModificationException) {\n+               // expected\n+               return;\n+           } else {\n+               fail(m.getName() + \" raised unexpected \" + e);\n+           }\n+       }\n+   }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/collections/AbstractTestObject.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/AbstractTestObject.java,v 1.1 2003/10/02 22:14:29 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+\n+/**\n+ * Abstract test class for {@link java.lang.Object} methods and contracts.\n+ * <p>\n+ * To use, simply extend this class, and implement\n+ * the {@link #makeObject()} method.\n+ * <p>\n+ * If your {@link Object} fails one of these tests by design,\n+ * you may still use this base set of cases.  Simply override the\n+ * test case (method) your {@link Object} fails.\n+ *\n+ * @version $Revision: 1.1 $ $Date: 2003/10/02 22:14:29 $\n+ * \n+ * @author Rodney Waldhoff\n+ * @author Stephen Colebourne\n+ * @author Anonymous\n+ */\n+public abstract class AbstractTestObject extends BulkTest {\n+\n+    /** Current major release for Collections */\n+    public static final int COLLECTIONS_MAJOR_VERSION = 3;\n+    \n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param testName  the test class name\n+     */\n+    public AbstractTestObject(String testName) {\n+        super(testName);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implement this method to return the object to test.\n+     * \n+     * @return the object to test\n+     */\n+    protected abstract Object makeObject();\n+\n+    /**\n+     * Override this method if a subclass is testing an object\n+     * that cannot serialize an \"empty\" Collection.\n+     * (e.g. Comparators have no contents)\n+     * \n+     * @return true\n+     */\n+    protected boolean supportsEmptyCollections() {\n+        return true;\n+    }\n+\n+    /**\n+     * Override this method if a subclass is testing an object\n+     * that cannot serialize a \"full\" Collection.\n+     * (e.g. Comparators have no contents)\n+     * \n+     * @return true\n+     */\n+    protected boolean supportsFullCollections() {\n+        return true;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testObjectEqualsSelf() {\n+        Object obj = makeObject();\n+        assertEquals(\"A Object should equal itself\", obj, obj);\n+    }\n+\n+    public void testEqualsNull() {\n+        Object obj = makeObject();\n+        assertEquals(false, obj.equals(null)); // make sure this doesn't throw NPE either\n+    }\n+\n+    public void testObjectHashCodeEqualsSelfHashCode() {\n+        Object obj = makeObject();\n+        assertEquals(\"hashCode should be repeatable\", obj.hashCode(), obj.hashCode());\n+    }\n+\n+    public void testObjectHashCodeEqualsContract() {\n+        Object obj1 = makeObject();\n+        if (obj1.equals(obj1)) {\n+            assertEquals(\n+                \"[1] When two objects are equal, their hashCodes should be also.\",\n+                obj1.hashCode(), obj1.hashCode());\n+        }\n+        Object obj2 = makeObject();\n+        if (obj1.equals(obj2)) {\n+            assertEquals(\n+                \"[2] When two objects are equal, their hashCodes should be also.\",\n+                obj1.hashCode(), obj2.hashCode());\n+            assertTrue(\n+                \"When obj1.equals(obj2) is true, then obj2.equals(obj1) should also be true\",\n+                obj2.equals(obj1));\n+        }\n+    }\n+\n+    public void testSerializeDeserializeThenCompare() throws Exception {\n+        Object obj = makeObject();\n+        if (obj instanceof Serializable) {\n+            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+            ObjectOutputStream out = new ObjectOutputStream(buffer);\n+            out.writeObject(obj);\n+            out.close();\n+\n+            ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n+            Object dest = in.readObject();\n+            in.close();\n+            assertEquals(\"obj != deserialize(serialize(obj))\", obj, dest);\n+        }\n+    }\n+\n+    /**\n+     * Sanity check method, makes sure that any Serializable\n+     * class can be serialized and de-serialized in memory, \n+     * using the handy makeObject() method\n+     * \n+     * @throws IOException\n+     * @throws ClassNotFoundException\n+     */\n+    public void testSimpleSerialization() throws IOException, ClassNotFoundException {\n+        Object o = makeObject();\n+        if (o instanceof Serializable) {\n+            byte[] objekt = writeExternalFormToBytes((Serializable) o);\n+            Object p = readExternalFormFromBytes(objekt);\n+        }\n+    }\n+\n+    /**\n+     * Tests serialization by comparing against a previously stored version in CVS.\n+     * If the test object is serializable, confirm that a canonical form exists.\n+     */\n+    public void testCanonicalEmptyCollectionExists() {\n+        if (supportsEmptyCollections()) {\n+            Object object = makeObject();\n+            if (object instanceof Serializable) {\n+                String name = getCanonicalEmptyCollectionName(object);\n+                assertTrue(\n+                    \"Canonical empty collection (\" + name + \") is not in CVS\",\n+                    new File(name).exists());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Tests serialization by comparing against a previously stored version in CVS.\n+     * If the test object is serializable, confirm that a canonical form exists.\n+     */\n+    public void testCanonicalFullCollectionExists() {\n+        if (supportsFullCollections()) {\n+            Object object = makeObject();\n+            if (object instanceof Serializable) {\n+                String name = getCanonicalFullCollectionName(object);\n+                assertTrue(\n+                    \"Canonical full collection (\" + name + \") is not in CVS\",\n+                    new File(name).exists());\n+            }\n+        }\n+    }\n+\n+    // protected implementation\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the version of Collections that this object tries to\n+     * maintain serialization compatibility with. Defaults to 1, the\n+     * earliest Collections version. (Note: some collections did not\n+     * even exist in this version).\n+     * \n+     * This constant makes it possible for TestMap (and other subclasses,\n+     * if necessary) to automatically check CVS for a versionX copy of a\n+     * Serialized object, so we can make sure that compatibility is maintained.\n+     * See, for example, TestMap.getCanonicalFullMapName(Map map).\n+     * Subclasses can override this variable, indicating compatibility\n+     * with earlier Collections versions.\n+     * \n+     * @return The version, or <code>null</code> if this object shouldn't be\n+     * tested for compatibility with previous versions.\n+     */\n+    protected String getCompatibilityVersion() {\n+        return \"1\";\n+    }\n+\n+    protected String getCanonicalEmptyCollectionName(Object object) {\n+        StringBuffer retval = new StringBuffer();\n+        retval.append(\"data/test/\");\n+        String colName = object.getClass().getName();\n+        colName = colName.substring(colName.lastIndexOf(\".\") + 1, colName.length());\n+        retval.append(colName);\n+        retval.append(\".emptyCollection.version\");\n+        retval.append(getCompatibilityVersion());\n+        retval.append(\".obj\");\n+        return retval.toString();\n+    }\n+\n+    protected String getCanonicalFullCollectionName(Object object) {\n+        StringBuffer retval = new StringBuffer();\n+        retval.append(\"data/test/\");\n+        String colName = object.getClass().getName();\n+        colName = colName.substring(colName.lastIndexOf(\".\") + 1, colName.length());\n+        retval.append(colName);\n+        retval.append(\".fullCollection.version\");\n+        retval.append(getCompatibilityVersion());\n+        retval.append(\".obj\");\n+        return retval.toString();\n+    }\n+\n+    /**\n+     * Write a Serializable or Externalizable object as\n+     * a file at the given path.  NOT USEFUL as part\n+     * of a unit test; this is just a utility method\n+     * for creating disk-based objects in CVS that can become\n+     * the basis for compatibility tests using\n+     * readExternalFormFromDisk(String path)\n+     * \n+     * @param o Object to serialize\n+     * @param path path to write the serialized Object\n+     * @exception IOException\n+     */\n+    protected void writeExternalFormToDisk(Serializable o, String path) throws IOException {\n+        FileOutputStream fileStream = new FileOutputStream(path);\n+        writeExternalFormToStream(o, fileStream);\n+    }\n+\n+    /**\n+     * Converts a Serializable or Externalizable object to\n+     * bytes.  Useful for in-memory tests of serialization\n+     * \n+     * @param o Object to convert to bytes\n+     * @return serialized form of the Object\n+     * @exception IOException\n+     */\n+    protected byte[] writeExternalFormToBytes(Serializable o) throws IOException {\n+        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n+        writeExternalFormToStream(o, byteStream);\n+        return byteStream.toByteArray();\n+    }\n+\n+    /**\n+     * Reads a Serialized or Externalized Object from disk.\n+     * Useful for creating compatibility tests between\n+     * different CVS versions of the same class\n+     * \n+     * @param path path to the serialized Object\n+     * @return the Object at the given path\n+     * @exception IOException\n+     * @exception ClassNotFoundException\n+     */\n+    protected Object readExternalFormFromDisk(String path) throws IOException, ClassNotFoundException {\n+        FileInputStream stream = new FileInputStream(path);\n+        return readExternalFormFromStream(stream);\n+    }\n+\n+    /**\n+     * Read a Serialized or Externalized Object from bytes.\n+     * Useful for verifying serialization in memory.\n+     * \n+     * @param b byte array containing a serialized Object\n+     * @return Object contained in the bytes\n+     * @exception IOException\n+     * @exception ClassNotFoundException\n+     */\n+    protected Object readExternalFormFromBytes(byte[] b) throws IOException, ClassNotFoundException {\n+        ByteArrayInputStream stream = new ByteArrayInputStream(b);\n+        return readExternalFormFromStream(stream);\n+    }\n+\n+    protected boolean skipSerializedCanonicalTests() {\n+        return Boolean.getBoolean(\"org.apache.commons.collections:with-clover\");\n+    }\n+\n+    // private implementation\n+    //-----------------------------------------------------------------------\n+    private Object readExternalFormFromStream(InputStream stream) throws IOException, ClassNotFoundException {\n+        ObjectInputStream oStream = new ObjectInputStream(stream);\n+        return oStream.readObject();\n+    }\n+\n+    private void writeExternalFormToStream(Serializable o, OutputStream stream) throws IOException {\n+        ObjectOutputStream oStream = new ObjectOutputStream(stream);\n+        oStream.writeObject(o);\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/collections/BulkTest.java\n+++ b/src/test/org/apache/commons/collections/BulkTest.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/BulkTest.java,v 1.5 2003/10/02 22:14:29 scolebourne Exp $\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n package org.apache.commons.collections;\n-\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.InvocationTargetException;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-\n /**\n- *  A {@link TestCase} that can define both simple and bulk test methods.<P>\n- *\n- *  A <I>simple test method</I> is the type of test traditionally \n- *  supplied by by {@link TestCase}.  To define a simple test, create a public \n- *  no-argument method whose name starts with \"test\".  You can specify the\n- *  the name of simple test in the constructor of <Code>BulkTest</Code>;\n- *  a subsequent call to {@link TestCase#run} will run that simple test.<P>\n- *\n- *  A <I>bulk test method</I>, on the other hand, returns a new instance\n- *  of <Code>BulkTest</Code>, which can itself define new simple and bulk\n- *  test methods.  By using the {@link #makeSuite} method, you can \n- *  automatically create a hierarchal suite of tests and child bulk tests.<P>\n- *\n- *  For instance, consider the following two classes:\n- *\n- *  <Pre>\n+ * A {@link TestCase} that can define both simple and bulk test methods.\n+ * <p>\n+ * A <I>simple test method</I> is the type of test traditionally \n+ * supplied by by {@link TestCase}.  To define a simple test, create a public \n+ * no-argument method whose name starts with \"test\".  You can specify the\n+ * the name of simple test in the constructor of <code>BulkTest</code>;\n+ * a subsequent call to {@link TestCase#run} will run that simple test.\n+ * <p>\n+ * A <I>bulk test method</I>, on the other hand, returns a new instance\n+ * of <code>BulkTest</code>, which can itself define new simple and bulk\n+ * test methods.  By using the {@link #makeSuite} method, you can \n+ * automatically create a hierarchal suite of tests and child bulk tests.\n+ * <p>\n+ * For instance, consider the following two classes:\n+ *\n+ * <Pre>\n  *  public class TestSet extends BulkTest {\n  *\n  *      private Set set;\n  *  }\n  *  </Pre>\n  *\n- *  In the above examples, <Code>TestSet</Code> defines two\n- *  simple test methods and no bulk test methods; <Code>TestHashMap</Code>\n+ *  In the above examples, <code>TestSet</code> defines two\n+ *  simple test methods and no bulk test methods; <code>TestHashMap</code>\n  *  defines one simple test method and two bulk test methods.  When\n- *  <Code>makeSuite(TestHashMap.class).run</Code> is executed, \n+ *  <code>makeSuite(TestHashMap.class).run</code> is executed, \n  *  <I>five</I> simple test methods will be run, in this order:<P>\n  *\n  *  <Ol>\n  *  </UL>\n  *\n  *  A subclass can override a superclass's bulk test by\n- *  returning <Code>null</Code> from the bulk test method.  If you only\n+ *  returning <code>null</code> from the bulk test method.  If you only\n  *  want to override specific simple tests within a bulk test, use the\n  *  {@link #ignoredSimpleTests} method.<P>\n  *\n  *  Note that if you want to use the bulk test methods, you <I>must</I>\n- *  define your <Code>suite()</Code> method to use {@link #makeSuite}.\n+ *  define your <code>suite()</code> method to use {@link #makeSuite}.\n  *  The ordinary {@link TestSuite} constructor doesn't know how to \n  *  interpret bulk test methods.\n  *\n  *  @author Paul Jack\n- *  @version $Id: BulkTest.java,v 1.4 2003/08/31 13:09:53 scolebourne Exp $\n+ *  @version $Id: BulkTest.java,v 1.5 2003/10/02 22:14:29 scolebourne Exp $\n  */\n public class BulkTest extends TestCase implements Cloneable {\n \n \n \n     /**\n-     *  Constructs a new <Code>BulkTest</Code> instance that will run the\n+     *  Constructs a new <code>BulkTest</code> instance that will run the\n      *  specified simple test.\n      *\n      *  @param name  the name of the simple test method to run\n \n \n     /**\n-     *  Creates a clone of this <Code>BulkTest</Code>.<P>\n-     *\n-     *  @return  a clone of this <Code>BulkTest</Code>\n+     *  Creates a clone of this <code>BulkTest</code>.<P>\n+     *\n+     *  @return  a clone of this <code>BulkTest</code>\n      */\n     public Object clone() {\n         try {\n     /**\n      *  Returns an array of simple test names to ignore.<P>\n      *\n-     *  If a simple test that's defined by this <Code>BulkTest</Code> or\n+     *  If a simple test that's defined by this <code>BulkTest</code> or\n      *  by one of its bulk test methods has a name that's in the returned\n      *  array, then that simple test will not be executed.<P>\n      *\n      *  A simple test's name is formed by taking the class name of the\n-     *  root <Code>BulkTest</Code>, eliminating the package name, then\n+     *  root <code>BulkTest</code>, eliminating the package name, then\n      *  appending the names of any bulk test methods that were invoked\n      *  to get to the simple test, and then appending the simple test\n      *  method name.  The method names are delimited by periods:\n      *  </Pre>\n      *\n      *  is the name of one of the simple tests defined in the sample classes\n-     *  described above.  If the sample <Code>TestHashMap</Code> class\n+     *  described above.  If the sample <code>TestHashMap</code> class\n      *  included this method:\n      *\n      *  <Pre>\n \n \n     /**\n-     *  Returns the display name of this <Code>BulkTest</Code>.\n-     *\n-     *  @return the display name of this <Code>BulkTest</Code>\n+     *  Returns the display name of this <code>BulkTest</code>.\n+     *\n+     *  @return the display name of this <code>BulkTest</code>\n      */\n     public String toString() {\n         return getName() + \"(\" + verboseName + \") \";\n      *  bulk tests are also examined recursively; and the results are stored\n      *  in a hierarchal {@link TestSuite}.<P>\n      *\n-     *  The given class must be a subclass of <Code>BulkTest</Code> and must\n+     *  The given class must be a subclass of <code>BulkTest</code> and must\n      *  not be abstract.<P>\n      *\n      *  @param c  the class to examine for simple and bulk tests\n // it easier to handle the recursion.\n class BulkTestSuiteMaker {\n \n-\n     /** The class that defines simple and bulk tests methods. */\n     private Class startingClass;\n \n-\n     /** List of ignored simple test names. */\n     private List ignored;\n-\n    \n     /** The TestSuite we're currently populating.  Can change over time. */\n     private TestSuite result;\n-\n \n     /** \n      *  The prefix for simple test methods.  Used to check if a test is in \n      */ \n     private String prefix;\n \n-\n     /** \n      *  Constructor.\n      *\n     public BulkTestSuiteMaker(Class startingClass) {\n         this.startingClass = startingClass;\n     }\n-\n \n     /**\n      *  Makes a hierarchal TestSuite based on the starting class.\n          return result;\n     }\n \n-\n     /**\n      *  Appends all the simple tests and bulk tests defined by the given\n      *  instance's class to the current TestSuite.\n         }\n     }\n \n-\n     /**\n      *  Adds the simple test defined by the given method to the TestSuite.\n      *\n         if (ignored.contains(bulk2.verboseName)) return;\n         result.addTest(bulk2);\n     }\n-\n \n     /**\n      *  Adds a whole new suite of tests that are defined by the result of\n         result = oldResult;\n     }\n \n-\n     /**\n      *  Returns the base name of the given class.\n      *\n              \"a (String) constructor\");\n         }\n     }\n-\n \n     private static BulkTest makeTestCase(Class c, Method m) {\n         Constructor con = getTestCaseConstructor(c);\n         }\n     }\n \n-\n     private static BulkTest makeFirstTestCase(Class c) {\n         Method[] all = c.getMethods();\n         for (int i = 0; i < all.length; i++) {\n         throw new IllegalArgumentException(c.getName() + \" must provide \" \n           + \" at least one test method.\");\n     }\n-\n \n     /**\n      *  Returns true if the given method is a simple test method.\n         return true;\n     }\n \n-\n     /**\n      *  Returns true if the given method is a bulk test method.\n      */\n         return true;\n     }\n \n-\n }\n--- a/src/test/org/apache/commons/collections/TestArrayList.java\n+++ b/src/test/org/apache/commons/collections/TestArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestArrayList.java,v 1.7 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.7 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestArrayList.java,v 1.8 2003/10/02 22:14:29 scolebourne Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2003/10/02 22:14:29 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author <a href=\"mailto:jvanzyl@apache.org\">Jason van Zyl</a>\n- * @version $Id: TestArrayList.java,v 1.7 2003/08/31 17:28:43 scolebourne Exp $\n+ * @version $Id: TestArrayList.java,v 1.8 2003/10/02 22:14:29 scolebourne Exp $\n  */\n-public abstract class TestArrayList extends TestList\n+public abstract class TestArrayList extends AbstractTestList\n {\n     public TestArrayList(String testName)\n     {\n--- a/src/test/org/apache/commons/collections/TestBag.java\n+++ b/src/test/org/apache/commons/collections/TestBag.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBag.java,v 1.6 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBag.java,v 1.7 2003/10/02 22:14:29 scolebourne Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2003/10/02 22:14:29 $\n  *\n  * ====================================================================\n  *\n  * test case (method) your {@link Bag} fails.\n  *\n  * @author Chuck Burdick\n- * @version $Id: TestBag.java,v 1.6 2003/08/31 17:28:43 scolebourne Exp $\n+ * @version $Id: TestBag.java,v 1.7 2003/10/02 22:14:29 scolebourne Exp $\n  */\n // TODO: this class should really extend from TestCollection, but the bag\n // implementations currently do not conform to the Collection interface.  Once\n // those are fixed or at least a strategy is made for resolving the issue, this\n // can be changed back to extend TestCollection instead.\n-public abstract class TestBag extends TestObject {\n+public abstract class TestBag extends AbstractTestObject {\n     public TestBag(String testName) {\n         super(testName);\n     }\n--- a/src/test/org/apache/commons/collections/TestBinaryHeap.java\n+++ b/src/test/org/apache/commons/collections/TestBinaryHeap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBinaryHeap.java,v 1.9 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.9 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBinaryHeap.java,v 1.10 2003/10/02 22:14:29 scolebourne Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2003/10/02 22:14:29 $\n  *\n  * ====================================================================\n  *\n  * Tests the BinaryHeap.\n  * \n  * @author <a href=\"mailto:mas@apache.org\">Michael A. Smith</a>\n- * @version $Id: TestBinaryHeap.java,v 1.9 2003/08/31 17:28:43 scolebourne Exp $\n+ * @version $Id: TestBinaryHeap.java,v 1.10 2003/10/02 22:14:29 scolebourne Exp $\n  */\n-public class TestBinaryHeap extends TestCollection {\n+public class TestBinaryHeap extends AbstractTestCollection {\n \n     public static Test suite() {\n         return new TestSuite(TestBinaryHeap.class);\n--- a/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java,v 1.7 2003/08/31 17:28:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBoundedFifoBuffer.java,v 1.8 2003/10/02 22:14:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * \n  * @author Paul Jack\n  */\n-public class TestBoundedFifoBuffer extends TestCollection {\n+public class TestBoundedFifoBuffer extends AbstractTestCollection {\n \n     public TestBoundedFifoBuffer(String n) {\n         super(n);\n--- a/src/test/org/apache/commons/collections/TestBufferUtils.java\n+++ b/src/test/org/apache/commons/collections/TestBufferUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBufferUtils.java,v 1.6 2003/09/20 17:02:03 scolebourne Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/09/20 17:02:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestBufferUtils.java,v 1.7 2003/10/02 22:14:28 scolebourne Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2003/10/02 22:14:28 $\n  *\n  * ====================================================================\n  *\n \n \n     public BulkTest bulkTestUnmodifiableBuffer() {\n-        return new TestCollection(\"\") {\n+        return new AbstractTestCollection(\"\") {\n             public boolean isAddSupported() {\n                 return false;\n             }\n--- a/src/test/org/apache/commons/collections/TestCircularFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/TestCircularFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCircularFifoBuffer.java,v 1.3 2003/08/31 17:28:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestCircularFifoBuffer.java,v 1.4 2003/10/02 22:14:29 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * Test cases for CircularFifoBuffer.\n  * \n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:43 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:29 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestCircularFifoBuffer extends TestCollection {\n+public class TestCircularFifoBuffer extends AbstractTestCollection {\n \n     public TestCircularFifoBuffer(String n) {\n         super(n);\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n /*\n- * $Id: TestCollectionUtils.java,v 1.22 2003/09/25 07:19:42 psteitz Exp $\n- * $Revision: 1.22 $\n- * $Date: 2003/09/25 07:19:42 $\n+ * $Id: TestCollectionUtils.java,v 1.23 2003/10/02 22:14:29 scolebourne Exp $\n+ * $Revision: 1.23 $\n+ * $Date: 2003/10/02 22:14:29 $\n  *\n  * ====================================================================\n  *\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  * \n- * @version $Revision: 1.22 $ $Date: 2003/09/25 07:19:42 $\n+ * @version $Revision: 1.23 $ $Date: 2003/10/02 22:14:29 $\n  */\n public class TestCollectionUtils extends TestCase {\n     public TestCollectionUtils(String testName) {\n             }\n  \n             public BulkTest bulkTestAll() {\n-                return new TestCollection(\"\") {\n+                return new AbstractTestCollection(\"\") {\n                     public Collection makeCollection() {\n                         return typedCollection();\n                     }\n--- a/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.11 2003/09/27 10:07:14 scolebourne Exp $\n- * $Revision: 1.11 $\n- * $Date: 2003/09/27 10:07:14 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.12 2003/10/02 22:14:29 scolebourne Exp $\n+ * $Revision: 1.12 $\n+ * $Date: 2003/10/02 22:14:29 $\n  *\n  * ====================================================================\n  *\n  * \n  * @author Rodney Waldhoff\n  * @author Simon Kitching\n- * @version $Id: TestCursorableLinkedList.java,v 1.11 2003/09/27 10:07:14 scolebourne Exp $\n+ * @version $Id: TestCursorableLinkedList.java,v 1.12 2003/10/02 22:14:29 scolebourne Exp $\n  */\n-public class TestCursorableLinkedList extends TestList {\n+public class TestCursorableLinkedList extends AbstractTestList {\n     public TestCursorableLinkedList(String testName) {\n         super(testName);\n     }\n--- a/src/test/org/apache/commons/collections/TestLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLinkedList.java,v 1.3 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.3 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestLinkedList.java,v 1.4 2003/10/02 22:14:29 scolebourne Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2003/10/02 22:14:29 $\n  *\n  * ====================================================================\n  *\n  * test case (method) your {@link List} fails.\n  *\n  * @author <a href=\"mailto:rich@rd.gen.nz\">Rich Dougherty</a>\n- * @version $Id: TestLinkedList.java,v 1.3 2003/08/31 17:28:43 scolebourne Exp $\n+ * @version $Id: TestLinkedList.java,v 1.4 2003/10/02 22:14:29 scolebourne Exp $\n  */\n-public abstract class TestLinkedList extends TestList {\n+public abstract class TestLinkedList extends AbstractTestList {\n \n     public TestLinkedList(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/TestListUtils.java\n+++ b/src/test/org/apache/commons/collections/TestListUtils.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.12 2003/09/20 17:02:03 scolebourne Exp $\n- * $Revision: 1.12 $\n- * $Date: 2003/09/20 17:02:03 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestListUtils.java,v 1.13 2003/10/02 22:14:29 scolebourne Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2003/10/02 22:14:29 $\n  *\n  * ====================================================================\n  *\n             }\n \n             public BulkTest bulkTestAll() {\n-                return new TestList(\"\") {\n+                return new AbstractTestList(\"\") {\n                     public List makeEmptyList() {\n                         return (List)typedCollection();\n                     }\n--- a/src/test/org/apache/commons/collections/TestMap.java\n+++ b/src/test/org/apache/commons/collections/TestMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.28 2003/10/02 04:04:22 bayard Exp $\n- * $Revision: 1.28 $\n- * $Date: 2003/10/02 04:04:22 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.29 2003/10/02 22:14:28 scolebourne Exp $\n+ * $Revision: 1.29 $\n+ * $Date: 2003/10/02 22:14:28 $\n  *\n  * ====================================================================\n  *\n  * @author Michael Smith\n  * @author Rodney Waldhoff\n  * @author Paul Jack\n- * @version $Revision: 1.28 $ $Date: 2003/10/02 04:04:22 $\n+ * @version $Revision: 1.29 $ $Date: 2003/10/02 22:14:28 $\n  */\n-public abstract class TestMap extends TestObject {\n+public abstract class TestMap extends AbstractTestObject {\n \n     // These instance variables are initialized with the reset method.\n     // Tests for map methods that alter the map (put, putAll, remove) \n         return new TestMapValues();\n     }\n \n-    class TestMapValues extends TestCollection {\n+    class TestMapValues extends AbstractTestCollection {\n         public TestMapValues() {\n             super(\"\");\n         }\n--- a/src/test/org/apache/commons/collections/TestSet.java\n+++ b/src/test/org/apache/commons/collections/TestSet.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestSet.java,v 1.5 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.5 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestSet.java,v 1.6 2003/10/02 22:14:29 scolebourne Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2003/10/02 22:14:29 $\n  *\n  * ====================================================================\n  *\n  *  elements may be added; see {@link TestCollection} for more details.<P>\n  *\n  *  @author Paul Jack\n- *  @version $Id: TestSet.java,v 1.5 2003/08/31 17:28:43 scolebourne Exp $\n+ *  @version $Id: TestSet.java,v 1.6 2003/10/02 22:14:29 scolebourne Exp $\n  */\n-public abstract class TestSet extends TestCollection {\n+public abstract class TestSet extends AbstractTestCollection {\n \n     /**\n      *  Constructor.\n--- a/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java\n+++ b/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java,v 1.6 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.6 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestUnboundedFifoBuffer.java,v 1.7 2003/10/02 22:14:29 scolebourne Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2003/10/02 22:14:29 $\n  *\n  * ====================================================================\n  *\n /**\n  * Test cases for UnboundedFifoBuffer.\n  */\n-public class TestUnboundedFifoBuffer extends TestCollection {\n+public class TestUnboundedFifoBuffer extends AbstractTestCollection {\n \n     public TestUnboundedFifoBuffer(String n) {\n         super(n);\n--- a/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n+++ b/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java,v 1.1 2003/10/01 22:14:48 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/comparators/AbstractTestComparator.java,v 1.2 2003/10/02 22:14:35 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n \n /**\n  * Abstract test class for testing the Comparator interface.\n  * \n  * @author Stephen Colebourne\n  */\n-public abstract class AbstractTestComparator extends TestObject {\n+public abstract class AbstractTestComparator extends AbstractTestObject {\n \n     /**\n      * JUnit constructor.\n--- a/src/test/org/apache/commons/collections/decorators/TestBlockingBuffer.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestBlockingBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestBlockingBuffer.java,v 1.3 2003/09/20 17:05:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestBlockingBuffer.java,v 1.4 2003/10/02 22:14:34 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.Buffer;\n import org.apache.commons.collections.BufferUnderflowException;\n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n \n /**\n  * Extension of {@link TestObject} for exercising the {@link BlockingBuffer}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $\n+ * @version $Revision: 1.4 $\n  * \n  * @author Janek Bogucki\n  * @author Phil Steitz\n  */\n-public class TestBlockingBuffer extends TestObject {\n+public class TestBlockingBuffer extends AbstractTestObject {\n \n     public TestBlockingBuffer(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/decorators/TestFixedSizeList.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestFixedSizeList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestFixedSizeList.java,v 1.3 2003/08/31 17:28:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestFixedSizeList.java,v 1.4 2003/10/02 22:14:34 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n \n /**\n  * Extension of {@link TestList} for exercising the {@link FixedSizeList}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:42 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:34 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestFixedSizeList extends TestList {\n+public class TestFixedSizeList extends AbstractTestList {\n \n     public TestFixedSizeList(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/decorators/TestPredicatedCollection.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedCollection.java\n \n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.PredicateUtils;\n-import org.apache.commons.collections.TestCollection;\n+import org.apache.commons.collections.AbstractTestCollection;\n \n /**\n  * Extension of {@link TestCollection} for exercising the \n  * {@link PredicatedCollection} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/20 17:05:36 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:34 $\n  * \n  * @author Phil Steitz\n  */\n-public class TestPredicatedCollection extends TestCollection {\n+public class TestPredicatedCollection extends AbstractTestCollection {\n \n     public TestPredicatedCollection(String name) {\n         super(name);\n--- a/src/test/org/apache/commons/collections/decorators/TestPredicatedList.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestPredicatedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedList.java,v 1.2 2003/09/20 17:05:36 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestPredicatedList.java,v 1.3 2003/10/02 22:14:34 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.Predicate;\n import org.apache.commons.collections.PredicateUtils;\n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n \n /**\n  * Extension of {@link TestList} for exercising the \n  * {@link PredicatedList} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/09/20 17:05:36 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:34 $\n  * \n  * @author Phil Steitz\n  */\n-public class TestPredicatedList extends TestList{\n+public class TestPredicatedList extends AbstractTestList{\n     \n     public TestPredicatedList(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/decorators/TestTransformedCollection.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestTransformedCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedCollection.java,v 1.3 2003/08/31 17:28:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedCollection.java,v 1.4 2003/10/02 22:14:34 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestCollection;\n+import org.apache.commons.collections.AbstractTestCollection;\n import org.apache.commons.collections.Transformer;\n \n /**\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:42 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:34 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestTransformedCollection extends TestCollection {\n+public class TestTransformedCollection extends AbstractTestCollection {\n     \n     private static class Noop implements Transformer, Serializable {\n         public Object transform(Object input) {\n--- a/src/test/org/apache/commons/collections/decorators/TestTransformedList.java\n+++ b/src/test/org/apache/commons/collections/decorators/TestTransformedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedList.java,v 1.2 2003/08/31 17:28:42 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/decorators/Attic/TestTransformedList.java,v 1.3 2003/10/02 22:14:34 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n \n /**\n  * Extension of {@link TestList} for exercising the {@link TransformedList}\n  * implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:42 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:34 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestTransformedList extends TestList {\n+public class TestTransformedList extends AbstractTestList {\n     \n     public TestTransformedList(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java\n+++ b/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java,v 1.1 2003/10/01 21:54:54 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/iterators/AbstractTestIterator.java,v 1.2 2003/10/02 22:14:34 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n \n /**\n  * Abstract class for testing the Iterator interface.\n  * overriding the supportsXxx() methods if necessary.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/10/01 21:54:54 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/02 22:14:34 $\n  * \n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n  */\n-public abstract class AbstractTestIterator extends TestObject {\n+public abstract class AbstractTestIterator extends AbstractTestObject {\n \n     /**\n      * JUnit constructor.\n--- a/src/test/org/apache/commons/collections/observed/TestObservableBuffer.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableBuffer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBuffer.java,v 1.1 2003/09/21 20:01:53 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableBuffer.java,v 1.2 2003/10/02 22:14:35 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.ArrayStack;\n-import org.apache.commons.collections.TestCollection;\n+import org.apache.commons.collections.AbstractTestCollection;\n \n /**\n  * Extension of {@link TestCollection} for exercising the\n  * {@link ObservableBuffer} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/21 20:01:53 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/02 22:14:35 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestObservableBuffer extends TestCollection implements ObservedTestHelper.ObservedFactory {\n+public class TestObservableBuffer extends AbstractTestCollection implements ObservedTestHelper.ObservedFactory {\n     \n     public TestObservableBuffer(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/observed/TestObservableCollection.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableCollection.java,v 1.1 2003/09/21 20:01:53 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableCollection.java,v 1.2 2003/10/02 22:14:35 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestCollection;\n+import org.apache.commons.collections.AbstractTestCollection;\n \n /**\n  * Extension of {@link TestCollection} for exercising the\n  * {@link ObservedCollection} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/21 20:01:53 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/02 22:14:35 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestObservableCollection extends TestCollection implements ObservedTestHelper.ObservedFactory {\n+public class TestObservableCollection extends AbstractTestCollection implements ObservedTestHelper.ObservedFactory {\n     \n     public TestObservableCollection(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/observed/TestObservableList.java\n+++ b/src/test/org/apache/commons/collections/observed/TestObservableList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableList.java,v 1.1 2003/09/21 20:01:53 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/observed/Attic/TestObservableList.java,v 1.2 2003/10/02 22:14:34 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n \n /**\n  * Extension of {@link TestList} for exercising the\n  * {@link ObservedList} implementation.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/09/21 20:01:53 $\n+ * @version $Revision: 1.2 $ $Date: 2003/10/02 22:14:34 $\n  * \n  * @author Stephen Colebourne\n  */\n-public class TestObservableList extends TestList implements ObservedTestHelper.ObservedFactory {\n+public class TestObservableList extends AbstractTestList implements ObservedTestHelper.ObservedFactory {\n     \n     public TestObservableList(String testName) {\n         super(testName);\n--- a/src/test/org/apache/commons/collections/primitives/TestAbstractLongArrayList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestAbstractLongArrayList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractLongArrayList.java,v 1.7 2003/08/31 17:28:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestAbstractLongArrayList.java,v 1.8 2003/10/02 22:14:33 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n \n import java.util.List;\n \n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n \n /**\n- * @version $Revision: 1.7 $ $Date: 2003/08/31 17:28:41 $\n+ * @version $Revision: 1.8 $ $Date: 2003/10/02 22:14:33 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestAbstractLongArrayList extends TestList {\n+public abstract class TestAbstractLongArrayList extends AbstractTestList {\n \n     //------------------------------------------------------------ Conventional\n \n--- a/src/test/org/apache/commons/collections/primitives/TestByteList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestByteList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestByteList.java,v 1.3 2003/08/31 17:28:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestByteList.java,v 1.4 2003/10/02 22:14:33 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.ByteListList;\n import org.apache.commons.collections.primitives.adapters.ListByteList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:41 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:33 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestByteList extends TestList {\n+public abstract class TestByteList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/TestCharList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestCharList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestCharList.java,v 1.3 2003/08/31 17:28:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestCharList.java,v 1.4 2003/10/02 22:14:33 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.CharListList;\n import org.apache.commons.collections.primitives.adapters.ListCharList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:40 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:33 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestCharList extends TestList {\n+public abstract class TestCharList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/TestDoubleList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestDoubleList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestDoubleList.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestDoubleList.java,v 1.3 2003/10/02 22:14:33 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.DoubleListList;\n import org.apache.commons.collections.primitives.adapters.ListDoubleList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:40 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:33 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestDoubleList extends TestList {\n+public abstract class TestDoubleList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/TestFloatList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestFloatList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestFloatList.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestFloatList.java,v 1.3 2003/10/02 22:14:33 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.FloatListList;\n import org.apache.commons.collections.primitives.adapters.ListFloatList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:40 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:33 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestFloatList extends TestList {\n+public abstract class TestFloatList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/TestIntList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestIntList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.10 2003/08/31 17:28:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestIntList.java,v 1.11 2003/10/02 22:14:33 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.IntListList;\n import org.apache.commons.collections.primitives.adapters.ListIntList;\n \n /**\n- * @version $Revision: 1.10 $ $Date: 2003/08/31 17:28:40 $\n+ * @version $Revision: 1.11 $ $Date: 2003/10/02 22:14:33 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestIntList extends TestList {\n+public abstract class TestIntList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/TestLongList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestLongList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongList.java,v 1.2 2003/08/31 17:28:40 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestLongList.java,v 1.3 2003/10/02 22:14:33 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.LongListList;\n import org.apache.commons.collections.primitives.adapters.ListLongList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:40 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:33 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestLongList extends TestList {\n+public abstract class TestLongList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/TestShortList.java\n+++ b/src/test/org/apache/commons/collections/primitives/TestShortList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestShortList.java,v 1.3 2003/08/31 17:28:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/Attic/TestShortList.java,v 1.4 2003/10/02 22:14:33 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.adapters.ShortListList;\n import org.apache.commons.collections.primitives.adapters.ListShortList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:41 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:33 $\n  * @author Rodney Waldhoff\n  */\n-public abstract class TestShortList extends TestList {\n+public abstract class TestShortList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestByteCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestByteCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteCollectionCollection.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteCollectionCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.RandomAccessByteList;\n import org.apache.commons.collections.primitives.ArrayByteList;\n import org.apache.commons.collections.primitives.ByteList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestByteCollectionCollection extends TestObject {\n+public class TestByteCollectionCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestByteListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestByteListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteListList.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestByteListList.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.RandomAccessByteList;\n import org.apache.commons.collections.primitives.ArrayByteList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestByteListList extends TestList {\n+public class TestByteListList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCharCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCharCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharCollectionCollection.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharCollectionCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.RandomAccessCharList;\n import org.apache.commons.collections.primitives.ArrayCharList;\n import org.apache.commons.collections.primitives.CharList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCharCollectionCollection extends TestObject {\n+public class TestCharCollectionCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCharListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCharListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharListList.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCharListList.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.RandomAccessCharList;\n import org.apache.commons.collections.primitives.ArrayCharList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCharListList extends TestList {\n+public class TestCharListList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionByteCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionByteCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionByteCollection.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionByteCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.ByteCollection;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCollectionByteCollection extends TestObject {\n+public class TestCollectionByteCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionCharCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionCharCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionCharCollection.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionCharCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.CharCollection;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCollectionCharCollection extends TestObject {\n+public class TestCollectionCharCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionDoubleCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionDoubleCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionDoubleCollection.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionDoubleCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.DoubleCollection;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCollectionDoubleCollection extends TestObject {\n+public class TestCollectionDoubleCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionFloatCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionFloatCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionFloatCollection.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionFloatCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.FloatCollection;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCollectionFloatCollection extends TestObject {\n+public class TestCollectionFloatCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionIntCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionIntCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionIntCollection.java,v 1.3 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionIntCollection.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.IntCollection;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCollectionIntCollection extends TestObject {\n+public class TestCollectionIntCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionLongCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionLongCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionLongCollection.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionLongCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.LongCollection;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCollectionLongCollection extends TestObject {\n+public class TestCollectionLongCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionShortCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestCollectionShortCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionShortCollection.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestCollectionShortCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.ShortCollection;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestCollectionShortCollection extends TestObject {\n+public class TestCollectionShortCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleCollectionCollection.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleCollectionCollection.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.RandomAccessDoubleList;\n import org.apache.commons.collections.primitives.ArrayDoubleList;\n import org.apache.commons.collections.primitives.DoubleList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestDoubleCollectionCollection extends TestObject {\n+public class TestDoubleCollectionCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestDoubleListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleListList.java,v 1.2 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestDoubleListList.java,v 1.3 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.RandomAccessDoubleList;\n import org.apache.commons.collections.primitives.ArrayDoubleList;\n \n /**\n- * @version $Revision: 1.2 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.3 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestDoubleListList extends TestList {\n+public class TestDoubleListList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestFloatCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestFloatCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatCollectionCollection.java,v 1.3 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatCollectionCollection.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.RandomAccessFloatList;\n import org.apache.commons.collections.primitives.ArrayFloatList;\n import org.apache.commons.collections.primitives.FloatList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestFloatCollectionCollection extends TestObject {\n+public class TestFloatCollectionCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestFloatListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestFloatListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatListList.java,v 1.3 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestFloatListList.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.RandomAccessFloatList;\n import org.apache.commons.collections.primitives.ArrayFloatList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestFloatListList extends TestList {\n+public class TestFloatListList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestIntCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntCollectionCollection.java,v 1.4 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntCollectionCollection.java,v 1.5 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.RandomAccessIntList;\n import org.apache.commons.collections.primitives.ArrayIntList;\n import org.apache.commons.collections.primitives.IntList;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.5 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestIntCollectionCollection extends TestObject {\n+public class TestIntCollectionCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestIntListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestIntListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListList.java,v 1.5 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestIntListList.java,v 1.6 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.RandomAccessIntList;\n import org.apache.commons.collections.primitives.ArrayIntList;\n \n /**\n- * @version $Revision: 1.5 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.6 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestIntListList extends TestList {\n+public class TestIntListList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestLongCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestLongCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongCollectionCollection.java,v 1.3 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongCollectionCollection.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.RandomAccessLongList;\n import org.apache.commons.collections.primitives.ArrayLongList;\n import org.apache.commons.collections.primitives.LongList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestLongCollectionCollection extends TestObject {\n+public class TestLongCollectionCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestLongListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestLongListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongListList.java,v 1.3 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestLongListList.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.RandomAccessLongList;\n import org.apache.commons.collections.primitives.ArrayLongList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestLongListList extends TestList {\n+public class TestLongListList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestShortCollectionCollection.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestShortCollectionCollection.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortCollectionCollection.java,v 1.3 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortCollectionCollection.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.commons.collections.TestObject;\n+import org.apache.commons.collections.AbstractTestObject;\n import org.apache.commons.collections.primitives.RandomAccessShortList;\n import org.apache.commons.collections.primitives.ArrayShortList;\n import org.apache.commons.collections.primitives.ShortList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestShortCollectionCollection extends TestObject {\n+public class TestShortCollectionCollection extends AbstractTestObject {\n \n     // conventional\n     // ------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/collections/primitives/adapters/TestShortListList.java\n+++ b/src/test/org/apache/commons/collections/primitives/adapters/TestShortListList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortListList.java,v 1.3 2003/08/31 17:28:38 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/primitives/adapters/Attic/TestShortListList.java,v 1.4 2003/10/02 22:14:31 scolebourne Exp $\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n import junit.framework.TestSuite;\n \n import org.apache.commons.collections.BulkTest;\n-import org.apache.commons.collections.TestList;\n+import org.apache.commons.collections.AbstractTestList;\n import org.apache.commons.collections.primitives.RandomAccessShortList;\n import org.apache.commons.collections.primitives.ArrayShortList;\n \n /**\n- * @version $Revision: 1.3 $ $Date: 2003/08/31 17:28:38 $\n+ * @version $Revision: 1.4 $ $Date: 2003/10/02 22:14:31 $\n  * @author Rodney Waldhoff\n  */\n-public class TestShortListList extends TestList {\n+public class TestShortListList extends AbstractTestList {\n \n     // conventional\n     // ------------------------------------------------------------------------", "timestamp": 1065132875, "metainfo": ""}