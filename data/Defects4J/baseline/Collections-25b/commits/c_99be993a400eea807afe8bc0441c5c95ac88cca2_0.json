{"sha": "99be993a400eea807afe8bc0441c5c95ac88cca2", "log": "COLLECTIONS-306.  Added predicated subtract method to CollectionUtils.  ", "commit": "\n--- a/src/java/org/apache/commons/collections/CollectionUtils.java\n+++ b/src/java/org/apache/commons/collections/CollectionUtils.java\n import org.apache.commons.collections.collection.TransformedCollection;\n import org.apache.commons.collections.collection.UnmodifiableBoundedCollection;\n import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.functors.TruePredicate;\n \n /**\n  * Provides utility methods and decorators for {@link Collection} instances.\n      * @see Collection#removeAll\n      */\n     public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b) {\n+        Predicate<O> p = TruePredicate.truePredicate();\n+        return subtract(a, b, p);\n+    }\n+\n+    /**\n+     * Returns a new {@link Collection} containing <i>a</i> minus a subset of\n+     * <i>b</i>.  Only the elements of <i>b</i> that satisfy the predicate\n+     * condition, <i>p</i> are subtracted from <i>a</i>.\n+     *\n+     * @param a  the collection to subtract from, must not be null\n+     * @param b  the collection to subtract, must not be null\n+     * @param p  the condition used to determine which elements of <i>b</i> are\n+     *        subtracted.\n+     * @param <O> the generic type that is able to represent the types contained\n+     *        in both input collections.\n+     * @return a new collection with the results\n+     * @see Collection#removeAll\n+     */\n+    public static <O> Collection<O> subtract(final Iterable<? extends O> a, final Iterable<? extends O> b, final Predicate<O> p) {\n         ArrayList<O> list = new ArrayList<O>();\n         addAll(list, a);\n         for (O element : b) {\n-            list.remove(element);\n+            if (p.evaluate(element)) {\n+                list.remove(element);\n+            }\n         }\n         return list;\n     }\n--- a/src/test/org/apache/commons/collections/TestCollectionUtils.java\n+++ b/src/test/org/apache/commons/collections/TestCollectionUtils.java\n         assertNull(freq2.get(3));\n         assertEquals(Integer.valueOf(2), freq2.get(2));\n         assertNull(freq2.get(1));\n+    }\n+\n+    @Test\n+    public void testSubtractWithPredicate() {\n+        // greater than 3\n+        Predicate<Number> predicate = new Predicate<Number>() {\n+            public boolean evaluate(Number n) {\n+                return n.longValue() > 3L;\n+            }\n+        };\n+        \n+        Collection<Number> col = CollectionUtils.subtract(iterableA, collectionC, predicate);\n+        Map<Number, Integer> freq2 = CollectionUtils.getCardinalityMap(col);\n+        assertEquals(Integer.valueOf(1), freq2.get(1));\n+        assertEquals(Integer.valueOf(2), freq2.get(2));\n+        assertEquals(Integer.valueOf(3), freq2.get(3));\n+        assertEquals(Integer.valueOf(2), freq2.get(4));\n+        assertNull(freq2.get(5));\n     }\n \n     @Test", "timestamp": 1306253467, "metainfo": ""}