{"sha": "daccd005b34ddada8b41c191cd0985abb75f4e4d", "log": "Javadoc and stylistic changes  ", "commit": "\n--- a/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n+++ b/src/java/org/apache/commons/collections/iterators/ListIteratorWrapper.java\n import java.util.NoSuchElementException;\n \n /**\n- * As the wrapped Iterator is traversed, ListIteratorWrapper\n- * builds a LinkedList of its values, permitting all required\n- * operations of ListIterator.\n- * \n+ * Converts an iterator into a list iterator by caching the returned entries.\n+ * <p>\n+ * The <code>ListIterator</code> interface has additional useful methods\n+ * for navigation - <code>previous()</code> and the index methods.\n+ * This class allows a regular <code>Iterator</code> to behave as a\n+ * <code>ListIterator</code>. It achieves this by building a list internally\n+ * of as the underlying iterator is traversed.\n+ * <p>\n+ * The optional operations of <code>ListIterator</code> are not supported.\n+ *\n  * @since Commons Collections 2.1\n  * @version $Revision$ $Date$\n- * \n+ *\n  * @author Morgan Delagrange\n  * @author Stephen Colebourne\n  */\n public class ListIteratorWrapper implements ListIterator {\n \n-    /** Holds value of property \"iterator\" */\n-    private final Iterator iterator;\n-    private final LinkedList list = new LinkedList();\n-    \n-    // position of this iterator\n-    private int currentIndex = 0;\n-    // position of the wrapped iterator\n-    // this Iterator should only be used to populate the list\n-    private int wrappedIteratorIndex = 0;\n-\n+    /** Message used when remove, set or add are called. */\n     private static final String UNSUPPORTED_OPERATION_MESSAGE =\n         \"ListIteratorWrapper does not support optional operations of ListIterator.\";\n \n+    /** The underlying iterator being decorated. */\n+    private final Iterator iterator;\n+    /** The list being used to cache the iterator. */\n+    private final LinkedList list = new LinkedList();\n+\n+    /** The current index of this iterator. */\n+    private int currentIndex = 0;\n+    /** The current index of the wrapped iterator. */\n+    private int wrappedIteratorIndex = 0;\n+\n     // Constructor\n     //-------------------------------------------------------------------------\n-\n     /**\n      * Constructs a new <code>ListIteratorWrapper</code> that will wrap\n      * the given iterator.\n \n     // ListIterator interface\n     //-------------------------------------------------------------------------\n-\n     /**\n-     *  Throws {@link UnsupportedOperationException}.\n+     * Throws {@link UnsupportedOperationException}.\n      *\n-     *  @param o  ignored\n-     *  @throws UnsupportedOperationException always\n+     * @param obj  the object to add, ignored\n+     * @throws UnsupportedOperationException always\n      */\n-    public void add(Object o) throws UnsupportedOperationException {\n+    public void add(Object obj) throws UnsupportedOperationException {\n         throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n     }\n \n-\n     /**\n-     *  Returns true if there are more elements in the iterator.\n+     * Returns true if there are more elements in the iterator.\n      *\n-     *  @return true if there are more elements\n+     * @return true if there are more elements\n      */\n     public boolean hasNext() {\n         if (currentIndex == wrappedIteratorIndex) {\n             return iterator.hasNext();\n         }\n-\n         return true;\n     }\n \n     /**\n-     *  Returns true if there are previous elements in the iterator.\n+     * Returns true if there are previous elements in the iterator.\n      *\n-     *  @return true if there are previous elements\n+     * @return true if there are previous elements\n      */\n     public boolean hasPrevious() {\n         if (currentIndex == 0) {\n             return false;\n         }\n-\n         return true;\n     }\n \n     /**\n-     *  Returns the next element from the iterator.\n+     * Returns the next element from the iterator.\n      *\n-     *  @return the next element from the iterator\n-     *  @throws NoSuchElementException if there are no more elements\n+     * @return the next element from the iterator\n+     * @throws NoSuchElementException if there are no more elements\n      */\n     public Object next() throws NoSuchElementException {\n         if (currentIndex < wrappedIteratorIndex) {\n     }\n \n     /**\n-     *  Returns in the index of the next element.\n+     * Returns in the index of the next element.\n      *\n-     *  @return the index of the next element\n+     * @return the index of the next element\n      */\n     public int nextIndex() {\n         return currentIndex;\n     }\n \n     /**\n-     *  Returns the the previous element.\n+     * Returns the the previous element.\n      *\n-     *  @return the previous element\n-     *  @throws NoSuchElementException  if there are no previous elements\n+     * @return the previous element\n+     * @throws NoSuchElementException  if there are no previous elements\n      */\n     public Object previous() throws NoSuchElementException {\n         if (currentIndex == 0) {\n             throw new NoSuchElementException();\n         }\n-\n         --currentIndex;\n         return list.get(currentIndex);    \n     }\n \n     /**\n-     *  Returns the index of the previous element.\n+     * Returns the index of the previous element.\n      *\n-     *  @return  the index of the previous element\n+     * @return  the index of the previous element\n      */\n     public int previousIndex() {\n         return currentIndex - 1;\n     }\n \n     /**\n-     *  Throws {@link UnsupportedOperationException}.\n+     * Throws {@link UnsupportedOperationException}.\n      *\n-     *  @throws UnsupportedOperationException always\n+     * @throws UnsupportedOperationException always\n      */\n     public void remove() throws UnsupportedOperationException {\n         throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n     }\n \n     /**\n-     *  Throws {@link UnsupportedOperationException}.\n+     * Throws {@link UnsupportedOperationException}.\n      *\n-     *  @param o  ignored\n-     *  @throws UnsupportedOperationException always\n+     * @param obj  the object to set, ignored\n+     * @throws UnsupportedOperationException always\n      */\n-    public void set(Object o) throws UnsupportedOperationException {\n+    public void set(Object obj) throws UnsupportedOperationException {\n         throw new UnsupportedOperationException(UNSUPPORTED_OPERATION_MESSAGE);\n     }\n \n }\n-", "timestamp": 1146914247, "metainfo": ""}