{"sha": "b88692f83a938e31fd5f703c99db2a5720cd9f3e", "log": "[COLLECTIONS-447] Fix traversal of a TreeListIterator after calling remove(). Thanks to Jeffrey Barnes for the report and patch.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/list/TreeList.java\n+++ b/src/main/java/org/apache/commons/collections/list/TreeList.java\n             if (currentIndex == -1) {\n                 throw new IllegalStateException();\n             }\n-            if (nextIndex == currentIndex) {\n-                // remove() following previous()\n-                next = next.next();\n-                parent.remove(currentIndex);\n-            } else {\n+            parent.remove(currentIndex);\n+            if (nextIndex != currentIndex) {\n                 // remove() following next()\n-                parent.remove(currentIndex);\n                 nextIndex--;\n             }\n+            // the AVL node referenced by next may have become stale after a remove\n+            // reset it now: will be retrieved by next call to next()/previous() via nextIndex\n+            next = null;\n             current = null;\n             currentIndex = -1;\n             expectedModCount++;\n--- a/src/test/java/org/apache/commons/collections/list/TreeListTest.java\n+++ b/src/test/java/org/apache/commons/collections/list/TreeListTest.java\n //        benchmark(new java.util.ArrayList());\n //        System.out.print(\"\\n LinkedList = \");\n //        benchmark(new java.util.LinkedList());\n+//        System.out.print(\"\\n NodeCachingLinkedList = \");\n //        benchmark(new NodeCachingLinkedList());\n //    }\n \n         assertEquals(new Integer(4), li.next());\n         assertEquals(false, li.hasNext());\n     }\n+    \n+    public void testBugCollections447() {\n+        final List<String> treeList = new TreeList<String>();\n+        treeList.add(\"A\");\n+        treeList.add(\"B\");\n+        treeList.add(\"C\");\n+        treeList.add(\"D\");\n+        \n+        final ListIterator<String> li = treeList.listIterator();\n+        assertEquals(\"A\", li.next());\n+        assertEquals(\"B\", li.next());\n+        \n+        assertEquals(\"B\", li.previous());\n+                \n+        li.remove(); // Deletes \"B\"\n+                \n+        // previous() after remove() should move to\n+        // the element before the one just removed\n+        assertEquals(\"A\", li.previous());\n+    }    \n \n }", "timestamp": 1362428418, "metainfo": ""}