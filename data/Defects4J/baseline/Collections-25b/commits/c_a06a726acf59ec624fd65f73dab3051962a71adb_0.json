{"sha": "a06a726acf59ec624fd65f73dab3051962a71adb", "log": "Added tests for the unmodifiable factory methods.  ", "commit": "\n--- a/src/test/java/org/apache/commons/collections4/BagUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/BagUtilsTest.java\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         }\n+        \n+        assertSame(\"UnmodifiableBag shall not be decorated\", bag, BagUtils.unmodifiableBag(bag));\n     }\n \n     public void testPredicatedBag() {\n     }\n \n     public void testUnmodifiableSortedBag() {\n-        Bag<Object> bag = BagUtils.unmodifiableSortedBag(new TreeBag<Object>());\n+        SortedBag<Object> bag = BagUtils.unmodifiableSortedBag(new TreeBag<Object>());\n         assertTrue(\"Returned object should be an UnmodifiableSortedBag.\",\n             bag instanceof UnmodifiableSortedBag);\n         try {\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         }\n+        \n+        assertSame(\"UnmodifiableSortedBag shall not be decorated\", bag, BagUtils.unmodifiableSortedBag(bag));\n     }\n \n     public void testPredicatedSortedBag() {\n--- a/src/test/java/org/apache/commons/collections4/QueueUtilsTest.java\n+++ b/src/test/java/org/apache/commons/collections4/QueueUtilsTest.java\n         } catch (final IllegalArgumentException ex) {\n             // expected\n         }\n+        \n+        assertSame(\"UnmodifiableQueue shall not be decorated\", queue, QueueUtils.unmodifiableQueue(queue));\n     }\n \n     public void testPredicatedQueue() {\n--- a/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableBidiMapTest.java\n import java.util.Map;\n \n import junit.framework.Test;\n+\n import org.apache.commons.collections4.BidiMap;\n import org.apache.commons.collections4.BulkTest;\n+import org.apache.commons.collections4.Unmodifiable;\n \n /**\n  * JUnit tests.\n         return false;\n     }\n \n+    //-----------------------------------------------------------------------\n+\n+    public void testUnmodifiable() {\n+        assertTrue(makeObject() instanceof Unmodifiable);\n+        assertTrue(makeFullMap() instanceof Unmodifiable);\n+    }\n+    \n+    public void testDecorateFactory() {\n+        final BidiMap<K, V> map = makeFullMap();\n+        assertSame(map, UnmodifiableBidiMap.unmodifiableBidiMap(map));\n+\n+        try {\n+            UnmodifiableBidiMap.unmodifiableBidiMap(null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+    }\n+    \n }\n--- a/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableOrderedBidiMapTest.java\n import java.util.TreeMap;\n \n import junit.framework.Test;\n-import org.apache.commons.collections4.BidiMap;\n+\n import org.apache.commons.collections4.BulkTest;\n import org.apache.commons.collections4.OrderedBidiMap;\n+import org.apache.commons.collections4.Unmodifiable;\n \n /**\n  * JUnit tests.\n     }\n \n     @Override\n-    public BidiMap<K, V> makeFullMap() {\n+    public OrderedBidiMap<K, V> makeFullMap() {\n         final OrderedBidiMap<K, V> bidi = new TreeBidiMap<K, V>();\n         addSampleMappings(bidi);\n         return UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap(bidi);\n         return false;\n     }\n \n+    //-----------------------------------------------------------------------\n+\n+    public void testUnmodifiable() {\n+        assertTrue(makeObject() instanceof Unmodifiable);\n+        assertTrue(makeFullMap() instanceof Unmodifiable);\n+    }\n+    \n+    public void testDecorateFactory() {\n+        final OrderedBidiMap<K, V> map = makeFullMap();\n+        assertSame(map, UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap(map));\n+\n+        try {\n+            UnmodifiableOrderedBidiMap.unmodifiableOrderedBidiMap(null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+    }\n }\n--- a/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/bidimap/UnmodifiableSortedBidiMapTest.java\n \n import org.apache.commons.collections4.BulkTest;\n import org.apache.commons.collections4.SortedBidiMap;\n+import org.apache.commons.collections4.Unmodifiable;\n \n /**\n  * JUnit tests.\n         return false;\n     }\n \n+    //-----------------------------------------------------------------------\n+\n+    public void testUnmodifiable() {\n+        assertTrue(makeObject() instanceof Unmodifiable);\n+        assertTrue(makeFullMap() instanceof Unmodifiable);\n+    }\n+    \n+    public void testDecorateFactory() {\n+        final SortedBidiMap<K, V> map = makeFullMap();\n+        assertSame(map, UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(map));\n+\n+        try {\n+            UnmodifiableSortedBidiMap.unmodifiableSortedBidiMap(null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java\n+++ b/src/test/java/org/apache/commons/collections4/collection/UnmodifiableCollectionTest.java\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n+\n+import org.apache.commons.collections4.Unmodifiable;\n \n /**\n  * Extension of {@link AbstractCollectionTest} for exercising the\n         return false;\n     }\n \n+    //-----------------------------------------------------------------------\n+    \n+    public void testUnmodifiable() {\n+        assertTrue(makeObject() instanceof Unmodifiable);\n+        assertTrue(makeFullCollection() instanceof Unmodifiable);\n+    }\n+    \n+    public void testDecorateFactory() {\n+        final Collection<E> coll = makeFullCollection();\n+        assertSame(coll, UnmodifiableCollection.unmodifiableCollection(coll));\n+\n+        try {\n+            UnmodifiableCollection.unmodifiableCollection(null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n     @Override\n     public String getCompatibilityVersion() {\n         return \"4\";\n--- a/src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java\n+++ b/src/test/java/org/apache/commons/collections4/list/UnmodifiableListTest.java\n         verifyUnmodifiable(list.subList(0, 2));\n     }\n \n+    public void testDecorateFactory() {\n+        final List<E> list = makeObject();\n+        assertSame(list, UnmodifiableList.unmodifiableList(list));\n+\n+        try {\n+            UnmodifiableList.unmodifiableList(null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     protected void verifyUnmodifiable(final List<E> list) {\n         try {\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n+\n     @Override\n     public String getCompatibilityVersion() {\n         return \"4\";\n--- a/src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/UnmodifiableMapTest.java\n     }\n \n     //-----------------------------------------------------------------------\n+\n     public void testUnmodifiable() {\n         assertTrue(makeObject() instanceof Unmodifiable);\n         assertTrue(makeFullMap() instanceof Unmodifiable);\n             fail();\n         } catch (final IllegalArgumentException ex) {}\n     }\n+\n+    //-----------------------------------------------------------------------\n \n     @Override\n     public String getCompatibilityVersion() {\n--- a/src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/UnmodifiableOrderedMapTest.java\n     }\n \n     //-----------------------------------------------------------------------\n+\n     public void testUnmodifiable() {\n         assertTrue(makeObject() instanceof Unmodifiable);\n         assertTrue(makeFullMap() instanceof Unmodifiable);\n             fail();\n         } catch (final IllegalArgumentException ex) {}\n     }\n+\n+    //-----------------------------------------------------------------------\n \n     @Override\n     public String getCompatibilityVersion() {\n--- a/src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java\n+++ b/src/test/java/org/apache/commons/collections4/map/UnmodifiableSortedMapTest.java\n     }\n \n     //-----------------------------------------------------------------------\n+\n     public void testUnmodifiable() {\n         assertTrue(makeObject() instanceof Unmodifiable);\n         assertTrue(makeFullMap() instanceof Unmodifiable);\n             fail();\n         } catch (final IllegalArgumentException ex) {}\n     }\n+\n+    //-----------------------------------------------------------------------\n \n     @Override\n     public String getCompatibilityVersion() {\n--- a/src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java\n+++ b/src/test/java/org/apache/commons/collections4/queue/UnmodifiableQueueTest.java\n import java.util.LinkedList;\n import java.util.Queue;\n \n+import org.apache.commons.collections4.Unmodifiable;\n import org.apache.commons.collections4.collection.AbstractCollectionTest;\n \n /**\n     }\n \n     @Override\n+    public Queue<E> getCollection() {\n+        return super.getCollection();\n+    }\n+\n+    @Override\n     public boolean isAddSupported() {\n         return false;\n     }\n         return false;\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testQueueRemove() {\n         resetEmpty();\n         try {\n             fail();\n         } catch (final UnsupportedOperationException ex) {}\n     }\n+\n+    public void testUnmodifiable() {\n+        assertTrue(makeObject() instanceof Unmodifiable);\n+        assertTrue(makeFullCollection() instanceof Unmodifiable);\n+    }\n+    \n+    public void testDecorateFactory() {\n+        final Queue<E> queue = makeFullCollection();\n+        assertSame(queue, UnmodifiableQueue.unmodifiableQueue(queue));\n+\n+        try {\n+            UnmodifiableQueue.unmodifiableQueue(null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n \n     @Override\n     public String getCompatibilityVersion() {\n //        writeExternalFormToDisk((java.io.Serializable) getCollection(), \"src/test/resources/data/test/UnmodifiableQueue.fullCollection.version4.obj\");\n //    }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public Queue<E> getCollection() {\n-        return super.getCollection();\n-    }\n }\n--- a/src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/UnmodifiableSetTest.java\n import junit.framework.Test;\n \n import org.apache.commons.collections4.BulkTest;\n+import org.apache.commons.collections4.Unmodifiable;\n \n /**\n  * Extension of {@link AbstractSetTest} for exercising the\n         return false;\n     }\n \n+    //-----------------------------------------------------------------------\n+\n+    public void testUnmodifiable() {\n+        assertTrue(makeObject() instanceof Unmodifiable);\n+        assertTrue(makeFullCollection() instanceof Unmodifiable);\n+    }\n+    \n+    public void testDecorateFactory() {\n+        final Set<E> set = makeFullCollection();\n+        assertSame(set, UnmodifiableSet.unmodifiableSet(set));\n+\n+        try {\n+            UnmodifiableSet.unmodifiableSet(null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n     @Override\n     public String getCompatibilityVersion() {\n         return \"4\";\n--- a/src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java\n+++ b/src/test/java/org/apache/commons/collections4/set/UnmodifiableSortedSetTest.java\n         verifyUnmodifiable(set.subSet((E) Integer.valueOf(1), (E) Integer.valueOf(3)));\n     }\n \n+    public void testDecorateFactory() {\n+        final SortedSet<E> set = makeFullCollection();\n+        assertSame(set, UnmodifiableSortedSet.unmodifiableSortedSet(set));\n+\n+        try {\n+            UnmodifiableSortedSet.unmodifiableSortedSet(null);\n+            fail();\n+        } catch (final IllegalArgumentException ex) {}\n+    }\n+\n     /**\n      * Verifies that a set is not modifiable\n      */\n         assertTrue(\"natural order, so comparator should be null\", c == null);\n     }\n \n+    //-----------------------------------------------------------------------\n+\n     @Override\n     public String getCompatibilityVersion() {\n         return \"4\";", "timestamp": 1384188515, "metainfo": ""}