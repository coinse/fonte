{"sha": "4b28267c17729f68f875426697d89425ff1e2adf", "log": "Merging from -r468106:814127 of collections_jdk5_branch - namely where this code was generified; mostly in r738956.  Also see the following revisions:      ------------------------------------------------------------------------     r555925 | skestle | 2007-07-13 03:39:24 -0700 (Fri, 13 Jul 2007) | 2 lines          Added Edwin Tellman's patch for COLLECTIONS-243.       It all seems pretty reasonable, and it should all be checked again as the project is worked through     ------------------------------------------------------------------------     r471201 | scolebourne | 2006-11-04 06:17:26 -0800 (Sat, 04 Nov 2006) | 1 line          Remove getBag() - use covariant decorated()     ------------------------------------------------------------------------   ", "commit": "\n--- a/src/java/org/apache/commons/collections/bag/PredicatedBag.java\n+++ b/src/java/org/apache/commons/collections/bag/PredicatedBag.java\n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n-public class PredicatedBag\n-        extends PredicatedCollection implements Bag {\n+public class PredicatedBag<E>\n+        extends PredicatedCollection<E> implements Bag<E> {\n \n     /** Serialization version */\n     private static final long serialVersionUID = -2575833140344736876L;\n      * @throws IllegalArgumentException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n-    public static Bag decorate(Bag bag, Predicate predicate) {\n-        return new PredicatedBag(bag, predicate);\n+    public static <T> Bag<T> decorate(Bag<T> bag, Predicate<? super T> predicate) {\n+        return new PredicatedBag<T>(bag, predicate);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws IllegalArgumentException if bag or predicate is null\n      * @throws IllegalArgumentException if the bag contains invalid elements\n      */\n-    protected PredicatedBag(Bag bag, Predicate predicate) {\n+    protected PredicatedBag(Bag<E> bag, Predicate<? super E> predicate) {\n         super(bag, predicate);\n     }\n \n      * \n      * @return the decorated bag\n      */\n-    protected Bag getBag() {\n-        return (Bag) getCollection();\n+    protected Bag<E> decorated() {\n+        return (Bag<E>) super.decorated();\n     }\n     \n     //-----------------------------------------------------------------------\n-    public boolean add(Object object, int count) {\n+    public boolean add(E object, int count) {\n         validate(object);\n-        return getBag().add(object, count);\n+        return decorated().add(object, count);\n     }\n \n     public boolean remove(Object object, int count) {\n-        return getBag().remove(object, count);\n+        return decorated().remove(object, count);\n     }\n \n-    public Set uniqueSet() {\n-        return getBag().uniqueSet();\n+    public Set<E> uniqueSet() {\n+        return decorated().uniqueSet();\n     }\n \n     public int getCount(Object object) {\n-        return getBag().getCount(object);\n+        return decorated().getCount(object);\n     }\n \n }", "timestamp": 1252994041, "metainfo": ""}