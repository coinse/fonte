{"sha": "ad28a3cb5c5edae55fb7b0f4642ccbf14f3065c1", "log": "[COLLECTIONS-534] Added clarifiying comment about performance to CollectionBag.retainAll. Thanks to Oswaldo Olivo.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections4/bag/CollectionBag.java\n+++ b/src/main/java/org/apache/commons/collections4/bag/CollectionBag.java\n \n     /**\n      * <i>(Change)</i>\n-     * Remove any members of the bag that are not in the given\n-     * collection, <i>not</i> respecting cardinality. That is, any object\n-     * in the given collection <code>coll</code> will be retained in the\n-     * bag with the same number of copies prior to this operation. All\n-     * other objects will be completely removed from this bag.\n+     * Remove any members of the bag that are not in the given collection,\n+     * <i>not</i> respecting cardinality. That is, any object in the given\n+     * collection <code>coll</code> will be retained in the bag with the same\n+     * number of copies prior to this operation. All other objects will be\n+     * completely removed from this bag.\n+     * <p>\n+     * This implementation iterates over the elements of this bag, checking\n+     * each element in turn to see if it's contained in <code>coll</code>.\n+     * If it's not contained, it's removed from this bag. As a consequence,\n+     * it is advised to use a collection type for <code>coll</code> that provides\n+     * a fast (e.g. O(1)) implementation of {@link Collection#contains(Object)}.\n      *\n      * @param coll  the collection to retain\n      * @return <code>true</code> if this call changed the collection", "timestamp": 1413722674, "metainfo": ""}