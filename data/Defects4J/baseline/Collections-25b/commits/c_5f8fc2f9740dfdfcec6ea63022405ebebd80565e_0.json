{"sha": "5f8fc2f9740dfdfcec6ea63022405ebebd80565e", "log": "Ensure all MapEntry implementation are also KeyValue implementations   ", "commit": "\n--- a/src/java/org/apache/commons/collections/DefaultMapEntry.java\n+++ b/src/java/org/apache/commons/collections/DefaultMapEntry.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.15 2003/12/05 20:23:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DefaultMapEntry.java,v 1.16 2003/12/06 13:03:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n /**\n  * A default implementation of {@link java.util.Map.Entry}\n  *\n+ * @deprecated Use the version in the keyvalue subpackage.\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.15 $ $Date: 2003/12/05 20:23:57 $\n+ * @version $Revision: 1.16 $ $Date: 2003/12/06 13:03:15 $\n  * \n  * @author James Strachan\n  * @author Michael A. Smith\n  * @author Neil O'Toole\n  * @author Stephen Colebourne\n- * \n- * @deprecated Use the version in the keyvalue subpackage.\n  */\n-public class DefaultMapEntry implements Map.Entry {\n+public class DefaultMapEntry implements Map.Entry, KeyValue {\n     \n     /** The key */\n     private Object key;\n--- a/src/java/org/apache/commons/collections/DoubleOrderedMap.java\n+++ b/src/java/org/apache/commons/collections/DoubleOrderedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DoubleOrderedMap.java,v 1.8 2003/11/29 18:05:39 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/DoubleOrderedMap.java,v 1.9 2003/12/06 13:03:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * @see DualTreeBidiMap\n  * @see DualHashBidiMap\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.8 $ $Date: 2003/11/29 18:05:39 $\n+ * @version $Revision: 1.9 $ $Date: 2003/12/06 13:03:15 $\n  * \n  * @author Marc Johnson\n  */\n     }    // end private abstract class DoubleOrderedMapIterator\n \n     // final for performance\n-    private static final class Node implements Map.Entry {\n+    private static final class Node implements Map.Entry, KeyValue {\n \n         private Comparable[] data;\n         private Node[]       leftNode;\n--- a/src/java/org/apache/commons/collections/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.18 2003/12/05 20:23:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ReferenceMap.java,v 1.19 2003/12/06 13:03:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * \n  * @deprecated Moved to map subpackage. Due to be removed in v4.0.\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.18 $ $Date: 2003/12/05 20:23:57 $\n+ * @version $Revision: 1.19 $ $Date: 2003/12/06 13:03:15 $\n  * \n  * @author Paul Jack\n  */\n \n     // If getKey() or getValue() returns null, it means\n     // the mapping is stale and should be removed.\n-    private class Entry implements Map.Entry {\n+    private class Entry implements Map.Entry, KeyValue {\n \n         Object key;\n         Object value;\n--- a/src/java/org/apache/commons/collections/SequencedHashMap.java\n+++ b/src/java/org/apache/commons/collections/SequencedHashMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.22 2003/12/03 11:37:44 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/SequencedHashMap.java,v 1.23 2003/12/06 13:03:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * @see org.apache.commons.collections.set.ListOrderedSet\n  * @since Commons Collections 2.0\n- * @version $Revision: 1.22 $ $Date: 2003/12/03 11:37:44 $\n+ * @version $Revision: 1.23 $ $Date: 2003/12/06 13:03:15 $\n  * \n  * @author Michael A. Smith\n  * @author Daniel Rall\n      * {@link java.util.Map.Entry} that doubles as a node in the linked list\n      * of sequenced mappings.  \n      */\n-    private static class Entry implements Map.Entry {\n+    private static class Entry implements Map.Entry, KeyValue {\n         // Note: This class cannot easily be made clonable.  While the actual\n         // implementation of a clone would be simple, defining the semantics is\n         // difficult.  If a shallow clone is implemented, then entry.next.prev !=\n--- a/src/java/org/apache/commons/collections/StaticBucketMap.java\n+++ b/src/java/org/apache/commons/collections/StaticBucketMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/StaticBucketMap.java,v 1.13 2003/12/03 15:16:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/StaticBucketMap.java,v 1.14 2003/12/06 13:03:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * @deprecated Moved to map subpackage. Due to be removed in v4.0.\n  * @since Commons Collections 2.1\n- * @version $Revision: 1.13 $ $Date: 2003/12/03 15:16:49 $\n+ * @version $Revision: 1.14 $ $Date: 2003/12/06 13:03:15 $\n  * \n  * @author <a href=\"mailto:bloritsch@apache.org\">Berin Loritsch</a>\n  * @author <a href=\"mailto:g-froehlich@gmx.de\">Gerhard Froehlich</a>\n     /**\n      * The Map.Entry for the StaticBucketMap.\n      */\n-    private static final class Node implements Map.Entry\n+    private static final class Node implements Map.Entry, KeyValue\n     {\n         protected Object key;\n         protected Object value;\n--- a/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n+++ b/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.5 2003/12/05 20:23:58 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/bidimap/TreeBidiMap.java,v 1.6 2003/12/06 13:03:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.BidiMap;\n import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.KeyValue;\n import org.apache.commons.collections.MapIterator;\n import org.apache.commons.collections.OrderedBidiMap;\n import org.apache.commons.collections.OrderedIterator;\n  * UnsupportedOperationException on attempts to call that method.\n  *\n  * @since Commons Collections 3.0 (previously DoubleOrderedMap v2.0)\n- * @version $Revision: 1.5 $ $Date: 2003/12/05 20:23:58 $\n+ * @version $Revision: 1.6 $ $Date: 2003/12/06 13:03:15 $\n  * \n  * @author Marc Johnson\n  * @author Stephen Colebourne\n     /**\n      * A node used to store the data.\n      */\n-    static class Node implements Map.Entry {\n+    static class Node implements Map.Entry, KeyValue {\n \n         private Comparable[] data;\n         private Node[] leftNode;\n--- a/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n+++ b/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java,v 1.1 2003/12/05 20:23:56 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java,v 1.2 2003/12/06 13:03:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import java.util.Map;\n \n+import org.apache.commons.collections.KeyValue;\n+\n /**\n  * Provides a base decorator that allows additional functionality to be added\n  * to a Map Entry.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/05 20:23:56 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/06 13:03:15 $\n  * \n  * @author Stephen Colebourne\n  */\n-public abstract class AbstractMapEntryDecorator implements Map.Entry {\n+public abstract class AbstractMapEntryDecorator implements Map.Entry, KeyValue {\n     \n     /** The <code>Map.Entry</code> to decorate */\n     protected final Map.Entry entry;\n      */\n     public AbstractMapEntryDecorator(Map.Entry entry) {\n         if (entry == null) {\n-            throw new IllegalArgumentException(\"Map entry must not be null\");\n+            throw new IllegalArgumentException(\"Map Entry must not be null\");\n         }\n         this.entry = entry;\n     }\n--- a/src/java/org/apache/commons/collections/map/HashedMap.java\n+++ b/src/java/org/apache/commons/collections/map/HashedMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.5 2003/12/03 19:04:41 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/HashedMap.java,v 1.6 2003/12/06 13:03:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n \n import org.apache.commons.collections.IterableMap;\n import org.apache.commons.collections.IteratorUtils;\n+import org.apache.commons.collections.KeyValue;\n import org.apache.commons.collections.MapIterator;\n \n /**\n  * methods exposed.\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.5 $ $Date: 2003/12/03 19:04:41 $\n+ * @version $Revision: 1.6 $ $Date: 2003/12/06 13:03:15 $\n  *\n  * @author java util HashMap\n  * @author Stephen Colebourne\n     /**\n      * HashEntry\n      */\n-    protected static class HashEntry implements Map.Entry {\n+    protected static class HashEntry implements Map.Entry, KeyValue {\n         protected HashEntry next;\n         protected int hashCode;\n         protected Object key;\n--- a/src/java/org/apache/commons/collections/map/ReferenceMap.java\n+++ b/src/java/org/apache/commons/collections/map/ReferenceMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ReferenceMap.java,v 1.2 2003/12/05 20:23:57 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/ReferenceMap.java,v 1.3 2003/12/06 13:03:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n+import org.apache.commons.collections.KeyValue;\n import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n \n /**\n  * @see java.lang.ref.Reference\n  * \n  * @since Commons Collections 3.0\n- * @version $Revision: 1.2 $ $Date: 2003/12/05 20:23:57 $\n+ * @version $Revision: 1.3 $ $Date: 2003/12/06 13:03:15 $\n  * \n  * @author Paul Jack\n  */\n \n     // If getKey() or getValue() returns null, it means\n     // the mapping is stale and should be removed.\n-    private class Entry implements Map.Entry {\n+    private class Entry implements Map.Entry, KeyValue {\n \n         Object key;\n         Object value;\n--- a/src/java/org/apache/commons/collections/map/StaticBucketMap.java\n+++ b/src/java/org/apache/commons/collections/map/StaticBucketMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/StaticBucketMap.java,v 1.1 2003/12/03 15:16:49 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/map/StaticBucketMap.java,v 1.2 2003/12/06 13:03:15 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n import java.util.NoSuchElementException;\n import java.util.Set;\n \n+import org.apache.commons.collections.KeyValue;\n+\n /**\n  * A StaticBucketMap is an efficient, thread-safe implementation of\n  * <code>java.util.Map</code> that performs well in in a highly\n  * operations will affect the map.<p>\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.1 $ $Date: 2003/12/03 15:16:49 $\n+ * @version $Revision: 1.2 $ $Date: 2003/12/06 13:03:15 $\n  * \n  * @author Berin Loritsch\n  * @author Gerhard Froehlich\n     /**\n      * The Map.Entry for the StaticBucketMap.\n      */\n-    private static final class Node implements Map.Entry {\n+    private static final class Node implements Map.Entry, KeyValue {\n         protected Object key;\n         protected Object value;\n         protected Node next;", "timestamp": 1070715795, "metainfo": ""}