{"sha": "927cbd80c0adc807d03951c91c22df7cfb22d54e", "log": "Updated entry sets to modify underlying maps.   ", "commit": "\n--- a/src/java/org/apache/commons/collections/HashBidiMap.java\n+++ b/src/java/org/apache/commons/collections/HashBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/HashBidiMap.java,v 1.2 2003/09/26 23:28:43 matth Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/HashBidiMap.java,v 1.3 2003/09/29 23:24:18 matth Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * Default implementation of <code>BidiMap</code>.\n  * \n  * @since Commons Collections 3.0\n- * @version $Id: HashBidiMap.java,v 1.2 2003/09/26 23:28:43 matth Exp $\n+ * @version $Id: HashBidiMap.java,v 1.3 2003/09/29 23:24:18 matth Exp $\n  * \n  * @author Matthew Hawthorne\n  */\n         if (oldValue != null) {\n             maps[0].remove(oldValue);\n         }\n-        \n+\n         final Object obj = maps[0].put(key, value);\n         return obj;\n     }\n \n                     public Object next() {\n                         currentEntry = (Map.Entry)it.next();\n-                        return currentEntry;\n+\n+                        // returns anonymous Map.Entry\n+                        return new Map.Entry() {\n+\n+                            public Object getKey() {\n+                                return currentEntry.getKey();\n+                            }\n+\n+                            public Object getValue() {\n+                                return currentEntry.getValue();\n+                            }\n+\n+                            public Object setValue(Object value) {\n+                                final Object oldValue =\n+                                    currentEntry.setValue(value);\n+\n+                                // Gets old key and pairs with new value\n+                                final Object inverseKey =\n+                                    HashBidiMap.this.maps[1].remove(oldValue);\n+                                HashBidiMap.this.maps[1].put(value, inverseKey);\n+\n+                                return oldValue;\n+                            }\n+\n+                        }; // anonymous Map.Entry\n                     };\n                 }; // anonymous Iterator\n             }\n \n                         public Object next() {\n                             final Map.Entry entry = (Map.Entry)delegate.next();\n-                            return new DefaultMapEntry(\n-                                entry.getValue(),\n-                                entry.getKey());\n+\n+                            // Returns anonymous Map.Entry\n+                            return new Map.Entry() {\n+\n+                                public Object getKey() {\n+                                    return entry.getValue();\n+                                }\n+\n+                                public Object getValue() {\n+                                    return entry.getKey();\n+                                }\n+\n+                                public Object setValue(Object value) {\n+                                    // This is confusing.  Basically, we are \n+                                    // setting a new key for existing value\n+                                    \n+                                    // Gets value for current key\n+                                    final Object oldValue =\n+                                        HashBidiMap.this.maps[0].remove(getValue());\n+                                    \n+                                    // Puts new key and value into map    \n+                                    HashBidiMap.this.maps[0].put(\n+                                        value,\n+                                        oldValue);\n+                                        \n+                                    // Returns old value\n+                                    return oldValue;\n+                                }\n+\n+                            }; // anonymous Map.Entry\n+\n                         }\n \n                         public void remove() {\n--- a/src/test/org/apache/commons/collections/TestBidiMap.java\n+++ b/src/test/org/apache/commons/collections/TestBidiMap.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.2 2003/09/26 23:28:43 matth Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestBidiMap.java,v 1.3 2003/09/29 23:24:18 matth Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * JUnit tests.\n  * \n  * @author Matthew Hawthorne\n- * @version $Id: TestBidiMap.java,v 1.2 2003/09/26 23:28:43 matth Exp $\n+ * @version $Id: TestBidiMap.java,v 1.3 2003/09/29 23:24:18 matth Exp $\n  * @see org.apache.commons.collections.BidiMap\n  */\n public abstract class TestBidiMap extends TestCase {\n         assertTrue(\n             \"Key/value pair was not removed on duplicate value.\",\n             !map.containsKey(key1));\n-            \n+\n         assertEquals(\"Key/value mismatch\", key2, map.getKey(value));\n+    }\n+\n+    public void testModifyEntrySet() {\n+        modifyEntrySet(createBidiMapWithData());\n+        modifyEntrySet(createBidiMapWithData().inverseBidiMap());\n+    }\n+\n+    private final void modifyEntrySet(BidiMap map) {\n+        // Gets first entry\n+        final Map.Entry entry = (Map.Entry)map.entrySet().iterator().next();\n+\n+        // Gets key and value\n+        final Object key = entry.getKey();\n+        final Object oldValue = entry.getValue();\n+\n+        // Sets new value\n+        final Object newValue = \"newValue\";\n+        entry.setValue(newValue);\n+\n+        assertEquals(\n+            \"Modifying entrySet did not affect underlying Map.\",\n+            newValue,\n+            map.get(key));\n+\n+        assertNull(\n+            \"Modifying entrySet did not affect inverse Map.\",\n+            map.getKey(oldValue));\n     }\n \n     // ----------------------------------------------------------------", "timestamp": 1064877858, "metainfo": ""}