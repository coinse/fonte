{"sha": "f98c8827f62fa80e73ab196d0bf112b058f87242", "log": "Reinstate FixedSizeSortedMap superclass to avoid binary incompatibility   ", "commit": "\n--- a/src/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n+++ b/src/java/org/apache/commons/collections/map/FixedSizeSortedMap.java\n  */\n package org.apache.commons.collections.map;\n \n-import java.util.Comparator;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n import java.util.SortedMap;\n+\n+import org.apache.commons.collections.BoundedMap;\n+import org.apache.commons.collections.collection.UnmodifiableCollection;\n+import org.apache.commons.collections.set.UnmodifiableSet;\n \n /**\n  * Decorates another <code>SortedMap</code> to fix the size blocking add/remove.\n  * This class is Serializable from Commons Collections 3.1.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision: 1.7 $ $Date: 2004/04/09 10:36:01 $\n+ * @version $Revision: 1.8 $ $Date: 2004/06/03 22:26:52 $\n  * \n  * @author Stephen Colebourne\n  * @author Paul Jack\n  */\n public class FixedSizeSortedMap\n-        extends FixedSizeMap\n-        implements SortedMap {\n+        extends AbstractSortedMapDecorator\n+        implements SortedMap, BoundedMap, Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 3126019624511683653L;\n \n     /**\n      * Factory method to create a fixed size sorted map.\n         super(map);\n     }\n \n-    //-----------------------------------------------------------------------\n     /**\n      * Gets the map being decorated.\n      * \n      */\n     protected SortedMap getSortedMap() {\n         return (SortedMap) map;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Write the map out using a custom routine.\n+     */\n+    private void writeObject(ObjectOutputStream out) throws IOException {\n+        out.defaultWriteObject();\n+        out.writeObject(map);\n+    }\n+\n+    /**\n+     * Read the map in using a custom routine.\n+     */\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n+        in.defaultReadObject();\n+        map = (Map) in.readObject();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public Object put(Object key, Object value) {\n+        if (map.containsKey(key) == false) {\n+            throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n+        }\n+        return map.put(key, value);\n+    }\n+\n+    public void putAll(Map mapToCopy) {\n+        for (Iterator it = mapToCopy.keySet().iterator(); it.hasNext(); ) {\n+            if (mapToCopy.containsKey(it.next()) == false) {\n+                throw new IllegalArgumentException(\"Cannot put new key/value pair - Map is fixed size\");\n+            }\n+        }\n+        map.putAll(mapToCopy);\n+    }\n+\n+    public void clear() {\n+        throw new UnsupportedOperationException(\"Map is fixed size\");\n+    }\n+\n+    public Object remove(Object key) {\n+        throw new UnsupportedOperationException(\"Map is fixed size\");\n+    }\n+\n+    public Set entrySet() {\n+        Set set = map.entrySet();\n+        return UnmodifiableSet.decorate(set);\n+    }\n+\n+    public Set keySet() {\n+        Set set = map.keySet();\n+        return UnmodifiableSet.decorate(set);\n+    }\n+\n+    public Collection values() {\n+        Collection coll = map.values();\n+        return UnmodifiableCollection.decorate(coll);\n     }\n \n     //-----------------------------------------------------------------------\n         return new FixedSizeSortedMap(map);\n     }\n \n-    public Comparator comparator() {\n-        return getSortedMap().comparator();\n+    public boolean isFull() {\n+        return true;\n     }\n \n-    public Object firstKey() {\n-        return getSortedMap().firstKey();\n-    }\n-\n-    public Object lastKey() {\n-        return getSortedMap().lastKey();\n+    public int maxSize() {\n+        return size();\n     }\n \n }", "timestamp": 1086301612, "metainfo": ""}