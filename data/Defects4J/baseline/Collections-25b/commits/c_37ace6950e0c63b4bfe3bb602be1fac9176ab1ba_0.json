{"sha": "37ace6950e0c63b4bfe3bb602be1fac9176ab1ba", "log": "Cleanup of keyvalue package.  ", "commit": "\n--- a/src/main/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/AbstractKeyValue.java\n  * and {@link java.util.Map.Entry Map.Entry} implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Michael A. Smith\n- * @author Neil O'Toole\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractKeyValue<K, V> implements KeyValue<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/AbstractMapEntry.java\n  * {@link java.util.Map.Entry Map.Entry} implementations.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Michael A. Smith\n- * @author Neil O'Toole\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractMapEntry<K, V> extends AbstractKeyValue<K, V> implements Map.Entry<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/AbstractMapEntryDecorator.java\n  * added to a {@link java.util.Map.Entry Map.Entry}.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public abstract class AbstractMapEntryDecorator<K, V> implements Map.Entry<K, V>, KeyValue<K, V> {\n     \n--- a/src/main/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/DefaultKeyValue.java\n  * itself as a key or value.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Michael A. Smith\n- * @author Neil O'Toole\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class DefaultKeyValue<K, V> extends AbstractKeyValue<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/keyvalue/DefaultMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/DefaultMapEntry.java\n import org.apache.commons.collections.KeyValue;\n \n /**\n- * A restricted implementation of {@link java.util.Map.Entry} that prevents\n- * the <code>Map.Entry</code> contract from being broken.\n+ * A restricted implementation of {@link Map.Entry} that prevents\n+ * the {@link Map.Entry} contract from being broken.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author James Strachan\n- * @author Michael A. Smith\n- * @author Neil O'Toole\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class DefaultMapEntry<K, V> extends AbstractMapEntry<K, V> {\n \n--- a/src/main/java/org/apache/commons/collections/keyvalue/MultiKey.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/MultiKey.java\n  * </pre>\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Howard Lewis Ship\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class MultiKey<K> implements Serializable {\n     // This class could implement List, but that would confuse it's purpose\n \n     /**\n      * Calculate the hash code of the instance using the provided keys.\n-     * @param keys\n+     * @param keys the keys to calculate the hash code for\n      */\n     private void calculateHashCode(Object[] keys)\n     {\n--- a/src/main/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/TiedMapEntry.java\n  * map, however this will probably mess up any iterators.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public class TiedMapEntry<K, V> implements Map.Entry<K, V>, KeyValue<K, V>, Serializable {\n \n--- a/src/main/java/org/apache/commons/collections/keyvalue/UnmodifiableMapEntry.java\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/UnmodifiableMapEntry.java\n  * UnsupportedOperationException when <code>setValue</code> is called.\n  *\n  * @since Commons Collections 3.0\n- * @version $Revision$\n- *\n- * @author Stephen Colebourne\n+ * @version $Id$\n  */\n public final class UnmodifiableMapEntry<K, V> extends AbstractMapEntry<K, V> implements Unmodifiable {\n \n--- /dev/null\n+++ b/src/main/java/org/apache/commons/collections/keyvalue/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/**\n+ * This package contains implementations of collection and map related key/value classes.\n+ * These are usually used in maps, however they can be used as data holders in any collection.\n+ * <p>\n+ * The following key/value designs are included:\n+ * <ul>\n+ *   <li>Map Entry - various map entry implementations\n+ *   <li>KeyValue - a key and value pair, without map entry semantics\n+ *   <li>MultiKey - a holder of multiple keys tied together\n+ * </ul>\n+ *\n+ * @version $Id$\n+ */\n+package org.apache.commons.collections.keyvalue;", "timestamp": 1341351565, "metainfo": ""}