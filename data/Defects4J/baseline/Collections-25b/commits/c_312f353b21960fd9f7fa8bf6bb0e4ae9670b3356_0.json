{"sha": "312f353b21960fd9f7fa8bf6bb0e4ae9670b3356", "log": "added for collections 2.0   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/collections/ProxyMap.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/ProxyMap.java,v 1.1 2002/03/15 05:36:58 morgand Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/03/15 05:36:58 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.collections;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/** \n+ * <p>delegate - a person authorized to act as representative for\n+ * another</p>\n+ *\n+ * <p>This <code>Map</code> wraps another <code>Map</code>\n+ * implementation, using the wrapped instance for its default\n+ * implementation.  This class is used as a framework on which to\n+ * build to extensions for its wrapped <code>Map</code> object which\n+ * would be unavailable or inconvenient via sub-classing (but usable\n+ * via composition).</p>\n+ *\n+ * <p>An example use case is where the wrapped <code>Map</code> needs\n+ * synchronization (to make it thread-safe), but the <code>Map</code>\n+ * returned by <code>Collections.synchronizedMap(map)</code>\n+ * hides part of <code>map</code>'s public interface.</p>\n+ *\n+ * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n+ * @since 2.0\n+ */\n+public abstract class ProxyMap implements Map {\n+    \n+    /**\n+     * The <code>Map</code> used for default implementations.\n+     */\n+    protected Map map;\n+\n+    /**\n+     * Creates a new instance acting as a representative for the\n+     * specified <code>Map</code>.\n+     *\n+     * @param map The <code>Map</code> to whose operations to wrap.\n+     */\n+    public ProxyMap(Map map) {\n+        this.map = map;\n+    }\n+\n+    public void clear() {\n+        map.clear();\n+    }\n+\n+    public boolean containsKey(Object key) {\n+        return map.containsKey(key);\n+    }\n+\n+    public boolean containsValue(Object value) {\n+        return map.containsValue(value);\n+    }\n+\n+    public Set entrySet() {\n+        return map.entrySet();\n+    }\n+\n+    public boolean equals(Object map) {\n+        return map.equals(map);\n+    }\n+\n+    public Object get(Object key) {\n+        return map.get(key);\n+    }\n+\n+    public int hashCode() {\n+        return map.hashCode();\n+    }\n+\n+    public boolean isEmpty() {\n+        return map.isEmpty();\n+    }\n+\n+    public Set keySet() {\n+        return map.keySet();\n+    }\n+\n+    public Object put(Object key, Object value) {\n+        return map.put(key, value);\n+    }\n+\n+    public void putAll(Map t) {\n+        map.putAll(t);\n+    }\n+\n+    public Object remove(Object key) {\n+        return map.remove(key);\n+    }\n+\n+    public int size() {\n+        return map.size();\n+    }\n+\n+    public Collection values() {\n+        return map.values();\n+    }\n+   \n+}\n+\n+", "timestamp": 1016170618, "metainfo": ""}