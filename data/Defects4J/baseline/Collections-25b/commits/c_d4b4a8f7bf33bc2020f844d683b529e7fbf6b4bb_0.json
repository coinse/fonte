{"sha": "d4b4a8f7bf33bc2020f844d683b529e7fbf6b4bb", "log": "Fix problem with Serialization and Cursors hidden from original tests. Reported by Rodney   ", "commit": "\n--- a/src/java/org/apache/commons/collections/CursorableLinkedList.java\n+++ b/src/java/org/apache/commons/collections/CursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CursorableLinkedList.java,v 1.16 2003/08/31 17:26:43 scolebourne Exp $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/CursorableLinkedList.java,v 1.17 2003/09/20 14:03:57 scolebourne Exp $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  *\n  * @see java.util.LinkedList\n  * @since Commons Collections 1.0\n- * @version $Revision: 1.16 $ $Date: 2003/08/31 17:26:43 $\n+ * @version $Revision: 1.17 $ $Date: 2003/09/20 14:03:57 $\n  * \n  * @author Rodney Waldhoff\n  * @author Janek Bogucki\n  */\n public class CursorableLinkedList implements List, Serializable {\n     //  TODO: use weak references to cursors in case they aren't closed directly\n+    \n+    /** Ensure serialization compatability */    \n+    private static final long serialVersionUID = 8836393098519411393L;\n \n     //--- public methods ---------------------------------------------\n \n         out.defaultWriteObject();\n         out.writeInt(_size);\n         Listable cur = _head.next();\n-        while(cur != null) {\n+        while (cur != null) {\n             out.writeObject(cur.value());\n             cur = cur.next();\n         }\n     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n         in.defaultReadObject();\n         _size = 0;\n+        _modCount = 0;\n+        _cursors = new ArrayList();\n         _head = new Listable(null,null,null);\n         int size = in.readInt();\n-        for(int i=0;i<size;i++) {\n+        for (int i=0;i<size;i++) {\n             this.add(in.readObject());\n         }\n     }\n     //--- protected attributes ---------------------------------------\n \n     /** The number of elements in me. */\n-    transient protected int _size = 0;\n+    protected transient int _size = 0;\n \n     /**\n      * A sentry node.\n      * {@link org.apache.commons.collections.CursorableLinkedList.Listable} \n      * is the first or last element in the list.\n      */\n-    transient protected Listable _head = new Listable(null,null,null);\n+    protected transient Listable _head = new Listable(null,null,null);\n \n     /** Tracks the number of structural modifications to me. */\n-    protected int _modCount = 0;\n+    protected transient int _modCount = 0;\n \n     /**\n      * A list of the currently {@link CursorableLinkedList.Cursor}s currently\n      * open in this list.\n      */\n-    protected List _cursors = new ArrayList();\n+    protected transient List _cursors = new ArrayList();\n \n     //--- inner classes ----------------------------------------------\n \n--- a/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n+++ b/src/test/org/apache/commons/collections/TestCursorableLinkedList.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.9 2003/08/31 17:28:43 scolebourne Exp $\n- * $Revision: 1.9 $\n- * $Date: 2003/08/31 17:28:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/TestCursorableLinkedList.java,v 1.10 2003/09/20 14:03:57 scolebourne Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2003/09/20 14:03:57 $\n  *\n  * ====================================================================\n  *\n \n /**\n  * @author Rodney Waldhoff\n- * @version $Id: TestCursorableLinkedList.java,v 1.9 2003/08/31 17:28:43 scolebourne Exp $\n+ * @version $Id: TestCursorableLinkedList.java,v 1.10 2003/09/20 14:03:57 scolebourne Exp $\n  */\n public class TestCursorableLinkedList extends TestList {\n     public TestCursorableLinkedList(String testName) {\n         list.add(\"C\");\n         list.add(\"D\");\n         list.add(\"E\");\n+\n+        java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n+        java.io.ObjectOutputStream out = new java.io.ObjectOutputStream(buf);\n+        out.writeObject(list);\n+        out.flush();\n+        out.close();\n+\n+        java.io.ByteArrayInputStream bufin = new java.io.ByteArrayInputStream(buf.toByteArray());\n+        java.io.ObjectInputStream in = new java.io.ObjectInputStream(bufin);\n+        Object list2 = in.readObject();\n+\n+        assertTrue(list != list2);\n+        assertTrue(list2.equals(list));\n+        assertTrue(list.equals(list2));\n+    }\n+\n+    public void testSerializationWithOpenCursor() throws Exception {\n+        list.add(\"A\");\n+        list.add(\"B\");\n+        list.add(\"C\");\n+        list.add(\"D\");\n+        list.add(\"E\");\n+        CursorableLinkedList.Cursor cursor = list.cursor();\n \n         java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream();\n         java.io.ObjectOutputStream out = new java.io.ObjectOutputStream(buf);", "timestamp": 1064066637, "metainfo": ""}