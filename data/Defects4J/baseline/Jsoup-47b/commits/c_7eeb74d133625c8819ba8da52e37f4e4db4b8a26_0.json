{"sha": "7eeb74d133625c8819ba8da52e37f4e4db4b8a26", "log": "Automatically determine charset when parsing from URL or File.", "commit": "\n--- a/src/main/java/org/jsoup/DataUtil.java\n+++ b/src/main/java/org/jsoup/DataUtil.java\n package org.jsoup;\n \n import org.apache.commons.lang.Validate;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n \n import java.io.*;\n import java.net.URL;\n import java.net.HttpURLConnection;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * Internal static utilities for handling data.\n  *\n  */\n class DataUtil {\n+    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=([^\\\\s;]*)\");\n+    private static final String defaultCharset = \"UTF-8\"; // used if not found in header or http-equiv\n+    private static final int bufferSize = 0x20000; // ~130K.\n     \n     /**\n      * Loads a file to a String.\n                     contentType, url.toString()));\n         \n         InputStream inStream = new BufferedInputStream(conn.getInputStream());\n-        String charSet = \"UTF-8\"; // todo[must]: get from content-encoding, or http-equiv (two-pass?)\n+        String charSet = getCharsetFromContentType(contentType); // may be null, readInputStream deals with it\n \n         String data = readInputStream(inStream, charSet);\n         inStream.close();\n         return data;\n     }\n \n+    // reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\n+    // switching the chartset midstream when a meta http-equiv tag defines the charset.\n     private static String readInputStream(InputStream inStream, String charsetName) throws IOException {\n-        char[] buffer = new char[0x20000]; // ~ 130K\n-        StringBuilder data = new StringBuilder(0x20000);\n-        Reader inReader = new InputStreamReader(inStream, charsetName);\n+        byte[] buffer = new byte[bufferSize];\n+        ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);\n         int read;\n-        do {\n-            read = inReader.read(buffer, 0, buffer.length);\n-            if (read > 0) {\n-                data.append(buffer, 0, read);\n+        while(true) {\n+            read  = inStream.read(buffer);\n+            if (read == -1) break;\n+            outStream.write(buffer, 0, read);\n+        }\n+        ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());\n+        \n+        String docData;\n+        if (charsetName == null) { // determine from http-equiv. safe parse as UTF-8\n+            docData = Charset.forName(defaultCharset).decode(byteData).toString();\n+            Document doc = Jsoup.parse(docData);\n+            Element httpEquiv = doc.select(\"meta[http-equiv]\").first();\n+            if (httpEquiv != null) { // if not found, will keep utf-8 as best attempt\n+                String foundCharset = getCharsetFromContentType(httpEquiv.attr(\"content\"));\n+                if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode\n+                    byteData.rewind();\n+                    docData = Charset.forName(foundCharset).decode(byteData).toString();\n+                }\n             }\n-\n-        } while (read >= 0);\n-\n-        return data.toString();\n+        } else { // specified by content type header (or by user on file load)\n+            docData = Charset.forName(charsetName).decode(byteData).toString();\n+        }\n+        return docData;\n+    }\n+    \n+    /**\n+     * Parse out a charset from a content type header.\n+     * @param contentType e.g. \"text/html; charset=EUC-JP\"\n+     * @return \"EUC-JP\", or null if not found. Charset is trimmed and uppercased.\n+     */\n+    static String getCharsetFromContentType(String contentType) {\n+        if (contentType == null) return null;\n+        \n+        Matcher m = charsetPattern.matcher(contentType);\n+        if (m.find()) {\n+            return m.group(1).trim().toUpperCase();\n+        }\n+        return null;\n     }\n     \n     \n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n \n     /**\n      Fetch a URL, and parse it as HTML.\n+     <p>\n+     The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to {@code UTF-8}.\n \n      @param url           URL to fetch (with a GET). The protocol must be {@code http} or {@code https}.\n      @param timeoutMillis Connection and read timeout, in milliseconds. If exceeded, IOException is thrown.\n      Parse the contents of a file as HTML.\n \n      @param in          file to load HTML from\n-     @param charsetName character set of file contents. If you don't know the charset, generally the best guess is {@code UTF-8}.\n+     @param charsetName (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if\n+     present, or fall back to {@code UTF-8} (which is often safe to do).\n      @param baseUri     The URL where the HTML was retrieved from, to generate absolute URLs relative to.\n      @return sane HTML\n \n      Parse the contents of a file as HTML. The location of the file is used as the base URI to qualify relative URLs.\n \n      @param in          file to load HTML from\n-     @param charsetName character set of file contents. If you don't know the charset, generally the best guess is {@code UTF-8}.\n+     @param charsetName (optional) character set of file contents. Set to null to determine from http-equiv meta tag, if\n+     present, or fall back to {@code UTF-8} (which is often safe to do).\n      @return sane HTML\n \n      @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n--- /dev/null\n+++ b/src/test/java/org/jsoup/DataUtilTest.java\n+package org.jsoup;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class DataUtilTest {\n+    @Test public void testCharset() {\n+        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=utf-8 \"));\n+        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset=UTF-8\"));\n+        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=ISO-8859-1\"));\n+        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html\"));\n+        assertEquals(null, DataUtil.getCharsetFromContentType(null));\n+    }\n+}\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n         assertEquals(\"\u5168\u56fd\u3001\u4eba\u6c17\u306e\u99c5\u30e9\u30f3\u30ad\u30f3\u30b0\", a.text());\n     }\n     \n+    @Test public void testBaidu() throws IOException {\n+        File in = getFile(\"/htmltests/baidu-cn-home.html\");\n+        Document doc = Jsoup.parse(in, null, \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n+        Element submit = doc.select(\"#su\").first();\n+        assertEquals(\"\u767e\u5ea6\u4e00\u4e0b\", submit.attr(\"value\"));\n+        \n+        // test from attribute match\n+        submit = doc.select(\"input[value=\u767e\u5ea6\u4e00\u4e0b]\").first();\n+        assertEquals(\"su\", submit.id());\n+        Element newsLink = doc.select(\"a:contains(\u65b0)\").first();\n+        assertEquals(\"http://news.baidu.com\", newsLink.absUrl(\"href\"));\n+    }\n+    \n     File getFile(String resourceName) {\n         try {\n             File file = new File(ParseTest.class.getResource(resourceName).toURI());", "timestamp": 1309605115, "metainfo": ""}