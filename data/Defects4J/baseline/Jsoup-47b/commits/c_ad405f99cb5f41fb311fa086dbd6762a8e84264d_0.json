{"sha": "ad405f99cb5f41fb311fa086dbd6762a8e84264d", "log": "Text normalisation.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * @param tag tag of this element\n      * @param baseUri the base URI\n      * @param attributes initial attributes\n-     * @see #appendChild(Element)\n+     * @see #appendChild(Node)\n      * @see #appendElement(String)\n      */\n     public Element(Tag tag, String baseUri, Attributes attributes) {\n      */\n     public String text() {\n         StringBuilder sb = new StringBuilder();\n-\n-        for (Node childNode : childNodes) {\n-            if (childNode instanceof TextNode) {\n-                TextNode textNode = (TextNode) childNode;\n-                sb.append(textNode.getWholeText());\n-            } else if (childNode instanceof Element) {\n-                Element element = (Element) childNode;\n-                String elementText = element.text();\n-                if (element.isBlock() && sb.length() > 0 && elementText.length() > 0)\n-                    sb.append(\" \");\n-                sb.append(elementText);\n+        text(sb);\n+        return sb.toString();\n+    }\n+\n+    private void text(StringBuilder accum) {\n+        int numNodes = childNodes.size();\n+        for (int i = 0; i <= numNodes; i++) {\n+            Node child = childNodes.get(i);\n+\n+            if (child instanceof TextNode) {\n+                TextNode textNode = (TextNode) child;\n+                String text = textNode.getWholeText();\n+\n+                if (!tag.preserveWhitespace()) {\n+                    text = TextNode.normaliseWhitespace(text);\n+                    if (TextNode.lastCharIsWhitespace(accum))\n+                        text = TextNode.stripLeadingWhitespace(text);\n+                }\n+                accum.append(text);\n+\n+            } else if (child instanceof Element) {\n+                Element element = (Element) child;\n+                if (element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n+                    accum.append(\" \");\n+                element.text(accum);\n             }\n         }\n-        return sb.toString();\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n package org.jsoup.nodes;\n \n import org.apache.commons.lang.StringEscapeUtils;\n+import org.apache.commons.lang.Validate;\n \n /**\n  A text node.\n         String text = StringEscapeUtils.unescapeHtml(encodedText);\n         return new TextNode(text, baseUri);\n     }\n+\n+    static String normaliseWhitespace(String text) {\n+        text = text.replaceAll(\"\\\\s{2,}|(\\\\r\\\\n|\\\\r|\\\\n)\", \" \"); // more than one space, and newlines to \" \"\n+        return text;\n+    }\n+\n+    static String stripLeadingWhitespace(String text) {\n+        return text.replaceFirst(\"\\\\s+\", \"\");\n+    }\n+\n+    static boolean lastCharIsWhitespace(StringBuilder sb) {\n+        if (sb.length() == 0)\n+            return false;\n+        String lastChar = sb.substring(sb.length()-1, sb.length());\n+        Validate.isTrue(lastChar.length() == 1); // todo: remove check\n+        return lastChar.equals(\" \");\n+    }\n }\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n     private boolean canContainInline = true; // only pcdata if not\n     private boolean optionalClosing = false; // If tag is open, and another seen, close previous tag\n     private boolean empty = false; // can hold nothing; e.g. img\n+    private boolean preserveWhitespace = false; // for pre, textarea, script etc\n     private List<Tag> ancestors;\n \n     private Tag(String tagName) {\n         return empty;\n     }\n \n+    public boolean preserveWhitespace() {\n+        return preserveWhitespace;\n+    }\n+\n     Tag getImplicitParent() {\n         return (!ancestors.isEmpty()) ? ancestors.get(0) : null;\n     }\n         createBlock(\"H6\").setContainInlineOnly();\n         createBlock(\"UL\");\n         createBlock(\"OL\");\n-        createBlock(\"PRE\").setContainInlineOnly();\n+        createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n         createBlock(\"DIV\");\n         createBlock(\"NOSCRIPT\");\n         createBlock(\"BLOCKQUOTE\");\n     private Tag setContainDataOnly() {\n         canContainBlock = false;\n         canContainInline = false;\n+        preserveWhitespace = true;\n         return this;\n     }\n \n \n     private Tag setOptionalClosing() {\n         optionalClosing = true;\n+        return this;\n+    }\n+\n+    private Tag setPreserveWhitespace() {\n+        preserveWhitespace = true;\n         return this;\n     }\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         Document doc = Jsoup.parse(reference);\n         assertEquals(\"Hello Another element\", doc.text());\n         assertEquals(\"Another element\", doc.getElementsByTag(\"p\").get(1).text());\n+    }\n+\n+    @Test public void testNormalisesText() {\n+        String h = \"<p>Hello<p>There.</p> \\n <p>Here <b>is</b> \\n s<b>om</b>e text.\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"Hello There. Here is some text.\", doc.text());\n+    }\n+\n+    @Test public void testKeepsPreTexT() {\n+        String h = \"<p>Hello \\n \\n there.</p> <div><pre>  What's \\n\\n  that?</pre>\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"Hello there.  What's \\n\\n  that?\", doc.text());\n     }\n \n     @Test public void testGetSiblings() {", "timestamp": 1309605107, "metainfo": ""}