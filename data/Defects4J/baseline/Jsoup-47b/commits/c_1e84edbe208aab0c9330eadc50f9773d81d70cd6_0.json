{"sha": "1e84edbe208aab0c9330eadc50f9773d81d70cd6", "log": "Act on only the first base href in parse.  And make node.setBaseUri() recurse down to descendants.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     }\n \n     /**\n-     Update the base URI of this node.\n+     Update the base URI of this node and all of its descendants.\n      @param baseUri base URI to set\n      */\n-    public void setBaseUri(String baseUri) {\n+    public void setBaseUri(final String baseUri) {\n         Validate.notNull(baseUri);\n-        this.baseUri = baseUri;\n+\n+        traverse(new NodeVisitor() {\n+            public void head(Node node, int depth) {\n+                node.baseUri = baseUri;\n+            }\n+\n+            public void tail(Node node, int depth) {\n+            }\n+        });\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/parser/TreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/TreeBuilder.java\n     private DescendableLinkedList<Element> stack; // the stack of open elements\n \n     private String baseUri; // current base uri, for creating new elements\n+    private boolean baseUriSetFromDoc = false;\n     private Token currentToken; // currentToken is used only for error tracking.\n     private Element headElement; // the current head element\n     private Element formElement; // the current form element\n         return baseUri;\n     }\n \n-    void setBaseUri(Element base) {\n+    void maybeSetBaseUri(Element base) {\n+        if (baseUriSetFromDoc) // only listen to the first <base href> in parse\n+            return;\n+\n         String href = base.absUrl(\"href\");\n         if (href.length() != 0) { // ignore <base target> etc\n             baseUri = href;\n-            doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base\n+            baseUriSetFromDoc = true;\n+            doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants\n         }\n     }\n \n--- a/src/main/java/org/jsoup/parser/TreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/TreeBuilderState.java\n                         return InBody.process(t, tb);\n                     } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                         Element el = tb.insertEmpty(start);\n-                        // jsoup special: update base as it is seen. todo: flip to current browser behaviour of one shot\n+                        // jsoup special: update base the frist time it is seen\n                         if (name.equals(\"base\") && el.hasAttr(\"href\"))\n-                            tb.setBaseUri(el);\n+                            tb.maybeSetBaseUri(el);\n                     } else if (name.equals(\"meta\")) {\n                         Element meta = tb.insertEmpty(start);\n                         // todo: charset switches\n--- a/src/test/java/org/jsoup/nodes/NodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n         Element dodgyBase = new Element(tag, \"wtf://no-such-protocol/\", attribs);\n         assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); // base fails, but href good, so get that\n         assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); // base fails, only rel href, so return nothing \n+    }\n+\n+    @Test public void setBaseUriIsRecursive() {\n+        Document doc = Jsoup.parse(\"<div><p></p></div>\");\n+        String baseUri = \"http://jsoup.org\";\n+        doc.setBaseUri(baseUri);\n+        \n+        assertEquals(baseUri, doc.baseUri());\n+        assertEquals(baseUri, doc.select(\"div\").first().baseUri());\n+        assertEquals(baseUri, doc.select(\"p\").first().baseUri());\n     }\n \n     @Test public void handlesAbsPrefix() {\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n     }\n \n     @Test public void handlesBaseTags() {\n-        // todo -- don't handle base tags like this -- spec and browsers don't (any more -- v. old ones do).\n-        // instead, just maintain one baseUri in the doc\n-        String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>\";\n+        // only listen to the first base href\n+        String h = \"<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=/4>#</a>\";\n         Document doc = Jsoup.parse(h, \"http://foo/\");\n-        assertEquals(\"http://bar\", doc.baseUri()); // gets updated as base changes, so doc.createElement has latest.\n+        assertEquals(\"http://foo/2/\", doc.baseUri()); // gets set once, so doc and descendants have first only\n \n         Elements anchors = doc.getElementsByTag(\"a\");\n         assertEquals(3, anchors.size());\n \n-        assertEquals(\"http://foo/\", anchors.get(0).baseUri());\n+        assertEquals(\"http://foo/2/\", anchors.get(0).baseUri());\n         assertEquals(\"http://foo/2/\", anchors.get(1).baseUri());\n-        assertEquals(\"http://bar\", anchors.get(2).baseUri());\n-\n-        assertEquals(\"http://foo/1\", anchors.get(0).absUrl(\"href\"));\n+        assertEquals(\"http://foo/2/\", anchors.get(2).baseUri());\n+\n+        assertEquals(\"http://foo/2/1\", anchors.get(0).absUrl(\"href\"));\n         assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\"));\n-        assertEquals(\"http://bar/4\", anchors.get(2).absUrl(\"href\"));\n+        assertEquals(\"http://foo/4\", anchors.get(2).absUrl(\"href\"));\n     }\n \n     @Test public void handlesCdata() {", "timestamp": 1317431596, "metainfo": ""}