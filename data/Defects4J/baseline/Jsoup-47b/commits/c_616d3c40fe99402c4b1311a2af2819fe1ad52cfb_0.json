{"sha": "616d3c40fe99402c4b1311a2af2819fe1ad52cfb", "log": "Code cleanup", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n     /**\n      * GET and POST http methods.\n      */\n-    public enum Method {\n+    enum Method {\n         GET(false), POST(true), PUT(true), DELETE(false), PATCH(true);\n \n         private final boolean hasBody;\n \n-        private Method(boolean hasBody) {\n+        Method(boolean hasBody) {\n             this.hasBody = hasBody;\n         }\n \n      * @param url URL to connect to\n      * @return this Connection, for chaining\n      */\n-    public Connection url(URL url);\n+    Connection url(URL url);\n \n     /**\n      * Set the request URL to fetch. The protocol must be HTTP or HTTPS.\n      * @param url URL to connect to\n      * @return this Connection, for chaining\n      */\n-    public Connection url(String url);\n+    Connection url(String url);\n \n     /**\n      * Set the request user-agent header.\n      * @param userAgent user-agent to use\n      * @return this Connection, for chaining\n      */\n-    public Connection userAgent(String userAgent);\n+    Connection userAgent(String userAgent);\n \n     /**\n      * Set the request timeouts (connect and read). If a timeout occurs, an IOException will be thrown. The default\n      * @param millis number of milliseconds (thousandths of a second) before timing out connects or reads.\n      * @return this Connection, for chaining\n      */\n-    public Connection timeout(int millis);\n+    Connection timeout(int millis);\n \n     /**\n      * Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed,\n      * @param bytes number of bytes to read from the input before truncating\n      * @return this Connection, for chaining\n      */\n-    public Connection maxBodySize(int bytes);\n+    Connection maxBodySize(int bytes);\n \n     /**\n      * Set the request referrer (aka \"referer\") header.\n      * @param referrer referrer to use\n      * @return this Connection, for chaining\n      */\n-    public Connection referrer(String referrer);\n+    Connection referrer(String referrer);\n \n     /**\n      * Configures the connection to (not) follow server redirects. By default this is <b>true</b>.\n      * @param followRedirects true if server redirects should be followed.\n      * @return this Connection, for chaining\n      */\n-    public Connection followRedirects(boolean followRedirects);\n+    Connection followRedirects(boolean followRedirects);\n \n     /**\n      * Set the request method to use, GET or POST. Default is GET.\n      * @param method HTTP request method\n      * @return this Connection, for chaining\n      */\n-    public Connection method(Method method);\n+    Connection method(Method method);\n \n     /**\n      * Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By\n      * @param ignoreHttpErrors - false (default) if HTTP errors should be ignored.\n      * @return this Connection, for chaining\n      */\n-    public Connection ignoreHttpErrors(boolean ignoreHttpErrors);\n+    Connection ignoreHttpErrors(boolean ignoreHttpErrors);\n \n     /**\n      * Ignore the document's Content-Type when parsing the response. By default this is <b>false</b>, an unrecognised\n      * Document.\n      * @return this Connection, for chaining\n      */\n-    public Connection ignoreContentType(boolean ignoreContentType);\n+    Connection ignoreContentType(boolean ignoreContentType);\n \n     /**\n      * Disable/enable TSL certificates validation for HTTPS requests.\n      * @param value data value\n      * @return this Connection, for chaining\n      */\n-    public Connection data(String key, String value);\n+    Connection data(String key, String value);\n \n     /**\n      * Add an input stream as a request data paramater. For GETs, has no effect, but for POSTS this will upload the\n      * You must close the InputStream in a {@code finally} block.\n      * @return this Connections, for chaining\n      */\n-    public Connection data(String key, String filename, InputStream inputStream);\n+    Connection data(String key, String filename, InputStream inputStream);\n \n     /**\n      * Adds all of the supplied data to the request data parameters\n      * @param data collection of data parameters\n      * @return this Connection, for chaining\n      */\n-    public Connection data(Collection<KeyVal> data);\n+    Connection data(Collection<KeyVal> data);\n \n     /**\n      * Adds all of the supplied data to the request data parameters\n      * @param data map of data parameters\n      * @return this Connection, for chaining\n      */\n-    public Connection data(Map<String, String> data);\n+    Connection data(Map<String, String> data);\n \n     /**\n      * Add a number of request data parameters. Multiple parameters may be set at once, e.g.: <code>.data(\"name\",\n      * @param keyvals a set of key value pairs.\n      * @return this Connection, for chaining\n      */\n-    public Connection data(String... keyvals);\n+    Connection data(String... keyvals);\n \n     /**\n      * Set a request header.\n      * @return this Connection, for chaining\n      * @see org.jsoup.Connection.Request#headers()\n      */\n-    public Connection header(String name, String value);\n+    Connection header(String name, String value);\n \n     /**\n      * Set a cookie to be sent in the request.\n      * @param value value of cookie\n      * @return this Connection, for chaining\n      */\n-    public Connection cookie(String name, String value);\n+    Connection cookie(String name, String value);\n \n     /**\n      * Adds each of the supplied cookies to the request.\n      * @param cookies map of cookie name {@literal ->} value pairs\n      * @return this Connection, for chaining\n      */\n-    public Connection cookies(Map<String, String> cookies);\n+    Connection cookies(Map<String, String> cookies);\n \n     /**\n      * Provide an alternate parser to use when parsing the response to a Document.\n      * @param parser alternate parser\n      * @return this Connection, for chaining\n      */\n-    public Connection parser(Parser parser);\n+    Connection parser(Parser parser);\n \n     /**\n      * Sets the default post data character set for x-www-form-urlencoded post data\n      * @param charset character set to encode post data\n      * @return this Connection, for chaining\n      */\n-    public Connection postDataCharset(String charset);\n+    Connection postDataCharset(String charset);\n \n     /**\n      * Execute the request as a GET, and parse the result.\n      * @throws java.net.SocketTimeoutException if the connection times out\n      * @throws IOException on error\n      */\n-    public Document get() throws IOException;\n+    Document get() throws IOException;\n \n     /**\n      * Execute the request as a POST, and parse the result.\n      * @throws java.net.SocketTimeoutException if the connection times out\n      * @throws IOException on error\n      */\n-    public Document post() throws IOException;\n+    Document post() throws IOException;\n \n     /**\n      * Execute the request.\n      * @throws java.net.SocketTimeoutException if the connection times out\n      * @throws IOException on error\n      */\n-    public Response execute() throws IOException;\n+    Response execute() throws IOException;\n \n     /**\n      * Get the request object associated with this connection\n      * @return request\n      */\n-    public Request request();\n+    Request request();\n \n     /**\n      * Set the connection's request\n      * @param request new request object\n      * @return this Connection, for chaining\n      */\n-    public Connection request(Request request);\n+    Connection request(Request request);\n \n     /**\n      * Get the response, once the request has been executed\n      * @return response\n      */\n-    public Response response();\n+    Response response();\n \n     /**\n      * Set the connection's response\n      * @param response new response\n      * @return this Connection, for chaining\n      */\n-    public Connection response(Response response);\n+    Connection response(Response response);\n \n     /**\n      * Common methods for Requests and Responses\n          * Get the URL\n          * @return URL\n          */\n-        public URL url();\n+        URL url();\n \n         /**\n          * Set the URL\n          * @param url new URL\n          * @return this, for chaining\n          */\n-        public T url(URL url);\n+        T url(URL url);\n \n         /**\n          * Get the request method\n          * @return method\n          */\n-        public Method method();\n+        Method method();\n \n         /**\n          * Set the request method\n          * @param method new method\n          * @return this, for chaining\n          */\n-        public T method(Method method);\n+        T method(Method method);\n \n         /**\n          * Get the value of a header. This is a simplified header model, where a header may only have one value.\n          * @see #hasHeader(String)\n          * @see #cookie(String)\n          */\n-        public String header(String name);\n+        String header(String name);\n \n         /**\n          * Set a header. This method will overwrite any existing header with the same case insensitive name.\n          * @param value Value of header\n          * @return this, for chaining\n          */\n-        public T header(String name, String value);\n+        T header(String name, String value);\n \n         /**\n          * Check if a header is present\n          * @param name name of header (case insensitive)\n          * @return if the header is present in this request/response\n          */\n-        public boolean hasHeader(String name);\n+        boolean hasHeader(String name);\n \n         /**\n          * Check if a header is present, with the given value\n          * @param value value (case insensitive)\n          * @return if the header and value pair are set in this req/res\n          */\n-        public boolean hasHeaderWithValue(String name, String value);\n+        boolean hasHeaderWithValue(String name, String value);\n \n         /**\n          * Remove a header by name\n          * @param name name of header to remove (case insensitive)\n          * @return this, for chaining\n          */\n-        public T removeHeader(String name);\n+        T removeHeader(String name);\n \n         /**\n          * Retrieve all of the request/response headers as a map\n          * @return headers\n          */\n-        public Map<String, String> headers();\n+        Map<String, String> headers();\n \n         /**\n          * Get a cookie value by name from this request/response.\n          * @param name name of cookie to retrieve.\n          * @return value of cookie, or null if not set\n          */\n-        public String cookie(String name);\n+        String cookie(String name);\n \n         /**\n          * Set a cookie in this request/response.\n          * @param value value of cookie\n          * @return this, for chaining\n          */\n-        public T cookie(String name, String value);\n+        T cookie(String name, String value);\n \n         /**\n          * Check if a cookie is present\n          * @param name name of cookie\n          * @return if the cookie is present in this request/response\n          */\n-        public boolean hasCookie(String name);\n+        boolean hasCookie(String name);\n \n         /**\n          * Remove a cookie by name\n          * @param name name of cookie to remove\n          * @return this, for chaining\n          */\n-        public T removeCookie(String name);\n+        T removeCookie(String name);\n \n         /**\n          * Retrieve all of the request/response cookies as a map\n          * @return cookies\n          */\n-        public Map<String, String> cookies();\n+        Map<String, String> cookies();\n     }\n \n     /**\n      * Represents a HTTP request.\n      */\n-    public interface Request extends Base<Request> {\n+    interface Request extends Base<Request> {\n \n \n         /**\n          * Get the request timeout, in milliseconds.\n          * @return the timeout in milliseconds.\n          */\n-        public int timeout();\n+        int timeout();\n \n         /**\n          * Update the request timeout.\n          * @param millis timeout, in milliseconds\n          * @return this Request, for chaining\n          */\n-        public Request timeout(int millis);\n+        Request timeout(int millis);\n \n         /**\n          * Get the maximum body size, in bytes.\n          * @return the maximum body size, in bytes.\n          */\n-        public int maxBodySize();\n+        int maxBodySize();\n \n         /**\n          * Update the maximum body size, in bytes.\n          * @param bytes maximum body size, in bytes.\n          * @return this Request, for chaining\n          */\n-        public Request maxBodySize(int bytes);\n+        Request maxBodySize(int bytes);\n \n         /**\n          * Get the current followRedirects configuration.\n          * @return true if followRedirects is enabled.\n          */\n-        public boolean followRedirects();\n+        boolean followRedirects();\n \n         /**\n          * Configures the request to (not) follow server redirects. By default this is <b>true</b>.\n          * @param followRedirects true if server redirects should be followed.\n          * @return this Request, for chaining\n          */\n-        public Request followRedirects(boolean followRedirects);\n+        Request followRedirects(boolean followRedirects);\n \n         /**\n          * Get the current ignoreHttpErrors configuration.\n          * @return true if errors will be ignored; false (default) if HTTP errors will cause an IOException to be\n          * thrown.\n          */\n-        public boolean ignoreHttpErrors();\n+        boolean ignoreHttpErrors();\n \n         /**\n          * Configures the request to ignore HTTP errors in the response.\n          * @param ignoreHttpErrors set to true to ignore HTTP errors.\n          * @return this Request, for chaining\n          */\n-        public Request ignoreHttpErrors(boolean ignoreHttpErrors);\n+        Request ignoreHttpErrors(boolean ignoreHttpErrors);\n \n         /**\n          * Get the current ignoreContentType configuration.\n          * @return true if invalid content-types will be ignored; false (default) if they will cause an IOException to\n          * be thrown.\n          */\n-        public boolean ignoreContentType();\n+        boolean ignoreContentType();\n \n         /**\n          * Configures the request to ignore the Content-Type of the response.\n          * @param ignoreContentType set to true to ignore the content type.\n          * @return this Request, for chaining\n          */\n-        public Request ignoreContentType(boolean ignoreContentType);\n+        Request ignoreContentType(boolean ignoreContentType);\n \n         /**\n          * Get the current state of TLS (SSL) certificate validation.\n          * @param keyval data to add.\n          * @return this Request, for chaining\n          */\n-        public Request data(KeyVal keyval);\n+        Request data(KeyVal keyval);\n \n         /**\n          * Get all of the request's data parameters\n          * @return collection of keyvals\n          */\n-        public Collection<KeyVal> data();\n+        Collection<KeyVal> data();\n \n         /**\n          * Specify the parser to use when parsing the document.\n          * @param parser parser to use.\n          * @return this Request, for chaining\n          */\n-        public Request parser(Parser parser);\n+        Request parser(Parser parser);\n \n         /**\n          * Get the current parser to use when parsing the document.\n          * @return current Parser\n          */\n-        public Parser parser();\n+        Parser parser();\n \n         /**\n          * Sets the post data character set for x-www-form-urlencoded post data\n          * @param charset character set to encode post data\n          * @return this Request, for chaining\n          */\n-        public Request postDataCharset(String charset);\n+        Request postDataCharset(String charset);\n \n         /**\n          * Gets the post data character set for x-www-form-urlencoded post data\n          * @return character set to encode post data\n          */\n-        public String postDataCharset();\n+        String postDataCharset();\n \n     }\n \n     /**\n      * Represents a HTTP response.\n      */\n-    public interface Response extends Base<Response> {\n+    interface Response extends Base<Response> {\n \n         /**\n          * Get the status code of the response.\n          * @return status code\n          */\n-        public int statusCode();\n+        int statusCode();\n \n         /**\n          * Get the status message of the response.\n          * @return status message\n          */\n-        public String statusMessage();\n+        String statusMessage();\n \n         /**\n          * Get the character set name of the response.\n          * @return character set name\n          */\n-        public String charset();\n+        String charset();\n \n         /**\n          * Get the response content type (e.g. \"text/html\");\n          * @return the response content type\n          */\n-        public String contentType();\n+        String contentType();\n \n         /**\n          * Parse the body of the response as a Document.\n          * @return a parsed Document\n          * @throws IOException on error\n          */\n-        public Document parse() throws IOException;\n+        Document parse() throws IOException;\n \n         /**\n          * Get the body of the response as a plain string.\n          * @return body\n          */\n-        public String body();\n+        String body();\n \n         /**\n          * Get the body of the response as an array of bytes.\n          * @return body bytes\n          */\n-        public byte[] bodyAsBytes();\n+        byte[] bodyAsBytes();\n     }\n \n     /**\n      * A Key Value tuple.\n      */\n-    public interface KeyVal {\n+    interface KeyVal {\n \n         /**\n          * Update the key of a keyval\n          * @param key new key\n          * @return this KeyVal, for chaining\n          */\n-        public KeyVal key(String key);\n+        KeyVal key(String key);\n \n         /**\n          * Get the key of a keyval\n          * @return the key\n          */\n-        public String key();\n+        String key();\n \n         /**\n          * Update the value of a keyval\n          * @param value the new value\n          * @return this KeyVal, for chaining\n          */\n-        public KeyVal value(String value);\n+        KeyVal value(String value);\n \n         /**\n          * Get the value of a keyval\n          * @return the value\n          */\n-        public String value();\n+        String value();\n \n         /**\n          * Add or update an input stream to this keyVal\n          * @param inputStream new input stream\n          * @return this KeyVal, for chaining\n          */\n-        public KeyVal inputStream(InputStream inputStream);\n+        KeyVal inputStream(InputStream inputStream);\n \n         /**\n          * Get the input stream associated with this keyval, if any\n          * @return input stream if set, or null\n          */\n-        public InputStream inputStream();\n+        InputStream inputStream();\n \n         /**\n          * Does this keyval have an input stream?\n          * @return true if this keyval does indeed have an input stream\n          */\n-        public boolean hasInputStream();\n+        boolean hasInputStream();\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n         Attribute attribute = (Attribute) o;\n \n         if (key != null ? !key.equals(attribute.key) : attribute.key != null) return false;\n-        if (value != null ? !value.equals(attribute.value) : attribute.value != null) return false;\n-\n-        return true;\n+        return !(value != null ? !value.equals(attribute.value) : attribute.value != null);\n     }\n \n     @Override\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n     }\n \n     public enum QuirksMode {\n-        noQuirks, quirks, limitedQuirks;\n+        noQuirks, quirks, limitedQuirks\n     }\n \n     public QuirksMode quirksMode() {\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n         if (preserveWhitespace != tag.preserveWhitespace) return false;\n         if (selfClosing != tag.selfClosing) return false;\n         if (formList != tag.formList) return false;\n-        if (formSubmit != tag.formSubmit) return false;\n-\n-        return true;\n+        return formSubmit == tag.formSubmit;\n     }\n \n     @Override\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n         return type == TokenType.EOF;\n     }\n \n-    static enum TokenType {\n+    enum TokenType {\n         Doctype,\n         StartTag,\n         EndTag,\n--- a/src/main/java/org/jsoup/select/NodeVisitor.java\n+++ b/src/main/java/org/jsoup/select/NodeVisitor.java\n      * @param depth the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node\n      * of that will have depth 1.\n      */\n-    public void head(Node node, int depth);\n+    void head(Node node, int depth);\n \n     /**\n      * Callback for when a node is last visited, after all of its descendants have been visited.\n      * @param depth the depth of the node, relative to the root node. E.g., the root node has depth 0, and a child node\n      * of that will have depth 1.\n      */\n-    public void tail(Node node, int depth);\n+    void tail(Node node, int depth);\n }", "timestamp": 1429307046, "metainfo": ""}