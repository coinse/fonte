{"sha": "19f2541e9dad74a7e734225f3d1b598324a6ea49", "log": "Cleaner.isValid() method.  Closes #6.", "commit": "\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n     public static String clean(String bodyHtml, Whitelist whitelist) {\n         return clean(bodyHtml, \"\", whitelist);\n     }\n+\n+    /**\n+     Test if the input HTML has only tags and attributes allowed by the Whitelist. Useful for form validation. The input HTML should\n+     still be run through the cleaner to set up enforced attributes, and to tidy the output.\n+     @param bodyHtml HTML to test\n+     @param whitelist whitelist to test against\n+     @return true if no tags or attributes were removed; false otherwise\n+     @see #clean(String, org.jsoup.safety.Whitelist) \n+     */\n+    public static boolean isValid(String bodyHtml, Whitelist whitelist) {\n+        Document dirty = parseBodyFragment(bodyHtml, \"\");\n+        Cleaner cleaner = new Cleaner(whitelist);\n+        return cleaner.isValid(dirty);\n+    }\n+    \n }\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n         return clean;\n     }\n \n-    private void copySafeNodes(Element source, Element dest) {\n+    /**\n+     Dertmines if the input document is valid, against the whitelist. It is considered valid if all the tags and attributes\n+     in the input HTML are allowed by the whitelist.\n+     <p/>\n+     This method can be used as a validator for user input forms. An invalid document will still be cleaned successfully\n+     using the {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the document\n+     to ensure enforced attributes are set correctly, and that the output is tidied.\n+     @param dirtyDocument document to test\n+     @return true if no tags or attributes need to be removed; false if they do\n+     */\n+    public boolean isValid(Document dirtyDocument) {\n+        Validate.notNull(dirtyDocument);\n+\n+        Document clean = Document.createShell(dirtyDocument.baseUri());\n+        int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body());\n+        return numDiscarded == 0;\n+    }\n+\n+    /**\n+     Iterates the input and copies trusted nodes (tags, attributes, text) into the destination.\n+     @param source source of HTML\n+     @param dest destination element to copy into\n+     @return number of discarded elements (that were considered unsafe)\n+     */\n+    private int copySafeNodes(Element source, Element dest) {\n         List<Node> sourceChildren = source.childNodes();\n+        int numDiscarded = 0;\n \n         for (Node sourceChild : sourceChildren) {\n             if (sourceChild instanceof Element) {\n                 Element sourceEl = (Element) sourceChild;\n \n                 if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n-                    Element destChild = createSafeElement(sourceEl);\n+                    ElementMeta meta = createSafeElement(sourceEl);\n+                    Element destChild = meta.el;\n                     dest.appendChild(destChild);\n-                    copySafeNodes(sourceEl, destChild); // recurs\n+\n+                    numDiscarded += meta.numAttribsDiscarded;\n+                    numDiscarded += copySafeNodes(sourceEl, destChild); // recurs\n                 } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n-                    copySafeNodes(sourceEl, dest);\n+                    numDiscarded++;\n+                    numDiscarded += copySafeNodes(sourceEl, dest);\n                 }\n             } else if (sourceChild instanceof TextNode) {\n                 TextNode sourceText = (TextNode) sourceChild;\n                 dest.appendChild(destText);\n             } // else, we don't care about comments, xml proc instructions, etc\n         }\n+        return numDiscarded;\n     }\n \n-    private Element createSafeElement(Element sourceEl) {\n+    private ElementMeta createSafeElement(Element sourceEl) {\n         String sourceTag = sourceEl.tagName();\n         Attributes destAttrs = new Attributes();\n         Element dest = new Element(Tag.valueOf(sourceTag), sourceEl.baseUri(), destAttrs);\n+        int numDiscarded = 0;\n \n         Attributes sourceAttrs = sourceEl.attributes();\n         for (Attribute sourceAttr : sourceAttrs) {\n             if (whitelist.isSafeAttribute(sourceTag, sourceAttr))\n                 destAttrs.put(sourceAttr);\n+            else\n+                numDiscarded++;\n         }\n         Attributes enforcedAttrs = whitelist.getEnforcedAttributes(sourceTag);\n         destAttrs.addAll(enforcedAttrs);\n-        return dest;\n+\n+        return new ElementMeta(dest, numDiscarded);\n+    }\n+\n+    private static class ElementMeta {\n+        Element el;\n+        int numAttribsDiscarded;\n+\n+        ElementMeta(Element el, int numAttribsDiscarded) {\n+            this.el = el;\n+            this.numAttribsDiscarded = numAttribsDiscarded;\n+        }\n     }\n \n }\n--- a/src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java\n         String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());\n         assertEquals(\"<img alt=\\\"\\\" />\", cleanHtml);\n     }\n+\n+    @Test public void testIsValid() {\n+        String ok = \"<p>Test <b>OK</b></p>\";\n+        String nok1 = \"<p><script></script>Not <b>OK</b></p>\";\n+        String nok2 = \"<p align=right>Test <b>OK</b></p>\";\n+        assertTrue(Jsoup.isValid(ok, Whitelist.basic()));\n+        assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));\n+        assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));\n+    }\n }", "timestamp": 1309605111, "metainfo": ""}