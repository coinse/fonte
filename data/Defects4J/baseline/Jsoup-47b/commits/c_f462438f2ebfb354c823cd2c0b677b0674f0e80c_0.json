{"sha": "f462438f2ebfb354c823cd2c0b677b0674f0e80c", "log": "Added :not() selector, to find elements that do not match the selector. E.g. div:not(.logo) finds divs that do not have the \"logo\" class name.  Fixes #36", "commit": "\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n   <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n   <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n   <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n+  <tr><td><code>:not(<em>selector</em>)</code></td><td>elements that do not match the <em>selector</em></td><code>div:not(.logo)</code> finds all divs that do not have the \"logo\" class</td></tr>\n   <tr><td><code>:contains(<em>text</em>)</code></td><td>elements that contains the specified text. The search is case insensitive. The text may appear in the found element, or any of its descendants.</td><td><code>p:contains(jsoup)</code> finds p elements containing the text \"jsoup\".</td></tr>\n   <tr><td><code>:matches(<em>regex</em>)</code></td><td>elements whose text matches the specified regular expression. The text may appear in the found element, or any of its descendants.</td><td><code>td:matches(\\\\d+)</code> finds table cells containing digits. <code>div:matches((?i)login)</code> finds divs containing the text, case insensitively.</td></tr>\n   <tr><td><code>:containsOwn(<em>text</em>)</code></td><td>elements that directly contains the specified text. The search is case insensitive. The text must appear in the found element, not any of its descendants.</td><td><code>p:containsOwn(jsoup)</code> finds p elements with own text \"jsoup\".</td></tr>\n         if (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements\n             elements.add(root);\n             combinator(tq.consume().toString());\n+        } else if (tq.matches(\":has(\")) {\n+            elements.addAll(root.getAllElements());\n         } else {\n             addElements(findElements()); // chomp first element matcher off queue \n         }            \n             return matches(false);\n         } else if (tq.matches(\":matchesOwn(\")) {\n             return matches(true);\n+        } else if (tq.matches(\":not(\")) {\n+            return not();\n         } else { // unhandled\n             throw new SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n         }\n         Validate.notEmpty(regex, \":matches(regex) query must not be empty\");\n         \n         return own ? root.getElementsMatchingOwnText(regex) : root.getElementsMatchingText(regex);\n+    }\n+\n+    // :not(selector)\n+    private Elements not() {\n+        tq.consume(\":not\");\n+        String subQuery = tq.chompBalanced('(', ')');\n+        Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\");\n+\n+        return filterOut(root.getAllElements(), select(subQuery, root));\n     }\n \n     // direct child descendants\n         return children;\n     }\n \n+    // exclude set. package open so that Elements can implement .not() selector.\n+    static Elements filterOut(Collection<Element> elements, Collection<Element> outs) {\n+        Elements output = new Elements();\n+        for (Element el: elements) {\n+            boolean found = false;\n+            for (Element out: outs) {\n+                if (el.equals(out)) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (!found)\n+                output.add(el);\n+        }\n+        return output;\n+    }\n+\n     public static class SelectorParseException extends IllegalStateException {\n         public SelectorParseException(String msg, Object... params) {\n             super(String.format(msg, params));\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(\"0\", divs3.get(0).id());\n         assertEquals(\"1\", divs3.get(1).id());\n         assertEquals(\"2\", divs3.get(2).id());\n+\n+        Elements els1 = doc.body().select(\":has(p)\");\n+        assertEquals(3, els1.size()); // body, div, dib\n+        assertEquals(\"body\", els1.first().tagName());\n+        assertEquals(\"0\", els1.get(1).id());\n+        assertEquals(\"2\", els1.get(2).id());\n     }\n \n     @Test public void testNestedHas() {\n         assertEquals(1, el2.size());\n         assertEquals(\"2\", el2.first().id());\n     }\n+\n+    @Test public void notParas() {\n+        Document doc = Jsoup.parse(\"<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>\");\n+\n+        Elements el1 = doc.select(\"p:not([id=1])\");\n+        assertEquals(2, el1.size());\n+        assertEquals(\"Two\", el1.first().text());\n+        assertEquals(\"Three\", el1.last().text());\n+\n+        Elements el2 = doc.select(\"p:not(:has(span))\");\n+        assertEquals(2, el2.size());\n+        assertEquals(\"One\", el2.first().text());\n+        assertEquals(\"Two\", el2.last().text());\n+    }\n+\n+    @Test public void notAll() {\n+        Document doc = Jsoup.parse(\"<p>Two</p> <p><span>Three</span></p>\");\n+\n+        Elements el1 = doc.body().select(\":not(p)\"); // should just be the span\n+        assertEquals(2, el1.size());\n+        assertEquals(\"body\", el1.first().tagName());\n+        assertEquals(\"span\", el1.last().tagName());\n+    }\n+\n+    @Test public void notClass() {\n+        Document doc = Jsoup.parse(\"<div class=left>One</div><div class=right id=1><p>Two</p></div>\");\n+\n+        Elements el1 = doc.select(\"div:not(.left)\");\n+        assertEquals(1, el1.size());\n+        assertEquals(\"1\", el1.first().id());\n+    }\n }", "timestamp": 1309605122, "metainfo": ""}