{"sha": "2660750b2e6691a2d5414f3f9f878b69a49539bb", "log": "Resolve relative links when cleaning.  Closes #12.", "commit": "\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n \n         Attributes sourceAttrs = sourceEl.attributes();\n         for (Attribute sourceAttr : sourceAttrs) {\n-            if (whitelist.isSafeAttribute(sourceTag, sourceAttr))\n+            if (whitelist.isSafeAttribute(sourceTag, sourceEl, sourceAttr))\n                 destAttrs.put(sourceAttr);\n             else\n                 numDiscarded++;\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n import org.apache.commons.lang.Validate;\n import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Attributes;\n+import org.jsoup.nodes.Element;\n \n import java.util.HashMap;\n import java.util.HashSet;\n         return tagNames.contains(TagName.valueOf(tag));\n     }\n \n-    boolean isSafeAttribute(String tagName, Attribute attr) {\n+    boolean isSafeAttribute(String tagName, Element el, Attribute attr) {\n         TagName tag = TagName.valueOf(tagName);\n         AttributeKey key = AttributeKey.valueOf(attr.getKey());\n-        AttributeValue value = AttributeValue.valueOf(attr.getValue());\n \n         if (attributes.containsKey(tag)) {\n             if (attributes.get(tag).contains(key)) {\n                 if (protocols.containsKey(tag)) {\n                     Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);\n                     // ok if not defined protocol; otherwise test\n-                    return !attrProts.containsKey(key) || testValidProtocol(value, attrProts.get(key));\n+                    return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));\n                 } else { // attribute found, no protocols defined, so OK\n                     return true;\n                 }\n             }\n         } else { // no attributes defined for tag, try :all tag\n-            return !tagName.equals(\":all\") && isSafeAttribute(\":all\", attr);\n+            return !tagName.equals(\":all\") && isSafeAttribute(\":all\", el, attr);\n         }\n         return false;\n     }\n \n-    private boolean testValidProtocol(AttributeValue value, Set<Protocol> protocols) {\n-        // todo: use the absUrl method and test this is a good URL\n+    private boolean testValidProtocol(Element el, Attribute attr, Set<Protocol> protocols) {\n+        // resolve relative urls to abs, and update the attribute so output html has abs.\n+        // rels without a baseuri get removed\n+        String value = el.absUrl(attr.getKey());\n+        attr.setValue(value);\n+        \n         for (Protocol protocol : protocols) {\n             String prot = protocol.toString() + \":\";\n             if (value.toString().toLowerCase().startsWith(prot)) {\n--- a/src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/org/jsoup/safety/CleanerTest.java\n         String h = \"<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.basic());\n \n-        assertEquals(\"<p><a rel=\\\"nofollow\\\">Dodgy</a> <a href=\\\"HTTP://nice.com\\\" rel=\\\"nofollow\\\">Nice</a></p><blockquote>Hello</blockquote>\",\n+        assertEquals(\"<p><a rel=\\\"nofollow\\\">Dodgy</a> <a href=\\\"http://nice.com\\\" rel=\\\"nofollow\\\">Nice</a></p><blockquote>Hello</blockquote>\",\n                 TextUtil.stripNewlines(cleanHtml));\n     }\n     \n         assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));\n         assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));\n     }\n+    \n+    @Test public void resolvesRelativeLinks() {\n+        String html = \"<a href='/foo'>Link</a>\";\n+        String clean = Jsoup.clean(html, \"http://example.com/\", Whitelist.basic());\n+        assertEquals(\"<a href=\\\"http://example.com/foo\\\" rel=\\\"nofollow\\\">Link</a>\", clean);\n+    }\n+    \n+    @Test public void dropsUnresolvableRelativeLinks() {\n+        String html = \"<a href='/foo'>Link</a>\";\n+        String clean = Jsoup.clean(html, Whitelist.basic());\n+        assertEquals(\"<a rel=\\\"nofollow\\\">Link</a>\", clean);\n+    }\n }", "timestamp": 1309605111, "metainfo": ""}