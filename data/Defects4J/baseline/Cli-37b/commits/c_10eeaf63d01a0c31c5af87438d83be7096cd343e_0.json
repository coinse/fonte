{"sha": "10eeaf63d01a0c31c5af87438d83be7096cd343e", "log": "Replaced StringBuilder with StringBuffer wherever possible without breaking binary compatibility  ", "commit": "\n--- a/src/main/java/org/apache/commons/cli/AmbiguousOptionException.java\n+++ b/src/main/java/org/apache/commons/cli/AmbiguousOptionException.java\n      */\n     private static String createMessage(String option, Collection<String> matchingOptions)\n     {\n-        StringBuffer buff = new StringBuffer(\"Ambiguous option: '\");\n-        buff.append(option);\n-        buff.append(\"'  (could be: \");\n+        StringBuilder buf = new StringBuilder(\"Ambiguous option: '\");\n+        buf.append(option);\n+        buf.append(\"'  (could be: \");\n \n         Iterator<String> it = matchingOptions.iterator();\n         while (it.hasNext())\n         {\n-            buff.append(\"'\");\n-            buff.append(it.next());\n-            buff.append(\"'\");\n+            buf.append(\"'\");\n+            buf.append(it.next());\n+            buf.append(\"'\");\n             if (it.hasNext())\n             {\n-                buff.append(\", \");\n+                buf.append(\", \");\n             }\n         }\n-        buff.append(\")\");\n+        buf.append(\")\");\n \n-        return buff.toString();\n+        return buf.toString();\n     }\n }\n--- a/src/main/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/main/java/org/apache/commons/cli/CommandLine.java\n \n     /*\n     public String toString() {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n             \n         buf.append(\"[ CommandLine: [ options: \");\n         buf.append(options.toString());\n--- a/src/main/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/main/java/org/apache/commons/cli/HelpFormatter.java\n         for (Iterator i = optList.iterator(); i.hasNext();)\n         {\n             Option option = (Option) i.next();\n-            StringBuffer optBuf = new StringBuffer(prefixList.get(x++).toString());\n+            StringBuilder optBuf = new StringBuilder(prefixList.get(x++).toString());\n \n             if (optBuf.length() < max)\n             {\n      * @param nextLineTabStop The position on the next line for the first tab.\n      * @param text The text to be rendered.\n      */\n-    private StringBuffer renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)\n+    private Appendable renderWrappedTextBlock(StringBuffer sb, int width, int nextLineTabStop, String text)\n     {\n         try\n         {\n--- a/src/main/java/org/apache/commons/cli/MissingOptionException.java\n+++ b/src/main/java/org/apache/commons/cli/MissingOptionException.java\n      */\n     private static String createMessage(List missingOptions)\n     {\n-        StringBuffer buff = new StringBuffer(\"Missing required option\");\n-        buff.append(missingOptions.size() == 1 ? \"\" : \"s\");\n-        buff.append(\": \");\n+        StringBuilder buf = new StringBuilder(\"Missing required option\");\n+        buf.append(missingOptions.size() == 1 ? \"\" : \"s\");\n+        buf.append(\": \");\n \n         Iterator it = missingOptions.iterator();\n         while (it.hasNext())\n         {\n-            buff.append(it.next());\n+            buf.append(it.next());\n             if (it.hasNext())\n             {\n-                buff.append(\", \");\n+                buf.append(\", \");\n             }\n         }\n \n-        return buff.toString();\n+        return buf.toString();\n     }\n }\n--- a/src/main/java/org/apache/commons/cli/Option.java\n+++ b/src/main/java/org/apache/commons/cli/Option.java\n      */\n     public String toString()\n     {\n-        StringBuffer buf = new StringBuffer().append(\"[ option: \");\n+        StringBuilder buf = new StringBuilder().append(\"[ option: \");\n \n         buf.append(opt);\n \n--- a/src/main/java/org/apache/commons/cli/Options.java\n+++ b/src/main/java/org/apache/commons/cli/Options.java\n      */\n     public String toString()\n     {\n-        StringBuffer buf = new StringBuffer();\n+        StringBuilder buf = new StringBuilder();\n \n         buf.append(\"[ Options: [ short \");\n         buf.append(shortOpts.toString());", "timestamp": 1323944812, "metainfo": ""}