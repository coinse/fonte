{"sha": "86f582300c76520151e98bb70b898b8dbb2299c0", "log": "- updated javadoc - added protocol constructor - added default constructor   ", "commit": "\n--- a/src/java/org/apache/commons/cli2/validation/UrlValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/UrlValidator.java\n-/**\n- * Copyright 2003-2004 The Apache Software Foundation\n+/*\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import java.util.ListIterator;\n \n /**\n- * A Validator instance that accepts urls\n+ * The <code>UrlValidator</code> validates the string argument\n+ * values are URLs.  If the value is a URL, the string value in\n+ * the {@link java.util.List} of values is replaced with the\n+ * {@link java.net.URL} instance.\n+ *\n+ * URLs can also be validated based on their scheme by using \n+ * the {@link #setProtocol setProtocol} method, or by using the specified\n+ * {@link UrlValidator(java.lang.String) constructor}.\n+ *\n+ * The following example shows how to limit the valid values\n+ * for the site argument to 'https' URLs.\n+ *\n+ * <pre>\n+ * ...\n+ * ArgumentBuilder builder = new ArgumentBuilder();\n+ * Argument site = \n+ *     builder.withName(\"site\");\n+ *            .withValidator(new URLValidator(\"https\"));\n+ * </pre>\n+ * \n+ * @author Rob Oxspring\n+ * @author John Keyes\n  */\n public class UrlValidator implements Validator {\n \n+    /** allowed protocol */\n     private String protocol = null;\n \n+    /**\n+     * Creates a UrlValidator.\n+     */\n+    public UrlValidator() {\n+    }\n+\n+    /**\n+     * Creates a UrlValidator for the specified protocol.\n+     */\n+    public UrlValidator(final String protocol) {\n+        setProtocol(protocol);\n+    }\n+\n+    /**\n+     * Validate the list of values against the list of permitted values.\n+     * If a value is valid, replace the string in the <code>values</code>\n+     * {@link java.util.List} with the {@link java.net.URL}.\n+     * \n+     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)\n+     */\n     public void validate(final List values) throws InvalidArgumentException {\n         for (final ListIterator i = values.listIterator(); i.hasNext();) {\n             final String name = (String)i.next();\n     }\n \n     /**\n-     * @return the protocol that must be used by a valid url\n+     * Returns the protocol that must be used by a valid URL.\n+     *\n+     * @return the protocol that must be used by a valid URL.\n      */\n     public String getProtocol() {\n         return protocol;\n     }\n \n     /**\n-     * @param protocol the protocol that a valid url must use\n+     * Specifies the protocol that a URL must have to be valid.\n+     *\n+     * @param protocol the protocol that a URL must have to be valid.\n      */\n     public void setProtocol(String protocol) {\n         this.protocol = protocol;\n     }\n+\n }", "timestamp": 1125749097, "metainfo": ""}