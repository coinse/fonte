{"sha": "c1b7d4ccd8d500879aae6b0c6d202e2b0f5007cc", "log": "Make JDK 1.4 compatible again. Fix spelling.  ", "commit": "\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n      */\n     public static final int DEFAULT_DESC_PAD = 3;\n \n-    /** the string to display at the begining of the usage statement */\n+    /** the string to display at the beginning of the usage statement */\n     public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";\n \n     /** default prefix for shortOpts */\n      *\n      * @param width the number of characters to be displayed on each line\n      * @param cmdLineSyntax the syntax for this application\n-     * @param header the banner to display at the begining of the help\n+     * @param header the banner to display at the beginning of the help\n      * @param options the Options instance\n      * @param footer the banner to display at the end of the help\n      */\n--- a/src/test/org/apache/commons/cli/HelpFormatterTest.java\n+++ b/src/test/org/apache/commons/cli/HelpFormatterTest.java\n         HelpFormatter hf = new HelpFormatter();\n \n         String text = \"This is a test.\";\n-        //text width should be max 8; the wrap postition is 7\n+        //text width should be max 8; the wrap position is 7\n         assertEquals(\"wrap position\", 7, hf.findWrapPos(text, 8, 0));\n         //starting from 8 must give -1 - the wrap pos is after end\n         assertEquals(\"wrap position 2\", -1, hf.findWrapPos(text, 8, 8));\n--- a/src/test/org/apache/commons/cli/OptionGroupTest.java\n+++ b/src/test/org/apache/commons/cli/OptionGroupTest.java\n         group1.addOption(new Option(null, \"foo\", false, \"Foo\"));\n         group1.addOption(new Option(null, \"bar\", false, \"Bar\"));\n \n-        assertEquals(\"[--foo Foo, --bar Bar]\".length(), group1.toString().length());\n-        assertTrue(group1.toString().contains(\"--foo Foo\"));\n-        assertTrue(group1.toString().contains(\"--bar Bar\"));\n+        if (!\"[--bar Bar, --foo Foo]\".equals(group1.toString())) {\n+            assertEquals(\"[--foo Foo, --bar Bar]\", group1.toString());\n+        }\n \n         OptionGroup group2 = new OptionGroup();\n         group2.addOption(new Option(\"f\", \"foo\", false, \"Foo\"));\n         group2.addOption(new Option(\"b\", \"bar\", false, \"Bar\"));\n \n-        assertEquals(\"[-f Foo, -b Bar]\".length(), group2.toString().length());\n-        assertTrue(group2.toString().contains(\"-f Foo\"));\n-        assertTrue(group2.toString().contains(\"-b Bar\"));\n+        if (!\"[-b Bar, -f Foo]\".equals(group2.toString())) {\n+            assertEquals(\"[-f Foo, -b Bar]\", group2.toString());\n+        }\n     }\n \n     public void testGetNames()", "timestamp": 1236379557, "metainfo": ""}