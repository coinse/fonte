{"sha": "099a4540e153fdb81689d66ce2f4ac060c70b040", "log": "- improved code coverage  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/option/Switch.java\n+++ b/src/java/org/apache/commons/cli2/option/Switch.java\n         }\n \n         if (disabledPrefix == null) {\n-            throw new IllegalArgumentException(ResourceConstants.SWITCH_NO_DISABLED_PREFIX);\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_NO_DISABLED_PREFIX));\n         }\n \n         if (enabledPrefix.startsWith(disabledPrefix)) {\n-            throw new IllegalArgumentException(ResourceConstants.SWITCH_ENABLED_STARTS_WITH_DISABLED);\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_ENABLED_STARTS_WITH_DISABLED));\n         }\n \n         if (disabledPrefix.startsWith(enabledPrefix)) {\n-            throw new IllegalArgumentException(ResourceConstants.SWITCH_DISABLED_STARTWS_WITH_ENABLED);\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_DISABLED_STARTWS_WITH_ENABLED));\n         }\n \n         this.enabledPrefix = enabledPrefix;\n         this.preferredName = preferredName;\n \n         if ((preferredName == null) || (preferredName.length() < 1)) {\n-            throw new IllegalArgumentException(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT);\n+            throw new IllegalArgumentException(resources.getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT));\n         }\n \n         final Set newTriggers = new HashSet();\n--- a/src/test/org/apache/commons/cli2/option/SwitchTest.java\n+++ b/src/test/org/apache/commons/cli2/option/SwitchTest.java\n import org.apache.commons.cli2.Parent;\n import org.apache.commons.cli2.WriteableCommandLine;\n import org.apache.commons.cli2.commandline.WriteableCommandLineImpl;\n+import org.apache.commons.cli2.resource.ResourceConstants;\n+import org.apache.commons.cli2.resource.ResourceHelper;\n \n /**\n  * @author Rob Oxspring\n- * \n+ *\n  * To change the template for this generated type comment go to\n  * Window>Preferences>Java>Code Generation>Code and Comments\n  */\n-public class SwitchTest extends ParentTestCase {\n-\n+public class SwitchTest\n+    extends ParentTestCase {\n     public static Switch buildDisplaySwitch() {\n         final Set aliases = new HashSet();\n         aliases.add(\"d\");\n         aliases.add(\"disp\");\n-        return new Switch(\n-            \"+\",\n-            \"-\",\n-            \"display\",\n-            aliases,\n-            \"Sets whether to display to screen\",\n-            true,\n-            null,\n-            null,\n-            'd',\n-            null);\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+\n+        return new Switch(\"+\", \"-\", \"display\", aliases, \"Sets whether to display to screen\", true,\n+                          null, null, 'd', null);\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.ParentTestCase#testProcessParent()\n      */\n-    public void testProcessParent() throws OptionException {\n+    public void testProcessParent()\n+        throws OptionException {\n         final Switch option = buildDisplaySwitch();\n         final List args = list(\"+d\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n         assertTrue(commandLine.getValues(option).isEmpty());\n     }\n \n-    public void testProcessParent_Disabled() throws OptionException {\n+    public void testProcessParent_Disabled()\n+        throws OptionException {\n         final Switch option = buildDisplaySwitch();\n         final List args = list(\"-disp\");\n         final WriteableCommandLine commandLine = commandLine(option, args);\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testCanProcess()\n      */\n     public void testCanProcess() {\n         final Switch option = buildDisplaySwitch();\n-        assertTrue(option.canProcess(new WriteableCommandLineImpl(option,null),\"+d\"));\n+        assertTrue(option.canProcess(new WriteableCommandLineImpl(option, null), \"+d\"));\n     }\n \n     public void testCanProcess_BadMatch() {\n         final Switch option = buildDisplaySwitch();\n-        assertFalse(option.canProcess(new WriteableCommandLineImpl(option,null),\"-dont\"));\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertFalse(option.canProcess(new WriteableCommandLineImpl(option, null), \"-dont\"));\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testPrefixes()\n      */\n     public void testPrefixes() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testProcess()\n      */\n     public void testProcess() {\n         // TODO Auto-generated method stub\n-\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testTriggers()\n      */\n     public void testTriggers() {\n         final Switch option = buildDisplaySwitch();\n-        assertContentsEqual(\n-            list(\"-d\", \"+d\", \"-disp\", \"+disp\", \"+display\", \"-display\"),\n-            option.getTriggers());\n-    }\n-\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertContentsEqual(list(\"-d\", \"+d\", \"-disp\", \"+disp\", \"+display\", \"-display\"),\n+                            option.getTriggers());\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testValidate()\n      */\n     public void testValidate() {\n         try {\n             option.validate(commandLine);\n             fail(\"Missing an option\");\n-        }\n-        catch (OptionException moe) {\n+        } catch (OptionException moe) {\n             assertSame(option, moe.getOption());\n         }\n     }\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testAppendUsage()\n      */\n     public void testAppendUsage() {\n         final StringBuffer buffer = new StringBuffer();\n         option.appendUsage(buffer, DisplaySetting.ALL, null);\n \n-        assertEquals(\n-            \"+display|-display (+d|-d,+disp|-disp)\",\n-            buffer.toString());\n+        assertEquals(\"+display|-display (+d|-d,+disp|-disp)\", buffer.toString());\n     }\n \n     public void testAppendUsage_NoAlias() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetPreferredName()\n      */\n     public void testGetPreferredName() {\n \n     /*\n      * (non-Javadoc)\n-     * \n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testGetDescription()\n      */\n     public void testGetDescription() {\n         final Option option = buildDisplaySwitch();\n-        assertEquals(\n-            \"Sets whether to display to screen\",\n-            option.getDescription());\n-    }\n-    /*\n-     * (non-Javadoc)\n-     * \n+        assertEquals(\"Sets whether to display to screen\", option.getDescription());\n+    }\n+\n+    public void testNullPreferredName() {\n+        try {\n+            new Switch(\"+\", \"-\", null, null, \"Sets whether to display to screen\", true, null, null,\n+                       'd', null);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testEmptyPreferredName() {\n+        try {\n+            new Switch(\"+\", \"-\", \"\", null, \"Sets whether to display to screen\", true, null, null,\n+                       'd', null);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testNullAliases() {\n+        try {\n+            new Switch(\"+\", \"-\", \"display\", null, \"Sets whether to display to screen\", true, null,\n+                       null, 'd', null);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_PREFERRED_NAME_TOO_SHORT),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testNullEnablePrefix() {\n+        try {\n+            new Switch(null, \"-\", \"display\", null, \"Sets whether to display to screen\", true, null,\n+                       null, 'd', null);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_NO_ENABLED_PREFIX),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testNullDisablePrefix() {\n+        try {\n+            new Switch(\"+\", null, \"display\", null, \"Sets whether to display to screen\", true, null,\n+                       null, 'd', null);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_NO_DISABLED_PREFIX),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testEnabledPrefixStartsWithDisabledPrefix() {\n+        try {\n+            new Switch(\"-\", \"-\", \"display\", null, \"Sets whether to display to screen\", true, null,\n+                       null, 'd', null);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ENABLED_STARTS_WITH_DISABLED),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    public void testDisabledPrefixStartsWithEnabledPrefix() {\n+        try {\n+            new Switch(\"o\", \"on\", \"display\", null, \"Sets whether to display to screen\", true, null,\n+                       null, 'd', null);\n+        } catch (IllegalArgumentException exp) {\n+            assertEquals(\"wrong exception message\",\n+                         ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_DISABLED_STARTWS_WITH_ENABLED),\n+                         exp.getMessage());\n+        }\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n      * @see org.apache.commons.cli2.OptionTestCase#testHelpLines()\n      */\n     public void testHelpLines() {\n         // TODO Auto-generated method stub\n-\n     }\n }", "timestamp": 1126627027, "metainfo": ""}