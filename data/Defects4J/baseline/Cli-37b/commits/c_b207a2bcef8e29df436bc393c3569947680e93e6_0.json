{"sha": "b207a2bcef8e29df436bc393c3569947680e93e6", "log": "Tests sould not write to std out, but instead should verify return values for correctness  ", "commit": "\n--- a/src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java\n+++ b/src/test/java/org/apache/commons/cli/bug/BugCLI162Test.java\n import org.apache.commons.cli.Option;\n import org.apache.commons.cli.OptionGroup;\n import org.apache.commons.cli.Options;\n+import org.junit.Before;\n import org.junit.Test;\n \n public class BugCLI162Test\n {\n     /** Constant for the line separator.*/\n     private static final String CR = System.getProperty(\"line.separator\");\n+    \n+    private HelpFormatter formatter;\n+    private StringWriter sw;\n+\n+    @Before\n+    public void setUp() throws Exception\n+    {\n+        formatter = new HelpFormatter();\n+        sw = new StringWriter();\n+    }\n \n     @Test\n     public void testInfiniteLoop() {\n         Options options = new Options();\n         options.addOption(\"h\", \"help\", false, \"This is a looooong description\");\n-        HelpFormatter formatter = new HelpFormatter();\n-        formatter.setWidth(20);\n-        formatter.printHelp(\"app\", options); // used to hang & crash\n+        // used to hang & crash\n+        formatter.printHelp(new PrintWriter(sw), 20, \"app\", null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\n+\n+        String expected = \"usage: app\" + CR +\n+                \" -h,--help   This is\" + CR +\n+                \"             a\" + CR +\n+                \"             looooon\" + CR +\n+                \"             g\" + CR +\n+                \"             descrip\" + CR +\n+                \"             tion\" + CR;\n+        assertEquals(expected, sw.toString());\n     }\n \n     @Test\n                 \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\n         option.setArgs(2);\n         commandLineOptions.addOption(option);\n-        new HelpFormatter().printHelp(this.getClass().getName(), commandLineOptions);\n+\n+        formatter.printHelp(new PrintWriter(sw), HelpFormatter.DEFAULT_WIDTH, this.getClass().getName(), null, commandLineOptions, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\n+        String expected = \"usage: org.apache.commons.cli.bug.BugCLI162Test\" + CR +\n+                \" -2,--jdbc2sfmd <arg>        Converts the JDBC file in the first argument\" + CR +\n+                \"                             to an SMFD file specified in the second\" + CR +\n+                \"                             argument.\" + CR +\n+                \" -a,--paramNames <arg>       Parameter XML names; default names are\" + CR +\n+                \"                             param1, param2, etc. Example: -a \\\"pname1\" + CR +\n+                \"                             pname2\\\"\" + CR +\n+                \" -b,--jdbc <arg>             Writes a JDBC binding node file for the given\" + CR +\n+                \"                             SQL\" + CR +\n+                \" -c,--url <arg>              Connection URL\" + CR +\n+                \" -d,--driver <arg>           JDBC driver class name\" + CR +\n+                \" -e,--description <arg>      SFMD description. A default description is\" + CR +\n+                \"                             used if omited. Example: -e \\\"Runs such and\" + CR +\n+                \"                             such\\\"\" + CR +\n+                \" -f,--sfmd <arg>             Writes a SFMD file for the given SQL\" + CR +\n+                \" -g,--printTiming            Prints timing information\" + CR +\n+                \" -h,--help                   Prints help and quits\" + CR +\n+                \" -i,--interactive            Runs in interactive mode, reading and writing\" + CR +\n+                \"                             from the console, 'go' or '/' sends a\" + CR +\n+                \"                             statement\" + CR +\n+                \" -j,--node <arg>             Writes a JDBC node file for the given SQL\" + CR +\n+                \"                             (internal debugging)\" + CR +\n+                \" -l,--columnNames <arg>      Column XML names; default names column\" + CR +\n+                \"                             labels. Example: -l \\\"cname1 cname2\\\"\" + CR +\n+                \" -m,--printMetaData          Prints metadata information\" + CR +\n+                \" -n,--info                   Prints driver information and properties. If\" + CR +\n+                \"                             -c is not specified, all drivers on the\" + CR +\n+                \"                             classpath are displayed.\" + CR +\n+                \" -o,--paramModes <arg>       Parameters modes (1=IN, 2=INOUT, 4=OUT,\" + CR +\n+                \"                             0=Unknown). -o and -O are mutually exclusive.\" + CR +\n+                \"                             Example for 2 parameters, OUT and IN: -o \\\"4\" + CR +\n+                \"                             1\\\"\" + CR +\n+                \" -O,--paramModeNames <arg>   Parameters mode names (IN, INOUT, OUT,\" + CR +\n+                \"                             Unknown). -o and -O are mutually exclusive.\" + CR +\n+                \"                             Example for 2 parameters, OUT and IN: -O \\\"OUT\" + CR +\n+                \"                             IN\\\"\" + CR +\n+                \" -p,--password <arg>         The database password for the user specified\" + CR +\n+                \"                             with the -u option. You can obfuscate the\" + CR +\n+                \"                             password with\" + CR +\n+                \"                             org.mortbay.jetty.security.Password, see\" + CR +\n+                \"                             http://docs.codehaus.org/display/JETTY/Securi\" + CR +\n+                \"                             ng+Passwords\" + CR +\n+                \" -s,--sql <arg>              Runs SQL or {call stored_procedure(?, ?)} or\" + CR +\n+                \"                             {?=call function(?, ?)}\" + CR +\n+                \" -t,--printStack             Prints stack traces on errors\" + CR +\n+                \"    --trim <arg>             Trims leading and trailing spaces from all\" + CR +\n+                \"                             column values. Column XML names can be\" + CR +\n+                \"                             optionally specified to set which columns to\" + CR +\n+                \"                             trim.\" + CR +\n+                \" -u,--user <arg>             A database user name\" + CR +\n+                \" -w,--outfile <arg>          Writes the SQL output to the given file\" + CR +\n+                \" -y,--paramTypes <arg>       Parameter types from java.sql.Types. -y and\" + CR +\n+                \"                             -Y are mutually exclusive. Example: -y \\\"-10\" + CR +\n+                \"                             12\\\"\" + CR +\n+                \" -Y,--paramTypeNames <arg>   Parameter java.sql.Types names. -y and -Y are\" + CR +\n+                \"                             mutually exclusive. Example: -Y \\\"CURSOR\" + CR +\n+                \"                             VARCHAR\\\"\" + CR;\n+        assertEquals(expected, sw.toString());\n     }\n \n     @Test\n                                      \"This description has ReallyLongValuesThatAreLongerThanTheWidthOfTheColumns \" +\n                                      \"and also other ReallyLongValuesThatAreHugerAndBiggerThanTheWidthOfTheColumnsBob, \" +\n                                      \"yes. \");\n-        HelpFormatter formatter = new HelpFormatter();\n-        StringWriter sw = new StringWriter();\n+        \n         formatter.printHelp(new PrintWriter(sw), 35, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\n         String expected = \"usage:\" + CR +\n                           \"       org.apache.commons.cli.bug.B\" + CR +\n     public void testLongLineChunkingIndentIgnored() {\n         Options options = new Options();\n         options.addOption(\"x\", \"extralongarg\", false, \"This description is Long.\" );\n-        HelpFormatter formatter = new HelpFormatter();\n-        StringWriter sw = new StringWriter();\n+\n         formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), \"Header\", options, 0, 5, \"Footer\");\n-        System.err.println(sw.toString());\n         String expected = \"usage:\" + CR +\n                           \"       org.apache.comm\" + CR +\n                           \"       ons.cli.bug.Bug\" + CR +", "timestamp": 1427621691, "metainfo": ""}