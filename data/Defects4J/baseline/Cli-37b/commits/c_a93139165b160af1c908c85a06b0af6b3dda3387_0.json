{"sha": "a93139165b160af1c908c85a06b0af6b3dda3387", "log": "CLI-158: Default arguments are now applied even if arguments are passed. The default values for missing arguments will be set. Thanks to tobias dot bocanegra at day dot com for the patch.  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n+++ b/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n     }\n \n     public List getValues(final Option option,\n-                          final List defaultValues) {\n-        // First grab the command line values\n+                          List defaultValues) {\n+        // initialize the return list\n         List valueList = (List) values.get(option);\n \n-        // Secondly try the defaults supplied to the method\n-        if ((valueList == null) || valueList.isEmpty()) {\n-            valueList = defaultValues;\n-        }\n-\n-        // Thirdly try the option's default values\n-        if ((valueList == null) || valueList.isEmpty()) {\n-            valueList = (List) this.defaultValues.get(option);\n-        }\n-\n-        // Finally use an empty list\n-        if (valueList == null) {\n-            valueList = Collections.EMPTY_LIST;\n-        }\n-\n-        return valueList;\n+        // grab the correct default values\n+        if (defaultValues == null || defaultValues.isEmpty()) {\n+            defaultValues = (List) this.defaultValues.get(option);\n+        }\n+\n+        // augment the list with the default values\n+        if (defaultValues != null && !defaultValues.isEmpty()) {\n+            if (valueList == null || valueList.isEmpty()) {\n+                valueList = defaultValues;\n+            } else {\n+                // if there are more default values as specified, add them to\n+                // the list.\n+                if (defaultValues.size() > valueList.size()) {\n+                    // copy the list first\n+                    valueList = new ArrayList(valueList);\n+                    for (int i=valueList.size(); i<defaultValues.size(); i++) {\n+                        valueList.add(defaultValues.get(i));\n+                    }\n+                }\n+            }\n+        }\n+        \n+        return valueList == null ? Collections.EMPTY_LIST : valueList;\n     }\n \n     public List getUndefaultedValues(Option option) {\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/bug/BugCLI158Test.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.cli2.bug;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.cli2.CommandLine;\n+import org.apache.commons.cli2.Group;\n+import org.apache.commons.cli2.builder.ArgumentBuilder;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.Parser;\n+import org.apache.commons.cli2.option.DefaultOption;\n+\n+/**\n+ * http://issues.apache.org/jira/browse/CLI-158\n+ */\n+public class BugCLI158Test extends TestCase {\n+\n+    private Parser createDefaultValueParser(String[] defaults) {\n+        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n+        final ArgumentBuilder abuilder = new ArgumentBuilder();\n+        final GroupBuilder gbuilder = new GroupBuilder();\n+\n+        DefaultOption bOption = obuilder.withShortName(\"b\")\n+                .withLongName(\"b\")\n+                .withArgument(abuilder.withName(\"b\")\n+                        .withMinimum(0)\n+                        .withMaximum(defaults.length)\n+                        .withDefaults(Arrays.asList(defaults))\n+                        .create())\n+                .create();\n+\n+        Group options = gbuilder\n+                .withName(\"options\")\n+                .withOption(bOption)\n+                .create();\n+\n+        Parser parser = new Parser();\n+        parser.setHelpTrigger(\"--help\");\n+        parser.setGroup(options);\n+        return parser;\n+    }\n+\n+    public void testSingleOptionSingleArgument() throws Exception {\n+        Parser parser = createDefaultValueParser(new String[]{\"100\", \"1000\"});\n+        String enteredValue1 = \"1\";\n+        String[] args = new String[]{\"-b\", enteredValue1};\n+        CommandLine cl = parser.parse(args);\n+        CommandLine cmd = cl;\n+        assertNotNull(cmd);\n+        List b = cmd.getValues(\"-b\");\n+        assertEquals(\"[\" + enteredValue1 + \", 1000]\", b + \"\");\n+    }\n+\n+    public void testSingleOptionNoArgument() throws Exception {\n+        Parser parser = createDefaultValueParser(new String[]{\"100\", \"1000\"});\n+        String[] args = new String[]{\"-b\"};\n+        CommandLine cl = parser.parse(args);\n+        CommandLine cmd = cl;\n+        assertNotNull(cmd);\n+        List b = cmd.getValues(\"-b\");\n+        assertEquals(\"[100, 1000]\", b + \"\");\n+    }\n+\n+    public void testSingleOptionMaximumNumberOfArgument() throws Exception {\n+        String[] args = new String[]{\"-b\", \"1\", \"2\"};\n+        final ArgumentBuilder abuilder = new ArgumentBuilder();\n+        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n+        final GroupBuilder gbuilder = new GroupBuilder();\n+\n+        DefaultOption bOption = obuilder.withShortName(\"b\")\n+                .withLongName(\"b\")\n+                .withArgument(abuilder.withName(\"b\")\n+                        .withMinimum(2)\n+                        .withMaximum(4)\n+                        .withDefault(\"100\")\n+                        .withDefault(\"1000\")\n+                        .withDefault(\"10000\")\n+                        .create())\n+                .create();\n+\n+        Group options = gbuilder\n+                .withName(\"options\")\n+                .withOption(bOption)\n+                .create();\n+\n+        Parser parser = new Parser();\n+        parser.setHelpTrigger(\"--help\");\n+        parser.setGroup(options);\n+        CommandLine cl = parser.parse(args);\n+        CommandLine cmd = cl;\n+        assertNotNull(cmd);\n+        List b = cmd.getValues(\"-b\");\n+        assertEquals(\"[1, 2, 10000]\", b + \"\");\n+    }\n+}", "timestamp": 1216928284, "metainfo": ""}