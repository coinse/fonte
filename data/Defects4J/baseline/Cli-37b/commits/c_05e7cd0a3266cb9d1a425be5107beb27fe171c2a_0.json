{"sha": "05e7cd0a3266cb9d1a425be5107beb27fe171c2a", "log": "Simplified Options.helpOptions(), the loop looking into the lonOpts wasn't necessary since all options are already in shortOpts Minor style & doc improvements  ", "commit": "\n--- a/src/java/org/apache/commons/cli/Options.java\n+++ b/src/java/org/apache/commons/cli/Options.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n import java.io.Serializable;\n     \n     /**\n      * Lists the OptionGroups that are members of this Options instance.\n+     * \n      * @return a Collection of OptionGroup instances.\n      */\n-    Collection getOptionGroups(){\n-    \treturn new HashSet(optionGroups.values());\n+    Collection getOptionGroups()\n+    {\n+        return new HashSet(optionGroups.values());\n     }\n \n     /** \n      */\n     List helpOptions()\n     {\n-        List opts = new ArrayList(shortOpts.values());\n-\n-        // now look through the long opts to see if there are any Long-opt\n-        // only options\n-        Iterator iter = longOpts.values().iterator();\n-\n-        while (iter.hasNext())\n-        {\n-            Object item = iter.next();\n-\n-            if (!opts.contains(item))\n-            {\n-                opts.add(item);\n-            }\n-        }\n-\n-        return new ArrayList(opts);\n-    }\n-\n-    /** \n-     * Returns the required options as a\n-     * <code>java.util.Collection</code>.\n-     *\n-     * @return Collection of required options\n+        return new ArrayList(shortOpts.values());\n+    }\n+\n+    /** \n+     * Returns the required options.\n+     *\n+     * @return List of required options\n      */\n     public List getRequiredOptions()\n     {\n     }\n \n     /** \n-     * Retrieve the named {@link Option}\n+     * Retrieve the {@link Option} matching the long or short name specified.\n+     * The leading hyphens in the name are ignored (up to 2).\n      *\n      * @param opt short or long name of the {@link Option}\n      * @return the option represented by opt\n \n         return buf.toString();\n     }\n-}\n+}\n--- a/src/test/org/apache/commons/cli/OptionsTest.java\n+++ b/src/test/org/apache/commons/cli/OptionsTest.java\n {\n     public void testHelpOptions(){\n         \n-        Option longOnly1 = OptionBuilder\n-            .withLongOpt(\"long-only1\")\n-            .create();\n-        \n-        Option longOnly2 = OptionBuilder\n-            .withLongOpt(\"long-only2\")\n-            .create();\n-                \n-        Option shortOnly1 = OptionBuilder\n-            .create(\"1\");\n-                \n-        Option shortOnly2 = OptionBuilder\n-            .create(\"2\");\n-                \n-        Option bothA = OptionBuilder\n-            .withLongOpt(\"bothA\")\n-            .create(\"a\");\n-                \n-        Option bothB = OptionBuilder\n-            .withLongOpt(\"bothB\")\n-            .create(\"b\");\n+        Option longOnly1 = OptionBuilder.withLongOpt(\"long-only1\").create();\n+        Option longOnly2 = OptionBuilder.withLongOpt(\"long-only2\").create();\n+        Option shortOnly1 = OptionBuilder.create(\"1\");\n+        Option shortOnly2 = OptionBuilder.create(\"2\");\n+        Option bothA = OptionBuilder.withLongOpt(\"bothA\").create(\"a\");\n+        Option bothB = OptionBuilder.withLongOpt(\"bothB\").create(\"b\");\n         \n         Options options = new Options();\n         options.addOption(longOnly1);\n         \n         Collection helpOptions = options.helpOptions();\n         \n-        assertTrue(\"Everything in all should be in help\",helpOptions.containsAll(allOptions));\n-        assertTrue(\"Everything in help should be in all\",allOptions.containsAll(helpOptions));        \n+        assertTrue(\"Everything in all should be in help\", helpOptions.containsAll(allOptions));\n+        assertTrue(\"Everything in help should be in all\", allOptions.containsAll(helpOptions));        \n     }\n \n     public void testMissingOptionException() throws ParseException {", "timestamp": 1212152265, "metainfo": ""}