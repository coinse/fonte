{"sha": "ead3757ef361f85cfb92754e808dafd74eb15702", "log": "GNU parser, one unit test for Ant   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/cli/GnuParser.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.1 2002/06/19 21:25:40 jkeyes Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/06/19 21:25:40 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.cli;\n+\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * GnuParser parses the command line arguments using the GNU style.\n+ * For example, -buildfile can only be interpreted as the option\n+ * 'buildfile'.\n+ *\n+ * @author John Keyes (jbjk at mac.com)\n+ */\n+public class GnuParser implements CommandLineParser {\n+\n+    /**\n+     * Parse the arguments according to the specified options.\n+     * @param options the specified Options\n+     * @param arguments the command line arguments\n+     * @return the list of atomic option and value tokens\n+     */\n+    public List parse( Options options, List arguments ) {\n+        return parse( options, arguments, false );\n+    }\n+\n+    /**\n+     * Parse the arguments according to the specified options.\n+     * @param options the specified Options\n+     * @param arguments the command line arguments\n+     * @param stopAtNonOption specifies whether to continue parsing the\n+     * arguments if a non option is encountered.\n+     * @return the list of atomic option and value tokens\n+     */\n+    public List parse( Options options, List arguments, boolean stopAtNonOption ) {\n+        List args = new LinkedList();\n+\n+        Iterator argIter = arguments.iterator();\n+        String   eachArg = null;\n+        \n+        boolean eatTheRest = false;\n+        \n+        while ( argIter.hasNext() ) {\n+            eachArg = (String) argIter.next();\n+            \n+            if ( eachArg.equals(\"--\") ) {\n+                // Look for -- to indicate end-of-options, and\n+                // just stuff it, along with everything past it\n+                // into the returned list.\n+                \n+                args.add( eachArg );\n+                eatTheRest = true;\n+            }\n+            else if ( eachArg.startsWith(\"--\") ) {\n+                // It's a long-option, so doesn't need any\n+                // bursting applied to it.\n+                \n+                args.add( eachArg );\n+            }\n+            else if ( eachArg.startsWith(\"-\") ) {\n+                \n+                if ( eachArg.length() == 1) {\n+                    // It's not really an option, so\n+                    // just drop it on the list\n+                    \n+                    if ( stopAtNonOption ) {\n+                        eatTheRest = true;\n+                    }\n+                    else {\n+                        args.add( eachArg );\n+                    }\n+                }\n+                else if ( eachArg.length() == 2 ) {\n+                    args.add( eachArg );\n+                }\n+                else {\n+                    String charOpt = eachArg.substring( 1, 2 );\n+\n+                    if( options.getOption( charOpt ) != null\n+                        && options.getOption( eachArg ) == null )\n+                    {\n+                        args.add( \"-\" + charOpt );\n+                        args.add( eachArg.substring( 2, eachArg.length() ) );\n+                    }\n+                    else {\n+                        args.add( eachArg );\n+                    }\n+                }\n+            }\n+            else {\n+                // It's just a normal non-option arg,\n+                // so dump it into the list of returned\n+                // values.\n+                \n+                args.add( eachArg );\n+                \n+                if ( stopAtNonOption ) {\n+                    eatTheRest = true;\n+                }\n+            }\n+            \n+            if ( eatTheRest ) {\n+                while ( argIter.hasNext() ) {\n+                    args.add( argIter.next() );\n+                }\n+            }\n+        }\n+        \n+        return args;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/cli/ApplicationTest.java\n+package org.apache.commons.cli;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+public class ApplicationTest extends TestCase {\n+\n+    static {\n+        System.setProperty( \"org.apache.commons.cli.parser\",\n+                            \"org.apache.commons.cli.GnuParser\");\n+    }\n+\n+    public static Test suite() { \n+        return new TestSuite(ApplicationTest.class); \n+    }\n+\n+    public ApplicationTest(String name)\n+    {\n+        super(name);\n+    }\n+\n+    public void testAnt() {\n+        Options options = new Options();\n+        options.addOption( \"help\", false, \"print this message\" );\n+        options.addOption( \"projecthelp\", false, \"print project help information\" );\n+        options.addOption( \"version\", false, \"print the version information and exit\" );\n+        options.addOption( \"quiet\", false, \"be extra quiet\" );\n+        options.addOption( \"verbose\", false, \"be extra verbose\" );\n+        options.addOption( \"debug\", false, \"print debug information\" );\n+        options.addOption( \"version\", false, \"produce logging information without adornments\" );\n+        options.addOption( \"logfile\", true, \"use given file for log\" );\n+        options.addOption( \"logger\", true, \"the class which is to perform the logging\" );\n+        options.addOption( \"listener\", true, \"add an instance of a class as a project listener\" );\n+        options.addOption( \"buildfile\", true, \"use given buildfile\" );\n+        options.addOption( \"D\", true, \"use value for given property\" );\n+        options.addOption( \"find\", true, \"search for buildfile towards the root of the filesystem and use it\" );\n+\n+        String[] args = new String[]{ \"-buildfile\", \"mybuild.xml\" };\n+\n+        try {\n+            CommandLine line = options.parse( args );\n+            assertTrue( \"mybuild.xml\" == line.getOptionValue( \"buildfile\" ) );\n+        }\n+        catch( ParseException exp ) {\n+            fail( \"Unexpected exception:\" + exp.getMessage() );\n+        }\n+\n+        args = new String[]{ \"-buildfile\", \"mybuild.xml\",\n+        \"-Dproperty=value\" };\n+    \n+        try {\n+            CommandLine line = options.parse( args );\n+            assertEquals( line.getOptionValue( \"D\" ), \"property=value\" );\n+        }\n+        catch( ParseException exp ) {\n+            fail( \"Unexpected exception:\" + exp.getMessage() );\n+        }\n+    }\n+\n+}", "timestamp": 1024521940, "metainfo": ""}