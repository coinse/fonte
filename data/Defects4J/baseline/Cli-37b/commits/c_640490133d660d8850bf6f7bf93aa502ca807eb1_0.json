{"sha": "640490133d660d8850bf6f7bf93aa502ca807eb1", "log": "Move Bugzilla bugs test case to bugs package  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/cli/bug/BugsTest.java\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli.bug;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.Iterator;\n+import java.util.Properties;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.GnuParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.MissingArgumentException;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionBuilder;\n+import org.apache.commons.cli.OptionGroup;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.Parser;\n+import org.apache.commons.cli.PosixParser;\n+import org.junit.Test;\n+\n+@SuppressWarnings(\"deprecation\") // tests some deprecated classes\n+public class BugsTest\n+{\n+    @Test\n+    public void test11457() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").create());\n+        String[] args = new String[]{\"--verbose\"};\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse(options, args);\n+        assertTrue(cmd.hasOption(\"verbose\"));\n+    }\n+\n+    @Test\n+    public void test11458() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption( OptionBuilder.withValueSeparator( '=' ).hasArgs().create( 'D' ) );\n+        options.addOption( OptionBuilder.withValueSeparator( ':' ).hasArgs().create( 'p' ) );\n+        String[] args = new String[] { \"-DJAVA_HOME=/opt/java\" , \"-pfile1:file2:file3\" };\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse(options, args);\n+\n+        String[] values = cmd.getOptionValues('D');\n+\n+        assertEquals(values[0], \"JAVA_HOME\");\n+        assertEquals(values[1], \"/opt/java\");\n+\n+        values = cmd.getOptionValues('p');\n+\n+        assertEquals(values[0], \"file1\");\n+        assertEquals(values[1], \"file2\");\n+        assertEquals(values[2], \"file3\");\n+\n+        Iterator<Option> iter = cmd.iterator();\n+        while (iter.hasNext())\n+        {\n+            Option opt = iter.next();\n+            switch (opt.getId())\n+            {\n+                case 'D':\n+                    assertEquals(opt.getValue(0), \"JAVA_HOME\");\n+                    assertEquals(opt.getValue(1), \"/opt/java\");\n+                    break;\n+                case 'p':\n+                    assertEquals(opt.getValue(0), \"file1\");\n+                    assertEquals(opt.getValue(1), \"file2\");\n+                    assertEquals(opt.getValue(2), \"file3\");\n+                    break;\n+                default:\n+                    fail(\"-D option not found\");\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void test11680() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption(\"f\", true, \"foobar\");\n+        options.addOption(\"m\", true, \"missing\");\n+        String[] args = new String[]{\"-f\", \"foo\"};\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse(options, args);\n+\n+        cmd.getOptionValue(\"f\", \"default f\");\n+        cmd.getOptionValue(\"m\", \"default m\");\n+    }\n+\n+    @Test\n+    public void test11456() throws Exception\n+    {\n+        // Posix \n+        Options options = new Options();\n+        options.addOption( OptionBuilder.hasOptionalArg().create( 'a' ) );\n+        options.addOption( OptionBuilder.hasArg().create( 'b' ) );\n+        String[] args = new String[] { \"-a\", \"-bvalue\" };\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse( options, args );\n+        assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n+\n+        // GNU\n+        options = new Options();\n+        options.addOption( OptionBuilder.hasOptionalArg().create( 'a' ) );\n+        options.addOption( OptionBuilder.hasArg().create( 'b' ) );\n+        args = new String[] { \"-a\", \"-b\", \"value\" };\n+\n+        parser = new GnuParser();\n+\n+        cmd = parser.parse( options, args );\n+        assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n+    }\n+\n+    @Test\n+    public void test12210() throws Exception\n+    {\n+        // create the main options object which will handle the first parameter\n+        Options mainOptions = new Options();\n+        // There can be 2 main exclusive options:  -exec|-rep\n+\n+        // Therefore, place them in an option group\n+\n+        String[] argv = new String[] { \"-exec\", \"-exec_opt1\", \"-exec_opt2\" };\n+        OptionGroup grp = new OptionGroup();\n+\n+        grp.addOption(new Option(\"exec\",false,\"description for this option\"));\n+\n+        grp.addOption(new Option(\"rep\",false,\"description for this option\"));\n+\n+        mainOptions.addOptionGroup(grp);\n+\n+        // for the exec option, there are 2 options...\n+        Options execOptions = new Options();\n+        execOptions.addOption(\"exec_opt1\", false, \" desc\");\n+        execOptions.addOption(\"exec_opt2\", false, \" desc\");\n+\n+        // similarly, for rep there are 2 options...\n+        Options repOptions = new Options();\n+        repOptions.addOption(\"repopto\", false, \"desc\");\n+        repOptions.addOption(\"repoptt\", false, \"desc\");\n+\n+        // create the parser\n+        GnuParser parser = new GnuParser();\n+\n+        // finally, parse the arguments:\n+\n+        // first parse the main options to see what the user has specified\n+        // We set stopAtNonOption to true so it does not touch the remaining\n+        // options\n+        CommandLine cmd = parser.parse(mainOptions,argv,true);\n+        // get the remaining options...\n+        argv = cmd.getArgs();\n+\n+        if(cmd.hasOption(\"exec\"))\n+        {\n+            cmd = parser.parse(execOptions,argv,false);\n+            // process the exec_op1 and exec_opt2...\n+            assertTrue( cmd.hasOption(\"exec_opt1\") );\n+            assertTrue( cmd.hasOption(\"exec_opt2\") );\n+        }\n+        else if(cmd.hasOption(\"rep\"))\n+        {\n+            cmd = parser.parse(repOptions,argv,false);\n+            // process the rep_op1 and rep_opt2...\n+        }\n+        else {\n+            fail( \"exec option not found\" );\n+        }\n+    }\n+\n+    @Test\n+    public void test13425() throws Exception\n+    {\n+        Options options = new Options();\n+        Option oldpass = OptionBuilder.withLongOpt( \"old-password\" )\n+            .withDescription( \"Use this option to specify the old password\" )\n+            .hasArg()\n+            .create( 'o' );\n+        Option newpass = OptionBuilder.withLongOpt( \"new-password\" )\n+            .withDescription( \"Use this option to specify the new password\" )\n+            .hasArg()\n+            .create( 'n' );\n+\n+        String[] args = { \n+            \"-o\", \n+            \"-n\", \n+            \"newpassword\" \n+        };\n+\n+        options.addOption( oldpass );\n+        options.addOption( newpass );\n+\n+        Parser parser = new PosixParser();\n+\n+        try {\n+            parser.parse( options, args );\n+            fail( \"MissingArgumentException not caught.\" );\n+        } catch( MissingArgumentException expected ) {\n+        }\n+    }\n+\n+    @Test\n+    public void test13666() throws Exception\n+    {\n+        Options options = new Options();\n+        Option dir = OptionBuilder.withDescription( \"dir\" ).hasArg().create( 'd' );\n+        options.addOption( dir );\n+        \n+        final PrintStream oldSystemOut = System.out;\n+        try\n+        {\n+            final ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+            final PrintStream print = new PrintStream(bytes);\n+            \n+            // capture this platform's eol symbol\n+            print.println();\n+            final String eol = bytes.toString();\n+            bytes.reset();\n+            \n+            System.setOut(new PrintStream(bytes));\n+\n+            HelpFormatter formatter = new HelpFormatter();\n+            formatter.printHelp( \"dir\", options );\n+\n+            assertEquals(\"usage: dir\"+eol+\" -d <arg>   dir\"+eol,bytes.toString());\n+        }\n+        finally\n+        {\n+            System.setOut(oldSystemOut);\n+        }\n+    }\n+\n+    @Test\n+    public void test13935() throws Exception\n+    {\n+        OptionGroup directions = new OptionGroup();\n+\n+        Option left = new Option( \"l\", \"left\", false, \"go left\" );\n+        Option right = new Option( \"r\", \"right\", false, \"go right\" );\n+        Option straight = new Option( \"s\", \"straight\", false, \"go straight\" );\n+        Option forward = new Option( \"f\", \"forward\", false, \"go forward\" );\n+        forward.setRequired( true );\n+\n+        directions.addOption( left );\n+        directions.addOption( right );\n+        directions.setRequired( true );\n+\n+        Options opts = new Options();\n+        opts.addOptionGroup( directions );\n+        opts.addOption( straight );\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        String[] args = new String[] {  };\n+        try {\n+            parser.parse(opts, args);\n+            fail(\"Expected ParseException\");\n+        }\n+        catch (ParseException expected) {\n+        }\n+\n+        args = new String[] { \"-s\" };\n+        try {\n+            parser.parse(opts, args);\n+            fail(\"Expected ParseException\");\n+        }\n+        catch (ParseException expected) {\n+        }\n+\n+        args = new String[] { \"-s\", \"-l\" };\n+        CommandLine line = parser.parse(opts, args);\n+        assertNotNull(line);\n+\n+        opts.addOption( forward );\n+        args = new String[] { \"-s\", \"-l\", \"-f\" };\n+        line = parser.parse(opts, args);\n+        assertNotNull(line);\n+    }\n+\n+    @Test\n+    public void test14786() throws Exception\n+    {\n+        Option o = OptionBuilder.isRequired().withDescription(\"test\").create(\"test\");\n+        Options opts = new Options();\n+        opts.addOption(o);\n+        opts.addOption(o);\n+\n+        CommandLineParser parser = new GnuParser();\n+\n+        String[] args = new String[] { \"-test\" };\n+\n+        CommandLine line = parser.parse( opts, args );\n+        assertTrue( line.hasOption( \"test\" ) );\n+    }\n+\n+    @Test\n+    public void test15046() throws Exception\n+    {\n+        CommandLineParser parser = new PosixParser();\n+        String[] CLI_ARGS = new String[] {\"-z\", \"c\"};\n+\n+        Options options = new Options();\n+        options.addOption(new Option(\"z\", \"timezone\", true, \"affected option\"));\n+\n+        parser.parse(options, CLI_ARGS);\n+        \n+        //now add conflicting option\n+        options.addOption(\"c\", \"conflict\", true, \"conflict option\");\n+        CommandLine line = parser.parse(options, CLI_ARGS);\n+        assertEquals( line.getOptionValue('z'), \"c\" );\n+        assertTrue( !line.hasOption(\"c\") );\n+    }\n+\n+    @Test\n+    public void test15648() throws Exception\n+    {\n+        CommandLineParser parser = new PosixParser();\n+        final String[] args = new String[] { \"-m\", \"\\\"Two Words\\\"\" };\n+        Option m = OptionBuilder.hasArgs().create(\"m\");\n+        Options options = new Options();\n+        options.addOption( m );\n+        CommandLine line = parser.parse( options, args );\n+        assertEquals( \"Two Words\", line.getOptionValue( \"m\" ) );\n+    }\n+    \n+    @Test\n+    public void test31148() throws ParseException\n+    {\n+        Option multiArgOption = new Option(\"o\",\"option with multiple args\");\n+        multiArgOption.setArgs(1);\n+        \n+        Options options = new Options();\n+        options.addOption(multiArgOption);\n+        \n+        Parser parser = new PosixParser();\n+        String[] args = new String[]{};\n+        Properties props = new Properties();\n+        props.setProperty(\"o\",\"ovalue\");\n+        CommandLine cl = parser.parse(options,args,props);\n+        \n+        assertTrue(cl.hasOption('o'));\n+        assertEquals(\"ovalue\",cl.getOptionValue('o'));\n+    }\n+\n+}", "timestamp": 1427620422, "metainfo": ""}