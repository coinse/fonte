{"sha": "f04a1fb1a6453bb22509bd0cc4422af4d3506db4", "log": "Applying Brian Egge's fix and test from CLI-122  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n         int argumentCount = commandLine.getValues(option, Collections.EMPTY_LIST).size();\n \n         while (arguments.hasNext() && (argumentCount < maximum)) {\n-            final String allValues = stripBoundaryQuotes((String) arguments.next());\n+            final String allValuesQuoted = (String) arguments.next();\n+            final String allValues = stripBoundaryQuotes(allValuesQuoted);\n \n             // should we ignore things that look like options?\n-            if (allValues.equals(consumeRemaining)) {\n+            if (allValuesQuoted.equals(consumeRemaining)) {\n                 while (arguments.hasNext() && (argumentCount < maximum)) {\n                     ++argumentCount;\n                     commandLine.addValue(option, arguments.next());\n                 }\n             }\n             // does it look like an option?\n-            else if (commandLine.looksLikeOption(allValues)) {\n+            else if (commandLine.looksLikeOption(allValuesQuoted)) {\n                 arguments.previous();\n \n                 break;\n--- a/src/java/org/apache/commons/cli2/option/ParentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ParentImpl.java\n         if (initialIndex > 0) {\n             arguments.remove();\n             arguments.add(newArgument.substring(0, initialIndex));\n-            arguments.add(newArgument.substring(initialIndex + 1));\n+            String value = newArgument.substring(initialIndex + 1);\n+            // The value obviously isn't an option, so we need to quote it if looks like an option.\n+            // The quotes will be removed later\n+            if (value.startsWith(\"-\")) {\n+                value = '\"' + value + '\"';\n+            }\n+            arguments.add(value);\n             arguments.previous();\n         }\n \n--- /dev/null\n+++ b/src/test/org/apache/commons/cli2/bug/BugCLI122Test.java\n+package org.apache.commons.cli2.bug;\n+\n+import junit.framework.TestCase;\n+import org.apache.commons.cli2.*;\n+import org.apache.commons.cli2.builder.ArgumentBuilder;\n+import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n+import org.apache.commons.cli2.builder.GroupBuilder;\n+import org.apache.commons.cli2.commandline.Parser;\n+import org.apache.commons.cli2.validation.FileValidator;\n+\n+/**\n+ * @author brianegge\n+ */\n+public class BugCLI122Test extends TestCase {\n+    public void testArgumentWhichStartsWithDash() throws OptionException {\n+        Argument wdArg = new ArgumentBuilder()\n+                .withName(\"anything\")\n+                .withMaximum(1)\n+                .withMinimum(1)\n+                .withInitialSeparator('=')\n+                .create();\n+\n+        Option wdOpt = new DefaultOptionBuilder().withArgument(wdArg)\n+                .withDescription(\"anything, foo or -foo\")\n+                .withLongName(\"argument\")\n+                .withShortName(\"a\")\n+                .create();\n+\n+        Group group = new GroupBuilder().withOption(wdOpt).create();\n+\n+        Parser p = new Parser();\n+        p.setGroup(group);\n+        CommandLine normal = p.parse (new String[]{\"-a\", \"foo\"});\n+        assertNotNull(normal);\n+        assertEquals(normal.getValue(wdOpt), \"foo\");\n+\n+        CommandLine withDash = p.parse (new String[]{\"--argument\", \"\\\"-foo\\\"\"});\n+        assertNotNull(withDash);\n+        assertEquals(\"-foo\", withDash.getValue(wdOpt));\n+\n+        CommandLine withDashAndEquals = p.parse (new String[]{\"--argument=-foo\"});\n+        assertNotNull(withDashAndEquals);\n+        assertEquals(\"-foo\", withDashAndEquals.getValue(wdOpt));\n+    }\n+}", "timestamp": 1193526331, "metainfo": ""}