{"sha": "3972aca26c57a2301c9fcb67c11d526c0e0fd084", "log": "Moved the real world test from PosixParserTest to ApplicationTest  ", "commit": "\n--- a/src/test/org/apache/commons/cli/ApplicationTest.java\n+++ b/src/test/org/apache/commons/cli/ApplicationTest.java\n         hf.printHelp(60, cmdLine, null, options, null);\n     }\n \n+\n+    /**\n+     * Real world test with long and short options.\n+     */\n+    public void testNLT() throws Exception {\n+        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n+        Option version = new Option(\"v\", \"version\", false, \"print version information\");\n+        Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n+        Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n+\n+        Option timeLimit = OptionBuilder.withLongOpt(\"limit\").hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Set time limit for execution, in minutes\")\n+                                        .create(\"l\");\n+\n+        Option age = OptionBuilder.withLongOpt(\"age\").hasArg()\n+                                  .withValueSeparator()\n+                                  .withDescription(\"Age (in days) of cache item before being recomputed\")\n+                                  .create(\"a\");\n+\n+        Option server = OptionBuilder.withLongOpt(\"server\").hasArg()\n+                                     .withValueSeparator()\n+                                     .withDescription(\"The NLT server address\")\n+                                     .create(\"s\");\n+\n+        Option numResults = OptionBuilder.withLongOpt(\"results\").hasArg()\n+                                         .withValueSeparator()\n+                                         .withDescription(\"Number of results per item\")\n+                                         .create(\"r\");\n+\n+        Option configFile = OptionBuilder.withLongOpt(\"file\").hasArg()\n+                                         .withValueSeparator()\n+                                         .withDescription(\"Use the specified configuration file\")\n+                                         .create();\n+\n+        Options options = new Options();\n+        options.addOption(help);\n+        options.addOption(version);\n+        options.addOption(newRun);\n+        options.addOption(trackerRun);\n+        options.addOption(timeLimit);\n+        options.addOption(age);\n+        options.addOption(server);\n+        options.addOption(numResults);\n+        options.addOption(configFile);\n+\n+        // create the command line parser\n+        CommandLineParser parser = new PosixParser();\n+\n+        String[] args = new String[] {\n+                \"-v\",\n+                \"-l\",\n+                \"10\",\n+                \"-age\",\n+                \"5\",\n+                \"-file\",\n+                \"filename\"\n+            };\n+\n+        CommandLine line = parser.parse(options, args);\n+        assertTrue(line.hasOption(\"v\"));\n+        assertEquals(line.getOptionValue(\"l\"), \"10\");\n+        assertEquals(line.getOptionValue(\"limit\"), \"10\");\n+        assertEquals(line.getOptionValue(\"a\"), \"5\");\n+        assertEquals(line.getOptionValue(\"age\"), \"5\");\n+        assertEquals(line.getOptionValue(\"file\"), \"filename\");\n+    }\n }\n--- a/src/test/org/apache/commons/cli/PosixParserTest.java\n+++ b/src/test/org/apache/commons/cli/PosixParserTest.java\n         parser = new PosixParser();\n     }\n \n-    /**\n-     * Real world test with long and short options.\n-     */\n-    public void testLongOptionWithShort() throws Exception {\n-        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n-        Option version = new Option(\"v\", \"version\", false, \"print version information\");\n-        Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n-        Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n-\n-        Option timeLimit = OptionBuilder.withLongOpt(\"limit\").hasArg()\n-                                        .withValueSeparator()\n-                                        .withDescription(\"Set time limit for execution, in minutes\")\n-                                        .create(\"l\");\n-\n-        Option age = OptionBuilder.withLongOpt(\"age\").hasArg()\n-                                  .withValueSeparator()\n-                                  .withDescription(\"Age (in days) of cache item before being recomputed\")\n-                                  .create(\"a\");\n-\n-        Option server = OptionBuilder.withLongOpt(\"server\").hasArg()\n-                                     .withValueSeparator()\n-                                     .withDescription(\"The NLT server address\")\n-                                     .create(\"s\");\n-\n-        Option numResults = OptionBuilder.withLongOpt(\"results\").hasArg()\n-                                         .withValueSeparator()\n-                                         .withDescription(\"Number of results per item\")\n-                                         .create(\"r\");\n-\n-        Option configFile = OptionBuilder.withLongOpt(\"file\").hasArg()\n-                                         .withValueSeparator()\n-                                         .withDescription(\"Use the specified configuration file\")\n-                                         .create();\n-\n-        Options options = new Options();\n-        options.addOption(help);\n-        options.addOption(version);\n-        options.addOption(newRun);\n-        options.addOption(trackerRun);\n-        options.addOption(timeLimit);\n-        options.addOption(age);\n-        options.addOption(server);\n-        options.addOption(numResults);\n-        options.addOption(configFile);\n-\n-        // create the command line parser\n-        CommandLineParser parser = new PosixParser();\n-\n-        String[] args = new String[] {\n-                \"-v\",\n-                \"-l\",\n-                \"10\",\n-                \"-age\",\n-                \"5\",\n-                \"-file\",\n-                \"filename\"\n-            };\n-\n-        CommandLine line = parser.parse(options, args);\n-        assertTrue(line.hasOption(\"v\"));\n-        assertEquals(line.getOptionValue(\"l\"), \"10\");\n-        assertEquals(line.getOptionValue(\"limit\"), \"10\");\n-        assertEquals(line.getOptionValue(\"a\"), \"5\");\n-        assertEquals(line.getOptionValue(\"age\"), \"5\");\n-        assertEquals(line.getOptionValue(\"file\"), \"filename\");\n-    }\n-\n     public void testLongWithEqualSingleDash() throws Exception\n     {\n         // not supported by the PosixParser", "timestamp": 1243523271, "metainfo": ""}