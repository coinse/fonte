{"sha": "10195f227a2285d8213eea422996aadda00ba7cd", "log": "set svn:eol-style to native  ", "commit": "\n--- a/src/test/org/apache/commons/cli/OptionTest.java\n+++ b/src/test/org/apache/commons/cli/OptionTest.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.cli;\n-\n-import junit.framework.TestCase;\n-\n-/**\n- * @author brianegge\n- */\n-public class OptionTest extends TestCase {\n-\n-   private static class TestOption extends Option {\n-        public TestOption(String opt, boolean hasArg, String description) throws IllegalArgumentException {\n-            super(opt, hasArg, description);\n-        }\n-        public boolean addValue(String value) {\n-            addValueForProcessing(value);\n-            return true;\n-        }\n-   }\n-\n-   public void testClear() {\n-       TestOption option = new TestOption(\"x\", true, \"\");\n-       assertEquals(0, option.getValuesList().size());\n-       option.addValue(\"a\");\n-       assertEquals(1, option.getValuesList().size());\n-       option.clearValues();\n-       assertEquals(0, option.getValuesList().size());\n-   }\n-\n-    // See http://issues.apache.org/jira/browse/CLI-21\n-    public void testClone() throws CloneNotSupportedException {\n-        TestOption a = new TestOption(\"a\", true, \"\");\n-        TestOption b = (TestOption) a.clone();\n-        assertEquals(a, b);\n-        assertNotSame(a, b);\n-        a.setDescription(\"a\");\n-        assertEquals(\"\", b.getDescription());\n-        b.setArgs(2);\n-        b.addValue(\"b1\");\n-        b.addValue(\"b2\");\n-        assertEquals(1, a.getArgs());\n-        assertEquals(0, a.getValuesList().size());\n-        assertEquals(2, b.getValues().length);\n-    }\n-\n-    private static class DefaultOption extends Option {\n-\n-        private final String defaultValue;\n-\n-        public DefaultOption(String opt, String description, String defaultValue) throws IllegalArgumentException {\n-            super(opt, true, description);\n-            this.defaultValue = defaultValue;\n-        }\n-\n-        public String getValue() {\n-            return super.getValue() != null ? super.getValue() : defaultValue;\n-        }\n-    }\n-\n-    public void testSubclass() throws CloneNotSupportedException {\n-        Option option = new DefaultOption(\"f\", \"file\", \"myfile.txt\");\n-        Option clone = (Option) option.clone();\n-        assertEquals(\"myfile.txt\", clone.getValue());\n-        assertEquals(DefaultOption.class, clone.getClass());\n-    }\n-\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.cli;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author brianegge\n+ */\n+public class OptionTest extends TestCase {\n+\n+   private static class TestOption extends Option {\n+        public TestOption(String opt, boolean hasArg, String description) throws IllegalArgumentException {\n+            super(opt, hasArg, description);\n+        }\n+        public boolean addValue(String value) {\n+            addValueForProcessing(value);\n+            return true;\n+        }\n+   }\n+\n+   public void testClear() {\n+       TestOption option = new TestOption(\"x\", true, \"\");\n+       assertEquals(0, option.getValuesList().size());\n+       option.addValue(\"a\");\n+       assertEquals(1, option.getValuesList().size());\n+       option.clearValues();\n+       assertEquals(0, option.getValuesList().size());\n+   }\n+\n+    // See http://issues.apache.org/jira/browse/CLI-21\n+    public void testClone() throws CloneNotSupportedException {\n+        TestOption a = new TestOption(\"a\", true, \"\");\n+        TestOption b = (TestOption) a.clone();\n+        assertEquals(a, b);\n+        assertNotSame(a, b);\n+        a.setDescription(\"a\");\n+        assertEquals(\"\", b.getDescription());\n+        b.setArgs(2);\n+        b.addValue(\"b1\");\n+        b.addValue(\"b2\");\n+        assertEquals(1, a.getArgs());\n+        assertEquals(0, a.getValuesList().size());\n+        assertEquals(2, b.getValues().length);\n+    }\n+\n+    private static class DefaultOption extends Option {\n+\n+        private final String defaultValue;\n+\n+        public DefaultOption(String opt, String description, String defaultValue) throws IllegalArgumentException {\n+            super(opt, true, description);\n+            this.defaultValue = defaultValue;\n+        }\n+\n+        public String getValue() {\n+            return super.getValue() != null ? super.getValue() : defaultValue;\n+        }\n+    }\n+\n+    public void testSubclass() throws CloneNotSupportedException {\n+        Option option = new DefaultOption(\"f\", \"file\", \"myfile.txt\");\n+        Option clone = (Option) option.clone();\n+        assertEquals(\"myfile.txt\", clone.getValue());\n+        assertEquals(DefaultOption.class, clone.getClass());\n+    }\n+\n+}", "timestamp": 1212100723, "metainfo": ""}