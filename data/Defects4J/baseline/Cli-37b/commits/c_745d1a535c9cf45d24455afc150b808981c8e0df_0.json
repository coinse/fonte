{"sha": "745d1a535c9cf45d24455afc150b808981c8e0df", "log": "javadoc updates   ", "commit": "\n--- a/src/java/org/apache/commons/cli/AlreadySelectedException.java\n+++ b/src/java/org/apache/commons/cli/AlreadySelectedException.java\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.cli;\n \n-/** <p>Exception thrown when more than one option in an option group\n+/** \n+ * <p>Thrown when more than one option in an option group\n  * has been provided.</p>\n  *\n- * @author John Keyes (john @ integralsource.com)\n- * @version $Revision: 1.4 $\n+ * @author John Keyes ( jbjk at mac.com )\n+ * @see ParseException\n  */\n public class AlreadySelectedException extends ParseException {\n \n-    /** Construct a new Exception with a message\n+    /** \n+     * <p>Construct a new <code>AlreadySelectedException</code> \n+     * with the specified detail message.</p>\n      *\n-     * @param message Explanation of the exception\n+     * @param message the detail message\n      */\n     public AlreadySelectedException( String message ) {\n         super( message );\n--- a/src/java/org/apache/commons/cli/BasicParser.java\n+++ b/src/java/org/apache/commons/cli/BasicParser.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/BasicParser.java,v 1.2 2002/08/26 20:15:02 jkeyes Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2002/08/26 20:15:02 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n package org.apache.commons.cli;\n \n /**\n+ * The class BasicParser provides a very simple implementation of\n+ * the {@link Parser#flatten(Options,String[],boolean) flatten} method.\n+ *\n  * @author John Keyes (jbjk at mac.com)\n+ * @see Parser\n  */\n public class BasicParser extends Parser {\n \n+    /**\n+     * <p>A simple implementation of {@link Parser}'s abstract\n+     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n+     *\n+     * <p><b>Note:</b> <code>options</code> and <code>stopAtNonOption</code>\n+     * are not used in this <code>flatten</code> method.</p>\n+     *\n+     * @param options The command line {@link Options}\n+     * @param arguments The command line arguments to be parsed\n+     * @param stopAtNonOption Specifies whether to stop flattening\n+     * when an non option is found.\n+     * @return The <code>arguments</code> String array.\n+     */\n     protected String[] flatten( Options options, \n                                 String[] arguments, \n                                 boolean stopAtNonOption )\n     {\n+        // just echo the arguments\n         return arguments;\n     }\n }\n--- a/src/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/java/org/apache/commons/cli/CommandLine.java\n  * <http://www.apache.org/>.\n  *\n  */\n-\n package org.apache.commons.cli;\n \n import java.util.Collection;\n import java.util.LinkedList;\n import java.util.Map;\n \n-/** <p>Represents list of arguments parsed against\n+/** \n+ * <p>Represents list of arguments parsed against\n  * a {@link Options} descriptor.<p>\n  *\n  * <p>It allows querying of a boolean {@link #hasOption(String opt)},\n  * @author bob mcwhirter (bob @ werken.com)\n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @author John Keyes (jbjk at mac.com)\n- *\n- * @version $Revision: 1.4 $\n  */\n public class CommandLine {\n     \n     CommandLine() {\n     }\n     \n-    /** <p>Query to see if an option has been set.</p>\n+    /** \n+     * <p>Query to see if an option has been set.</p>\n      *\n      * @param opt Short name of the option\n      * @return true if set, false if not\n         return options.containsKey( opt );\n     }\n \n-    /** <p>Query to see if an option has been set.</p>\n+    /** \n+     * <p>Query to see if an option has been set.</p>\n      *\n      * @param opt character name of the option\n      * @return true if set, false if not\n     }\n \n     /**\n+     * <p>Return the <code>Object</code> type of this <code>Option</code>.</p>\n+     *\n      * @param opt the name of the option\n-     * @return the type of opt\n+     * @return the type of this <code>Option</code>\n      */\n     public Object getOptionObject( String opt ) {\n         String res = getOptionValue( opt );\n     }\n \n     /**\n+     * <p>Return the <code>Object</code> type of this <code>Option</code>.</p>\n+     *\n      * @param opt the name of the option\n      * @return the type of opt\n      */\n         return getOptionObject( String.valueOf( opt ) );\n     }\n \n-    /** <p>Retrieve the argument, if any,  of an option.</p>\n+    /** \n+     * <p>Retrieve the argument, if any, of this option.</p>\n      *\n      * @param opt the name of the option\n-     * @return Value of the argument if option is set, and has an argument, else null.\n+     * @return Value of the argument if option is set, and has an argument,\n+     * otherwise null.\n      */\n     public String getOptionValue( String opt ) {\n         String[] values = getOptionValues(opt);\n         return (values == null) ? null : values[0];\n     }\n \n-    /** <p>Retrieve the argument, if any,  of an option.</p>\n+    /** \n+     * <p>Retrieve the argument, if any, of this option.</p>\n      *\n      * @param opt the character name of the option\n-     * @return Value of the argument if option is set, and has an argument, else null.\n+     * @return Value of the argument if option is set, and has an argument,\n+     * otherwise null.\n      */\n     public String getOptionValue( char opt ) {\n         return getOptionValue( String.valueOf( opt ) );\n     }\n \n-    /** <p>Retrieves the array of values, if any, of an option.</p>\n+    /** \n+     * <p>Retrieves the array of values, if any, of an option.</p>\n      *\n      * @param opt string name of the option\n-     * @return An array of values if the option is set, and has an argument, else null.\n+     * @return Values of the argument if option is set, and has an argument,\n+     * otherwise null.\n      */\n     public String[] getOptionValues( String opt ) {\n         List values = new java.util.ArrayList();\n         return (values.size() == 0) ? null : (String[])values.toArray(new String[]{});\n     }\n \n-    /** <p>Retrieves the array of values, if any, of an option.</p>\n+    /** \n+     * <p>Retrieves the array of values, if any, of an option.</p>\n      *\n      * @param opt character name of the option\n-     * @return An array of values if the option is set, and has an argument, else null.\n+     * @return Values of the argument if option is set, and has an argument,\n+     * otherwise null.\n      */\n     public String[] getOptionValues( char opt ) {\n         return getOptionValues( String.valueOf( opt ) );\n     }\n     \n-    /** <p>Retrieve the argument, if any, of an option.</p>\n+    /** \n+     * <p>Retrieve the argument, if any, of an option.</p>\n      *\n      * @param opt name of the option\n      * @param defaultValue is the default value to be returned if the option is not specified\n-     * @return Value of the argument if option is set, and has an argument, else null.\n+     * @return Value of the argument if option is set, and has an argument,\n+     * otherwise <code>defaultValue</code>.\n      */\n     public String getOptionValue( String opt, String defaultValue ) {\n         String answer = getOptionValue( opt );\n         return ( answer != null ) ? answer : defaultValue;\n     }\n     \n-    /** <p>Retrieve the argument, if any, of an option.</p>\n+    /** \n+     * <p>Retrieve the argument, if any, of an option.</p>\n      *\n      * @param opt character name of the option\n      * @param defaultValue is the default value to be returned if the option is not specified\n-     * @return Value of the argument if option is set, and has an argument, else null.\n+     * @return Value of the argument if option is set, and has an argument,\n+     * otherwise <code>defaultValue</code>.\n      */\n     public String getOptionValue( char opt, String defaultValue ) {\n         return getOptionValue( String.valueOf( opt ), defaultValue );\n     }\n \n-    /** <p>Retrieve any left-over non-recognized options and arguments</p>\n-     *\n-     * @return an array of remaining items passed in but not parsed\n+    /** \n+     * <p>Retrieve any left-over non-recognized options and arguments</p>\n+     *\n+     * @return remaining items passed in but not parsed as an array\n      */\n     public String[] getArgs() {\n         String[] answer = new String[ args.size() ];\n         return answer;\n     }\n     \n-    /** <p>Retrieve any left-over non-recognized options and arguments</p>\n-     *\n-     * @return List of remaining items passed in but not parsed\n+    /** \n+     * <p>Retrieve any left-over non-recognized options and arguments</p>\n+     *\n+     * @return remaining items passed in but not parsed as a <code>List</code>.\n      */\n     public List getArgList() {\n         return args;\n--- a/src/java/org/apache/commons/cli/CommandLineParser.java\n+++ b/src/java/org/apache/commons/cli/CommandLineParser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/CommandLineParser.java,v 1.2 2002/07/04 22:32:12 jkeyes Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/07/04 22:32:12 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/CommandLineParser.java,v 1.3 2002/08/26 20:15:02 jkeyes Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/08/26 20:15:02 $\n  *\n  * ====================================================================\n  *\n package org.apache.commons.cli;\n \n /**\n+ * A class that implements the <code>CommandLineParser</code> interface \n+ * can parse a String array according to the {@link Options} specified\n+ * and return a {@link CommandLine}.\n+ *\n  * @author John Keyes (jbjk at mac.com)\n  */\n public interface CommandLineParser {\n--- a/src/java/org/apache/commons/cli/CommandLineParserFactory.java\n+++ b/src/java/org/apache/commons/cli/CommandLineParserFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Attic/CommandLineParserFactory.java,v 1.3 2002/08/24 22:15:31 jkeyes Exp $\n- * $Revision: 1.3 $\n- * $Date: 2002/08/24 22:15:31 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Attic/CommandLineParserFactory.java,v 1.4 2002/08/26 20:15:02 jkeyes Exp $\n+ * $Revision: 1.4 $\n+ * $Date: 2002/08/26 20:15:02 $\n  *\n  * ====================================================================\n  *\n     private static String DEFAULT_PARSER = \"org.apache.commons.cli.PosixParser\";\n \n     /**\n-     * @return the CommandLineParser\n+     * @return the default CommandLineParser\n      */\n     public static CommandLineParser newParser() {\n         return newParser( DEFAULT_PARSER );\n     }\n \n     /**\n+     * @param classname the name of the parser class\n+     * \n      * @return the CommandLineParser specified by <code>classname</code>.\n      */\n     public static CommandLineParser newParser( String classname ) {\n--- a/src/java/org/apache/commons/cli/GnuParser.java\n+++ b/src/java/org/apache/commons/cli/GnuParser.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.8 2002/08/26 20:15:02 jkeyes Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/08/26 20:15:02 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n package org.apache.commons.cli;\n \n import java.util.Arrays;\n import java.util.Iterator;\n \n /**\n+ * The class GnuParser provides an implementation of the \n+ * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n+ *\n  * @author John Keyes (jbjk at mac.com)\n+ * @see Parser\n+ * @version $Revision: 1.8 $\n  */\n public class GnuParser extends Parser {\n \n+    /** holder for flattened tokens */\n     private ArrayList tokens = new ArrayList();\n \n+    /**\n+     * <p>Resets the members to their original state i.e. remove\n+     * all of <code>tokens</code> entries.\n+     */\n     private void init() {\n         tokens.clear();\n     }\n \n+    /**\n+     * <p>This flatten method does so using the following rules:\n+     * <ol>\n+     *  <li>If an {@link Option} exists for the first character of \n+     *  the <code>arguments</code> entry <b>AND</b> an {@link Option} \n+     *  does not exist for the whole <code>argument</code> then\n+     *  add the first character as an option to the processed tokens\n+     *  list e.g. \"-D\" and add the rest of the entry to the also.</li>\n+     *  <li>Otherwise just add the token to the processed tokens list.\n+     *  </li>\n+     * </ol>\n+     * </p>\n+     */\n     protected String[] flatten( Options options, \n                                 String[] arguments, \n                                 boolean stopAtNonOption )\n--- a/src/java/org/apache/commons/cli/MissingArgumentException.java\n+++ b/src/java/org/apache/commons/cli/MissingArgumentException.java\n \n package org.apache.commons.cli;\n \n-/** <p>Exception thrown when an option requiring an argument\n+/** \n+ * <p>Thrown when an option requiring an argument\n  * is not provided with an argument.</p>\n  *\n- * @author bob mcwhirter (bob @ werken.com)\n- * @version $Revision: 1.2 $\n+ * @author John Keyes (jbjk at mac.com)\n+ * @see ParseException\n  */\n public class MissingArgumentException extends ParseException {\n     \n-    /** Construct a new Exception with a message\n+    /** \n+     * <p>Construct a new <code>MissingArgumentException</code> \n+     * with the specified detail message.</p>\n      *\n-     * @param msg Explanation of the exception\n+     * @param message the detail message\n      */\n-    public MissingArgumentException(String msg) {\n-        super(msg);\n+    public MissingArgumentException( String message ) {\n+        super( message );\n     }\n }\n--- a/src/java/org/apache/commons/cli/MissingOptionException.java\n+++ b/src/java/org/apache/commons/cli/MissingOptionException.java\n \n package org.apache.commons.cli;\n \n-/** <p>Exception thrown when an option requiring an argument\n- * is not provided with an argument.</p>\n+/** \n+ * <p>Thrown when a required option has not been provided.</p>\n  *\n- * @author bob mcwhirter (bob @ werken.com)\n- * @version $Revision: 1.2 $\n+ * @author John Keyes ( jbjk at mac.com )\n+ * @see ParseException\n  */\n public class MissingOptionException extends ParseException {\n     \n-    /** Construct a new Exception with a message\n+    /** \n+     * <p>Construct a new <code>MissingSelectedException</code> \n+     * with the specified detail message.</p>\n      *\n-     * @param msg Explanation of the exception\n+     * @param message the detail message\n      */\n-    public MissingOptionException(String msg) {\n-        super(msg);\n+    public MissingOptionException( String message ) {\n+        super( message );\n     }\n }\n--- a/src/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/OptionBuilder.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.6 2002/08/18 19:07:42 jkeyes Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/18 19:07:42 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.7 2002/08/26 20:15:02 jkeyes Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/26 20:15:02 $\n  *\n  * ====================================================================\n  *\n     private static int numberOfArgs = Option.UNINITIALIZED;\n     /** option type */\n     private static Object type;\n-\n+    /** option can have an optional argument value */\n     private static boolean optionalArg;\n+    /** value separator for argument value */\n     private static char valuesep;\n \n     /** option builder instance */\n         return option;\n     }\n \n+    /**\n+     * <p>Create an Option using the current settings</p>\n+     *\n+     * @return the Option instance\n+     * @throws IllegalArgumentException if <code>longOpt</code> has\n+     * not been set.  \n+     * @see Option.\n+     */\n     public static Option create() \n     throws IllegalArgumentException\n     {\n--- a/src/java/org/apache/commons/cli/OptionGroup.java\n+++ b/src/java/org/apache/commons/cli/OptionGroup.java\n \n /**\n  * A group of mutually exclusive options.\n- * @author John Keyes ( john at integralsource.com )\n+ * @author John Keyes ( jbjk at mac.com )\n  * @version $Revision: 1.2 $\n  */\n public class OptionGroup {\n+\n     /** hold the options */\n     private HashMap optionMap = new HashMap();\n \n--- a/src/java/org/apache/commons/cli/Options.java\n+++ b/src/java/org/apache/commons/cli/Options.java\n     \n     /** <p>Retrieve the named {@link Option}</p>\n      *\n-     * @param opt short single-character name of the {@link Option}\n+     * @param opt short or long name of the {@link Option}\n      * @return the option represented by opt\n      */\n     public Option getOption( String opt ) {\n         return (option == null) ? null : (Option)option.clone();\n     }\n \n-    boolean hasOption(String opt) {\n+    /** \n+     * <p>Returns whether the named {@link Option} is a member\n+     * of this {@link Options}</p>\n+     *\n+     * @param opt short or long name of the {@link Option}\n+     * @return true if the named {@link Option} is a member\n+     * of this {@link Options}\n+     */\n+    public boolean hasOption( String opt ) {\n \n         // short option\n         if( opt.length() == 1 ) {\n--- a/src/java/org/apache/commons/cli/ParseException.java\n+++ b/src/java/org/apache/commons/cli/ParseException.java\n \n package org.apache.commons.cli;\n \n-/** <p>Base for Exceptions thrown during parsing of a command-line<p>\n+/** \n+ * <p>Base for Exceptions thrown during parsing of a command-line.</p>\n  *\n  * @author bob mcwhirter (bob @ werken.com)\n  * @version $Revision: 1.2 $\n public class ParseException extends Exception \n {\n     \n-    /** Construct a new Exception with a message\n+    /** \n+     * <p>Construct a new <code>ParseException</code> \n+     * with the specified detail message.</p>\n      *\n-     * @param msg Explanation of the exception\n+     * @param message the detail message\n      */\n-    public ParseException(String msg) {\n-        super(msg);\n+    public ParseException( String message ) {\n+        super( message );\n     }\n }\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n                 buff.append( missing.getDescription() );\n             }\n \n-            // throw the MissingOptionException\n             throw new MissingOptionException( buff.toString() );\n         }\n     }\n--- a/src/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/java/org/apache/commons/cli/PosixParser.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.9 2002/08/26 20:15:02 jkeyes Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/08/26 20:15:02 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n package org.apache.commons.cli;\n \n import java.util.Arrays;\n import java.util.Map;\n \n /**\n+ * The class PosixParser provides an implementation of the \n+ * {@link Parser#flatten(Options,String[],boolean) flatten} method.\n+ *\n  * @author John Keyes (jbjk at mac.com)\n+ * @see Parser\n+ * @version $Revision: 1.9 $\n  */\n public class PosixParser extends Parser {\n \n+    /** holder for flattened tokens */\n     private ArrayList tokens = new ArrayList();\n+    /** specifies if bursting should continue */\n     private boolean eatTheRest;\n+    /** holder for the current option */\n     private Option currentOption;\n+    /** the command line Options */\n     private Options options;\n \n+    /**\n+     * <p>Resets the members to their original state i.e. remove\n+     * all of <code>tokens</code> entries, set <code>eatTheRest</code>\n+     * to false and set <code>currentOption</code> to null.</p>\n+     */\n     private void init() {\n         eatTheRest = false;\n         tokens.clear();\n         currentOption = null;\n     }\n \n+    /**\n+     * <p>An implementation of {@link Parser}'s abstract\n+     * {@link Parser#flatten(Options,String[],boolean) flatten} method.</p>\n+     *\n+     * <p>The following are the rules used by this flatten method.\n+     * <ol>\n+     *  <li>if <code>stopAtNonOption</code> is <b>true</b> then do not\n+     *  burst anymore of <code>arguments</code> entries, just add each\n+     *  successive entry without further processing.  Otherwise, ignore\n+     *  <code>stopAtNonOption</code>.</li>\n+     *  <li>if the current <code>arguments</code> entry is \"<b>--</b>\"\n+     *  just add the entry to the list of processed tokens</li>\n+     *  <li>if the current <code>arguments</code> entry is \"<b>-</b>\"\n+     *  just add the entry to the list of processed tokens</li>\n+     *  <li>if the current <code>arguments</code> entry is two characters\n+     *  in length and the first character is \"<b>-</b>\" then check if this\n+     *  is a valid {@link Option} id.  If it is a valid id, then add the\n+     *  entry to the list of processed tokens and set the current {@link Option}\n+     *  member.  If it is not a valid id and <code>stopAtNonOption</code>\n+     *  is true, then the remaining entries are copied to the list of \n+     *  processed tokens.  Otherwise, the current entry is ignored.</li>\n+     *  <li>if the current <code>arguments</code> entry is more than two\n+     *  characters in length and the first character is \"<b>-</b>\" then\n+     *  we need to burst the entry to determine its constituents.  For more\n+     *  information on the bursting algorithm see \n+     *  {@link PosixParser#burstToken( String, boolean) burstToken}.</li>\n+     *  <li>if the current <code>arguments</code> entry is not handled \n+     *  by any of the previous rules, then the entry is added to the list\n+     *  of processed tokens.</li>\n+     * </ol>\n+     * </p>\n+     *\n+     * @param options The command line {@link Options}\n+     * @param arguments The command line arguments to be parsed\n+     * @param stopAtNonOption Specifies whether to stop flattening\n+     * when an non option is found.\n+     * @return The flattened <code>arguments</code> String array.\n+     */\n     protected String[] flatten( Options options, \n                                 String[] arguments, \n                                 boolean stopAtNonOption )\n         return (String[])tokens.toArray( new String[] {} );\n     }\n \n+    /**\n+     * <p>Adds the remaining tokens to the processed tokens list.</p>\n+     *\n+     * @param iter An iterator over the remaining tokens\n+     */\n     private void gobble( Iterator iter ) {\n         if( eatTheRest ) {\n             while( iter.hasNext() ) {\n         }\n     }\n \n+    /**\n+     * <p>If there is a current option and it can have an argument\n+     * value then add the token to the processed tokens list and \n+     * set the current option to null.</p>\n+     * <p>If there is a current option and it can have argument\n+     * values then add the token to the processed tokens list.</p>\n+     * <p>If there is not a current option add the special token\n+     * \"<b>--</b>\" and the current <code>value</code> to the processed\n+     * tokens list.  The add all the remaining <code>argument</code>\n+     * values to the processed tokens list.</p>\n+     *\n+     * @param value The current token\n+     */\n     private void process( String value ) {\n         if( currentOption != null && currentOption.hasArg() ) {\n             if( currentOption.hasArg() ) {\n         }\n     }\n \n+    /**\n+     * <p>If it is a hyphen then add the hyphen directly to\n+     * the processed tokens list.</p>\n+     *\n+     * @param hyphen The hyphen token\n+     */\n     private void processSingleHyphen( String hyphen ) {\n         tokens.add( hyphen );\n     }\n \n-    private void processOptionToken( String token, boolean stop ) {\n+    /**\n+     * <p>If an {@link Option} exists for <code>token</code> then\n+     * set the current option and add the token to the processed \n+     * list.</p>\n+     * <p>If an {@link Option} does not exist and <code>stopAtNonOption</code>\n+     * is set then ignore the current token and add the remaining tokens\n+     * to the processed tokens list directly.</p>\n+     *\n+     * @param token The current option token\n+     * @param stopAtNonOption Specifies whether flattening should halt\n+     * at the first non option.\n+     */\n+    private void processOptionToken( String token, boolean stopAtNonOption ) {\n         if( this.options.hasOption( token ) ) {\n             currentOption = this.options.getOption( token );\n             tokens.add( token );\n         }\n-        else if( stop ) {\n+        else if( stopAtNonOption ) {\n             eatTheRest = true;\n         }\n     }\n \n-    private void burstToken( String token, boolean stop ) {\n+    /**\n+     * <p>Breaks <code>token</code> into its constituent parts\n+     * using the following algorithm.\n+     * <ul>\n+     *  <li>ignore the first character (\"<b>-</b>\" )</li>\n+     *  <li>foreach remaining character check if an {@link Option}\n+     *  exists with that id.</li>\n+     *  <li>if an {@link Option} does exist then add that character\n+     *  prepended with \"<b>-</b>\" to the list of processed tokens.</li>\n+     *  <li>if the {@link Option} can have an argument value and there \n+     *  are remaining characters in the token then add the remaining \n+     *  characters as a token to the list of processed tokens.</li>\n+     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b> \n+     *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token\n+     *  \"<b>--</b>\" followed by the remaining characters and also \n+     *  the remaining tokens directly to the processed tokens list.</li>\n+     *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>\n+     *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that\n+     *  character prepended with \"<b>-</b>\".</li>\n+     * </ul>\n+     * </p>\n+     */\n+    protected void burstToken( String token, boolean stopAtNonOption ) {\n         int tokenLength = token.length();\n \n         for( int i = 1; i < tokenLength; i++) {\n                     break;\n                 }\n             }\n-            else if( stop ) {\n+            else if( stopAtNonOption ) {\n                 process( token.substring( i ) );\n             }\n             else {\n--- a/src/java/org/apache/commons/cli/UnrecognizedOptionException.java\n+++ b/src/java/org/apache/commons/cli/UnrecognizedOptionException.java\n \n package org.apache.commons.cli;\n \n-/** <p>Exception thrown during parsing signalling an unrecognized\n+/** \n+ * <p>Exception thrown during parsing signalling an unrecognized\n  * option was seen.<p>\n- *\n  *\n  * @author bob mcwhiter (bob @ werken.com)\n  * @version $Revision: 1.2 $\n  */\n public class UnrecognizedOptionException extends ParseException {\n     \n-    /** Construct a new Exception with a message\n+    /** \n+     * <p>Construct a new <code>UnrecognizedArgumentException</code> \n+     * with the specified detail message.</p>\n      *\n-     * @param msg Explanation of the exception\n+     * @param message the detail message\n      */\n-    public UnrecognizedOptionException(String msg) {\n-        super(msg);\n+    public UnrecognizedOptionException( String message ) {\n+        super( message );\n     }\n }", "timestamp": 1030392902, "metainfo": ""}