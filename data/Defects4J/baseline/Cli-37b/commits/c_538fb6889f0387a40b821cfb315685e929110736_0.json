{"sha": "538fb6889f0387a40b821cfb315685e929110736", "log": "Applying Andrew's fix to CLI-61 and rolling back the getMessageKey addition to OptionException that was applied from CLI-145  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/OptionException.java\n+++ b/src/java/org/apache/commons/cli2/OptionException.java\n     /** The message explaining the Exception */\n     private final String message;\n \n-    /** The id of the message */\n-    private final String messageKey;\n-\n     /**\n      * Creates a new OptionException.\n      *\n                            final String messageKey,\n                            final String value) {\n         this.option = option;\n-        this.messageKey = messageKey;\n \n         if (messageKey != null) {\n             final StringBuffer buffer = new StringBuffer();\n         return message;\n     }\n \n-    public String getMessageKey() {\n-        return messageKey;\n-    }\n }\n--- a/src/java/org/apache/commons/cli2/WriteableCommandLine.java\n+++ b/src/java/org/apache/commons/cli2/WriteableCommandLine.java\n     void addValue(final Option option, final Object value);\n \n     /**\n+     * Retrieves the Argument values specified on the command line for the\n+     * specified Option, this doesn't return any values supplied\n+     * programmatically as defaults.\n+     *\n+     * @param option the Option associated with the values\n+     * @return a list of values or an empty List if none are found\n+     */\n+    List getUndefaultedValues(final Option option);\n+\n+    /**\n      * Sets the default values for an Option in the CommandLine\n      * @param option the Option to add to\n      * @param defaultValues the defaults for the option\n--- a/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n+++ b/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java\n         return valueList;\n     }\n \n+    public List getUndefaultedValues(Option option) {\n+      // First grab the command line values\n+      List valueList = (List) values.get(option);\n+\n+      // Finally use an empty list\n+      if (valueList == null) {\n+        valueList = Collections.EMPTY_LIST;\n+      }\n+\n+      return valueList;\n+    }\n+\n     public Boolean getSwitch(final Option option,\n                              final Boolean defaultValue) {\n         // First grab the command line values\n--- a/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n+++ b/src/java/org/apache/commons/cli2/option/ArgumentImpl.java\n                               final Option option)\n         throws OptionException {\n         // count of arguments processed for this option.\n-        int argumentCount = 0;\n+        int argumentCount = commandLine.getUndefaultedValues(option).size();\n \n         while (arguments.hasNext() && (argumentCount < maximum)) {\n             final String allValuesQuoted = (String) arguments.next();\n--- a/src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java\n+++ b/src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java\n import org.apache.commons.cli2.Argument;\n import org.apache.commons.cli2.Group;\n import org.apache.commons.cli2.OptionException;\n-import org.apache.commons.cli2.resource.ResourceConstants;\n import org.apache.commons.cli2.builder.ArgumentBuilder;\n import org.apache.commons.cli2.builder.DefaultOptionBuilder;\n import org.apache.commons.cli2.builder.GroupBuilder;\n             parser.parse(new String[] { \"testfile.txt\", \"testfile.txt\", \"testfile.txt\", \"testfile.txt\" });\n             fail(\"OptionException\");\n         } catch (OptionException e) {\n-            assertEquals(ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, e.getMessageKey());\n+            assertEquals(\"Unexpected testfile.txt while processing \", e.getMessage());\n         }\n     }    \n }", "timestamp": 1212997039, "metainfo": ""}