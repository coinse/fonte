{"sha": "04490af06faa8fd1be15da88172beb32218dd336", "log": "bug #11457: implemented fix, javadoc added to Option   ", "commit": "\n--- a/src/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/java/org/apache/commons/cli/CommandLine.java\n     void setOpt( Option opt ) {\n         hashcodeMap.put( new Integer( opt.hashCode() ), opt );\n \n-        if( options.get( opt.getOpt() ) != null ) {\n-            ((java.util.List)options.get( opt.getOpt() )).add( opt );\n+        String key = opt.getOpt();\n+        if( \" \".equals(key) ) {\n+            key = opt.getLongOpt();\n+        }\n+        if( options.get( key ) != null ) {\n+            ((java.util.List)options.get( key )).add( opt );\n         }\n         else {\n-            options.put( opt.getOpt(), new java.util.ArrayList() );\n-            ((java.util.List)options.get( opt.getOpt() ) ).add( opt );\n+            options.put( key, new java.util.ArrayList() );\n+            ((java.util.List)options.get( key ) ).add( opt );\n         }\n     }\n \n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n  */\n \n public class Option implements Cloneable {\n+\n+    /** constant that specifies the number of argument values has not been specified */\n+    public final static int UNINITIALIZED = -1;\n+    \n+    /** constant that specifies the number of argument values is infinite */\n+    public final static int UNLIMITED_VALUES = -2;\n     \n     /** opt the single character representation of the option */\n-    private String opt = null;\n+    private String opt;\n \n     /** longOpt is the long representation of the option */\n-    private String     longOpt      = null;\n+    private String longOpt;\n \n     /** hasArg specifies whether this option has an associated argument */\n-    private boolean    hasArg       = false;\n+    private boolean hasArg;\n \n     /** description of the option */\n-    private String     description  = null;\n+    private String description;\n \n     /** required specifies whether this option is required to be present */\n-    private boolean    required     = false;\n-\n-    private boolean optionalArg = false;\n+    private boolean required;\n+\n+    /** specifies whether the argument value of this Option is optional */\n+    private boolean optionalArg;\n \n     /** \n      * numberOfArgs specifies the number of argument values this option \n      * can have \n      */\n-    private int    numberOfArgs = UNINITIALIZED;   \n-\n-    /** number of arguments constants */\n-    public final static int UNINITIALIZED = -1;\n-    public final static int UNLIMITED_VALUES = -2;\n+    private int numberOfArgs = UNINITIALIZED;   \n \n     /** the type of this Option */\n-    private Object     type         = null;   \n-\n-    /** ?? **/\n-    private ArrayList  values       = new ArrayList();\n+    private Object type;\n+\n+    /** the list of argument values **/\n+    private ArrayList values = new ArrayList();\n     \n     /** option char (only valid for single character options) */\n     private char id;\n \n+    /** the character that is the value separator */\n+    private char valuesep;\n+\n+    /**\n+     * <p>Validates whether <code>opt</code> is a permissable Option\n+     * shortOpt.  The rules that specify if the <code>opt</code>\n+     * is valid are:</p>\n+     * <ul>\n+     *  <li><code>opt</code> is not NULL</li>\n+     *  <li>a single character <code>opt</code> that is either\n+     *  ' '(special case), '?', '@' or a letter</li>\n+     *  <li>a multi character <code>opt</code> that only contains\n+     *  letters.</li>\n+     * </ul>\n+     *\n+     * @param opt The option string to validate\n+     * @throws IllegalArgumentException if the Option is not valid.\n+     */\n     private void validateOption( String opt ) \n     throws IllegalArgumentException\n     {\n+        // check that opt is not NULL\n         if( opt == null ) {\n             throw new IllegalArgumentException( \"opt is null\" );\n         }\n+        // handle the single character opt\n         else if( opt.length() == 1 ) {\n-            if ( !isValidOpt( opt.charAt( 0 ) ) ) {\n+            char ch = opt.charAt( 0 );\n+            if ( !isValidOpt( ch ) ) {\n                 throw new IllegalArgumentException( \"illegal option value '\" \n-                                                    + opt.charAt( 0 ) + \"'\" );\n+                                                    + ch + \"'\" );\n             }\n-            id = opt.charAt( 0 );\n-        }\n+            id = ch;\n+        }\n+        // handle the multi character opt\n         else {\n             char[] chars = opt.toCharArray();\n             for( int i = 0; i < chars.length; i++ ) {\n         }\n     }\n \n-    private boolean isValidOpt( char c ) \n-    {\n-        if ( ! ( isValidChar( c ) || c == '?' || c == '@') ) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    private boolean isValidChar( char c ) \n-    {\n-        if ( ! ( Character.isLetter( c ) ) ) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n+    /**\n+     * <p>Returns whether the specified character is a valid Option.</p>\n+     *\n+     * @param c the option to validate\n+     * @return true if <code>c</code> is a letter, ' ', '?' or '@', otherwise false.\n+     */\n+    private boolean isValidOpt( char c ) {\n+        return ( isValidChar( c ) || c == ' ' || c == '?' || c == '@' );\n+    }\n+\n+    /**\n+     * <p>Returns whether the specified character is a valid character.</p>\n+     *\n+     * @param c the character to validate\n+     * @return true if <code>c</code> is a letter.\n+     */\n+    private boolean isValidChar( char c ) {\n+        return Character.isLetter( c );\n+    }\n+\n+    /**\n+     * <p>Returns the id of this Option.  This is only set when the\n+     * Option shortOpt is a single character.  This is used for switch\n+     * statements.</p>\n+     *\n+     * @return the id of this Option\n+     */\n     public int getId( ) {\n         return id;\n     }\n      * @param hasArg specifies whether the Option takes an argument or not\n      * @param description describes the function of the option\n      */\n-    public Option(String opt, String description) \n+    public Option( String opt, String description ) \n     throws IllegalArgumentException\n     {\n-        this(opt, null, false, description);\n+        this( opt, null, false, description );\n     }\n \n     /**\n      * @param hasArg specifies whether the Option takes an argument or not\n      * @param description describes the function of the option\n      */\n-    public Option(String opt, boolean hasArg, String description) \n+    public Option( String opt, boolean hasArg, String description ) \n     throws IllegalArgumentException\n     {\n-        this(opt, null, hasArg, description);\n-    }\n-    \n-    /**\n-     * Creates an Option using the specified parameters.\n+        this( opt, null, hasArg, description );\n+    }\n+    \n+    /**\n+     * <p>Creates an Option using the specified parameters.</p>\n      *\n      * @param opt short representation of the option\n      * @param longOpt the long representation of the option\n      * @param hasArg specifies whether the Option takes an argument or not\n      * @param description describes the function of the option\n      */\n-    public Option(String opt, String longOpt, boolean hasArg, String description) \n+    public Option( String opt, String longOpt, boolean hasArg, String description ) \n     throws IllegalArgumentException\n     {\n+        // ensure that the option is valid\n         validateOption( opt );\n \n         this.opt          = opt;\n         this.longOpt      = longOpt;\n \n+        // if hasArg is set then the number of arguments is 1\n         if( hasArg ) {\n             this.numberOfArgs = 1;\n         }\n+\n         this.hasArg       = hasArg;\n         this.description  = description;\n     }\n     \n-    /** <p>Retrieve the name of this Option</p>\n-     *\n-     * <p>It is this character which can be used with\n+    /** <p>Retrieve the name of this Option.</p>\n+     *\n+     * <p>It is this String which can be used with\n      * {@link CommandLine#hasOption(String opt)} and\n      * {@link CommandLine#getOptionValue(String opt)} to check\n      * for existence and argument.<p>\n     }\n \n     /**\n-     * <p>Retrieve the type of this Option</p>\n+     * <p>Retrieve the type of this Option.</p>\n      * \n      * @return The type of this option\n      */\n         return this.type;\n     }\n \n+    /**\n+     * <p>Sets the type of this Option.</p>\n+     *\n+     * @param type the type of this Option\n+     */\n     public void setType( Object type ) {\n         this.type = type;\n     }\n     \n-    /** <p>Retrieve the long name of this Option</p>\n+    /** \n+     * <p>Retrieve the long name of this Option.</p>\n      *\n      * @return Long name of this option, or null, if there is no long name\n      */\n         return this.longOpt;\n     }\n \n+    /**\n+     * <p>Sets the long name of this Option.</p>\n+     *\n+     * @param longOpt the long name of this Option\n+     */\n     public void setLongOpt( String longOpt ) {\n         this.longOpt = longOpt;\n     }\n \n     /**\n-     * Sets whether this Option can have an optional argument.\n+     * <p>Sets whether this Option can have an optional argument.</p>\n      *\n      * @param optionalArg specifies whether the Option can have\n      * an optional argument.\n         return this.description;\n     }\n \n-     /** <p>Query to see if this Option requires an argument</p>\n+     /** \n+      * <p>Query to see if this Option requires an argument</p>\n       *\n       * @return boolean flag indicating if an argument is required\n       */\n          return this.required;\n      }\n \n+     /**\n+      * <p>Sets whether this Option is mandatory.</p>\n+      *\n+      * @param required specifies whether this Option is mandatory\n+      */\n      public void setRequired( boolean required ) {\n          this.required = required;\n      }\n \n-     /** <p>Query to see if this Option can take many values</p>\n+     /** \n+      * <p>Query to see if this Option can take many values</p>\n       *\n       * @return boolean flag indicating if multiple values are allowed\n       */\n          return ( this.numberOfArgs > 1 || this.numberOfArgs == UNLIMITED_VALUES );\n      }\n \n-     /** <p>Sets the number of argument values this Option can take.</p>\n+     /** \n+      * <p>Sets the number of argument values this Option can take.</p>\n       *\n       * @param num the number of argument values\n       */\n          this.numberOfArgs = num;\n      }\n \n-     private char valuesep;\n-\n+     /**\n+      * <p>Sets the value separator.  For example if the argument value\n+      * was a Java property, the value separator would be '='.</p>\n+      *\n+      * @param sep The value separator.\n+      */\n      public void setValueSeparator( char sep ) {\n          this.valuesep = sep;\n      }\n \n+     /**\n+      * <p>Returns the value separator character.</p>\n+      *\n+      * @return the value separator character.\n+      */\n      public char getValueSeparator() {\n          return this.valuesep;\n      }\n \n-     /** <p>Returns the number of argument values this Option can take.</p>\n+     /** \n+      * <p>Returns the number of argument values this Option can take.</p>\n       *\n       * @return num the number of argument values\n       */\n          return this.numberOfArgs;\n      }\n \n-    /** <p>Dump state, suitable for debugging.</p>\n+    /** \n+     * <p>Dump state, suitable for debugging.</p>\n      *\n      * @return Stringified form of this object\n      */\n     }\n \n     /**\n-     * Adds the specified value to this Option\n+     * <p>Adds the specified value to this Option.</p>\n      * \n      * @param value is a/the value of this Option\n      */\n \n     /**\n      * @return the value/first value of this Option or \n-     * null if there are no values.\n+     * <code>null</code> if there are no values.\n      */\n     public String getValue() {\n         return this.values.size()==0 ? null : (String)this.values.get( 0 );\n \n     /**\n      * @return the specified value of this Option or \n-     * null if there are no values.\n+     * <code>null</code> if there are no values.\n      */\n     public String getValue( int index ) \n     throws IndexOutOfBoundsException\n     }\n \n     /**\n-     * @return the values of this Option or null if there are no\n-     * values\n+     * @return the values of this Option as a String array \n+     * or null if there are no values\n      */\n     public String[] getValues() {\n         return this.values.size()==0 ? null : (String[])this.values.toArray(new String[]{});\n     }\n \n+    /**\n+     * @return the values of this Option as a List\n+     * or null if there are no values\n+     */\n     public java.util.List getValuesList() {\n         return this.values;\n     }\n \n+    /**\n+     * @return a copy of this Option\n+     */\n     public Object clone() {\n         Option option = new Option( getOpt(), getDescription() );\n         option.setArgs( getArgs() );\n--- a/src/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/OptionBuilder.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.5 2002/08/15 22:05:18 jkeyes Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/15 22:05:18 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.6 2002/08/18 19:07:42 jkeyes Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/18 19:07:42 $\n  *\n  * ====================================================================\n  *\n         // return the Option instance\n         return option;\n     }\n+\n+    public static Option create() \n+    throws IllegalArgumentException\n+    {\n+        if( longopt == null ) {\n+            throw new IllegalArgumentException( \"must specify longopt\" );\n+        }\n+\n+        return create( \" \" );\n+    }\n }\n--- a/src/test/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/org/apache/commons/cli/BugsTest.java\n  * version 1.1, a copy of which has been included with this distribution in\n  * the LICENSE file.\n  * \n- * $Id: BugsTest.java,v 1.3 2002/08/18 15:52:23 jkeyes Exp $\n+ * $Id: BugsTest.java,v 1.4 2002/08/18 19:07:42 jkeyes Exp $\n  */\n \n package org.apache.commons.cli;\n \n     public void tearDown()\n     {\n+    }\n+\n+    public void test11457() {\n+        Options options = new Options();\n+        options.addOption( OptionBuilder.withLongOpt( \"verbose\" )\n+                           .create() );\n+        String[] args = new String[] { \"--verbose\" };\n+\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\n+\n+        try {\n+            CommandLine cmd = parser.parse( options, args );\n+            assertTrue( cmd.hasOption( \"verbose\" ) );\n+        }        \n+        catch( ParseException exp ) {\n+            exp.printStackTrace();\n+            fail( \"Unexpected Exception: \" + exp.getMessage() );\n+        }\n     }\n \n     public void test11458()", "timestamp": 1029697662, "metainfo": ""}