{"sha": "1d040cee6c21afb693e1b849ec37712c493dc981", "log": "Renaming YYYY_MM_YY to YYYY_MM_DD as that seems like a much more accurate name  ", "commit": "\n--- a/src/test/org/apache/commons/cli2/option/ArgumentTest.java\n+++ b/src/test/org/apache/commons/cli2/option/ArgumentTest.java\n \n     public static Argument buildDateLimitArgument() {\n         return new ArgumentImpl(\"limit\", \"the last acceptable date\", 0, 1, '=', '\\0',\n-                                new DateValidator(DateValidatorTest.YYYY_MM_YY), null, null, 0);\n+                                new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);\n     }\n \n     public static Argument buildTargetsArgument() {\n     public void testNew() {\n         try {\n             new ArgumentImpl(\"limit\", \"the last acceptable date\", 10, 5, '=', '\\0',\n-                             new DateValidator(DateValidatorTest.YYYY_MM_YY), null, null, 0);\n+                             new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);\n         } catch (IllegalArgumentException e) {\n             assertEquals(resources.getMessage(\"Argument.minimum.exceeds.maximum\"), e.getMessage());\n         }\n         {\n             ArgumentImpl arg =\n                 new ArgumentImpl(null, \"the last acceptable date\", 5, 5, '=', '\\0',\n-                                 new DateValidator(DateValidatorTest.YYYY_MM_YY), null, null, 0);\n+                                 new DateValidator(DateValidatorTest.YYYY_MM_DD), null, null, 0);\n             assertEquals(\"wrong arg name\", \"arg\", arg.getPreferredName());\n         }\n \n \n             try {\n                 new ArgumentImpl(null, \"the last acceptable date\", 1, 1, '=', '\\0',\n-                                 new DateValidator(DateValidatorTest.YYYY_MM_YY), null, defaults, 0);\n+                                 new DateValidator(DateValidatorTest.YYYY_MM_DD), null, defaults, 0);\n             } catch (IllegalArgumentException exp) {\n                 assertEquals(resources.getMessage(\"Argument.too.few.defaults\"), exp.getMessage());\n             }\n             defaults.add(\"2\");\n \n             new ArgumentImpl(null, \"the last acceptable date\", 1, 1, '=', '\\0',\n-                             new DateValidator(DateValidatorTest.YYYY_MM_YY), null, defaults, 0);\n+                             new DateValidator(DateValidatorTest.YYYY_MM_DD), null, defaults, 0);\n         } catch (IllegalArgumentException exp) {\n             assertEquals(resources.getMessage(\"Argument.too.many.defaults\"), exp.getMessage());\n         }\n \n         option.validate(commandLine, option);\n         assertContentsEqual(Arrays.asList(new Object[] {\n-                                              DateValidatorTest.YYYY_MM_YY.parse(\"2004-01-01\")\n+                                              DateValidatorTest.YYYY_MM_DD.parse(\"2004-01-01\")\n                                           }), commandLine.getValues(option));\n     }\n \n--- a/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/DateValidatorTest.java\n     extends TestCase {\n     private static final ResourceHelper resources = ResourceHelper.getResourceHelper();\n     public static final DateFormat D_M_YY = new SimpleDateFormat(\"d/M/yy\");\n-    public static final DateFormat YYYY_MM_YY = new SimpleDateFormat(\"yyyy-MM-dd\");\n-    private List formats = Arrays.asList(new Object[] { D_M_YY, YYYY_MM_YY });\n+    public static final DateFormat YYYY_MM_DD = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    private List formats = Arrays.asList(new Object[] { D_M_YY, YYYY_MM_DD });\n \n     public void testSingleFormatValidate()\n         throws InvalidArgumentException {\n         validator.validate(list);\n \n         final Iterator i = list.iterator();\n-        assertEquals(\"2003-12-23\", YYYY_MM_YY.format((Date) i.next()));\n+        assertEquals(\"2003-12-23\", YYYY_MM_DD.format((Date) i.next()));\n         assertFalse(i.hasNext());\n     }\n \n         validator.validate(list);\n \n         final Iterator i = list.iterator();\n-        // CLI-40: For some reason, the YYYY_MM_YY object gets quite \n+        // CLI-40: For some reason, the YYYY_MM_DD object gets quite \n         // confused here and returns 2003-12-22. If we make a new one \n         // there is no problem.\n         assertEquals(\"2003-12-23\", new SimpleDateFormat(\"yyyy-MM-dd\").format((Date) i.next()));\n         validator.validate(list);\n \n         final Iterator i = list.iterator();\n-        assertEquals(\"2003-12-23\", YYYY_MM_YY.format((Date) i.next()));\n-        assertEquals(\"2002-10-12\", YYYY_MM_YY.format((Date) i.next()));\n+        assertEquals(\"2003-12-23\", YYYY_MM_DD.format((Date) i.next()));\n+        assertEquals(\"2002-10-12\", YYYY_MM_DD.format((Date) i.next()));\n         assertFalse(i.hasNext());\n     }\n ", "timestamp": 1149701231, "metainfo": ""}