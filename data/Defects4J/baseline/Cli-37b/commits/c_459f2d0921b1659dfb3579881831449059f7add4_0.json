{"sha": "459f2d0921b1659dfb3579881831449059f7add4", "log": "Changed the assertions checking the number of values in ValuesTest to use assertEquals instead of assertTrue  ", "commit": "\n--- a/src/test/org/apache/commons/cli/ValuesTest.java\n+++ b/src/test/org/apache/commons/cli/ValuesTest.java\n \n     public void setUp() throws Exception\n     {\n-        Options opts = new Options();\n+        Options options = new Options();\n \n-        opts.addOption(\"a\", false, \"toggle -a\");\n-        opts.addOption(\"b\", true, \"set -b\");\n-        opts.addOption(\"c\", \"c\", false, \"toggle -c\");\n-        opts.addOption(\"d\", \"d\", true, \"set -d\");\n-        \n-        opts.addOption( OptionBuilder.withLongOpt( \"e\" )\n-                                     .hasArgs()\n-                                     .withDescription( \"set -e \")\n-                                     .create( 'e' ) );\n+        options.addOption(\"a\", false, \"toggle -a\");\n+        options.addOption(\"b\", true, \"set -b\");\n+        options.addOption(\"c\", \"c\", false, \"toggle -c\");\n+        options.addOption(\"d\", \"d\", true, \"set -d\");\n \n-        opts.addOption(\"f\", \"f\", false, \"jk\");\n-        \n-        opts.addOption( OptionBuilder.withLongOpt( \"g\" )\n-                        .hasArgs( 2 )\n-                        .withDescription( \"set -g\")\n-                        .create( 'g' ) );\n-\n-        opts.addOption( OptionBuilder.withLongOpt( \"h\" )\n-                        .hasArgs( 2 )\n-                        .withDescription( \"set -h\")\n-                        .create( 'h' ) );\n-\n-        opts.addOption( OptionBuilder.withLongOpt( \"i\" )\n-                        .withDescription( \"set -i\")\n-                        .create( 'i' ) );\n-\n-        opts.addOption( OptionBuilder.withLongOpt( \"j\" )\n-                        .hasArgs( )\n-                        .withDescription( \"set -j\")\n-                        .withValueSeparator( '=' )\n-                        .create( 'j' ) );\n-\n-        opts.addOption( OptionBuilder.withLongOpt( \"k\" )\n-                        .hasArgs( )\n-                        .withDescription( \"set -k\")\n-                        .withValueSeparator( '=' )\n-                        .create( 'k' ) );\n-\n-        opts.addOption( OptionBuilder.withLongOpt( \"m\" )\n-                        .hasArgs( )\n-                        .withDescription( \"set -m\")\n-                        .withValueSeparator( )\n-                        .create( 'm' ) );\n+        options.addOption(OptionBuilder.withLongOpt(\"e\").hasArgs().withDescription(\"set -e \").create('e'));\n+        options.addOption(\"f\", \"f\", false, \"jk\");\n+        options.addOption(OptionBuilder.withLongOpt(\"g\").hasArgs(2).withDescription(\"set -g\").create('g'));\n+        options.addOption(OptionBuilder.withLongOpt(\"h\").hasArgs(2).withDescription(\"set -h\").create('h'));\n+        options.addOption(OptionBuilder.withLongOpt(\"i\").withDescription(\"set -i\").create('i'));\n+        options.addOption(OptionBuilder.withLongOpt(\"j\").hasArgs().withDescription(\"set -j\").withValueSeparator('=').create('j'));\n+        options.addOption(OptionBuilder.withLongOpt(\"k\").hasArgs().withDescription(\"set -k\").withValueSeparator('=').create('k'));\n+        options.addOption(OptionBuilder.withLongOpt(\"m\").hasArgs().withDescription(\"set -m\").withValueSeparator().create('m'));\n \n         String[] args = new String[] { \"-a\",\n                                        \"-b\", \"foo\",\n \n         CommandLineParser parser = new PosixParser();\n \n-        _cmdline = parser.parse(opts,args);\n+        _cmdline = parser.parse(options,args);\n     }\n \n     public void testShortArgs()\n     {\n         assertTrue( _cmdline.hasOption(\"b\") );\n         assertTrue( _cmdline.getOptionValue(\"b\").equals(\"foo\"));\n-        assertTrue( _cmdline.getOptionValues(\"b\").length == 1);\n+        assertEquals(1, _cmdline.getOptionValues(\"b\").length);\n \n         assertTrue( _cmdline.hasOption(\"d\") );\n         assertTrue( _cmdline.getOptionValue(\"d\").equals(\"bar\"));\n-        assertTrue( _cmdline.getOptionValues(\"d\").length == 1);\n+        assertEquals(1, _cmdline.getOptionValues(\"d\").length);\n     }\n \n     public void testMultipleArgValues()\n         String[] result = _cmdline.getOptionValues(\"e\");\n         String[] values = new String[] { \"one\", \"two\" };\n         assertTrue( _cmdline.hasOption(\"e\") );\n-        assertTrue( _cmdline.getOptionValues(\"e\").length == 2);\n+        assertEquals(2, _cmdline.getOptionValues(\"e\").length);\n         assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"e\") ) );\n     }\n \n         String[] result = _cmdline.getOptionValues(\"g\");\n         String[] values = new String[] { \"val1\", \"val2\" };\n         assertTrue( _cmdline.hasOption(\"g\") );\n-        assertTrue( _cmdline.getOptionValues(\"g\").length == 2);\n+        assertEquals(2, _cmdline.getOptionValues(\"g\").length);\n         assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"g\") ) );\n     }\n \n         String[] values = new String[] { \"val1\", \"val2\" };\n         assertTrue( _cmdline.hasOption(\"i\") );\n         assertTrue( _cmdline.hasOption(\"h\") );\n-        assertTrue( _cmdline.getOptionValues(\"h\").length == 2);\n+        assertEquals(2, _cmdline.getOptionValues(\"h\").length);\n         assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"h\") ) );\n     }\n \n     public void testExtraArgs()\n     {\n         String[] args = new String[] { \"arg1\", \"arg2\", \"arg3\" };\n-        assertTrue( _cmdline.getArgs().length == 3 );         \n+        assertEquals(3, _cmdline.getArgs().length);\n         assertTrue( Arrays.equals( args, _cmdline.getArgs() ) );\n     }\n \n         values = new String[] { \"key1\", \"value1\", \"key2\", \"value2\" };\n         assertTrue( _cmdline.hasOption( \"k\" ) );\n         assertTrue( _cmdline.hasOption( 'k' ) );\n-        assertTrue( _cmdline.getOptionValues( \"k\" ).length == 4 );\n-        assertTrue( _cmdline.getOptionValues( 'k' ).length == 4 );\n+        assertEquals(4, _cmdline.getOptionValues( \"k\" ).length);\n+        assertEquals(4, _cmdline.getOptionValues( 'k' ).length);\n         assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"k\" ) ) );\n         assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'k' ) ) );\n \n         values = new String[] { \"key\", \"value\" };\n         assertTrue( _cmdline.hasOption( \"m\" ) );\n         assertTrue( _cmdline.hasOption( 'm' ) );\n-        assertTrue( _cmdline.getOptionValues( \"m\" ).length == 2);\n-        assertTrue( _cmdline.getOptionValues( 'm' ).length == 2);\n+        assertEquals(2, _cmdline.getOptionValues( \"m\" ).length);\n+        assertEquals(2, _cmdline.getOptionValues( 'm' ).length);\n         assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"m\" ) ) );\n         assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'm' ) ) );\n     }", "timestamp": 1212436140, "metainfo": ""}