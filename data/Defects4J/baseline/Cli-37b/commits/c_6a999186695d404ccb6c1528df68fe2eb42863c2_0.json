{"sha": "6a999186695d404ccb6c1528df68fe2eb42863c2", "log": "revert CLI-166   ", "commit": "\n--- a/src/java/org/apache/commons/cli/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli/HelpFormatter.java\n      * Defaults to case-insensitive alphabetical sorting by option key\n      */\n     protected Comparator optionComparator = new OptionComparator();\n-\n-    /**\n-     * Flag to determine if we try to determine terminal width\n-     */\n-    private boolean autoWidth = false;\n     \n     /**\n      * Sets the 'width'.\n         }\n     }\n \n-    /**\n-     * Sets the 'autoWidth'.\n-     *\n-     * @param flag the new value of 'autoWidth'\n-     */\n-    public void setAutoWidth(boolean flag)\n-    {\n-        this.autoWidth = flag;\n-        int newWidth = (flag ? getTerminalWidth() : DEFAULT_WIDTH);\n-        setWidth(newWidth);\n-    }\n-    \n-    /**\n-     * Returns the 'autoWidth'.\n-     *\n-     * @return the 'autoWidth'\n-     */\n-    public boolean getAutoWidth()\n-    {\n-        return autoWidth;\n-    }\n-    \n     /**\n      * Print the help for <code>options</code> with the specified\n      * command line syntax.  This method prints help information to\n             buff.append(\"]\");\n         }\n     }\n-\n-    /**\n-     * Returns the auto-detected Terminal width as reported by stty -a  \n-     *\n-     */\n-    \n-    private static int getTerminalWidth()\n-    {\n-        int ret = DEFAULT_WIDTH;\n-        if (System.getProperty(\"os.name\").toLowerCase().indexOf(\"windows\") == -1) {\n-            String sttya = unixCmdOut(\"stty -a < /dev/tty\");\n-            StringTokenizer stok = new StringTokenizer(sttya, \";\");\n-            while (stok.hasMoreTokens()) {\n-                String out = stok.nextToken().trim();\n-                if (out.startsWith(\"columns\")) {\n-                    int index = out.lastIndexOf(\" \");\n-                    ret = Integer.parseInt(out.substring(index).trim());\n-                    break;\n-                } else if (out.endsWith(\"columns\")) {\n-                    int index = out.indexOf(\" \");\n-                    ret = Integer.parseInt(out.substring(0, index).trim());\n-                    break;\n-                }\n-            }\n-        }\n-        return ret;\n-    }\n-    \n-    /**\n-     * Runs the provided Unix command line and returns stdout  \n-     *\n-     * @param program the program to run\n-     */\n-    private static String unixCmdOut(String program)\n-    {\n-        int c;\n-        InputStream in;\n-        String rstr;\n-        ByteArrayOutputStream sout = new ByteArrayOutputStream();\n-        try {\n-            Process p = Runtime.getRuntime().exec(new String[] {\"/bin/sh\",\"-c\",program});\n-            in = p.getInputStream();\n-            while ((c = in.read()) != -1) {\n-                sout.write(c);\n-            }\n-            p.waitFor();\n-            rstr = new String(sout.toString());\n-        } catch (Exception e) {\n-            rstr = new String(DEFAULT_WIDTH + \" columns;\");\n-        }\n-        return rstr;\n-    }\n     \n     /**\n      * Print the cmdLineSyntax to the specified writer, using the\n--- a/src/test/org/apache/commons/cli/HelpFormatterTest.java\n+++ b/src/test/org/apache/commons/cli/HelpFormatterTest.java\n                 \"footer\"+EOL\n                 ,out.toString());\n     }\n-\n-    public void testAutoWidth()\n-    {\n-        // related to Bugzilla #19383 (CLI-67)\n-        Options options = new Options();\n-        options.addOption(new Option(\"a\", \"aaa\", false, \"aaaaaaa aaaa aaaaa aaaaaaaa aaaaaa aa aaaaa aaaaaaaaaaaaa\"));\n-        options.addOption(new Option(null, \"bbb\", false, \"bbbbbbb  bbbb bbbbbb bbbbb bbbbbb bbbb bbbbbbbb bbbbbbbb bbbbbbbbbb\"));\n-        options.addOption(new Option(\"c\", null, false, \"ccccccc ccccccccccc ccccccccccccc ccc ccccc cccccccc cccccccccccc ccccc ccc ccc ccccccccccccccccc cc\"));\n-        \n-        HelpFormatter formatter = new HelpFormatter();\n-        formatter.setAutoWidth(true);\n-        StringWriter out = new StringWriter();\n-        formatter.printHelp(\"foobar\", options);\n-        assertEquals(\"1\", \"1\");\n-    }\n-    \n-    \n     \n }", "timestamp": 1243527725, "metainfo": ""}