{"sha": "9e3f3cccb25ee2eeb91f5a7ef77a0ed7dfcc4014", "log": "Remove test method, escaping at EOF is already tested through testEscapingAtEOF()  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n         assertTokenEquals(EOF, \"e\", parser.nextToken(new Token()));\n     }\n \n-    // simple token with escaping enabled\n-    @Test\n-    public void testNextToken3BadEscaping() throws IOException {\n-        final String code = \"a,b,c\\\\\";\n-        final CSVFormat format = CSVFormat.newBuilder().withEscape('\\\\').build();\n-        assertTrue(format.isEscaping());\n-        final Lexer parser = getLexer(code, format);\n-\n-        assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));\n-        assertTokenEquals(TOKEN, \"b\", parser.nextToken(new Token()));\n-        try {\n-            final Token tkn = parser.nextToken(new Token());\n-            fail(\"Expected IOE, found \"+tkn);\n-        } catch (final IOException e) {\n-        }\n-    }\n-\n     // encapsulator tokenizer (single line)\n     @Test\n     public void testNextToken4() throws IOException {", "timestamp": 1364131832, "metainfo": ""}