{"sha": "b227c29978a2f3825812e0d5c04a6613b056c0e4", "log": "Add tests of ExtendedBufferedReader for comparison Allow tests to be configured dynamically   ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/PerformanceTest.java\n+++ b/src/test/java/org/apache/commons/csv/PerformanceTest.java\n     private static final CSVFormat format = CSVFormat.DEFAULT.withSurroundingSpacesIgnored(false);\n \n     public static void main(String [] args) throws Exception {\n+        final int argc = args.length;\n+        String tests[];\n+        if (argc > 0) {\n+            max=Integer.parseInt(args[0]);\n+        }\n+        if (argc > 1) {\n+            tests = new String[argc-1];\n+            for (int i = 1; i < argc; i++) {\n+                tests[i-1]=args[i];\n+            }\n+        } else {\n+            tests=new String[]{\"file\", \"split\", \"extb\", \"exts\", \"csv\"};\n+        }\n         for(String p : PROPS) {\n             System.out.println(p+\"=\"+System.getProperty(p));            \n         }\n         System.out.println(\"Max count: \"+max+\"\\n\");\n \n-        testReadBigFile(false);\n-        testReadBigFile(true);\n-        testParseCommonsCSV();\n+        for(String test : tests) {\n+            if (\"file\".equals(test)) {\n+                testReadBigFile(false);                \n+            } else if (\"split\".equals(test)) {\n+                testReadBigFile(true);                \n+            } else if (\"csv\".equals(test)) {\n+                testParseCommonsCSV();                \n+            } else if (\"extb\".equals(test)) {\n+                testExtendedBuffer(false);                \n+            } else if (\"exts\".equals(test)) {\n+                testExtendedBuffer(true);                \n+            }\n+        }\n     }\n \n     private static BufferedReader getReader() throws IOException {\n        return new Stats(count, fields);\n    }\n \n+   private static void testExtendedBuffer(boolean makeString) throws Exception {\n+       for (int i = 0; i < max; i++) {\n+           ExtendedBufferedReader in = new ExtendedBufferedReader(getReader());\n+           long t0 = System.currentTimeMillis();\n+           int read;\n+           int fields = 0;\n+           int lines = 0;\n+           if (makeString) {\n+               StringBuilder sb = new StringBuilder();\n+               while((read=in.read()) != -1) {\n+                   sb.append((char)read);\n+                   if (read == ',') { // count delimiters\n+                       fields++;\n+                   } else if (read == '\\n') {\n+                       lines++;\n+                       sb.toString();\n+                       sb = new StringBuilder();\n+                   }\n+               }\n+           } else {\n+               while((read=in.read()) != -1) {\n+                   if (read == ',') { // count delimiters\n+                       fields++;\n+                   } else if (read == '\\n') {\n+                       lines++;\n+                   }\n+               }               \n+           }\n+           fields += lines; // EOL is a delimiter too\n+           in.close();\n+           show(\"Extended\"+(makeString?\" toString\":\"\"), new Stats(lines, fields), t0);\n+       }\n+       show();\n+   }\n+\n    private static void testParseCommonsCSV() throws Exception {\n        for (int i = 0; i < max; i++) {\n            final BufferedReader reader = getReader();", "timestamp": 1332027282, "metainfo": ""}