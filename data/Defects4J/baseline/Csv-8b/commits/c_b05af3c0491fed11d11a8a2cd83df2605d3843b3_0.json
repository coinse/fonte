{"sha": "b05af3c0491fed11d11a8a2cd83df2605d3843b3", "log": "Add a test that makes sure ignoreSurroundingWhitespaces works for the tab character  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n         assertThat(parser.nextToken(new Token()), matches(TOKEN, \"leadingSpaces\"));\n         assertThat(parser.nextToken(new Token()), matches(TOKEN, \"trailingSpaces\"));\n         assertThat(parser.nextToken(new Token()), matches(TOKEN, \"surroundingSpaces\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n+        assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));\n+    }\n+\n+    @Test\n+    public void testSurroundingTabsAreDeleted() throws IOException {\n+        final String code = \"noTabs,\\tleadingTab,trailingTab\\t,\\tsurroundingTabs\\t,\\t\\t,,\";\n+        final Lexer parser = getLexer(code, CSVFormat.newBuilder().withIgnoreSurroundingSpaces(true).build());\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"noTabs\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"leadingTab\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"trailingTab\"));\n+        assertThat(parser.nextToken(new Token()), matches(TOKEN, \"surroundingTabs\"));\n         assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n         assertThat(parser.nextToken(new Token()), matches(TOKEN, \"\"));\n         assertThat(parser.nextToken(new Token()), matches(EOF, \"\"));", "timestamp": 1365616062, "metainfo": ""}