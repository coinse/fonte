{"sha": "db374369aeeb1f3ace8efcbd7155fcff20354504", "log": "Better performance tests. Provide a test CSV file to work with. Tests depends on Commons IO to help decompress the large-ish CSV test file.  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/perf/PerformanceTest.java\n+++ b/src/test/java/org/apache/commons/csv/perf/PerformanceTest.java\n package org.apache.commons.csv.perf;\n \n import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n import java.io.FileReader;\n import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.io.Reader;\n+import java.util.zip.GZIPInputStream;\n \n import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.BeforeClass;\n import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n  * Tests performance.\n- *\n+ * \n  * Only enable for your own development.\n  */\n+@Ignore\n public class PerformanceTest {\n \n     private final int max = 10;\n \n-    private BufferedReader getBufferedReader() throws IOException {\n-        return new BufferedReader(new FileReader(\"src/test/resources/worldcitiespop.txt\"));\n+    private static final File BIG_FILE = new File(System.getProperty(\"java.io.tmpdir\"), \"worldcitiespop.txt\");\n+\n+    @BeforeClass\n+    public static void setUpClass() throws FileNotFoundException, IOException {\n+        if (BIG_FILE.exists()) {\n+            System.out.println(String.format(\"Found test fixture %s: %,d bytes.\", BIG_FILE, BIG_FILE.length()));\n+            return;\n+        }\n+        System.out.println(\"Decompressing test fixture \" + BIG_FILE + \"...\");\n+        final InputStream input = new GZIPInputStream(new FileInputStream(\"src/test/resources/perf/worldcitiespop.txt.gz\"));\n+        final OutputStream output = new FileOutputStream(BIG_FILE);\n+        IOUtils.copy(input, output);\n+        System.out.println(String.format(\"Decompressed test fixture %s: %,d bytes.\", BIG_FILE, BIG_FILE.length()));\n     }\n \n-    private long parse(Reader in) throws IOException {\n-        CSVFormat format = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(false);\n+    private BufferedReader getBufferedReader() throws IOException {\n+        return new BufferedReader(new FileReader(BIG_FILE));\n+    }\n+\n+    private long parse(final Reader in) throws IOException {\n+        final CSVFormat format = CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(false);\n         long count = 0;\n-        for (Object record : format.parse(in)) {\n+        for (final Object record : format.parse(in)) {\n             count++;\n         }\n         return count;\n         System.out.println();\n     }\n \n-    private void println(String s) {\n+    private void println(final String s) {\n         System.out.println(s);\n     }\n \n-    private long readAll(BufferedReader in) throws IOException {\n+    private long readAll(final BufferedReader in) throws IOException {\n         long count = 0;\n         while (in.readLine() != null) {\n             count++;\n         return count;\n     }\n \n-    @Test\n-    @Ignore\n-    public void testParseBigFile() throws Exception {\n-        long t0 = System.currentTimeMillis();\n-        long count = this.parse(this.getBufferedReader());\n-        this.println(\"File parsed in \" + (System.currentTimeMillis() - t0) + \"ms with Commons CSV\" + \" \" + count\n-                + \" lines\");\n-        this.println();\n+    public long testParseBigFile() throws Exception {\n+        final long startMillis = System.currentTimeMillis();\n+        final long count = this.parse(this.getBufferedReader());\n+        final long totalMillis = System.currentTimeMillis() - startMillis;\n+        this.println(String.format(\"File parsed in %,d milliseconds with Commons CSV: %,d lines.\", totalMillis, count));\n+        return totalMillis;\n     }\n \n     @Test\n-    @Ignore\n     public void testParseBigFileRepeat() throws Exception {\n+        long bestTime = Long.MAX_VALUE;\n         for (int i = 0; i < this.max; i++) {\n-            this.testParseBigFile();\n+            bestTime = Math.min(this.testParseBigFile(), bestTime);\n         }\n-        this.println();\n+        this.println(String.format(\"Best time out of %,d is %,d milliseconds.\", this.max, bestTime));\n     }\n \n     @Test\n-    @Ignore\n     public void testReadBigFile() throws Exception {\n+        long bestTime = Long.MAX_VALUE;\n         for (int i = 0; i < this.max; i++) {\n-            BufferedReader in = this.getBufferedReader();\n-            long t0 = System.currentTimeMillis();\n-            long count = this.readAll(in);\n-            in.close();\n-            this.println(\"File read in \" + (System.currentTimeMillis() - t0) + \"ms\" + \" \" + count + \" lines\");\n+            final BufferedReader in = this.getBufferedReader();\n+            final long startMillis = System.currentTimeMillis();\n+            long count = 0;\n+            try {\n+                count = this.readAll(in);\n+            } finally {\n+                in.close();\n+            }\n+            final long totalMillis = System.currentTimeMillis() - startMillis;\n+            bestTime = Math.min(totalMillis, bestTime);\n+            this.println(String.format(\"File read in %,d milliseconds: %,d lines.\", totalMillis, count));\n         }\n-        this.println();\n+        this.println(String.format(\"Best time out of %,d is %,d milliseconds.\", this.max, bestTime));\n     }\n }", "timestamp": 1349970313, "metainfo": ""}