{"sha": "cbce4da24bbf4e52a940a4b24bb0dec096a1d16e", "log": "Add ctor to create simplest possible CSV parser Does not make sense to allow delim = EOL in ctor but disable it in withDelimiter()  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n             .withLineSeparator(LF);\n \n     /**\n+     * Creates a basic CSV format.\n+     * \n+     * @param delimiter \n+     *            the char used for value separation, must not be a line break character\n+     * @throws IllegalArgumentException if the delimiter is a line break character\n+     */\n+    public CSVFormat(char delimiter){\n+        this(delimiter,  null, null, null, null, false, false, null, null);\n+    }\n+\n+    /**\n      * Creates a customized CSV format.\n      *\n      * @param delimiter\n-     *            the char used for value separation\n+     *            the char used for value separation, must not be a line break character\n      * @param quoteChar\n      *            the char used as value encapsulation marker\n      * @param quotePolicy \n      *            the line separator to use for output\n      * @param header\n      *            the header\n+     * @throws IllegalArgumentException if the delimiter is a line break character\n      */\n     public CSVFormat(final char delimiter, final Character quoteChar, final Quote quotePolicy, final Character commentStart, final Character escape, final \n                     boolean ignoreSurroundingSpaces, final boolean ignoreEmptyLines, final String lineSeparator, \n             final String[] header) {\n+        if (isLineBreak(delimiter)) {\n+            throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n+        }\n         this.delimiter = delimiter;\n         this.quoteChar = quoteChar;\n         this.quotePolicy = quotePolicy;\n      *             thrown if the specified character is a line break\n      */\n     public CSVFormat withDelimiter(final char delimiter) {\n-        if (isLineBreak(delimiter)) {\n-            throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n-        }\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n     }\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n \n     @Test\n     public void testValidation() {\n+        try {\n+            new CSVFormat('\\n');\n+            fail();\n+        } catch (final IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            new CSVFormat('\\r');\n+            fail();\n+        } catch (final IllegalArgumentException e) {\n+            // expected\n+        }\n+\n         final CSVFormat format = CSVFormat.DEFAULT;\n \n         try {", "timestamp": 1350341400, "metainfo": ""}