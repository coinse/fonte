{"sha": "350d34d5cfe45c4e7036422e0e2e0f6039eb6f98", "log": "Rename encapsulator to quote char.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n                 // empty token return EORECORD(\"\")\n                 // noop: tkn.content.append(\"\");\n                 token.type = EORECORD;\n-            } else if (isEncapsulator(c)) {\n+            } else if (isQuoteChar(c)) {\n                 // consume encapsulated token\n                 encapsulatedTokenLexer(token);\n             } else if (isEndOfFile(c)) {\n \n             if (isEscape(c)) {\n                 tkn.content.append((char) readEscape());\n-            } else if (isEncapsulator(c)) {\n-                if (isEncapsulator(in.lookAhead())) {\n+            } else if (isQuoteChar(c)) {\n+                if (isQuoteChar(in.lookAhead())) {\n                     // double or escaped encapsulator -> add single encapsulator to token\n                     c = in.read();\n                     tkn.content.append((char) c);\n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n \n     private final char delimiter;\n     private final char escape;\n-    private final char encapsulator;\n+    private final char quoteChar;\n     private final char commmentStart;\n \n     final boolean ignoreSurroundingSpaces;\n         this.in = in;\n         this.delimiter = format.getDelimiter();\n         this.escape = mapNullToDisabled(format.getEscape());\n-        this.encapsulator = mapNullToDisabled(format.getQuoteChar());\n+        this.quoteChar = mapNullToDisabled(format.getQuoteChar());\n         this.commmentStart = mapNullToDisabled(format.getCommentStart());\n         this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\n         this.ignoreEmptyLines = format.getIgnoreEmptyLines();\n         return c == escape;\n     }\n \n-    boolean isEncapsulator(final int c) {\n-        return c == encapsulator;\n+    boolean isQuoteChar(final int c) {\n+        return c == quoteChar;\n     }\n \n     boolean isCommentStart(final int c) {\n--- a/src/test/java/org/apache/commons/csv/CSVLexer1306663.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1306663.java\n                 // empty token return EORECORD(\"\")\n                 //noop: tkn.content.append(\"\");\n                 tkn.type = EORECORD;\n-            } else if (isEncapsulator(c)) {\n+            } else if (isQuoteChar(c)) {\n                 // consume encapsulated token\n                 encapsulatedTokenLexer(tkn);\n             } else if (isEndOfFile(c)) {\n \n             if (isEscape(c)) {\n                 tkn.content.append((char) readEscape());\n-            } else if (isEncapsulator(c)) {\n-                if (isEncapsulator(in.lookAhead())) {\n+            } else if (isQuoteChar(c)) {\n+                if (isQuoteChar(in.lookAhead())) {\n                     // double or escaped encapsulator -> add single encapsulator to token\n                     c = in.read();\n                     tkn.content.append((char) c);\n--- a/src/test/java/org/apache/commons/csv/CSVLexer1306667.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1306667.java\n                 // empty token return EORECORD(\"\")\n                 //noop: tkn.content.append(\"\");\n                 tkn.type = EORECORD;\n-            } else if (isEncapsulator(c)) {\n+            } else if (isQuoteChar(c)) {\n                 // consume encapsulated token\n                 encapsulatedTokenLexer(tkn);\n             } else if (isEndOfFile(c)) {\n \n             if (isEscape(c)) {\n                 tkn.content.append((char) readEscape());\n-            } else if (isEncapsulator(c)) {\n-                if (isEncapsulator(in.lookAhead())) {\n+            } else if (isQuoteChar(c)) {\n+                if (isQuoteChar(in.lookAhead())) {\n                     // double or escaped encapsulator -> add single encapsulator to token\n                     c = in.read();\n                     tkn.content.append((char) c);\n--- a/src/test/java/org/apache/commons/csv/CSVLexer3.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer3.java\n         if (isCommentStart(intch)) {\n             return CharType.COMMENT_START;\n         }\n-        if (isEncapsulator(intch)) {\n+        if (isQuoteChar(intch)) {\n             return CharType.ENCAP;\n         }\n         if (isEscape(intch)) {", "timestamp": 1350272254, "metainfo": ""}