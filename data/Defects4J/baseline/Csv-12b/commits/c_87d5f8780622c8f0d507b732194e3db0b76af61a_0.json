{"sha": "87d5f8780622c8f0d507b732194e3db0b76af61a", "log": "CSVParser javadoc cleanup (and remove ref to M$ [sic])  ", "commit": "\n--- a/src/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/java/org/apache/commons/csv/CSVParser.java\n  */\n package org.apache.commons.csv;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.io.Reader;\n+import java.io.*;\n import java.util.ArrayList;\n \n \n /**\n- * Parses cvs files according to the specified configuration.\n+ * Parses CSV files according to the specified configuration.\n  *\n- * Because CSV appears in many different dialects the parser supports many\n- * configuration settings. One of the most popular CSV format as supported\n- * by the M$ corporation (excel-spreadsheets) are supported out-of-the-box\n- * by the corresponding strategy setter (see {@link #setExcelStrategy()}).\n+ * Because CSV appears in many different dialects, the parser supports many\n+ * configuration settings by allowing the specification of a {@link CSVStrategy}.\n  * \n- * <p>Parsing of a csv-string having ';' as separator:</p>\n+ * <p>Parsing of a csv-string having tabs as separators,\n+ * '\"' as an optional value encapsulator, and comments starting with '#':</p>\n  * <pre>\n  *  String[][] data = \n- *      (new CSVParser(new StringReader(\"a;b\\nc;d\"),';')).getAllValues();\n+ *   (new CSVParser(new StringReader(\"a\\tb\\nc\\td\"), new CSVStrategy('\\t','\"','#'))).getAllValues();\n  * </pre>\n  * \n- * <p>The API allows chained method calls, if you like this coding style:</p>\n+ * <p>Parsing of a csv-string in Excel CSV format</p>\n  * <pre>\n- *  String[][] data = (new CSVParser(new StringReader(\"a;b\\nc;d\"),';'))\n- *      .setExcelStrategy().setIgnoreEmptyLines(true).getAllValues();\n+ *  String[][] data =\n+ *   (new CSVParser(new StringReader(\"a;b\\nc;d\"), CSVStrategy.EXCEL_STRATEGY)).getAllValues();\n  * </pre>\n  * \n  * <p>", "timestamp": 1165528205, "metainfo": ""}