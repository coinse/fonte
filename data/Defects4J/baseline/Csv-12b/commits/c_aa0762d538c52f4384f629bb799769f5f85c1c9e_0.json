{"sha": "aa0762d538c52f4384f629bb799769f5f85c1c9e", "log": "Rename the IgnoreEmptyHeaders property to AllowMissingColumnNames  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     private final Character commentStart; // null if commenting is disabled\n     private final Character escape; // null if escaping is disabled\n     private final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?\n-    private final boolean ignoreEmptyHeaders;\n+    private final boolean allowMissingColumnNames;\n     private final boolean ignoreEmptyLines;\n     private final String recordSeparator; // for outputs\n     private final String nullString; // the string to be used for null values\n      * @param header\n      *            the header\n      * @param skipHeaderRecord TODO\n-     * @param ignoreEmptyHeaders TODO\n+     * @param allowMissingColumnNames TODO\n      * @throws IllegalArgumentException if the delimiter is a line break character\n      */\n     private CSVFormat(final char delimiter, final Character quoteChar,\n             final Character escape, final boolean ignoreSurroundingSpaces,\n             final boolean ignoreEmptyLines, final String recordSeparator,\n             final String nullString, final String[] header, final boolean skipHeaderRecord,\n-            final boolean ignoreEmptyHeaders) {\n+            final boolean allowMissingColumnNames) {\n         if (isLineBreak(delimiter)) {\n             throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n         }\n         this.commentStart = commentStart;\n         this.escape = escape;\n         this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\n-        this.ignoreEmptyHeaders = ignoreEmptyHeaders;\n+        this.allowMissingColumnNames = allowMissingColumnNames;\n         this.ignoreEmptyLines = ignoreEmptyLines;\n         this.recordSeparator = recordSeparator;\n         this.nullString = nullString;\n     }\n \n     /**\n-     * Specifies whether empty headers are ignored when parsing the header line.\n-     *\n-     * @return {@code true} if headers are ignored when parsing the header line, {@code false} to throw an\n+     * Specifies whether missing column names are allowed when parsing the header line.\n+     *\n+     * @return {@code true} if missing column names are allowed when parsing the header line, {@code false} to throw an\n      *         {@link IllegalArgumentException}.\n      */\n-    public boolean isIgnoringEmptyHeaders() {\n-        return ignoreEmptyHeaders;\n+    public boolean isAllowMissingColumnNames() {\n+        return allowMissingColumnNames;\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentMarker, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n+                allowMissingColumnNames);\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n+                allowMissingColumnNames);\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n+                allowMissingColumnNames);\n     }\n \n     /**\n     public CSVFormat withHeader(final String... header) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n-    }\n-\n-    /**\n-     * Sets the empty header behavior of the format.\n-     *\n-     * @param ignoreEmptyHeaders\n-     *            the empty header behavior, {@code true} to ignore empty headers in the header line,\n+                allowMissingColumnNames);\n+    }\n+\n+    /**\n+     * Sets the missing column names behavior of the format.\n+     *\n+     * @param allowMissingColumnNames\n+     *            the missing column names behavior, {@code true} to allow missing column names in the header line,\n      *            {@code false} to cause an {@link IllegalArgumentException} to be thrown.\n-     * @return A new CSVFormat that is equal to this but with the specified empty header behavior.\n-     */\n-    public CSVFormat withIgnoreEmptyHeaders(final boolean ignoreEmptyHeaders) {\n+     * @return A new CSVFormat that is equal to this but with the specified missing column names behavior.\n+     */\n+    public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                ignoreSurroundingSpaces, ignoreEmptyHeaders, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n+                allowMissingColumnNames);\n     }\n \n     /**\n     public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n+                allowMissingColumnNames);\n     }\n \n     /**\n     public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n+                allowMissingColumnNames);\n     }\n \n     /**\n     public CSVFormat withNullString(final String nullString) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n+                allowMissingColumnNames);\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n+                allowMissingColumnNames);\n     }\n \n     /**\n     public CSVFormat withQuotePolicy(final Quote quotePolicy) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n+                allowMissingColumnNames);\n     }\n \n     /**\n     public CSVFormat withRecordSeparator(final String recordSeparator) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n+                allowMissingColumnNames);\n     }\n \n     /**\n     public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n-                ignoreEmptyHeaders);\n+                allowMissingColumnNames);\n     }\n }\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collection;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.List;\n                     final String header = headerRecord[i];\n                     final boolean containsHeader = hdrMap.containsKey(header);\n                     final boolean emptyHeader = header == null || header.trim().isEmpty();\n-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.isIgnoringEmptyHeaders()))) {\n+                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.isAllowMissingColumnNames()))) {\n                         throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                 \"\\\" in \" + Arrays.toString(headerRecord));\n                     }\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.Iterator;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n     @Test\n     public void testHeadersMissing() throws Exception {\n         final Reader in = new StringReader(\"a,,c,,d\\n1,2,3,4\\nx,y,z,zz\");\n-        CSVFormat.DEFAULT.withHeader().withIgnoreEmptyHeaders(true).parse(in).iterator();\n+        CSVFormat.DEFAULT.withHeader().withAllowMissingColumnNames(true).parse(in).iterator();\n     }\n \n     @Test\n     public void testHeaderMissingWithNull() throws Exception {\n         final Reader in = new StringReader(\"a,,c,,d\\n1,2,3,4\\nx,y,z,zz\");\n-        CSVFormat.DEFAULT.withHeader().withNullString(\"\").withIgnoreEmptyHeaders(true).parse(in).iterator();\n+        CSVFormat.DEFAULT.withHeader().withNullString(\"\").withAllowMissingColumnNames(true).parse(in).iterator();\n     }\n \n     @Test", "timestamp": 1405959780, "metainfo": ""}