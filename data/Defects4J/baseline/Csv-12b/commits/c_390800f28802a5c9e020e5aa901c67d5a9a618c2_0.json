{"sha": "390800f28802a5c9e020e5aa901c67d5a9a618c2", "log": "Make org.apache.commons.csv.CSVFormat.getHeader() public and make it return a clone.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n         return escape;\n     }\n \n-    String[] getHeader() {\n-        return header;\n+    /**\n+     * Returns a copy of the header array. \n+     * \n+     * @return a copy of the header array\n+     */\n+    public String[] getHeader() {\n+        return header != null ? header.clone() : null;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      */\n     private Map<String, Integer> initializeHeader() throws IOException {\n         Map<String, Integer> hdrMap = null;\n-        if (this.format.getHeader() != null) {\n+        String[] formatHeader = this.format.getHeader();\n+        if (formatHeader != null) {\n             hdrMap = new LinkedHashMap<String, Integer>();\n \n             String[] header = null;\n-            if (this.format.getHeader().length == 0) {\n+            if (formatHeader.length == 0) {\n                 // read the header from the first line of the file\n                 final CSVRecord record = this.nextRecord();\n                 if (record != null) {\n                     header = record.values();\n                 }\n             } else {\n-                header = this.format.getHeader();\n+                header = formatHeader;\n             }\n \n             // build the name to index mappings\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n \n import org.junit.Test;\n \n     @Test\n     public void testWithHeader() throws Exception {\n         String[] header = new String[]{\"one\", \"two\", \"three\"};\n+        // withHeader() makes a copy of the header array.\n         CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(header);\n         assertArrayEquals(header, formatWithHeader.getHeader());\n         assertNotSame(header, formatWithHeader.getHeader());\n+        header[0] = \"A\";\n+        header[1] = \"B\";\n+        header[2] = \"C\";\n+        assertFalse(Arrays.equals(formatWithHeader.getHeader(), header));\n+    }\n+\n+    @Test\n+    public void testGetHeader() throws Exception {\n+        String[] header = new String[]{\"one\", \"two\", \"three\"};\n+        CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(header);\n+        // getHeader() makes a copy of the header array.\n+        String[] headerCopy = formatWithHeader.getHeader();\n+        headerCopy[0] = \"A\";\n+        headerCopy[1] = \"B\";\n+        headerCopy[2] = \"C\";\n+        assertFalse(Arrays.equals(formatWithHeader.getHeader(), headerCopy));\n+        assertNotSame(formatWithHeader.getHeader(), headerCopy);\n     }\n \n     @Test", "timestamp": 1375212760, "metainfo": ""}