{"sha": "bfc40dede6ddf4988d966b1d4b8aa711518fa7b5", "log": "Add CSV file parser test case runner  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.csv;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.FilenameFilter;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+/**\n+ * Parse tests using test files\n+ *\n+ */\n+@RunWith(Parameterized.class)\n+public class CSVFileParserTest {\n+\n+    private static final File BASE = new File(\"src/test/resources/CSVFileParser\");\n+    \n+    private final BufferedReader testData;\n+    private final String testName;\n+\n+    public CSVFileParserTest(File file) throws FileNotFoundException\n+    {\n+       this.testName = file.getName();\n+       this.testData = new BufferedReader(new FileReader(file));\n+    }\n+\n+    private String readTestData() throws IOException {\n+        String line;\n+        do {\n+            line = testData.readLine();\n+        } while (line != null && line.startsWith(\"#\"));\n+        return line;\n+    }\n+\n+    @Parameters\n+    public static Collection<Object[]> generateData()\n+    {\n+        List<Object[]> list = new ArrayList<Object[]>();\n+        \n+        final FilenameFilter filenameFilter = new FilenameFilter(){\n+            public boolean accept(@SuppressWarnings(\"unused\") File dir, String name) {\n+                return name.startsWith(\"test\") && name.endsWith(\".txt\");\n+            }\n+        };\n+        File[] files = BASE.listFiles(filenameFilter);\n+        for(File f : files){\n+            list.add(new Object[]{f});\n+        }\n+        return list;\n+    }\n+    \n+    @Test\n+    public void testCSVFile() throws Exception {\n+        String line = readTestData();\n+        assertNotNull(\"file must contain config line\", line);\n+        String[] split = line.split(\" \");\n+        assertTrue(testName+\" require 1 param\", split.length >= 1);\n+         // first line starts with csv data file name\n+        BufferedReader csvFile = new BufferedReader(new FileReader(new File(BASE, split[0])));\n+        CSVFormat fmt = CSVFormat.PRISTINE.withDelimiter(',').withEncapsulator('\"');\n+        for(int i=1; i < split.length; i++) {\n+            final String option = split[i];\n+            String[] option_parts = option.split(\"=\",2);\n+            if (\"IgnoreEmpty\".equalsIgnoreCase(option_parts[0])){\n+                fmt = fmt.withEmptyLinesIgnored(Boolean.parseBoolean(option_parts[1]));\n+            } else if (\"IgnoreSpaces\".equalsIgnoreCase(option_parts[0])) {\n+                fmt = fmt.withSurroundingSpacesIgnored(Boolean.parseBoolean(option_parts[1]));\n+            } else {\n+                fail(testName+\" unexpected option: \"+option);\n+            }\n+        }\n+        line = readTestData(); // get string version of format\n+        assertEquals(testName+\" Expected format \", line, fmt.toString());\n+        \n+        // Now parse the file and compare against the expected results\n+        for(CSVRecord rec : fmt.parse(csvFile)) {\n+            String parsed = rec.toString();\n+            int count = rec.size();\n+            assertEquals(testName, readTestData(), count+\":\"+parsed);\n+        }\n+    }\n+}", "timestamp": 1332869535, "metainfo": ""}