{"sha": "2afbbfbdc03864cc5c8fe8bbfd91e96eee313383", "log": "Removing unnecessary suite() methods, object attributes and constructors  ", "commit": "\n--- a/src/test/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/org/apache/commons/csv/CSVParserTest.java\n     }\n   }\n   \n-  /**\n-   * Constructor for JUnit.\n-   * @param name Name to be used in JUnit Test Environment\n-   */\n-  public CSVParserTest(String name) {\n-    super(name);\n-  }\n-\n-  /**\n-   * Returns a Test suite for JUnit.\n-   * @return Test suite for JUnit\n-   */\n-  public static Test suite() {\n-    return new TestSuite(CSVParserTest.class);\n-  }\n-\n-\n   // ======================================================\n   //   lexer tests\n   // ======================================================\n--- a/src/test/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/org/apache/commons/csv/CSVPrinterTest.java\n  */\n public class CSVPrinterTest extends TestCase {\n   \n-  String lineSeparator = null;\n-  \n-  /**\n-   * Constructor for CSVPrinterTest.\n-   */\n-  public CSVPrinterTest(String name) {\n-    super(name);\n-    this.lineSeparator = System.getProperty(\"line.separator\");\n-  }\n-\n-  public static Test suite() {\n-    return new TestSuite(CSVPrinterTest.class);\n-  }\n+  String lineSeparator = System.getProperty(\"line.separator\");\n \n   public void testPrinter1() {\n     StringWriter sw = new StringWriter();\n--- a/src/test/org/apache/commons/csv/CSVStrategyTest.java\n+++ b/src/test/org/apache/commons/csv/CSVStrategyTest.java\n  * has problems...).\n  */\n public class CSVStrategyTest extends TestCase {\n-  \n-  /**\n-   * Constructor for JUnit.\n-   * @param name Name to be used in JUnit Test Environment\n-   */\n-  public CSVStrategyTest(String name) {\n-    super(name);\n-  }\n-\n-  /**\n-   * Returns a Test suite for JUnit.\n-   * @return Test suite for JUnit\n-   */\n-  public static Test suite() {\n-    return new TestSuite(CSVStrategyTest.class);\n-  }\n-\n \n   // ======================================================\n   //   getters / setters\n--- a/src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n+++ b/src/test/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n  */\n public class ExtendedBufferedReaderTest extends TestCase {\n \n-  private ExtendedBufferedReader br = null;\n-  \n-  /**\n-   * Constructor for ExtendedBufferedReaderTest.\n-   * @param arg0\n-   */\n-  public ExtendedBufferedReaderTest(String arg0) {\n-    super(arg0);\n-  }\n-\n-  public static Test suite() {\n-    return new TestSuite(ExtendedBufferedReaderTest.class);\n-  }\n-  \n   // ======================================================\n   //   the test cases\n   // ======================================================\n  \n   public void testConstructors() {\n-    br = new ExtendedBufferedReader(new StringReader(\"\"));\n+    ExtendedBufferedReader br = new ExtendedBufferedReader(new StringReader(\"\"));\n     br = new ExtendedBufferedReader(new StringReader(\"\"), 10); \n   }\n   \n   public void testReadLookahead1() throws Exception {\n    \n     assertEquals(ExtendedBufferedReader.END_OF_STREAM, getEBR(\"\").read());\n-    br = getEBR(\"1\\n2\\r3\\n\");\n+    ExtendedBufferedReader br = getEBR(\"1\\n2\\r3\\n\");\n     assertEquals('1', br.lookAhead());\n     assertEquals(ExtendedBufferedReader.UNDEFINED, br.readAgain());\n     assertEquals('1', br.read());\n     char[] ref = new char[5];\n     char[] res = new char[5];  \n     \n-    br = getEBR(\"\");\n+    ExtendedBufferedReader br = getEBR(\"\");\n     assertEquals(0, br.read(res, 0, 0));\n     assertTrue(Arrays.equals(res, ref)); \n     \n   }\n   \n   public void testReadLine() throws Exception {\n-    br = getEBR(\"\");\n+    ExtendedBufferedReader br = getEBR(\"\");\n     assertTrue(br.readLine() == null);\n     \n     br = getEBR(\"\\n\");\n   \n   public void testSkip0() throws Exception {\n     \n-    br = getEBR(\"\");\n+    ExtendedBufferedReader br = getEBR(\"\");\n     assertEquals(0, br.skip(0));\n     assertEquals(0, br.skip(1));\n     \n   }\n   \n   public void testSkipUntil() throws Exception {   \n-    br = getEBR(\"\");\n+    ExtendedBufferedReader br = getEBR(\"\");\n     assertEquals(0, br.skipUntil(';'));\n     br = getEBR(\"ABCDEF,GHL,,MN\");\n     assertEquals(6, br.skipUntil(','));\n   }\n   \n   public void testReadUntil() throws Exception {\n-    br = getEBR(\"\");\n+    ExtendedBufferedReader br = getEBR(\"\");\n     assertTrue(br.readUntil(';').equals(\"\"));\n     br = getEBR(\"ABCDEF;GHL;;MN\");\n     assertTrue(br.readUntil(';').equals(\"ABCDEF\"));", "timestamp": 1204174756, "metainfo": ""}