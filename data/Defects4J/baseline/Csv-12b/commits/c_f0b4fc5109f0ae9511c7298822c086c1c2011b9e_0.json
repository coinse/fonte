{"sha": "f0b4fc5109f0ae9511c7298822c086c1c2011b9e", "log": "Fix JavaDoc problems  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     /**\n      * Standard comma separated format, as for {@link #RFC4180} but allowing empty lines.\n      *\n-     * <p>Settings are:\n+     * <p>\n+     * Settings are:\n+     * </p>\n      * <ul>\n      *   <li>withDelimiter(',')</li>\n      *   <li>withQuoteChar('\"')</li>\n      *   <li>withRecordSeparator(\"\\r\\n\")</li>\n      *   <li>withIgnoreEmptyLines(true)</li>\n      * </ul>\n-     * </p>\n      */\n     public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,\n                                                             false, true, CRLF, null, null, false, false);\n     /**\n      * Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n      *\n-     * <p>Settings are:\n+     * <p>\n+     * Settings are:\n+     * </p>\n      * <ul>\n      *   <li>withDelimiter(',')</li>\n      *   <li>withQuoteChar('\"')</li>\n      *   <li>withRecordSeparator(\"\\r\\n\")</li>\n      *   <li>withIgnoreEmptyLines(false)</li>\n      * </ul>\n-     * </p>\n      */\n     public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n \n      *\n      * <p>\n      * Settings are:\n+     * </p>\n      * <ul>\n      *   <li>withDelimiter(',')</li>\n      *   <li>withQuoteChar('\"')</li>\n      *   <li>withRecordSeparator(\"\\r\\n\")</li>\n      *   <li>withIgnoreEmptyLines(false)</li>\n      * </ul>\n-     * </p>\n      * <p>\n      * Note: this is currently the same as {@link #RFC4180}.\n      * </p>\n     /**\n      * Tab-delimited format.\n      *\n-     * <p>Settings are:\n+     * <p>\n+     * Settings are:\n+     * </p>\n      * <ul>\n      *   <li>withDelimiter('\\t')</li>\n      *   <li>withQuoteChar('\"')</li>\n      *   <li>withRecordSeparator(\"\\r\\n\")</li>\n      *   <li>withIgnoreSurroundingSpaces(true)</li>\n      * </ul>\n-     * </p>\n      */\n     public static final CSVFormat TDF =\n             DEFAULT\n      *\n      * <p>\n      * Settings are:\n+     * </p>\n      * <ul>\n      *   <li>withDelimiter('\\t')</li>\n      *   <li>withQuoteChar(null)</li>\n      *   <li>withIgnoreEmptyLines(false)</li>\n      *   <li>withEscape('\\\\')</li>\n      * </ul>\n-     * </p>\n      * @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\">\n      *      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n      */\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n      *\n      * <p>Given the following data structure:</p>\n      * <pre>\n-     * <source>\n+     * <code>\n      * List&lt;String[]&gt; data = ...\n      * data.add(new String[]{ \"A\", \"B\", \"C\" });\n      * data.add(new String[]{ \"1\", \"2\", \"3\" });\n      * data.add(new String[]{ \"A1\", \"B2\", \"C3\" });\n-     * </source>\n+     * </code>\n      * </pre>\n      *\n      * <p>Calling this method will print:</p>\n      * <pre>\n-     * <source>\n+     * <code>\n      * A, B, C\n      * 1, 2, 3\n      * A1, B2, C3\n-     * </source>\n+     * </code>\n      * </pre>\n      *\n      * @param values\n      *\n      * <p>Given the following data structure:</p>\n      * <pre>\n-     * <source>\n+     * <code>\n      * String[][] data = new String[3][]\n      * data[0] = String[]{ \"A\", \"B\", \"C\" };\n      * data[1] = new String[]{ \"1\", \"2\", \"3\" };\n      * data[2] = new String[]{ \"A1\", \"B2\", \"C3\" };\n-     * </source>\n+     * </code>\n      * </pre>\n      *\n      * <p>Calling this method will print:</p>\n      * <pre>\n-     * <source>\n+     * <code>\n      * A, B, C\n      * 1, 2, 3\n      * A1, B2, C3\n-     * </source>\n+     * </code>\n      * </pre>\n      *\n      * @param values", "timestamp": 1407662581, "metainfo": ""}