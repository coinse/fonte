{"sha": "8fdcb3da115d1dcfe27f702b90195aa44beb1834", "log": "Remove needless method  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      *             on parse error or input read-failure\n      */\n     public List<CSVRecord> getRecords() throws IOException {\n-        return getRecords(new ArrayList<CSVRecord>());\n-    }\n-\n-    /**\n-     * Parses the CSV input according to the given format and adds the content to the collection of {@link CSVRecord\n-     * CSVRecords}.\n-     *\n-     * <p>\n-     * The returned content starts at the current parse-position in the stream.\n-     * </p>\n-     *\n-     * @param records\n-     *            The collection to add to.\n-     * @param <T> the type of collection used.\n-     * @return a collection of {@link CSVRecord CSVRecords}, may be empty\n-     * @throws IOException\n-     *             on parse error or input read-failure\n-     */\n-    public <T extends Collection<CSVRecord>> T getRecords(final T records) throws IOException {\n         CSVRecord rec;\n+        List<CSVRecord> records = new ArrayList<>();\n         while ((rec = this.nextRecord()) != null) {\n             records.add(rec);\n         }\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n         parser.close();\n     }\n \n-    @Test\n-    public void testGetOneLineCustomCollection() throws IOException {\n-        final CSVParser parser = CSVParser.parse(CSV_INPUT_1, CSVFormat.DEFAULT);\n-        final CSVRecord record = parser.getRecords(new LinkedList<CSVRecord>()).getFirst();\n-        assertArrayEquals(RESULT[0], record.values());\n-        parser.close();\n-    }\n-\n     /**\n      * Tests reusing a parser to process new string records one at a time as they are being discovered. See [CSV-110].\n      *", "timestamp": 1405446126, "metainfo": ""}