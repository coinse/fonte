{"sha": "0030e1a9a23972e0c7dcc6caf21d753aa5dbf737", "log": "Add quote policy to format. (Considering renaming \"encapsulator\" to \"quoteChar\" so we have quoteChar and quotePolicy. Encapsulator makes me want to ask \"encapsulate what\"? fieldEncapsulator would be better but so verbose, quoteChar feels more to the point to me. )  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     private final boolean ignoreEmptyLines;\n     private final String lineSeparator; // for outputs\n     private final String[] header;\n+    private final Quote quotePolicy;\n \n     /**\n      * Starting format; used for creating other formats.\n      */\n-    static final CSVFormat PRISTINE = new CSVFormat(COMMA, null, null, null, false, false, null, null);\n+    static final CSVFormat PRISTINE = new CSVFormat(COMMA, null, null, null, null, false, false, null, null);\n \n     /**\n      * Standard comma separated format, as for {@link #RFC4180} but allowing blank lines.\n      *            the char used for value separation\n      * @param encapsulator\n      *            the char used as value encapsulation marker\n+     * @param quotePolicy \n+     *            the quote policy\n      * @param commentStart\n      *            the char used for comment identification\n      * @param escape\n      * @param header\n      *            the header\n      */\n-    public CSVFormat(final char delimiter, final Character encapsulator, final Character commentStart, final Character escape, final \n-            boolean ignoreSurroundingSpaces, final boolean ignoreEmptyLines, final String lineSeparator, final String[] header) {\n+    public CSVFormat(final char delimiter, final Character encapsulator, final Quote quotePolicy, final Character commentStart, final Character escape, final \n+                    boolean ignoreSurroundingSpaces, final boolean ignoreEmptyLines, final String lineSeparator, \n+            final String[] header) {\n         this.delimiter = delimiter;\n         this.encapsulator = encapsulator;\n+        this.quotePolicy = quotePolicy;\n         this.commentStart = commentStart;\n         this.escape = escape;\n         this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\n         if (isLineBreak(delimiter)) {\n             throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n         }\n-        return new CSVFormat(delimiter, encapsulator, commentStart, escape, ignoreSurroundingSpaces,\n-                ignoreEmptyLines, lineSeparator, header);\n+        return new CSVFormat(delimiter, encapsulator, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n     }\n \n     /**\n         if (isLineBreak(encapsulator)) {\n             throw new IllegalArgumentException(\"The encapsulator cannot be a line break\");\n         }\n-        return new CSVFormat(delimiter, encapsulator, commentStart, escape, ignoreSurroundingSpaces,\n-                ignoreEmptyLines, lineSeparator, header);\n+        return new CSVFormat(delimiter, encapsulator, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n     }\n \n     /**\n         if (isLineBreak(commentStart)) {\n             throw new IllegalArgumentException(\"The comment start character cannot be a line break\");\n         }\n-        return new CSVFormat(delimiter, encapsulator, commentStart, escape, ignoreSurroundingSpaces,\n-                ignoreEmptyLines, lineSeparator, header);\n+        return new CSVFormat(delimiter, encapsulator, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n     }\n \n     /**\n         if (isLineBreak(escape)) {\n             throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n         }\n-        return new CSVFormat(delimiter, encapsulator, commentStart, escape, ignoreSurroundingSpaces,\n-                ignoreEmptyLines, lineSeparator, header);\n+        return new CSVFormat(delimiter, encapsulator, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n     }\n \n     /**\n      * @return A copy of this format with the specified trimming behavior.\n      */\n     public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\n-        return new CSVFormat(delimiter, encapsulator, commentStart, escape, ignoreSurroundingSpaces,\n-                ignoreEmptyLines, lineSeparator, header);\n+        return new CSVFormat(delimiter, encapsulator, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n     }\n \n     /**\n      * @return A copy of this format with the specified empty line skipping behavior.\n      */\n     public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\n-        return new CSVFormat(delimiter, encapsulator, commentStart, escape, ignoreSurroundingSpaces,\n-                ignoreEmptyLines, lineSeparator, header);\n+        return new CSVFormat(delimiter, encapsulator, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n     }\n \n     /**\n      * @return A copy of this format using the specified output line separator\n      */\n     public CSVFormat withLineSeparator(final char lineSeparator) {\n-        return new CSVFormat(delimiter, encapsulator, commentStart, escape, ignoreSurroundingSpaces,\n-                ignoreEmptyLines, String.valueOf(lineSeparator), header);\n+        return new CSVFormat(delimiter, encapsulator, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, String.valueOf(lineSeparator), header);\n     }\n \n     /**\n      * @return A copy of this format using the specified output line separator\n      */\n     public CSVFormat withLineSeparator(final String lineSeparator) {\n-        return new CSVFormat(delimiter, encapsulator, commentStart, escape, ignoreSurroundingSpaces,\n-                ignoreEmptyLines, lineSeparator, header);\n+        return new CSVFormat(delimiter, encapsulator, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n+    }\n+\n+    /**\n+     * Returns a copy of this format using the specified output quote policy.\n+     *\n+     * @param quotePolicy\n+     *            the quote policy to be used for output.\n+     *\n+     * @return A copy of this format using the specified output line separator\n+     */\n+    public CSVFormat withQuotePolicy(final Quote quotePolicy) {\n+        return new CSVFormat(delimiter, encapsulator, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n     }\n \n     String[] getHeader() {\n      * @return A copy of this format using the specified header\n      */\n     public CSVFormat withHeader(final String... header) {\n-        return new CSVFormat(delimiter, encapsulator, commentStart, escape, ignoreSurroundingSpaces,\n-                ignoreEmptyLines, lineSeparator, header);\n+        return new CSVFormat(delimiter, encapsulator, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n     }\n \n     /**\n         return sb.toString();\n     }\n \n+    /**\n+     * Returns the quote policy output fields.\n+     *\n+     * @return the quote policy\n+     */\n+    public Quote getQuotePolicy() {\n+        return quotePolicy;\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n \n     @Test\n     public void testImmutalibity() {\n-        final CSVFormat format = new CSVFormat('!', '!', '!', '!', true, true, CRLF, null);\n+        final CSVFormat format = new CSVFormat('!', '!', Quote.MINIMAL, '!', '!', true, true, CRLF, null);\n \n         format.withDelimiter('?');\n         format.withEncapsulator('?');\n         format.withEscape('?');\n         format.withIgnoreSurroundingSpaces(false);\n         format.withIgnoreEmptyLines(false);\n+        format.withQuotePolicy(Quote.ALL);\n \n         assertEquals('!', format.getDelimiter());\n         assertEquals('!', format.getEncapsulator().charValue());\n \n         assertTrue(format.getIgnoreSurroundingSpaces());\n         assertTrue(format.getIgnoreEmptyLines());\n+\n+        assertEquals(Quote.MINIMAL, format.getQuotePolicy());\n     }\n \n     @Test\n     public void testMutators() {\n-        final CSVFormat format = new CSVFormat('!', '!', '!', '!', true, true, CRLF, null);\n+        final CSVFormat format = new CSVFormat('!', '!', null, '!', '!', true, true, CRLF, null);\n \n         assertEquals('?', format.withDelimiter('?').getDelimiter());\n         assertEquals('?', format.withEncapsulator('?').getEncapsulator().charValue());\n \n         assertFalse(format.withIgnoreSurroundingSpaces(false).getIgnoreSurroundingSpaces());\n         assertFalse(format.withIgnoreEmptyLines(false).getIgnoreEmptyLines());\n+\n+        assertEquals(Quote.ALL, format.withQuotePolicy(Quote.ALL).getQuotePolicy());\n     }\n \n     @Test", "timestamp": 1350190431, "metainfo": ""}