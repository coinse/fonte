{"sha": "9acb622adf15a97c58f26da62a23f9d2278faa4a", "log": "Breaking lines that are > 120  ", "commit": "\n--- a/src/java/org/apache/commons/csv/CSVStrategy.java\n+++ b/src/java/org/apache/commons/csv/CSVStrategy.java\n     public static char COMMENTS_DISABLED       = (char)-2;\n     public static char ESCAPE_DISABLED         = (char)-2;\n \n-    public static CSVStrategy DEFAULT_STRATEGY = new CSVStrategy(',', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true, true,  false, true);\n-    public static CSVStrategy EXCEL_STRATEGY   = new CSVStrategy(',', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, false, false, false, false);\n-    public static CSVStrategy TDF_STRATEGY     = new CSVStrategy('\t', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true, true,  false, true);\n+    public static CSVStrategy DEFAULT_STRATEGY = new CSVStrategy(',', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true, \n+                                                                 true, false, true);\n+    public static CSVStrategy EXCEL_STRATEGY   = new CSVStrategy(',', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, false, \n+                                                                 false, false, false);\n+    public static CSVStrategy TDF_STRATEGY     = new CSVStrategy('\t', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true, \n+                                                                 true, false, true);\n \n \n     public CSVStrategy(char delimiter, char encapsulator, char commentStart) {\n         boolean interpretUnicodeEscapes,\n         boolean ignoreEmptyLines)\n     {\n-        this(delimiter,encapsulator,commentStart,CSVStrategy.ESCAPE_DISABLED,ignoreLeadingWhitespace,true,interpretUnicodeEscapes,ignoreEmptyLines);\n+        this(delimiter, encapsulator, commentStart, CSVStrategy.ESCAPE_DISABLED, ignoreLeadingWhitespace, \n+             true, interpretUnicodeEscapes, ignoreEmptyLines);\n     }\n \n \n     public void setEscape(char escape) { this.escape = escape; }\n     public char getEscape() { return this.escape; }\n \n-    public void setIgnoreLeadingWhitespaces(boolean ignoreLeadingWhitespaces) { this.ignoreLeadingWhitespaces = ignoreLeadingWhitespaces; }\n+    public void setIgnoreLeadingWhitespaces(boolean ignoreLeadingWhitespaces) { \n+        this.ignoreLeadingWhitespaces = ignoreLeadingWhitespaces; \n+    }\n     public boolean getIgnoreLeadingWhitespaces() { return this.ignoreLeadingWhitespaces; }\n \n-    public void setIgnoreTrailingWhitespaces(boolean ignoreTrailingWhitespaces) { this.ignoreTrailingWhitespaces = ignoreTrailingWhitespaces; }\n+    public void setIgnoreTrailingWhitespaces(boolean ignoreTrailingWhitespaces) { \n+        this.ignoreTrailingWhitespaces = ignoreTrailingWhitespaces; \n+    }\n     public boolean getIgnoreTrailingWhitespaces() { return this.ignoreTrailingWhitespaces; }\n \n-    public void setUnicodeEscapeInterpretation(boolean interpretUnicodeEscapes) { this.interpretUnicodeEscapes = interpretUnicodeEscapes; }\n+    public void setUnicodeEscapeInterpretation(boolean interpretUnicodeEscapes) { \n+        this.interpretUnicodeEscapes = interpretUnicodeEscapes; \n+    }\n     public boolean getUnicodeEscapeInterpretation() { return this.interpretUnicodeEscapes; }\n \n     public void setIgnoreEmptyLines(boolean ignoreEmptyLines) { this.ignoreEmptyLines = ignoreEmptyLines; }", "timestamp": 1204015417, "metainfo": ""}