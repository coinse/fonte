{"sha": "3ea8118ff3793cc32fcf6d2c93d4f5eda73b374e", "log": "Move Token into separate file for more flexibility  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n \n import java.io.IOException;\n \n-import static org.apache.commons.csv.CSVLexer.Token.Type.*;\n+import static org.apache.commons.csv.Token.Type.*;\n \n class CSVLexer {\n \n-    /** length of the initial token (content-)buffer */\n-    private static final int INITIAL_TOKEN_LENGTH = 50;\n-    \n     private final StringBuilder wsBuf = new StringBuilder();\n     \n     private final CSVFormat format;\n     \n     /** The input stream */\n     private final ExtendedBufferedReader in;\n-\n-    /**\n-     * Token is an internal token representation.\n-     * <p/>\n-     * It is used as contract between the lexer and the parser.\n-     */\n-    static class Token {\n-\n-        enum Type {\n-            /** Token has no valid content, i.e. is in its initialized state. */\n-            INVALID,\n-            \n-            /** Token with content, at beginning or in the middle of a line. */\n-            TOKEN,\n-            \n-            /** Token (which can have content) when end of file is reached. */\n-            EOF,\n-            \n-            /** Token with content when end of a line is reached. */\n-            EORECORD\n-        }\n-        \n-        /** Token type */\n-        Type type = INVALID;\n-        \n-        /** The content buffer. */\n-        StringBuilder content = new StringBuilder(INITIAL_TOKEN_LENGTH);\n-        \n-        /** Token ready flag: indicates a valid token with content (ready for the parser). */\n-        boolean isReady;\n-\n-        Token reset() {\n-            content.setLength(0);\n-            type = INVALID;\n-            isReady = false;\n-            return this;\n-        }\n-    }\n \n     CSVLexer(CSVFormat format, ExtendedBufferedReader in) {\n         this.format = format;\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n import java.util.Map;\n import java.util.NoSuchElementException;\n \n-import org.apache.commons.csv.CSVLexer.Token;\n-\n-import static org.apache.commons.csv.CSVLexer.Token.Type.*;\n+\n+import static org.apache.commons.csv.Token.Type.*;\n \n /**\n  * Parses CSV files according to the specified configuration.\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n import java.io.IOException;\n import java.io.StringReader;\n \n-import org.apache.commons.csv.CSVLexer.Token;\n import org.junit.Test;\n \n-import static org.apache.commons.csv.CSVLexer.Token.Type.*;\n+import static org.apache.commons.csv.Token.Type.*;\n import static org.junit.Assert.*;\n \n public class CSVLexerTest {", "timestamp": 1332356672, "metainfo": ""}