{"sha": "76916a195884d691c57ff7ad94b5db61e10f89e3", "log": "Clean up", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n     \n     /*\n     /**********************************************************\n-    /* Upcoming parts of public API (for 2.1)\n+    /* New factory methods (since 2.1)\n     /**********************************************************\n      */\n \n     \n     /*\n     /**********************************************************\n-    /* Overridden parts of public API for generator creation\n-    /**********************************************************\n-     */\n-    \n-    /**\n-     *<p>\n-     * note: co-variant return type\n-     */\n-    @Override\n-    public ToXmlGenerator createJsonGenerator(OutputStream out, JsonEncoding enc)\n-        throws IOException\n-    {\n-        // false -> we won't manage the stream unless explicitly directed to\n-        return new ToXmlGenerator(_createContext(out, false),\n-                _generatorFeatures, _xmlGeneratorFeatures,\n-                _objectCodec, _createXmlWriter(out));\n-    }\n-\n-    @Override\n-    public ToXmlGenerator createJsonGenerator(Writer out)\n-        throws IOException\n-    {\n-        return new ToXmlGenerator(_createContext(out, false),\n-                _generatorFeatures, _xmlGeneratorFeatures,\n-                _objectCodec, _createXmlWriter(out));\n-    }\n-\n-    @Override\n-    public ToXmlGenerator createJsonGenerator(File f, JsonEncoding enc)\n-        throws IOException\n-    {\n-        OutputStream out = new FileOutputStream(f);\n-        // true -> yes, we have to manage the stream since we created it\n-        IOContext ctxt = _createContext(out, true);\n-        ctxt.setEncoding(enc);\n-        return new ToXmlGenerator(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n-                _objectCodec, _createXmlWriter(out));\n+    /* Deprecated methods (remove in 2.4?)\n+    /**********************************************************\n+     */\n+    \n+    @Deprecated\n+    @Override\n+    public ToXmlGenerator createJsonGenerator(OutputStream out, JsonEncoding enc) throws IOException {\n+        return createGenerator(out, enc);\n+    }\n+\n+    @Deprecated\n+    @Override\n+    public ToXmlGenerator createJsonGenerator(Writer out) throws IOException {\n+        return createGenerator(out);\n+    }\n+\n+    @Deprecated\n+    @Override\n+    public ToXmlGenerator createJsonGenerator(File f, JsonEncoding enc) throws IOException {\n+        return createGenerator(f, enc);\n     }\n \n     /*\n \n     @Override\n     protected FromXmlParser _createParser(InputStream in, IOContext ctxt)\n-        throws IOException, JsonParseException\n-    {\n-        return _createJsonParser(in, ctxt);\n-    }\n-\n-    @Override\n-    protected FromXmlParser _createParser(Reader r, IOContext ctxt)\n-        throws IOException, JsonParseException\n-    {\n-        return _createJsonParser(r, ctxt);\n-    }\n-\n-    @Override\n-    protected FromXmlParser _createParser(byte[] data, int offset, int len, IOContext ctxt)\n-        throws IOException, JsonParseException\n-    {\n-        return _createJsonParser(data, offset, len, ctxt);\n-    }\n-    \n-    /*\n-    /**********************************************************\n-    /* Overridden internal factory methods for parser creation\n-    /**********************************************************\n-     */\n-\n-    //protected IOContext _createContext(Object srcRef, boolean resourceManaged)\n-\n-    /**\n-     * Overridable factory method that actually instantiates desired\n-     * parser.\n-     */\n-    @Override\n-    @Deprecated\n-    protected FromXmlParser _createJsonParser(InputStream in, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n         XMLStreamReader sr;\n         return xp;\n     }\n \n-    /**\n-     * Overridable factory method that actually instantiates desired\n-     * parser.\n-     */\n-    @Override\n-    @Deprecated\n-    protected FromXmlParser _createJsonParser(Reader r, IOContext ctxt)\n+    @Override\n+    protected FromXmlParser _createParser(Reader r, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n         XMLStreamReader sr;\n         return xp;\n     }\n \n-    /**\n-     * Overridable factory method that actually instantiates desired\n-     * parser.\n-     */\n-    @Override\n-    @Deprecated\n-    protected FromXmlParser _createJsonParser(byte[] data, int offset, int len, IOContext ctxt)\n+    @Override\n+    protected FromXmlParser _createParser(byte[] data, int offset, int len, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n         XMLStreamReader sr;\n         }\n         return xp;\n     }\n+    \n+    /*\n+    /**********************************************************\n+    /* Deprecated internal factory methods for parser creation\n+    /**********************************************************\n+     */\n+\n+    //protected IOContext _createContext(Object srcRef, boolean resourceManaged)\n+\n+    /**\n+     * Overridable factory method that actually instantiates desired\n+     * parser.\n+     */\n+    @Override\n+    @Deprecated\n+    protected FromXmlParser _createJsonParser(InputStream in, IOContext ctxt)\n+        throws IOException, JsonParseException\n+    {\n+        return _createParser(in, ctxt);\n+    }\n+\n+    /**\n+     * Overridable factory method that actually instantiates desired\n+     * parser.\n+     */\n+    @Override\n+    @Deprecated\n+    protected FromXmlParser _createJsonParser(Reader r, IOContext ctxt)\n+        throws IOException, JsonParseException\n+    {\n+        return _createParser(r, ctxt);\n+    }\n+\n+    /**\n+     * Overridable factory method that actually instantiates desired\n+     * parser.\n+     */\n+    @Override\n+    @Deprecated\n+    protected FromXmlParser _createJsonParser(byte[] data, int offset, int len, IOContext ctxt)\n+        throws IOException, JsonParseException\n+    {\n+        return _createParser(data, offset, len, ctxt);\n+    }\n \n     /*\n     /**********************************************************************\n-    /* Internal factory methods\n+    /* Internal factory methods, XML-specific\n     /**********************************************************************\n      */\n \n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;\n import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;\n import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n-\n \n /**\n  * {@link JsonGenerator} that outputs JAXB-style XML output instead of JSON content.\n         if (_nextName == null) {\n             handleMissingName();\n         }\n+        boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n         try {\n             if (_nextIsAttribute) {\n-                _xmlWriter.writeDecimalAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec);\n+                if (usePlain) {\n+                    _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n+                            dec.toPlainString());\n+                } else {\n+                    _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec);\n+                }\n             } else if (checkNextIsUnwrapped()) {\n-                _xmlWriter.writeDecimal(dec);\n+                if (usePlain) {\n+                    _xmlWriter.writeCharacters(dec.toPlainString());\n+                } else {\n+                    _xmlWriter.writeDecimal(dec);\n+                }\n             } else {\n                 if (_xmlPrettyPrinter != null) {\n                 \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                 \t\t\tdec);\n                 } else {\n \t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n-\t                _xmlWriter.writeDecimal(dec);\n+\t                if (usePlain) {\n+\t                    _xmlWriter.writeDecimal(dec);\n+\t                } else {\n+                         _xmlWriter.writeCharacters(dec.toPlainString());\n+\t                }\n \t                _xmlWriter.writeEndElement();\n                 }\n             }\n         }\n         try {\n             if (_nextIsAttribute) {\n-                _xmlWriter.writeIntegerAttribute(null,\n+                _xmlWriter.writeIntegerAttribute(\"\",\n                 \t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(), value);\n             } else if (checkNextIsUnwrapped()) {\n                 _xmlWriter.writeInteger(value);\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n \n public class TestVersions extends XmlTestBase\n {\n-    /**\n-     * Not a good to do this, but has to do, for now...\n-     */\n-    private final static int MAJOR_VERSION = 2;\n-    private final static int MINOR_VERSION = 2;\n-\n-    // could inject using Maven filters as well...\n-    private final static String GROUP_ID = \"com.fasterxml.jackson.dataformat\";\n-    private final static String ARTIFACT_ID = \"jackson-dataformat-xml\";\n-    \n     public void testMapperVersions()\n     {\n         assertVersion(new XmlMapper());\n     {\n         final Version v = vers.version();\n         assertFalse(\"Should find version information (got \"+v+\")\", v.isUknownVersion());\n-        assertEquals(MAJOR_VERSION, v.getMajorVersion());\n-        assertEquals(MINOR_VERSION, v.getMinorVersion());\n-        // Check patch level initially, comment out for maint versions\n-//        assertEquals(0, v.getPatchLevel());\n-        assertEquals(GROUP_ID, v.getGroupId());\n-        assertEquals(ARTIFACT_ID, v.getArtifactId());\n-    }\n+        Version exp = PackageVersion.VERSION;\n+        assertEquals(exp.toFullString(), v.toFullString());\n+        assertEquals(exp, v);    }\n }\n ", "timestamp": 1373007889, "metainfo": ""}