{"sha": "6b13e5d6833494c76fe7e1e05183da84e8307364", "log": "Added unit test for issue #97.", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestIssue97.java\n+/*\n+ * Copyright (c) 2002-2014 Nu Echo Inc. All rights reserved.\n+ */\n+\n+package com.fasterxml.jackson.dataformat.xml.unwrapped;\n+\n+import static org.junit.Assert.*;\n+import static org.hamcrest.CoreMatchers.*;\n+\n+import java.util.*;\n+\n+import org.junit.*;\n+import org.junit.runner.*;\n+import org.junit.runners.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.*;\n+import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+/**\n+ * @author Nu Echo Inc.\n+ */\n+@RunWith(JUnit4.class)\n+public class TestIssue97 {\n+\n+    @Test\n+    public void testGood() throws Exception {\n+        XmlMapper mapper = new XmlMapper();\n+        mapper.registerSubtypes(FooGood.class);\n+\n+        String xml = \"<Foo type=\\\"good\\\" data=\\\"dummy\\\"><bar>FOOBAR</bar></Foo>\";\n+        Foo fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooGood.class));\n+\n+        xml = \"<Foo data=\\\"dummy\\\" type=\\\"good\\\" ><bar>FOOBAR</bar></Foo>\";\n+        fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooGood.class));\n+    }\n+    \n+    @Test\n+    public void testBad() throws Exception {\n+        XmlMapper mapper = new XmlMapper();\n+        mapper.registerSubtypes(FooBad.class);\n+\n+        String xml = \"<Foo type=\\\"bad\\\" data=\\\"dummy\\\"><bar><bar>FOOBAR</bar></bar></Foo>\";\n+        Foo fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooBad.class));\n+\n+        // BOOM\n+        xml = \"<Foo data=\\\"dummy\\\" type=\\\"bad\\\"><bar><bar>FOOBAR</bar></bar></Foo>\";\n+        fooRead = mapper.readValue(xml, Foo.class);\n+        assertThat(fooRead, instanceOf(FooBad.class));\n+    }\n+\n+    @JsonTypeInfo(property = \"type\", use = Id.NAME)\n+    public static abstract class Foo {\n+        private String mData;\n+\n+        public void setData(String data) {\n+            mData = data;\n+        }\n+\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String getData() {\n+            return mData;\n+        }\n+    }\n+\n+    @JsonTypeName(\"good\")\n+    public static class FooGood extends Foo {\n+        private String mBar;\n+\n+        public String getBar() {\n+            return mBar;\n+        }\n+\n+        public void setBar(String bar) {\n+            mBar = bar;\n+        }\n+    }\n+\n+    @JsonTypeName(\"bad\")\n+    public static class FooBad extends Foo {\n+        private List<String> mBar;\n+\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<String> getBar() {\n+            return mBar;\n+        }\n+\n+        public void setBar(List<String> bar) {\n+            mBar = bar;\n+        }\n+    }\n+}", "timestamp": 1391637053, "metainfo": ""}