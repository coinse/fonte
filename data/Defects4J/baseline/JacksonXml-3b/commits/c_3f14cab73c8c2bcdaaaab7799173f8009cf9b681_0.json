{"sha": "3f14cab73c8c2bcdaaaab7799173f8009cf9b681", "log": "Javadoc cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n  * Extension of {@link JacksonAnnotationIntrospector} that is needed to support\n  * additional xml-specific annotation that Jackson provides. Note, however, that\n  * there is no JAXB annotation support here; that is provided with\n- * separate introspector (see {@link org.codehaus.jackson.xc.JaxbAnnotationIntrospector}).\n+ * separate introspector (see\n+ * {@link com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector}).\n  */\n public class JacksonXmlAnnotationIntrospector\n     extends JacksonAnnotationIntrospector\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n \n /**\n  * Customized {@link ObjectMapper} that will read and write XML instead of JSON,\n- * using XML-backed {@link JsonFactory} implementation ({@link XmlFactory}).\n+ * using XML-backed {@link com.fasterxml.jackson.core.JsonFactory}\n+ * implementation ({@link XmlFactory}).\n  *<p>\n  * Mapper itself overrides some aspects of functionality to try to handle\n  * data binding aspects as similar to JAXB as possible.\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/annotation/JacksonXmlProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/annotation/JacksonXmlProperty.java\n /**\n  * Annotation that can be used to provide XML-specific configuration\n  * for properties, above and beyond what\n- * {@link com.fasterxml.core.jackson.annotation.JsonProperty} contains.\n+ * {@link com.fasterxml.jackson.annotation.JsonProperty} contains.\n  * It is an alternative to using JAXB annotations.\n  */\n @Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n \n \n /**\n- * Alternative {@link org.codehaus.jackson.map.AnnotationIntrospector} implementation that\n+ * Alternative {@link com.fasterxml.jackson.databind.AnnotationIntrospector}\n+ * implementation that\n  * builds on introspector from Jackson XC package that uses JAXB annotations,\n  * not Jackson annotations.\n  */\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n \n \n /**\n- * We need to override some parts of {@link org.codehaus.jackson.map.SerializerProvider}\n+ * We need to override some parts of\n+ * {@link com.fasterxml.jackson.databind.SerializerProvider}\n  * implementation to handle oddities of XML output, like \"extra\" root element.\n  */\n public class XmlSerializerProvider extends DefaultSerializerProvider\n {\n     /**\n      * If all we get to serialize is a null, there's no way to figure out\n-     * expected root name; so let's just default to something like \"<null>\"...\n+     * expected root name; so let's just default to something like \"&lt;null>\"...\n      */\n     protected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\");\n     ", "timestamp": 1331780769, "metainfo": ""}