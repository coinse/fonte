{"sha": "9aae3926bbb058d44689bb153a5a32a60af74dcd", "log": "Merge pull request #95 from pgelinas/custom-object-id-serialization  Enables object id serialization with type information.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n import com.fasterxml.jackson.databind.ser.BeanSerializer;\n import com.fasterxml.jackson.databind.ser.PropertyFilter;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n+import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n import com.fasterxml.jackson.dataformat.xml.util.XmlInfo;\n             TypeSerializer typeSer)\n         throws IOException, JsonGenerationException\n     {\n+        if (_objectIdWriter != null) {\n+            _serializeWithObjectId(bean, jgen, provider, typeSer);\n+            return;\n+        }\n+\n         /* Ok: let's serialize type id as attribute, but if (and only if!)\n          * we are using AS_PROPERTY\n          */\n         }\n     }\n     \n+    @Override\n+    protected void _serializeObjectId(Object bean,\n+                                      JsonGenerator jgen,\n+                                      SerializerProvider provider,\n+                                      TypeSerializer typeSer,\n+                                      WritableObjectId objectId) throws IOException, JsonProcessingException,\n+            JsonGenerationException {\n+        /* Ok: let's serialize type id as attribute, but if (and only if!)\n+         * we are using AS_PROPERTY\n+         */\n+        if (typeSer.getTypeInclusion() == JsonTypeInfo.As.PROPERTY) {\n+            ToXmlGenerator xgen = (ToXmlGenerator)jgen;\n+            xgen.setNextIsAttribute(true);\n+            super._serializeObjectId(bean, jgen, provider, typeSer, objectId);\n+            if (_attributeCount == 0) { // if no attributes, need to reset\n+                xgen.setNextIsAttribute(false);\n+            }\n+        } else {\n+            super._serializeObjectId(bean, jgen, provider, typeSer, objectId);\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Helper methods\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestPolymorphic.java\n package com.fasterxml.jackson.dataformat.xml.failing;\n \n-import java.util.*;\n-\n-import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n-import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n \n public class TestPolymorphic extends XmlTestBase\n {\n         public ClassArrayWrapper(String s) { wrapped = new SubTypeWithClassArray(s); }\n     }\n \n-    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)\n-    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n-    protected static class TypeWithClassPropertyAndObjectId {\n-        public String id;\n-\n-        public TypeWithClassPropertyAndObjectId(String id) { this.id = id; }\n-    }\n-\n-    protected static class Wrapper {\n-        public List<TypeWithClassPropertyAndObjectId> data;\n-\n-        public Wrapper(List<TypeWithClassPropertyAndObjectId> data) { this.data = data; }\n-    }\n-    \n     /*\n     /**********************************************************\n     /* Set up\n         assertEquals(SubTypeWithClassArray.class, result.wrapped.getClass());\n         assertEquals(\"Foobar\", ((SubTypeWithClassArray) result.wrapped).name);\n     }\n-\n-    /**\n-     * Test for issue 81\n-     */\n-    public void testAsPropertyWithObjectId() throws Exception\n-    {\n-        List<TypeWithClassPropertyAndObjectId> data = new ArrayList<TestPolymorphic.TypeWithClassPropertyAndObjectId>();\n-        TypeWithClassPropertyAndObjectId object = new TypeWithClassPropertyAndObjectId(\"Foobar\");\n-        data.add(object);\n-        // This will be written as an id reference instead of object; as such, no type info will be written.\n-        data.add(object);\n-        String xml = _xmlMapper.writeValueAsString(new Wrapper(data));\n-        Wrapper result = _xmlMapper.readValue(xml, Wrapper.class);\n-        assertNotNull(result);\n-        assertSame(result.data.get(0), result.data.get(1));\n-        assertEquals(\"Foobar\", result.data.get(0).id);\n-    }\n }\n    \n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/types/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/types/TestPolymorphic.java\n package com.fasterxml.jackson.dataformat.xml.types;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n \n         public SubTypeWithClassProperty(String s) { name = s; }\n     }\n     \n-    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_ARRAY)\n-    static class BaseTypeWithClassArray { }\n-\n     @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n     protected static class BaseTypeWithClassObject { }\n \n     \n         public SubTypeWithClassObject() { }\n         public SubTypeWithClassObject(String s) { name = s; }\n+    }\n+\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+    protected static class TypeWithClassPropertyAndObjectId {\n+        public String id;\n+\n+        public TypeWithClassPropertyAndObjectId() {}\n+        public TypeWithClassPropertyAndObjectId(String id) { this.id = id; }\n+    }\n+\n+    protected static class Wrapper {\n+        public List<TypeWithClassPropertyAndObjectId> data;\n+\n+        public Wrapper(){}\n+        public Wrapper(List<TypeWithClassPropertyAndObjectId> data) { this.data = data; }\n     }\n \n     /*\n         assertEquals(SubTypeWithClassObject.class, result.getClass());\n         assertEquals(\"Foobar\", ((SubTypeWithClassObject) result).name);\n     }\n+\n+    /**\n+     * Test for issue 81\n+     */\n+    public void testAsPropertyWithObjectId() throws Exception\n+    {\n+        List<TypeWithClassPropertyAndObjectId> data = new ArrayList<TestPolymorphic.TypeWithClassPropertyAndObjectId>();\n+        TypeWithClassPropertyAndObjectId object = new TypeWithClassPropertyAndObjectId(\"Foobar\");\n+        data.add(object);\n+        // This will be written as an id reference instead of object; as such, no type info will be written.\n+        data.add(object);\n+        String xml = _xmlMapper.writeValueAsString(new Wrapper(data));\n+        Wrapper result = _xmlMapper.readValue(xml, Wrapper.class);\n+        assertNotNull(result);\n+        assertSame(result.data.get(0), result.data.get(1));\n+        assertEquals(\"Foobar\", result.data.get(0).id);\n+    }\n }\n    ", "timestamp": 1390950104, "metainfo": ""}