{"sha": "7a165b54cf13016a9b7942354926ed6576085e61", "log": "Minor fixes to indentation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n      * indentation to use.\n      */\n     protected transient int _nesting = 0;\n+\n+    /**\n+     * Marker flag set on start element, and cleared if an end element\n+     * is encountered. Used for suppressing indentation to allow empty\n+     * elements.\n+     * \n+     * @since 2.3.0\n+     */\n+    protected transient boolean _justHadStartElement;\n     \n     /*\n     /**********************************************************\n             }\n             ++_nesting;\n         }\n+        _justHadStartElement = true;\n         ((ToXmlGenerator) jgen)._handleStartObject();\n     }\n \n             --_nesting;\n         }\n         // for empty elements, no need for linefeeds etc:\n-        if (nrOfEntries > 0) {\n+        if (_justHadStartElement) {\n+            _justHadStartElement = false;\n+        } else {\n             _objectIndenter.writeIndentation(jgen, _nesting);\n         }\n         ((ToXmlGenerator) jgen)._handleEndObject();\n             String nsURI, String localName) throws XMLStreamException\n     {\n         if (!_objectIndenter.isInline()) {\n-            if (_nesting > 0) {\n+            if (_justHadStartElement) {\n+                _justHadStartElement = false;\n+            } else {\n                 _objectIndenter.writeIndentation(sw, _nesting);\n             }\n             ++_nesting;\n         }\n         sw.writeStartElement(nsURI, localName);\n+        _justHadStartElement = true;        \n     }\n \n     @Override\n             --_nesting;\n         }\n         // for empty elements, no need for linefeeds etc:\n-        if (nrOfEntries > 0) {\n+        if (_justHadStartElement) {\n+            _justHadStartElement = false;\n+        } else {\n             _objectIndenter.writeIndentation(sw, _nesting);\n         }\n         sw.writeEndElement();\n         sw.writeStartElement(nsURI, localName);\n         sw.writeCharacters(text);\n         sw.writeEndElement();\n+        _justHadStartElement = false;\n     }\n \n     @Override\n         sw.writeStartElement(nsURI, localName);\n         sw.writeCharacters(buffer, offset, len);\n         sw.writeEndElement();\n+        _justHadStartElement = false;\n     }\n \t\n     @Override\n         sw.writeStartElement(nsURI, localName);\n         sw.writeBoolean(value);\n         sw.writeEndElement();\n+        _justHadStartElement = false;\n     }\n     \n     @Override\n         sw.writeStartElement(nsURI, localName);\n         sw.writeInt(value);\n         sw.writeEndElement();\n+        _justHadStartElement = false;\n     }\n \n     @Override\n         sw.writeStartElement(nsURI, localName);\n         sw.writeLong(value);\n         sw.writeEndElement();\n+        _justHadStartElement = false;\n     }\n \n     @Override\n         sw.writeStartElement(nsURI, localName);\n         sw.writeDouble(value);\n         sw.writeEndElement();\n+        _justHadStartElement = false;\n     }\n \n     @Override\n         sw.writeStartElement(nsURI, localName);\n         sw.writeFloat(value);\n         sw.writeEndElement();\n+        _justHadStartElement = false;\n     }\n \t\n     @Override\n         sw.writeStartElement(nsURI, localName);\n         sw.writeInteger(value);\n         sw.writeEndElement();\n+        _justHadStartElement = false;\n     }\n \n     @Override\n         sw.writeStartElement(nsURI, localName);\n         sw.writeDecimal(value);\n         sw.writeEndElement();\n+        _justHadStartElement = false;\n     }\n \n     @Override\n         sw.writeStartElement(nsURI, localName);\n         sw.writeBinary(data, offset, len);\n         sw.writeEndElement();\n+        _justHadStartElement = false;\n     }\n \n     @Override\n             _objectIndenter.writeIndentation(sw, _nesting);\n         }\n         sw.writeEmptyElement(nsURI, localName);\n+        _justHadStartElement = false;\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestIndentation.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestIndentation.java\n \n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n \n         public int value = 14;\n     }\n-    \n+\n+    public class PojoFor123\n+    {\n+        @JacksonXmlProperty(isAttribute = true)\n+        public String name;\n+\n+        @JsonInclude(JsonInclude.Include.NON_EMPTY) \n+        public String property;\n+        \n+        public PojoFor123(String name) {\n+            this.name = name;       \n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Set up\n         String xml2 = _xmlMapper.writeValueAsString(new AttrBean2());\n         assertEquals(\"<AttrBean2 count=\\\"3\\\">\\n  <value>14</value>\\n</AttrBean2>\", xml2);\n     }\n+\n+    public void testEmptyElem() throws Exception\n+    {\n+        PojoFor123 simple = new PojoFor123(\"foobar\");\n+        String xml = _xmlMapper.writeValueAsString(simple);\n+        assertEquals(\"<PojoFor123 name=\\\"foobar\\\"/>\", xml);\n+    }\n+\n }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestTextValue.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestTextValue.java\n         assertEquals(\"<Simple a=\\\"13\\\">something</Simple>\", xml);\n         // [Issue#56]: should work with indentation as well\n         xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(new Simple());\n-        // not optimal, but has to do\n-        assertEquals(\"<Simple a=\\\"13\\\">something\\n</Simple>\", xml);\n+        assertEquals(\"<Simple a=\\\"13\\\">something</Simple>\", xml);\n     }\n \n     public void testDeserializeAsText() throws IOException", "timestamp": 1374200456, "metainfo": ""}