{"sha": "b062b0ed00df00a3f01e53866edfaecf487065ef", "log": "Fixing [Issue#44]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyFilter;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.BeanSerializer;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n import com.fasterxml.jackson.dataformat.xml.util.XmlInfo;\n-\n \n /**\n  * Specific sub-class of {@link BeanSerializer} needed to take care\n     }\n \n     @Override\n+    protected void serializeFieldsFiltered(Object bean, JsonGenerator jgen0,\n+            SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        final ToXmlGenerator xgen = (ToXmlGenerator) jgen0;\n+        \n+        final BeanPropertyWriter[] props;\n+        if (_filteredProps != null && provider.getSerializationView() != null) {\n+            props = _filteredProps;\n+        } else {\n+            props = _props;\n+        }\n+        final BeanPropertyFilter filter = findFilter(provider);\n+        // better also allow missing filter actually..\n+        if (filter == null) {\n+            serializeFields(bean, jgen0, provider);\n+            return;\n+        }\n+\n+        final int attrCount = _attributeCount;\n+        if (attrCount > 0) {\n+            xgen.setNextIsAttribute(true);\n+        }\n+        final int textIndex = _textPropertyIndex;\n+        final QName[] xmlNames = _xmlNames;\n+\n+        int i = 0;\n+        try {\n+            for (final int len = props.length; i < len; ++i) {\n+                if (i == attrCount) {\n+                    xgen.setNextIsAttribute(false);\n+                }\n+                // also: if this is property to write as text (\"unwrap\"), need to:\n+                if (i == textIndex) {\n+                    xgen.setNextIsUnwrapped(true);\n+                }\n+                xgen.setNextName(xmlNames[i]);\n+                BeanPropertyWriter prop = props[i];\n+                if (prop != null) { // can have nulls in filtered list\n+                    filter.serializeAsField(bean, xgen, provider, prop);\n+                }\n+            }\n+            if (_anyGetterWriter != null) {\n+                _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n+            }\n+        } catch (Exception e) {\n+            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n+            wrapAndThrow(provider, e, bean, name);\n+        } catch (StackOverflowError e) {\n+            JsonMappingException mapE = new JsonMappingException(\"Infinite recursion (StackOverflowError)\", e);\n+            String name = (i == props.length) ? \"[anySetter]\" : props[i].getName();\n+            mapE.prependPath(new JsonMappingException.Reference(bean, name));\n+            throw mapE;\n+        }\n+    }\n+    \n+    @Override\n     public void serializeWithType(Object bean, JsonGenerator jgen, SerializerProvider provider,\n             TypeSerializer typeSer)\n         throws IOException, JsonGenerationException\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestViews.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestViews.java\n package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.io.IOException;\n \n import com.fasterxml.jackson.annotation.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.ser.FilterProvider;\n+import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;\n+import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n \n /*\n  * Tests for ('JSON') Views, other filtering.\n  */\n public class TestViews extends XmlTestBase\n {\n-    /*\n-    /**********************************************************\n-    /* Helper types\n-    /**********************************************************\n-     */\n-\n     static class RestrictedView { };\n \n     static class Foo\n     @JsonInclude(JsonInclude.Include.NON_NULL)\n     static class NonNullBean\n     {\n-    \tpublic String nullName = null;\n-    \tpublic String name = \"Bob\";\n+        public String nullName = null;\n+        public String name = \"Bob\";\n+    }\n+\n+    @JsonFilter(\"filter44\")\n+    public class Issue44Bean {\n+        @JacksonXmlProperty(isAttribute=true)\n+        protected String first = \"abc\";\n+\n+        public int second = 13;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Set up\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper _xmlMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _xmlMapper = new XmlMapper();\n     }\n     \n     /*\n \n     public void testNullSuppression() throws Exception\n     {\n-        ObjectMapper xmlMapper = new XmlMapper();\n-        String xml = xmlMapper.writeValueAsString(new NonNullBean());\n+        String xml = _xmlMapper.writeValueAsString(new NonNullBean());\n         assertEquals(\"<NonNullBean><name>Bob</name></NonNullBean>\", xml);\n     }\n+\n+    public void testIssue44() throws IOException\n+    {\n+        String exp = \"<Issue44Bean first=\\\"abc\\\"><second>13</second></Issue44Bean>\";\n+        Issue44Bean bean = new Issue44Bean();\n+\n+        FilterProvider prov = new SimpleFilterProvider().addFilter(\"filter44\",\n+                SimpleBeanPropertyFilter.serializeAllExcept(\"filterMe\"));\n+        ObjectWriter writer = _xmlMapper.writer(prov);\n+\n+        // as well as with proper filter\n+        assertEquals(exp, writer.writeValueAsString(bean));\n+    }\n }", "timestamp": 1353548501, "metainfo": ""}