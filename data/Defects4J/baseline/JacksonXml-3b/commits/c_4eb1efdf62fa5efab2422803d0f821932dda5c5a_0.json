{"sha": "4eb1efdf62fa5efab2422803d0f821932dda5c5a", "log": "Fix compilation problems", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanPropertyWriter.java\n     public XmlBeanPropertyWriter(BeanPropertyWriter wrapped, QName wrapperName, QName wrappedName,\n             JsonSerializer<Object> serializer)\n     {\n-        super(wrapped, serializer);\n+        super(wrapped);\n         _wrapperName = wrapperName;\n         _wrappedName = wrappedName;\n-    }\n-    \n-    @Override\n-    public BeanPropertyWriter withSerializer(JsonSerializer<Object> ser)\n-    {\n-        // sanity check to ensure sub-classes override...\n-        if (getClass() != XmlBeanPropertyWriter.class) {\n-            throw new IllegalStateException(\"Sub-class does not override 'withSerializer()'; needs to!\");\n-        }\n-        return new XmlBeanPropertyWriter(this, _wrapperName, _wrappedName, ser);\n+\n+        assignSerializer(serializer);\n     }\n \n     /*\n          * it does; can change later if not.\n          */\n         if (value == null) {\n-            if (!_suppressNulls) {\n+            if (_nullSerializer != null) {\n                 jgen.writeFieldName(_name);\n-                prov.defaultSerializeNull(jgen);\n+                _nullSerializer.serialize(null, jgen, prov);\n             }\n             return;\n         }\n-        // For non-nulls, first: simple check for direct cycles\n+\n+        // then find serializer to use\n+        JsonSerializer<Object> ser = _serializer;\n+        if (ser == null) {\n+            Class<?> cls = value.getClass();\n+            PropertySerializerMap map = _dynamicSerializers;\n+            ser = map.serializerFor(cls);\n+            if (ser == null) {\n+                ser = _findAndAddDynamic(map, cls, prov);\n+            }\n+        }\n+        // and then see if we must suppress certain values (default, empty)\n+        if (_suppressableValue != null) {\n+            if (MARKER_FOR_EMPTY == _suppressableValue) {\n+                if (ser.isEmpty(value)) {\n+                    return;\n+                }\n+            } else if (_suppressableValue.equals(value)) {\n+                return;\n+            }\n+        }\n+        // For non-nulls: simple check for direct cycles\n         if (value == bean) {\n-            _reportSelfReference(bean);\n-        }\n-        if (_suppressableValue != null && _suppressableValue.equals(value)) {\n-            return;\n+            _handleSelfReference(bean, ser);\n         }\n \n         // Ok then; addition we want to do is to add wrapper element, and that's what happens here\n         ToXmlGenerator xmlGen = (ToXmlGenerator) jgen;\n         xmlGen.startWrappedValue(_wrapperName, _wrappedName);\n         \n-        JsonSerializer<Object> ser = _serializer;\n         if (ser == null) {\n             Class<?> cls = value.getClass();\n             PropertySerializerMap map = _dynamicSerializers;\n--- a/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializer.java\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n import com.fasterxml.jackson.databind.ser.BeanSerializer;\n+import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n import com.fasterxml.jackson.xml.util.XmlInfo;\n \n         _attributeCount = attrCount;\n     }\n     \n+    /*\n     protected XmlBeanSerializer(XmlBeanSerializer src, BeanPropertyWriter[] filtered)\n     {\n         super(src._handledType, src._props, filtered, src._anyGetterWriter, src._propertyFilterId);\n         _attributeCount = src._attributeCount;\n         _xmlNames = src._xmlNames;\n     }\n-\n+    */\n+\n+    protected XmlBeanSerializer(XmlBeanSerializer src, ObjectIdWriter objectIdWriter)\n+    {\n+        super(src, objectIdWriter);\n+        _attributeCount = src._attributeCount;\n+        _xmlNames = src._xmlNames;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle: factory methods, fluent factories\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonSerializer<Object> unwrappingSerializer(NameTransformer unwrapper) {\n+        // 19-Feb-2012, tatu: Should support unwrapping for XML too... but not yet done\n+//        return new UnwrappingBeanSerializer(this, unwrapper);\n+        throw new UnsupportedOperationException(\"Unwrapping serialization not yet supported for XML\");\n+    }\n+\n+    @Override\n+    protected BeanSerializer withObjectIdWriter(ObjectIdWriter objectIdWriter) {\n+        return new XmlBeanSerializer(this, objectIdWriter);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Overridden serialization methods\n--- a/src/main/java/com/fasterxml/jackson/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/ser/XmlSerializerProvider.java\n \n import java.io.IOException;\n import javax.xml.namespace.QName;\n-\n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.JavaType;\n         _rootNameLookup = rootNames;\n     }\n \n-    public XmlSerializerProvider(SerializationConfig config, XmlSerializerProvider src,\n-            SerializerFactory f)\n+    public XmlSerializerProvider(XmlSerializerProvider src,\n+            SerializationConfig config, SerializerFactory f)\n     {\n-        super(config, src, f);\n+        super(src, config, f);\n         _rootNameLookup  = src._rootNameLookup;\n     }\n     \n      */\n \n     @Override\n-    public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf)\n+    public DefaultSerializerProvider createInstance(SerializationConfig config,\n+            SerializerFactory jsf)\n     {\n-        return new XmlSerializerProvider(config, this, jsf);\n+        return new XmlSerializerProvider(this, config, jsf);\n     }\n     \n     @Override\n-    protected  void _serializeValue(JsonGenerator jgen, Object value)\n+    public void serializeValue(JsonGenerator jgen, Object value)\n         throws IOException, JsonProcessingException\n     {\n         QName rootName = (value == null) ? ROOT_NAME_FOR_NULL\n         ToXmlGenerator xgen = (ToXmlGenerator) jgen;\n         xgen.setNextName(rootName);\n         xgen.initGenerator();\n-        super._serializeValue(jgen, value);\n+        super.serializeValue(jgen, value);\n     }\n \n     @Override\n-    protected  void _serializeValue(JsonGenerator jgen, Object value, JavaType rootType)\n+    public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType)\n         throws IOException, JsonProcessingException\n     {\n         QName rootName = _rootNameLookup.findRootName(rootType, _config);\n         ToXmlGenerator xgen = (ToXmlGenerator) jgen;\n         xgen.setNextName(rootName);\n         xgen.initGenerator();\n-        super._serializeValue(jgen, value, rootType);\n+        super.serializeValue(jgen, value, rootType);\n     }\n }", "timestamp": 1329717184, "metainfo": ""}