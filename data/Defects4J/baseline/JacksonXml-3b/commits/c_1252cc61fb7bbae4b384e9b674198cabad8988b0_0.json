{"sha": "1252cc61fb7bbae4b384e9b674198cabad8988b0", "log": "Further work on handling convertValue() properly.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/WrapperHandlingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/WrapperHandlingDeserializer.java\n     protected void _configureParser(JsonParser jp)\n         throws IOException, JsonProcessingException\n     {\n-        ((FromXmlParser) jp).addVirtualWrapping(_namesToWrap);\n+        /* 19-Aug-2013, tatu: Although we should not usually get called with\n+         *   parser of other types, there are some cases where this may happen:\n+         *   specifically, during structural value conversions.\n+         */\n+        if (jp instanceof FromXmlParser) {\n+            ((FromXmlParser) jp).addVirtualWrapping(_namesToWrap);\n+        }\n     }\n     \n     protected BeanDeserializerBase _verifyDeserType(JsonDeserializer<?> deser)\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanPropertyWriter.java\n         }\n \n         // Ok then; addition we want to do is to add wrapper element, and that's what happens here\n-        ToXmlGenerator xmlGen = (ToXmlGenerator) jgen;\n-        xmlGen.startWrappedValue(_wrapperQName, _wrappedQName);\n+        // 19-Aug-2013, tatu: ... except for those nasty 'convertValue()' calls...\n+        @SuppressWarnings(\"resource\")\n+        final ToXmlGenerator xmlGen = (jgen instanceof ToXmlGenerator) ? (ToXmlGenerator) jgen : null;\n+        if (xmlGen != null) {\n+            xmlGen.startWrappedValue(_wrapperQName, _wrappedQName);\n+        }\n         jgen.writeFieldName(_name);\n         if (_typeSerializer == null) {\n             ser.serialize(value, jgen, prov);\n         } else {\n             ser.serializeWithType(value, jgen, prov, _typeSerializer);\n         }\n-        xmlGen.finishWrappedValue(_wrapperQName, _wrappedQName);\n+        if (xmlGen != null) {\n+            xmlGen.finishWrappedValue(_wrapperQName, _wrappedQName);\n+        }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n     protected void serializeFields(Object bean, JsonGenerator jgen0, SerializerProvider provider)\n         throws IOException, JsonGenerationException\n     {\n+        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n+        if (!(jgen0 instanceof ToXmlGenerator)) {\n+            super.serializeFields(bean, jgen0, provider);\n+            return;\n+        }\n+        \n         final ToXmlGenerator xgen = (ToXmlGenerator) jgen0;\n         final BeanPropertyWriter[] props;\n         // !!! TODO: change to use non-deprecated version in 2.3\n         }\n     }\n \n-    @SuppressWarnings(\"deprecation\")\n     @Override\n     protected void serializeFieldsFiltered(Object bean, JsonGenerator jgen0,\n             SerializerProvider provider)\n         throws IOException, JsonGenerationException\n     {\n+        // 19-Aug-2013, tatu: During 'convertValue()', need to skip\n+        if (!(jgen0 instanceof ToXmlGenerator)) {\n+            super.serializeFieldsFiltered(bean, jgen0, provider);\n+            return;\n+        }\n+        \n         final ToXmlGenerator xgen = (ToXmlGenerator) jgen0;\n         \n         final BeanPropertyWriter[] props;\n         // !!! TODO: change to use non-deprecated version in 2.3\n-        if (_filteredProps != null && provider.getSerializationView() != null) {\n+        if (_filteredProps != null && provider.getActiveView() != null) {\n             props = _filteredProps;\n         } else {\n             props = _props;\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java\n     public void serializeValue(JsonGenerator jgen, Object value)\n         throws IOException, JsonProcessingException\n     {\n-        final ToXmlGenerator xgen = _asXmlGenerator(jgen);\n         if (value == null) {\n-            _serializeXmlNull(xgen);\n+            _serializeXmlNull(jgen);\n             return;\n         }\n         final Class<?> cls = value.getClass();\n         final boolean asArray;\n+        final ToXmlGenerator xgen = _asXmlGenerator(jgen);\n         if (xgen == null) { // called by convertValue()\n             asArray = false;\n         } else {\n             _initWithRootName(xgen, rootName);\n             asArray = TypeUtil.isIndexedType(cls);\n             if (asArray) {\n-                _startRootArray(jgen, rootName);\n+                _startRootArray(xgen, rootName);\n             }\n         }\n         \n     public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType)\n         throws IOException, JsonProcessingException\n     {\n+        if (value == null) {\n+            _serializeXmlNull(jgen);\n+            return;\n+        }\n+        final boolean asArray;\n         final ToXmlGenerator xgen = _asXmlGenerator(jgen);\n-        if (value == null) {\n-            _serializeXmlNull(xgen);\n-            return;\n-        }\n-        final boolean asArray;\n         if (xgen == null) { // called by convertValue()\n             asArray = false;\n         } else {\n             _initWithRootName(xgen, rootName);\n             asArray = TypeUtil.isIndexedType(rootType);\n             if (asArray) {\n-                _startRootArray(jgen, rootName);\n+                _startRootArray(xgen, rootName);\n             }\n         }\n \n             JsonSerializer<Object> ser)\n         throws IOException, JsonGenerationException\n     {\n+        if (value == null) {\n+            _serializeXmlNull(jgen);\n+            return;\n+        }\n+        final boolean asArray;\n         final ToXmlGenerator xgen = _asXmlGenerator(jgen);\n-        if (value == null) {\n-            _serializeXmlNull(xgen);\n-            return;\n-        }\n-        final boolean asArray;\n         if (xgen == null) { // called by convertValue()\n             asArray = false;\n         } else {\n             _initWithRootName(xgen, rootName);\n             asArray = TypeUtil.isIndexedType(rootType);\n             if (asArray) {\n-                _startRootArray(jgen, rootName);\n+                _startRootArray(xgen, rootName);\n             }\n         }\n         if (ser == null) {\n         }\n     }\n \n-    protected void _startRootArray(JsonGenerator jgen, QName rootName)\n+    protected void _serializeXmlNull(JsonGenerator jgen)\n+            throws IOException, JsonProcessingException\n+    {\n+        if (jgen instanceof ToXmlGenerator)\n+        _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);\n+        super.serializeValue(jgen, null);\n+    }\n+    \n+    protected void _startRootArray(ToXmlGenerator xgen, QName rootName)\n         throws IOException, JsonProcessingException\n     {\n-        jgen.writeStartObject();\n+        xgen.writeStartObject();\n         // Could repeat root name, but what's the point? How to customize?\n-        ((ToXmlGenerator) jgen).writeFieldName(\"item\");\n+        xgen.writeFieldName(\"item\");\n     }    \n-\n-    protected void _serializeXmlNull(ToXmlGenerator jgen)\n-            throws IOException, JsonProcessingException\n-    {\n-        _initWithRootName(jgen, ROOT_NAME_FOR_NULL);\n-        super.serializeValue(jgen, null);\n-    }\n \n     protected void _initWithRootName(ToXmlGenerator xgen, QName rootName)\n             throws IOException, JsonProcessingException\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/convert/TestArrayConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/convert/TestArrayConversions.java\n  */\n public class TestArrayConversions extends XmlTestBase\n {\n+    static class IntListWrapper {\n+        public List<Integer> values;\n+    }\n+\n+    static class IntArrayWrapper {\n+        public int[] values;\n+\n+        public IntArrayWrapper() { }\n+        public IntArrayWrapper(int[] v) { values = v; }\n+    }\n+    \n+    /*\n+    /********************************************************\n+    /* Test methods\n+    /********************************************************\n+     */\n+\n     public void testNullXform() throws Exception {\n         _testNullXform(xmlMapper(true));\n         _testNullXform(xmlMapper(false));\n         List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() {});\n         assertEquals(expNums, actNums);        \n     }\n+\n+    public void testListToIntArray() throws Exception\n+    {\n+        _testListToIntArray(true);\n+        _testListToIntArray(false);\n+    }\n+\n+    private void _testListToIntArray(boolean wrap) throws Exception\n+    {\n+        final XmlMapper mapper = xmlMapper(wrap);\n+        List<Integer> in = new ArrayList<Integer>();\n+        in.add(1);\n+        in.add(2);\n+        in.add(3);\n+        int[] out = mapper.convertValue(in, int[].class);\n+        assertEquals(3, out.length);\n+        for (int i = 0; i < out.length; ++i) {\n+            assertEquals(i+1, out[i]);\n+        }\n+    }\n+    \n+    public void testListAsProperty() throws Exception\n+    {\n+        _testListAsProperty(true);\n+        _testListAsProperty(false);\n+    }\n+\n+    private void _testListAsProperty(boolean wrap) throws Exception\n+    {\n+        final XmlMapper mapper = xmlMapper(wrap);\n+        IntListWrapper mid = mapper.convertValue(new IntArrayWrapper(new int[] { 1, 2, 3}),\n+                IntListWrapper.class);\n+        assertNotNull(mid);\n+        assertNotNull(mid.values);\n+        assertEquals(3, mid.values.size());\n+\n+        IntArrayWrapper output = mapper.convertValue(mid, IntArrayWrapper.class);\n+        assertEquals(3, output.values.length);\n+        assertEquals(3, output.values[2]);\n+    }\n     \n     /*\n     /********************************************************", "timestamp": 1376975290, "metainfo": ""}