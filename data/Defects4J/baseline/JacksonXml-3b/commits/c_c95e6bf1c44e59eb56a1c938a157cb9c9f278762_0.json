{"sha": "c95e6bf1c44e59eb56a1c938a157cb9c9f278762", "log": "Changed code to use the new 'findWrapperName()', to simplify handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n package com.fasterxml.jackson.dataformat.xml;\n-\n-import javax.xml.namespace.QName;\n \n import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.introspect.*;\n      */\n \n     @Override\n+    public PropertyName findWrapperName(Annotated ann)\n+    {\n+        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n+        if (w != null) {\n+            return PropertyName.construct(w.localName(), w.namespace());\n+        }\n+        return null;\n+    }\n+    \n+    @Override\n     public PropertyName findRootName(AnnotatedClass ac)\n     {\n         JacksonXmlRootElement root = ac.getAnnotation(JacksonXmlRootElement.class);\n         }\n         return super.findRootName(ac);\n     }\n-\n+    \n     /*\n     /**********************************************************************\n     /* XmlAnnotationIntrospector, findXxx\n         JacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\n         if (prop != null) {\n             return prop.namespace();\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public QName findWrapperElement(Annotated ann)\n-    {\n-        JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n-        if (w != null) {\n-            return new QName(w.namespace(), w.localName());\n         }\n         return null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n package com.fasterxml.jackson.dataformat.xml;\n-\n-import javax.xml.namespace.QName;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n      */\n     public String findNamespace(Annotated ann);\n \n-    /**\n-     * Method used to check if specified property has annotation that indicates\n-     * that it should be wrapped in an element; and if so, name to use.\n-     * Note: local name of \"\" is used to indicate that name should default\n-     * to using name (local name and namespace) of property itself.\n-     */\n-    public QName findWrapperElement(Annotated ann);\n+    // Method used to check if specified property has annotation that indicates\n+    // that it should be wrapped in an element; and if so, name to use.\n+    // Note: local name of \"\" is used to indicate that name should default\n+    // to using name (local name and namespace) of property itself.\n+    //\n+    // Removed in 2.1\n+//    public QName findWrapperElement(Annotated ann);\n \n     // Method used to find out name to use for the outermost (root) XML element\n     // name when serializing (since there is no property that would define it);\n             return value;\n         }\n \n+        // These were removed in 2.1\n+        /*\n         @Override\n         public QName findWrapperElement(Annotated ann)\n         {\n             return value;\n         }\n \n-        /*\n         @Override\n         public QName findRootElement(Annotated ann)\n         {\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n package com.fasterxml.jackson.dataformat.xml.deser;\n \n import java.util.*;\n-\n-import javax.xml.namespace.QName;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.*;\n                 continue;\n             }\n             // first: do we need to handle wrapping (for Lists)?\n-            QName wrapperName = AnnotationUtil.findWrapperName(intr, acc);\n+            PropertyName wrapperName = intr.findWrapperName(acc);\n             if (wrapperName != null) {\n-                String localName = wrapperName.getLocalPart();\n+                String localName = wrapperName.getSimpleName();\n                 if ((localName != null && localName.length() > 0)\n                         && !localName.equals(prop.getName())) {\n                     // make copy-on-write as necessary\n                     continue;\n                 }\n             }\n-            // Unwrapped. Ok -- requires special handling\n-            // !!! TODO\n+            // otherwise unwrapped; needs handling but later on\n         }\n         return propDefs;\n     }\n \n+    @Override\n+    public BeanDeserializerBuilder updateBuilder(DeserializationConfig config,\n+            BeanDescription beanDesc, BeanDeserializerBuilder builder)\n+    {\n+        Iterator<SettableBeanProperty> it = builder.getProperties();\n+        while (it.hasNext()) {\n+            SettableBeanProperty prop = it.next();\n+            System.out.println(\"Builder, prop '\"+prop.getName()+\"', type \"+prop.getType()+\", hasSer \"+prop.hasValueDeserializer());\n+        }\n+        return builder;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n \n import javax.xml.bind.annotation.XmlAttribute;\n import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlValue;\n-import javax.xml.namespace.QName;\n \n-import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector;\n \n     public XmlJaxbAnnotationIntrospector(TypeFactory typeFactory) {\n         super(typeFactory);\n-    }\n-\n-    /*\n-    /**********************************************************************\n-    /* Basic AnnotationIntrospector overrides\n-    /**********************************************************************\n-     */\n-    \n-    @Override\n-    public PropertyName findRootName(AnnotatedClass ac)\n-    {\n-        XmlRootElement root = findAnnotation(XmlRootElement.class, ac, false, false, false);\n-        if (root != null) {\n-            return PropertyName.construct(handleJaxbDefault(root.name()),\n-                    handleJaxbDefault(root.namespace()));\n-        }\n-        return null;\n     }\n     \n     /*\n         }\n         return ns;\n     }\n-    \n-    @Override\n-    public QName findWrapperElement(Annotated ann)\n-    {\n-        XmlElementWrapper w = findAnnotation(XmlElementWrapper.class, ann, false, false, false);\n-        if (w != null) {\n-            return new QName(handleJaxbDefault(w.namespace()), handleJaxbDefault(w.name()));\n-        }\n-        return null;\n-    }\n \n     /**\n      * Here we assume fairly simple logic; if there is <code>XmlAttribute</code> to be found,\n         return findAnnotation(XmlRootElement.class, ac, true, false, true);\n     }\n \n+    /*\n     private String handleJaxbDefault(String value)\n     {\n         return MARKER_FOR_DEFAULT.equals(value) ? \"\" : value;\n     }\n+    */\n \n     /* NOTE: copied verbatim from Jackson 1.9, since its visibility was\n      * lowered (accidentally...)\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanPropertyWriter.java\n     /**********************************************************\n      */\n \n-    public XmlBeanPropertyWriter(BeanPropertyWriter wrapped, QName wrapperName, QName wrappedName)\n-    {\n-        super(wrapped);\n-        _wrapperName = wrapperName;\n-        _wrappedName = wrappedName;\n+    public XmlBeanPropertyWriter(BeanPropertyWriter wrapped,\n+            PropertyName wrapperName, PropertyName wrappedName) {\n+        this(wrapped, wrapperName, wrappedName, null);\n     }\n \n-    public XmlBeanPropertyWriter(BeanPropertyWriter wrapped, QName wrapperName, QName wrappedName,\n+    public XmlBeanPropertyWriter(BeanPropertyWriter wrapped,\n+            PropertyName wrapperName, PropertyName wrappedName,\n             JsonSerializer<Object> serializer)\n     {\n         super(wrapped);\n-        _wrapperName = wrapperName;\n-        _wrappedName = wrappedName;\n+        _wrapperName = _qname(wrapperName);\n+        _wrappedName = _qname(wrappedName);\n \n-        assignSerializer(serializer);\n+        if (serializer != null) {\n+            assignSerializer(serializer);\n+        }\n     }\n \n+    private QName _qname(PropertyName n)\n+    {\n+        String ns = n.getNamespace();\n+        if (ns == null) {\n+            ns = \"\";\n+        }\n+        return new QName(ns, n.getSimpleName());\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Overridden methods\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n \n import java.util.List;\n import java.util.Map;\n-\n-import javax.xml.namespace.QName;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n import com.fasterxml.jackson.dataformat.xml.util.AnnotationUtil;\n import com.fasterxml.jackson.dataformat.xml.util.XmlInfo;\n-\n \n /**\n  * We need a {@link BeanSerializerModifier} to replace default <code>BeanSerializer</code>\n             if (_isContainerType(bpw.getType())) {\n                 String localName = null, wrapperNs = null;\n \n-                QName wrappedName = new QName(ns, bpw.getName());\n-                QName wrapperName = AnnotationUtil.findWrapperName(intr, member);\n+                PropertyName wrappedName = PropertyName.construct(bpw.getName(), ns);\n+                PropertyName wrapperName = intr.findWrapperName(member);\n                 \n                 if (wrapperName != null) {\n-                    localName = wrapperName.getLocalPart();\n-                    wrapperNs = wrapperName.getNamespaceURI();\n+                    localName = wrapperName.getSimpleName();\n+                    wrapperNs = wrapperName.getNamespace();\n                 }\n                 /* 21-Aug-2012, tatu: Missing localName means \"use property name as wrapper\",\n                  *   empty \"no wrapper\"\n                     // Empty wrapper name is explicit \"DO NOT wrap\" Lists indicator, so:\n                     continue;\n                 } else {\n-                    wrapperName = new QName((wrapperNs == null) ? \"\" : wrapperNs, localName);\n+                    wrapperName = PropertyName.construct(localName, (wrapperNs == null) ? \"\" : wrapperNs);\n                 }\n                 beanProperties.set(i, new XmlBeanPropertyWriter(bpw, wrapperName, wrappedName));\n             }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/AnnotationUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/AnnotationUtil.java\n package com.fasterxml.jackson.dataformat.xml.util;\n-\n-import javax.xml.namespace.QName;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n         }\n         return null;\n     }\n-    \n-    public static QName findWrapperName(AnnotationIntrospector ai, AnnotatedMember prop)\n-    {\n-        for (AnnotationIntrospector intr : ai.allIntrospectors()) {\n-            if (intr instanceof XmlAnnotationIntrospector) {\n-                QName n = ((XmlAnnotationIntrospector) intr).findWrapperElement(prop);\n-                if (n != null) {\n-                    return n;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n }", "timestamp": 1346900552, "metainfo": ""}