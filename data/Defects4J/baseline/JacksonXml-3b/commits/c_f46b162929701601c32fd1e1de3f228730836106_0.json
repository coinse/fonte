{"sha": "f46b162929701601c32fd1e1de3f228730836106", "log": "fix failing unit test", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListsUnwrapped.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.io.*;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.Marshaller;\n+import javax.xml.bind.annotation.*;\n+\n+import com.fasterxml.jackson.annotation.JsonRootName;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class TestListsUnwrapped extends XmlTestBase\n+{\n+    static class Value {\n+        public String v;\n+\n+        public Value() { }\n+        public Value(String str) { v = str; }\n+    }\n+\n+    @XmlRootElement(name=\"list\")\n+    @JsonRootName(\"list\")\n+    static class WrappedList {\n+        @XmlElementWrapper(name=\"WRAP\")\n+        @JacksonXmlElementWrapper(localName = \"WRAP\")\n+        public Value[] value;\n+    }\n+\n+    @XmlRootElement(name=\"list\")\n+    @JsonRootName(\"list\")\n+    static class UnwrappedList {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public Value[] value;\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    public void testWrappedLists() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        WrappedList list = new WrappedList();\n+        list.value = new Value[] { new Value(\"a\"), new Value(\"b\") };\n+\n+        // First, serialize:\n+        \n+        String json = mapper.writeValueAsString(list);\n+//      withJAXB(list);\n+        assertEquals(\"<list><WRAP><value><v>a</v></value><value><v>b</v></value></WRAP></list>\", json);\n+\n+        // then deserialize back\n+        WrappedList output = mapper.readValue(json, WrappedList.class);\n+        assertNotNull(output);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+    }\n+    \n+    public void testUnwrappedLists() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+\n+        UnwrappedList list = new UnwrappedList();\n+        list.value = new Value[] { new Value(\"c\"), new Value(\"d\") };\n+        String json = mapper.writeValueAsString(list);\n+        \n+        System.out.println(\"Unwrapped == \"+json);\n+//        withJAXB(list);\n+        assertEquals(\"<list><value><v>c</v></value><value><v>d</v></value></list>\", json);\n+\n+        // then deserialize back\n+        UnwrappedList output = mapper.readValue(json, UnwrappedList.class);\n+        assertNotNull(output);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+    \n+    }\n+\n+    void withJAXB(Object ob) throws Exception\n+    {\n+        JAXBContext jc = JAXBContext.newInstance(ob.getClass());\n+        Marshaller m = jc.createMarshaller();\n+        System.out.print(\"JAXB      -> \");\n+        StringWriter sw = new StringWriter();\n+        m.marshal(ob, sw);\n+        String xml = sw.toString();\n+        if (xml.indexOf(\"<?xml\") == 0) {\n+            xml = xml.substring(xml.indexOf(\"?>\")+2);\n+        }\n+        System.out.println(xml);\n+\n+   }\n+}", "timestamp": 1347331529, "metainfo": ""}