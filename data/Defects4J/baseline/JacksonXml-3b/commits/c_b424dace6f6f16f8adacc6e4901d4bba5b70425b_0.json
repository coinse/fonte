{"sha": "b424dace6f6f16f8adacc6e4901d4bba5b70425b", "log": "refactoring", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestRootListHandling.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+\n+/**\n+ * Tests for verifying that Lists (and arrays) can be serialized even\n+ * when they are root values.\n+ */\n+public class TestRootListHandling extends XmlTestBase\n+{\n+    public static class SampleResource {\n+        private Long id;\n+        private String name;\n+        private String description;\n+\n+        public Long getId() {\n+            return id;\n+        }\n+\n+        public void setId(Long id) {\n+            this.id = id;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+\n+        public String getDescription() {\n+            return description;\n+        }\n+\n+        public void setDescription(String description) {\n+            this.description = description;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    // for [Issue#38] -- root-level Collections not supported\n+    public void testListSerialization() throws Exception\n+    {\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(false);\n+        XmlMapper xmlMapper = new XmlMapper(module);\n+        AnnotationIntrospector introspector = new JacksonAnnotationIntrospector();\n+        xmlMapper.setAnnotationIntrospector(introspector);\n+        \n+        SampleResource r1 = new SampleResource();\n+        r1.setId(123L);\n+        r1.setName(\"Albert\");\n+        r1.setDescription(\"desc\");\n+\n+        SampleResource r2 = new SampleResource();\n+        r2.setId(123L);\n+        r2.setName(\"William\");\n+        r2.setDescription(\"desc2\");\n+\n+        List<SampleResource> l = new ArrayList<SampleResource>();\n+        l.add(r1);\n+        l.add(r2);\n+\n+        // to see what JAXB might do, uncomment:\n+//System.out.println(\"By JAXB: \"+jaxbSerialized(l)); //  ArrayList.class, SampleResource.class));\n+        \n+        String xml = xmlMapper\n+            .writerWithDefaultPrettyPrinter()\n+            .withRootName(\"RootList\")\n+            .writeValueAsString(l)\n+            .trim();\n+\n+        // first trivial sanity checks\n+        assertNotNull(xml);\n+        if (xml.indexOf(\"<RootList>\") < 0) {\n+            fail(\"Unexpected output: should have <RootList> as root element, got: \"+xml);\n+        }\n+\n+        // and then try reading back\n+        JavaType resListType = xmlMapper.getTypeFactory()\n+                .constructCollectionType(List.class, SampleResource.class);\n+        Object ob = xmlMapper.reader(resListType).readValue(xml);\n+        assertNotNull(ob);\n+\n+//      System.err.println(\"XML -> \"+xmlMapper.writerWithDefaultPrettyPrinter().writeValueAsString(ob));\n+        \n+        assertTrue(ob instanceof List);\n+        List<?> resultList = (List<?>) ob;\n+        assertEquals(2, resultList.size());\n+        assertEquals(SampleResource.class, resultList.get(0).getClass());\n+        assertEquals(SampleResource.class, resultList.get(1).getClass());\n+        SampleResource rr = (SampleResource) resultList.get(1);\n+        assertEquals(\"William\", rr.getName());\n+\n+    }\n+}", "timestamp": 1376545005, "metainfo": ""}