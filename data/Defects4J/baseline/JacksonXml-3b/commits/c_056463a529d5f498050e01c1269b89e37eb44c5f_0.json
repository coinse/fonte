{"sha": "056463a529d5f498050e01c1269b89e37eb44c5f", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/xml/XmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/XmlAnnotationIntrospector.java\n      * to using name (local name and namespace) of property itself.\n      */\n     public QName findWrapperElement(Annotated ann);\n-\n+    \n     /*\n     /**********************************************************************\n     /* Replacement of 'AnnotationIntrospector.Pair' to use when combining\n             _xmlSecondary = (s instanceof XmlAnnotationIntrospector) ? (XmlAnnotationIntrospector) s : null;\n         }\n \n+        public static XmlAnnotationIntrospector.Pair instance(AnnotationIntrospector a1, AnnotationIntrospector a2) {\n+            return new XmlAnnotationIntrospector.Pair(a1, a2);\n+        }\n+        \n         @Override\n         public String findNamespace(Annotated ann)\n         {\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/xml/jaxb/TestWithJAXBAnnotations.java\n+package com.fasterxml.jackson.xml.jaxb;\n+\n+import javax.xml.bind.annotation.*;\n+\n+import org.codehaus.jackson.map.AnnotationIntrospector;\n+import org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;\n+\n+import com.fasterxml.jackson.xml.XmlAnnotationIntrospector;\n+import com.fasterxml.jackson.xml.XmlMapper;\n+import com.fasterxml.jackson.xml.XmlTestBase;\n+import com.fasterxml.jackson.xml.XmlAnnotationIntrospector.Pair;\n+import com.fasterxml.jackson.xml.jaxb.XmlJaxbAnnotationIntrospector;\n+\n+/**\n+ * Although XML-backed data binding does not rely (or directly build) on JAXB\n+ * annotations, it should be possible to use them similar to how they are used\n+ * with default Jackson JSON data binding. Let's verify this is the case.\n+ */\n+public class TestWithJAXBAnnotations extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************************\n+    /* Helper types\n+    /**********************************************************************\n+     */\n+\n+    @XmlRootElement(name=\"bean\")\n+    public static class RootBean\n+    {\n+        public String value = \"text\";\n+    }\n+    \n+    public static class AttrBean\n+    {        \n+        @XmlAttribute\n+        public String attr = \"3\";\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Set up\n+    /**********************************************************************\n+     */\n+\n+    protected XmlMapper _jaxbMapper;\n+    protected XmlMapper _nonJaxbMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _jaxbMapper = new XmlMapper();\n+        _nonJaxbMapper = new XmlMapper();\n+        // Use JAXB-then-Jackson annotation introspector\n+        AnnotationIntrospector intr = XmlAnnotationIntrospector.Pair.instance\n+            (new XmlJaxbAnnotationIntrospector(), new JacksonAnnotationIntrospector());\n+        _jaxbMapper.getDeserializationConfig().setAnnotationIntrospector(intr);\n+        _jaxbMapper.getSerializationConfig().setAnnotationIntrospector(intr);\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    /**\n+     * Unit test for verifying that root element name can be overridden\n+     * with <code>@XmlRootElement</code> annotation.\n+     */\n+    public void testRootName() throws Exception\n+    {\n+        RootBean bean = new RootBean();\n+        // without JAXB annotations will use class simple name:\n+        assertEquals(\"<RootBean><value>text</value></RootBean>\", _nonJaxbMapper.writeValueAsString(bean));\n+        assertEquals(\"<bean><value>text</value></bean>\", _jaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    /**\n+     * Unit test for verifying that a propery defaults to being written as\n+     * element, but can be redefined with <code>@XmlAttribute</code> annotation.\n+     */\n+    public void testSerializeAsAttr() throws Exception\n+    {\n+        AttrBean bean = new AttrBean();\n+        assertEquals(\"<AttrBean><attr>3</attr></AttrBean>\", _nonJaxbMapper.writeValueAsString(bean));\n+        assertEquals(\"<AttrBean attr=\\\"3\\\" />\", _jaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Helper methods\n+    /**********************************************************************\n+     */\n+\n+    protected XmlMapper getJaxbAndJacksonMapper()\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        return mapper;\n+    }\n+}", "timestamp": 1293944482, "metainfo": ""}