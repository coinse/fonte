{"sha": "09f05a5ef994a2622f8f40626b9a75ab559d9d83", "log": "Complete (?) support for unwrapped list handling; all unit tests pass again", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n             if (!w.useWrapping()) {\n                 return PropertyName.NO_NAME;\n             }\n+            // also: need to ensure we use marker:\n+            String localName = w.localName();\n+            if (localName == null || localName.length() == 0) {\n+                return PropertyName.USE_DEFAULT;\n+            }\n             return PropertyName.construct(w.localName(), w.namespace());\n-        } else {\n-            /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n-             *   default settings...\n-             */\n-            if (_cfgDefaultUseWrapper) {\n-                return PropertyName.USE_DEFAULT;\n-            }\n+        }\n+        /* 09-Sep-2012, tatu: In absence of configurating we need to use our\n+         *   default settings...\n+         */\n+        if (_cfgDefaultUseWrapper) {\n+            return PropertyName.USE_DEFAULT;\n         }\n         return null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/ElementWrapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/ElementWrapper.java\n     protected final String _wrapperName;\n     protected final String _wrapperNamespace;\n \n-    public ElementWrapper(ElementWrapper parent) {\n+    /*\n+    /**********************************************************\n+    /* Life-cycle\n+    /**********************************************************\n+     */\n+    \n+    private ElementWrapper(ElementWrapper parent) {\n         _parent = parent;\n         _wrapperName = null;\n         _wrapperNamespace = \"\";\n     }\n     \n-    public ElementWrapper(ElementWrapper parent,\n+    private ElementWrapper(ElementWrapper parent,\n             String wrapperLocalName, String wrapperNamespace)\n     {\n         _parent = parent;\n         _wrapperNamespace = (wrapperNamespace == null) ? \"\" : wrapperNamespace;\n     }\n \n+    /**\n+     * Factory method called to construct a new \"matching\" wrapper element,\n+     * at level where virtual wrapping is needed.\n+     */\n+    public static ElementWrapper matchingWrapper(ElementWrapper parent,\n+            String wrapperLocalName, String wrapperNamespace)\n+    {\n+        return new ElementWrapper(parent, wrapperLocalName, wrapperNamespace);\n+    }\n+\n+    /**\n+     * Factory method used for creating intermediate wrapper level, which\n+     * is only used for purpose of keeping track of physical element\n+     * nesting.\n+     */\n+    public ElementWrapper intermediateWrapper() {\n+        return new ElementWrapper(this, null, null);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* API\n+    /**********************************************************\n+     */\n+\n+    public boolean isMatching() { return _wrapperName != null; }\n+    \n     public String getWrapperLocalName() { return _wrapperName; }\n     public String getWrapperNamespace() { return _wrapperNamespace; }\n \n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n         case XmlTokenStream.XML_END:\n             return (_currToken = null);\n         }\n+        \n         // should never get here\n         _throwInternal();\n         return null;\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n     public int next() throws IOException \n     {\n         if (_repeatElement) {\n-            _repeatElement = false;\n-            // important: add the virtual element second time, but not with name to match\n-            _currentWrapper = new ElementWrapper(_currentWrapper);\n-            return _currentState;\n-        }\n-        \n+            return _handleRepeatElement();\n+        }\n         try {\n             return _next();\n         } catch (XMLStreamException e) {\n             return -1;\n         }\n     }\n-\n+    \n     public void skipEndElement() throws IOException\n     {\n         try {\n                     +XML_START_ELEMENT+\") but \"+_currentState);\n         }\n         // Important: add wrapper, to keep track...\n-        _currentWrapper = new ElementWrapper(_currentWrapper, _localName, _namespaceURI);\n+        _currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper, _localName, _namespaceURI);\n         _repeatElement = true;\n     }\n \n         case XML_TEXT:\n             // text is always followed by END_ELEMENT\n             return _handleEndElement();\n+        case XML_END:\n+            return XML_END;\n+//            throw new IllegalStateException(\"No more XML tokens available (end of input)\");\n         }\n \n         // Ok: must be END_ELEMENT; see what tag we get (or end)\n \n     private final int _skipUntilTag() throws XMLStreamException\n     {\n-        while (true) {\n+        while (_xmlReader.hasNext()) {\n             int type;\n             switch (type = _xmlReader.next()) {\n             case XMLStreamConstants.START_ELEMENT:\n                 // any other type (proc instr, comment etc) is just ignored\n             }\n         }\n+        throw new IllegalStateException(\"Expected to find a tag, instead reached end of input\");\n     }\n     \n     /*\n          */\n         if (_currentWrapper != null) {\n             if (_currentWrapper.matchesWrapper(localName, ns)) {\n-                _currentWrapper = new ElementWrapper(_currentWrapper, localName, ns);\n+                _currentWrapper = _currentWrapper.intermediateWrapper();\n             } else {\n                 // implicit end is more interesting:\n                 _localName = _currentWrapper.getWrapperLocalName();\n         return (_currentState = XML_START_ELEMENT);\n     }\n \n+    /**\n+     * Method called to handle details of repeating \"virtual\"\n+     * start/end elements, needed for handling 'unwrapped' lists.\n+     */\n+    protected int _handleRepeatElement() throws IOException \n+    {\n+        _repeatElement = false;\n+        if (_currentState == XML_START_ELEMENT) {\n+            // important: add the virtual element second time, but not with name to match\n+            _currentWrapper = _currentWrapper.intermediateWrapper();\n+        } else if (_currentState == XML_END_ELEMENT) {\n+            _localName = _xmlReader.getLocalName();\n+            _namespaceURI = _xmlReader.getNamespaceURI();\n+        }\n+        return _currentState;\n+    }\n+    \n     private final int _handleEndElement()\n     {\n         if (_currentWrapper != null) {\n+            ElementWrapper w = _currentWrapper;\n             _currentWrapper = _currentWrapper.getParent();\n+            // important: if we close the scope, must duplicate END_ELEMENT as well\n+            if (w.isMatching()) {\n+                _repeatElement = true;\n+                _localName = w.getWrapperLocalName();\n+                _namespaceURI = w.getWrapperNamespace();\n+            }\n         }\n         return (_currentState = XML_END_ELEMENT);\n     }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestDeserialization.java\n import java.util.*;\n \n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n \n public class TestDeserialization extends XmlTestBase\n         @JacksonXmlProperty(isAttribute=true, localName=\"attr\")\n         public String text = \"?\";\n     }\n-\n-    static class ListBean\n-    {\n-        @JacksonXmlElementWrapper(useWrapping=false)\n-        public List<Integer> values;\n-    }\n     \n     /*\n     /**********************************************************\n     private final XmlMapper MAPPER = new XmlMapper();\n     \n     /**\n-     * Unit test to ensure that we can succesfully also roundtrip\n+     * Unit test to ensure that we can successfully also round trip\n      * example Bean used in Jackson tutorial\n      */\n     public void testRoundTripWithJacksonExample() throws Exception\n         assertNotNull(bean);\n         assertEquals(\"abc\", bean.text);\n     }\n-\n-    public void testListBean() throws Exception\n-    {\n-        ListBean bean = MAPPER.readValue(\n-                \"<ListBean><values><values>1</values><values>2</values><values>3</values></values></ListBean>\",\n-                ListBean.class);\n-        assertNotNull(bean);\n-        assertNotNull(bean.values);\n-        assertEquals(3, bean.values.size());\n-        assertEquals(Integer.valueOf(1), bean.values.get(0));\n-        assertEquals(Integer.valueOf(2), bean.values.get(1));\n-        assertEquals(Integer.valueOf(3), bean.values.get(2));\n-    }\n     \n     // Issue#14:\n     public void testMapWithAttr() throws Exception\n     \tfinal String xml = \"<order><person lang='en'>John Smith</person></order>\";\n \n     \t/*\n-    \tJsonParser jp = MAPPER.getJsonFactory().createJsonParser(xml);\n+    \tJsonParser jp = MAPPER.getJsonFactory().createParser(xml);\n     \tJsonToken t;\n     \twhile ((t = jp.nextToken()) != null) {\n     \t\tswitch (t) {\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListDeserialization.java\n     /**********************************************************\n      */\n \n-\t@JacksonXmlRootElement(localName = \"person\", namespace =\"http://example.org/person\" )\n-\tpublic static class Person\n-\t{\n-\t   @JacksonXmlProperty( isAttribute = true )\n-\t   public String id;\n-\t   public String name;\n-\t   public int age;\n+    @JacksonXmlRootElement(localName = \"person\", namespace =\"http://example.org/person\" )\n+    public static class Person\n+    {\n+        @JacksonXmlProperty( isAttribute = true )\n+        public String id;\n+        public String name;\n+        public int age;\n \n-\t   @JacksonXmlElementWrapper(localName = \"notes\")\n-\t   @JacksonXmlProperty(localName = \"note\" )\n-\t   public List<String> notes = new ArrayList<String>();\n-\t   \n-\t   public Person() { }\n-\t   public Person(String name, int age) {\n-\t\t   this.name = name;\n-\t\t   this.age = age;\n-\t   }\n-\t}\n+        @JacksonXmlElementWrapper(localName = \"notes\")\n+        @JacksonXmlProperty(localName = \"note\" )\n+        public List<String> notes = new ArrayList<String>();\n+\n+        public Person() { }\n+        public Person(String name, int age) {\n+            this.name = name;\n+            this.age = age;\n+        }\n+    }\n \n     public static class PersonWithGetters\n     {\n        }\n     }\n \n+    static class ListBeanWrapped\n+    {\n+        @JacksonXmlElementWrapper\n+        public List<Integer> values;\n+    }\n+\n+    static class ListBeanUnwrapped\n+    {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Integer> values;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Unit tests\n         assertEquals(\"note 1\", result._notes.get(0));\n         assertEquals(\"note 2\", result._notes.get(1));\n     }\n+\n+    public void testWrappedListBeanDeser() throws Exception\n+    {\n+        ListBeanWrapped bean = MAPPER.readValue(\n+                \"<ListBeanWrapped><values><values>1</values><values>2</values><values>3</values></values></ListBeanWrapped>\",\n+                ListBeanWrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        assertEquals(3, bean.values.size());\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+        assertEquals(Integer.valueOf(3), bean.values.get(2));\n+    }\n+\n+    public void testUnwrappedListBeanDeser() throws Exception\n+    {\n+        /*\n+        ListBeanUnwrapped foo = new ListBeanUnwrapped();\n+        foo.values = new ArrayList<Integer>();\n+        foo.values.add(1);\n+        foo.values.add(2);\n+        foo.values.add(3);\n+System.out.println(\"List -> \"+MAPPER.writeValueAsString(foo));\n+*/\n+        \n+        ListBeanUnwrapped bean = MAPPER.readValue(\n+                \"<ListBeanUnwrapped><values>1</values><values>2</values><values>3</values></ListBeanUnwrapped>\",\n+                ListBeanUnwrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        assertEquals(3, bean.values.size());\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+        assertEquals(Integer.valueOf(3), bean.values.get(2));\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListSerialization.java\n             }\n         }\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Unit tests\n \n     private final XmlMapper MAPPER = new XmlMapper();\n  \n-    public void testSimpleList() throws IOException\n+    public void testSimpleWrappedList() throws IOException\n     {\n         String xml = MAPPER.writeValueAsString(new ListBean(1, 2, 3));\n         xml = removeSjsxpNamespace(xml);\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestDeserialization.java\n     private static class EmptyStrings\n     {\n         @JacksonXmlProperty(isAttribute=true)\n-        public String a;\n-        public String b;\n+        public String a = \"NOT SET\";\n+        public String b = \"NOT SET\";\n     }\n \n     private final XmlMapper MAPPER = new XmlMapper();\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestElementWrapper.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestElementWrapper.java\n           public List<MyPerson> children = new ArrayList<MyPerson>();\n     }\n \n+    @XmlRootElement(name=\"p\")\n+    static class MyPerson2 {\n+        public String name;\n \n+        public List<MyPerson2> child = new ArrayList<MyPerson2>();\n+  }\n+    \n     /*\n     /**********************************************************************\n     /* Unit tests\n                 + \"<offspring><kid><name>Junior</name><offspring/></kid></offspring></Individual>\";\n         assertEquals(expected, xml);\n     }\n+\n+    // And with JAXB, default should be \"no wrapper\"\n+    public void testNoElementWrapper() throws Exception\n+    {\n+        XmlMapper jaxbMapper = new XmlMapper();\n+        jaxbMapper.setAnnotationIntrospector(new XmlJaxbAnnotationIntrospector(TypeFactory.defaultInstance()));\n+\n+        MyPerson2 person = new MyPerson2();\n+        person.name = \"Jay\";\n+\n+        MyPerson2 child = new MyPerson2();\n+        child.name = \"Junior\";\n+        \n+        person.child.add(child);\n+\n+        String xml = jaxbMapper.writeValueAsString(person);\n+        \n+        String expected = \"<p><name>Jay</name><child><name>Junior</name></child></p>\";\n+        assertEquals(expected, xml);\n+    }\n }", "timestamp": 1347256614, "metainfo": ""}