{"sha": "29ad5082940a89282684e1136ef8ac18ffc68bba", "log": "Refactor to ensure that tests for not-yet-implemented features won't block builds", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestAdapterIssue37.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestAdapterIssue37.java\n         map.put(a,b);\n         return map;\n     }\n-    \n+\n     /*\n     /**********************************************************************\n     /* Set up\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestPolymorphic.java\n package com.fasterxml.jackson.dataformat.xml.failing;\n \n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n import com.fasterxml.jackson.dataformat.xml.*;\n-\n \n public class TestPolymorphic extends XmlTestBase\n {\n         public ClassArrayWrapper(String s) { wrapped = new SubTypeWithClassArray(s); }\n     }\n \n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+    protected static class TypeWithClassPropertyAndObjectId {\n+        public String id;\n+\n+        public TypeWithClassPropertyAndObjectId(String id) { this.id = id; }\n+    }\n+\n+    protected static class Wrapper {\n+        public List<TypeWithClassPropertyAndObjectId> data;\n+\n+        public Wrapper(List<TypeWithClassPropertyAndObjectId> data) { this.data = data; }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Set up\n         assertEquals(SubTypeWithClassArray.class, result.wrapped.getClass());\n         assertEquals(\"Foobar\", ((SubTypeWithClassArray) result.wrapped).name);\n     }\n+\n+    /**\n+     * Test for issue 81\n+     */\n+    public void testAsPropertyWithObjectId() throws Exception\n+    {\n+        List<TypeWithClassPropertyAndObjectId> data = new ArrayList<TestPolymorphic.TypeWithClassPropertyAndObjectId>();\n+        TypeWithClassPropertyAndObjectId object = new TypeWithClassPropertyAndObjectId(\"Foobar\");\n+        data.add(object);\n+        // This will be written as an id reference instead of object; as such, no type info will be written.\n+        data.add(object);\n+        String xml = _xmlMapper.writeValueAsString(new Wrapper(data));\n+        Wrapper result = _xmlMapper.readValue(xml, Wrapper.class);\n+        assertNotNull(result);\n+        assertSame(result.data.get(0), result.data.get(1));\n+        assertEquals(\"Foobar\", result.data.get(0).id);\n+    }\n }\n    \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestUnwrappedDeserIssue86.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.Assert;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class TestUnwrappedDeserIssue86\n+{\n+    @JacksonXmlRootElement(localName = \"test\")\n+    public static class Issue86 {\n+\n+      @JacksonXmlProperty(localName = \"id\", isAttribute = true)\n+      private String id;\n+\n+      @JacksonXmlElementWrapper(useWrapping = false)\n+      @JacksonXmlProperty(localName = \"test\")\n+      private List<Issue86> children;\n+\n+      public Issue86() {}\n+\n+      public Issue86(final String id, final List<Issue86> children) {\n+        this.id = id;\n+        this.children = children;\n+      }\n+\n+      @Override\n+      public boolean equals(final Object other) {\n+        if (other == null) {\n+          return false;\n+        }\n+\n+        if (other == this) {\n+          return true;\n+        }\n+\n+        if (!(other instanceof Issue86)) {\n+          return false;\n+        }\n+\n+        final Issue86 otherIssue86 = (Issue86) other;\n+        return otherIssue86.id.equals(id) && otherIssue86.children.equals(children);\n+      }\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Test methods\n+    /***********************************************************************\n+     */\n+    \n+  @Test\n+  public void deserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch() throws Exception {\n+    final String source =\n+        \"<test id=\\\"0\\\">\" +\n+            \"<test id=\\\"0.1\\\">\" +\n+                \"<test id=\\\"0.1.1\\\"/>\" +\n+            \"</test>\" +\n+            \"<test id=\\\"0.2\\\"/>\" +\n+            \"<test id=\\\"0.3\\\">\" +\n+                \"<test id=\\\"0.3.1\\\"/>\" +\n+            \"</test>\" +\n+        \"</test>\";\n+\n+    final Issue86 before = new Issue86(\n+        \"0\",\n+        Arrays.asList(\n+            new Issue86(\n+                \"0.1\",\n+                Arrays.asList(\n+                    new Issue86(\n+                        \"0.1.1\",\n+                        null))),\n+            new Issue86(\n+                \"0.2\",\n+                null),\n+            new Issue86(\n+                \"0.3\",\n+                Arrays.asList(\n+                    new Issue86(\n+                        \"0.3.1\",\n+                        null)))));\n+\n+    final XmlMapper mapper = new XmlMapper();\n+    mapper.setSerializationInclusion(Include.NON_NULL);\n+\n+    final String xml = mapper.writeValueAsString(before);\n+    Assert.assertEquals(source, xml);\n+\n+    final Issue86 after = mapper.readValue(xml, Issue86.class);\n+    Assert.assertEquals(before, after);\n+  }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/types/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/types/TestPolymorphic.java\n package com.fasterxml.jackson.dataformat.xml.types;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n-\n \n public class TestPolymorphic extends XmlTestBase\n {\n     \n         public SubTypeWithClassObject() { }\n         public SubTypeWithClassObject(String s) { name = s; }\n-    }\n-\n-    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)\n-    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n-    protected static class TypeWithClassPropertyAndObjectId {\n-        public String id;\n-\n-        public TypeWithClassPropertyAndObjectId(String id) { this.id = id; }\n-    }\n-\n-    protected static class Wrapper {\n-        public List<TypeWithClassPropertyAndObjectId> data;\n-\n-        public Wrapper(List<TypeWithClassPropertyAndObjectId> data) { this.data = data; }\n     }\n \n     /*\n         assertEquals(SubTypeWithClassObject.class, result.getClass());\n         assertEquals(\"Foobar\", ((SubTypeWithClassObject) result).name);\n     }\n-\n-    /**\n-     * Test for issue 81\n-     */\n-    public void testAsPropertyWithObjectId() throws Exception {\n-        List<TypeWithClassPropertyAndObjectId> data = new ArrayList<TestPolymorphic.TypeWithClassPropertyAndObjectId>();\n-        TypeWithClassPropertyAndObjectId object = new TypeWithClassPropertyAndObjectId(\"Foobar\");\n-        data.add(object);\n-        // This will be written as an id reference instead of object; as such, no type info will be written.\n-        data.add(object);\n-        String xml = _xmlMapper.writeValueAsString(new Wrapper(data));\n-        Wrapper result = _xmlMapper.readValue(xml, Wrapper.class);\n-        assertNotNull(result);\n-        assertSame(result.data.get(0), result.data.get(1));\n-        assertEquals(\"Foobar\", result.data.get(0).id);\n-    }\n }\n    ", "timestamp": 1388030812, "metainfo": ""}