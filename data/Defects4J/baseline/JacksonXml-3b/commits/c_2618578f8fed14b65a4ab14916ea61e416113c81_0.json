{"sha": "2618578f8fed14b65a4ab14916ea61e416113c81", "log": "Cleanup for 2.1...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n      * Note: sub-classes should override this method; default\n      * implementation will return null for all sub-classes\n      */\n+    @Override\n     public String getFormatName()\n     {\n         return FORMAT_NAME_XML;\n     }\n \n+    @Override\n     public MatchStrength hasFormat(InputAccessor acc) throws IOException\n     {\n         return hasXMLFormat(acc);\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n     /**********************************************************\n      */\n \n+    @Override\n+    public XmlFactory getJsonFactory() {\n+        return (XmlFactory) _jsonFactory;\n+    }\n+    \n     public ObjectMapper configure(ToXmlGenerator.Feature f, boolean state) {\n         ((XmlFactory)_jsonFactory).configure(f, state);\n         return this;\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n      * @param bindex Relative index within base64 character unit; between 0\n      *   and 3 (as unit has exactly 4 characters)\n      */\n+    @Override\n     protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg)\n         throws JsonParseException\n     {\n         throw new JsonParseException(base, JsonLocation.NA);\n     }\n \n+    @Override\n     protected void _reportBase64EOF()\n         throws JsonParseException\n     {\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n     /* Object values\n     /**********************************************************\n      */\n-    \n-\t@Override\n+\n+    @Override\n     public void beforeObjectEntries(JsonGenerator jgen)\n         throws IOException, JsonGenerationException\n     {\n \t\t// never called for ToXmlGenerator\n     }\n \n-\t@Override\n+    @Override\n     public void writeStartObject(JsonGenerator jgen) throws IOException, JsonGenerationException\n     {\n \t\tif (!_objectIndenter.isInline()) {\n         ((ToXmlGenerator) jgen)._handleStartObject();\n     }\n \n-\t@Override\n+    @Override\n     public void writeObjectEntrySeparator(JsonGenerator jgen)\n     \t\tthrows IOException, JsonGenerationException\n     {\n \t\t// never called for ToXmlGenerator\n     }\n \n-\t@Override\n+    @Override\n     public void writeObjectFieldValueSeparator(JsonGenerator jgen) throws IOException, JsonGenerationException {\n \t\t// never called for ToXmlGenerator\n     }\n     \n-\t@Override\n+    @Override\n     public void writeEndObject(JsonGenerator jgen, int nrOfEntries) throws IOException, JsonGenerationException\n     {\n         if (!_objectIndenter.isInline()) {\n     /**********************************************************\n      */\n \n-\t@Override\n+    @Override\n     public void writeLeafElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName, String text)\n   \t\tthrows XMLStreamException\n \t\tsw.writeEndElement();\n     }\n \n+    @Override\n     public void writeLeafElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName,\n     \t\tchar[] buffer, int offset, int len)\n \t\tsw.writeEndElement();\n     }\n \t\n-\t@Override\n+    @Override\n     public void writeLeafElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName, boolean value)\n   \t\tthrows XMLStreamException\n     {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\t_objectIndenter.writeIndentation(sw, _nesting);\n-        }\n-\t\tsw.writeStartElement(nsURI, localName);\n-\t\tsw.writeBoolean(value);\n-\t\tsw.writeEndElement();\n-    }\n-\n-\t@Override\n-    public void writeLeafElement(XMLStreamWriter2 sw,\n-    \t\tString nsURI, String localName, int value)\n-  \t\tthrows XMLStreamException\n-    {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\t_objectIndenter.writeIndentation(sw, _nesting);\n-        }\n-\t\tsw.writeStartElement(nsURI, localName);\n-\t\tsw.writeInt(value);\n-\t\tsw.writeEndElement();\n-    }\n-\n-\t@Override\n-    public void writeLeafElement(XMLStreamWriter2 sw,\n-    \t\tString nsURI, String localName, long value)\n-  \t\tthrows XMLStreamException\n-    {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\t_objectIndenter.writeIndentation(sw, _nesting);\n-        }\n-\t\tsw.writeStartElement(nsURI, localName);\n-\t\tsw.writeLong(value);\n-\t\tsw.writeEndElement();\n-    }\n-\n-\t@Override\n-    public void writeLeafElement(XMLStreamWriter2 sw,\n-    \t\tString nsURI, String localName, double value)\n-  \t\tthrows XMLStreamException\n-    {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\t_objectIndenter.writeIndentation(sw, _nesting);\n-        }\n-\t\tsw.writeStartElement(nsURI, localName);\n-\t\tsw.writeDouble(value);\n-\t\tsw.writeEndElement();\n+        if (!_objectIndenter.isInline()) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeStartElement(nsURI, localName);\n+        sw.writeBoolean(value);\n+        sw.writeEndElement();\n+    }\n+    \n+    @Override\n+    public void writeLeafElement(XMLStreamWriter2 sw,\n+            String nsURI, String localName, int value)\n+                    throws XMLStreamException\n+    {\n+        if (!_objectIndenter.isInline()) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeStartElement(nsURI, localName);\n+        sw.writeInt(value);\n+        sw.writeEndElement();\n+    }\n+\n+    @Override\n+    public void writeLeafElement(XMLStreamWriter2 sw,\n+            String nsURI, String localName, long value)\n+                    throws XMLStreamException\n+    {\n+        if (!_objectIndenter.isInline()) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeStartElement(nsURI, localName);\n+        sw.writeLong(value);\n+        sw.writeEndElement();\n+    }\n+\n+    @Override\n+    public void writeLeafElement(XMLStreamWriter2 sw,\n+            String nsURI, String localName, double value)\n+  \t\tthrows XMLStreamException\n+    {\n+        if (!_objectIndenter.isInline()) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeStartElement(nsURI, localName);\n+        sw.writeDouble(value);\n+        sw.writeEndElement();\n     }\n \n \t@Override\n \t\tsw.writeEndElement();\n     }\n \n-\t@Override\n+    @Override\n     public void writeLeafElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName, BigDecimal value)\n   \t\tthrows XMLStreamException\n     {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\t_objectIndenter.writeIndentation(sw, _nesting);\n-        }\n-\t\tsw.writeStartElement(nsURI, localName);\n-\t\tsw.writeDecimal(value);\n-\t\tsw.writeEndElement();\n-    }\n-\n-\t@Override\n-\tpublic void writeLeafElement(XMLStreamWriter2 sw,\n+        if (!_objectIndenter.isInline()) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeStartElement(nsURI, localName);\n+        sw.writeDecimal(value);\n+        sw.writeEndElement();\n+    }\n+\n+    @Override\n+    public void writeLeafElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName,\n     \t\tbyte[] data, int offset, int len)\n         throws XMLStreamException\n     {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\t_objectIndenter.writeIndentation(sw, _nesting);\n-        }\n-\t\tsw.writeStartElement(nsURI, localName);\n-\t\tsw.writeBinary(data, offset, len);\n-\t\tsw.writeEndElement();\n-    }\n-\n+        if (!_objectIndenter.isInline()) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeStartElement(nsURI, localName);\n+        sw.writeBinary(data, offset, len);\n+        sw.writeEndElement();\n+    }\n+\n+    @Override\n     public void writeLeafNullElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName)\n         throws XMLStreamException\n     {\n-\t\tif (!_objectIndenter.isInline()) {\n-\t\t\t_objectIndenter.writeIndentation(sw, _nesting);\n-        }\n-\t\tsw.writeEmptyElement(nsURI, localName);\n+        if (!_objectIndenter.isInline()) {\n+            _objectIndenter.writeIndentation(sw, _nesting);\n+        }\n+        sw.writeEmptyElement(nsURI, localName);\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestComplex.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestComplex.java\n         input.addPhoto(new MediaItem.Photo(\"http://b\", \"title2\", 640, 480, MediaItem.Size.SMALL));\n \n         ObjectWriter w = MAPPER.writerWithType(MediaItem.class);\n+        \n         String xml = w.writeValueAsString(input);\n \n System.err.println(\"DEBUG: Xml == \"+xml);\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestElementWrapper.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestElementWrapper.java\n public class TestElementWrapper extends XmlTestBase\n {\n     @XmlRootElement(name = \"Individual\")\n-    private class MyPerson {\n+    static class MyPerson {\n           public String name;\n \n           @XmlElementWrapper(name = \"offspring\")", "timestamp": 1344131687, "metainfo": ""}