{"sha": "5791294b7e51757ac54fcdd19943bf211d34e3c3", "log": "Fix [Issue#33]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n             _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n             // And just in case a field name was to be returned, wipe it\n             _nextToken = null;\n+            // and last thing, [Issue#33], better ignore attributes\n+            _xmlTokens.skipAttributes();\n             return true;\n         }\n         return (t == JsonToken.START_ARRAY);\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n     /**********************************************************************\n      */\n     \n+    /**\n+     * Method used to add virtual wrapping, which just duplicates START_ELEMENT\n+     * stream points to, and its matching closing element.\n+     * \n+     * @since 2.1\n+     */\n     protected void repeatStartElement()\n     {\n         // sanity check: can only be used when just returned START_ELEMENT:\n         _repeatElement = true;\n     }\n \n+    /**\n+     * Method called to skip any attributes current START_ELEMENT may have,\n+     * so that they are not returned as token.\n+     * \n+     * @since 2.1\n+     */\n+    protected void skipAttributes()\n+    {\n+        if (_currentState == XML_START_ELEMENT) {\n+            _attributeCount = 0;\n+        } else if (_currentState == XML_ATTRIBUTE_NAME) {\n+            _attributeCount = 0;\n+            _currentState = XML_START_ELEMENT;\n+        } else {\n+            throw new IllegalStateException(\"Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (\"\n+                    +XML_START_ELEMENT+\") but \"+_currentState);\n+        }\n+        \n+        _verifyIsStartElement();\n+    }\n+\n+    protected void _verifyIsStartElement()\n+    {\n+    }\n+    \n     /*\n     /**********************************************************************\n     /* Internal methods, parsing\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListDeserialization.java\n         assertEquals(Integer.valueOf(3), bean.values.get(2));\n     }\n \n+    // for [Issue#33]\n+    public void testWrappedListWithAttribute() throws Exception\n+    {\n+        ListBeanWrapped bean = MAPPER.readValue(\n+                \"<ListBeanWrapped><values id='123'><values>1</values><values>2</values></values></ListBeanWrapped>\",\n+                ListBeanWrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        assertEquals(2, bean.values.size());\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+    }\n+\n     public void testUnwrappedListBeanDeser() throws Exception\n     {\n         /*", "timestamp": 1347339555, "metainfo": ""}