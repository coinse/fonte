{"sha": "29ec1eaa7fc2bf83ab9307aac773acdd9d333330", "log": "Fix compilations problems related to 1.8.0 final release", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/xml/XmlTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/XmlTypeResolverBuilder.java\n import org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;\n import org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver;\n import org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;\n+import org.codehaus.jackson.map.type.TypeFactory;\n import org.codehaus.jackson.type.JavaType;\n \n /**\n         // Only override handlings of class, minimal class; name is good as is\n         switch (_idType) {\n         case CLASS:\n-            return new XmlClassNameIdResolver(baseType);\n+            return new XmlClassNameIdResolver(baseType, config.getTypeFactory());\n         case MINIMAL_CLASS:\n-            return new XmlMinimalClassNameIdResolver(baseType);\n+            return new XmlMinimalClassNameIdResolver(baseType, config.getTypeFactory());\n         }\n         return super.idResolver(config, baseType, subtypes, forSer, forDeser);\n     }\n     protected static class XmlClassNameIdResolver\n         extends ClassNameIdResolver\n     {\n-        public XmlClassNameIdResolver(JavaType baseType)\n+        public XmlClassNameIdResolver(JavaType baseType, TypeFactory typeFactory)\n         {\n-            super(baseType);\n+            super(baseType, typeFactory);\n         }\n \n         @Override\n     protected static class XmlMinimalClassNameIdResolver\n         extends MinimalClassNameIdResolver\n     {\n-        public XmlMinimalClassNameIdResolver(JavaType baseType)\n+        public XmlMinimalClassNameIdResolver(JavaType baseType, TypeFactory typeFactory)\n         {\n-            super(baseType);\n+            super(baseType, typeFactory);\n         }\n \n         @Override\n--- a/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializer.java\n         super(src._handledType, src._props, filtered, src._anyGetterWriter, src._propertyFilterId);\n         _attributeCount = src._attributeCount;\n         _xmlNames = src._xmlNames;\n-    }\n-    \n-    @Override\n-    public BeanSerializer withFiltered(BeanPropertyWriter[] filtered)\n-    {\n-        if (filtered == _filteredProps) {\n-            return this;\n-        }\n-        return new XmlBeanSerializer(this, filtered);\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/xml/jaxb/TestWithJAXBAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/jaxb/TestWithJAXBAnnotations.java\n         // Use JAXB-then-Jackson annotation introspector\n         AnnotationIntrospector intr = XmlAnnotationIntrospector.Pair.instance\n             (new XmlJaxbAnnotationIntrospector(), new JacksonAnnotationIntrospector());\n-        _jaxbMapper.getDeserializationConfig().setAnnotationIntrospector(intr);\n-        _jaxbMapper.getSerializationConfig().setAnnotationIntrospector(intr);\n+        _jaxbMapper.setAnnotationIntrospector(intr);\n     }\n     \n     /*", "timestamp": 1305586096, "metainfo": ""}