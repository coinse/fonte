{"sha": "7088e0319f36cd6a007eedc55f62af475cd1a8c7", "log": "Starting to customize context object, needed to add 'virtual' wrappers to support unwrapped Collections", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.base.ParserMinimalBase;\n import com.fasterxml.jackson.core.io.IOContext;\n-import com.fasterxml.jackson.core.json.JsonReadContext;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.util.XmlTokenStream;\n-\n \n /**\n  * {@link JsonParser} implementation that exposes XML structure as\n      * Information about parser context, context in which\n      * the next token is to be parsed (root, array, object).\n      */\n-    protected JsonReadContext _parsingContext;\n+    protected XmlReadContext _parsingContext;\n     \n     protected final XmlTokenStream _xmlTokens;\n \n         _xmlFeatures = xmlFeatures;\n         _ioContext = ctxt;\n         _objectCodec = codec;\n-        _parsingContext = JsonReadContext.createRootContext(-1, -1);\n+        _parsingContext = XmlReadContext.createRootContext(-1, -1);\n         // and thereby start a scope\n         _nextToken = JsonToken.START_OBJECT;\n         _xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference());\n     {\n         // [JACKSON-395]: start markers require information from parent\n         if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n-            JsonReadContext parent = _parsingContext.getParent();\n+            XmlReadContext parent = _parsingContext.getParent();\n             return parent.getCurrentName();\n         }\n         return _parsingContext.getCurrentName();\n     public void overrideCurrentName(String name)\n     {\n         // Simple, but need to look for START_OBJECT/ARRAY's \"off-by-one\" thing:\n-        JsonReadContext ctxt = _parsingContext;\n+        XmlReadContext ctxt = _parsingContext;\n         if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n             ctxt = ctxt.getParent();\n         }\n     public boolean isClosed() { return _closed; }\n \n     @Override\n-    public JsonReadContext getParsingContext()\n+    public XmlReadContext getParsingContext()\n     {\n         return _parsingContext;\n     }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlReadContext.java\n+package com.fasterxml.jackson.dataformat.xml.deser;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.io.CharTypes;\n+\n+/**\n+ * Extension of {@link JsonStreamContext}, which implements\n+ * core methods needed, and adds small amount of additional\n+ * state data we need.\n+ *<p>\n+ * Almost same as standard <code>JsonReaderContext</code>, but\n+ * cut'n pasted since the impl is final for performance reasons;\n+ * this class is one of hot spots in profiling.\n+ */\n+public final class XmlReadContext\n+    extends JsonStreamContext\n+{\n+    // // // Configuration\n+\n+    protected final XmlReadContext _parent;\n+\n+    // // // Location information (minus source reference)\n+\n+    protected int _lineNr;\n+    protected int _columnNr;\n+\n+    protected String _currentName;\n+\n+    /*\n+    /**********************************************************\n+    /* Simple instance reuse slots; speeds up things\n+    /* a bit (10-15%) for docs with lots of small\n+    /* arrays/objects (for which allocation was\n+    /* visible in profile stack frames)\n+    /**********************************************************\n+     */\n+\n+    protected XmlReadContext _child = null;\n+\n+    /*\n+    /**********************************************************\n+    /* Instance construction, reuse\n+    /**********************************************************\n+     */\n+\n+    public XmlReadContext(XmlReadContext parent, int type, int lineNr, int colNr)\n+    {\n+        super();\n+        _type = type;\n+        _parent = parent;\n+        _lineNr = lineNr;\n+        _columnNr = colNr;\n+        _index = -1;\n+    }\n+\n+    protected final void reset(int type, int lineNr, int colNr)\n+    {\n+        _type = type;\n+        _index = -1;\n+        _lineNr = lineNr;\n+        _columnNr = colNr;\n+        _currentName = null;\n+    }\n+\n+    // // // Factory methods\n+\n+    public static XmlReadContext createRootContext(int lineNr, int colNr)\n+    {\n+        return new XmlReadContext(null, TYPE_ROOT, lineNr, colNr);\n+    }\n+\n+    public static XmlReadContext createRootContext()\n+    {\n+        return new XmlReadContext(null, TYPE_ROOT, 1, 0);\n+    }\n+    \n+    public final XmlReadContext createChildArrayContext(int lineNr, int colNr)\n+    {\n+        XmlReadContext ctxt = _child;\n+        if (ctxt == null) {\n+            _child = ctxt = new XmlReadContext(this, TYPE_ARRAY, lineNr, colNr);\n+            return ctxt;\n+        }\n+        ctxt.reset(TYPE_ARRAY, lineNr, colNr);\n+        return ctxt;\n+    }\n+\n+    public final XmlReadContext createChildObjectContext(int lineNr, int colNr)\n+    {\n+        XmlReadContext ctxt = _child;\n+        if (ctxt == null) {\n+            _child = ctxt = new XmlReadContext(this, TYPE_OBJECT, lineNr, colNr);\n+            return ctxt;\n+        }\n+        ctxt.reset(TYPE_OBJECT, lineNr, colNr);\n+        return ctxt;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Abstract method implementation\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public final String getCurrentName() { return _currentName; }\n+\n+    @Override\n+    public final XmlReadContext getParent() { return _parent; }\n+\n+    /*\n+    /**********************************************************\n+    /* Extended API\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * @return Location pointing to the point where the context\n+     *   start marker was found\n+     */\n+    public final JsonLocation getStartLocation(Object srcRef)\n+    {\n+        /* We don't keep track of offsets at this level (only\n+         * reader does)\n+         */\n+        long totalChars = -1L;\n+\n+        return new JsonLocation(srcRef, totalChars, _lineNr, _columnNr);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* State changes\n+    /**********************************************************\n+     */\n+\n+    public final boolean expectComma() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    public void setCurrentName(String name)\n+    {\n+        _currentName = name;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Overridden standard methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Overridden to provide developer readable \"JsonPath\" representation\n+     * of the context.\n+     */\n+    @Override\n+    public final String toString()\n+    {\n+        StringBuilder sb = new StringBuilder(64);\n+        switch (_type) {\n+        case TYPE_ROOT:\n+            sb.append(\"/\");\n+            break;\n+        case TYPE_ARRAY:\n+            sb.append('[');\n+            sb.append(getCurrentIndex());\n+            sb.append(']');\n+            break;\n+        case TYPE_OBJECT:\n+            sb.append('{');\n+            if (_currentName != null) {\n+                sb.append('\"');\n+                CharTypes.appendQuoted(sb, _currentName);\n+                sb.append('\"');\n+            } else {\n+                sb.append('?');\n+            }\n+            sb.append('}');\n+            break;\n+        }\n+        return sb.toString();\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n \n     public XmlJaxbAnnotationIntrospector(TypeFactory typeFactory) {\n         super(typeFactory);\n-    }\n-    \n-    public XmlJaxbAnnotationIntrospector(TypeFactory typeFactory,\n-            boolean firstXmlidRefAsId)\n-    {\n-        super(typeFactory, firstXmlidRefAsId);\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlTokenStream.java\n  * stream with no \"fluff\" tokens (comments, processing instructions, mixed\n  * content) all of which is just to simplify\n  * actual higher-level conversion to JSON tokens\n- * \n- * @since 1.7\n  */\n public class XmlTokenStream\n {", "timestamp": 1345845385, "metainfo": ""}