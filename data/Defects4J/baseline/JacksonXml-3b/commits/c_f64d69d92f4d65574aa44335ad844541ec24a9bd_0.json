{"sha": "f64d69d92f4d65574aa44335ad844541ec24a9bd", "log": "Added support for @JsonUnwrapped annotation. Fixes #83.", "commit": "\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/UnwrappingXmlBeanSerializer.java\n+package com.fasterxml.jackson.dataformat.xml.ser;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.ser.*;\n+import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n+import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer;\n+import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n+\n+/**\n+ * Copy of {@link UnwrappingBeanSerializer} required to extend\n+ * {@link XmlBeanSerializerBase} for XML-specific handling.\n+ * \n+ * @author Pascal G\u00e9linas\n+ * \n+ */\n+public class UnwrappingXmlBeanSerializer extends XmlBeanSerializerBase {\n+    /**\n+     * Transformer used to add prefix and/or suffix for properties of unwrapped\n+     * POJO.\n+     */\n+    protected final NameTransformer _nameTransformer;\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle: constructors\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Constructor used for creating unwrapping instance of a standard\n+     * <code>BeanSerializer</code>\n+     */\n+    public UnwrappingXmlBeanSerializer(XmlBeanSerializerBase src, NameTransformer transformer)\n+    {\n+        super(src, transformer);\n+        _nameTransformer = transformer;\n+    }\n+\n+    public UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, ObjectIdWriter objectIdWriter)\n+    {\n+        super(src, objectIdWriter);\n+        _nameTransformer = src._nameTransformer;\n+    }\n+\n+    public UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, ObjectIdWriter objectIdWriter, Object filterId)\n+    {\n+        super(src, objectIdWriter, filterId);\n+        _nameTransformer = src._nameTransformer;\n+    }\n+\n+    protected UnwrappingXmlBeanSerializer(UnwrappingXmlBeanSerializer src, String[] toIgnore)\n+    {\n+        super(src, toIgnore);\n+        _nameTransformer = src._nameTransformer;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Life-cycle: factory methods, fluent factories\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonSerializer<Object> unwrappingSerializer(NameTransformer transformer)\n+    {\n+        // !!! 23-Jan-2012, tatu: Should we chain transformers?\n+        return new UnwrappingXmlBeanSerializer(this, transformer);\n+    }\n+\n+    @Override\n+    public boolean isUnwrappingSerializer()\n+    {\n+        return true; // sure is\n+    }\n+\n+    @Override\n+    public BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter)\n+    {\n+        return new UnwrappingXmlBeanSerializer(this, objectIdWriter);\n+    }\n+\n+    @Override\n+    protected BeanSerializerBase withFilterId(Object filterId)\n+    {\n+        return new UnwrappingXmlBeanSerializer(this, _objectIdWriter, filterId);\n+    }\n+\n+    @Override\n+    protected BeanSerializerBase withIgnorals(String[] toIgnore)\n+    {\n+        return new UnwrappingXmlBeanSerializer(this, toIgnore);\n+    }\n+\n+    /**\n+     * JSON Array output can not be done if unwrapping operation is requested;\n+     * so implementation will simply return 'this'.\n+     */\n+    @Override\n+    protected BeanSerializerBase asArraySerializer()\n+    {\n+        return this;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* JsonSerializer implementation that differs between impls\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Main serialization method that will delegate actual output to configured\n+     * {@link BeanPropertyWriter} instances.\n+     */\n+    @Override\n+    public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider)\n+        throws IOException, JsonGenerationException\n+    {\n+        if (_objectIdWriter != null) {\n+            _serializeWithObjectId(bean, jgen, provider, false);\n+            return;\n+        }\n+        if (_propertyFilterId != null) {\n+            serializeFieldsFiltered(bean, jgen, provider);\n+        } else {\n+            serializeFields(bean, jgen, provider);\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Standard methods\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public String toString()\n+    {\n+        return \"UnwrappingXmlBeanSerializer for \" + handledType().getName();\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n \n     @Override\n     public JsonSerializer<Object> unwrappingSerializer(NameTransformer unwrapper) {\n-//        return new UnwrappingBeanSerializer(this, unwrapper);\n-        throw new UnsupportedOperationException(\"Unwrapping serialization not yet supported for XML\");\n+        return new UnwrappingXmlBeanSerializer(this, unwrapper);\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n         }\n \n         final int attrCount = _attributeCount;\n+        boolean isAttribute = xgen._nextIsAttribute;\n         if (attrCount > 0) {\n             xgen.setNextIsAttribute(true);\n         }\n \n         try {\n             for (final int len = props.length; i < len; ++i) {\n-                if (i == attrCount) {\n+                // 28-jan-2014, pascal: we don't want to reset the attribute flag if we are an unwrapping serializer \n+                // that started with nextIsAttribute to true because all properties should be unwrapped as attributes too.\n+                if (i == attrCount && !(isAttribute && isUnwrappingSerializer())) {\n                     xgen.setNextIsAttribute(false);\n                 }\n                 // also: if this is property to write as text (\"unwrap\"), need to:\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestUnwrappingWithXML.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+\n+// for #12\n+public class TestUnwrappingWithXML extends XmlTestBase\n+{\n+    @JsonPropertyOrder({\"x\", \"y\"})\n+    final static class Location {\n+        public int x;\n+        public int y;\n+\n+        public Location() { }\n+        public Location(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+    }\n+\n+    // IMPORTANT: ordering DOES matter here\n+    @JsonPropertyOrder({ \"name\", \"location\" })\n+    static class Unwrapping {\n+        public String name;\n+        @JsonUnwrapped(prefix=\"loc.\")\n+        public Location location;\n+\n+        public Unwrapping() { }\n+        public Unwrapping(String str, int x, int y) {\n+            name = str;\n+            location = new Location(x, y);\n+        }\n+    }\n+\n+    static class UnwrappingWithAttributes{\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n+        @JacksonXmlProperty(isAttribute=true)\n+        @JsonUnwrapped(prefix=\"loc.\")\n+        public Location location;\n+\n+        public UnwrappingWithAttributes() { }\n+        public UnwrappingWithAttributes(String str, int x, int y) {\n+            name = str;\n+            location = new Location(x, y);\n+        }\n+    }\n+\n+    static class UnwrappingSubWithAttributes{\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n+        @JsonUnwrapped(prefix=\"loc.\")\n+        public LocationWithAttributes location;\n+\n+        public UnwrappingSubWithAttributes() { }\n+        public UnwrappingSubWithAttributes(String str, int x, int y) {\n+            name = str;\n+            location = new LocationWithAttributes(x, y);\n+        }\n+    }\n+\n+    @JsonPropertyOrder({\"x\", \"y\"})\n+    final static class LocationWithAttributes {\n+        @JacksonXmlProperty(isAttribute=true)\n+        public int x;\n+        @JacksonXmlProperty(isAttribute=true)\n+        public int y;\n+\n+        public LocationWithAttributes() { }\n+        public LocationWithAttributes(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests\n+    /**********************************************************\n+     */\n+\n+    /**\n+   * Simple test to verify that explicit schema mapping works fine\n+     * with unwrapped entities\n+     */\n+    public void testSimpleUnwrappingRoundtrip()\n+        throws Exception\n+    {\n+        final String XML = \"<Unwrapping><name>Joe</name><loc.x>15</loc.x><loc.y>27</loc.y></Unwrapping>\";\n+        ObjectMapper mapper = xmlMapper(false);\n+        Unwrapping wrapper = mapper.reader(Unwrapping.class).readValue(XML);\n+        assertNotNull(wrapper);\n+        assertNotNull(wrapper.location);\n+        assertEquals(15, wrapper.location.x);\n+        assertEquals(27, wrapper.location.y);\n+\n+        // should also write out the same way\n+        assertEquals(XML, mapper.writerWithType(Unwrapping.class).writeValueAsString(wrapper));\n+    }\n+\n+    public void testUnwrappingWithAttribute()\n+        throws Exception\n+    {\n+        final String XML = \"<UnwrappingWithAttributes name=\\\"Joe\\\" loc.x=\\\"15\\\" loc.y=\\\"27\\\"/>\";\n+        ObjectMapper mapper = xmlMapper(false);\n+        UnwrappingWithAttributes wrapper = mapper.reader(UnwrappingWithAttributes.class).readValue(XML);\n+        assertNotNull(wrapper);\n+        assertNotNull(wrapper.location);\n+        assertEquals(15, wrapper.location.x);\n+        assertEquals(27, wrapper.location.y);\n+\n+        // should also write out the same way\n+        assertEquals(XML, mapper.writerWithType(UnwrappingWithAttributes.class).writeValueAsString(wrapper));\n+    }\n+\n+    public void testUnwrappingSubWithAttribute()\n+        throws Exception\n+    {\n+        final String XML = \"<UnwrappingSubWithAttributes name=\\\"Joe\\\" loc.x=\\\"15\\\" loc.y=\\\"27\\\"/>\";\n+        ObjectMapper mapper = xmlMapper(false);\n+        UnwrappingSubWithAttributes wrapper = mapper.reader(UnwrappingSubWithAttributes.class).readValue(XML);\n+        assertNotNull(wrapper);\n+        assertNotNull(wrapper.location);\n+        assertEquals(15, wrapper.location.x);\n+        assertEquals(27, wrapper.location.y);\n+\n+        // should also write out the same way\n+        assertEquals(XML, mapper.writerWithType(UnwrappingSubWithAttributes.class).writeValueAsString(wrapper));\n+    }\n+}", "timestamp": 1391113724, "metainfo": ""}