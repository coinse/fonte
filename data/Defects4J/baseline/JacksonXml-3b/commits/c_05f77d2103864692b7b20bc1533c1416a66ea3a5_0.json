{"sha": "05f77d2103864692b7b20bc1533c1416a66ea3a5", "log": "Fix #64", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestDeserialization.java\n \n public class TestDeserialization extends XmlTestBase\n {\n-    /*\n-    /**********************************************************\n-    /* Helper types\n-    /**********************************************************\n-     */\n-\n     static class AttributeBean\n     {\n         @JacksonXmlProperty(isAttribute=true, localName=\"attr\")\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/TestRootListHandling.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.dataformat.xml.JacksonXmlModule;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+/**\n+ * Tests for verifying that Lists (and arrays) can be serialized even\n+ * when they are root values.\n+ */\n+public class TestRootListHandling extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName=\"SR\")\n+    @JsonPropertyOrder({ \"id\", \"name\", \"description\" })\n+    public static class SampleResource {\n+        private Long id;\n+        private String name;\n+        private String description;\n+\n+        public SampleResource() { }\n+        public SampleResource(long id, String n, String d) {\n+            this.id = id;\n+            name = n;\n+            description = d;\n+        }\n+        \n+        public Long getId() {\n+            return id;\n+        }\n+\n+        public void setId(Long id) {\n+            this.id = id;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public void setName(String name) {\n+            this.name = name;\n+        }\n+\n+        public String getDescription() {\n+            return description;\n+        }\n+\n+        public void setDescription(String description) {\n+            this.description = description;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    // Test for ensuring that we can use \".withRootName()\" to override\n+    // default name AND annotation\n+    public void testRenamedRootItem() throws Exception\n+    {\n+        XmlMapper xmlMapper = new XmlMapper();\n+        String xml = xmlMapper\n+                .writer()\n+                .withRootName(\"Shazam\")\n+                .writeValueAsString(new SampleResource(123, \"Foo\", \"Barfy!\"))\n+                .trim();\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<Shazam><id>123</id><name>Foo</name><description>Barfy!</description></Shazam>\", xml);\n+    }\n+    \n+    // for [Issue#38] -- root-level Collections not supported\n+    public void testListSerialization() throws Exception\n+    {\n+        _testListSerialization(true);\n+        _testListSerialization(false);\n+    }\n+        \n+    private void _testListSerialization(boolean useWrapping) throws Exception\n+    {\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(useWrapping);\n+        XmlMapper xmlMapper = new XmlMapper(module);\n+        AnnotationIntrospector introspector = new JacksonAnnotationIntrospector();\n+        xmlMapper.setAnnotationIntrospector(introspector);\n+\n+        SampleResource r1 = new SampleResource();\n+        r1.setId(123L);\n+        r1.setName(\"Albert\");\n+        r1.setDescription(\"desc\");\n+\n+        SampleResource r2 = new SampleResource();\n+        r2.setId(123L);\n+        r2.setName(\"William\");\n+        r2.setDescription(\"desc2\");\n+\n+        List<SampleResource> l = new ArrayList<SampleResource>();\n+        l.add(r1);\n+        l.add(r2);\n+\n+        // to see what JAXB might do, uncomment:\n+//System.out.println(\"By JAXB: \"+jaxbSerialized(l)); //  ArrayList.class, SampleResource.class));\n+\n+        String xml = xmlMapper\n+            .writerWithDefaultPrettyPrinter()\n+            .writeValueAsString(l)\n+            .trim();\n+\n+        // first trivial sanity checks\n+        assertNotNull(xml);\n+        if (xml.indexOf(\"<ArrayList>\") < 0) {\n+            fail(\"Unexpected output: should have <ArrayList> as root element, got: \"+xml);\n+        }\n+\n+        // and then try reading back\n+        JavaType resListType = xmlMapper.getTypeFactory()\n+                .constructCollectionType(List.class, SampleResource.class);\n+        Object ob = xmlMapper.reader(resListType).readValue(xml);\n+        assertNotNull(ob);\n+\n+//      System.err.println(\"XML -> \"+xmlMapper.writerWithDefaultPrettyPrinter().writeValueAsString(ob));\n+        \n+        assertTrue(ob instanceof List);\n+        List<?> resultList = (List<?>) ob;\n+        assertEquals(2, resultList.size());\n+        assertEquals(SampleResource.class, resultList.get(0).getClass());\n+        assertEquals(SampleResource.class, resultList.get(1).getClass());\n+        SampleResource rr = (SampleResource) resultList.get(1);\n+        assertEquals(\"William\", rr.getName());\n+    }\n+\n+    // Related to #38 as well\n+    public void testArraySerialization() throws Exception\n+    {\n+        _testArraySerialization(true);\n+        _testArraySerialization(false);\n+    }\n+    \n+    private void _testArraySerialization(boolean useWrapping) throws Exception\n+    {\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(useWrapping);\n+        XmlMapper xmlMapper = new XmlMapper(module);\n+        AnnotationIntrospector introspector = new JacksonAnnotationIntrospector();\n+        xmlMapper.setAnnotationIntrospector(introspector);\n+\n+        SampleResource r1 = new SampleResource();\n+        r1.setId(123L);\n+        r1.setName(\"Albert\");\n+        r1.setDescription(\"desc\");\n+\n+        SampleResource r2 = new SampleResource();\n+        r2.setId(123L);\n+        r2.setName(\"William\");\n+        r2.setDescription(\"desc2\");\n+\n+        SampleResource[] input = new SampleResource[] { r1, r2 };\n+\n+        // to see what JAXB might do, uncomment:\n+//System.out.println(\"By JAXB: \"+jaxbSerialized(input));\n+\n+        String xml = xmlMapper\n+            .writerWithDefaultPrettyPrinter()\n+            .writeValueAsString(input)\n+            .trim();\n+\n+        // first trivial sanity checks\n+        assertNotNull(xml);\n+        // Is this good name? If not, what should be used instead?\n+        if (xml.indexOf(\"<SampleResources>\") < 0) {\n+            fail(\"Unexpected output: should have <SampleResources> as root element, got: \"+xml);\n+        }\n+\n+        // and then try reading back\n+        SampleResource[] result = xmlMapper.reader(SampleResource[].class).readValue(xml);\n+        assertNotNull(result);\n+\n+//      System.err.println(\"XML -> \"+xmlMapper.writerWithDefaultPrettyPrinter().writeValueAsString(ob));\n+        \n+        assertEquals(2, result.length);\n+        SampleResource rr = result[1];\n+        assertEquals(\"desc2\", rr.getDescription());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/TestUnwrappedLists.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+// Failing unit test(s) wrt [Issue#64]\n+public class TestUnwrappedLists extends XmlTestBase\n+{\n+    static class Optional {\n+        @JacksonXmlText\n+        public String number = \"NOT SET\";\n+\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String type = \"NOT SET\";\n+\n+        public Optional() { }\n+        \n+        // uncommenting this ALSO works:\n+//        public Optional(String n) { number = n; }\n+    }\n+\n+    static class Optionals {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Optional> optional;\n+    } \n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    // // [Issue#64]\n+    public void testOptionalsWithMissingType() throws Exception\n+    {\n+//        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n+        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional>123-456-7890</optional></MultiOptional>\",\n+                Optionals.class);\n+        assertNotNull(ob);\n+        assertNotNull(ob.optional);\n+        assertEquals(1, ob.optional.size());\n+\n+//            System.err.println(\"ob: \" + ob); // works fine\n+\n+        Optional opt = ob.optional.get(0);\n+        assertEquals(\"123-456-7890\", opt.number);\n+        assertEquals(\"NOT SET\", opt.type);\n+    }\n+}", "timestamp": 1377017171, "metainfo": ""}