{"sha": "b9e5755ace5b07f9e058bbe98d7693b3cabfd07d", "log": "More work on #38, adding name-handling improvements for arrays", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java\n import java.util.Collection;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;\n \n /**\n  * Custom specialization of {@link StdTypeResolverBuilder}; needed so that\n     {\n         super.init(idType, idRes);\n         if (_typeProperty != null) {\n-            _typeProperty = sanitizeXmlTypeName(_typeProperty);\n+            _typeProperty = StaxUtil.sanitizeXmlTypeName(_typeProperty);\n         }\n         return this;\n     }\n         if (typeIdPropName == null || typeIdPropName.length() == 0) {\n             typeIdPropName = _idType.getDefaultPropertyName();\n         }\n-        _typeProperty = sanitizeXmlTypeName(typeIdPropName);\n+        _typeProperty = StaxUtil.sanitizeXmlTypeName(typeIdPropName);\n         return this;\n     }\n \n     /* Internal helper methods\n     /**********************************************************************\n      */\n-    \n-    /**\n-     * Since XML names can not contain all characters JSON names can, we may\n-     * need to replace characters. Let's start with trivial replacement of\n-     * ASCII characters that can not be included.\n-     */\n-    protected static String sanitizeXmlTypeName(String name)\n-    {\n-        StringBuilder sb = new StringBuilder(name);\n-        int changes = 0;\n-        for (int i = 0, len = name.length(); i < len; ++i) {\n-            char c = name.charAt(i);\n-            if (c > 127) continue;\n-            if (c >= 'a' && c <= 'z') continue;\n-            if (c >= 'A' && c <= 'Z') continue;\n-            if (c >= '0' && c <= '9') continue;\n-            if (c == '_' || c == '.' || c == '-') continue;\n-            // Ok, need to replace\n-            ++changes;\n-            sb.setCharAt(i, '_');\n-        }\n-        if (changes == 0) {\n-            return name;\n-        }\n-        return sb.toString();\n-    }\n+\n \n     /**\n      * Helper method for encoding regular Java class name in form that\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/StaxUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/StaxUtil.java\n         if (t instanceof RuntimeException) throw (RuntimeException) t;\n         throw new IOException(t);\n     }\n+\n+    /**\n+     * Since XML names can not contain all characters JSON names can, we may\n+     * need to replace characters. Let's start with trivial replacement of\n+     * ASCII characters that can not be included.\n+     */\n+    public static String sanitizeXmlTypeName(String name)\n+    {\n+        StringBuilder sb;\n+        int changes = 0;\n+        // First things first: remove array types' trailing[]...\n+        if (name.endsWith(\"[]\")) {\n+            do {\n+                name = name.substring(0, name.length() - 2);\n+                ++changes;\n+            } while (name.endsWith(\"[]\"));\n+            sb = new StringBuilder(name);\n+            // do trivial pluralization attempt\n+            if (name.endsWith(\"s\")) {\n+                sb.append(\"es\");\n+            } else {\n+                sb.append('s');\n+            }\n+        } else {\n+            sb = new StringBuilder(name);\n+        }\n+        for (int i = 0, len = name.length(); i < len; ++i) {\n+            char c = name.charAt(i);\n+            if (c > 127) continue;\n+            if (c >= 'a' && c <= 'z') continue;\n+            if (c >= 'A' && c <= 'Z') continue;\n+            if (c >= '0' && c <= '9') continue;\n+            if (c == '_' || c == '.' || c == '-') continue;\n+            // Ok, need to replace\n+            ++changes;\n+            if (c == '$') {\n+                sb.setCharAt(i, '.');\n+            } else {\n+                sb.setCharAt(i, '_');\n+            }\n+        }\n+        if (changes == 0) {\n+            return name;\n+        }\n+        return sb.toString();\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup.java\n         QName name;\n         synchronized (_rootNames) {\n             name = _rootNames.get(key);\n-            if (name == null) {\n-                BeanDescription beanDesc = config.introspectClassAnnotations(rootType);\n-                AnnotationIntrospector intr = config.getAnnotationIntrospector();\n-                AnnotatedClass ac = beanDesc.getClassInfo();\n-                String localName = null;\n-                String ns = null;\n+        }\n+        if (name != null) {\n+            return name;\n+        }\n \n-                PropertyName root = intr.findRootName(ac);\n-                if (root != null) {\n-                    localName = root.getSimpleName();\n-                    ns = root.getNamespace();\n-                }\n-                // No answer so far? Let's just default to using simple class name\n-                if (localName == null || localName.length() == 0) {\n-                    // Should we strip out enclosing class tho? For now, nope:\n-                    localName = rootType.getSimpleName();\n-                    name = new QName(\"\", localName);\n-                } else {\n-                    // Otherwise let's see if there's namespace, too (if we are missing it)\n-                    if (ns == null || ns.length() == 0) {\n-                        ns = findNamespace(intr, ac);\n-                    }\n-                }\n-                if (ns == null) { // some QName impls barf on nulls...\n-                    ns = \"\";\n-                }\n-                name = new QName(ns, localName);\n-                _rootNames.put(key, name);\n+        BeanDescription beanDesc = config.introspectClassAnnotations(rootType);\n+        AnnotationIntrospector intr = config.getAnnotationIntrospector();\n+        AnnotatedClass ac = beanDesc.getClassInfo();\n+        String localName = null;\n+        String ns = null;\n+\n+        PropertyName root = intr.findRootName(ac);\n+        if (root != null) {\n+            localName = root.getSimpleName();\n+            ns = root.getNamespace();\n+        }\n+        // No answer so far? Let's just default to using simple class name\n+        if (localName == null || localName.length() == 0) {\n+            // Should we strip out enclosing class tho? For now, nope:\n+            // one caveat: array simple names end with \"[]\"; also, \"$\" needs replacing\n+            localName = StaxUtil.sanitizeXmlTypeName(rootType.getSimpleName());\n+            name = new QName(\"\", localName);\n+        } else {\n+            // Otherwise let's see if there's namespace, too (if we are missing it)\n+            if (ns == null || ns.length() == 0) {\n+                ns = findNamespace(intr, ac);\n             }\n+        }\n+        if (ns == null) { // some QName impls barf on nulls...\n+            ns = \"\";\n+        }\n+        name = new QName(ns, localName);\n+        synchronized (_rootNames) {\n+            _rootNames.put(key, name);\n         }\n         return name;\n     }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestRootListHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestRootListHandling.java\n     // for [Issue#38] -- root-level Collections not supported\n     public void testListSerialization() throws Exception\n     {\n+        _testListSerialization(true);\n+        _testListSerialization(false);\n+    }\n+        \n+    private void _testListSerialization(boolean useWrapping) throws Exception\n+    {\n         JacksonXmlModule module = new JacksonXmlModule();\n-//        module.setDefaultUseWrapper(true);\n+        module.setDefaultUseWrapper(useWrapping);\n         XmlMapper xmlMapper = new XmlMapper(module);\n         AnnotationIntrospector introspector = new JacksonAnnotationIntrospector();\n         xmlMapper.setAnnotationIntrospector(introspector);\n-        \n+\n         SampleResource r1 = new SampleResource();\n         r1.setId(123L);\n         r1.setName(\"Albert\");\n         assertEquals(SampleResource.class, resultList.get(1).getClass());\n         SampleResource rr = (SampleResource) resultList.get(1);\n         assertEquals(\"William\", rr.getName());\n+    }\n \n+    // Related to #38 as well\n+    public void testArraySerialization() throws Exception\n+    {\n+        _testArraySerialization(true);\n+        _testArraySerialization(false);\n     }\n+    \n+    private void _testArraySerialization(boolean useWrapping) throws Exception\n+    {\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(useWrapping);\n+        XmlMapper xmlMapper = new XmlMapper(module);\n+        AnnotationIntrospector introspector = new JacksonAnnotationIntrospector();\n+        xmlMapper.setAnnotationIntrospector(introspector);\n+\n+        SampleResource r1 = new SampleResource();\n+        r1.setId(123L);\n+        r1.setName(\"Albert\");\n+        r1.setDescription(\"desc\");\n+\n+        SampleResource r2 = new SampleResource();\n+        r2.setId(123L);\n+        r2.setName(\"William\");\n+        r2.setDescription(\"desc2\");\n+\n+        SampleResource[] input = new SampleResource[] { r1, r2 };\n+\n+        // to see what JAXB might do, uncomment:\n+//System.out.println(\"By JAXB: \"+jaxbSerialized(input));\n+\n+        String xml = xmlMapper\n+            .writerWithDefaultPrettyPrinter()\n+            .writeValueAsString(input)\n+            .trim();\n+\n+        // first trivial sanity checks\n+        assertNotNull(xml);\n+        // Is this good name? If not, what should be used instead?\n+        if (xml.indexOf(\"<SampleResources>\") < 0) {\n+            fail(\"Unexpected output: should have <SampleResources> as root element, got: \"+xml);\n+        }\n+\n+        // and then try reading back\n+        SampleResource[] result = xmlMapper.reader(SampleResource[].class).readValue(xml);\n+        assertNotNull(result);\n+\n+//      System.err.println(\"XML -> \"+xmlMapper.writerWithDefaultPrettyPrinter().writeValueAsString(ob));\n+        \n+        assertEquals(2, result.length);\n+        SampleResource rr = result[1];\n+        assertEquals(\"desc2\", rr.getDescription());\n+    }\n+\n }", "timestamp": 1376585565, "metainfo": ""}