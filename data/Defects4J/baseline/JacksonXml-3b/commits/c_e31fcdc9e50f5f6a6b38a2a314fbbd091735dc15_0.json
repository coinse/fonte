{"sha": "e31fcdc9e50f5f6a6b38a2a314fbbd091735dc15", "log": "Merge pull request #82 from pgelinas/master  Added a unit test for issue 81.", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/types/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/types/TestPolymorphic.java\n package com.fasterxml.jackson.dataformat.xml.types;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n \n     \n         public SubTypeWithClassObject() { }\n         public SubTypeWithClassObject(String s) { name = s; }\n+    }\n+\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+    protected static class TypeWithClassPropertyAndObjectId {\n+        public String id;\n+\n+        public TypeWithClassPropertyAndObjectId(String id) { this.id = id; }\n+    }\n+\n+    protected static class Wrapper {\n+        public List<TypeWithClassPropertyAndObjectId> data;\n+\n+        public Wrapper(List<TypeWithClassPropertyAndObjectId> data) { this.data = data; }\n     }\n \n     /*\n         assertEquals(SubTypeWithClassObject.class, result.getClass());\n         assertEquals(\"Foobar\", ((SubTypeWithClassObject) result).name);\n     }\n+\n+    /**\n+     * Test for issue 81\n+     */\n+    public void testAsPropertyWithObjectId() throws Exception {\n+        List<TypeWithClassPropertyAndObjectId> data = new ArrayList<TestPolymorphic.TypeWithClassPropertyAndObjectId>();\n+        TypeWithClassPropertyAndObjectId object = new TypeWithClassPropertyAndObjectId(\"Foobar\");\n+        data.add(object);\n+        // This will be written as an id reference instead of object; as such, no type info will be written.\n+        data.add(object);\n+        String xml = _xmlMapper.writeValueAsString(new Wrapper(data));\n+        Wrapper result = _xmlMapper.readValue(xml, Wrapper.class);\n+        assertNotNull(result);\n+        assertSame(result.data.get(0), result.data.get(1));\n+        assertEquals(\"Foobar\", result.data.get(0).id);\n+    }\n }\n    \n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java\n             return encodeXmlClassName(super.idFromValue(value));\n         }\n \n+        @SuppressWarnings(\"deprecation\")\n         @Override\n         public JavaType typeFromId(String id) {\n             return super.typeFromId(decodeXmlClassName(id));\n             return encodeXmlClassName(super.idFromValue(value));\n         }\n \n+        @SuppressWarnings(\"deprecation\")\n         @Override\n         public JavaType typeFromId(String id) {\n             return super.typeFromId(decodeXmlClassName(id));\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n                 if (prop != null) { // can have nulls in filtered list\n                     prop.serializeAsField(bean, xgen, provider);\n                 }\n+                // Reset to avoid next value being written as unwrapped, \n+                // for example when property is suppressed\n+                if (i == textIndex) {\n+                    xgen.setNextIsUnwrapped(false);\n+                }\n             }\n             if (_anyGetterWriter != null) {\n                 _anyGetterWriter.getAndSerialize(bean, xgen, provider);\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestIssue86.java\n+package com.fasterxml.jackson.dataformat.xml.unwrapped;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.Assert;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class TestIssue86 {\n+\n+  @Test\n+  public void deserializeUnwrappedListWhenLocalNameForRootElementAndXmlPropertyMatch() throws Exception {\n+    final String source =\n+        \"<test id=\\\"0\\\">\" +\n+            \"<test id=\\\"0.1\\\">\" +\n+                \"<test id=\\\"0.1.1\\\"/>\" +\n+            \"</test>\" +\n+            \"<test id=\\\"0.2\\\"/>\" +\n+            \"<test id=\\\"0.3\\\">\" +\n+                \"<test id=\\\"0.3.1\\\"/>\" +\n+            \"</test>\" +\n+        \"</test>\";\n+\n+    final Issue86 before = new Issue86(\n+        \"0\",\n+        Arrays.asList(\n+            new Issue86(\n+                \"0.1\",\n+                Arrays.asList(\n+                    new Issue86(\n+                        \"0.1.1\",\n+                        null))),\n+            new Issue86(\n+                \"0.2\",\n+                null),\n+            new Issue86(\n+                \"0.3\",\n+                Arrays.asList(\n+                    new Issue86(\n+                        \"0.3.1\",\n+                        null)))));\n+\n+    final XmlMapper mapper = new XmlMapper();\n+    mapper.setSerializationInclusion(Include.NON_NULL);\n+\n+    final String xml = mapper.writeValueAsString(before);\n+    Assert.assertEquals(source, xml);\n+\n+    final Issue86 after = mapper.readValue(xml, Issue86.class);\n+    Assert.assertEquals(before, after);\n+  }\n+\n+  @JacksonXmlRootElement(localName = \"test\")\n+  public static class Issue86 {\n+\n+    @JacksonXmlProperty(localName = \"id\", isAttribute = true)\n+    private String id;\n+\n+    @JacksonXmlElementWrapper(useWrapping = false)\n+    @JacksonXmlProperty(localName = \"test\")\n+    private List<Issue86> children;\n+\n+    public Issue86() {}\n+\n+    public Issue86(final String id, final List<Issue86> children) {\n+      this.id = id;\n+      this.children = children;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object other) {\n+      if (other == null) {\n+        return false;\n+      }\n+\n+      if (other == this) {\n+        return true;\n+      }\n+\n+      if (!(other instanceof Issue86)) {\n+        return false;\n+      }\n+\n+      final Issue86 otherIssue86 = (Issue86) other;\n+      return otherIssue86.id.equals(id) && otherIssue86.children.equals(children);\n+    }\n+  }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestXmlText.java\n+package com.fasterxml.jackson.dataformat.xml.unwrapped;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText;\n+\n+public class TestXmlText extends XmlTestBase\n+{\n+    @JsonPropertyOrder({\"first\",\"second\"})\n+    class Data{\n+        @JacksonXmlText\n+        public String first;\n+        public String second;\n+        public Data(String first, String second) {\n+            this.first = first;\n+            this.second = second;\n+        }\n+    }\n+\n+    public void testXmlTextWithSuppressedValue() throws Exception\n+    {\n+        final XmlMapper mapper = new XmlMapper();\n+        mapper.setSerializationInclusion(Include.NON_EMPTY);\n+        String xml = mapper.writeValueAsString(new Data(\"\",\"second\"));\n+        String expectedXml = \"<Data><second>second</second></Data>\";\n+        assertEquals(expectedXml, xml);\n+    }\n+}", "timestamp": 1388030507, "metainfo": ""}