{"sha": "faa84af5851d16b7780c822dbc5a13b71dff8fa1", "log": "minor stylistic changes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n     /* Internal methods\n     /**********************************************************************\n      */\n-    \n-    protected AnnotationIntrospector _constructIntrospector()\n-    {\n+\n+    protected AnnotationIntrospector _constructIntrospector() {\n         return new JacksonXmlAnnotationIntrospector(_cfgDefaultUseWrapper);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n  */\n public class XmlMapper extends ObjectMapper\n {\n-    private static final long serialVersionUID = -724333029147285918L;\n+    // as of 2.5\n+    private static final long serialVersionUID = -1212805483143619605L;\n \n     protected final static JacksonXmlModule DEFAULT_XML_MODULE = new JacksonXmlModule();\n     \n      * \n      * @since 2.1\n      */\n-    protected void setXMLTextElementName(String name)\n-    {\n+    protected void setXMLTextElementName(String name) {\n         ((XmlFactory) _jsonFactory).setXMLTextElementName(name);\n     }\n \n     protected PrettyPrinter _defaultPrettyPrinter() {\n         return new DefaultXmlPrettyPrinter();\n     }\n-\n-    /*\n-    /**********************************************************\n-    /* Helper methods\n-    /**********************************************************\n-     */\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlReadContext.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlReadContext.java\n  * state data we need.\n  *<p>\n  * Almost same as standard <code>JsonReaderContext</code>, but\n- * cut'n pasted since the impl is final for performance reasons;\n- * this class is one of hot spots in profiling.\n+ * custom version needed to be able to keep track of names\n+ * of properties that need wrapping; this is needed to\n+ * support wrapped/unwrapped Collection/array values.\n  */\n public final class XmlReadContext\n     extends JsonStreamContext\n     \n     // // // Factory methods\n \n-    public static XmlReadContext createRootContext(int lineNr, int colNr)\n-    {\n+    public static XmlReadContext createRootContext(int lineNr, int colNr) {\n         return new XmlReadContext(null, TYPE_ROOT, lineNr, colNr);\n     }\n \n-    public static XmlReadContext createRootContext()\n-    {\n+    public static XmlReadContext createRootContext() {\n         return new XmlReadContext(null, TYPE_ROOT, 1, 0);\n     }\n     \n         throw new UnsupportedOperationException();\n     }\n \n-    public void setCurrentName(String name)\n-    {\n+    public void setCurrentName(String name) {\n         _currentName = name;\n     }\n \n      * @return Location pointing to the point where the context\n      *   start marker was found\n      */\n-    public final JsonLocation getStartLocation(Object srcRef)\n-    {\n-        /* We don't keep track of offsets at this level (only\n-         * reader does)\n-         */\n+    public final JsonLocation getStartLocation(Object srcRef) {\n+        // We don't keep track of offsets at this level (only reader does)\n         long totalChars = -1L;\n \n         return new JsonLocation(srcRef, totalChars, _lineNr, _columnNr);\n         return _namesToWrap;\n     }\n \n-    protected void convertToArray()\n-    {\n+    protected void convertToArray() {\n         _type = TYPE_ARRAY;\n     }\n     ", "timestamp": 1412654961, "metainfo": ""}