{"sha": "ff79bf8e5d570ba52ab57372c74bbe9851632360", "log": "Fix a compilation issue wrt Jackson 1.9", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n package com.fasterxml.jackson.xml.jaxb;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.AnnotatedElement;\n+import java.lang.reflect.Member;\n \n import javax.xml.bind.annotation.XmlAttribute;\n import javax.xml.bind.annotation.XmlElement;\n \n import org.codehaus.jackson.map.introspect.Annotated;\n import org.codehaus.jackson.map.introspect.AnnotatedClass;\n+import org.codehaus.jackson.map.introspect.AnnotatedParameter;\n import org.codehaus.jackson.xc.JaxbAnnotationIntrospector;\n \n import com.fasterxml.jackson.xml.XmlAnnotationIntrospector;\n          *  currently this method is not needed, and when it is,\n          *  this can be improved.\n          */\n-\n         if (ann instanceof AnnotatedClass) {\n             /* For classes, it must be @XmlRootElement. Also, we do\n              * want to use defaults from package, base class\n         return MARKER_FOR_DEFAULT.equals(value) ? \"\" : value;\n     }\n \n+    /* NOTE: copied verbatim from Jackson 1.9, since its visibility was\n+     * lowered (accidentally...)\n+     */\n+    protected <A extends Annotation> A findAnnotation(Class<A> annotationClass, Annotated annotated,\n+            boolean includePackage, boolean includeClass, boolean includeSuperclasses)\n+    {\n+        A annotation = annotated.getAnnotation(annotationClass);\n+        if (annotation != null) {\n+            return annotation;\n+        }\n+        Class<?> memberClass = null;\n+        if (annotated instanceof AnnotatedParameter) {\n+            memberClass = ((AnnotatedParameter) annotated).getDeclaringClass();\n+        } else {\n+            AnnotatedElement annType = annotated.getAnnotated();\n+            if (annType instanceof Member) {\n+                memberClass = ((Member) annType).getDeclaringClass();\n+                if (includeClass) {\n+                    annotation = (A) memberClass.getAnnotation(annotationClass);\n+                    if (annotation != null) {\n+                        return annotation;\n+                    }\n+                }\n+            } else if (annType instanceof Class<?>) {\n+                memberClass = (Class<?>) annType;\n+            } else {\n+                throw new IllegalStateException(\"Unsupported annotated member: \" + annotated.getClass().getName());\n+            }\n+        }\n+        if (memberClass != null) {\n+            if (includeSuperclasses) {\n+                Class<?> superclass = memberClass.getSuperclass();\n+                while (superclass != null && superclass != Object.class) {\n+                    annotation = (A) superclass.getAnnotation(annotationClass);\n+                    if (annotation != null) {\n+                        return annotation;\n+                    }\n+                    superclass = superclass.getSuperclass();\n+                }\n+            }\n+            if (includePackage) {\n+                Package pkg = memberClass.getPackage();\n+                if (pkg != null) {\n+                    return memberClass.getPackage().getAnnotation(annotationClass);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n }", "timestamp": 1321050086, "metainfo": ""}