{"sha": "a341784eacb9c056fa92eac0ce031827a1bedbda", "log": "Refactor tests by moving failing (for now) tests out of regular dirs, to isolate them and allow builds", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/xml/TestEnums.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestEnums.java\n package com.fasterxml.jackson.xml;\n-\n-import org.codehaus.jackson.annotate.JsonTypeInfo;\n-import org.codehaus.jackson.map.ObjectMapper;\n \n public class TestEnums extends XmlTestBase\n {\n         public EnumBean() { }\n         public EnumBean(TestEnum v) { value = v; }\n     }\n-    \n-    static class UntypedEnumBean\n-    {\n-       @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property=\"__type\")\n-// this would actually work:\n-//        @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n-        public Object value;\n-\n-        public UntypedEnumBean() { }\n-        public UntypedEnumBean(TestEnum v) { value = v; }\n-    }\n \n     /*\n     /**********************************************************\n         assertNotNull(result);\n         assertEquals(TestEnum.B, result.value);\n     }\n-\n-    public void testUntypedEnum() throws Exception\n-    {\n-        ObjectMapper mapper = new XmlMapper();\n-        String str = mapper.writeValueAsString(new UntypedEnumBean(TestEnum.B));\n-        UntypedEnumBean result = mapper.readValue(str, UntypedEnumBean.class);\n-        assertNotNull(result);\n-        assertNotNull(result.value);\n-        Object ob = result.value;\n-        assertSame(TestEnum.class, ob.getClass());\n-        assertEquals(TestEnum.B, result.value);\n-    }\n }\n--- a/src/test/java/com/fasterxml/jackson/xml/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestPolymorphic.java\n     @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_ARRAY)\n     static class BaseTypeWithClassArray { }\n \n-    static class SubTypeWithClassArray extends BaseTypeWithClassArray {\n-        public String name;\n+    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n+    private static class BaseTypeWithClassObject { }\n \n-        public SubTypeWithClassArray() { }\n-        public SubTypeWithClassArray(String s) { name = s; }\n-    }\n-\n-    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n-    static class BaseTypeWithClassObject { }\n-\n-    static class SubTypeWithClassObject extends BaseTypeWithClassObject {\n+    protected static class SubTypeWithClassObject extends BaseTypeWithClassObject {\n         public String name;\n     \n         public SubTypeWithClassObject() { }\n         public SubTypeWithClassObject(String s) { name = s; }\n-    }\n-    \n-    /**\n-     * If not used as root element, need to use a wrapper\n-     */\n-    static class ClassArrayWrapper\n-    {\n-        public BaseTypeWithClassArray wrapped;\n-\n-        public ClassArrayWrapper() { }\n-        public ClassArrayWrapper(String s) { wrapped = new SubTypeWithClassArray(s); }\n     }\n \n     /*\n         assertEquals(SubTypeWithClassProperty.class, result.getClass());\n         assertEquals(\"Foobar\", ((SubTypeWithClassProperty) result).name);\n     }\n-    \n-    /* 19-Dec-2010, tatu: Let's hold off these tests, due to issues with inclusions.\n-     */\n-    // Does not work since array wrapping is not explicitly forced (unlike with collection\n-    // property of a bean\n-    public void testAsClassArray() throws Exception\n-    {\n-        String xml = _xmlMapper.writeValueAsString(new SubTypeWithClassArray(\"Foobar\"));\n-        Object result = _xmlMapper.readValue(xml, BaseTypeWithClassArray.class);\n-        assertNotNull(result);\n-        assertEquals(SubTypeWithClassArray.class, result.getClass());\n-        assertEquals(\"Foobar\", ((SubTypeWithClassArray) result).name);\n-    }\n-\n-    // Hmmh. Does not yet quite work either, since we do not properly force\n-    // array context when writing...\n-    public void testAsWrappedClassArray() throws Exception\n-    {\n-        String xml = _xmlMapper.writeValueAsString(new ClassArrayWrapper(\"Foobar\"));\n-        ClassArrayWrapper result = _xmlMapper.readValue(xml, ClassArrayWrapper.class);\n-        assertNotNull(result);\n-        assertEquals(SubTypeWithClassArray.class, result.wrapped.getClass());\n-        assertEquals(\"Foobar\", ((SubTypeWithClassArray) result.wrapped).name);\n-    }\n         \n     public void testAsClassObject() throws Exception\n     {\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/xml/failing/TestEnums.java\n+package com.fasterxml.jackson.xml.failing;\n+\n+import org.codehaus.jackson.annotate.JsonTypeInfo;\n+import org.codehaus.jackson.map.ObjectMapper;\n+\n+import com.fasterxml.jackson.xml.XmlMapper;\n+import com.fasterxml.jackson.xml.XmlTestBase;\n+\n+public class TestEnums extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    static enum TestEnum { A, B, C; }\n+    \n+    static class UntypedEnumBean\n+    {\n+       @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property=\"__type\")\n+// this would actually work:\n+//        @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n+        public Object value;\n+\n+        public UntypedEnumBean() { }\n+        public UntypedEnumBean(TestEnum v) { value = v; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testUntypedEnum() throws Exception\n+    {\n+        ObjectMapper mapper = new XmlMapper();\n+        String str = mapper.writeValueAsString(new UntypedEnumBean(TestEnum.B));\n+        UntypedEnumBean result = mapper.readValue(str, UntypedEnumBean.class);\n+        assertNotNull(result);\n+        assertNotNull(result.value);\n+        Object ob = result.value;\n+        assertSame(TestEnum.class, ob.getClass());\n+        assertEquals(TestEnum.B, result.value);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/xml/failing/TestPolymorphic.java\n+package com.fasterxml.jackson.xml.failing;\n+\n+import org.codehaus.jackson.annotate.JsonTypeInfo;\n+\n+import com.fasterxml.jackson.xml.*;\n+\n+public class TestPolymorphic extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY)\n+    static class BaseTypeWithClassProperty { }\n+\n+    static class SubTypeWithClassProperty extends BaseTypeWithClassProperty {\n+        public String name;\n+\n+        public SubTypeWithClassProperty() { }\n+        public SubTypeWithClassProperty(String s) { name = s; }\n+    }\n+    \n+    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_ARRAY)\n+    static class BaseTypeWithClassArray { }\n+\n+    static class SubTypeWithClassArray extends BaseTypeWithClassArray {\n+        public String name;\n+\n+        public SubTypeWithClassArray() { }\n+        public SubTypeWithClassArray(String s) { name = s; }\n+    }\n+\n+    @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n+    static class BaseTypeWithClassObject { }\n+\n+    static class SubTypeWithClassObject extends BaseTypeWithClassObject {\n+        public String name;\n+    \n+        public SubTypeWithClassObject() { }\n+        public SubTypeWithClassObject(String s) { name = s; }\n+    }\n+    \n+    /**\n+     * If not used as root element, need to use a wrapper\n+     */\n+    static class ClassArrayWrapper\n+    {\n+        public BaseTypeWithClassArray wrapped;\n+\n+        public ClassArrayWrapper() { }\n+        public ClassArrayWrapper(String s) { wrapped = new SubTypeWithClassArray(s); }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Set up\n+    /**********************************************************\n+     */\n+\n+    protected XmlMapper _xmlMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _xmlMapper = new XmlMapper();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+    \n+    /* 19-Dec-2010, tatu: Let's hold off these tests, due to issues with inclusions.\n+     */\n+    // Does not work since array wrapping is not explicitly forced (unlike with collection\n+    // property of a bean\n+    public void testAsClassArray() throws Exception\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new SubTypeWithClassArray(\"Foobar\"));\n+        Object result = _xmlMapper.readValue(xml, BaseTypeWithClassArray.class);\n+        assertNotNull(result);\n+        assertEquals(SubTypeWithClassArray.class, result.getClass());\n+        assertEquals(\"Foobar\", ((SubTypeWithClassArray) result).name);\n+    }\n+\n+    // Hmmh. Does not yet quite work either, since we do not properly force\n+    // array context when writing...\n+    public void testAsWrappedClassArray() throws Exception\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new ClassArrayWrapper(\"Foobar\"));\n+        ClassArrayWrapper result = _xmlMapper.readValue(xml, ClassArrayWrapper.class);\n+        assertNotNull(result);\n+        assertEquals(SubTypeWithClassArray.class, result.wrapped.getClass());\n+        assertEquals(\"Foobar\", ((SubTypeWithClassArray) result.wrapped).name);\n+    }\n+}\n+   ", "timestamp": 1311100762, "metainfo": ""}