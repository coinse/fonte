{"sha": "621128d7d51e5a7dd1d6ec80ba9728817aa48414", "log": "Made XmlMapper JDK serializable as well..", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n  * Module that implements most functionality needed to support producing and\n  * consuming XML instead of JSON.\n  */\n-public class JacksonXmlModule extends SimpleModule\n+public class JacksonXmlModule\n+    extends SimpleModule\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * Determination of whether indexed properties (arrays, Lists) that are not explicitly\n      * annotated (with {@link com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper}\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n  */\n public class XmlBeanDeserializerModifier\n     extends BeanDeserializerModifier\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * Virtual name used for text segments.\n      */\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n  * with XML-specific one; mostly to ensure that attribute properties are output\n  * before element properties.\n  */\n-public class XmlBeanSerializerModifier extends BeanSerializerModifier\n+public class XmlBeanSerializerModifier\n+    extends BeanSerializerModifier\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n+    public XmlBeanSerializerModifier() { }\n+    \n     /*\n     /**********************************************************\n     /* Overridden methods\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n  * is bit briefer (and uglier...).\n  */\n public class DefaultXmlPrettyPrinter\n-    implements XmlPrettyPrinter\n+    implements XmlPrettyPrinter,\n+        java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * Interface that defines objects that can produce indentation used\n      * to separate object entries and array values. Indentation in this\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup.java\n import com.fasterxml.jackson.databind.util.LRUMap;\n import com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector;\n \n-\n /**\n  * Helper class used for efficiently finding root element name used with\n  * XML serializations.\n  */\n public class XmlRootNameLookup\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * For efficient operation, let's try to minimize number of times we\n      * need to introspect root element name to use.\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestJDKSerializability.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestJDKSerializability.java\n  */\n public class TestJDKSerializability extends XmlTestBase\n {\n-    public void testJsonFactorySerializable() throws Exception\n+    static class MyPojo {\n+        public int x;\n+        private int y;\n+        \n+        public MyPojo() { }\n+        public MyPojo(int x0, int y0) {\n+            x = x0;\n+            y = y0;\n+        }\n+        \n+        public int getY() { return y; }\n+        public void setY(int y) { this.y = y; }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */    \n+\n+    public void testXmlFactory() throws Exception\n     {\n         XmlFactory f = new XmlFactory();\n         String origXml = \"<root><a>text</a></root>\";\n         assertEquals(origXml, _writeXml(f2, true));\n     }\n \n+    public void testMapper() throws IOException\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        final String EXP = \"<MyPojo><x>2</x><y>3</y></MyPojo>\";\n+        final MyPojo p = new MyPojo(2, 3);\n+        assertEquals(EXP, mapper.writeValueAsString(p));\n+\n+        byte[] bytes = jdkSerialize(mapper);\n+        XmlMapper mapper2 = jdkDeserialize(bytes);\n+        assertEquals(EXP, mapper2.writeValueAsString(p));\n+        MyPojo p2 = mapper2.readValue(EXP, MyPojo.class);\n+        assertEquals(p.x, p2.x);\n+        assertEquals(p.y, p2.y);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Helper methods", "timestamp": 1349556152, "metainfo": ""}