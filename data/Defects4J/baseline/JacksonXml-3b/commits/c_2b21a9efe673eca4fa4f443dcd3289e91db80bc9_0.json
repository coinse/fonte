{"sha": "2b21a9efe673eca4fa4f443dcd3289e91db80bc9", "log": "Fixed issue #56", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n     @Override\n     public Boolean isOutputAsText(Annotated ann)\n     {\n-    \tJacksonXmlText prop = ann.getAnnotation(JacksonXmlText.class);\n+        JacksonXmlText prop = ann.getAnnotation(JacksonXmlText.class);\n         if (prop != null) {\n             return prop.value() ? Boolean.TRUE : Boolean.FALSE;\n         }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n         try {\n             if (_nextIsAttribute) { // must write attribute name and value with one call\n                 _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text);\n-            } else {\n-                if (_xmlPrettyPrinter != null) {\n-                    _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n-                            _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n-                            text);\n-                } else if (checkNextIsUnwrapped()) {\n-                    _xmlWriter.writeCharacters(text);\n-                } else {\n-                    _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n-                    _xmlWriter.writeCharacters(text);\n-                    _xmlWriter.writeEndElement();\n-                }\n+            } else if (checkNextIsUnwrapped()) {\n+                // [Issue#56] Should figure out how to prevent indentation for end element\n+                //   but for now, let's just make sure structure is correct\n+                //if (_xmlPrettyPrinter != null) { ... }\n+                _xmlWriter.writeCharacters(text);\n+            } else if (_xmlPrettyPrinter != null) {\n+                _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n+                        _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n+                        text);\n+            } else {\n+                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n+                _xmlWriter.writeCharacters(text);\n+                _xmlWriter.writeEndElement();\n             } \n         } catch (XMLStreamException e) {\n             StaxUtil.throwXmlAsIOException(e);\n             } else if (checkNextIsUnwrapped()) {\n             \t// should we consider pretty-printing or not?\n                 _xmlWriter.writeCharacters(text, offset, len);\n-            } else {\n-                if (_xmlPrettyPrinter != null) {\n-                \t_xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n-                \t\t\t_nextName.getNamespaceURI(), _nextName.getLocalPart(),\n-                \t\t\ttext, offset, len);\n-                } else {\n-\t                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n-\t                _xmlWriter.writeCharacters(text, offset, len);\n-\t                _xmlWriter.writeEndElement();\n-                }\n+            } else if (_xmlPrettyPrinter != null) {\n+                _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n+                        _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n+                        text, offset, len);\n+            } else {\n+                _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n+                _xmlWriter.writeCharacters(text, offset, len);\n+                _xmlWriter.writeEndElement();\n             }\n         } catch (XMLStreamException e) {\n             StaxUtil.throwXmlAsIOException(e);\n      */\n     protected boolean checkNextIsUnwrapped()\n     {\n-    \tif (_nextIsUnwrapped) {\n-    \t\t_nextIsUnwrapped = false;\n-    \t\treturn true;\n-    \t}\n-    \treturn false;\n+        if (_nextIsUnwrapped) {\n+    \t\t    _nextIsUnwrapped = false;\n+    \t\t    return true;\n+        }\n+        return false;\n     }\n     \n     protected void handleMissingName()\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n         }\n         final int textIndex = _textPropertyIndex;\n         final QName[] xmlNames = _xmlNames;\n-        \n         int i = 0;\n+\n         try {\n             for (final int len = props.length; i < len; ++i) {\n                 if (i == attrCount) {\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n import org.codehaus.stax2.XMLStreamWriter2;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.util.Instantiatable;\n \n import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;\n import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;\n  * is bit briefer (and uglier...).\n  */\n public class DefaultXmlPrettyPrinter\n-    implements XmlPrettyPrinter,\n+    implements XmlPrettyPrinter, Instantiatable<DefaultXmlPrettyPrinter>,\n         java.io.Serializable\n {\n-    private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = -1811120944652457526L;\n \n     /**\n      * Interface that defines objects that can produce indentation used\n      * Number of open levels of nesting. Used to determine amount of\n      * indentation to use.\n      */\n-    protected int _nesting = 0;\n+    protected transient int _nesting = 0;\n     \n     /*\n     /**********************************************************\n     }\n \n     public void spacesInObjectEntries(boolean b) { _spacesInObjectEntries = b; }\n+\n+    /*\n+    /**********************************************************\n+    /* Instantiatable impl\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public DefaultXmlPrettyPrinter createInstance() {\n+        return new DefaultXmlPrettyPrinter();\n+    }\n \n     /*\n     /**********************************************************\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestTextValue.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestTextValue.java\n     \n     public void testSerializeAsText() throws IOException\n     {\n-    \tString xml = MAPPER.writeValueAsString(new Simple());\n-    \tassertEquals(\"<Simple a=\\\"13\\\">something</Simple>\", xml);\n+        String xml = MAPPER.writeValueAsString(new Simple());\n+        assertEquals(\"<Simple a=\\\"13\\\">something</Simple>\", xml);\n+        // [Issue#56]: should work with indentation as well\n+        xml = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(new Simple());\n+        // not optimal, but has to do\n+        assertEquals(\"<Simple a=\\\"13\\\">something\\n</Simple>\", xml);\n     }\n \n     public void testDeserializeAsText() throws IOException", "timestamp": 1363058387, "metainfo": ""}