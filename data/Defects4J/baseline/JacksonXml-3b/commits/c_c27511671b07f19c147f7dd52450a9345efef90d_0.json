{"sha": "c27511671b07f19c147f7dd52450a9345efef90d", "log": "Added a unit test for issue 81.", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/types/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/types/TestPolymorphic.java\n package com.fasterxml.jackson.dataformat.xml.types;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n \n     \n         public SubTypeWithClassObject() { }\n         public SubTypeWithClassObject(String s) { name = s; }\n+    }\n+\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\n+    protected static class TypeWithClassPropertyAndObjectId {\n+        public String id;\n+\n+        public TypeWithClassPropertyAndObjectId(String id) { this.id = id; }\n+    }\n+\n+    protected static class Wrapper {\n+        public List<TypeWithClassPropertyAndObjectId> data;\n+\n+        public Wrapper(List<TypeWithClassPropertyAndObjectId> data) { this.data = data; }\n     }\n \n     /*\n         assertEquals(SubTypeWithClassObject.class, result.getClass());\n         assertEquals(\"Foobar\", ((SubTypeWithClassObject) result).name);\n     }\n+\n+    /**\n+     * Test for issue 81\n+     */\n+    public void testAsPropertyWithObjectId() throws Exception {\n+        List<TypeWithClassPropertyAndObjectId> data = new ArrayList<TestPolymorphic.TypeWithClassPropertyAndObjectId>();\n+        TypeWithClassPropertyAndObjectId object = new TypeWithClassPropertyAndObjectId(\"Foobar\");\n+        data.add(object);\n+        // This will be written as an id reference instead of object; as such, no type info will be written.\n+        data.add(object);\n+        String xml = _xmlMapper.writeValueAsString(new Wrapper(data));\n+        Wrapper result = _xmlMapper.readValue(xml, Wrapper.class);\n+        assertNotNull(result);\n+        assertSame(result.data.get(0), result.data.get(1));\n+        assertEquals(\"Foobar\", result.data.get(0).id);\n+    }\n }\n    ", "timestamp": 1386197946, "metainfo": ""}