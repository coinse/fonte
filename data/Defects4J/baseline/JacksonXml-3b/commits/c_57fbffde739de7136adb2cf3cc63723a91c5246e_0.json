{"sha": "57fbffde739de7136adb2cf3cc63723a91c5246e", "log": "Eclise (juno) warning cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n         // Better ensure namespaces get built properly, so:\n         xmlOut.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE);\n         // and for parser, force coalescing as well (much simpler to use)\n-        xmlIn.setProperty(XMLInputFactory.IS_COALESCING, true);\n+        xmlIn.setProperty(XMLInputFactory.IS_COALESCING, Boolean.TRUE);\n         _xmlInputFactory = xmlIn;\n         _xmlOutputFactory = xmlOut;\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlTypeResolverBuilder.java\n             return new XmlClassNameIdResolver(baseType, config.getTypeFactory());\n         case MINIMAL_CLASS:\n             return new XmlMinimalClassNameIdResolver(baseType, config.getTypeFactory());\n+        default:\n+            return super.idResolver(config, baseType, subtypes, forSer, forDeser);\n         }\n-        return super.idResolver(config, baseType, subtypes, forSer, forDeser);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n     @Override\n     public String getText() throws IOException, JsonParseException\n     {\n+        if (_currToken == null) {\n+            return null;\n+        }\n         switch (_currToken) {\n         case FIELD_NAME:\n             return getCurrentName();\n         case VALUE_STRING:\n             return _currText;\n-        }\n-        return (_currToken == null) ? null : _currToken.asString();\n+        default:\n+            return _currToken.asString();\n+        }\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n         super();\n     }\n \n+    public XmlJaxbAnnotationIntrospector(TypeFactory typeFactory) {\n+        super(typeFactory);\n+    }\n+    \n     public XmlJaxbAnnotationIntrospector(TypeFactory typeFactory,\n             boolean firstXmlidRefAsId)\n     {\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n     /**********************************************************\n      */\n \n-\t@Override\n+    @Override\n     public void writeRootValueSeparator(JsonGenerator jgen) throws IOException, JsonGenerationException {\n         // Not sure if this should ever be applicable; but if multiple roots were allowed, we'd use linefeed\n         jgen.writeRaw('\\n');\n     /**********************************************************\n      */\n     \n-\t@Override\n+    @Override\n     public void beforeArrayValues(JsonGenerator jgen) throws IOException, JsonGenerationException {\n \t\t// never called for ToXmlGenerator\n     }\n \n-\t@Override\n+    @Override\n     public void writeStartArray(JsonGenerator jgen)\n     \t\tthrows IOException, JsonGenerationException\n     {\n \t\t// anything to do here?\n     }\n \n-\t@Override\n+    @Override\n     public void writeArrayValueSeparator(JsonGenerator jgen)  throws IOException, JsonGenerationException {\n \t\t// never called for ToXmlGenerator\n     }\n \n-\t@Override\n+    @Override\n     public void writeEndArray(JsonGenerator jgen, int nrOfValues)\n     \t\tthrows IOException, JsonGenerationException\n     {\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestComplex.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestComplex.java\n package com.fasterxml.jackson.dataformat.xml;\n-\n-import java.io.StringWriter;\n \n import com.fasterxml.jackson.databind.ObjectReader;\n import com.fasterxml.jackson.databind.ObjectWriter;\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListDeserialization.java\n        @JacksonXmlProperty( isAttribute = true )\n        public String id;\n \n-       private List<String> _notes = new ArrayList<String>();\n+       protected List<String> _notes = new ArrayList<String>();\n               \n        public PersonWithGetters() { }\n        public PersonWithGetters(String id) {\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestPolymorphic.java\n     static class BaseTypeWithClassArray { }\n \n     @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.WRAPPER_OBJECT)\n-    private static class BaseTypeWithClassObject { }\n+    protected static class BaseTypeWithClassObject { }\n \n     protected static class SubTypeWithClassObject extends BaseTypeWithClassObject {\n         public String name;\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestSerialization.java\n         assertEquals(\"<NsElemBean><wstxns1:text xmlns:wstxns1=\\\"http://foo\\\">blah</wstxns1:text></NsElemBean>\", xml);\n     }\n \n+    @SuppressWarnings(\"boxing\")\n     public void testMap() throws IOException\n     {\n         // First, map in a general wrapper\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n         XmlMapper mapper1 = new XmlMapper();\n         ObjectMapper mapper2 = mapper1.copy();\n         assertNotSame(mapper1, mapper2);\n-        assertNotSame(mapper1.getJsonFactory(), mapper2.getJsonFactory());\n-        assertEquals(XmlFactory.class, mapper2.getJsonFactory().getClass());\n+        assertNotSame(mapper1.getJsonFactory(), mapper2.getFactory());\n+        assertEquals(XmlFactory.class, mapper2.getFactory().getClass());\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestElementWrapper.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestElementWrapper.java\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n import com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n         XmlMapper _jaxbMapper = new XmlMapper();\n         // Use JAXB-then-Jackson annotation introspector\n         AnnotationIntrospector intr = XmlAnnotationIntrospector.Pair.instance\n-            (new XmlJaxbAnnotationIntrospector(), new JacksonAnnotationIntrospector());\n+            (new XmlJaxbAnnotationIntrospector(TypeFactory.defaultInstance()),\n+                    new JacksonAnnotationIntrospector());\n         _jaxbMapper.setAnnotationIntrospector(intr);\n \n         MyPerson person = new MyPerson();\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestWithJAXBAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/TestWithJAXBAnnotations.java\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n \n import com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n         _nonJaxbMapper = new XmlMapper();\n         // Use JAXB-then-Jackson annotation introspector\n         AnnotationIntrospector intr = XmlAnnotationIntrospector.Pair.instance\n-            (new XmlJaxbAnnotationIntrospector(), new JacksonAnnotationIntrospector());\n+            (new XmlJaxbAnnotationIntrospector(TypeFactory.defaultInstance()), new JacksonAnnotationIntrospector());\n         _jaxbMapper.setAnnotationIntrospector(intr);\n     }\n     \n \n     public void testPersonAsXml() throws Exception {\n         MyPerson person = new MyPerson();\n-        person.id = 1L;\n+        person.id = Long.valueOf(1L);\n         person.firstName = \"Jay\";\n         person.lastName = \"Unit\";\n     ", "timestamp": 1345698767, "metainfo": ""}