{"sha": "86296bfe73d854601ad68f1c72efca5d8a5eee64", "log": "Fix issue #5; need to avoid wrapping Maps", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializerModifier.java\n package com.fasterxml.jackson.xml.ser;\n \n import java.util.List;\n+import java.util.Map;\n \n import javax.xml.namespace.QName;\n \n     private static boolean _isContainerType(JavaType type)\n     {\n         if (type.isContainerType()) {\n-            // Just one special case; byte[] will be serialized as base64-encoded String, not real array, so:\n-            if (type.getRawClass() == byte[].class) {\n+            Class<?> cls = type.getRawClass();\n+            // One special case; byte[] will be serialized as base64-encoded String, not real array, so:\n+            // (actually, ditto for char[]; thought to be a String)\n+            if (cls == byte[].class || cls == byte[].class) {\n+                return false;\n+            }\n+            // issue#5: also, should not add wrapping for Maps\n+            if (Map.class.isAssignableFrom(cls)) {\n                 return false;\n             }\n             return true;\n--- a/src/test/java/com/fasterxml/jackson/xml/TestSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestSerialization.java\n         }\n     }\n \n+    static class WrapperBean<T>\n+    {\n+        public T value;\n+\n+        public WrapperBean() { }\n+        public WrapperBean(T v) { value = v; }\n+    }\n+\n     static class MapBean\n     {\n         public Map<String,Integer> map;\n \n         public MapBean() { }\n-        public MapBean(Map<String,Integer> m) { map = m; }\n+        public MapBean(Map<String,Integer> v) { map = v; }\n     }\n     \n     static class StringListBean\n     /* Unit tests\n     /**********************************************************\n      */\n-    \n-    /**\n-     * Unit test to verify that root name is properly set\n-     */\n+\n+    // Unit test to verify that root name is properly set\n     public void testRootName() throws IOException\n     {\n         String xml = _xmlMapper.writeValueAsString(new StringBean());\n         \n-        /* Hmmh. Looks like JDK Stax adds bogus ns declaration. As such,\n-         * let's just check that name starts ok...\n-         */\n+        // Hmmh. Looks like JDK Stax adds bogus ns declaration. As such,\n+        // let's just check that name starts ok...\n         if (xml.indexOf(\"<StringBean\") != 0) {\n             fail(\"Expected root name of 'StringBean'; but XML document is [\"+xml+\"]\");\n         }\n \n     public void testMap() throws IOException\n     {\n+        // First, map in a general wrapper\n         LinkedHashMap<String,Integer> map = new LinkedHashMap<String,Integer>();\n         map.put(\"a\", 1);\n         map.put(\"b\", 2);\n-        String xml = _xmlMapper.writeValueAsString(new MapBean(map));\n+\n+        String xml;\n+        \n+        xml = _xmlMapper.writeValueAsString(new WrapperBean<Map<?,?>>(map));\n+        assertEquals(\"<WrapperBean><value>\"\n+                +\"<a>1</a>\"\n+                +\"<b>2</b>\"\n+                +\"</value></WrapperBean>\",\n+                xml);\n+\n+        // then as strongly typed\n+        xml = _xmlMapper.writeValueAsString(new MapBean(map));\n         assertEquals(\"<MapBean><map>\"\n                 +\"<a>1</a>\"\n-                +\"<b>1</b>\"\n+                +\"<b>2</b>\"\n                 +\"</map></MapBean>\",\n                 xml);\n     }", "timestamp": 1296877806, "metainfo": ""}