{"sha": "eb05a1c840bbc423160281db9bb30fb6132640d8", "log": "Implement #111", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;\n+import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;\n \n /**\n  * Additional extension interface used above and beyond\n      */\n     public String findNamespace(Annotated ann);\n \n-    // Method used to check if specified property has annotation that indicates\n-    // that it should be wrapped in an element; and if so, name to use.\n-    // Note: local name of \"\" is used to indicate that name should default\n-    // to using name (local name and namespace) of property itself.\n-    //\n-    // Removed in 2.1\n-//    public QName findWrapperElement(Annotated ann);\n-\n-    // Method used to find out name to use for the outermost (root) XML element\n-    // name when serializing (since there is no property that would define it);\n-    // this overrides default name based on type of object.\n-    //\n-    // Removed in 2.1\n-//    public QName findRootElement(Annotated ann);\n-\n     /**\n      * Method used to check whether given annotated element\n      * (field, method, constructor parameter) has indicator that suggests\n      * it should be serialized as text, without element wrapper.\n      */\n     public Boolean isOutputAsText(Annotated ann);\n-    \n+\n     /*\n     /**********************************************************************\n     /* Replacement of 'AnnotationIntrospector.Pair' to use when combining\n         public Pair(AnnotationIntrospector p, AnnotationIntrospector s)\n         {\n             super(p, s);\n-            _xmlPrimary = (p instanceof XmlAnnotationIntrospector) ? (XmlAnnotationIntrospector) p : null;\n-            _xmlSecondary = (s instanceof XmlAnnotationIntrospector) ? (XmlAnnotationIntrospector) s : null;\n+            if (p instanceof XmlAnnotationIntrospector) {\n+                _xmlPrimary = (XmlAnnotationIntrospector) p;\n+            } else if (p instanceof JaxbAnnotationIntrospector) {\n+                _xmlPrimary = new JaxbWrapper((JaxbAnnotationIntrospector) p);\n+            } else {\n+                _xmlPrimary = null;\n+            }\n+\n+            if (s instanceof XmlAnnotationIntrospector) {\n+                _xmlSecondary = (XmlAnnotationIntrospector) s;\n+            } else if (s instanceof JaxbAnnotationIntrospector) {\n+                _xmlSecondary = new JaxbWrapper((JaxbAnnotationIntrospector) s);\n+            } else {\n+                _xmlSecondary = null;\n+            }\n         }\n \n         public static XmlAnnotationIntrospector.Pair instance(AnnotationIntrospector a1, AnnotationIntrospector a2) {\n             return value;\n         }\n \n-        // These were removed in 2.1\n-        /*\n-        @Override\n-        public QName findWrapperElement(Annotated ann)\n-        {\n-            QName value = (_xmlPrimary == null) ? null : _xmlPrimary.findWrapperElement(ann);\n-            if (value == null && _xmlSecondary != null) {\n-                value = _xmlSecondary.findWrapperElement(ann);\n-            }\n-            return value;\n-        }\n-\n-        @Override\n-        public QName findRootElement(Annotated ann)\n-        {\n-            QName value = (_xmlPrimary == null) ? null : _xmlPrimary.findRootElement(ann);\n-            if (value == null && _xmlSecondary != null) {\n-                value = _xmlSecondary.findRootElement(ann);\n-            }\n-            return value;\n-        }\n-        */\n-        \n         @Override\n         public Boolean isOutputAsAttribute(Annotated ann)\n         {\n             }\n             return value;\n         }\n-    \n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Helper class used to adapt JaxbAnnoationIntrospector as\n+    /* XmlAnnotationIntrospector\n+    /**********************************************************************\n+     */\n+\n+    /**\n+     * Wrapper we need to adapt {@link JaxbAnnotationIntrospector} as\n+     * {@link XmlAnnotationIntrospector}: something we can not (alas!)\n+     * do in JAXB module because of dependency direction (JAXB module\n+     * has no knowledge of this module).\n+     */\n+    static class JaxbWrapper implements XmlAnnotationIntrospector\n+    {\n+        protected final JaxbAnnotationIntrospector _intr;\n+\n+        public JaxbWrapper(JaxbAnnotationIntrospector i) {\n+            _intr = i;\n+        }\n+        \n+        @Override\n+        public String findNamespace(Annotated ann) {\n+            return _intr.findNamespace(ann);\n+        }\n+\n+        @Override\n+        public Boolean isOutputAsAttribute(Annotated ann) {\n+            return _intr.isOutputAsAttribute(ann);\n+        }\n+\n+        @Override\n+        public Boolean isOutputAsText(Annotated ann) {\n+            return _intr.isOutputAsText(ann);\n+        }\n+        \n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n import java.lang.annotation.Annotation;\n import java.lang.reflect.AnnotatedElement;\n import java.lang.reflect.Member;\n-\n-import javax.xml.bind.annotation.XmlAttribute;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlValue;\n \n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n /**\n  * Alternative {@link com.fasterxml.jackson.databind.AnnotationIntrospector}\n  * implementation that\n- * builds on introspector from Jackson XC package that uses JAXB annotations,\n- * not Jackson annotations.\n+ * builds on {@link JaxbAnnotationIntrospector}.\n+ *<p>\n+ * NOTE: since version 2.4, it should NOT be necessary to use this class;\n+ * instead, plain {@link JaxbAnnotationIntrospector} should fully work.\n+ * With previous versions some aspects were not fully working and this\n+ * class was necessary.\n  */\n public class XmlJaxbAnnotationIntrospector\n     extends JaxbAnnotationIntrospector\n     implements XmlAnnotationIntrospector\n {\n-\tprivate static final long serialVersionUID = 6477843393758275877L;\n+    private static final long serialVersionUID = 6477843393758275877L;\n \n-\t@Deprecated\n+    @Deprecated\n     public XmlJaxbAnnotationIntrospector() {\n         super();\n     }\n     /**********************************************************************\n      */\n     \n+    // Since 2.4.0, JaxbAnnotationIntrospector has implementation, so delegate\n     @Override\n-    public String findNamespace(Annotated ann)\n-    {\n-        String ns = null;\n-\n-        /* 10-Oct-2009, tatus: I suspect following won't work quite\n-         *  as well as it should, wrt. defaulting to package.\n-         *  But it should work well enough to get things started --\n-         *  currently this method is not needed, and when it is,\n-         *  this can be improved.\n-         */\n-        if (ann instanceof AnnotatedClass) {\n-            /* For classes, it must be @XmlRootElement. Also, we do\n-             * want to use defaults from package, base class\n-             */\n-            XmlRootElement elem = findRootElementAnnotation((AnnotatedClass) ann);\n-            if (elem != null) {\n-                ns = elem.namespace();\n-            }\n-        } else {\n-            // For others, XmlElement or XmlAttribute work (anything else?)\n-            XmlElement elem = findAnnotation(XmlElement.class, ann, false, false, false);\n-            if (elem != null) {\n-                ns = elem.namespace();\n-            }\n-            if (ns == null || MARKER_FOR_DEFAULT.equals(ns)) {\n-                XmlAttribute attr = findAnnotation(XmlAttribute.class, ann, false, false, false);\n-                if (attr != null) {\n-                    ns = attr.namespace();\n-                }\n-            }\n-        }\n-        // JAXB uses marker for \"not defined\"\n-        if (MARKER_FOR_DEFAULT.equals(ns)) {\n-            ns = null;\n-        }\n-        return ns;\n+    public String findNamespace(Annotated ann) {\n+        return super.findNamespace(ann);\n     }\n \n-    /**\n-     * Here we assume fairly simple logic; if there is <code>XmlAttribute</code> to be found,\n-     * we consider it an attibute; if <code>XmlElement</code>, not-an-attribute; and otherwise\n-     * we will consider there to be no information.\n-     * Caller is likely to default to considering things as elements.\n-     */\n+    // Since 2.4.0, JaxbAnnotationIntrospector has implementation, so delegate\n     @Override\n-    public Boolean isOutputAsAttribute(Annotated ann)\n-    {\n-        XmlAttribute attr = findAnnotation(XmlAttribute.class, ann, false, false, false);\n-        if (attr != null) {\n-            return Boolean.TRUE;\n-        }\n-        XmlElement elem = findAnnotation(XmlElement.class, ann, false, false, false);\n-        if (elem != null) {\n-            return Boolean.FALSE;\n-        }\n-        return null;\n+    public Boolean isOutputAsAttribute(Annotated ann) {\n+        return super.isOutputAsAttribute(ann);\n     }\n     \n+    // Since 2.4.0, JaxbAnnotationIntrospector has implementation, so delegate\n     @Override\n-    public Boolean isOutputAsText(Annotated ann)\n-    {\n-    \tXmlValue attr = findAnnotation(XmlValue.class, ann, false, false, false);\n-        if (attr != null) {\n-            return Boolean.TRUE;\n-        }\n-        return null;\n+    public Boolean isOutputAsText(Annotated ann) {\n+        return super.isOutputAsText(ann);\n     }\n     \n     /*\n     /* Helper methods\n     /**********************************************************************\n      */\n-    \n-    private XmlRootElement findRootElementAnnotation(AnnotatedClass ac)\n-    {\n-        // Yes, check package, no class (already included), yes superclasses\n-        return findAnnotation(XmlRootElement.class, ac, true, false, true);\n-    }\n-\n+ \n     /*\n     private String handleJaxbDefault(String value)\n     {\n     }\n     */\n \n-    /* NOTE: copied verbatim from Jackson 1.9, since its visibility was\n-     * lowered (accidentally...)\n-     */\n+    @Deprecated // since 2.4; not used by this module\n     protected <A extends Annotation> A findAnnotation(Class<A> annotationClass, Annotated annotated,\n             boolean includePackage, boolean includeClass, boolean includeSuperclasses)\n     {\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/AnnotationUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/AnnotationUtil.java\n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector;\n+import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;\n \n public class AnnotationUtil\n {\n         for (AnnotationIntrospector intr : ai.allIntrospectors()) {\n             if (intr instanceof XmlAnnotationIntrospector) {\n                 String ns = ((XmlAnnotationIntrospector) intr).findNamespace(prop);\n+                if (ns != null) {\n+                    return ns;\n+                }\n+            } else  if (intr instanceof JaxbAnnotationIntrospector) {\n+                String ns = ((JaxbAnnotationIntrospector) intr).findNamespace(prop);\n                 if (ns != null) {\n                     return ns;\n                 }\n                 if (b != null) {\n                     return b;\n                 }\n-            }\n+            } else  if (intr instanceof JaxbAnnotationIntrospector) {\n+                Boolean b = ((JaxbAnnotationIntrospector) intr).isOutputAsAttribute(prop);\n+                if (b != null) {\n+                    return b;\n+                }\n+           }\n         }\n         return null;\n     }\n                 if (b != null) {\n                     return b;\n                 }\n+            } else  if (intr instanceof JaxbAnnotationIntrospector) {\n+                Boolean b = ((JaxbAnnotationIntrospector) intr).isOutputAsText(prop);\n+                if (b != null) {\n+                    return b;\n+                }\n             }\n         }\n         return null;\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/AttributesWithJAXBTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/jaxb/AttributesWithJAXBTest.java\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;\n \n public class AttributesWithJAXBTest extends XmlTestBase\n {\n     public class Jurisdiction {\n         @XmlAttribute(name=\"name\",required=true)\n         protected String name = \"Foo\";\n+\n         @XmlAttribute(name=\"value\",required=true)\n         protected int value = 13;\n     }\n \n-    /*\n-    /**********************************************************************\n-    /* Set up\n-    /**********************************************************************\n-     */\n+    @XmlRootElement(name=\"problem\")\n+    public static class Problem {\n+        @XmlAttribute(name=\"id\")     \n+        public String id;\n+        public String description;\n \n-    protected XmlMapper _jaxbMapper;\n+        public Problem() { }\n+        public Problem(String id, String description) {\n+            this.id = id;\n+            this.description = description;\n+        }\n+    }\n \n-    // let's actually reuse XmlMapper to make things bit faster\n-    @Override\n-    public void setUp() throws Exception {\n-        super.setUp();\n-        _jaxbMapper = new XmlMapper();\n-        _jaxbMapper.setAnnotationIntrospector(new XmlJaxbAnnotationIntrospector(TypeFactory.defaultInstance()));\n-    }\n-    \n     /*\n     /**********************************************************\n     /* Unit tests\n     /**********************************************************\n      */\n \n-    public void testIssue6() throws IOException\n+    public void testTwoAttributes() throws IOException\n     {\n-        assertEquals(\"<Jurisdiction name=\\\"Foo\\\" value=\\\"13\\\"/>\",\n-                _jaxbMapper.writeValueAsString(new Jurisdiction()));\n+        XmlMapper mapper = new XmlMapper();\n+//        mapper.setAnnotationIntrospector(new XmlJaxbAnnotationIntrospector(TypeFactory.defaultInstance()));\n+        mapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(TypeFactory.defaultInstance()));\n+        String xml = mapper.writeValueAsString(new Jurisdiction());\n+        assertEquals(\"<Jurisdiction name=\\\"Foo\\\" value=\\\"13\\\"/>\", xml);\n+    }\n+\n+    public void testAttributeAndElement() throws IOException\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        mapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(TypeFactory.defaultInstance()));\n+        String xml = mapper.writeValueAsString(new Problem(\"x\", \"Stuff\"));\n+        assertEquals(\"<problem id=\\\"x\\\"><description>Stuff</description></problem>\", xml);\n     }\n }", "timestamp": 1395726263, "metainfo": ""}