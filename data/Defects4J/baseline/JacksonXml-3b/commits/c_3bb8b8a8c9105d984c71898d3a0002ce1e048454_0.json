{"sha": "3bb8b8a8c9105d984c71898d3a0002ce1e048454", "log": "Implemented [Issue#36], ability to change virtual name used for XML Text segments (default \"\")", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n         return null;\n     }\n }\n-\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlModule.java\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n+import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n import com.fasterxml.jackson.dataformat.xml.deser.XmlBeanDeserializerModifier;\n import com.fasterxml.jackson.dataformat.xml.ser.XmlBeanSerializerModifier;\n \n      * @since 2.1\n      */\n     protected boolean _cfgDefaultUseWrapper = JacksonXmlAnnotationIntrospector.DEFAULT_USE_WRAPPER;\n+\n+    /**\n+     * Name used for pseudo-property used for returning XML Text value (which does\n+     * not have actual element name to use). Defaults to empty String, but\n+     * may be changed for interoperability reasons: JAXB, for example, uses\n+     * \"value\" as name.\n+     * \n+     * @since 2.1\n+     */\n+    protected String _cfgNameForTextElement = FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY;\n     \n     /*\n     /**********************************************************************\n-    /* Life-cycle\n+    /* Life-cycle: construction\n     /**********************************************************************\n      */\n     \n     {\n         // Need to modify BeanDeserializer, BeanSerializer that are used\n         context.addBeanSerializerModifier(new XmlBeanSerializerModifier());\n-        context.addBeanDeserializerModifier(new XmlBeanDeserializerModifier());\n+        context.addBeanDeserializerModifier(new XmlBeanDeserializerModifier(_cfgNameForTextElement));\n \n         // as well as AnnotationIntrospector\n         context.insertAnnotationIntrospector(_constructIntrospector());\n+\n+        // and finally inform XmlFactory about overrides, if need be:\n+        if (_cfgNameForTextElement != FromXmlParser.DEFAULT_UNNAMED_TEXT_PROPERTY) {\n+            XmlMapper m = (XmlMapper) context.getOwner();\n+            m.setXMLTextElementName(_cfgNameForTextElement);\n+        }\n     }    \n+\n+    /*\n+    /**********************************************************************\n+    /* Life-cycle: configuration\n+    /**********************************************************************\n+     */\n \n     /**\n      * Method that can be used to define whether {@link AnnotationIntrospector}\n      * if there are no explicit annotations.\n      * See {@link com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper}\n      * for details.\n+     *<p>\n+     * Note that method MUST be called before registering the module; otherwise change\n+     * will not have any effect.\n      * \n      * @param state Whether to enable or disable \"use wrapper for non-annotated List properties\"\n+     * \n+     * @since 2.1\n      */\n     public void setDefaultUseWrapper(boolean state) {\n         _cfgDefaultUseWrapper = state;\n+    }\n+\n+    /**\n+     * Method that can be used to define alternate \"virtual name\" to use\n+     * for XML CDATA segments; that is, text values. Default name is empty String\n+     * (\"\"); but some frameworks use other names: JAXB, for example, uses\n+     * \"value\".\n+     *<p>\n+     * Note that method MUST be called before registering the module; otherwise change\n+     * will not have any effect.\n+     * \n+     * @param state Whether to enable or disable \"use wrapper for non-annotated List properties\"\n+     * \n+     * @since 2.1\n+     */\n+    public void setXMLTextElementName(String name) {\n+        _cfgNameForTextElement = name;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n \n     protected XMLOutputFactory _xmlOutputFactory;\n \n+    protected String _cfgNameForTextElement = null;\n+    \n     /*\n     /**********************************************************\n     /* Factory construction, configuration\n     public Version version() {\n         return ModuleVersion.instance.version();\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Configuration, XML-specific\n+    /**********************************************************\n+     */\n+    \n+    public void setXMLTextElementName(String name) {\n+        _cfgNameForTextElement = name;\n+    }\n     \n     /*\n     /**********************************************************\n         }\n         return this;\n     }\n-\n \n     /**\n      * Method for enabling specified XML generator feature.\n         } catch (XMLStreamException e) {\n             return StaxUtil.throwXmlAsIOException(e);\n         }\n-        return new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+        FromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n                 _objectCodec, sr);\n+        if (_cfgNameForTextElement != null) {\n+            xp.setXMLTextElementName(_cfgNameForTextElement);\n+        }\n+        return xp;\n     }\n \n     /**\n         } catch (XMLStreamException e) {\n             return StaxUtil.throwXmlAsIOException(e);\n         }\n-        return new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+        FromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n                 _objectCodec, sr);\n+        if (_cfgNameForTextElement != null) {\n+            xp.setXMLTextElementName(_cfgNameForTextElement);\n+        }\n+        return xp;\n     }\n \n     /**\n         } catch (XMLStreamException e) {\n             return StaxUtil.throwXmlAsIOException(e);\n         }\n-        return new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n+        FromXmlParser xp = new FromXmlParser(ctxt, _generatorFeatures, _xmlGeneratorFeatures,\n                 _objectCodec, sr);\n+        if (_cfgNameForTextElement != null) {\n+            xp.setXMLTextElementName(_cfgNameForTextElement);\n+        }\n+        return xp;\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n \n     /*\n     /**********************************************************\n+    /* Additional XML-specific configurations\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method called by {@link JacksonXmlModule} to pass configuration\n+     * information to {@link XmlFactory}, during registration.\n+     * \n+     * @since 2.1\n+     */\n+    protected void setXMLTextElementName(String name)\n+    {\n+        ((XmlFactory) _jsonFactory).setXMLTextElementName(name);\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Access to configuration settings\n     /**********************************************************\n      */\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n public class FromXmlParser\n     extends ParserMinimalBase\n {\n+    /**\n+     * The default name placeholder for XML text segments is empty\n+     * String (\"\").\n+     */\n+    public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\";\n+    \n     /**\n      * Enumeration that defines all togglable features for XML parsers\n      */\n      * In cases where a start element has both attributes and non-empty textual\n      * value, we have to create a bogus property; we will use this as\n      * the property name.\n-     */\n-    protected final static String UNNAMED_TEXT_PROPERTY = \"\";\n+     *<p>\n+     * Name used for pseudo-property used for returning XML Text value (which does\n+     * not have actual element name to use). Defaults to empty String, but\n+     * may be changed for interoperability reasons: JAXB, for example, uses\n+     * \"value\" as name.\n+     * \n+     * @since 2.1\n+     */\n+    protected String _cfgNameForTextElement = DEFAULT_UNNAMED_TEXT_PROPERTY;\n \n     /*\n     /**********************************************************\n         _objectCodec = c;\n     }\n \n+    /**\n+     * @since 2.1\n+     */\n+    public void setXMLTextElementName(String name) {\n+        _cfgNameForTextElement = name;\n+    }\n+    \n     /**\n      * XML format does require support from custom {@link ObjectCodec}\n      * (that is, {@link XmlMapper}), so need to return true here.\n                 return (_currToken = JsonToken.VALUE_STRING);\n             }\n             // If not a leaf, need to transform into property...\n-            _parsingContext.setCurrentName(UNNAMED_TEXT_PROPERTY);\n+            _parsingContext.setCurrentName(_cfgNameForTextElement);\n             _nextToken = JsonToken.VALUE_STRING;\n             return (_currToken = JsonToken.FIELD_NAME);\n         case XmlTokenStream.XML_END:\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n public class XmlBeanDeserializerModifier\n     extends BeanDeserializerModifier\n {\n+    /**\n+     * Virtual name used for text segments.\n+     */\n+    protected String _cfgNameForTextValue = \"\";\n+\n+    public XmlBeanDeserializerModifier(String nameForTextValue)\n+    {\n+        _cfgNameForTextValue = nameForTextValue;\n+    }\n+    \n     @Override\n     public List<BeanPropertyDefinition> updateProperties(DeserializationConfig config,\n             BeanDescription beanDesc, List<BeanPropertyDefinition> propDefs)\n             Boolean b = AnnotationUtil.findIsTextAnnotation(intr, acc);\n             if (b != null && b.booleanValue()) {\n                 // unwrapped properties will appear as 'unnamed' (empty String)\n-                propDefs.set(i, prop.withName(\"\"));\n+                BeanPropertyDefinition newProp = prop.withName(_cfgNameForTextValue);\n+                if (newProp != prop) {\n+                    propDefs.set(i, newProp);\n+                }\n                 continue;\n             }\n             // second: do we need to handle wrapping (for Lists)?\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializer.java\n             if (info != null) {\n                 ns = info.getNamespace();\n                 if (textIndex < 0 && info.isText()) {\n-                \ttextIndex = i;\n+                    textIndex = i;\n                 }\n             }\n             _xmlNames[i] = new QName((ns == null) ? \"\" : ns, bpw.getName());\n         try {\n             for (final int len = props.length; i < len; ++i) {\n                 if (i == attrCount) {\n-                \txgen.setNextIsAttribute(false);\n+                    xgen.setNextIsAttribute(false);\n                 }\n                 // also: if this is property to write as text (\"unwrap\"), need to:\n                 if (i == textIndex) {\n-\t\t\t\t\txgen.setNextIsUnwrapped(true);\n+                    xgen.setNextIsUnwrapped(true);\n                 }\n                 xgen.setNextName(xmlNames[i]);\n                 BeanPropertyWriter prop = props[i];\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestStringValues.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestStringValues.java\n package com.fasterxml.jackson.dataformat.xml;\n-\n-import java.util.Arrays;\n \n public class TestStringValues extends XmlTestBase\n {\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestTextValue.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestTextValue.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.dataformat.xml.annotation.*;\n \n public class TestTextValue extends XmlTestBase\n         public String value;\n     }\n \n+    static class JAXBStyle\n+    {\n+        public String value;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Unit tests\n     \tassertNotNull(main.stack.slot);\n     \tassertEquals(TEXT, main.stack.slot.value);\n     }\n-    \n-    /* // Uncomment to see how JAXB works here:\n-    public void testJAXB() throws Exception\n+\n+    // for [Issue#36]\n+    public void testAlternateTextElementName() throws IOException\n     {\n-        java.io.StringWriter sw = new java.io.StringWriter();\n-        javax.xml.bind.JAXB.marshal(new Simple(), sw);\n-        System.out.println(\"JAXB -> \"+sw);\n+        final String XML = \"<JAXBStyle>foo</JAXBStyle>\";\n+        // first: verify that without change, POJO would not match:\n+        try {\n+            MAPPER.readValue(XML, JAXBStyle.class);\n+            fail(\"Should have failed\");\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"Unrecognized\");\n+        }\n+        \n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setXMLTextElementName(\"value\");\n+        XmlMapper mapper = new XmlMapper(module);\n+        JAXBStyle pojo = mapper.readValue(XML, JAXBStyle.class);\n+        assertEquals(\"foo\", pojo.value);\n     }\n-    */\n }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/XmlTestBase.java\n package com.fasterxml.jackson.dataformat.xml;\n \n import java.io.*;\n+import java.util.Arrays;\n \n import junit.framework.TestCase;\n \n         assertEquals(expName, jp.getText());\n         assertEquals(expName, jp.getCurrentName());\n     }\n+\n+    protected void verifyException(Throwable e, String... matches)\n+    {\n+        String msg = e.getMessage();\n+        String lmsg = (msg == null) ? \"\" : msg.toLowerCase();\n+        for (String match : matches) {\n+            String lmatch = match.toLowerCase();\n+            if (lmsg.indexOf(lmatch) >= 0) {\n+                return;\n+            }\n+        }\n+        fail(\"Expected an exception with one of substrings (\"+Arrays.asList(matches)+\"): got one with message \\\"\"+msg+\"\\\"\");\n+    }\n     \n     /*\n     /**********************************************************", "timestamp": 1348894870, "metainfo": ""}