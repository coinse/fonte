{"sha": "9b51833a91b25b8035eb143320177271c8802eb4", "log": "Now parsing all XML attributes (not only the first one)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/xml/util/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/util/XmlTokenStream.java\n             // fall through\n         case XML_START_ELEMENT: // attributes to return?\n             if (_nextAttributeIndex < _attributeCount) {\n-                _localName = _xmlReader.getAttributeLocalName(0);\n-                _namespaceURI = _xmlReader.getAttributeNamespace(0);\n-                _textValue = _xmlReader.getAttributeValue(0);\n+                _localName = _xmlReader.getAttributeLocalName(_nextAttributeIndex);\n+                _namespaceURI = _xmlReader.getAttributeNamespace(_nextAttributeIndex);\n+                _textValue = _xmlReader.getAttributeValue(_nextAttributeIndex);\n                 return (_currentState = XML_ATTRIBUTE_NAME);\n             }\n             // otherwise need to find START/END_ELEMENT or text\n--- a/src/test/java/com/fasterxml/jackson/xml/TestXmlParser.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestXmlParser.java\n         assertTrue(xp.getParsingContext().inRoot());\n         xp.close();\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Helper methods\n     /**********************************************************\n      */\n+\n+\n+    public void testXmlAttributes() throws Exception\n+    {\n+        final String XML = \"<data max=\\\"7\\\" offset=\\\"9\\\"/>\";\n+\n+        FromXmlParser xp = (FromXmlParser) _xmlFactory.createJsonParser(new StringReader(XML));\n+\n+        // First: verify handling without forcing array handling:\n+        assertToken(JsonToken.START_OBJECT, xp.nextToken()); // <data>\n+        assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <max>\n+        assertEquals(\"max\", xp.getCurrentName());\n+        assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n+        assertEquals(\"7\", xp.getText());\n+\n+        assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <offset>\n+        assertEquals(\"offset\", xp.getCurrentName());\n+        assertToken(JsonToken.VALUE_STRING, xp.nextToken());\n+        assertEquals(\"9\", xp.getText());\n+\n+        assertToken(JsonToken.END_OBJECT, xp.nextToken()); // </data>\n+        xp.close();\n+    }\n \n     private String _readXmlWriteJson(String xml) throws IOException\n     {", "timestamp": 1307539514, "metainfo": ""}