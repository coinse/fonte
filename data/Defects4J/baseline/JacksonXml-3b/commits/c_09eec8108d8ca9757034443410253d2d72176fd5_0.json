{"sha": "09eec8108d8ca9757034443410253d2d72176fd5", "log": "Adding full jackson-xc dependency, which is needed as we must extend jaxb annotation introspector", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/JacksonXmlAnnotationIntrospector.java\n     /**********************************************************\n      */\n \n-    //@Override\n+    @Override\n     public Boolean isOutputAsAttribute(Annotated ann)\n     {\n         JacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\n         return null;\n     }\n \n-    //@Override\n+    @Override\n     public String findNamespace(Annotated ann)\n     {\n         JacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\n         return null;\n     }\n \n-    //@Override\n+    @Override\n     public QName findWrapperElement(Annotated ann)\n     {\n         JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+package com.fasterxml.jackson.xml.jaxb;\n+\n+import javax.xml.bind.annotation.XmlAttribute;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.namespace.QName;\n+\n+import org.codehaus.jackson.map.introspect.Annotated;\n+import org.codehaus.jackson.map.introspect.AnnotatedClass;\n+import org.codehaus.jackson.xc.JaxbAnnotationIntrospector;\n+\n+import com.fasterxml.jackson.xml.XmlAnnotationIntrospector;\n+\n+/**\n+ * Alternative {@link AnnotationIntrospector} implementation that\n+ * builds on introspector from Jackson XC package that uses JAXB annotations,\n+ * not Jackson annotations.\n+ */\n+public class XmlJaxbAnnotationIntrospector\n+    extends JaxbAnnotationIntrospector\n+    implements XmlAnnotationIntrospector\n+{\n+    @Override\n+    public String findNamespace(Annotated ann)\n+    {\n+        String ns = null;\n+\n+        /* 10-Oct-2009, tatus: I suspect following won't work quite\n+         *  as well as it should, wrt. defaulting to package.\n+         *  But it should work well enough to get things started --\n+         *  currently this method is not needed, and when it is,\n+         *  this can be improved.\n+         */\n+\n+        if (ann instanceof AnnotatedClass) {\n+            /* For classes, it must be @XmlRootElement. Also, we do\n+             * want to use defaults from package, base class\n+             */\n+            XmlRootElement elem = findRootElementAnnotation((AnnotatedClass) ann);\n+            if (elem != null) {\n+                ns = elem.namespace();\n+            }\n+        } else {\n+            // For others, XmlElement or XmlAttribute work (anything else?)\n+            XmlElement elem = findAnnotation(XmlElement.class, ann, false, false, false);\n+            if (elem != null) {\n+                ns = elem.namespace();\n+            }\n+            if (ns == null || MARKER_FOR_DEFAULT.equals(ns)) {\n+                XmlAttribute attr = findAnnotation(XmlAttribute.class, ann, false, false, false);\n+                if (attr != null) {\n+                    ns = attr.namespace();\n+                }\n+            }\n+        }\n+        // JAXB uses marker for \"not defined\"\n+        if (MARKER_FOR_DEFAULT.equals(ns)) {\n+            ns = null;\n+        }\n+        return ns;\n+    }\n+\n+    /**\n+     * Here we assume fairly simple logic; if there is <code>XmlAttribute</code> to be found,\n+     * we consider it an attibute; if <code>XmlElement</code>, not-an-attribute; and otherwise\n+     * we will consider there to be no information.\n+     * Caller is likely to default to considering things as elements.\n+     */\n+    @Override\n+    public Boolean isOutputAsAttribute(Annotated ann)\n+    {\n+        XmlAttribute attr = findAnnotation(XmlAttribute.class, ann, false, false, false);\n+        if (attr != null) {\n+            return Boolean.TRUE;\n+        }\n+        XmlElement elem = findAnnotation(XmlElement.class, ann, false, false, false);\n+        if (elem != null) {\n+            return Boolean.FALSE;\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public QName findWrapperElement(Annotated ann)\n+    {\n+        XmlElementWrapper w = findAnnotation(XmlElementWrapper.class, ann, false, false, false);\n+        if (w != null) {\n+            String ln = w.name();\n+            String ns = w.namespace();\n+            // if undefined, means \"use property's name\":\n+            if (MARKER_FOR_DEFAULT.equals(ln)) {\n+                ln = \"\";\n+            }\n+            return new QName(ns, ln);\n+        }\n+        return null;\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Helper methods\n+    /**********************************************************************\n+     */\n+    \n+    private XmlRootElement findRootElementAnnotation(AnnotatedClass ac)\n+    {\n+        // Yes, check package, no class (already included), yes superclasses\n+        return findAnnotation(XmlRootElement.class, ac, true, false, true);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/xml/TestWithJAXBAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestWithJAXBAnnotations.java\n public class TestWithJAXBAnnotations extends XmlTestBase\n {\n     /*\n-    /**********************************************************\n+    /**********************************************************************\n     /* Helper types\n-    /**********************************************************\n+    /**********************************************************************\n      */\n \n     @XmlRootElement(name=\"bean\")\n-    public static class SimpleBean\n+    public static class RootBean\n     {\n         public String value = \"text\";\n-        \n+    }\n+    \n+    public static class AttrBean\n+    {        \n         @XmlAttribute\n         public String attr = \"3\";\n     }\n+\n+    /*\n+    /**********************************************************************\n+    /* Set up\n+    /**********************************************************************\n+     */\n+\n+    protected XmlMapper _jaxbMapper;\n+    protected XmlMapper _nonJaxbMapper;\n+\n+    // let's actually reuse XmlMapper to make things bit faster\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        _jaxbMapper = new XmlMapper();\n+        _nonJaxbMapper = new XmlMapper();\n+        AnnotationIntrospector intr = new AnnotationIntrospector.Pair(new JaxbAnnotationIntrospector(),\n+                new JacksonAnnotationIntrospector());\n+        _jaxbMapper.getDeserializationConfig().setAnnotationIntrospector(intr);\n+        _jaxbMapper.getSerializationConfig().setAnnotationIntrospector(intr);\n+    }\n     \n     /*\n-    /**********************************************************\n+    /**********************************************************************\n     /* Unit tests\n-    /**********************************************************\n+    /**********************************************************************\n      */\n \n-    public void testSimpleSerialize() throws Exception\n+    /**\n+     * Unit test for verifying that root element name can be overridden\n+     * with <code>@XmlRootElement</code> annotation.\n+     */\n+    public void testRootName() throws Exception\n     {\n-        XmlMapper mapper = getJaxbAndJacksonMapper();\n-        String xml = mapper.writeValueAsString(new SimpleBean());\n-        assertEquals(\"<bean attr=\\\"3\\\"><value>text</value></bean>\", xml);\n+        RootBean bean = new RootBean();\n+        // without JAXB annotations will use class simple name:\n+        assertEquals(\"<RootBean><value>text</value></RootBean>\", _nonJaxbMapper.writeValueAsString(bean));\n+        assertEquals(\"<bean><value>text</value></bean>\", _jaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    /**\n+     * Unit test for verifying that a propery defaults to being written as\n+     * element, but can be redefined with <code>@XmlAttribute</code> annotation.\n+     */\n+    public void testSerializeAsAttr() throws Exception\n+    {\n+        AttrBean bean = new AttrBean();\n+        assertEquals(\"<AttrBean><attr>3</attr></AttrBean>\", _nonJaxbMapper.writeValueAsString(bean));\n+        assertEquals(\"<AttrBean attr=\\\"3\\\" />\", _jaxbMapper.writeValueAsString(bean));\n     }\n \n     /*\n-    /**********************************************************\n+    /**********************************************************************\n     /* Helper methods\n-    /**********************************************************\n+    /**********************************************************************\n      */\n \n     protected XmlMapper getJaxbAndJacksonMapper()\n     {\n         XmlMapper mapper = new XmlMapper();\n-        AnnotationIntrospector intr = new AnnotationIntrospector.Pair(new JaxbAnnotationIntrospector(),\n-                        new JacksonAnnotationIntrospector());\n-        mapper.getDeserializationConfig().setAnnotationIntrospector(intr);\n-        mapper.getSerializationConfig().setAnnotationIntrospector(intr);\n         return mapper;\n     }\n }", "timestamp": 1293936017, "metainfo": ""}