{"sha": "73ac83708d7c12c9fd288779301ef329688ef297", "log": "progressing with unwrapped lists", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlTokenStream.java\n     {\n         if (_currentWrapper != null) {\n             ElementWrapper w = _currentWrapper;\n-            _currentWrapper = _currentWrapper.getParent();\n             // important: if we close the scope, must duplicate END_ELEMENT as well\n             if (w.isMatching()) {\n                 _repeatElement = true;\n                 _localName = w.getWrapperLocalName();\n                 _namespaceURI = w.getWrapperNamespace();\n+            } else {\n+                _currentWrapper = _currentWrapper.getParent();\n             }\n         }\n         return (_currentState = XML_END_ELEMENT);\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestListsUnwrapped.java\n+package com.fasterxml.jackson.dataformat.xml.unwrapped;\n+\n+import javax.xml.bind.annotation.*;\n+\n+import com.fasterxml.jackson.annotation.JsonRootName;\n+import com.fasterxml.jackson.dataformat.xml.JacksonXmlModule;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class TestListsUnwrapped extends XmlTestBase\n+{\n+    static class Value {\n+        public String v;\n+\n+        public Value() { }\n+        public Value(String str) { v = str; }\n+    }\n+\n+    @XmlRootElement(name=\"list\")\n+    @JsonRootName(\"list\")\n+    static class WrappedList {\n+        @XmlElementWrapper(name=\"WRAP\")\n+        @JacksonXmlElementWrapper(localName = \"WRAP\")\n+        public Value[] value;\n+    }\n+\n+    @XmlRootElement(name=\"list\")\n+    @JsonRootName(\"list\")\n+    static class UnwrappedList {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public Value[] value;\n+    }\n+\n+    static class DefaultList {\n+        public Value[] value;\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    public void testWrappedLists() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+        WrappedList list = new WrappedList();\n+        list.value = new Value[] { new Value(\"a\"), new Value(\"b\") };\n+\n+        // First, serialize:\n+        \n+        String json = mapper.writeValueAsString(list);\n+//      withJAXB(list);\n+        assertEquals(\"<list><WRAP><value><v>a</v></value><value><v>b</v></value></WRAP></list>\", json);\n+\n+        // then deserialize back\n+        WrappedList output = mapper.readValue(json, WrappedList.class);\n+        assertNotNull(output);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+    }\n+    \n+    public void testUnwrappedLists() throws Exception\n+    {\n+        XmlMapper mapper = new XmlMapper();\n+\n+        UnwrappedList list = new UnwrappedList();\n+        list.value = new Value[] { new Value(\"c\"), new Value(\"d\") };\n+        String json = mapper.writeValueAsString(list);\n+        \n+//        System.out.println(\"Unwrapped == \"+json);\n+//        withJAXB(list);\n+        assertEquals(\"<list><value><v>c</v></value><value><v>d</v></value></list>\", json);\n+\n+        // then deserialize back\n+        UnwrappedList output = mapper.readValue(json, UnwrappedList.class);\n+        assertNotNull(output);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+    \n+    }\n+\n+    /**\n+     * Test to verify that default wrapping setting is used\n+     */\n+    public void testDefaultWrapping() throws Exception\n+    {\n+        // by default, should be using wrapping, so:\n+        XmlMapper mapper = new XmlMapper();\n+        DefaultList input = new DefaultList();\n+        input.value = new Value[] { new Value(\"a\"), new Value(\"b\") };\n+        String json = mapper.writeValueAsString(input);\n+        assertEquals(\"<DefaultList><value><value><v>a</v></value><value><v>b</v></value></value></DefaultList>\", json);\n+        DefaultList output = mapper.readValue(json, DefaultList.class);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+\n+        // but can be changed not to use wrapping by default\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(false);\n+        mapper = new XmlMapper(module);\n+        json = mapper.writeValueAsString(input);\n+        assertEquals(\"<DefaultList><value><v>a</v></value><value><v>b</v></value></DefaultList>\", json);\n+        output = mapper.readValue(json, DefaultList.class);\n+        assertNotNull(output.value);\n+        assertEquals(2, output.value.length);\n+    }\n+    \n+    /*\n+    void withJAXB(Object ob) throws Exception\n+    {\n+        JAXBContext jc = JAXBContext.newInstance(ob.getClass());\n+        Marshaller m = jc.createMarshaller();\n+        System.out.print(\"JAXB      -> \");\n+        StringWriter sw = new StringWriter();\n+        m.marshal(ob, sw);\n+        String xml = sw.toString();\n+        if (xml.indexOf(\"<?xml\") == 0) {\n+            xml = xml.substring(xml.indexOf(\"?>\")+2);\n+        }\n+        System.out.println(xml);\n+   }\n+   */\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestNestedUnwrappedLists.java\n+package com.fasterxml.jackson.dataformat.xml.unwrapped;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n+import com.fasterxml.jackson.dataformat.xml.JacksonXmlModule;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+\n+public class TestNestedUnwrappedLists  extends XmlTestBase\n+{\n+    // // // Test\n+\n+    static class ServiceDelivery {\n+        public Date responseTimestamp;\n+        public List<VehicleMonitoringDelivery> vehicleMonitoringDelivery;    \n+    }\n+\n+    static class VehicleMonitoringDelivery {\n+        public Date responseTimestamp;\n+        public Date validUntil;\n+        public List<VehicleActivity> vehicleActivity;\n+    }\n+\n+    static class VehicleActivity {\n+        public Date recordedAtTime;    \n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    public void testNested1_2() throws Exception\n+    {\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(false);\n+        XmlMapper mapper = new XmlMapper(module);\n+        mapper.setPropertyNamingStrategy(new PropertyNamingStrategy.PascalCaseStrategy());\n+        mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n+        final String XML =\n+\"<ServiceDelivery>\\n\"\n++\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"  <VehicleMonitoringDelivery>\\n\"\n++\"    <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"    <ValidUntil>2012-09-12T09:29:17.213-04:00</ValidUntil>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"      <RecordedAtTime>2012-09-12T09:28:07.536-04:00</RecordedAtTime>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"      <RecordedAtTime>2013-09-12T09:29:07.536-04:00</RecordedAtTime>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"  </VehicleMonitoringDelivery>\\n\"\n++\"</ServiceDelivery>\\n\"\n+                ;\n+        \n+        ServiceDelivery svc = mapper.readValue(XML, ServiceDelivery.class);\n+        assertNotNull(svc);\n+        assertNotNull(svc.vehicleMonitoringDelivery);\n+        assertEquals(1, svc.vehicleMonitoringDelivery.size());\n+        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(0);\n+        assertNotNull(del);\n+        assertNotNull(del.vehicleActivity);\n+        assertEquals(2, del.vehicleActivity.size());\n+    }\n+\n+    public void testNested2_1() throws Exception\n+    {\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(false);\n+        XmlMapper mapper = new XmlMapper(module);\n+        mapper.setPropertyNamingStrategy(new PropertyNamingStrategy.PascalCaseStrategy());\n+        final String XML =\n+\"<ServiceDelivery>\\n\"\n++\"  <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"  <VehicleMonitoringDelivery>\\n\"\n++\"    <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"    <ValidUntil>2012-09-12T09:29:17.213-04:00</ValidUntil>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"      <RecordedAtTime>2012-09-12T09:28:07.536-04:00</RecordedAtTime>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"  </VehicleMonitoringDelivery>\\n\"\n++\"  <VehicleMonitoringDelivery>\\n\"\n++\"    <ResponseTimestamp>2012-09-12T09:28:17.213-04:00</ResponseTimestamp>\\n\"\n++\"    <ValidUntil>2012-09-12T09:29:17.213-04:00</ValidUntil>\\n\"\n++\"    <VehicleActivity>\\n\"\n++\"      <RecordedAtTime>2012-09-12T09:28:07.536-04:00</RecordedAtTime>\\n\"\n++\"    </VehicleActivity>\\n\"\n++\"  </VehicleMonitoringDelivery>\\n\"\n++\"</ServiceDelivery>\\n\"\n+                ;\n+        \n+        ServiceDelivery svc = mapper.readValue(XML, ServiceDelivery.class);\n+        assertNotNull(svc);\n+        assertNotNull(svc.vehicleMonitoringDelivery);\n+        assertEquals(2, svc.vehicleMonitoringDelivery.size());\n+        VehicleMonitoringDelivery del = svc.vehicleMonitoringDelivery.get(1);\n+        assertNotNull(del);\n+        assertNull(del.vehicleActivity);\n+    }\n+}", "timestamp": 1347765879, "metainfo": ""}