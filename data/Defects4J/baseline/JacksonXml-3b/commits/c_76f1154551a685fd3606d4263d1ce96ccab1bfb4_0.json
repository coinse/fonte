{"sha": "76f1154551a685fd3606d4263d1ce96ccab1bfb4", "log": "Start conversion to 2.0.0", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/JacksonXmlAnnotationIntrospector.java\n \n import javax.xml.namespace.QName;\n \n-import org.codehaus.jackson.map.introspect.Annotated;\n-import org.codehaus.jackson.map.introspect.AnnotatedField;\n-import org.codehaus.jackson.map.introspect.AnnotatedMethod;\n-import org.codehaus.jackson.map.introspect.AnnotatedParameter;\n-import org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;\n-import org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;\n+import com.fasterxml.jackson.databind.introspect.*;\n+import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n \n import com.fasterxml.jackson.xml.annotate.*;\n \n  * additional xml-specific annotation that Jackson provides. Note, however, that\n  * there is no JAXB annotation support here; that is provided with\n  * separate introspector (see {@link org.codehaus.jackson.xc.JaxbAnnotationIntrospector}).\n- * \n- * @since 1.7\n  */\n public class JacksonXmlAnnotationIntrospector\n     extends JacksonAnnotationIntrospector\n      */\n     \n     @Override\n-    public String findSerializablePropertyName(AnnotatedField af)\n+    public String findSerializationName(AnnotatedField af)\n     {\n         JacksonXmlProperty pann = af.getAnnotation(JacksonXmlProperty.class);\n         if (pann != null) {\n             return pann.localName();\n         }\n-        return super.findSerializablePropertyName(af);\n+        return super.findSerializationName(af);\n     }\n \n     @Override\n-    public String findSettablePropertyName(AnnotatedMethod am)\n+    public String findSerializationName(AnnotatedMethod am)\n     {\n         JacksonXmlProperty pann = am.getAnnotation(JacksonXmlProperty.class);\n         if (pann != null) {\n             return pann.localName();\n         }\n-        return super.findSettablePropertyName(am);\n+        return super.findSerializationName(am);\n     }\n \n     @Override\n-    public String findDeserializablePropertyName(AnnotatedField af)\n+    public String findDeserializationName(AnnotatedField af)\n     {\n         JacksonXmlProperty pann = af.getAnnotation(JacksonXmlProperty.class);\n         if (pann != null) {\n             return pann.localName();\n         }\n-        return super.findDeserializablePropertyName(af);\n+        return super.findDeserializationName(af);\n     }\n \n     @Override\n-    public String findPropertyNameForParam(AnnotatedParameter ap)\n+    public String findDeserializationName(AnnotatedParameter ap)\n     {\n         JacksonXmlProperty pann = ap.getAnnotation(JacksonXmlProperty.class);\n         // can not return empty String here, so:\n                 return name;\n             }\n         }\n-        return super.findPropertyNameForParam(ap);\n+        return super.findDeserializationName(ap);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/xml/JacksonXmlModule.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/JacksonXmlModule.java\n package com.fasterxml.jackson.xml;\n \n-import org.codehaus.jackson.Version;\n-import org.codehaus.jackson.map.AnnotationIntrospector;\n-import org.codehaus.jackson.map.module.SimpleModule;\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n \n import com.fasterxml.jackson.xml.ser.XmlBeanSerializerModifier;\n \n public class JacksonXmlModule extends SimpleModule\n {\n     private final static AnnotationIntrospector XML_ANNOTATION_INTROSPECTOR = new JacksonXmlAnnotationIntrospector();\n-\n-    // !!! TODO: how to externalize version?\n-    private final static Version VERSION = new Version(0, 1, 0, null);\n     \n     public JacksonXmlModule()\n     {\n-        super(\"JackxonXmlModule\", VERSION);\n+        super(\"JackxonXmlModule\", ModuleVersion.instance.version());\n     }\n     \n     @Override\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/xml/ModuleVersion.java\n+package com.fasterxml.jackson.xml;\n+\n+import com.fasterxml.jackson.core.util.VersionUtil;\n+\n+/**\n+ * Helper class used for finding and caching version information\n+ * for this module.\n+ */\n+class ModuleVersion extends VersionUtil\n+{\n+    public final static ModuleVersion instance = new ModuleVersion();\n+}\n--- a/src/main/java/com/fasterxml/jackson/xml/XmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/XmlAnnotationIntrospector.java\n \n import javax.xml.namespace.QName;\n \n-import org.codehaus.jackson.map.AnnotationIntrospector;\n-import org.codehaus.jackson.map.introspect.Annotated;\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.introspect.Annotated;\n \n /**\n  * Additional extension interface used above and beyond\n- * {@link AnnotationIntrospector} to\n- * handle XML-specific configuration.\n- * \n- * @since 1.7\n+ * {@link AnnotationIntrospector} to handle XML-specific configuration.\n  */\n public interface XmlAnnotationIntrospector\n {\n--- a/src/main/java/com/fasterxml/jackson/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/XmlFactory.java\n \n import org.codehaus.stax2.io.Stax2ByteArraySource;\n \n-import org.codehaus.jackson.*;\n-import org.codehaus.jackson.format.InputAccessor;\n-import org.codehaus.jackson.format.MatchStrength;\n-import org.codehaus.jackson.io.IOContext;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.format.InputAccessor;\n+import com.fasterxml.jackson.core.format.MatchStrength;\n+import com.fasterxml.jackson.core.io.IOContext;\n \n import com.fasterxml.jackson.xml.deser.FromXmlParser;\n import com.fasterxml.jackson.xml.ser.ToXmlGenerator;\n * parsers and generators is quite similar to dealing with JSON.\n * \n * @author tatu\n-* \n-* @since 1.6\n */\n public class XmlFactory extends JsonFactory\n {\n      *<p>\n      * Note: sub-classes should override this method; default\n      * implementation will return null for all sub-classes\n-     * \n-     * @since 1.8\n      */\n     public String getFormatName()\n     {\n--- a/src/main/java/com/fasterxml/jackson/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/XmlMapper.java\n package com.fasterxml.jackson.xml;\n \n-import org.codehaus.jackson.*;\n-import org.codehaus.jackson.map.*;\n-import org.codehaus.jackson.util.VersionUtil;\n+import com.fasterxml.jackson.core.PrettyPrinter;\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.databind.*;\n \n import com.fasterxml.jackson.xml.deser.FromXmlParser;\n import com.fasterxml.jackson.xml.ser.ToXmlGenerator;\n  *<p>\n  * Mapper itself overrides some aspects of functionality to try to handle\n  * data binding aspects as similar to JAXB as possible.\n- * \n- * @since 1.7\n  */\n public class XmlMapper extends ObjectMapper\n {\n      */\n     @Override\n     public Version version() {\n-        return VersionUtil.versionFor(getClass());\n+        return ModuleVersion.instance.version();\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/xml/XmlTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/XmlTypeResolverBuilder.java\n \n import java.util.Collection;\n \n-import org.codehaus.jackson.annotate.JsonTypeInfo;\n-import org.codehaus.jackson.map.MapperConfig;\n-import org.codehaus.jackson.map.jsontype.NamedType;\n-import org.codehaus.jackson.map.jsontype.TypeIdResolver;\n-import org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;\n-import org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver;\n-import org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;\n-import org.codehaus.jackson.map.type.TypeFactory;\n-import org.codehaus.jackson.type.JavaType;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n+import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;\n+import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;\n+import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n \n /**\n  * Custom specialization of {@link StdTypeResolverBuilder}; needed so that\n--- a/src/main/java/com/fasterxml/jackson/xml/annotate/JacksonXmlElementWrapper.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/annotate/JacksonXmlElementWrapper.java\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-\n-import org.codehaus.jackson.annotate.JacksonAnnotation;\n \n /**\n  * Annotation that is similar to JAXB <code>javax.xml.bind.annotation.XmlElementWrapper</code>,\n  */\n @Target({ElementType.FIELD, ElementType.METHOD})\n @Retention(RetentionPolicy.RUNTIME)\n-@JacksonAnnotation\n public @interface JacksonXmlElementWrapper\n {\n     String namespace() default \"\";\n--- a/src/main/java/com/fasterxml/jackson/xml/annotate/JacksonXmlProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/annotate/JacksonXmlProperty.java\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-\n-import org.codehaus.jackson.annotate.JacksonAnnotation;\n \n /**\n  * Annotation that can be used to provide XML-specific configuration\n  */\n @Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})\n @Retention(RetentionPolicy.RUNTIME)\n-@JacksonAnnotation\n public @interface JacksonXmlProperty\n {\n     boolean isAttribute() default false;\n--- a/src/main/java/com/fasterxml/jackson/xml/annotate/JacksonXmlRootElement.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/annotate/JacksonXmlRootElement.java\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n-\n-import org.codehaus.jackson.annotate.JacksonAnnotation;\n \n /**\n  * Annotation that can be used to define name of root element used\n  */\n @Target({ElementType.TYPE})\n @Retention(RetentionPolicy.RUNTIME)\n-@JacksonAnnotation\n public @interface JacksonXmlRootElement\n {\n     String namespace() default \"\";\n--- a/src/main/java/com/fasterxml/jackson/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/deser/FromXmlParser.java\n import javax.xml.stream.XMLStreamReader;\n import javax.xml.stream.XMLStreamWriter;\n \n-import org.codehaus.jackson.Base64Variant;\n-import org.codehaus.jackson.JsonLocation;\n-import org.codehaus.jackson.JsonParseException;\n-import org.codehaus.jackson.JsonParser;\n-import org.codehaus.jackson.JsonToken;\n-import org.codehaus.jackson.ObjectCodec;\n-import org.codehaus.jackson.impl.JsonParserMinimalBase;\n-import org.codehaus.jackson.impl.JsonReadContext;\n-import org.codehaus.jackson.io.IOContext;\n-import org.codehaus.jackson.util.ByteArrayBuilder;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.base.ParserMinimalBase;\n+import com.fasterxml.jackson.core.io.IOContext;\n+import com.fasterxml.jackson.core.json.JsonReadContext;\n+import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n \n import com.fasterxml.jackson.xml.util.XmlTokenStream;\n \n /**\n  * {@link JsonParser} implementation that exposes XML structure as\n  * set of JSON events that can be used for data binding.\n- * \n- * @since 1.6\n  */\n public class FromXmlParser\n-    extends JsonParserMinimalBase\n+    extends ParserMinimalBase\n {\n     /**\n      * Enumeration that defines all togglable features for XML parsers\n     /* Public API, access to token information, binary\n     /**********************************************************\n      */\n-    \n+\n+    @Override\n+    public Object getEmbeddedObject() throws IOException, JsonParseException {\n+        // no way to embed POJOs for now...\n+        return null;\n+    }\n+\n     @Override\n     public byte[] getBinaryValue(Base64Variant b64variant)\n         throws IOException, JsonParseException\n         }\n         return _byteArrayBuilder;\n     }\n-\n }\n--- a/src/main/java/com/fasterxml/jackson/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.namespace.QName;\n \n-import org.codehaus.jackson.map.introspect.Annotated;\n-import org.codehaus.jackson.map.introspect.AnnotatedClass;\n-import org.codehaus.jackson.map.introspect.AnnotatedParameter;\n-import org.codehaus.jackson.xc.JaxbAnnotationIntrospector;\n+import com.fasterxml.jackson.databind.introspect.*;\n+import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;\n+\n \n import com.fasterxml.jackson.xml.XmlAnnotationIntrospector;\n \n--- a/src/main/java/com/fasterxml/jackson/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/ser/ToXmlGenerator.java\n import org.codehaus.stax2.XMLStreamWriter2;\n import org.codehaus.stax2.ri.Stax2WriterAdapter;\n \n-import org.codehaus.jackson.*;\n-import org.codehaus.jackson.impl.JsonGeneratorBase;\n-import org.codehaus.jackson.impl.JsonWriteContext;\n-import org.codehaus.jackson.io.IOContext;\n-import org.codehaus.jackson.io.SerializedString;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.base.GeneratorBase;\n+import com.fasterxml.jackson.core.io.IOContext;\n+import com.fasterxml.jackson.core.json.JsonWriteContext;\n \n import com.fasterxml.jackson.xml.util.DefaultXmlPrettyPrinter;\n import com.fasterxml.jackson.xml.util.StaxUtil;\n  * or in some cases (like <code>BeanSerializer</code>) customised ones) to do\n  * additional configuration calls beyond regular {@link JsonGenerator} API,\n  * mostly to pass namespace information.\n- * \n- * @since 1.6\n  */\n public final class ToXmlGenerator\n-    extends JsonGeneratorBase\n+    extends GeneratorBase\n {\n     /**\n      * If we support optional definition of element names, this is the element\n     /* Output method implementations, textual\n     /**********************************************************\n      */\n-\n-    @Override\n-    public void writeFieldName(SerializedString name)\n-        throws IOException, JsonGenerationException\n-    {\n-        writeFieldName(name.getValue());\n-    }\n \n     @Override\n     public void writeFieldName(SerializableString name)\n--- a/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanPropertyWriter.java\n \n import javax.xml.namespace.QName;\n \n-import org.codehaus.jackson.JsonGenerator;\n-import org.codehaus.jackson.map.JsonSerializer;\n-import org.codehaus.jackson.map.SerializerProvider;\n-import org.codehaus.jackson.map.ser.BeanPropertyWriter;\n-import org.codehaus.jackson.map.ser.impl.PropertySerializerMap;\n-\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.ser.*;\n+import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n \n /**\n  * Property writer sub-class used for handling element wrapping needed for serializing\n  * collection (array, Collection; possibly Map) types.\n- * \n- * @since 1.7\n  */\n public class XmlBeanPropertyWriter\n     extends BeanPropertyWriter\n--- a/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializer.java\n \n import javax.xml.namespace.QName;\n \n-import org.codehaus.jackson.JsonGenerationException;\n-import org.codehaus.jackson.JsonGenerator;\n-import org.codehaus.jackson.annotate.JsonTypeInfo;\n-import org.codehaus.jackson.map.JsonMappingException;\n-import org.codehaus.jackson.map.SerializerProvider;\n-import org.codehaus.jackson.map.TypeSerializer;\n-import org.codehaus.jackson.map.ser.BeanPropertyWriter;\n-import org.codehaus.jackson.map.ser.BeanSerializer;\n+import com.fasterxml.jackson.core.*;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n+import com.fasterxml.jackson.databind.ser.BeanSerializer;\n \n import com.fasterxml.jackson.xml.util.XmlInfo;\n \n--- a/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/ser/XmlBeanSerializerModifier.java\n \n import javax.xml.namespace.QName;\n \n-import org.codehaus.jackson.map.AnnotationIntrospector;\n-import org.codehaus.jackson.map.JsonSerializer;\n-import org.codehaus.jackson.map.SerializationConfig;\n-import org.codehaus.jackson.map.introspect.AnnotatedMember;\n-import org.codehaus.jackson.map.introspect.BasicBeanDescription;\n-import org.codehaus.jackson.map.ser.BeanPropertyWriter;\n-import org.codehaus.jackson.map.ser.BeanSerializer;\n-import org.codehaus.jackson.map.ser.BeanSerializerModifier;\n-import org.codehaus.jackson.type.JavaType;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.ser.*;\n \n import com.fasterxml.jackson.xml.XmlAnnotationIntrospector;\n import com.fasterxml.jackson.xml.util.XmlInfo;\n      */\n     @Override\n     public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\n-            BasicBeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)\n+            BeanDescription beanDesc, List<BeanPropertyWriter> beanProperties)\n     {\n         AnnotationIntrospector intr = config.getAnnotationIntrospector();\n         for (int i = 0, len = beanProperties.size(); i < len; ++i) {\n     \n     @Override\n     public JsonSerializer<?> modifySerializer(SerializationConfig config,\n-            BasicBeanDescription beanDesc, JsonSerializer<?> serializer)\n+            BeanDescription beanDesc, JsonSerializer<?> serializer)\n     {\n         /* First things first: we can only handle real BeanSerializers; question\n          * is, what to do if it's not one: throw exception or bail out?\n--- a/src/main/java/com/fasterxml/jackson/xml/ser/XmlSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/ser/XmlSerializerProvider.java\n import java.io.IOException;\n import javax.xml.namespace.QName;\n \n-import org.codehaus.jackson.JsonGenerator;\n-import org.codehaus.jackson.JsonProcessingException;\n-import org.codehaus.jackson.map.SerializationConfig;\n-import org.codehaus.jackson.map.SerializerFactory;\n-import org.codehaus.jackson.map.ser.StdSerializerProvider;\n-import org.codehaus.jackson.type.JavaType;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.ser.SerializerFactory;\n+import com.fasterxml.jackson.databind.ser.StdSerializerProvider;\n \n import com.fasterxml.jackson.xml.util.XmlRootNameLookup;\n \n /**\n  * We need to override some parts of {@link org.codehaus.jackson.map.SerializerProvider}\n  * implementation to handle oddities of XML output, like \"extra\" root element.\n- * \n- * @since 1.7\n  */\n public class XmlSerializerProvider extends StdSerializerProvider\n {\n--- a/src/main/java/com/fasterxml/jackson/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/util/DefaultXmlPrettyPrinter.java\n \n import java.io.IOException;\n \n-import org.codehaus.jackson.JsonGenerationException;\n-import org.codehaus.jackson.JsonGenerator;\n-import org.codehaus.jackson.PrettyPrinter;\n+import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.xml.ser.ToXmlGenerator;\n \n /**\n  * Indentation to use with XML is different from JSON, because JSON\n  * requires use of separator characters and XML just basic whitespace.\n- * \n- * @since 1.7\n  */\n public class DefaultXmlPrettyPrinter\n     implements PrettyPrinter\n--- a/src/main/java/com/fasterxml/jackson/xml/util/XmlRootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/util/XmlRootNameLookup.java\n \n import javax.xml.namespace.QName;\n \n-import org.codehaus.jackson.map.AnnotationIntrospector;\n-import org.codehaus.jackson.map.MapperConfig;\n-import org.codehaus.jackson.map.introspect.AnnotatedClass;\n-import org.codehaus.jackson.map.introspect.BasicBeanDescription;\n-import org.codehaus.jackson.map.type.ClassKey;\n-import org.codehaus.jackson.map.util.LRUMap;\n-import org.codehaus.jackson.type.JavaType;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n+import com.fasterxml.jackson.databind.type.ClassKey;\n+import com.fasterxml.jackson.databind.util.LRUMap;\n \n import com.fasterxml.jackson.xml.XmlAnnotationIntrospector;\n \n /**\n  * Helper class used for efficiently finding root element name used with\n  * XML serializations.\n- * \n- * @since 1.7\n  */\n public class XmlRootNameLookup\n {\n         synchronized (_rootNames) {\n             name = _rootNames.get(key);\n             if (name == null) {\n-                BasicBeanDescription beanDesc = (BasicBeanDescription) config.introspectClassAnnotations(rootType);\n+                BeanDescription beanDesc = config.introspectClassAnnotations(rootType);\n                 AnnotationIntrospector intr = config.getAnnotationIntrospector();\n                 AnnotatedClass ac = beanDesc.getClassInfo();\n                 String localName = null;\n--- a/src/main/java/com/fasterxml/jackson/xml/util/XmlTokenStream.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/util/XmlTokenStream.java\n import org.codehaus.stax2.XMLStreamReader2;\n import org.codehaus.stax2.ri.Stax2ReaderAdapter;\n \n-import org.codehaus.jackson.JsonLocation;\n+import com.fasterxml.jackson.core.JsonLocation;\n \n /**\n  * Simple helper class used on top of STAX {@link XMLStreamReader} to further\n--- a/src/test/java/com/fasterxml/jackson/xml/TestIndentation.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestIndentation.java\n \n import java.util.*;\n \n-import org.codehaus.jackson.map.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n \n import com.fasterxml.jackson.xml.XmlMapper;\n \n--- a/src/test/java/com/fasterxml/jackson/xml/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestPolymorphic.java\n package com.fasterxml.jackson.xml;\n \n-import org.codehaus.jackson.annotate.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n \n import com.fasterxml.jackson.xml.XmlMapper;\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestVersions.java\n+package com.fasterxml.jackson.xml;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.Versioned;\n+\n+import com.fasterxml.jackson.xml.XmlMapper;\n+import com.fasterxml.jackson.xml.XmlFactory;\n+\n+public class TestVersions extends XmlTestBase\n+{\n+    /**\n+     * Not a good to do this, but has to do, for now...\n+     */\n+    private final static int MAJOR_VERSION = 2;\n+    private final static int MINOR_VERSION = 0;\n+\n+    // could inject using Maven filters as well...\n+    private final static String GROUP_ID = \"com.fasterxml.jackson.datatype\";\n+    private final static String ARTIFACT_ID = \"jackson-datatype-hibernate\";\n+    \n+    public void testMapperVersions()\n+    {\n+        assertVersion(new XmlMapper());\n+        assertVersion(new XmlFactory());\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+    \n+    private void assertVersion(Versioned vers)\n+    {\n+        final Version v = vers.version();\n+        assertFalse(\"Should find version information (got \"+v+\")\", v.isUknownVersion());\n+        assertEquals(MAJOR_VERSION, v.getMajorVersion());\n+        assertEquals(MINOR_VERSION, v.getMinorVersion());\n+        // Check patch level initially, comment out for maint versions\n+        assertEquals(0, v.getPatchLevel());\n+        assertEquals(GROUP_ID, v.getGroupId());\n+        assertEquals(ARTIFACT_ID, v.getArtifactId());\n+    }\n+}\n+\n--- a/src/test/java/com/fasterxml/jackson/xml/TestViews.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestViews.java\n package com.fasterxml.jackson.xml;\n \n-import org.codehaus.jackson.annotate.*;\n-import org.codehaus.jackson.map.*;\n-import org.codehaus.jackson.map.annotate.*;\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n \n public class TestViews extends XmlTestBase\n {\n \n         ObjectMapper xmlMapper = new XmlMapper();\n \n-        xmlMapper.configure( SerializationConfig.Feature.AUTO_DETECT_FIELDS, false );\n-        xmlMapper.configure( SerializationConfig.Feature.AUTO_DETECT_GETTERS, false );\n-        xmlMapper.configure( SerializationConfig.Feature.AUTO_DETECT_IS_GETTERS, false );\n-        xmlMapper.configure( SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION, false );\n+        xmlMapper.configure(MapperConfig.Feature.AUTO_DETECT_FIELDS, false );\n+        xmlMapper.configure(MapperConfig.Feature.AUTO_DETECT_GETTERS, false );\n+        xmlMapper.configure(MapperConfig.Feature.AUTO_DETECT_IS_GETTERS, false );\n+        xmlMapper.configure(MapperConfig.Feature.DEFAULT_VIEW_INCLUSION, false );\n \n-        String xml = xmlMapper.viewWriter(RestrictedView.class).writeValueAsString(foo);\n+        String xml = xmlMapper.writerWithView(RestrictedView.class).writeValueAsString(foo);\n \n         // views not used for deserialization\n         Foo result = xmlMapper.readValue(xml, Foo.class);\n--- a/src/test/java/com/fasterxml/jackson/xml/TestXMLFormatDetection.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestXMLFormatDetection.java\n \n import java.io.ByteArrayInputStream;\n \n-import org.codehaus.jackson.*;\n-import org.codehaus.jackson.format.DataFormatDetector;\n-import org.codehaus.jackson.format.DataFormatMatcher;\n-import org.codehaus.jackson.format.MatchStrength;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.format.*;\n \n public class TestXMLFormatDetection extends XmlTestBase\n {\n--- a/src/test/java/com/fasterxml/jackson/xml/TestXmlParser.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestXmlParser.java\n \n import java.io.*;\n \n-import org.codehaus.jackson.*;\n-import org.codehaus.jackson.map.ObjectMapper;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n \n import com.fasterxml.jackson.xml.XmlFactory;\n import com.fasterxml.jackson.xml.XmlMapper;\n--- a/src/test/java/com/fasterxml/jackson/xml/XmlTestBase.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/XmlTestBase.java\n \n import junit.framework.TestCase;\n \n-import org.codehaus.jackson.JsonParseException;\n-import org.codehaus.jackson.JsonParser;\n-import org.codehaus.jackson.JsonToken;\n+import com.fasterxml.jackson.core.*;\n \n public abstract class XmlTestBase\n     extends TestCase\n--- a/src/test/java/com/fasterxml/jackson/xml/failing/TestEnums.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/failing/TestEnums.java\n package com.fasterxml.jackson.xml.failing;\n-\n-import org.codehaus.jackson.annotate.JsonTypeInfo;\n-import org.codehaus.jackson.map.ObjectMapper;\n \n import com.fasterxml.jackson.xml.XmlMapper;\n import com.fasterxml.jackson.xml.XmlTestBase;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n \n public class TestEnums extends XmlTestBase\n {\n--- a/src/test/java/com/fasterxml/jackson/xml/failing/TestPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/failing/TestPolymorphic.java\n package com.fasterxml.jackson.xml.failing;\n \n-import org.codehaus.jackson.annotate.JsonTypeInfo;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n \n import com.fasterxml.jackson.xml.*;\n \n--- a/src/test/java/com/fasterxml/jackson/xml/jaxb/TestWithJAXBAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/jaxb/TestWithJAXBAnnotations.java\n \n import javax.xml.bind.annotation.*;\n \n-import org.codehaus.jackson.map.AnnotationIntrospector;\n-import org.codehaus.jackson.map.introspect.JacksonAnnotationIntrospector;\n-\n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n import com.fasterxml.jackson.xml.XmlAnnotationIntrospector;\n import com.fasterxml.jackson.xml.XmlMapper;\n import com.fasterxml.jackson.xml.XmlTestBase;", "timestamp": 1328134930, "metainfo": ""}