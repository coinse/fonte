{"sha": "ac88d6619cbd9003444532219ff5f70f5273321f", "log": "Fix #129", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n     */\n \n     @Override\n-    public JsonToken nextToken() throws IOException, JsonParseException\n+    public JsonToken nextToken() throws IOException\n     {\n         _binaryValue = null; // to fix [Issue-29]\n         if (_nextToken != null) {\n      * String collections.\n      */\n     @Override\n-    public String nextTextValue() throws IOException, JsonParseException {\n-        // !!! TODO: optimize\n-        return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;\n-    }\n-    \n+    public String nextTextValue() throws IOException\n+    {\n+        _binaryValue = null;\n+        if (_nextToken != null) {\n+            JsonToken t = _nextToken;\n+            _currToken = t;\n+            _nextToken = null;\n+\n+            // expected case; yes, got a String\n+            if (t == JsonToken.VALUE_STRING) {\n+                return _currText;\n+            }\n+            _updateState(t);\n+            return null;\n+        }\n+\n+        int token = _xmlTokens.next();\n+\n+        // mostly copied from 'nextToken()'\n+        while (token == XmlTokenStream.XML_START_ELEMENT) {\n+            if (_mayBeLeaf) {\n+                _nextToken = JsonToken.FIELD_NAME;\n+                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n+                _currToken = JsonToken.START_OBJECT;\n+                return null;\n+            }\n+            if (_parsingContext.inArray()) {\n+                token = _xmlTokens.next();\n+                _mayBeLeaf = true;\n+                continue;\n+            }\n+            String name = _xmlTokens.getLocalName();\n+            _parsingContext.setCurrentName(name);\n+            if (_namesToWrap != null && _namesToWrap.contains(name)) {\n+                _xmlTokens.repeatStartElement();\n+            }\n+            _mayBeLeaf = true;\n+            _currToken = JsonToken.FIELD_NAME;\n+            return null;\n+        }\n+\n+        // Ok; beyond start element, what do we get?\n+        switch (token) {\n+        case XmlTokenStream.XML_END_ELEMENT:\n+            if (_mayBeLeaf) {\n+                // NOTE: this is different from nextToken() -- produce \"\", NOT null\n+                _mayBeLeaf = false;\n+                _currToken = JsonToken.VALUE_STRING;\n+                return (_currText = \"\");\n+            }\n+            _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;\n+            _parsingContext = _parsingContext.getParent();\n+            _namesToWrap = _parsingContext.getNamesToWrap();\n+            break;\n+            \n+        case XmlTokenStream.XML_ATTRIBUTE_NAME:\n+            // If there was a chance of leaf node, no more...\n+            if (_mayBeLeaf) {\n+                _mayBeLeaf = false;\n+                _nextToken = JsonToken.FIELD_NAME;\n+                _currText = _xmlTokens.getText();\n+                _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n+                _currToken = JsonToken.START_OBJECT;\n+            } else {\n+                _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n+                _currToken = JsonToken.FIELD_NAME;\n+            }\n+            break;\n+        case XmlTokenStream.XML_ATTRIBUTE_VALUE:\n+            _currText = _xmlTokens.getText();\n+            _currToken = JsonToken.VALUE_STRING;\n+            break;\n+        case XmlTokenStream.XML_TEXT:\n+            _currText = _xmlTokens.getText();\n+            if (_mayBeLeaf) {\n+                _mayBeLeaf = false;\n+                // Also: must skip following END_ELEMENT\n+                _xmlTokens.skipEndElement();\n+\n+                // NOTE: this is different from nextToken() -- NO work-around\n+                // for otherwise empty List/array\n+                _currToken = JsonToken.VALUE_STRING;\n+                return _currText;\n+            }\n+            // If not a leaf, need to transform into property...\n+            _parsingContext.setCurrentName(_cfgNameForTextElement);\n+            _nextToken = JsonToken.VALUE_STRING;\n+            _currToken = JsonToken.FIELD_NAME;\n+            break;\n+        case XmlTokenStream.XML_END:\n+            _currToken = null;\n+        }\n+        return null;\n+    }\n+\n+\n+    private void _updateState(JsonToken t)\n+    {\n+        switch (t) {\n+        case START_OBJECT:\n+            _parsingContext = _parsingContext.createChildObjectContext(-1, -1);\n+            break;\n+        case START_ARRAY:\n+            _parsingContext = _parsingContext.createChildArrayContext(-1, -1);\n+            break;\n+        case END_OBJECT:\n+        case END_ARRAY:\n+            _parsingContext = _parsingContext.getParent();\n+            _namesToWrap = _parsingContext.getNamesToWrap();\n+            break;\n+        case FIELD_NAME:\n+            _parsingContext.setCurrentName(_xmlTokens.getLocalName());\n+            break;\n+        default:\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Public API, access to token information, text\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/Issue97Test.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/Issue97Test.java\n import java.util.*;\n \n import org.junit.*;\n-import org.junit.runner.*;\n-import org.junit.runners.*;\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonTypeInfo.*;\n /**\n  * @author Nu Echo Inc.\n  */\n-@RunWith(JUnit4.class)\n public class Issue97Test extends XmlTestBase\n {\n     @JsonTypeInfo(property = \"type\", use = Id.NAME)\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/lists/UnwrappedListWithEmptyCData129Test.java\n+package com.fasterxml.jackson.dataformat.xml.lists;\n+\n+import java.util.List;\n+\n+import javax.xml.bind.annotation.XmlElement;\n+\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+\n+public class UnwrappedListWithEmptyCData129Test extends XmlTestBase\n+{\n+    static class ListValues {\n+        @XmlElement(name = \"value\", required = true)\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<String> value;\n+    }\n+\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    {\n+        // easier for eye:\n+        MAPPER.enable(SerializationFeature.INDENT_OUTPUT);\n+    }\n+\n+    // for [#129]\n+    public void testListWithEmptyCData() throws Exception\n+    {\n+        _testListWithEmptyCData(\" \");\n+        _testListWithEmptyCData(\"\");\n+    }\n+        \n+    private void _testListWithEmptyCData(String cdata) throws Exception\n+    {\n+        ListValues result = MAPPER.readValue(\"<root>\\n\"\n+                + \"<value>A</value>\\n\"\n+//                + \"<value><![CDATA[\"+SECOND+\"]]></value>\\n\"\n+                + \"<value>\"+cdata+\"</value>\\n\"\n+                + \"<value>C</value>\\n\"\n+                + \"</root>\", ListValues.class);\n+\n+        List<String> values = result.value;\n+\n+        assertEquals(3, values.size()); // expecting 3 values, getting only 1\n+        assertEquals(\"A\", values.get(0));\n+        assertEquals(cdata, values.get(1)); // expecting empty string in second position\n+        assertEquals(\"C\", values.get(2));\n+    }    \n+}", "timestamp": 1420000103, "metainfo": ""}