{"sha": "ae52d115705b8e2ed38e8b8d5fc6c91b2d95287d", "log": "Fixed #66", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n     public PropertyName findNameForSerialization(Annotated a)\n     {\n         PropertyName name = _findXmlName(a);\n-        return (name == null) ? super.findNameForSerialization(a) : name;\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public String findSerializationName(AnnotatedField af)\n-    {\n-        PropertyName name = _findXmlName(af);\n-        if (name != null) {\n-            return name.getSimpleName();\n-        }\n-        return super.findSerializationName(af);\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public String findSerializationName(AnnotatedMethod am)\n-    {\n-        PropertyName name = _findXmlName(am);\n-        if (name != null) {\n-            return name.getSimpleName();\n-        }\n-        return super.findSerializationName(am);\n+        if (name == null) {\n+            name = super.findNameForSerialization(a);\n+            if (name == null) {\n+                if (a.hasAnnotation(JacksonXmlText.class)) {\n+                    return PropertyName.USE_DEFAULT;\n+                }\n+            }\n+        }\n+        return name;\n+    }\n+\n+    /* Ok, now: following contains quite a bit of duplication.\n+     * But it is still needed since trying to refactor things tends\n+     * to end in infinite loop or stack overflow... we can eventually\n+     * remove these methods once we are certain that core databinding\n+     * never calls these methods (perhaps with 2.3 or at latest 2.4)\n+     */\n+    \n+    @Deprecated\n+    @Override\n+    public String findSerializationName(AnnotatedField a)\n+    {\n+        PropertyName pname = _findXmlName(a);\n+        if (pname != null) {\n+            return pname.getSimpleName();\n+        }\n+        String name = super.findSerializationName(a);\n+        if (name == null) {\n+            if (a.hasAnnotation(JacksonXmlText.class)) {\n+                return \"\";\n+            }\n+        }\n+        return name;\n+    }\n+\n+    @Deprecated\n+    @Override\n+    public String findSerializationName(AnnotatedMethod a)\n+    {\n+        PropertyName pname = _findXmlName(a);\n+        if (pname != null) {\n+            return pname.getSimpleName();\n+        }\n+        String name = super.findSerializationName(a);\n+        if (name == null) {\n+            if (a.hasAnnotation(JacksonXmlText.class)) {\n+                return \"\";\n+            }\n+        }\n+        return name;\n     }\n \n     @Override\n     public PropertyName findNameForDeserialization(Annotated a)\n     {\n         PropertyName name = _findXmlName(a);\n-        return (name == null) ? super.findNameForDeserialization(a) : name;\n-    }\n-    \n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedField af)\n-    {\n-        PropertyName name = _findXmlName(af);\n-        if (name != null) {\n-            return name.getSimpleName();\n-        }\n-        return super.findDeserializationName(af);\n-    }\n-\n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedMethod am)\n-    {\n-        PropertyName name = _findXmlName(am);\n-        if (name != null) {\n-            return name.getSimpleName();\n-        }\n-        return super.findDeserializationName(am);\n-    }\n-    \n-    @Deprecated\n-    @Override\n-    public String findDeserializationName(AnnotatedParameter ap)\n-    {\n-        PropertyName name = _findXmlName(ap);\n-        if (name != null) {\n+        if (name == null) {\n+            name = super.findNameForDeserialization(a);\n+            if (name == null) {\n+                if (a.hasAnnotation(JacksonXmlText.class)) {\n+                    return PropertyName.USE_DEFAULT;\n+                }\n+            }\n+        }\n+        return name;\n+    }\n+    \n+    @Deprecated\n+    @Override\n+    public String findDeserializationName(AnnotatedField a)\n+    {\n+        PropertyName pname = _findXmlName(a);\n+        if (pname != null) {\n+            return pname.getSimpleName();\n+        }\n+        String name = super.findDeserializationName(a);\n+        if (name == null) {\n+            if (a.hasAnnotation(JacksonXmlText.class)) {\n+                return \"\";\n+            }\n+        }\n+        return name;\n+    }\n+\n+    @Deprecated\n+    @Override\n+    public String findDeserializationName(AnnotatedMethod a)\n+    {\n+        PropertyName pname = _findXmlName(a);\n+        if (pname != null) {\n+            return pname.getSimpleName();\n+        }\n+        String name = super.findDeserializationName(a);\n+        if (name == null) {\n+            if (a.hasAnnotation(JacksonXmlText.class)) {\n+                return \"\";\n+            }\n+        }\n+        return name;\n+    }\n+    \n+    @Deprecated\n+    @Override\n+    public String findDeserializationName(AnnotatedParameter a)\n+    {\n+        PropertyName pname = _findXmlName(a);\n+        if (pname != null) {\n             // empty name not acceptable...\n-            String local = name.getSimpleName();\n+            String local = pname.getSimpleName();\n             if (local != null && local.length() > 0) {\n                 return local;\n             }\n         }\n-        return super.findDeserializationName(ap);\n+        // xml text still has special handling...\n+        String name = super.findDeserializationName(a);\n+        if (name == null) {\n+            if (a.hasAnnotation(JacksonXmlText.class)) {\n+                return \"\";\n+            }\n+        }\n+        return super.findDeserializationName(a);\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestTextValue.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestTextValue.java\n     {\n         public String value;\n     }\n-    \n+\n+    // [Issue#66]\n+    static class Issue66Bean\n+    {\n+        @JacksonXmlProperty(isAttribute = true)\n+        protected String id;\n+\n+        @JacksonXmlText\n+        protected String textValue;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Unit tests\n \n     public void testDeserializeAsText() throws IOException\n     {\n-    \tSimple result = MAPPER.readValue(\"<Simple a='99'>else</Simple>\",\n-    \t\t\tSimple.class);\n-    \tassertEquals(99, result.a);\n-    \tassertEquals(\"else\", result.text);\n+        Simple result = MAPPER.readValue(\"<Simple a='99'>else</Simple>\", Simple.class);\n+        assertEquals(99, result.a);\n+        assertEquals(\"else\", result.text);\n     }\n     \n     public void testIssue24() throws Exception\n     {\n-    \tfinal String TEXT = \"+/null/this is a long string\";\n-    \tfinal String XML =\n+        final String TEXT = \"+/null/this is a long string\";\n+        final String XML =\n     \t\t\t\"<main>\\n\"\n     \t\t\t+\"<com.test.stack name='stack1'>\\n\"\n     \t\t\t+\"<com.test.stack.slot height='0' id='0' name='slot0' width='0'>\"\n     \t\t\t+\"</com.test.stack.slot>\\n\"\n     \t\t\t+\"</com.test.stack>\\n\"\n     \t\t\t+\"</main>\";\n-    \tMain main = MAPPER.readValue(XML, Main.class);\n-    \tassertNotNull(main.stack);\n-    \tassertNotNull(main.stack.slot);\n-    \tassertEquals(TEXT, main.stack.slot.value);\n+        Main main = MAPPER.readValue(XML, Main.class);\n+        assertNotNull(main.stack);\n+        assertNotNull(main.stack.slot);\n+        assertEquals(TEXT, main.stack.slot.value);\n     }\n \n     // for [Issue#36]\n         } catch (JsonProcessingException e) {\n             verifyException(e, \"Unrecognized\");\n         }\n-        \n         JacksonXmlModule module = new JacksonXmlModule();\n         module.setXMLTextElementName(\"value\");\n         XmlMapper mapper = new XmlMapper(module);\n         JAXBStyle pojo = mapper.readValue(XML, JAXBStyle.class);\n         assertEquals(\"foo\", pojo.value);\n     }\n+\n+    // [Issue#66], implicit property from \"XmlText\"\n+    public void testIssue66() throws Exception\n+    {\n+        JacksonXmlModule module = new JacksonXmlModule();\n+        module.setDefaultUseWrapper(false);\n+        XmlMapper mapper = new XmlMapper(module);\n+        final String XML = \"<Issue66Bean id=\\\"id\\\">text</Issue66Bean>\";\n+\n+        // let's start with deserialization\n+        Issue66Bean node = mapper.readValue(XML, Issue66Bean.class);\n+        assertEquals(\"id\", node.id);\n+        assertEquals(\"text\", node.textValue);\n+\n+        // Let's serialize too\n+        String json = mapper.writeValueAsString(node);\n+        assertEquals(XML, json);\n+    }\n }", "timestamp": 1369626641, "metainfo": ""}