{"sha": "06b9b243ce71748609181b6e9f9488621475b8b0", "log": "Fixed issue#2, addition of @JacksonXmlRootElement.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/JacksonXmlAnnotationIntrospector.java\n         JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n         if (w != null) {\n             return new QName(w.namespace(), w.localName());\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public QName findRootElement(Annotated ann)\n+    {\n+        JacksonXmlRootElement root = ann.getAnnotation(JacksonXmlRootElement.class);\n+        if (root != null) {\n+            return new QName(root.namespace(), root.localName());\n         }\n         return null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/xml/XmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/XmlAnnotationIntrospector.java\n     public Boolean isOutputAsAttribute(Annotated ann);\n \n     /**\n-     * Method to check if specified property has annotation that indicates\n+     * Method used to check if specified property has annotation that indicates\n      * that it should be wrapped in an element; and if so, name to use.\n      * Note: local name of \"\" is used to indicate that name should default\n      * to using name (local name and namespace) of property itself.\n      */\n     public QName findWrapperElement(Annotated ann);\n+\n+    /**\n+     * Method used to find out name to use for the outermost (root) XML element\n+     * name when serializing (since there is no property that would define it);\n+     * this overrides default name based on type of object.\n+     */\n+    public QName findRootElement(Annotated ann);\n     \n     /*\n     /**********************************************************************\n         }\n \n         @Override\n+        public QName findRootElement(Annotated ann)\n+        {\n+            QName value = (_xmlPrimary == null) ? null : _xmlPrimary.findRootElement(ann);\n+            if (value == null && _xmlSecondary != null) {\n+                value = _xmlSecondary.findRootElement(ann);\n+            }\n+            return value;\n+        }\n+        \n+        @Override\n         public Boolean isOutputAsAttribute(Annotated ann)\n         {\n             Boolean value = (_xmlPrimary == null) ? null : _xmlPrimary.isOutputAsAttribute(ann);\n--- a/src/main/java/com/fasterxml/jackson/xml/XmlTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/XmlTypeResolverBuilder.java\n import org.codehaus.jackson.map.jsontype.impl.ClassNameIdResolver;\n import org.codehaus.jackson.map.jsontype.impl.MinimalClassNameIdResolver;\n import org.codehaus.jackson.map.jsontype.impl.StdTypeResolverBuilder;\n-import org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;\n import org.codehaus.jackson.type.JavaType;\n \n /**\n  * Custom specialization of {@link StdTypeResolverBuilder}; needed so that\n  * type id property name can be modified as necessary to make it legal\n- * xml element or attribute name.\n+ * XML element or attribute name.\n  */\n public class XmlTypeResolverBuilder extends StdTypeResolverBuilder\n {\n--- a/src/main/java/com/fasterxml/jackson/xml/annotate/JacksonXmlProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/annotate/JacksonXmlProperty.java\n  * for properties, above and beyond what\n  * {@link org.codehaus.jackson.annotate.JsonProperty} contains.\n  * It is an alternative to using JAXB annotations.\n- * \n- * @since 1.7\n  */\n @Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER})\n @Retention(RetentionPolicy.RUNTIME)\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/xml/annotate/JacksonXmlRootElement.java\n+package com.fasterxml.jackson.xml.annotate;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.codehaus.jackson.annotate.JacksonAnnotation;\n+\n+/**\n+ * Annotation that can be used to define name of root element used\n+ * for the root-level object when serialized, which normally uses\n+ * name of the type (class). It is similar to JAXB <code>XmlRootElement</code>.\n+ */\n+@Target({ElementType.TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+@JacksonAnnotation\n+public @interface JacksonXmlRootElement\n+{\n+    String namespace() default \"\";\n+    String localName() default \"\";\n+}\n--- a/src/main/java/com/fasterxml/jackson/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n     {\n         XmlElementWrapper w = findAnnotation(XmlElementWrapper.class, ann, false, false, false);\n         if (w != null) {\n-            String ln = w.name();\n-            String ns = w.namespace();\n-            // if undefined, means \"use property's name\":\n-            if (MARKER_FOR_DEFAULT.equals(ln)) {\n-                ln = \"\";\n-            }\n-            return new QName(ns, ln);\n+            return new QName(handleJaxbDefault(w.namespace()), handleJaxbDefault(w.name()));\n         }\n         return null;\n     }\n \n+    @Override\n+    public QName findRootElement(Annotated ann)\n+    {\n+        XmlRootElement root = findAnnotation(XmlRootElement.class, ann, false, false, false);\n+        if (root != null) {\n+            return new QName(handleJaxbDefault(root.namespace()), handleJaxbDefault(root.name()));\n+        }\n+        return null;\n+    }\n+    \n     /*\n     /**********************************************************************\n     /* Helper methods\n         // Yes, check package, no class (already included), yes superclasses\n         return findAnnotation(XmlRootElement.class, ac, true, false, true);\n     }\n+\n+    private String handleJaxbDefault(String value)\n+    {\n+        return MARKER_FOR_DEFAULT.equals(value) ? \"\" : value;\n+    }\n+\n }\n--- a/src/main/java/com/fasterxml/jackson/xml/util/XmlRootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/xml/util/XmlRootNameLookup.java\n                 BasicBeanDescription beanDesc = (BasicBeanDescription) config.introspectClassAnnotations(rootType);\n                 AnnotationIntrospector intr = config.getAnnotationIntrospector();\n                 AnnotatedClass ac = beanDesc.getClassInfo();\n-                String localName = intr.findRootName(ac);\n+                String localName = null;\n+                String ns = null;\n+\n+                QName root = findRootElement(intr, ac);\n+                if (root != null) {\n+                    localName = root.getLocalPart();\n+                    ns = root.getNamespaceURI();\n+                }\n+                if (localName == null || localName.length() == 0) {\n+                    localName = intr.findRootName(ac);\n+                }\n+                \n                 // No answer so far? Let's just default to using simple class name\n-                if (localName == null) {\n+                if (localName == null || localName.length() == 0) {\n                     // Should we strip out enclosing class tho? For now, nope:\n                     localName = rootType.getSimpleName();\n                     name = new QName(\"\", localName);\n                 } else {\n-                    // Otherwise let's see if there's namespace, too\n-                    String ns = findNamespace(intr, ac);\n-                    if (ns == null) { // some QName impls barf on nulls...\n-                        ns = \"\";\n+                    // Otherwise let's see if there's namespace, too (if we are missing it)\n+                    if (ns == null || ns.length() == 0) {\n+                        ns = findNamespace(intr, ac);\n                     }\n-                    name = new QName(ns, localName);\n                 }\n+                if (ns == null) { // some QName impls barf on nulls...\n+                    ns = \"\";\n+                }\n+                name = new QName(ns, localName);\n                 _rootNames.put(key, name);\n             }\n         }\n         }\n         return null;\n     }\n+\n+    private QName findRootElement(AnnotationIntrospector ai, AnnotatedClass ann)\n+    {\n+        for (AnnotationIntrospector intr : ai.allIntrospectors()) {\n+            if (intr instanceof XmlAnnotationIntrospector) {\n+                QName elem = ((XmlAnnotationIntrospector) intr).findRootElement(ann);\n+                if (elem != null) {\n+                    return elem;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/xml/TestSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/TestSerialization.java\n import com.fasterxml.jackson.xml.XmlMapper;\n import com.fasterxml.jackson.xml.annotate.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.xml.annotate.JacksonXmlProperty;\n+import com.fasterxml.jackson.xml.annotate.JacksonXmlRootElement;\n \n public class TestSerialization extends XmlTestBase\n {\n         public String attr = \"3\";\n     }\n \n+    @JacksonXmlRootElement(localName=\"root\")\n+    static class RootBean\n+    {\n+        public String value = \"123\";\n+    }\n+\n+    @JacksonXmlRootElement(localName=\"nsRoot\", namespace=\"http://foo\")\n+    static class NsRootBean\n+    {\n+        public String value = \"abc\";\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Set up\n     {\n         String xml = _xmlMapper.writeValueAsString(new StringBean());\n         \n-        // Hmmh. Looks like JDK Stax adds bogus ns declaration. As such,\n+        // Hmmh. Looks like JDK Stax may adds bogus ns declaration. As such,\n         // let's just check that name starts ok...\n-        if (xml.indexOf(\"<StringBean\") != 0) {\n+        if (!xml.startsWith(\"<StringBean\")) {\n             fail(\"Expected root name of 'StringBean'; but XML document is [\"+xml+\"]\");\n+        }\n+\n+        // and then see that basic non-namespace root is ok\n+        xml = _xmlMapper.writeValueAsString(new RootBean());\n+        assertEquals(\"<root><value>123</value></root>\", xml);\n+\n+        // and namespace one too\n+        xml = _xmlMapper.writeValueAsString(new NsRootBean());\n+        if (xml.indexOf(\"nsRoot\") < 0) { // verify localName\n+            fail(\"Expected root name of 'nsRoot'; but XML document is [\"+xml+\"]\");\n+        }\n+        // and NS declaration\n+        if (xml.indexOf(\"http://foo\") < 0) {\n+            fail(\"Expected NS declaration for 'http://foo', not found, XML document is [\"+xml+\"]\");\n         }\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/xml/jaxb/TestWithJAXBAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/xml/jaxb/TestWithJAXBAnnotations.java\n         assertEquals(\"<AttrBean><attr>3</attr></AttrBean>\", _nonJaxbMapper.writeValueAsString(bean));\n         assertEquals(\"<AttrBean attr=\\\"3\\\"/>\", _jaxbMapper.writeValueAsString(bean));\n     }\n-\n-    /*\n-    /**********************************************************************\n-    /* Helper methods\n-    /**********************************************************************\n-     */\n }", "timestamp": 1296885401, "metainfo": ""}