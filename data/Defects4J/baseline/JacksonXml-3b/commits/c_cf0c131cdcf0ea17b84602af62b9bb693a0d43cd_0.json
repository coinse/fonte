{"sha": "cf0c131cdcf0ea17b84602af62b9bb693a0d43cd", "log": "Refactor tests a bit", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestDeserialization.java\n import java.util.*;\n \n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlText;\n \n         public String number = \"NOT SET\";\n         public String type = \"NOT SET\";\n     }\n-\n-    static class Optionals {\n-        @JacksonXmlElementWrapper(useWrapping = false)\n-        public List<Optional> optional;\n-    } \n \n     /*\n     /**********************************************************\n     // Issue#14:\n     public void testMapWithAttr() throws Exception\n     {\n-    \tfinal String xml = \"<order><person lang='en'>John Smith</person></order>\";\n+        final String xml = \"<order><person lang='en'>John Smith</person></order>\";\n \n     \t/*\n     \tJsonParser jp = MAPPER.getJsonFactory().createParser(xml);\n     \t\t}\n     \t}\n     \t*/\n-    \t\n-    \tMap<?,?> map = MAPPER.readValue(xml, Map.class);\n+        Map<?,?> map = MAPPER.readValue(xml, Map.class);\n     \t\n     \t// Will result in equivalent of:\n     \t// { \"person\" : {\n     \t// which may or may not be what we want. Without attribute\n     \t// we would just have '{ \"person\" : \"John Smith\" }'\n     \t\n-    \tassertNotNull(map);\n+    \t    assertNotNull(map);\n     }\n \n     // // Tests for [Issue#64]\n \n     public void testOptionalAttr() throws Exception\n     {\n-        Optional ob = MAPPER.readValue(\"<phone type='work'>123-456-7890</phone>\",\n+        Optional ob = MAPPER.readValue(\"<Optional type='work'>123-456-7890</Optional>\",\n                 Optional.class);\n         assertNotNull(ob);\n         assertEquals(\"123-456-7890\", ob.number);\n \n     public void testMissingOptionalAttr() throws Exception\n     {\n-        Optional ob = MAPPER.readValue(\"<phone>123-456-7890</phone>\",\n+        Optional ob = MAPPER.readValue(\"<Optional>123-456-7890</Optional>\",\n                 Optional.class);\n         assertNotNull(ob);\n         assertEquals(\"123-456-7890\", ob.number);\n         assertEquals(\"NOT SET\", ob.type);\n     }\n-\n-    public void testMultiOptional() throws Exception\n-    {\n-        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n-                Optionals.class);\n-        assertNotNull(ob);\n-        assertNotNull(ob.optional);\n-        assertEquals(1, ob.optional.size());\n-//        System.err.println(\"ob: \" + ob); // works fine\n-        Optional opt = ob.optional.get(0);\n-        assertEquals(\"123-456-7890\", opt.number);\n-        assertEquals(\"work\", opt.type);\n-    }\n-    \n-        public void testMultiOptionalWithMissingType() throws Exception\n-    {\n-            Optionals ob = MAPPER.readValue(\"<MultiOptional><optional>123-456-7890</optional></MultiOptional>\",\n-                    Optionals.class);\n-            assertNotNull(ob);\n-            assertNotNull(ob.optional);\n-            assertEquals(1, ob.optional.size());\n-//            System.err.println(\"ob: \" + ob); // works fine\n-            Optional opt = ob.optional.get(0);\n-            assertEquals(\"123-456-7890\", opt.number);\n-            assertEquals(\"NOT SET\", opt.type);\n-    }\n }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestListRoundtrip.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestListRoundtrip.java\n \n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n \n public class TestListRoundtrip extends XmlTestBase\n {\n     @JacksonXmlRootElement(localName=\"parents\")\n     public static class Parents {\n-      @JacksonXmlElementWrapper(useWrapping=false)\n-      public List<Parent> parent = new ArrayList<Parent>();\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Parent> parent = new ArrayList<Parent>();\n     }\n \n     @JsonPropertyOrder({ \"name\", \"desc\", \"prop\" })\n     public static class Parent {\n-      @JacksonXmlProperty(isAttribute=true)\n-      public String name;\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n \n-      public String description;\n+        public String description;\n       \n-      @JacksonXmlElementWrapper(useWrapping=false)\n-      public List<Prop> prop = new ArrayList<Prop>();\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Prop> prop = new ArrayList<Prop>();\n \n-      public Parent() { }\n-      public Parent(String name, String desc) {\n-          this.name = name;\n-          description = desc;\n-      }\n+        public Parent() { }\n+        public Parent(String name, String desc) {\n+            this.name = name;\n+            description = desc;\n+        }\n     }\n \n     static class Prop {\n-      @JacksonXmlProperty(isAttribute=true)\n-      public String name;\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String name;\n \n-      public String value;\n+        public String value;\n \n-      public Prop() { }\n-      public Prop(String name, String value) {\n-          this.name = name;\n-          this.value = value;\n-      }\n+        public Prop() { }\n+        public Prop(String name, String value) {\n+            this.name = name;\n+            this.value = value;\n+        }\n     }\n \n     // For [Issue#58]:\n         public List<Point> points;\n     }\n \n+    static class Optional {\n+        @JacksonXmlText\n+        public String number = \"NOT SET\";\n+        public String type = \"NOT SET\";\n+    }\n+    static class Optionals {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Optional> optional;\n+    } \n     \n     /*\n     /**********************************************************\n         assertEquals(4, converted.points.get(1).y);\n         assertEquals(6, converted.points.get(2).y);\n     }\n+\n+    // // [Issue#64]\n+    \n+    public void testOptionals() throws Exception\n+    {\n+        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n+                Optionals.class);\n+        assertNotNull(ob);\n+        assertNotNull(ob.optional);\n+        assertEquals(1, ob.optional.size());\n+//        System.err.println(\"ob: \" + ob); // works fine\n+        Optional opt = ob.optional.get(0);\n+        assertEquals(\"123-456-7890\", opt.number);\n+        assertEquals(\"work\", opt.type);\n+    }\n+    \n+        public void testOptionalsWithMissingType() throws Exception\n+    {\n+            Optionals ob = MAPPER.readValue(\"<MultiOptional><optional>123-456-7890</optional></MultiOptional>\",\n+                    Optionals.class);\n+            assertNotNull(ob);\n+            assertNotNull(ob.optional);\n+            assertEquals(1, ob.optional.size());\n+//            System.err.println(\"ob: \" + ob); // works fine\n+            Optional opt = ob.optional.get(0);\n+            assertEquals(\"123-456-7890\", opt.number);\n+            assertEquals(\"NOT SET\", opt.type);\n+    }\n     \n }", "timestamp": 1370116111, "metainfo": ""}