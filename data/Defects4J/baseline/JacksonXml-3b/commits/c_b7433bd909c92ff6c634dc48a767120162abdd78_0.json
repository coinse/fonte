{"sha": "b7433bd909c92ff6c634dc48a767120162abdd78", "log": "Warnings cleanup; use simplified base64 decoder from base package", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n                 _objectCodec, _createXmlWriter(out));\n     }\n \n+    @SuppressWarnings(\"resource\")\n     @Override\n     public ToXmlGenerator createGenerator(File f, JsonEncoding enc) throws IOException\n     {\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n         return _binaryValue;\n     }\n     \n+    @SuppressWarnings(\"resource\")\n     protected byte[] _decodeBase64(Base64Variant b64variant)\n         throws IOException, JsonParseException\n     {\n         ByteArrayBuilder builder = _getByteArrayBuilder();\n-    \n         final String str = getText();\n-        int ptr = 0;\n-        int len = str.length();\n-\n-        main_loop:\n-        while (ptr < len) {\n-            // first, we'll skip preceding white space, if any\n-            char ch;\n-            do {\n-                ch = str.charAt(ptr++);\n-                if (ptr >= len) {\n-                    break main_loop;\n-                }\n-            } while (ch <= INT_SPACE);\n-            int bits = b64variant.decodeBase64Char(ch);\n-            if (bits < 0) {\n-                _reportInvalidBase64(b64variant, ch, 0, null);\n-            }\n-            int decodedData = bits;\n-            // then second base64 char; can't get padding yet, nor ws\n-            if (ptr >= len) {\n-                _reportBase64EOF();\n-            }\n-            ch = str.charAt(ptr++);\n-            bits = b64variant.decodeBase64Char(ch);\n-            if (bits < 0) {\n-                _reportInvalidBase64(b64variant, ch, 1, null);\n-            }\n-            decodedData = (decodedData << 6) | bits;\n-            // third base64 char; can be padding, but not ws\n-            if (ptr >= len) {\n-                _reportBase64EOF();\n-            }\n-            ch = str.charAt(ptr++);\n-            bits = b64variant.decodeBase64Char(ch);\n-\n-            // First branch: can get padding (-> 1 byte)\n-            if (bits < 0) {\n-                if (bits != Base64Variant.BASE64_VALUE_PADDING) {\n-                    _reportInvalidBase64(b64variant, ch, 2, null);\n-                }\n-                // Ok, must get padding\n-                if (ptr >= len) {\n-                    _reportBase64EOF();\n-                }\n-                ch = str.charAt(ptr++);\n-                if (!b64variant.usesPaddingChar(ch)) {\n-                    _reportInvalidBase64(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");\n-                }\n-                // Got 12 bits, only need 8, need to shift\n-                decodedData >>= 4;\n-                builder.append(decodedData);\n-                continue;\n-            }\n-            // Nope, 2 or 3 bytes\n-            decodedData = (decodedData << 6) | bits;\n-            // fourth and last base64 char; can be padding, but not ws\n-            if (ptr >= len) {\n-                _reportBase64EOF();\n-            }\n-            ch = str.charAt(ptr++);\n-            bits = b64variant.decodeBase64Char(ch);\n-            if (bits < 0) {\n-                if (bits != Base64Variant.BASE64_VALUE_PADDING) {\n-                    _reportInvalidBase64(b64variant, ch, 3, null);\n-                }\n-                decodedData >>= 2;\n-                builder.appendTwoBytes(decodedData);\n-            } else {\n-                // otherwise, our triple is now complete\n-                decodedData = (decodedData << 6) | bits;\n-                builder.appendThreeBytes(decodedData);\n-            }\n-        }\n+        _decodeBase64(str, builder, b64variant);\n         return builder.toByteArray();\n-    }\n-\n-    /**\n-     * @param bindex Relative index within base64 character unit; between 0\n-     *   and 3 (as unit has exactly 4 characters)\n-     */\n-    @Override\n-    protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg)\n-        throws JsonParseException\n-    {\n-        String base;\n-        if (ch <= INT_SPACE) {\n-            base = \"Illegal white space character (code 0x\"+Integer.toHexString(ch)+\") as character #\"+(bindex+1)+\" of 4-char base64 unit: can only used between units\";\n-        } else if (b64variant.usesPaddingChar(ch)) {\n-            base = \"Unexpected padding character ('\"+b64variant.getPaddingChar()+\"') as character #\"+(bindex+1)+\" of 4-char base64 unit: padding only legal as 3rd or 4th character\";\n-        } else if (!Character.isDefined(ch) || Character.isISOControl(ch)) {\n-            // Not sure if we can really get here... ? (most illegal xml chars are caught at lower level)\n-            base = \"Illegal character (code 0x\"+Integer.toHexString(ch)+\") in base64 content\";\n-        } else {\n-            base = \"Illegal character '\"+ch+\"' (code 0x\"+Integer.toHexString(ch)+\") in base64 content\";\n-        }\n-        if (msg != null) {\n-            base = base + \": \" + msg;\n-        }\n-        throw new JsonParseException(base, JsonLocation.NA);\n-    }\n-\n-    @Override\n-    protected void _reportBase64EOF()\n-        throws JsonParseException\n-    {\n-        throw new JsonParseException(\"Unexpected end-of-String when base64 content\", JsonLocation.NA);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/XmlBeanDeserializerModifier.java\n             Boolean b = AnnotationUtil.findIsTextAnnotation(intr, acc);\n             if (b != null && b.booleanValue()) {\n                 // unwrapped properties will appear as 'unnamed' (empty String)\n-                BeanPropertyDefinition newProp = prop.withName(_cfgNameForTextValue);\n+                BeanPropertyDefinition newProp = prop.withSimpleName(_cfgNameForTextValue);\n                 if (newProp != prop) {\n                     propDefs.set(i, newProp);\n                 }\n                         propDefs = new ArrayList<BeanPropertyDefinition>(propDefs);\n                     }\n                     ++changed;\n-                    propDefs.set(i, prop.withName(localName));\n+                    propDefs.set(i, prop.withSimpleName(localName));\n                     continue;\n                 }\n                 // otherwise unwrapped; needs handling but later on\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanPropertyWriter.java\n     /**\n      * Element name used as wrapper for collection.\n      */\n-    protected final QName _wrapperName;\n+    protected final QName _wrapperQName;\n \n     /**\n      * Element name used for items in the collection\n      */\n-    protected final QName _wrappedName;\n+    protected final QName _wrappedQName;\n     \n     /*\n     /**********************************************************\n             JsonSerializer<Object> serializer)\n     {\n         super(wrapped);\n-        _wrapperName = _qname(wrapperName);\n-        _wrappedName = _qname(wrappedName);\n+        _wrapperQName = _qname(wrapperName);\n+        _wrappedQName = _qname(wrappedName);\n \n         if (serializer != null) {\n             assignSerializer(serializer);\n \n         // Ok then; addition we want to do is to add wrapper element, and that's what happens here\n         ToXmlGenerator xmlGen = (ToXmlGenerator) jgen;\n-        xmlGen.startWrappedValue(_wrapperName, _wrappedName);\n+        xmlGen.startWrappedValue(_wrapperQName, _wrappedQName);\n         jgen.writeFieldName(_name);\n         if (_typeSerializer == null) {\n             ser.serialize(value, jgen, prov);\n         } else {\n             ser.serializeWithType(value, jgen, prov, _typeSerializer);\n         }\n-        xmlGen.finishWrappedValue(_wrapperName, _wrappedName);\n+        xmlGen.finishWrappedValue(_wrapperQName, _wrappedQName);\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestDeserialization.java\n         assertEquals(\"abc\", bean.text);\n     }\n     \n-    // Issue#14:\n+    // [Issue#14]\n     public void testMapWithAttr() throws Exception\n     {\n         final String xml = \"<order><person lang='en'>John Smith</person></order>\";\n-\n-    \t/*\n-    \tJsonParser jp = MAPPER.getJsonFactory().createParser(xml);\n-    \tJsonToken t;\n-    \twhile ((t = jp.nextToken()) != null) {\n-    \t\tswitch (t) {\n-    \t\tcase FIELD_NAME:\n-    \t\t\tSystem.out.println(\"Field '\"+jp.getCurrentName()+\"'\");\n-    \t\t\tbreak;\n-    \t\tcase VALUE_STRING:\n-    \t\t\tSystem.out.println(\"text '\"+jp.getText()+\"'\");\n-    \t\tdefault:\n-    \t\t\tSystem.out.println(\"Token \"+t);\n-    \t\t}\n-    \t}\n-    \t*/\n         Map<?,?> map = MAPPER.readValue(xml, Map.class);\n     \t\n     \t// Will result in equivalent of:\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestJDKSerializability.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestJDKSerializability.java\n         }\n     }\n     \n+    @SuppressWarnings(\"resource\")\n     protected String _writeXml(XmlFactory f, boolean useBytes) throws IOException\n     {\n         if (useBytes) {\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestXmlParser.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestXmlParser.java\n         while (jp.nextToken() != null) {\n             jg.copyCurrentEvent(jp);\n         }\n+        jp.close();\n         jg.close();\n         return w.toString();\n     }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestDeserialization.java\n \n     private final XmlMapper MAPPER = new XmlMapper();\n \n-    // [Issue-25]\n+    // [Issue#25]\n     public void testEmptyStringFromElemAndAttr() throws Exception\n     {\n         EmptyStrings ob = MAPPER.readValue(\"<EmptyString a=''><b /></EmptyString>\",\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestListRoundtrip.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+// Failing unit test(s) wrt [Issue#64]\n+public class TestListRoundtrip extends XmlTestBase\n+{\n+    static class Optional {\n+        @JacksonXmlText\n+        public String number = \"NOT SET\";\n+\n+        @JacksonXmlProperty(isAttribute=true)\n+        public String type = \"NOT SET\";\n+    }\n+\n+    static class Optionals {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        public List<Optional> optional;\n+    } \n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    // // [Issue#64]\n+    public void testOptionalsWithMissingType() throws Exception\n+    {\n+//        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional type='work'>123-456-7890</optional></MultiOptional>\",\n+        Optionals ob = MAPPER.readValue(\"<MultiOptional><optional>123-456-7890</optional></MultiOptional>\",\n+                Optionals.class);\n+        assertNotNull(ob);\n+        assertNotNull(ob.optional);\n+        assertEquals(1, ob.optional.size());\n+\n+//            System.err.println(\"ob: \" + ob); // works fine\n+\n+        Optional opt = ob.optional.get(0);\n+        assertEquals(\"123-456-7890\", opt.number);\n+        assertEquals(\"NOT SET\", opt.type);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestUntypedListSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestUntypedListSerialization.java\n     @JacksonXmlRootElement(localName=\"l\")\n     static class UntypedListBean\n     {\n-    \tpublic final Object list;\n+        public final Object list;\n     \t\n-    \tpublic UntypedListBean()\n-    \t{\n-    \t    ArrayList<String> l= new ArrayList<String>();\n-    \t    l.add(\"first\");\n-    \t    l.add(\"second\");\n-    \t    list = l;\n-    \t}\n+        public UntypedListBean() {\n+            ArrayList<String> l= new ArrayList<String>();\n+            l.add(\"first\");\n+            l.add(\"second\");\n+            list = l;\n+        }\n     }\n \n     @JacksonXmlRootElement(localName=\"l\")\n     static class TypedListBean\n     {\n-    \tpublic final List<String> list;\n+        public final List<String> list;\n     \t\n-    \tpublic TypedListBean()\n-    \t{\n-    \t    ArrayList<String> l= new ArrayList<String>();\n-    \t    l.add(\"first\");\n-    \t    l.add(\"second\");\n-    \t    list = l;\n-    \t}\n+        public TypedListBean() {\n+            ArrayList<String> l= new ArrayList<String>();\n+            l.add(\"first\");\n+            l.add(\"second\");\n+            list = l;\n+        }\n     }\n     \n     /*\n     private final XmlMapper MAPPER = new XmlMapper();\n \n     /*\n-     *  For Issue#8 -- Will not use wrapping, if type is not statically known\n+     *  For [Issue#8] -- Will not use wrapping, if type is not statically known\n      *  to be a Collection\n      */\n     public void testListAsObject() throws IOException\n     {\n-    \tString xmlForUntyped = MAPPER.writeValueAsString(new UntypedListBean());\n-    \tString xmlForTyped = MAPPER.writeValueAsString(new TypedListBean());\n+        String xmlForUntyped = MAPPER.writeValueAsString(new UntypedListBean());\n+        String xmlForTyped = MAPPER.writeValueAsString(new TypedListBean());\n \n-    \tassertEquals(xmlForTyped, xmlForUntyped);\n+        assertEquals(xmlForTyped, xmlForUntyped);\n     }\n }", "timestamp": 1376538864, "metainfo": ""}