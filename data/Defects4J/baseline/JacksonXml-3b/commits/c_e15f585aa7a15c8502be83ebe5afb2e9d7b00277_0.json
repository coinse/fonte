{"sha": "e15f585aa7a15c8502be83ebe5afb2e9d7b00277", "log": "Add a test for #58", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestListDeserialization.java\n+package com.fasterxml.jackson.dataformat.xml.unwrapped;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class TestListDeserialization extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+    @JacksonXmlRootElement(localName = \"person\", namespace =\"http://example.org/person\" )\n+    public static class Person\n+    {\n+        @JacksonXmlProperty( isAttribute = true )\n+        public String id;\n+        public String name;\n+        public int age;\n+\n+        @JacksonXmlElementWrapper(localName = \"notes\")\n+        @JacksonXmlProperty(localName = \"note\" )\n+        public List<String> notes = new ArrayList<String>();\n+\n+        public Person() { }\n+        public Person(String name, int age) {\n+            this.name = name;\n+            this.age = age;\n+        }\n+    }\n+\n+    public static class PersonWithGetters\n+    {\n+       @JacksonXmlProperty( isAttribute = true )\n+       public String id;\n+\n+       protected List<String> _notes = new ArrayList<String>();\n+              \n+       public PersonWithGetters() { }\n+       public PersonWithGetters(String id) {\n+           this.id = id;\n+       }\n+\n+       @JacksonXmlElementWrapper(localName = \"notes\")\n+       @JacksonXmlProperty( localName = \"note\" )\n+       public List<String> getStuff() {\n+           return _notes;\n+       }\n+\n+       public void setStuff(List<String> n) {\n+           _notes = n;\n+       }\n+    }\n+\n+    static class ListBeanWrapped\n+    {\n+        @JacksonXmlElementWrapper\n+        public List<Integer> values;\n+    }\n+\n+    static class ListBeanUnwrapped\n+    {\n+        @JacksonXmlElementWrapper(useWrapping=false)\n+        public List<Integer> values;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    {\n+        // easier for eye:\n+        MAPPER.enable(SerializationFeature.INDENT_OUTPUT);\n+    }\n+\n+    /* Issue#17 [https://github.com/FasterXML/jackson-dataformat-xml/issues/17]\n+     * \n+     * Problems deserializing otherwise properly wrapped lists\n+     */\n+    public void testWrappedList() throws Exception\n+    {\n+        Person p = new Person( \"Name\", 30 );\n+        p.notes.add(\"note 1\");\n+        p.notes.add(\"note 2\");\n+        String xml = MAPPER.writeValueAsString( p );\n+        Person result = MAPPER.readValue(xml, Person.class);\n+        assertNotNull(result);\n+        assertEquals(\"Name\", result.name);\n+        assertEquals(30, result.age);\n+        assertEquals(2, result.notes.size());\n+        assertEquals(\"note 1\", result.notes.get(0));\n+        assertEquals(\"note 2\", result.notes.get(1));\n+    }\n+\n+    public void testWrappedListWithGetters() throws Exception\n+    {\n+        PersonWithGetters p = new PersonWithGetters(\"abc\");\n+        p._notes.add(\"note 1\");\n+        p._notes.add(\"note 2\");\n+        String xml = MAPPER.writeValueAsString( p );\n+        PersonWithGetters result = MAPPER.readValue(xml, PersonWithGetters.class);\n+        assertNotNull(result);\n+        assertEquals(\"abc\", result.id);\n+        assertEquals(2, result._notes.size());\n+        assertEquals(\"note 1\", result._notes.get(0));\n+        assertEquals(\"note 2\", result._notes.get(1));\n+    }\n+\n+    public void testWrappedListBeanDeser() throws Exception\n+    {\n+        ListBeanWrapped bean = MAPPER.readValue(\n+                \"<ListBeanWrapped><values><values>1</values><values>2</values><values>3</values></values></ListBeanWrapped>\",\n+                ListBeanWrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        assertEquals(3, bean.values.size());\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+        assertEquals(Integer.valueOf(3), bean.values.get(2));\n+    }\n+\n+    // for [Issue#33]\n+    public void testWrappedListWithAttribute() throws Exception\n+    {\n+        ListBeanWrapped bean = MAPPER.readValue(\n+                \"<ListBeanWrapped><values id='123'><values>1</values><values>2</values></values></ListBeanWrapped>\",\n+                ListBeanWrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        if (bean.values.size() < 2) { // preliminary check\n+            fail(\"List should have 2 entries, had \"+bean.values.size());\n+        }\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+        assertEquals(2, bean.values.size());\n+    }\n+\n+    public void testUnwrappedListBeanDeser() throws Exception\n+    {\n+        /*\n+        ListBeanUnwrapped foo = new ListBeanUnwrapped();\n+        foo.values = new ArrayList<Integer>();\n+        foo.values.add(1);\n+        foo.values.add(2);\n+        foo.values.add(3);\n+System.out.println(\"List -> \"+MAPPER.writeValueAsString(foo));\n+*/\n+        \n+        ListBeanUnwrapped bean = MAPPER.readValue(\n+                \"<ListBeanUnwrapped><values>1</values><values>2</values><values>3</values></ListBeanUnwrapped>\",\n+                ListBeanUnwrapped.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.values);\n+        assertEquals(3, bean.values.size());\n+        assertEquals(Integer.valueOf(1), bean.values.get(0));\n+        assertEquals(Integer.valueOf(2), bean.values.get(1));\n+        assertEquals(Integer.valueOf(3), bean.values.get(2));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestListRoundtrip.java\n+package com.fasterxml.jackson.dataformat.xml.unwrapped;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class TestListRoundtrip extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName=\"parents\")\n+    public static class Parents {\n+      @JacksonXmlElementWrapper(useWrapping=false)\n+      public List<Parent> parent = new ArrayList<Parent>();\n+    }\n+\n+    @JsonPropertyOrder({ \"name\", \"desc\", \"prop\" })\n+    public static class Parent {\n+      @JacksonXmlProperty(isAttribute=true)\n+      public String name;\n+\n+      public String description;\n+      \n+      @JacksonXmlElementWrapper(useWrapping=false)\n+      public List<Prop> prop = new ArrayList<Prop>();\n+\n+      public Parent() { }\n+      public Parent(String name, String desc) {\n+          this.name = name;\n+          description = desc;\n+      }\n+    }\n+\n+    static class Prop {\n+      @JacksonXmlProperty(isAttribute=true)\n+      public String name;\n+\n+      public String value;\n+\n+      public Prop() { }\n+      public Prop(String name, String value) {\n+          this.name = name;\n+          this.value = value;\n+      }\n+    }\n+\n+    // For [Issue#58]:\n+    @JacksonXmlRootElement(localName = \"point\")\n+    static class Point {\n+        @JacksonXmlProperty(localName = \"x\", isAttribute = true)\n+        int x;\n+        @JacksonXmlProperty(localName = \"y\", isAttribute = true)\n+        int y;\n+\n+        public Point() { }\n+        public Point(int x, int y) { this.x = x; this.y = y; }\n+    }\n+\n+    @JacksonXmlRootElement(localName = \"Points\")\n+    static class PointContainer {\n+        @JacksonXmlElementWrapper(useWrapping = false)\n+        @JacksonXmlProperty(localName = \"point\")\n+        public List<Point> points;\n+    }\n+\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    { // easier for eye:\n+        MAPPER.enable(SerializationFeature.INDENT_OUTPUT);\n+    }\n+    \n+    public void testParentListRoundtrip() throws Exception\n+    {\n+        Parents root = new Parents();\n+        Parent parent1 = new Parent(\"a\", \"First\");\n+        root.parent.add(parent1);\n+        parent1.prop.add(new Prop(\"width\", \"13\"));\n+        parent1.prop.add(new Prop(\"height\", \"10\"));\n+        Parent parent2 = new Parent(\"b\", \"Second\");\n+        parent2.prop.add(new Prop(\"x\", \"1\"));\n+        parent2.prop.add(new Prop(\"y\", \"2\"));\n+        root.parent.add(parent2);\n+\n+        String xml = MAPPER.writeValueAsString(root);\n+        assertNotNull(xml);\n+\n+        // then bring it back\n+        Parents result = MAPPER.readValue(xml, Parents.class);\n+        assertNotNull(result.parent);\n+        assertEquals(2, result.parent.size());\n+        Parent p2 = result.parent.get(1);\n+        assertNotNull(p2);\n+        assertEquals(\"b\", p2.name);\n+        assertEquals(\"Second\", p2.description);\n+\n+        assertEquals(2, p2.prop.size());\n+        Prop prop2 = p2.prop.get(1);\n+        assertNotNull(prop2);\n+        assertEquals(\"2\", prop2.value);\n+    }\n+\n+    public void testListWithAttrOnlyValues() throws Exception\n+    {\n+        PointContainer obj = new PointContainer();\n+        obj.points = new ArrayList<Point>();\n+        obj.points.add(new Point(1, 2));\n+        obj.points.add(new Point(3, 4));\n+        obj.points.add(new Point(5, 6));\n+\n+        String xml = MAPPER.writeValueAsString(obj);\n+\n+        PointContainer converted = MAPPER.readValue(xml, PointContainer.class);\n+\n+        assertEquals(3, converted.points.size());\n+        assertNotNull(converted.points.get(0));\n+        assertNotNull(converted.points.get(1));\n+        assertNotNull(converted.points.get(2));\n+\n+        assertEquals(2, converted.points.get(0).y);\n+        assertEquals(4, converted.points.get(1).y);\n+        assertEquals(6, converted.points.get(2).y);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/unwrapped/TestListSerialization.java\n+package com.fasterxml.jackson.dataformat.xml.unwrapped;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+\n+public class TestListSerialization extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+    static class ListBean\n+    {\n+        public final List<Integer> values = new ArrayList<Integer>();\n+\n+        public ListBean() { }\n+        public ListBean(int... ints) {\n+            for (int i : ints) {\n+                values.add(Integer.valueOf(i));\n+            }\n+        }\n+    }\n+\n+    static class StringListBean\n+    {\n+        // to see what JAXB gives, uncomment:\n+        //@javax.xml.bind.annotation.XmlElementWrapper(name=\"stringList\")\n+        @JacksonXmlElementWrapper(localName=\"stringList\")\n+        public List<StringBean> strings;\n+        \n+        public StringListBean() { strings = new ArrayList<StringBean>(); }\n+        public StringListBean(String... texts)\n+        {\n+            strings = new ArrayList<StringBean>();\n+            for (String text : texts) {\n+                strings.add(new StringBean(text));\n+            }\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+ \n+    public void testSimpleWrappedList() throws IOException\n+    {\n+        String xml = MAPPER.writeValueAsString(new ListBean(1, 2, 3));\n+        xml = removeSjsxpNamespace(xml);\n+        // 06-Dec-2010, tatu: Not completely ok; should default to not using wrapper...\n+        assertEquals(\"<ListBean><values><values>1</values><values>2</values><values>3</values></values></ListBean>\", xml);\n+    }\n+\n+    public void testStringList() throws IOException\n+    {\n+        StringListBean list = new StringListBean(\"a\", \"b\", \"c\");\n+        String xml = MAPPER.writeValueAsString(list);\n+        xml = removeSjsxpNamespace(xml);\n+        // 06-Dec-2010, tatu: Not completely ok; should default to not using wrapper... but it's what we have now\n+        assertEquals(\"<StringListBean><stringList>\"\n+                +\"<strings><text>a</text></strings>\"\n+                +\"<strings><text>b</text></strings>\"\n+                +\"<strings><text>c</text></strings>\"\n+                +\"</stringList></StringListBean>\", xml);\n+    }\n+}", "timestamp": 1363130851, "metainfo": ""}