{"sha": "8a0dbdfc7b0cf58bbccaf691dfe6dacda02b7bb1", "log": "Add unit tests to reproduce [Issue#37]", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestAdapterIssue37.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.*;\n+import java.util.*;\n+\n+import javax.xml.bind.annotation.*;\n+import javax.xml.bind.annotation.adapters.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.dataformat.xml.*;\n+import com.fasterxml.jackson.dataformat.xml.jaxb.XmlJaxbAnnotationIntrospector;\n+\n+public class TestAdapterIssue37 extends XmlTestBase\n+{\n+    @XmlJavaTypeAdapter(URLEncoderMapDataAdapter.class)\n+    public static class MapData\n+    {\n+        public String key;\n+        public String value;\n+\n+        public MapData() { }\n+\n+        public MapData(String key, String value) {\n+            super();\n+            this.key = key;\n+            this.value = value;\n+        }\n+    }\n+\n+    public static class URLEncoderMapDataAdapter extends XmlAdapter<MapData[], Map<String, String>>\n+    {\n+        public URLEncoderMapDataAdapter() { }\n+\n+        @Override\n+        public MapData[] marshal(Map<String, String> arg0) throws Exception {\n+            MapData[] mapElements = new MapData[arg0.size()];\n+            int i = 0;\n+            for (Map.Entry<String, String> entry : arg0.entrySet()) {\n+                mapElements[i++] = new MapData(encodeKey(entry.getKey()), entry.getValue());\n+            }\n+\n+            return mapElements;\n+        }\n+\n+        @Override\n+        public Map<String, String> unmarshal(MapData[] arg0) throws Exception {\n+            Map<String, String> r = new HashMap<String, String>();\n+            for (MapData mapelement : arg0) {\n+                r.put(decodeKey(mapelement.key), mapelement.value);\n+            }\n+            return r;\n+        }\n+\n+        private final static String ENCODING = \"UTF-8\";\n+\n+        private String encodeKey(String key) throws UnsupportedEncodingException {\n+            return URLEncoder.encode(key, ENCODING);\n+        }\n+\n+        private String decodeKey(String key) throws UnsupportedEncodingException {\n+            return URLDecoder.decode(key, ENCODING);\n+        }\n+    }\n+\n+    @XmlRootElement(name = \"DocWithMapData\")\n+    public static class DocWithMapData\n+    {\n+        @XmlJavaTypeAdapter(value = URLEncoderMapDataAdapter.class, type = MapData.class)\n+        public Map<String, String> mapDatas;\n+    }\n+\n+    @XmlRootElement(name = \"DocWithMapDataSimpleAnnotation\")\n+    public static class DocWithMapDataSimpleAnnotation\n+    {\n+        @XmlJavaTypeAdapter(URLEncoderMapDataAdapter.class)\n+        public Map<String, String> mapDatas;\n+    }\n+\n+    private Map<String, String> simpleMapData = singletonMap(\"key\", \"value\");\n+\n+    private Map<String, String> needEncodingMapData = singletonMap(\"my/key\", \"my/value\");\n+\n+    private Map<String,String> singletonMap(String a, String b) {\n+        Map<String,String> map = new HashMap<String,String>();\n+        map.put(a,b);\n+        return map;\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Set up\n+    /***********************************************************************\n+     */\n+\n+    protected XmlMapper _jaxbMapper;\n+\n+    protected XmlMapper _nonJaxbMapper;\n+\n+    @Override\n+    public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        _jaxbMapper = new XmlMapper();\n+        _nonJaxbMapper = new XmlMapper();\n+        // Use JAXB-then-Jackson annotation introspector\n+        AnnotationIntrospector intr =\n+            XmlAnnotationIntrospector.Pair.instance(new XmlJaxbAnnotationIntrospector(TypeFactory.defaultInstance()),\n+                new JacksonAnnotationIntrospector());\n+        _jaxbMapper.setAnnotationIntrospector(intr);\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    public void testSimpleKeyMap() throws Exception\n+    {\n+        DocWithMapData bean = new DocWithMapData();\n+        bean.mapDatas = simpleMapData;\n+\n+        assertEquals(\"<DocWithMapData><mapDatas><key>value</key></mapDatas></DocWithMapData>\",\n+            _jaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    public void testNeedEncodingKeyMap() throws Exception\n+    {\n+        DocWithMapData bean = new DocWithMapData();\n+        bean.mapDatas = needEncodingMapData;\n+\n+        assertEquals(\n+            \"<DocWithMapData><mapDatas><my%2Fkey>my/value</my%2Fkey></mapDatas></DocWithMapData>\",\n+            _jaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    public void testSimpleKeyMapSimpleAnnotation() throws Exception\n+    {\n+        DocWithMapDataSimpleAnnotation bean = new DocWithMapDataSimpleAnnotation();\n+        bean.mapDatas = simpleMapData;\n+\n+        assertEquals(\n+            \"<DocWithMapDataSimpleAnnotation><mapDatas><key>value</key></mapDatas></DocWithMapDataSimpleAnnotation>\",\n+            _jaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    public void testNeedEncodingKeyMapSimpleAnnotation() throws Exception\n+    {\n+        DocWithMapDataSimpleAnnotation bean = new DocWithMapDataSimpleAnnotation();\n+        bean.mapDatas = needEncodingMapData;\n+\n+        assertEquals(\n+            \"<DocWithMapDataSimpleAnnotation><mapDatas><my%2Fkey>my/value</my%2Fkey></mapDatas></DocWithMapDataSimpleAnnotation>\",\n+            _jaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    public void testNeedEncodingKeyMap_nonJaxb() throws Exception\n+    {\n+        DocWithMapData bean = new DocWithMapData();\n+        bean.mapDatas = needEncodingMapData;\n+\n+        assertEquals(\n+            \"<DocWithMapData><mapDatas><my%2Fkey>my/value</my%2Fkey></mapDatas></DocWithMapData>\",\n+            _nonJaxbMapper.writeValueAsString(bean));\n+    }\n+\n+    public void testNeedEncodingKeyMapSimpleAnnotation_nonJaxb() throws Exception\n+    {\n+        DocWithMapDataSimpleAnnotation bean = new DocWithMapDataSimpleAnnotation();\n+        bean.mapDatas = needEncodingMapData;\n+\n+        assertEquals(\n+            \"<DocWithMapDataSimpleAnnotation><mapDatas><my%2Fkey>my/value</my%2Fkey></mapDatas></DocWithMapDataSimpleAnnotation>\",\n+            _nonJaxbMapper.writeValueAsString(bean));\n+    }\n+}", "timestamp": 1353550577, "metainfo": ""}