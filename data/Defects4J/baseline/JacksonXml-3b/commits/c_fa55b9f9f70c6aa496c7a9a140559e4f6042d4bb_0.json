{"sha": "fa55b9f9f70c6aa496c7a9a140559e4f6042d4bb", "log": "Complete #115", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java\n      */\n     public FromXmlParser createParser(XMLStreamReader sr) throws IOException\n     {\n-        try {\n-            sr = _initializeXmlReader(sr);\n-        } catch (XMLStreamException e) {\n-            return StaxUtil.throwXmlAsIOException(e);\n-        }\n+        // note: should NOT move parser if already pointing to START_ELEMENT\n+        if (sr.getEventType() != XMLStreamConstants.START_ELEMENT) {\n+            try {\n+                sr = _initializeXmlReader(sr);\n+            } catch (XMLStreamException e) {\n+                return StaxUtil.throwXmlAsIOException(e);\n+            }\n+        }\n+\n         // false -> not managed\n         FromXmlParser xp = new FromXmlParser(_createContext(sr, false),\n                 _generatorFeatures, _xmlGeneratorFeatures, _objectCodec, sr);\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlMapper.java\n import javax.xml.stream.XMLStreamReader;\n import javax.xml.stream.XMLStreamWriter;\n \n-import com.fasterxml.jackson.core.PrettyPrinter;\n-import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.dataformat.xml.deser.FromXmlParser;\n      * \n      * @since 2.4\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(XMLStreamReader r, Class<T> valueType) throws IOException {\n-        return (T) _readMapAndClose(getFactory().createParser(r),\n-                _typeFactory.constructType(valueType));\n+        return readValue(r, _typeFactory.constructType(valueType));\n     } \n \n     /**\n      * \n      * @since 2.4\n      */\n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    public <T> T readValue(XMLStreamReader r, TypeReference valueTypeRef) throws IOException {\n-        return (T) _readMapAndClose(getFactory().createParser(r),\n-                _typeFactory.constructType(valueTypeRef));\n+    public <T> T readValue(XMLStreamReader r, TypeReference<T> valueTypeRef) throws IOException {\n+        return readValue(r, _typeFactory.constructType(valueTypeRef));\n     } \n \n     /**\n      * \n      * @since 2.4\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T readValue(XMLStreamReader r, JavaType valueType) throws IOException {\n-        return (T) _readMapAndClose(getFactory().createParser(r), valueType);\n+    @SuppressWarnings(\"resource\")\n+    public <T> T readValue(XMLStreamReader r, JavaType valueType) throws IOException\n+    {\n+        FromXmlParser p = getFactory().createParser(r);\n+        return super.readValue(p,  valueType);\n     } \n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/incr/PartialReadTest.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/incr/PartialReadTest.java\n package com.fasterxml.jackson.dataformat.xml.incr;\n \n+import java.io.*;\n+import javax.xml.stream.*;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n \n public class PartialReadTest extends XmlTestBase\n {\n+    private final XmlMapper MAPPER = xmlMapper(true);\n+\n     public void testSimpleRead() throws Exception\n     {\n+        final String XML = \"<?xml version='1.0'?><root>\"\n+                +\"<NameBean age=\\\"13\\\"><first>Grizabella</first><last>Glamour</last></NameBean>\"\n+                +\"<NameBean age=\\\"17\\\"><first>Growl</first><last>Tiger</last></NameBean></root>\";\n+        XMLStreamReader sr = MAPPER.getFactory().getXMLInputFactory().createXMLStreamReader(\n+                new StringReader(XML));\n+        assertEquals(sr.next(), XMLStreamConstants.START_ELEMENT);\n+        assertEquals(\"root\", sr.getLocalName());\n+\n+        /* 30-May-2014, tatu: This is bit tricky... need to ensure that currently\n+         *    pointed to START_ELEMENT is sort of re-read.\n+         */\n+        assertEquals(sr.next(), XMLStreamConstants.START_ELEMENT);\n+        assertEquals(\"NameBean\", sr.getLocalName());\n         \n+        NameBean bean1 = MAPPER.readValue(sr, NameBean.class);\n+        assertNotNull(bean1);\n+        assertEquals(sr.getEventType(), XMLStreamConstants.END_ELEMENT);\n+        assertEquals(\"NameBean\", sr.getLocalName());\n+\n+        assertEquals(sr.next(), XMLStreamConstants.START_ELEMENT);\n+        assertEquals(\"NameBean\", sr.getLocalName());\n+        NameBean bean2 = MAPPER.readValue(sr, NameBean.class);\n+        assertNotNull(bean2);\n+        assertEquals(sr.getEventType(), XMLStreamConstants.END_ELEMENT);\n+        assertEquals(\"NameBean\", sr.getLocalName());\n+\n+        assertEquals(sr.next(), XMLStreamConstants.END_ELEMENT);\n+        assertEquals(\"root\", sr.getLocalName());\n+        \n+        sr.close();\n     }\n }", "timestamp": 1401484705, "metainfo": ""}