{"sha": "754187ee2c30e329e3a940f968103bce68693830", "log": "Add a unit test to verify [Issue-17]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n public class JacksonXmlAnnotationIntrospector\n     extends JacksonAnnotationIntrospector\n     implements XmlAnnotationIntrospector\n-{    \n+{\n     /*\n     /**********************************************************************\n-    /* XmlAnnotationIntrospector\n+    /* XmlAnnotationIntrospector, findXxx\n     /**********************************************************************\n      */\n-\n-    @Override\n-    public Boolean isOutputAsAttribute(Annotated ann)\n-    {\n-        JacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\n-        if (prop != null) {\n-            return prop.isAttribute() ? Boolean.TRUE : Boolean.FALSE;\n-        }\n-        return null;\n-    }\n \n     @Override\n     public String findNamespace(Annotated ann)\n         JacksonXmlRootElement root = ann.getAnnotation(JacksonXmlRootElement.class);\n         if (root != null) {\n             return new QName(root.namespace(), root.localName());\n+        }\n+        return null;\n+    }\n+\n+    /*\n+    /**********************************************************************\n+    /* XmlAnnotationIntrospector, isXxx methods\n+    /**********************************************************************\n+     */\n+    \n+    @Override\n+    public Boolean isOutputAsAttribute(Annotated ann)\n+    {\n+        JacksonXmlProperty prop = ann.getAnnotation(JacksonXmlProperty.class);\n+        if (prop != null) {\n+            return prop.isAttribute() ? Boolean.TRUE : Boolean.FALSE;\n+        }\n+        return null;\n+    }\n+    \n+    @Override\n+    public Boolean isOutputAsText(Annotated ann)\n+    {\n+    \tJacksonXmlText prop = ann.getAnnotation(JacksonXmlText.class);\n+        if (prop != null) {\n+            return prop.value() ? Boolean.TRUE : Boolean.FALSE;\n         }\n         return null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n     public String findNamespace(Annotated ann);\n \n     /**\n-     * Method used to check whether given annotated element\n-     * (field, method, constructor parameter) has indicator that suggest\n-     * it be output as an XML attribute or not (as element)\n-     */\n-    public Boolean isOutputAsAttribute(Annotated ann);\n-\n-    /**\n      * Method used to check if specified property has annotation that indicates\n      * that it should be wrapped in an element; and if so, name to use.\n      * Note: local name of \"\" is used to indicate that name should default\n      * this overrides default name based on type of object.\n      */\n     public QName findRootElement(Annotated ann);\n+\n+    /**\n+     * Method used to check whether given annotated element\n+     * (field, method, constructor parameter) has indicator that suggests\n+     * it be output as an XML attribute or not (as element)\n+     */\n+    public Boolean isOutputAsAttribute(Annotated ann);\n+\n+    /**\n+     * Method used to check whether given annotated element\n+     * (field, method, constructor parameter) has indicator that suggests\n+     * it should be serialized as text, without element wrapper.\n+     */\n+    public Boolean isOutputAsText(Annotated ann);\n     \n     /*\n     /**********************************************************************\n             }\n             return value;\n         }\n+\n+        @Override\n+        public Boolean isOutputAsText(Annotated ann)\n+        {\n+            Boolean value = (_xmlPrimary == null) ? null : _xmlPrimary.isOutputAsText(ann);\n+            if (value == null && _xmlSecondary != null) {\n+                value = _xmlSecondary.isOutputAsText(ann);\n+            }\n+            return value;\n+        }\n+    \n     }\n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/annotation/JacksonXmlText.java\n+package com.fasterxml.jackson.dataformat.xml.annotation;\n+\n+import java.lang.annotation.*;\n+\n+/**\n+ * Interface that is loosely similar to {@link javax.xml.bind.annotation.XmlValue}\n+ * in that it can be used on one (and only one!) property of a POJO.\n+ * It will result in value of the property be serialized without element wrapper,\n+ * as long as there are no element-wrapped other properties (attribute-valued\n+ * properties are acceptable).\n+ * It is also similar to core Jackson <code>JsonValue</code> annotation; but\n+ * has to be separate as <code>JsonValue</code> does not allow any other\n+ * properties.\n+ */\n+@Target({ElementType.FIELD, ElementType.METHOD})\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface JacksonXmlText\n+{\n+\t/**\n+\t * Whether serialization of the property should always be done as basic\n+\t * XML text or not; if true, will be, if false, not.\n+\t */\n+\tpublic boolean value() default true;\n+}\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlValue;\n import javax.xml.namespace.QName;\n \n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector;\n import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;\n-\n-\n \n /**\n  * Alternative {@link com.fasterxml.jackson.databind.AnnotationIntrospector}\n         return ns;\n     }\n \n+    @Override\n+    public QName findWrapperElement(Annotated ann)\n+    {\n+        XmlElementWrapper w = findAnnotation(XmlElementWrapper.class, ann, false, false, false);\n+        if (w != null) {\n+            return new QName(handleJaxbDefault(w.namespace()), handleJaxbDefault(w.name()));\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public QName findRootElement(Annotated ann)\n+    {\n+        XmlRootElement root = findAnnotation(XmlRootElement.class, ann, false, false, false);\n+        if (root != null) {\n+            return new QName(handleJaxbDefault(root.namespace()), handleJaxbDefault(root.name()));\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Here we assume fairly simple logic; if there is <code>XmlAttribute</code> to be found,\n      * we consider it an attibute; if <code>XmlElement</code>, not-an-attribute; and otherwise\n         }\n         return null;\n     }\n-\n+    \n     @Override\n-    public QName findWrapperElement(Annotated ann)\n+    public Boolean isOutputAsText(Annotated ann)\n     {\n-        XmlElementWrapper w = findAnnotation(XmlElementWrapper.class, ann, false, false, false);\n-        if (w != null) {\n-            return new QName(handleJaxbDefault(w.namespace()), handleJaxbDefault(w.name()));\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public QName findRootElement(Annotated ann)\n-    {\n-        XmlRootElement root = findAnnotation(XmlRootElement.class, ann, false, false, false);\n-        if (root != null) {\n-            return new QName(handleJaxbDefault(root.namespace()), handleJaxbDefault(root.name()));\n+    \tXmlValue attr = findAnnotation(XmlValue.class, ann, false, false, false);\n+        if (attr != null) {\n+            return Boolean.TRUE;\n         }\n         return null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanPropertyWriter.java\n         // Ok then; addition we want to do is to add wrapper element, and that's what happens here\n         ToXmlGenerator xmlGen = (ToXmlGenerator) jgen;\n         xmlGen.startWrappedValue(_wrapperName, _wrappedName);\n-        \n-        if (ser == null) {\n-            Class<?> cls = value.getClass();\n-            PropertySerializerMap map = _dynamicSerializers;\n-            ser = map.serializerFor(cls);\n-            if (ser == null) {\n-                ser = _findAndAddDynamic(map, cls, prov);\n-            }\n-        }\n         jgen.writeFieldName(_name);\n         if (_typeSerializer == null) {\n             ser.serialize(value, jgen, prov);\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestTextValue.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class TestTextValue extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+\tstatic class Simple\n+\t{\n+\t\t@JacksonXmlProperty(isAttribute=true)\n+\t\tpublic int a = 13;\n+\n+\t\t@JacksonXmlText\n+\t\tpublic String text = \"something\";\n+\t}\n+\t\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    public void testSimpleSerialize() throws IOException\n+    {\n+    \tXmlMapper mapper = new XmlMapper();\n+    \tString xml = mapper.writeValueAsString(new Simple());\n+    \tassertEquals(\"<Simple a=\\\"13\\\">something</Simple>\", xml);\n+    }\n+\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n         assertEquals(MAJOR_VERSION, v.getMajorVersion());\n         assertEquals(MINOR_VERSION, v.getMinorVersion());\n         // Check patch level initially, comment out for maint versions\n-        assertEquals(0, v.getPatchLevel());\n+//        assertEquals(0, v.getPatchLevel());\n         assertEquals(GROUP_ID, v.getGroupId());\n         assertEquals(ARTIFACT_ID, v.getArtifactId());\n     }", "timestamp": 1333577707, "metainfo": ""}