{"sha": "7343f94f4494dfc16cf0d013f52c7f47397a2e71", "log": "Propagating PropertyName-changes to xml module as well", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n \n import javax.xml.namespace.QName;\n \n+import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n \n     extends JacksonAnnotationIntrospector\n     implements XmlAnnotationIntrospector\n {\n+    /*\n+    /**********************************************************************\n+    /* Overrides of JacksonAnnotationIntrospector impls\n+    /**********************************************************************\n+     */\n+\n+    @Override\n+    public PropertyName findRootName(AnnotatedClass ac)\n+    {\n+        JacksonXmlRootElement root = ac.getAnnotation(JacksonXmlRootElement.class);\n+        if (root != null) {\n+            String local = root.localName();\n+            String ns = root.namespace();\n+            \n+            if (local.length() == 0 && ns.length() == 0) {\n+                return PropertyName.USE_DEFAULT;\n+            }\n+            return new PropertyName(local, ns);\n+        }\n+        return super.findRootName(ac);\n+    }\n+\n     /*\n     /**********************************************************************\n     /* XmlAnnotationIntrospector, findXxx\n         JacksonXmlElementWrapper w = ann.getAnnotation(JacksonXmlElementWrapper.class);\n         if (w != null) {\n             return new QName(w.namespace(), w.localName());\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public QName findRootElement(Annotated ann)\n-    {\n-        JacksonXmlRootElement root = ann.getAnnotation(JacksonXmlRootElement.class);\n-        if (root != null) {\n-            return new QName(root.namespace(), root.localName());\n         }\n         return null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;\n \n /**\n  * Additional extension interface used above and beyond\n      */\n     public QName findWrapperElement(Annotated ann);\n \n-    /**\n-     * Method used to find out name to use for the outermost (root) XML element\n-     * name when serializing (since there is no property that would define it);\n-     * this overrides default name based on type of object.\n-     */\n-    public QName findRootElement(Annotated ann);\n+    // Method used to find out name to use for the outermost (root) XML element\n+    // name when serializing (since there is no property that would define it);\n+    // this overrides default name based on type of object.\n+    //\n+    // Removed in 2.1\n+//    public QName findRootElement(Annotated ann);\n \n     /**\n      * Method used to check whether given annotated element\n      * Extension of <code>AnnotationIntrospector.Pair</code> that can\n      * also dispatch 'XmlAnnotationIntrospector' methods.\n      */\n-    public static class Pair extends AnnotationIntrospector.Pair\n+    public static class Pair extends AnnotationIntrospectorPair\n         implements XmlAnnotationIntrospector\n     {\n         protected final XmlAnnotationIntrospector _xmlPrimary;\n             return value;\n         }\n \n+        /*\n         @Override\n         public QName findRootElement(Annotated ann)\n         {\n             }\n             return value;\n         }\n+        */\n         \n         @Override\n         public Boolean isOutputAsAttribute(Annotated ann)\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n import javax.xml.bind.annotation.XmlValue;\n import javax.xml.namespace.QName;\n \n+import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.dataformat.xml.XmlAnnotationIntrospector;\n     public XmlJaxbAnnotationIntrospector(TypeFactory typeFactory) {\n         super(typeFactory);\n     }\n+\n+    /*\n+    /**********************************************************************\n+    /* Basic AnnotationIntrospector overrides\n+    /**********************************************************************\n+     */\n+    \n+    @Override\n+    public PropertyName findRootName(AnnotatedClass ac)\n+    {\n+        XmlRootElement root = findAnnotation(XmlRootElement.class, ac, false, false, false);\n+        if (root != null) {\n+            return PropertyName.construct(handleJaxbDefault(root.name()),\n+                    handleJaxbDefault(root.namespace()));\n+        }\n+        return null;\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* XmlAnnotationIntrospector overrides\n+    /**********************************************************************\n+     */\n     \n     @Override\n     public String findNamespace(Annotated ann)\n         }\n         return ns;\n     }\n-\n+    \n     @Override\n     public QName findWrapperElement(Annotated ann)\n     {\n         XmlElementWrapper w = findAnnotation(XmlElementWrapper.class, ann, false, false, false);\n         if (w != null) {\n             return new QName(handleJaxbDefault(w.namespace()), handleJaxbDefault(w.name()));\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public QName findRootElement(Annotated ann)\n-    {\n-        XmlRootElement root = findAnnotation(XmlRootElement.class, ann, false, false, false);\n-        if (root != null) {\n-            return new QName(handleJaxbDefault(root.namespace()), handleJaxbDefault(root.name()));\n         }\n         return null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlRootNameLookup.java\n                 String localName = null;\n                 String ns = null;\n \n-                QName root = findRootElement(intr, ac);\n+                PropertyName root = intr.findRootName(ac);\n                 if (root != null) {\n-                    localName = root.getLocalPart();\n-                    ns = root.getNamespaceURI();\n+                    localName = root.getSimpleName();\n+                    ns = root.getNamespace();\n                 }\n-                if (localName == null || localName.length() == 0) {\n-                    localName = intr.findRootName(ac);\n-                }\n-                \n                 // No answer so far? Let's just default to using simple class name\n                 if (localName == null || localName.length() == 0) {\n                     // Should we strip out enclosing class tho? For now, nope:\n         }\n         return null;\n     }\n-\n-    private QName findRootElement(AnnotationIntrospector ai, AnnotatedClass ann)\n-    {\n-        for (AnnotationIntrospector intr : ai.allIntrospectors()) {\n-            if (intr instanceof XmlAnnotationIntrospector) {\n-                QName elem = ((XmlAnnotationIntrospector) intr).findRootElement(ann);\n-                if (elem != null) {\n-                    return elem;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n }", "timestamp": 1346877760, "metainfo": ""}