{"sha": "2aca89e0b96884704c5d2296c2696240b5c7966c", "log": "Fix 2 reported issues", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n \n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n+\n import com.fasterxml.jackson.dataformat.xml.annotation.*;\n-\n \n /**\n  * Extension of {@link JacksonAnnotationIntrospector} that is needed to support\n     @Override\n     public String findDeserializationName(AnnotatedField af)\n     {\n+    \t// Slightly more complicated if we have a wrapper:\n+    \tJacksonXmlElementWrapper wann = af.getAnnotation(JacksonXmlElementWrapper.class);\n+    \tif (wann != null) {\n+    \t\treturn wann.localName();\n+    \t}\n+    \t// if not, use basic property name:\n         JacksonXmlProperty pann = af.getAnnotation(JacksonXmlProperty.class);\n         if (pann != null) {\n             return pann.localName();\n     @Override\n     public String findDeserializationName(AnnotatedParameter ap)\n     {\n-        JacksonXmlProperty pann = ap.getAnnotation(JacksonXmlProperty.class);\n+    \tJacksonXmlElementWrapper wann = ap.getAnnotation(JacksonXmlElementWrapper.class);\n+    \tif (wann != null) {\n+    \t\t// empty name not acceptable...\n+            String name = wann.localName();\n+            if (name.length() > 0) {\n+                return name;\n+            }\n+    \t}\n+\n+    \tJacksonXmlProperty pann = ap.getAnnotation(JacksonXmlProperty.class);\n         // can not return empty String here, so:\n         if (pann != null) {\n             String name = pann.localName();\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n      * Note: writer instance will always be of type\n      * {@link org.codehaus.stax2.XMLStreamWriter2} (including\n      * Typed Access API) so upcasts are safe.\n-     * \n-     * @since 1.7\n      */\n     public XMLStreamReader getStaxReader() {\n         return _xmlTokens.getXmlReader();\n     @Override\n     public boolean isExpectedStartArrayToken() {\n         JsonToken t = _currToken;\n-        if (t == JsonToken.START_OBJECT) {\n+        if (t == JsonToken.START_OBJECT) {        \t\n             _currToken = JsonToken.START_ARRAY;\n             // Ok: must replace current context with array as well\n             _parsingContext = _parsingContext.getParent();\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestDeserialization.java\n package com.fasterxml.jackson.dataformat.xml;\n \n-import java.util.List;\n-\n+import java.util.*;\n \n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n     /**********************************************************\n      */\n \n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n     /**\n      * Unit test to ensure that we can succesfully also roundtrip\n      * example Bean used in Jackson tutorial\n     {\n         FiveMinuteUser user = new FiveMinuteUser(\"Joe\", \"Sixpack\",\n                 true, FiveMinuteUser.Gender.MALE, new byte[] { 1, 2, 3 , 4, 5 });\n-        XmlMapper mapper = new XmlMapper();\n-        String xml = mapper.writeValueAsString(user);\n-        FiveMinuteUser result = mapper.readValue(xml, FiveMinuteUser.class);\n+        String xml = MAPPER.writeValueAsString(user);\n+        FiveMinuteUser result = MAPPER.readValue(xml, FiveMinuteUser.class);\n         assertEquals(user, result);\n     }\n \n     public void testFromAttribute() throws Exception\n     {\n-        XmlMapper mapper = new XmlMapper();\n-        AttributeBean bean = mapper.readValue(\"<AttributeBean attr=\\\"abc\\\"></AttributeBean>\", AttributeBean.class);\n+        AttributeBean bean = MAPPER.readValue(\"<AttributeBean attr=\\\"abc\\\"></AttributeBean>\", AttributeBean.class);\n         assertNotNull(bean);\n         assertEquals(\"abc\", bean.text);\n     }\n \n     public void testListBean() throws Exception\n     {\n-        XmlMapper mapper = new XmlMapper();\n-        ListBean bean = mapper.readValue(\n+        ListBean bean = MAPPER.readValue(\n                 \"<ListBean><values><values>1</values><values>2</values><values>3</values></values></ListBean>\",\n                 ListBean.class);\n         assertNotNull(bean);\n         assertEquals(Integer.valueOf(2), bean.values.get(1));\n         assertEquals(Integer.valueOf(3), bean.values.get(2));\n     }\n+\n+    // Issue#14:\n+    public void testMapWithAttr() throws Exception\n+    {\n+    \tfinal String xml = \"<order><person lang='en'>John Smith</person></order>\";\n+\n+    \t/*\n+    \tJsonParser jp = MAPPER.getJsonFactory().createJsonParser(xml);\n+    \tJsonToken t;\n+    \twhile ((t = jp.nextToken()) != null) {\n+    \t\tswitch (t) {\n+    \t\tcase FIELD_NAME:\n+    \t\t\tSystem.out.println(\"Field '\"+jp.getCurrentName()+\"'\");\n+    \t\t\tbreak;\n+    \t\tcase VALUE_STRING:\n+    \t\t\tSystem.out.println(\"text '\"+jp.getText()+\"'\");\n+    \t\tdefault:\n+    \t\t\tSystem.out.println(\"Token \"+t);\n+    \t\t}\n+    \t}\n+    \t*/\n+    \t\n+    \tMap<?,?> map = MAPPER.readValue(xml, Map.class);\n+    \t\n+    \t// Will result in equivalent of:\n+    \t// { \"person\" : {\n+    \t//     \"lang\" : \"en\",\n+    \t//     \"\" : \"John Smith\"\n+    \t//   }\n+    \t// }\n+    \t//\n+    \t// which may or may not be what we want. Without attribute\n+    \t// we would just have '{ \"person\" : \"John Smith\" }'\n+    \t\n+    \tassertNotNull(map);\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListDeserialization.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.fasterxml.jackson.dataformat.xml.annotation.*;\n+\n+public class TestListDeserialization extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+\n+\t@JacksonXmlRootElement(localName = \"person\", namespace =\"http://example.org/person\" )\n+\tpublic static class Person\n+\t{\n+\t   @JacksonXmlProperty( isAttribute = true )\n+\t   public String id;\n+\t   public String name;\n+\t   public int age;\n+\n+\t   @JacksonXmlElementWrapper(localName = \"notes\")\n+\t   @JacksonXmlProperty( localName = \"note\" )\n+\t   public List<String> notes = new ArrayList<String>();\n+\t   \n+\t   public Person() { }\n+\t   public Person(String name, int age) {\n+\t\t   this.name = name;\n+\t\t   this.age = age;\n+\t   }\n+\t}\n+\t\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    {\n+    \t// easier for eye:\n+    \tMAPPER.enable(SerializationFeature.INDENT_OUTPUT);\n+    }\n+\n+    /* Issue#17 [https://github.com/FasterXML/jackson-dataformat-xml/issues/17]\n+     * \n+     * Problems deserializing otherwise properly wrapped lists\n+     */\n+    public void testWrappedList() throws Exception\n+    {\n+    \tPerson p = new Person( \"Name\", 30 );\n+    \tp.notes.add(\"note 1\");\n+    \tp.notes.add(\"note 2\");\n+    \tString xml = MAPPER.writeValueAsString( p );\n+\n+System.out.println(\"XML == \"+xml);    \n+\n+    \tPerson result = MAPPER.readValue(xml, Person.class);\n+    \tassertNotNull(result);\n+    \tassertEquals(\"Name\", result.name);\n+    \tassertEquals(30, result.age);\n+    \tassertEquals(2, result.notes.size());\n+    \tassertEquals(\"note 1\", result.notes.get(0));\n+    \tassertEquals(\"note 2\", result.notes.get(1));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestListSerialization.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n+\n+public class TestListSerialization extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper types\n+    /**********************************************************\n+     */\n+    static class ListBean\n+    {\n+        public final List<Integer> values = new ArrayList<Integer>();\n+\n+        public ListBean() { }\n+        public ListBean(int... ints) {\n+            for (int i : ints) {\n+                values.add(Integer.valueOf(i));\n+            }\n+        }\n+    }\n+\n+    static class StringListBean\n+    {\n+        // to see what JAXB gives, uncomment:\n+        //@javax.xml.bind.annotation.XmlElementWrapper(name=\"stringList\")\n+        @JacksonXmlElementWrapper(localName=\"stringList\")\n+        public List<StringBean> strings;\n+        \n+        public StringListBean() { strings = new ArrayList<StringBean>(); }\n+        public StringListBean(String... texts)\n+        {\n+            strings = new ArrayList<StringBean>();\n+            for (String text : texts) {\n+                strings.add(new StringBean(text));\n+            }\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+ \n+    public void testSimpleList() throws IOException\n+    {\n+        String xml = MAPPER.writeValueAsString(new ListBean(1, 2, 3));\n+        xml = removeSjsxpNamespace(xml);\n+        // 06-Dec-2010, tatu: Not completely ok; should default to not using wrapper...\n+        assertEquals(\"<ListBean><values><values>1</values><values>2</values><values>3</values></values></ListBean>\", xml);\n+    }\n+\n+    public void testStringList() throws IOException\n+    {\n+        StringListBean list = new StringListBean(\"a\", \"b\", \"c\");\n+        String xml = MAPPER.writeValueAsString(list);\n+        xml = removeSjsxpNamespace(xml);\n+        // 06-Dec-2010, tatu: Not completely ok; should default to not using wrapper... but it's what we have now\n+        assertEquals(\"<StringListBean><stringList>\"\n+                +\"<strings><text>a</text></strings>\"\n+                +\"<strings><text>b</text></strings>\"\n+                +\"<strings><text>c</text></strings>\"\n+                +\"</stringList></StringListBean>\", xml);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestSerialization.java\n import java.io.*;\n import java.util.*;\n \n-\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n-import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n \n         public int attr = 42;\n     }\n \n-    static class ListBean\n-    {\n-        public final List<Integer> values = new ArrayList<Integer>();\n-\n-        public ListBean() { }\n-        public ListBean(int... ints) {\n-            for (int i : ints) {\n-                values.add(Integer.valueOf(i));\n-            }\n-        }\n-    }\n-\n     static class WrapperBean<T>\n     {\n         public T value;\n \n         public MapBean() { }\n         public MapBean(Map<String,Integer> v) { map = v; }\n-    }\n-    \n-    static class StringListBean\n-    {\n-        // to see what JAXB gives, uncomment:\n-        //@javax.xml.bind.annotation.XmlElementWrapper(name=\"stringList\")\n-        @JacksonXmlElementWrapper(localName=\"stringList\")\n-        public List<StringBean> strings;\n-        \n-        public StringListBean() { strings = new ArrayList<StringBean>(); }\n-        public StringListBean(String... texts)\n-        {\n-            strings = new ArrayList<StringBean>();\n-            for (String text : texts) {\n-                strings.add(new StringBean(text));\n-            }\n-        }\n     }\n     \n     static class NsElemBean\n         // here we assume woodstox automatic prefixes, not very robust but:\n         assertEquals(\"<NsAttrBean xmlns:wstxns1=\\\"http://foo\\\" wstxns1:attr=\\\"3\\\"/>\", xml);\n     }\n-    \n-    public void testSimpleList() throws IOException\n-    {\n-        String xml = _xmlMapper.writeValueAsString(new ListBean(1, 2, 3));\n-        xml = removeSjsxpNamespace(xml);\n-        // 06-Dec-2010, tatu: Not completely ok; should default to not using wrapper...\n-        assertEquals(\"<ListBean><values><values>1</values><values>2</values><values>3</values></values></ListBean>\", xml);\n-    }\n-\n-    public void testStringList() throws IOException\n-    {\n-        StringListBean list = new StringListBean(\"a\", \"b\", \"c\");\n-        String xml = _xmlMapper.writeValueAsString(list);\n-        xml = removeSjsxpNamespace(xml);\n-        // 06-Dec-2010, tatu: Not completely ok; should default to not using wrapper... but it's what we have now\n-        assertEquals(\"<StringListBean><stringList>\"\n-                +\"<strings><text>a</text></strings>\"\n-                +\"<strings><text>b</text></strings>\"\n-                +\"<strings><text>c</text></strings>\"\n-                +\"</stringList></StringListBean>\", xml);\n-    }\n \n     public void testMap() throws IOException\n     {\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestVersions.java\n import com.fasterxml.jackson.core.Versioned;\n import com.fasterxml.jackson.dataformat.xml.XmlFactory;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n-\n \n public class TestVersions extends XmlTestBase\n {\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestViews.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestViews.java\n import com.fasterxml.jackson.annotation.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n \n+/*\n+ * Tests for ('Json') Views, other filtering.\n+ */\n public class TestViews extends XmlTestBase\n {\n     /*\n         @JsonView(RestrictedView.class)\n         @JsonProperty\n         public int restrictedBarProperty;\n-    }    \n+    }\n \n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    static class NonNullBean\n+    {\n+    \tpublic String nullName = null;\n+    \tpublic String name = \"Bob\";\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Unit tests\n         assertEquals(11, result.bars[1].restrictedBarProperty);\n         \n     }\n+\n+    public void testNullSuppression() throws Exception\n+    {\n+        ObjectMapper xmlMapper = new XmlMapper();\n+        String xml = xmlMapper.writeValueAsString(new NonNullBean());\n+        assertEquals(\"<NonNullBean><name>Bob</name></NonNullBean>\", xml);\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/failing/TestUntypedListSerialization.java\n+package com.fasterxml.jackson.dataformat.xml.failing;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n+import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n+\n+public class TestUntypedListSerialization extends XmlTestBase\n+{\n+    @JacksonXmlRootElement(localName=\"l\")\n+    static class UntypedListBean\n+    {\n+    \tpublic final Object list;\n+    \t\n+    \tpublic UntypedListBean()\n+    \t{\n+    \t\tArrayList<String> l= new ArrayList<String>();\n+    \t\tl.add(\"first\");\n+    \t\tl.add(\"second\");\n+    \t\tlist = l;\n+    \t}\n+    }\n+\n+    @JacksonXmlRootElement(localName=\"l\")\n+    static class TypedListBean\n+    {\n+    \tpublic final List<String> list;\n+    \t\n+    \tpublic TypedListBean()\n+    \t{\n+    \t\tArrayList<String> l= new ArrayList<String>();\n+    \t\tl.add(\"first\");\n+    \t\tl.add(\"second\");\n+    \t\tlist = l;\n+    \t}\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+\n+    /*\n+     *  For Issue#8 -- Will not use wrapping, if type is not statically known\n+     *  to be a Collection\n+     */\n+    public void testListAsObject() throws IOException\n+    {\n+    \tString xmlForUntyped = MAPPER.writeValueAsString(new UntypedListBean());\n+    \tString xmlForTyped = MAPPER.writeValueAsString(new TypedListBean());\n+\n+    \tassertEquals(xmlForTyped, xmlForUntyped);\n+    }\n+}", "timestamp": 1331173210, "metainfo": ""}