{"sha": "7bed3d07993517bf9d0dceab264fa07b2b05d0fe", "log": "Merge pull request #126 from oillio/master  Allow specifying properties that should be written as CData", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/JacksonXmlAnnotationIntrospector.java\n         }\n         return null;\n     }\n+\n+    @Override\n+    public Boolean isOutputAsCData(Annotated ann) {\n+        JacksonXmlCData prop = ann.getAnnotation(JacksonXmlCData.class);\n+        if (prop != null) {\n+            return prop.value() ? Boolean.TRUE : Boolean.FALSE;\n+        }\n+        return null;\n+    }\n     \n     /*\n     /**********************************************************************\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlAnnotationIntrospector.java\n      * it should be serialized as text, without element wrapper.\n      */\n     public Boolean isOutputAsText(Annotated ann);\n+\n+    /**\n+     * Method used to check whether given annotated element\n+     * (field, method, constructor parameter) has indicator that suggests\n+     * it should be wrapped in a CDATA tag.\n+     */\n+    public Boolean isOutputAsCData(Annotated ann);\n \n     /*\n     /**********************************************************************\n             }\n             return value;\n         }\n+\n+        @Override\n+        public Boolean isOutputAsCData(Annotated ann) {\n+            Boolean value = (_xmlPrimary == null) ? null : _xmlPrimary.isOutputAsCData(ann);\n+            if (value == null && _xmlSecondary != null) {\n+                value = _xmlSecondary.isOutputAsCData(ann);\n+            }\n+            return value;\n+        }\n     }\n \n     /*\n         public Boolean isOutputAsText(Annotated ann) {\n             return _intr.isOutputAsText(ann);\n         }\n-        \n+\n+        @Override\n+        public Boolean isOutputAsCData(Annotated ann) {\n+            //There is no CData annotation in JAXB\n+            return false;\n+        }\n+\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/XmlPrettyPrinter.java\n     public void writeEndElement(XMLStreamWriter2 sw, int nrOfEntries) throws XMLStreamException;\n \n     public void writeLeafElement(XMLStreamWriter2 sw,\n-    \t\tString nsURI, String localName, String text)\n+    \t\tString nsURI, String localName, String text, boolean isCData)\n         throws XMLStreamException;\n \n     public void writeLeafElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName,\n-    \t\tchar[] buffer, int offset, int len)\n+    \t\tchar[] buffer, int offset, int len, boolean isCData)\n         throws XMLStreamException;\n     \n     public void writeLeafElement(XMLStreamWriter2 sw,\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/annotation/JacksonXmlCData.java\n+package com.fasterxml.jackson.dataformat.xml.annotation;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Adding this annotation will result in value of the property to be serialized\n+ * within a CData tag.  Only use on String properties and String collections.\n+ */\n+@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER })\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface JacksonXmlCData\n+{\n+    /**\n+     * Whether the property text should always be within a CData block\n+     * when serialized.\n+     */\n+    public boolean value() default true;\n+}\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/jaxb/XmlJaxbAnnotationIntrospector.java\n     @Override\n     public Boolean isOutputAsText(Annotated ann) {\n         return super.isOutputAsText(ann);\n+    }\n+\n+    @Override\n+    public Boolean isOutputAsCData(Annotated ann) {\n+        //There is no CData annotation in JAXB\n+        return false;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java\n      * once.\n      */\n     protected boolean _nextIsUnwrapped = false;\n+\n+    /**\n+     * Marker flag used to indicate that the next write of a (property)\n+     * value should be as CData\n+     */\n+    protected boolean _nextIsCData = false;\n     \n     /**\n      * To support proper serialization of arrays it is necessary to keep\n     {\n         _nextIsUnwrapped = isUnwrapped;\n     }\n+\n+    public void setNextIsCData(boolean isCData)\n+    {\n+        _nextIsCData = isCData;\n+    }\n     \n     public final void setNextName(QName name)\n     {\n                 // [Issue#56] Should figure out how to prevent indentation for end element\n                 //   but for now, let's just make sure structure is correct\n                 //if (_xmlPrettyPrinter != null) { ... }\n-                _xmlWriter.writeCharacters(text);\n+                if(_nextIsCData) {\n+                    _xmlWriter.writeCData(text);\n+                } else {\n+                    _xmlWriter.writeCharacters(text);\n+                }\n             } else if (_xmlPrettyPrinter != null) {\n                 _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                         _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n-                        text);\n+                        text, _nextIsCData);\n             } else {\n                 _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n-                _xmlWriter.writeCharacters(text);\n+                if(_nextIsCData) {\n+                    _xmlWriter.writeCData(text);\n+                } else {\n+                    _xmlWriter.writeCharacters(text);\n+                }\n                 _xmlWriter.writeEndElement();\n             } \n         } catch (XMLStreamException e) {\n                 _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));\n             } else if (checkNextIsUnwrapped()) {\n             \t// should we consider pretty-printing or not?\n-                _xmlWriter.writeCharacters(text, offset, len);\n+                if(_nextIsCData) {\n+                    _xmlWriter.writeCData(text, offset, len);\n+                } else {\n+                    _xmlWriter.writeCharacters(text, offset, len);\n+                }\n             } else if (_xmlPrettyPrinter != null) {\n                 _xmlPrettyPrinter.writeLeafElement(_xmlWriter,\n                         _nextName.getNamespaceURI(), _nextName.getLocalPart(),\n-                        text, offset, len);\n+                        text, offset, len, _nextIsCData);\n             } else {\n                 _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());\n-                _xmlWriter.writeCharacters(text, offset, len);\n+                if(_nextIsCData) {\n+                    _xmlWriter.writeCData(text, offset, len);\n+                } else {\n+                    _xmlWriter.writeCharacters(text, offset, len);\n+                }\n                 _xmlWriter.writeEndElement();\n             }\n         } catch (XMLStreamException e) {\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerBase.java\n                 xgen.setNextName(xmlNames[i]);\n                 BeanPropertyWriter prop = props[i];\n                 if (prop != null) { // can have nulls in filtered list\n+                    if(_isCData(prop)) {\n+                        xgen.setNextIsCData(true);\n+                    }\n+\n                     prop.serializeAsField(bean, xgen, provider);\n+\n+                    if(_isCData(prop)) {\n+                        xgen.setNextIsCData(false);\n+                    }\n                 }\n                 // Reset to avoid next value being written as unwrapped, \n                 // for example when property is suppressed\n         return (info != null) && info.isAttribute();\n     }\n \n+    protected static boolean _isCData(BeanPropertyWriter bpw)\n+    {\n+        XmlInfo info = (XmlInfo) bpw.getInternalSetting(KEY_XML_INFO);\n+        return (info != null) && info.isCData();\n+    }\n+\n     /**\n      * Method for re-sorting lists of bean properties such that attributes are strictly\n      * written before elements.\n                 continue;\n             }\n             \n-            // Move attribute a few places done as necessary\n+            // Move attribute a few places down as necessary\n             int moveBy = i - attrCount;\n             if (moveBy > 0) {\n                 System.arraycopy(properties, attrCount, properties, attrCount + 1, moveBy);\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlBeanSerializerModifier.java\n             String ns = AnnotationUtil.findNamespaceAnnotation(intr, member);\n             Boolean isAttribute = AnnotationUtil.findIsAttributeAnnotation(intr, member);\n             Boolean isText = AnnotationUtil.findIsTextAnnotation(intr, member);\n+            Boolean isCData = AnnotationUtil.findIsCDataAnnotation(intr, member);\n             bpw.setInternalSetting(XmlBeanSerializerBase.KEY_XML_INFO,\n-            \t\tnew XmlInfo(isAttribute, ns, isText));\n+            \t\tnew XmlInfo(isAttribute, ns, isText, isCData));\n \n             // Actually: if we have a Collection type, easiest place to add wrapping would be here...\n             //  or: let's also allow wrapping of \"untyped\" (Object): assuming it is a dynamically\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/AnnotationUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/AnnotationUtil.java\n         }\n         return null;\n     }\n+\n+    public static Boolean findIsCDataAnnotation(AnnotationIntrospector ai,\n+                                               AnnotatedMember prop)\n+    {\n+        for (AnnotationIntrospector intr : ai.allIntrospectors()) {\n+            if (intr instanceof XmlAnnotationIntrospector) {\n+                Boolean b = ((XmlAnnotationIntrospector) intr).isOutputAsCData(prop);\n+                if (b != null) {\n+                    return b;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/DefaultXmlPrettyPrinter.java\n     \n     @Override\n     public void writeLeafElement(XMLStreamWriter2 sw,\n-    \t\tString nsURI, String localName, String text)\n+    \t\tString nsURI, String localName, String text, boolean isCData)\n   \t\tthrows XMLStreamException\n     {\n         if (!_objectIndenter.isInline()) {\n             _objectIndenter.writeIndentation(sw, _nesting);\n         }\n         sw.writeStartElement(nsURI, localName);\n-        sw.writeCharacters(text);\n+        if(isCData) {\n+            sw.writeCData(text);\n+        } else {\n+            sw.writeCharacters(text);\n+        }\n         sw.writeEndElement();\n         _justHadStartElement = false;\n     }\n     @Override\n     public void writeLeafElement(XMLStreamWriter2 sw,\n     \t\tString nsURI, String localName,\n-    \t\tchar[] buffer, int offset, int len)\n+    \t\tchar[] buffer, int offset, int len, boolean isCData)\n         throws XMLStreamException\n     {\n         if (!_objectIndenter.isInline()) {\n             _objectIndenter.writeIndentation(sw, _nesting);\n         }\n         sw.writeStartElement(nsURI, localName);\n-        sw.writeCharacters(buffer, offset, len);\n+        if(isCData) {\n+            sw.writeCData(buffer, offset, len);\n+        } else {\n+            sw.writeCharacters(buffer, offset, len);\n+        }\n         sw.writeEndElement();\n         _justHadStartElement = false;\n     }\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlInfo.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/util/XmlInfo.java\n     protected final String _namespace;\n     protected final boolean _isAttribute;\n     protected final boolean _isText;\n+    protected final boolean _isCData;\n     \n-    public XmlInfo(Boolean isAttribute, String ns, Boolean isText)\n+    public XmlInfo(Boolean isAttribute, String ns, Boolean isText, Boolean isCData)\n     {\n         _isAttribute = (isAttribute == null) ? false : isAttribute.booleanValue();\n         _namespace = (ns == null) ? \"\" : ns;\n         _isText = (isText == null) ? false : isText.booleanValue();\n+        _isCData = (isCData == null) ? false : isCData.booleanValue();\n     }\n \n     public String getNamespace() { return _namespace; }\n     public boolean isAttribute() { return _isAttribute; }\n     public boolean isText() { return _isText; }\n+    public boolean isCData() { return _isCData; }\n }\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestSerialization.java\n import com.fasterxml.jackson.dataformat.xml.JacksonXmlModule;\n import com.fasterxml.jackson.dataformat.xml.XmlMapper;\n import com.fasterxml.jackson.dataformat.xml.XmlTestBase;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlCData;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;\n \n     static class NsRootBean\n     {\n         public String value = \"abc\";\n+    }\n+\n+    static class CDataStringBean\n+    {\n+        @JacksonXmlCData\n+        public String value = \"<some<data\\\"\";\n+    }\n+\n+    static class CDataStringArrayBean\n+    {\n+        @JacksonXmlCData\n+        public String[] value = {\"<some<data\\\"\", \"abc\"};\n     }\n \n     static class CustomSerializer extends StdScalarSerializer<String>\n \n         assertEquals(Integer.valueOf(456), result.get(\"b\"));\n     }\n+\n+    public void testCDataString() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new CDataStringBean());\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<CDataStringBean><value><![CDATA[<some<data\\\"]]></value></CDataStringBean>\", xml);\n+    }\n+\n+    public void testCDataStringArray() throws IOException\n+    {\n+        String xml = _xmlMapper.writeValueAsString(new CDataStringArrayBean());\n+        xml = removeSjsxpNamespace(xml);\n+        assertEquals(\"<CDataStringArrayBean><value><value><![CDATA[<some<data\\\"]]></value><value><![CDATA[abc]]></value></value></CDataStringArrayBean>\", xml);\n+    }\n     \n     // for [Issue#41]\n     public void testCustomSerializer() throws Exception", "timestamp": 1415841118, "metainfo": ""}