{"sha": "61870b2ea1c9ea79c51f53c414394bf510985725", "log": "Start working on one more work-around for XML deserialization... for String elems with attributes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n+++ b/src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java\n         }\n     }\n \n+    // @since 2.1\n+    @Override\n+    public String getValueAsString() throws IOException, JsonParseException {\n+        return getValueAsString(null);\n+    }\n+\n+    @Override\n+    public String getValueAsString(String defValue) throws IOException, JsonParseException\n+    {\n+//System.err.println(\"getValue, t==\"+_currToken);       \n+        if (_currToken == null) {\n+            return null;\n+        }\n+        switch (_currToken) {\n+        case FIELD_NAME:\n+            return getCurrentName();\n+        case VALUE_STRING:\n+            return _currText;\n+        default:\n+            if (_currToken.isScalarValue()) {\n+                return _currToken.asString();\n+            }\n+        }\n+        return null;\n+    }\n+    \n     @Override\n     public char[] getTextCharacters() throws IOException, JsonParseException {\n         String text = getText();\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestStringValues.java\n+package com.fasterxml.jackson.dataformat.xml;\n+\n+public class TestStringValues extends XmlTestBase\n+{\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n+    public void testSimpleStringElement() throws Exception\n+    {\n+        // first, simple one to verify baseline\n+        StringBean bean = MAPPER.readValue(\"<StringBean><text>text!</text></StringBean>\", StringBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"text!\", bean.text);\n+    }\n+    \n+    public void testEmptyStringElement() throws Exception\n+    {\n+        // then with empty element\n+        StringBean bean = MAPPER.readValue(\"<StringBean><text></text></StringBean>\", StringBean.class);\n+        assertNotNull(bean);\n+        // empty String or null?\n+        // 22-Sep-2012, tatu: Seems to be 'null', but should probably be fixed to \"\"\n+//        assertEquals(\"\", bean.text);\n+        assertNull(bean.text);\n+    }\n+    \n+    public void testMissingString() throws Exception\n+    {\n+        StringBean baseline = new StringBean();\n+        // then missing\n+        StringBean bean = MAPPER.readValue(\"<StringBean />\", StringBean.class);\n+        assertNotNull(bean);\n+        assertEquals(baseline.text, bean.text);\n+    }\n+\n+    public void testStringWithAttribute() throws Exception\n+    {\n+    // and then the money shot: with 'standard' attribute...\n+        StringBean bean = MAPPER.readValue(\"<StringBean><text xml:lang='fi'>Pulla</text></StringBean>\", StringBean.class);\n+        assertNotNull(bean);\n+        assertEquals(\"Pulla\", bean.text);\n+    }\n+    \n+}\n--- a/src/test/java/com/fasterxml/jackson/dataformat/xml/TestTextValue.java\n+++ b/src/test/java/com/fasterxml/jackson/dataformat/xml/TestTextValue.java\n     /**********************************************************\n      */\n \n-\tstatic class Simple\n-\t{\n-\t\t@JacksonXmlProperty(isAttribute=true)\n-\t\t// same as: @javax.xml.bind.annotation.XmlAttribute\n-\t\tpublic int a = 13;\n+    static class Simple\n+    {\n+        @JacksonXmlProperty(isAttribute=true)\n+        // same as: @javax.xml.bind.annotation.XmlAttribute\n+        public int a = 13;\n \n-\t\t@JacksonXmlText\n-\t\t// about same as: @javax.xml.bind.annotation.XmlValue\n-\t\tpublic String text = \"something\";\n-\t}\n+        @JacksonXmlText\n+        // about same as: @javax.xml.bind.annotation.XmlValue\n+        public String text = \"something\";\n+    }\n \t\n-\t// Issue-24:\n+    // Issue-24:\n \n-\tstatic class Main {\n-\t\t@JsonProperty(\"com.test.stack\") public Stack stack;\n-\t}\n-\tstatic class Stack {\n-\t\tpublic String name;\n+    static class Main {\n+        @JsonProperty(\"com.test.stack\") public Stack stack;\n+    }\n+    static class Stack {\n+        public String name;\n \n-\t\t@JsonProperty(\"com.test.stack.slot\")\n-\t\tpublic Slot slot;\n-\t}\n-\tstatic class Slot {\n-\t\t@JsonProperty(\"name\")\n-\t\tpublic String name;\n+        @JsonProperty(\"com.test.stack.slot\")\n+        public Slot slot;\n+    }\n+    static class Slot {\n+        @JsonProperty(\"name\")\n+        public String name;\n \n-\t\t@JsonProperty(\"id\")\n-\t\tpublic String id;\n+        @JsonProperty(\"id\")\n+        public String id;\n \n-\t\t@JsonProperty(\"height\")\n-\t\tpublic String height;\n+        @JsonProperty(\"height\")\n+        public String height;\n \n-\t\t@JsonProperty(\"width\")\n-\t\tpublic String width;\n+        @JsonProperty(\"width\")\n+        public String width;\n \n-\t\t@JacksonXmlText\n-\t\tpublic String value;\n-\t}\n-\t/*\n+        @JacksonXmlText\n+        public String value;\n+    }\n+\n+    /*\n     /**********************************************************\n     /* Unit tests\n     /**********************************************************\n      */\n \n+    private final XmlMapper MAPPER = new XmlMapper();\n+    \n     public void testSerializeAsText() throws IOException\n     {\n-    \tXmlMapper mapper = new XmlMapper();\n-    \tString xml = mapper.writeValueAsString(new Simple());\n+    \tString xml = MAPPER.writeValueAsString(new Simple());\n     \tassertEquals(\"<Simple a=\\\"13\\\">something</Simple>\", xml);\n     }\n \n     public void testDeserializeAsText() throws IOException\n     {\n-    \tXmlMapper mapper = new XmlMapper();\n-    \tSimple result = mapper.readValue(\"<Simple a='99'>else</Simple>\",\n+    \tSimple result = MAPPER.readValue(\"<Simple a='99'>else</Simple>\",\n     \t\t\tSimple.class);\n     \tassertEquals(99, result.a);\n     \tassertEquals(\"else\", result.text);\n     \t\t\t+\"</com.test.stack.slot>\\n\"\n     \t\t\t+\"</com.test.stack>\\n\"\n     \t\t\t+\"</main>\";\n-    \tXmlMapper mapper = new XmlMapper();\n-    \tMain main = mapper.readValue(XML, Main.class);\n+    \tMain main = MAPPER.readValue(XML, Main.class);\n     \tassertNotNull(main.stack);\n     \tassertNotNull(main.stack.slot);\n     \tassertEquals(TEXT, main.stack.slot.value);", "timestamp": 1348374224, "metainfo": ""}