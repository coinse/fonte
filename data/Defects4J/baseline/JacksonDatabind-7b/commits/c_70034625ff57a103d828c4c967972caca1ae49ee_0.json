{"sha": "70034625ff57a103d828c4c967972caca1ae49ee", "log": "Implemented #463", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n     public abstract String asText();\n \n     /**\n+     * Method similar to {@link #asText()}, except that it will return\n+     * <code>defaultValue</code> in cases where null value would be returned;\n+     * either for missing nodes (trying to access missing property, or element\n+     * at invalid item for array) or explicit nulls.\n+     * \n+     * @since 2.4\n+     */\n+    public String asText(String defaultValue) {\n+        String str = asText();\n+        return (str == null) ? defaultValue : str;\n+    }\n+    \n+    /**\n      * Method that will try to convert value of this node to a Java <b>int</b>.\n      * Numbers are coerced using default Java rules; booleans convert to 0 (false)\n      * and 1 (true), and Strings are parsed using default Java language integer\n     public int asInt() {\n         return asInt(0);\n     }\n-    \n+\n     /**\n      * Method that will try to convert value of this node to a Java <b>int</b>.\n      * Numbers are coerced using default Java rules; booleans convert to 0 (false)\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n \n     public boolean couldDeserialize() { return getMutator() != null; }\n     public boolean couldSerialize() { return getAccessor() != null; }\n-    \n+\n     /*\n     /**********************************************************\n     /* Access to accessors (fields, methods etc)\n     /**********************************************************\n      */\n-    \n+\n     public abstract boolean hasGetter();\n     public abstract boolean hasSetter();\n     public abstract boolean hasField();\n     public abstract boolean hasConstructorParameter();\n-    \n+\n     public abstract AnnotatedMethod getGetter();\n     public abstract AnnotatedMethod getSetter();\n     public abstract AnnotatedField getField();\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n     /* Life-cycle\n     /**********************************************************\n      */\n-    \n+\n     protected POJOPropertiesCollector(MapperConfig<?> config, boolean forSerialization,\n             JavaType type, AnnotatedClass classDef, String mutatorPrefix)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n     /* BeanPropertyDefinition implementation, accessor access\n     /**********************************************************\n      */\n-    \n+\n     @Override\n     public boolean hasGetter() { return _getters != null; }\n \n \n     @Override\n     public boolean hasConstructorParameter() { return _ctorParameters != null; }\n+\n+    @Override\n+    public boolean couldDeserialize() {\n+        return (_ctorParameters != null) || (_setters != null) || (_fields != null);\n+    }\n \n     @Override\n     public boolean couldSerialize() {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n \n     @Override public JsonToken asToken() { return JsonToken.NOT_AVAILABLE; }\n \n-    @Override\n-    public String asText() { return \"\"; }\n+    @Override public String asText() { return \"\"; }\n \n+    @Override public String asText(String defaultValue) { return defaultValue; }\n+    \n     // // Note: not a numeric node, hence default 'asXxx()' are fine:\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/node/NullNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/NullNode.java\n \n     @Override public JsonToken asToken() { return JsonToken.VALUE_NULL; }\n \n-    @Override\n-    public String asText() {\n-        return \"null\";\n-    }\n+    @Override public String asText(String defaultValue) { return defaultValue; }\n+    @Override public String asText() { return \"null\"; }\n \n     // as with MissingNode, not considered number node; hence defaults are returned if provided\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java\n      */\n \n     @Override\n-    public String asText() {\n-        return (_value == null) ? \"null\" : _value.toString();\n+    public String asText() { return (_value == null) ? \"null\" : _value.toString(); }\n+\n+    @Override public String asText(String defaultValue) {\n+        return (_value == null) ? defaultValue : _value.toString();\n     }\n-\n+    \n     @Override\n     public boolean asBoolean(boolean defaultValue)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n      */\n \n     @Override\n-    public final JsonNode get(int index)\n-    {\n-        return null;\n-    }\n+    public final JsonNode get(int index) { return null; }\n \n     @Override\n-    public final JsonNode path(int index)\n-    {\n-        return MissingNode.getInstance();\n-    }\n+    public final JsonNode path(int index) { return MissingNode.getInstance(); }\n \n     @Override\n-    public final boolean has(int index)\n-    {\n-        return false;\n-    }\n+    public final boolean has(int index) { return false; }\n \n     @Override\n-    public final boolean hasNonNull(int index)\n-    {\n-        return false;\n-    }\n+    public final boolean hasNonNull(int index) { return false; }\n \n     @Override\n-    public final JsonNode get(String fieldName)\n-    {\n-        return null;\n-    }\n+    public final JsonNode get(String fieldName) { return null; }\n \n     @Override\n-    public final JsonNode path(String fieldName)\n-    {\n-        return MissingNode.getInstance();\n-    }\n+    public final JsonNode path(String fieldName) { return MissingNode.getInstance(); }\n \n     @Override\n-    public final boolean has(String fieldName)\n-    {\n-        return false;\n-    }\n+    public final boolean has(String fieldName) { return false; }\n \n     @Override\n-    public final boolean hasNonNull(String fieldName)\n-    {\n-        return false;\n-    }\n+    public final boolean hasNonNull(String fieldName) { return false; }\n \n     /*\n      **********************************************************************\n      */\n \n     @Override\n-    public final JsonNode findValue(String fieldName)\n-    {\n+    public final JsonNode findValue(String fieldName) {\n         return null;\n     }\n \n     // note: co-variant return type\n     @Override\n-    public final ObjectNode findParent(String fieldName)\n-    {\n+    public final ObjectNode findParent(String fieldName) {\n         return null;\n     }\n \n     @Override\n-    public final List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar)\n-    {\n+    public final List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar) {\n         return foundSoFar;\n     }\n \n     @Override\n-    public final List<String> findValuesAsText(String fieldName, List<String> foundSoFar)\n-    {\n+    public final List<String> findValuesAsText(String fieldName, List<String> foundSoFar) {\n         return foundSoFar;\n     }\n \n     @Override\n-    public final List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar)\n-    {\n+    public final List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar) {\n         return foundSoFar;\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n         assertEquals(value, n.asLong());\n         \n         // and then with non-numeric input\n-        assertNodeNumbersForNonNumeric(TextNode.valueOf(\"foobar\"));\n+        n = TextNode.valueOf(\"foobar\");\n+        assertNodeNumbersForNonNumeric(n);\n+\n+        assertEquals(\"foobar\", n.asText(\"barf\"));\n \n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestMissingNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestMissingNode.java\n         assertEquals(4, n.asInt(4));\n         assertEquals(5L, n.asLong(5));\n         assertEquals(0.25, n.asDouble(0.25));\n+\n+        assertEquals(\"foo\", n.asText(\"foo\"));\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNullNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNullNode.java\n         assertFalse(n.has(\"field\"));\n         assertFalse(n.has(3));\n \n-        // 1.6:\n         assertNodeNumbersForNonNumeric(n);\n+\n+        // 2.4\n+        assertEquals(\"foo\", n.asText(\"foo\"));\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n         assertEquals(BigDecimal.ONE, n.decimalValue());\n         assertEquals(BigInteger.ONE, n.bigIntegerValue());\n         assertEquals(\"1\", n.asText());\n-\n+        // 2.4\n+        assertEquals(\"1\", n.asText(\"foo\"));\n+        \n         assertNodeNumbers(n, 1, 1.0);\n \n         assertTrue(IntNode.valueOf(0).canConvertToInt());\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n     \n     private final ObjectMapper MAPPER = objectMapper();\n \n+    public void testSimpleObject() throws Exception\n+    {\n+        String JSON = \"{ \\\"key\\\" : 1, \\\"b\\\" : \\\"x\\\" }\";\n+        JsonNode root = MAPPER.readTree(JSON);\n+\n+        // basic properties first:\n+        assertFalse(root.isValueNode());\n+        assertTrue(root.isContainerNode());\n+        assertFalse(root.isArray());\n+        assertTrue(root.isObject());\n+        assertEquals(2, root.size());\n+\n+        // Related to [JACKSON-50]:\n+        Iterator<JsonNode> it = root.iterator();\n+        assertNotNull(it);\n+        assertTrue(it.hasNext());\n+        JsonNode n = it.next();\n+        assertNotNull(n);\n+        assertEquals(IntNode.valueOf(1), n);\n+\n+        assertTrue(it.hasNext());\n+        n = it.next();\n+        assertNotNull(n);\n+        assertEquals(TextNode.valueOf(\"x\"), n);\n+\n+        assertFalse(it.hasNext());\n+\n+        // Ok, then, let's traverse via extended interface\n+        ObjectNode obNode = (ObjectNode) root;\n+        Iterator<Map.Entry<String,JsonNode>> fit = obNode.fields();\n+        // we also know that LinkedHashMap is used, i.e. order preserved\n+        assertTrue(fit.hasNext());\n+        Map.Entry<String,JsonNode> en = fit.next();\n+        assertEquals(\"key\", en.getKey());\n+        assertEquals(IntNode.valueOf(1), en.getValue());\n+\n+        assertTrue(fit.hasNext());\n+        en = fit.next();\n+        assertEquals(\"b\", en.getKey());\n+        assertEquals(TextNode.valueOf(\"x\"), en.getValue());\n+\n+        // Plus: we should be able to modify the node via iterator too:\n+        fit.remove();\n+        assertEquals(1, obNode.size());\n+        assertEquals(IntNode.valueOf(1), root.get(\"key\"));\n+        assertNull(root.get(\"b\"));\n+    }    \n     // for [Issue#346]\n     public void testEmptyNodeAsValue() throws Exception\n     {\n         assertTrue(ob1.equals(ob2));\n         assertTrue(ob2.equals(ob1));\n     }\n+\n+    public void testSimplePath() throws Exception\n+    {\n+        JsonNode root = MAPPER.readTree(\"{ \\\"results\\\" : { \\\"a\\\" : 3 } }\");\n+        assertTrue(root.isObject());\n+        JsonNode rnode = root.path(\"results\");\n+        assertNotNull(rnode);\n+        assertTrue(rnode.isObject());\n+        assertEquals(3, rnode.path(\"a\").intValue());\n+    }\n }", "timestamp": 1400708505, "metainfo": ""}