{"sha": "1e9c10c02820543e715bdf70ae8301527d7baae6", "log": "Remove CustomSerializerFactory", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n  * Simple {@link Module} implementation that allows registration\n  * of serializers and deserializers, and bean serializer\n  * and deserializer modifiers.\n- * \n- * @since 1.7\n  */\n public class SimpleModule extends Module\n {\n     /**\n      * Lazily-constructed map that contains mix-in definitions, indexed\n      * by target class, value being mix-in to apply.\n-     * \n-     * @since 1.9\n      */\n     protected HashMap<Class<?>, Class<?>> _mixins = null;\n     \n \n     /**\n      * Resets all currently configured serializers.\n-     * \n-     * @since 1.9\n      */\n     public void setSerializers(SimpleSerializers s) {\n         _serializers = s;\n \n     /**\n      * Resets all currently configured deserializers.\n-     * \n-     * @since 1.9\n      */\n     public void setDeserializers(SimpleDeserializers d) {\n         _deserializers = d;\n \n     /**\n      * Resets all currently configured key serializers.\n-     * \n-     * @since 1.9\n      */\n     public void setKeySerializers(SimpleSerializers ks) {\n         _keySerializers = ks;\n \n     /**\n      * Resets all currently configured key deserializers.\n-     * \n-     * @since 1.9\n      */\n     public void setKeyDeserializers(SimpleKeyDeserializers kd) {\n         _keyDeserializers = kd;\n \n     /**\n      * Resets currently configured abstract type mappings\n-     *\n-     * @since 1.9\n      */\n     public void setAbstractTypes(SimpleAbstractTypeResolver atr) {\n         _abstractTypes = atr;        \n \n     /**\n      * Resets all currently configured value instantiators\n-     * \n-     * @since 1.9\n      */\n     public void setValueInstantiators(SimpleValueInstantiators svi) {\n         _valueInstantiators = svi;\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n-import com.fasterxml.jackson.databind.ser.CustomSerializerFactory;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.ser.std.CollectionSerializer;\n \n /**\n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public void testCustomLists() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();    \t\n-        CustomSerializerFactory sf = new CustomSerializerFactory();\n+        ObjectMapper mapper = new ObjectMapper();\n+        SimpleModule module = new SimpleModule(\"test\", Version.unknownVersion());\n         JsonSerializer<?> ser = new CollectionSerializer(null, false, null, null, null);\n         final JsonSerializer<Object> collectionSerializer = (JsonSerializer<Object>) ser;\n-        \n-        sf.addGenericMapping(Collection.class, new JsonSerializer<Collection>() {\n+\n+        module.addSerializer(Collection.class, new JsonSerializer<Collection>() {\n             @Override\n             public void serialize(Collection value, JsonGenerator jgen, SerializerProvider provider)\n                     throws IOException, JsonProcessingException {\n                 }\n             }\n         });\n-        mapper.setSerializerFactory(sf);\n+        mapper.registerModule(module);\n         assertEquals(\"null\", mapper.writeValueAsString(new ArrayList<Object>()));\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonValue;\n+\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.JsonProcessingException;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n-import com.fasterxml.jackson.databind.ser.CustomSerializerFactory;\n import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\n \n /**\n         assertEquals(\"\\\"c2\\\"\", sw.toString());\n     }\n \n-    /**\n-     * Unit test that verifies that standard enum serialization\n-     * can be overridden by using custom serializer factory\n-     * to specify alternative global enum serializer.\n-     */\n-    public void testEnumUsingCSFEnumOverride() throws Exception\n-    {\n-        ObjectMapper mapper = new ObjectMapper();\n-        CustomSerializerFactory sf = new CustomSerializerFactory();\n-        sf.setEnumSerializer(ToStringSerializer.instance);\n-        mapper.setSerializerFactory(sf);\n-        StringWriter sw = new StringWriter();\n-        mapper.writeValue(sw, TestEnum.B);\n-        assertEquals(\"\\\"b\\\"\", sw.toString());\n-    }\n-\n-    /**\n-     * Unit test that verifies that standard enum serialization\n-     * can be overridden by using custom serializer factory\n-     * to specify generic serializer for enum base class\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public void testEnumUsingCSFGenericMapping() throws Exception\n-    {\n-        ObjectMapper mapper = new ObjectMapper();\n-        CustomSerializerFactory sf = new CustomSerializerFactory();\n-        Class<?> enumCls = Enum.class;\n-        sf.addGenericMapping((Class<Object>) enumCls, ToStringSerializer.instance);\n-        mapper.setSerializerFactory(sf);\n-        StringWriter sw = new StringWriter();\n-        mapper.writeValue(sw, TestEnum.A);\n-        assertEquals(\"\\\"a\\\"\", sw.toString());\n-    }\n-\n     // Test [JACKSON-214]\n     public void testSubclassedEnums() throws Exception\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestExceptionHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestExceptionHandling.java\n package com.fasterxml.jackson.databind.ser;\n-\n \n import java.io.*;\n import java.util.*;\n \n-\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.ser.CustomSerializerFactory;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+\n import com.fasterxml.jackson.test.BaseTest;\n \n /**\n     extends BaseTest\n {\n     /*\n-    //////////////////////////////////////////////\n-    // Helper classes\n-    //////////////////////////////////////////////\n+    /**********************************************************\n+    /* Helper classes\n+    /**********************************************************\n      */\n \n     static class Bean {\n     }\n \n     /*\n-    //////////////////////////////////////////////\n-    // Tests\n-    //////////////////////////////////////////////\n+    /**********************************************************\n+    /* Tests\n+    /**********************************************************\n      */\n \n     /**\n         throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        CustomSerializerFactory sf = new CustomSerializerFactory();\n-        sf.addSpecificMapping(Bean.class, new SerializerWithErrors());\n-        mapper.setSerializerFactory(sf);\n+        SimpleModule module = new SimpleModule(\"test-exceptions\", Version.unknownVersion());\n+        module.addSerializer(Bean.class, new SerializerWithErrors());\n+        mapper.registerModule(module);\n         try {\n             StringWriter sw = new StringWriter();\n             /* And just to make things more interesting, let's create\n     }\n \n     /*\n-    ////////////////////////////////////////////////////\n-    // Helper methods\n-    ////////////////////////////////////////////////////\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n      */\n \n     void verifyException(Exception e, Class<?> expType, String expMsg)", "timestamp": 1325193412, "metainfo": ""}