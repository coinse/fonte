{"sha": "833680a543eeae627a0e93684355e881c789c80a", "log": "Fix #238", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n         }\n         String implName; // from naming convention\n         boolean visible;\n-        \n+\n         PropertyName pn = (ai == null) ? null : ai.findNameForSerialization(m);\n         String explName = (pn == null) ? null : pn.getSimpleName();\n         if (explName == null) { // no explicit name; must follow naming convention\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.PropertyName;\n+import com.fasterxml.jackson.databind.util.BeanUtil;\n \n /**\n  * Helper class used for aggregating information about a single\n                     continue;\n                 }\n             }\n+            /* [Issue#238]: Also, regular getters have precedence over \"is-getters\", so\n+             *   latter can be skipped to resolve otherwise conflict.\n+             *   This is bit ugly as we have to re-process naming (as determination of type\n+             *   is not retained), but should work.\n+             */\n+            boolean thisIsGetter = BeanUtil.okNameForIsGetter(getter, getter.getName()) != null;\n+            boolean nextIsGetter = BeanUtil.okNameForIsGetter(nextGetter, nextGetter.getName()) != null;\n+            \n+            if (thisIsGetter != nextIsGetter) {\n+                if (thisIsGetter) {\n+                    getter = nextGetter;\n+                } \n+                continue;\n+            }\n             throw new IllegalArgumentException(\"Conflicting getter definitions for property \\\"\"+getName()+\"\\\": \"\n                     +getter.getFullName()+\" vs \"+nextGetter.getFullName());\n         }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts.java\n+package com.fasterxml.jackson.databind.introspect;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Unit tests verifying handling of potential and actual\n+ * conflicts, regarding property handling.\n+ */\n+public class TestPropertyConflicts extends BaseMapTest\n+{\n+    // For [JACKSON-694]: error message for conflicting getters sub-optimal\n+    static class BeanWithConflict\n+    {\n+        public int getX() { return 3; }\n+        public boolean getx() { return false; }\n+    }\n+\n+    // [Issue#238]\n+    protected static class Getters1A\n+    {\n+        protected int value = 3;\n+        \n+        public int getValue() { return value+1; }\n+        public boolean isValue() { return false; }\n+    }\n+\n+    // variant where order of declarations is reversed; to try to\n+    // ensure declaration order won't break things\n+    protected static class Getters1B\n+    {\n+        public boolean isValue() { return false; }\n+\n+        protected int value = 3;\n+        \n+        public int getValue() { return value+1; }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n+    // for [JACKSON-694]\n+    public void testFailWithDupProps() throws Exception\n+    {\n+        BeanWithConflict bean = new BeanWithConflict();\n+        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            String json = mapper.writeValueAsString(bean);\n+            fail(\"Should have failed due to conflicting accessor definitions; got JSON = \"+json);\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"Conflicting getter definitions\");\n+        }\n+    }        \n+\n+    // [Issue#238]: ok to have getter, \"isGetter\"\n+    public void testRegularAndIsGetter() throws Exception\n+    {\n+        // first, serialize without probs:\n+        final ObjectMapper MAPPER = new ObjectMapper();\n+        assertEquals(\"{\\\"value\\\":4}\", MAPPER.writeValueAsString(new Getters1A()));\n+        assertEquals(\"{\\\"value\\\":4}\", MAPPER.writeValueAsString(new Getters1B()));\n+\n+        // and similarly, deserialize\n+        assertEquals(1, MAPPER.readValue(\"{\\\"value\\\":1}\", Getters1A.class).value);\n+        assertEquals(2, MAPPER.readValue(\"{\\\"value\\\":2}\", Getters1B.class).value);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n         }\n     }\n \n-    // For [JACKSON-694]: error message for conflicting getters sub-optimal\n-    static class BeanWithConflict\n-    {\n-        public int getX() { return 3; }\n-        public boolean isX() { return false; }\n-    }\n-\n     // [Issue#120], arrays, collections, maps\n     \n     static class ArraySerializerModifier extends BeanSerializerModifier {\n         map.put(\"x\", 3);\n         assertEquals(\"{\\\"foo\\\":3}\", mapper.writeValueAsString(map));\n     }\n-    \n-    /*\n-    /********************************************************\n-    /* Unit tests: failure handling\n-    /********************************************************\n-     */\n-    \n-    // for [JACKSON-694]\n-    public void testFailWithDupProps() throws Exception\n-    {\n-        BeanWithConflict bean = new BeanWithConflict();\n-        ObjectMapper mapper = new ObjectMapper();\n-        try {\n-            String json = mapper.writeValueAsString(bean);\n-            fail(\"Should have failed due to conflicting accessor definitions; got JSON = \"+json);\n-        } catch (JsonProcessingException e) {\n-            verifyException(e, \"Conflicting getter definitions\");\n-        }\n-    }        \n }", "timestamp": 1373510234, "metainfo": ""}