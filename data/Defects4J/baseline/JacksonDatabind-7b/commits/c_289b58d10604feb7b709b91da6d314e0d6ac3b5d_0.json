{"sha": "289b58d10604feb7b709b91da6d314e0d6ac3b5d", "log": "Improve ValueInstantiator interface to pass enough information to properly construct types (i.e. give DeserializationConfig)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n      * or factory method\n      * that takes one or more named properties as argument(s),\n      * this creator is used for instantiation.\n-     */\n-    protected final PropertyBasedCreator _propertyBasedCreator;\n+     * This value gets resolved during general resolution.\n+     */\n+    protected PropertyBasedCreator _propertyBasedCreator;\n \n     /**\n      * Flag that is set to mark \"non-standard\" cases; where either\n     /**\n      * Mapping of property names to properties, built when all properties\n      * to use have been successfully resolved.\n-     * \n-     * @since 1.7\n      */\n     final protected BeanPropertyMap _beanProperties;\n \n      * expected by the bean; otherwise null.\n      * This includes injectors used for injecting values via setters\n      * and fields, but not ones passed through constructor parameters.\n-     * \n-     * @since 1.9\n      */\n     final protected ValueInjector[] _injectables;\n     \n     /**\n      * If one of properties has \"unwrapped\" value, we need separate\n      * helper object\n-     * \n-     * @since 1.9\n      */\n     protected UnwrappedPropertyHandler _unwrappedPropertyHandler;\n \n         _property = property;\n \n         _valueInstantiator = valueInstantiator;\n-        if (valueInstantiator.canCreateFromObjectWith()) {\n-            _propertyBasedCreator = new PropertyBasedCreator(valueInstantiator);\n-        } else {\n-            _propertyBasedCreator = null;\n-        }\n         \n         _beanProperties = properties;\n         _backRefs = backRefs;\n         _injectables = (injectables == null || injectables.isEmpty()) ? null\n                 : injectables.toArray(new ValueInjector[injectables.size()]);\n \n-        _nonStandardCreation = valueInstantiator.canCreateUsingDelegate()\n-            || (_propertyBasedCreator != null)\n+        _nonStandardCreation = (_unwrappedPropertyHandler != null)\n+            || valueInstantiator.canCreateUsingDelegate()\n+            || valueInstantiator.canCreateFromObjectWith()\n             || !valueInstantiator.canCreateUsingDefault()\n-            || (_unwrappedPropertyHandler != null);\n+            ;\n     }\n \n     /**\n \n     /**\n      * Accessor for checking number of deserialized properties.\n-     * \n-     * @since 1.7\n      */\n     public int getPropertyCount() { \n         return _beanProperties.size();\n \n     @Override public JavaType getValueType() { return _beanType; }\n \n-    /**\n-     * \n-     * @since 1.6\n-     */\n     public Iterator<SettableBeanProperty> properties()\n     {\n-        if (_beanProperties == null) { // since 1.7\n+        if (_beanProperties == null) {\n             throw new IllegalStateException(\"Can only call before BeanDeserializer has been resolved\");\n         }\n         return _beanProperties.allProperties();\n         return _backRefs.get(logicalName);\n     }\n \n-    /**\n-     * @since 1.9\n-     */\n     public ValueInstantiator getValueInstantiator() {\n         return _valueInstantiator;\n     }\n     public void resolve(DeserializationConfig config, DeserializerProvider provider)\n         throws JsonMappingException\n     {\n+        // if ValueInstantiator can use \"creator\" approach, need to resolve it here...\n+        if (_valueInstantiator.canCreateFromObjectWith()) {\n+            SettableBeanProperty[] creatorProps = _valueInstantiator.getFromObjectArguments(config);\n+            _propertyBasedCreator = new PropertyBasedCreator(_valueInstantiator, creatorProps);\n+            for (SettableBeanProperty prop : creatorProps) {\n+                if (!prop.hasValueDeserializer()) {\n+                    _propertyBasedCreator.assignDeserializer(prop,\n+                           findDeserializer(config, provider, prop.getType(), prop));\n+                }\n+            }\n+        }\n+\n         Iterator<SettableBeanProperty> it = _beanProperties.allProperties();\n         UnwrappedPropertyHandler unwrapped = null;\n         ExternalTypeHandler.Builder extTypes = null;\n \n         // as well as delegate-based constructor:\n         if (_valueInstantiator.canCreateUsingDelegate()) {\n-            JavaType delegateType = _valueInstantiator.getDelegateType();\n+            JavaType delegateType = _valueInstantiator.getDelegateType(config);\n             if (delegateType == null) {\n                 throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_beanType\n                         +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n             BeanProperty.Std property = new BeanProperty.Std(null,\n                     delegateType, _forClass.getAnnotations(), delegateCreator);\n             _delegateDeserializer = findDeserializer(config, provider, delegateType, property);\n-        }\n-        // or property-based one\n-        // IMPORTANT: must access properties that _propertyBasedCreator has\n-        if (_propertyBasedCreator != null) {\n-            for (SettableBeanProperty prop : _propertyBasedCreator.getCreatorProperties()) {\n-                if (!prop.hasValueDeserializer()) {\n-                    _propertyBasedCreator.assignDeserializer(prop,\n-                           findDeserializer(config, provider, prop.getType(), prop));\n-                }\n-            }\n         }\n         if (extTypes != null) {\n             _externalTypeIdHandler = extTypes.build();\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n     \n     /**\n      * Properties to deserialize collected so far.\n-     *<p>\n-     * Note: since 1.9.1, LinkedHashMap has been used, since preservation\n-     * of order is actually important for some use cases.\n      */\n     final protected HashMap<String, SettableBeanProperty> _properties = new LinkedHashMap<String, SettableBeanProperty>();\n \n     /**\n      * Value injectors for deserialization\n-     * \n-     * @since 1.9\n      */\n     protected List<ValueInjector> _injectables;\n     \n     \n     /**\n      * Object that will handle value instantiation for the bean type.\n-     * \n-     * @since 1.9\n      */\n     protected ValueInstantiator _valueInstantiator;\n \n     /**\n      * Copy constructor for sub-classes to use, when constructing\n      * custom builder instances\n-     * \n-     * @since 1.9\n      */\n     protected BeanDeserializerBuilder(BeanDeserializerBuilder src)\n     {\n      * decision if these properties need to be available through accessors.\n      * For now, however, we just have to ensure that we don't try to resolve\n      * types that masked setter/field has (see [JACKSON-700] for details).\n-     * \n-     * @since 1.9.2\n      */\n     public void addCreatorProperty(BeanPropertyDefinition propDef)\n     {\n         _ignoreAllUnknown = ignore;\n     }\n \n-    /**\n-     * @since 1.9\n-     */\n     public void setValueInstantiator(ValueInstantiator inst) {\n         _valueInstantiator = inst;\n     }\n      * Note that properties are returned in order that properties\n      * are ordered (explictly, or by rule), which is the serialization\n      * order.\n-     * \n-     * @since 1.8.3\n      */\n     public Iterator<SettableBeanProperty> getProperties() {\n         return _properties.values().iterator();\n         return _properties.remove(name);\n     }\n \n-    /**\n-     * @since 1.9\n-     */\n     public ValueInstantiator getValueInstantiator() {\n         return _valueInstantiator;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n         for (String propName : ignored) {\n             builder.addIgnorable(propName);\n         }\n+        // Also, do we have a fallback \"any\" setter?\n+        AnnotatedMethod anySetter = beanDesc.findAnySetter();\n+        if (anySetter != null) {\n+            builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n+        }\n+        // NOTE: we do NOT add @JsonIgnore'd properties into blocked ones if there's any setter\n         // Implicit ones via @JsonIgnore and equivalent?\n-        {\n+        if (anySetter == null) {\n             Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();\n             if (ignored2 != null) {\n                 for (String propName : ignored2) {\n                     builder.addProperty(prop);\n                 }\n             }\n-        }\n-        // Also, do we have a fallback \"any\" setter?\n-        AnnotatedMethod anySetter = beanDesc.findAnySetter();\n-        if (anySetter != null) {\n-            builder.setAnySetter(constructAnySetter(config, beanDesc, anySetter));\n         }\n \n         /* As per [JACKSON-88], may also need to consider getters\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n      * constructor or factory method)\n      * is available for this instantiator\n      */\n-    public boolean canCreateUsingDelegate() {\n-        return getDelegateType() != null;\n-    }\n+    public abstract boolean canCreateUsingDelegate();\n+//        return getDelegateType(null) != null;\n \n     /**\n      * Method that can be called to check whether a property-based creator\n      * NOTE: all properties will be of type\n      * {@link com.fasterxml.jackson.databind.deser.impl.CreatorProperty}.\n      */\n-    public SettableBeanProperty[] getFromObjectArguments() {\n+    public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig config) {\n         return null;\n     }\n \n      * specified type (using standard deserializer for that type), and\n      * pass that to instantiator.\n      */\n-    public JavaType getDelegateType() {\n+    public JavaType getDelegateType(DeserializationConfig config) {\n         return null;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.java\n     /**\n      * Array that contains properties that expect value to inject, if any;\n      * null if no injectable values are expected.\n-     * \n-     * @since 1.9\n      */\n     protected final SettableBeanProperty[] _propertiesWithInjectables;\n     \n-    public PropertyBasedCreator(ValueInstantiator valueInstantiator)\n+    public PropertyBasedCreator(ValueInstantiator valueInstantiator,\n+            SettableBeanProperty[] creatorProps)\n     {\n         _valueInstantiator = valueInstantiator;\n         _properties = new HashMap<String, SettableBeanProperty>();\n         // [JACKSON-372]: primitive types need extra care\n         Object[] defValues = null;\n-        SettableBeanProperty[] creatorProps = valueInstantiator.getFromObjectArguments();\n         SettableBeanProperty[] propertiesWithInjectables = null;\n         for (int i = 0, len = creatorProps.length; i < len; ++i) {\n             SettableBeanProperty prop = creatorProps[i];\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n     {\n         // May need to resolve types for delegate-based creators:\n         if (_valueInstantiator.canCreateUsingDelegate()) {\n-            JavaType delegateType = _valueInstantiator.getDelegateType();\n+            JavaType delegateType = _valueInstantiator.getDelegateType(config);\n             if (delegateType == null) {\n                 throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_collectionType\n                         +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n \n import java.io.IOException;\n \n+import com.fasterxml.jackson.core.JsonLocation;\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.JsonToken;\n             throw ctxt.mappingException(_valueClass);\n         }\n     }\n+\n+    @JacksonStdImpl\n+    public static class JsonLocationDeserializer\n+        extends StdScalarDeserializer<JsonLocation>\n+    {\n+        public JsonLocationDeserializer() { super(JsonLocation.class); }\n+\n+        @Override\n+        public JsonLocation deserialize(JsonParser jp, DeserializationContext ctxt)\n+            throws IOException, JsonProcessingException\n+        {\n+            // !!! TBI\n+            return null;\n+        }\n+    }\n     \n     /**\n      * We also want to directly support deserialization of {@link TokenBuffer}.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n     \n     // // Instance construction settings:\n \n-    /**\n-     * @since 1.9\n-     */\n     protected final ValueInstantiator _valueInstantiator;\n \n-    /**\n-     * @since 1.9\n-     */\n     protected final boolean _hasDefaultCreator;\n     \n     /**\n         _valueDeserializer = valueDeser;\n         _valueTypeDeserializer = valueTypeDeser;\n         _valueInstantiator = valueInstantiator;\n-        if (valueInstantiator.canCreateFromObjectWith()) {\n-            _propertyBasedCreator = new PropertyBasedCreator(valueInstantiator);\n-        } else {\n-            _propertyBasedCreator = null;\n-        }\n         _hasDefaultCreator = valueInstantiator.canCreateUsingDefault();\n     }\n \n     {\n         // May need to resolve types for delegate- and/or property-based creators:\n         if (_valueInstantiator.canCreateUsingDelegate()) {\n-            JavaType delegateType = _valueInstantiator.getDelegateType();\n+            JavaType delegateType = _valueInstantiator.getDelegateType(config);\n             if (delegateType == null) {\n                 throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_mapType\n                         +\": value instantiator (\"+_valueInstantiator.getClass().getName()\n                     delegateType, null, delegateCreator);\n             _delegateDeserializer = findDeserializer(config, provider, delegateType, property);\n         }\n-        if (_propertyBasedCreator != null) {\n-            for (SettableBeanProperty prop : _propertyBasedCreator.getCreatorProperties()) {\n+        if (_valueInstantiator.canCreateFromObjectWith()) {\n+            SettableBeanProperty[] creatorProps = _valueInstantiator.getFromObjectArguments(config);\n+            _propertyBasedCreator = new PropertyBasedCreator(_valueInstantiator, creatorProps);\n+            for (SettableBeanProperty prop : creatorProps) {\n                 if (!prop.hasValueDeserializer()) {\n                     _propertyBasedCreator.assignDeserializer(prop, findDeserializer(config, provider, prop.getType(), prop));\n                 }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n  * supports use of default constructor. Sub-types can add\n  * support for alternate construction methods, such as using\n  * argument-taking constructors or static factory methods.\n- * \n- * @since 1.9.0\n  */\n public class StdValueInstantiator\n     extends ValueInstantiator\n     }\n \n     @Override\n+    public boolean canCreateUsingDelegate() {\n+        return _delegateType != null;\n+    }\n+    \n+    @Override\n     public boolean canCreateFromObjectWith() {\n         return (_withArgsCreator != null);\n     }\n \n     @Override\n-    public JavaType getDelegateType() {\n+    public JavaType getDelegateType(DeserializationConfig config) {\n         return _delegateType;\n     }\n \n     @Override\n-    public SettableBeanProperty[] getFromObjectArguments() {\n+    public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig config) {\n         return _constructorArguments;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n         // May need to resolve types for delegate-based creators:\n         AnnotatedWithParams delegateCreator = _valueInstantiator.getDelegateCreator();\n         if (delegateCreator != null) {\n-            JavaType delegateType = _valueInstantiator.getDelegateType();\n+            JavaType delegateType = _valueInstantiator.getDelegateType(config);\n             // Need to create a temporary property to allow contextual deserializers:\n             BeanProperty.Std property = new BeanProperty.Std(null,\n                     delegateType, null, delegateCreator);\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestAnyProperties.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestAnyProperties.java\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.configure(com.fasterxml.jackson.databind.DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n-        Ignored bean = mapper.readValue(\"{\\\"name\\\":\\\"Bob\\\", \\\"bogus\\\": [ 1, 2, 3], \\\"dummy\\\" : 13 }\", Ignored.class);\n-        assertNull(bean.map.get(\"dummy\"));\n-        assertNull(bean.map.get(\"bogus\"));\n-        assertEquals(\"Bob\", bean.map.get(\"name\"));\n-        assertEquals(1, bean.map.size());\n+        _testIgnorals(mapper);\n     }\n \n     public void testIgnored383() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.configure(com.fasterxml.jackson.databind.DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        _testIgnorals(mapper);\n+    }\n+    \n+    private void _testIgnorals(ObjectMapper mapper) throws Exception\n+    {\n         Ignored bean = mapper.readValue(\"{\\\"name\\\":\\\"Bob\\\", \\\"bogus\\\": [ 1, 2, 3], \\\"dummy\\\" : 13 }\", Ignored.class);\n+        // as of 2.0, @JsonIgnoreProperties does block; @JsonIgnore not\n         assertNull(bean.map.get(\"dummy\"));\n-        assertNull(bean.map.get(\"bogus\"));\n+        assertEquals(\"[1, 2, 3]\", \"\"+bean.map.get(\"bogus\"));\n         assertEquals(\"Bob\", bean.map.get(\"name\"));\n-        assertEquals(1, bean.map.size());\n+        assertEquals(2, bean.map.size());\n     }\n \n     public void testProblem744() throws Exception\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericsBounded.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericsBounded.java\n-package org.codehaus.jackson.map.deser;\n+package com.fasterxml.jackson.databind.deser;\n \n import java.util.*;\n \n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestValueInstantiator.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestValueInstantiator.java\n         public String getValueTypeDesc() {\n             return \"UNKNOWN\";\n         }\n+\n+        @Override\n+        public boolean canCreateUsingDelegate() { return false; }\n     }\n     \n     static abstract class PolymorphicBeanBase { }\n         }\n     }\n     \n-    static class MyBeanInstantiator extends ValueInstantiator\n+    static class MyBeanInstantiator extends InstantiatorBase\n     {\n         @Override\n         public String getValueTypeDesc() {\n      * deserialization, using ValueInstantiator; from Object to any\n      * type...\n      */\n-    static class PolymorphicBeanInstantiator extends ValueInstantiator\n+    static class PolymorphicBeanInstantiator extends InstantiatorBase\n     {\n         @Override\n         public String getValueTypeDesc() {\n         public boolean canCreateFromObjectWith() { return true; }\n \n         @Override\n-        public CreatorProperty[] getFromObjectArguments() {\n+        public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n             return  new CreatorProperty[] {\n-                    new CreatorProperty(\"type\", TypeFactory.defaultInstance().constructType(Class.class),\n+                    new CreatorProperty(\"type\", config.constructType(Class.class),\n                             null, null, null, 0, null)\n             };\n         }\n         }\n     }\n     \n-    static class CreatorMapInstantiator extends ValueInstantiator\n+    static class CreatorMapInstantiator extends InstantiatorBase\n     {\n         @Override\n         public String getValueTypeDesc() {\n         public boolean canCreateFromObjectWith() { return true; }\n \n         @Override\n-        public CreatorProperty[] getFromObjectArguments() {\n+        public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n             return  new CreatorProperty[] {\n-                    new CreatorProperty(\"name\", TypeFactory.defaultInstance().constructType(String.class),\n+                    new CreatorProperty(\"name\", config.constructType(String.class),\n                             null, null, null, 0, null)\n             };\n         }\n         public boolean canCreateUsingDelegate() { return true; }\n \n         @Override\n-        public JavaType getDelegateType() {\n-            return TypeFactory.defaultInstance().constructType(Object.class);\n+        public JavaType getDelegateType(DeserializationConfig config) {\n+            return config.constructType(Object.class);\n         }\n         \n         @Override\n         }\n     }\n     \n-    static class MyListInstantiator extends ValueInstantiator\n+    static class MyListInstantiator extends InstantiatorBase\n     {\n         @Override\n         public String getValueTypeDesc() {\n         public boolean canCreateUsingDelegate() { return true; }\n \n         @Override\n-        public JavaType getDelegateType() {\n-            return TypeFactory.defaultInstance().constructType(Object.class);\n+        public JavaType getDelegateType(DeserializationConfig config) {\n+            return config.constructType(Object.class);\n         }\n         \n         @Override\n         }\n     }\n     \n-    static class MyMapInstantiator extends ValueInstantiator\n+    static class MyMapInstantiator extends InstantiatorBase\n     {\n         @Override\n         public String getValueTypeDesc() {\n         public boolean canCreateUsingDelegate() { return true; }\n \n         @Override\n-        public JavaType getDelegateType() {\n+        public JavaType getDelegateType(DeserializationConfig config) {\n             return TypeFactory.defaultInstance().constructType(Object.class);\n         }\n         \n         }\n     }\n \n-    static class AnnotatedBeanInstantiator extends ValueInstantiator\n+    static class AnnotatedBeanInstantiator extends InstantiatorBase\n     {\n         @Override\n         public String getValueTypeDesc() {\n                     public boolean canCreateFromObjectWith() { return true; }\n         \n                     @Override\n-                    public CreatorProperty[] getFromObjectArguments() {\n+                    public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n                         return  new CreatorProperty[] {\n-                                new CreatorProperty(\"secret\", TypeFactory.defaultInstance().constructType(String.class),\n+                                new CreatorProperty(\"secret\", config.constructType(String.class),\n                                         null, null, null, 0, null)\n                         };\n                     }", "timestamp": 1325054095, "metainfo": ""}