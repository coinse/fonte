{"sha": "f88c50a10bbd2d1dc4ae6d7ca0a4ece68adc00c1", "log": "JsonNodeFactory: normalize DecimalNode instances by default  Make it so that parsing \"1.0\" or \"1.00\" yields equivalent DecimalNodes by calling .stripTrailingZeros() on passed BigDecimal instances.  Add a constructor giving the possibility of getting back to the old behavior.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n  */\n public class JsonNodeFactory\n {\n+    private final boolean _cfgBigDecimalExact;\n+\n+    private static final JsonNodeFactory decimalsNormalized\n+        = new JsonNodeFactory(false);\n+    private static final JsonNodeFactory decimalsAsIs\n+        = new JsonNodeFactory(true);\n+\n     /**\n      * Default singleton instance that construct \"standard\" node instances:\n      * given that this class is stateless, a globally shared singleton\n      * can be used.\n      */\n-    public final static JsonNodeFactory instance = new JsonNodeFactory();\n-\n-    protected JsonNodeFactory() { }\n+    public final static JsonNodeFactory instance = decimalsNormalized;\n+\n+    /**\n+     * Main constructor\n+     *\n+     * <p>The only argument to this constructor is a boolean telling whether\n+     * {@link DecimalNode} instances must be built with exact representations of\n+     * {@link BigDecimal} instances.</p>\n+     *\n+     * <p>This has quite an influence since, for instance, a BigDecimal (and,\n+     * therefore, a DecimalNode) constructed from input string {@code \"1.0\"} and\n+     * another constructed with input string {@code \"1.00\"} <b>will not</b> be\n+     * equal, since their scale differs (1 in the first case, 2 in the second\n+     * case).</p>\n+     *\n+     * <p>Note that setting the argument to {@code true} does <i>not</i>\n+     * guarantee a strict inequality between JSON representations: input texts\n+     * {@code \"0.1\"} and {@code \"1e-1\"}, for instance, yield two equivalent\n+     * BigDecimal instances since they have the same scale (1).</p>\n+     *\n+     * <p>The no-arg constructor (and the default {@link #instance}) calls this\n+     * constructor with {@code false} as an argument.</p>\n+     *\n+     * @param bigDecimalExact see description\n+     *\n+     * @see BigDecimal\n+     */\n+    protected JsonNodeFactory(boolean bigDecimalExact)\n+    {\n+        _cfgBigDecimalExact = bigDecimalExact;\n+    }\n+\n+    /**\n+     * Default constructor\n+     *\n+     * <p>This calls {@link #JsonNodeFactory(boolean)} with {@code false}\n+     * as an argument.</p>\n+     */\n+    protected JsonNodeFactory()\n+    {\n+        this(false);\n+    }\n+\n+    /**\n+     * Return a factory instance with the desired behavior for BigDecimals\n+     *\n+     * <p>See {@link #JsonNodeFactory(boolean)} for a full description.</p>\n+     *\n+     * @param bigDecimalExact see description\n+     * @return a factory instance\n+     */\n+    public static JsonNodeFactory withExactBigDecimals(boolean bigDecimalExact)\n+    {\n+        return bigDecimalExact ? decimalsAsIs : decimalsNormalized;\n+    }\n \n     /*\n     /**********************************************************\n     /**\n      * Factory method for getting an instance of JSON numeric value\n      * that expresses given unlimited precision floating point value\n-     */\n-    public NumericNode numberNode(BigDecimal v) { return DecimalNode.valueOf(v); }\n+     *\n+     * <p>In the event that the factory has been built to normalize decimal\n+     * values, the BigDecimal argument will be stripped off its trailing zeroes,\n+     * using {@link BigDecimal#stripTrailingZeros()}.</p>\n+     *\n+     * @see #JsonNodeFactory(boolean)\n+     */\n+    public NumericNode numberNode(BigDecimal v)\n+    {\n+        return DecimalNode.valueOf(_cfgBigDecimalExact ? v : v.stripTrailingZeros());\n+    }\n \n     /*\n     /**********************************************************", "timestamp": 1348821563, "metainfo": ""}