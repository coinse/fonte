{"sha": "eaedfb7677e74c1a610928655f464c454176d1c0", "log": "Still more config changes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.cfg.BaseSettings;\n-import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.cfg.ConfigFeature;\n import com.fasterxml.jackson.databind.cfg.MapperConfigBase;\n import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\n import com.fasterxml.jackson.databind.deser.DeserializerFactory;\n      * Trying enable/disable ObjectMapper-only feature will result in\n      * an {@link IllegalArgumentException}.\n      */\n-    public enum Feature implements MapperConfig.ConfigFeature\n+    public enum Feature implements ConfigFeature\n     {\n         /*\n         /******************************************************\n     /**\n      * Constructor used by ObjectMapper to create default configuration object instance.\n      */\n-    public DeserializationConfig(ClassIntrospector<? extends BeanDescription> intr,\n-            AnnotationIntrospector annIntr, VisibilityChecker<?> vc,\n-            SubtypeResolver subtypeResolver, PropertyNamingStrategy propertyNamingStrategy,\n-            TypeFactory typeFactory, HandlerInstantiator handlerInstantiator,\n-            Map<ClassKey,Class<?>> mixins)\n-    {\n-        super(intr, annIntr, vc, subtypeResolver, propertyNamingStrategy, typeFactory, handlerInstantiator,\n-                collectFeatureDefaults(DeserializationConfig.Feature.class),\n-                mixins);\n+    public DeserializationConfig(BaseSettings base,\n+            int defaultFeatures, SubtypeResolver str, Map<ClassKey,Class<?>> mixins)\n+    {\n+        super(base, defaultFeatures, null, mixins);\n         _nodeFactory = JsonNodeFactory.instance;\n     }\n     \n-    protected DeserializationConfig(DeserializationConfig src) {\n+    private DeserializationConfig(DeserializationConfig src) {\n         this(src, src._base);\n     }\n \n         _sortPropertiesAlphabetically = src._sortPropertiesAlphabetically;\n     }\n     \n-    protected DeserializationConfig(DeserializationConfig src, BaseSettings base)\n+    private DeserializationConfig(DeserializationConfig src, BaseSettings base)\n     {\n         super(src, base, src._subtypeResolver, src._featureFlags);\n         _problemHandlers = src._problemHandlers;\n         _sortPropertiesAlphabetically = src._sortPropertiesAlphabetically;\n     }\n     \n-    protected DeserializationConfig(DeserializationConfig src, JsonNodeFactory f)\n+    private DeserializationConfig(DeserializationConfig src, JsonNodeFactory f)\n     {\n         super(src);\n         _problemHandlers = src._problemHandlers;\n         _sortPropertiesAlphabetically = src._sortPropertiesAlphabetically;\n     }\n \n-    protected DeserializationConfig(DeserializationConfig src, int featureFlags)\n+    private DeserializationConfig(DeserializationConfig src, int featureFlags)\n     {\n         super(src, featureFlags);\n         _problemHandlers = src._problemHandlers;\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.core.type.ResolvedType;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.core.util.*;\n+import com.fasterxml.jackson.databind.cfg.BaseSettings;\n+import com.fasterxml.jackson.databind.cfg.ConfigFeature;\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.type.SimpleType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.type.TypeModifier;\n+import com.fasterxml.jackson.databind.util.StdDateFormat;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n /**\n     protected final static AnnotationIntrospector DEFAULT_ANNOTATION_INTROSPECTOR = new JacksonAnnotationIntrospector();\n \n     protected final static VisibilityChecker<?> STD_VISIBILITY_CHECKER = VisibilityChecker.Std.defaultInstance();\n+\n+    /**\n+     * This is the default {@link DateFormat} used unless overridden by\n+     * custom implementation.\n+     */\n+    protected final static DateFormat DEFAULT_DATE_FORMAT = StdDateFormat.instance;\n     \n     /*\n     /**********************************************************\n         // and default type factory is shared one\n         _typeFactory = TypeFactory.defaultInstance();\n         _serializationConfig = (sconfig != null) ? sconfig :\n-            new SerializationConfig(DEFAULT_INTROSPECTOR, DEFAULT_ANNOTATION_INTROSPECTOR, STD_VISIBILITY_CHECKER,\n-                    null, null, _typeFactory, null, _mixInAnnotations);\n+            new SerializationConfig(DEFAULT_BASE, collectFeatureDefaults(SerializationConfig.Feature.class),\n+                    null, _mixInAnnotations);\n         _deserializationConfig = (dconfig != null) ? dconfig :\n-            new DeserializationConfig(DEFAULT_INTROSPECTOR, DEFAULT_ANNOTATION_INTROSPECTOR, STD_VISIBILITY_CHECKER,\n-                    null, null, _typeFactory, null, _mixInAnnotations);\n+            new DeserializationConfig(DEFAULT_BASE, collectFeatureDefaults(DeserializationConfig.Feature.class),\n+                    null, _mixInAnnotations);\n         _serializerProvider = (sp == null) ? new StdSerializerProvider.Impl() : sp;\n         _deserializerProvider = (dp == null) ? new StdDeserializerProvider() : dp;\n \n         // Default serializer factory is stateless, can just assign\n         _serializerFactory = BeanSerializerFactory.instance;\n+    }\n+\n+    /*\n+    public BaseSettings(ClassIntrospector<? extends BeanDescription> ci, AnnotationIntrospector ai,\n+            VisibilityChecker<?> vc, PropertyNamingStrategy pns, TypeFactory tf,\n+            TypeResolverBuilder<?> typer, DateFormat dateFormat, HandlerInstantiator hi)\n+     */\n+    protected final static BaseSettings DEFAULT_BASE = new BaseSettings(DEFAULT_INTROSPECTOR,\n+            DEFAULT_ANNOTATION_INTROSPECTOR, STD_VISIBILITY_CHECKER, null, TypeFactory.defaultInstance(),\n+            null, DEFAULT_DATE_FORMAT, null);\n+\n+    /**\n+     * Method that calculates bit set (flags) of all features that\n+     * are enabled by default.\n+     */\n+    protected static <F extends Enum<F> & ConfigFeature> int collectFeatureDefaults(Class<F> enumClass)\n+    {\n+        int flags = 0;\n+        for (F value : enumClass.getEnumConstants()) {\n+            if (value.enabledByDefault()) {\n+                flags |= value.getMask();\n+            }\n+        }\n+        return flags;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.cfg.BaseSettings;\n-import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.cfg.ConfigFeature;\n import com.fasterxml.jackson.databind.cfg.MapperConfigBase;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n      * Trying enable/disable ObjectMapper-only feature will result in\n      * an {@link IllegalArgumentException}.\n      */\n-    public enum Feature implements MapperConfig.ConfigFeature\n+    public enum Feature implements ConfigFeature\n     {\n         /*\n         /******************************************************\n     /**\n      * Constructor used by ObjectMapper to create default configuration object instance.\n      */\n-    public SerializationConfig(ClassIntrospector<? extends BeanDescription> intr,\n-            AnnotationIntrospector annIntr, VisibilityChecker<?> vc,\n-            SubtypeResolver subtypeResolver, PropertyNamingStrategy propertyNamingStrategy,\n-            TypeFactory typeFactory, HandlerInstantiator handlerInstantiator,\n-            Map<ClassKey,Class<?>> mixins)\n-\n-    {\n-        super(intr, annIntr, vc, subtypeResolver, propertyNamingStrategy, typeFactory, handlerInstantiator,\n-                collectFeatureDefaults(SerializationConfig.Feature.class),\n-                mixins);\n+    public SerializationConfig(BaseSettings base,\n+            int defaultFeatures, SubtypeResolver str, Map<ClassKey,Class<?>> mixins)\n+    {\n+        super(base, defaultFeatures, null, mixins);\n         _filterProvider = null;\n     }\n     \n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/ConfigFeature.java\n+package com.fasterxml.jackson.databind.cfg;\n+\n+/**\n+ * Interface that actual Feature enumerations used by\n+ * {@link MapperConfig} implementations must implement.\n+ * Necessary since enums can not be extended using normal\n+ * inheritance, but can implement interfaces\n+ */\n+public interface ConfigFeature\n+{\n+    /**\n+     * Accessor for checking whether this feature is enabled by default.\n+     */\n+    public boolean enabledByDefault();\n+\n+    /**\n+     * Accessor for checking whether feature can be used on per-call basis\n+     * (true), or not (false): in latter case it can only be configured once\n+     * before any serialization or deserialization.\n+     */\n+    public boolean canUseForInstance();\n+    \n+    /**\n+     * Returns bit mask for this feature instance\n+     */\n+    public int getMask();\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n import com.fasterxml.jackson.databind.type.TypeBindings;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n-import com.fasterxml.jackson.databind.util.StdDateFormat;\n \n /**\n  * Interface that defines functionality accessible through both\n  * accessors to mode-independent configuration settings\n  * and such.\n  *<p>\n- * As of version 1.9, the goal is to make this class eventually immutable.\n- * Because of this, existing methods that allow changing state of this\n- * instance are deprecated in favor of methods that create new instances\n- * with different configuration (\"fluent factories\").\n- * One major remaining issue is that of handling mix-in annotations, which\n- * still represent a bit of mutable state; may need to implement a\n- * functional-style immutable map for storing those.\n+ * Small part of implementation is included here by aggregating\n+ * {@link BaseSettings} instance that contains configuration\n+ * that is shared between different types of instances.\n  */\n public abstract class MapperConfig<T extends MapperConfig<T>>\n     implements ClassIntrospector.MixInResolver\n {\n     /*\n     /**********************************************************\n-    /* Constants, default values\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * This is the default {@link DateFormat} used unless overridden by\n-     * custom implementation.\n-     */\n-    protected final static DateFormat DEFAULT_DATE_FORMAT = StdDateFormat.instance;\n-\n-    /*\n-    /**********************************************************\n     /* Simple immutable basic settings\n     /**********************************************************\n      */\n     /* Life-cycle: constructors\n     /**********************************************************\n      */\n-\n-    protected MapperConfig(ClassIntrospector<? extends BeanDescription> ci, AnnotationIntrospector ai,\n-            VisibilityChecker<?> vc, PropertyNamingStrategy pns, TypeFactory tf,\n-            HandlerInstantiator hi)\n-    {\n-        _base = new BaseSettings(ci, ai, vc, pns, tf, null, DEFAULT_DATE_FORMAT, hi);\n-    }\n \n     protected MapperConfig(BaseSettings base)\n     {\n         }\n         return (TypeIdResolver) ClassUtil.createInstance(resolverClass, canOverrideAccessModifiers());\n     }\n-\n-    /*\n-    /**********************************************************\n-    /* Helper interface used with simple on/off features\n-    /**********************************************************\n-     */\n-    \n-    /**\n-     * Interface that actual Feature enumerations used by\n-     * {@link MapperConfig} implementations must implement.\n-     * Necessary since enums can not be extended using normal\n-     * inheritance, but can implement interfaces\n-     */\n-    public interface ConfigFeature\n-    {\n-        /**\n-         * Accessor for checking whether this feature is enabled by default.\n-         */\n-        public boolean enabledByDefault();\n-\n-        /**\n-         * Accessor for checking whether feature can be used on per-call basis\n-         * (true), or not (false): in latter case it can only be configured once\n-         * before any serialization or deserialization.\n-         */\n-        public boolean canUseForInstance();\n-        \n-        /**\n-         * Returns bit mask for this feature instance\n-         */\n-        public int getMask();\n-    }\n }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n \n import java.util.Map;\n \n-import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n-import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n import com.fasterxml.jackson.databind.type.ClassKey;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n \n-public abstract class MapperConfigBase<CFG extends MapperConfig.ConfigFeature,\n+public abstract class MapperConfigBase<CFG extends ConfigFeature,\n     T extends MapperConfigBase<CFG,T>>\n     extends MapperConfig<T>\n {\n     /**********************************************************\n      */\n     \n+    /*\n     protected MapperConfigBase(ClassIntrospector<? extends BeanDescription> ci, AnnotationIntrospector ai,\n             VisibilityChecker<?> vc, SubtypeResolver str, PropertyNamingStrategy pns, TypeFactory tf,\n             HandlerInstantiator hi,\n             int defaultFeatures, Map<ClassKey,Class<?>> mixins)\n     {\n-        super(ci, ai, vc, pns, tf, hi);\n+        super(new BaseSettings(ci, ai, vc, pns, tf, null, DEFAULT_DATE_FORMAT, hi));\n+        _featureFlags = defaultFeatures;\n+        _mixInAnnotations = mixins;\n+        _subtypeResolver = str;\n+    }\n+    */\n+\n+    protected MapperConfigBase(BaseSettings base,\n+            int defaultFeatures, SubtypeResolver str, Map<ClassKey,Class<?>> mixins)\n+    {\n+        super(base);\n         _featureFlags = defaultFeatures;\n         _mixInAnnotations = mixins;\n         _subtypeResolver = str;\n         _featureFlags = features;\n         _mixInAnnotations = src._mixInAnnotations;\n         _subtypeResolver = str;\n-    }\n-    \n-    /**\n-     * Method that calculates bit set (flags) of all features that\n-     * are enabled by default.\n-     */\n-    protected static <F extends Enum<F> & MapperConfig.ConfigFeature> int collectFeatureDefaults(Class<F> enumClass)\n-    {\n-        int flags = 0;\n-        for (F value : enumClass.getEnumConstants()) {\n-            if (value.enabledByDefault()) {\n-                flags |= value.getMask();\n-            }\n-        }\n-        return flags;\n     }\n     \n     /*", "timestamp": 1326952556, "metainfo": ""}