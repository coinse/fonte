{"sha": "32966849408561825efb2893830e856fd4727ecd", "log": "Doing some work to maybe solve #265 eventually", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.EnumResolver;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n \n /**\n  * Abstract factory base class that can provide deserializers for standard\n     private final static Class<?> CLASS_STRING = String.class;\n     private final static Class<?> CLASS_CHAR_BUFFER = CharSequence.class;\n     private final static Class<?> CLASS_ITERABLE = Iterable.class;\n+\n+    /**\n+     * We need a placeholder for creator properties that don't have name\n+     * but are marked with `@JsonWrapped` annotation.\n+     */\n+    protected final static String UNWRAPPED_CREATOR_PARAM_NAME = new String(\"@JsonUnwrapped\");\n     \n     /**\n      * Also special array deserializers for primitive array types.\n                 } else if (injectId != null) {\n                     ++injectCount;\n                     properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n-                } else if (nonAnnotatedParam == null) {\n-                    nonAnnotatedParam = param;\n+                } else {\n+                    NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);\n+                    if (unwrapper != null) {\n+                        properties[i] = constructCreatorProperty(ctxt, beanDesc,\n+                                UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n+                        ++namedCount;\n+                    } else {\n+                        if (nonAnnotatedParam == null) {\n+                            nonAnnotatedParam = param;\n+                        }\n+                    }\n                 }\n             }\n \n                 } else if (injectId != null) {\n                     ++injectCount;\n                     properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);\n-                } else if (nonAnnotatedParam == null) {\n-                    nonAnnotatedParam = param;\n+                } else {\n+                    NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);\n+                    if (unwrapper != null) {\n+                        properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);\n+                        ++namedCount;\n+                    } else {\n+                        if (nonAnnotatedParam == null) {\n+                            nonAnnotatedParam = param;\n+                        }\n+                    }\n                 }\n             }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/exc/UnrecognizedPropertyException.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/exc/UnrecognizedPropertyException.java\n                 sb.append(\" (\").append(len).append(\" known properties: \");\n                 Iterator<Object> it = _propertyIds.iterator();\n                 while (it.hasNext()) {\n-                    sb.append(\", \\\"\");\n+                    sb.append('\"');\n                     sb.append(String.valueOf(it.next()));\n                     sb.append('\"');\n                     // one other thing: limit max length\n                     if (sb.length() > MAX_DESC_LENGTH) {\n                         sb.append(\" [truncated]\");\n                         break;\n+                    }\n+                    if (it.hasNext()) {\n+                        sb.append(\", \");\n                     }\n                 }\n             }\n--- a/src/test/java/com/fasterxml/jackson/failing/TestObjectIdSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestObjectIdSerialization.java\n import java.util.Set;\n \n /**\n- * Tests for github ussues #138\n+ * Tests for github issues #138\n  * https://github.com/FasterXML/jackson-databind/issues/138\n  */\n public class TestObjectIdSerialization extends BaseMapTest {\n         public int id;\n \n         @JsonIdentityReference(alwaysAsId = true)\n-        // NOTE: uncommenting this makes test pass:\n-//        @com.fasterxml.jackson.databind.annotation.JsonSerialize(contentAs = Obj.class)\n         public Set<Obj> objs = new LinkedHashSet<Obj>();\n \n         public SetContainer() { }\n--- a/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithCreator.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithCreator.java\n \n public class TestUnwrappedWithCreator extends BaseMapTest\n {\n-    class JAddress {\n+    static class JAddress {\n         private String address;\n         private String city;\n         private String state;\n          \n         @JsonCreator\n         public JAddress(\n-                @JsonProperty(\"address1\") String address,\n+                @JsonProperty(\"address\") String address,\n                 @JsonProperty(\"city\") String city,\n                 @JsonProperty(\"state\") String state\n         ){\n         public String getState() { return state; }\n     }\n \n-    class JPerson {\n-        private String name;\n-        private JAddress address;\n-        private String alias;\n+    static class JPerson {\n+        private String _name;\n+        private JAddress _address;\n+        private String _alias;\n          \n         @JsonCreator\n         public JPerson(\n         @JsonUnwrapped JAddress address,\n         @JsonProperty(\"alias\") String alias\n         ) {\n-            this.name = name;\n-            this.address = address;\n-            this.alias = alias;\n+            _name = name;\n+            _address = address;\n+            _alias = alias;\n         }\n          \n         public String getName() {\n-            return name;\n+            return _name;\n         }\n          \n         @JsonUnwrapped public JAddress getAddress() {\n-            return address;\n+            return _address;\n         }\n          \n-        public String getAlias() {\n-            return alias;\n-        }\n+        public String getAlias() { return _alias; }\n     }\n          \n     public void testReadWriteJson() throws Exception\n     {\n-        JPerson person = new JPerson(\"MyName\", new JAddress(\"main street\", \"springfield\", null), null);\n+        JPerson person = new JPerson(\"MyName\", new JAddress(\"main street\", \"springfield\", \"WA\"), \"bubba\");\n         ObjectMapper mapper = new ObjectMapper();\n         String json = mapper.writeValueAsString(person);\n-        System.out.println(json);\n-        JPerson obj = mapper.readValue(json, JPerson.class);\n-        assertNotNull(obj);\n+        JPerson result = mapper.readValue(json, JPerson.class);\n+        assertNotNull(result);\n+        assertEquals(person._name, result._name);\n+        assertNotNull(result._address);\n+        assertEquals(person._address.city, result._address.city);\n+\n+        // and see that round-tripping works\n+        assertEquals(json, mapper.writeValueAsString(result));\n     }\n }", "timestamp": 1374032762, "metainfo": ""}