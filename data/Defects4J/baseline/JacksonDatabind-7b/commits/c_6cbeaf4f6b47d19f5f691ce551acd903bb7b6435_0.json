{"sha": "6cbeaf4f6b47d19f5f691ce551acd903bb7b6435", "log": "Reworked unit test to avoid some duplication.", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n         assertSame(result.node, result.node.next.node);\n     }\n \n-    public void testLateForwardReferenceInCollection() throws Exception\n+    public void testForwardReference()\n+        throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":[\"\n+                      + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":2,\\\"reports\\\":[]},\"\n+                      + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":null,\\\"reports\\\":[1]}\"\n+                      + \"]}\";\n+        Company company = mapper.readValue(json, Company.class);\n+        assertEquals(2, company.employees.size());\n+        Employee firstEmployee = company.employees.get(0);\n+        Employee secondEmployee = company.employees.get(1);\n+        assertEquals(1, firstEmployee.id);\n+        assertEquals(2, secondEmployee.id);\n+        assertEquals(secondEmployee, firstEmployee.manager); // Ensure that forward reference was properly resolved.\n+        assertEquals(firstEmployee, secondEmployee.reports.get(0)); // And that back reference is also properly resolved.\n+    }\n+\n+    public void testForwardReferenceInCollection()\n+        throws Exception\n     {\n         String json = \"{\\\"employees\\\":[\"\n                       + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n                       + \"]}\";\n         Company company = mapper.readValue(json, Company.class);\n         assertEquals(2, company.employees.size());\n-        // Deser must keep object ordering.\n         Employee firstEmployee = company.employees.get(0);\n         Employee secondEmployee = company.employees.get(1);\n-        assertEquals(1, firstEmployee.id);\n-        assertEquals(2, secondEmployee.id);\n-        assertSame(secondEmployee, firstEmployee.reports.get(0)); // Ensure that forward reference was properly resolved and in order.\n-        assertSame(firstEmployee, secondEmployee.manager); // And that back reference is also properly resolved.\n-    }\n-\n-    // Variant of before but forward reference is not \"wrapped\" inside a collection, might be easier to fix first.\n-    public void testLateForwardReference() throws Exception\n-    {\n-        String json = \"{\\\"employees\\\":[\"\n-                      + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":2,\\\"reports\\\":[]},\"\n-                      + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":null,\\\"reports\\\":[1]}\"\n-                      + \"]}\";\n-        Company company = mapper.readValue(json, Company.class);\n-        assertEquals(2, company.employees.size());\n-        // Deser must keep object ordering.\n-        Employee firstEmployee = company.employees.get(0);\n-        Employee secondEmployee = company.employees.get(1);\n-        assertEquals(1, firstEmployee.id);\n-        assertEquals(2, secondEmployee.id);\n-        assertEquals(secondEmployee, firstEmployee.manager); // Ensure that forward reference was properly resolved.\n-        assertEquals(firstEmployee, secondEmployee.reports.get(0)); // And that back reference is also properly resolved.\n-    }\n-\n-    public void testLateForwardReferenceInMap() throws Exception\n+        assertEmployees(firstEmployee, secondEmployee);\n+    }\n+\n+    public void testForwardReferenceInMap()\n+        throws Exception\n     {\n         String json = \"{\\\"employees\\\":{\"\n-                      + \"\\\"1\\\":{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":2,\\\"reports\\\":[]},\"\n+                      + \"\\\"1\\\":{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n                       + \"\\\"2\\\": 2,\"\n-                      + \"\\\"3\\\":{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":null,\\\"reports\\\":[1]}\"\n+                      + \"\\\"3\\\":{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n                       + \"}}\";\n         MappedCompany company = mapper.readValue(json, MappedCompany.class);\n         assertEquals(3, company.employees.size());\n-        // Deser must keep object ordering.\n         Employee firstEmployee = company.employees.get(1);\n         Employee secondEmployee = company.employees.get(3);\n-        assertEquals(1, firstEmployee.id);\n-        assertEquals(2, secondEmployee.id);\n-        assertEquals(secondEmployee, firstEmployee.manager); // Ensure that forward reference was properly resolved.\n-        assertEquals(firstEmployee, secondEmployee.reports.get(0)); // And that back reference is also properly resolved.\n-    }\n-\n-    public void testLateForwardReferenceInArray() throws Exception {\n+        assertEmployees(firstEmployee, secondEmployee);\n+    }\n+\n+    public void testForwardReferenceInArray()\n+        throws Exception\n+    {\n         String json = \"{\\\"employees\\\":[\"\n                       + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n-                      + \"2,{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n+                      + \"2,\"\n+                      +\"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n                       + \"]}\";\n         ArrayCompany company = mapper.readValue(json, ArrayCompany.class);\n         assertEquals(3, company.employees.length);\n-        // Deser must keep object ordering.\n         Employee firstEmployee = company.employees[0];\n         Employee secondEmployee = company.employees[1];\n+        assertEmployees(firstEmployee, secondEmployee);\n+    }\n+\n+    private void assertEmployees(Employee firstEmployee, Employee secondEmployee)\n+    {\n         assertEquals(1, firstEmployee.id);\n         assertEquals(2, secondEmployee.id);\n         assertSame(secondEmployee, firstEmployee.reports.get(0)); // Ensure that forward reference was properly resolved and in order.\n         throws Exception\n     {\n         String json = \"{\\\"employees\\\":[2,1,\"\n-                + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":2,\\\"reports\\\":[]},\"\n-                + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":null,\\\"reports\\\":[1]}\"\n+                + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n                 + \"]}\";\n         Company company = mapper.readValue(json, Company.class);\n         assertEquals(4, company.employees.size());\n         // Deser must keep object ordering.\n         Employee firstEmployee = company.employees.get(1);\n         Employee secondEmployee = company.employees.get(0);\n-        assertEquals(1, firstEmployee.id);\n-        assertEquals(2, secondEmployee.id);\n-        assertEquals(secondEmployee, firstEmployee.manager); // Ensure that forward reference was properly resolved.\n-        assertEquals(firstEmployee, secondEmployee.reports.get(0)); // And that back reference is also properly resolved.\n+        assertSame(firstEmployee, company.employees.get(2));\n+        assertSame(secondEmployee, company.employees.get(3));\n+        assertEmployees(firstEmployee, secondEmployee);\n     }\n \n     public void testKeepMapOrdering()\n     {\n         String json = \"{\\\"employees\\\":{\"\n                       + \"\\\"1\\\":2, \\\"2\\\":1,\"\n-                      + \"\\\"3\\\":{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":2,\\\"reports\\\":[]},\"\n-                      + \"\\\"4\\\":{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":null,\\\"reports\\\":[1]}\"\n+                      + \"\\\"3\\\":{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                      + \"\\\"4\\\":{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n                       + \"}}\";\n         MappedCompany company = mapper.readValue(json, MappedCompany.class);\n         assertEquals(4, company.employees.size());\n         Employee firstEmployee = company.employees.get(2);\n         Employee secondEmployee = company.employees.get(1);\n-        assertEquals(1, firstEmployee.id);\n-        assertEquals(2, secondEmployee.id);\n-        assertEquals(secondEmployee, firstEmployee.manager); // Ensure that forward reference was properly resolved.\n-        assertEquals(firstEmployee, secondEmployee.reports.get(0)); // And that back reference is also properly resolved.\n-        // Deser must keep object ordering. Not sure if it's really important for maps, but...\n+        assertEmployees(firstEmployee, secondEmployee);\n+        // Deser must keep object ordering. Not sure if it's really important for maps,\n+        // but since default map is LinkedHashMap might as well ensure it does...\n         Iterator<Entry<Integer,Employee>> iterator = company.employees.entrySet().iterator();\n-        assertEquals(secondEmployee, iterator.next().getValue());\n-        assertEquals(firstEmployee, iterator.next().getValue());\n-        assertEquals(firstEmployee, iterator.next().getValue());\n-        assertEquals(secondEmployee, iterator.next().getValue());\n+        assertSame(secondEmployee, iterator.next().getValue());\n+        assertSame(firstEmployee, iterator.next().getValue());\n+        assertSame(firstEmployee, iterator.next().getValue());\n+        assertSame(secondEmployee, iterator.next().getValue());\n     }\n \n     /*", "timestamp": 1389625653, "metainfo": ""}