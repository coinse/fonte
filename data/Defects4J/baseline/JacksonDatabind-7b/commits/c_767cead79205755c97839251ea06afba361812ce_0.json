{"sha": "767cead79205755c97839251ea06afba361812ce", "log": "Roll back changes to JSON Schema generation (pull #38), since it causes Public API breakage, can't do for minor version", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n             default:\n                 value = deserializeAny(jp, ctxt, nodeFactory);\n             }\n-            JsonNode old = node.put(fieldName, value);\n+            JsonNode old = node.replace(fieldName, value);\n             if (old != null) {\n                 _handleDuplicateField(fieldName, node, old, value);\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n      * Method for removing an entry from this ArrayNode.\n      * Will return value of the entry at specified index, if entry existed;\n      * null if not.\n+     * \n+     * @return Node removed, if any; null if none\n      */\n     public JsonNode remove(int index)\n     {\n         return null;\n     }\n \n+    /**\n+     * Method for removing all elements of this array, leaving the\n+     * array empty.\n+     * \n+     * @return This node (to allow chaining)\n+     */\n     @Override\n     public ArrayNode removeAll()\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n \n     /*\n     /**********************************************************\n-    /* Extended ObjectNode API, mutators, generic\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Method that will set specified field, replacing old value,\n-     * if any.\n+    /* Extended ObjectNode API, mutators, since 2.1\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method that will set specified field, replacing old value, if any.\n+     * Note that this is identical to {@link #replace(String, JsonNode)},\n+     * except for return value.\n+     *<p>\n+     * NOTE: added to replace those uses of {@link #put(String, JsonNode)}\n+     * where chaining with 'this' is desired.\n      *\n      * @param value to set field to; if null, will be converted\n      *   to a {@link NullNode} first  (to remove field entry, call\n      *   {@link #remove} instead)\n      *\n-     * @return Old value of the field, if any; null if there was no\n-     *   old value.\n-     */\n-    public JsonNode put(String fieldName, JsonNode value)\n-    {\n-        if (value == null) { // let's not store 'raw' nulls but nodes\n+     * @return This node after adding/replacing property value (to allow chaining)\n+     *\n+     * @since 2.1\n+     */\n+    public JsonNode set(String fieldName, JsonNode value)\n+    {\n+        if (value == null) {\n             value = nullNode();\n         }\n-        return _put(fieldName, value);\n-    }\n-\n-    /**\n-     * Method for removing field entry from this ObjectNode.\n-     * Will return value of the field, if such field existed;\n-     * null if not.\n-     * \n-     * @return Value of specified field, if it existed; null if not\n-     */\n-    public JsonNode remove(String fieldName)\n-    {\n-        if (_children != null) {\n-            return _children.remove(fieldName);\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Method for removing specified field properties out of\n-     * this ObjectNode.\n-     * \n-     * @param fieldNames Names of fields to remove\n-     * \n-     * @return This ObjectNode after removing entries\n-     */\n-    public ObjectNode remove(Collection<String> fieldNames)\n-    {\n-        if (_children != null) {\n-            for (String fieldName : fieldNames) {\n-                _children.remove(fieldName);\n-            }\n-        }\n-        return this;\n-    }\n-    \n-    /**\n-     * Method for removing all field properties, such that this\n-     * ObjectNode will contain no properties after call.\n-     * \n-     * @return This ObjectNode after removing all entries\n-     */\n-    @Override\n-    public ObjectNode removeAll()\n-    {\n-        _children = null;\n+        _put(fieldName, value);\n         return this;\n     }\n \n      * \n      * @param properties Properties to add\n      * \n-     * @return This node (to allow chaining)\n-     */\n-    public JsonNode putAll(Map<String,JsonNode> properties)\n+     * @return This node after adding/replacing property values (to allow chaining)\n+     *\n+     * @since 2.1\n+     */\n+    public JsonNode setAll(Map<String,JsonNode> properties)\n     {\n         if (_children == null) {\n             _children = new LinkedHashMap<String, JsonNode>(properties);\n      * any existing values for those properties.\n      * \n      * @param other Object of which properties to add to this object\n-     * \n-     * @return This node (to allow chaining)\n-     */\n-    public JsonNode putAll(ObjectNode other)\n+     *\n+     * @return This node after addition (to allow chaining)\n+     *\n+     * @since 2.1\n+     */\n+    public JsonNode setAll(ObjectNode other)\n     {\n         int len = other.size();\n         if (len > 0) {\n         }\n         return this;\n     }\n+    \n+    /**\n+     * Method for replacing value of specific property with passed\n+     * value, and returning value (or null if none).\n+     *\n+     * @param fieldName Property of which value to replace\n+     * @param value Value to set property to, replacing old value if any\n+     * \n+     * @return Old value of the property; null if there was no such property\n+     *   with value\n+     * \n+     * @since 2.1\n+     */\n+    public JsonNode replace(String fieldName, JsonNode value)\n+    {\n+        if (value == null) { // let's not store 'raw' nulls but nodes\n+            value = nullNode();\n+        }\n+        return _put(fieldName, value);\n+    }\n+\n+    /**\n+     * Method for removing field entry from this ObjectNode, and\n+     * returning instance after removal.\n+     * \n+     * @return This node after removing entry (if any)\n+     * \n+     * @since 2.1\n+     */\n+    public JsonNode without(String fieldName)\n+    {\n+        if (_children != null) {\n+            _children.remove(fieldName);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Method for removing specified field properties out of\n+     * this ObjectNode.\n+     * \n+     * @param fieldNames Names of fields to remove\n+     * \n+     * @return This node after removing entries\n+     * \n+     * @since 2.1\n+     */\n+    public ObjectNode without(Collection<String> fieldNames)\n+    {\n+        if (_children != null) {\n+            for (String fieldName : fieldNames) {\n+                _children.remove(fieldName);\n+            }\n+        }\n+        return this;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Extended ObjectNode API, mutators, generic\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Method that will set specified field, replacing old value, if any.\n+     *\n+     * @param value to set field to; if null, will be converted\n+     *   to a {@link NullNode} first  (to remove field entry, call\n+     *   {@link #remove} instead)\n+     *<p>\n+     * NOTE: this method will be <b>deprecated</b> in 2.2; and should\n+     * be replace with either\n+     * {@link #set(String,JsonNode)} or {@link #replace(String,JsonNode)},\n+     * depending on which return value is desired for possible chaining.\n+     *   \n+     * @return Old value of the field, if any; null if there was no\n+     *   old value.\n+     */\n+    public JsonNode put(String fieldName, JsonNode value)\n+    {\n+        if (value == null) { // let's not store 'raw' nulls but nodes\n+            value = nullNode();\n+        }\n+        return _put(fieldName, value);\n+    }\n+    \n+    /**\n+     * Method for removing field entry from this ObjectNode.\n+     * Will return value of the field, if such field existed;\n+     * null if not.\n+     * \n+     * @return Value of specified field, if it existed; null if not\n+     */\n+    public JsonNode remove(String fieldName)\n+    {\n+        if (_children != null) {\n+            return _children.remove(fieldName);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Method for removing specified field properties out of\n+     * this ObjectNode.\n+     * \n+     * @param fieldNames Names of fields to remove\n+     * \n+     * @return This node after removing entries\n+     */\n+    public ObjectNode remove(Collection<String> fieldNames)\n+    {\n+        if (_children != null) {\n+            for (String fieldName : fieldNames) {\n+                _children.remove(fieldName);\n+            }\n+        }\n+        return this;\n+    }\n+    \n+    /**\n+     * Method for removing all field properties, such that this\n+     * ObjectNode will contain no properties after call.\n+     * \n+     * @return This node after removing all entries\n+     */\n+    @Override\n+    public ObjectNode removeAll()\n+    {\n+        _children = null;\n+        return this;\n+    }\n+\n+    /**\n+     * Method for adding given properties to this object node, overriding\n+     * any existing values for those properties.\n+     *<p>\n+     * NOTE: this method will be <b>deprecated</b> in 2.2; and should\n+     * be replace with {@link #setAll(Map)}.\n+     * \n+     * @param properties Properties to add\n+     * \n+     * @return This node after adding/replacing property values (to allow chaining)\n+     */\n+    public JsonNode putAll(Map<String,JsonNode> properties) {\n+        return setAll(properties);\n+    }\n+\n+    /**\n+     * Method for adding all properties of the given Object, overriding\n+     * any existing values for those properties.\n+     *<p>\n+     * NOTE: this method will be <b>deprecated</b> in 2.2; and should\n+     * be replace with {@link #setAll(ObjectNode)}.\n+     * \n+     * @param other Object of which properties to add to this object\n+     * \n+     * @return This node (to allow chaining)\n+     */\n+    public JsonNode putAll(ObjectNode other) {\n+        return setAll(other);\n+    }\n \n     /**\n      * Method for removing all field properties out of this ObjectNode\n      * \n      * @param fieldNames Fields to <b>retain</b> in this ObjectNode\n      * \n-     * @return This ObjectNode (to allow call chaining)\n+     * @return This node (to allow call chaining)\n      */\n     public ObjectNode retain(Collection<String> fieldNames)\n     {\n      * \n      * @param fieldNames Fields to <b>retain</b> in this ObjectNode\n      * \n-     * @return This ObjectNode (to allow call chaining)\n+     * @return This node (to allow call chaining)\n      */\n     public ObjectNode retain(String... fieldNames) {\n         return retain(Arrays.asList(fieldNames));\n     }\n \n     /**\n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode putPOJO(String fieldName, Object pojo) {\n         _put(fieldName, POJONode(pojo));\n     }\n \n     /**\n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode putNull(String fieldName)\n     {\n     /**\n      * Method for setting value of a field to specified numeric value.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, int v) {\n         _put(fieldName, numberNode(v));\n      * Alternative method that we need to avoid bumping into NPE issues\n      * with auto-unboxing.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, Integer value) {\n         if (value == null) {\n     /**\n      * Method for setting value of a field to specified numeric value.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, long v) {\n         _put(fieldName, numberNode(v));\n      * Alternative method that we need to avoid bumping into NPE issues\n      * with auto-unboxing.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, Long value) {\n         if (value == null) {\n     /**\n      * Method for setting value of a field to specified numeric value.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, float v) {\n         _put(fieldName, numberNode(v));\n      * Alternative method that we need to avoid bumping into NPE issues\n      * with auto-unboxing.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, Float value) {\n         if (value == null) {\n     /**\n      * Method for setting value of a field to specified numeric value.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, double v) {\n         _put(fieldName, numberNode(v));\n      * Alternative method that we need to avoid bumping into NPE issues\n      * with auto-unboxing.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, Double value) {\n         if (value == null) {\n     /**\n      * Method for setting value of a field to specified numeric value.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, BigDecimal v) {\n         if (v == null) {\n     /**\n      * Method for setting value of a field to specified String value.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, String v) {\n         if (v == null) {\n     /**\n      * Method for setting value of a field to specified String value.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, boolean v) {\n         _put(fieldName, booleanNode(v));\n      * Alternative method that we need to avoid bumping into NPE issues\n      * with auto-unboxing.\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, Boolean value) {\n         if (value == null) {\n     /**\n      * Method for setting value of a field to specified binary value\n      * \n-     * @return This <code>ObjectNode</code>\n+     * @return This node (to allow chaining)\n      */\n     public ObjectNode put(String fieldName, byte[] v) {\n         if (v == null) {\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n         assertTrue(n.path(\"a\").isMissingNode());\n \n         TextNode text = TextNode.valueOf(\"x\");\n-        n.put(\"a\", text);\n+        n.set(\"a\", text);\n         assertEquals(1, n.size());\n         assertTrue(n.elements().hasNext());\n         assertTrue(n.fields().hasNext());\n         ObjectNode n2 = new ObjectNode(JsonNodeFactory.instance);\n         n2.put(\"b\", 13);\n         assertFalse(n.equals(n2));\n-        n.putAll(n2);\n+        n.setAll(n2);\n         assertEquals(2, n.size());\n-        n.put(\"null\", (JsonNode)null);\n+        n.set(\"null\", (JsonNode)null);\n         assertEquals(3, n.size());\n         // should replace, not add\n         n.put(\"null\", \"notReallNull\");\n \n         Map<String,JsonNode> nodes = new HashMap<String,JsonNode>();\n         nodes.put(\"d\", text);\n-        n.putAll(nodes);\n+        n.setAll(nodes);\n         assertEquals(3, n.size());\n \n         n.removeAll();\n         ObjectNode o1 = JsonNodeFactory.instance.objectNode();\n         ObjectNode o2 = JsonNodeFactory.instance.objectNode();\n         // used to throw NPE before fix:\n-        o1.putAll(o2);\n+        o1.setAll(o2);\n         assertEquals(0, o1.size());\n         assertEquals(0, o2.size());\n \n         // also: nulls should be converted to NullNodes...\n-        o1.put(\"x\", (ObjectNode) null);\n+        o1.set(\"x\", null);\n         JsonNode n = o1.get(\"x\");\n         assertNotNull(n);\n         assertSame(n, NullNode.instance);\n         ObjectNode src = mapper.createObjectNode();\n         ObjectNode dest = mapper.createObjectNode();\n         src.put(\"a\", \"b\");\n-        dest.putAll(src);\n+        dest.setAll(src);\n     }\n \n     public void testRemove()\n         ob.put(\"b\", \"b\");\n         ob.put(\"c\", \"c\");\n         assertEquals(3, ob.size());\n-        assertSame(ob, ob.remove(Arrays.asList(\"a\", \"c\")));\n+        assertSame(ob, ob.without(Arrays.asList(\"a\", \"c\")));\n         assertEquals(1, ob.size());\n         assertEquals(\"b\", ob.get(\"b\").textValue());\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestTreeDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeDeserialization.java\n         assertTrue(n1.equals(n2));\n         assertTrue(n2.equals(n1));\n \n-        n1.put(\"x\", TextNode.valueOf(\"Test\"));\n+        n1.set(\"x\", TextNode.valueOf(\"Test\"));\n \n         assertFalse(n1.equals(n2));\n         assertFalse(n2.equals(n1));\n \n-        n2.put(\"x\", TextNode.valueOf(\"Test\"));\n+        n2.set(\"x\", TextNode.valueOf(\"Test\"));\n \n         assertTrue(n1.equals(n2));\n         assertTrue(n2.equals(n1));\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java\n         ObjectMapper mapper = new ObjectMapper();\n         // also need tree mapper to construct tree to serialize\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n-        n.put(\"pojo\", mapper.getNodeFactory().POJONode(\"abc\"));\n+        n.set(\"pojo\", mapper.getNodeFactory().POJONode(\"abc\"));\n         StringWriter sw = new StringWriter();\n         JsonGenerator jg = mapper.getJsonFactory().createJsonGenerator(sw);\n         mapper.writeTree(jg, n);\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n-        n.put(\"pojo\", mapper.getNodeFactory().POJONode(new int[] { 1, 2, 3 }));\n+        n.set(\"pojo\", mapper.getNodeFactory().POJONode(new int[] { 1, 2, 3 }));\n         StringWriter sw = new StringWriter();\n         JsonGenerator jg = mapper.getJsonFactory().createJsonGenerator(sw);\n         mapper.writeTree(jg, n);\n         ObjectMapper mapper = new ObjectMapper();\n         // also need tree mapper to construct tree to serialize\n         ObjectNode n = mapper.getNodeFactory().objectNode();\n-        n.put(\"pojo\", mapper.getNodeFactory().POJONode(new Bean()));\n+        n.set(\"pojo\", mapper.getNodeFactory().POJONode(new Bean()));\n         StringWriter sw = new StringWriter();\n         JsonGenerator jg = mapper.getJsonFactory().createJsonGenerator(sw);\n         mapper.writeTree(jg, n);", "timestamp": 1344900465, "metainfo": ""}