{"sha": "b3f1d1aac16cdb40228985c5140f6b943094582f", "log": "Simplify object id handling during serialization a bit", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n      */\n \n     /**\n-     * Method called to find a {@link ObjectIdGenerator} instance to\n-     * use when specified kind of generator is needed.\n-     */\n-    public abstract ObjectIdGenerator<?> objectIdsFor(ObjectIdGenerator<?> type);\n+     * Method called to find the Object Id for given POJO, if one\n+     * has been generated. Will always return a non-null Object;\n+     * contents vary depending on whether an Object Id already\n+     * exists or not.\n+     */\n+    public abstract WritableObjectId findObjectId(Object forPojo,\n+            ObjectIdGenerator<?> generatorType);\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n \n import java.io.IOException;\n \n-import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanSerializer;\n+import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n         throws IOException, JsonGenerationException\n     {\n         final ObjectIdWriter w = _objectIdWriter;\n-        // Ok: if we have seen this POJO before, just write the reference:\n-        ObjectIdGenerator<?> gen = provider.objectIdsFor(_objectIdWriter.generator);\n-        Object id = gen.findId(bean);\n-        if (id == null) { // first time around: must generate\n-            id = gen.generateId(bean);\n-            // If not, need to inject the id:\n-            jgen.writeStartObject();\n-            jgen.writeFieldName(w.propertyName);\n-            w.serializer.serialize(id, jgen, provider);\n-            if (_propertyFilterId != null) {\n-                serializeFieldsFiltered(bean, jgen, provider);\n-            } else {\n-                serializeFields(bean, jgen, provider);\n-            }\n-            jgen.writeEndObject();\n-        } else { // already generated; use one we have\n-            w.serializer.serialize(id, jgen, provider);\n+        WritableObjectId oid = provider.findObjectId(bean, w.generator);\n+        Object id = oid.id;\n+        \n+        if (id != null) { // have seen before; serialize just id\n+            oid.serializer.serialize(id, jgen, provider);\n+            return;\n         }\n+        // if not, bit more work:\n+        oid.serializer = w.serializer;\n+        oid.id = id = oid.generator.generateId(bean);\n+        // If not, need to inject the id:\n+        jgen.writeStartObject();\n+        jgen.writeFieldName(w.propertyName);\n+        w.serializer.serialize(id, jgen, provider);\n+        if (_propertyFilterId != null) {\n+            serializeFieldsFiltered(bean, jgen, provider);\n+        } else {\n+            serializeFields(bean, jgen, provider);\n+        }\n+        jgen.writeEndObject();\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n \n /**\n  * Standard implementation used by {@link ObjectMapper}:\n     /**********************************************************\n      */\n \n-    protected ArrayList<ObjectIdGenerator<?>> _objectIds;\n+    protected IdentityHashMap<Object, WritableObjectId> _seenObjectIds;\n+    \n+    protected ArrayList<ObjectIdGenerator<?>> _objectIdGenerators;\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n-    public final ObjectIdGenerator<?> objectIdsFor(ObjectIdGenerator<?> blueprint)\n-    {\n-        if (_objectIds != null) {\n-            for (int i = 0, len = _objectIds.size(); i < len; ++i) {\n-                ObjectIdGenerator<?> gen = _objectIds.get(i);\n-                if (gen.canUseFor(blueprint)) {\n-                    return gen;\n+    @Override\n+    public WritableObjectId findObjectId(Object forPojo,\n+            ObjectIdGenerator<?> generatorType)\n+    {\n+        if (_seenObjectIds == null) {\n+            _seenObjectIds = new IdentityHashMap<Object,WritableObjectId>();\n+        } else {\n+            WritableObjectId oid = _seenObjectIds.get(forPojo);\n+            if (oid != null) {\n+                return oid;\n+            }\n+        }\n+        // Not seen yet; must add an entry, return it. For that, we need generator\n+        ObjectIdGenerator<?> generator = null;\n+        \n+        if (_objectIdGenerators == null) {\n+            _objectIdGenerators = new ArrayList<ObjectIdGenerator<?>>(8);\n+        } else {\n+            for (int i = 0, len = _objectIdGenerators.size(); i < len; ++i) {\n+                ObjectIdGenerator<?> gen = _objectIdGenerators.get(i);\n+                if (gen.canUseFor(generatorType)) {\n+                    generator = gen;\n+                    break;\n                 }\n             }\n         }\n-        // not yet constructed; construct, append\n-        if (_objectIds == null) {\n-            _objectIds = new ArrayList<ObjectIdGenerator<?>>(8);\n-        }\n-        ObjectIdGenerator<?> gen = blueprint.newForSerialization();\n-        _objectIds.add(gen);\n-        return gen;\n+        if (generator == null) {\n+            generator = generatorType.newForSerialization();\n+        }\n+        WritableObjectId oid = new WritableObjectId(generator);\n+        _seenObjectIds.put(forPojo, oid);\n+        return oid;\n     }\n \n     /*\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java\n+package com.fasterxml.jackson.databind.ser.impl;\n+\n+import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+\n+/**\n+ * Simple value container used to keep track of Object Ids during\n+ * serialization.\n+ */\n+public final class WritableObjectId\n+{\n+    public final ObjectIdGenerator<?> generator;\n+    \n+    public JsonSerializer<Object> serializer;\n+\n+    public Object id;\n+    \n+    public WritableObjectId(ObjectIdGenerator<?> generator) {\n+        this.generator = generator;\n+    }\n+}", "timestamp": 1328751973, "metainfo": ""}