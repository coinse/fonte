{"sha": "27d9cd8e9d881ad906b1804ef6daf5431c9cedfe", "log": "Added handling for JACKSON-805 in the case of POJO as array.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n     public final void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonGenerationException\n     {\n+        // [JACKSON-805]\n+        if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)\n+                && hasSingleElement(provider)) {\n+            serializeAsArray(bean, jgen, provider);\n+            return;\n+        }\n         /* note: it is assumed here that limitations (type id, object id,\n          * any getter, filtering) have already been checked; so code here\n          * is trivial.\n     /* Field serialization methods\n     /**********************************************************\n      */\n+    private boolean hasSingleElement(SerializerProvider provider) {\n+        final BeanPropertyWriter[] props;\n+        if (_filteredProps != null && provider.getSerializationView() != null) {\n+            props = _filteredProps;\n+        } else {\n+            props = _props;\n+        }\n+        return props.length == 1;\n+    }\n \n     protected final void serializeAsArray(Object bean, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonGenerationException\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n     static class EmptyBean {\n         @JsonIgnore\n         public String name = \"foo\";\n+    }\n+    \n+    // for [JACKSON-805]\n+    @JsonFormat(shape=Shape.ARRAY)\n+    static class SingleBean {\n+        public String name =\"foo\";\n     }\n     \n     static class EmptyBeanModifier extends BeanSerializerModifier\n         String json = mapper.writeValueAsString(new EmptyBean());\n         assertEquals(\"{\\\"bogus\\\":\\\"foo\\\"}\", json);\n     }\n+    \n+    // for [JACKSON-805]\n+    public void testBeanAsArrayWithSingleProperty() throws Exception {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);\n+        String json = mapper.writeValueAsString(new SingleBean());\n+        assertEquals(\"\\\"foo\\\"\", json);\n+    }\n \n     /*\n     /********************************************************", "timestamp": 1348087019, "metainfo": ""}