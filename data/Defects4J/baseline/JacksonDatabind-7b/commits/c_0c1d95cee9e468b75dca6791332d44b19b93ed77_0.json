{"sha": "0c1d95cee9e468b75dca6791332d44b19b93ed77", "log": "Minor cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n         throws IOException, JsonProcessingException\n     {\n         jgen.writeStartArray();\n-        jgen.writeString(_idResolver.idFromValue(value));\n+        jgen.writeString(idFromValue(value));\n         jgen.writeStartObject();\n     }\n \n         throws IOException, JsonProcessingException\n     {\n         jgen.writeStartArray();\n-        jgen.writeString(_idResolver.idFromValueAndType(value, type));\n+        jgen.writeString(idFromValueAndType(value, type));\n         jgen.writeStartObject();\n     }\n     \n         throws IOException, JsonProcessingException\n     {\n         jgen.writeStartArray();\n-        jgen.writeString(_idResolver.idFromValue(value));\n+        jgen.writeString(idFromValue(value));\n         jgen.writeStartArray();\n     }\n \n         throws IOException, JsonProcessingException\n     {\n         jgen.writeStartArray();\n-        jgen.writeString(_idResolver.idFromValueAndType(value, type));\n+        jgen.writeString(idFromValueAndType(value, type));\n         jgen.writeStartArray();\n     }\n     \n     {\n         // only need the wrapper array\n         jgen.writeStartArray();\n-        jgen.writeString(_idResolver.idFromValue(value));\n+        jgen.writeString(idFromValue(value));\n     }\n \n     @Override\n     {\n         // only need the wrapper array\n         jgen.writeStartArray();\n-        jgen.writeString(_idResolver.idFromValueAndType(value, type));\n+        jgen.writeString(idFromValueAndType(value, type));\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n        throws IOException, JsonProcessingException\n    {\n        jgen.writeEndObject();\n-       jgen.writeStringField(_typePropertyName, _idResolver.idFromValue(value));\n+       jgen.writeStringField(_typePropertyName, idFromValue(value));\n    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n         throws IOException, JsonProcessingException\n     {\n         jgen.writeStartObject();\n-        jgen.writeStringField(_typePropertyName, _idResolver.idFromValue(value));\n+        jgen.writeStringField(_typePropertyName, idFromValue(value));\n     }\n \n     @Override\n         throws IOException, JsonProcessingException\n     {\n         jgen.writeStartObject();\n-        jgen.writeStringField(_typePropertyName, _idResolver.idFromValueAndType(value, type));\n+        jgen.writeStringField(_typePropertyName, idFromValueAndType(value, type));\n     }\n     \n     //public void writeTypePrefixForArray(Object value, JsonGenerator jgen)\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n         // wrapper\n         jgen.writeStartObject();\n         // and then JSON Object start caller wants\n-        jgen.writeObjectFieldStart(_idResolver.idFromValue(value));\n+        jgen.writeObjectFieldStart(idFromValue(value));\n     }\n \n     @Override\n         // wrapper\n         jgen.writeStartObject();\n         // and then JSON Object start caller wants\n-        jgen.writeObjectFieldStart(_idResolver.idFromValueAndType(value, type));\n+        jgen.writeObjectFieldStart(idFromValueAndType(value, type));\n     }\n     \n     @Override\n         // can still wrap ok\n         jgen.writeStartObject();\n         // and then JSON Array start caller wants\n-        jgen.writeArrayFieldStart(_idResolver.idFromValue(value));\n+        jgen.writeArrayFieldStart(idFromValue(value));\n     }\n \n     @Override\n         // can still wrap ok\n         jgen.writeStartObject();\n         // and then JSON Array start caller wants\n-        jgen.writeArrayFieldStart(_idResolver.idFromValueAndType(value, type));\n+        jgen.writeArrayFieldStart(idFromValueAndType(value, type));\n     }\n     \n     @Override\n     {\n         // can still wrap ok\n         jgen.writeStartObject();\n-        jgen.writeFieldName(_idResolver.idFromValue(value));\n+        jgen.writeFieldName(idFromValue(value));\n     }\n \n     @Override\n     {\n         // can still wrap ok\n         jgen.writeStartObject();\n-        jgen.writeFieldName(_idResolver.idFromValueAndType(value, type));\n+        jgen.writeFieldName(idFromValueAndType(value, type));\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeSerializerBase.java\n     \n     @Override\n     public TypeIdResolver getTypeIdResolver() { return _idResolver; }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods for subclasses\n+    /**********************************************************\n+     */\n+\n+    protected String idFromValue(Object value) {\n+        return _idResolver.idFromValue(value);\n+    }\n+\n+    protected String idFromValueAndType(Object value, Class<?> type) {\n+        return _idResolver.idFromValueAndType(value, type);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         } else {\n             subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(ac, config, ai);\n         }\n-        return (b == null) ? null : b.buildTypeSerializer(config, baseType, subtypes);\n+        if (b == null) {\n+            return null;\n+        }\n+        return b.buildTypeSerializer(config, baseType, subtypes);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n      * \n      * @return Type serializer to use for property values, if one is needed; null if not.\n      */\n-    public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config,\n-            AnnotatedMember accessor, BeanProperty property)\n+    public TypeSerializer findPropertyTypeSerializer(JavaType baseType,\n+            SerializationConfig config, AnnotatedMember accessor, BeanProperty property)\n         throws JsonMappingException\n     {\n         AnnotationIntrospector ai = config.getAnnotationIntrospector();\n--- a/src/main/java/com/fasterxml/jackson/databind/util/Annotations.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/Annotations.java\n import java.lang.annotation.Annotation;\n \n /**\n- * Interface that defines interface for collection of annotations.\n+ * Interface that defines interface for accessing contents of a\n+ * collection of annotations. This is needed when introspecting\n+ * annotation-based features from different kinds of things, not\n+ * just objects that Java Reflection interface exposes.\n  *<p>\n  * Standard mutable implementation is {@link com.fasterxml.jackson.databind.introspect.AnnotationMap}\n  */\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/Getter.java\n+package com.fasterxml.jackson.databind.util;\n+\n+/**\n+ * Mix-in interface exposed by things that expose a single\n+ * property whose value can be read.\n+ * \n+ * @since 2.0\n+ */\n+public interface Getter\n+{\n+    public Object getValue(Object pojo);\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/Setter.java\n+package com.fasterxml.jackson.databind.util;\n+\n+/**\n+ * Mix-in interface exposed by things that expose a single\n+ * property whose value can be set.\n+ * \n+ * @since 2.0\n+ */\n+public interface Setter\n+{\n+    public void setValue(Object pojo, Object value);\n+}", "timestamp": 1328304508, "metainfo": ""}