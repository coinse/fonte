{"sha": "d1a3cb149f888418a8eb2b8cf8fafbd032658d25", "log": "Add a notes wrt #283", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/failing/TestPolymorphicDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestPolymorphicDeserialization.java\n import org.junit.Test;\n \n /**\n+ * Reproduction of [https://github.com/FasterXML/jackson-databind/issues/283],\n+ * contributed by Eric T.\n  */\n public class TestPolymorphicDeserialization extends BaseMapTest\n {\n-  @Test\n-  public void testName() throws Exception\n-  {\n-    ObjectMapper mapper = objectMapper();\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = ClassA.class)\n+    @JsonSubTypes({\n+            @JsonSubTypes.Type(name = \"a\", value = ClassA.class),\n+            @JsonSubTypes.Type(name = \"b\", value = ClassB.class)\n+    })\n+    public static interface SomeInterface\n+    {\n+      public String get();\n+    }\n \n-    Assert.assertEquals(\"A\", mapper.readValue(\"{\\\"type\\\": \\\"a\\\"}\", SomeInterface.class).get());\n-    Assert.assertEquals(\"A\", mapper.readValue(\"{}\", SomeInterface.class).get());\n-    Assert.assertEquals(\"B\", mapper.readValue(\"{\\\"type\\\": \\\"b\\\"}\", SomeInterface.class).get());\n-    Assert.assertEquals(\"A\", mapper.readValue(\"{\\\"type\\\": \\\"c\\\"}\", SomeInterface.class).get());\n+    public static class ClassA implements SomeInterface\n+    {\n+      @Override\n+      public String get()\n+      {\n+        return \"A\";\n+      }\n+    }\n \n-    Assert.assertEquals(\"A\", mapper.readValue(\"{\\\"type\\\": \\\"a\\\"}\", ClassA.class).get());\n-    Assert.assertEquals(\"B\", mapper.readValue(\"{\\\"type\\\": \\\"b\\\"}\", ClassB.class).get());\n-    Assert.assertEquals(\"C\", mapper.readValue(\"{\\\"type\\\": \\\"c\\\"}\", ClassC.class).get());\n-  }\n+    public static class ClassB implements SomeInterface\n+    {\n+      @Override\n+      public String get()\n+      {\n+        return \"B\";\n+      }\n+    }\n \n-  @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = ClassA.class)\n-  @JsonSubTypes({\n-          @JsonSubTypes.Type(name = \"a\", value = ClassA.class),\n-          @JsonSubTypes.Type(name = \"b\", value = ClassB.class)\n-  })\n-  public static interface SomeInterface\n-  {\n-    public String get();\n-  }\n+    public static class ClassC implements SomeInterface\n+    {\n+      @Override\n+      public String get()\n+      {\n+        return \"C\";\n+      }\n+    }\n \n-  public static class ClassA implements SomeInterface\n-  {\n-    @Override\n-    public String get()\n+    @Test\n+    public void testName() throws Exception\n     {\n-      return \"A\";\n+      ObjectMapper mapper = objectMapper();\n+\n+      Assert.assertEquals(\"A\", mapper.readValue(\"{\\\"type\\\": \\\"a\\\"}\", SomeInterface.class).get());\n+      Assert.assertEquals(\"A\", mapper.readValue(\"{}\", SomeInterface.class).get());\n+      Assert.assertEquals(\"B\", mapper.readValue(\"{\\\"type\\\": \\\"b\\\"}\", SomeInterface.class).get());\n+      Assert.assertEquals(\"A\", mapper.readValue(\"{\\\"type\\\": \\\"c\\\"}\", SomeInterface.class).get());\n+\n+      Assert.assertEquals(\"A\", mapper.readValue(\"{\\\"type\\\": \\\"a\\\"}\", ClassA.class).get());\n+      Assert.assertEquals(\"B\", mapper.readValue(\"{\\\"type\\\": \\\"b\\\"}\", ClassB.class).get());\n+      Assert.assertEquals(\"C\", mapper.readValue(\"{\\\"type\\\": \\\"c\\\"}\", ClassC.class).get());\n     }\n-  }\n-\n-  public static class ClassB implements SomeInterface\n-  {\n-    @Override\n-    public String get()\n-    {\n-      return \"B\";\n-    }\n-  }\n-\n-  public static class ClassC implements SomeInterface\n-  {\n-    @Override\n-    public String get()\n-    {\n-      return \"C\";\n-    }\n-  }\n-\n }", "timestamp": 1376598996, "metainfo": ""}