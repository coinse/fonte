{"sha": "0f4b5e30e9870b6c75d5620b68e5bed5e3211fbe", "log": "Fix #281", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n      */\n     public JsonSerializer<Object> findNullKeySerializer(JavaType serializationType,\n             BeanProperty property)\n-        throws JsonMappingException {\n-        return getDefaultNullKeySerializer();\n+        throws JsonMappingException\n+    {\n+        return _nullKeySerializer;\n     }\n \n     /**\n      */\n     public JsonSerializer<Object> findNullValueSerializer(BeanProperty property)\n         throws JsonMappingException {\n-        return getDefaultNullValueSerializer();\n+        return _nullValueSerializer;\n     }\n \n     /**\n         throws IOException, JsonProcessingException\n     {\n         if (value == null) {\n-            getDefaultNullValueSerializer().serialize(null, jgen, this);\n+            _nullValueSerializer.serialize(null, jgen, this);\n         } else {\n             Class<?> cls = value.getClass();\n             findTypedValueSerializer(cls, true, null).serialize(value, jgen, this);\n             /* Note: can't easily check for suppression at this point\n              * any more; caller must check it.\n              */\n-            getDefaultNullValueSerializer().serialize(null, jgen, this);\n+            _nullValueSerializer.serialize(null, jgen, this);\n         } else {\n             Class<?> cls = value.getClass();\n             findTypedValueSerializer(cls, true, null).serialize(value, jgen, this);\n     public final void defaultSerializeNull(JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n-        getDefaultNullValueSerializer().serialize(null, jgen, this);\n+        _nullValueSerializer.serialize(null, jgen, this);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/node/NullNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/NullNode.java\n     public final void serialize(JsonGenerator jg, SerializerProvider provider)\n         throws IOException, JsonProcessingException\n     {\n-        jg.writeNull();\n+System.err.println(\"DEBUG: serialize null...\");\n+        provider.defaultSerializeNull(jg);\n     }\n \n     @Override\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n public class TestNullSerialization\n     extends BaseMapTest\n         public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf) {\n             return new MyNullProvider(this, config, jsf);\n         }\n-        \n+\n         @Override\n         public JsonSerializer<Object> findNullValueSerializer(BeanProperty property)\n             throws JsonMappingException\n         assertEquals(\"{\\\"name\\\":\\\"foobar\\\"}\", m.writeValueAsString(new Bean1()));\n         assertEquals(\"{\\\"type\\\":null}\", m.writeValueAsString(new Bean2()));\n     }\n+\n+    // #281\n+    public void testCustomNullForTrees() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        ObjectNode root = m.createObjectNode();\n+        root.putNull(\"a\");\n+\n+        // by default, null is... well, null\n+        assertEquals(\"{\\\"a\\\":null}\", m.writeValueAsString(root));\n+\n+        // but then we can customize it:\n+        DefaultSerializerProvider prov = new MyNullProvider();\n+        prov.setNullValueSerializer(new NullSerializer());\n+        m.setSerializerProvider(prov);\n+        assertEquals(\"{\\\"a\\\":\\\"foobar\\\"}\", m.writeValueAsString(root));\n+    }\n+\n }", "timestamp": 1375929861, "metainfo": ""}