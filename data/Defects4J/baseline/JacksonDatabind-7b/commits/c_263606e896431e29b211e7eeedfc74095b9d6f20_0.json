{"sha": "263606e896431e29b211e7eeedfc74095b9d6f20", "log": "Minor test refactoring, adding checks to verify pre-fetching of serializers", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n         return _config.getTypeFactory();\n     }\n \n+    /**\n+     * Diagnostics method that can be called to check whether this writer\n+     * has pre-fetched serializer to use: pre-fetching improves performance\n+     * when writer instances are reused as it avoids a per-call serializer\n+     * lookup.\n+     * \n+     * @since 2.2\n+     */\n+    public boolean hasPrefetchedSerializer() {\n+        return _rootSerializer != null;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Serialization methods; ones from ObjectCodec first\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestObjectWriter.java\n         writer = writer.with((PrettyPrinter) null);\n         assertEquals(\"{\\\"a\\\":1}\", writer.writeValueAsString(data));\n     }\n-}\n+\n+    public void testPrefetch() throws Exception\n+    {\n+        ObjectWriter writer = objectWriter();\n+        assertFalse(writer.hasPrefetchedSerializer());\n+        writer = objectWriter().withType(String.class);\n+        assertTrue(writer.hasPrefetchedSerializer());\n+    }\n+} \n--- a/src/test/java/com/fasterxml/jackson/failing/TestCollectionSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestCollectionSerialization.java\n         public int getB() { return 9; }\n     }\n \n+    // First ensure that basic interface-override works:\n+    public void testTypedSerialization() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        String singleJson = mapper.writerWithType(Issue822Interface.class).writeValueAsString(new Issue822Impl());\n+        // start with specific value case:\n+        assertEquals(\"{\\\"a\\\":3}\", singleJson);\n+    }\n+    \n     // [JACKSON-822]: ensure that type can be coerced\n     public void testTypedArrays() throws Exception\n     {\n      // Work-around when real solution not yet implemented:        \n //        mapper.enable(MapperFeature.USE_STATIC_TYPING);\n \n-        String singleJson = mapper.writerWithType(Issue822Interface.class).writeValueAsString(new Issue822Impl());\n-        // start with specific value case:\n-        assertEquals(\"{\\\"a\\\":3}\", singleJson);\n-\n-        // then lists\n         List<Issue822Interface> list = new ArrayList<Issue822Interface>();\n         list.add(new Issue822Impl());\n         String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>(){})", "timestamp": 1363382050, "metainfo": ""}