{"sha": "e268dd573d6b6bf789d4f36e856e72716875cd0c", "log": "Resolving Eclipse warnings (missing overrides etc)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n-import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsontype.*;\n import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n         return _withBase(_base.withTypeResolverBuilder(trb));\n     }\n     \n+    @Override\n     public SerializationConfig withView(Class<?> view) {\n         return (_view == view) ? this : new SerializationConfig(this, view);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n      * for supertypes; needed when a logical type name is used instead\n      * of class name (or custom scheme).\n      */\n+    @Override\n     public final SubtypeResolver getSubtypeResolver() {\n         return _subtypeResolver;\n     }\n         return _rootName;\n     }\n \n+    @Override\n     public final Class<?> getActiveView() {\n         return _view;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n      * Convenience method for creating a new factory instance with additional deserializer\n      * provider.\n      */\n+    @Override\n     public final DeserializerFactory withAdditionalDeserializers(Deserializers additional) {\n         return withConfig(_factoryConfig.withAdditionalDeserializers(additional));\n     }\n      * Convenience method for creating a new factory instance with additional\n      * {@link KeyDeserializers}.\n      */\n+    @Override\n     public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional) {\n         return withConfig(_factoryConfig.withAdditionalKeyDeserializers(additional));\n     }\n      * Convenience method for creating a new factory instance with additional\n      * {@link BeanDeserializerModifier}.\n      */\n+    @Override\n     public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier) {\n         return withConfig(_factoryConfig.withDeserializerModifier(modifier));\n     }\n      * Convenience method for creating a new factory instance with additional\n      * {@link AbstractTypeResolver}.\n      */\n+    @Override\n     public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver) {\n         return withConfig(_factoryConfig.withAbstractTypeResolver(resolver));\n     }\n      * Convenience method for creating a new factory instance with additional\n      * {@link ValueInstantiators}.\n      */\n+    @Override\n     public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators) {\n         return withConfig(_factoryConfig.withValueInstantiators(instantiators));\n     }\n     /**********************************************************\n      */\n \n+    @Override\n     public JavaType mapAbstractType(DeserializationConfig config, JavaType type)\n         throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n             return CalendarSerializer.instance.getSchema(provider, typeHint);\n         }\n \n+        @Override\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) {\n             CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/JsonSerializableSchema.java\n      * a String.\n      *\n      * @return The node representing the schema properties, or \"##irrelevant\" if irrelevant.\n+     * \n+     * @deprecated (since 2.1) -- support will be dropped in future, since JSON-as-String is\n+     *   fundamentally bad way for customizing anything. No direct replacements offered.\n      */\n+    @Deprecated\n     public String schemaObjectPropertiesDefinition() default NO_VALUE;\n \n     /**\n      * If the schema type if \"array\", JSON definition of the schema for item types contained.\n      *\n      * @return The schema for the items in the array, or \"##irrelevant\" if irrelevant.\n+     * \n+     * @deprecated (since 2.1) -- support will be dropped in future, since JSON-as-String is\n+     *   fundamentally bad way for customizing anything. No direct replacements offered.\n      */\n+    @Deprecated\n     public String schemaItemDefinition() default NO_VALUE;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n     /* Writing with custom type id\n     /**********************************************************\n      */\n-    \n+\n+    @Override\n     public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException {\n         jgen.writeStartArray();\n         jgen.writeStartObject();\n     }\n     \n+    @Override\n     public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException\n     {\n         jgen.writeStartArray();\n     }\n \n+    @Override\n     public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException\n     {\n         jgen.writeString(typeId);\n     }\n \n+    @Override\n     public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException {\n         writeTypeSuffixForObject(value, jgen); // standard impl works fine\n     }\n \n+    @Override\n     public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n             throws IOException, JsonProcessingException {\n         writeTypeSuffixForArray(value, jgen); // standard impl works fine\n     }\n \n+    @Override\n     public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException {\n         writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n    /**********************************************************\n     */\n \n+   @Override\n    public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException\n    {\n        _writePrefix(value, jgen); // here standard works fine\n    }\n    \n+   @Override\n    public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException {\n        _writePrefix(value, jgen); // here standard works fine\n    }\n    \n+   @Override\n    public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException\n    {\n        _writePrefix(value, jgen); // here standard works fine\n    }\n \n+   @Override\n    public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException {\n        _writeSuffix(value, jgen, typeId);// here standard works fine\n    }\n \n+   @Override\n    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n        throws IOException, JsonProcessingException {\n        _writeSuffix(value, jgen, typeId);// here standard works fine\n    }\n \n+   @Override\n    public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n            throws IOException, JsonProcessingException {\n        _writeSuffix(value, jgen, typeId);// here standard works fine\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n \n     // Only need to override Object-variants\n     \n+    @Override\n     public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException {\n         jgen.writeStartObject();\n         jgen.writeStringField(_typePropertyName, typeId);\n     }\n \n+    @Override\n     public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException {\n         jgen.writeEndObject();\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n     /**********************************************************\n      */\n     \n+    @Override\n     public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException\n     {\n         jgen.writeObjectFieldStart(typeId);\n     }\n     \n+    @Override\n     public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException\n     {\n         jgen.writeArrayFieldStart(typeId);\n     }\n \n+    @Override\n     public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n         throws IOException, JsonProcessingException\n     {\n         jgen.writeFieldName(typeId);\n     }\n \n+    @Override\n     public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n             throws IOException, JsonProcessingException {\n         writeTypeSuffixForObject(value, jgen); // standard impl works fine\n     }\n \n+    @Override\n     public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n             throws IOException, JsonProcessingException {\n         writeTypeSuffixForArray(value, jgen); // standard impl works fine\n     }\n \n+    @Override\n     public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n             throws IOException, JsonProcessingException {\n         writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n--- a/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n \n     // Immutable: no need to copy\n     @SuppressWarnings(\"unchecked\")\n+    @Override\n     public <T extends JsonNode> T deepCopy() { return (T) this; }\n     \n     public static MissingNode getInstance() { return instance; }\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n      * them as is.\n      */\n     @SuppressWarnings(\"unchecked\")\n+    @Override\n     public <T extends JsonNode> T deepCopy() { return (T) this; }\n     \n     @Override public boolean isValueNode() { return true; }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n      * Convenience method for creating a new factory instance with an additional\n      * serializer provider.\n      */\n+    @Override\n     public final SerializerFactory withAdditionalSerializers(Serializers additional) {\n         return withConfig(_factoryConfig.withAdditionalSerializers(additional));\n     }\n      * Convenience method for creating a new factory instance with an additional\n      * key serializer provider.\n      */\n+    @Override\n     public final SerializerFactory withAdditionalKeySerializers(Serializers additional) {\n         return withConfig(_factoryConfig.withAdditionalKeySerializers(additional));\n     }\n      * Convenience method for creating a new factory instance with additional bean\n      * serializer modifier.\n      */\n+    @Override\n     public final SerializerFactory withSerializerModifier(BeanSerializerModifier modifier) {\n         return withConfig(_factoryConfig.withSerializerModifier(modifier));\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n             contentType = _elementType;\n         }\n         if (contentType != null) {\n-            JsonNode schemaNode = null;\n+//            JsonNode schemaNode = null;\n             arrayVisitor.itemsFormat(contentType);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n         return (value == null) ? false : value.booleanValue();\n     }\n     \n+    @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n     \t//deposit your output format \n         \t\t\n         for (int i = 0; i < _props.length; i++) {\n             BeanPropertyWriter prop = _props[i];\n-\n-            JavaType propType = prop.getSerializationType();\n+//            JavaType propType = prop.getSerializationType();\n             BeanSerializerBase.depositSchemaProperty(prop, objectVisitor);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java\n         return new CalendarSerializer(false, customFormat);\n     }\n \n+    @Override\n     protected long _timestamp(Calendar value) {\n         return (value == null) ? 0L : value.getTimeInMillis();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateSerializer.java\n         return new DateSerializer(false, customFormat);\n     }\n \n+    @Override\n     protected long _timestamp(Date value) {\n         return (value == null) ? 0L : value.getTime();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n         return createSchemaNode(asNumber ? \"number\" : \"string\", true);\n     }\n     \n+    @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n     {\n         //todo: (ryan) add a format for the date in the schema?\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n             if (typeArgs.length == 2) {\n                 JavaType enumType = visitor.getProvider().constructType(typeArgs[0]);\n                 JavaType valueType = visitor.getProvider().constructType(typeArgs[1]);\n-                ObjectNode propsNode = JsonNodeFactory.instance.objectNode();\n+//                ObjectNode propsNode = JsonNodeFactory.instance.objectNode();\n                 Class<Enum<?>> enumClass = (Class<Enum<?>>) enumType.getRawClass();\n                 for (Enum<?> enumValue : enumClass.getEnumConstants()) {\n                 \tJsonSerializer<Object> ser;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n     }\n     \n     @Override\n+    @SuppressWarnings(\"deprecation\")\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         throws JsonMappingException\n     {\n         return mapper;\n     }\n \n-\t@Override\n-\tpublic void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-\t{\n-\t\tvisitor.expectAnyFormat(typeHint);\n-\t}\n+    @Override\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n+    {\n+        visitor.expectAnyFormat(typeHint);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition.java\n         return (_member instanceof AnnotatedParameter);\n     }\n     \n+    @Override\n     public AnnotatedMethod getGetter() {\n         if ((_member instanceof AnnotatedMethod)\n                 && ((AnnotatedMethod) _member).getParameterCount() == 0) {\n         return null;\n     }\n         \n+    @Override\n     public AnnotatedMethod getSetter() {\n         if ((_member instanceof AnnotatedMethod)\n                 && ((AnnotatedMethod) _member).getParameterCount() == 1) {\n         }\n         return null;\n     }\n-        \n+\n+    @Override\n     public AnnotatedField getField() {\n         return (_member instanceof AnnotatedField) ?\n                 (AnnotatedField) _member : null;\n     }\n \n+    @Override\n     public AnnotatedParameter getConstructorParameter() {\n         return (_member instanceof AnnotatedParameter) ?\n                 (AnnotatedParameter) _member : null;\n      * value of the property.\n      * Null if no such member exists.\n      */\n+    @Override\n     public AnnotatedMember getAccessor() {\n         AnnotatedMember acc = getGetter();\n         if (acc == null) {\n      * changing value of the property.\n      * Null if no such member exists.\n      */\n+    @Override\n     public AnnotatedMember getMutator() {\n         AnnotatedMember acc = getConstructorParameter();\n         if (acc == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ViewMatcher.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ViewMatcher.java\n \n     private final static class Empty extends ViewMatcher {\n         final static Empty instance = new Empty();\n+        @Override\n         public boolean isVisibleForView(Class<?> activeView) {\n             return false;\n         }\n     private final static class Single extends ViewMatcher {\n         private final Class<?> _view;\n         public Single(Class<?> v) { _view = v; }\n+        @Override\n         public boolean isVisibleForView(Class<?> activeView) {\n             return (activeView == _view) || _view.isAssignableFrom(activeView);\n         }\n \n         public Multi(Class<?>[] v) { _views = v; }\n \n+        @Override\n         public boolean isVisibleForView(Class<?> activeView)\n         {\n             for (int i = 0, len = _views.length; i < len; ++i) {\n--- a/src/test/java/com/fasterxml/jackson/databind/TestGeneratorUsingMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestGeneratorUsingMapper.java\n \n         final ObjectMapper mapper = new ObjectMapper();\n         final CharacterEscapes defaultCharacterEscapes = new CharacterEscapes() {\n+            @Override\n             public int[] getEscapeCodesForAscii() {\n                 return standardAsciiEscapesForJSON();\n             }\n \n+            @Override\n             public SerializableString getEscapeSequence(final int ch) {\n                 return null;\n             }\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArray.java\n \n     static class ForceArraysIntrospector extends JacksonAnnotationIntrospector\n     {\n+        @Override\n         public JsonFormat.Value findFormat(Annotated a) {\n             return new JsonFormat.Value().withShape(JsonFormat.Shape.ARRAY);\n         }", "timestamp": 1345154630, "metainfo": ""}