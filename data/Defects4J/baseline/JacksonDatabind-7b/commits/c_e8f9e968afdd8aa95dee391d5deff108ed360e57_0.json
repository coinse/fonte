{"sha": "e8f9e968afdd8aa95dee391d5deff108ed360e57", "log": "...", "commit": "\n--- /dev/null\n+++ b/src/test/java/perf/ManualWritePerfUntyped.java\n+package perf;\n+\n+import java.io.File;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+\n+/* Test modified from json-parsers-benchmark, to be able to profile\n+ * Jackson implementation.\n+ */\n+public class ManualWritePerfUntyped\n+    extends ObjectWriterBase<Object,Object>\n+{\n+    @Override\n+    protected int targetSizeMegs() { return 15; }\n+\n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 1) {\n+            System.err.println(\"Usage: java [input]\");\n+            System.exit(1);\n+        }\n+        ObjectMapper mapper = new ObjectMapper();\n+        Map<?,?> stuff = mapper.readValue(new File(args[0]), Map.class);\n+        new ManualWritePerfUntyped().test(mapper,\n+                \"AllTypes/small-1\", stuff, Object.class,\n+                \"AllTypes/small-2\", stuff, Object.class);\n+    }\n+\n+    @Override\n+    protected long testSer(int REPS, Object value, ObjectWriter writer) throws Exception\n+    {\n+        final NopOutputStream out = new NopOutputStream();\n+        long start = System.nanoTime();\n+        byte[] output = null;\n+\n+        while (--REPS >= 0) {\n+            output = writer.writeValueAsBytes(value);\n+        }\n+        hash = output.length;\n+        long nanos = System.nanoTime() - start;\n+        out.close();\n+        return nanos;\n+    }\n+}\n--- a/src/test/java/perf/ObjectWriterBase.java\n+++ b/src/test/java/perf/ObjectWriterBase.java\n         }\n \n         final ObjectWriter writer0 = mapper.writer().with(SerializationFeature.EAGER_SERIALIZER_FETCH);\n-        final ObjectWriter jsonWriter = writer0.withType(inputClass1);\n-        final ObjectWriter arrayWriter = writer0.withType(inputClass2);\n+        final ObjectWriter writer1 = writer0.withType(inputClass1);\n+        final ObjectWriter writer2 = writer0.withType(inputClass2);\n         \n         int i = 0;\n         int roundsDone = 0;\n             switch (round) {\n             case 0:\n                 msg = desc1;\n-                writer = jsonWriter;\n+                writer = writer1;\n                 value = inputValue1;\n                 break;\n             case 1:\n                 msg = desc2;\n-                writer = arrayWriter;\n+                writer = writer2;\n                 value = inputValue2;\n                 break;\n             default:", "timestamp": 1398824136, "metainfo": ""}