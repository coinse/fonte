{"sha": "4c8ee2eba68368f90ddb501d6f5c059ded1b3329", "log": "Improve BeanProperty to include 'isRequired()', as well as a method to traverse type/property hierarcy (JsonFormatVisitor)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n import java.lang.annotation.Annotation;\n \n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.util.Annotations;\n import com.fasterxml.jackson.databind.util.Named;\n \n     public JavaType getType();\n \n     /**\n+     * Whether value for property is marked as required using\n+     * annotations or associated schema.\n+     * \n+     * @since 2.2\n+     */\n+    public boolean isRequired();\n+    \n+    /**\n      * Method for finding annotation associated with this property;\n      * meaning annotation associated with one of entities used to\n      * access property.\n      * annotated field, method or constructor property.\n      */\n     public AnnotatedMember getMember();\n+\n+    /**\n+     * Method that can be called to visit the type structure that this\n+     * property is part of.\n+     * Note that not all implementations support traversal with this\n+     * method; those that do not should throw\n+     * {@link UnsupportedOperationException}.\n+     * \n+     * @param objectVisitor Visitor to used as the callback handler\n+     * \n+     * @since 2.2\n+     */\n+    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n+        throws JsonMappingException;\n     \n     /*\n     /**********************************************************\n         }\n \n //      @Override\n+        public boolean isRequired() {\n+            // !!! TODO (maybe): allow changing\n+            return false;\n+        }\n+        \n+//      @Override\n         public AnnotatedMember getMember() {\n             return _member;\n         }\n+\n+        /**\n+         * Implementation of this method throws\n+         * {@link UnsupportedOperationException}, since instances of this\n+         * implementation should not be used as part of actual structure\n+         * visited. Rather, other implementations should handle it.\n+         */\n+//      @Override\n+        public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor) {\n+            throw new UnsupportedOperationException(\"Instances of \"+getClass().getName()\n+                    +\" should not get visited\");\n+        }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     \n     /**\n      * Method for visiting type hierarchy for given type, using specified visitor.\n+     * Visitation uses <code>Serializer</code> hierarchy and related properties\n      *<p>\n      * This method can be used for things like\n      * generating <a href=\"http://json-schema.org/\">Json Schema</a>\n             provider.acceptJsonFormatVisitor(type, visitor);\n         }\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Internal methods for serialization, overridable\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         if (typeDeser == null) {\n             typeDeser = findTypeDeserializer(config, type);\n         }\n+        AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n+        Boolean b = (intr == null) ? null : intr.hasRequiredMarker(param);\n+        // how to default? Other code assumes missing value means 'false', so:\n+        boolean isRequired = (b == null) ? false : b.booleanValue();\n+\n         CreatorProperty prop = new CreatorProperty(name, type, typeDeser,\n-                beanDesc.getClassAnnotations(), param, index, injectableValueId);\n+                beanDesc.getClassAnnotations(), param, index, injectableValueId,\n+                isRequired);\n         if (deser != null) {\n             prop = prop.withValueDeserializer(deser);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n         }\n         return _deserializeOther(jp, ctxt, t);\n     }\n-    \n+\n     private final Object _deserializeOther(JsonParser jp, DeserializationContext ctxt,\n             JsonToken t)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n         if (oir == null) {\n             _beanProperties = src._beanProperties;\n         } else {\n-            _beanProperties = src._beanProperties.withProperty(new ObjectIdValueProperty(oir));\n+            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n+             *   but no easy access. But hard to see id property being optional,\n+             *   so let's consider required at this point.\n+             */\n+            ObjectIdValueProperty idProp = new ObjectIdValueProperty(oir, true);\n+            _beanProperties = src._beanProperties.withProperty(idProp);\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n     /**\n      * Method for constructing a {@link BeanDeserializer}, given all\n      * information collected.\n-     */\n-    public BeanDeserializer build()\n+     *<p>\n+     * NOTE: Signature of this method did unfortunately change between Jackson 2.1\n+     * and Jackson 2.2\n+     */\n+    public JsonDeserializer<?> build()\n     {\n         Collection<SettableBeanProperty> props = _properties.values();\n         BeanPropertyMap propertyMap = new BeanPropertyMap(props);\n \n         // one more thing: may need to create virtual ObjectId property:\n         if (_objectIdReader != null) {\n-            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader);\n+            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n+             *   but no easy access. But hard to see id property being optional,\n+             *   so let's consider required at this point.\n+             */\n+            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n             propertyMap = propertyMap.withProperty(prop);\n         }\n         \n         }\n \n         if (_objectIdReader != null) {\n-            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader);\n+            /* 18-Nov-2012, tatu: May or may not have annotations for id property;\n+             *   but no easy access. But hard to see id property being optional,\n+             *   so let's consider required at this point.\n+             */\n+            ObjectIdValueProperty prop = new ObjectIdValueProperty(_objectIdReader, true);\n             propertyMap = propertyMap.withProperty(prop);\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n      * @since 2.1\n      */\n     protected final int _creatorIndex;\n+\n+    /**\n+     * @deprecated Since 2.2: use the method that takes <code>isRequired</code> property\n+     */\n+    @Deprecated\n+    public CreatorProperty(String name, JavaType type, TypeDeserializer typeDeser,\n+            Annotations contextAnnotations, AnnotatedParameter param,\n+            int index, Object injectableValueId)\n+    {\n+        this(name, type, typeDeser, contextAnnotations, param, index, injectableValueId,\n+                true);\n+    }\n     \n     /**\n      * @param name Name of the logical property\n      */\n     public CreatorProperty(String name, JavaType type, TypeDeserializer typeDeser,\n             Annotations contextAnnotations, AnnotatedParameter param,\n-            int index, Object injectableValueId)\n+            int index, Object injectableValueId,\n+            boolean isRequired)\n     {\n-        super(name, type, typeDeser, contextAnnotations);\n+        super(name, type, typeDeser, contextAnnotations, isRequired);\n         _annotated = param;\n         _creatorIndex = index;\n         _injectableValueId = injectableValueId;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n import com.fasterxml.jackson.databind.deser.impl.NullProvider;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.Annotations;\n import com.fasterxml.jackson.databind.util.ViewMatcher;\n      * changed.\n      */\n     protected int _propertyIndex = -1;\n+\n+    /**\n+     * Whether value of this property has been marked as required.\n+     * Retained since it will be needed when traversing type hierarchy\n+     * for producing schemas (and other similar tasks); currently not\n+     * used for serialization.\n+     * \n+     * @since 2.2\n+     */\n+    protected final boolean _isRequired;\n     \n     /*\n     /**********************************************************\n     protected SettableBeanProperty(BeanPropertyDefinition propDef,\n             JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations)\n     {\n-        this(propDef.getName(), type, typeDeser, contextAnnotations);\n-    }\n-    \n+        this(propDef.getName(), type, typeDeser, contextAnnotations,\n+                propDef.isRequired());\n+    }\n+\n+    /*\n+    @Deprecated // since 2.2\n     protected SettableBeanProperty(String propName,\n             JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations)\n+    {\n+        this(propName, type, typeDeser, contextAnnotations, false);\n+    }\n+    */\n+    \n+    protected SettableBeanProperty(String propName,\n+            JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations,\n+            boolean isRequired)\n     {\n         /* 09-Jan-2009, tatu: Intern()ing makes sense since Jackson parsed\n          *   field names are (usually) interned too, hence lookups will be faster.\n             _propName = InternCache.instance.intern(propName);\n         }\n         _type = type;\n+        _isRequired = isRequired;\n         _contextAnnotations = contextAnnotations;\n         _viewMatcher = null;\n \n     {\n         _propName = src._propName;\n         _type = src._type;\n+        _isRequired = src._isRequired;\n         _contextAnnotations = src._contextAnnotations;\n         _valueDeserializer = src._valueDeserializer;\n         _valueTypeDeserializer = src._valueTypeDeserializer;\n     {\n         _propName = src._propName;\n         _type = src._type;\n+        _isRequired = src._isRequired;\n         _contextAnnotations = src._contextAnnotations;\n         _valueTypeDeserializer = src._valueTypeDeserializer;\n         _managedReferenceName = src._managedReferenceName;\n     {\n         _propName = newName;\n         _type = src._type;\n+        _isRequired = src._isRequired;\n         _contextAnnotations = src._contextAnnotations;\n         _valueDeserializer = src._valueDeserializer;\n         _valueTypeDeserializer = src._valueTypeDeserializer;\n     public final String getName() { return _propName; }\n \n //  @Override\n+    public boolean isRequired() { return _isRequired; }\n+    \n+//  @Override\n     public JavaType getType() { return _type; }\n \n     public abstract <A extends Annotation> A getAnnotation(Class<A> acls);\n         return _contextAnnotations.get(acls);\n     }\n \n+//  @Override\n+    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n+        throws JsonMappingException\n+    {\n+        if (isRequired()) {\n+            objectVisitor.property(this); \n+        } else {\n+            objectVisitor.optionalProperty(this);\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Accessors\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ManagedReferenceProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ManagedReferenceProperty.java\n             Annotations contextAnnotations, boolean isContainer)\n     {\n         super(forward.getName(), forward.getType(), forward.getValueTypeDeserializer(),\n-                contextAnnotations);\n+                contextAnnotations,\n+                forward.isRequired());\n         _referenceName = refName;\n         _managedProperty = forward;\n         _backProperty = backward;\n     public Object setAndReturn(Object instance, Object value)\n    \t\tthrows IOException\n \t{\n-    \tObject result = _managedProperty.setAndReturn(instance, value);\n+        Object result = _managedProperty.setAndReturn(instance, value);\n         /* And then back reference, if (and only if!) we actually have a non-null\n          * reference\n          */\n                 _backProperty.set(value, instance);\n             }\n         }\n-    \treturn result;\n+        return result;\n \t}\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n     private static final long serialVersionUID = 1L;\n \n     protected final ObjectIdReader _objectIdReader;\n+\n+    @Deprecated // since 2.2\n+    public ObjectIdValueProperty(ObjectIdReader objectIdReader) {\n+        this(objectIdReader, true);\n+    }\n     \n-    public ObjectIdValueProperty(ObjectIdReader objectIdReader)\n+    public ObjectIdValueProperty(ObjectIdReader objectIdReader,\n+            boolean isRequired)\n     {\n-        super(objectIdReader.propertyName, objectIdReader.idType, null, null);\n+        super(objectIdReader.propertyName, objectIdReader.idType, null, null,\n+                isRequired);\n         _objectIdReader = objectIdReader;\n         _valueDeserializer = objectIdReader.deserializer;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n     extends StdDeserializer<EnumMap<?,?>>\n     implements ContextualDeserializer\n {\n+    private static final long serialVersionUID = 1916979386940205321L;\n+\n     protected final JavaType _mapType;\n     \n     protected final Class<?> _enumClass;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n     extends StdDeserializer<EnumSet<?>>\n     implements ContextualDeserializer\n {\n+    private static final long serialVersionUID = 3479455075597887177L;\n+\n     protected final JavaType _enumType;\n \n     protected final Class<Enum> _enumClass;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JacksonDeserializers.java\n /**\n  * Container class for core Jackson type deserializers.\n  */\n+@SuppressWarnings(\"serial\")\n public class JacksonDeserializers\n {\n     public static StdDeserializer<?>[] all()\n             JavaType intType = config.constructType(Integer.TYPE);\n             JavaType longType = config.constructType(Long.TYPE);\n             return  new CreatorProperty[] {\n-                    new CreatorProperty(\"sourceRef\", config.constructType(Object.class), null, null, null, 0, null),\n-                    new CreatorProperty(\"byteOffset\", longType, null, null, null, 1, null),\n-                    new CreatorProperty(\"charOffset\", longType, null, null, null, 2, null),\n-                    new CreatorProperty(\"lineNr\", intType, null, null, null, 3, null),\n-                    new CreatorProperty(\"columnNr\", intType, null, null, null, 4, null)\n+                    new CreatorProperty(\"sourceRef\", config.constructType(Object.class), null, null, null, 0, null, true),\n+                    new CreatorProperty(\"byteOffset\", longType, null, null, null, 1, null, true),\n+                    new CreatorProperty(\"charOffset\", longType, null, null, null, 2, null, true),\n+                    new CreatorProperty(\"lineNr\", intType, null, null, null, 3, null, true),\n+                    new CreatorProperty(\"columnNr\", intType, null, null, null, 4, null, true)\n             };\n         }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNumberFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonNumberFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonFormatVisitors;\n-\n \n public interface JsonNumberFormatVisitor extends JsonValueFormatVisitor{\n \n--- a/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n      *\n      * @see BigDecimal\n      */\n-    protected JsonNodeFactory(boolean bigDecimalExact)\n+    public JsonNodeFactory(boolean bigDecimalExact)\n     {\n         _cfgBigDecimalExact = bigDecimalExact;\n     }\n \n     /**\n      * Return a factory instance with the desired behavior for BigDecimals\n-     *\n      * <p>See {@link #JsonNodeFactory(boolean)} for a full description.</p>\n      *\n      * @param bigDecimalExact see description\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n      */\n     protected JavaType _nonTrivialBaseType;\n \n+    /**\n+     * Whether value of this property has been marked as required.\n+     * Retained since it will be needed when traversing type hierarchy\n+     * for producing schemas (and other similar tasks); currently not\n+     * used for serialization.\n+     * \n+     * @since 2.2\n+     */\n+    protected final boolean _isRequired;\n+    \n     /*\n     /**********************************************************\n     /* Construction, configuration\n         _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyMap() : null;\n         _typeSerializer = typeSer;\n         _cfgSerializationType = serType;\n+        _isRequired = propDef.isRequired();\n \n         if (member instanceof AnnotatedField) {\n             _accessorMethod = null;\n         _includeInViews = base._includeInViews;\n         _typeSerializer = base._typeSerializer;\n         _nonTrivialBaseType = base._nonTrivialBaseType;\n+        _isRequired = base._isRequired;\n     }\n \n     public BeanPropertyWriter rename(NameTransformer transformer) {\n     }\n \n //  @Override\n+    public boolean isRequired() {\n+        return _isRequired;\n+    }\n+    \n+//  @Override\n     public <A extends Annotation> A getAnnotation(Class<A> acls) {\n         return _member.getAnnotation(acls);\n     }\n     public AnnotatedMember getMember() {\n         return _member;\n     }\n-    \n+\n+\n+//  @Override\n+    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n+        throws JsonMappingException\n+    {\n+        if (isRequired()) {\n+            objectVisitor.property(this); \n+        } else {\n+            objectVisitor.optionalProperty(this);\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Managing and accessing of opaque internal settings\n      * like constructing JSON Schema instances.\n      * \n      * @since 2.1\n-     */\n-    protected boolean isRequired(AnnotationIntrospector intr)\n-    {\n-        Boolean value = intr.hasRequiredMarker(_member);\n-        return (value == null) ? false : value.booleanValue();\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Support for JsonFormatVisitable\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Method called to handle appropriate type-specific visiting\n-     * over logical property this writer handles.\n-     * \n-     * @param objectVisitor ObjectVisitor which can receive the property\n-     * \n-     * @since 2.1\n-     */\n-    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n-        throws JsonMappingException\n-    {\n-        if (isRequired(objectVisitor.getProvider().getAnnotationIntrospector())) {\n-            objectVisitor.property(this); \n-        } else {\n-            objectVisitor.optionalProperty(this);\n-        }\n-    }\n+     * \n+     * @deprecated since 2.2, use {@link #isRequired()} instead.\n+     */\n+    @Deprecated\n+    protected boolean isRequired(AnnotationIntrospector intr) {\n+        return _isRequired;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Legacy support for JsonFormatVisitable\n+    /**********************************************************\n+     */\n \n     /**\n      * Attempt to add the output of the given {@link BeanPropertyWriter} in the given {@link ObjectNode}.\n             }\n             ser = provider.findValueSerializer(serType, this);\n         }\n-        boolean isOptional = !isRequired(provider.getAnnotationIntrospector());\n+        boolean isOptional = !isRequired();\n         if (ser instanceof SchemaAware) {\n             schemaNode =  ((SchemaAware) ser).getSchema(provider, hint, isOptional) ;\n         } else {  \n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestValueInstantiator.java\n         public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n             return  new CreatorProperty[] {\n                     new CreatorProperty(\"type\", config.constructType(Class.class),\n-                            null, null, null, 0, null)\n+                            null, null, null, 0, null, true)\n             };\n         }\n \n         public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n             return  new CreatorProperty[] {\n                     new CreatorProperty(\"name\", config.constructType(String.class),\n-                            null, null, null, 0, null)\n+                            null, null, null, 0, null, true)\n             };\n         }\n \n                     public CreatorProperty[] getFromObjectArguments(DeserializationConfig config) {\n                         return  new CreatorProperty[] {\n                                 new CreatorProperty(\"secret\", config.constructType(String.class),\n-                                        null, null, null, 0, null)\n+                                        null, null, null, 0, null, true)\n                         };\n                     }\n         ", "timestamp": 1353297409, "metainfo": ""}