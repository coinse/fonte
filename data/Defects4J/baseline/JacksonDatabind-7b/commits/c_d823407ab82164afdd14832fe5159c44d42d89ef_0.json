{"sha": "d823407ab82164afdd14832fe5159c44d42d89ef", "log": "Implemented forward reference resolution for general property based deserialization.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n             }\n             // [JACKSON-235]: need to link managed references with matching back references\n             prop = _resolveManagedReferenceProperty(ctxt, prop);\n+\n+            // issue #351: need to wrap properties that require object id resolution.\n+            if (!(prop instanceof ManagedReferenceProperty)) {\n+                prop = _resolvedObjectIdProperty(ctxt, prop);\n+            }\n             // [JACKSON-132]: support unwrapped values (via @JsonUnwrapped)\n             SettableBeanProperty u = _resolveUnwrappedProperty(ctxt, prop);\n             if (u != null) {\n     }\n \n     /**\n+     * Method that wraps given property with {@link ObjectIdReferenceProperty}\n+     * in case where object id resolution is required.\n+     */\n+    protected SettableBeanProperty _resolvedObjectIdProperty(DeserializationContext ctxt, SettableBeanProperty prop)\n+    {\n+        ObjectIdInfo objectIdInfo = prop.getObjectIdInfo();\n+        JsonDeserializer<Object> valueDeser = prop.getValueDeserializer();\n+        ObjectIdReader objectIdReader = valueDeser.getObjectIdReader();\n+        if (objectIdInfo == null && objectIdReader == null) {\n+            return prop;\n+        }\n+\n+        return new ObjectIdReferenceProperty(prop, objectIdInfo);\n+    }\n+\n+    /**\n      * Helper method called to see if given property might be so-called unwrapped\n      * property: these require special handling.\n      */\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java\n+package com.fasterxml.jackson.databind.deser.impl;\n+\n+import java.io.IOException;\n+import java.lang.annotation.Annotation;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.PropertyName;\n+import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n+import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;\n+import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n+\n+public class ObjectIdReferenceProperty extends SettableBeanProperty {\n+    private static final long serialVersionUID = 8465266677345565407L;\n+    private SettableBeanProperty _forward;\n+\n+    public ObjectIdReferenceProperty(SettableBeanProperty forward, ObjectIdInfo objectIdInfo)\n+    {\n+        super(forward);\n+        _forward = forward;\n+        _objectIdInfo = objectIdInfo;\n+    }\n+\n+    public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, JsonDeserializer<?> deser)\n+    {\n+        super(src, deser);\n+        _forward = src._forward;\n+        _objectIdInfo = src._objectIdInfo;\n+    }\n+\n+    public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, PropertyName newName)\n+    {\n+        super(src, newName);\n+        _forward = src._forward;\n+        _objectIdInfo = src._objectIdInfo;\n+    }\n+\n+    @Override\n+    public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser)\n+    {\n+        return new ObjectIdReferenceProperty(this, deser);\n+    }\n+\n+    @Override\n+    public SettableBeanProperty withName(PropertyName newName)\n+    {\n+        return new ObjectIdReferenceProperty(this, newName);\n+    }\n+\n+    @Override\n+    public <A extends Annotation> A getAnnotation(Class<A> acls)\n+    {\n+        return _forward.getAnnotation(acls);\n+    }\n+\n+    @Override\n+    public AnnotatedMember getMember()\n+    {\n+        return _forward.getMember();\n+    }\n+\n+    @Override\n+    public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object instance)\n+        throws IOException, JsonProcessingException\n+    {\n+        deserializeSetAndReturn(jp, ctxt, instance);\n+    }\n+\n+    @Override\n+    public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance)\n+        throws IOException, JsonProcessingException\n+    {\n+        boolean usingIdentityInfo = _objectIdInfo != null || _valueDeserializer.getObjectIdReader() != null;\n+        try {\n+            return setAndReturn(instance, deserialize(jp, ctxt));\n+        } catch (UnresolvedForwardReference reference) {\n+            if (!usingIdentityInfo) {\n+                throw JsonMappingException.from(jp, \"Unresolved forward reference but no identity info.\", reference);\n+            }\n+            reference.getRoid().appendReferring(new PropertyReferring(instance, reference.getUnresolvedId()));\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public void set(Object instance, Object value)\n+        throws IOException\n+    {\n+        _forward.set(instance, value);\n+    }\n+\n+    @Override\n+    public Object setAndReturn(Object instance, Object value)\n+        throws IOException\n+    {\n+        return _forward.setAndReturn(instance, value);\n+    }\n+\n+    public final class PropertyReferring implements Referring {\n+        public final Object _pojo;\n+        private Object _unresolvedId;\n+\n+        public PropertyReferring(Object ob, Object id)\n+        {\n+            _pojo = ob;\n+            _unresolvedId = id;\n+        }\n+\n+        @Override\n+        public void handleResolvedForwardReference(Object id, Object value)\n+            throws IOException\n+        {\n+            if (!id.equals(_unresolvedId)) {\n+                throw new IllegalArgumentException(\"Trying to resolve a forward reference with id [\" + id\n+                        + \"] that wasn't previously seen as unresolved.\");\n+            }\n+            set(_pojo, value);\n+        }\n+    }\n+}", "timestamp": 1389625653, "metainfo": ""}