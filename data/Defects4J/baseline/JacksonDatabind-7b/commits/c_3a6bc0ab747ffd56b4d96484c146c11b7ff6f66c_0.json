{"sha": "3a6bc0ab747ffd56b4d96484c146c11b7ff6f66c", "log": "Improve robustness of BooleanNode; sounds like version conflicts (multiple jackson jars) could cause issues with ClassLoaders", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/BooleanNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BooleanNode.java\n {\n     // // Just need two instances...\n \n-    public final static BooleanNode TRUE = new BooleanNode();\n-    public final static BooleanNode FALSE = new BooleanNode();\n+    public final static BooleanNode TRUE = new BooleanNode(true);\n+    public final static BooleanNode FALSE = new BooleanNode(false);\n \n-    private BooleanNode() { }\n+    private final boolean _value;\n+    \n+    private BooleanNode(boolean v) { _value = v; }\n \n     public static BooleanNode getTrue() { return TRUE; }\n     public static BooleanNode getFalse() { return FALSE; }\n     public static BooleanNode valueOf(boolean b) { return b ? TRUE : FALSE; }\n \n     @Override\n-    public JsonNodeType getNodeType()\n-    {\n+    public JsonNodeType getNodeType() {\n         return JsonNodeType.BOOLEAN;\n     }\n \n-    // Interesting... two choices...\n     @Override public JsonToken asToken() {\n-        return (this == TRUE) ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE;\n+        return _value ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE;\n     }\n \n     @Override\n     public boolean booleanValue() {\n-        return (this == TRUE);\n+        return _value;\n     }\n \n     @Override\n     public String asText() {\n-        return (this == TRUE) ? \"true\" : \"false\";\n+        return _value ? \"true\" : \"false\";\n     }\n \n     @Override\n     public boolean asBoolean() {\n-        return (this == TRUE);\n+        return _value;\n     }\n \n     @Override\n     public boolean asBoolean(boolean defaultValue) {\n-        return (this == TRUE);\n+        return _value;\n     }\n     \n     @Override\n     public int asInt(int defaultValue) {\n-        return (this == TRUE) ? 1 : 0;\n+        return _value ? 1 : 0;\n     }\n     @Override\n     public long asLong(long defaultValue) {\n-        return (this == TRUE) ? 1L : 0L;\n+        return _value ? 1L : 0L;\n     }\n     @Override\n     public double asDouble(double defaultValue) {\n-        return (this == TRUE) ? 1.0 : 0.0;\n+        return _value ? 1.0 : 0.0;\n     }\n     \n     @Override\n     public final void serialize(JsonGenerator jg, SerializerProvider provider)\n         throws IOException, JsonProcessingException\n     {\n-        jg.writeBoolean(this == TRUE);\n+        jg.writeBoolean(_value);\n     }\n \n     @Override\n     public boolean equals(Object o)\n     {\n-        /* Since there are only ever two instances in existence\n-         * can do identity comparison\n+    \t/* 11-Mar-2013, tatu: Apparently ClassLoaders can manage to load\n+    \t *    different instances, rendering identity comparisons broken.\n+    \t *    So let's use value instead.\n          */\n-        return (o == this);\n+    \tif (o == this) return true;\n+    \tif (o == null) return false;\n+    \tif (o.getClass() != getClass()) {\n+    \t\treturn false;\n+    \t}\n+    \treturn (_value == ((BooleanNode) o)._value);\n     }\n }", "timestamp": 1363043508, "metainfo": ""}