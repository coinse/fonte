{"sha": "84da2a4a1bf7c987237f4395f214a99bfc198ccb", "log": "Improve javadocs for ObjectReader.readValues(...) methods", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n \n     /**\n      * Method for reading sequence of Objects from parser stream.\n+     * Sequence can be either root-level \"unwrapped\" sequence (without surrounding\n+     * JSON array), or a sequence contained in a JSON Array.\n+     * In either case {@link JsonParser} must point to the first token of\n+     * the first element, OR not point to any token (in which case it is advanced\n+     * to the next token). This means, specifically, that for wrapped sequences,\n+     * parser MUST NOT point to the surrounding <code>START_ARRAY</code> but rather\n+     * to the token following it.\n      *<p>\n      * Note that {@link ObjectReader} has more complete set of variants.\n      */\n     }\n \n     /**\n-     * Method for reading sequence of Objects from parser stream.\n+     * Type-safe overloaded method, basically alias for {@link #readValues(JsonParser, ResolvedType)}.\n      */\n     @Override\n     public <T> MappingIterator<T> readValues(JsonParser jp, Class<T> valueType)\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n     }\n \n     /**\n-     * Type-safe overloaded method, basically alias for {@link #readValues(JsonParser, ResolvedType)}.\n+     * Convenience method that is equivalent to:\n+     *<pre>\n+     *   withType(valueType).readValues(jp);\n+     *</pre>\n      */\n     public <T> Iterator<T> readValues(JsonParser jp, JavaType valueType)\n         throws IOException, JsonProcessingException {\n     \n     /**\n      * Method for reading sequence of Objects from parser stream.\n+     *<p>\n+     * Sequence can be either root-level \"unwrapped\" sequence (without surrounding\n+     * JSON array), or a sequence contained in a JSON Array.\n+     * In either case {@link JsonParser} must point to the first token of\n+     * the first element, OR not point to any token (in which case it is advanced\n+     * to the next token). This means, specifically, that for wrapped sequences,\n+     * parser MUST NOT point to the surrounding <code>START_ARRAY</code> but rather\n+     * to the token following it.\n      */\n     public <T> MappingIterator<T> readValues(JsonParser jp)\n         throws IOException, JsonProcessingException\n     \n     /**\n      * Method for reading sequence of Objects from parser stream.\n+     *<p>\n+     * Sequence can be either wrapped or unwrapped root-level sequence:\n+     * wrapped means that the elements are enclosed in JSON Array;\n+     * and unwrapped that elements are directly accessed at main level.\n+     * Assumption is that iff the first token of the document is\n+     * <code>START_ARRAY</code>, we have a wrapped sequence; otherwise\n+     * unwrapped. For wrapped sequences, leading <code>START_ARRAY</code>\n+     * is skipped, so that for both cases, underlying {@link JsonParser}\n+     * will point to what is expected to be the first token of the first\n+     * element.\n+     *<p>\n+     * Note that the wrapped vs unwrapped logic means that it is NOT\n+     * possible to use this method for reading an unwrapped sequence\n+     * of elements written as JSON Arrays: to read such sequences, one\n+     * has to use {@link #readValues(JsonParser)}, making sure parser\n+     * points to the first token of the first element (i.e. the second\n+     * <code>START_ARRAY</code> which is part of the first element).\n      */\n     public <T> MappingIterator<T> readValues(InputStream src)\n         throws IOException, JsonProcessingException\n     }\n \n     /**\n-     * Method for reading sequence of Objects from parser stream.\n+     * Overloaded version of {@link #readValue(InputStream)}.\n      */\n     public <T> MappingIterator<T> readValues(Reader src)\n         throws IOException, JsonProcessingException\n     }\n     \n     /**\n-     * Method for reading sequence of Objects from parser stream.\n+     * Overloaded version of {@link #readValue(InputStream)}.\n+     * \n+     * @param json String that contains JSON content to parse\n      */\n     public <T> MappingIterator<T> readValues(String json)\n         throws IOException, JsonProcessingException\n     }\n \n     /**\n-     * Method for reading sequence of Objects from parser stream.\n+     * Overloaded version of {@link #readValue(InputStream)}.\n      */\n     public <T> MappingIterator<T> readValues(byte[] src, int offset, int length)\n         throws IOException, JsonProcessingException\n                 _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);\n     }\n \n+    /**\n+     * Overloaded version of {@link #readValue(InputStream)}.\n+     */\n     public final <T> MappingIterator<T> readValues(byte[] src)\n             throws IOException, JsonProcessingException {\n         return readValues(src, 0, src.length);\n     }\n     \n     /**\n-     * Method for reading sequence of Objects from parser stream.\n+     * Overloaded version of {@link #readValue(InputStream)}.\n      */\n     public <T> MappingIterator<T> readValues(File src)\n         throws IOException, JsonProcessingException\n     }\n \n     /**\n-     * Method for reading sequence of Objects from parser stream.\n+     * Overloaded version of {@link #readValue(InputStream)}.\n+     * \n+     * @param src URL to read to access JSON content to parse.\n      */\n     public <T> MappingIterator<T> readValues(URL src)\n         throws IOException, JsonProcessingException", "timestamp": 1342846355, "metainfo": ""}