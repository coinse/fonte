{"sha": "e090cd8ab3aee1b6e6ed99ae1aae51bdc811117c", "log": "Further improvements wrt #232: use `JsonGenerator` feature, instead of caller converting to String", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n         if (cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)) {\n             jgen.useDefaultPrettyPrinter();\n         }\n+        // [Issue#232]\n+        if (cfg.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            jgen.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n+        }\n         // [JACKSON-282]: consider Closeable\n         if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) {\n             _configAndWriteCloseable(jgen, value, cfg);\n         if (cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)) {\n             jgen.useDefaultPrettyPrinter();\n         }\n+        // [Issue#232]\n+        if (cfg.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            jgen.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n+        }\n+\n         // [JACKSON-282]: consider Closeable\n         if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) {\n             _configAndWriteCloseable(jgen, value, cfg);\n             }\n         }\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Internal methods for deserialization, overridable\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n     /**\n      * Factory used for constructing {@link JsonGenerator}s\n      */\n-    protected final JsonFactory _jsonFactory;\n-    \n+    protected final JsonFactory _parserFactory;\n+\n     /**\n      * Flag that indicates whether root values are expected to be unwrapped or not\n      */\n     protected final boolean _unwrapRoot;\n-    \n+\n     /*\n     /**********************************************************\n     /* Configuration that can be changed during building\n     /**********************************************************\n-     */   \n+     */\n \n     /**\n      * Declared type of value to instantiate during deserialization.\n      * @since 2.1\n      */\n     protected final DataFormatReaders _dataFormatReaders;\n-    \n+\n     /*\n     /**********************************************************\n     /* Caching\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * Root-level cached deserializers\n      */\n         _config = config;\n         _context = mapper._deserializationContext;\n         _rootDeserializers = mapper._rootDeserializers;\n-        _jsonFactory = mapper._jsonFactory;\n+        _parserFactory = mapper._jsonFactory;\n         _rootNames = mapper._rootNames;\n         _valueType = valueType;\n         _valueToUpdate = valueToUpdate;\n         _context = base._context;\n \n         _rootDeserializers = base._rootDeserializers;\n-        _jsonFactory = base._jsonFactory;\n+        _parserFactory = base._parserFactory;\n         _rootNames = base._rootNames;\n \n         _valueType = valueType;\n         _context = base._context;\n \n         _rootDeserializers = base._rootDeserializers;\n-        _jsonFactory = base._jsonFactory;\n+        _parserFactory = base._parserFactory;\n         _rootNames = base._rootNames;\n \n         _valueType = base._valueType;\n         _context = base._context;\n \n         _rootDeserializers = base._rootDeserializers;\n-        _jsonFactory = f;\n+        _parserFactory = f;\n         _rootNames = base._rootNames;\n \n         _valueType = base._valueType;\n      * @since 2.1\n      */\n     public ObjectReader with(JsonFactory f) {\n-        if (f == _jsonFactory) {\n+        if (f == _parserFactory) {\n             return this;\n         }\n         ObjectReader r = new ObjectReader(this, f);\n     }\n \n     public boolean isEnabled(JsonParser.Feature f) {\n-        return _jsonFactory.isEnabled(f);\n+        return _parserFactory.isEnabled(f);\n     }\n \n     /**\n      */\n     @Override\n     public JsonFactory getFactory() {\n-        return _jsonFactory;\n+        return _parserFactory;\n     }\n     \n     /**\n     @Deprecated\n     @Override\n     public JsonFactory getJsonFactory() {\n-        return _jsonFactory;\n+        return _parserFactory;\n     }\n \n     public TypeFactory getTypeFactory() {\n         if (_dataFormatReaders != null) {\n             return (T) _detectBindAndClose(_dataFormatReaders.findFormat(src), false);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(src);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate);\n     }\n     \n     /**\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(src);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             return (T) _detectBindAndClose(src, 0, src.length);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             return (T) _detectBindAndClose(src, offset, length);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createParser(src, offset, length), _valueToUpdate);\n+        return (T) _bindAndClose(_parserFactory.createParser(src, offset, length), _valueToUpdate);\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n         if (_dataFormatReaders != null) {\n             return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             return _detectBindAndCloseAsTree(in);\n         }\n-        return _bindAndCloseAsTree(_jsonFactory.createParser(in));\n+        return _bindAndCloseAsTree(_parserFactory.createParser(in));\n     }\n     \n     /**\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(r);\n         }\n-        return _bindAndCloseAsTree(_jsonFactory.createParser(r));\n+        return _bindAndCloseAsTree(_parserFactory.createParser(r));\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(json);\n         }\n-        return _bindAndCloseAsTree(_jsonFactory.createParser(json));\n+        return _bindAndCloseAsTree(_parserFactory.createParser(json));\n     }\n \n     /*\n         if (_dataFormatReaders != null) {\n             return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n         }\n-        return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate);\n+        return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate);\n     }\n     \n     /**\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(src);\n         }\n-        JsonParser jp = _jsonFactory.createParser(src);\n+        JsonParser jp = _parserFactory.createParser(src);\n         if (_schema != null) {\n             jp.setSchema(_schema);\n         }\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(json);\n         }\n-        JsonParser jp = _jsonFactory.createParser(json);\n+        JsonParser jp = _parserFactory.createParser(json);\n         if (_schema != null) {\n             jp.setSchema(_schema);\n         }\n         if (_dataFormatReaders != null) {\n             return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n         }\n-        return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate);\n+        return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n             return _detectBindAndReadValues(\n                     _dataFormatReaders.findFormat(_inputStream(src)), false);\n         }\n-        return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate);\n+        return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n             return _detectBindAndReadValues(\n                     _dataFormatReaders.findFormat(_inputStream(src)), true);\n         }\n-        return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate);\n+        return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate);\n     }\n \n     /*\n     protected void _verifySchemaType(FormatSchema schema)\n     {\n         if (schema != null) {\n-            if (!_jsonFactory.canUseSchema(schema)) {\n+            if (!_parserFactory.canUseSchema(schema)) {\n                     throw new IllegalArgumentException(\"Can not use FormatSchema of type \"+schema.getClass().getName()\n-                            +\" for format \"+_jsonFactory.getFormatName());\n+                            +\" for format \"+_parserFactory.getFormatName());\n             }\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n     implements Versioned,\n         java.io.Serializable // since 2.1\n {\n-    private static final long serialVersionUID = -7024829992408267532L;\n+    private static final long serialVersionUID = -7040667122552707164L;\n \n     /**\n      * We need to keep track of explicit disabling of pretty printing;\n     /**\n      * Factory used for constructing {@link JsonGenerator}s\n      */\n-    protected final JsonFactory _jsonFactory;\n-    \n-    /*\n-    /**********************************************************\n-    /* Configuration that can be changed during building\n+    protected final JsonFactory _generatorFactory;\n+\n+    /*\n+    /**********************************************************\n+    /* Configuration that can be changed via mutant factories\n     /**********************************************************\n      */\n \n \n     /*\n     /**********************************************************\n+    /* Derived settings\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * @since 2.3\n+     */\n+    protected final boolean  _cfgBigDecimalAsPlain;\n+\n+    /*\n+    /**********************************************************\n     /* Life-cycle, constructors\n     /**********************************************************\n      */\n             JavaType rootType, PrettyPrinter pp)\n     {\n         _config = config;\n+        _cfgBigDecimalAsPlain = _config.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n \n         _serializerProvider = mapper._serializerProvider;\n         _serializerFactory = mapper._serializerFactory;\n-        _jsonFactory = mapper._jsonFactory;\n+        _generatorFactory = mapper._jsonFactory;\n \n         if (rootType != null) {\n             rootType = rootType.withStaticTyping();\n     protected ObjectWriter(ObjectMapper mapper, SerializationConfig config)\n     {\n         _config = config;\n+        _cfgBigDecimalAsPlain = _config.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n \n         _serializerProvider = mapper._serializerProvider;\n         _serializerFactory = mapper._serializerFactory;\n-        _jsonFactory = mapper._jsonFactory;\n+        _generatorFactory = mapper._jsonFactory;\n \n         _rootType = null;\n         _rootSerializer = null;\n             FormatSchema s)\n     {\n         _config = config;\n+        _cfgBigDecimalAsPlain = _config.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n \n         _serializerProvider = mapper._serializerProvider;\n         _serializerFactory = mapper._serializerFactory;\n-        _jsonFactory = mapper._jsonFactory;\n+        _generatorFactory = mapper._jsonFactory;\n \n         _rootType = null;\n         _rootSerializer = null;\n             PrettyPrinter pp, FormatSchema s, CharacterEscapes escapes)\n     {\n         _config = config;\n+        _cfgBigDecimalAsPlain = _config.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n \n         _serializerProvider = base._serializerProvider;\n         _serializerFactory = base._serializerFactory;\n-        _jsonFactory = base._jsonFactory;\n+        _generatorFactory = base._generatorFactory;\n \n         _rootType = rootType;\n         _rootSerializer = rootSer;\n     protected ObjectWriter(ObjectWriter base, SerializationConfig config)\n     {\n         _config = config;\n+        _cfgBigDecimalAsPlain = _config.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n \n         _serializerProvider = base._serializerProvider;\n         _serializerFactory = base._serializerFactory;\n-        _jsonFactory = base._jsonFactory;\n+        _generatorFactory = base._generatorFactory;\n         _schema = base._schema;\n         _characterEscapes = base._characterEscapes;\n \n     }\n \n     public boolean isEnabled(JsonParser.Feature f) {\n-        return _jsonFactory.isEnabled(f);\n+        return _generatorFactory.isEnabled(f);\n     }\n \n     /**\n      */\n     @Deprecated\n     public JsonFactory getJsonFactory() {\n-        return _jsonFactory;\n+        return _generatorFactory;\n     }\n \n     /**\n      * @since 2.2\n      */\n     public JsonFactory getFactory() {\n-        return _jsonFactory;\n+        return _generatorFactory;\n     }\n     \n     public TypeFactory getTypeFactory() {\n     public void writeValue(File resultFile, Object value)\n         throws IOException, JsonGenerationException, JsonMappingException\n     {\n-        _configAndWriteValue(_jsonFactory.createGenerator(resultFile, JsonEncoding.UTF8), value);\n+        _configAndWriteValue(_generatorFactory.createGenerator(resultFile, JsonEncoding.UTF8), value);\n     }\n \n     /**\n     public void writeValue(OutputStream out, Object value)\n         throws IOException, JsonGenerationException, JsonMappingException\n     {\n-        _configAndWriteValue(_jsonFactory.createGenerator(out, JsonEncoding.UTF8), value);\n+        _configAndWriteValue(_generatorFactory.createGenerator(out, JsonEncoding.UTF8), value);\n     }\n \n     /**\n     public void writeValue(Writer w, Object value)\n         throws IOException, JsonGenerationException, JsonMappingException\n     {\n-        _configAndWriteValue(_jsonFactory.createGenerator(w), value);\n+        _configAndWriteValue(_generatorFactory.createGenerator(w), value);\n     }\n \n     /**\n         throws JsonProcessingException\n     {        \n         // alas, we have to pull the recycler directly here...\n-        SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n+        SegmentedStringWriter sw = new SegmentedStringWriter(_generatorFactory._getBufferRecycler());\n         try {\n-            _configAndWriteValue(_jsonFactory.createGenerator(sw), value);\n+            _configAndWriteValue(_generatorFactory.createGenerator(sw), value);\n         } catch (JsonProcessingException e) { // to support [JACKSON-758]\n             throw e;\n         } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:\n     public byte[] writeValueAsBytes(Object value)\n         throws JsonProcessingException\n     {\n-        ByteArrayBuilder bb = new ByteArrayBuilder(_jsonFactory._getBufferRecycler());\n+        ByteArrayBuilder bb = new ByteArrayBuilder(_generatorFactory._getBufferRecycler());\n         try {\n-            _configAndWriteValue(_jsonFactory.createGenerator(bb, JsonEncoding.UTF8), value);\n+            _configAndWriteValue(_generatorFactory.createGenerator(bb, JsonEncoding.UTF8), value);\n         } catch (JsonProcessingException e) { // to support [JACKSON-758]\n             throw e;\n         } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:\n     protected void _verifySchemaType(FormatSchema schema)\n     {\n         if (schema != null) {\n-            if (!_jsonFactory.canUseSchema(schema)) {\n+            if (!_generatorFactory.canUseSchema(schema)) {\n                     throw new IllegalArgumentException(\"Can not use FormatSchema of type \"+schema.getClass().getName()\n-                            +\" for format \"+_jsonFactory.getFormatName());\n+                            +\" for format \"+_generatorFactory.getFormatName());\n             }\n         }\n     }\n         if (_schema != null) {\n             jgen.setSchema(_schema);\n         }\n+        if (_cfgBigDecimalAsPlain) { // should only set if explicitly set; this should work for now:\n+            jgen.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n+        }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.databind.SerializationFeature;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.util.TokenBuffer;\n-\n+import com.fasterxml.jackson.databind.*;\n \n /**\n  * Numeric node that contains values that do not fit in simple\n     public final void serialize(JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonProcessingException\n     {\n+        // 07-Jul-2013, tatu: Should be handled by propagating setting to JsonGenerator\n+        //    so this should not be needed:\n+        /*\n         if (provider.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n             if (!(jgen instanceof TokenBuffer)) { // [Issue#232]\n                 jgen.writeNumber(((BigDecimal) _value).toPlainString());\n                 return;\n             }\n         }\n+        */\n         jgen.writeNumber(_value);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n         {\n             // As per [JACKSON-423], handling for BigInteger and BigDecimal was missing!\n             if (value instanceof BigDecimal) {\n+                // 07-Jul-2013, tatu: Should be handled by propagating setting to JsonGenerator\n+                //    so this should not be needed:\n+                /*\n                 if (provider.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n                     // [Issue#232]: Ok, rather clumsy, but let's try to work around the problem with:\n                     if (!(jgen instanceof TokenBuffer)) {\n                         return;\n                     }\n                 }\n+                */\n                 jgen.writeNumber((BigDecimal) value);\n             } else if (value instanceof BigInteger) {\n                 jgen.writeNumber((BigInteger) value);\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n         final JsonNode node = mapper.readTree(INPUT);\n         String result = mapper.writeValueAsString(node);\n         assertEquals(\"{\\\"x\\\":100}\", result);\n+\n+        // also via ObjectWriter:\n+        assertEquals(\"{\\\"x\\\":100}\", mapper.writer().writeValueAsString(node));\n     }\n }", "timestamp": 1373259448, "metainfo": ""}