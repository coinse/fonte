{"sha": "688cbc1ed6952b3f94c01c8cdb5b067589b83f66", "log": "Add graceful handling of primitive types for key lookups", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n     // // Configuration: typing, deserializers\n \n     protected final JavaType _mapType;\n-    \n+\n     /**\n      * Key deserializer to use; either passed via constructor\n      * (when indicated by annotations), or resolved when\n      * If both are true, can optimize handling.\n      */\n     protected boolean _standardStringKey;\n-    \n+\n     /**\n      * Value deserializer.\n      */\n      * to be used for deserializing from JSON Object.\n      */\n     protected JsonDeserializer<Object> _delegateDeserializer;\n-    \n+\n     /**\n      * If the Map is to be instantiated using non-default constructor\n      * or factory method\n      * this creator is used for instantiation.\n      */\n     protected PropertyBasedCreator _propertyBasedCreator;    \n-    \n+\n     // // Any properties to ignore if seen?\n     \n     protected HashSet<String> _ignorableProperties;\n         return new MapDeserializer(this,\n                 keyDeser, (JsonDeserializer<Object>) valueDeser, valueTypeDeser, ignorable);\n     }\n-    \n+\n     /**\n      * Helper method used to check whether we can just use the default key\n      * deserialization, where JSON String becomes Java String.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n         if (raw == UUID.class) {\n             return new StdKeyDeserializer.UuidKD();\n         }\n+        \n+        // 23-Apr-2013, tatu: Map primitive types, just in case one was given\n+        if (raw.isPrimitive()) {\n+            raw = ClassUtil.wrapperType(raw);\n+        }\n+        \n         if (raw == Integer.class) {\n             return new StdKeyDeserializer.IntKD();\n         }", "timestamp": 1366783106, "metainfo": ""}