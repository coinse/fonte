{"sha": "9b99cfebd36494b43fc71d821a9b7874ab636776", "log": "Improve unit testing for trees vs polymorphic", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n             TimeZone.getTimeZone(\"GMT\"),\n             Base64Variants.getDefaultVariant() // 2.1\n     );\n-    \n+\n     /*\n     /**********************************************************\n     /* Configuration settings, shared\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeWithType.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestTreeWithType extends BaseMapTest\n+{\n+    public static class Foo {\n+        public String bar;\n+\n+        public Foo() { }\n+\n+        public Foo(String bar) {\n+            this.bar = bar;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testValueAsStringWithoutDefaultTyping() throws Exception {\n+\n+        Foo foo = new Foo(\"baz\");\n+        String json = MAPPER.writeValueAsString(foo);\n+\n+        JsonNode jsonNode = MAPPER.readTree(json);\n+        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n+    }\n+\n+    public void testValueAsStringWithDefaultTyping() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n+\n+        Foo foo = new Foo(\"baz\");\n+        String json = mapper.writeValueAsString(foo);\n+\n+        JsonNode jsonNode = mapper.readTree(json);\n+        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n+    }\n+\n+    public void testReadTreeWithDefaultTyping() throws Exception\n+    {\n+        final String CLASS = Foo.class.getName();\n+\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL,\n+                JsonTypeInfo.As.PROPERTY);\n+        String json = \"{\\\"@class\\\":\\\"\"+CLASS+\"\\\",\\\"bar\\\":\\\"baz\\\"}\";\n+        JsonNode jsonNode = mapper.readTree(json);\n+        assertEquals(jsonNode.get(\"bar\").textValue(), \"baz\");\n+    }\n+\n+    public void testValueToTreeWithoutDefaultTyping() throws Exception {\n+\n+        Foo foo = new Foo(\"baz\");\n+        JsonNode jsonNode = MAPPER.valueToTree(foo);\n+        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n+    }\n+\n+    public void testValueToTreeWithDefaultTyping() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n+\n+        Foo foo = new Foo(\"baz\");\n+        JsonNode jsonNode = mapper.valueToTree(foo);\n+        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/failing/TestTreeWithType.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestTreeWithType.java\n package com.fasterxml.jackson.failing;\n \n-import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n \n public class TestTreeWithType extends BaseMapTest\n {\n-    public static class Foo {\n-        public String bar;\n \n-        public Foo() { }\n+    // [Issue#353]\n+    public class SavedCookie {\n+        public String name, value;\n \n-        public Foo(String bar) {\n-            this.bar = bar;\n+        public SavedCookie() { }\n+        public SavedCookie(String n, String v) {\n+            name = n;\n+            value = v;\n         }\n     }\n-    \n+\n+    public class SavedCookieDeserializer extends JsonDeserializer<SavedCookie> {\n+        @Override\n+        public SavedCookie deserialize(JsonParser jsonParser, DeserializationContext ctxt)\n+                throws IOException {\n+           ObjectCodec oc = jsonParser.getCodec();\n+           JsonNode node = oc.readTree(jsonParser);\n+           return new SavedCookie(node.path(\"name\").textValue(),\n+                   node.path(\"value\").textValue());\n+        }\n+     }    \n     /*\n     /**********************************************************\n     /* Unit tests\n     /**********************************************************\n      */\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n+    public void testIssue353() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n \n-    public void testValueAsStringWithoutDefaultTyping() throws Exception {\n+        mapper.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL, \"@class\");\n \n-        Foo foo = new Foo(\"baz\");\n-        String json = mapper.writeValueAsString(foo);\n+         SimpleModule testModule = new SimpleModule(\"MyModule\", new Version(1, 0, 0, null, \"TEST\", \"TEST\"));\n+         testModule.addDeserializer(SavedCookie.class, new SavedCookieDeserializer());\n+         mapper.registerModule(testModule);\n \n-        JsonNode jsonNode = mapper.readTree(json);\n-        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n-    }\n+         SavedCookie savedCookie = new SavedCookie(\"key\", \"v\");\n+         String json = mapper.writeValueAsString(savedCookie);\n+         \n+         SavedCookie out = mapper.reader(SavedCookie.class).readValue(json);\n \n-    public void testValueAsStringWithDefaultTyping() throws Exception {\n-        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n-\n-        Foo foo = new Foo(\"baz\");\n-        String json = mapper.writeValueAsString(foo);\n-\n-        JsonNode jsonNode = mapper.readTree(json);\n-        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n-    }\n-\n-    public void testReadTreeWithDefaultTyping() throws Exception\n-    {\n-        final String CLASS = Foo.class.getName();\n-\n-        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL,\n-                JsonTypeInfo.As.PROPERTY);\n-        String json = \"{\\\"@class\\\":\\\"\"+CLASS+\"\\\",\\\"bar\\\":\\\"baz\\\"}\";\n-        JsonNode jsonNode = mapper.readTree(json);\n-        assertEquals(jsonNode.get(\"bar\").textValue(), \"baz\");\n-    }\n-\n-    public void testValueToTreeWithoutDefaultTyping() throws Exception {\n-\n-        Foo foo = new Foo(\"baz\");\n-        JsonNode jsonNode = mapper.valueToTree(foo);\n-        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n-    }\n-\n-    public void testValueToTreeWithDefaultTyping() throws Exception {\n-        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);\n-\n-        Foo foo = new Foo(\"baz\");\n-        JsonNode jsonNode = mapper.valueToTree(foo);\n-        assertEquals(jsonNode.get(\"bar\").textValue(), foo.bar);\n+         assertEquals(\"key\", out.name);\n+         assertEquals(\"v\", out.value);\n     }\n }", "timestamp": 1394826277, "metainfo": ""}