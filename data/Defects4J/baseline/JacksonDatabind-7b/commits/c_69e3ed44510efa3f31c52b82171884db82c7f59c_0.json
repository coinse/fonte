{"sha": "69e3ed44510efa3f31c52b82171884db82c7f59c", "log": "Changed the way DeserializerFactory config is handled, less cluttered now", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n import java.lang.reflect.Method;\n import java.util.*;\n import java.util.concurrent.*;\n-import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.core.JsonNode;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;\n+import com.fasterxml.jackson.databind.deser.impl.DeserializerFactoryConfig;\n import com.fasterxml.jackson.databind.deser.std.*;\n import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;\n import com.fasterxml.jackson.databind.introspect.*;\n      * Configuration settings for this factory; immutable instance (just like this\n      * factory), new version created via copy-constructor (fluent-style)\n      */\n-    protected final Config _factoryConfig;\n+    protected final DeserializerFactoryConfig _factoryConfig;\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n-    protected BasicDeserializerFactory(Config config) {\n+    protected BasicDeserializerFactory(DeserializerFactoryConfig config) {\n         _factoryConfig = config;\n     }\n-\n-    @Override\n-    public final Config getConfig() {\n-        return _factoryConfig;\n-    }\n-    \n-    // can't be implemented quite here\n-    @Override\n-    public abstract DeserializerFactory withConfig(DeserializerFactory.Config config);\n+    \n+    protected abstract DeserializerFactory withConfig(DeserializerFactoryConfig config);\n     \n     /*\n-    /**********************************************************\n-    /* Methods for sub-classes to override to provide\n-    /* custom deserializers\n-    /**********************************************************\n-     */\n-    \n-    protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n-            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findArrayDeserializer(type, config,\n-                    beanDesc, property, elementTypeDeserializer, elementDeserializer);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-    \n-    protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n-            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc, property,\n-                    elementTypeDeserializer, elementDeserializer);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n-            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc, property,\n-                    elementTypeDeserializer, elementDeserializer);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-    \n-    protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n-            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc, property);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n-            DeserializationConfig config, \n-            BeanDescription beanDesc, BeanProperty property,\n-            KeyDeserializer keyDeserializer,\n-            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc, property,\n-                    keyDeserializer, elementTypeDeserializer, elementDeserializer);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property,\n-            KeyDeserializer keyDeserializer,\n-            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc, property,\n-                    keyDeserializer, elementTypeDeserializer, elementDeserializer);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n-    }\n-    \n-    protected JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type,\n-            DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        for (Deserializers d  : _factoryConfig.deserializers()) {\n-            JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, beanDesc, property);\n-            if (deser != null) {\n-                return deser;\n-            }\n-        }\n-        return null;\n+    /********************************************************\n+    /* Configuration handling: fluent factories\n+    /********************************************************\n+     */\n+\n+    /**\n+     * Convenience method for creating a new factory instance with additional deserializer\n+     * provider.\n+     */\n+    public final DeserializerFactory withAdditionalDeserializers(Deserializers additional) {\n+        return withConfig(_factoryConfig.withAdditionalDeserializers(additional));\n+    }\n+\n+    /**\n+     * Convenience method for creating a new factory instance with additional\n+     * {@link KeyDeserializers}.\n+     */\n+    public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional) {\n+        return withConfig(_factoryConfig.withAdditionalKeyDeserializers(additional));\n+    }\n+    \n+    /**\n+     * Convenience method for creating a new factory instance with additional\n+     * {@link BeanDeserializerModifier}.\n+     */\n+    public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier) {\n+        return withConfig(_factoryConfig.withDeserializerModifier(modifier));\n+    }\n+\n+    /**\n+     * Convenience method for creating a new factory instance with additional\n+     * {@link AbstractTypeResolver}.\n+     */\n+    public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver) {\n+        return withConfig(_factoryConfig.withAbstractTypeResolver(resolver));\n+    }\n+\n+    /**\n+     * Convenience method for creating a new factory instance with additional\n+     * {@link ValueInstantiators}.\n+     */\n+    public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators) {\n+        return withConfig(_factoryConfig.withValueInstantiators(instantiators));\n     }\n \n     /*\n     \n     /*\n     /**********************************************************\n-    /* JsonDeserializerFactory impl (partial): actual\n-    /* deserializer factory methods\n+    /* JsonDeserializerFactory impl: array deserializers\n     /**********************************************************\n      */\n         \n         }\n         return new ObjectArrayDeserializer(type, property, contentDeser, elemTypeDeser);\n     }\n+\n+    protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findArrayDeserializer(type, config,\n+                    beanDesc, property, elementTypeDeserializer, elementDeserializer);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* JsonDeserializerFactory impl: Collection(-like) deserializers\n+    /**********************************************************\n+     */\n     \n     @Override\n     public JsonDeserializer<?> createCollectionDeserializer(DeserializationContext ctxt,\n         return _findCustomCollectionLikeDeserializer(type, ctxt.getConfig(), beanDesc, property,\n                 contentTypeDeser, contentDeser);\n     }\n+  \n+    protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc, property,\n+                    elementTypeDeserializer, elementDeserializer);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc, property,\n+                    elementTypeDeserializer, elementDeserializer);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* JsonDeserializerFactory impl: Map(-like) deserializers\n+    /**********************************************************\n+     */\n     \n     @Override\n     public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,\n                 beanDesc, property, keyDes, contentTypeDeser, contentDeser);\n     }\n \n+    protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n+            DeserializationConfig config, \n+            BeanDescription beanDesc, BeanProperty property,\n+            KeyDeserializer keyDeserializer,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc, property,\n+                    keyDeserializer, elementTypeDeserializer, elementDeserializer);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property,\n+            KeyDeserializer keyDeserializer,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc, property,\n+                    keyDeserializer, elementTypeDeserializer, elementDeserializer);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* JsonDeserializerFactory impl: Enum deserializers\n+    /**********************************************************\n+     */\n+    \n     /**\n      * Factory method for constructing serializers of {@link Enum} types.\n      */\n         return new EnumDeserializer(constructEnumResolver(enumClass, ctxt.getConfig(), beanDesc.findJsonValueMethod()));\n     }\n \n+    protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n+            DeserializationConfig config, BeanDescription beanDesc, BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc, property);\n+            if (deser != null) {\n+                return deser;\n+            }\n+        }\n+        return null;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* JsonDeserializerFactory impl: Tree deserializers\n+    /**********************************************************\n+     */\n+    \n     @Override\n     public JsonDeserializer<?> createTreeDeserializer(DeserializationConfig config,\n             JavaType nodeType, BeanDescription beanDesc, BeanProperty property)\n         return JsonNodeDeserializer.getDeserializer(nodeClass);\n     }\n \n-    /**\n-     * Method called by {@link BeanDeserializerFactory} to see if there might be a standard\n-     * deserializer registered for given type.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    protected JsonDeserializer<Object> findStdBeanDeserializer(DeserializationConfig config,\n-            JavaType type, BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        Class<?> cls = type.getRawClass();\n-        // note: we do NOT check for custom deserializers here; that's for sub-class to do\n-        JsonDeserializer<Object> deser = _simpleDeserializers.get(new ClassKey(cls));\n-        if (deser != null) {\n-            return deser;\n-        }\n-        \n-        // [JACKSON-283]: AtomicReference is a rather special type...\n-        if (AtomicReference.class.isAssignableFrom(cls)) {\n-            // Must find parameterization\n-            TypeFactory tf = config.getTypeFactory();\n-            JavaType[] params = tf.findTypeParameters(type, AtomicReference.class);\n-            JavaType referencedType;\n-            if (params == null || params.length < 1) { // untyped (raw)\n-                referencedType = TypeFactory.unknownType();\n-            } else {\n-                referencedType = params[0];\n-            }\n-            \n-            JsonDeserializer<?> d2 = new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n-            return (JsonDeserializer<Object>)d2;\n-        }\n-        // [JACKSON-386]: External/optional type handlers are handled somewhat differently\n-        JsonDeserializer<?> d = optionalHandlers.findDeserializer(type, config);\n-        if (d != null) {\n-            return (JsonDeserializer<Object>)d;\n+    protected JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type,\n+            DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        for (Deserializers d  : _factoryConfig.deserializers()) {\n+            JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, beanDesc, property);\n+            if (deser != null) {\n+                return deser;\n+            }\n         }\n         return null;\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* JsonDeserializerFactory impl (partial): type deserializers\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n \n import java.lang.reflect.Type;\n import java.util.*;\n+import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.deser.impl.DeserializerFactoryConfig;\n+import com.fasterxml.jackson.databind.deser.std.JdkDeserializers;\n import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.type.ClassKey;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition;\n      * Signature of <b>Throwable.initCause</b> method.\n      */\n     private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };\n-    \n-    /*\n-    /**********************************************************\n-    /* Config class implementation\n-    /**********************************************************\n-     */\n-    \n-    /**\n-     * Standard configuration settings container class implementation.\n-     */\n-    public static class ConfigImpl extends Config\n-    {\n-        protected final static KeyDeserializers[] NO_KEY_DESERIALIZERS = new KeyDeserializers[0];\n-        protected final static BeanDeserializerModifier[] NO_MODIFIERS = new BeanDeserializerModifier[0];\n-        protected final static AbstractTypeResolver[] NO_ABSTRACT_TYPE_RESOLVERS = new AbstractTypeResolver[0];\n-        protected final static ValueInstantiators[] NO_VALUE_INSTANTIATORS = new ValueInstantiators[0];\n-        \n-        /**\n-         * List of providers for additional deserializers, checked before considering default\n-         * basic or bean deserializers.\n-         */\n-        protected final Deserializers[] _additionalDeserializers;\n-\n-        /**\n-         * List of providers for additional key deserializers, checked before considering\n-         * standard key deserializers.\n-         */\n-        protected final KeyDeserializers[] _additionalKeyDeserializers;\n-        \n-        /**\n-         * List of modifiers that can change the way {@link BeanDeserializer} instances\n-         * are configured and constructed.\n-         */\n-        protected final BeanDeserializerModifier[] _modifiers;\n-\n-        /**\n-         * List of objects that may be able to resolve abstract types to\n-         * concrete types. Used by functionality like \"mr Bean\" to materialize\n-         * types as needed.\n-         */\n-        protected final AbstractTypeResolver[] _abstractTypeResolvers;\n-\n-        /**\n-         * List of objects that know how to create instances of POJO types;\n-         * possibly using custom construction (non-annoted constructors; factory\n-         * methods external to value type etc).\n-         * Used to support objects that are created using non-standard methods;\n-         * or to support post-constructor functionality.\n-         */\n-        protected final ValueInstantiators[] _valueInstantiators;\n-        \n-        /**\n-         * Constructor for creating basic configuration with no additional\n-         * handlers.\n-         */\n-        public ConfigImpl() {\n-            this(null, null, null, null, null);\n-        }\n-\n-        /**\n-         * Copy-constructor that will create an instance that contains defined\n-         * set of additional deserializer providers.\n-         */\n-        protected ConfigImpl(Deserializers[] allAdditionalDeserializers,\n-                KeyDeserializers[] allAdditionalKeyDeserializers,\n-                BeanDeserializerModifier[] modifiers,\n-                AbstractTypeResolver[] atr,\n-                ValueInstantiators[] vi)\n-        {\n-            _additionalDeserializers = (allAdditionalDeserializers == null) ?\n-                    NO_DESERIALIZERS : allAdditionalDeserializers;\n-            _additionalKeyDeserializers = (allAdditionalKeyDeserializers == null) ?\n-                    NO_KEY_DESERIALIZERS : allAdditionalKeyDeserializers;\n-            _modifiers = (modifiers == null) ? NO_MODIFIERS : modifiers;\n-            _abstractTypeResolvers = (atr == null) ? NO_ABSTRACT_TYPE_RESOLVERS : atr;\n-            _valueInstantiators = (vi == null) ? NO_VALUE_INSTANTIATORS : vi;\n-        }\n-\n-        @Override\n-        public Config withAdditionalDeserializers(Deserializers additional)\n-        {\n-            if (additional == null) {\n-                throw new IllegalArgumentException(\"Can not pass null Deserializers\");\n-            }\n-            Deserializers[] all = ArrayBuilders.insertInListNoDup(_additionalDeserializers, additional);\n-            return new ConfigImpl(all, _additionalKeyDeserializers, _modifiers,\n-                    _abstractTypeResolvers, _valueInstantiators);\n-        }\n-\n-        @Override\n-        public Config withAdditionalKeyDeserializers(KeyDeserializers additional)\n-        {\n-            if (additional == null) {\n-                throw new IllegalArgumentException(\"Can not pass null KeyDeserializers\");\n-            }\n-            KeyDeserializers[] all = ArrayBuilders.insertInListNoDup(_additionalKeyDeserializers, additional);\n-            return new ConfigImpl(_additionalDeserializers, all, _modifiers,\n-                    _abstractTypeResolvers, _valueInstantiators);\n-        }\n-        \n-        @Override\n-        public Config withDeserializerModifier(BeanDeserializerModifier modifier)\n-        {\n-            if (modifier == null) {\n-                throw new IllegalArgumentException(\"Can not pass null modifier\");\n-            }\n-            BeanDeserializerModifier[] all = ArrayBuilders.insertInListNoDup(_modifiers, modifier);\n-            return new ConfigImpl(_additionalDeserializers, _additionalKeyDeserializers, all,\n-                    _abstractTypeResolvers, _valueInstantiators);\n-        }\n-\n-        @Override\n-        public Config withAbstractTypeResolver(AbstractTypeResolver resolver)\n-        {\n-            if (resolver == null) {\n-                throw new IllegalArgumentException(\"Can not pass null resolver\");\n-            }\n-            AbstractTypeResolver[] all = ArrayBuilders.insertInListNoDup(_abstractTypeResolvers, resolver);\n-            return new ConfigImpl(_additionalDeserializers, _additionalKeyDeserializers, _modifiers,\n-                    all, _valueInstantiators);\n-        }\n-\n-        @Override\n-        public Config withValueInstantiators(ValueInstantiators instantiators) \n-        {\n-            if (instantiators == null) {\n-                throw new IllegalArgumentException(\"Can not pass null resolver\");\n-            }\n-            ValueInstantiators[] all = ArrayBuilders.insertInListNoDup(_valueInstantiators, instantiators);\n-            return new ConfigImpl(_additionalDeserializers, _additionalKeyDeserializers, _modifiers,\n-                    _abstractTypeResolvers, all);\n-        }\n-        \n-        @Override\n-        public boolean hasDeserializers() { return _additionalDeserializers.length > 0; }\n-\n-        @Override\n-        public boolean hasKeyDeserializers() { return _additionalKeyDeserializers.length > 0; }\n-        \n-        @Override\n-        public boolean hasDeserializerModifiers() { return _modifiers.length > 0; }\n-\n-        @Override\n-        public boolean hasAbstractTypeResolvers() { return _abstractTypeResolvers.length > 0; }\n-\n-        @Override\n-        public boolean hasValueInstantiators() { return _valueInstantiators.length > 0; }\n-        \n-        @Override\n-        public Iterable<Deserializers> deserializers() {\n-            return ArrayBuilders.arrayAsIterable(_additionalDeserializers);\n-        }\n-\n-        @Override\n-        public Iterable<KeyDeserializers> keyDeserializers() {\n-            return ArrayBuilders.arrayAsIterable(_additionalKeyDeserializers);\n-        }\n-        \n-        @Override\n-        public Iterable<BeanDeserializerModifier> deserializerModifiers() {\n-            return ArrayBuilders.arrayAsIterable(_modifiers);\n-        }\n-\n-        @Override\n-        public Iterable<AbstractTypeResolver> abstractTypeResolvers() {\n-            return ArrayBuilders.arrayAsIterable(_abstractTypeResolvers);\n-        }\n-\n-        @Override\n-        public Iterable<ValueInstantiators> valueInstantiators() {\n-            return ArrayBuilders.arrayAsIterable(_valueInstantiators);\n-        }\n-    }\n-    \n+\n     /*\n     /**********************************************************\n     /* Life-cycle\n      * Globally shareable thread-safe instance which has no additional custom deserializers\n      * registered\n      */\n-    public final static BeanDeserializerFactory instance = new BeanDeserializerFactory(null);\n-\n-    public BeanDeserializerFactory(DeserializerFactory.Config config)\n-    {\n-        super((config == null) ? new ConfigImpl() : config);\n+    public final static BeanDeserializerFactory instance = new BeanDeserializerFactory(\n+            new DeserializerFactoryConfig());\n+\n+    public BeanDeserializerFactory(DeserializerFactoryConfig config) {\n+        super(config);\n     }\n     \n     /**\n      * with different configuration settings.\n      */\n     @Override\n-    public DeserializerFactory withConfig(DeserializerFactory.Config config)\n+    public DeserializerFactory withConfig(DeserializerFactoryConfig config)\n     {\n         if (_factoryConfig == config) {\n             return this;\n         }\n-\n         /* 22-Nov-2010, tatu: Handling of subtypes is tricky if we do immutable-with-copy-ctor;\n          *    and we pretty much have to here either choose between losing subtype instance\n          *    when registering additional deserializers, or losing deserializers.\n         }\n         // Use generic bean introspection to build deserializer\n         return buildBeanDeserializer(ctxt, type, beanDesc, property);\n+    }\n+    \n+    /**\n+     * Method called by {@link BeanDeserializerFactory} to see if there might be a standard\n+     * deserializer registered for given type.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    protected JsonDeserializer<Object> findStdBeanDeserializer(DeserializationConfig config,\n+            JavaType type, BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        Class<?> cls = type.getRawClass();\n+        // note: we do NOT check for custom deserializers here; that's for sub-class to do\n+        JsonDeserializer<Object> deser = _simpleDeserializers.get(new ClassKey(cls));\n+        if (deser != null) {\n+            return deser;\n+        }\n+        \n+        // [JACKSON-283]: AtomicReference is a rather special type...\n+        if (AtomicReference.class.isAssignableFrom(cls)) {\n+            // Must find parameterization\n+            TypeFactory tf = config.getTypeFactory();\n+            JavaType[] params = tf.findTypeParameters(type, AtomicReference.class);\n+            JavaType referencedType;\n+            if (params == null || params.length < 1) { // untyped (raw)\n+                referencedType = TypeFactory.unknownType();\n+            } else {\n+                referencedType = params[0];\n+            }\n+            \n+            JsonDeserializer<?> d2 = new JdkDeserializers.AtomicReferenceDeserializer(referencedType, property);\n+            return (JsonDeserializer<Object>)d2;\n+        }\n+        // [JACKSON-386]: External/optional type handlers are handled somewhat differently\n+        JsonDeserializer<?> d = optionalHandlers.findDeserializer(type, config);\n+        if (d != null) {\n+            return (JsonDeserializer<Object>)d;\n+        }\n+        return null;\n     }\n     \n     protected JavaType materializeAbstractType(DeserializationConfig config,\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n     protected final static Deserializers[] NO_DESERIALIZERS = new Deserializers[0];\n \n     /*\n-    /**********************************************************\n-    /* Helper class to contain configuration settings\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Configuration settings container class for bean deserializer factory\n-     */\n-    public abstract static class Config\n-    {\n-        /**\n-         * Fluent/factory method used to construct a configuration object that\n-         * has same deserializer providers as this instance, plus one specified\n-         * as argument. Additional provider will be added before existing ones,\n-         * meaning it has priority over existing definitions.\n-         */\n-        public abstract Config withAdditionalDeserializers(Deserializers additional);\n-\n-        /**\n-         * Fluent/factory method used to construct a configuration object that\n-         * has same key deserializer providers as this instance, plus one specified\n-         * as argument. Additional provider will be added before existing ones,\n-         * meaning it has priority over existing definitions.\n-         */\n-        public abstract Config withAdditionalKeyDeserializers(KeyDeserializers additional);\n-        \n-        /**\n-         * Fluent/factory method used to construct a configuration object that\n-         * has same configuration as this instance plus one additional\n-         * deserialiazer modifier. Added modifier has the highest priority (that is, it\n-         * gets called before any already registered modifier).\n-         */\n-        public abstract Config withDeserializerModifier(BeanDeserializerModifier modifier);\n-\n-        /**\n-         * Fluent/factory method used to construct a configuration object that\n-         * has same configuration as this instance plus one additional\n-         * abstract type resolver.\n-         * Added resolver has the highest priority (that is, it\n-         * gets called before any already registered resolver).\n-         */\n-        public abstract Config withAbstractTypeResolver(AbstractTypeResolver resolver);\n-\n-        /**\n-         * Fluent/factory method used to construct a configuration object that\n-         * has same configuration as this instance plus specified additional\n-         * value instantiator provider object.\n-         * Added instantiator provider has the highest priority (that is, it\n-         * gets called before any already registered resolver).\n-         * \n-         * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for\n-         *    constructing POJO values during deserialization\n-         */\n-        public abstract Config withValueInstantiators(ValueInstantiators instantiators);\n-        \n-        public abstract Iterable<Deserializers> deserializers();\n-\n-        public abstract Iterable<KeyDeserializers> keyDeserializers();\n-        \n-        public abstract Iterable<BeanDeserializerModifier> deserializerModifiers();\n-\n-        public abstract Iterable<AbstractTypeResolver> abstractTypeResolvers();\n-\n-        public abstract Iterable<ValueInstantiators> valueInstantiators();\n-        \n-        public abstract boolean hasDeserializers();\n-\n-        public abstract boolean hasKeyDeserializers();\n-        \n-        public abstract boolean hasDeserializerModifiers();\n-\n-        public abstract boolean hasAbstractTypeResolvers();\n-\n-        public abstract boolean hasValueInstantiators();\n-    }\n-\n-    /*\n     /********************************************************\n     /* Configuration handling\n     /********************************************************\n      */\n \n     /**\n-     * Method for accessing factory configuration (NOT the general\n-     * {@link DeserializationConfig}!)\n-     */\n-    public abstract Config getConfig();\n-    \n-    /**\n-     * Method used for creating a new instance of this factory, but with different\n-     * configuration. Reason for specifying factory method (instead of plain constructor)\n-     * is to allow proper sub-classing of factories.\n-     *<p>\n-     * Note that custom sub-classes <b>must override</b> implementation\n-     * of this method, as it usually requires instantiating a new instance of\n-     * factory type. Check out javadocs for\n-     * {@link com.fasterxml.jackson.databind.deser.BeanDeserializerFactory} for more details.\n-     */\n-    public abstract DeserializerFactory withConfig(Config config);\n-\n-    /**\n      * Convenience method for creating a new factory instance with additional deserializer\n      * provider.\n      */\n-    public final DeserializerFactory withAdditionalDeserializers(Deserializers additional) {\n-        return withConfig(getConfig().withAdditionalDeserializers(additional));\n-    }\n+    public abstract DeserializerFactory withAdditionalDeserializers(Deserializers additional);\n \n     /**\n      * Convenience method for creating a new factory instance with additional\n      * {@link KeyDeserializers}.\n      */\n-    public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional) {\n-        return withConfig(getConfig().withAdditionalKeyDeserializers(additional));\n-    }\n+    public abstract DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional);\n     \n     /**\n      * Convenience method for creating a new factory instance with additional\n      * {@link BeanDeserializerModifier}.\n      */\n-    public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier) {\n-        return withConfig(getConfig().withDeserializerModifier(modifier));\n-    }\n+    public abstract DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier);\n \n     /**\n      * Convenience method for creating a new factory instance with additional\n      * {@link AbstractTypeResolver}.\n      */\n-    public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver) {\n-        return withConfig(getConfig().withAbstractTypeResolver(resolver));\n-    }\n+    public abstract DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver);\n \n     /**\n      * Convenience method for creating a new factory instance with additional\n      * {@link ValueInstantiators}.\n      */\n-    public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators) {\n-        return withConfig(getConfig().withValueInstantiators(instantiators));\n-    }\n+    public abstract DeserializerFactory withValueInstantiators(ValueInstantiators instantiators);\n     \n     /*\n     /**********************************************************\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/DeserializerFactoryConfig.java\n+package com.fasterxml.jackson.databind.deser.impl;\n+\n+import com.fasterxml.jackson.databind.AbstractTypeResolver;\n+import com.fasterxml.jackson.databind.deser.*;\n+import com.fasterxml.jackson.databind.util.ArrayBuilders;\n+\n+/**\n+ * Configuration settings container class for {@link DeserializerFactory}.\n+ */\n+public class DeserializerFactoryConfig\n+{\n+    protected final static Deserializers[] NO_DESERIALIZERS = new Deserializers[0];\n+    protected final static KeyDeserializers[] NO_KEY_DESERIALIZERS = new KeyDeserializers[0];\n+    protected final static BeanDeserializerModifier[] NO_MODIFIERS = new BeanDeserializerModifier[0];\n+    protected final static AbstractTypeResolver[] NO_ABSTRACT_TYPE_RESOLVERS = new AbstractTypeResolver[0];\n+    protected final static ValueInstantiators[] NO_VALUE_INSTANTIATORS = new ValueInstantiators[0];\n+    \n+    /**\n+     * List of providers for additional deserializers, checked before considering default\n+     * basic or bean deserializers.\n+     */\n+    protected final Deserializers[] _additionalDeserializers;\n+\n+    /**\n+     * List of providers for additional key deserializers, checked before considering\n+     * standard key deserializers.\n+     */\n+    protected final KeyDeserializers[] _additionalKeyDeserializers;\n+    \n+    /**\n+     * List of modifiers that can change the way {@link BeanDeserializer} instances\n+     * are configured and constructed.\n+     */\n+    protected final BeanDeserializerModifier[] _modifiers;\n+\n+\n+    /**\n+     * List of objects that may be able to resolve abstract types to\n+     * concrete types. Used by functionality like \"mr Bean\" to materialize\n+     * types as needed.\n+     */\n+    protected final AbstractTypeResolver[] _abstractTypeResolvers;\n+\n+    /**\n+     * List of objects that know how to create instances of POJO types;\n+     * possibly using custom construction (non-annoted constructors; factory\n+     * methods external to value type etc).\n+     * Used to support objects that are created using non-standard methods;\n+     * or to support post-constructor functionality.\n+     */\n+    protected final ValueInstantiators[] _valueInstantiators;\n+    \n+    /**\n+     * Constructor for creating basic configuration with no additional\n+     * handlers.\n+     */\n+    public DeserializerFactoryConfig() {\n+        this(null, null, null, null, null);\n+    }\n+\n+    /**\n+     * Copy-constructor that will create an instance that contains defined\n+     * set of additional deserializer providers.\n+     */\n+    protected DeserializerFactoryConfig(Deserializers[] allAdditionalDeserializers,\n+            KeyDeserializers[] allAdditionalKeyDeserializers,\n+            BeanDeserializerModifier[] modifiers,\n+            AbstractTypeResolver[] atr,\n+            ValueInstantiators[] vi)\n+    {\n+        _additionalDeserializers = (allAdditionalDeserializers == null) ?\n+                NO_DESERIALIZERS : allAdditionalDeserializers;\n+        _additionalKeyDeserializers = (allAdditionalKeyDeserializers == null) ?\n+                NO_KEY_DESERIALIZERS : allAdditionalKeyDeserializers;\n+        _modifiers = (modifiers == null) ? NO_MODIFIERS : modifiers;\n+        _abstractTypeResolvers = (atr == null) ? NO_ABSTRACT_TYPE_RESOLVERS : atr;\n+        _valueInstantiators = (vi == null) ? NO_VALUE_INSTANTIATORS : vi;\n+    }\n+\n+    /**\n+     * Fluent/factory method used to construct a configuration object that\n+     * has same deserializer providers as this instance, plus one specified\n+     * as argument. Additional provider will be added before existing ones,\n+     * meaning it has priority over existing definitions.\n+     */\n+    public DeserializerFactoryConfig withAdditionalDeserializers(Deserializers additional)\n+    {\n+        if (additional == null) {\n+            throw new IllegalArgumentException(\"Can not pass null Deserializers\");\n+        }\n+        Deserializers[] all = ArrayBuilders.insertInListNoDup(_additionalDeserializers, additional);\n+        return new DeserializerFactoryConfig(all, _additionalKeyDeserializers, _modifiers,\n+                _abstractTypeResolvers, _valueInstantiators);\n+    }\n+    /**\n+     * Fluent/factory method used to construct a configuration object that\n+     * has same key deserializer providers as this instance, plus one specified\n+     * as argument. Additional provider will be added before existing ones,\n+     * meaning it has priority over existing definitions.\n+     */\n+    public DeserializerFactoryConfig withAdditionalKeyDeserializers(KeyDeserializers additional)\n+    {\n+        if (additional == null) {\n+            throw new IllegalArgumentException(\"Can not pass null KeyDeserializers\");\n+        }\n+        KeyDeserializers[] all = ArrayBuilders.insertInListNoDup(_additionalKeyDeserializers, additional);\n+        return new DeserializerFactoryConfig(_additionalDeserializers, all, _modifiers,\n+                _abstractTypeResolvers, _valueInstantiators);\n+    }\n+\n+    /**\n+     * Fluent/factory method used to construct a configuration object that\n+     * has same configuration as this instance plus one additional\n+     * deserialiazer modifier. Added modifier has the highest priority (that is, it\n+     * gets called before any already registered modifier).\n+     */\n+    public DeserializerFactoryConfig withDeserializerModifier(BeanDeserializerModifier modifier)\n+    {\n+        if (modifier == null) {\n+            throw new IllegalArgumentException(\"Can not pass null modifier\");\n+        }\n+        BeanDeserializerModifier[] all = ArrayBuilders.insertInListNoDup(_modifiers, modifier);\n+        return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, all,\n+                _abstractTypeResolvers, _valueInstantiators);\n+    }\n+\n+    /**\n+     * Fluent/factory method used to construct a configuration object that\n+     * has same configuration as this instance plus one additional\n+     * abstract type resolver.\n+     * Added resolver has the highest priority (that is, it\n+     * gets called before any already registered resolver).\n+     */\n+    public DeserializerFactoryConfig withAbstractTypeResolver(AbstractTypeResolver resolver)\n+    {\n+        if (resolver == null) {\n+            throw new IllegalArgumentException(\"Can not pass null resolver\");\n+        }\n+        AbstractTypeResolver[] all = ArrayBuilders.insertInListNoDup(_abstractTypeResolvers, resolver);\n+        return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, _modifiers,\n+                all, _valueInstantiators);\n+    }\n+\n+    /**\n+     * Fluent/factory method used to construct a configuration object that\n+     * has same configuration as this instance plus specified additional\n+     * value instantiator provider object.\n+     * Added instantiator provider has the highest priority (that is, it\n+     * gets called before any already registered resolver).\n+     * \n+     * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for\n+     *    constructing POJO values during deserialization\n+     */\n+    public DeserializerFactoryConfig withValueInstantiators(ValueInstantiators instantiators) \n+    {\n+        if (instantiators == null) {\n+            throw new IllegalArgumentException(\"Can not pass null resolver\");\n+        }\n+        ValueInstantiators[] all = ArrayBuilders.insertInListNoDup(_valueInstantiators, instantiators);\n+        return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, _modifiers,\n+                _abstractTypeResolvers, all);\n+    }\n+    \n+    public boolean hasDeserializers() { return _additionalDeserializers.length > 0; }\n+\n+    public boolean hasKeyDeserializers() { return _additionalKeyDeserializers.length > 0; }\n+    \n+    public boolean hasDeserializerModifiers() { return _modifiers.length > 0; }\n+\n+    public boolean hasAbstractTypeResolvers() { return _abstractTypeResolvers.length > 0; }\n+\n+    public boolean hasValueInstantiators() { return _valueInstantiators.length > 0; }\n+    \n+    public Iterable<Deserializers> deserializers() {\n+        return ArrayBuilders.arrayAsIterable(_additionalDeserializers);\n+    }\n+\n+    public Iterable<KeyDeserializers> keyDeserializers() {\n+        return ArrayBuilders.arrayAsIterable(_additionalKeyDeserializers);\n+    }\n+    \n+    public Iterable<BeanDeserializerModifier> deserializerModifiers() {\n+        return ArrayBuilders.arrayAsIterable(_modifiers);\n+    }\n+\n+    public Iterable<AbstractTypeResolver> abstractTypeResolvers() {\n+        return ArrayBuilders.arrayAsIterable(_abstractTypeResolvers);\n+    }\n+\n+    public Iterable<ValueInstantiators> valueInstantiators() {\n+        return ArrayBuilders.arrayAsIterable(_valueInstantiators);\n+    }\n+}", "timestamp": 1327614144, "metainfo": ""}