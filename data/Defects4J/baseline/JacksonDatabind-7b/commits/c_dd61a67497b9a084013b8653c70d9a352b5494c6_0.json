{"sha": "dd61a67497b9a084013b8653c70d9a352b5494c6", "log": "Fixed [JACKSON-796] for 2.0", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.node.*;\n-\n \n /**\n  * Deserializer that can build instances of {@link JsonNode} from any\n             return deserializeObject(jp, ctxt, nodeFactory);\n \n         case VALUE_EMBEDDED_OBJECT:\n-            return nodeFactory.POJONode(jp.getEmbeddedObject());\n+            // [JACKSON-796]\n+            {\n+                Object ob = jp.getEmbeddedObject();\n+                if (ob == null) { // should this occur?\n+                    return nodeFactory.nullNode();\n+                }\n+                Class<?> type = ob.getClass();\n+                if (type == byte[].class) { // most common special case\n+                    return nodeFactory.binaryNode((byte[]) ob);\n+                }\n+                // any other special handling needed?\n+                return nodeFactory.POJONode(ob);\n+            }\n \n         case VALUE_STRING:\n             return nodeFactory.textNode(jp.getText());\n--- a/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/POJONode.java\n     @Override\n     public boolean isPojo() { return true; }\n \n+    /**\n+     * As it is possible that some implementations embed byte[] as POJONode\n+     * (despite optimal being {@link BinaryNode}), let's add support for exposing\n+     * binary data here too.\n+     */\n+    @Override\n+    public byte[] binaryValue() throws IOException\n+    {\n+        if (_value instanceof byte[]) {\n+            return (byte[]) _value;\n+        }\n+        return super.binaryValue();\n+    }\n+    \n     /* \n     /**********************************************************\n     /* General type coercions\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         TokenBuffer buf = new TokenBuffer(mapper);\n-        buf.writeObject(new byte[0]);\n+        buf.writeObject(new byte[3]);\n         JsonNode node = mapper.readTree(buf.asParser());\n-        assertTrue(node.isPojo());\n-        assertEquals(byte[].class, ((POJONode) node).getPojo().getClass());\n+        assertTrue(node.isBinary());\n+        byte[] data = node.binaryValue();\n+        assertNotNull(data);\n+        assertEquals(3, data.length);\n     }\n+    \n+    private final Object MARKER = new Object();\n \n     public void testEmbeddedObjectInArray() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         TokenBuffer buf = new TokenBuffer(mapper);\n         buf.writeStartArray();\n-        buf.writeObject(new byte[0]);\n+        buf.writeObject(MARKER);\n         buf.writeEndArray();\n         JsonNode node = mapper.readTree(buf.asParser());\n         assertTrue(node.isArray());\n         assertEquals(1, node.size());\n         JsonNode n = node.get(0);\n         assertTrue(n.isPojo());\n-        assertEquals(byte[].class, ((POJONode) n).getPojo().getClass());\n+        assertSame(MARKER, ((POJONode) n).getPojo());\n     }\n \n     public void testEmbeddedObjectInObject() throws Exception\n         TokenBuffer buf = new TokenBuffer(mapper);\n         buf.writeStartObject();\n         buf.writeFieldName(\"pojo\");\n-        buf.writeObject(new byte[0]);\n+        buf.writeObject(MARKER);\n         buf.writeEndObject();\n         JsonNode node = mapper.readTree(buf.asParser());\n         assertTrue(node.isObject());\n         assertEquals(1, node.size());\n         JsonNode n = node.get(\"pojo\");\n         assertTrue(n.isPojo());\n-        assertEquals(byte[].class, ((POJONode) n).getPojo().getClass());\n+        assertSame(MARKER, ((POJONode) n).getPojo());\n     }\n }\n ", "timestamp": 1330128370, "metainfo": ""}