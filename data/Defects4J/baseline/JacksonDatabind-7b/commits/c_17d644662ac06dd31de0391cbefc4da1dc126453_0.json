{"sha": "17d644662ac06dd31de0391cbefc4da1dc126453", "log": "Improve UUID deser speed by 5x", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n     /* Deserializer implementations: from-String deserializers\n     /**********************************************************\n      */\n-    \n+\n     public static class UUIDDeserializer\n         extends FromStringDeserializer<UUID>\n     {\n         public UUIDDeserializer() { super(UUID.class); }\n \n         @Override\n-        protected UUID _deserialize(String value, DeserializationContext ctxt)\n+        protected UUID _deserialize(String id, DeserializationContext ctxt)\n             throws IOException, JsonProcessingException\n         {\n-            return UUID.fromString(value);\n-        }\n-    \n+            // Adapter from java-uuid-generator (https://github.com/cowtowncoder/java-uuid-generator)\n+            // which is 5x faster than UUID.fromString(value), as oper \"ManualReadPerfWithUUID\"\n+            if (id.length() != 36) {\n+                _badFormat(id);\n+            }\n+\n+            long lo, hi;\n+            lo = hi = 0;\n+            \n+            for (int i = 0, j = 0; i < 36; ++j) {\n+              \n+                // Need to bypass hyphens:\n+                switch (i) {\n+                case 8:\n+                case 13:\n+                case 18:\n+                case 23:\n+                    if (id.charAt(i) != '-') {\n+                        _badFormat(id);\n+                    }\n+                    ++i;\n+                }\n+                int curr;\n+                char c = id.charAt(i);\n+\n+                if (c >= '0' && c <= '9') {\n+                    curr = (c - '0');\n+                } else if (c >= 'a' && c <= 'f') {\n+                    curr = (c - 'a' + 10);\n+                } else if (c >= 'A' && c <= 'F') {\n+                    curr = (c - 'A' + 10);\n+                } else {\n+                    curr = _badChar(id, i, c);\n+                }\n+                curr = (curr << 4);\n+\n+                c = id.charAt(++i);\n+\n+                if (c >= '0' && c <= '9') {\n+                    curr |= (c - '0');\n+                } else if (c >= 'a' && c <= 'f') {\n+                    curr |= (c - 'a' + 10);\n+                } else if (c >= 'A' && c <= 'F') {\n+                    curr |= (c - 'A' + 10);\n+                } else {\n+                    curr = _badChar(id, i, c);\n+                }\n+                if (j < 8) {\n+                   hi = (hi << 8) | curr;\n+                } else {\n+                   lo = (lo << 8) | curr;\n+                }\n+                ++i;\n+            }      \n+            return new UUID(hi, lo);\n+        }\n+\n+        private int _badChar(String uuidStr, int index, char c) {\n+            throw new NumberFormatException(\"Non-hex character at #\"+index+\": '\"+c\n+                    +\"' (value 0x\"+Integer.toHexString(c)+\") for UUID String '\"+uuidStr+\"'\");\n+        }\n+\n+        private void _badFormat(String uuidStr) {\n+            throw new NumberFormatException(\"UUID has to be represented by the standard 36-char representation\");\n+        }\n+        \n         @Override\n         protected UUID _deserializeEmbedded(Object ob, DeserializationContext ctxt)\n             throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n      * {@link BeanPropertyFilter} that needs to be called to determine\n      * which properties are to be serialized (and possibly how)\n      */\n-    protected void serializeFieldsFiltered(Object bean, JsonGenerator jgen, SerializerProvider provider)\n+    protected void serializeFieldsFiltered(Object bean, JsonGenerator jgen,\n+            SerializerProvider provider)\n         throws IOException, JsonGenerationException\n     {\n         /* note: almost verbatim copy of \"serializeFields\"; copied (instead of merged)\n--- /dev/null\n+++ b/src/test/java/perf/ManualReadPerfWithUUID.java\n+package perf;\n+\n+import java.io.IOException;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;\n+\n+public class ManualReadPerfWithUUID extends ObjectReaderBase\n+{\n+    static class UUIDNative {\n+        public UUID[] ids;\n+        public UUIDNative() { }\n+        public UUIDNative(UUID[] ids) { this.ids = ids; }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class SlowDeser extends FromStringDeserializer<UUID>\n+    {\n+        public SlowDeser() { super(UUID.class); }\n+\n+        @Override\n+        protected UUID _deserialize(String id, DeserializationContext ctxt)\n+            throws IOException, JsonProcessingException\n+        {\n+            return UUID.fromString(id);\n+        }\n+    }\n+    \n+    static class UUIDWithJdk {\n+        @JsonDeserialize(contentUsing=SlowDeser.class)\n+        public UUID[] ids;\n+        public UUIDWithJdk() { }\n+        public UUIDWithJdk(UUID[] ids) { this.ids = ids; }\n+    }\n+    \n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 0) {\n+            System.err.println(\"Usage: java ...\");\n+            System.exit(1);\n+        }\n+        UUID[] uuids = new UUID[8];\n+        for (int i = 0; i < uuids.length; ++i) {\n+            uuids[i] = UUID.randomUUID();\n+        }\n+        UUIDNative input1 = new UUIDNative(uuids);\n+        UUIDWithJdk input2 = new UUIDWithJdk(uuids);\n+\n+        ObjectMapper m = new ObjectMapper();\n+\n+        new ManualReadPerfWithRecord().test(m, \"JSON-as-Object\", input1, UUIDNative.class,\n+                m, \"JSON-as-Array\", input2, UUIDWithJdk.class);\n+    }\n+}", "timestamp": 1379130830, "metainfo": ""}