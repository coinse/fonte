{"sha": "ab511e5576579139951022c2085662904ad85b07", "log": "Completed SerializerFactory clean up; factories now should not get or expect BeanProperty, as that is only applicable for contextualSerializers", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n                 ser = _serializerCache.untypedValueSerializer(_config.constructType(valueType));\n                 if (ser == null) {\n                     // If neither, must create\n-                    ser = _createAndCacheUntypedSerializer(valueType, property);\n+                    ser = _createAndCacheUntypedSerializer(valueType);\n                     // Not found? Must use the unknown type serializer\n                     /* Couldn't create? Need to return the fallback serializer, which\n                      * most likely will report an error: but one question is whether\n             ser = _serializerCache.untypedValueSerializer(valueType);\n             if (ser == null) {\n                 // If neither, must create\n-                ser = _createAndCacheUntypedSerializer(valueType, property);\n+                ser = _createAndCacheUntypedSerializer(valueType);\n                 // Not found? Must use the unknown type serializer\n                 /* Couldn't create? Need to return the fallback serializer, which\n                  * most likely will report an error: but one question is whether\n      *\n      * @return Serializer if one can be found, null if not.\n      */\n-    protected JsonSerializer<Object> _findExplicitUntypedSerializer(Class<?> runtimeType,\n-            BeanProperty property)\n+    protected JsonSerializer<Object> _findExplicitUntypedSerializer(Class<?> runtimeType)\n     {        \n         // Fast lookup from local lookup thingy works?\n         JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(runtimeType);\n             return ser;\n         }\n         try {\n-            return _createAndCacheUntypedSerializer(runtimeType, property);\n+            return _createAndCacheUntypedSerializer(runtimeType);\n         } catch (Exception e) {\n             return null;\n         }\n      * Method that will try to construct a value serializer; and if\n      * one is successfully created, cache it for reuse.\n      */\n-    protected JsonSerializer<Object> _createAndCacheUntypedSerializer(Class<?> type,\n-            BeanProperty property)\n+    protected JsonSerializer<Object> _createAndCacheUntypedSerializer(Class<?> type)\n         throws JsonMappingException\n     {        \n         JsonSerializer<Object> ser;\n         try {\n-            ser = _createUntypedSerializer(_config.constructType(type), property);\n+            ser = _createUntypedSerializer(_config.constructType(type));\n         } catch (IllegalArgumentException iae) {\n             /* We better only expose checked exceptions, since those\n              * are what caller is expected to handle\n         return ser;\n     }\n \n-    protected JsonSerializer<Object> _createAndCacheUntypedSerializer(JavaType type,\n-            BeanProperty property)\n+    protected JsonSerializer<Object> _createAndCacheUntypedSerializer(JavaType type)\n         throws JsonMappingException\n     {        \n         JsonSerializer<Object> ser;\n         try {\n-            ser = _createUntypedSerializer(type, property);\n+            ser = _createUntypedSerializer(type);\n         } catch (IllegalArgumentException iae) {\n             /* We better only expose checked exceptions, since those\n              * are what caller is expected to handle\n         return ser;\n     }\n \n-    protected JsonSerializer<Object> _createUntypedSerializer(JavaType type,\n-            BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        /* 10-Dec-2008, tatu: Is there a possibility of infinite loops\n-         *   here? Shouldn't be, given that we do not pass back-reference\n-         *   to this provider. But if there is, we'd need to sync calls,\n-         *   and keep track of creation chain to look for loops -- fairly\n-         *   easy to do, but won't add yet since it seems unnecessary.\n+    /**\n+     * @since 2.1\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    protected JsonSerializer<Object> _createUntypedSerializer(JavaType type)\n+        throws JsonMappingException\n+    {\n+        /* 30-Sep-2012, tatu: For now need to call the deprecated method; for 2.2,\n+         *   convert to using new one. But note that we do NOT pass 'property' along.\n          */\n-        return (JsonSerializer<Object>)_serializerFactory.createSerializer(this, type, property);\n+        return (JsonSerializer<Object>)_serializerFactory.createSerializer(this, type, null);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n     /* SerializerFactory impl\n     /**********************************************************\n      */\n-\n+    \n     // Implemented by sub-classes\n     @Override\n     public abstract JsonSerializer<Object> createSerializer(SerializerProvider prov,\n-            JavaType type, BeanProperty property)\n+            JavaType type)\n         throws JsonMappingException;\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public JsonSerializer<Object> createSerializer(SerializerProvider prov,\n-            JavaType origType, BeanProperty property)\n+            JavaType origType)\n         throws JsonMappingException\n     {\n         // Very first thing, let's check if there is explicit serializer annotation:\n         }\n         return serializer;\n     }\n+\n+    /**\n+     * @deprecated Since 2.1\n+     */\n+    @Deprecated\n+    public final TypeSerializer findPropertyTypeSerializer(JavaType baseType,\n+            SerializationConfig config, AnnotatedMember accessor, BeanProperty property)\n+        throws JsonMappingException {\n+        return findPropertyTypeSerializer(baseType, config, accessor);\n+    }\n     \n     /**\n      * Method called to create a type information serializer for values of given\n      * @return Type serializer to use for property values, if one is needed; null if not.\n      */\n     public TypeSerializer findPropertyTypeSerializer(JavaType baseType,\n-            SerializationConfig config, AnnotatedMember accessor) // BeanProperty property)\n+            SerializationConfig config, AnnotatedMember accessor)\n         throws JsonMappingException\n     {\n         AnnotationIntrospector ai = config.getAnnotationIntrospector();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n      * implementations are to swallow exceptions if necessary.\n      */\n     public boolean hasSerializerFor(Class<?> cls) {\n-        return _findExplicitUntypedSerializer(cls, null) != null;\n+        return _findExplicitUntypedSerializer(cls) != null;\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n      */\n \n     /**\n+     * @deprecated Since 2.1: need to use the new variant without 'property'\n+     *    argument (since one won't be passed)\n+     */\n+    @Deprecated\n+    public JsonSerializer<Object> createSerializer(SerializerProvider prov,\n+            JavaType baseType, BeanProperty property)\n+        throws JsonMappingException {\n+        return createSerializer(prov, baseType);\n+    }\n+    \n+    /**\n       * Method called to create (or, for immutable serializers, reuse) a serializer for given type. \n       * \n       * @param prov Provider that needs to be used to resolve annotation-provided\n       *    serializers (but NOT for others)\n+      *    \n+      * @since 2.1 (earlier versions had method with different signature)\n       */\n     public abstract JsonSerializer<Object> createSerializer(SerializerProvider prov,\n-            JavaType baseType, BeanProperty property)\n+            JavaType baseType)\n         throws JsonMappingException;\n     \n     /**", "timestamp": 1349034962, "metainfo": ""}