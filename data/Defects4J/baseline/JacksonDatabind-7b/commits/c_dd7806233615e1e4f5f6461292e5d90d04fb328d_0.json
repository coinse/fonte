{"sha": "dd7806233615e1e4f5f6461292e5d90d04fb328d", "log": "Moving exception handling around a bit", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n      * @return Serializer if one can be found, null if not.\n      */\n     protected JsonSerializer<Object> _findExplicitUntypedSerializer(Class<?> runtimeType)\n+\t\tthrows JsonMappingException\n     {        \n         // Fast lookup from local lookup thingy works?\n         JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(runtimeType);\n         if (ser != null) {\n             return ser;\n         }\n-        try {\n-            return _createAndCacheUntypedSerializer(runtimeType);\n-        } catch (Exception e) {\n-            return null;\n-        }\n+        return _createAndCacheUntypedSerializer(runtimeType);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n      * implementations are to swallow exceptions if necessary.\n      */\n     public boolean hasSerializerFor(Class<?> cls) {\n-        return _findExplicitUntypedSerializer(cls) != null;\n+    \ttry {\n+    \t\treturn _findExplicitUntypedSerializer(cls) != null;\n+    \t} catch (JsonMappingException e) {\n+    \t\t// usually bad practice, but here caller only asked if a serializer\n+    \t\t// could be found; for which exception is useless\n+    \t\treturn false;\n+    \t}\n     }\n \n     /*", "timestamp": 1363045529, "metainfo": ""}