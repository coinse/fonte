{"sha": "d163f5e6f4f82907d367f0159dc9c13552c86285", "log": "Complete [Issue#15], format auto-detection for data-binding", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      *   construct Json parser and generators\n      */\n     @Override\n+    public JsonFactory getFactory() { return _jsonFactory; }\n+    \n+    /**\n+     * @deprecated Since 2.1: Use {@link #getFactory} instead\n+     */\n+    @Deprecated\n+    @Override\n     public JsonFactory getJsonFactory() { return _jsonFactory; }\n-    \n+\n     /**\n      * Method for configuring the default {@link DateFormat} to use when serializing time\n      * values as Strings, and deserializing from JSON Strings.\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.format.DataFormatDetector;\n+import com.fasterxml.jackson.core.format.DataFormatMatcher;\n import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.core.type.ResolvedType;\n import com.fasterxml.jackson.core.type.TypeReference;\n         return _jsonFactory.isEnabled(f);\n     }\n \n+    @Override\n+    public JsonFactory getFactory() {\n+        return _jsonFactory;\n+    }\n+    \n+    /**\n+     * @deprecated Since 2.1: Use {@link #getFactory} instead\n+     */\n+    @Deprecated\n     @Override\n     public JsonFactory getJsonFactory() {\n         return _jsonFactory;\n \n     /*\n     /**********************************************************\n-    /* Internal methods, format auto-detection\n-    /**********************************************************\n-     */\n-    \n-    protected JsonParser _detect(InputStream in) throws IOException\n-    {\n-        // !!! TODO\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    protected JsonParser _detect(File src) throws IOException\n-    {\n-        // !!! TODO\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    protected JsonParser _detect(URL src) throws IOException\n-    {\n-        // !!! TODO\n-        throw new UnsupportedOperationException();\n+    /* Internal methods, format auto-detection (since 2.1)\n+    /**********************************************************\n+     */\n+    \n+    protected JsonParser _detect(InputStream in) throws IOException {\n+        return _detectAndCreateParser(_dataFormatDetector.findFormat(in), false);\n+    }\n+\n+    protected JsonParser _detect(File src) throws IOException {\n+        InputStream in = new FileInputStream(src);\n+        return _detectAndCreateParser(_dataFormatDetector.findFormat(in), true);\n+    }\n+\n+    protected JsonParser _detect(URL src) throws IOException {\n+        InputStream in = src.openStream();\n+        return _detectAndCreateParser(_dataFormatDetector.findFormat(in), true);\n     }\n     \n     protected JsonParser _detect(byte[] src, int offset, int length) throws IOException\n     {\n-        // !!! TODO\n-        throw new UnsupportedOperationException();\n+        DataFormatMatcher matcher = _dataFormatDetector.findFormat(src, offset, length);\n+        if (!matcher.hasMatch()) {\n+            _reportUnkownFormat(_dataFormatDetector, matcher);\n+        }\n+        return matcher.createParserWithMatch();\n+    }\n+\n+    protected JsonParser _detectAndCreateParser(DataFormatMatcher matcher, boolean forceClosing)\n+        throws IOException\n+    {\n+        if (!matcher.hasMatch()) {\n+            _reportUnkownFormat(_dataFormatDetector, matcher);\n+        }\n+        JsonParser jp = matcher.createParserWithMatch();\n+        // One more thing: we Own the input stream now; and while it's \n+        // not super clean way to do it, we must ensure closure so:\n+        if (forceClosing) {\n+            jp.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\n+        }\n+        return jp;\n+    }\n+    \n+    /**\n+     * Method called to indicate that format detection failed to detect format\n+     * of given input\n+     */\n+    protected void _reportUnkownFormat(DataFormatDetector detector, DataFormatMatcher match) throws JsonProcessingException\n+    {\n+        throw new JsonParseException(\"Can not detect format from input, does not look like any of detectable formats \"\n+                +detector.toString(),\n+                JsonLocation.NA);\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n         return SHARED_MAPPER.writer();\n     }\n \n+    protected ObjectReader objectReader() {\n+        return SHARED_MAPPER.reader();\n+    }\n+    \n     protected ObjectReader objectReader(Class<?> cls) {\n         return SHARED_MAPPER.reader(cls);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Additional assert methods\n     protected TimeZone getUTCTimeZone() {\n         return TimeZone.getTimeZone(\"GMT\");\n     }\n+\n+    protected byte[] utf8Bytes(String str) {\n+        try {\n+            return str.getBytes(\"UTF-8\");\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestFormatDetection.java\n+package com.fasterxml.jackson.databind.interop;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestFormatDetection extends BaseMapTest\n+{\n+    private final ObjectReader READER = objectReader();\n+\n+    private final JsonFactory JSON_FACTORY = new JsonFactory();\n+\n+    static class POJO {\n+        public int x, y;\n+        \n+        public POJO() { }\n+        public POJO(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n+    public void testSimpleWithJSON() throws Exception\n+    {\n+        ObjectReader detecting = READER.withType(POJO.class).withFormatDetection(JSON_FACTORY);\n+        POJO pojo = detecting.readValue(utf8Bytes(\"{\\\"x\\\":1}\"));\n+        assertNotNull(pojo);\n+        assertEquals(1, pojo.x);\n+    }\n+\n+    public void testInvalid() throws Exception\n+    {\n+        ObjectReader detecting = READER.withType(POJO.class).withFormatDetection(JSON_FACTORY);\n+        try {\n+            detecting.readValue(utf8Bytes(\"<POJO><x>1</x></POJO>\"));\n+            fail(\"Should have failed\");\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"Can not detect format from input\");\n+        }\n+    }\n+}", "timestamp": 1345506555, "metainfo": ""}