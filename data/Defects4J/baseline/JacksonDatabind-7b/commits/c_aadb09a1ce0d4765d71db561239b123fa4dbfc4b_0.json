{"sha": "aadb09a1ce0d4765d71db561239b123fa4dbfc4b", "log": "Improve handling of unexpected end-of-input for Tree-binding use case", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n     {\n         ArrayNode node = nodeFactory.arrayNode();\n         while (true) {\n-            switch (jp.nextToken()) {\n+            JsonToken t = jp.nextToken();\n+            if (t == null) {\n+                throw ctxt.mappingException(\"Unexpected end-of-input when binding data into ArrayNode\");\n+            }\n+            switch (t) {\n             case START_OBJECT:\n                 node.add(deserializeObject(jp, ctxt, nodeFactory));\n                 break;\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestAnyProperties.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestAnyProperties.java\n            return (String) additionalProperties.get(\"name\");\n         }\n     }\n+\n+    public class Bean797Base\n+    {\n+        @JsonAnyGetter\n+        public Map<String, JsonNode> getUndefinedProperties() {\n+            throw new IllegalStateException(\"Should not call parent version!\");\n+        }\n+    }\n+\n+    public class Bean797BaseImpl extends Bean797Base\n+    {\n+        @Override\n+        public Map<String, JsonNode> getUndefinedProperties() {\n+            return new HashMap<String, JsonNode>();\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     public void testSimpleMapImitation() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        MapImitator mapHolder = m.readValue\n+        MapImitator mapHolder = MAPPER.readValue\n             (\"{ \\\"a\\\" : 3, \\\"b\\\" : true }\", MapImitator.class);\n         Map<String,Object> result = mapHolder._map;\n         assertEquals(2, result.size());\n \n     public void testSimpleTyped() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        MapImitatorWithValue mapHolder = m.readValue\n+        MapImitatorWithValue mapHolder = MAPPER.readValue\n             (\"{ \\\"a\\\" : [ 3, -1 ], \\\"b\\\" : [ ] }\", MapImitatorWithValue.class);\n         Map<String,int[]> result = mapHolder._map;\n         assertEquals(2, result.size());\n \n     public void testBrokenWithDoubleAnnotations() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         try {\n             @SuppressWarnings(\"unused\")\n-            Broken b = m.readValue(\"{ \\\"a\\\" : 3 }\", Broken.class);\n+            Broken b = MAPPER.readValue(\"{ \\\"a\\\" : 3 }\", Broken.class);\n             fail(\"Should have gotten an exception\");\n         } catch (JsonMappingException e) {\n             verifyException(e, \"Multiple 'any-setters'\");\n     public void testIgnored() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, true);\n+        mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n         _testIgnorals(mapper);\n     }\n \n     public void testIgnored383() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n         _testIgnorals(mapper);\n     }\n-    \n+\n+    public void testProblem744() throws Exception\n+    {\n+        Bean744 bean = MAPPER.readValue(\"{\\\"name\\\":\\\"Bob\\\"}\", Bean744.class);\n+        assertNotNull(bean.additionalProperties);\n+        assertEquals(1, bean.additionalProperties.size());\n+        assertEquals(\"Bob\", bean.additionalProperties.get(\"name\"));\n+    }\n+\n+    public void testIssue797() throws Exception\n+    {\n+        String json = MAPPER.writeValueAsString(new Bean797BaseImpl());\n+        assertEquals(\"{}\", json);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Private helper methods\n+    /**********************************************************\n+     */\n+\n     private void _testIgnorals(ObjectMapper mapper) throws Exception\n     {\n         Ignored bean = mapper.readValue(\"{\\\"name\\\":\\\"Bob\\\", \\\"bogus\\\": [ 1, 2, 3], \\\"dummy\\\" : 13 }\", Ignored.class);\n         assertEquals(\"Bob\", bean.map.get(\"name\"));\n         assertEquals(2, bean.map.size());\n     }\n-\n-    public void testProblem744() throws Exception\n-    {\n-        ObjectMapper m = new ObjectMapper();\n-        Bean744 bean = m.readValue(\"{\\\"name\\\":\\\"Bob\\\"}\", Bean744.class);\n-        assertNotNull(bean.additionalProperties);\n-        assertEquals(1, bean.additionalProperties.size());\n-        assertEquals(\"Bob\", bean.additionalProperties.get(\"name\"));\n-    }\n-\n }", "timestamp": 1330135695, "metainfo": ""}