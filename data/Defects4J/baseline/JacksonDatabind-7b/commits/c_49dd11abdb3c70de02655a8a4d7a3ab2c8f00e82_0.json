{"sha": "49dd11abdb3c70de02655a8a4d7a3ab2c8f00e82", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n \n     /**\n      * Method for overriding default TimeZone to use for formatting.\n-     * Default value used is {@link TimeZone#getDefault()}.\n+     * Default value used is UTC (NOT local timezone).\n      */\n     public ObjectMapper setTimeZone(TimeZone tz) {\n         _deserializationConfig = _deserializationConfig.with(tz);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java\n         _beanDesc = src._beanDesc;\n         _defaultViewInclusion = src._defaultViewInclusion;\n \n-        _anySetter = src._anySetter;\n-        _ignoreAllUnknown = src._ignoreAllUnknown;\n-\n         // let's make copy of properties\n         _properties.putAll(src._properties);\n+        _injectables = _copy(src._injectables);\n         _backRefProperties = _copy(src._backRefProperties);\n         // Hmmh. Should we create defensive copies here? For now, not yet\n         _ignorableProps = src._ignorableProps;        \n         _valueInstantiator = src._valueInstantiator;\n         _objectIdReader = src._objectIdReader;\n         \n+        _anySetter = src._anySetter;\n+        _ignoreAllUnknown = src._ignoreAllUnknown;\n+        \n         _buildMethod = src._buildMethod;\n         _builderConfig = src._builderConfig;\n     }\n \n-    private static HashMap<String, SettableBeanProperty> _copy(HashMap<String, SettableBeanProperty> src)\n-    {\n-        if (src == null) {\n-            return null;\n-        }\n-        return new HashMap<String, SettableBeanProperty>(src);\n+    private static HashMap<String, SettableBeanProperty> _copy(HashMap<String, SettableBeanProperty> src) {\n+        return (src == null) ? null\n+                : new HashMap<String, SettableBeanProperty>(src);\n+    }\n+\n+    private static <T> List<T> _copy(List<T> src) {\n+        return (src == null) ? null : new ArrayList<T>(src);\n     }\n     \n     /*\n     /**\n      * Method for adding a new property or replacing a property.\n      */\n-    public void addOrReplaceProperty(SettableBeanProperty prop, boolean allowOverride)\n-    {\n+    public void addOrReplaceProperty(SettableBeanProperty prop, boolean allowOverride) {\n         _properties.put(prop.getName(), prop);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n         return null;\n     }\n \n+    /**\n+     * Accessor for set of properties that are explicitly marked to be ignored\n+     * via per-property markers (but NOT class annotations).\n+     */\n     public Set<String> getIgnoredPropertyNames() {\n         return _ignoredPropertyNames;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n     protected final boolean _forSerialization;\n \n     protected final AnnotationIntrospector _annotationIntrospector;\n-    \n+\n     /**\n      * External name of logical property; may change with\n      * renaming (by new instance being constructed using\n--- a/src/test/java/com/fasterxml/jackson/databind/filter/TestUnknownPropertyDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/filter/TestUnknownPropertyDeserialization.java\n         @JsonIgnoreProperties(\"x\")\n         public Map<String,Integer> values;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Test methods\n         assertEquals(Integer.valueOf(2), result.values.get(\"y\"));\n     }\n }\n-\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestUnknownProperty426.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Unit tests for checking handling of unknown properties\n+ */\n+public class TestUnknownProperty426 extends BaseMapTest\n+{\n+    // For [Issue#426]\n+    @JsonIgnoreProperties({ \"userId\"})\n+    public class User {\n+        Integer userId; \n+\n+        void setUserId(String id) {\n+            setUserId(new Integer(id));\n+        }\n+    \n+        public Integer getUserId() {\n+            return userId;\n+        }\n+    \n+        public void setUserId(Integer v) {\n+            this.userId = v;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public void testIssue426() throws Exception\n+    {\n+        String jsonString = \"{id: 9, firstName: \\\"Mike\\\" }\";\n+        User result = MAPPER.reader( User.class ).readValue(jsonString);\n+        assertNotNull(result);\n+    }\n+}\n+\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n     extends DatabindContext\n     implements java.io.Serializable\n {\n-    private static final long serialVersionUID = -7727373309391091315L;\n+    private static final long serialVersionUID = -4290063686213707727L;\n \n     /**\n      * Let's limit length of error messages, for cases where underlying data\n      * Helper method for indicating that the current token was expected to be another\n      * token.\n      */\n-    public JsonMappingException wrongTokenException(JsonParser p, JsonToken expToken, String msg) {\n-        return JsonMappingException.from(p, \"Unexpected token (\"+p.getCurrentToken()+\"), expected \"+expToken+\": \"+msg);\n+    public JsonMappingException wrongTokenException(JsonParser p, JsonToken expToken, String msg0) {\n+        String msg = \"Unexpected token (\"+p.getCurrentToken()+\"), expected \"+expToken;\n+        if (msg0 != null) {\n+            msg = msg + \": \"+msg0;\n+        }\n+        return JsonMappingException.from(p, msg);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.EnumResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n             }\n         }\n \n-        // As per [Issue#24], may want to use alternate shape, serialize as JSON Object.\n-        // Challenge here is that EnumSerializer does not know how to produce\n-        // POJO style serialization, so we must handle that special case separately;\n-        // otherwise pass it to EnumSerializer.\n         if (ser == null) {\n+            // We may also want to use serialize Collections \"as beans\", if (and only if)\n+            // this is specified with `@JsonFormat(shape=Object)`\n             JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n             if (format != null && format.getShape() == JsonFormat.Shape.OBJECT) {\n                 return null;", "timestamp": 1400215011, "metainfo": ""}