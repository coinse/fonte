{"sha": "4b60bfebc7c5a9e947630d99cb9996002a3ccd0e", "log": "cleanup, removing unnecessary 'instance' members", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         throws JsonMappingException\n     {\n         if (beanDesc.getBeanClass() == JsonLocation.class) {\n-            return JsonLocationInstantiator.instance;\n+            return new JsonLocationInstantiator();\n         }\n         return null;\n     }\n         if (clsName.startsWith(\"com.fasterxml.\")) {\n             // and a few Jackson types as well:\n             if (rawType == TokenBuffer.class) {\n-                return TokenBufferDeserializer.instance;\n+                return new TokenBufferDeserializer();\n             }\n             if (JavaType.class.isAssignableFrom(rawType)) {\n-                return JavaTypeDeserializer.instance;\n+                return new JavaTypeDeserializer();\n             }\n         }\n         return null;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JavaTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JavaTypeDeserializer.java\n /**\n  * Deserializer for {@link JavaType} values.\n  */\n-public class JavaTypeDeserializer\n-    extends StdScalarDeserializer<JavaType>\n+public class JavaTypeDeserializer extends StdScalarDeserializer<JavaType>\n {\n     private static final long serialVersionUID = 1;\n-\n-    public final static JavaTypeDeserializer instance = new JavaTypeDeserializer();\n     \n     public JavaTypeDeserializer() { super(JavaType.class); }\n     \n     @Override\n-    public JavaType deserialize(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public JavaType deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n         JsonToken curr = jp.getCurrentToken();\n         // Usually should just get string value:\n         if (curr == JsonToken.VALUE_STRING) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonLocationInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonLocationInstantiator.java\n  */\n public class JsonLocationInstantiator extends ValueInstantiator\n {\n-    public final static JsonLocationInstantiator instance = new JsonLocationInstantiator();\n-    \n     @Override\n     public String getValueTypeDesc() {\n         return JsonLocation.class.getName();\n     private final static long _long(Object o) {\n         return (o == null) ? 0L : ((Number) o).longValue();\n     }\n+\n     private final static int _int(Object o) {\n         return (o == null) ? 0 : ((Number) o).intValue();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/TokenBufferDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/TokenBufferDeserializer.java\n  * source {@link JsonParser} supports them.\n  */\n @JacksonStdImpl\n-public class TokenBufferDeserializer\n-    extends StdScalarDeserializer<TokenBuffer>\n-{\n+public class TokenBufferDeserializer extends StdScalarDeserializer<TokenBuffer> {\n     private static final long serialVersionUID = 1L;\n-\n-    public final static TokenBufferDeserializer instance = new TokenBufferDeserializer();\n     \n     public TokenBufferDeserializer() { super(TokenBuffer.class); }\n \n     @Override\n-    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n-    {\n+    public TokenBuffer deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {\n         return createBufferInstance(jp).deserialize(jp, ctxt);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n      */\n \n     @Override\n-    public JsonNodeType getNodeType()\n-    {\n+    public JsonNodeType getNodeType() {\n         return JsonNodeType.ARRAY;\n     }\n \n     @Override public JsonToken asToken() { return JsonToken.START_ARRAY; }\n \n     @Override\n-    public int size()\n-    {\n+    public int size() {\n         return _children.size();\n     }\n \n     @Override\n-    public Iterator<JsonNode> elements()\n-    {\n+    public Iterator<JsonNode> elements() {\n         return _children.iterator();\n     }\n \n     @Override\n-    public JsonNode get(int index)\n-    {\n+    public JsonNode get(int index) {\n         if (index >= 0 && index < _children.size()) {\n             return _children.get(index);\n         }\n     public JsonNode path(String fieldName) { return MissingNode.getInstance(); }\n \n     @Override\n-    public JsonNode path(int index)\n-    {\n+    public JsonNode path(int index) {\n         if (index >= 0 && index < _children.size()) {\n             return _children.get(index);\n         }\n      */\n \n     @Override\n-    public void serialize(JsonGenerator jg, SerializerProvider provider)\n-        throws IOException, JsonProcessingException\n+    public void serialize(JsonGenerator jg, SerializerProvider provider) throws IOException, JsonProcessingException\n     {\n         jg.writeStartArray();\n         for (JsonNode n : _children) {\n     }\n \n     @Override\n-    public void serializeWithType(JsonGenerator jg, SerializerProvider provider,\n-            TypeSerializer typeSer)\n+    public void serializeWithType(JsonGenerator jg, SerializerProvider provider, TypeSerializer typeSer)\n         throws IOException, JsonProcessingException\n     {\n         typeSer.writeTypePrefixForArray(this, jg);\n     /**\n      * @since 2.3\n      */\n-    protected boolean _childrenEqual(ArrayNode other)\n-    {\n+    protected boolean _childrenEqual(ArrayNode other) {\n         return _children.equals(other._children);\n     }\n     \n     @Override\n-    public int hashCode()\n-    {\n+    public int hashCode() {\n         return _children.hashCode();\n     }\n \n     /**********************************************************\n      */\n \n-    protected ArrayNode _add(JsonNode node)\n-    {\n+    protected ArrayNode _add(JsonNode node) {\n         _children.add(node);\n         return this;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n             return DateSerializer.instance;\n         }\n         if (ByteBuffer.class.isAssignableFrom(raw)) {\n-            return ByteBufferSerializer.instance;\n+            return new ByteBufferSerializer();\n         }\n         if (InetAddress.class.isAssignableFrom(raw)) {\n-            return InetAddressSerializer.instance;\n+            return new InetAddressSerializer();\n         }\n         if (InetSocketAddress.class.isAssignableFrom(raw)) {\n-            return InetSocketAddressSerializer.instance;\n+            return new InetSocketAddressSerializer();\n         }\n         if (TimeZone.class.isAssignableFrom(raw)) {\n-            return TimeZoneSerializer.instance;\n+            return new TimeZoneSerializer();\n         }\n         if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n             return ToStringSerializer.instance;\n      * function is usually something else. The reason for\n      */\n     protected final JsonSerializer<?> findSerializerByAddonType(SerializationConfig config,\n-            JavaType javaType, BeanDescription beanDesc,\n-            boolean staticTyping)\n-        throws JsonMappingException\n+            JavaType javaType, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException\n     {\n         Class<?> type = javaType.getRawClass();\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java\n      * \n      * @throws JsonMappingException\n      */\n-    public JsonSerializer<?> createContextual(SerializerProvider prov,\n-            BeanProperty property)\n+    public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)\n         throws JsonMappingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n-import com.fasterxml.jackson.core.JsonGenerationException;\n+\n import com.fasterxml.jackson.core.JsonGenerator;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n      * this provider has access to (via caching and/or creating new serializers\n      * as need be).\n      */\n-    public void serializeValue(JsonGenerator jgen, Object value)\n-        throws IOException, JsonGenerationException\n+    public void serializeValue(JsonGenerator jgen, Object value) throws IOException\n     {\n         if (value == null) {\n             _serializeNull(jgen);\n      * @param rootType Type to use for locating serializer to use, instead of actual\n      *    runtime type. Must be actual type, or one of its super types\n      */\n-    public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType)\n-        throws IOException, JsonGenerationException\n+    public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType) throws IOException\n     {\n         if (value == null) {\n             _serializeNull(jgen);\n      * \n      * @since 2.1\n      */\n-    public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType,\n-            JsonSerializer<Object> ser)\n-        throws IOException, JsonGenerationException\n+    public void serializeValue(JsonGenerator jgen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException\n     {\n         if (value == null) {\n             _serializeNull(jgen);\n      * \n      * @since 2.3\n      */\n-    protected void _serializeNull(JsonGenerator jgen)\n-        throws IOException, JsonGenerationException\n+    protected void _serializeNull(JsonGenerator jgen) throws IOException\n     {\n         JsonSerializer<Object> ser = getDefaultNullValueSerializer();\n         try {\n      */\n     \n     @Override\n-    public WritableObjectId findObjectId(Object forPojo,\n-            ObjectIdGenerator<?> generatorType)\n+    public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType)\n     {\n         if (_seenObjectIds == null) {\n             _seenObjectIds = _createObjectIdMap();\n      */\n     \n     @Override\n-    public JsonSerializer<Object> serializerInstance(Annotated annotated,\n-            Object serDef)\n-        throws JsonMappingException\n+    public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException\n     {\n         if (serDef == null) {\n             return null;\n      * Concrete implementation that defines factory method(s),\n      * defined as final.\n      */\n-    public final static class Impl extends DefaultSerializerProvider\n-    {\n+    public final static class Impl extends DefaultSerializerProvider {\n         private static final long serialVersionUID = 1L;\n \n         public Impl() { super(); }\n \n-        protected Impl(SerializerProvider src,\n-                SerializationConfig config,SerializerFactory f) {\n+        protected Impl(SerializerProvider src, SerializationConfig config,SerializerFactory f) {\n             super(src, config, f);\n         }\n \n         @Override\n-        public Impl createInstance(SerializationConfig config,\n-                SerializerFactory jsf) {\n+        public Impl createInstance(SerializationConfig config, SerializerFactory jsf) {\n             return new Impl(this, config, jsf);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n      *    of container type)\n      */\n     protected BeanPropertyWriter buildWriter(SerializerProvider prov,\n-            BeanPropertyDefinition propDef,\n-            JavaType declaredType, JsonSerializer<?> ser,\n+            BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser,\n             TypeSerializer typeSer, TypeSerializer contentTypeSer,\n             AnnotatedMember am, boolean defaultUseStaticTyping)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n      * Whether type serialized is primitive (boolean) or wrapper\n      * (java.lang.Boolean); if true, former, if false, latter.\n      */\n-    final boolean _forPrimitive;\n+    protected final boolean _forPrimitive;\n \n-    public BooleanSerializer(boolean forPrimitive)\n-    {\n+    public BooleanSerializer(boolean forPrimitive) {\n         super(Boolean.class);\n         _forPrimitive = forPrimitive;\n     }\n \n     @Override\n-    public void serialize(Boolean value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n-    {\n+    public void serialize(Boolean value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n         jgen.writeBoolean(value.booleanValue());\n     }\n \n     @Override\n-    public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-    {\n+    public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n         return createSchemaNode(\"boolean\", !_forPrimitive);\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-        throws JsonMappingException\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n     {\n         if (visitor != null) {\n             visitor.expectBooleanFormat(typeHint);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ByteBufferSerializer.java\n \n public class ByteBufferSerializer extends StdScalarSerializer<ByteBuffer>\n {\n-    public final static ByteBufferSerializer instance = new ByteBufferSerializer();\n-\n     public ByteBufferSerializer() { super(ByteBuffer.class); }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java\n public class InetAddressSerializer\n     extends StdScalarSerializer<InetAddress>\n {\n-    public final static InetAddressSerializer instance = new InetAddressSerializer();\n-    \n     public InetAddressSerializer() { super(InetAddress.class); }\n \n     @Override\n     }\n \n     @Override\n-    public void serializeWithType(InetAddress value, JsonGenerator jgen, SerializerProvider provider,\n-            TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n+    public void serializeWithType(InetAddress value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException\n     {\n         // Better ensure we don't use specific sub-classes...\n         typeSer.writeTypePrefixForScalar(value, jgen, InetAddress.class);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/InetSocketAddressSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/InetSocketAddressSerializer.java\n public class InetSocketAddressSerializer\n     extends StdScalarSerializer<InetSocketAddress>\n {\n-    public final static InetSocketAddressSerializer instance = new InetSocketAddressSerializer();\n-\n     public InetSocketAddressSerializer() { super(InetSocketAddress.class); }\n \n     @Override\n-    public void serialize(InetSocketAddress value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n+    public void serialize(InetSocketAddress value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException\n     {\n         InetAddress addr = value.getAddress();\n         String str = addr == null ? value.getHostName() : addr.toString().trim();\n     }\n \n     @Override\n-    public void serializeWithType(InetSocketAddress value, JsonGenerator jgen, SerializerProvider provider,\n-            TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n+    public void serializeWithType(InetSocketAddress value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException\n     {\n         // Better ensure we don't use specific sub-classes...\n         typeSer.writeTypePrefixForScalar(value, jgen, InetSocketAddress.class);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n         public IntegerSerializer() { super(Integer.class); }\n     \n         @Override\n-        public void serialize(Integer value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n+        public void serialize(Integer value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException\n         {\n             jgen.writeNumber(value.intValue());\n         }\n     \n         @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        {\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n             return createSchemaNode(\"integer\", true);\n         }\n         \n         public IntLikeSerializer() { super(Number.class); }\n         \n         @Override\n-        public void serialize(Number value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n+        public void serialize(Number value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n             jgen.writeNumber(value.intValue());\n         }\n     \n         @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        {\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n             return createSchemaNode(\"integer\", true);\n         }\n         \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-                throws JsonMappingException\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n         {\n             JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n             if (v2 != null) {\n         public LongSerializer() { super(Long.class); }\n         \n         @Override\n-        public void serialize(Long value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n+        public void serialize(Long value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException\n         {\n             jgen.writeNumber(value.longValue());\n         }\n     \n         @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        {\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n             return createSchemaNode(\"number\", true);\n         }\n         \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-                throws JsonMappingException\n-        {\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n             JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n             if (v2 != null) {\n                 v2.numberType(JsonParser.NumberType.LONG);\n         public FloatSerializer() { super(Float.class); }\n         \n         @Override\n-        public void serialize(Float value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n+        public void serialize(Float value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n             jgen.writeNumber(value.floatValue());\n         }\n     \n         @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        {\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n             return createSchemaNode(\"number\", true);\n         }\n         \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-                throws JsonMappingException\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n         {\n             JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);\n             if (v2 != null) {\n         public DoubleSerializer() { super(Double.class); }\n     \n         @Override\n-        public void serialize(Double value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n+        public void serialize(Double value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n             jgen.writeNumber(value.doubleValue());\n         }\n     \n         @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        {\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n             return createSchemaNode(\"number\", true);\n         }\n         \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-            throws JsonMappingException\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n         {\n             JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);\n             if (v2 != null) {\n         }\n     \n         @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        {\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n             return createSchemaNode(\"number\", true);\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n         public AtomicBooleanSerializer() { super(AtomicBoolean.class, false); }\n     \n         @Override\n-        public void serialize(AtomicBoolean value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n+        public void serialize(AtomicBoolean value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n             jgen.writeBoolean(value.get());\n         }\n     \n         @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        {\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n             return createSchemaNode(\"boolean\", true);\n         }\n         \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-                throws JsonMappingException\n-        {\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n             visitor.expectBooleanFormat(typeHint);\n         }\n     }\n         public AtomicIntegerSerializer() { super(AtomicInteger.class, false); }\n     \n         @Override\n-        public void serialize(AtomicInteger value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n+        public void serialize(AtomicInteger value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n             jgen.writeNumber(value.get());\n         }\n     \n         @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        {\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n             return createSchemaNode(\"integer\", true);\n         }\n         \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-                throws JsonMappingException\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n         {\n             JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);\n             if (v2 != null) {\n         public AtomicLongSerializer() { super(AtomicLong.class, false); }\n     \n         @Override\n-        public void serialize(AtomicLong value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n+        public void serialize(AtomicLong value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n             jgen.writeNumber(value.get());\n         }\n     \n         @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        {\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n             return createSchemaNode(\"integer\", true);\n         }\n         \n         public AtomicReferenceSerializer() { super(AtomicReference.class, false); }\n \n         @Override\n-        public void serialize(AtomicReference<?> value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n+        public void serialize(AtomicReference<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n             provider.defaultSerializeValue(value.get(), jgen);\n         }\n \n         @Override\n-        public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        {\n+        public JsonNode getSchema(SerializerProvider provider, Type typeHint) {\n             return createSchemaNode(\"any\", true);\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n  * serializer, when serializing {@link java.util.Map}s to JSON\n  * Objects.\n  */\n-public class StdKeySerializer\n-    extends StdSerializer<Object>\n+public class StdKeySerializer extends StdSerializer<Object>\n {\n-    final static StdKeySerializer instace = new StdKeySerializer();\n-\n     public StdKeySerializer() { super(Object.class); }\n     \n     @Override\n-    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n-    {\n+    public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n         if (value instanceof Date) {\n             provider.defaultSerializeDateKey((Date) value, jgen);\n         } else {\n     }\n \n     @Override\n-    public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n-        throws JsonMappingException\n-    {\n+    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {\n         return createSchemaNode(\"string\");\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-            throws JsonMappingException\n-    {\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n         visitor.expectStringFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n     @SuppressWarnings(\"unchecked\")\n     protected final static JsonSerializer<Object> DEFAULT_STRING_SERIALIZER\n         = (JsonSerializer<Object>)(JsonSerializer<?>) new StringKeySerializer();\n-    \n+\n     private StdKeySerializers() { }\n \n     @SuppressWarnings(\"unchecked\")\n     /**********************************************************\n      */\n \n-    public static class StringKeySerializer\n-        extends StdSerializer<String>\n+    public static class StringKeySerializer extends StdSerializer<String>\n     {\n         public StringKeySerializer() { super(String.class); }\n         \n         @Override\n-        public void serialize(String value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n+        public void serialize(String value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n             jgen.writeFieldName(value);\n         }\n     }\n \n-    public static class DateKeySerializer\n-        extends StdSerializer<Date>\n-    {\n+    public static class DateKeySerializer extends StdSerializer<Date> {\n         protected final static JsonSerializer<?> instance = new DateKeySerializer();\n \n         public DateKeySerializer() { super(Date.class); }\n         \n         @Override\n-        public void serialize(Date value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n+        public void serialize(Date value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n             provider.defaultSerializeDateKey(value, jgen);\n         }\n     }\n \n-    public static class CalendarKeySerializer\n-        extends StdSerializer<Calendar>\n-    {\n+    public static class CalendarKeySerializer extends StdSerializer<Calendar> {\n         protected final static JsonSerializer<?> instance = new CalendarKeySerializer();\n \n         public CalendarKeySerializer() { super(Calendar.class); }\n         \n         @Override\n-        public void serialize(Calendar value, JsonGenerator jgen, SerializerProvider provider)\n-            throws IOException, JsonGenerationException\n-        {\n+        public void serialize(Calendar value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n             provider.defaultSerializeDateKey(value.getTimeInMillis(), jgen);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/TimeZoneSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/TimeZoneSerializer.java\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n-public class TimeZoneSerializer\n-    extends StdScalarSerializer<TimeZone>\n+public class TimeZoneSerializer extends StdScalarSerializer<TimeZone>\n {\n-    public final static TimeZoneSerializer instance = new TimeZoneSerializer();\n-    \n     public TimeZoneSerializer() { super(TimeZone.class); }\n \n     @Override\n-    public void serialize(TimeZone value, JsonGenerator jgen, SerializerProvider provider)\n-        throws IOException, JsonGenerationException\n-    {\n+    public void serialize(TimeZone value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException {\n         jgen.writeString(value.getID());\n     }\n \n     @Override\n-    public void serializeWithType(TimeZone value, JsonGenerator jgen, SerializerProvider provider,\n-            TypeSerializer typeSer)\n-        throws IOException, JsonGenerationException\n-    {\n+    public void serializeWithType(TimeZone value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException {\n         // Better ensure we don't use specific sub-classes:\n         typeSer.writeTypePrefixForScalar(value, jgen, TimeZone.class);\n         serialize(value, jgen, provider);", "timestamp": 1388556641, "metainfo": ""}