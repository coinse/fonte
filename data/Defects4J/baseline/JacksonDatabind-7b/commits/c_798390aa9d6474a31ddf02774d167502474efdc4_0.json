{"sha": "798390aa9d6474a31ddf02774d167502474efdc4", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n             JavaType type, MixInResolver r)\n     {\n         boolean useAnnotations = cfg.isAnnotationProcessingEnabled();\n-        AnnotationIntrospector ai =  cfg.getAnnotationIntrospector();\n-        AnnotatedClass ac = AnnotatedClass.construct(type.getRawClass(), (useAnnotations ? ai : null), r);\n+        AnnotatedClass ac = AnnotatedClass.construct(type.getRawClass(),\n+                (useAnnotations ? cfg.getAnnotationIntrospector() : null), r);\n         return BasicBeanDescription.forOtherUse(cfg, type, ac);\n     }\n \n     /**********************************************************\n      */\n \n-    public POJOPropertiesCollector collectProperties(MapperConfig<?> config,\n+    protected POJOPropertiesCollector collectProperties(MapperConfig<?> config,\n             JavaType type, MixInResolver r, boolean forSerialization)\n     {\n         boolean useAnnotations = config.isAnnotationProcessingEnabled();\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java\n         public void serializeWithType(JsonGenerator jgen,\n                 SerializerProvider provider, TypeSerializer typeSer)\n                 throws IOException, JsonProcessingException {\n-            // TODO Auto-generated method stub\n-            \n         }\n     }\t\n \n     /**********************************************************\n      */\n \n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     public void testUntypedArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n \n         // to get \"untyped\" default map-to-map, pass Object[].class\n         String JSON = \"[ 1, null, \\\"x\\\", true, 2.0 ]\";\n \n-        Object[] result = mapper.readValue(JSON, Object[].class);\n+        Object[] result = MAPPER.readValue(JSON, Object[].class);\n         assertNotNull(result);\n \n         assertEquals(5, result.length);\n \n     public void testIntegerArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         final int LEN = 90000;\n \n         // Let's construct array to get it big enough\n         }\n         sb.append(']');\n \n-        Integer[] result = mapper.readValue(sb.toString(), Integer[].class);\n+        Integer[] result = MAPPER.readValue(sb.toString(), Integer[].class);\n         assertNotNull(result);\n \n         assertEquals(LEN, result.length);\n \n     public void testUntypedArrayOfArrays() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-\n         // to get \"untyped\" default map-to-map, pass Object[].class\n         final String JSON = \"[[[-0.027512,51.503221],[-0.008497,51.503221],[-0.008497,51.509744],[-0.027512,51.509744]]]\";\n \n-        Object result = mapper.readValue(JSON, Object.class);\n+        Object result = MAPPER.readValue(JSON, Object.class);\n         assertEquals(ArrayList.class, result.getClass());\n         assertNotNull(result);\n \n         // Should be able to get it as an Object array as well\n \n-        Object[] array = mapper.readValue(JSON, Object[].class);\n+        Object[] array = MAPPER.readValue(JSON, Object[].class);\n         assertNotNull(array);\n         assertEquals(Object[].class, array.getClass());\n \n         // and as wrapped variants too\n-        ObjectWrapper w = mapper.readValue(\"{\\\"wrapped\\\":\"+JSON+\"}\", ObjectWrapper.class);\n+        ObjectWrapper w = MAPPER.readValue(\"{\\\"wrapped\\\":\"+JSON+\"}\", ObjectWrapper.class);\n         assertNotNull(w);\n         assertNotNull(w.wrapped);\n         assertEquals(ArrayList.class, w.wrapped.getClass());\n \n-        ObjectArrayWrapper aw = mapper.readValue(\"{\\\"wrapped\\\":\"+JSON+\"}\", ObjectArrayWrapper.class);\n+        ObjectArrayWrapper aw = MAPPER.readValue(\"{\\\"wrapped\\\":\"+JSON+\"}\", ObjectArrayWrapper.class);\n         assertNotNull(aw);\n         assertNotNull(aw.wrapped);\n     }    \n         jg.writeEndArray();\n         jg.close();\n \n-        ObjectMapper mapper = new ObjectMapper();\n-        String[] result = mapper.readValue(sw.toString(), String[].class);\n+        String[] result = MAPPER.readValue(sw.toString(), String[].class);\n         assertNotNull(result);\n \n         assertEquals(STRS.length, result.length);\n     public void testCharArray() throws Exception\n     {\n         final String TEST_STR = \"Let's just test it? Ok!\";\n-        ObjectMapper mapper = new ObjectMapper();\n-        char[] result = mapper.readValue(\"\\\"\"+TEST_STR+\"\\\"\", char[].class);\n+        char[] result = MAPPER.readValue(\"\\\"\"+TEST_STR+\"\\\"\", char[].class);\n         assertEquals(TEST_STR, new String(result));\n \n         // And just for [JACKSON-289], let's verify that fluffy arrays work too\n-        result = mapper.readValue(\"[\\\"a\\\",\\\"b\\\",\\\"c\\\"]\", char[].class);\n+        result = MAPPER.readValue(\"[\\\"a\\\",\\\"b\\\",\\\"c\\\"]\", char[].class);\n         assertEquals(\"abc\", new String(result));\n     }\n \n \n     public void testBooleanArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        boolean[] result = mapper.readValue(\"[ true, false, false ]\", boolean[].class);\n+        boolean[] result = MAPPER.readValue(\"[ true, false, false ]\", boolean[].class);\n         assertNotNull(result);\n         assertEquals(3, result.length);\n         assertTrue(result[0]);\n \n     public void testByteArrayAsNumbers() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         final int LEN = 37000;\n         StringBuilder sb = new StringBuilder();\n         sb.append('[');\n             sb.append(i & 0x7F);\n         }\n         sb.append(']');\n-        byte[] result = mapper.readValue(sb.toString(), byte[].class);\n+        byte[] result = MAPPER.readValue(sb.toString(), byte[].class);\n         assertNotNull(result);\n         assertEquals(LEN, result.length);\n         for (int i = 0; i < LEN; ++i) {\n         jg.close();\n         String inputData = sw.toString();\n \n-        ObjectMapper mapper = new ObjectMapper();\n-        byte[] result = mapper.readValue(inputData, byte[].class);\n+        byte[] result = MAPPER.readValue(inputData, byte[].class);\n         assertNotNull(result);\n         assertArrayEquals(TEST, result);\n     }\n \n         String inputData = sw.toString();\n \n-        ObjectMapper mapper = new ObjectMapper();\n-        byte[][] result = mapper.readValue(inputData, byte[][].class);\n+        byte[][] result = MAPPER.readValue(inputData, byte[][].class);\n         assertNotNull(result);\n \n         assertEquals(entryCount, result.length);\n     public void testByteArraysWith763() throws Exception\n     {\n         String[] input = new String[] { \"YQ==\", \"Yg==\", \"Yw==\" };\n-        byte[][] data = new ObjectMapper().convertValue(input, byte[][].class);\n+        byte[][] data = MAPPER.convertValue(input, byte[][].class);\n         assertEquals(\"a\", new String(data[0], \"US-ASCII\"));\n         assertEquals(\"b\", new String(data[1], \"US-ASCII\"));\n         assertEquals(\"c\", new String(data[2], \"US-ASCII\"));\n     \n     public void testShortArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         final int LEN = 31001; // fits in signed 16-bit\n         StringBuilder sb = new StringBuilder();\n         sb.append('[');\n         }\n         sb.append(']');\n \n-        short[] result = mapper.readValue(sb.toString(), short[].class);\n+        short[] result = MAPPER.readValue(sb.toString(), short[].class);\n         assertNotNull(result);\n \n         assertEquals(LEN, result.length);\n \n     public void testIntArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         final int LEN = 70000;\n \n         // Let's construct array to get it big enough\n         }\n         sb.append(']');\n \n-        int[] result = mapper.readValue(sb.toString(), int[].class);\n+        int[] result = MAPPER.readValue(sb.toString(), int[].class);\n         assertNotNull(result);\n \n         assertEquals(LEN, result.length);\n \n     public void testLongArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         final int LEN = 12300;\n         StringBuilder sb = new StringBuilder();\n         sb.append('[');\n         }\n         sb.append(']');\n \n-        long[] result = mapper.readValue(sb.toString(), long[].class);\n+        long[] result = MAPPER.readValue(sb.toString(), long[].class);\n         assertNotNull(result);\n \n         assertEquals(LEN, result.length);\n \n     public void testDoubleArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         final int LEN = 7000;\n         StringBuilder sb = new StringBuilder();\n         sb.append('[');\n         }\n         sb.append(']');\n \n-        double[] result = mapper.readValue(sb.toString(), double[].class);\n+        double[] result = MAPPER.readValue(sb.toString(), double[].class);\n         assertNotNull(result);\n \n         assertEquals(LEN, result.length);\n \n     public void testFloatArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         final int LEN = 7000;\n         StringBuilder sb = new StringBuilder();\n         sb.append('[');\n         }\n         sb.append(']');\n \n-        float[] result = mapper.readValue(sb.toString(), float[].class);\n+        float[] result = MAPPER.readValue(sb.toString(), float[].class);\n         assertNotNull(result);\n \n         assertEquals(LEN, result.length);\n         src.add(new Bean1(4, 5, b2));\n \n         // Ok: let's assume bean serializer works ok....\n-        ObjectMapper mapper = new ObjectMapper();\n         StringWriter sw = new StringWriter();\n \n-        mapper.writeValue(sw, src);\n+        MAPPER.writeValue(sw, src);\n \n         // And then test de-serializer\n-        List<Bean1> result = mapper.readValue(sw.toString(), new TypeReference<List<Bean1>>() { });\n+        List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { });\n         assertNotNull(result);\n         assertEquals(src, result);\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java\n             location = new Location(x, y);\n         }\n     }\n+\n     static class DeepUnwrapping\n     {\n         @JsonUnwrapped\n         public ConfigRoot() { }\n         public ConfigRoot(String name, int value)\n         {\n+            general = new ConfigGeneral(name);\n+            misc.value = value;\n+        }\n+    }\n+\n+    static class ConfigAlternate\n+    {\n+        @JsonUnwrapped\n+        public ConfigGeneral general = new ConfigGeneral();\n+        \n+        @JsonUnwrapped(prefix=\"misc.\")\n+        public ConfigMisc misc = new ConfigMisc();\n+\n+        public int id;\n+        \n+        public ConfigAlternate() { }\n+        public ConfigAlternate(int id, String name, int value)\n+        {\n+            this.id = id;\n             general = new ConfigGeneral(name);\n             misc.value = value;\n         }\n         assertEquals(3, root.misc.value);\n         assertEquals(\"Bob\", root.general.names.name);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, deserialization\n+    /**********************************************************\n+     */\n+    \n+    public void testHierarchicConfigRoundTrip() throws Exception\n+    {\n+        ConfigAlternate input = new ConfigAlternate(123, \"Joe\", 42);\n+        String json = mapper.writeValueAsString(input);\n+\n+        ConfigAlternate root = mapper.readValue(json, ConfigAlternate.class);\n+        assertEquals(123, root.id);\n+        assertNotNull(root.general);\n+        assertNotNull(root.general.names);\n+        assertNotNull(root.misc);\n+        assertEquals(\"Joe\", root.general.names.name);\n+        assertEquals(42, root.misc.value);\n+    }\n }", "timestamp": 1327383946, "metainfo": ""}