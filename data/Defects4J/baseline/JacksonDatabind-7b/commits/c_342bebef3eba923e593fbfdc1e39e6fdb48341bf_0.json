{"sha": "342bebef3eba923e593fbfdc1e39e6fdb48341bf", "log": "add an extra (now failing) unit test for external type id, visible=true", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestMartinsExternalId.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n+import com.fasterxml.jackson.databind.type.SimpleType;\n+\n+public class TestMartinsExternalId extends BaseMapTest\n+{\n+    public void testExternal() throws IOException\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        Parent parent = mapper.readValue(\"{\\\"type\\\":\\\"a\\\",\\\"child\\\":{\\\"value\\\":\\\"foo\\\"}}\", Parent.class);\n+        assertNotNull(parent);\n+    }\n+     \n+    @JsonTypeIdResolver(Resolver.class)\n+    public static class Parent\n+    {\n+        @JsonProperty\n+        public String type;\n+\n+        @JsonTypeIdResolver(Resolver.class)\n+        @JsonProperty\n+        @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, include= JsonTypeInfo.As.EXTERNAL_PROPERTY, property=\"type\"\n+            , visible = true\n+        )\n+        public Child child;\n+    }\n+\n+    public static interface Child { }\n+\n+    @JsonTypeIdResolver(Resolver.class)\n+    public static class Child1 implements Child\n+    {\n+        @JsonProperty\n+        public String value;\n+        }\n+         \n+        public static class Child2\n+        implements Child\n+        {\n+        @JsonProperty\n+        public String value;\n+    }\n+     \n+     \n+    public static class Resolver implements TypeIdResolver\n+    {\n+        public Resolver() { }\n+        \n+        @Override\n+        public void init(JavaType baseType) { }\n+     \n+        @Override\n+        public String idFromValue(Object value)\n+        {\n+        if (value instanceof Child1) {\n+        return \"a\";\n+        }\n+        else if (value instanceof Child2) {\n+        return \"b\";\n+        }\n+         \n+        throw new IllegalArgumentException();\n+        }\n+     \n+        @Override\n+        public String idFromValueAndType(Object value, Class<?> suggestedType)\n+        {\n+            return idFromValue(value);\n+        }\n+         \n+        @Override\n+        public String idFromBaseType()\n+        {\n+            throw new UnsupportedOperationException();\n+        }\n+             \n+        @Override\n+        public JavaType typeFromId(String id)\n+        {\n+            if (id.equals(\"a\")) {\n+                return SimpleType.construct(Child1.class);\n+            }\n+            else if (id.equals(\"b\")) {\n+                return SimpleType.construct(Child2.class);\n+            }\n+            throw new IllegalArgumentException();\n+        }\n+     \n+        @Override\n+        public JsonTypeInfo.Id getMechanism()\n+        {\n+            return JsonTypeInfo.Id.CUSTOM;\n+        }\n+    }\n+}", "timestamp": 1392412153, "metainfo": ""}