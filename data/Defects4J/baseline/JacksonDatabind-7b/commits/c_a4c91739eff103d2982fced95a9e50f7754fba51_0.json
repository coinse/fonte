{"sha": "a4c91739eff103d2982fced95a9e50f7754fba51", "log": "Foundation for forward reference resolution.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n         // do we have it resolved?\n         Object pojo = roid.item;\n         if (pojo == null) { // not yet; should wait...\n-            throw new IllegalStateException(\"Could not resolve Object Id [\"+id+\"] (for \"\n-                    +_beanType+\") -- unresolved forward-reference?\");\n+            throw new UnresolvedForwardReference(\"Could not resolve Object Id [\"+id+\"] (for \"\n+                    +_beanType+\").\", jp.getCurrentLocation(), roid);\n         }\n         return pojo;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n         if (ref != null && ref.isManagedReference()) {\n             prop.setManagedReferenceName(ref.getName());\n         }\n+        ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();\n+        if(objectIdInfo != null){\n+            prop.setObjectIdInfo(objectIdInfo);\n+        }\n         return prop;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n import com.fasterxml.jackson.databind.deser.impl.NullProvider;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.Annotations;\n     protected String _managedReferenceName;\n \n     /**\n+     * This is the information for object identity associated with the property.\n+     * <p>\n+     * TODO: should try to make immutable.\n+     */\n+    protected ObjectIdInfo _objectIdInfo;\n+\n+    /**\n      * Helper object used for checking whether this property is to\n      * be included in the active view, if property is view-specific;\n      * null otherwise.\n      * TODO: should try to make immutable if at all possible\n      */\n     protected int _propertyIndex = -1;\n-    \n+\n     /*\n     /**********************************************************\n     /* Life-cycle (construct & configure)\n     public void setManagedReferenceName(String n) {\n         _managedReferenceName = n;\n     }\n-    \n+\n+    public void setObjectIdInfo(ObjectIdInfo objectIdInfo) {\n+        _objectIdInfo = objectIdInfo;\n+    }\n+\n     public void setViews(Class<?>[] views) {\n         if (views == null) {\n             _viewMatcher = null;\n     }\n \n     public String getManagedReferenceName() { return _managedReferenceName; }\n+\n+    public ObjectIdInfo getObjectIdInfo() { return _objectIdInfo; }\n \n     public boolean hasValueDeserializer() {\n         return (_valueDeserializer != null) && (_valueDeserializer != MISSING_VALUE_DESERIALIZER);\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/UnresolvedForwardReference.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import com.fasterxml.jackson.core.JsonLocation;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;\n+\n+public final class UnresolvedForwardReference extends JsonMappingException {\n+    private static final long serialVersionUID = -5097969645059502061L;\n+    private final ReadableObjectId _roid;\n+\n+    public UnresolvedForwardReference(String msg, JsonLocation loc, ReadableObjectId roid)\n+    {\n+        super(msg, loc);\n+        _roid = roid;\n+    }\n+\n+    public ReadableObjectId getRoid()\n+    {\n+        return _roid;\n+    }\n+\n+    public Object getUnresolvedId()\n+    {\n+        return _roid.id;\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ReadableObjectId.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ReadableObjectId.java\n package com.fasterxml.jackson.databind.deser.impl;\n \n import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n \n /**\n- * Simple value container for containing information about single\n- * Object Id during deserialization.\n+ * Simple value container for containing information about single Object Id\n+ * during deserialization\n  */\n public class ReadableObjectId\n {\n     public final Object id;\n-    \n+\n     public Object item;\n-    \n+\n+    private LinkedList<Referring> _referringProperties;\n+\n     public ReadableObjectId(Object id)\n     {\n         this.id = id;\n     }\n \n+    public void appendReferring(Referring currentReferring)\n+    {\n+        if (_referringProperties == null) {\n+            _referringProperties = new LinkedList<Referring>();\n+        }\n+        _referringProperties.add(currentReferring);\n+    }\n+\n     /**\n-     * Method called to assign actual POJO to which ObjectId refers to:\n-     * will also handle referring properties, if any, by assigning POJO.\n+     * Method called to assign actual POJO to which ObjectId refers to: will\n+     * also handle referring properties, if any, by assigning POJO.\n      */\n-    public void bindItem(Object ob) throws IOException\n+    public void bindItem(Object ob)\n+        throws IOException\n     {\n         if (item != null) {\n-            throw new IllegalStateException(\"Already had POJO for id (\"+id.getClass().getName()+\") [\"+id+\"]\");\n+            throw new IllegalStateException(\"Already had POJO for id (\" + id.getClass().getName() + \") [\" + id + \"]\");\n         }\n         item = ob;\n+        if (_referringProperties != null) {\n+            Iterator<Referring> it = _referringProperties.iterator();\n+            _referringProperties = null;\n+            while (it.hasNext()) {\n+                Referring ref = it.next();\n+                ref.handleResolvedForwardReference(id, ob);\n+            }\n+        }\n+    }\n+\n+    public boolean hasReferringProperties()\n+    {\n+        return (_referringProperties != null) && !_referringProperties.isEmpty();\n+    }\n+\n+    public Iterator<Referring> referringProperties()\n+    {\n+        if (_referringProperties == null) {\n+            return Collections.<Referring> emptyList().iterator();\n+        }\n+        return _referringProperties.iterator();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper classes\n+    /**********************************************************\n+     */\n+\n+    public interface Referring {\n+        void handleResolvedForwardReference(Object id, Object value)\n+            throws IOException;\n     }\n }", "timestamp": 1389625653, "metainfo": ""}