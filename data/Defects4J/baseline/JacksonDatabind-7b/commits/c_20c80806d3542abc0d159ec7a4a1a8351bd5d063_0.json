{"sha": "20c80806d3542abc0d159ec7a4a1a8351bd5d063", "log": "trying to unify handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n             if (ctxt.getAnnotationIntrospector().hasCreatorAnnotation(factory)) {\n                 int argCount = factory.getParameterCount();\n                 if (argCount == 1) {\n-                    Class<?> returnType = factory.getRawType();\n+                    Class<?> returnType = factory.getRawReturnType();\n                     // usually should be class, but may be just plain Enum<?> (for Enum.valueOf()?)\n                     if (returnType.isAssignableFrom(enumClass)) {\n                         return EnumDeserializer.deserializerForCreator(ctxt.getConfig(), enumClass, factory);\n             if (config.getAnnotationIntrospector().hasCreatorAnnotation(factory)) {\n                 int argCount = factory.getParameterCount();\n                 if (argCount == 1) {\n-                    Class<?> returnType = factory.getRawType();\n+                    Class<?> returnType = factory.getRawReturnType();\n                     // usually should be class, but may be just plain Enum<?> (for Enum.valueOf()?)\n                     if (returnType.isAssignableFrom(enumClass)) {\n                         // note: mostly copied from 'EnumDeserializer.deserializerForCreator(...)'\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n \n     // // Simple lazy-caching:\n \n-    protected Class<?>[] _paramTypes;\n+    protected Class<?>[] _paramClasses;\n \n     /*\n     /*****************************************************\n \n     /**\n      * For methods, this returns declared return type, which is only\n-     * useful with getters (setters do not return anything; hence \"void\"\n-     * type is returned here)\n+     * useful with getters (setters do not usually return anything;\n+     * hence \"void\" type is returned here)\n      */\n     @Override\n     public Class<?> getRawType() {\n \n     @Override\n     public int getParameterCount() {\n-        return getParameterTypes().length;\n+        return getParameterClasses().length;\n     }\n \n     public Type[] getParameterTypes() {\n     @Override\n     public Class<?> getParameterClass(int index)\n     {\n-        Class<?>[] types = _method.getParameterTypes();\n+        Class<?>[] types = getParameterClasses();\n         return (index >= types.length) ? null : types[index];\n     }\n \n         return (index >= types.length) ? null : types[index];\n     }\n \n+    public Class<?> getRawReturnType() {\n+        return _method.getReturnType();\n+    }\n+    \n     public Class<?>[] getParameterClasses()\n     {\n-        if (_paramTypes == null) {\n-            _paramTypes = _method.getParameterTypes();\n+        if (_paramClasses == null) {\n+            _paramClasses = _method.getParameterTypes();\n         }\n-        return _paramTypes;\n+        return _paramClasses;\n     }\n \n     //public Type getGenericReturnType() { return _method.getGenericReturnType(); }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n          * (i.e. allowed to be sub-class, although usually is the same\n          * class)\n          */\n-        Class<?> rt = am.getRawType();\n+        Class<?> rt = am.getRawReturnType();\n         if (!getBeanClass().isAssignableFrom(rt)) {\n             return false;\n         }\n             /* For now let's require a Map; in future can add support for other\n              * types like perhaps Iterable<Map.Entry>?\n              */\n-            Class<?> type = _anyGetterMethod.getRawType();\n+            Class<?> type = _anyGetterMethod.getRawReturnType();\n             if (!Map.class.isAssignableFrom(type)) {\n                 throw new IllegalArgumentException(\"Invalid 'any-getter' annotation on method \"+_anyGetterMethod.getName()+\"(): return type is not instance of java.util.Map\");\n             }", "timestamp": 1327606557, "metainfo": ""}