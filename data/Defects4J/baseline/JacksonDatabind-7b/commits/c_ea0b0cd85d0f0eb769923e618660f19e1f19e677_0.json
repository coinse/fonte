{"sha": "ea0b0cd85d0f0eb769923e618660f19e1f19e677", "log": "yet more warnings cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n              if (enumType == null) {\n                  throw new IllegalStateException(\"Can not resolve Enum type of EnumMap: \"+typeHint);\n              }\n-             JsonSerializer<?> enumSer = (enumType == null) ? null :\n-                 visitor.getProvider().findValueSerializer(enumType, _property);\n+             JsonSerializer<?> enumSer = visitor.getProvider().findValueSerializer(enumType, _property);\n              if (!(enumSer instanceof EnumSerializer)) {\n                  throw new IllegalStateException(\"Can not resolve Enum type of EnumMap: \"+typeHint);\n              }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestParserUsingMapper.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestParserUsingMapper.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.CharacterEscapes;\n import com.fasterxml.jackson.core.io.SerializedString;\n-\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n public class TestParserUsingMapper  extends com.fasterxml.jackson.test.BaseTest\n         jp.close();\n     }\n \n+    @SuppressWarnings(\"resource\")\n     public void testPojoReadingFailing()\n         throws IOException\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple.java\n         }\n     }\n \n+    @SuppressWarnings(\"hiding\")\n     static class SimpleBuilderXY\n     {\n-    \tpublic int x, y;\n+        public int x, y;\n     \t\n-    \tpublic SimpleBuilderXY withX(int x) {\n-    \t\tthis.x = x;\n-    \t\treturn this;\n-    \t}\n-\n-    \tpublic SimpleBuilderXY withY(int y) {\n-    \t\tthis.y = y;\n-    \t\treturn this;\n-    \t}\n-\n-    \tpublic ValueClassXY build() {\n-    \t\treturn new ValueClassXY(x, y);\n-    \t}\n+        public SimpleBuilderXY withX(int x) {\n+    \t\t    this.x = x;\n+    \t\t    return this;\n+        }\n+\n+        public SimpleBuilderXY withY(int y) {\n+    \t\t    this.y = y;\n+    \t\t    return this;\n+        }\n+\n+        public ValueClassXY build() {\n+    \t\t    return new ValueClassXY(x, y);\n+        }\n     }\n \n     // // 3-property value, with more varied builder\n         }\n     }\n \n+    @SuppressWarnings(\"hiding\")\n     static class BuildABC\n     {\n-    \tpublic int a; // to be used as is\n-    \tprivate int b, c;\n+        public int a; // to be used as is\n+        private int b, c;\n     \t\n-    \t@JsonProperty(\"b\")\n-    \tpublic BuildABC assignB(int b) {\n-    \t\tthis.b = b;\n-    \t\treturn this;\n-    \t}\n-\n-    \t// Also ok NOT to return 'this'\n-    \t@JsonSetter(\"c\")\n-    \tpublic void c(int c) {\n-    \t\tthis.c = c;\n-    \t}\n-\n-    \tpublic ValueClassABC build() {\n-    \t\treturn new ValueClassABC(a, b, c);\n-    \t}\n+        @JsonProperty(\"b\")\n+        public BuildABC assignB(int b) {\n+            this.b = b;\n+            return this;\n+        }\n+\n+        // Also ok NOT to return 'this'\n+        @JsonSetter(\"c\")\n+        public void c(int c) {\n+            this.c = c;\n+        }\n+\n+        public ValueClassABC build() {\n+            return new ValueClassABC(a, b, c);\n+        }\n     }\n \n     // // Then Builder that is itself immutable\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJacksonTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJacksonTypes.java\n package com.fasterxml.jackson.databind.deser;\n \n import java.util.*;\n-\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n         // First, try standard sample doc:\n         TokenBuffer result = m.readValue(SAMPLE_DOC_JSON_SPEC, TokenBuffer.class);\n         verifyJsonSpecSampleDoc(result.asParser(), true);\n+        result.close();\n     }\n \n+    @SuppressWarnings(\"resource\")\n     public void testTokenBufferWithSequence() throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n--- a/src/test/java/com/fasterxml/jackson/databind/ext/TestCoreXMLTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ext/TestCoreXMLTypes.java\n \n import javax.xml.datatype.*;\n import javax.xml.namespace.QName;\n-\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;\n      */\n     \n     // First things first: must be able to load the deserializers...\n+    @SuppressWarnings(\"unused\")\n     public void testDeserializerLoading()\n     {\n         new CoreXMLDeserializers.DurationDeserializer();\n--- a/src/test/java/com/fasterxml/jackson/databind/interop/TestExternalizable.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestExternalizable.java\n     }\n     \n //    @com.fasterxml.jackson.annotation.JsonFormat(shape=com.fasterxml.jackson.annotation.JsonFormat.Shape.ARRAY)\n+    @SuppressWarnings(\"resource\")\n     static class MyPojo implements Externalizable\n     {\n         public int id;\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestPOJOPropertiesCollector.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestPOJOPropertiesCollector.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n \n         assertNotNull(beanDesc);\n     }\n \n+    @SuppressWarnings(\"hiding\")\n     public void testJackson703() throws Exception\n     {\n     \t// note: need a separate mapper, need to reconfigure\n     /**********************************************************\n      */\n \n-    protected POJOPropertiesCollector collector(ObjectMapper mapper,\n+    protected POJOPropertiesCollector collector(ObjectMapper m0,\n             Class<?> cls, boolean forSerialization)\n     {\n         BasicClassIntrospector bci = new BasicClassIntrospector();\n         // no real difference between serialization, deserialization, at least here\n         if (forSerialization) {\n-            return bci.collectProperties(mapper.getSerializationConfig(),\n-                    mapper.constructType(cls), null, true, \"set\");\n-        }\n-        return bci.collectProperties(mapper.getDeserializationConfig(),\n-                mapper.constructType(cls), null, false, \"set\");\n+            return bci.collectProperties(m0.getSerializationConfig(),\n+                    m0.constructType(cls), null, true, \"set\");\n+        }\n+        return bci.collectProperties(m0.getDeserializationConfig(),\n+                m0.constructType(cls), null, false, \"set\");\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestTreeTraversingParser.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeTraversingParser.java\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n \n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+        jp.close();\n     }\n     \n     /**\n         ObjectMapper m = new ObjectMapper();\n         JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC);\n         JsonParser jp = tree.traverse();\n-\n         verifyJsonSpecSampleDoc(jp, true);\n+        jp.close();\n     }\n \n     public void testBinaryPojo() throws Exception\n         assertArrayEquals(inputBinary, data);\n         Object pojo = jp.getEmbeddedObject();\n         assertSame(data, pojo);\n+        jp.close();\n     }\n \n     public void testBinaryNode() throws Exception\n         assertEquals(\"APs=\", jp.getText());\n \n         assertNull(jp.nextToken());\n+        jp.close();\n     }\n \n     public void testTextAsBinary() throws Exception\n         } catch (JsonParseException e) {\n             verifyException(e, \"Illegal character\");\n         }\n+        jp.close();\n     }\n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n     public void testEnumsWithJsonValueUsingMixin() throws Exception\n     {\n         // can't share, as new mix-ins are added\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.addMixInAnnotations(TestEnum.class, ToStringMixin.class);\n-        assertEquals(\"\\\"b\\\"\", mapper.writeValueAsString(TestEnum.B));\n+        ObjectMapper m = new ObjectMapper();\n+        m.addMixInAnnotations(TestEnum.class, ToStringMixin.class);\n+        assertEquals(\"\\\"b\\\"\", m.writeValueAsString(TestEnum.B));\n     }\n \n     /**\n     // [JACKSON-212]\n     public void testToStringEnum() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, true);\n-        assertEquals(\"\\\"b\\\"\", mapper.writeValueAsString(LowerCaseEnum.B));\n+        ObjectMapper m = new ObjectMapper();\n+        m.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, true);\n+        assertEquals(\"\\\"b\\\"\", m.writeValueAsString(LowerCaseEnum.B));\n     }\n \n     // [JACKSON-212]\n     public void testToStringEnumWithEnumMap() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, true);\n-        EnumMap<LowerCaseEnum,String> m = new EnumMap<LowerCaseEnum,String>(LowerCaseEnum.class);\n-        m.put(LowerCaseEnum.C, \"value\");\n-        assertEquals(\"{\\\"c\\\":\\\"value\\\"}\", mapper.writeValueAsString(m));\n+        ObjectMapper m = new ObjectMapper();\n+        m.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, true);\n+        EnumMap<LowerCaseEnum,String> enums = new EnumMap<LowerCaseEnum,String>(LowerCaseEnum.class);\n+        enums.put(LowerCaseEnum.C, \"value\");\n+        assertEquals(\"{\\\"c\\\":\\\"value\\\"}\", m.writeValueAsString(enums));\n     }\n \n     // [JACKSON-576]\n     public void testAsIndex() throws Exception\n     {\n         // By default, serialize using name\n-        ObjectMapper mapper = new ObjectMapper();\n-        assertFalse(mapper.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX));\n-        assertEquals(quote(\"B\"), mapper.writeValueAsString(TestEnum.B));\n+        ObjectMapper m = new ObjectMapper();\n+        assertFalse(m.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX));\n+        assertEquals(quote(\"B\"), m.writeValueAsString(TestEnum.B));\n \n         // but we can change (dynamically, too!) it to be number-based\n-        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n-        assertEquals(\"1\", mapper.writeValueAsString(TestEnum.B));\n+        m.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n+        assertEquals(\"1\", m.writeValueAsString(TestEnum.B));\n     }\n \n     // [JACKSON-757]\n     public void testGenericEnumSerializer() throws Exception\n     {\n         // By default, serialize using name\n-        ObjectMapper mapper = new ObjectMapper();\n+        ObjectMapper m = new ObjectMapper();\n         SimpleModule module = new SimpleModule(\"foobar\");\n         module.addSerializer(Enum.class, new LowerCasingEnumSerializer());\n-        mapper.registerModule(module);\n-        assertEquals(quote(\"b\"), mapper.writeValueAsString(TestEnum.B));\n+        m.registerModule(module);\n+        assertEquals(quote(\"b\"), m.writeValueAsString(TestEnum.B));\n     }\n }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestTreeSerialization.java\n         assertEquals(1, ob.size());\n         List<Object> list = (List<Object>) ob.get(\"arr\");\n         assertEquals(0, list.size());\n+        jg.close();\n     }\n \n     /**\n         Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class);\n         assertEquals(1, result.size());\n         assertEquals(\"abc\", result.get(\"pojo\"));\n+        jg.close();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n         for (int i = 0; i < 3; ++i) {\n             assertEquals(Integer.valueOf(i+1), list.get(i));\n         }\n+        jg.close();\n     }\n \n     @SuppressWarnings(\"unchecked\")\n         assertEquals(2, bean.size());\n         assertEquals(\"y\", bean.get(\"x\"));\n         assertEquals(Integer.valueOf(13), bean.get(\"y\"));\n+        jg.close();\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n         // then content check too:\n         verifyJsonSpecSampleDoc(tb.asParser(), true);\n         tb.close();\n+        jp.close();\n     }\n \n     public void testAppend() throws IOException\n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n         jp.close();\n         buf1.close();\n+        buf2.close();\n     }\n     \n     /*\n         assertTrue(jp.isClosed());\n         jp.close();\n         buf.close();\n+        seq.close();\n     }\n     \n     /**\n      * Test to verify that TokenBuffer and JsonParserSequence work together\n      * as expected.\n      */\n+    @SuppressWarnings(\"resource\")\n     public void testWithMultipleJsonParserSequences() throws IOException\n     {\n         TokenBuffer buf1 = new TokenBuffer(null);", "timestamp": 1374817831, "metainfo": ""}