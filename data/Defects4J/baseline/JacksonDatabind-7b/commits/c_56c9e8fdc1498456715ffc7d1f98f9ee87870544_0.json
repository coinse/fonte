{"sha": "56c9e8fdc1498456715ffc7d1f98f9ee87870544", "log": "test cleanup", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserializationWithDefault.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserializationWithDefault.java\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.databind.BaseMapTest;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n \n /**\n  * Unit tests related to [JACKSON-712]; specialized handling of\n  */\n public class TestTypedDeserializationWithDefault extends BaseMapTest\n {\n-    private final ObjectMapper mapper = new ObjectMapper();\n-\n     @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\", defaultImpl = LegacyInter.class)\n     @JsonSubTypes(value = {@JsonSubTypes.Type(name = \"mine\", value = MyInter.class)})\n     public static interface Inter { }\n         @JsonProperty(\"blah\") public List<String> blah;\n     }\n \n-  public static class LegacyInter extends MyInter\n-  {\n-    @JsonCreator\n-    LegacyInter(Object obj)\n+    public static class LegacyInter extends MyInter\n     {\n-      if (obj instanceof List) {\n-        blah = new ArrayList<String>();\n-        for (Object o : (List<?>) obj) {\n-          blah.add(o.toString());\n+        @JsonCreator\n+        LegacyInter(Object obj)\n+        {\n+            if (obj instanceof List) {\n+                blah = new ArrayList<String>();\n+                for (Object o : (List<?>) obj) {\n+                    blah.add(o.toString());\n+                }\n+            }\n+            else if (obj instanceof String) {\n+                blah = Arrays.asList(((String) obj).split(\",\"));\n+            }\n+            else {\n+                throw new IllegalArgumentException(\"Unknown type: \" + obj.getClass());\n+            }\n         }\n-      }\n-      else if (obj instanceof String) {\n-        blah = Arrays.asList(((String) obj).split(\",\"));\n-      }\n-      else {\n-        throw new IllegalArgumentException(\"Unknown type: \" + obj.getClass());\n-      }\n     }\n-  }\n \n     /*\n     /**********************************************************\n \n     public void testDeserializationWithObject() throws Exception\n     {\n-        Inter inter = mapper.readValue(\"{\\\"type\\\": \\\"mine\\\", \\\"blah\\\": [\\\"a\\\", \\\"b\\\", \\\"c\\\"]}\", Inter.class);\n+        Inter inter = objectReader(Inter.class).readValue(\"{\\\"type\\\": \\\"mine\\\", \\\"blah\\\": [\\\"a\\\", \\\"b\\\", \\\"c\\\"]}\");\n         assertTrue(inter instanceof MyInter);\n         assertFalse(inter instanceof LegacyInter);\n         assertEquals(Arrays.asList(\"a\", \"b\", \"c\"), ((MyInter) inter).blah);\n     }\n \n-  public void testDeserializationWithString() throws Exception\n-  {\n-    Inter inter = mapper.readValue(\"\\\"a,b,c,d\\\"\", Inter.class);\n+    public void testDeserializationWithString() throws Exception\n+    {\n+        Inter inter = objectReader(Inter.class).readValue(\"\\\"a,b,c,d\\\"\");\n+        assertTrue(inter instanceof LegacyInter);\n+        assertEquals(Arrays.asList(\"a\", \"b\", \"c\", \"d\"), ((MyInter) inter).blah);\n+    }\n \n-    assertTrue(inter instanceof LegacyInter);\n-    assertEquals(Arrays.asList(\"a\", \"b\", \"c\", \"d\"), ((MyInter) inter).blah);\n-  }\n+    public void testDeserializationWithArray() throws Exception\n+    {\n+        Inter inter = objectReader(Inter.class).readValue(\"[\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"]\");\n+        assertTrue(inter instanceof LegacyInter);\n+        assertEquals(Arrays.asList(\"a\", \"b\", \"c\", \"d\"), ((MyInter) inter).blah);\n+    }\n \n-  public void testDeserializationWithArray() throws Exception\n-  {\n-    Inter inter = mapper.readValue(\"[\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\"]\", Inter.class);\n-\n-    assertTrue(inter instanceof LegacyInter);\n-    assertEquals(Arrays.asList(\"a\", \"b\", \"c\", \"d\"), ((MyInter) inter).blah);\n-  }\n-\n-  public void testDeserializationWithArrayOfSize2() throws Exception\n-  {\n-    Inter inter = mapper.readValue(\"[\\\"a\\\", \\\"b\\\"]\", Inter.class);\n-\n-    assertTrue(inter instanceof LegacyInter);\n-    assertEquals(Arrays.asList(\"a\", \"b\"), ((MyInter) inter).blah);\n-  }\n+    public void testDeserializationWithArrayOfSize2() throws Exception\n+    {\n+        Inter inter = objectReader(Inter.class).readValue(\"[\\\"a\\\", \\\"b\\\"]\");\n+        assertTrue(inter instanceof LegacyInter);\n+        assertEquals(Arrays.asList(\"a\", \"b\"), ((MyInter) inter).blah);\n+    }\n }", "timestamp": 1360216089, "metainfo": ""}