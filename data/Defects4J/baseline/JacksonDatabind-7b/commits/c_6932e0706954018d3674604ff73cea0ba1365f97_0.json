{"sha": "6932e0706954018d3674604ff73cea0ba1365f97", "log": "More support for reading native Object Ids", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n             return deserializeFromObjectUsingNonDefault(jp, ctxt);\n         }\n         final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n+        if (jp.canReadObjectId()) {\n+            Object id = jp.getObjectId();\n+            if (id != null) {\n+                _handleTypedObjectId(jp, ctxt, bean, id);\n+            }\n+        }\n         if (_injectables != null) {\n             injectValues(ctxt, bean);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n                 && (_injectables == null)\n                 && !_needViewProcesing\n                 // also, may need to reorder stuff if we expect Object Id:\n-                && (_objectIdReader != null)\n+                && (_objectIdReader == null)\n                 ;\n     }\n \n         return contextual;\n     }\n \n-    \n     /**\n      * Helper method called to see if given property is part of 'managed' property\n      * pair (managed + back reference), and if so, handle resolution details.\n             TypeDeserializer typeDeserializer)\n         throws IOException, JsonProcessingException\n     {\n-        /* 16-Feb-2012, tatu: ObjectId may be used as well... need to check\n-         *    that first\n-         */\n+        // 16-Feb-2012, tatu: ObjectId may be used as well... need to check that first\n         if (_objectIdReader != null) {\n             JsonToken t = jp.getCurrentToken();\n             // should be good enough check; we only care about Strings, integral numbers:\n             if (t != null && t.isScalarValue()) {\n                 return deserializeFromObjectId(jp, ctxt);\n             }\n+            // 05-Aug-2013, tatu: Further, may use native Object Id\n+            if (jp.canReadObjectId()) {\n+                Object id = jp.getObjectId();\n+                if (id != null) {\n+                    Object ob = typeDeserializer.deserializeTypedFromObject(jp, ctxt);\n+                    return _handleTypedObjectId(jp, ctxt, ob, id);\n+                }\n+            }\n         }\n         // In future could check current token... for now this should be enough:\n         return typeDeserializer.deserializeTypedFromObject(jp, ctxt);\n     }\n \n+    /**\n+     * Offlined method called to handle \"native\" Object Id that has been read\n+     * and known to be associated with given deserialized POJO.\n+     * \n+     * @since 2.3\n+     */\n+    protected Object _handleTypedObjectId(JsonParser jp, DeserializationContext ctxt,\n+            Object pojo, Object id)\n+        throws IOException, JsonProcessingException\n+    {\n+        ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator);\n+        roid.bindItem(pojo);\n+        // also: may need to set a property value as well\n+        SettableBeanProperty idProp = _objectIdReader.idProperty;\n+        if (idProp != null) {\n+            return idProp.setAndReturn(pojo, id);\n+        }\n+        return pojo;\n+    }\n+    \n     // NOTE: currently only used by standard BeanDeserializer (not Builder-based)\n     /**\n      * Alternative deserialization method used when we expect to see Object Id;\n     {\n         final String idPropName = _objectIdReader.propertyName.getSimpleName();\n         // First, the simple case: we point to the Object Id property\n-        if (idPropName.equals(jp.getCurrentName())) {\n+        if (idPropName.equals(jp.getCurrentName())\n+                // 05-Aug-2013, tatu: Or might point to a native Object Id\n+                || jp.canReadObjectId()) {\n             return deserializeFromObject(jp, ctxt);\n         }\n         // otherwise need to reorder things\n      */\n \n     protected void injectValues(DeserializationContext ctxt, Object bean)\n-            throws IOException, JsonProcessingException\n+        throws IOException, JsonProcessingException\n     {\n         for (ValueInjector injector : _injectables) {\n             injector.inject(ctxt, bean);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n             Object instance)\n         throws IOException, JsonProcessingException\n     {\n-    \tdeserializeSetAndReturn(jp, ctxt, instance);\n+        deserializeSetAndReturn(jp, ctxt, instance);\n     }\n \n     @Override\n         }\n         return instance;\n     }\n-    \n-    \n+\n     @Override\n     public void set(Object instance, Object value) throws IOException {\n-    \tsetAndReturn(instance, value);\n+        setAndReturn(instance, value);\n     }\n \n     @Override", "timestamp": 1375763286, "metainfo": ""}