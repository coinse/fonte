{"sha": "cc1c78ba67b1d9cac702a0d14473a272b77f97d3", "log": "...", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n         assertSame(f, BooleanNode.valueOf(false));\n         assertStandardEquals(f);\n         assertFalse(f.booleanValue());\n+        assertFalse(f.asBoolean());\n         assertEquals(\"false\", f.asText());\n         assertEquals(JsonToken.VALUE_FALSE, f.asToken());\n \n         assertSame(t, BooleanNode.valueOf(true));\n         assertStandardEquals(t);\n         assertTrue(t.booleanValue());\n+        assertTrue(t.asBoolean());\n         assertEquals(\"true\", t.asText());\n         assertEquals(JsonToken.VALUE_TRUE, t.asToken());\n \n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectId.java\n package com.fasterxml.jackson.databind.struct;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import com.fasterxml.jackson.annotation.*;\n \n       }    \n     }\n \n+    /* Problem in which always-as-id reference may prevent initial\n+     * serialization of a POJO.\n+     */\n+    \n+    static class Company {\n+        public List<Employee> employees;\n+\n+        public void add(Employee e) {\n+            if (employees == null) {\n+                employees = new ArrayList<Employee>();\n+            }\n+            employees.add(e);\n+        }\n+    }\n+\n+    @JsonIdentityInfo(property=\"id\",\n+            generator=ObjectIdGenerators.PropertyGenerator.class)\n+    static class Employee {\n+        public int id;\n+     \n+        public String name;\n+     \n+        @JsonIdentityReference(alwaysAsId=true)\n+        public Employee manager;\n+\n+        @JsonIdentityReference(alwaysAsId=true)\n+        public List<Employee> reports;\n+    \n+        public Employee() { }\n+        public Employee(int id, String name, Employee manager) {\n+            this.id = id;\n+            this.name = name;\n+            this.manager = manager;\n+            reports = new ArrayList<Employee>();\n+        }\n+\n+        public Employee addReport(Employee e) {\n+            reports.add(e);\n+            return this;\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Test methods\n \n         assertSame(deserialized.a, deserialized.b);\n     }\n+\n+    // For Issue#188\n+    public void testMixedRefsIssue188() throws Exception\n+    {\n+        Company comp = new Company();\n+        Employee e1 = new Employee(1, \"First\", null);\n+        Employee e2 = new Employee(2, \"Second\", e1);\n+        e1.addReport(e2);\n+        comp.add(e1);\n+        comp.add(e2);\n+\n+        String json = MAPPER.writeValueAsString(comp);\n+\n+System.out.println(\"JSON: \"+json);\n+        \n+        assertEquals(\"{\\\"employees\\\":[\"\n+                +\"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                +\"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]},\"\n+                +\"]}\",\n+                json);\n+    }\n }", "timestamp": 1362891501, "metainfo": ""}