{"sha": "ad8c3d2775b47478b12387a16ee6b05a5906e96e", "log": "One fix related to #358 to also resolve related case of Iterator", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n                 Object elem = value.next();\n                 if (elem == null) {\n                     provider.defaultSerializeNull(jgen);\n-                } else {\n+                    continue;\n+                }\n+                JsonSerializer<Object> currSerializer = _elementSerializer;\n+                if (currSerializer == null) {\n                     // Minor optimization to avoid most lookups:\n                     Class<?> cc = elem.getClass();\n-                    JsonSerializer<Object> currSerializer;\n                     if (cc == prevClass) {\n                         currSerializer = prevSerializer;\n                     } else {\n                         prevSerializer = currSerializer;\n                         prevClass = cc;\n                     }\n-                    if (typeSer == null) {\n-                        currSerializer.serialize(elem, jgen, provider);\n-                    } else {\n-                        currSerializer.serializeWithType(elem, jgen, provider, typeSer);\n-                    }\n+                }\n+                if (typeSer == null) {\n+                    currSerializer.serialize(elem, jgen, provider);\n+                } else {\n+                    currSerializer.serializeWithType(elem, jgen, provider, typeSer);\n                 }\n             } while (value.hasNext());\n         }", "timestamp": 1386138691, "metainfo": ""}