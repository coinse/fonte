{"sha": "889dbc81b088758e439a50ec8c3f58ccc6ac3ba2", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n+import com.fasterxml.jackson.databind.util.ArrayIterator;\n \n /**\n  * Configuration settings container class for {@link DeserializerFactory}.\n     public boolean hasValueInstantiators() { return _valueInstantiators.length > 0; }\n     \n     public Iterable<Deserializers> deserializers() {\n-        return ArrayBuilders.arrayAsIterable(_additionalDeserializers);\n+        return new ArrayIterator<Deserializers>(_additionalDeserializers);\n     }\n \n     public Iterable<KeyDeserializers> keyDeserializers() {\n-        return ArrayBuilders.arrayAsIterable(_additionalKeyDeserializers);\n+        return new ArrayIterator<KeyDeserializers>(_additionalKeyDeserializers);\n     }\n     \n     public Iterable<BeanDeserializerModifier> deserializerModifiers() {\n-        return ArrayBuilders.arrayAsIterable(_modifiers);\n+        return new ArrayIterator<BeanDeserializerModifier>(_modifiers);\n     }\n \n     public Iterable<AbstractTypeResolver> abstractTypeResolvers() {\n-        return ArrayBuilders.arrayAsIterable(_abstractTypeResolvers);\n+        return new ArrayIterator<AbstractTypeResolver>(_abstractTypeResolvers);\n     }\n \n     public Iterable<ValueInstantiators> valueInstantiators() {\n-        return ArrayBuilders.arrayAsIterable(_valueInstantiators);\n+        return new ArrayIterator<ValueInstantiators>(_valueInstantiators);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java\n \n import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n+import com.fasterxml.jackson.databind.util.ArrayIterator;\n \n /**\n  * Configuration settings container class for\n     }\n \n     public boolean hasSerializers() { return _additionalSerializers.length > 0; }\n-\n     public boolean hasKeySerializers() { return _additionalKeySerializers.length > 0; }\n-    \n     public boolean hasSerializerModifiers() { return _modifiers.length > 0; }\n-    \n-    public Iterable<Serializers> serializers() {\n-        return ArrayBuilders.arrayAsIterable(_additionalSerializers);\n-    }\n-\n-    public Iterable<Serializers> keySerializers() {\n-        return ArrayBuilders.arrayAsIterable(_additionalKeySerializers);\n-    }\n-    \n-    public Iterable<BeanSerializerModifier> serializerModifiers() {\n-        return ArrayBuilders.arrayAsIterable(_modifiers);\n-    }\n+    public Iterable<Serializers> serializers() { return new ArrayIterator<Serializers>(_additionalSerializers); }\n+    public Iterable<Serializers> keySerializers() { return new ArrayIterator<Serializers>(_additionalKeySerializers); }\n+    public Iterable<BeanSerializerModifier> serializerModifiers() { return new ArrayIterator<BeanSerializerModifier>(_modifiers); }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n     }\n \n     @JacksonStdImpl\n-    public final static class ByteDeserializer\n+    public static class ByteDeserializer\n         extends PrimitiveOrWrapperDeserializer<Byte>\n     {\n         private static final long serialVersionUID = 1L;\n     }\n \n     @JacksonStdImpl\n-    public final static class ShortDeserializer\n+    public static class ShortDeserializer\n         extends PrimitiveOrWrapperDeserializer<Short>\n     {\n         private static final long serialVersionUID = 1L;\n     }\n \n     @JacksonStdImpl\n-    public final static class CharacterDeserializer\n+    public static class CharacterDeserializer\n         extends PrimitiveOrWrapperDeserializer<Character>\n     {\n         private static final long serialVersionUID = 1L;\n     }\n \n     @JacksonStdImpl\n-    public final static class FloatDeserializer\n+    public static class FloatDeserializer\n         extends PrimitiveOrWrapperDeserializer<Float>\n     {\n         private static final long serialVersionUID = 1L;\n     }\n \n     @JacksonStdImpl\n-    public final static class DoubleDeserializer\n+    public static class DoubleDeserializer\n         extends PrimitiveOrWrapperDeserializer<Double>\n     {\n         private static final long serialVersionUID = 1L;\n      */\n     @SuppressWarnings(\"serial\")\n     @JacksonStdImpl\n-    public final static class NumberDeserializer\n+    public static class NumberDeserializer\n         extends StdScalarDeserializer<Number>\n     {\n         public final static NumberDeserializer instance = new NumberDeserializer();\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n     protected final static int TYPE_DURATION = 1;\n     protected final static int TYPE_G_CALENDAR = 2;\n     protected final static int TYPE_QNAME = 3;\n-    \n+\n+    /**\n+     * Combo-deserializer that supports deserialization of somewhat optional\n+     * javax.xml types {@link QName}, {@link Duration} and {@link XMLGregorianCalendar}.\n+     * Combined into a single class to eliminate bunch of one-off implementation\n+     * classes, to reduce resulting jar size (mostly).\n+     * \n+     * @since 2.4\n+     */\n     public static class Std extends FromStringDeserializer<Object>\n     {\n         private static final long serialVersionUID = 1L;\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n             return ToStringSerializer.instance;\n         }\n         if (XMLGregorianCalendar.class.isAssignableFrom(raw)) {\n-            return XMLGregorianCalendarSerializer.instance;\n+            return new XMLGregorianCalendarSerializer();\n         }\n         return null;\n     }\n \n     public static class XMLGregorianCalendarSerializer extends StdSerializer<XMLGregorianCalendar>\n     {\n-        public final static XMLGregorianCalendarSerializer instance = new XMLGregorianCalendarSerializer();\n-        \n         public XMLGregorianCalendarSerializer() {\n             super(XMLGregorianCalendar.class);\n         }\n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-                throws JsonMappingException\n-        {\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n             CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMDeserializer.java\n     @Override\n     public abstract T _deserialize(String value, DeserializationContext ctxt);\n \n-    protected final Document parse(String value) throws IllegalArgumentException\n-    {\n+    protected final Document parse(String value) throws IllegalArgumentException {\n         try {\n             return _parserFactory.newDocumentBuilder().parse(new InputSource(new StringReader(value)));\n         } catch (Exception e) {\n     /**********************************************************\n      */\n     \n-    public static class NodeDeserializer extends DOMDeserializer<Node>\n-    {\n+    public static class NodeDeserializer extends DOMDeserializer<Node> {\n         private static final long serialVersionUID = 1L;\n         public NodeDeserializer() { super(Node.class); }\n         @Override\n         }\n     }    \n \n-    public static class DocumentDeserializer extends DOMDeserializer<Document>\n-    {\n+    public static class DocumentDeserializer extends DOMDeserializer<Document> {\n         private static final long serialVersionUID = 1L;\n         public DocumentDeserializer() { super(Document.class); }\n         @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n-public class DOMSerializer\n-    extends StdSerializer<Node>\n+public class DOMSerializer extends StdSerializer<Node>\n {\n     protected final DOMImplementationLS _domImpl;\n \n-    public DOMSerializer()\n-    {\n+    public DOMSerializer() {\n         super(Node.class);\n         DOMImplementationRegistry registry;\n         try {\n     }\n \n \t@Override\n-    public JsonNode getSchema(SerializerProvider provider, java.lang.reflect.Type typeHint)\n-    {\n+    public JsonNode getSchema(SerializerProvider provider, java.lang.reflect.Type typeHint) {\n         // Well... it is serialized as String\n         return createSchemaNode(\"string\", true);\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-            throws JsonMappingException\n-    {\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n         if (visitor != null) visitor.expectAnyFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n /**\n  * Helper class used for isolating details of handling optional+external types\n  * (javax.xml classes) from standard factories that offer them.\n- * \n- * @author tatu\n  */\n-public class OptionalHandlerFactory\n-    implements java.io.Serializable\n+public class OptionalHandlerFactory implements java.io.Serializable\n {\n     private static final long serialVersionUID = 1;\n \n     {\n         try {\n             return Class.forName(className).newInstance();\n-        }\n-        catch (LinkageError e) { }\n+        } catch (LinkageError e) { }\n         // too many different kinds to enumerate here:\n         catch (Exception e) { }\n         return null;\n         }\n         return false;\n     }\n-    \n }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n  * reuse scheme, which assumes that caller knows not to use instances\n  * concurrently (which works ok with primitive arrays since they can\n  * not contain other non-primitive types).\n+ * Also note that instances are not thread safe; the intent is that\n+ * a builder is constructed on per-call (deserialization) basis.\n  */\n public final class ArrayBuilders\n {\n         result[0] = element;\n         return result;\n     }\n-    \n-    /**\n-     * Helper method for exposing contents of arrays using a read-only iterator\n-     */\n-    public static <T> Iterator<T> arrayAsIterator(T[] array)\n-    {\n-        return new ArrayIterator<T>(array);\n-    }\n-\n-    public static <T> Iterable<T> arrayAsIterable(T[] array)\n-    {\n-        return new ArrayIterator<T>(array);\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Helper classes\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Iterator implementation used to efficiently expose contents of an\n-     * Array as read-only iterator.\n-     */\n-    private final static class ArrayIterator<T>\n-        implements Iterator<T>, Iterable<T>\n-    {\n-        private final T[] _array;\n-        \n-        private int _index;\n-\n-        public ArrayIterator(T[] array) {\n-            _array = array;\n-            _index = 0;\n-        }\n-        \n-       @Override\n-        public boolean hasNext() {\n-            return _index < _array.length;\n-        }\n-\n-        @Override\n-        public T next()\n-        {\n-            if (_index >= _array.length) {\n-                throw new NoSuchElementException();\n-            }\n-            return _array[_index++];\n-        }\n-\n-        @Override\n-        public void remove() {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public Iterator<T> iterator() {\n-            return this;\n-        }\n-    }\n }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ArrayIterator.java\n+package com.fasterxml.jackson.databind.util;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Iterator implementation used to efficiently expose contents of an\n+ * Array as read-only iterator.\n+ */\n+public class ArrayIterator<T> implements Iterator<T>, Iterable<T>\n+{\n+    private final T[] _a;\n+    \n+    private int _index;\n+\n+    public ArrayIterator(T[] a) {\n+        _a = a;\n+        _index = 0;\n+    }\n+    \n+    @Override\n+    public boolean hasNext() { return _index < _a.length; }\n+\n+    @Override\n+    public T next() {\n+        if (_index >= _a.length) {\n+            throw new NoSuchElementException();\n+        }\n+        return _a[_index++];\n+    }\n+\n+    @Override public void remove() { throw new UnsupportedOperationException(); }\n+    @Override public Iterator<T> iterator() { return this; }\n+}", "timestamp": 1388728554, "metainfo": ""}