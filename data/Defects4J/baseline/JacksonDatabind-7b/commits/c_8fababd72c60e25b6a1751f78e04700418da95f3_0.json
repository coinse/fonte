{"sha": "8fababd72c60e25b6a1751f78e04700418da95f3", "log": "working schema serialization, except for JsonSerializableSchema is ignored", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/AnySchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/AnySchema.java\n \tprivate Set<String> enums;\n \t\n \t@JsonProperty(required = true)\n-\tpublic final SchemaType type = SchemaType.ANY;\n+\tprivate final SchemaType type = SchemaType.ANY;\n \t\n \t//instance initializer block\n \t{\n \t@Override\n \tpublic boolean isAnySchema() { return true; }\n \t\n+\t/* (non-Javadoc)\n+\t * @see com.fasterxml.jackson.databind.jsonschema.types.Schema#getType()\n+\t */\n+\t@Override\n+\tpublic SchemaType getType() {\n+\t\treturn type;\n+\t}\n+\t\n \tpublic void setEnums(Set<String> enums) {\n \t\tthis.enums = enums;\n \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/ArraySchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/ArraySchema.java\n package com.fasterxml.jackson.databind.jsonschema.types;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n import com.fasterxml.jackson.annotation.JsonValue;\n \n /*\n \tprivate ArraySchema.Items items;\n \t/**This attribute defines the maximum number of values in an array*/\n \t@JsonProperty\n-\tprivate int maxItems;\n+\tprivate Integer maxItems;\n \t/**This attribute defines the minimum number of values in an array*/\n \t@JsonProperty\n-\tprivate int minItems;\n+\tprivate Integer minItems;\n \t\n \t@JsonProperty(required = true)\n-\tpublic final SchemaType type = SchemaType.ARRAY;\n+\tprivate final SchemaType type = SchemaType.ARRAY;\n \t/**\n \t * This attribute indicates that all items in an array instance MUST be\n \t   unique (contains no two identical values).\n \t      object.\n \t */\n \t@JsonProperty\n-\tprivate Boolean uniqueItems;\n+\tprivate Boolean uniqueItems = null;\n \t\t\n \t@Override\n \tpublic ArraySchema asArraySchema() { return this; }\n \t * {@link ArraySchema#maxItems}\n \t * @return the maxItems\n \t */\n-\tpublic int getMaxItems() {\n+\tpublic Integer getMaxItems() {\n \t\treturn maxItems;\n \t}\n \n \t * {@link ArraySchema#minItems}\n \t * @return the minItems\n \t */\n-\tpublic int getMinItems() {\n+\tpublic Integer getMinItems() {\n \t\treturn minItems;\n \t}\n+\t\n+\t/* (non-Javadoc)\n+\t * @see com.fasterxml.jackson.databind.jsonschema.types.Schema#getType()\n+\t */\n+\t@Override\n+\tpublic SchemaType getType() {\n+\t\treturn type;\n+\t}\n+\t\n \t/**\n \t * {@link ArraySchema#uniqueItems}\n \t * @return the uniqueItems\n \t * {@link ArraySchema#maxItems}\n \t * @param maxItems the maxItems to set\n \t */\n-\tpublic void setMaxItems(int maxItems) {\n+\tpublic void setMaxItems(Integer maxItems) {\n \t\tthis.maxItems = maxItems;\n \t}\n \t\n \t * {@link ArraySchema#minItems}\n \t * @param minItems the minItems to set\n \t */\n-\tpublic void setMinItems(int minItems) {\n+\tpublic void setMinItems(Integer minItems) {\n \t\tthis.minItems = minItems;\n \t}\n \t\n \t   empty schema which allows any value for items in the instance array.\n \t */\n \tpublic static abstract class Items {\n+\t\t\n+\t\t@JsonIgnore\n \t\tpublic boolean isSingleItems() { return false; }\n+\t\t\n+\t\t@JsonIgnore\n \t\tpublic boolean isArrayItems() { return false; }\n \t\t\n \t\tpublic SingleItems asSingleItems() { return null; }\n \t */\n \tpublic static class SchemaAdditionalItems {\n \t\t\n-\t\t@JsonProperty(required = true)\n+\t\t@JsonUnwrapped\n \t\tprivate Schema schema;\n \t}\n \t\n \t   schema.\n \t */\n \tpublic static class SingleItems extends ArraySchema.Items {\n-\t\t@JsonProperty\n+\t\t@JsonUnwrapped\n \t\tprivate Schema schema;\n \t\t\t\n \t\tpublic SingleItems(Schema schema) {\n \t\t@Override\n \t\tpublic SingleItems asSingleItems() { return this; }\n \t}\n+\n  }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/BooleanSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/BooleanSchema.java\n public class BooleanSchema extends ValueTypeSchema {\n \t\n \t@JsonProperty(required = true)\n-\tpublic final SchemaType type = SchemaType.BOOLEAN;\n+\tprivate final SchemaType type = SchemaType.BOOLEAN;\n \t\n \t@Override\n \tpublic boolean isBooleanSchema() { return true; }\n \t\n+\t/* (non-Javadoc)\n+\t * @see com.fasterxml.jackson.databind.jsonschema.types.Schema#getType()\n+\t */\n+\t@Override\n+\tpublic SchemaType getType() {\n+\t\treturn type;\n+\t}\n+\t\n \t@Override\n \tpublic BooleanSchema asBooleanSchema() { return this; }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/HyperSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/HyperSchema.java\n-package com.fasterxml.jackson.databind.jsonschema.types;\n+ package com.fasterxml.jackson.databind.jsonschema.types;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n \n \t\tprivate Schema schema;\n \t\t\n \t}\n+\n+\t/* (non-Javadoc)\n+\t * @see com.fasterxml.jackson.databind.jsonschema.types.Schema#getType()\n+\t */\n+\t@Override\n+\tpublic SchemaType getType() {\n+\t\t// TODO Auto-generated method stub\n+\t\treturn null;\n+\t}\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/NullSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/NullSchema.java\n public class NullSchema extends SimpleTypeSchema {\n \t\n \t@JsonProperty(required = true)\n-\tpublic final SchemaType type = SchemaType.NULL;\n+\tprivate final SchemaType type = SchemaType.NULL;\n+\t\n+\t/* (non-Javadoc)\n+\t * @see com.fasterxml.jackson.databind.jsonschema.types.Schema#getType()\n+\t */\n+\t@Override\n+\tpublic SchemaType getType() {\n+\t\treturn type;\n+\t}\n \t\n \t@Override\n \tpublic boolean isNullSchema() { return true; }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/NumberSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/NumberSchema.java\n \t\n \t/**This attribute defines the maximum value of the instance property*/\n \t@JsonProperty\n-\tprivate Double maximum;\n+\tprivate Double maximum = null;\n \t\n \t/**This attribute defines the minimum value of the instance property*/\n \t@JsonProperty\n-\tprivate Double minimum;\n+\tprivate Double minimum = null;\n \t\n \t@JsonProperty(required = true)\n-\tpublic final SchemaType type = SchemaType.NUMBER;\n+\tprivate final SchemaType type = SchemaType.NUMBER;\n \t\n \t@Override\n \tpublic NumberSchema asNumberSchema() { return this; }\n \t */\n \tpublic Double getMinimum() {\n \t\treturn minimum;\n+\t}\n+\t\n+\t/* (non-Javadoc)\n+\t * @see com.fasterxml.jackson.databind.jsonschema.types.Schema#getType()\n+\t */\n+\t@Override\n+\tpublic SchemaType getType() {\n+\t\treturn type;\n \t}\n \t\n \t@Override\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/ObjectSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/ObjectSchema.java\n \tprivate Map<String, Schema> properties;\n \n \t@JsonProperty(required = true)\n-\tpublic final SchemaType type = SchemaType.OBJECT;\n+\tprivate final SchemaType type = SchemaType.OBJECT;\n \n \t// instance initializer block\n \t{\n \t\treturn properties;\n \t}\n \n+\t/* (non-Javadoc)\n+\t * @see com.fasterxml.jackson.databind.jsonschema.types.Schema#getType()\n+\t */\n+\t@Override\n+\tpublic SchemaType getType() {\n+\t\treturn type;\n+\t}\n+\t\n \t@Override\n \tpublic boolean isObjectSchema() {\n \t\treturn true;\n \t}\n \n \tpublic void putOptionalProperty(String name, Schema schema) {\n-\t\tschema.setRequired(false);\n \t\tproperties.put(name, schema);\n \t}\n \n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/Schema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/Schema.java\n \n import com.fasterxml.jackson.annotation.JsonGetter;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonSetter;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n \n /**\n  * <a href=\"http://tools.ietf.org/id/draft-zyp-json-schema-03.txt\"> Json Schema\n  * \n  * @author jphelan\n  */\n+@JsonInclude(Include.NON_EMPTY)\n public abstract class Schema {\n \n \t/**\n \t * undefined. This is false by default, making the instance optional.\n \t */\n \t@JsonProperty\n-\tprivate Boolean required = false;// default = false;\n-\n-\t@JsonProperty(required = true)\n-\tpublic final SchemaType type = null;\n+\tprivate Boolean required = null;\n \n \tpublic AnySchema asAnySchema() {\n \t\treturn null;\n \t\treturn required;\n \t}\n \n-\tpublic SchemaType getType() {\n-\t\treturn this.type;\n-\t}\n-\n+\tpublic abstract SchemaType getType();\n+\n+\t@JsonIgnore\n \tpublic boolean isAnySchema() {\n \t\treturn false;\n \t}\n \n+\t@JsonIgnore\n \tpublic boolean isArraySchema() {\n \t\treturn false;\n \t}\n \n+\t@JsonIgnore\n \tpublic boolean isBooleanSchema() {\n \t\treturn false;\n \t}\n \n+\t@JsonIgnore\n \tpublic boolean isContainerTypeSchema() {\n \t\treturn false;\n \t}\n \n+\t@JsonIgnore\n \tpublic boolean isIntegerSchema() {\n \t\treturn false;\n \t}\n \n+\t@JsonIgnore\n \tpublic boolean isNullSchema() {\n \t\treturn false;\n \t}\n \n+\t@JsonIgnore\n \tpublic boolean isNumberSchema() {\n \t\treturn false;\n \t}\n \n+\t@JsonIgnore\n \tpublic boolean isObjectSchema() {\n \t\treturn false;\n \t}\n \n+\t@JsonIgnore\n \tpublic boolean isSimpleTypeSchema() {\n \t\treturn false;\n \t}\n \n+\t@JsonIgnore\n \tpublic boolean isStringSchema() {\n \t\treturn false;\n \t}\n \n+\t@JsonIgnore\n \tpublic boolean isUnionTypeSchema() {\n \t\treturn false;\n \t}\n \n+\t@JsonIgnore\n \tpublic boolean isValueTypeSchema() {\n \t\treturn false;\n \t}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/SchemaType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/SchemaType.java\n package com.fasterxml.jackson.databind.jsonschema.types;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n public enum SchemaType {\n-\tSTRING {\n-\t\t@Override\n-\t\tpublic String toString() { return \"string\"; }\n-\t},\n-\tNUMBER {\n-\t\t@Override\n-\t\tpublic String toString() { return \"number\"; }\n-\t},\n-\tINTEGER {\n-\t\t@Override\n-\t\tpublic String toString() { return \"integer\"; }\n-\t},\n-\tBOOLEAN {\n-\t\t@Override\n-\t\tpublic String toString() { return \"boolean\"; }\n-\t},\n-\tOBJECT {\n-\t\t@Override\n-\t\tpublic String toString() { return \"object\"; }\n-\t},\n-\tARRAY {\n-\t\t@Override\n-\t\tpublic String toString() { return \"array\"; }\n-\t},\n-\tNULL {\n-\t\t@Override\n-\t\tpublic String toString() { return \"null\"; }\n-\t},\n-\tANY {\n-\t\t@Override\n-\t\tpublic String toString() { return \"any\"; }\n+\t\n+\tSTRING,\n+\tNUMBER,\n+\tINTEGER,\n+\tBOOLEAN,\n+\tOBJECT,\n+\tARRAY,\n+\tNULL,\n+\tANY;\n+\t\n+\t\n+\t@JsonValue\n+\tpublic String value() {\n+\t\treturn this.name().toLowerCase();\n \t}\n \t\n+\t@JsonCreator\n+\tpublic static SchemaType forValue(String s) {\n+\t\treturn valueOf(s.toUpperCase());\n+\t}\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/StringSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/StringSchema.java\n \tprivate String pattern;\n \t\n \t@JsonProperty(required = true)\n-\tpublic final SchemaType type = SchemaType.STRING;\n+\tprivate final SchemaType type = SchemaType.STRING;\n \n \t@Override\n \tpublic StringSchema asStringSchema() {\n \t */\n \tpublic String getPattern() {\n \t\treturn pattern;\n+\t}\n+\t\n+\t/* (non-Javadoc)\n+\t * @see com.fasterxml.jackson.databind.jsonschema.types.Schema#getType()\n+\t */\n+\t@Override\n+\tpublic SchemaType getType() {\n+\t\treturn type;\n \t}\n \n \t@Override\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/UnionTypeSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/UnionTypeSchema.java\n \t\treturn elements;\n \t}\n \n+\t/* (non-Javadoc)\n+\t * @see com.fasterxml.jackson.databind.jsonschema.types.Schema#getType()\n+\t */\n+\t@Override\n+\tpublic SchemaType getType() {\n+\t\treturn null;\n+\t}\n+\t\n \t@Override\n \tpublic boolean isUnionTypeSchema() {\n \t\treturn true;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n     \tJsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint);\n         // [JACKSON-813]: Add optional JSON Schema id attribute, if found\n         // NOTE: not optimal, does NOT go through AnnotationIntrospector etc:\n-//        JsonSerializableSchema ann = _handledType.getAnnotation(JsonSerializableSchema.class);\n-//        if (ann != null) {\n-//            String id = ann.id();\n-//            if (id != null && id.length() > 0) {\n-//                //o.put(\"id\", id); what is this?\n-//                //objectVisitor.expect??\n-//            }\n-//        }\n+        JsonSerializableSchema ann = _handledType.getAnnotation(JsonSerializableSchema.class);\n+        if (ann != null) {\n+            String id = ann.id();\n+            if (id != null && id.length() > 0) {\n+                //o.put(\"id\", id); what is this?\n+                //objectVisitor.expect??\n+            }\n+        }\n  \n         BeanPropertyFilter filter;\n         if (_propertyFilterId != null) {\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n package com.fasterxml.jackson.databind.jsonschema;\n \n import java.util.Collection;\n+import java.util.HashMap;\n import java.util.Map;\n \n import com.fasterxml.jackson.annotation.JsonFilter;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.jsonschema.types.ObjectSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.Schema;\n import com.fasterxml.jackson.databind.jsonschema.types.ArraySchema.Items;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;\n         Schema prop1 = properties.get(\"property1\");\n         assertNotNull(prop1);\n         assertTrue(prop1.isIntegerSchema());\n-        assertFalse(prop1.getRequired());\n+        assertNull(prop1.getRequired());\n         \n         Schema prop2 = properties.get(\"property2\");\n         assertNotNull(prop2);\n         assertTrue(prop2.isStringSchema());\n-        assertFalse(prop2.getRequired());\n+        assertNull(prop2.getRequired());\n         \n         Schema prop3 = properties.get(\"property3\");\n         assertNotNull(prop3);\n         assertTrue(prop3.isArraySchema());\n-        assertFalse(prop3.getRequired());\n+        assertNull(prop3.getRequired());\n         Items items = prop3.asArraySchema().getItems();\n         assertTrue(items.isSingleItems());\n         Schema itemType = items.asSingleItems().getSchema();\n         Schema prop4 = properties.get(\"property4\");\n         assertNotNull(prop4);\n         assertTrue(prop4.isArraySchema());\n-        assertFalse(prop4.getRequired());\n+        assertNull(prop4.getRequired());\n         items = prop4.asArraySchema().getItems();\n         assertTrue(items.isSingleItems());\n         itemType = items.asSingleItems().getSchema();\n         Schema prop5 = properties.get(\"property5\");\n         assertNotNull(prop5);\n         assertTrue(prop5.getRequired());\n-        \n-        \n-\n-//        assertEquals(\"array\", property3Schema.get(\"type\").asText());\n-//        assertEquals(false, property3Schema.path(\"required\").booleanValue());\n-//        assertEquals(\"string\", property3Schema.get(\"items\").get(\"type\").asText());\n-//        JsonNode property4Schema = propertiesSchema.get(\"property4\");\n-//        assertNotNull(property4Schema);\n-//        assertEquals(\"array\", property4Schema.get(\"type\").asText());\n-//        assertEquals(false, property4Schema.path(\"required\").booleanValue());\n-//        assertEquals(\"number\", property4Schema.get(\"items\").get(\"type\").asText());\n+      \n     }\n     \n     @JsonFilter(\"filteredBean\")\n     \tObjectMapper mapper = new ObjectMapper();\n     \tmapper.setFilters(secretFilterProvider);\n     \tSchema schema = mapper.generateJsonSchema(FilteredBean.class);\n-//    \tJsonNode node = schema.getSchemaNode().get(\"properties\");\n-//    \tassertTrue(node.has(\"obvious\"));\n-//    \tassertFalse(node.has(\"secret\"));\n+    \tassertNotNull(schema);\n+    \tassertTrue(schema.isObjectSchema());\n+    \tObjectSchema object = schema.asObjectSchema();\n+    \tassertNotNull(object);\n+    \tMap<String, Schema> properties = object.getProperties();\n+    \tassertNotNull(properties);\n+    \tSchema obvious = properties.get(\"obvious\");\n+    \tassertNotNull(obvious);\n+    \tassertTrue(obvious.isStringSchema());\n+    \tassertNull(properties.get(\"secret\"));\n     }\n \n     /**\n             throws Exception\n     {\n         Schema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class);\n-\tMap<String,Object> result = writeAndMap(MAPPER, jsonSchema);\n-\tassertNotNull(result);\n-\t// no need to check out full structure, just basics...\n-\tassertEquals(\"object\", result.get(\"type\"));\n-\t// only add 'required' if it is true...\n-\tassertNull(result.get(\"required\"));\n-\tassertNotNull(result.get(\"properties\"));\n+        Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);\n+        assertNotNull(result);\n+        // no need to check out full structure, just basics...\n+        assertEquals(\"object\", result.get(\"type\"));\n+        // only add 'required' if it is true...\n+        assertNull(result.get(\"required\"));\n+        assertNotNull(result.get(\"properties\"));\n     }\n \n     public void testInvalidCall()\n     public void testThatObjectsHaveNoItems() throws Exception\n     {\n         Schema jsonSchema = MAPPER.generateJsonSchema(TrivialBean.class);\n-        String json = jsonSchema.toString().replaceAll(\"\\\"\", \"'\");\n+        Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);\n         // can we count on ordering being stable? I think this is true with current ObjectNode impl\n         // as perh [JACKSON-563]; 'required' is only included if true\n-        assertEquals(\"{'type':'object','properties':{'name':{'type':'string'}}}\",\n-                json);\n+        assertFalse(result.containsKey(\"items\"));\n+\n     }\n \n     public void testSchemaId() throws Exception\n     {\n         Schema jsonSchema = MAPPER.generateJsonSchema(BeanWithId.class);\n-        String json = jsonSchema.toString().replaceAll(\"\\\"\", \"'\");\n-        assertEquals(\"{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}\",\n-                json);\n+        Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);\n+        \n+        assertEquals(new HashMap() {{ \n+        \tput(\"type\", \"object\");\n+        \tput(\"id\", \"myType\");\n+        \tput(\"properties\", \n+        \t\t\tnew HashMap(){{ put(\"value\", \n+        \t\t\t\t\tnew HashMap() {{ put(\"type\", \"string\");}}\n+        \t\t\t);}}\n+        \t);}}, result);\n+        //assertEquals(\"{'type':'object','id':'myType','properties':{'value':{'type':'string'}}}\",\n+          //      json);\n     }\n }", "timestamp": 1343968105, "metainfo": ""}