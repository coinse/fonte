{"sha": "d5243ef663c9df2a19f580053bf4914ce135b044", "log": "bit more robustification for type visiting", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonStringFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         throws JsonMappingException\n     {\n-        //todo: (ryan) add a format for the date in the schema?\n-        boolean asNumber = _useTimestamp;\n-        if (!asNumber) {\n-            if (_customFormat == null) {\n-                asNumber = visitor.getProvider().isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+        if (visitor != null) {\n+            boolean asNumber = _useTimestamp;\n+            if (!asNumber) {\n+                if (_customFormat == null) {\n+                    asNumber = visitor.getProvider().isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+                }\n             }\n-        }\n-        if (asNumber) {\n-            visitor.expectNumberFormat(typeHint).format(JsonValueFormat.UTC_MILLISEC);\n-        } else {\n-            visitor.expectStringFormat(typeHint).format(JsonValueFormat.DATE_TIME);\n+            if (asNumber) {\n+                JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);\n+                if (v2 != null) {\n+                    v2.format(JsonValueFormat.UTC_MILLISEC);\n+                }\n+            } else {\n+                JsonStringFormatVisitor v2 = visitor.expectStringFormat(typeHint);\n+                if (v2 != null) {\n+                    v2.format(JsonValueFormat.DATE_TIME);\n+                }\n+            }\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n \n import java.io.IOException;\n import java.lang.reflect.Type;\n-import java.util.HashSet;\n-import java.util.LinkedHashSet;\n-import java.util.Set;\n+import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.SerializedString;\n-\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n         allDeserializers.put(Double.class.getName(), DoubleSerializer.instance);\n         allDeserializers.put(Double.TYPE.getName(), DoubleSerializer.instance);\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Concrete serializers\n-    /**********************************************************\n-     */\n-    \n-\n \n     /*\n     /**********************************************************\n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectIntegerFormat(typeHint);\n+            if (visitor != null) visitor.expectIntegerFormat(typeHint);\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectIntegerFormat(typeHint);\n+            if (visitor != null) visitor.expectIntegerFormat(typeHint);\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectNumberFormat(typeHint);\n+            if (visitor != null) visitor.expectNumberFormat(typeHint);\n         }\n     }\n     \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n                 throws JsonMappingException\n         {\n-            visitor.expectNumberFormat(typeHint);\n+            if (visitor != null) visitor.expectNumberFormat(typeHint);\n         }\n     }\n \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n             throws JsonMappingException\n         {\n-            visitor.expectNumberFormat(typeHint);\n+            if (visitor != null) visitor.expectNumberFormat(typeHint);\n         }\n     }\n     \n         public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n             throws JsonMappingException\n         {\n-            visitor.expectNumberFormat(typeHint);\n+            if (visitor != null) visitor.expectNumberFormat(typeHint);\n         }\n     }\n }", "timestamp": 1353558314, "metainfo": ""}