{"sha": "65d186e7f2561b6e3fedce1869546b2443036b50", "log": "Coding in anger, to try to get JDK serialization to rule supreme", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n  */\n public class BeanDeserializer\n     extends BeanDeserializerBase\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /*\n     /**********************************************************\n     /* Life-cycle, construction, initialization\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n  */\n public abstract class BeanDeserializerBase\n     extends StdDeserializer<Object>\n-    implements ContextualDeserializer, ResolvableDeserializer\n+    implements ContextualDeserializer, ResolvableDeserializer,\n+        java.io.Serializable // since 2.1\n {\n+    private static final long serialVersionUID = -2038793552422727904L;\n+\n     /*\n     /**********************************************************\n     /* Information regarding type being deserialized\n      * Annotations from the bean class: used for accessing\n      * annotations during resolution\n      * (see {@link #resolve}) and\n-     * contextualization (see {@link #createContextual}).\n-     */\n-    final private Annotations _classAnnotations;\n+     * contextualization (see {@link #createContextual})\n+     *<p> \n+     * Transient since annotations only used during construction.\n+     */\n+    final private transient Annotations _classAnnotations;\n \n     /**\n      * Declared type of the bean this deserializer handles.\n      * that is, when the actual type is not statically known.\n      * For other types this remains null.\n      */\n-    protected HashMap<ClassKey, JsonDeserializer<Object>> _subDeserializers;\n+    protected transient HashMap<ClassKey, JsonDeserializer<Object>> _subDeserializers;\n \n     /**\n      * If one of properties has \"unwrapped\" value, we need separate\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n public class BuilderBasedDeserializer\n     extends BeanDeserializerBase\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected final AnnotatedMethod _buildMethod;\n \t\n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java\n public class CreatorProperty\n     extends SettableBeanProperty\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * Placeholder that represents constructor parameter, when it is created\n      * from actual constructor.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n  * can be handled.\n  */\n public abstract class SettableBeanProperty\n-    implements BeanProperty\n+    implements BeanProperty,\n+        java.io.Serializable\n {\n+    private static final long serialVersionUID = -1026580169193933453L;\n+\n     /**\n      * Logical name of the property (often but not always derived\n      * from the setter method name)\n      * the property or one of its subclasses), class that is\n      * deserialized using deserializer that contains this property.\n      */\n-    protected final Annotations _contextAnnotations;\n+    protected final transient Annotations _contextAnnotations;\n     \n     /**\n      * Deserializer used for handling property value.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayBuilderDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayBuilderDeserializer.java\n public class BeanAsArrayBuilderDeserializer\n     extends BeanDeserializerBase\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * Deserializer we delegate operations that we can not handle.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanAsArrayDeserializer.java\n public class BeanAsArrayDeserializer\n     extends BeanDeserializerBase\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * Deserializer we delegate operations that we can not handle.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n  * as it is done for each and every POJO property deserialized.\n  */\n public final class BeanPropertyMap\n-    implements Iterable<SettableBeanProperty>\n+    implements Iterable<SettableBeanProperty>,\n+        java.io.Serializable // since 2.1\n {\n+    private static final long serialVersionUID = 1L;\n+\n     private final Bucket[] _buckets;\n     \n     private final int _hashMask;\n      */\n     \n     private final static class Bucket\n-    {\n+        implements java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n         public final Bucket next;\n         public final String key;\n         public final SettableBeanProperty value;\n         }\n     }\n \n-    private final static class IteratorImpl implements Iterator<SettableBeanProperty>\n+    private final static class IteratorImpl\n+        implements Iterator<SettableBeanProperty>\n     {\n         /**\n          * Buckets of the map\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java\n public final class FieldProperty\n     extends SettableBeanProperty\n {\n+    private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * Transient since there is no need to persist; only needed during\n+     * construction of objects.\n+     */\n     protected final AnnotatedField _annotated;\n \n     /**\n      * Actual field to set when deserializing this property.\n      */\n-    protected final Field _field;\n-\n+    protected final transient Field _field;\n+    \n     public FieldProperty(BeanPropertyDefinition propDef, JavaType type,\n             TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedField field)\n     {\n         _field = src._field;\n     }\n \n+    /**\n+     * Constructor used for JDK Serialization when reading persisted object\n+     */\n+    protected FieldProperty(FieldProperty src, Field f)\n+    {\n+        super(src);\n+        _annotated = src._annotated;\n+        _field = f;\n+    }\n+    \n     @Override\n     public FieldProperty withName(String newName) {\n         return new FieldProperty(this, newName);\n         }\n         return instance;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* JDK serialization handling\n+    /**********************************************************\n+     */\n+\n+    Object writeReplace() {\n+        // Just need to make sure we reset Field reference from AnnotatedField\n+        return new FieldProperty(this, _annotated.getAnnotated());\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n public final class InnerClassProperty\n     extends SettableBeanProperty\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * Actual property that we use after value construction.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ManagedReferenceProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ManagedReferenceProperty.java\n public final class ManagedReferenceProperty\n     extends SettableBeanProperty\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected final String _referenceName;\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n-import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n+import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n public final class MethodProperty\n     extends SettableBeanProperty\n {\n-    protected final AnnotatedMethod _annotated;\n+    private static final long serialVersionUID = 1;\n+\n+    protected final transient AnnotatedMethod _annotated;\n     \n     /**\n      * Setter method for modifying property value; used for\n      * \"regular\" method-accessible properties.\n      */\n-    protected final Method _setter;\n-\n+    protected final transient Method _setter;\n+    \n     public MethodProperty(BeanPropertyDefinition propDef,\n             JavaType type, TypeDeserializer typeDeser,\n             Annotations contextAnnotations, AnnotatedMethod method)\n         _setter = src._setter;\n     }\n \n+    /**\n+     * Constructor used for JDK Serialization when reading persisted object\n+     */\n+    protected MethodProperty(MethodProperty src, Method m) {\n+        super(src);\n+        _annotated = src._annotated;\n+        _setter = m;\n+    }\n+    \n     @Override\n     public MethodProperty withName(String newName) {\n         return new MethodProperty(this, newName);\n     @Override\n     public Object setAndReturn(Object instance, Object value)\n \t\tthrows IOException\n-\t{\n+    {\n         try {\n             Object result = _setter.invoke(instance, value);\n             return (result == null) ? instance : result;\n             _throwAsIOE(e, value);\n             return null;\n         }\n-\t}\n-}\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/NullProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/NullProvider.java\n  * artificial failure for primitives that don't accept JSON null as value.\n  */\n public final class NullProvider\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     private final Object _nullValue;\n \n     private final boolean _isPrimitive;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n public final class ObjectIdValueProperty\n     extends SettableBeanProperty\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected final ObjectIdReader _objectIdReader;\n     \n     public ObjectIdValueProperty(ObjectIdReader objectIdReader)\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java\n public final class SetterlessProperty\n     extends SettableBeanProperty\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected final AnnotatedMethod _annotated;\n \n     /**\n \n     @Override\n     public Object setAndReturn(Object instance, Object value)\n-\t\tthrows IOException\n-\t{\n+            throws IOException\n+    {\n     \tset(instance, value);\n     \treturn null;\n-\t}\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n  * so that other classes can access information about contained (value)\n  * types\n  */\n+@SuppressWarnings(\"serial\")\n public abstract class ContainerDeserializerBase<T>\n     extends StdDeserializer<T>\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n /**\n  * Container class for core JDK date/time type deserializers.\n  */\n+@SuppressWarnings(\"serial\")\n public class DateDeserializers\n {\n     public static StdDeserializer<?>[] all()\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n \n+@SuppressWarnings(\"serial\")\n public class JdkDeserializers\n {\n     public static StdDeserializer<?>[] all()\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java\n      */\n     static abstract class Base<T> extends StdDeserializer<T>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         protected Base(Class<T> cls) {\n             super(cls);\n         }\n     final static class StringDeser\n         extends Base<String[]>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public StringDeser() { super(String[].class); }\n \n         @Override\n     final static class CharDeser\n         extends Base<char[]>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public CharDeser() { super(char[].class); }\n \n         @Override\n     final static class BooleanDeser\n         extends Base<boolean[]>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public BooleanDeser() { super(boolean[].class); }\n \n         @Override\n     final static class ByteDeser\n         extends Base<byte[]>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public ByteDeser() { super(byte[].class); }\n \n         @Override\n     final static class ShortDeser\n         extends Base<short[]>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public ShortDeser() { super(short[].class); }\n \n         @Override\n     final static class IntDeser\n         extends Base<int[]>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public IntDeser() { super(int[].class); }\n \n         @Override\n     final static class LongDeser\n         extends Base<long[]>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public LongDeser() { super(long[].class); }\n \n         @Override\n     final static class FloatDeser\n         extends Base<float[]>\n     {\n+        private static final long serialVersionUID = 1L;\n+\n         public FloatDeser() { super(float[].class); }\n \n         @Override\n     final static class DoubleDeser\n         extends Base<double[]>\n     {\n+        private static final long serialVersionUID = 1L;\n+        \n         public DoubleDeser() { super(double[].class); }\n \n         @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n     extends StdDeserializer<T>\n     implements ContextualDeserializer\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected final Converter<Object,T> _converter;\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n  */\n public abstract class StdDeserializer<T>\n     extends JsonDeserializer<T>\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * Type of values this deserializer handles: sometimes\n      * exact types, other time most specific supertype of\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java\n  */\n public abstract class StdScalarDeserializer<T> extends StdDeserializer<T>\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected StdScalarDeserializer(Class<?> vc) {\n         super(vc);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n  */\n public class StdValueInstantiator\n     extends ValueInstantiator\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 1L;\n+\n     /**\n      * Type of values that are instantiated; used\n      * for error reporting purposes.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n     extends ContainerDeserializerBase<Collection<String>>\n     implements ContextualDeserializer\n {\n+    private static final long serialVersionUID = 1L;\n+\n     // // Configuration\n \n     protected final JavaType _collectionType;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java\n public final class StringDeserializer\n     extends StdScalarDeserializer<String>\n {\n+    private static final long serialVersionUID = 1L;\n+\n     public StringDeserializer() { super(String.class); }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n public class ThrowableDeserializer\n     extends BeanDeserializer\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected final static String PROP_NAME_MESSAGE = \"message\";\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n /**\n  * Object that represents non-static (and usually non-transient/volatile)\n  * fields of a class.\n- * \n- * @author tatu\n  */\n public final class AnnotatedField\n     extends AnnotatedMember\n+    implements java.io.Serializable\n {\n-    protected final Field _field;\n+    private static final long serialVersionUID = 7364428299211355871L;\n \n+    /**\n+     * Actual {@link Field} used for access.\n+     *<p>\n+     * Transient since it can not be persisted directly using\n+     * JDK serialization\n+     */\n+    protected final transient Field _field;\n+\n+    /**\n+     * Temporary field required for JDK serialization support\n+     */\n+    protected Serialization _serialization;\n+    \n     /*\n     /**********************************************************\n     /* Life-cycle\n         super(annMap);\n         _field = field;\n     }\n-\n+    \n     @Override\n     public AnnotatedField withAnnotations(AnnotationMap ann) {\n         return new AnnotatedField(_field, ann);\n     }\n \n+    /**\n+     * Method used for JDK serialization support\n+     */\n+    protected AnnotatedField(Serialization ser)\n+    {\n+        super(null);\n+        _field = null;\n+        _serialization = ser;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Annotated impl\n     {\n         return \"[field \"+getFullName()+\"]\";\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* JDK serialization handling\n+    /**********************************************************\n+     */\n+\n+    Object writeReplace() {\n+        return new AnnotatedField(new Serialization(_field));\n+    }\n+\n+    Object readResolve() {\n+        Class<?> clazz = _serialization.clazz;\n+        try {\n+            return new AnnotatedField(clazz.getDeclaredField(_serialization.name), null);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Could not find method '\"+_serialization.name\n+                        +\"' from Class '\"+clazz.getName());\n+        }\n+    }\n+    \n+    /**\n+     * Helper class that is used as the workaround to persist\n+     * Field references. It basically just stores declaring class\n+     * and field name.\n+     */\n+    private final static class Serialization\n+        implements java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+        protected Class<?> clazz;\n+        protected String name;\n+\n+        public Serialization(Field f) {\n+            clazz = f.getDeclaringClass();\n+            name = f.getName();\n+            \n+        }\n+    }\n }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java\n  * \n  * @author tatu\n  */\n-public abstract class AnnotatedMember extends Annotated\n+public abstract class AnnotatedMember\n+    extends Annotated\n+    implements java.io.Serializable\n {\n-    protected final AnnotationMap _annotations;\n+    private static final long serialVersionUID = 7364428299211355871L;\n+\n+    // Transient since information not needed after construction, so\n+    // no need to persist\n+    protected final transient AnnotationMap _annotations;\n \n     protected AnnotatedMember(AnnotationMap annotations) {\n         super();\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n package com.fasterxml.jackson.databind.introspect;\n \n import java.lang.reflect.*;\n-\n \n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeBindings;\n \n public final class AnnotatedMethod\n     extends AnnotatedWithParams\n+    implements java.io.Serializable\n {\n-    final protected Method _method;\n+    private static final long serialVersionUID = 1347232380363777953L;\n+\n+    final protected transient Method _method;\n \n     // // Simple lazy-caching:\n \n     protected Class<?>[] _paramClasses;\n \n+    /**\n+     * Field that is used to make JDK serialization work with this\n+     * object.\n+     * \n+     * @since 2.1\n+     */\n+    protected Serialization _serialization;\n+    \n     /*\n     /*****************************************************\n     /* Life-cycle\n     {\n         super(classAnn, paramAnnotations);\n         if (method == null) {\n-        \tthrow new IllegalArgumentException(\"Can not construct AnnotatedMethod with null Method\");\n+            throw new IllegalArgumentException(\"Can not construct AnnotatedMethod with null Method\");\n         }\n         _method = method;\n     }\n \n+    /**\n+     * Method used for JDK serialization support\n+     */\n+    protected AnnotatedMethod(Serialization ser)\n+    {\n+        super(null, null);\n+        _method = null;\n+        _serialization = ser;\n+    }\n+    \n     /**\n      * Method that constructs a new instance with settings (annotations, parameter annotations)\n      * of this instance, but with different physical {@link Method}.\n     {\n         return \"[method \"+getFullName()+\"]\";\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* JDK serialization handling\n+    /**********************************************************\n+     */\n+\n+    Object writeReplace() {\n+        return new AnnotatedMethod(new Serialization(_method));\n+    }\n+\n+    Object readResolve() {\n+        Class<?> clazz = _serialization.clazz;\n+        try {\n+            Method m = clazz.getDeclaredMethod(_serialization.name,\n+                    _serialization.args);\n+            return new AnnotatedMethod(m, null, null);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\"Could not find method '\"+_serialization.name\n+                        +\"' from Class '\"+clazz.getName());\n+        }\n+    }\n+    \n+    /**\n+     * Helper class that is used as the workaround to persist\n+     * Field references. It basically just stores declaring class\n+     * and field name.\n+     */\n+    private final static class Serialization\n+        implements java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+        protected Class<?> clazz;\n+        protected String name;\n+        protected Class<?>[] args;\n+\n+        public Serialization(Method setter) {\n+            clazz = setter.getDeclaringClass();\n+            name = setter.getName();\n+            args = setter.getParameterTypes();\n+        }\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n  * \n  * @author tatu\n  */\n-public class AsArrayTypeDeserializer extends TypeDeserializerBase\n+public class AsArrayTypeDeserializer\n+    extends TypeDeserializerBase\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 5345570420394408290L;\n+\n     public AsArrayTypeDeserializer(JavaType bt, TypeIdResolver idRes,\n             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeDeserializer.java\n  */\n public class AsExternalTypeDeserializer extends AsArrayTypeDeserializer\n {\n+    private static final long serialVersionUID = 1L;\n+\n     public AsExternalTypeDeserializer(JavaType bt, TypeIdResolver idRes,\n             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n  */\n public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer\n {\n+    private static final long serialVersionUID = 1L;\n+\n     public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes,\n             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n  * \n  * @author tatu\n  */\n-public class AsWrapperTypeDeserializer extends TypeDeserializerBase\n+public class AsWrapperTypeDeserializer\n+    extends TypeDeserializerBase\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 5345570420394408290L;\n+\n     public AsWrapperTypeDeserializer(JavaType bt, TypeIdResolver idRes,\n             String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n /**\n  * Base class for all standard Jackson {@link TypeDeserializer}s.\n  */\n-public abstract class TypeDeserializerBase extends TypeDeserializer\n+public abstract class TypeDeserializerBase\n+    extends TypeDeserializer\n+    implements java.io.Serializable\n {\n+    private static final long serialVersionUID = 278445030337366675L;\n+\n     protected final TypeIdResolver _idResolver;\n     \n     protected final JavaType _baseType;\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ViewMatcher.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ViewMatcher.java\n     /**********************************************************\n      */\n \n-    private final static class Empty extends ViewMatcher {\n+    private final static class Empty extends ViewMatcher\n+        implements java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n         final static Empty instance = new Empty();\n         @Override\n         public boolean isVisibleForView(Class<?> activeView) {\n         }\n     }\n \n-    private final static class Single extends ViewMatcher {\n+    private final static class Single extends ViewMatcher\n+        implements java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n         private final Class<?> _view;\n         public Single(Class<?> v) { _view = v; }\n         @Override\n         }\n     }\n \n-    private final static class Multi extends ViewMatcher {\n+    private final static class Multi extends ViewMatcher\n+        implements java.io.Serializable\n+    {\n+        private static final long serialVersionUID = 1L;\n+\n         private final Class<?>[] _views;\n \n         public Multi(Class<?>[] v) { _views = v; }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java\n public class TestJDKSerialization extends BaseMapTest\n {\n     static class MyPojo {\n+        public int x;\n+        private int y;\n+        \n         public MyPojo() { }\n         public MyPojo(int x0, int y0) {\n             x = x0;\n             y = y0;\n         }\n-\n-        public int x, y;\n+        \n+        public int getY() { return y; }\n+        public void setY(int y) { this.y = y; }\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestAnnotationUsing.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestAnnotationUsing.java\n  * Unit test suite that tests \"usingXxx\" properties of\n  * {@link JsonDeserialize} annotation.\n  */\n+@SuppressWarnings(\"serial\")\n public class TestAnnotationUsing\n     extends BaseMapTest\n {\n         public Map<Object,Object> values;\n     }\n \n-    @SuppressWarnings(\"serial\")\n     @JsonDeserialize(keyUsing=MapKeyDeserializer.class, contentUsing=ValueDeserializer.class)\n     static class MapKeyMap extends HashMap<Object,Object> { }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBasicAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBasicAnnotations.java\n  * bean deserialization; ones that indicate (non-constructor)\n  * method types, explicit deserializer annotations.\n  */\n+@SuppressWarnings(\"serial\")\n public class TestBasicAnnotations\n     extends BaseMapTest\n {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n \n+@SuppressWarnings(\"serial\")\n public class TestCollectionDeserialization\n     extends BaseMapTest\n {\n         KEY1, KEY2, WHATEVER;\n     }\n \n-    @SuppressWarnings(\"serial\")\n     @JsonDeserialize(using=ListDeserializer.class)\n     static class CustomList extends LinkedList<String> { }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n /**\n  * Test to check that customizations work as expected.\n  */\n+@SuppressWarnings(\"serial\")\n public class TestCustomDeserializers\n     extends BaseMapTest\n {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomFactory.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomFactory.java\n /**\n  * Test to check that customizations work as expected.\n  */\n+@SuppressWarnings(\"serial\")\n public class TestCustomFactory\n     extends BaseMapTest\n {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n \n+@SuppressWarnings(\"serial\")\n public class TestEnumDeserialization\n     extends BaseMapTest\n {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n \n+@SuppressWarnings(\"serial\")\n public class TestMapDeserialization\n     extends BaseMapTest\n {\n         KEY1, KEY2, WHATEVER;\n     }\n \n-    @SuppressWarnings(\"serial\")\n     static class BrokenMap\n         extends HashMap<Object,Object>\n     {\n         public BrokenMap(boolean dummy) { super(); }\n     }\n \n-    @SuppressWarnings(\"serial\")\n     @JsonDeserialize(using=MapDeserializer.class)\n     static class CustomMap extends LinkedHashMap<String,String> { }\n \n             +\"\\\"boolean\\\":true, \\\"list\\\":[\\\"list0\\\"],\"\n             +\"\\\"null\\\":null }\";\n     \n-    @SuppressWarnings(\"serial\")\n     static class ObjectWrapperMap extends HashMap<String, ObjectWrapper> { }\n     \n     public void testSpecialMap() throws IOException\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestValueAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestValueAnnotations.java\n     @JsonDeserialize(contentAs=RootStringImpl.class)\n     static class RootList extends LinkedList<RootStringImpl> { }\n \n+    @SuppressWarnings(\"serial\")\n     static class RootStringDeserializer\n         extends StdDeserializer<RootString>\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestJacksonAnnotationIntrospector.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestJacksonAnnotationIntrospector.java\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n-/**\n- * @author Ryan Heaton\n- */\n+@SuppressWarnings(\"serial\")\n public class TestJacksonAnnotationIntrospector\n     extends BaseMapTest\n {", "timestamp": 1349506298, "metainfo": ""}