{"sha": "f3799670b3a73c9d284bd31fc9536976d4912d90", "log": "Refactoring; FailingDeserializer was in the wrong place for some reason", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.impl.NullProvider;\n+import com.fasterxml.jackson.databind.deser.std.FailingDeserializer;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n-import com.fasterxml.jackson.databind.jsontype.impl.FailingDeserializer;\n import com.fasterxml.jackson.databind.util.Annotations;\n import com.fasterxml.jackson.databind.util.ViewMatcher;\n \n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FailingDeserializer.java\n+package com.fasterxml.jackson.databind.deser.std;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+\n+/**\n+ * Special bogus \"serializer\" that will throw\n+ * {@link JsonMappingException} if an attempt is made to deserialize\n+ * a value. This is used as placeholder to avoid NPEs for uninitialized\n+ * structured serializers or handlers.\n+ */\n+public class FailingDeserializer extends StdDeserializer<Object>\n+{\n+    private static final long serialVersionUID = 1L;\n+\n+    protected final String _message;\n+\n+    public FailingDeserializer(String m) {\n+        super(Object.class);\n+        _message = m;\n+    }\n+    \n+    @Override\n+    public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n+        throws JsonMappingException\n+    {\n+        throw ctxt.mappingException(_message);\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/MinimalClassNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/MinimalClassNameIdResolver.java\n      * Same as {@link #_basePackageName}, but includes trailing dot.\n      */\n     protected final String _basePackagePrefix;\n-    \n+\n     protected MinimalClassNameIdResolver(JavaType baseType, TypeFactory typeFactory)\n     {\n         super(baseType, typeFactory);\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestValueUpdate.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+public class TestValueUpdate extends BaseTest\n+{\n+    static class Bean\n+    {\n+        private String a;\n+        private String b;\n+\n+        @JsonCreator\n+        public Bean(@JsonProperty(\"a\") String a, @JsonProperty(\"b\") String b)\n+        {\n+            this.a = a;\n+            this.b = b;\n+        }\n+\n+        String getA() {\n+            return a;\n+        }\n+\n+        void setA(String a) {\n+            this.a = a;\n+        }\n+\n+        String getB() {\n+            return b;\n+        }\n+\n+        void setB(String b) {\n+            this.b = b;\n+        }\n+    }\n+\n+    // [Issue#318] (and Scala module issue #83]\n+    public void testValueUpdateWithCreator() throws Exception\n+    {\n+        Bean bean = new Bean(\"abc\", \"def\");\n+        new ObjectMapper().reader(Bean.class).withValueToUpdate(bean).readValue(\"{\\\"a\\\":\\\"ghi\\\",\\\"b\\\":\\\"jkl\\\"}\");\n+        assertEquals(\"ghi\", bean.getA());\n+        assertEquals(\"jkl\", bean.getB());\n+    }\n+\n+}", "timestamp": 1381380206, "metainfo": ""}