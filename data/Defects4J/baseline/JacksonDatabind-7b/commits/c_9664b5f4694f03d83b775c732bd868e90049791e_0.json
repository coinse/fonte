{"sha": "9664b5f4694f03d83b775c732bd868e90049791e", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n         boolean ignore = (ai == null) ? false : ai.hasIgnoreMarker(m);\n         _property(implName).addGetter(m, explName, nameExplicit, visible, ignore);\n     }\n-\n+    \n     protected void _addSetterMethod(AnnotatedMethod m, AnnotationIntrospector ai)\n     {\n         String implName; // from naming convention\n         boolean visible;\n         PropertyName pn = (ai == null) ? null : ai.findNameForDeserialization(m);\n-        String explName = (pn == null) ? null : pn.getSimpleName();\n-        boolean nameExplicit = (explName != null);\n+        boolean nameExplicit = (pn != null);\n         if (!nameExplicit) { // no explicit name; must follow naming convention\n             implName = BeanUtil.okNameForMutator(m, _mutatorPrefix);\n             if (implName == null) { // if not, must skip\n             if (implName == null) {\n                 implName = m.getName();\n             }\n-            if (explName.length() == 0) { \n-                explName = implName;\n+            if (pn.isEmpty()) {\n+                // !!! TODO: use PropertyName for implicit names too\n+                pn = _propNameFromSimple(implName);\n                 nameExplicit = false;\n             }\n             visible = true;\n         }\n         boolean ignore = (ai == null) ? false : ai.hasIgnoreMarker(m);\n-        _property(implName).addSetter(m, explName, nameExplicit, visible, ignore);\n+        _property(implName).addSetter(m, pn, nameExplicit, visible, ignore);\n     }\n     \n     protected void _addInjectables()\n             throw new IllegalArgumentException(\"Duplicate injectable value with id '\"\n                     +String.valueOf(id)+\"' (of type \"+type+\")\");\n         }\n+    }\n+\n+    private PropertyName _propNameFromSimple(String simpleName) {\n+        return PropertyName.construct(simpleName, null);\n     }\n     \n     /*", "timestamp": 1396237953, "metainfo": ""}