{"sha": "1755442a1b6c7fa3d509e0080510ecfc95aa6fca", "log": "Implemented the required attribute for the bean classes that have properties annotated with an annotation that requires the value to be present, determined by it's annotation introspector.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/SchemaAware.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/SchemaAware.java\n      */\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         throws JsonMappingException;\n+    \n+    /**\n+     * Get the representation of the schema to which this serializer will conform.\n+     *\n+     * @param provider The serializer provider.\n+     * @param isOptional Is the type optional\n+     * @param typeHint A hint about the type.\n+     * @return <a href=\"http://json-schema.org/\">Json-schema</a> for this serializer.\n+     */\n+    public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)\n+        throws JsonMappingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import java.io.IOException;\n import java.lang.reflect.Type;\n import java.util.*;\n+\n+import javax.xml.bind.annotation.XmlElement;\n \n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n             if (id != null && id.length() > 0) {\n                 o.put(\"id\", id);\n             }\n-        }        \n+        }\n+ \n         //todo: should the classname go in the title?\n         //o.put(\"title\", _className);\n         ObjectNode propertiesNode = o.objectNode();\n         for (int i = 0; i < _props.length; i++) {\n             BeanPropertyWriter prop = _props[i];\n             JavaType propType = prop.getSerializationType();\n+\n             // 03-Dec-2010, tatu: SchemaAware REALLY should use JavaType, but alas it doesn't...\n             Type hint = (propType == null) ? prop.getGenericPropertyType() : propType.getRawClass();\n             // Maybe it already has annotated/statically configured serializer?\n                 }\n                 ser = provider.findValueSerializer(serType, prop);\n             }\n+            boolean isOptional = !isPropertyRequired(prop, provider);\n+            \n             JsonNode schemaNode = (ser instanceof SchemaAware) ?\n-                    ((SchemaAware) ser).getSchema(provider, hint) : \n+                    ((SchemaAware) ser).getSchema(provider, hint, isOptional) : \n                     JsonSchema.getDefaultSchemaNode();\n             propertiesNode.put(prop.getName(), schemaNode);\n         }\n         o.put(\"properties\", propertiesNode);\n         return o;\n     }\n+\n+    /**\n+     * Determines if a bean property is required. Currently this looks for any XmlElement annotations\n+     * that have a require attribute.\n+     * @param prop the bean property.\n+     * @return true if the property is optional, false otherwise.\n+     */\n+\tprivate boolean isPropertyRequired(final BeanPropertyWriter prop, final SerializerProvider provider) {\n+\t\tBoolean value = provider.getAnnotationIntrospector().hasRequiredMarker(prop.getMember());\n+\t\treturn value == null ? false : value.booleanValue();\n+\t}\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n         return createSchemaNode(\"string\");\n     }\n     \n+    /**\n+     * Default implementation simply claims type is \"string\"; usually\n+     * overriden by custom serializers.\n+     */\n+    @Override\n+    public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)\n+        throws JsonMappingException\n+    {\n+    \tObjectNode schema = (ObjectNode) getSchema(provider, typeHint);\n+    \tif (!isOptional) {\n+    \t\tschema.put(\"required\", !isOptional);\n+    \t}\n+        return schema;\n+    }\n+    \n     protected ObjectNode createObjectNode() {\n         return JsonNodeFactory.instance.objectNode();\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n package com.fasterxml.jackson.databind.jsonschema;\n \n-import java.util.*;\n+import java.util.Collection;\n+import java.util.Map;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n         private String property2;\n         private String[] property3;\n         private Collection<Float> property4;\n-\n+        @JsonProperty(required=true)\n+        private String property5;\n+        \n         public int getProperty1()\n         {\n             return property1;\n         {\n             this.property4 = property4;\n         }\n+        \n+        public String getProperty5()\n+        {\n+            return property5;\n+        }\n+\n+        public void setProperty5(String property5)\n+        {\n+            this.property5 = property5;\n+        }\n     }\n \n     public class TrivialBean {\n         throws Exception\n     {\n         JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class);\n+        \n         assertNotNull(jsonSchema);\n \n         // test basic equality, and that equals() handles null, other obs", "timestamp": 1333565804, "metainfo": ""}