{"sha": "5448e5e34e930b4773a5211f33ffadf643f37819", "log": "Minor improvement to handling of JsonGenerator.close() on exception case", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.annotation.*;\n-\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.CharacterEscapes;\n import com.fasterxml.jackson.core.io.SegmentedStringWriter;\n import com.fasterxml.jackson.core.type.ResolvedType;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.core.util.*;\n-\n import com.fasterxml.jackson.databind.cfg.BaseSettings;\n import com.fasterxml.jackson.databind.cfg.ContextAttributes;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n              * will not mask exception that is pending)\n              */\n             if (!closed) {\n+                /* 04-Mar-2014, tatu: But! Let's try to prevent auto-closing of\n+                 *    structures, which typically causes more damage.\n+                 */\n+                jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n                 try {\n                     jgen.close();\n                 } catch (IOException ioe) { }\n             jgen.close();\n         } finally {\n             if (!closed) {\n+                // 04-Mar-2014, tatu: But! Let's try to prevent auto-closing of\n+                //    structures, which typically causes more damage.\n+                jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n                 try {\n                     jgen.close();\n                 } catch (IOException ioe) { }\n              * been closed\n              */\n             if (jgen != null) {\n+                // 04-Mar-2014, tatu: But! Let's try to prevent auto-closing of\n+                //    structures, which typically causes more damage.\n+                jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n                 try {\n                     jgen.close();\n                 } catch (IOException ioe) { }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n      * Method called to configure the generator as necessary and then\n      * call write functionality\n      */\n-    protected final void _configAndWriteValue(JsonGenerator jgen, Object value)\n-        throws IOException, JsonGenerationException, JsonMappingException\n+    protected final void _configAndWriteValue(JsonGenerator jgen, Object value) throws IOException\n     {\n         _configureJsonGenerator(jgen);\n         // [JACKSON-282]: consider Closeable\n              * will not mask exception that is pending)\n              */\n             if (!closed) {\n+                /* 04-Mar-2014, tatu: But! Let's try to prevent auto-closing of\n+                 *    structures, which typically causes more damage.\n+                 */\n+                jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n                 try {\n                     jgen.close();\n                 } catch (IOException ioe) { }\n              * been closed\n              */\n             if (jgen != null) {\n+                /* 04-Mar-2014, tatu: But! Let's try to prevent auto-closing of\n+                 *    structures, which typically causes more damage.\n+                 */\n+                jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n                 try {\n                     jgen.close();\n                 } catch (IOException ioe) { }", "timestamp": 1394006052, "metainfo": ""}