{"sha": "18720ae351d5424673e9c3c6ca9decb733b0dc80", "log": "Add a unit test for #311 (failing for now)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestSerializationOrder.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestSerializationOrder.java\n     static class OrderMixIn { }\n \n     @JsonPropertyOrder(value={\"a\",\"b\",\"x\",\"z\"})\n-    static class BeanFor268 { // testing [JACKSON-268]\n+    static class BeanFor268 {\n     \t@JsonProperty(\"a\") public String xA = \"a\";\n     \t@JsonProperty(\"z\") public String aZ = \"z\";\n     \t@JsonProperty(\"b\") public String xB() { return \"b\"; }\n         public int b = 2;\n         public int a = 1;\n     }\n+\n+    // For [Issue#311]\n+    @JsonPropertyOrder(alphabetic = true)\n+    public class BeanForGH311 {\n+        private final int a;\n+        private final int b;\n+\n+        @JsonCreator\n+        public BeanForGH311(@JsonProperty(\"b\") int b, @JsonProperty(\"a\") int a) { //b and a are out of order, although alphabetic = true\n+            this.a = a;\n+            this.b = b;\n+        }\n+\n+        public int getA() { return a; }\n+        public int getB() { return b; }\n+    }\n     \n     /*\n     /*********************************************\n     /*********************************************\n      */\n \n+    final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     // Test for [JACKSON-170]\n     public void testImplicitOrderByCreator() throws Exception\n     {\n-        assertEquals(\"{\\\"c\\\":1,\\\"a\\\":2,\\\"b\\\":0}\", serializeAsString(new BeanWithCreator(1, 2)));\n+        assertEquals(\"{\\\"c\\\":1,\\\"a\\\":2,\\\"b\\\":0}\", MAPPER.writeValueAsString(new BeanWithCreator(1, 2)));\n     }\n \n     public void testExplicitOrder() throws Exception\n     {\n-        assertEquals(\"{\\\"c\\\":3,\\\"a\\\":1,\\\"b\\\":2,\\\"d\\\":4}\", serializeAsString(new BeanWithOrder(1, 2, 3, 4)));\n+        assertEquals(\"{\\\"c\\\":3,\\\"a\\\":1,\\\"b\\\":2,\\\"d\\\":4}\", MAPPER.writeValueAsString(new BeanWithOrder(1, 2, 3, 4)));\n     }\n \n     public void testAlphabeticOrder() throws Exception\n     {\n-        assertEquals(\"{\\\"d\\\":4,\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}\", serializeAsString(new SubBeanWithOrder(1, 2, 3, 4)));\n+        assertEquals(\"{\\\"d\\\":4,\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3}\", MAPPER.writeValueAsString(new SubBeanWithOrder(1, 2, 3, 4)));\n     }\n \n \n     {\n         ObjectMapper m = new ObjectMapper();\n         m.addMixInAnnotations(BeanWithOrder.class, OrderMixIn.class);\n-        assertEquals(\"{\\\"b\\\":2,\\\"a\\\":1,\\\"c\\\":3,\\\"d\\\":4}\", serializeAsString(m, new BeanWithOrder(1, 2, 3, 4)));\n+        assertEquals(\"{\\\"b\\\":2,\\\"a\\\":1,\\\"c\\\":3,\\\"d\\\":4}\",\n+                serializeAsString(m, new BeanWithOrder(1, 2, 3, 4)));\n     }\n \n-    // Test for [JACKSON-268]\n     public void testOrderWrt268() throws Exception\n     {\n         assertEquals(\"{\\\"a\\\":\\\"a\\\",\\\"b\\\":\\\"b\\\",\\\"x\\\":\\\"x\\\",\\\"z\\\":\\\"z\\\"}\",\n-        \t\tserializeAsString(new BeanFor268()));\n+                MAPPER.writeValueAsString(new BeanFor268()));\n     }\n \n-    // Test for [JACKSON-459]\n     public void testOrderWithFeature() throws Exception\n     {\n         ObjectMapper m = new ObjectMapper();\n         m.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n-        assertEquals(\"{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3,\\\"d\\\":4}\", serializeAsString(m, new BeanFor459()));\n+        assertEquals(\"{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3,\\\"d\\\":4}\",\n+                m.writeValueAsString(new BeanFor459()));\n+    }\n+\n+    // [Issue#311]\n+\n+    public void testAlphaAndCreatorOrdering() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        m.configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, true);\n+        String json = m.writeValueAsString(new BeanForGH311(1, 2));\n+        assertEquals(\"{\\\"a\\\":1,\\\"b\\\":2}\", json);\n     }\n }", "timestamp": 1379537987, "metainfo": ""}