{"sha": "f0a2158fa6f1e8f1aebd450fc77dae9ec5fcc72d", "log": "Add a (failing) unit test for #412", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java\n         public int a = 3;\n     }\n \n+    // [Issue#412]\n+    static class TestCommandParent {\n+        public String uuid;\n+        public int type;\n+    }\n+\n+    static class TestCommandChild extends TestCommandParent { }\n+    \n     /*\n     /**********************************************************\n     /* Main tests\n     /**********************************************************\n      */\n+\n+    final ObjectMapper WRAP_ROOT_MAPPER = new ObjectMapper();\n+    {\n+        WRAP_ROOT_MAPPER.configure(SerializationFeature.WRAP_ROOT_VALUE, true);\n+    }\n     \n     @SuppressWarnings(\"unchecked\")\n     public void testSuperClass() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n+        ObjectMapper mapper = objectMapper();\n         SubType bean = new SubType();\n \n         // first, test with dynamically detected type\n \n     public void testSuperInterface() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n+        ObjectMapper mapper = objectMapper();\n         SubType bean = new SubType();\n \n         // let's constrain by interface:\n      */\n     public void testIncompatibleRootType() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n+        ObjectMapper mapper = objectMapper();\n         SubType bean = new SubType();\n \n         // and then let's try using incompatible type\n         }\n     }\n     \n-    /**\n-     * Unit test to verify [JACKSON-398]\n-     */\n+    // [JACKSON-398]\n     public void testJackson398() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n+        ObjectMapper mapper = objectMapper();\n         JavaType collectionType = TypeFactory.defaultInstance().constructCollectionType(ArrayList.class, BaseClass398.class);\n         List<TestClass398> typedList = new ArrayList<TestClass398>();\n         typedList.add(new TestClass398());\n         assertEquals(EXP, out.toString());\n     }\n \n-    // Test to verify [JACKSON-163]\n+    // [JACKSON-163]\n     public void testRootWrapping() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, true);\n-        String json = mapper.writeValueAsString(new StringWrapper(\"abc\"));\n+        String json = WRAP_ROOT_MAPPER.writeValueAsString(new StringWrapper(\"abc\"));\n         assertEquals(\"{\\\"StringWrapper\\\":{\\\"str\\\":\\\"abc\\\"}}\", json);\n     }\n \n      */\n     public void testIssue456WrapperPart() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n+        ObjectMapper mapper = objectMapper();\n         assertEquals(\"123\", mapper.writerWithType(Integer.TYPE).writeValueAsString(Integer.valueOf(123)));\n         assertEquals(\"456\", mapper.writerWithType(Long.TYPE).writeValueAsString(Long.valueOf(456L)));\n     }\n     // [JACKSON-630] also, allow annotation to define root name\n     public void testRootNameAnnotation() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, true);\n-        String json = mapper.writeValueAsString(new WithRootName());\n+        String json = WRAP_ROOT_MAPPER.writeValueAsString(new WithRootName());\n         assertEquals(\"{\\\"root\\\":{\\\"a\\\":3}}\", json);\n     }\n+\n+    // [Issue#412]\n+    public void testRootNameWithExplicitType() throws Exception\n+    {\n+        TestCommandChild cmd = new TestCommandChild();\n+        cmd.uuid = \"1234\";\n+        cmd.type = 1;\n+\n+        ObjectWriter writer = WRAP_ROOT_MAPPER.writerWithType(TestCommandParent.class);\n+        String json =  writer.writeValueAsString(cmd);\n+\n+        assertEquals(json, \"{\\\"TestCommandParent\\\":{\\\"uuid\\\":\\\"1234\\\",\\\"type\\\":1}}\");\n+    }\n }", "timestamp": 1393397097, "metainfo": ""}