{"sha": "df6302f807bb230ae985a35100cbcc30af523bd1", "log": "More reshuffling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n      * {@link JsonSerializer}) or Class (of type\n      * <code>Class<JsonSerializer></code>); if value of different\n      * type is returned, a runtime exception may be thrown by caller.\n-     *<p>\n-     * Note: this variant was briefly deprecated for 1.7; should not be\n      */\n     public abstract Object findSerializer(Annotated am);\n \n      * {@link JsonSerializer}) or Class (of type\n      * <code>Class<JsonSerializer></code>); if value of different\n      * type is returned, a runtime exception may be thrown by caller.\n-     * \n-     * @since 1.8\n      */\n     public Class<? extends JsonSerializer<?>> findKeySerializer(Annotated am) {\n         return null;\n      * {@link JsonSerializer}) or Class (of type\n      * <code>Class<JsonSerializer></code>); if value of different\n      * type is returned, a runtime exception may be thrown by caller.\n-     * \n-     * @since 1.8\n      */\n     public Class<? extends JsonSerializer<?>> findContentSerializer(Annotated am) {\n         return null;\n      * {@link JsonDeserializer}) or Class (of type\n      * <code>Class<JsonDeserializer></code>); if value of different\n      * type is returned, a runtime exception may be thrown by caller.\n-     *<p>\n-     * Note: this variant was briefly deprecated for 1.7; but it turns out\n-     * we really should not try to push BeanProperty through at this point\n      */\n     public abstract Object findDeserializer(Annotated am);\n \n      * {@link JsonDeserializer}) or Class (of type\n      * <code>Class<JsonDeserializer></code>); if value of different\n      * type is returned, a runtime exception may be thrown by caller.\n-     * \n-     * @since 1.3\n      */\n     public abstract Class<? extends KeyDeserializer> findKeyDeserializer(Annotated am);\n \n      * {@link JsonDeserializer}) or Class (of type\n      * <code>Class<JsonDeserializer></code>); if value of different\n      * type is returned, a runtime exception may be thrown by caller.\n-     * \n-     * @since 1.3\n      */\n     public abstract Class<? extends JsonDeserializer<?>> findContentDeserializer(Annotated am);\n \n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n+import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.type.TypeBindings;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\n+import com.fasterxml.jackson.databind.deser.DeserializerFactory;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.NopAnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n {\n     protected final DeserializationConfig _config;\n \n-    /**\n-     * @since 1.7\n-     */\n     protected final int _featureFlags;\n     \n     /*\n     /**\n      * Returns provider that can be used for dynamically locating\n      * other deserializers during runtime.\n-     * \n-     * @since 1.5\n      */\n     public DeserializerProvider getDeserializerProvider() {\n         // will be overridden by impl class\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializerProvider.java\n \n import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n+import com.fasterxml.jackson.databind.deser.DeserializerFactory;\n+import com.fasterxml.jackson.databind.deser.Deserializers;\n+import com.fasterxml.jackson.databind.deser.KeyDeserializers;\n import com.fasterxml.jackson.databind.deser.ValueInstantiators;\n \n \n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n /**\n  * Abstract class that defines API used by {@link ObjectMapper} (and\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializable.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n  * Interface that can be implemented by objects that know how to\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonSerializer.java\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n  * Abstract class that defines API used by {@link ObjectMapper} (and\n--- a/src/main/java/com/fasterxml/jackson/databind/MapperConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MapperConfig.java\n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/Module.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;\n+import com.fasterxml.jackson.databind.deser.Deserializers;\n+import com.fasterxml.jackson.databind.deser.KeyDeserializers;\n import com.fasterxml.jackson.databind.deser.ValueInstantiators;\n import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n+import com.fasterxml.jackson.databind.ser.Serializers;\n import com.fasterxml.jackson.databind.type.TypeModifier;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.databind.annotate.JsonSerialize;\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;\n+import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;\n import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n import com.fasterxml.jackson.databind.ser.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;\n import com.fasterxml.jackson.core.util.VersionUtil;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n+import com.fasterxml.jackson.databind.ser.SerializerFactory;\n \n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n import com.fasterxml.jackson.databind.annotate.JsonSerialize;\n import com.fasterxml.jackson.databind.annotate.JsonSerialize.Inclusion;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n import com.fasterxml.jackson.databind.introspect.VisibilityChecker;\n import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n+import com.fasterxml.jackson.databind.ser.SerializerFactory;\n import com.fasterxml.jackson.databind.type.ClassKey;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n+import com.fasterxml.jackson.databind.ser.SerializerFactory;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n \n      *<p>\n      * Note that the serializer itself can be called with instances\n      * of any Java object, but not nulls.\n-     * \n-     * @since 1.8\n      */\n     public abstract JsonSerializer<Object> findKeySerializer(JavaType keyType,\n             BeanProperty property)\n         throws JsonMappingException;\n-\n-    /*\n-    /**********************************************************\n-    /* Deprecated serializer locating functionality\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Deprecated version of accessor method that was used before version 1.7.\n-     * Implemented as final to ensure that existing code does not accidentally\n-     * try to redefine it (given that it is not called by core mapper code)\n-     *   \n-     * @deprecated As of version 1.7, use version that exposes property object\n-     *    instead of just its type (needed for contextual serializers)\n-     */\n-    @Deprecated\n-    public final JsonSerializer<Object> findValueSerializer(Class<?> runtimeType)\n-        throws JsonMappingException\n-    {\n-        return findValueSerializer(runtimeType, null);\n-    }\n-\n-    /**\n-     * Deprecated version of accessor method that was used before version 1.7.\n-     * Implemented as final to ensure that existing code does not accidentally\n-     * try to redefine it (given that it is not called by core mapper code)\n-     *   \n-     * @deprecated As of version 1.7, use version that exposes property object\n-     *    instead of just its type (needed for contextual serializers)\n-     */\n-    @Deprecated\n-    public final JsonSerializer<Object> findValueSerializer(JavaType serializationType)\n-        throws JsonMappingException\n-    {\n-        return findValueSerializer(serializationType, null);\n-    }\n-\n-    /**\n-     * Deprecated version of accessor method that was used before version 1.7.\n-     * Implemented as final to ensure that existing code does not accidentally\n-     * try to redefine it (given that it is not called by core mapper code)\n-     *   \n-     * @deprecated As of version 1.7, use version that exposes property object\n-     *    instead of just its type (needed for contextual serializers)\n-     */\n-    @Deprecated\n-    public final JsonSerializer<Object> findTypedValueSerializer(Class<?> valueType,\n-            boolean cache)\n-        throws JsonMappingException\n-    {\n-        return findTypedValueSerializer(valueType, cache, null);\n-    }\n-\n-    /**\n-     * Deprecated version of accessor method that was used before version 1.7.\n-     * Implemented as final to ensure that existing code does not accidentally\n-     * try to redefine it (given that it is not called by core mapper code)\n-     *   \n-     * @deprecated As of version 1.7, use version that exposes property object\n-     *    instead of just its type (needed for contextual serializers)\n-     */\n-    @Deprecated\n-    public final JsonSerializer<Object> findTypedValueSerializer(JavaType valueType,\n-            boolean cache)\n-        throws JsonMappingException\n-    {\n-        return findTypedValueSerializer(valueType, cache, null);\n-    }\n-\n-    /**\n-     * Deprecated version of accessor method that was used before version 1.7.\n-     * Implemented as final to ensure that existing code does not accidentally\n-     * try to redefine it (given that it is not called by core mapper code)\n-     *   \n-     * @deprecated As of version 1.7, use version that exposes property object\n-     *    instead of just its type (needed for contextual serializers)\n-     */\n-    @Deprecated\n-    public final JsonSerializer<Object> getKeySerializer()\n-        throws JsonMappingException\n-    {\n-        return findKeySerializer(TYPE_OBJECT, null);\n-    }\n-\n-    /**\n-     * Deprecated version of accessor method that was used before version 1.8;\n-     * renamed as {@link #findKeySerializer}, since process is now\n-     * more complicated than simple lookup.\n-     *\n-     * @deprecated As of version 1.8\n-     */\n-    @Deprecated\n-    public final JsonSerializer<Object> getKeySerializer(JavaType valueType, BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        return findKeySerializer(valueType, property);\n-    }\n     \n     /*\n     /********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/annotate/JsonTypeIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotate/JsonTypeIdResolver.java\n  * Annotation that can be used to plug a custom type identifier handler\n  * ({@link TypeIdResolver})\n  * to be used by\n- * {@link com.fasterxml.jackson.databind.TypeSerializer}s\n- * and {@link com.fasterxml.jackson.databind.TypeDeserializer}s\n+ * {@link com.fasterxml.jackson.databind.jsontype.TypeSerializer}s\n+ * and {@link com.fasterxml.jackson.databind.jsontype.TypeDeserializer}s\n  * for converting between java types and type id included in JSON content.\n  * In simplest cases this can be a simple class with static mapping between\n  * type names and matching classes.\n--- a/src/main/java/com/fasterxml/jackson/databind/annotate/JsonTypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotate/JsonTypeResolver.java\n {\n     /**\n      * Defines implementation class of {@link TypeResolverBuilder} which is used to construct\n-     * actual {@link com.fasterxml.jackson.databind.TypeDeserializer} and {@link com.fasterxml.jackson.databind.TypeDeserializer}\n+     * actual {@link com.fasterxml.jackson.databind.jsontype.TypeDeserializer} and {@link com.fasterxml.jackson.databind.jsontype.TypeDeserializer}\n      * instances that handle reading and writing addition type information needed to support polymorphic\n      * deserialization.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/annotate/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotate/package-info.java\n /**\n- * Annotations that directly depend on Mapper classes (not just\n- * Jackson core) and are used for configuring Data Mapping functionality.\n+ * Annotations that directly depend on classes in databinding bundle\n+ * (not just Jackson core) and can not be included\n+ * in Jackson core annotations package (because it can not have any\n+ * external dependencies).\n  */\n package com.fasterxml.jackson.databind.annotate;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n /**\n  * Deserializer only used for abstract types used as placeholders during polymorphic\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.EnumResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.ClassKey;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n import com.fasterxml.jackson.databind.deser.impl.CreatorProperty;\n import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer;\n import com.fasterxml.jackson.databind.introspect.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ContextualDeserializer.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+\n+/**\n+ * Add-on interface that {@link JsonDeserializer}s can implement to get a callback\n+ * that can be used to create contextual instances of deserializer to use for\n+ * handling properties of supported type. This can be useful\n+ * for deserializers that can be configured by annotations, or should otherwise\n+ * have differing behavior depending on what kind of property is being deserialized.\n+ *\n+ * @param <T> Type of deserializer to contextualize\n+ * \n+ * @since 1.7\n+ */\n+public interface ContextualDeserializer<T>\n+{\n+    /**\n+     * Method called to see if a different (or differently configured) deserializer\n+     * is needed to deserialize values of specified property.\n+     * Note that instance that this method is called on is typically shared one and\n+     * as a result method should <b>NOT</b> modify this instance but rather construct\n+     * and return a new instance. This instance should only be returned as-is, in case\n+     * it is already suitable for use.\n+     * \n+     * @param config Current deserialization configuration\n+     * @param property Method, field or constructor parameter that represents the property\n+     *   (and is used to assign deserialized value).\n+     *   Should be available; but there may be cases where caller can not provide it and\n+     *   null is passed instead (in which case impls usually pass 'this' deserializer as is)\n+     * \n+     * @return Deserializer to use for deserializing values of specified property;\n+     *   may be this instance or a new instance.\n+     * \n+     * @throws JsonMappingException\n+     */\n+    public JsonDeserializer<T> createContextual(DeserializationConfig config,\n+            BeanProperty property)\n+        throws JsonMappingException;\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ContextualKeyDeserializer.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.KeyDeserializer;\n+\n+/**\n+ * Add-on interface that {@link KeyDeserializer}s can implement to get a callback\n+ * that can be used to create contextual instances of key deserializer to use for\n+ * handling Map keys of supported type. This can be useful\n+ * for key deserializers that can be configured by annotations, or should otherwise\n+ * have differing behavior depending on what kind of Map property keys are being deserialized.\n+ * \n+ * @since 1.8\n+ */\n+public interface ContextualKeyDeserializer\n+{\n+    /**\n+     * Method called to see if a different (or differently configured) key deserializer\n+     * is needed to deserialize keys of specified Map property.\n+     * Note that instance that this method is called on is typically shared one and\n+     * as a result method should <b>NOT</b> modify this instance but rather construct\n+     * and return a new instance. This instance should only be returned as-is, in case\n+     * it is already suitable for use.\n+     * \n+     * @param config Current deserialization configuration\n+     * @param property Method, field or constructor parameter that declared Map for which\n+     *   contextual instance will be used. Will not be available when deserializing root-level\n+     *   Map value; otherwise should not be null.\n+     * \n+     * @return Key deserializer to use for deserializing keys specified Map property,\n+     *   may be this instance or a new instance.\n+     */\n+    public KeyDeserializer createContextual(DeserializationConfig config,\n+            BeanProperty property)\n+        throws JsonMappingException;\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import com.fasterxml.jackson.databind.AbstractTypeResolver;\n+import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.DeserializerProvider;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.KeyDeserializer;\n+import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.type.*;\n+\n+\n+/**\n+ * Abstract class that defines API used by {@link DeserializerProvider}\n+ * to obtain actual\n+ * {@link JsonDeserializer} instances from multiple distinct factories.\n+ *<p>\n+ * Since there are multiple broad categories of deserializers, there are \n+ * multiple factory methods:\n+ *<ul>\n+ * <li>For JSON \"Array\" type, we need 2 methods: one to deal with expected\n+ *   Java arrays ({@link #createArrayDeserializer})\n+ *   and the other for other Java containers like {@link java.util.List}s\n+ *   and {@link java.util.Set}s ({@link #createCollectionDeserializer(DeserializationConfig, DeserializerProvider, CollectionType, BeanProperty)})\n+ *  </li>\n+ * <li>For JSON \"Object\" type, we need 2 methods: one to deal with\n+ *   expected Java {@link java.util.Map}s\n+ *   ({@link #createMapDeserializer}), and another for POJOs\n+ *   ({@link #createBeanDeserializer(DeserializationConfig, DeserializerProvider, JavaType, BeanProperty)}.\n+ *  </li>\n+ * <li>For Tree Model ({@link org.codehaus.jackson.JsonNode}) properties there is\n+ *    {@link #createTreeDeserializer(DeserializationConfig, DeserializerProvider, JavaType, BeanProperty)}\n+ * <li>For enumerated types ({@link java.lang.Enum}) there is\n+ *    {@link #createEnumDeserializer(DeserializationConfig, DeserializerProvider, JavaType, BeanProperty)}\n+ *  </li>\n+ * <li>For all other types, {@link #createBeanDeserializer(DeserializationConfig, DeserializerProvider, JavaType, BeanProperty)}\n+ *   is used.\n+ * </ul>\n+ *<p>\n+ * All above methods take 2 type arguments, except for the first one\n+ * which takes just a single argument.\n+ */\n+public abstract class DeserializerFactory\n+{\n+    protected final static Deserializers[] NO_DESERIALIZERS = new Deserializers[0];\n+\n+    /*\n+    /**********************************************************\n+    /* Helper class to contain configuration settings\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Configuration settings container class for bean deserializer factory\n+     * \n+     * @since 1.7\n+     */\n+    public abstract static class Config\n+    {\n+        /**\n+         * Fluent/factory method used to construct a configuration object that\n+         * has same deserializer providers as this instance, plus one specified\n+         * as argument. Additional provider will be added before existing ones,\n+         * meaning it has priority over existing definitions.\n+         */\n+        public abstract Config withAdditionalDeserializers(Deserializers additional);\n+\n+        /**\n+         * Fluent/factory method used to construct a configuration object that\n+         * has same key deserializer providers as this instance, plus one specified\n+         * as argument. Additional provider will be added before existing ones,\n+         * meaning it has priority over existing definitions.\n+         */\n+        public abstract Config withAdditionalKeyDeserializers(KeyDeserializers additional);\n+        \n+        /**\n+         * Fluent/factory method used to construct a configuration object that\n+         * has same configuration as this instance plus one additional\n+         * deserialiazer modifier. Added modifier has the highest priority (that is, it\n+         * gets called before any already registered modifier).\n+         */\n+        public abstract Config withDeserializerModifier(BeanDeserializerModifier modifier);\n+\n+        /**\n+         * Fluent/factory method used to construct a configuration object that\n+         * has same configuration as this instance plus one additional\n+         * abstract type resolver.\n+         * Added resolver has the highest priority (that is, it\n+         * gets called before any already registered resolver).\n+         * \n+         * @since 1.8\n+         */\n+        public abstract Config withAbstractTypeResolver(AbstractTypeResolver resolver);\n+\n+        /**\n+         * Fluent/factory method used to construct a configuration object that\n+         * has same configuration as this instance plus specified additional\n+         * value instantiator provider object.\n+         * Added instantiator provider has the highest priority (that is, it\n+         * gets called before any already registered resolver).\n+         * \n+         * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for\n+         *    constructing POJO values during deserialization\n+         * \n+         * @since 1.9\n+         */\n+        public abstract Config withValueInstantiators(ValueInstantiators instantiators);\n+        \n+        public abstract Iterable<Deserializers> deserializers();\n+\n+        /**\n+         * @since 1.8\n+         */\n+        public abstract Iterable<KeyDeserializers> keyDeserializers();\n+        \n+        public abstract Iterable<BeanDeserializerModifier> deserializerModifiers();\n+\n+        /**\n+         * @since 1.8\n+         */\n+        public abstract Iterable<AbstractTypeResolver> abstractTypeResolvers();\n+\n+        /**\n+         * @since 1.9\n+         */\n+        public abstract Iterable<ValueInstantiators> valueInstantiators();\n+        \n+        public abstract boolean hasDeserializers();\n+\n+        /**\n+         * @since 1.8\n+         */\n+        public abstract boolean hasKeyDeserializers();\n+        \n+        public abstract boolean hasDeserializerModifiers();\n+\n+        /**\n+         * @since 1.8\n+         */\n+        public abstract boolean hasAbstractTypeResolvers();\n+\n+        /**\n+         * @since 1.9\n+         */\n+        public abstract boolean hasValueInstantiators();\n+    }\n+\n+    /*\n+    /********************************************************\n+    /* Configuration handling\n+    /********************************************************\n+     */\n+\n+    /**\n+     * @since 1.7\n+     */\n+    public abstract Config getConfig();\n+    \n+    /**\n+     * Method used for creating a new instance of this factory, but with different\n+     * configuration. Reason for specifying factory method (instead of plain constructor)\n+     * is to allow proper sub-classing of factories.\n+     *<p>\n+     * Note that custom sub-classes <b>must override</b> implementation\n+     * of this method, as it usually requires instantiating a new instance of\n+     * factory type. Check out javadocs for\n+     * {@link com.fasterxml.jackson.databind.deser.BeanDeserializerFactory} for more details.\n+     * \n+     * @since 1.7\n+     */\n+    public abstract DeserializerFactory withConfig(Config config);\n+\n+    /**\n+     * Convenience method for creating a new factory instance with additional deserializer\n+     * provider.\n+     * \n+     * @since 1.7\n+     */\n+    public final DeserializerFactory withAdditionalDeserializers(Deserializers additional) {\n+        return withConfig(getConfig().withAdditionalDeserializers(additional));\n+    }\n+\n+    /**\n+     * Convenience method for creating a new factory instance with additional\n+     * {@link KeyDeserializers}.\n+     * \n+     * @since 1.8\n+     */\n+    public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional) {\n+        return withConfig(getConfig().withAdditionalKeyDeserializers(additional));\n+    }\n+    \n+    /**\n+     * Convenience method for creating a new factory instance with additional\n+     * {@link BeanDeserializerModifier}.\n+     * \n+     * @since 1.7\n+     */\n+    public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier) {\n+        return withConfig(getConfig().withDeserializerModifier(modifier));\n+    }\n+\n+    /**\n+     * Convenience method for creating a new factory instance with additional\n+     * {@link AbstractTypeResolver}.\n+     * \n+     * @since 1.7\n+     */\n+    public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver) {\n+        return withConfig(getConfig().withAbstractTypeResolver(resolver));\n+    }\n+\n+    /**\n+     * Convenience method for creating a new factory instance with additional\n+     * {@link ValueInstantiators}.\n+     * \n+     * @since 1.9\n+     */\n+    public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators) {\n+        return withConfig(getConfig().withValueInstantiators(instantiators));\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Basic DeserializerFactory API:\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method that can be called to try to resolve an abstract type\n+     * (interface, abstract class) into a concrete type, or at least\n+     * something \"more concrete\" (abstract class instead of interface).\n+     * Will either return passed type, or a more specific type.\n+     * \n+     * @since 1.9\n+     */\n+    public abstract JavaType mapAbstractType(DeserializationConfig config, JavaType type)\n+        throws JsonMappingException;\n+\n+    /**\n+     * Method that is to find all creators (constructors, factory methods)\n+     * for the bean type to deserialize.\n+     * \n+     * @since 1.9\n+     */\n+    public abstract ValueInstantiator findValueInstantiator(DeserializationConfig config,\n+            BasicBeanDescription beanDesc)\n+        throws JsonMappingException;\n+    \n+    /**\n+     * Method called to create (or, for completely immutable deserializers,\n+     * reuse) a deserializer that can convert JSON content into values of\n+     * specified Java \"bean\" (POJO) type.\n+     * At this point it is known that the type is not otherwise recognized\n+     * as one of structured types (array, Collection, Map) or a well-known\n+     * JDK type (enum, primitives/wrappers, String); this method only\n+     * gets called if other options are exhausted. This also means that\n+     * this method can be overridden to add support for custom types.\n+     *\n+     * @param type Type to be deserialized\n+     * @param p Provider that can be called to create deserializers for\n+     *   contained member types\n+     */\n+    public abstract JsonDeserializer<Object> createBeanDeserializer(DeserializationConfig config, DeserializerProvider p,\n+            JavaType type, BeanProperty property)\n+        throws JsonMappingException;\n+\n+    /**\n+     * Method called to create (or, for completely immutable deserializers,\n+     * reuse) a deserializer that can convert JSON content into values of\n+     * specified Java type.\n+     *\n+     * @param type Type to be deserialized\n+     * @param p Provider that can be called to create deserializers for\n+     *   contained member types\n+     */\n+    public abstract JsonDeserializer<?> createArrayDeserializer(DeserializationConfig config, DeserializerProvider p,\n+            ArrayType type, BeanProperty property)\n+        throws JsonMappingException;\n+\n+    public abstract JsonDeserializer<?> createCollectionDeserializer(DeserializationConfig config,\n+            DeserializerProvider p, CollectionType type, BeanProperty property)\n+        throws JsonMappingException;\n+\n+    /**\n+     * @since 1.8\n+     */\n+    public abstract JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationConfig config,\n+            DeserializerProvider p, CollectionLikeType type, BeanProperty property)\n+        throws JsonMappingException;\n+    \n+    public abstract JsonDeserializer<?> createEnumDeserializer(DeserializationConfig config,\n+            DeserializerProvider p, JavaType type, BeanProperty property)\n+        throws JsonMappingException;\n+\n+    public abstract JsonDeserializer<?> createMapDeserializer(DeserializationConfig config,\n+            DeserializerProvider p, MapType type, BeanProperty property)\n+        throws JsonMappingException;\n+\n+    /**\n+     * @since 1.8\n+     */\n+    public abstract JsonDeserializer<?> createMapLikeDeserializer(DeserializationConfig config,\n+            DeserializerProvider p, MapLikeType type, BeanProperty property)\n+        throws JsonMappingException;\n+\n+    /**\n+     * Method called to create and return a deserializer that can construct\n+     * JsonNode(s) from JSON content.\n+     */\n+    public abstract JsonDeserializer<?> createTreeDeserializer(DeserializationConfig config, DeserializerProvider p,\n+            JavaType type, BeanProperty property)\n+        throws JsonMappingException;\n+\n+    /**\n+     * Method called to find if factory knows how to create a key deserializer\n+     * for specified type; currently this means checking if a module has registered\n+     * possible deserializers.\n+     * \n+     * @return Key deserializer to use for specified type, if one found; null if not\n+     *   (and default key deserializer should be used)\n+     * \n+     * @since 1.8\n+     */\n+    public KeyDeserializer createKeyDeserializer(DeserializationConfig config, JavaType type,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        // Default implementation returns null for backwards compatibility reasons\n+        return null;\n+    }\n+    \n+    /**\n+     * Method called to find and create a type information deserializer for given base type,\n+     * if one is needed. If not needed (no polymorphic handling configured for type),\n+     * should return null.\n+     *<p>\n+     * Note that this method is usually only directly called for values of container (Collection,\n+     * array, Map) types and root values, but not for bean property values.\n+     *\n+     * @param baseType Declared base type of the value to deserializer (actual\n+     *    deserializer type will be this type or its subtype)\n+     * \n+     * @return Type deserializer to use for given base type, if one is needed; null if not.\n+     * \n+     * @since 1.5\n+     */\n+    public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        // Default implementation returns null for backwards compatibility reasons\n+        return null;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import com.fasterxml.jackson.core.JsonNode;\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.DeserializerProvider;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.KeyDeserializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n+import com.fasterxml.jackson.databind.ser.Serializers;\n+import com.fasterxml.jackson.databind.type.*;\n+\n+\n+/**\n+ * Interface that defines API for simple extensions that can provide additional deserializers\n+ * for various types. Access is by a single callback method; instance is to either return\n+ * a configured {@link JsonDeserializer} for specified type, or null to indicate that it\n+ * does not support handling of the type. In latter case, further calls can be made\n+ * for other providers; in former case returned deserializer is used for handling of\n+ * instances of specified type.\n+ *<p>\n+ * Unlike with {@link Serializers}, multiple different methods are used since different\n+ * kinds of types typically require different kinds of inputs.\n+ * \n+ * @since 1.7\n+ */\n+public interface Deserializers\n+{\n+    /**\n+     * Method called to locate serializer for specified array type.\n+     *<p>\n+     * Deserializer for element type may be passed, if configured explicitly at higher level (by\n+     * annotations, typically), but usually are not.\n+     * Type deserializer for element is passed if one is needed based on contextual information\n+     * (annotations on declared element class; or on field or method type is associated with).\n+     * \n+     * @param type Type of array instances to deserialize\n+     * @param config Configuration in effect\n+     * @param provider Provider that can be used to locate deserializer for component type (if\n+     *    one not provided, or needs to be overridden)\n+     * @param property Property that contains array value  (null for root values)\n+     * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n+     *    the type information deserializer to use; should usually be used as is when constructing\n+     *    array deserializer.\n+     * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using\n+     *    annotations, for exmple). May be null, in which case it should be resolved here (or using\n+     *    {@link ResolvableDeserializer} callback)\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     */\n+    public JsonDeserializer<?> findArrayDeserializer(ArrayType type, DeserializationConfig config,\n+            DeserializerProvider provider,\n+            BeanProperty property,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException;\n+\n+    /**\n+     * Method called to locate serializer for specified {@link java.util.Collection} (List, Set etc) type.\n+     *<p>\n+     * Deserializer for element type may be passed, if configured explicitly at higher level (by\n+     * annotations, typically), but usually are not.\n+     * Type deserializer for element is passed if one is needed based on contextual information\n+     * (annotations on declared element class; or on field or method type is associated with).\n+     * \n+     * @param type Type of collection instances to deserialize\n+     * @param config Configuration in effect\n+     * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n+     *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n+     * @param property Property that contains array value  (null for root values)\n+     * @param beanDesc Definition of the enumeration type that contains class annotations and\n+     *    other information typically needed for building deserializers (note: always instance\n+     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n+     *    the type information deserializer to use; should usually be used as is when constructing\n+     *    array deserializer.\n+     * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using\n+     *    annotations, for exmple). May be null, in which case it should be resolved here (or using\n+     *    {@link ResolvableDeserializer} callback)\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     */\n+    public JsonDeserializer<?> findCollectionDeserializer(CollectionType type, DeserializationConfig config,\n+            DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException;\n+\n+    /**\n+     * Method called to locate serializer for specified\n+     * \"Collection-like\" type (one that acts\n+     * like {@link java.util.Collection} but does not implement it).\n+     *<p>\n+     * Deserializer for element type may be passed, if configured explicitly at higher level (by\n+     * annotations, typically), but usually are not.\n+     * Type deserializer for element is passed if one is needed based on contextual information\n+     * (annotations on declared element class; or on field or method type is associated with).\n+     * \n+     * @param type Type of instances to deserialize\n+     * @param config Configuration in effect\n+     * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n+     *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n+     * @param property Property that contains array value  (null for root values)\n+     * @param beanDesc Definition of the enumeration type that contains class annotations and\n+     *    other information typically needed for building deserializers (note: always instance\n+     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n+     *    the type information deserializer to use; should usually be used as is when constructing\n+     *    array deserializer.\n+     * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using\n+     *    annotations, for exmple). May be null, in which case it should be resolved here (or using\n+     *    {@link ResolvableDeserializer} callback)\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     * \n+     * @since 1.8\n+     */\n+    public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config,\n+            DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException;\n+    \n+    /**\n+     * Method called to locate deserializer for specified {@link java.lang.Enum} type.\n+     * \n+     * @param type Type of {@link java.lang.Enum} instances to deserialize\n+     * @param config Configuration in effect\n+     * @param beanDesc Definition of the enumeration type that contains class annotations and\n+     *    other information typically needed for building deserializers (note: always instance\n+     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     */\n+    public JsonDeserializer<?> findEnumDeserializer(Class<?> type, DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property)\n+        throws JsonMappingException;\n+\n+    /**\n+     * Method called to locate deserializer for specified {@link java.util.Map} type.\n+     *<p>\n+     * Deserializer for element type may be passed, if configured explicitly at higher level (by\n+     * annotations, typically), but usually are not.\n+     * Type deserializer for element is passed if one is needed based on contextual information\n+     * (annotations on declared element class; or on field or method type is associated with).\n+     *<p>\n+     * Similarly, a {@link KeyDeserializer} may be passed, but this is only done if there is\n+     * a specific configuration override (annotations) to indicate instance to use. Otherwise\n+     * null is passed, and key deserializer needs to be obtained using {@link DeserializerProvider}\n+     * \n+     * @param type Type of {@link java.util.Map} instances to deserialize\n+     * @param config Configuration in effect\n+     * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n+     *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n+     * @param beanDesc Definition of the enumeration type that contains class annotations and\n+     *    other information typically needed for building deserializers (note: always instance\n+     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     * @param keyDeserializer Key deserializer use, if it is defined via annotations or other configuration;\n+     *    null if default key deserializer for key type can be used.\n+     * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n+     *    the type information deserializer to use; should usually be used as is when constructing\n+     *    array deserializer.\n+     * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using\n+     *    annotations, for exmple). May be null, in which case it should be resolved here (or using\n+     *    {@link ResolvableDeserializer} callback)\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     */\n+    public JsonDeserializer<?> findMapDeserializer(MapType type, DeserializationConfig config,\n+            DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+            KeyDeserializer keyDeserializer,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException;\n+\n+    /**\n+     * Method called to locate serializer for specified\n+     * \"Map-like\" type (one that acts\n+     * like {@link java.util.Map} but does not implement it).\n+     *<p>\n+     * Deserializer for element type may be passed, if configured explicitly at higher level (by\n+     * annotations, typically), but usually are not.\n+     * Type deserializer for element is passed if one is needed based on contextual information\n+     * (annotations on declared element class; or on field or method type is associated with).\n+     *<p>\n+     * Similarly, a {@link KeyDeserializer} may be passed, but this is only done if there is\n+     * a specific configuration override (annotations) to indicate instance to use. Otherwise\n+     * null is passed, and key deserializer needs to be obtained using {@link DeserializerProvider}\n+     * \n+     * @param type Type of {@link java.util.Map} instances to deserialize\n+     * @param config Configuration in effect\n+     * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n+     *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n+     * @param beanDesc Definition of the enumeration type that contains class annotations and\n+     *    other information typically needed for building deserializers (note: always instance\n+     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     * @param keyDeserializer Key deserializer use, if it is defined via annotations or other configuration;\n+     *    null if default key deserializer for key type can be used.\n+     * @param elementTypeDeserializer If element type needs polymorphic type handling, this is\n+     *    the type information deserializer to use; should usually be used as is when constructing\n+     *    array deserializer.\n+     * @param elementDeserializer Deserializer to use for elements, if explicitly defined (by using\n+     *    annotations, for exmple). May be null, in which case it should be resolved here (or using\n+     *    {@link ResolvableDeserializer} callback)\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     * \n+     * @since 1.8\n+     */\n+    public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type, DeserializationConfig config,\n+            DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+            KeyDeserializer keyDeserializer,\n+            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+        throws JsonMappingException;\n+    \n+    /**\n+     * Method called to locate deserializer for specified JSON tree node type.\n+     * \n+     * @param nodeType Specific type of JSON tree nodes to deserialize (subtype of {@link org.codehaus.jackson.JsonNode})\n+     * @param config Configuration in effect\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     */\n+    public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType, DeserializationConfig config,\n+            BeanProperty property)\n+        throws JsonMappingException;\n+    \n+    /**\n+     * Method called to locate deserializer for specified value type which does not belong to any other\n+     * category (not an Enum, Collection, Map, Array or tree node)\n+     * \n+     * @param type Bean type to deserialize\n+     * @param config Configuration in effect\n+     * @param provider Provider that can be used to locate dependant deserializers if and as necessary\n+     *   (but note that in many cases resolution must be deferred by using {@link ResolvableDeserializer} callback)\n+     * @param beanDesc Definition of the enumeration type that contains class annotations and\n+     *    other information typically needed for building deserializers (note: always instance\n+     *    of {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription})\n+     * \n+     * @return Deserializer to use for the type; or null if this provider does not know how to construct it\n+     */\n+    public JsonDeserializer<?> findBeanDeserializer(JavaType type, DeserializationConfig config,\n+            DeserializerProvider provider, BeanDescription beanDesc,\n+            BeanProperty property)\n+        throws JsonMappingException;\n+\n+    /*\n+    /**********************************************************\n+    /* Helper classes\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Basic {@link Deserializers} implementation that implements all methods but provides\n+     * no deserializers. Its main purpose is to serve as a base class so that\n+     * sub-classes only need to override methods they need, as most of the time some\n+     * of methods are not needed (especially enumeration and array deserializers are\n+     * very rarely overridden).\n+     * \n+     * @since 1.9\n+     */\n+    public static class Base implements Deserializers\n+    {\n+        @Override\n+        public JsonDeserializer<?> findArrayDeserializer(ArrayType type, DeserializationConfig config,\n+                DeserializerProvider provider, BeanProperty property,\n+                TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+            throws JsonMappingException\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public JsonDeserializer<?> findCollectionDeserializer(CollectionType type, DeserializationConfig config,\n+                DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+                TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+            throws JsonMappingException\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config,\n+                DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+                TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+            throws JsonMappingException\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public JsonDeserializer<?> findMapDeserializer(MapType type, DeserializationConfig config,\n+                DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+                KeyDeserializer keyDeserializer,\n+                TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+            throws JsonMappingException\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type, DeserializationConfig config,\n+                DeserializerProvider provider, BeanDescription beanDesc, BeanProperty property,\n+                KeyDeserializer keyDeserializer,\n+                TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n+            throws JsonMappingException\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public JsonDeserializer<?> findEnumDeserializer(Class<?> type, DeserializationConfig config,\n+                BeanDescription beanDesc,\n+                BeanProperty property)\n+            throws JsonMappingException\n+        {\n+            return null;\n+        }\n+        \n+        @Override\n+        public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType,\n+                DeserializationConfig config,\n+                BeanProperty property)\n+            throws JsonMappingException\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public JsonDeserializer<?> findBeanDeserializer(JavaType type, DeserializationConfig config,\n+                DeserializerProvider provider,\n+                BeanDescription beanDesc,\n+                BeanProperty property)\n+            throws JsonMappingException\n+        {\n+            return null;\n+        }\n+    }\n+\n+\n+    /**\n+     * @deprecated As of 1.9, use {@link Base} instead\n+     */\n+    @Deprecated\n+    public static class None extends Base { }\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/KeyDeserializers.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.KeyDeserializer;\n+\n+\n+/**\n+ * Interface that defines API for simple extensions that can provide additional deserializers\n+ * for deserializer Map keys of various types, from JSON property names.\n+ * Access is by a single callback method; instance is to either return\n+ * a configured {@link KeyDeserializer} for specified type, or null to indicate that it\n+ * does not support handling of the type. In latter case, further calls can be made\n+ * for other providers; in former case returned key deserializer is used for handling of\n+ * key instances of specified type.\n+ * \n+ * @since 1.8\n+ */\n+public interface KeyDeserializers\n+{\n+    public KeyDeserializer findKeyDeserializer(JavaType type, DeserializationConfig config,\n+            BeanDescription beanDesc, BeanProperty property)\n+        throws JsonMappingException;\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ResolvableDeserializer.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.DeserializerProvider;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+\n+/**\n+ * Interface used to indicate deserializers that want to do post-processing\n+ * after construction and being added to {@link DeserializerProvider},\n+ * but before being used. This is typically used to resolve references\n+ * to other contained types; for example, bean deserializers use this\n+ * to eagerly find deserializers for contained field types.\n+ */\n+public interface ResolvableDeserializer\n+{\n+    /**\n+     * Method called after {@link DeserializerProvider} has registered\n+     * the deserializer, but before it has returned it to the caller.\n+     * Called object can then resolve its dependencies to other types,\n+     * including self-references (direct or indirect).\n+     *\n+     * @param provider Provider that has constructed deserializer this method\n+     *   is called on.\n+     */\n+    public abstract void resolve(DeserializationConfig config, DeserializerProvider provider)\n+        throws JsonMappingException;\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.Annotations;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/StdDeserializerProvider.java\n import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;\n import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.RootNameLookup;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorProperty.java\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.TypeDeserializer;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n \n public class AtomicReferenceDeserializer\n     extends StdScalarDeserializer<AtomicReference<?>>\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;\n import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.TypeDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.EnumResolver;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.TypeDeserializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.EnumResolver;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n import org.codehaus.jackson.node.*;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.deser.impl.PropertyBasedCreator;\n import com.fasterxml.jackson.databind.deser.std.StdValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n \n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.ArrayType;\n import com.fasterxml.jackson.databind.util.ObjectBuffer;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n import com.fasterxml.jackson.databind.util.ObjectBuffer;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n /**\n  * Base class for common deserializers. Contains shared\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.TypeDeserializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n /**\n  * Base class for deserializers that handle types that are serialized\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n import com.fasterxml.jackson.databind.deser.ValueInstantiator;\n import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n \n @JacksonStdImpl\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.TypeDeserializer;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n @JacksonStdImpl\n public class StringDeserializer\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n \n import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.TypeDeserializer;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.ObjectBuffer;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n-import com.fasterxml.jackson.databind.ClassIntrospector.MixInResolver;\n+import com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver;\n import com.fasterxml.jackson.databind.util.Annotations;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n \n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n-import com.fasterxml.jackson.databind.ClassIntrospector;\n import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.MapperConfig;\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ClassIntrospector.java\n+package com.fasterxml.jackson.databind.introspect;\n+\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.DeserializationConfig;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.MapperConfig;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+\n+\n+/**\n+ * Helper class used to introspect features of POJO value classes\n+ * used with Jackson. The main use is for finding out\n+ * POJO construction (creator) and value access (getters, setters)\n+ * methods and annotations that define configuration of using\n+ * those methods.\n+ */\n+public abstract class ClassIntrospector<T extends BeanDescription>\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper interfaces\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Interface used for decoupling details of how mix-in annotation\n+     * definitions are accessed (via this interface), and how\n+     * they are stored (defined by classes that implement the interface)\n+     */\n+    public interface MixInResolver\n+    {\n+        /**\n+         * Method that will check if there are \"mix-in\" classes (with mix-in\n+         * annotations) for given class\n+         */\n+        public Class<?> findMixInClassFor(Class<?> cls);\n+    }\n+\n+    protected ClassIntrospector() { }\n+\t\n+    /*\n+    /**********************************************************\n+    /* Public API: factory methods\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Factory method that constructs an introspector that has all\n+     * information needed for serialization purposes.\n+     */\n+    public abstract T forSerialization(SerializationConfig cfg, JavaType type,\n+            MixInResolver r);\n+\n+    /**\n+     * Factory method that constructs an introspector that has all\n+     * information needed for deserialization purposes.\n+     */\n+    public abstract T forDeserialization(DeserializationConfig cfg, JavaType type,\n+            MixInResolver r);\n+    \n+    /**\n+     * Factory method that constructs an introspector that has\n+     * information necessary for creating instances of given\n+     * class (\"creator\"), as well as class annotations, but\n+     * no information on member methods\n+     */\n+    public abstract T forCreation(DeserializationConfig cfg, JavaType type,\n+            MixInResolver r);\n+\n+    /**\n+     * Factory method that constructs an introspector that only has\n+     * information regarding annotations class itself (or its supertypes) has,\n+     * but nothing on methods or constructors.\n+     */\n+    public abstract T forClassAnnotations(MapperConfig<?> cfg, JavaType type,\n+            MixInResolver r);\n+\n+    /**\n+     * Factory method that constructs an introspector that only has\n+     * information regarding annotations class itself has (but NOT including\n+     * its supertypes), but nothing on methods or constructors.\n+     */\n+    public abstract T forDirectClassAnnotations(MapperConfig<?> cfg, JavaType type,\n+            MixInResolver r);\n+}\n+\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java\n+package com.fasterxml.jackson.databind.jsontype;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n+\n+\n+/**\n+ * Interface for deserializing type information from JSON content, to\n+ * type-safely deserialize data into correct polymorphic instance\n+ * (when type inclusion has been enabled for type handled).\n+ *<p>\n+ * Separate deserialization methods are needed because serialized\n+ * form for inclusion mechanism {@link As#PROPERTY}\n+ * is slighty different if value is not expressed as JSON Object:\n+ * and as such both type deserializer and serializer need to\n+ * JSON Object form (array, object or other (== scalar)) being\n+ * used.\n+ * \n+ * @since 1.5\n+ * @author tatus\n+ */\n+public abstract class TypeDeserializer\n+{\n+    /*\n+    /**********************************************************\n+    /* Introspection\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Accessor for type information inclusion method\n+     * that deserializer uses; indicates how type information\n+     * is (expected to be) embedded in JSON input.\n+     */\n+    public abstract As getTypeInclusion();\n+\n+    /**\n+     * Name of property that contains type information, if\n+     * property-based inclusion is used.\n+     */\n+    public abstract String getPropertyName();\n+\n+    /**\n+     * Accessor for object that handles conversions between\n+     * types and matching type ids.\n+     */\n+    public abstract TypeIdResolver getTypeIdResolver();\n+\n+    /**\n+     * Accessor for \"default implementation\" type; optionally defined\n+     * class to use in cases where type id is not\n+     * accessible for some reason (either missing, or can not be\n+     * resolved)\n+     * \n+     * @since 1.9\n+     */\n+    public abstract Class<?> getDefaultImpl();\n+    \n+    /*\n+    /*********************************************************\n+    /* Type deserialization methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method called to let this type deserializer handle \n+     * deserialization of \"typed\" object, when value itself\n+     * is serialized as JSON Object (regardless of Java type).\n+     * Method needs to figure out intended\n+     * polymorphic type, locate {@link JsonDeserializer} to use, and\n+     * call it with JSON data to deserializer (which does not contain\n+     * type information).\n+     */\n+    public abstract Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt)\n+        throws IOException, JsonProcessingException;\n+\n+    /**\n+     * Method called to let this type deserializer handle \n+     * deserialization of \"typed\" object, when value itself\n+     * is serialized as JSON Array (regardless of Java type).\n+     * Method needs to figure out intended\n+     * polymorphic type, locate {@link JsonDeserializer} to use, and\n+     * call it with JSON data to deserializer (which does not contain\n+     * type information).\n+     */\n+    public abstract Object deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt)\n+        throws IOException, JsonProcessingException;\n+\n+    /**\n+     * Method called to let this type deserializer handle \n+     * deserialization of \"typed\" object, when value itself\n+     * is serialized as a scalar JSON value (something other\n+     * than Array or Object), regardless of Java type.\n+     * Method needs to figure out intended\n+     * polymorphic type, locate {@link JsonDeserializer} to use, and\n+     * call it with JSON data to deserializer (which does not contain\n+     * type information).\n+     */\n+    public abstract Object deserializeTypedFromScalar(JsonParser jp, DeserializationContext ctxt)\n+        throws IOException, JsonProcessingException;\n+\n+    /**\n+     * Method called to let this type deserializer handle \n+     * deserialization of \"typed\" object, when value itself\n+     * may have been serialized using any kind of JSON value\n+     * (Array, Object, scalar). Should only be called if JSON\n+     * serialization is polymorphic (not Java type); for example when\n+     * using JSON node representation, or \"untyped\" Java object\n+     * (which may be Map, Collection, wrapper/primitive etc).\n+     */\n+    public abstract Object deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt)\n+        throws IOException, JsonProcessingException;\n+\n+}\n+    \n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeIdResolver.java\n /**\n  * Interface that defines standard API for converting types\n  * to type identifiers and vice versa. Used by type resolvers\n- * ({@link com.fasterxml.jackson.databind.TypeSerializer},\n- * {@link com.fasterxml.jackson.databind.TypeDeserializer}) for converting\n+ * ({@link com.fasterxml.jackson.databind.jsontype.TypeSerializer},\n+ * {@link com.fasterxml.jackson.databind.jsontype.TypeDeserializer}) for converting\n  * between type and matching id; id is stored in JSON and needed for\n  * creating instances of proper subtypes when deserializing values.\n  * \n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeResolverBuilder.java\n import com.fasterxml.jackson.databind.DeserializationConfig;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializationConfig;\n-import com.fasterxml.jackson.databind.TypeDeserializer;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n \n \n /**\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeSerializer.java\n+package com.fasterxml.jackson.databind.jsontype;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+\n+\n+/**\n+ * Interface for serializing type information regarding instances of specified\n+ * base type (super class), so that exact subtype can be properly deserialized\n+ * later on. These instances are to be called by regular\n+ * {@link com.fasterxml.jackson.databind.JsonSerializer}s using proper contextual\n+ * calls, to add type information using mechanism type serializer was\n+ * configured with.\n+ * \n+ * @author tatu\n+ */\n+public abstract class TypeSerializer\n+{\n+    /*\n+    /**********************************************************\n+    /* Introspection\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Accessor for type information inclusion method\n+     * that serializer uses; indicates how type information\n+     * is embedded in resulting JSON.\n+     */\n+    public abstract JsonTypeInfo.As getTypeInclusion();\n+\n+    /**\n+     * Name of property that contains type information, if\n+     * property-based inclusion is used.\n+     */\n+    public abstract String getPropertyName();\n+    \n+    /**\n+     * Accessor for object that handles conversions between\n+     * types and matching type ids.\n+     */\n+    public abstract TypeIdResolver getTypeIdResolver();\n+    \n+    /*\n+    /**********************************************************\n+    /* Type serialization methods\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Method called to write initial part of type information for given\n+     * value, when it will be output as scalar JSON value (not as JSON\n+     * Object or Array).\n+     * This means that the context after call can not be that of JSON Object;\n+     * it may be Array or root context.\n+     * \n+     * @param value Value that will be serialized, for which type information is\n+     *   to be written\n+     * @param jgen Generator to use for writing type information\n+     */\n+    public abstract void writeTypePrefixForScalar(Object value, JsonGenerator jgen)\n+        throws IOException, JsonProcessingException;\n+\n+    /**\n+     * Method called to write initial part of type information for given\n+     * value, when it will be output as JSON Object value (not as JSON\n+     * Array or scalar).\n+     * This means that context after call must be JSON Object, meaning that\n+     * caller can then proceed to output field entries.\n+     * \n+     * @param value Value that will be serialized, for which type information is\n+     *   to be written\n+     * @param jgen Generator to use for writing type information\n+     */\n+    public abstract void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n+        throws IOException, JsonProcessingException;\n+\n+    /**\n+     * Method called to write initial part of type information for given\n+     * value, when it will be output as JSON Array value (not as JSON\n+     * Object or scalar).\n+     * This means that context after call must be JSON Array, that is, there\n+     * must be an open START_ARRAY to write contents in.\n+     * \n+     * @param value Value that will be serialized, for which type information is\n+     *   to be written\n+     * @param jgen Generator to use for writing type information\n+     */\n+    public abstract void writeTypePrefixForArray(Object value, JsonGenerator jgen)\n+        throws IOException, JsonProcessingException;\n+    \n+    /**\n+     * Method called after value has been serialized, to close any scopes opened\n+     * by earlier matching call to {@link #writeTypePrefixForScalar}.\n+     * Actual action to take may depend on various factors, but has to match with\n+     * action {@link #writeTypePrefixForScalar} did (close array or object; or do nothing).\n+     */\n+    public abstract void writeTypeSuffixForScalar(Object value, JsonGenerator jgen)\n+        throws IOException, JsonProcessingException;\n+\n+    /**\n+     * Method called after value has been serialized, to close any scopes opened\n+     * by earlier matching call to {@link #writeTypePrefixForObject}.\n+     * It needs to write closing END_OBJECT marker, and any other decoration\n+     * that needs to be matched.\n+     */\n+    public abstract void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n+        throws IOException, JsonProcessingException;\n+\n+    /**\n+     * Method called after value has been serialized, to close any scopes opened\n+     * by earlier matching call to {@link #writeTypeSuffixForScalar}.\n+     * It needs to write closing END_ARRAY marker, and any other decoration\n+     * that needs to be matched.\n+     */\n+    public abstract void writeTypeSuffixForArray(Object value, JsonGenerator jgen)\n+        throws IOException, JsonProcessingException;\n+\n+    /**\n+     * Alternative version of the prefix-for-scalar method, which is given\n+     * actual type to use (instead of using exact type of the value); typically\n+     * a super type of actual value type\n+     * \n+     * @since 1.8\n+     */\n+    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen,\n+            Class<?> type)\n+        throws IOException, JsonProcessingException\n+    {\n+        writeTypePrefixForScalar(value, jgen);\n+    }\n+\n+    /**\n+     * Alternative version of the prefix-for-object method, which is given\n+     * actual type to use (instead of using exact type of the value); typically\n+     * a super type of actual value type\n+     * \n+     * @since 1.8\n+     */\n+    public void writeTypePrefixForObject(Object value, JsonGenerator jgen,\n+            Class<?> type)\n+        throws IOException, JsonProcessingException\n+    {\n+        writeTypePrefixForObject(value, jgen);\n+    }\n+\n+    /**\n+     * Alternative version of the prefix-for-array method, which is given\n+     * actual type to use (instead of using exact type of the value); typically\n+     * a super type of actual value type\n+     * \n+     * @since 1.8\n+     */\n+    public void writeTypePrefixForArray(Object value, JsonGenerator jgen,\n+            Class<?> type)\n+        throws IOException, JsonProcessingException\n+    {\n+        writeTypePrefixForArray(value, jgen);\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n  * Default {@link TypeResolverBuilder} implementation.\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.TypeDeserializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeSerializerBase.java\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n public abstract class TypeSerializerBase extends TypeSerializer\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n import com.fasterxml.jackson.core.JsonNode;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.Deserializers;\n+import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.*;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n \n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.KeyDeserializers;\n import com.fasterxml.jackson.databind.type.ClassKey;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n \n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.Serializers;\n import com.fasterxml.jackson.databind.type.ArrayType;\n import com.fasterxml.jackson.databind.type.ClassKey;\n import com.fasterxml.jackson.databind.type.CollectionLikeType;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.std.*;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;\n import com.fasterxml.jackson.databind.util.Annotations;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.std.MapSerializer;\n import com.fasterxml.jackson.databind.type.*;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContextualSerializer.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+\n+/**\n+ * Add-on interface that {@link JsonSerializer}s can implement to get a callback\n+ * that can be used to create contextual instances of serializer to use for\n+ * handling properties of supported type. This can be useful\n+ * for serializers that can be configured by annotations, or should otherwise\n+ * have differing behavior depending on what kind of property is being serialized.\n+ *\n+ * @param <T> Type of serializer to contextualize\n+ * \n+ * @since 1.7\n+ */\n+public interface ContextualSerializer<T>\n+{\n+    /**\n+     * Method called to see if a different (or differently configured) serializer\n+     * is needed to serialize values of specified property.\n+     * Note that instance that this method is called on is typically shared one and\n+     * as a result method should <b>NOT</b> modify this instance but rather construct\n+     * and return a new instance. This instance should only be returned as-is, in case\n+     * it is already suitable for use.\n+     * \n+     * @param config Current serialization configuration\n+     * @param property Method or field that represents the property\n+     *   (and is used to access value to serialize).\n+     *   Should be available; but there may be cases where caller can not provide it and\n+     *   null is passed instead (in which case impls usually pass 'this' serializer as is)\n+     * \n+     * @return Serializer to use for serializing values of specified property;\n+     *   may be this instance or a new instance.\n+     * \n+     * @throws JsonMappingException\n+     */\n+    public JsonSerializer<T> createContextual(SerializationConfig config,\n+            BeanProperty property)\n+        throws JsonMappingException;\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n import com.fasterxml.jackson.databind.annotate.JsonSerialize;\n import com.fasterxml.jackson.databind.annotate.JsonSerialize.Inclusion;\n import com.fasterxml.jackson.databind.introspect.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.util.*;\n \n /**\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ResolvableSerializer.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+/**\n+ * Interface used to indicate serializers that want to do post-processing\n+ * after construction and being added to {@link SerializerProvider},\n+ * but before being used. This is typically used to resolve references\n+ * to other contained types; for example, bean serializers use this\n+ * to eagerly find serializers for contained field types.\n+ */\n+public interface ResolvableSerializer\n+{\n+    /**\n+     * Method called after {@link SerializerProvider} has registered\n+     * the serializer, but before it has returned it to the caller.\n+     * Called object can then resolve its dependencies to other types,\n+     * including self-references (direct or indirect).\n+     *\n+     * @param provider Provider that has constructed serializer this method\n+     *   is called on.\n+     */\n+    public abstract void resolve(SerializerProvider provider)\n+        throws JsonMappingException;\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.RuntimeJsonMappingException;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+\n+\n+/**\n+ * Abstract class that defines API used by {@link SerializerProvider}\n+ * to obtain actual\n+ * {@link JsonSerializer} instances from multiple distinct factories.\n+ */\n+public abstract class SerializerFactory\n+{\n+\n+    /*\n+    /**********************************************************\n+    /* Helper class to contain configuration settings\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Configuration settings container class for bean serializer factory.\n+     * \n+     * @since 1.7\n+     */\n+    public abstract static class Config\n+    {\n+        /**\n+         * Method for creating a new instance with additional serializer provider.\n+         */\n+        public abstract Config withAdditionalSerializers(Serializers additional);\n+\n+        /**\n+         * @since 1.8\n+         */\n+        public abstract Config withAdditionalKeySerializers(Serializers additional);\n+        \n+        /**\n+         * Method for creating a new instance with additional bean serializer modifier.\n+         */\n+        public abstract Config withSerializerModifier(BeanSerializerModifier modifier);\n+        \n+        public abstract boolean hasSerializers();\n+\n+        public abstract boolean hasKeySerializers();\n+\n+        public abstract boolean hasSerializerModifiers();\n+        \n+        public abstract Iterable<Serializers> serializers();\n+\n+        public abstract Iterable<Serializers> keySerializers();\n+        \n+        public abstract Iterable<BeanSerializerModifier> serializerModifiers();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Additional configuration\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * @since 1.7\n+     */\n+    public abstract Config getConfig();\n+    \n+    /**\n+     * Method used for creating a new instance of this factory, but with different\n+     * configuration. Reason for specifying factory method (instead of plain constructor)\n+     * is to allow proper sub-classing of factories.\n+     *<p>\n+     * Note that custom sub-classes generally <b>must override</b> implementation\n+     * of this method, as it usually requires instantiating a new instance of\n+     * factory type. Check out javadocs for\n+     * {@link com.fasterxml.jackson.databind.ser.BeanSerializerFactory} for more details.\n+     * \n+     * @since 1.7\n+     */\n+    public abstract SerializerFactory withConfig(Config config);\n+\n+    /**\n+     * Convenience method for creating a new factory instance with additional serializer\n+     * provider; equivalent to calling\n+     *<pre>\n+     *   withConfig(getConfig().withAdditionalSerializers(additional));\n+     *<pre>\n+     * \n+     * @since 1.7\n+     */\n+    public final SerializerFactory withAdditionalSerializers(Serializers additional) {\n+        return withConfig(getConfig().withAdditionalSerializers(additional));\n+    }\n+\n+    /**\n+     * @since 1.8\n+     */\n+    public final SerializerFactory withAdditionalKeySerializers(Serializers additional) {\n+        return withConfig(getConfig().withAdditionalKeySerializers(additional));\n+    }\n+    \n+    /**\n+     * Convenience method for creating a new factory instance with additional bean\n+     * serializer modifier; equivalent to calling\n+     *<pre>\n+     *   withConfig(getConfig().withSerializerModifier(modifier));\n+     *<pre>\n+     * \n+     * @since 1.7\n+     */\n+    public final SerializerFactory withSerializerModifier(BeanSerializerModifier modifier) {\n+        return withConfig(getConfig().withSerializerModifier(modifier));\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Basic SerializerFactory API:\n+    /**********************************************************\n+     */\n+\n+    /**\n+      * Method called to create (or, for immutable serializers, reuse) a serializer for given type. \n+      */\n+    public abstract JsonSerializer<Object> createSerializer(SerializationConfig config, JavaType baseType,\n+            BeanProperty property)\n+        throws JsonMappingException;\n+    \n+    /**\n+     * Method called to create a type information serializer for given base type,\n+     * if one is needed. If not needed (no polymorphic handling configured), should\n+     * return null.\n+     *\n+     * @param baseType Declared type to use as the base type for type information serializer\n+     * \n+     * @return Type serializer to use for the base type, if one is needed; null if not.\n+     * \n+     * @since 1.7\n+     */\n+    public abstract TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType,\n+            BeanProperty property)\n+        throws JsonMappingException;\n+\n+    /**\n+     * Method called to create serializer to use for serializing JSON property names (which must\n+     * be output as <code>JsonToken.FIELD_NAME</code>) for Map that has specified declared\n+     * key type, and is for specified property (or, if property is null, as root value)\n+     * \n+     * @param config Serialization configuration in use\n+     * @param baseType Declared type for Map keys\n+     * @param property Property that contains Map being serialized; null when serializing root Map value.\n+     * \n+     * @return Serializer to use, if factory knows it; null if not (in which case default serializer\n+     *   is to be used)\n+     *   \n+     * @since 1.8\n+     */\n+    public abstract JsonSerializer<Object> createKeySerializer(SerializationConfig config, JavaType baseType,\n+            BeanProperty property)\n+        throws JsonMappingException;\n+    \n+    /*\n+    /**********************************************************\n+    /* Deprecated (as of 1.7) SerializerFactory API:\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Deprecated version of accessor for type id serializer: as of 1.7 one needs\n+     * to instead call version that passes property information through.\n+     * \n+     * @since 1.5\n+     * \n+     * @deprecated Since 1.7, call variant with more arguments\n+     */\n+    @Deprecated\n+    public final JsonSerializer<Object> createSerializer(JavaType type, SerializationConfig config) {\n+        try {\n+            return createSerializer(config, type, null);\n+        } catch (JsonMappingException e) { // not optimal but:\n+            throw new RuntimeJsonMappingException(e);\n+        }\n+    }\n+    \n+    /**\n+     * Deprecated version of accessor for type id serializer: as of 1.7 one needs\n+     * to instead call version that passes property information through.\n+     * \n+     * @since 1.5\n+     * \n+     * @deprecated Since 1.7, call variant with more arguments\n+     */\n+    @Deprecated\n+    public final TypeSerializer createTypeSerializer(JavaType baseType, SerializationConfig config) {\n+        try {\n+            return createTypeSerializer(config, baseType, null);\n+        } catch (JsonMappingException e) { // not optimal but:\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import com.fasterxml.jackson.databind.BeanDescription;\n+import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializationConfig;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.type.*;\n+\n+\n+/**\n+ * Interface that defines API for simple extensions that can provide additional serializers\n+ * for various types. Access is by a single callback method; instance is to either return\n+ * a configured {@link JsonSerializer} for specified type, or null to indicate that it\n+ * does not support handling of the type. In latter case, further calls can be made\n+ * for other providers; in former case returned serializer is used for handling of\n+ * instances of specified type.\n+ * \n+ * @since 1.7\n+ */\n+public interface Serializers\n+{\n+    /**\n+     * Method called by serialization framework first time a serializer is needed for\n+     * specified type, which is not of a container type (for which other methods are\n+     * called).\n+     *<p>\n+     * Note: in version 1.7, this method was called to find serializers for all\n+     * type, including container types.\n+     * \n+     * @param type Fully resolved type of instances to serialize\n+     * @param config Serialization configuration in use\n+     * @param beanDesc Additional information about type; will always be of type\n+     *    {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription} (that is,\n+     *    safe to cast to this more specific type)\n+     * @param property Property that contains values to serialize\n+     *    \n+     * @return Configured serializer to use for the type; or null if implementation\n+     *    does not recognize or support type\n+     */\n+    public JsonSerializer<?> findSerializer(SerializationConfig config,\n+            JavaType type, BeanDescription beanDesc, BeanProperty property);\n+\n+    /**\n+     * Method called by serialization framework first time a serializer is needed for\n+     * specified array type.\n+     * Implementation should return a serializer instance if it supports\n+     * specified type; or null if it does not.\n+     * \n+     * @since 1.8\n+     */\n+    public JsonSerializer<?> findArraySerializer(SerializationConfig config,\n+            ArrayType type, BeanDescription beanDesc, BeanProperty property,\n+            TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n+\n+    public JsonSerializer<?> findCollectionSerializer(SerializationConfig config,\n+            CollectionType type, BeanDescription beanDesc, BeanProperty property,\n+            TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n+\n+    public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config,\n+            CollectionLikeType type, BeanDescription beanDesc, BeanProperty property,\n+            TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n+    \n+    public JsonSerializer<?> findMapSerializer(SerializationConfig config,\n+            MapType type, BeanDescription beanDesc, BeanProperty property,\n+            JsonSerializer<Object> keySerializer,\n+            TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n+\n+    public JsonSerializer<?> findMapLikeSerializer(SerializationConfig config,\n+            MapLikeType type, BeanDescription beanDesc, BeanProperty property,\n+            JsonSerializer<Object> keySerializer,\n+            TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n+\n+    /**\n+     * Basic {@link Serializers} implementation that implements all methods but provides\n+     * no serializers. Its main purpose is to serve as a base class so that\n+     * sub-classes only need to override methods they need.\n+     * \n+     * @since 1.9\n+     */\n+    public static class Base implements Serializers\n+    {\n+        @Override\n+        public JsonSerializer<?> findSerializer(SerializationConfig config,\n+                JavaType type, BeanDescription beanDesc, BeanProperty property)\n+        {\n+            return null;\n+        }\n+        \n+        @Override\n+        public JsonSerializer<?> findArraySerializer(SerializationConfig config,\n+                ArrayType type, BeanDescription beanDesc, BeanProperty property,\n+                TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public JsonSerializer<?> findCollectionSerializer(SerializationConfig config,\n+                CollectionType type, BeanDescription beanDesc, BeanProperty property,\n+                TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config,\n+                CollectionLikeType type, BeanDescription beanDesc, BeanProperty property,\n+                TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n+        {\n+            return null;\n+        }\n+            \n+        @Override\n+        public JsonSerializer<?> findMapSerializer(SerializationConfig config,\n+                MapType type, BeanDescription beanDesc, BeanProperty property,\n+                JsonSerializer<Object> keySerializer,\n+                TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n+        {\n+            return null;\n+        }\n+\n+        @Override\n+        public JsonSerializer<?> findMapLikeSerializer(SerializationConfig config,\n+                MapLikeType type, BeanDescription beanDesc, BeanProperty property,\n+                JsonSerializer<Object> keySerializer,\n+                TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n+        {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * @deprecated As of 1.9, use {@link Base} instead\n+     */\n+    @Deprecated\n+    public static class None extends Base { }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/StdSerializerProvider.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.impl.FailingSerializer;\n import com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;\n import com.fasterxml.jackson.databind.ser.impl.SerializerCache;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SerializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SerializerCache.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.ResolvableSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n \n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.std.SerializerBase;\n \n public class UnknownSerializer\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.*;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n \n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ContainerSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ContainerSerializerBase.java\n package com.fasterxml.jackson.databind.ser.std;\n \n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n  * Intermediate base class for types that contain element(s) of\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n import com.fasterxml.jackson.databind.util.EnumValues;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n public class EnumSetSerializer\n     extends AsArraySerializerBase<EnumSet<? extends Enum<?>>>\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/IndexedStringListSerializer.java\n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.ResolvableSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n \n /**\n  * Efficient implement for serializing {@link List}s that contains Strings and are random-accessible.\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/InetAddressSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n  * Simple serializer for {@link java.net.InetAddress}. Main complexity is\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n @JacksonStdImpl\n public class IterableSerializer\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.BeanSerializer;\n+import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n \n /**\n  * Serializer class that can serialize Object that have a\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NonTypedScalarSerializerBase.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n  * Intermediate base class for limited number of scalar types\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.ResolvableSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.type.ArrayType;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n  * This is a simple dummy serializer that will just output raw values by calling toString()\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ScalarSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ScalarSerializerBase.java\n \n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n public abstract class ScalarSerializerBase<T>\n     extends SerializerBase<T>\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n import com.fasterxml.jackson.databind.JsonSerializable;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n \n /**\n  * Dummy container class to group standard homogenous array serializer implementations\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.ser.std.CollectionSerializer;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringCollectionSerializer.java\n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.ResolvableSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n \n /**\n  * Efficient implement for serializing {@link Collection}s that contain Strings.\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/TimeZoneSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/TimeZoneSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n public class TimeZoneSerializer\n     extends ScalarSerializerBase<TimeZone>\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n \n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n  * Simple general purpose serializer, useful for any\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n import com.fasterxml.jackson.databind.annotate.JacksonStdImpl;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n /**\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializable;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n public abstract class TypeBase\n     extends JavaType\n--- a/src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n  * Container class that can be used to wrap any Object instances (including\n--- a/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n /**\n  * General-purpose wrapper class that can be used to decorate serialized\n--- a/src/main/java/org/codehaus/jackson/node/ArrayNode.java\n+++ b/src/main/java/org/codehaus/jackson/node/ArrayNode.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n \n /**\n--- a/src/main/java/org/codehaus/jackson/node/BaseJsonNode.java\n+++ b/src/main/java/org/codehaus/jackson/node/BaseJsonNode.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.JsonSerializable;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n \n /**\n--- a/src/main/java/org/codehaus/jackson/node/MissingNode.java\n+++ b/src/main/java/org/codehaus/jackson/node/MissingNode.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n \n /**\n--- a/src/main/java/org/codehaus/jackson/node/ObjectNode.java\n+++ b/src/main/java/org/codehaus/jackson/node/ObjectNode.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n \n /**\n--- a/src/main/java/org/codehaus/jackson/node/ValueNode.java\n+++ b/src/main/java/org/codehaus/jackson/node/ValueNode.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import com.fasterxml.jackson.databind.TypeSerializer;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n \n \n /**", "timestamp": 1324699535, "metainfo": ""}