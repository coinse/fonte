{"sha": "5d75ddcbe4b3e38aa00b87cdf9ecc760cc9f4c9e", "log": "Add a test to reproduce [JACKSON-877]", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestIssue877TypingWithId.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+import java.util.*;\n+\n+public class TestIssue877TypingWithId extends BaseMapTest\n+{\n+    interface BaseInterface { }\n+\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class, property = \"@id\")\n+    static class BaseInterfaceImpl implements BaseInterface {\n+\n+        @JsonProperty\n+        private List<BaseInterfaceImpl> myInstances = new ArrayList<BaseInterfaceImpl>();\n+\n+        void addInstance(BaseInterfaceImpl instance) {\n+            myInstances.add(instance);\n+        }\n+    }\n+\n+    static class LisWrappert<T extends BaseInterface> {\n+\n+        @JsonProperty\n+        private List<T> myList = new ArrayList<T>();\n+\n+        void add(T t) {\n+            myList.add(t);\n+        }\n+\n+        int size() {\n+            return myList.size();\n+        }\n+    }\n+\n+    public void testIssue877() throws Exception\n+    {\n+        // make two instances\n+        BaseInterfaceImpl one = new BaseInterfaceImpl();\n+        BaseInterfaceImpl two = new BaseInterfaceImpl();\n+\n+        // add them to each other's list to show identify info being used\n+        one.addInstance(two);\n+        two.addInstance(one);\n+\n+        // make a typed version of the list and add the 2 instances to it\n+        LisWrappert<BaseInterfaceImpl> myList = new LisWrappert<BaseInterfaceImpl>();\n+        myList.add(one);\n+        myList.add(two);\n+\n+        // make an object mapper that will add class info in so deserialisation works\n+        ObjectMapper om = new ObjectMapper();\n+        om.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL, \"@class\");\n+\n+        // write and print the JSON\n+        String json = om.writerWithDefaultPrettyPrinter().writeValueAsString(myList);\n+\n+        /*\n+        System.out.println(\"JSON:\\n\"+json);\n+        */\n+\n+        LisWrappert<BaseInterfaceImpl> result;\n+        \n+        result = om.readValue(json, myList.getClass());\n+\n+        assertNotNull(result);\n+        // see what we get back\n+        System.out.println(\"deserialised list size = \" + result.size());\n+    }\n+}", "timestamp": 1353693400, "metainfo": ""}