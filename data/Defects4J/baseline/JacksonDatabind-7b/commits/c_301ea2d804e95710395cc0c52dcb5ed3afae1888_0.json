{"sha": "301ea2d804e95710395cc0c52dcb5ed3afae1888", "log": "Minor code cleanup; should produce better error message for #354", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n      */\n     public abstract ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> generator, ObjectIdResolver resolver);\n \n-    @Deprecated\n+    @Deprecated // since 2.4\n     public abstract ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> generator);\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n         throws IOException, JsonProcessingException\n     {\n         final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n-        for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) {\n+        for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) {\n             String propName = jp.getCurrentName();\n             // Skip field name:\n             jp.nextToken();\n                 return deserializeWithView(jp, ctxt, bean, view);\n             }\n         }\n-        for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) {\n+        JsonToken t = jp.getCurrentToken();\n+        for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) {\n             String propName = jp.getCurrentName();\n             // Skip field name:\n             jp.nextToken();\n     {\n         final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n         final ExternalTypeHandler ext = _externalTypeIdHandler.start();\n-        for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) {\n+        JsonToken t = jp.getCurrentToken();\n+        for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) {\n             String propName = jp.getCurrentName();\n             jp.nextToken();\n             SettableBeanProperty prop = _beanProperties.find(propName);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n      */\n \n     @Override\n-    public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> generator, ObjectIdResolver resolverType)\n-    {\n-        final ObjectIdGenerator.IdKey key = generator.key(id);\n+    public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType)\n+    {\n+        final ObjectIdGenerator.IdKey key = gen.key(id);\n         if (_objectIds == null) {\n             _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey,ReadableObjectId>();\n         } else {\n         return entry;\n     }\n     \n-    @Override\n-    public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> generator)\n-    {\n-        return findObjectId(id, generator, new SimpleObjectIdResolver());\n-    }\n-\n-    @Override\n-    public void checkUnresolvedObjectId()\n-        throws UnresolvedForwardReference\n+    @Deprecated // since 2.4\n+    @Override\n+    public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen) {\n+        return findObjectId(id, gen, new SimpleObjectIdResolver());\n+    }\n+\n+    @Override\n+    public void checkUnresolvedObjectId() throws UnresolvedForwardReference\n     {\n         if (_objectIds == null) {\n             return;\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public JsonDeserializer<Object> deserializerInstance(Annotated annotated,\n-            Object deserDef)\n+    public JsonDeserializer<Object> deserializerInstance(Annotated ann, Object deserDef)\n         throws JsonMappingException\n     {\n         if (deserDef == null) {\n                 throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+deserClass.getName()+\"; expected Class<JsonDeserializer>\");\n             }\n             HandlerInstantiator hi = _config.getHandlerInstantiator();\n-            deser = (hi == null) ? null : hi.deserializerInstance(_config, annotated, deserClass);\n+            deser = (hi == null) ? null : hi.deserializerInstance(_config, ann, deserClass);\n             if (deser == null) {\n                 deser = (JsonDeserializer<?>) ClassUtil.createInstance(deserClass,\n                         _config.canOverrideAccessModifiers());\n     }\n \n     @Override\n-    public final KeyDeserializer keyDeserializerInstance(Annotated annotated,\n-            Object deserDef)\n+    public final KeyDeserializer keyDeserializerInstance(Annotated ann, Object deserDef)\n         throws JsonMappingException\n     {\n         if (deserDef == null) {\n                         +\"; expected Class<KeyDeserializer>\");\n             }\n             HandlerInstantiator hi = _config.getHandlerInstantiator();\n-            deser = (hi == null) ? null : hi.keyDeserializerInstance(_config, annotated, deserClass);\n+            deser = (hi == null) ? null : hi.keyDeserializerInstance(_config, ann, deserClass);\n             if (deser == null) {\n                 deser = (KeyDeserializer) ClassUtil.createInstance(deserClass,\n                         _config.canOverrideAccessModifiers());\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestConvertingSerializer357And359.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.util.StdConverter;\n+\n+public class TestConvertingSerializer357And359\n+    extends com.fasterxml.jackson.databind.BaseMapTest\n+{\n+    // [Issue#357]\n+    static class A { }\n+\n+    static class B {\n+        @JsonSerialize(contentConverter = AToStringConverter.class)\n+        public List<A> list = Arrays.asList(new A());\n+    }\n+\n+    static class AToStringConverter extends StdConverter<A, List<String>> {\n+        @Override\n+        public List<String> convert(A value) {\n+            return Arrays.asList(\"Hello world!\");\n+        }\n+    }\n+\n+    // [Issue#359]\n+\n+    static class Bean359 {\n+        @JsonSerialize(as = List.class, contentAs = Source.class)\n+        public List<Source> stuff = Arrays.asList(new Source());\n+    }\n+\n+    @JsonSerialize(using = TargetSerializer.class)\n+    static class Target {\n+        public String unexpected = \"Bye.\";\n+    }\n+\n+    @JsonSerialize(converter = SourceToTargetConverter.class)\n+    static class Source { }\n+\n+    static class SourceToTargetConverter extends StdConverter<Source, Target> {\n+        @Override\n+        public Target convert(Source value) {\n+            return new Target();\n+        }\n+    }\n+\n+    static class TargetSerializer extends JsonSerializer<TargetSerializer>\n+    {\n+        @Override\n+        public void serialize(TargetSerializer a, JsonGenerator jsonGenerator, SerializerProvider provider)\n+                throws IOException {\n+            jsonGenerator.writeString(\"Target\");\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    // [Issue#357]\n+    public void testConverterForList357() throws Exception {\n+        String json = objectWriter().writeValueAsString(new B());\n+        assertEquals(\"{\\\"list\\\":[[\\\"Hello world!\\\"]]}\", json);\n+    }\n+\n+    // [Issue#359]\n+    public void testIssue359() throws Exception\n+    {\n+        String json = objectWriter().writeValueAsString(new Bean359());\n+        assertNotNull(json);\n+        assertEquals(\"{\\\"stuff\\\":[\\\"Target\\\"]}\", json);\n+    }\n+\n+}", "timestamp": 1395033972, "metainfo": ""}