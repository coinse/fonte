{"sha": "68f2a773ab184828275b9f45a57d7fb7f9c2b9e5", "log": "Add unit tests to try to reproduce #349 (but without success yet)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestAnyProperties.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestAnyProperties.java\n     public void testSimpleMapImitation() throws Exception\n     {\n         MapImitator mapHolder = MAPPER.readValue\n-            (\"{ \\\"a\\\" : 3, \\\"b\\\" : true }\", MapImitator.class);\n+            (\"{ \\\"a\\\" : 3, \\\"b\\\" : true, \\\"c\\\":[1,2,3] }\", MapImitator.class);\n         Map<String,Object> result = mapHolder._map;\n-        assertEquals(2, result.size());\n+        assertEquals(3, result.size());\n         assertEquals(Integer.valueOf(3), result.get(\"a\"));\n         assertEquals(Boolean.TRUE, result.get(\"b\"));\n+        Object ob = result.get(\"c\");\n+        assertTrue(ob instanceof List<?>);\n+        List<?> l = (List<?>)ob;\n+        assertEquals(3, l.size());\n+        assertEquals(Integer.valueOf(3), l.get(2));\n     }\n \n     public void testSimpleTyped() throws Exception\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;\n  * one that only uses core JDK types; wrappers, Maps and Lists.\n  */\n public class TestUntypedDeserialization\n-    extends com.fasterxml.jackson.test.BaseTest\n+    extends BaseMapTest\n {\n     @SuppressWarnings(\"serial\")\n     static class UCStringDeserializer\n         // and that's all folks!\n     }\n \n+    public void testNestedUntypes() throws IOException\n+    {\n+        ObjectMapper mapper = objectMapper();\n+        Object root = mapper.readValue(aposToQuotes(\"{'a':3,'b':[1,2]}\"),\n+                Object.class);\n+        assertTrue(root instanceof Map<?,?>);\n+        Map<?,?> map = (Map<?,?>) root;\n+        assertEquals(2, map.size());\n+        assertEquals(Integer.valueOf(3), map.get(\"a\"));\n+        Object ob = map.get(\"b\");\n+        assertTrue(ob instanceof List<?>);\n+        List<?> l = (List<?>) ob;\n+        assertEquals(2, l.size());\n+        assertEquals(Integer.valueOf(2), l.get(1));\n+    }\n+    \n     // [JACKSON-839]: allow 'upgrade' of big integers into Long, BigInteger\n     public void testObjectSerializeWithLong() throws IOException\n     {", "timestamp": 1384902817, "metainfo": ""}