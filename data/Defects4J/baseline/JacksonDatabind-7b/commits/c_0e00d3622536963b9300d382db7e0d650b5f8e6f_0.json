{"sha": "0e00d3622536963b9300d382db7e0d650b5f8e6f", "log": "Minor refactoring of delegating (de)serializer, to simplify overriding", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n \n     /*\n     /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonDeserializer<?> getDelegatee() {\n+        return _delegateDeserializer;\n+    }\n+\n+    /*\n+    /**********************************************************\n     /* Serialization\n     /**********************************************************\n      */\n     \n     @Override\n     public T deserialize(JsonParser jp, DeserializationContext ctxt)\n-            throws IOException, JsonProcessingException {\n+            throws IOException, JsonProcessingException\n+    {\n         Object delegateValue = _delegateDeserializer.deserialize(jp, ctxt);\n-        return (delegateValue == null) ? null : _converter.convert(delegateValue);\n+        if (delegateValue == null) {\n+            return null;\n+        }\n+        return convertValue(delegateValue);\n     }\n \n     @Override\n          */\n         Object delegateValue = _delegateDeserializer.deserializeWithType(jp, ctxt,\n                 typeDeserializer);\n-        return (delegateValue == null) ? null : _converter.convert(delegateValue);\n+        if (delegateValue == null) {\n+            return null;\n+        }\n+        return convertValue(delegateValue);\n     }\n \n     /*\n     /**********************************************************\n-    /* Serialization\n+    /* Overridable methods\n     /**********************************************************\n      */\n \n-    @Override\n-    public JsonDeserializer<?> getDelegatee() {\n-        return _delegateDeserializer;\n+    /**\n+     * Method called to convert from \"delegate value\" (which was deserialized\n+     * from JSON using standard Jackson deserializer for delegate type)\n+     * into desired target type.\n+     *<P>\n+     * The default implementation uses configured {@link Converter} to do\n+     * conversion.\n+     * \n+     * @param delegateValue\n+     * @return\n+     */\n+    protected T convertValue(Object delegateValue) {\n+        return _converter.convert(delegateValue);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n \n     /*\n     /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n+\n+    protected Converter<Object, ?> getConverter() {\n+        return _converter;\n+    }\n+\n+    @Override\n+    public JsonSerializer<?> getDelegatee() {\n+        return _delegateSerializer;\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Serialization\n     /**********************************************************\n      */\n     public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonProcessingException\n     {\n-        Object delegateValue = _converter.convert(value);\n+        Object delegateValue = convertValue(value);\n         // should we accept nulls?\n         if (delegateValue == null) {\n             provider.defaultSerializeNull(jgen);\n         /* 03-Oct-2012, tatu: This is actually unlikely to work ok... but for now,\n          *    let's give it a chance?\n          */\n-        Object delegateValue = _converter.convert(value);\n+        Object delegateValue = convertValue(value);\n         _delegateSerializer.serializeWithType(delegateValue, jgen, provider, typeSer);\n     }\n \n     @Override\n     public boolean isEmpty(Object value)\n     {\n-        Object delegateValue = _converter.convert(value);\n+        Object delegateValue = convertValue(value);\n         return _delegateSerializer.isEmpty(delegateValue);\n     }\n     \n \n     /*\n     /**********************************************************\n-    /* Other\n-    /**********************************************************\n-     */\n-\n-    protected Converter<Object, ?> getConverter() {\n-        return _converter;\n-    }\n-\n-    @Override\n-    public JsonSerializer<?> getDelegatee() {\n-        return _delegateSerializer;\n-    }\n+    /* Overridable methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method called to convert from source Java value into delegate\n+     * value (which will be serialized using standard Jackson serializer for delegate type)\n+     *<P>\n+     * The default implementation uses configured {@link Converter} to do\n+     * conversion.\n+     * \n+     * @param delegateValue\n+     * @return\n+     */\n+    protected Object convertValue(Object value) {\n+        return _converter.convert(value);\n+    }\n+\n }", "timestamp": 1349750118, "metainfo": ""}