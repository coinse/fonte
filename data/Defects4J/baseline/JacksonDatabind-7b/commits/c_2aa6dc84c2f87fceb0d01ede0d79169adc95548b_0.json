{"sha": "2aa6dc84c2f87fceb0d01ede0d79169adc95548b", "log": "Implemented [Issue#60], JsonNode.hasNonNull()", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n      * If index is less than 0, or equal-or-greater than\n      * <code>node.size()</code>, null is returned; no exception is\n      * thrown for any index.\n+     *<p>\n+     * NOTE: if the element value has been explicitly set as <code>null</code>\n+     * (which is different from removal!),\n+     * a {@link com.fasterxml.jackson.databind.node.NullNode} will be returned,\n+     * not null.\n      *\n      * @return Node that represent value of the specified element,\n      *   if this node is an array and has specified element.\n      * an object node. If this node is not an object (or it\n      * does not have a value for specified field name), or\n      * if there is no field with such name, null is returned.\n+     *<p>\n+     * NOTE: if the property value has been explicitly set as <code>null</code>\n+     * (which is different from removal!),\n+     * a {@link com.fasterxml.jackson.databind.node.NullNode} will be returned,\n+     * not null.\n      *\n      * @return Node that represent value of the specified field,\n      *   if this node is an object and has value for the specified\n      *   node.get(fieldName) != null\n      *</pre>\n      * (since return value of get() is node, not value node contains)\n+     *<p>\n+     * NOTE: when explicit <code>null</code> values are added, this\n+     * method will return <code>true</code> for such properties.\n      *\n      * @param fieldName Name of element to check\n      * \n      *<pre>\n      *   node.get(index) != null\n      *</pre>\n+     *<p>\n+     * NOTE: this method will return <code>true</code> for explicitly added\n+     * null values.\n      *\n      * @param index Index to check\n      * \n         return get(index) != null;\n     }\n \n+    /**\n+     * Method that is similar to {@link #has(String)}, but that will\n+     * return <code>false</code> for explicitly added nulls.\n+     *<p>\n+     * This method is functionally equivalent to:\n+     *<pre>\n+     *   node.get(fieldName) != null && !node.get(fieldName).isNull()\n+     *</pre>\n+     * \n+     * @since 2.1\n+     */\n+    public boolean hasNonNull(String fieldName) {\n+        JsonNode n = get(fieldName);\n+        return (n != null) && !n.isNull();\n+    }\n+\n+    /**\n+     * Method that is similar to {@link #has(int)}, but that will\n+     * return <code>false</code> for explicitly added nulls.\n+     *<p>\n+     * This method is equivalent to:\n+     *<pre>\n+     *   node.get(index) != null && !node.get(index).isNull()\n+     *</pre>\n+     * \n+     * @since 2.1\n+     */\n+    public boolean hasNonNull(int index) {\n+        JsonNode n = get(index);\n+        return (n != null) && !n.isNull();\n+    }\n+    \n     /**\n      * Method for finding a JSON Object field with specified name in this\n      * node or its child nodes, and returning value it has.\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestArrayNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestArrayNode.java\n \n         // single element, so:\n         assertFalse(n.has(\"field\"));\n+        assertFalse(n.hasNonNull(\"field\"));\n         assertTrue(n.has(0));\n+        assertTrue(n.hasNonNull(0));\n         assertFalse(n.has(1));\n+        assertFalse(n.hasNonNull(1));\n         \n         // add null node too\n         n.add((JsonNode) null);\n         assertEquals(2, n.size());\n         assertTrue(n.get(1).isNull());\n+        assertTrue(n.has(1));\n+        assertFalse(n.hasNonNull(1));\n         // change to text\n         n.set(1, text);\n         assertSame(text, n.get(1));\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n         assertNull(n.get(0)); // not used with objects\n \n         assertFalse(n.has(0));\n+        assertFalse(n.hasNonNull(0));\n         assertTrue(n.has(\"a\"));\n+        assertTrue(n.hasNonNull(\"a\"));\n         assertFalse(n.has(\"b\"));\n+        assertFalse(n.hasNonNull(\"b\"));\n \n         ObjectNode n2 = new ObjectNode(JsonNodeFactory.instance);\n         n2.put(\"b\", 13);\n         assertEquals(2, n.size());\n         n.set(\"null\", (JsonNode)null);\n         assertEquals(3, n.size());\n+        // may be non-intuitive, but explicit nulls do exist in tree:\n+        assertTrue(n.has(\"null\"));\n+        assertFalse(n.hasNonNull(\"null\"));\n         // should replace, not add\n         n.put(\"null\", \"notReallNull\");\n         assertEquals(3, n.size());", "timestamp": 1346306766, "metainfo": ""}