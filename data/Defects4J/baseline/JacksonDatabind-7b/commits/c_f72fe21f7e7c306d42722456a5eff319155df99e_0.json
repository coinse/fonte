{"sha": "f72fe21f7e7c306d42722456a5eff319155df99e", "log": "Bit of groundwork for (possibly?) implementing #224; contextualization isolated in one place", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n \n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.deser.*;\n import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;\n import com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer;\n         JsonDeserializer<Object> deser = _cache.findValueDeserializer(this,\n                 _factory, type);\n         if (deser != null) {\n-            if (deser instanceof ContextualDeserializer) {\n-                deser = (JsonDeserializer<Object>)((ContextualDeserializer) deser).createContextual(this, property);\n-            }\n+            deser = (JsonDeserializer<Object>) handleContextualization(deser, property);\n         }\n         return deser;\n     }\n      */\n     @SuppressWarnings(\"unchecked\")\n     public final JsonDeserializer<Object> findRootValueDeserializer(JavaType type)\n-            throws JsonMappingException\n+        throws JsonMappingException\n     {\n         JsonDeserializer<Object> deser = _cache.findValueDeserializer(this,\n                 _factory, type);\n         if (deser == null) { // can this occur?\n             return null;\n         }\n-        if (deser instanceof ContextualDeserializer) {\n-            deser = (JsonDeserializer<Object>)((ContextualDeserializer) deser).createContextual(this, null);\n-        }\n+        deser = (JsonDeserializer<Object>) handleContextualization(deser, null);\n         TypeDeserializer typeDeser = _factory.findTypeDeserializer(_config, type);\n         if (typeDeser != null) {\n             // important: contextualize to indicate this is for root value\n         // By default, delegate to ClassUtil: can be overridden with custom handling\n         return ClassUtil.findClass(className);\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Extended API: handler instantiation\n-    /**********************************************************\n-     */\n-\n-    public abstract JsonDeserializer<Object> deserializerInstance(Annotated annotated,\n-            Object deserDef)\n-        throws JsonMappingException;\n-\n-    public abstract KeyDeserializer keyDeserializerInstance(Annotated annotated,\n-            Object deserDef)\n-        throws JsonMappingException;\n \n     /*\n     /**********************************************************\n         return _arrayBuilders;\n     }\n \n+    /*\n+    /**********************************************************\n+    /* Extended API: handler instantiation\n+    /**********************************************************\n+     */\n+\n+    public abstract JsonDeserializer<Object> deserializerInstance(Annotated annotated,\n+            Object deserDef)\n+        throws JsonMappingException;\n+\n+    public abstract KeyDeserializer keyDeserializerInstance(Annotated annotated,\n+            Object deserDef)\n+        throws JsonMappingException;\n+\n+    /*\n+    /**********************************************************\n+    /* Extended API: resolving contextual deserializers; called\n+    /* by structured deserializers for their value/component\n+    /* deserializers\n+    /**********************************************************\n+     */\n+\n+    public JsonDeserializer<?> handleContextualization(JsonDeserializer<?> deser,\n+            BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        if (deser == null) {\n+            return deser;\n+        }\n+        if (deser instanceof ContextualDeserializer) {\n+            deser = ((ContextualDeserializer) deser).createContextual(this, property);\n+        }\n+        return deser;\n+    }\n+           \n+    \n     /*\n     /**********************************************************\n     /* Parsing methods that may use reusable/-cyclable objects\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n                 prop = prop.withValueDeserializer(deser);\n             } else { // may need contextual version\n                 JsonDeserializer<Object> deser = prop.getValueDeserializer();\n-                if (deser instanceof ContextualDeserializer) {\n-                    JsonDeserializer<?> cd = ((ContextualDeserializer) deser).createContextual(ctxt, prop);\n-                    if (cd != deser) {\n-                        prop = prop.withValueDeserializer(cd);\n-                    }\n+                JsonDeserializer<?> cd = ctxt.handleContextualization(deser, prop);\n+                if (cd != deser) {\n+                    prop = prop.withValueDeserializer(cd);\n                 }\n             }\n             // [JACKSON-235]: need to link managed references with matching back references\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n             BeanDescription beanDesc, List<BeanPropertyDefinition> propDefs) {\n         return propDefs;\n     }\n-    \n+\n     /**\n      * Method called by {@link BeanDeserializerFactory} when it has collected\n      * basic information such as tentative list of properties to deserialize.\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n     private static final long serialVersionUID = 1L;\n \n     protected transient LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId> _objectIds;\n-    \n+\n     /**\n      * Constructor that will pass specified deserializer factory and\n      * cache: cache may be null (in which case default implementation\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n             valueDeser = ctxt.findContextualValueDeserializer(\n                     _collectionType.getContentType(), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            if (valueDeser instanceof ContextualDeserializer) {\n-                valueDeser = ((ContextualDeserializer) valueDeser).createContextual(ctxt, property);\n-            }\n+            valueDeser = ctxt.handleContextualization(valueDeser, property);\n         }\n         // and finally, type deserializer needs context as well\n         TypeDeserializer valueTypeDeser = _valueTypeDeserializer;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        JsonDeserializer<?> del = _delegatee;\n-        if (del instanceof ContextualDeserializer) {\n-            del = ((ContextualDeserializer) del).createContextual(ctxt, property);\n+        JsonDeserializer<?> del = ctxt.handleContextualization(_delegatee, property);\n+        if (del == _delegatee) {\n+            return this;\n         }\n-        return _createContextual(ctxt, property, del);\n+        return newDelegatingInstance(del);\n     }\n \n+    /* Removed in 2.3.0\n     protected JsonDeserializer<?> _createContextual(DeserializationContext ctxt,\n             BeanProperty property, JsonDeserializer<?> newDelegatee)\n     {\n         }\n         return newDelegatingInstance(newDelegatee);\n     }\n+    */\n \n     @Override\n     public SettableBeanProperty findBackReference(String logicalName) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n         if (vd == null) {\n             vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            if (vd instanceof ContextualDeserializer) {\n-                vd = ((ContextualDeserializer) vd).createContextual(ctxt, property);\n-            }\n+            vd = ctxt.handleContextualization(vd, property);\n         }\n         TypeDeserializer vtd = _valueTypeDeserializer;\n         if (vtd != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n         if (deser == null) {\n             deser = ctxt.findContextualValueDeserializer(_enumType, property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            if (deser instanceof ContextualDeserializer) {\n-                deser = ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-            }\n+            deser = ctxt.handleContextualization(deser, property);\n         }\n         return withDeserializer(deser);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n         if (vd == null) {\n             vd = ctxt.findContextualValueDeserializer(_mapType.getContentType(), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            if (vd instanceof ContextualDeserializer) {\n-                vd = ((ContextualDeserializer) vd).createContextual(ctxt, property);\n-            }\n+            vd = ctxt.handleContextualization(vd, property);\n         }\n         TypeDeserializer vtd = _valueTypeDeserializer;\n         if (vtd != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n         if (deser == null) {\n             deser = ctxt.findContextualValueDeserializer(_arrayType.getContentType(), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            if (deser instanceof ContextualDeserializer) {\n-                deser = ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-            }\n+            deser = ctxt.handleContextualization(deser, property);\n         }\n         TypeDeserializer elemTypeDeser = _elementTypeDeserializer;\n         if (elemTypeDeser != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n     {\n         // First: if already got serializer to delegate to, contextualize it:\n         if (_delegateDeserializer != null) {\n-            if (_delegateDeserializer instanceof ContextualDeserializer) {\n-                JsonDeserializer<?> deser = ((ContextualDeserializer)_delegateDeserializer).createContextual(ctxt, property);\n-                if (deser != _delegateDeserializer) {\n-                    return withDelegate(_converter, _delegateType, deser);\n-                }\n+            JsonDeserializer<?> deser = ctxt.handleContextualization(_delegateDeserializer, property);\n+            if (deser != _delegateDeserializer) {\n+                return withDelegate(_converter, _delegateType, deser);\n             }\n             return this;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer.java\n         if (deser == null) {\n             deser = ctxt.findContextualValueDeserializer(ctxt.constructType(String.class), property);\n         } else { // if directly assigned, probably not yet contextual, so:\n-            if (deser instanceof ContextualDeserializer) {\n-                deser = ((ContextualDeserializer) deser).createContextual(ctxt, property);\n-            }\n+            deser = ctxt.handleContextualization(deser, property);\n         }\n         // Ok ok: if all we got is the default String deserializer, can just forget about it\n         if (deser != null && this.isDefaultDeserializer(deser)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n                 valueDeser = ctxt.findContextualValueDeserializer( _collectionType.getContentType(), property);\n             }\n         } else { // if directly assigned, probably not yet contextual, so:\n-            if (valueDeser instanceof ContextualDeserializer) {\n-                valueDeser = ((ContextualDeserializer) valueDeser).createContextual(ctxt, property);\n-            }\n+            valueDeser = ctxt.handleContextualization(valueDeser, property);\n         } \n         if (isDefaultDeserializer(valueDeser)) {\n             valueDeser = null;", "timestamp": 1378357652, "metainfo": ""}