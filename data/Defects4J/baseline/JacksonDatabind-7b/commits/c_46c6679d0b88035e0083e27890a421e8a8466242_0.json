{"sha": "46c6679d0b88035e0083e27890a421e8a8466242", "log": "Working on #425", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DatabindContext.java\n \n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.annotation.ObjectIdResolver;\n-import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n         }\n         Class<?> converterClass = (Class<?>)converterDef;\n         // there are some known \"no class\" markers to consider too:\n-        if (converterClass == Converter.None.class || converterClass == NoClass.class) {\n+        if (converterClass == Converter.None.class || ClassUtil.isBogusClass(converterClass)) {\n             return null;\n         }\n         if (!Converter.class.isAssignableFrom(converterClass)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonDeserialize.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonDeserialize.java\n      * constructor), and its \"with-methods\" are used for populating fields;\n      * and finally \"build-method\" is invoked to complete deserialization.\n      */\n-    public Class<?> builder()\n-        default NoClass.class;\n+    public Class<?> builder() default Void.class;\n \n     // // // Annotations for specifying intermediate Converters (2.2+)\n     \n      * declared. Must be a subtype of declared type; otherwise an\n      * exception may be thrown by deserializer.\n      *<p>\n-     * Bogus type {@link NoClass} can be used to indicate that declared\n+     * Bogus type {@link Void} can be used to indicate that declared\n      * type is used as is (i.e. this annotation property has no setting);\n      * this since annotation properties are not allowed to have null value.\n      *<p>\n      * deserializer)\n      * and value of this annotation property is ignored.\n      */\n-    public Class<?> as() default NoClass.class;\n+    public Class<?> as() default Void.class;\n \n     /**\n      * Concrete type to deserialize keys of {@link java.util.Map} as,\n      * Must be a subtype of declared type; otherwise an exception may be\n      * thrown by deserializer.\n      */\n-    public Class<?> keyAs() default NoClass.class;\n+    public Class<?> keyAs() default Void.class;\n \n     /**\n      * Concrete type to deserialize content (elements\n      * Must be a subtype of declared type; otherwise an exception may be\n      * thrown by deserializer.\n      */\n-    public Class<?> contentAs() default NoClass.class;\n+    public Class<?> contentAs() default Void.class;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n      * Supertype (of declared type, which itself is supertype of runtime type)\n      * to use as type when locating serializer to use.\n      *<p>\n-     * Bogus type {@link NoClass} can be used to indicate that declared\n+     * Bogus type {@link Void} can be used to indicate that declared\n      * type is used as is (i.e. this annotation property has no setting);\n      * this since annotation properties are not allowed to have null value.\n      *<p>\n      * serializer)\n      * and value of this annotation property is ignored.\n      */\n-    public Class<?> as() default NoClass.class;\n+    public Class<?> as() default Void.class;\n \n     /**\n      * Concrete type to serialize keys of {@link java.util.Map} as,\n      * Must be a supertype of declared type; otherwise an exception may be\n      * thrown by serializer.\n      */\n-    public Class<?> keyAs() default NoClass.class;\n+    public Class<?> keyAs() default Void.class;\n \n     /**\n      * Concrete type to serialize content value (elements\n      * Must be a supertype of declared type; otherwise an exception may be\n      * thrown by serializer.\n      */\n-    public Class<?> contentAs() default NoClass.class;\n+    public Class<?> contentAs() default Void.class;\n     \n     /**\n      * Whether type detection used is dynamic or static: that is,\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/NoClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/NoClass.java\n  * as either default or explicit values. Hence for class values we must\n  * explicitly use a bogus placeholder to denote equivalent of\n  * \"no class\" (for which 'null' is usually the natural choice).\n+ * \n+ * @deprecated Since 2.4 use {@link java.lang.Void} instead as the general\n+ *   \"no class specified\" marker.\n  */\n+@Deprecated\n public final class NoClass\n {\n     private NoClass() { }\n }\n-\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n \n import com.fasterxml.jackson.core.JsonLocation;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;\n                     +\"; expected type KeyDeserializer or Class<KeyDeserializer> instead\");\n         }\n         Class<?> instClass = (Class<?>)instDef;\n-        if (instClass == NoClass.class) {\n+        if (ClassUtil.isBogusClass(instClass)) {\n             return null;\n         }\n         if (!ValueInstantiator.class.isAssignableFrom(instClass)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;\n import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\n             }\n             Class<?> deserClass = (Class<?>)deserDef;\n             // there are some known \"no class\" markers to consider too:\n-            if (deserClass == JsonDeserializer.None.class || deserClass == NoClass.class) {\n+            if (deserClass == JsonDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) {\n                 return null;\n             }\n             if (!JsonDeserializer.class.isAssignableFrom(deserClass)) {\n             }\n             Class<?> deserClass = (Class<?>)deserDef;\n             // there are some known \"no class\" markers to consider too:\n-            if (deserClass == KeyDeserializer.None.class || deserClass == NoClass.class) {\n+            if (deserClass == KeyDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) {\n                 return null;\n             }\n             if (!KeyDeserializer.class.isAssignableFrom(deserClass)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n import java.util.concurrent.ConcurrentHashMap;\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n-\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.type.*;\n             throw new IllegalStateException(\"AnnotationIntrospector.\"+methodName+\"() returned value of type \"+src.getClass().getName()+\": expected type JsonSerializer or Class<JsonSerializer> instead\");\n         }\n         Class<?> cls = (Class<?>) src;\n-        if (cls == noneClass || cls == NoClass.class) {\n+        if (cls == noneClass || ClassUtil.isBogusClass(cls)) {\n             return null;\n         }\n         return cls;\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n-import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.type.TypeBindings;\n         }\n         Class<?> converterClass = (Class<?>)converterDef;\n         // there are some known \"no class\" markers to consider too:\n-        if (converterClass == Converter.None.class || converterClass == NoClass.class) {\n+        if (converterClass == Converter.None.class || ClassUtil.isBogusClass(converterClass)) {\n             return null;\n         }\n         if (!Converter.class.isAssignableFrom(converterClass)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;\n import com.fasterxml.jackson.databind.ser.std.RawSerializer;\n+import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.Converter;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n     public Class<?> findSerializationType(Annotated am)\n     {\n         JsonSerialize ann = am.getAnnotation(JsonSerialize.class);\n-        if (ann != null) {\n-            Class<?> cls = ann.as();\n-            if (cls != NoClass.class) {\n-                return cls;\n-            }\n-        }\n-        return null;\n-    }\n-\n+        return (ann == null) ? null : _classIfExplicit(ann.as());\n+    }\n+    \n     @Override\n     public Class<?> findSerializationKeyType(Annotated am, JavaType baseType)\n     {\n         JsonSerialize ann = am.getAnnotation(JsonSerialize.class);\n-        if (ann != null) {\n-            Class<?> cls = ann.keyAs();\n-            if (cls != NoClass.class) {\n-                return cls;\n-            }\n-        }\n-        return null;\n+        return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n     }\n \n     @Override\n     public Class<?> findSerializationContentType(Annotated am, JavaType baseType)\n     {\n         JsonSerialize ann = am.getAnnotation(JsonSerialize.class);\n-        if (ann != null) {\n-            Class<?> cls = ann.contentAs();\n-            if (cls != NoClass.class) {\n-                return cls;\n-            }\n-        }\n-        return null;\n+        return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n     }\n     \n     @Override\n     @Override\n     public Object findSerializationConverter(Annotated a) {\n         JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n-        if (ann != null) {\n-            Class<?> def = ann.converter();\n-            if (def != Converter.None.class) {\n-                return def;\n-            }\n-        }\n-        return null;\n+        return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n     }\n \n     @Override\n     public Object findSerializationContentConverter(AnnotatedMember a) {\n         JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n-        if (ann != null) {\n-            Class<?> def = ann.contentConverter();\n-            if (def != Converter.None.class) {\n-                return def;\n-            }\n-        }\n-        return null;\n+        return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n     }\n     \n     @Override\n     }\n \n     @Override\n-    public Class<?> findDeserializationType(Annotated am, JavaType baseType)\n-    {\n-        // Primary annotation, JsonDeserialize\n+    public Class<?> findDeserializationType(Annotated am, JavaType baseType) {\n         JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class);\n-        if (ann != null) {\n-            Class<?> cls = ann.as();\n-            if (cls != NoClass.class) {\n-                return cls;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType)\n-    {\n-        // Primary annotation, JsonDeserialize\n+        return (ann == null) ? null : _classIfExplicit(ann.as());\n+    }\n+\n+    @Override\n+    public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {\n         JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class);\n-        if (ann != null) {\n-            Class<?> cls = ann.keyAs();\n-            if (cls != NoClass.class) {\n-                return cls;\n-            }\n-        }\n-        return null;\n+        return (ann == null) ? null : _classIfExplicit(ann.keyAs());\n     }\n \n     @Override\n     public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType)\n     {\n-        // Primary annotation, JsonDeserialize\n         JsonDeserialize ann = am.getAnnotation(JsonDeserialize.class);\n-        if (ann != null) {\n-            Class<?> cls = ann.contentAs();\n-            if (cls != NoClass.class) {\n-                return cls;\n-            }\n-        }\n-        return null;\n+        return (ann == null) ? null : _classIfExplicit(ann.contentAs());\n     }\n \n     @Override\n     public Object findDeserializationConverter(Annotated a)\n     {\n         JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class);\n-        if (ann != null) {\n-            Class<?> def = ann.converter();\n-            if (def != Converter.None.class) {\n-                return def;\n-            }\n-        }\n-        return null;\n+        return (ann == null) ? null : _classIfExplicit(ann.converter(), Converter.None.class);\n     }\n \n     @Override\n     public Object findDeserializationContentConverter(AnnotatedMember a)\n     {\n         JsonDeserialize ann = a.getAnnotation(JsonDeserialize.class);\n-        if (ann != null) {\n-            Class<?> def = ann.contentConverter();\n-            if (def != Converter.None.class) {\n-                return def;\n-            }\n-        }\n-        return null;    }\n-    \n+        return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);\n+    }\n+\n     /*\n     /**********************************************************\n     /* Deserialization: Class annotations\n     public Class<?> findPOJOBuilder(AnnotatedClass ac)\n     {\n         JsonDeserialize ann = ac.getAnnotation(JsonDeserialize.class);\n-        return ((ann == null) || (ann.builder() == NoClass.class)) ?\n-                null : ann.builder();\n+        return (ann == null) ? null : _classIfExplicit(ann.builder());\n     }\n \n     @Override\n         return (ann != null && ann.value());\n     }\n \n+    protected Class<?> _classIfExplicit(Class<?> cls) {\n+        if (cls == null || ClassUtil.isBogusClass(cls)) {\n+            return null;\n+        }\n+        return cls;\n+    }\n+\n+    protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {\n+        cls = _classIfExplicit(cls);\n+        return (cls == null || cls == implicit) ? null : cls;\n+    }\n+    \n     /**\n      * Helper method called to construct and initialize instance of {@link TypeResolverBuilder}\n      * if given annotated element indicates one is needed.\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n-import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n+import com.fasterxml.jackson.databind.util.ClassUtil;\n \n /**\n  * Base class for all standard Jackson {@link TypeDeserializer}s.\n             }\n             return null;\n         }\n-        if (_defaultImpl.getRawClass() == NoClass.class) {\n+        Class<?> raw = _defaultImpl.getRawClass();\n+        if (ClassUtil.isBogusClass(raw)) {\n             return NullifyingDeserializer.instance;\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n-import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;\n import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;\n import com.fasterxml.jackson.databind.introspect.*;\n             throw new IllegalStateException(\"AnnotationIntrospector.\"+methodName+\"() returned value of type \"+src.getClass().getName()+\": expected type JsonSerializer or Class<JsonSerializer> instead\");\n         }\n         Class<?> cls = (Class<?>) src;\n-        if (cls == noneClass || cls == NoClass.class) {\n+        if (cls == noneClass || ClassUtil.isBogusClass(cls)) {\n             return null;\n         }\n         return cls;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n import com.fasterxml.jackson.core.JsonGenerator;\n \n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n             }\n             Class<?> serClass = (Class<?>)serDef;\n             // there are some known \"no class\" markers to consider too:\n-            if (serClass == JsonSerializer.None.class || serClass == NoClass.class) {\n+            if (serClass == JsonSerializer.None.class || ClassUtil.isBogusClass(serClass)) {\n                 return null;\n             }\n             if (!JsonSerializer.class.isAssignableFrom(serClass)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java\n         return (implClass.getAnnotation(JacksonStdImpl.class) != null);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n+    public final static boolean isBogusClass(Class<?> cls) {\n+        return (cls == Void.class || cls == com.fasterxml.jackson.databind.annotation.NoClass.class);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Helper classes\n      */\n     private static class EnumTypeLocator\n     {\n-    \tfinal static EnumTypeLocator instance = new EnumTypeLocator();\n-\n-    \tprivate final Field enumSetTypeField;\n-    \tprivate final Field enumMapTypeField;\n+        final static EnumTypeLocator instance = new EnumTypeLocator();\n+\n+        private final Field enumSetTypeField;\n+        private final Field enumMapTypeField;\n     \t\n-    \tprivate EnumTypeLocator() {\n+        private EnumTypeLocator() {\n     \t    /* JDK uses following fields to store information about actual Enumeration\n     \t     * type for EnumSets, EnumMaps...\n     \t     */\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserializationWithDefault.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserializationWithDefault.java\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.databind.annotation.NoClass;\n \n /**\n  * Unit tests related to [JACKSON-712]; specialized handling of\n     }\n \n     @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"type\",\n-            defaultImpl = NoClass.class)\n+            defaultImpl = Void.class)\n     public static class DefaultWithNoClass { }\n \n     // and then one with no defaultImpl nor listed subtypes\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestUnwrappedWithTypeInfo.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestUnwrappedWithTypeInfo.java\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.annotation.JsonTypeName;\n import com.fasterxml.jackson.annotation.JsonUnwrapped;\n-import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationFeature;\n-\n-import org.junit.Test;\n \n // Tests for [#81]\n public class TestUnwrappedWithTypeInfo extends BaseMapTest\n--- a/src/test/java/perf/ManualWritePerfUntyped.java\n+++ b/src/test/java/perf/ManualWritePerfUntyped.java\n                 \"Untyped-2\", stuff, Object.class);\n     }\n \n+    @SuppressWarnings(\"resource\")\n     @Override\n     protected double testSer(int REPS, Object value, ObjectWriter writer) throws Exception\n     {", "timestamp": 1400568167, "metainfo": ""}