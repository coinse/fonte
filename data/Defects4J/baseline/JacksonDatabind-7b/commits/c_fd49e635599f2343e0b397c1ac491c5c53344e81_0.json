{"sha": "fd49e635599f2343e0b397c1ac491c5c53344e81", "log": "Add variants of micro-benchmark", "commit": "\n--- a/src/test/java/perf/ManualReadPerfUntyped.java\n+++ b/src/test/java/perf/ManualReadPerfUntyped.java\n //               ,m, \"JSON-as-Node\", input2, JsonNode.class\n                 );\n     }\n-\n-    // When comparing to simple streaming parsing, uncomment:\n-\n-    @Override\n-    protected double testDeser1(int reps, String input, ObjectReader reader) throws Exception {\n-        return _testRawDeser(reps, input, reader);\n-//        return _testDeser(reps, input, reader);\n-    }\n-\n-    @Override\n-    protected double testDeser2(int reps, String input, ObjectReader reader) throws Exception {\n-        return _testRawDeser(reps, input, reader);\n-//        return _testDeser(reps, input, reader);\n-    }\n-    \n-    protected final double _testRawDeser(int reps, String input, ObjectReader reader) throws Exception\n-    {\n-        long start = System.nanoTime();\n-        final JsonFactory f = reader.getFactory();\n-        while (--reps >= 0) {\n-            JsonParser p = f.createParser(input);\n-            JsonToken t;\n-            while ((t = p.nextToken()) != null) {\n-                if (t == JsonToken.VALUE_STRING) {\n-                    p.getText();\n-                } else if (t.isNumeric()) {\n-                    p.getNumberValue();\n-                }\n-                ;\n-            }\n-            p.close();\n-        }\n-        hash = f.hashCode();\n-        return _msecsFromNanos(System.nanoTime() - start);\n-    }\n }\n--- /dev/null\n+++ b/src/test/java/perf/ManualReadPerfUntypedReader.java\n+package perf;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class ManualReadPerfUntypedReader extends ObjectReaderBase\n+{\n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 1) {\n+            System.err.println(\"Usage: java [input]\");\n+            System.exit(1);\n+        }\n+        byte[] data = readAll(args[0]);\n+\n+        JsonFactory f = new JsonFactory();\n+        boolean doIntern = true;\n+\n+        f.configure(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES, doIntern);\n+        f.configure(JsonFactory.Feature.INTERN_FIELD_NAMES, doIntern);\n+        \n+        ObjectMapper m = new ObjectMapper();\n+        Object input1 = m.readValue(data, Object.class);\n+        JsonNode input2 = m.readTree(data);\n+\n+        new ManualReadPerfUntypedReader()\n+            .testFromString(\n+                m, \"JSON-as-Object\", input1, Object.class\n+                ,m, \"JSON-as-Object2\", input2, Object.class\n+                );\n+    }\n+\n+    // When comparing to simple streaming parsing, uncomment:\n+\n+    @Override\n+    protected double testDeser1(int reps, String input, ObjectReader reader) throws IOException {\n+        return _testRawDeser(reps, input, reader);\n+    }\n+\n+    @Override\n+    protected double testDeser2(int reps, String input, ObjectReader reader) throws IOException {\n+        return _testRawDeser(reps, input, reader);\n+    }\n+    \n+    protected final double _testRawDeser(int reps, String json, ObjectReader reader) throws IOException\n+    {\n+        long start = System.nanoTime();\n+        final JsonFactory f = reader.getFactory();\n+        while (--reps >= 0) {\n+            JsonParser p = f.createParser(json);\n+            JsonToken t;\n+            while ((t = p.nextToken()) != null) {\n+                if (t == JsonToken.VALUE_STRING) {\n+                    p.getText();\n+                } else if (t.isNumeric()) {\n+                    p.getNumberValue();\n+                }\n+                ;\n+            }\n+            p.close();\n+        }\n+        hash = f.hashCode();\n+        return _msecsFromNanos(System.nanoTime() - start);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/perf/ManualReadPerfUntypedStream.java\n+package perf;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class ManualReadPerfUntypedStream extends ObjectReaderBase\n+{\n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 1) {\n+            System.err.println(\"Usage: java [input]\");\n+            System.exit(1);\n+        }\n+        byte[] data = readAll(args[0]);\n+\n+        JsonFactory f = new JsonFactory();\n+        boolean doIntern = true;\n+\n+        f.configure(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES, doIntern);\n+        f.configure(JsonFactory.Feature.INTERN_FIELD_NAMES, doIntern);\n+        \n+        ObjectMapper m = new ObjectMapper();\n+        Object input1 = m.readValue(data, Object.class);\n+        JsonNode input2 = m.readTree(data);\n+\n+        new ManualReadPerfUntypedStream()\n+            .testFromBytes(\n+                m, \"JSON-as-Object\", input1, Object.class\n+                ,m, \"JSON-as-Object2\", input2, Object.class\n+//               ,m, \"JSON-as-Node\", input2, JsonNode.class\n+                );\n+    }\n+\n+    @Override\n+    protected double testDeser1(int reps, byte[] input, ObjectReader reader) throws IOException {\n+        return _testRawDeser(reps, input, reader);\n+    }\n+\n+    @Override\n+    protected double testDeser2(int reps, byte[] input, ObjectReader reader) throws IOException {\n+        return _testRawDeser(reps, input, reader);\n+    }\n+    \n+    protected final double _testRawDeser(int reps, byte[] json, ObjectReader reader) throws IOException\n+    {\n+        long start = System.nanoTime();\n+        final JsonFactory f = reader.getFactory();\n+        while (--reps >= 0) {\n+            JsonParser p = f.createParser(new ByteArrayInputStream(json));\n+            JsonToken t;\n+            while ((t = p.nextToken()) != null) {\n+                if (t == JsonToken.VALUE_STRING) {\n+                    p.getText();\n+                } else if (t.isNumeric()) {\n+                    p.getNumberValue();\n+                }\n+                ;\n+            }\n+            p.close();\n+        }\n+        hash = f.hashCode();\n+        return _msecsFromNanos(System.nanoTime() - start);\n+    }\n+}\n--- a/src/test/java/perf/ObjectReaderBase.java\n+++ b/src/test/java/perf/ObjectReaderBase.java\n                 byteInput1.length, byteInput2.length, REPS);\n \n         final ObjectReader jsonReader = mapper1.reader()\n-                .with(DeserializationFeature.EAGER_DESERIALIZER_FETCH)\n                 .withType(inputClass1);\n         final ObjectReader arrayReader = mapper2.reader()\n-                .with(DeserializationFeature.EAGER_DESERIALIZER_FETCH)\n                 .withType(inputClass2);\n         \n         int i = 0;\n         final int TYPES = 2;\n \n+        timeMsecs = new double[TYPES];\n+        \n         while (true) {\n             Thread.sleep(100L);\n             int type = (i++ % TYPES);\n \n             String msg;\n-            long micros;\n+            double msesc;\n             \n             switch (type) {\n             case 0:\n                 msg = _desc1;\n-                micros = testDeser1(REPS, byteInput1, jsonReader);\n+                msesc = testDeser1(REPS, byteInput1, jsonReader);\n                 break;\n             case 1:\n                 msg = _desc2;\n-                micros = testDeser2(REPS, byteInput2, arrayReader);\n+                msesc = testDeser2(REPS, byteInput2, arrayReader);\n                 break;\n             default:\n                 throw new Error();\n             }\n-            updateStats(type, (i % 17) == 0, msg, micros);\n+            updateStats(type, (i % 17) == 0, msg, msesc);\n         }\n     }\n \n             Thread.sleep(100L);\n             int type = (i++ % TYPES);\n \n+// !!! TEST\n+//type = 0;            \n+            \n             String msg;\n             double msecs;\n             \n         }\n     }\n \n-    protected long testDeser1(int reps, byte[] input, ObjectReader reader) throws Exception {\n-        return _testDeser(reps, input, reader);\n-    }\n-    protected long testDeser2(int reps, byte[] input, ObjectReader reader) throws Exception {\n-        return _testDeser(reps, input, reader);\n-    }\n-    \n-    protected final long _testDeser(int reps, byte[] input, ObjectReader reader) throws Exception\n+    protected double testDeser1(int reps, byte[] input, ObjectReader reader) throws Exception {\n+        return _testDeser(reps, input, reader);\n+    }\n+    protected double testDeser2(int reps, byte[] input, ObjectReader reader) throws Exception {\n+        return _testDeser(reps, input, reader);\n+    }\n+    \n+    protected final double _testDeser(int reps, byte[] input, ObjectReader reader) throws Exception\n     {\n         long start = System.nanoTime();\n         Object result = null;\n         }\n         hash = result.hashCode();\n         // return microseconds\n-        return (System.nanoTime() - start) >> 10;\n+        return _msecsFromNanos(System.nanoTime() - start);\n     }\n \n     protected double testDeser1(int reps, String input, ObjectReader reader) throws Exception {", "timestamp": 1398353563, "metainfo": ""}