{"sha": "c849581289df261cd6431097746c6375fb445131", "log": "Added ShortNode", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n \n     /**\n      * Method that can be used to check whether contained value\n+     * is a number represented as Java <code>short</code>.\n+     * Note, however, that even if this method returns false, it\n+     * is possible that conversion would be possible from other numeric\n+     * types -- to check if this is possible, use\n+     * {@link #canConvertToInt()} instead.\n+     * \n+     * @return True if the value contained by this node is stored as Java short\n+     */\n+    public boolean isShort() { return false; }\n+\n+    /**\n+     * Method that can be used to check whether contained value\n      * is a number represented as Java <code>int</code>.\n      * Note, however, that even if this method returns false, it\n      * is possible that conversion would be possible from other numeric\n--- a/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n      * Factory method for getting an instance of JSON numeric value\n      * that expresses given 16-bit integer value\n      */\n-    public NumericNode numberNode(short v) { return IntNode.valueOf(v); }\n+    public NumericNode numberNode(short v) { return ShortNode.valueOf(v); }\n \n     /**\n      * Alternate factory method that will handle wrapper value, which may\n      * {@link NumericNode}, but just {@link ValueNode}.\n      */\n     public ValueNode numberNode(Short value) {\n-        return (value == null) ? nullNode() : IntNode.valueOf(value.shortValue());\n+        return (value == null) ? nullNode() : ShortNode.valueOf(value);\n     }\n     \n     /**\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ShortNode.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.io.NumberOutput;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+\n+/**\n+ * Numeric node that contains simple 16-bit integer values.\n+ */\n+public final class ShortNode\n+    extends NumericNode\n+{\n+    final short _value;\n+\n+    /* \n+    ************************************************\n+    * Construction\n+    ************************************************\n+    */\n+\n+    public ShortNode(short v) { _value = v; }\n+\n+    public static ShortNode valueOf(short l) { return new ShortNode(l); }\n+\n+    /* \n+    ************************************************\n+    * Overridden JsonNode methods\n+    ************************************************\n+    */\n+\n+    @Override public JsonToken asToken() { return JsonToken.VALUE_NUMBER_INT; }\n+\n+    @Override\n+    public JsonParser.NumberType numberType() { return JsonParser.NumberType.INT; }\t// TODO: should be SHORT\n+\n+\n+    @Override\n+    public boolean isIntegralNumber() { return true; }\n+\n+    @Override\n+    public boolean isShort() { return true; }\n+\n+    @Override public boolean canConvertToInt() { return true; }\n+    @Override public boolean canConvertToLong() { return true; }\n+    \n+    @Override\n+    public Number numberValue() {\n+        return Short.valueOf(_value);\n+    }\n+\n+    @Override\n+    public short shortValue() { return _value; }\n+\n+    @Override\n+    public int intValue() { return _value; }\n+\n+    @Override\n+    public long longValue() { return _value; }\n+\n+    @Override\n+    public float floatValue() { return _value; }\n+\n+    @Override\n+    public double doubleValue() { return _value; }\n+\n+    @Override\n+    public BigDecimal decimalValue() { return BigDecimal.valueOf(_value); }\n+\n+    @Override\n+    public BigInteger bigIntegerValue() { return BigInteger.valueOf(_value); }\n+\n+    @Override\n+    public String asText() {\n+        return NumberOutput.toString(_value);\n+    }\n+\n+    @Override\n+    public boolean asBoolean(boolean defaultValue) {\n+        return _value != 0;\n+    }\n+    \n+    @Override\n+    public final void serialize(JsonGenerator jg, SerializerProvider provider)\n+        throws IOException, JsonProcessingException\n+    {\n+        jg.writeNumber(_value);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o)\n+    {\n+        if (o == this) return true;\n+        if (o == null) return false;\n+        if (o.getClass() != getClass()) { // final class, can do this\n+            return false;\n+        }\n+        return ((ShortNode) o)._value == _value;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return _value;\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n  */\n public class TestNumberNodes extends NodeTestBase\n {\n-    public void testInt()\n+    public void testShort()\n+    {\n+        ShortNode n = ShortNode.valueOf((short) 1);\n+        assertStandardEquals(n);\n+        assertTrue(0 != n.hashCode());\n+//        assertEquals(JsonToken.VALUE_NUMBER_SHORT, n.asToken());\t\t// TODO: fix when available\n+        assertEquals(JsonParser.NumberType.INT, n.numberType());\n+        assertEquals(1, n.intValue());\n+        assertEquals(1L, n.longValue());\n+        assertEquals(BigDecimal.ONE, n.decimalValue());\n+        assertEquals(BigInteger.ONE, n.bigIntegerValue());\n+        assertEquals(\"1\", n.asText());\n+\n+        assertNodeNumbers(n, 1, 1.0);\n+\n+        assertTrue(ShortNode.valueOf((short) 0).canConvertToInt());\n+        assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt());\n+        assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt());\n+\n+        assertTrue(ShortNode.valueOf((short) 0).canConvertToLong());\n+        assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong());\n+        assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong());\n+    }\n+    \n+\tpublic void testInt()\n     {\n         IntNode n = IntNode.valueOf(1);\n         assertStandardEquals(n);", "timestamp": 1365448863, "metainfo": ""}