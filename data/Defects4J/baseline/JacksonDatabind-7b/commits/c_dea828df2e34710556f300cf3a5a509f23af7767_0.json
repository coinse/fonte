{"sha": "dea828df2e34710556f300cf3a5a509f23af7767", "log": "Implemented forward reference resolution for any setter based deserialization.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n                                         Object instance, String propName)\n         throws IOException, JsonProcessingException\n     {\n-        set(instance, propName, deserialize(jp, ctxt));\n+        try {\n+            set(instance, propName, deserialize(jp, ctxt));\n+        } catch (UnresolvedForwardReference reference) {\n+            if (!(_valueDeserializer.getObjectIdReader() != null)) {\n+                throw JsonMappingException.from(jp, \"Unresolved forward reference but no identity info.\", reference);\n+            }\n+            AnySetterReferring referring = new AnySetterReferring(instance, propName, reference.getUnresolvedId());\n+            reference.getRoid().appendReferring(referring);\n+        }\n     }\n \n     public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n \n     @Override public String toString() { return \"[any property on class \"+getClassName()+\"]\"; }\n \n+    private class AnySetterReferring implements Referring {\n+        private Object _pojo;\n+        private String _propName;\n+        private Object _unresolvedId;\n+\n+        public AnySetterReferring(Object instance, String propName, Object id)\n+        {\n+            _pojo = instance;\n+            _propName = propName;\n+            _unresolvedId = id;\n+        }\n+\n+        @Override\n+        public void handleResolvedForwardReference(Object id, Object value)\n+            throws IOException\n+        {\n+            if (!id.equals(_unresolvedId)) {\n+                throw new IllegalArgumentException(\"Trying to resolve a forward reference with id [\" + id.toString()\n+                        + \"] that wasn't previously registered.\");\n+            }\n+            set(_pojo, _propName, value);\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* JDK serialization handling", "timestamp": 1389625653, "metainfo": ""}