{"sha": "eb5f57e92a541df6a3528b9437aa9e9943732e57", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n             if (_externalTypeIdHandler != null) {\n                 return deserializeWithExternalTypeId(jp, ctxt);\n             }\n-            return deserializeFromObjectUsingNonDefault(jp, ctxt);\n+            Object bean = deserializeFromObjectUsingNonDefault(jp, ctxt);\n+            if (_injectables != null) {\n+                injectValues(ctxt, bean);\n+            }\n+            /* 27-May-2014, tatu: I don't think view processing would work\n+             *   at this point, so commenting it out; but leaving in place\n+             *   just in case I forgot something fundamental...\n+             */\n+            /*\n+            if (_needViewProcesing) {\n+                Class<?> view = ctxt.getActiveView();\n+                if (view != null) {\n+                    return deserializeWithView(jp, ctxt, bean, view);\n+                }\n+            }\n+            */\n+            return bean;\n         }\n         final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n         if (jp.canReadObjectId()) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n      * null or empty List.\n      */\n     public Object createUsingDefault(DeserializationContext ctxt) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\"; no default creator found\");\n     }\n \n      * a non-empty List of arguments.\n      */\n     public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()+\" with arguments\");\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()+\" with arguments\");\n     }\n \n     /**\n      * an intermediate \"delegate\" value to pass to createor method\n      */\n     public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()+\" using delegate\");\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()+\" using delegate\");\n     }\n     \n     /*\n     }\n \n     public Object createFromInt(DeserializationContext ctxt, int value) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from Integer number (\"+value+\", int)\");\n     }\n \n     public Object createFromLong(DeserializationContext ctxt, long value) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from Integer number (\"+value+\", long)\");\n     }\n \n     public Object createFromDouble(DeserializationContext ctxt, double value) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from Floating-point number (\"+value+\", double)\");\n     }\n     \n     public Object createFromBoolean(DeserializationContext ctxt, boolean value) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from Boolean value (\"+value+\")\");\n     }\n \n                 return null;\n             }\n         }\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n                 +\" from String value ('\"+value+\"'); no single-String constructor/factory method\");\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n         } catch (ExceptionInInitializerError e) {\n             throw wrapException(e);\n         }\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n                 +\" from Integral number (\"+value+\"); no single-int-arg constructor/factory method\");\n     }\n \n         } catch (ExceptionInInitializerError e) {\n             throw wrapException(e);\n         }\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n                 +\" from Long integral number (\"+value+\"); no single-long-arg constructor/factory method\");\n     }\n \n         } catch (ExceptionInInitializerError e) {\n             throw wrapException(e);\n         }\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n                 +\" from Floating-point number (\"+value+\"); no one-double/Double-arg constructor/factory method\");\n     }\n \n         } catch (ExceptionInInitializerError e) {\n             throw wrapException(e);\n         }\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n                 +\" from Boolean value (\"+value+\"); no single-boolean/Boolean-arg constructor/factory method\");\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanDeserializer.java\n         public CtorValueBean(String d) { _desc = d; }\n         public CtorValueBean(int value) { _desc = String.valueOf(value); }\n         public CtorValueBean(long value) { _desc = String.valueOf(value); }\n+        public CtorValueBean(double value) { _desc = String.valueOf(value); }\n \n         @Override\n         public void serialize(JsonGenerator jgen, SerializerProvider provider)\n         public static FactoryValueBean valueOf(long v) { return new FactoryValueBean(String.valueOf(v), 0); }\n \n         @Override public String toString() { return _desc; }\n+    }\n+\n+    static class OtherBean {\n+        SomeIncompatibleType o;\n+\n+        protected OtherBean(SomeIncompatibleType o) {\n+            this.o = o;\n+        }\n+\n+        static class SomeIncompatibleType { }\n     }\n \n     /**\n     {\n         CtorValueBean result = MAPPER.readValue(\"13\", CtorValueBean.class);\n         assertEquals(\"13\", result.toString());\n+\n+        try {\n+            OtherBean otherResult = MAPPER.readValue(\"13\", OtherBean.class);\n+            fail(\"Expected an exception, but got result value: \"+otherResult.o);\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"from Integral number\", \"no single-int-arg constructor/factory method\");\n+            assertValidLocation(e.getLocation());\n+        }\n     }\n \n     public void testFromLongCtor() throws Exception\n         long value = 12345678901244L;\n         CtorValueBean result = MAPPER.readValue(\"\"+value, CtorValueBean.class);\n         assertEquals(\"\"+value, result.toString());\n+\n+        try {\n+            OtherBean otherResult = MAPPER.readValue(\"\"+value, OtherBean.class);\n+            fail(\"Expected an exception, but got result value: \"+otherResult.o);\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"from Long integral number\", \"no single-long-arg constructor/factory method\");\n+            assertValidLocation(e.getLocation());\n+        }\n+    }\n+\n+    public void testFromDoubleCtor() throws Exception\n+    {\n+        CtorValueBean result = MAPPER.readValue(\"13.5\", CtorValueBean.class);\n+        assertEquals(\"13.5\", result.toString());\n+\n+        try {\n+            OtherBean otherResult = MAPPER.readValue(\"13.5\", OtherBean.class);\n+            fail(\"Expected an exception, but got result value: \"+otherResult.o);\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"from Floating-point number\", \"no one-double/Double-arg constructor/factory method\");\n+            assertValidLocation(e.getLocation());\n+        }\n     }\n \n     public void testFromStringFactory() throws Exception\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n             };\n         }\n     }\n-    \n+\n     /*\n     /********************************************************\n     /* Unit tests\n             fail(\"Should not accept Empty String for POJO\");\n         } catch (JsonProcessingException e) {\n             verifyException(e, \"from String value\");\n+            assertValidLocation(e.getLocation());\n         }\n \n         // should be ok to enable dynamically:\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestInjectables.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestInjectables.java\n             name = n;\n             age = a;\n         }\n+    }\n+\n+    static class IssueGH471Bean {\n+\n+        private final Object constructorInjected;\n+        private final String constructorValue;\n+\n+        @JacksonInject(\"field_injected\") private Object fieldInjected;\n+        @JsonProperty(\"field_value\")     private String fieldValue;\n+\n+        private Object methodInjected;\n+        private String methodValue;\n+\n+        public int x;\n+        \n+        @JsonCreator\n+        private IssueGH471Bean(@JacksonInject(\"constructor_injected\") Object constructorInjected,\n+                               @JsonProperty(\"constructor_value\") String constructorValue) {\n+            this.constructorInjected = constructorInjected;\n+            this.constructorValue = constructorValue;\n+        }\n+\n+        @JacksonInject(\"method_injected\")\n+        private void setMethodInjected(Object methodInjected) {\n+            this.methodInjected = methodInjected;\n+        }\n+\n+        @JsonProperty(\"method_value\")\n+        public void setMethodValue(String methodValue) {\n+            this.methodValue = methodValue;\n+        }\n+\n     }\n     \n     /*\n             verifyException(e, \"Duplicate injectable value\");\n         }\n     }\n+\n+    public void testIssueGH471() throws Exception\n+    {\n+        final Object constructorInjected = \"constructorInjected\";\n+        final Object methodInjected = \"methodInjected\";\n+        final Object fieldInjected = \"fieldInjected\";\n+\n+        ObjectMapper mapper = new ObjectMapper()\n+                        .setInjectableValues(new InjectableValues.Std()\n+                                .addValue(\"constructor_injected\", constructorInjected)\n+                                .addValue(\"method_injected\", methodInjected)\n+                                .addValue(\"field_injected\", fieldInjected));\n+\n+        IssueGH471Bean bean = mapper.readValue(\"{\\\"x\\\":13,\\\"constructor_value\\\":\\\"constructor\\\",\\\"method_value\\\":\\\"method\\\",\\\"field_value\\\":\\\"field\\\"}\",\n+                IssueGH471Bean.class);\n+\n+        /* Assert *SAME* instance */\n+        assertSame(constructorInjected, bean.constructorInjected);\n+        assertSame(methodInjected, bean.methodInjected);\n+        assertSame(fieldInjected, bean.fieldInjected);\n+\n+        /* Check that basic properties still work (better safe than sorry) */\n+        assertEquals(\"constructor\", bean.constructorValue);\n+        assertEquals(\"method\", bean.methodValue);\n+        assertEquals(\"field\", bean.fieldValue);\n+\n+        assertEquals(13, bean.x);\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/test/BaseTest.java\n+++ b/src/test/java/com/fasterxml/jackson/test/BaseTest.java\n         }\n     }\n \n+    protected void assertValidLocation(JsonLocation location) {\n+        assertNotNull(\"Should have non-null location\", location);\n+        assertTrue(\"Should have positive line number\", location.getLineNr() > 0);\n+    }\n+\n     protected void verifyException(Throwable e, String... matches)\n     {\n         String msg = e.getMessage();\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestTypeWithJsonValue466.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.databind.*;\n+\n+@SuppressWarnings(\"serial\")\n+public class TestTypeWithJsonValue466 extends BaseMapTest\n+{\n+    // The following is required for the testDecimalMetadata test case. That case fails.\n+    @JsonTypeName(value = \"decimalValue\")\n+    public static class DecimalValue {\n+        private java.math.BigDecimal value;\n+        public DecimalValue(){ this.value = java.math.BigDecimal.valueOf( 1234.4321 ); }\n+     \n+        @JsonValue\n+        public java.math.BigDecimal getValue(){ return value; }\n+    }\n+\n+    @JsonPropertyOrder({\"key\",\"value\"})\n+    public static class DecimalEntry {\n+    public DecimalEntry(){}\n+        public String getKey(){ return \"num\"; }\n+         \n+        @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.EXTERNAL_PROPERTY)\n+        public DecimalValue getValue(){\n+            return new DecimalValue();\n+        }\n+    }\n+\n+    public static class DecimalMetadata {\n+        @JsonProperty(\"metadata\")\n+        public List<DecimalEntry> getMetadata() {\n+            return new ArrayList<DecimalEntry>() { {add(new DecimalEntry());} };\n+        }\n+    }\n+\n+    // The following succeeds. It's included for comparison\n+    @JsonTypeName(value = \"doubleValue\")\n+    public static class DoubleValue {\n+        private Double value;\n+        public DoubleValue(){ this.value = 1234.4321; }\n+         \n+        @JsonValue\n+        public Double getValue(){ return value; }\n+    }\n+\n+    @JsonPropertyOrder({\"key\",\"value\"})\n+    public static class DoubleEntry {\n+        public DoubleEntry(){}\n+        public String getKey(){ return \"num\"; }\n+     \n+        @JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.EXTERNAL_PROPERTY)\n+        public DoubleValue getValue(){ return new DoubleValue(); }\n+    }\n+\n+    public static class DoubleMetadata {\n+        @JsonProperty(\"metadata\")\n+        public List<DoubleEntry> getMetadata() {\n+            return new ArrayList<DoubleEntry>() { {add(new DoubleEntry());} };\n+        }\n+    }\n+\n+    final ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    public void testDoubleMetadata() throws IOException {\n+        DoubleMetadata doub = new DoubleMetadata();\n+        String expected = \"{\\\"metadata\\\":[{\\\"key\\\":\\\"num\\\",\\\"value\\\":1234.4321,\\\"@type\\\":\\\"doubleValue\\\"}]}\";\n+        String json = MAPPER.writeValueAsString(doub);\n+        assertEquals(\"Serialized json not equivalent\", expected, json);\n+    }\n+\n+    public void testDecimalMetadata() throws IOException{\n+        DecimalMetadata dec = new DecimalMetadata();\n+        String expected = \"{\\\"metadata\\\":[{\\\"key\\\":\\\"num\\\",\\\"value\\\":1234.4321,\\\"@type\\\":\\\"decimalValue\\\"}]}\";\n+        String json = MAPPER.writeValueAsString(dec);\n+        assertEquals(\"Serialized json not equivalent\", expected, json);\n+    }\n+}", "timestamp": 1401256745, "metainfo": ""}