{"sha": "9c5fec2302237ede0e797c13c0663a6bb52c798c", "log": "Fix #467", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n import com.fasterxml.jackson.core.json.JsonReadContext;\n import com.fasterxml.jackson.core.json.JsonWriteContext;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.*;\n \n /**\n  * Utility class used for efficient storage of {@link JsonToken}\n      */\n \n     @Override\n-    public void writeObject(Object value)\n-        throws IOException, JsonProcessingException\n-    {\n-        // embedded means that no conversions should be done...\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n-    }\n-\n-    @Override\n-    public void writeTree(TreeNode rootNode)\n-        throws IOException, JsonProcessingException\n-    {\n-        /* 31-Dec-2009, tatu: no need to convert trees either is there?\n-         *  (note: may need to re-evaluate at some point)\n-         */\n-        _append(JsonToken.VALUE_EMBEDDED_OBJECT, rootNode);\n+    public void writeObject(Object value) throws IOException\n+    {\n+        if (value == null) {\n+            writeNull();\n+            return;\n+        }\n+        Class<?> raw = value.getClass();\n+        if (raw == byte[].class) {\n+            _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+            return;\n+        } else if (_objectCodec == null) {\n+            /* 28-May-2014, tatu: Tricky choice here; if no codec, should we\n+             *   err out, or just embed? For now, do latter.\n+             */\n+//          throw new JsonMappingException(\"No ObjectCodec configured for TokenBuffer, writeObject() called\");\n+            _append(JsonToken.VALUE_EMBEDDED_OBJECT, value);\n+        } else {\n+            _objectCodec.writeValue(this, value);\n+        }\n+    }\n+\n+    @Override\n+    public void writeTree(TreeNode node) throws IOException\n+    {\n+        if (node == null) {\n+            writeNull();\n+            return;\n+        }\n+\n+        if (_objectCodec == null) {\n+            // as with 'writeObject()', is codec optional?\n+            _append(JsonToken.VALUE_EMBEDDED_OBJECT, node);\n+        } else {\n+            _objectCodec.writeTree(this, node);\n+        }\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n         assertNull(MAPPER.readValue(buf.asParser(), URL.class));\n         buf.close();\n \n-        // then, UUID itself come as is:\n+        // then, URLitself come as is:\n         buf = new TokenBuffer(null, false);\n         buf.writeObject(value);\n         assertSame(value, MAPPER.readValue(buf.asParser(), URL.class));\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n     @JsonDeserialize(using = LeafDeserializer.class)\n     public static class LeafMixIn\n     {\n+    }\n+\n+    // for [Issue#467]\n+    @JsonSerialize(using=Issue467Serializer.class)\n+    static class Issue467Bean  {\n+        public int i;\n+\n+        public Issue467Bean(int i0) { i = i0; }\n+        public Issue467Bean() { this(0); }\n+    }\n+\n+    @JsonSerialize(using=Issue467TreeSerializer.class)\n+    static class Issue467Tree  {\n+    }\n+    \n+    static class Issue467Serializer extends JsonSerializer<Issue467Bean> {\n+        @Override\n+        public void serialize(Issue467Bean value, JsonGenerator jgen,\n+                SerializerProvider provider) throws IOException {\n+            jgen.writeObject(new Issue467TmpBean(value.i));\n+        }\n+    }    \n+\n+    static class Issue467TreeSerializer extends JsonSerializer<Issue467Tree> {\n+        @Override\n+        public void serialize(Issue467Tree value, JsonGenerator jgen,\n+                SerializerProvider provider) throws IOException {\n+            jgen.writeTree(BooleanNode.TRUE);\n+        }\n+    }    \n+    \n+    static class Issue467TmpBean  {\n+        public int x;\n+\n+        public Issue467TmpBean(int i) { x = i; }\n     }\n     \n     /*\n         Assert.assertArrayEquals(inputData, result.data);\n     }\n \n-    public void testEmbeddedObject() throws Exception\n+    public void testEmbeddedByteArray() throws Exception\n     {\n         TokenBuffer buf = new TokenBuffer(MAPPER, false);\n         buf.writeObject(new byte[3]);\n         byte[] data = node.binaryValue();\n         assertNotNull(data);\n         assertEquals(3, data.length);\n-    }\n-    \n-    private final Object MARKER = new Object();\n-\n-    public void testEmbeddedObjectInArray() throws Exception\n-    {\n-        TokenBuffer buf = new TokenBuffer(MAPPER, false);\n-        buf.writeStartArray();\n-        buf.writeObject(MARKER);\n-        buf.writeEndArray();\n-        JsonNode node = MAPPER.readTree(buf.asParser());\n-        buf.close();\n-        assertTrue(node.isArray());\n-        assertEquals(1, node.size());\n-        JsonNode n = node.get(0);\n-        assertTrue(n.isPojo());\n-        assertSame(MARKER, ((POJONode) n).getPojo());\n-    }\n-\n-    public void testEmbeddedObjectInObject() throws Exception\n-    {\n-        TokenBuffer buf = new TokenBuffer(MAPPER, false);\n-        buf.writeStartObject();\n-        buf.writeFieldName(\"pojo\");\n-        buf.writeObject(MARKER);\n-        buf.writeEndObject();\n-        JsonNode node = MAPPER.readTree(buf.asParser());\n-        buf.close();\n-        assertTrue(node.isObject());\n-        assertEquals(1, node.size());\n-        JsonNode n = node.get(\"pojo\");\n-        assertTrue(n.isPojo());\n-        assertSame(MARKER, ((POJONode) n).getPojo());\n     }\n \n     // [Issue#232]\n         }\n     \n         @Override\n-        public void serialize(final JsonGenerator jgen, final SerializerProvider provider)\n-            throws IOException\n+        public void serialize(final JsonGenerator jgen, final SerializerProvider provider) throws IOException\n         {\n             jgen.writeTree(node);\n         }\n         }    \n     }\n \n-    // [Issue#433]\n+    // [#433]\n     public void testBeanToTree() throws Exception\n     {\n         final CustomSerializedPojo pojo = new CustomSerializedPojo();\n         final JsonNode node = MAPPER.valueToTree(pojo);\n         assertEquals(JsonNodeType.OBJECT, node.getNodeType());\n     }\n+\n+    // [#467]\n+    public void testConversionOfPojos() throws Exception\n+    {\n+        final Issue467Bean input = new Issue467Bean(13);\n+        final String EXP = \"{\\\"x\\\":13}\";\n+        \n+        // first, sanity check\n+        String json = MAPPER.writeValueAsString(input);\n+        assertEquals(EXP, json);\n+\n+        // then via conversions: should become JSON Object\n+        JsonNode tree = MAPPER.valueToTree(input);\n+        assertTrue(\"Expected Object, got \"+tree.getNodeType(), tree.isObject());\n+        assertEquals(EXP, MAPPER.writeValueAsString(tree));\n+    }\n+\n+    // [#467]\n+    public void testConversionOfTrees() throws Exception\n+    {\n+        final Issue467Tree input = new Issue467Tree();\n+        final String EXP = \"true\";\n+\n+        // first, sanity check\n+        String json = MAPPER.writeValueAsString(input);\n+        assertEquals(EXP, json);\n+\n+        // then via conversions: should become JSON Object\n+        JsonNode tree = MAPPER.valueToTree(input);\n+        assertTrue(\"Expected Object, got \"+tree.getNodeType(), tree.isBoolean());\n+        assertEquals(EXP, MAPPER.writeValueAsString(tree));\n+    }\n }\n ", "timestamp": 1401339225, "metainfo": ""}