{"sha": "88359d3849d46751da9c4710cb4ad4c570d68582", "log": "Adding first JsonPointer test", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n import com.fasterxml.jackson.core.JsonPointer;\n import com.fasterxml.jackson.core.TreeNode;\n import com.fasterxml.jackson.databind.node.JsonNodeType;\n+import com.fasterxml.jackson.databind.node.MissingNode;\n import com.fasterxml.jackson.databind.util.EmptyIterator;\n \n /**\n         return EmptyIterator.instance();\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public final <T extends TreeNode> T find(JsonPointer ptr)\n+    @Override\n+    public final JsonNode at(JsonPointer ptr)\n     {\n         // Basically: value nodes only match if we have \"empty\" path left\n         if (ptr.matches()) {\n-            return (T) this;\n+            return this;\n         }\n-        return (T) _find(ptr);\n-    }\n-\n-    @Override\n-    public final <T extends TreeNode> T find(String jsonPtrExpr) {\n-        return find(JsonPointer.compile(jsonPtrExpr));\n-    }\n-    \n-    protected abstract JsonNode _find(JsonPointer ptr);\n+        JsonNode n = _at(ptr);\n+System.err.println(\" at, n (from \"+getClass().getName()+\") = \"+n);\n+        if (n == null) {\n+            return MissingNode.getInstance();\n+        }\n+        return n.at(ptr.tail());\n+    }\n+\n+    @Override\n+    public final JsonNode at(String jsonPtrExpr) {\n+        return at(JsonPointer.compile(jsonPtrExpr));\n+    }\n+\n+    protected abstract JsonNode _at(JsonPointer ptr);\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n     public ArrayNode(JsonNodeFactory nc) { super(nc); }\n \n     @Override\n-    protected JsonNode _find(JsonPointer ptr)\n-    {\n+    protected JsonNode _at(JsonPointer ptr) {\n         return get(ptr.getMatchingIndex());\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n     public ObjectNode(JsonNodeFactory nc) { super(nc); }\n \n     @Override\n-    protected JsonNode _find(JsonPointer ptr)\n-    {\n+    protected JsonNode _at(JsonPointer ptr) {\n         return get(ptr.getMatchingProperty());\n     }\n-    \n+\n     /* Question: should this delegate to `JsonNodeFactory`? It does not absolutely\n      * have to, as long as sub-types override the method but...\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ValueNode.java\n     protected ValueNode() { }\n \n     @Override\n-    protected JsonNode _find(JsonPointer ptr)\n-    {\n+    protected JsonNode _at(JsonPointer ptr) {\n+        // will only allow direct matches, but no traversal through\n+        // (base class checks for direct match)\n         return MissingNode.getInstance();\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestFindMethods.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestFindMethods.java\n \n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n public class TestFindMethods\n         final String SAMPLE = \"{ \\\"a\\\" : { \\\"value\\\" : 3 },\"\n             +\"\\\"array\\\" : [ { \\\"b\\\" : 3 }, {\\\"value\\\" : 42}, { \\\"other\\\" : true } ]\"\n             +\"}\";\n-        return new ObjectMapper().readTree(SAMPLE);\n+        return objectMapper().readTree(SAMPLE);\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestJsonPointer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestJsonPointer.java\n package com.fasterxml.jackson.databind.node;\n \n+import com.fasterxml.jackson.core.JsonPointer;\n import com.fasterxml.jackson.databind.*;\n \n public class TestJsonPointer\n     extends BaseMapTest\n {\n-    // !!! TODO\n-    public void testIt() { }\n+    public void testIt() throws Exception\n+    {\n+        final JsonNode SAMPLE_ROOT = objectMapper().readTree(SAMPLE_DOC_JSON_SPEC);\n+        \n+        // first: \"empty\" pointer points to context node:\n+        assertSame(SAMPLE_ROOT, SAMPLE_ROOT.at(JsonPointer.compile(\"\")));\n+\n+        // then simple reference\n+        assertTrue(SAMPLE_ROOT.at(JsonPointer.compile(\"/Image\")).isObject());\n+\n+        JsonNode n = SAMPLE_ROOT.at(JsonPointer.compile(\"/Image/Width\"));\n+        assertTrue(n.isNumber());\n+        assertEquals(SAMPLE_SPEC_VALUE_WIDTH, n.asInt());\n+\n+        assertEquals(SAMPLE_SPEC_VALUE_HEIGHT,\n+                SAMPLE_ROOT.at(JsonPointer.compile(\"/Image/Height\")).asInt());\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.test.BaseTest;\n \n /**\n  * This unit test suite tries to verify that ObjectMapper\n  * can properly parse JSON and bind contents into appropriate\n  * JsonNode instances.\n  */\n-public class TestTreeMapperDeserializer\n-    extends BaseTest\n+public class TestTreeMapperDeserializer extends BaseMapTest\n {\n \tpublic void testSimple()\n         throws Exception\n     {\n         final String JSON = SAMPLE_DOC_JSON_SPEC;\n \n-        ObjectMapper mapper = new ObjectMapper();\n-\n         for (int type = 0; type < 2; ++type) {\n             JsonNode result;\n \n             if (type == 0) {\n-                result = mapper.readTree(new StringReader(JSON));\n+                result = objectMapper().readTree(new StringReader(JSON));\n             } else {\n-                result = mapper.readTree(JSON);\n+                result = objectMapper().readTree(JSON);\n             }\n \n             assertType(result, ObjectNode.class);\n     public void testBoolean()\n         throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        JsonNode result = mapper.readTree(\"true\\n\");\n+        JsonNode result = objectMapper().readTree(\"true\\n\");\n         assertFalse(result.isNull());\n         assertFalse(result.isNumber());\n         assertFalse(result.isTextual());\n     public void testDouble()\n         throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         double value = 3.04;\n-        JsonNode result = mapper.readTree(String.valueOf(value));\n+        JsonNode result = objectMapper().readTree(String.valueOf(value));\n         assertTrue(result.isNumber());\n         assertFalse(result.isNull());\n         assertType(result, DoubleNode.class);\n     public void testInt()\n         throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         int value = -90184;\n-        JsonNode result = mapper.readTree(String.valueOf(value));\n+        JsonNode result = objectMapper().readTree(String.valueOf(value));\n         assertTrue(result.isNumber());\n         assertTrue(result.isIntegralNumber());\n         assertTrue(result.isInt());\n         assertEquals(result, IntNode.valueOf(value));\n     }\n \n-    public void testLong()\n-        throws Exception\n-    {\n-        ObjectMapper mapper = new ObjectMapper();\n+    public void testLong() throws Exception\n+    {\n         // need to use something being 32-bit value space\n         long value = 12345678L << 32;\n-        JsonNode result = mapper.readTree(String.valueOf(value));\n+        JsonNode result = objectMapper().readTree(String.valueOf(value));\n         assertTrue(result.isNumber());\n         assertTrue(result.isIntegralNumber());\n         assertTrue(result.isLong());\n         assertEquals(result, LongNode.valueOf(value));\n     }\n \n-    public void testNull()\n-        throws Exception\n-    {\n-        ObjectMapper mapper = new ObjectMapper();\n-        JsonNode result = mapper.readTree(\"   null \");\n+    public void testNull() throws Exception\n+    {\n+        JsonNode result = objectMapper().readTree(\"   null \");\n         // should not get java null, but NullNode...\n         assertNotNull(result);\n         assertTrue(result.isNull());\n \n     public void testSimpleArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        ArrayNode result = mapper.createArrayNode();\n+        ArrayNode result = objectMapper().createArrayNode();\n \n         assertTrue(result.isArray());\n         assertType(result, ArrayNode.class);\n         assertTrue(result.path(-100).isMissingNode());\n \n         // then construct and compare\n-        ArrayNode array2 = mapper.createArrayNode();\n+        ArrayNode array2 = objectMapper().createArrayNode();\n         array2.addNull();\n         array2.add(false);\n         assertEquals(result, array2);\n             +\"\\\"name\\\": \\\"xyz\\\", \\\"type\\\": 1, \\\"url\\\" : null }\\n  \"\n             ;\n         JsonFactory jf = new JsonFactory();\n-        ObjectMapper mapper = new ObjectMapper();\n         JsonParser jp = jf.createParser(new StringReader(JSON));\n-        JsonNode result = mapper.readTree(jp);\n+        JsonNode result = objectMapper().readTree(jp);\n \n         assertTrue(result.isObject());\n         assertEquals(4, result.size());\n \n-        assertNull(mapper.readTree(jp));\n+        assertNull(objectMapper().readTree(jp));\n         jp.close();\n     }\n \n     {\n         String JSON = \"12  \\\"string\\\" [ 1, 2, 3 ]\";\n         JsonFactory jf = new JsonFactory();\n-        ObjectMapper mapper = new ObjectMapper();\n         JsonParser jp = jf.createParser(new StringReader(JSON));\n+        final ObjectMapper mapper = objectMapper();\n         JsonNode result = mapper.readTree(jp);\n \n         assertTrue(result.isIntegralNumber());\n         throws Exception\n     {\n         String JSON = \"[ { }, [ ] ]\";\n-        ObjectMapper mapper = new ObjectMapper();\n-        JsonNode result = mapper.readTree(new StringReader(JSON));\n+        JsonNode result = objectMapper().readTree(new StringReader(JSON));\n \n         assertTrue(result.isContainerNode());\n         assertTrue(result.isArray());\n \n     public void testArray() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         final String JSON = \"[[[-0.027512,51.503221],[-0.008497,51.503221],[-0.008497,51.509744],[-0.027512,51.509744]]]\";\n \n-        JsonNode n = mapper.readTree(JSON);\n+        JsonNode n = objectMapper().readTree(JSON);\n         assertNotNull(n);\n         assertTrue(n.isArray());\n         ArrayNode an = (ArrayNode) n;", "timestamp": 1378268122, "metainfo": ""}