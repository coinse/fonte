{"sha": "3f2db3343f2b159f7c5de6b7310c70ea15b3384d", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleSerializers.java\n      */\n     \n     @Override\n-    public JsonSerializer<?> findSerializer(SerializationConfig config, JavaType type,\n-             BeanDescription beanDesc, BeanProperty property)\n+    public JsonSerializer<?> findSerializer(SerializationConfig config,\n+            JavaType type, BeanDescription beanDesc)\n     {\n         Class<?> cls = type.getRawClass();\n         ClassKey key = new ClassKey(cls);\n     public JsonSerializer<?> findArraySerializer(SerializationConfig config,\n             ArrayType type, BeanDescription beanDesc, BeanProperty property,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) {\n-        return findSerializer(config, type, beanDesc, property);\n+        return findSerializer(config, type, beanDesc);\n     }\n \n     @Override\n     public JsonSerializer<?> findCollectionSerializer(SerializationConfig config,\n             CollectionType type, BeanDescription beanDesc, BeanProperty property,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) {\n-        return findSerializer(config, type, beanDesc, property);\n+        return findSerializer(config, type, beanDesc);\n     }\n \n     @Override\n     public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config,\n             CollectionLikeType type, BeanDescription beanDesc, BeanProperty property,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) {\n-        return findSerializer(config, type, beanDesc, property);\n+        return findSerializer(config, type, beanDesc);\n     }\n         \n     @Override\n     public JsonSerializer<?> findMapSerializer(SerializationConfig config,\n-            MapType type, BeanDescription beanDesc, BeanProperty property,\n+            MapType type, BeanDescription beanDesc,\n             JsonSerializer<Object> keySerializer,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) {\n-        return findSerializer(config, type, beanDesc, property);\n+        return findSerializer(config, type, beanDesc);\n     }\n \n     @Override\n             MapLikeType type, BeanDescription beanDesc, BeanProperty property,\n             JsonSerializer<Object> keySerializer,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) {\n-        return findSerializer(config, type, beanDesc, property);\n+        return findSerializer(config, type, beanDesc);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         \n         // Only thing we have here are module-provided key serializers:\n         for (Serializers serializers : _factoryConfig.keySerializers()) {\n-            ser = serializers.findSerializer(config, type, beanDesc, property);\n+            ser = serializers.findSerializer(config, type, beanDesc);\n             if (ser != null) {\n                 break;\n             }\n             MapLikeType mlt = (MapLikeType) type;\n             JsonSerializer<Object> keySerializer = _findKeySerializer(prov, beanDesc.getClassInfo(), property);\n             if (mlt.isTrueMapType()) {\n-                return buildMapSerializer(config, (MapType) mlt, beanDesc, property, staticTyping,\n+                return buildMapSerializer(config, (MapType) mlt, beanDesc, staticTyping,\n                         keySerializer, elementTypeSerializer, elementValueSerializer);\n             }\n             return buildMapLikeSerializer(config, mlt, beanDesc, property, staticTyping,\n      * Helper method that handles configuration details when constructing serializers for\n      * {@link java.util.Map} types.\n      */\n-    protected JsonSerializer<?> buildMapSerializer(SerializationConfig config, MapType type,\n-            BeanDescription beanDesc, BeanProperty property,\n-            boolean staticTyping,\n-            JsonSerializer<Object> keySerializer,\n+    protected JsonSerializer<?> buildMapSerializer(SerializationConfig config,\n+            MapType type, BeanDescription beanDesc,\n+            boolean staticTyping, JsonSerializer<Object> keySerializer,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n         throws JsonMappingException\n     {\n         for (Serializers serializers : customSerializers()) {\n-            JsonSerializer<?> ser = serializers.findMapSerializer(config, type, beanDesc, property,\n+            JsonSerializer<?> ser = serializers.findMapSerializer(config, type, beanDesc,\n                     keySerializer, elementTypeSerializer, elementValueSerializer);\n             if (ser != null) {\n                 return ser;\n             }\n         }\n         if (EnumMap.class.isAssignableFrom(type.getRawClass())) {\n-            return buildEnumMapSerializer(config, type, beanDesc, property, staticTyping,\n+            return buildEnumMapSerializer(config, type, beanDesc, staticTyping,\n                     elementTypeSerializer, elementValueSerializer);\n         }\n         return MapSerializer.construct(config.getAnnotationIntrospector().findPropertiesToIgnore(beanDesc.getClassInfo()),\n      * Helper method that handles configuration details when constructing serializers for\n      * {@link java.util.EnumMap} types.\n      */\n-    protected JsonSerializer<?> buildEnumMapSerializer(SerializationConfig config, JavaType type,\n-            BeanDescription beanDesc, BeanProperty property,\n-            boolean staticTyping,\n+    protected JsonSerializer<?> buildEnumMapSerializer(SerializationConfig config,\n+            JavaType type, BeanDescription beanDesc, boolean staticTyping,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) \n         throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n \n         // Modules may provide serializers of all types:\n         for (Serializers serializers : _factoryConfig.serializers()) {\n-            ser = serializers.findSerializer(config, type, beanDesc, property);\n+            ser = serializers.findSerializer(config, type, beanDesc);\n             if (ser != null) {\n                 return (JsonSerializer<Object>) ser;\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n      * @param type Fully resolved type of instances to serialize\n      * @param config Serialization configuration in use\n      * @param beanDesc Additional information about type\n-     * @param property Property that contains values to serialize\n      *    \n      * @return Configured serializer to use for the type; or null if implementation\n      *    does not recognize or support type\n      */\n     public JsonSerializer<?> findSerializer(SerializationConfig config,\n-            JavaType type, BeanDescription beanDesc, BeanProperty property);\n+            JavaType type, BeanDescription beanDesc);\n \n     /**\n      * Method called by serialization framework first time a serializer is needed for\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n     \n     public JsonSerializer<?> findMapSerializer(SerializationConfig config,\n-            MapType type, BeanDescription beanDesc, BeanProperty property,\n+            MapType type, BeanDescription beanDesc,\n             JsonSerializer<Object> keySerializer,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer);\n \n     {\n         @Override\n         public JsonSerializer<?> findSerializer(SerializationConfig config,\n-                JavaType type, BeanDescription beanDesc, BeanProperty property)\n+                JavaType type, BeanDescription beanDesc)\n         {\n             return null;\n         }\n             \n         @Override\n         public JsonSerializer<?> findMapSerializer(SerializationConfig config,\n-                MapType type, BeanDescription beanDesc, BeanProperty property,\n+                MapType type, BeanDescription beanDesc,\n                 JsonSerializer<Object> keySerializer,\n                 TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n         {", "timestamp": 1328072174, "metainfo": ""}