{"sha": "cd5950873668f6805e1aaad7d4753b4a1fcc0fa8", "log": "Improvement wrt #333", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/JsonNodeFactory.java\n     {\n         return bigDecimalExact ? decimalsAsIs : decimalsNormalized;\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Factory methods for literal values\n      * that expresses given 64-bit integer value\n      */\n     @Override\n-    public NumericNode numberNode(long v) { return LongNode.valueOf(v); }\n-\n+    public NumericNode numberNode(long v) {\n+        if (_inIntRange(v)) {\n+            return IntNode.valueOf((int) v);\n+        }\n+        return LongNode.valueOf(v);\n+    }\n+    \n     /**\n      * Alternate factory method that will handle wrapper value, which may be null.\n      * Due to possibility of null, returning type is not guaranteed to be\n      */\n     @Override\n     public ValueNode numberNode(Long value) {\n-        return (value == null) ? nullNode() : LongNode.valueOf(value.longValue());\n+        long l = value.longValue();\n+        if (_inIntRange(l)) {\n+            return IntNode.valueOf((int) l);\n+        }\n+        return (value == null) ? nullNode() : LongNode.valueOf(l);\n     }\n     \n     /**\n      */\n     @Deprecated\n     public POJONode POJONode(Object pojo) { return new POJONode(pojo); }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+    \n+    protected boolean _inIntRange(long l)\n+    {\n+        int i = (int) l;\n+        long l2 = (long) i;\n+        return (l2 == l);\n+    }\n }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n         // also via ObjectWriter:\n         assertEquals(\"{\\\"x\\\":100}\", mapper.writer().writeValueAsString(node));\n     }\n+\n+    // Related to [Issue#333]\n+    public void testCanonicalNumbers() throws Exception\n+    {\n+        JsonNodeFactory f = new JsonNodeFactory();\n+        NumericNode n = f.numberNode(123);\n+        assertTrue(n.isInt());\n+        n = f.numberNode(1L + Integer.MAX_VALUE);\n+        assertFalse(n.isInt());\n+        assertTrue(n.isLong());\n+        // but \"too small\" number will be 'int'...\n+        n = f.numberNode(123L);\n+        assertTrue(n.isInt());\n+        assertFalse(n.isLong());\n+    }\n }", "timestamp": 1382653452, "metainfo": ""}