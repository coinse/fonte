{"sha": "465645e7d7891646c82fdcdf35f8256e1af18e72", "log": "Groundwork for [JACKSON-762], ability to use bean getters for type id", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeSerializer.java\n     {\n         writeTypePrefixForArray(value, jgen);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Type serialization methods with type id override\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method called to write initial part of type information for given\n+     * value, when it will be output as scalar JSON value (not as JSON\n+     * Object or Array),\n+     * using specified custom type id instead of calling {@link TypeIdResolver}.\n+     * This means that the context after call can not be that of JSON Object;\n+     * it may be Array or root context.\n+     * \n+     * @param value Value that will be serialized, for which type information is\n+     *   to be written\n+     * @param jgen Generator to use for writing type information\n+     * @param typeId Exact type id to use\n+     */\n+    public abstract void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen,\n+            String typeId)\n+        throws IOException, JsonProcessingException;\n+    \n+    /**\n+     * Method called to write initial part of type information for given\n+     * value, when it will be output as JSON Object value (not as JSON\n+     * Array or scalar),\n+     * using specified custom type id instead of calling {@link TypeIdResolver}.\n+     * This means that context after call must be JSON Object, meaning that\n+     * caller can then proceed to output field entries.\n+     * \n+     * @param value Value that will be serialized, for which type information is\n+     *   to be written\n+     * @param jgen Generator to use for writing type information\n+     * @param typeId Exact type id to use\n+     */\n+    public abstract void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen,\n+            String typeId)\n+        throws IOException, JsonProcessingException;\n+    \n+    public abstract void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen,\n+            String typeId)\n+        throws IOException, JsonProcessingException;\n+\n+    public abstract void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen,\n+            String typeId)\n+        throws IOException, JsonProcessingException;\n+\n+    public abstract void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen,\n+            String typeId)\n+        throws IOException, JsonProcessingException;\n+\n+    public abstract void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen,\n+            String typeId)\n+        throws IOException, JsonProcessingException;\n+\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeSerializer.java\n     \n     @Override\n     public As getTypeInclusion() { return As.WRAPPER_ARRAY; }\n+    \n+    /*\n+    /**********************************************************\n+    /* Writing prefixes\n+    /**********************************************************\n+     */\n     \n     @Override\n     public void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n         jgen.writeStartArray();\n         jgen.writeString(idFromValueAndType(value, type));\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Writing suffixes\n+    /**********************************************************\n+     */\n     \n     @Override\n     public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n         // just the wrapper array to close\n         jgen.writeEndArray();\n     }\n+    \n+    /*\n+    /**********************************************************\n+    /* Writing with custom type id\n+    /**********************************************************\n+     */\n+\n+    public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException\n+    {\n+        jgen.writeStartArray();\n+        jgen.writeString(typeId);\n+    }\n+    \n+    public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException {\n+        jgen.writeStartArray();\n+        jgen.writeString(typeId);\n+    }\n+    \n+    public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException\n+    {\n+        jgen.writeStartArray();\n+        jgen.writeString(typeId);\n+    }\n+\n+    public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException {\n+        writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n+    }\n+\n+    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException {\n+        writeTypeSuffixForObject(value, jgen); // standard impl works fine\n+    }\n+\n+    public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n+            throws IOException, JsonProcessingException {\n+        writeTypeSuffixForArray(value, jgen); // standard impl works fine\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsExternalTypeSerializer.java\n \n    @Override\n    public As getTypeInclusion() { return As.EXTERNAL_PROPERTY; }\n+\n+   /*\n+   /**********************************************************\n+   /* Writing prefixes\n+   /**********************************************************\n+    */\n    \n    @Override\n    public void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n        _writePrefix(value, jgen, type);\n    }\n \n+   /*\n+   /**********************************************************\n+   /* Writing suffixes\n+   /**********************************************************\n+    */\n+   \n    @Override\n    public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n        throws IOException, JsonProcessingException\n        _writeSuffix(value, jgen);\n    }\n \n+   /*\n+   /**********************************************************\n+   /* Writing with custom type id\n+   /**********************************************************\n+    */\n+\n+   public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n+       throws IOException, JsonProcessingException\n+   {\n+       _writePrefix(value, jgen); // here standard works fine\n+   }\n+   \n+   public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n+       throws IOException, JsonProcessingException {\n+       _writePrefix(value, jgen); // here standard works fine\n+   }\n+   \n+   public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n+       throws IOException, JsonProcessingException\n+   {\n+       _writePrefix(value, jgen); // here standard works fine\n+   }\n+\n+   public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n+       throws IOException, JsonProcessingException {\n+       _writeSuffix(value, jgen);// here standard works fine\n+   }\n+\n+   public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n+       throws IOException, JsonProcessingException {\n+       _writeSuffix(value, jgen);// here standard works fine\n+   }\n+\n+   public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n+           throws IOException, JsonProcessingException {\n+       _writeSuffix(value, jgen);// here standard works fine\n+   }\n+   \n    /*\n    /**********************************************************\n    /* Helper methods\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeSerializer.java\n \n     //public void writeTypeSuffixForArray(Object value, JsonGenerator jgen)\n     //public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen)\n+\n+\n+    /*\n+    /**********************************************************\n+    /* Writing with custom type id\n+    /**********************************************************\n+     */\n+\n+    // Only need to override Object-variants\n+    \n+    public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException {\n+        jgen.writeStartObject();\n+        jgen.writeStringField(_typePropertyName, typeId);\n+    }\n+\n+    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException {\n+        jgen.writeEndObject();\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeSerializer.java\n         // and then JSON Array start caller wants\n         jgen.writeArrayFieldStart(idFromValueAndType(value, type));\n     }\n-    \n+\n     @Override\n     public void writeTypePrefixForScalar(Object value, JsonGenerator jgen)\n         throws IOException, JsonProcessingException\n     {\n         // just need to close the wrapper object\n         jgen.writeEndObject();\n-    }    \n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Writing with custom type id\n+    /**********************************************************\n+     */\n+    \n+    public void writeCustomTypePrefixForObject(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException\n+    {\n+        jgen.writeStartObject();\n+        jgen.writeObjectFieldStart(typeId);\n+    }\n+    \n+    public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException\n+    {\n+        jgen.writeStartObject();\n+        jgen.writeArrayFieldStart(typeId);\n+    }\n+\n+    public void writeCustomTypePrefixForScalar(Object value, JsonGenerator jgen, String typeId)\n+        throws IOException, JsonProcessingException\n+    {\n+        jgen.writeStartObject();\n+        jgen.writeFieldName(typeId);\n+    }\n+\n+    public void writeCustomTypeSuffixForObject(Object value, JsonGenerator jgen, String typeId)\n+            throws IOException, JsonProcessingException {\n+        writeTypeSuffixForObject(value, jgen); // standard impl works fine\n+    }\n+\n+    public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen, String typeId)\n+            throws IOException, JsonProcessingException {\n+        writeTypeSuffixForArray(value, jgen); // standard impl works fine\n+    }\n+\n+    public void writeCustomTypeSuffixForScalar(Object value, JsonGenerator jgen, String typeId)\n+            throws IOException, JsonProcessingException {\n+        writeTypeSuffixForScalar(value, jgen); // standard impl works fine\n+    }\n }", "timestamp": 1328306537, "metainfo": ""}