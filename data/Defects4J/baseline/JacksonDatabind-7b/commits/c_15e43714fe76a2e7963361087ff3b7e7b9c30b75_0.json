{"sha": "15e43714fe76a2e7963361087ff3b7e7b9c30b75", "log": "Tackle parts of #501; add suggested type resolution, indicate specific problem explicitly", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n          */\n         JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, getter);\n         type = modifyTypeByAnnotation(ctxt, getter, type);\n+        // As per [Issue#501], need full resolution:\n+        type = resolveType(ctxt, beanDesc, type, getter);\n         TypeDeserializer typeDeser = type.getTypeHandler();\n         SettableBeanProperty prop = new SetterlessProperty(propDef, type, typeDeser,\n                 beanDesc.getClassAnnotations(), getter);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n         throws IOException, JsonProcessingException\n     {\n         JsonToken t = jp.getCurrentToken();\n-        \n+\n         if (t == JsonToken.VALUE_NULL) {\n             return (_nullProvider == null) ? null : _nullProvider.nullValue(ctxt);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java\n \n     @Override\n     public Object deserializeSetAndReturn(JsonParser jp,\n-    \t\tDeserializationContext ctxt, Object instance)\n-        throws IOException, JsonProcessingException\n+    \t\tDeserializationContext ctxt, Object instance) throws IOException\n     {\n-    \treturn setAndReturn(instance, deserialize(jp, ctxt));\n+        return setAndReturn(instance, deserialize(jp, ctxt));\n     }\n     \n     @Override\n-    public final void set(Object instance, Object value)\n-        throws IOException\n+    public final void set(Object instance, Object value) throws IOException\n     {\n         try {\n             _setter.invoke(instance, value);\n     }\n \n     @Override\n-    public Object setAndReturn(Object instance, Object value)\n-\t\tthrows IOException\n+    public Object setAndReturn(Object instance, Object value) throws IOException\n     {\n         try {\n             Object result = _setter.invoke(instance, value);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java\n     protected final Method _getter;\n \n     public SetterlessProperty(BeanPropertyDefinition propDef, JavaType type,\n-            TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method)\n-        {\n+            TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method) {\n         super(propDef, type, typeDeser, contextAnnotations);\n+System.err.println(\"Value type deser for SETTERLESS -> \"+typeDeser);        \n         _annotated = method;\n         _getter = method.getAnnotated();\n     }\n             return;\n         }\n \n+        // For [#501] fix we need to implement this but:\n+        if (_valueTypeDeserializer != null) {\n+            throw new JsonMappingException(\"Problem deserializing 'setterless' property: no way to handle typed deser with setterless yet\");\n+//            return _valueDeserializer.deserializeWithType(jp, ctxt, _valueTypeDeserializer);\n+        }\n+        \n         // Ok: then, need to fetch Collection/Map to modify:\n         Object toModify;\n         try {\n \n     @Override\n     public Object deserializeSetAndReturn(JsonParser jp,\n-    \t\tDeserializationContext ctxt, Object instance)\n-        throws IOException, JsonProcessingException\n+    \t\tDeserializationContext ctxt, Object instance) throws IOException, JsonProcessingException\n     {\n-    \tdeserializeAndSet(jp, ctxt, instance);\n-    \treturn instance;\n+        deserializeAndSet(jp, ctxt, instance);\n+        return instance;\n     }\n     \n     @Override\n-    public final void set(Object instance, Object value)\n-        throws IOException\n-    {\n+    public final void set(Object instance, Object value) throws IOException {\n         throw new UnsupportedOperationException(\"Should never call 'set' on setterless property\");\n     }\n \n     @Override\n-    public Object setAndReturn(Object instance, Object value)\n-            throws IOException\n+    public Object setAndReturn(Object instance, Object value) throws IOException\n     {\n-    \tset(instance, value);\n-    \treturn null;\n+        set(instance, value);\n+        return null;\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSetterlessProperties.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSetterlessProperties.java\n         }\n     }\n \n-    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)\n     static class Poly {\n         public int id;\n \n             l.add(value);\n         }\n         \n+        @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n         public List<Poly> getList(){\n             return l;\n         }\n-        public Map<String,Poly> getMap(){\n+\n+        @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n+        public Map<String,Poly> getMap() {\n             return m;\n         }\n+\n+//        public void setMap(Map<String,Poly> m) { this.m = m; }\n+//        public void setList(List<Poly> l) { this.l = l; }\n     }\n     \n     /*\n         assertEquals(3, value.values.size());\n     }\n \n+    // For [Issue#501]\n     public void testSetterlessWithPolymorphic() throws Exception\n     {\n         Issue501Bean input = new Issue501Bean(\"a\", new Poly(13));\n         ObjectMapper m = new ObjectMapper();\n         assertTrue(m.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS));\n-        \n-        String json = m.writeValueAsString(input);\n-        \n+        m.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n+\n+        String json = m.writerWithDefaultPrettyPrinter().writeValueAsString(input);\n+\n         Issue501Bean output = m.readValue(json, Issue501Bean.class);\n         assertNotNull(output);\n ", "timestamp": 1405122117, "metainfo": ""}