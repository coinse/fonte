{"sha": "fefea2982da9703a5aa5b55f7353736a0196937a", "log": "Compiler warning cleanup; continuing with adding more deserializer modifier options", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n             elemTypeDeser = findTypeDeserializer(config, elemType);\n         }\n         // 23-Nov-2010, tatu: Custom array deserializer?\n-        JsonDeserializer<?> custom = _findCustomArrayDeserializer(type,\n+        JsonDeserializer<?>  deser = _findCustomArrayDeserializer(type,\n                 config, beanDesc, elemTypeDeser, contentDeser);\n-        if (custom != null) {\n-            return custom;\n-        }\n-\n-        JsonDeserializer<?>  deser = null;       \n-        if (contentDeser == null) {\n-            // Maybe special array type, such as \"primitive\" arrays (int[] etc)\n-            deser = _arrayDeserializers.get(elemType);\n+        if (deser == null) {\n+            if (contentDeser == null) {\n+                // Maybe special array type, such as \"primitive\" arrays (int[] etc)\n+                deser = _arrayDeserializers.get(elemType);\n+                if (deser == null) {\n+                    if (elemType.isPrimitive()) { // sanity check\n+                        throw new IllegalArgumentException(\"Internal error: primitive type (\"+type+\") passed, no array deserializer found\");\n+                    }\n+                }\n+            }\n             if (deser == null) {\n-                if (elemType.isPrimitive()) { // sanity check\n-                    throw new IllegalArgumentException(\"Internal error: primitive type (\"+type+\") passed, no array deserializer found\");\n-                }\n-            }\n-        }\n-        if (deser == null) {\n-            deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n-        }\n-        // and then new with 2.2: ability to post-process it too\n+                deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);\n+            }\n+        }\n+        // and then new with 2.2: ability to post-process it too (Issue#120)\n         if (_factoryConfig.hasDeserializerModifiers()) {\n             for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n                 deser = mod.modifyArrayDeserializer(config, type, beanDesc, deser);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedObjectIdGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/PropertyBasedObjectIdGenerator.java\n public class PropertyBasedObjectIdGenerator\n \textends ObjectIdGenerators.PropertyGenerator\n {\n+    private static final long serialVersionUID = 1L;\n+\n     public PropertyBasedObjectIdGenerator(Class<?> scope) {\n         super(scope);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n     extends ContainerDeserializerBase<Object[]>\n     implements ContextualDeserializer\n {\n+    private static final long serialVersionUID = 1L;\n+\n     // // Configuration\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n public class UntypedObjectDeserializer\n     extends StdDeserializer<Object>\n {\n+    private static final long serialVersionUID = 1L;\n+\n     private final static Object[] NO_OBJECTS = new Object[0];\n     \n     public UntypedObjectDeserializer() { super(Object.class); }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n      * \n      * @since 2.1\n      */\n+    @SuppressWarnings(\"deprecation\")\n     public void depositSchemaProperty(ObjectNode propertiesNode, SerializerProvider provider)\n         throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertyBasedObjectIdGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/PropertyBasedObjectIdGenerator.java\n public class PropertyBasedObjectIdGenerator\n     extends ObjectIdGenerators.PropertyGenerator\n {\n+    private static final long serialVersionUID = 1L;\n+\n     protected final BeanPropertyWriter _property;\n     \n     public PropertyBasedObjectIdGenerator(ObjectIdInfo oid, BeanPropertyWriter prop)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n     protected abstract void serializeContents(T value, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonGenerationException;\n \n+    @SuppressWarnings(\"deprecation\")\n     @Override\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n         }\n     }\n     \n+    @SuppressWarnings(\"deprecation\")\n     @Override\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n         }\n     }\n     \n+    @SuppressWarnings(\"deprecation\")\n     @Override\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         throws JsonMappingException\n--- a/src/test/java/com/fasterxml/jackson/databind/access/TestSerAnyGetter.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/access/TestSerAnyGetter.java\n \n     private static class PrivateThing\n     {\n-        @SuppressWarnings(\"unused\")\n         @JsonAnyGetter\n         public Map<?,?> getProperties()\n         {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestFieldDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestFieldDeserialization.java\n         @JsonProperty(\"foo\")\n         public int _z;\n \n-        @SuppressWarnings(\"unused\")\n         @JsonDeserialize\n         private int foo;\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/ext/TestCoreXMLTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ext/TestCoreXMLTypes.java\n      */\n     \n     // First things first: must be able to load the deserializers...\n-    @SuppressWarnings(\"unused\")\n     public void testDeserializerLoading()\n     {\n         new CoreXMLDeserializers.DurationDeserializer();\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotations.java\n      */\n     static class BaseBean {\n         public int getX() { return 1; }\n-        @SuppressWarnings(\"unused\")\n         @JsonProperty(\"y\")\n         private int getY() { return 2; }\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java\n \n     static class AnnoBean {\n         public int getX() { return 1; }\n-        @SuppressWarnings(\"unused\") @JsonProperty(\"y\")\n+        @JsonProperty(\"y\")\n         private int getY() { return 2; }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFieldSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFieldSerialization.java\n         @JsonProperty(\"foo\")\n         public int _z;\n \n-        @SuppressWarnings(\"unused\")\n         @JsonSerialize\n-            private int foo;\n+        private int foo;\n     }\n \n     public static class DupFieldBean2\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java\n     static class ValueLinkedList extends LinkedList<ValueInterface> { }\n     \n     // Classes for [JACKSON-294]\n-    @SuppressWarnings(\"unused\")\n     static class Foo294\n     {\n         @JsonProperty private String id;\n--- a/src/test/java/com/fasterxml/jackson/databind/views/TestViewSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/views/TestViewSerialization.java\n      * a property\n      */\n     static class ImplicitBean {\n-    \t@SuppressWarnings(\"unused\")\n-    \t@JsonView(ViewA.class)\n-    \tprivate int a = 1;\n+        @JsonView(ViewA.class)\n+        private int a = 1;\n     }\n \n     static class VisibilityBean {\n     public static class WebView { }\n     public static class OtherView { }\n     public static class Foo {\n-      @JsonView(WebView.class)\n-      public int getFoo() { return 3; }\n+        @JsonView(WebView.class)\n+        public int getFoo() { return 3; }\n     }\n     \n     /*", "timestamp": 1353910153, "metainfo": ""}