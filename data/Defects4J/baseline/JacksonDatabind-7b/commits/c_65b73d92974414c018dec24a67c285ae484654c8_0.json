{"sha": "65b73d92974414c018dec24a67c285ae484654c8", "log": "Starting to clean up SerializerFactory, to remove/reduce passing of BeanProperty, which in general is not available at time of call.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n     /* Factory methods, container types:\n     /**********************************************************\n      */\n-    \n+\n+    /**\n+     * Deprecated method; final to help identify problems with sub-classes,\n+     * as this method will NOT be called any more in 2.1\n+     * \n+     * @deprecated Since 2.1 (removed 'property' argument)\n+     */\n+    @Deprecated\n+    protected final JsonSerializer<?> buildContainerSerializer(SerializerProvider prov,\n+            JavaType type, BeanDescription beanDesc, BeanProperty Xproperty, boolean staticTyping)\n+        throws JsonMappingException\n+    {\n+        return  buildContainerSerializer(prov, type, beanDesc, staticTyping);\n+    }\n+    \n+    /**\n+     * @since 2.1\n+     */\n     protected JsonSerializer<?> buildContainerSerializer(SerializerProvider prov,\n-            JavaType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping)\n+            JavaType type, BeanDescription beanDesc, boolean staticTyping)\n         throws JsonMappingException\n     {\n         final SerializationConfig config = prov.getConfig();\n                 JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n \n                 if (format == null || format.getShape() != JsonFormat.Shape.OBJECT) {\n-                    return buildCollectionSerializer(config, trueCT, beanDesc, property, staticTyping,\n+                    return buildCollectionSerializer(config, trueCT, beanDesc, staticTyping,\n                             elementTypeSerializer, elementValueSerializer);\n                 }\n             } else {\n     }\n \n     /**\n-     * Helper method that handles configuration details when constructing serializers for\n-     * {@link java.util.List} types that support efficient by-index access\n-     */\n-    protected JsonSerializer<?> buildCollectionSerializer(SerializationConfig config,\n+     * Deprecated method; final to help identify problems with sub-classes,\n+     * as this method will NOT be called any more in 2.1\n+     * \n+     * @deprecated Since 2.1\n+     */\n+    @Deprecated\n+    protected final JsonSerializer<?> buildCollectionSerializer(SerializationConfig config,\n             CollectionType type,\n             BeanDescription beanDesc, BeanProperty property,\n             boolean staticTyping,\n+            TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) \n+        throws JsonMappingException\n+    {\n+        return buildCollectionSerializer(config, type, beanDesc,\n+                staticTyping, elementTypeSerializer, elementValueSerializer);\n+    }\n+    \n+    /**\n+     * Helper method that handles configuration details when constructing serializers for\n+     * {@link java.util.List} types that support efficient by-index access\n+     * \n+     * @since 2.1\n+     */\n+    protected JsonSerializer<?> buildCollectionSerializer(SerializationConfig config,\n+            CollectionType type, BeanDescription beanDesc, boolean staticTyping,\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer) \n         throws JsonMappingException\n     {\n                 }\n             }\n             return StdContainerSerializers.indexedListSerializer(type.getContentType(), staticTyping,\n-                    elementTypeSerializer, property, elementValueSerializer);\n+                    elementTypeSerializer, elementValueSerializer);\n         }\n         if (elementRaw == String.class) {\n             // [JACKSON-829] Must NOT use if we have custom serializer\n             }\n         }\n         return StdContainerSerializers.collectionSerializer(type.getContentType(), staticTyping,\n-                elementTypeSerializer, property, elementValueSerializer);\n+                elementTypeSerializer, elementValueSerializer);\n     }\n     \n     protected boolean isIndexedList(Class<?> cls)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n                 */\n             }\n             // 03-Aug-2012, tatu: As per [Issue#40], may require POJO serializer...\n-            ser =  buildContainerSerializer(prov, type, beanDesc, property, staticTyping);\n+            ser =  buildContainerSerializer(prov, type, beanDesc, staticTyping);\n             if (ser != null) {\n                 return (JsonSerializer<Object>) ser;\n             }\n                  * known \"primary JDK type\", perhaps it's a bean? We can still\n                  * get a null, if we can't find a single suitable bean property.\n                  */\n-                ser = findBeanSerializer(prov, type, beanDesc, property);\n+                ser = findBeanSerializer(prov, type, beanDesc);\n                 /* Finally: maybe we can still deal with it as an\n                  * implementation of some basic JDK interface?\n                  */\n      */\n \n     /**\n+     * Deprecated method; final to help identify problems with sub-classes,\n+     * as this method will NOT be called any more in 2.1\n+     * \n+     * @deprecated Since 2.1 (use variant without 'property' argument).\n+     */\n+    @Deprecated\n+    public final JsonSerializer<Object> findBeanSerializer(SerializerProvider prov,\n+            JavaType type, BeanDescription beanDesc, BeanProperty property)\n+        throws JsonMappingException {\n+        return findBeanSerializer(prov, type, beanDesc);\n+    }\n+    \n+    /**\n      * Method that will try to construct a {@link BeanSerializer} for\n      * given class. Returns null if no properties are found.\n      */\n     @SuppressWarnings(\"unchecked\")\n     public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov,\n-            JavaType type, BeanDescription beanDesc, BeanProperty property)\n+            JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         // First things first: we know some types are not beans...\n                 return null;\n             }\n         }\n-        JsonSerializer<Object> serializer = constructBeanSerializer(prov, beanDesc, property);\n+        JsonSerializer<Object> serializer = constructBeanSerializer(prov, beanDesc);\n         // [JACKSON-440] Need to allow overriding actual serializer, as well...\n         if (_factoryConfig.hasSerializerModifiers()) {\n             for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n         }\n         return serializer;\n     }\n-\n+    \n     /**\n      * Method called to create a type information serializer for values of given\n      * non-container property\n      * @return Type serializer to use for property values, if one is needed; null if not.\n      */\n     public TypeSerializer findPropertyTypeSerializer(JavaType baseType,\n-            SerializationConfig config, AnnotatedMember accessor, BeanProperty property)\n+            SerializationConfig config, AnnotatedMember accessor) // BeanProperty property)\n         throws JsonMappingException\n     {\n         AnnotationIntrospector ai = config.getAnnotationIntrospector();\n      */\n \n     /**\n+     * Deprecated method; final to help identify problems with sub-classes,\n+     * as this method will NOT be called any more in 2.1\n+     * \n+     * @deprecated Since 2.1, do not pass 'property' argument\n+     */\n+    @Deprecated\n+    protected final JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov,\n+            BeanDescription beanDesc, BeanProperty property)\n+        throws JsonMappingException\n+    {\n+        return constructBeanSerializer(prov, beanDesc);\n+    }\n+    \n+    /**\n      * Method called to construct serializer for serializing specified bean type.\n+     * \n+     * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n     protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov,\n-            BeanDescription beanDesc, BeanProperty property)\n+            BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         // 13-Oct-2010, tatu: quick sanity check: never try to create bean serializer for plain Object\n         }\n \n         // and if not JAXB collection/array with annotations, maybe regular type info?\n-        TypeSerializer typeSer = findPropertyTypeSerializer(type, prov.getConfig(), accessor, property);\n+        TypeSerializer typeSer = findPropertyTypeSerializer(type, prov.getConfig(), accessor);\n         BeanPropertyWriter pbw = pb.buildWriter(propDef, type, annotatedSerializer,\n                         typeSer, contentTypeSer, accessor, staticTyping);\n         return pbw;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n         return createSchemaNode(\"string\", true);\n     }\n     \n-\t@Override\n-\tprotected void acceptContentVisitor(JsonArrayFormatVisitor visitor) {\n-\t\tvisitor.itemsFormat(JsonFormatTypes.STRING);\n-\t\t\n-\t}\n+    @Override\n+    protected void acceptContentVisitor(JsonArrayFormatVisitor visitor) {\n+        visitor.itemsFormat(JsonFormatTypes.STRING);\n+    }\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdContainerSerializers.java\n {\n     protected StdContainerSerializers() { }\n     \n+    /**\n+     * @since 2.1\n+     */\n     public static ContainerSerializer<?> indexedListSerializer(JavaType elemType,\n-            boolean staticTyping, TypeSerializer vts, BeanProperty property,\n-            JsonSerializer<Object> valueSerializer)\n+            boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)\n     {\n         return new IndexedListSerializer(elemType, staticTyping, vts, null, valueSerializer);\n     }\n-\n+    \n+    /**\n+     * @since 2.1\n+     */\n     public static ContainerSerializer<?> collectionSerializer(JavaType elemType,\n-            boolean staticTyping, TypeSerializer vts, BeanProperty property,\n-            JsonSerializer<Object> valueSerializer)\n+            boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> valueSerializer)\n     {\n         return new CollectionSerializer(elemType, staticTyping, vts, null, valueSerializer);\n     }\n     {\n         return new EnumSetSerializer(enumType, null);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Deprecated methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * @deprecated Since 2.1; use variant that does not take 'property' argument\n+     */\n+    @Deprecated\n+    public static ContainerSerializer<?> indexedListSerializer(JavaType elemType,\n+            boolean staticTyping, TypeSerializer vts, BeanProperty property,\n+            JsonSerializer<Object> valueSerializer)\n+    {\n+        return indexedListSerializer(elemType, staticTyping, vts, valueSerializer);\n+    }\n+\n+    /**\n+     * @deprecated Since 2.1; use variant that does not take 'property' argument\n+     */\n+    @Deprecated\n+    public static ContainerSerializer<?> collectionSerializer(JavaType elemType,\n+            boolean staticTyping, TypeSerializer vts, BeanProperty property,\n+            JsonSerializer<Object> valueSerializer)\n+    {\n+        return collectionSerializer(elemType, staticTyping, vts, valueSerializer);\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n \n         @Override\n         protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov,\n-                BeanDescription beanDesc,\n-                BeanProperty property)\n+                BeanDescription beanDesc)\n             throws JsonMappingException\n         {                \n-            return new CustomJsonSerializer(super.constructBeanSerializer(prov, beanDesc, property) );\n+            return new CustomJsonSerializer(super.constructBeanSerializer(prov, beanDesc) );\n         }\n     }\n ", "timestamp": 1349031857, "metainfo": ""}