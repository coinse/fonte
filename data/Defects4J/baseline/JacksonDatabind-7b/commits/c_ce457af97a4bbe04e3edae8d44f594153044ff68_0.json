{"sha": "ce457af97a4bbe04e3edae8d44f594153044ff68", "log": "Fixed #358", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n \n     @Override\n     public boolean hasSingleElement(Iterable<?> value) {\n-        // no really good way to determine (without consuming iterator), so:\n+        // we can do it actually (fixed in 2.3.1)\n+        if (value != null) {\n+            Iterator<?> it = value.iterator();\n+            if (it.hasNext()) {\n+                it.next();\n+                if (!it.hasNext()) {\n+                    return true;\n+                }\n+            }\n+        }\n         return false;\n     }\n     \n                 Object elem = it.next();\n                 if (elem == null) {\n                     provider.defaultSerializeNull(jgen);\n-                } else {\n+                    continue;\n+                }\n+                JsonSerializer<Object> currSerializer = _elementSerializer;\n+                if (currSerializer == null) {\n                     // Minor optimization to avoid most lookups:\n                     Class<?> cc = elem.getClass();\n-                    JsonSerializer<Object> currSerializer;\n                     if (cc == prevClass) {\n                         currSerializer = prevSerializer;\n                     } else {\n                         prevSerializer = currSerializer;\n                         prevClass = cc;\n                     }\n-                    if (typeSer == null) {\n-                        currSerializer.serialize(elem, jgen, provider);\n-                    } else {\n-                        currSerializer.serializeWithType(elem, jgen, provider, typeSer);\n-                    }\n+                }\n+                if (typeSer == null) {\n+                    currSerializer.serialize(elem, jgen, provider);\n+                } else {\n+                    currSerializer.serializeWithType(elem, jgen, provider, typeSer);\n                 }\n             } while (it.hasNext());\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n \n         public int getX() { return 13; }\n     }\n-    \n+\n+    // [Issue#358]\n+    static class A {\n+        public String unexpected = \"Bye.\";\n+    }\n+\n+    static class B {\n+        @JsonSerialize(as = Iterable.class, contentUsing = ASerializer.class)\n+        public List<A> list = Arrays.asList(new A());\n+    }\n+    static class ASerializer extends JsonSerializer<A> {\n+        @Override\n+        public void serialize(A a, JsonGenerator jsonGenerator, SerializerProvider provider) throws IOException {\n+            jsonGenerator.writeStartArray();\n+            jsonGenerator.writeString(\"Hello world.\");\n+            jsonGenerator.writeEndArray();\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Test methods\n         assertEquals(\"[1,2,3]\",\n                 MAPPER.writeValueAsString(new IntIterable()));\n     }\n+    \n+    // [Issue#358]\n+    public void testIterable358() throws Exception {\n+        String json = MAPPER.writeValueAsString(new B());\n+        assertEquals(\"{\\\"list\\\":[[\\\"Hello world.\\\"]]}\", json);\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestIterable358.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+public class TestIterable358 extends BaseMapTest\n+{\n+    // [Issue#358]\n+    static class A {\n+        public String unexpected = \"Bye.\";\n+    }\n+\n+    static class B {\n+        @JsonSerialize(as = Iterable.class, contentUsing = ASerializer.class)\n+        public List<A> list = Arrays.asList(new A());\n+    }\n+    static class ASerializer extends JsonSerializer<A> {\n+        @Override\n+        public void serialize(A a, JsonGenerator jsonGenerator, SerializerProvider provider) throws IOException {\n+            jsonGenerator.writeStartArray();\n+            jsonGenerator.writeString(\"Hello world.\");\n+            jsonGenerator.writeEndArray();\n+        }\n+    }\n+\n+    final ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    public void testIterable358() throws Exception {\n+        String json = MAPPER.writeValueAsString(new B());\n+        assertEquals(\"{\\\"list\\\":[[\\\"Hello world.\\\"]]}\", json);\n+    }\n+\n+}", "timestamp": 1386138440, "metainfo": ""}