{"sha": "8216571353d5ada325eae22c4ebadfd5d4bfffb1", "log": "minor straightening of enum deserializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n     public boolean isCachable() { return true; }\n     \n     @Override\n-    public Enum<?> deserialize(JsonParser jp, DeserializationContext ctxt)\n-        throws IOException, JsonProcessingException\n+    public Enum<?> deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n         JsonToken curr = jp.getCurrentToken();\n         \n             String name = jp.getText();\n             Enum<?> result = _resolver.findEnum(name);\n             if (result == null) {\n-                name = name.trim();\n-                if (name.length() == 0) {\n-                    if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n-                        return null;\n-                    }\n-                } else {\n-                    // [#149]: Allow use of 'String' indexes as well\n-                    char c = name.charAt(0);\n-                    if (c >= '0' && c <= '9') {\n-                        try {\n-                            int ix = Integer.parseInt(name);\n-                            result = _resolver.getEnum(ix);\n-                            if (result != null) {\n-                                return result;\n-                            }\n-                        } catch (NumberFormatException e) {\n-                            // fine, ignore, was not an integer\n-                        }\n-                    }\n-                }\n-                if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n-                    throw ctxt.weirdStringException(name, _resolver.getEnumClass(),\n-                            \"value not one of declared Enum instance names: \"+_resolver.getEnums());\n-                }\n+                return _deserializeAltString(jp, ctxt, name);\n             }\n             return result;\n         }\n         // But let's consider int acceptable as well (if within ordinal range)\n         if (curr == JsonToken.VALUE_NUMBER_INT) {\n-            /* ... unless told not to do that. :-)\n-             * (as per [JACKSON-412]\n-             */\n+            // ... unless told not to do that. :-) (as per [JACKSON-412]\n             if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {\n                 throw ctxt.mappingException(\"Not allowed to deserialize Enum value out of JSON number (disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow)\");\n             }\n             }\n             return result;\n         }\n-        \n+        return _deserializeOther(jp, ctxt);\n+    }\n+\n+    private final Enum<?> _deserializeAltString(JsonParser jp, DeserializationContext ctxt,\n+            String name) throws IOException\n+    {\n+        name = name.trim();\n+        if (name.length() == 0) {\n+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n+                return null;\n+            }\n+        } else {\n+            // [#149]: Allow use of 'String' indexes as well\n+            char c = name.charAt(0);\n+            if (c >= '0' && c <= '9') {\n+                try {\n+                    int ix = Integer.parseInt(name);\n+                    Enum<?> result = _resolver.getEnum(ix);\n+                    if (result != null) {\n+                        return result;\n+                    }\n+                } catch (NumberFormatException e) {\n+                    // fine, ignore, was not an integer\n+                }\n+            }\n+        }\n+        if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {\n+            throw ctxt.weirdStringException(name, _resolver.getEnumClass(),\n+                    \"value not one of declared Enum instance names: \"+_resolver.getEnums());\n+        }\n+        return null;\n+    }\n+\n+    private final Enum<?> _deserializeOther(JsonParser jp, DeserializationContext ctxt) throws IOException\n+    {\n+        JsonToken curr = jp.getCurrentToken();\n         // Issue#381\n         if (curr == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n             jp.nextToken();\n             }\n             return parsed;\n         }\n-\n         throw ctxt.mappingException(_resolver.getEnumClass());\n     }\n-\n+    \n     /*\n     /**********************************************************\n-    /* Default JsonDeserializer implementation\n+    /* Additional helper classes\n     /**********************************************************\n      */\n ", "timestamp": 1399784805, "metainfo": ""}