{"sha": "de0c33f113d1ba64cec81ba118dc1c84d3cd70a5", "log": "Renaming of AnnotationIntrospector methods to be (more) consistent", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n      * \"use standard bean name detection if applicable;\n      * method name if not\".\n      */\n-    public abstract String findGettablePropertyName(AnnotatedMethod am);\n+    public abstract String findSerializationName(AnnotatedMethod am);\n \n     /**\n      * Method for checking whether given method has an annotation\n      * name, except for empty String (\"\") which is taken to mean\n      * \"use the field name as is\".\n      */\n-    public abstract String findSerializablePropertyName(AnnotatedField af);\n+    public abstract String findSerializationName(AnnotatedField af);\n \n     /*\n     /**********************************************************\n      * \"use standard bean name detection if applicable;\n      * method name if not\".\n      */\n-    public abstract String findSettablePropertyName(AnnotatedMethod am);\n+    public abstract String findDeserializationName(AnnotatedMethod am);\n \n     /**\n      * Method for checking whether given method has an annotation\n      * name, except for empty String (\"\") which is taken to mean\n      * \"use the field name as is\".\n      */\n-    public abstract String findDeserializablePropertyName(AnnotatedField af);\n+    public abstract String findDeserializationName(AnnotatedField af);\n \n     /*\n     /**********************************************************\n      * No actual parameter object can be passed since JDK offers no\n      * representation; just annotations.\n      */\n-    public abstract String findPropertyNameForParam(AnnotatedParameter param);\n+    public abstract String findDeserializationName(AnnotatedParameter param);\n \n     /*\n     /**********************************************************\n         // // // Serialization: method annotations\n         \n         @Override\n-        public String findGettablePropertyName(AnnotatedMethod am)\n-        {\n-            String result = _primary.findGettablePropertyName(am);\n-            if (result == null) {\n-                result = _secondary.findGettablePropertyName(am);\n+        public String findSerializationName(AnnotatedMethod am)\n+        {\n+            String result = _primary.findSerializationName(am);\n+            if (result == null) {\n+                result = _secondary.findSerializationName(am);\n             } else if (result.length() == 0) {\n                 /* Empty String is a default; can be overridden by\n                  * more explicit answer from secondary entry\n                  */\n-                String str2 = _secondary.findGettablePropertyName(am);\n+                String str2 = _secondary.findSerializationName(am);\n                 if (str2 != null) {\n                     result = str2;\n                 }\n         // // // Serialization: field annotations\n \n         @Override\n-        public String findSerializablePropertyName(AnnotatedField af)\n-        {\n-            String result = _primary.findSerializablePropertyName(af);\n-            if (result == null) {\n-                result = _secondary.findSerializablePropertyName(af);\n+        public String findSerializationName(AnnotatedField af)\n+        {\n+            String result = _primary.findSerializationName(af);\n+            if (result == null) {\n+                result = _secondary.findSerializationName(af);\n             } else if (result.length() == 0) {\n                 /* Empty String is a default; can be overridden by\n                  * more explicit answer from secondary entry\n                  */\n-                String str2 = _secondary.findSerializablePropertyName(af);\n+                String str2 = _secondary.findSerializationName(af);\n                 if (str2 != null) {\n                     result = str2;\n                 }\n         // // // Deserialization: method annotations\n \n         @Override\n-        public String findSettablePropertyName(AnnotatedMethod am)\n-        {\n-            String result = _primary.findSettablePropertyName(am);\n-            if (result == null) {\n-                result = _secondary.findSettablePropertyName(am);\n+        public String findDeserializationName(AnnotatedMethod am)\n+        {\n+            String result = _primary.findDeserializationName(am);\n+            if (result == null) {\n+                result = _secondary.findDeserializationName(am);\n             } else if (result.length() == 0) {\n                 /* Empty String is a default; can be overridden by\n                  * more explicit answer from secondary entry\n                  */\n-                String str2 = _secondary.findSettablePropertyName(am);\n+                String str2 = _secondary.findDeserializationName(am);\n                 if (str2 != null) {\n                     result = str2;\n                 }\n         // // // Deserialization: field annotations\n \n         @Override\n-        public String findDeserializablePropertyName(AnnotatedField af)\n-        {\n-            String result = _primary.findDeserializablePropertyName(af);\n-            if (result == null) {\n-                result = _secondary.findDeserializablePropertyName(af);\n+        public String findDeserializationName(AnnotatedField af)\n+        {\n+            String result = _primary.findDeserializationName(af);\n+            if (result == null) {\n+                result = _secondary.findDeserializationName(af);\n             } else if (result.length() == 0) {\n                 /* Empty String is a default; can be overridden by\n                  * more explicit answer from secondary entry\n                  */\n-                String str2 = _secondary.findDeserializablePropertyName(af);\n+                String str2 = _secondary.findDeserializationName(af);\n                 if (str2 != null) {\n                     result = str2;\n                 }\n         // // // Deserialization: parameter annotations (for creators)\n \n         @Override\n-        public String findPropertyNameForParam(AnnotatedParameter param)\n-        {\n-            String result = _primary.findPropertyNameForParam(param);\n-            if (result == null) {\n-                result = _secondary.findPropertyNameForParam(param);\n+        public String findDeserializationName(AnnotatedParameter param)\n+        {\n+            String result = _primary.findDeserializationName(param);\n+            if (result == null) {\n+                result = _secondary.findDeserializationName(param);\n             }\n             return result;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n             CreatorProperty[] properties = new CreatorProperty[argCount];\n             for (int i = 0; i < argCount; ++i) {\n                 AnnotatedParameter param = ctor.getParameter(i);\n-                String name = (param == null) ? null : intr.findPropertyNameForParam(param);\n+                String name = (param == null) ? null : intr.findDeserializationName(param);\n                 Object injectId = intr.findInjectableValueId(param);\n                 if (name != null && name.length() > 0) {\n                     ++namedCount;\n     {\n         // note: if we do have parameter name, it'll be \"property constructor\":\n         AnnotatedParameter param = ctor.getParameter(0);\n-        String name = intr.findPropertyNameForParam(param);\n+        String name = intr.findDeserializationName(param);\n         Object injectId = intr.findInjectableValueId(param);\n     \n         if ((injectId != null) || (name != null && name.length() > 0)) { // property-based\n             // some single-arg factory methods (String, number) are auto-detected\n             if (argCount == 1) {\n                 AnnotatedParameter param = factory.getParameter(0);\n-                String name = intr.findPropertyNameForParam(param);\n+                String name = intr.findDeserializationName(param);\n                 Object injectId = intr.findInjectableValueId(param);\n \n                 if ((injectId == null) && (name == null || name.length() == 0)) { // not property based\n             CreatorProperty[] properties = new CreatorProperty[argCount];\n             for (int i = 0; i < argCount; ++i) {\n                 AnnotatedParameter param = factory.getParameter(i);\n-                String name = intr.findPropertyNameForParam(param);\n+                String name = intr.findDeserializationName(param);\n                 Object injectableId = intr.findInjectableValueId(param);\n                 // At this point, name annotation is NOT optional\n                 if ((name == null || name.length() == 0) && (injectableId == null)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java\n     @Override\n     public <A extends Annotation> A getAnnotation(Class<A> acls)\n     {\n-        return _annotations.get(acls);\n+        return (_annotations == null) ? null : _annotations.get(acls);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java\n \n     public final AnnotatedParameter getParameter(int index) {\n         return new AnnotatedParameter(this, getParameterType(index),\n-                _paramAnnotations[index], index);\n+                getParameterAnnotations(index), index);\n     }\n \n     public abstract int getParameterCount();\n     /**\n      * Method called to fully resolve type of one of parameters, given\n      * specified type variable bindings.\n-     * \n-     * @since 1.8\n      */\n     public final JavaType resolveParameterType(int index, TypeBindings bindings) {\n         return bindings.resolveType(getParameterType(index));\n      * Exceptions are thrown directly from actual low-level call.\n      *<p>\n      * Note: only works for constructors and static methods.\n-     * \n-     * @since 1.9\n      */\n     public abstract Object call() throws Exception;\n \n      * Exceptions are thrown directly from actual low-level call.\n      *<p>\n      * Note: only works for constructors and static methods.\n-     * \n-     * @since 1.9\n      */\n     public abstract Object call(Object[] args) throws Exception;\n \n      * Exceptions are thrown directly from actual low-level call.\n      *<p>\n      * Note: only works for constructors and static methods.\n-     * \n-     * @since 1.9\n      */\n     public abstract Object call1(Object arg) throws Exception;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java\n             for (AnnotatedWithParams creator : l) {\n                 int argCount = creator.getParameterCount();\n                 if (argCount < 1) continue;\n-                String name = _annotationIntrospector.findPropertyNameForParam(creator.getParameter(0));\n+                String name = _annotationIntrospector.findDeserializationName(creator.getParameter(0));\n                 if (name == null) continue;\n                 if (names == null) {\n                     names = new ArrayList<String>();\n                 }\n                 names.add(name);\n                 for (int p = 1; p < argCount; ++p) {\n-                    names.add(_annotationIntrospector.findPropertyNameForParam(creator.getParameter(p)));\n+                    names.add(_annotationIntrospector.findDeserializationName(creator.getParameter(p)));\n                 }\n             }\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n \n     @SuppressWarnings(\"deprecation\")\n     @Override\n-    public String findGettablePropertyName(AnnotatedMethod am)\n-    {\n-        /* 22-May-2009, tatu: JsonProperty is the primary annotation\n-         *   to check for\n-         */\n+    public String findSerializationName(AnnotatedMethod am)\n+    {\n+        // @JsonGetter is most specific, has precedence\n+        JsonGetter ann = am.getAnnotation(JsonGetter.class);\n+        if (ann != null) {\n+            return ann.value();\n+        }\n         JsonProperty pann = am.getAnnotation(JsonProperty.class);\n         if (pann != null) {\n             return pann.value();\n         }\n-        /* 22-May-2009, tatu: JsonGetter is deprecated as of 1.1\n-         *    but still supported\n-         */\n-        JsonGetter ann = am.getAnnotation(JsonGetter.class);\n-        if (ann != null) {\n-            return ann.value();\n-        }\n         /* 22-May-2009, tatu: And finally, JsonSerialize implies\n          *   that there is a property, although doesn't define name\n          */\n     */\n \n     @Override\n-    public String findSerializablePropertyName(AnnotatedField af)\n+    public String findSerializationName(AnnotatedField af)\n     {\n         JsonProperty pann = af.getAnnotation(JsonProperty.class);\n         if (pann != null) {\n      */\n \n     @Override\n-    public String findSettablePropertyName(AnnotatedMethod am)\n-    {\n-        /* 24-Dec-2011, tatu: Jackson 2.0 changes things so that\n-         *   @JsonSetter has precedence over @JsonProperty, given\n-         *   that this is more intuitive ordering given that\n-         *   former is more specific than latter. Note that 1.x\n-         *   had the reverse ordering.\n-         */\n+    public String findDeserializationName(AnnotatedMethod am)\n+    {\n+        // @JsonSetter has precedence over @JsonProperty, being more specific\n         JsonSetter ann = am.getAnnotation(JsonSetter.class);\n         if (ann != null) {\n             return ann.value();\n         if (pann != null) {\n             return pann.value();\n         }\n-        /* 22-May-2009, tatu: And finally, JsonSerialize implies\n-         *   that there is a property, although doesn't define name\n-         */\n+        // @JsonSerialize implies that there is a property, but no name\n         // 09-Apr-2010, tatu: Ditto for JsonView\n         // 19-Oct-2011, tatu: And JsonBackReference/JsonManagedReference\n     \tif (am.hasAnnotation(JsonDeserialize.class)\n      */\n \n     @Override\n-    public String findDeserializablePropertyName(AnnotatedField af)\n+    public String findDeserializationName(AnnotatedField af)\n     {\n         JsonProperty pann = af.getAnnotation(JsonProperty.class);\n         if (pann != null) {\n      */\n \n     @Override\n-    public String findPropertyNameForParam(AnnotatedParameter param)\n+    public String findDeserializationName(AnnotatedParameter param)\n     {\n         if (param != null) {\n             JsonProperty pann = param.getAnnotation(JsonProperty.class);\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/NopAnnotationIntrospector.java\n      */\n \n     @Override\n-    public String findGettablePropertyName(AnnotatedMethod am) {\n+    public String findSerializationName(AnnotatedMethod am) {\n         return null;\n     }\n \n     }\n     \n     @Override\n-    public String findDeserializablePropertyName(AnnotatedField af) {\n+    public String findDeserializationName(AnnotatedField af) {\n         return null;\n     }\n \n \n \n     @Override\n-    public String findPropertyNameForParam(AnnotatedParameter param) {\n+    public String findDeserializationName(AnnotatedParameter param) {\n         return null;\n     }\n \n     @Override\n-    public String findSerializablePropertyName(AnnotatedField af) {\n+    public String findSerializationName(AnnotatedField af) {\n         return null;\n     }\n     \n     @Override\n-    public String findSettablePropertyName(AnnotatedMethod am) {\n+    public String findDeserializationName(AnnotatedMethod am) {\n         return null;\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n                  *   fields, and similarly for deserialize-only annotations... so\n                  *   no fallbacks in this particular case.\n                  */\n-                explName = ai.findSerializablePropertyName(f);\n+                explName = ai.findSerializationName(f);\n             } else {\n-                explName = ai.findDeserializablePropertyName(f);\n+                explName = ai.findDeserializationName(f);\n             }\n             if (\"\".equals(explName)) { // empty String meaning \"use default name\", here just means \"same as field name\"\n                 explName = implName;\n             }\n             for (int i = 0, len = ctor.getParameterCount(); i < len; ++i) {\n                 AnnotatedParameter param = ctor.getParameter(i);\n-                String name = ai.findPropertyNameForParam(param);\n+                String name = ai.findDeserializationName(param);\n                 // is it legal not to have name?\n                 if (name != null) {\n                     // shouldn't need to worry about @JsonIgnore (no real point, so)\n             }\n             for (int i = 0, len = factory.getParameterCount(); i < len; ++i) {\n                 AnnotatedParameter param = factory.getParameter(i);\n-                String name = ai.findPropertyNameForParam(param);\n+                String name = ai.findDeserializationName(param);\n                 // is it legal not to have name?\n                 if (name != null) {\n                     // shouldn't need to worry about @JsonIgnore (no real point, so)\n                     }\n                 }\n                 \n-                explName = (ai == null) ? null : ai.findGettablePropertyName(m);\n+                explName = (ai == null) ? null : ai.findSerializationName(m);\n                 if (explName == null) { // no explicit name; must follow naming convention\n                     implName = BeanUtil.okNameForRegularGetter(m, m.getName());\n                     if (implName == null) { // if not, must skip\n                 boolean ignore = (ai == null) ? false : ai.hasIgnoreMarker(m);\n                 _property(implName).addGetter(m, explName, visible, ignore);\n             } else if (argCount == 1) { // setters\n-                explName = (ai == null) ? null : ai.findSettablePropertyName(m);\n+                explName = (ai == null) ? null : ai.findDeserializationName(m);\n                 if (explName == null) { // no explicit name; must follow naming convention\n                     implName = BeanUtil.okNameForSetter(m);\n                     if (implName == null) { // if not, must skip", "timestamp": 1327012574, "metainfo": ""}