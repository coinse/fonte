{"sha": "06be0c0bbcbc1b84f36e443a4509350b7dc1c71e", "log": "more polish on earlier fix", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n         Object value = null;\n         try {\n             value = _accessorMethod.invoke(bean);\n-\n             // and if we got null, can also just write it directly\n             if (value == null) {\n                 provider.defaultSerializeNull(jgen);\n                 return;\n             }\n             JsonSerializer<Object> ser = _valueSerializer;\n-            if (ser != null) { // already got a serializer? fabulous, that be easy...\n+            if (ser == null) { // already got a serializer? fabulous, that be easy...\n+//                ser = provider.findTypedValueSerializer(value.getClass(), true, _property);\n+                ser = provider.findValueSerializer(value.getClass(), _property);\n+            } else {\n                 /* 09-Dec-2010, tatu: To work around natural type's refusal to add type info, we do\n                  *    this (note: type is for the wrapper type, not enclosed value!)\n                  */\n                 if (_forceTypeInformation) {\n                     typeSer0.writeTypePrefixForScalar(bean, jgen);\n-                } \n-                ser.serializeWithType(value, jgen, provider, typeSer0);\n-                if (_forceTypeInformation) {\n+                    ser.serialize(value, jgen, provider);\n                     typeSer0.writeTypeSuffixForScalar(bean, jgen);\n-                } \n-                return;\n-            }\n-            // But if not, it gets tad trickier (copied from main serialize() method)\n-            Class<?> c = value.getClass();\n-            ser = provider.findTypedValueSerializer(c, true, _property);\n-            // note: now we have bundled type serializer, so should NOT call with typed version\n+                    return;\n+                }\n+            }\n+            // and then redirect type id lookups\n             TypeSerializer typeSer = new TypeSerializerWrapper(typeSer0, bean);\n             ser.serializeWithType(value, jgen, provider, typeSer);\n         } catch (IOException ioe) {", "timestamp": 1354597569, "metainfo": ""}