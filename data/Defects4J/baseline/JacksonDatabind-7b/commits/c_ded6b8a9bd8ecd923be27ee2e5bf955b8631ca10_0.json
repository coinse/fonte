{"sha": "ded6b8a9bd8ecd923be27ee2e5bf955b8631ca10", "log": "Bit more clean up for #217", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n             DeserializationContext ctxt)\n         throws IOException\n     {\n-\t\tt = throwOrReturnThrowable(t, ctxt);\n         // [JACKSON-55] Need to add reference information\n-        throw JsonMappingException.wrapWithPath(t, bean, fieldName);\n+        throw JsonMappingException.wrapWithPath(throwOrReturnThrowable(t, ctxt), bean, fieldName);\n     }\n \n     public void wrapAndThrow(Throwable t, Object bean, int index, DeserializationContext ctxt)\n         throws IOException\n     {\n-\t\tt = throwOrReturnThrowable(t, ctxt);\n         // [JACKSON-55] Need to add reference information\n-        throw JsonMappingException.wrapWithPath(t, bean, index);\n-    }\n-\t\n-\tprivate Throwable throwOrReturnThrowable(Throwable t, DeserializationContext ctxt) \n-\t\tthrows IOException\n-\t{\n-\t    /* 05-Mar-2009, tatu: But one nasty edge is when we get\n+        throw JsonMappingException.wrapWithPath(throwOrReturnThrowable(t, ctxt), bean, index);\n+    }\n+\n+    private Throwable throwOrReturnThrowable(Throwable t, DeserializationContext ctxt) \n+        throws IOException\n+    {\n+        /* 05-Mar-2009, tatu: But one nasty edge is when we get\n          *   StackOverflow: usually due to infinite loop. But that\n-         *   usually gets hidden within an InvocationTargetException...\n+         *   often gets hidden within an InvocationTargetException...\n          */\n-\t\twhile (t instanceof InvocationTargetException && t.getCause() != null) {\n+        while (t instanceof InvocationTargetException && t.getCause() != null) {\n             t = t.getCause();\n         }\n-        // Errors and \"plain\" IOExceptions to be passed as is\n+        // Errors to be passed as is\n         if (t instanceof Error) {\n             throw (Error) t;\n         }\n         boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n-        // Ditto for IOExceptions; except we may want to wrap json exceptions\n+        // Ditto for IOExceptions; except we may want to wrap JSON exceptions\n         if (t instanceof IOException) {\n             if (!wrap || !(t instanceof JsonProcessingException)) {\n                 throw (IOException) t;\n                 throw (RuntimeException) t;\n             }\n         }\n-\t\treturn t;\n-\t}\n+        return t;\n+    }\n \n     protected void wrapInstantiationProblem(Throwable t, DeserializationContext ctxt)\n         throws IOException\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestBeanConversions.java\n         // then bad conversion\n         try {\n             MAPPER.readValue(\"{\\\"boolProp\\\":\\\"foobar\\\"}\", BooleanBean.class);\n-        } catch (JsonProcessingException e) {\n-            verifyException(e, \"foobar\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"from String value 'foobar'\");\n         }\n     }\n ", "timestamp": 1368850060, "metainfo": ""}