{"sha": "ea95d70f86d6574b302faedfeacbf4ad2f0ae1af", "log": "Still trying to simplify construction of BeanPropertyWriters", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java\n         throw new UnsupportedOperationException(\"Cannot call setValue() on constructor of \"\n                 +getDeclaringClass().getName());\n     }\n+\n+    @Override\n+    public Object getValue(Object pojo)\n+        throws UnsupportedOperationException\n+    {\n+        throw new UnsupportedOperationException(\"Cannot call getValue() on constructor of \"\n+                +getDeclaringClass().getName());\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java\n     public Member getMember() { return _field; }\n \n     @Override\n-    public void setValue(Object pojo, Object value)\n-        throws IllegalArgumentException\n+    public void setValue(Object pojo, Object value) throws IllegalArgumentException\n     {\n         try {\n             _field.set(pojo, value);\n         } catch (IllegalAccessException e) {\n             throw new IllegalArgumentException(\"Failed to setValue() for field \"\n+                    +getFullName()+\": \"+e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public Object getValue(Object pojo) throws IllegalArgumentException\n+    {\n+        try {\n+            return _field.get(pojo);\n+        } catch (IllegalAccessException e) {\n+            throw new IllegalArgumentException(\"Failed to getValue() for field \"\n                     +getFullName()+\": \"+e.getMessage(), e);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember.java\n      * this member on given object, if this is a supported\n      * operation for member type.\n      *<p>\n-     * This is implemented for fiedlds and single-argument\n-     * methods; but not for constructor parameters or\n-     * other types of methods.\n+     * This is implemented for fields and single-argument\n+     * member methods; but not for constructor parameters or\n+     * other types of methods (like static methods)\n      */\n     public abstract void setValue(Object pojo, Object value)\n         throws UnsupportedOperationException, IllegalArgumentException;\n+\n+    /**\n+     * Optional method that can be used to access the value of\n+     * this member on given object, if this is a supported\n+     * operation for member type.\n+     *<p>\n+     * This is implemented for fields and no-argument\n+     * member methods; but not for constructor parameters or\n+     * other types of methods (like static methods)\n+     */\n+    public abstract Object getValue(Object pojo)\n+        throws UnsupportedOperationException, IllegalArgumentException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java\n                     +getFullName()+\": \"+e.getMessage(), e);\n         }\n     }\n+\n+    @Override\n+    public Object getValue(Object pojo) throws IllegalArgumentException\n+    {\n+        try {\n+            return _method.invoke(pojo);\n+        } catch (IllegalAccessException e) {\n+            throw new IllegalArgumentException(\"Failed to getValue() with method \"\n+                    +getFullName()+\": \"+e.getMessage(), e);\n+        } catch (InvocationTargetException e) {\n+            throw new IllegalArgumentException(\"Failed to getValue() with method \"\n+                    +getFullName()+\": \"+e.getMessage(), e);\n+        }\n+    }\n     \n     /*\n     /*****************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java\n     }\n \n     @Override\n-    public void setValue(Object pojo, Object value)\n-        throws UnsupportedOperationException\n+    public void setValue(Object pojo, Object value) throws UnsupportedOperationException\n     {\n         throw new UnsupportedOperationException(\"Cannot call setValue() on constructor parameter of \"\n+                +getDeclaringClass().getName());\n+    }\n+\n+    @Override\n+    public Object getValue(Object pojo) throws UnsupportedOperationException\n+    {\n+        throw new UnsupportedOperationException(\"Cannot call getValue() on constructor parameter of \"\n                 +getDeclaringClass().getName());\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap;\n import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;\n             AnnotatedMember member, Annotations contextAnnotations,\n             JavaType declaredType,\n             JsonSerializer<Object> ser, TypeSerializer typeSer, JavaType serType,\n-            Method m, Field f, boolean suppressNulls, Object suppressableValue)\n+            boolean suppressNulls, Object suppressableValue)\n     {\n         \n         _member = member;\n         _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyMap() : null;\n         _typeSerializer = typeSer;\n         _cfgSerializationType = serType;\n-        _accessorMethod = m;\n-        _field = f;\n+\n+        if (member instanceof AnnotatedField) {\n+            _accessorMethod = null;\n+            _field = (Field) member.getMember();\n+        } else if (member instanceof AnnotatedMethod) {\n+            _accessorMethod = (Method) member.getMember();\n+            _field = null;\n+        } else {\n+            throw new IllegalArgumentException(\"Can not pass member of type \"+member.getClass().getName());\n+        }\n         _suppressNulls = suppressNulls;\n         _suppressableValue = suppressableValue;\n         _includeInViews = propDef.getViews();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n package com.fasterxml.jackson.databind.ser;\n-\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Method;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.*;\n             TypeSerializer typeSer, TypeSerializer contentTypeSer,\n             AnnotatedMember am, boolean defaultUseStaticTyping)\n     {\n-        Field f;\n-        Method m;\n-        if (am instanceof AnnotatedField) {\n-            m = null;\n-            f = ((AnnotatedField) am).getAnnotated();\n-        } else {\n-            m = ((AnnotatedMethod) am).getAnnotated();\n-            f = null;\n-        }\n-\n         // do we have annotation that forces type to use (to declared type or its super type)?\n         JavaType serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);\n \n         boolean suppressNulls = false;\n \n         JsonInclude.Include methodProps = _annotationIntrospector.findSerializationInclusion(am, _outputProps);\n-        \n         if (methodProps != null) {\n             switch (methodProps) {\n             case NON_DEFAULT:\n-                valueToSuppress = getDefaultValue(propDef.getName(), m, f);\n+                valueToSuppress = getDefaultValue(propDef.getName(), am);\n                 if (valueToSuppress == null) {\n                     suppressNulls = true;\n                 } else {\n \n         BeanPropertyWriter bpw = new BeanPropertyWriter(propDef,\n                 am, _beanDesc.getClassAnnotations(), declaredType,\n-                ser, typeSer, serializationType, m, f, suppressNulls, valueToSuppress);\n+                ser, typeSer, serializationType, suppressNulls, valueToSuppress);\n         \n         // [JACKSON-132]: Unwrapping\n         NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);\n         return _defaultBean;\n     }\n \n-    protected Object getDefaultValue(String name, Method m, Field f)\n+    protected Object getDefaultValue(String name, AnnotatedMember member)\n     {\n         Object defaultBean = getDefaultBean();\n         try {\n-            if (m != null) {\n-                return m.invoke(defaultBean);\n-            }\n-            return f.get(defaultBean);\n+            return member.getValue(defaultBean);\n         } catch (Exception e) {\n             return _throwWrapped(e, name, defaultBean);\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedField;\n import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n             // we need a valid BeanPropertyDefinition; this will do (just need name to match)\n             POJOPropertyBuilder prop = new POJOPropertyBuilder(\"bogus\", null, true);\n             try {\n-                beanProperties.add(new BeanPropertyWriter(prop,\n-                        null, null,\n+                AnnotatedField f = new AnnotatedField(EmptyBean.class.getDeclaredField(\"name\"), null);\n+                beanProperties.add(new BeanPropertyWriter(prop, f, null,\n                         strType,\n                         null, null, strType,\n-                        null, EmptyBean.class.getDeclaredField(\"name\"),\n                         false, null));\n             } catch (NoSuchFieldException e) {\n                 throw new IllegalStateException(e.getMessage());", "timestamp": 1327542802, "metainfo": ""}