{"sha": "0e37a39502439ecbaa1a5b5188387c01bf7f7fa1", "log": "Adding \"UNWRAP_SINGLE_VALUE_ARRAYS\" DeserializationFeature  Fixes issue #381. Added new feature that determines whether it is acceptable to coerce a single value array (in JSON) to the corresponding value type.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n      * Feature is disabled by default.\n      */\n     ACCEPT_SINGLE_VALUE_AS_ARRAY(false),\n+    \n+    /**\n+     * Feature that determines whether it is acceptable to coerce single value array (in JSON)\n+     * values to the corresponding value type.  This is basically the opposite of the {@link #ACCEPT_SINGLE_VALUE_AS_ARRAY}\n+     * feature.  If more than one value is found in the array, a JsonMappingException is thrown.\n+     * <p>\n+     * Feature is disabled by default\n+     */\n+    UNWRAP_SINGLE_VALUE_ARRAYS(false),\n \n     /**\n      * Feature to allow \"unwrapping\" root-level JSON value, to match setting of\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n \n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n         protected java.util.Date _parseDate(JsonParser jp, DeserializationContext ctxt)\n             throws IOException, JsonProcessingException\n         {\n-            if (_customFormat != null && jp.getCurrentToken() == JsonToken.VALUE_STRING) {\n-                String str = jp.getText().trim();\n-                if (str.length() == 0) {\n-                    return (Date) getEmptyValue();\n+            if (_customFormat != null) {\n+                JsonToken t = jp.getCurrentToken();\n+                if (t == JsonToken.VALUE_STRING) {\n+                    String str = jp.getText().trim();\n+                    if (str.length() == 0) {\n+                        return (Date) getEmptyValue();\n+                    }\n+                    synchronized (_customFormat) {\n+                        try {\n+                            return _customFormat.parse(str);\n+                        } catch (ParseException e) {\n+                            throw new IllegalArgumentException(\"Failed to parse Date value '\"+str\n+                                    +\"' (format: \\\"\"+_formatString+\"\\\"): \"+e.getMessage());\n+                        }\n+                    }\n                 }\n-                synchronized (_customFormat) {\n-                    try {\n-                        return _customFormat.parse(str);\n-                    } catch (ParseException e) {\n-                        throw new IllegalArgumentException(\"Failed to parse Date value '\"+str\n-                                +\"' (format: \\\"\"+_formatString+\"\\\"): \"+e.getMessage());\n-                    }\n+                // Issue#381\n+                if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+                    jp.nextToken();\n+                    final Date parsed = _parseDate(jp, ctxt);\n+                    t = jp.nextToken();\n+                    if (t != JsonToken.END_ARRAY) {\n+                        throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                                \"Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array\");\n+                    }            \n+                    return parsed;            \n                 }\n             }\n             return super._parseDate(jp, ctxt);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n             }\n             return result;\n         }\n+        \n+        // Issue#381\n+        if (curr == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Enum<?> parsed = deserialize(jp, ctxt);\n+            curr = jp.nextToken();\n+            if (curr != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY,\n+                        \"Attempted to unwrap single value array for single '\" + _resolver.getEnumClass().getName() + \"' value but there was more than a single value in the array\");\n+            }\n+            return parsed;\n+        }\n+\n         throw ctxt.mappingException(_resolver.getEnumClass());\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n     @Override\n     public T deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n+        // Issue#381\n+        if (jp.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final T value = deserialize(jp, ctxt);\n+            if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\");\n+            }\n+            return value;\n+        }\n         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n         String text = jp.getValueAsString();\n         if (text != null) { // has String representation\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n             throws IOException, JsonProcessingException\n         {\n             JsonToken t = jp.getCurrentToken();\n-            int value;\n-\n+            \n             if (t == JsonToken.VALUE_NUMBER_INT) { // ok iff ascii value\n-                value = jp.getIntValue();\n+                int value = jp.getIntValue();\n                 if (value >= 0 && value <= 0xFFFF) {\n                     return Character.valueOf((char) value);\n                 }\n                 // actually, empty should become null?\n                 if (text.length() == 0) {\n                     return (Character) getEmptyValue();\n-                }\n+                }               \n+            } else if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+                //Issue#381\n+                jp.nextToken();\n+                final Character value = deserialize(jp, ctxt);\n+                if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                    throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                            \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n+                            );\n+                }\n+                return value;\n+            } else if (t == JsonToken.VALUE_NULL && !_valueClass.isPrimitive()) {\n+                //Issue#unreported\n+                //  This handles the case where the value required is the Character wrapper class and the token is the null token\n+                return getEmptyValue();\n             }\n             throw ctxt.mappingException(_valueClass, t);\n         }\n                     throw ctxt.weirdStringException(text, _valueClass, \"not a valid number\");\n                 }\n             }\n+            \n+            if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+                jp.nextToken();\n+                final Number value = deserialize(jp, ctxt);\n+                if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                    throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                            \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n+                            );\n+                }\n+                return value;\n+            }\n             // Otherwise, no can do:\n             throw ctxt.mappingException(_valueClass, t);\n         }\n                  * Could do by calling BigDecimal.toBigIntegerExact()\n                  */\n                 return jp.getDecimalValue().toBigInteger();\n+            } else if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+                jp.nextToken();\n+                final BigInteger value = deserialize(jp, ctxt);\n+                if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                    throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY,\n+                        \"Attempted to unwrap single value array for single 'BigInteger' value but there was more than a single value in the array\"\n+                    );\n+                }\n+                return value;\n             } else if (t != JsonToken.VALUE_STRING) { // let's do implicit re-parse\n                 // String is ok too, can easily convert; otherwise, no can do:\n                 throw ctxt.mappingException(_valueClass, t);\n-            }\n+            }            \n             text = jp.getText().trim();\n             if (text.length() == 0) {\n                 return null;\n                     throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n                 }\n             }\n+            \n+            if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+                jp.nextToken();\n+                final BigDecimal value = deserialize(jp, ctxt);\n+                if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                    throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY,\n+                        \"Attempted to unwrap single value array for single 'BigDecimal' value but there was more than a single value in the array\"\n+                    );\n+                }\n+                return value;\n+            }\n             // Otherwise, no can do:\n             throw ctxt.mappingException(_valueClass, t);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java\n import com.fasterxml.jackson.core.JsonToken;\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonMappingException;\n \n public class StackTraceElementDeserializer\n                 }\n             }\n             return new StackTraceElement(className, methodName, fileName, lineNumber);\n+        } else if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final StackTraceElement value = deserialize(jp, ctxt);\n+            if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY,\n+                        \"Attempted to unwrap single value array for single 'java.lang.StackTraceElement' value but there was more than a single value in the array\"\n+                    );\n+            }\n+            return value;\n         }\n+            \n         throw ctxt.mappingException(_valueClass, t);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n             }\n             throw ctxt.weirdStringException(text, _valueClass, \"only \\\"true\\\" or \\\"false\\\" recognized\");\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final boolean parsed = _parseBooleanPrimitive(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n             }\n             throw ctxt.weirdStringException(text, _valueClass, \"only \\\"true\\\" or \\\"false\\\" recognized\");\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Boolean parsed = _parseBoolean(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Boolean' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Byte) getNullValue();\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Byte parsed = _parseByte(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         throw ctxt.mappingException(_valueClass, t);\n     }\n     \n         }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Short) getNullValue();\n+        }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Short parsed = _parseShort(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Short' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n         }\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return 0;\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final int parsed = _parseIntPrimitive(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'int' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Integer) getNullValue();\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Integer parsed = _parseInteger(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Integer' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Long) getNullValue();\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Long parsed = _parseLong(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Long' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         }\n         if (t == JsonToken.VALUE_NULL) {\n             return 0L;\n+        }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final long parsed = _parseLongPrimitive(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'long' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n         }\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Float) getNullValue();\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Float parsed = _parseFloat(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return 0.0f;\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final float parsed = _parseFloatPrimitive(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'float' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Double) getNullValue();\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Double parsed = _parseDouble(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Double' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n             // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return 0.0;\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final double parsed = _parseDoublePrimitive(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n             // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n                         \"not a valid representation (error: \"+iae.getMessage()+\")\");\n             }\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Date parsed = _parseDate(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         throw ctxt.mappingException(_valueClass, t);\n     }\n \n     protected final String _parseString(JsonParser jp, DeserializationContext ctxt)\n         throws IOException\n     {\n+        // Issue#381\n+        if (jp.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final String parsed = _parseString(jp, ctxt);\n+            if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         String value = jp.getValueAsString();\n         if (value != null) {\n             return value;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n     @Override\n     public String deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n+        // Issue#381\n+        if (jp.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final String parsed = _parseString(jp, ctxt);\n+            if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n         String text = jp.getValueAsString();\n         if (text != null) {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n         }\n         assertEquals(0, result.remaining());\n     }\n+    \n+    // [Issue#381]\n+    public void testSingleElementArray() throws Exception {\n+        final int intTest = 932832;\n+        final double doubleTest = 32.3234;\n+        final long longTest = 2374237428374293423L;\n+        final short shortTest = (short) intTest;\n+        final float floatTest = 84.3743f;\n+        final byte byteTest = (byte) 43;\n+        final char charTest = 'c';\n+\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+\n+        final int intValue = mapper.readValue(asArray(intTest), Integer.TYPE);\n+        assertEquals(intTest, intValue);\n+        final Integer integerWrapperValue = mapper.readValue(asArray(Integer.valueOf(intTest)), Integer.class);\n+        assertEquals(Integer.valueOf(intTest), integerWrapperValue);\n+\n+        final double doubleValue = mapper.readValue(asArray(doubleTest), Double.class);\n+        assertEquals(doubleTest, doubleValue);\n+        final Double doubleWrapperValue = mapper.readValue(asArray(Double.valueOf(doubleTest)), Double.class);\n+        assertEquals(Double.valueOf(doubleTest), doubleWrapperValue);\n+\n+        final long longValue = mapper.readValue(asArray(longTest), Long.TYPE);\n+        assertEquals(longTest, longValue);\n+        final Long longWrapperValue = mapper.readValue(asArray(Long.valueOf(longTest)), Long.class);\n+        assertEquals(Long.valueOf(longTest), longWrapperValue);\n+\n+        final short shortValue = mapper.readValue(asArray(shortTest), Short.TYPE);\n+        assertEquals(shortTest, shortValue);\n+        final Short shortWrapperValue = mapper.readValue(asArray(Short.valueOf(shortTest)), Short.class);\n+        assertEquals(Short.valueOf(shortTest), shortWrapperValue);\n+\n+        final float floatValue = mapper.readValue(asArray(floatTest), Float.TYPE);\n+        assertEquals(floatTest, floatValue);\n+        final Float floatWrapperValue = mapper.readValue(asArray(Float.valueOf(floatTest)), Float.class);\n+        assertEquals(Float.valueOf(floatTest), floatWrapperValue);\n+\n+        final byte byteValue = mapper.readValue(asArray(byteTest), Byte.TYPE);\n+        assertEquals(byteTest, byteValue);\n+        final Byte byteWrapperValue = mapper.readValue(asArray(Byte.valueOf(byteTest)), Byte.class);\n+        assertEquals(Byte.valueOf(byteTest), byteWrapperValue);\n+\n+        final char charValue = mapper.readValue(asArray(quote(String.valueOf(charTest))), Character.TYPE);\n+        assertEquals(charTest, charValue);\n+        final Character charWrapperValue = mapper.readValue(asArray(quote(String.valueOf(charTest))), Character.class);\n+        assertEquals(Character.valueOf(charTest), charWrapperValue);\n+\n+        final boolean booleanTrueValue = mapper.readValue(asArray(true), Boolean.TYPE);\n+        assertTrue(booleanTrueValue);\n+\n+        final boolean booleanFalseValue = mapper.readValue(asArray(false), Boolean.TYPE);\n+        assertFalse(booleanFalseValue);\n+\n+        final Boolean booleanWrapperTrueValue = mapper.readValue(asArray(Boolean.valueOf(true)), Boolean.class);\n+        assertEquals(Boolean.TRUE, booleanWrapperTrueValue);\n+    }\n+\n+    private static String asArray(Object value) {\n+        final String stringVal = value.toString();\n+        return new StringBuilder(stringVal.length() + 2).append(\"[\").append(stringVal).append(\"]\").toString();\n+    }\n+\n+    public void testSingleElementArrayException() throws Exception {\n+        try {\n+            MAPPER.readValue(\"[42]\", Integer.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            MAPPER.readValue(\"[42]\", Integer.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            MAPPER.readValue(\"[42.273]\", Double.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            MAPPER.readValue(\"[42.2723]\", Double.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            MAPPER.readValue(\"[42342342342342]\", Long.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            MAPPER.readValue(\"[42342342342342342]\", Long.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            MAPPER.readValue(\"[42]\", Short.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            MAPPER.readValue(\"[42]\", Short.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            MAPPER.readValue(\"[327.2323]\", Float.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            MAPPER.readValue(\"[82.81902]\", Float.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            MAPPER.readValue(\"[22]\", Byte.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            MAPPER.readValue(\"[22]\", Byte.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            MAPPER.readValue(\"['d']\", Character.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            MAPPER.readValue(\"['d']\", Character.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            MAPPER.readValue(\"[true]\", Boolean.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            MAPPER.readValue(\"[true]\", Boolean.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+    }\n+\n+    public void testMultiValueArrayException() throws IOException {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        try {\n+            mapper.readValue(\"[42,42]\", Integer.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42,42]\", Integer.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[42.273,42.273]\", Double.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42.2723,42.273]\", Double.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[42342342342342,42342342342342]\", Long.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42342342342342342,42342342342342]\", Long.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[42,42]\", Short.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42,42]\", Short.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[327.2323,327.2323]\", Float.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[82.81902,327.2323]\", Float.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[22,23]\", Byte.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[22,23]\", Byte.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(asArray(quote(\"c\") + \",\"  + quote(\"d\")), Character.class);\n+            \n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(asArray(quote(\"c\") + \",\"  + quote(\"d\")), Character.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[true,false]\", Boolean.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[true,false]\", Boolean.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+    }\n }", "timestamp": 1389153842, "metainfo": ""}