{"sha": "de7e924f9be180f48bb94e205290554d359cb936", "log": "Implemented #159", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n \n     /*\n     /**********************************************************\n-    /* Extended API\n+    /* Extended API, iteration\n     /**********************************************************\n      */\n \n         _parser.clearCurrentToken();\n         return result;\n     }\n+\n+    /**\n+     * Convenience method for reading all entries accessible via\n+     * this iterator\n+     * \n+     * @return\n+     * \n+     * @since 2.2\n+     */\n+    public List<T> readAll() throws IOException {\n+    \treturn readAll(new ArrayList<T>());\n+    }\n+\n+    /**\n+     * Convenience method for reading all entries accessible via\n+     * this iterator\n+     * \n+     * @return\n+     * \n+     * @since 2.2\n+     */\n+    public List<T> readAll(List<T> resultList) throws IOException\n+    {\n+    \twhile (hasNextValue()) {\n+    \t\tresultList.add(nextValue());\n+    \t}\n+    \treturn resultList;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Extended API, accessors\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Accessor for getting underlying parser this iterator uses.\n+     * \n+     * @since 2.2\n+     */\n+    public JsonParser getParser() {\n+    \treturn _parser;\n+    }\n+\n+    /**\n+     * Accessor for accessing {@link FormatSchema} that the underlying parser\n+     * (as per {@link #getParser}) is using, if any; only parser of schema-aware\n+     * formats use schemas.\n+     * \n+     * @since 2.2\n+     */\n+    public FormatSchema getParserSchema() {\n+    \treturn _parser.getSchema();\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n-import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n                 }\n             }\n             if (schemaNode == null) {\n-                schemaNode = JsonSchema.getDefaultSchemaNode();\n+                schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode();\n             }\n             o.put(\"items\", schemaNode);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n-import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n                     JsonSerializer<Object> ser = provider.findValueSerializer(valueType.getRawClass(), _property);\n                     JsonNode schemaNode = (ser instanceof SchemaAware) ?\n                             ((SchemaAware) ser).getSchema(provider, null) :\n-                            JsonSchema.getDefaultSchemaNode();\n+                            \tcom.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode();\n                     propsNode.put(provider.getConfig().getAnnotationIntrospector().findEnumValue((Enum<?>)enumValue), schemaNode);\n                 }\n                 o.put(\"properties\", propsNode);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonArrayFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n-import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n                 Class<?> componentType = ((ArrayType) javaType).getContentType().getRawClass();\n                 // 15-Oct-2010, tatu: We can't serialize plain Object.class; but what should it produce here? Untyped?\n                 if (componentType == Object.class) {\n-                    o.put(\"items\", JsonSchema.getDefaultSchemaNode());\n+                    o.put(\"items\", com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode());\n                 } else {\n                     JsonSerializer<Object> ser = provider.findValueSerializer(componentType, _property);\n                     JsonNode schemaNode = (ser instanceof SchemaAware) ?\n                             ((SchemaAware) ser).getSchema(provider, null) :\n-                            JsonSchema.getDefaultSchemaNode();\n+                            \tcom.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode();\n                     o.put(\"items\", schemaNode);\n                 }\n             }\n--- a/src/test/java/com/fasterxml/jackson/failing/TestExternalTypeId.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestExternalTypeId.java\n \n public class TestExternalTypeId extends BaseMapTest\n {\n-    public void testTypes() throws IOException {\n-    final ObjectMapper mapper = new ObjectMapper();\n-    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+\t@SuppressWarnings(\"unused\")\n+\tpublic void testTypes() throws IOException {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n \n-    final Point _date = new Point(new Date());\n-    final Point _integer = new Point(12231321);\n-    final Point _boolean = new Point(Boolean.TRUE);\n-    final Point _long = new Point(1234L);\n+        final Point _date = new Point(new Date());\n+        final Point _integer = new Point(12231321);\n+        final Point _boolean = new Point(Boolean.TRUE);\n+        final Point _long = new Point(1234L);\n \n-    final Point _pojo = new Point(new Pojo(1));\n-    final String s_date = mapper.writeValueAsString(_date);\n-    final String s_integer = mapper.writeValueAsString(_integer);\n+        final Point _pojo = new Point(new Pojo(1));\n+        final String s_date = mapper.writeValueAsString(_date);\n+        final String s_integer = mapper.writeValueAsString(_integer);\n \n System.err.println(\"Int -> \"+s_integer);   \n     \n-    final String s_boolean = mapper.writeValueAsString(_boolean);\n-    final String s_long = mapper.writeValueAsString(_long);\n-    final String s_pojo = mapper.writeValueAsString(_pojo);\n+        final String s_boolean = mapper.writeValueAsString(_boolean);\n+        final String s_long = mapper.writeValueAsString(_long);\n+        final String s_pojo = mapper.writeValueAsString(_pojo);\n \n-    final Point d_date = mapper.readValue(s_date, Point.class);\n-    final Point d_long = mapper.readValue(s_long, Point.class);\n-    final Point d_pojo = mapper.readValue(s_pojo, Point.class);\n-    final Point d_integer = mapper.readValue(s_integer, Point.class);\n-    final Point d_boolean = mapper.readValue(s_boolean, Point.class);\n+        final Point d_date = mapper.readValue(s_date, Point.class);\n+        final Point d_long = mapper.readValue(s_long, Point.class);\n+        final Point d_pojo = mapper.readValue(s_pojo, Point.class);\n+        final Point d_integer = mapper.readValue(s_integer, Point.class);\n+        final Point d_boolean = mapper.readValue(s_boolean, Point.class);\n     }\n \n     @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY,\n         getterVisibility = JsonAutoDetect.Visibility.NONE,\n         setterVisibility = JsonAutoDetect.Visibility.NONE)\n-    private static class Point {\n+    static class Point {\n         @JsonTypeInfo(use = JsonTypeInfo.Id.NAME,\n         property = \"t\",\n         visible = true,\n         private final Object v;\n     \n         @JsonCreator\n-        @SuppressWarnings(\"unused\")\n         public Point(@JsonProperty(\"v\") Object v) {\n             this.v = v;\n         }\n     }\n      \n \n-    private static class Pojo {\n+    static class Pojo {\n         public final int p;\n \n         @JsonCreator", "timestamp": 1360023880, "metainfo": ""}