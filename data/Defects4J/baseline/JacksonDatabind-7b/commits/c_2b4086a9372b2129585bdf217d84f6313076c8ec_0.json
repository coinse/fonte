{"sha": "2b4086a9372b2129585bdf217d84f6313076c8ec", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n      * serialized value.\n      * \n      * @since 2.0\n-     */\n+     * \n+     * @deprecated Since 2.1, use {@link #findFormat(Annotated)} instead.\n+     */\n+    @Deprecated\n     public JsonFormat.Value findFormat(AnnotatedMember member) {\n+        return null;\n+    }\n+\n+    /**\n+     * Method for finding format annotations for property or class.\n+     * Return value is typically used by serializers and/or\n+     * deserializers to customize presentation aspects of the\n+     * serialized value.\n+     * \n+     * @since 2.1\n+     */\n+    public JsonFormat.Value findFormat(Annotated memberOrClass) {\n+        if (memberOrClass instanceof AnnotatedMember) {\n+            return findFormat((AnnotatedMember) memberOrClass);\n+        }\n         return null;\n     }\n     \n         }\n \n         @Override\n-        public JsonFormat.Value findFormat(AnnotatedMember member) {\n-            JsonFormat.Value result = _primary.findFormat(member);\n-            if (result == null) {\n-                result = _secondary.findFormat(member);\n+        public JsonFormat.Value findFormat(Annotated ann) {\n+            JsonFormat.Value result = _primary.findFormat(ann);\n+            if (result == null) {\n+                result = _secondary.findFormat(ann);\n             }\n             return result;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n  * Note that the main implementation type is\n  * {@link com.fasterxml.jackson.databind.introspect.BasicBeanDescription},\n  * meaning that it is safe to upcast to this type.\n- * \n- * @author tatu\n  */\n public abstract class BeanDescription\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n+import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n \n /**\n            throws JsonMappingException\n         {\n             if (property != null) {\n-                JsonFormat.Value format = ctxt.getAnnotationIntrospector().findFormat(property.getMember());\n+                JsonFormat.Value format = ctxt.getAnnotationIntrospector().findFormat((Annotated) property.getMember());\n                 if (format != null) {\n                     TimeZone tz = format.getTimeZone();\n                     // First: fully custom pattern?\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n \n     @Override\n     public JsonFormat.Value findFormat(AnnotatedMember member) {\n-        JsonFormat ann = member.getAnnotation(JsonFormat.class);\n+        return findFormat(member);\n+    }\n+    \n+    @Override\n+    public JsonFormat.Value findFormat(Annotated annotated) {\n+        JsonFormat ann = annotated.getAnnotation(JsonFormat.class);\n         return (ann == null)  ? null : new JsonFormat.Value(ann);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n \n \n     /*\n     /**********************************************************\n-    /* General information about POJO\n+    /* Basic configuration we start with\n     /**********************************************************\n      */\n \n     final protected BeanDescription _beanDesc;\n \n+    protected SerializationConfig _config;\n+    \n     /*\n     /**********************************************************\n     /* Accumulated information about properties\n         _filterId = src._filterId;\n     }\n \n+    /**\n+     * Initialization method called right after construction, to specify\n+     * configuration to use.\n+     *<p>\n+     * Note: ideally should be passed in constructor, but for backwards\n+     * compatibility, needed to add a setter instead\n+     * \n+     * @since 2.1\n+     */\n+    protected void setConfig(SerializationConfig config) {\n+        _config = config;\n+    }\n+    \n     public void setProperties(List<BeanPropertyWriter> properties) {\n         _properties = properties;\n     }\n     /**********************************************************\n     /* Accessors for things BeanSerializer cares about:\n     /* note -- likely to change between minor revisions\n-    /*\n-    /**********************************************************\n-     */\n-\n+    /* by new methods getting added.\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * @since 2.1\n+     */\n+    public SerializationConfig getConfig() { return _config; }\n+\n+    public AnnotatedClass getClassInfo() { return _beanDesc.getClassInfo(); }\n+    \n     public BeanDescription getBeanDescription() { return _beanDesc; }\n+\n     public List<BeanPropertyWriter> getProperties() { return _properties; }\n     public boolean hasProperties() {\n         return (_properties != null) && (_properties.size() > 0);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         if (beanDesc.getBeanClass() == Object.class) {\n             throw new IllegalArgumentException(\"Can not create bean serializer for Object.class\");\n         }\n-\n         final SerializationConfig config = prov.getConfig();\n         BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc);\n+        builder.setConfig(config);\n         \n         // First: any detectable (auto-detect, annotations) properties to serialize?\n         List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);\n-\n         if (props == null) {\n             props = new ArrayList<BeanPropertyWriter>();\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.core.io.SerializedString;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.Annotated;\n+import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n      * Note: not final since we need to get contextual instance during\n      * resolution.\n      */\n-    protected final ObjectIdWriter _objectIdWriter;\n+    final protected ObjectIdWriter _objectIdWriter;\n+\n+    /**\n+     * Requested shape from bean class annotations.\n+     */\n+    final protected JsonFormat.Shape _serializationShape;\n     \n     /*\n     /**********************************************************\n             _anyGetterWriter = null;\n             _propertyFilterId = null;\n             _objectIdWriter = null;\n+            _serializationShape = null;\n         } else {\n             _typeId = builder.getTypeId();\n             _anyGetterWriter = builder.getAnyGetter();\n             _propertyFilterId = builder.getFilterId();\n             _objectIdWriter = builder.getObjectIdWriter();\n+            AnnotationIntrospector ai = builder.getConfig().getAnnotationIntrospector();\n+            AnnotatedClass ac = builder.getClassInfo();\n+            JsonFormat.Value format = (ai == null) ? null : ai.findFormat(ac);\n+            _serializationShape = (format == null) ? null : format.getShape();\n         }\n     }\n \n         _anyGetterWriter = src._anyGetterWriter;\n         _objectIdWriter = src._objectIdWriter;\n         _propertyFilterId = src._propertyFilterId;\n+        _serializationShape = src._serializationShape;\n     }\n \n     protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter)\n         _anyGetterWriter = src._anyGetterWriter;\n         _objectIdWriter = objectIdWriter;\n         _propertyFilterId = src._propertyFilterId;\n+        _serializationShape = src._serializationShape;\n     }\n \n     protected BeanSerializerBase(BeanSerializerBase src, String[] toIgnore)\n         _anyGetterWriter = src._anyGetterWriter;\n         _objectIdWriter = src._objectIdWriter;\n         _propertyFilterId = src._propertyFilterId;\n+        _serializationShape = src._serializationShape;\n     }\n     \n     /**\n             contextual = contextual.withIgnorals(ignorals);\n         }\n         // One more thing: are we asked to serialize POJO as array?\n+        JsonFormat.Shape shape = null;\n         if (accessor != null) {\n-            JsonFormat.Value format = intr.findFormat(accessor);\n+            JsonFormat.Value format = intr.findFormat((Annotated) accessor);\n \n             if (format != null) {\n-                if (format.getShape() == JsonFormat.Shape.ARRAY) {\n-                    contextual = contextual.asArraySerializer();\n-                }\n-            }\n+                shape = format.getShape();\n+            }\n+        }\n+        if (shape == null) {\n+            shape = _serializationShape;\n+        }\n+        if (shape == JsonFormat.Shape.ARRAY) {\n+            contextual = contextual.asArraySerializer();\n         }\n         return contextual;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n import com.fasterxml.jackson.databind.util.StdDateFormat;\n \n             BeanProperty property) throws JsonMappingException\n     {\n         if (property != null) {\n-            JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat(property.getMember());\n+            JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat((Annotated)property.getMember());\n             if (format != null) {\n                 // Simple case first: serialize as numeric timestamp?\n                 if (format.getShape().isNumeric()) {", "timestamp": 1341026844, "metainfo": ""}