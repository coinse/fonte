{"sha": "14182380d59abc9c5a18504833c5c93d27fd0f8e", "log": "fix eol detection  ", "commit": "\n--- a/src/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/java/org/apache/commons/csv/CSVParser.java\n     // assert c == delimiter;\n     c = in.read();\n     while (!tkn.isReady) {\n+      boolean skipRead = false;\n       if (c == strategy.getEncapsulator() || c == '\\\\') {\n         // check lookahead\n         if (in.lookAhead() == strategy.getEncapsulator()) {\n         } else {\n           // token finish mark (encapsulator) reached: ignore whitespace till delimiter\n           while (!tkn.isReady) {\n-            int n = in.lookAhead();\n-            if (n == strategy.getDelimiter()) {\n+            c = in.read();\n+            if (c == strategy.getDelimiter()) {\n               tkn.type = TT_TOKEN;\n               tkn.isReady = true;\n-            } else if (isEndOfFile(n)) {\n+            } else if (isEndOfFile(c)) {\n               tkn.type = TT_EOF;\n               tkn.isReady = true;\n-            } else if (isEndOfLine(n)) {\n+            } else if (isEndOfLine(c)) {\n               // ok eo token reached\n               tkn.type = TT_EORECORD;\n               tkn.isReady = true;\n-            } else if (!isWhitespace(n)) {\n-              // error invalid char between token and next delimiter\n-              throw new IOException(\n-                \"(line \" + getLineNumber() \n-                + \") invalid char between encapsualted token end delimiter\"\n-              );\n-            }\n-            c = in.read();\n+            } else if (!isWhitespace(c)) {\n+                // error invalid char between token and next delimiter\n+                throw new IOException(\n+                  \"(line \" + getLineNumber() \n+                  + \") invalid char between encapsulated token end delimiter\"\n+                );\n+              }\n           }\n+          skipRead = true;\n         }\n       } else if (isEndOfFile(c)) {\n         // error condition (end of file before end of token)\n         tkn.content.append((char) c);\n       }\n       // get the next char\n-      if (!tkn.isReady) {\n-        c = in.read();  \n+      if (!tkn.isReady && !skipRead) {\n+        c = in.read();\n       }\n     }\n     return tkn;", "timestamp": 1185229510, "metainfo": ""}