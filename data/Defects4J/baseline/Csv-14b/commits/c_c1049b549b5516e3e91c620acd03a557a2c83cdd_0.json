{"sha": "c1049b549b5516e3e91c620acd03a557a2c83cdd", "log": "Use final.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n         if (header == null) {\n             this.header = null;\n         } else {\n-            Set<String> dupCheck = new HashSet<String>();\n-            for (String hdr : header) {\n+            final Set<String> dupCheck = new HashSet<String>();\n+            for (final String hdr : header) {\n                 if (!dupCheck.add(hdr)) {\n                     throw new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" +\n                             Arrays.toString(header));\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n-    public static CSVParser parse(final File file, Charset charset, final CSVFormat format) throws IOException {\n+    public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException {\n         Assertions.notNull(file, \"file\");\n         Assertions.notNull(format, \"format\");\n         // Use the default Charset explicitly\n      * @throws IOException\n      *             on parse error or input read-failure\n      */\n-    public <T extends Collection<CSVRecord>> T getRecords(T records) throws IOException {\n+    public <T extends Collection<CSVRecord>> T getRecords(final T records) throws IOException {\n         CSVRecord rec;\n         while ((rec = this.nextRecord()) != null) {\n             records.add(rec);\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n     @Test\n     @Ignore(\"CSV-107\")\n     public void testBOM() throws IOException {\n-        URL url = ClassLoader.getSystemClassLoader().getResource(\"CSVFileParser/bom.csv\");\n+        final URL url = ClassLoader.getSystemClassLoader().getResource(\"CSVFileParser/bom.csv\");\n         final CSVParser parser = CSVParser.parse(url, null, CSVFormat.EXCEL.withHeader());\n         try {\n-            for (CSVRecord record : parser) {\n+            for (final CSVRecord record : parser) {\n                 final String string = record.get(\"Date\");\n                 Assert.assertNotNull(string);\n                 //System.out.println(\"date: \" + record.get(\"Date\"));\n \n     @Test\n     public void testBOMInputStream() throws IOException {\n-        URL url = ClassLoader.getSystemClassLoader().getResource(\"CSVFileParser/bom.csv\");\n-        Reader reader = new InputStreamReader(new BOMInputStream(url.openStream()), \"UTF-8\");\n+        final URL url = ClassLoader.getSystemClassLoader().getResource(\"CSVFileParser/bom.csv\");\n+        final Reader reader = new InputStreamReader(new BOMInputStream(url.openStream()), \"UTF-8\");\n         final CSVParser parser = new CSVParser(reader, CSVFormat.EXCEL.withHeader());\n         try {\n-            for (CSVRecord record : parser) {\n+            for (final CSVRecord record : parser) {\n                 final String string = record.get(\"Date\");\n                 Assert.assertNotNull(string);\n                 //System.out.println(\"date: \" + record.get(\"Date\"));\n      */\n     @Test\n     public void testGetOneLineOneParser() throws IOException {\n-        PipedWriter writer = new PipedWriter();\n-        PipedReader reader = new PipedReader(writer);\n+        final PipedWriter writer = new PipedWriter();\n+        final PipedReader reader = new PipedReader(writer);\n         final CSVFormat format = CSVFormat.DEFAULT;\n         final CSVParser parser = new CSVParser(reader, format);\n         try {\n--- a/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n     public void testToMapWithNoHeader() throws Exception {\n        final CSVParser parser =  CSVParser.parse(\"a,b\", CSVFormat.newFormat(','));\n        final CSVRecord shortRec = parser.iterator().next();\n-       Map<String, String> map = shortRec.toMap();\n+       final Map<String, String> map = shortRec.toMap();\n        assertNotNull(\"Map is not null.\", map);\n        assertTrue(\"Map is empty.\", map.isEmpty());\n     }", "timestamp": 1402942065, "metainfo": ""}