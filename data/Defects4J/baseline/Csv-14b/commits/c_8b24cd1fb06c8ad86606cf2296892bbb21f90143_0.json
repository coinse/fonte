{"sha": "8b24cd1fb06c8ad86606cf2296892bbb21f90143", "log": "[CSV-181] Make CSVPrinter.print(Object) GC-free.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n      */\n     public void print(final Object value) throws IOException {\n         // null values are considered empty\n-        String strValue;\n+        // Only call CharSequence.toString() if you have to, helps GC-free use cases. \n+        CharSequence charSequence;\n         if (value == null) {\n             final String nullString = format.getNullString();\n-            strValue = nullString == null ? Constants.EMPTY : nullString;\n+            charSequence = nullString == null ? Constants.EMPTY : nullString;\n         } else {\n-            strValue = value.toString();\n-        }\n-        strValue = format.getTrim() ? strValue.trim() : strValue;\n-        this.print(value, strValue, 0, strValue.length());\n+            charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\n+        }\n+        charSequence = format.getTrim() ? trim(charSequence) : charSequence;\n+        this.print(value, charSequence, 0, charSequence.length());\n+    }\n+\n+    private CharSequence trim(final CharSequence charSequence) {\n+        if (charSequence instanceof String) {\n+            return ((String) charSequence).trim();\n+        }\n+        final int count = charSequence.length();\n+        int len = count;\n+        int pos = 0;\n+\n+        while ((pos < len) && (charSequence.charAt(pos) <= ' ')) {\n+            pos++;\n+        }\n+        while ((pos < len) && (charSequence.charAt(len - 1) <= ' ')) {\n+            len--;\n+        }\n+        return (pos > 0) || (len < count) ? charSequence.subSequence(pos, len) : charSequence;\n     }\n \n     private void print(final Object object, final CharSequence value, final int offset, final int len)", "timestamp": 1462783797, "metainfo": ""}