{"sha": "9ab47dc56b43066be740488948d38032df636502", "log": "Move tests for specific issues to own package  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n     }\n \n     @Test\n-    public void testJiraCsv154_withCommentMarker() throws IOException {\n-        final String comment = \"This is a header comment\";\n-        final CSVFormat format = CSVFormat.EXCEL.withHeader(\"H1\", \"H2\").withCommentMarker('#').withHeaderComments(comment);\n-        final StringBuilder out = new StringBuilder();\n-        final CSVPrinter printer = format.print(out);\n-        printer.print(\"A\");\n-        printer.print(\"B\");\n-        printer.close();\n-        final String s = out.toString();\n-        Assert.assertTrue(s, s.contains(comment));\n-    }\n-\n-    @Test\n-    public void testJiraCsv154_withHeaderComments() throws IOException {\n-        final String comment = \"This is a header comment\";\n-        final CSVFormat format = CSVFormat.EXCEL.withHeader(\"H1\", \"H2\").withHeaderComments(comment).withCommentMarker('#');\n-        final StringBuilder out = new StringBuilder();\n-        final CSVPrinter printer = format.print(out);\n-        printer.print(\"A\");\n-        printer.print(\"B\");\n-        printer.close();\n-        final String s = out.toString();\n-        Assert.assertTrue(s, s.contains(comment));\n-    }\n-    \n-    @Test\n     public void testWithIgnoreEmptyLines() throws Exception {\n         assertFalse(CSVFormat.DEFAULT.withIgnoreEmptyLines(false).getIgnoreEmptyLines());\n         assertTrue(CSVFormat.DEFAULT.withIgnoreEmptyLines().getIgnoreEmptyLines());\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/bugs/JiraCsv164Test.java\n+package org.apache.commons.csv.bugs;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.junit.Test;\n+\n+public class JiraCsv164Test {\n+\n+    @Test\n+    public void testJiraCsv154_withCommentMarker() throws IOException {\n+        final String comment = \"This is a header comment\";\n+        final CSVFormat format = CSVFormat.EXCEL.withHeader(\"H1\", \"H2\").withCommentMarker('#').withHeaderComments(comment);\n+        final StringBuilder out = new StringBuilder();\n+        final CSVPrinter printer = format.print(out);\n+        printer.print(\"A\");\n+        printer.print(\"B\");\n+        printer.close();\n+        final String s = out.toString();\n+        assertTrue(s, s.contains(comment));\n+    }\n+\n+    @Test\n+    public void testJiraCsv154_withHeaderComments() throws IOException {\n+        final String comment = \"This is a header comment\";\n+        final CSVFormat format = CSVFormat.EXCEL.withHeader(\"H1\", \"H2\").withHeaderComments(comment).withCommentMarker('#');\n+        final StringBuilder out = new StringBuilder();\n+        final CSVPrinter printer = format.print(out);\n+        printer.print(\"A\");\n+        printer.print(\"B\");\n+        printer.close();\n+        final String s = out.toString();\n+        assertTrue(s, s.contains(comment));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/bugs/JiraCsv167Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv.bugs;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVParser;\n+import org.apache.commons.csv.CSVRecord;\n+import org.apache.commons.csv.QuoteMode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class JiraCsv167Test {\n+\n+    @Test\n+    public void parse() throws IOException {\n+        final File csvData = new File(\"src/test/resources/csv-167/sample1.csv\");\n+        final BufferedReader br = new BufferedReader(new FileReader(csvData));\n+        String s = null;\n+        int totcomment = 0;\n+        int totrecs = 0;\n+        boolean lastWasComment = false;\n+        while((s=br.readLine()) != null) {\n+            if (s.startsWith(\"#\")) {\n+                if (!lastWasComment) { // comments are merged\n+                    totcomment++;\n+                }\n+                lastWasComment = true;\n+            } else {\n+                totrecs++;\n+                lastWasComment = false;\n+            }\n+        }\n+        br.close();\n+        CSVFormat format = CSVFormat.DEFAULT;\n+        //\n+        format = format.withAllowMissingColumnNames(false);\n+        format = format.withCommentMarker('#');\n+        format = format.withDelimiter(',');\n+        format = format.withEscape('\\\\');\n+        format = format.withHeader(\"author\", \"title\", \"publishDate\");\n+        format = format.withHeaderComments(\"headerComment\");\n+        format = format.withNullString(\"NULL\");\n+        format = format.withIgnoreEmptyLines(true);\n+        format = format.withIgnoreSurroundingSpaces(true);\n+        format = format.withQuote('\"');\n+        format = format.withQuoteMode(QuoteMode.ALL);\n+        format = format.withRecordSeparator('\\n');\n+        format = format.withSkipHeaderRecord(false);\n+        //\n+        final CSVParser parser = CSVParser.parse(csvData, Charset.defaultCharset(), format);\n+        int comments = 0;\n+        int records = 0;\n+        for (final CSVRecord csvRecord : parser) {\n+//            System.out.println(csvRecord.isComment() + \"[\" + csvRecord.toString() + \"]\");\n+            records++;\n+            if (csvRecord.hasComment()) {\n+                comments++;\n+            }\n+        }\n+        // Comment lines are concatenated, in this example 4 lines become 2 comments.\n+        Assert.assertEquals(totcomment, comments);\n+        Assert.assertEquals(totrecs, records); // records includes the header\n+    }\n+}", "timestamp": 1462300134, "metainfo": ""}