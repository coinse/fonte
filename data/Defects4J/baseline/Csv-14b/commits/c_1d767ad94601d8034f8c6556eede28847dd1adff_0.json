{"sha": "1d767ad94601d8034f8c6556eede28847dd1adff", "log": "Sort members.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n  */\n public class CSVRecord implements Serializable, Iterable<String> {\n \n+    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n+\n     private static final long serialVersionUID = 1L;\n \n-    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n-\n-    /** The values of the record */\n-    private final String[] values;\n+    /** The accumulated comments (if any) */\n+    private final String comment;\n \n     /** The column name to index mapping. */\n     private final Map<String, Integer> mapping;\n \n-    /** The accumulated comments (if any) */\n-    private final String comment;\n-\n     /** The record number. */\n     private final long recordNumber;\n+\n+    /** The values of the record */\n+    private final String[] values;\n \n     CSVRecord(final String[] values, final Map<String, Integer> mapping,\n             final String comment, final long recordNumber) {\n     }\n \n     /**\n+     * Returns the comment for this record, if any.\n+     *\n+     * @return the comment for this record, or null if no comment for this\n+     *         record is available.\n+     */\n+    public String getComment() {\n+        return comment;\n+    }\n+\n+    /**\n+     * Returns the number of this record in the parsed CSV file.\n+     *\n+     * @return the number of this record.\n+     */\n+    public long getRecordNumber() {\n+        return recordNumber;\n+    }\n+\n+    /**\n      * Returns true if this record is consistent, false if not. Currently, the only check is matching the record size to\n      * the header size. Some programs can export files that fails this test but still produce parsable files.\n      *\n         return Arrays.asList(values).iterator();\n     }\n \n-    String[] values() {\n-        return values;\n-    }\n-\n-    /**\n-     * Returns the comment for this record, if any.\n-     *\n-     * @return the comment for this record, or null if no comment for this\n-     *         record is available.\n-     */\n-    public String getComment() {\n-        return comment;\n-    }\n-\n-    /**\n-     * Returns the number of this record in the parsed CSV file.\n-     *\n-     * @return the number of this record.\n-     */\n-    public long getRecordNumber() {\n-        return recordNumber;\n-    }\n-\n     /**\n      * Returns the number of values in this record.\n      *\n         return Arrays.toString(values);\n     }\n \n+    String[] values() {\n+        return values;\n+    }\n+\n \n }", "timestamp": 1375364597, "metainfo": ""}