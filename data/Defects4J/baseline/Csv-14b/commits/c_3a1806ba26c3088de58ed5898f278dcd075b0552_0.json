{"sha": "3a1806ba26c3088de58ed5898f278dcd075b0552", "log": "Split up escape testing into separate methods, add escaping tests that should work after CSV-58 is resolved (currently ignored)  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n import java.io.IOException;\n import java.io.StringReader;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n \n /**\n     }\n \n     @Test\n-    public void testEscaping() throws Exception {\n-        final String code = \"plain,\" +\n-        \t\t\"CR!\" + CR + \"Escaped,\" +\n-        \t\t\"LF!\" + LF +\"Escaped,\" +\n-                \"TAB!\" + TAB +\"Escaped,\" +\n-                \"BACKSPACE!\" + BACKSPACE +\"Escaped,\" +\n-                \"FF!\" + FF +\"Escaped\";\n-        final Lexer lexer = getLexer(code, CSVFormat.newBuilder().withEscape('!').build());\n-        assertTokenEquals(TOKEN, \"plain\", lexer.nextToken(new Token()));\n-        assertTokenEquals(TOKEN, \"CR\" + CR + \"Escaped\", lexer.nextToken(new Token()));\n-        assertTokenEquals(TOKEN, \"LF\" + LF + \"Escaped\", lexer.nextToken(new Token()));\n-        assertTokenEquals(TOKEN, \"TAB\" + TAB + \"Escaped\", lexer.nextToken(new Token()));\n-        assertTokenEquals(TOKEN, \"BACKSPACE\" + BACKSPACE + \"Escaped\", lexer.nextToken(new Token()));\n-        assertTokenEquals(EOF, \"FF\" + FF + \"Escaped\", lexer.nextToken(new Token()));\n+    public void testEscapedCR() throws Exception {\n+        final Lexer lexer = getLexer(\"character\\\\\" + CR + \"Escaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        assertTokenEquals(EOF, \"character\" + CR + \"Escaped\", lexer.nextToken(new Token()));\n+    }\n+\n+    @Test\n+    public void testEscapedLF() throws Exception {\n+        final Lexer lexer = getLexer(\"character\\\\\" + LF + \"Escaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        assertTokenEquals(EOF, \"character\" + LF + \"Escaped\", lexer.nextToken(new Token()));\n+    }\n+\n+    @Test\n+    public void testEscapedTab() throws Exception {\n+        final Lexer lexer = getLexer(\"character\\\\\" + TAB + \"Escaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        assertTokenEquals(EOF, \"character\" + TAB + \"Escaped\", lexer.nextToken(new Token()));\n+    }\n+\n+    @Test\n+    public void testEscapeBackspace() throws Exception {\n+        final Lexer lexer = getLexer(\"character\\\\\" + BACKSPACE + \"Escaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        assertTokenEquals(EOF, \"character\" + BACKSPACE + \"Escaped\", lexer.nextToken(new Token()));\n+    }\n+\n+    @Test\n+    public void testEscapeFF() throws Exception {\n+        final Lexer lexer = getLexer(\"character\\\\\" + FF + \"Escaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        assertTokenEquals(EOF, \"character\" + FF + \"Escaped\", lexer.nextToken(new Token()));\n+    }\n+\n+    @Test\n+    public void testEscapedMySqlNullValue() throws Exception {\n+        // MySQL uses \\N to symbolize null values. We have to restore this\n+        final Lexer lexer = getLexer(\"character\\\\\\\\NEscaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        assertTokenEquals(EOF, \"character\\\\NEscaped\", lexer.nextToken(new Token()));\n+    }\n+\n+    // FIXME this should work after CSV-58 is resolved. Currently the result will be \"characteraEscaped\"\n+    @Test\n+    @Ignore\n+    public void testEscapedCharacter() throws Exception {\n+        final Lexer lexer = getLexer(\"character\\\\aEscaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        assertTokenEquals(EOF, \"character\\\\aEscaped\", lexer.nextToken(new Token()));\n+    }\n+\n+    // FIXME this should work after CSV-58 is resolved. Currentyl the result will be \"characterCREscaped\"\n+    @Test\n+    @Ignore\n+    public void testEscapedControlCharacter() throws Exception {\n+        final Lexer lexer = getLexer(\"character!rEscaped\", CSVFormat.newBuilder().withEscape('!').build());\n+        assertTokenEquals(EOF, \"character!rEscaped\", lexer.nextToken(new Token()));\n     }\n \n     @Test(expected = IOException.class)", "timestamp": 1364131762, "metainfo": ""}