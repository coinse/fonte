{"sha": "43b777b9829141a3eb417ebf3ce49c8444884af0", "log": "Made the static fields final in CSVStrategy  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVStrategy.java\n+++ b/src/main/java/org/apache/commons/csv/CSVStrategy.java\n     // an EOF signal (-1), and because \\ufffe in UTF-16 would be\n     // encoded as two chars (using surrogates) and thus there should never\n     // be a collision with a real text char.\n-    public static char COMMENTS_DISABLED = (char) -2;\n-    public static char ESCAPE_DISABLED = (char) -2;\n-    public static char ENCAPSULATOR_DISABLED = (char) -2;\n+    public static final char COMMENTS_DISABLED = (char) -2;\n+    public static final char ESCAPE_DISABLED = (char) -2;\n+    public static final char ENCAPSULATOR_DISABLED = (char) -2;\n \n-    public static CSVStrategy DEFAULT_STRATEGY = new CSVStrategy(',', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true,\n-            true, false, true);\n-    public static CSVStrategy EXCEL_STRATEGY = new CSVStrategy(',', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, false,\n-            false, false, false);\n-    public static CSVStrategy TDF_STRATEGY = new CSVStrategy('\\t', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true,\n-            true, false, true);\n+    public static final CSVStrategy DEFAULT_STRATEGY = new CSVStrategy(',', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true, true, false, true);\n+    public static final CSVStrategy EXCEL_STRATEGY = new CSVStrategy(',', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, false, false, false, false);\n+    public static final CSVStrategy TDF_STRATEGY = new CSVStrategy('\\t', '\"', COMMENTS_DISABLED, ESCAPE_DISABLED, true, true, false, true);\n \n \n     public CSVStrategy(char delimiter, char encapsulator, char commentStart) {\n     }\n \n     /**\n-     * Customized CSV strategy setter.\n+     * Customized CSV strategy constructor.\n      *\n-     * @param delimiter                a Char used for value separation\n-     * @param encapsulator             a Char used as value encapsulation marker\n-     * @param commentStart             a Char used for comment identification\n-     * @param escape                   a Char used to escape special characters in values\n-     * @param ignoreLeadingWhitespace  TRUE when leading whitespaces should be\n-     *                                 ignored\n-     * @param ignoreTrailingWhitespace TRUE when trailing whitespaces should be\n-     *                                 ignored\n-     * @param interpretUnicodeEscapes  TRUE when unicode escapes should be\n-     *                                 interpreted\n-     * @param ignoreEmptyLines         TRUE when the parser should skip emtpy lines\n+     * @param delimiter                 a char used for value separation\n+     * @param encapsulator              a char used as value encapsulation marker\n+     * @param commentStart              a char used for comment identification\n+     * @param escape                    a char used to escape special characters in values\n+     * @param ignoreLeadingWhitespaces  TRUE when leading whitespaces should be ignored\n+     * @param ignoreTrailingWhitespaces TRUE when trailing whitespaces should be ignored\n+     * @param interpretUnicodeEscapes   TRUE when unicode escapes should be interpreted\n+     * @param ignoreEmptyLines          TRUE when the parser should skip emtpy lines\n      */\n     public CSVStrategy(\n             char delimiter,\n             char encapsulator,\n             char commentStart,\n             char escape,\n-            boolean ignoreLeadingWhitespace,\n-            boolean ignoreTrailingWhitespace,\n+            boolean ignoreLeadingWhitespaces,\n+            boolean ignoreTrailingWhitespaces,\n             boolean interpretUnicodeEscapes,\n             boolean ignoreEmptyLines) {\n-        setDelimiter(delimiter);\n-        setEncapsulator(encapsulator);\n-        setCommentStart(commentStart);\n-        setEscape(escape);\n-        setIgnoreLeadingWhitespaces(ignoreLeadingWhitespace);\n-        setIgnoreTrailingWhitespaces(ignoreTrailingWhitespace);\n-        setUnicodeEscapeInterpretation(interpretUnicodeEscapes);\n-        setIgnoreEmptyLines(ignoreEmptyLines);\n+        this.delimiter = delimiter;\n+        this.encapsulator = encapsulator;\n+        this.commentStart = commentStart;\n+        this.escape = escape;\n+        this.ignoreLeadingWhitespaces = ignoreLeadingWhitespaces;\n+        this.ignoreTrailingWhitespaces = ignoreTrailingWhitespaces;\n+        this.interpretUnicodeEscapes = interpretUnicodeEscapes;\n+        this.ignoreEmptyLines = ignoreEmptyLines;\n     }\n \n     /**\n             char delimiter,\n             char encapsulator,\n             char commentStart,\n-            boolean ignoreLeadingWhitespace,\n+            boolean ignoreLeadingWhitespaces,\n             boolean interpretUnicodeEscapes,\n             boolean ignoreEmptyLines) {\n-        this(delimiter, encapsulator, commentStart, CSVStrategy.ESCAPE_DISABLED, ignoreLeadingWhitespace,\n+        this(delimiter, encapsulator, commentStart, CSVStrategy.ESCAPE_DISABLED, ignoreLeadingWhitespaces,\n                 true, interpretUnicodeEscapes, ignoreEmptyLines);\n     }\n \n         return this.interpretUnicodeEscapes;\n     }\n \n-    public void setIgnoreEmptyLines(boolean ignoreEmptyLines) {\n-        this.ignoreEmptyLines = ignoreEmptyLines;\n-    }\n-\n     public boolean getIgnoreEmptyLines() {\n         return this.ignoreEmptyLines;\n-    }\n-\n-    public void setPrinterNewline(String newline) {\n-        this.printerNewline = newline;\n     }\n \n     public String getPrinterNewline() {", "timestamp": 1320848182, "metainfo": ""}