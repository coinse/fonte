{"sha": "9a705d8605583b9614bfd7ad8117e01dc8f3e13a", "log": "Initial checkin of test harness  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/PerformanceTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.csv;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+\n+/**\n+ * Basic test harness.\n+ * \n+ * Requires test file to be downloaded separately.\n+ * \n+ */\n+@SuppressWarnings(\"boxing\")\n+public class PerformanceTest {\n+\n+    private static final String[] PROPS = {\n+        \"java.version\",                  // Java Runtime Environment version \n+        \"java.vendor\",                   // Java Runtime Environment vendor \n+//        \"java.vm.specification.version\", // Java Virtual Machine specification version \n+//        \"java.vm.specification.vendor\",  // Java Virtual Machine specification vendor \n+//        \"java.vm.specification.name\",    // Java Virtual Machine specification name \n+        \"java.vm.version\",               // Java Virtual Machine implementation version \n+//        \"java.vm.vendor\",                // Java Virtual Machine implementation vendor \n+        \"java.vm.name\",                  // Java Virtual Machine implementation name \n+//        \"java.specification.version\",    // Java Runtime Environment specification version \n+//        \"java.specification.vendor\",     // Java Runtime Environment specification vendor \n+//        \"java.specification.name\",       // Java Runtime Environment specification name \n+\n+        \"os.name\",                       // Operating system name \n+        \"os.arch\",                       // Operating system architecture \n+        \"os.version\",                    // Operating system version \n+ \n+    };\n+    \n+    private static int max = 10;\n+\n+    private static int num = 0; // number of elapsed times recorded\n+    private static long[] elapsedTimes = new long[max];\n+    \n+    private static final CSVFormat format = CSVFormat.DEFAULT.withSurroundingSpacesIgnored(false);\n+\n+    public static void main(String [] args) throws Exception {\n+        for(String p : PROPS) {\n+            System.out.println(p+\"=\"+System.getProperty(p));            \n+        }\n+        System.out.println(\"Max count: \"+max+\"\\n\");\n+\n+        testReadBigFile(false);\n+        testReadBigFile(true);\n+        testParseCommonsCSV();\n+    }\n+\n+    private static BufferedReader getReader() throws IOException {\n+        return new BufferedReader(new FileReader(\"worldcitiespop.txt\"));\n+    }\n+\n+    // Container for basic statistics\n+    private static class Stats {\n+        final int count;\n+        final int fields;\n+        Stats(int c, int f) {\n+            count=c;\n+            fields=f;\n+        }\n+    }\n+\n+    // Display end stats; store elapsed for average\n+    private static void show(String msg, Stats s, long start) {\n+        final long elapsed = System.currentTimeMillis() - start;\n+        System.out.printf(\"%-20s: %5dms \" + s.count + \" lines \"+ s.fields + \" fields%n\",msg,elapsed);\n+        elapsedTimes[num++]=elapsed;\n+    }\n+\n+    // calculate and show average\n+    private static void show(){\n+        long tot = 0;\n+        if (num > 1) {\n+            for(int i=1; i < num; i++) { // skip first test\n+                tot += elapsedTimes[i];\n+            }\n+            System.out.printf(\"%-20s: %5dms%n%n\", \"Average(not first)\", (tot/(num-1)));\n+        }\n+        num=0; // ready for next set\n+    }\n+\n+    private static void testReadBigFile(boolean split) throws Exception {\n+       for (int i = 0; i < max; i++) {\n+           BufferedReader in = getReader();\n+           long t0 = System.currentTimeMillis();\n+           Stats s = readAll(in, split);\n+           in.close();\n+           show(split?\"file+split\":\"file\", s, t0);\n+       }\n+       show();\n+   }\n+\n+   private static Stats readAll(BufferedReader in, boolean split) throws IOException {\n+       int count = 0;\n+       int fields = 0;\n+       String record;\n+       while ((record=in.readLine()) != null) {\n+           count++;\n+           fields+= split ? record.split(\",\").length : 1;\n+       }\n+       return new Stats(count, fields);\n+   }\n+\n+   private static void testParseCommonsCSV() throws Exception {\n+       for (int i = 0; i < max; i++) {\n+           final BufferedReader reader = getReader();\n+           CSVParser parser = new CSVParser(reader, format);\n+           long t0 = System.currentTimeMillis();\n+           Stats s = iterate(parser);\n+           reader.close();\n+           show(\"CSV\", s, t0);\n+       }\n+       show();\n+   }\n+\n+   private static Stats iterate(Iterable<CSVRecord> it) {\n+       int count = 0;\n+       int fields = 0;\n+       for (CSVRecord record : it) {\n+           count++;\n+           fields+=record.size();\n+       }\n+       return new Stats(count, fields);\n+   }\n+\n+}", "timestamp": 1331960269, "metainfo": ""}