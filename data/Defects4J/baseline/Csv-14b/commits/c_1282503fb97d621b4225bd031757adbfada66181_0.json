{"sha": "1282503fb97d621b4225bd031757adbfada66181", "log": "<action issue=\"CSV-120\" type=\"add\" dev=\"ggregory\" due-to=\"Sergei Lebedev\">CSVFormat#withHeader doesn't work with CSVPrinter</action>  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      * @param out\n      *        the output\n      * @return a printer to an output\n-     */\n-    public CSVPrinter print(final Appendable out) {\n+     * @throws IOException\n+     *         thrown if the optional header cannot be printed.\n+     */\n+    public CSVPrinter print(final Appendable out) throws IOException {\n         return new CSVPrinter(out, this);\n     }\n \n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n     /**\n      * Creates a printer that will print values to the given stream following the CSVFormat.\n      * <p>\n-     * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats\n-     * (encapsulation and escaping with a different character) are not supported.\n+     * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats (encapsulation\n+     * and escaping with a different character) are not supported.\n      * </p>\n-     *\n+     * \n      * @param out\n-     *            stream to which to print. Must not be null.\n+     *        stream to which to print. Must not be null.\n      * @param format\n-     *            the CSV format. Must not be null.\n+     *        the CSV format. Must not be null.\n+     * @throws IOException\n+     *         thrown if the optional header cannot be printed.\n      * @throws IllegalArgumentException\n-     *             thrown if the parameters of the format are inconsistent or if either out or format are null.\n-     */\n-    public CSVPrinter(final Appendable out, final CSVFormat format) {\n+     *         thrown if the parameters of the format are inconsistent or if either out or format are null.\n+     */\n+    public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {\n         Assertions.notNull(out, \"out\");\n         Assertions.notNull(format, \"format\");\n \n         this.out = out;\n         this.format = format;\n         this.format.validate();\n+        // TODO: Is it a good idea to do this here instead of on the first call to a print method?\n+        // It seems a pain to have to track whether the header has already been printed or not.\n+        if (format.getHeader() != null) {\n+            this.printRecord((Object[]) format.getHeader());\n+        }\n     }\n \n     // ======================================================\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n     }\n \n     @Test\n+    public void testHeader() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null)\n+                .withHeader(\"C1\", \"C2\", \"C3\"));\n+        printer.printRecord(\"a\", \"b\", \"c\");\n+        printer.printRecord(\"x\", \"y\", \"z\");\n+        assertEquals(\"C1,C2,C3\\r\\na,b,c\\r\\nx,y,z\\r\\n\", sw.toString());\n+        printer.close();\n+    }\n+\n+    @Test\n     public void testEOLPlain() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null));", "timestamp": 1402352482, "metainfo": ""}