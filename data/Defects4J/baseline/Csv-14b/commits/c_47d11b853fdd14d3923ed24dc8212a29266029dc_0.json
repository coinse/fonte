{"sha": "47d11b853fdd14d3923ed24dc8212a29266029dc", "log": "Sort method.", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n     }\n \n     @Test\n+    public void testPrintCustomNullValues() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withNullString(\"NULL\"))) {\n+            printer.printRecord(\"a\", null, \"b\");\n+            assertEquals(\"a,NULL,b\" + recordSeparator, sw.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testPrinter1() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n+            printer.printRecord(\"a\", \"b\");\n+            assertEquals(\"a,b\" + recordSeparator, sw.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testPrinter2() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n+            printer.printRecord(\"a,b\", \"b\");\n+            assertEquals(\"\\\"a,b\\\",b\" + recordSeparator, sw.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testPrinter3() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n+            printer.printRecord(\"a, b\", \"b \");\n+            assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + recordSeparator, sw.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testPrinter4() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n+            printer.printRecord(\"a\", \"b\\\"c\");\n+            assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + recordSeparator, sw.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testPrinter5() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n+            printer.printRecord(\"a\", \"b\\nc\");\n+            assertEquals(\"a,\\\"b\\nc\\\"\" + recordSeparator, sw.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testPrinter6() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n+            printer.printRecord(\"a\", \"b\\r\\nc\");\n+            assertEquals(\"a,\\\"b\\r\\nc\\\"\" + recordSeparator, sw.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testPrinter7() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n+            printer.printRecord(\"a\", \"b\\\\c\");\n+            assertEquals(\"a,b\\\\c\" + recordSeparator, sw.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testPrintNullValues() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n+            printer.printRecord(\"a\", null, \"b\");\n+            assertEquals(\"a,,b\" + recordSeparator, sw.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testPrintToFileWithCharsetUtf16Be() throws IOException {\n+        File file = File.createTempFile(getClass().getName(), \".csv\");\n+        try (final CSVPrinter printer = CSVFormat.DEFAULT.print(file, StandardCharsets.UTF_16BE)) {\n+            printer.printRecord(\"a\", \"b\\\\c\");\n+        }\n+        assertEquals(\"a,b\\\\c\" + recordSeparator, FileUtils.readFileToString(file, StandardCharsets.UTF_16BE));\n+    }\n+\n+    @Test\n     public void testPrintToFileWithDefaultCharset() throws IOException {\n         File file = File.createTempFile(getClass().getName(), \".csv\");\n         try (final CSVPrinter printer = CSVFormat.DEFAULT.print(file, Charset.defaultCharset())) {\n             printer.printRecord(\"a\", \"b\\\\c\");\n         }\n         assertEquals(\"a,b\\\\c\" + recordSeparator, FileUtils.readFileToString(file, Charset.defaultCharset()));\n-    }\n-\n-    @Test\n-    public void testPrintToFileWithCharsetUtf16Be() throws IOException {\n-        File file = File.createTempFile(getClass().getName(), \".csv\");\n-        try (final CSVPrinter printer = CSVFormat.DEFAULT.print(file, StandardCharsets.UTF_16BE)) {\n-            printer.printRecord(\"a\", \"b\\\\c\");\n-        }\n-        assertEquals(\"a,b\\\\c\" + recordSeparator, FileUtils.readFileToString(file, StandardCharsets.UTF_16BE));\n-    }\n-\n-    @Test\n-    public void testPrintCustomNullValues() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withNullString(\"NULL\"))) {\n-            printer.printRecord(\"a\", null, \"b\");\n-            assertEquals(\"a,NULL,b\" + recordSeparator, sw.toString());\n-        }\n-    }\n-\n-    @Test\n-    public void testPrinter1() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n-            printer.printRecord(\"a\", \"b\");\n-            assertEquals(\"a,b\" + recordSeparator, sw.toString());\n-        }\n-    }\n-\n-    @Test\n-    public void testPrinter2() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n-            printer.printRecord(\"a,b\", \"b\");\n-            assertEquals(\"\\\"a,b\\\",b\" + recordSeparator, sw.toString());\n-        }\n-    }\n-\n-    @Test\n-    public void testPrinter3() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n-            printer.printRecord(\"a, b\", \"b \");\n-            assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + recordSeparator, sw.toString());\n-        }\n-    }\n-\n-    @Test\n-    public void testPrinter4() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n-            printer.printRecord(\"a\", \"b\\\"c\");\n-            assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + recordSeparator, sw.toString());\n-        }\n-    }\n-\n-    @Test\n-    public void testPrinter5() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n-            printer.printRecord(\"a\", \"b\\nc\");\n-            assertEquals(\"a,\\\"b\\nc\\\"\" + recordSeparator, sw.toString());\n-        }\n-    }\n-\n-    @Test\n-    public void testPrinter6() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n-            printer.printRecord(\"a\", \"b\\r\\nc\");\n-            assertEquals(\"a,\\\"b\\r\\nc\\\"\" + recordSeparator, sw.toString());\n-        }\n-    }\n-\n-    @Test\n-    public void testPrinter7() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n-            printer.printRecord(\"a\", \"b\\\\c\");\n-            assertEquals(\"a,b\\\\c\" + recordSeparator, sw.toString());\n-        }\n-    }\n-\n-    @Test\n-    public void testPrintNullValues() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT)) {\n-            printer.printRecord(\"a\", null, \"b\");\n-            assertEquals(\"a,,b\" + recordSeparator, sw.toString());\n-        }\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void testTrailingDelimiterOnTwoColumns() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withTrailingDelimiter())) {\n+            printer.printRecord(\"A\", \"B\");\n+            assertEquals(\"A,B,\\r\\n\", sw.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void testTrimOffOneColumn() throws IOException {\n+        final StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withTrim(false))) {\n+            printer.print(\" A \");\n+            assertEquals(\"\\\" A \\\"\", sw.toString());\n+        }\n+    }\n+\n+    @Test\n     public void testTrimOnOneColumn() throws IOException {\n         final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withTrim())) {\n         }\n     }\n \n-    @Test\n-    public void testTrailingDelimiterOnTwoColumns() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withTrailingDelimiter())) {\n-            printer.printRecord(\"A\", \"B\");\n-            assertEquals(\"A,B,\\r\\n\", sw.toString());\n-        }\n-    }\n-\n-    @Test\n-    public void testTrimOffOneColumn() throws IOException {\n-        final StringWriter sw = new StringWriter();\n-        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withTrim(false))) {\n-            printer.print(\" A \");\n-            assertEquals(\"\\\" A \\\"\", sw.toString());\n-        }\n-    }\n-\n     private String[] toFirstRecordValues(final String expected, final CSVFormat format) throws IOException {\n         return CSVParser.parse(expected, format).getRecords().get(0).values();\n     }", "timestamp": 1469921627, "metainfo": ""}