{"sha": "ac46f73b259412122680f217020ad473dc6e8781", "log": "[CSV-189] CSVParser: Add factory method accepting InputStream.", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n \n package org.apache.commons.csv;\n \n+import static org.apache.commons.csv.Token.Type.TOKEN;\n+\n import java.io.Closeable;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.Reader;\n import java.io.StringReader;\n+import java.io.UnsupportedEncodingException;\n import java.net.URL;\n import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.NoSuchElementException;\n import java.util.TreeMap;\n \n-import static org.apache.commons.csv.Token.Type.*;\n-\n /**\n  * Parses CSV files according to the specified format.\n  *\n  * @see <a href=\"package-summary.html\">package documentation for more details</a>\n  */\n public final class CSVParser implements Iterable<CSVRecord>, Closeable {\n+\n+    /**\n+     * Customized CSV parser using the given {@link CSVFormat}\n+     *\n+     * <p>\n+     * If you do not read all records from the given {@code reader}, you should\n+     * call {@link #close()} on the parser, unless you close the {@code reader}.\n+     * </p>\n+     *\n+     * @param reader\n+     *            a Reader containing CSV-formatted input. Must not be null.\n+     * @param charsetName\n+     *            The name of a supported {@link java.nio.charset.Charset\n+     *            </code>charset<code>}\n+     * @param format\n+     *            the CSVFormat used for CSV parsing. Must not be null.\n+     * @throws IllegalArgumentException\n+     *             If the parameters of the format are inconsistent or if either\n+     *             reader or format are null.\n+     * @throws  UnsupportedEncodingException\n+     *             If the named charset is not supported\n+     * @throws IOException\n+     *             If there is a problem reading the header or skipping the\n+     *             first record\n+     * @since 1.5\n+     */\n+    @SuppressWarnings(\"resource\")\n+    public static CSVParser parse(final InputStream inputStream, final String charset, final CSVFormat format) throws IOException {\n+        Assertions.notNull(inputStream, \"inputStream\");\n+        Assertions.notNull(format, \"format\");\n+        return parse(new InputStreamReader(inputStream, charset), format);\n+    }\n+\n+    /**\n+     * Customized CSV parser using the given {@link CSVFormat}\n+     *\n+     * <p>\n+     * If you do not read all records from the given {@code reader}, you should\n+     * call {@link #close()} on the parser, unless you close the {@code reader}.\n+     * </p>\n+     *\n+     * @param reader\n+     *            a Reader containing CSV-formatted input. Must not be null.\n+     * @param format\n+     *            the CSVFormat used for CSV parsing. Must not be null.\n+     * @throws IllegalArgumentException\n+     *             If the parameters of the format are inconsistent or if either\n+     *             reader or format are null.\n+     * @throws IOException\n+     *             If there is a problem reading the header or skipping the\n+     *             first record\n+     * @since 1.5\n+     */\n+    public static CSVParser parse(Reader reader, final CSVFormat format) throws IOException {\n+        return new CSVParser(reader, format);\n+    }\n \n     /**\n      * Creates a parser for the given {@link File}.\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n     private static final String[][] RESULT = { { \"a\", \"b\", \"c\", \"d\" }, { \"a\", \"b\", \"1 2\" }, { \"foo baar\", \"b\", \"\" },\n             { \"foo\\n,,\\n\\\",,\\n\\\"\", \"d\", \"e\" } };\n \n+    private BOMInputStream createBOMInputStream(String resource) throws IOException {\n+        final URL url = ClassLoader.getSystemClassLoader().getResource(resource);\n+        return new BOMInputStream(url.openStream());\n+    }\n+    \n     @Test\n     public void testBackslashEscaping() throws IOException {\n \n     }\n \n     @Test\n-    public void testBOMInputStream() throws IOException {\n-        final URL url = ClassLoader.getSystemClassLoader().getResource(\"CSVFileParser/bom.csv\");\n-        try (final Reader reader = new InputStreamReader(new BOMInputStream(url.openStream()), \"UTF-8\");\n+    public void testBOMInputStream_ParserWithReader() throws IOException {\n+        try (final Reader reader = new InputStreamReader(createBOMInputStream(\"CSVFileParser/bom.csv\"), \"UTF-8\");\n                 final CSVParser parser = new CSVParser(reader, CSVFormat.EXCEL.withHeader())) {\n+            for (final CSVRecord record : parser) {\n+                final String string = record.get(\"Date\");\n+                Assert.assertNotNull(string);\n+                // System.out.println(\"date: \" + record.get(\"Date\"));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testBOMInputStream_parseWithReader() throws IOException {\n+        try (final Reader reader = new InputStreamReader(createBOMInputStream(\"CSVFileParser/bom.csv\"), \"UTF-8\");\n+                final CSVParser parser = CSVParser.parse(reader, CSVFormat.EXCEL.withHeader())) {\n+            for (final CSVRecord record : parser) {\n+                final String string = record.get(\"Date\");\n+                Assert.assertNotNull(string);\n+                // System.out.println(\"date: \" + record.get(\"Date\"));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testBOMInputStream_ParserWithInputStream() throws IOException {\n+        try (final BOMInputStream inputStream = createBOMInputStream(\"CSVFileParser/bom.csv\");\n+                final CSVParser parser = CSVParser.parse(inputStream, \"UTF-8\", CSVFormat.EXCEL.withHeader())) {\n             for (final CSVRecord record : parser) {\n                 final String string = record.get(\"Date\");\n                 Assert.assertNotNull(string);", "timestamp": 1469901433, "metainfo": ""}