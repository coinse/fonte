{"sha": "59411494e069c8aae9123f182aa3a70136bd3dc3", "log": "Use final.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/Assertions.java\n+++ b/src/main/java/org/apache/commons/csv/Assertions.java\n         // can not be instantiated\n     }\n \n-    public static void notNull(Object parameter, String parameterName) {\n+    public static void notNull(final Object parameter, final String parameterName) {\n         if (parameter == null) {\n             throw new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n         }\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n             final Quote quotePolicy, final Character commentStart,\n             final Character escape, final boolean ignoreSurroundingSpaces,\n             final boolean ignoreEmptyLines, final String recordSeparator,\n-            final String nullString, final String[] header, boolean skipHeaderRecord) {\n+            final String nullString, final String[] header, final boolean skipHeaderRecord) {\n         if (isLineBreak(delimiter)) {\n             throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n         }\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n-    public static CSVParser parse(File file, final CSVFormat format) throws IOException {\n+    public static CSVParser parse(final File file, final CSVFormat format) throws IOException {\n         Assertions.notNull(file, \"file\");\n         Assertions.notNull(format, \"format\");\n \n      * @throws IOException\n      *             If an I/O error occurs\n      */\n-    public static CSVParser parse(String string, final CSVFormat format) throws IOException {\n+    public static CSVParser parse(final String string, final CSVFormat format) throws IOException {\n         Assertions.notNull(string, \"string\");\n         Assertions.notNull(format, \"format\");\n \n      * @throws IOException\n      *             If an I/O error occurs\n      */\n-    public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException {\n+    public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException {\n         Assertions.notNull(url, \"url\");\n         Assertions.notNull(charset, \"charset\");\n         Assertions.notNull(format, \"format\");\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n      *            an enum\n      * @return the String at the given enum String\n      */\n-    public String get(Enum<?> e) {\n+    public String get(final Enum<?> e) {\n         return get(e.toString());\n     }\n \n      * @param map The Map to populate.\n      * @return the given map.\n      */\n-    public Map<String, String> putIn(Map<String, String> map) {\n-        for (Entry<String, Integer> entry : mapping.entrySet()) {\n+    public Map<String, String> putIn(final Map<String, String> map) {\n+        for (final Entry<String, Integer> entry : mapping.entrySet()) {\n             map.put(entry.getKey(), values[entry.getValue().intValue()]);\n         }\n         return map;\n--- a/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n         assertEquals(testName + \" Expected format \", line, format.toString());\n \n         // Now parse the file and compare against the expected results\n-        URL resource = ClassLoader.getSystemResource(\"CSVFileParser/\" + split[0]);\n+        final URL resource = ClassLoader.getSystemResource(\"CSVFileParser/\" + split[0]);\n         final CSVParser parser = CSVParser.parse(resource, Charset.forName(\"UTF-8\"), format);\n         for (final CSVRecord record : parser) {\n             String parsed = record.toString();\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n \n     @Test // TODO this may lead to strange behavior, throw an exception if iterator() has already been called?\n     public void testMultipleIterators() throws Exception {\n-        CSVParser parser = CSVParser.parse(\"a,b,c\" + CR + \"d,e,f\", CSVFormat.DEFAULT);\n-\n-        Iterator<CSVRecord> itr1 = parser.iterator();\n-        Iterator<CSVRecord> itr2 = parser.iterator();\n-\n-        CSVRecord first = itr1.next();\n+        final CSVParser parser = CSVParser.parse(\"a,b,c\" + CR + \"d,e,f\", CSVFormat.DEFAULT);\n+\n+        final Iterator<CSVRecord> itr1 = parser.iterator();\n+        final Iterator<CSVRecord> itr2 = parser.iterator();\n+\n+        final CSVRecord first = itr1.next();\n         assertEquals(\"a\", first.get(0));\n         assertEquals(\"b\", first.get(1));\n         assertEquals(\"c\", first.get(2));\n \n-        CSVRecord second = itr2.next();\n+        final CSVRecord second = itr2.next();\n         assertEquals(\"d\", second.get(0));\n         assertEquals(\"e\", second.get(1));\n         assertEquals(\"f\", second.get(2));\n--- a/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n     @Test\n     public void testIterator() {\n         int i = 0;\n-        for (String value : record) {\n+        for (final String value : record) {\n             assertEquals(values[i], value);\n             i++;\n         }\n \n     @Test\n     public void testPutInMap() {\n-        Map<String, String> map = new ConcurrentHashMap<String, String>();\n+        final Map<String, String> map = new ConcurrentHashMap<String, String>();\n         this.recordWithHeader.putIn(map);\n         this.validateMap(map, false);\n     }\n \n     @Test\n     public void testToMap() {\n-        Map<String, String> map = this.recordWithHeader.toMap();\n+        final Map<String, String> map = this.recordWithHeader.toMap();\n         this.validateMap(map, true);\n     }\n \n-    private void validateMap(Map<String, String> map, boolean allowsNulls) {\n+    private void validateMap(final Map<String, String> map, final boolean allowsNulls) {\n         assertTrue(map.containsKey(\"first\"));\n         assertTrue(map.containsKey(\"second\"));\n         assertTrue(map.containsKey(\"third\"));\n--- a/src/test/java/org/apache/commons/csv/FercGovTest.java\n+++ b/src/test/java/org/apache/commons/csv/FercGovTest.java\n \n     @Test\n     public void testContractFile() throws IOException {\n-        URL contractData = ClassLoader.getSystemClassLoader().getResource(\"ferc.gov/contract.txt\");\n+        final URL contractData = ClassLoader.getSystemClassLoader().getResource(\"ferc.gov/contract.txt\");\n         final CSVParser parser = CSVParser.parse(contractData, US_ASCII,\n                 CSVFormat.DEFAULT.withHeader());\n         try {\n \n     @Test\n     public void testTransactionFile() throws IOException {\n-        URL transactionData = ClassLoader.getSystemClassLoader().getResource(\"ferc.gov/transaction.txt\");\n+        final URL transactionData = ClassLoader.getSystemClassLoader().getResource(\"ferc.gov/transaction.txt\");\n         final CSVParser parser = CSVParser.parse(transactionData, US_ASCII,\n                 CSVFormat.DEFAULT.withHeader());\n         try {", "timestamp": 1390272270, "metainfo": ""}