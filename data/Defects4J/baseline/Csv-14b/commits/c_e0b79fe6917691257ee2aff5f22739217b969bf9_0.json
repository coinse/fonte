{"sha": "e0b79fe6917691257ee2aff5f22739217b969bf9", "log": "Make checkstyle happy: Line was longer than 120 chars, file contained tabs  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n+++ b/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n     /**\n      * Returns the last character that was read as an integer (0 to 65535). This will be the last character returned by\n      * any of the read methods. This will not include a character read using the {@link #lookAhead()} method. If no\n-     * character has been read then this will return {@link Constants#UNDEFINED}. If the end of the stream was reached on the\n-     * last read then this will return {@link Constants#END_OF_STREAM}.\n+     * character has been read then this will return {@link Constants#UNDEFINED}. If the end of the stream was reached\n+     * on the last read then this will return {@link Constants#END_OF_STREAM}.\n      *\n      * @return the last character that was read\n      */\n         return eolCounter + 1; // Allow for counter being incremented only at EOL\n     }\n \n-\tpublic boolean isClosed() {\n-\t\treturn closed;\n-\t}\n+    public boolean isClosed() {\n+        return closed;\n+    }\n \n-\t/**\n-\t * Closes the stream.\n-\t *\n-\t * @throws IOException\n-\t *             If an I/O error occurs\n-\t */\n-\t@Override\n-\tpublic void close() throws IOException {\n-\t\t// Set ivars before calling super close() in case close() throws an IOException.\n-\t\tclosed = true;\n-\t\tlastChar = END_OF_STREAM;\n-\t\tsuper.close();\n-\t}\n+    /**\n+     * Closes the stream.\n+     *\n+     * @throws IOException\n+     *             If an I/O error occurs\n+     */\n+    @Override\n+    public void close() throws IOException {\n+        // Set ivars before calling super close() in case close() throws an IOException.\n+        closed = true;\n+        lastChar = END_OF_STREAM;\n+        super.close();\n+    }\n \n }", "timestamp": 1376132835, "metainfo": ""}