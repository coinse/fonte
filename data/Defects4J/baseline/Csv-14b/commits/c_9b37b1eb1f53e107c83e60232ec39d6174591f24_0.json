{"sha": "9b37b1eb1f53e107c83e60232ec39d6174591f24", "log": "[CSV-192] Add convenience API CSVParser.parse(Path, Charset, CSVFormat)", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n import java.io.UnsupportedEncodingException;\n import java.net.URL;\n import java.nio.charset.Charset;\n+import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Iterator;\n         Assertions.notNull(inputStream, \"inputStream\");\n         Assertions.notNull(format, \"format\");\n         return parse(new InputStreamReader(inputStream, charset), format);\n+    }\n+\n+    /**\n+     * Creates a parser for the given {@link File}.\n+     *\n+     * <p><strong>Note:</strong> This method internally creates a FileReader using\n+     * {@link java.io.FileReader#FileReader(java.io.File)} which in turn relies on the default encoding of the JVM that\n+     * is executing the code. If this is insufficient create a URL to the file and use\n+     * {@link #parse(URL, Charset, CSVFormat)}</p>\n+     *\n+     * @param path\n+     *            a CSV file. Must not be null.\n+     * @param charset\n+     *            A charset\n+     * @param format\n+     *            the CSVFormat used for CSV parsing. Must not be null.\n+     * @return a new parser\n+     * @throws IllegalArgumentException\n+     *             If the parameters of the format are inconsistent or if either file or format are null.\n+     * @throws IOException\n+     *             If an I/O error occurs\n+     * @since 1.5\n+     */\n+    public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException {\n+        Assertions.notNull(path, \"path\");\n+        Assertions.notNull(format, \"format\");\n+        return parse(path.toFile(), charset, format);\n     }\n \n     /**", "timestamp": 1469902591, "metainfo": ""}