{"sha": "b6f0655a7107b9c817f10a215cea4da90b27281f", "log": "CSV-179: Add shortcut method for using first record as header to CSVFormat  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     }\n \n     /**\n+     * Returns a new {@code CSVFormat} using the first record as header.\n+     * \n+     * <p>\n+     * Calling this method is equivalent to calling:\n+     * </p>\n+     * <pre>\n+     * CSVFormat format = aFormat.withHeader().withSkipHeaderRecord();\n+     * </pre>\n+     *\n+     * @return A new CSVFormat that is equal to this but using the first record as header.\n+     * @see #withSkipHeaderRecord(boolean)\n+     * @see #withHeader(String...)\n+     * @since 1.3\n+     */\n+    public CSVFormat withFirstRecordAsHeader() {\n+        return withHeader().withSkipHeaderRecord();\n+    }\n+\n+    /**\n      * Returns a new {@code CSVFormat} with the header of the format set from the result set metadata. The header can\n      * either be parsed automatically from the input file with:\n      *\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n         assertEquals(CRLF, formatWithRecordSeparator.getRecordSeparator());\n     }\n \n+    @Test\n+    public void testWithFirstRecordAsHeader() throws Exception {\n+        final CSVFormat formatWithFirstRecordAsHeader = CSVFormat.DEFAULT.withFirstRecordAsHeader();\n+        assertTrue(formatWithFirstRecordAsHeader.getSkipHeaderRecord());\n+        assertTrue(formatWithFirstRecordAsHeader.getHeader().length == 0);\n+    }\n+\n     public enum Header {\n         Name, Email, Phone\n     }", "timestamp": 1462301013, "metainfo": ""}