{"sha": "1b4474c0a09d6d9a0015a1adbc7462b08941d393", "log": "Javadoc: Use the active voice and change one verb.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n import java.io.IOException;\n \n /**\n- * Print values as a comma separated list.\n+ * Prints values as a comma separated list.\n  */\n public class CSVPrinter {\n     \n     private boolean newLine = true;\n \n     /**\n-     * Create a printer that will print values to the given stream following the CSVFormat.\n+     * Creates a printer that will print values to the given stream following the CSVFormat.\n      * <p/>\n      * Currently, only a pure encapsulation format or a pure escaping format is supported. Hybrid formats\n      * (encapsulation and escaping with a different character) are not supported.\n     // ======================================================\n \n     /**\n-     * Output a blank line\n+     * Outputs a blank line\n      */\n     public void println() throws IOException {\n         out.append(format.getLineSeparator());\n     }\n \n     /**\n-     * Flush the underlying stream.\n+     * Flushes the underlying stream.\n      *\n      * @throws IOException\n      */\n     }\n \n     /**\n-     * Print a single line of comma separated values. The values will be quoted if needed. Quotes and newLine\n+     * Prints a single line of comma separated values. The values will be quoted if needed. Quotes and newLine\n      * characters will be escaped.\n      *\n      * @param values\n     }\n \n     /**\n-     * Put a comment on a new line among the comma separated values. Comments will always begin on a new line and\n+     * Prints a comment on a new line among the comma separated values. Comments will always begin on a new line and\n      * occupy a least one full line. The character specified to start comments and a space will be inserted at the\n      * beginning of each new line in the comment.\n      * <p/>\n     }\n \n     /**\n-     * Print the string as the next value on the line. The value will be escaped or encapsulated as needed if\n+     * Prints the string as the next value on the line. The value will be escaped or encapsulated as needed if\n      * checkForEscape==true\n      *\n      * @param value\n     }\n \n     /**\n-     * Print the string as the next value on the line. The value will be escaped or encapsulated as needed.\n+     * Prints the string as the next value on the line. The value will be escaped or encapsulated as needed.\n      *\n      * @param value\n      *            value to be outputted.", "timestamp": 1350186227, "metainfo": ""}