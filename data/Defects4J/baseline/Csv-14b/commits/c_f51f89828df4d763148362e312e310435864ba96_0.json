{"sha": "f51f89828df4d763148362e312e310435864ba96", "log": "Use is prefix for getters that return booleans  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      * @return <tt>true</tt> if headers are ignored when parsing the header line, <tt>false</tt> to throw an\n      *         {@link IllegalArgumentException}.\n      */\n-    public boolean getIgnoreEmptyHeaders() {\n+    public boolean isIgnoringEmptyHeaders() {\n         return ignoreEmptyHeaders;\n     }\n \n      * @return <tt>true</tt> if empty lines between records are ignored, <tt>false</tt> if they are turned into empty\n      *         records.\n      */\n-    public boolean getIgnoreEmptyLines() {\n+    public boolean isIgnoringEmptyLines() {\n         return ignoreEmptyLines;\n     }\n \n      * @return <tt>true</tt> if spaces around values are ignored, <tt>false</tt> if they are treated as part of the\n      *         value.\n      */\n-    public boolean getIgnoreSurroundingSpaces() {\n+    public boolean isIgnoringSurroundingSpaces() {\n         return ignoreSurroundingSpaces;\n     }\n \n      *\n      * @return whether to skip the header record.\n      */\n-    public boolean getSkipHeaderRecord() {\n+    public boolean isSkippingHeaderRecord() {\n         return skipHeaderRecord;\n     }\n \n      *\n      * @return {@code true} if a nullString is defined\n      */\n-    public boolean isNullHandling() {\n+    public boolean isHandlingNull() {\n         return nullString != null;\n     }\n \n             sb.append(' ');\n             sb.append(\"CommentStart=<\").append(commentStart).append('>');\n         }\n-        if (isNullHandling()) {\n+        if (isHandlingNull()) {\n             sb.append(' ');\n             sb.append(\"NullString=<\").append(nullString).append('>');\n         }\n             sb.append(' ');\n             sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');\n         }\n-        if (getIgnoreEmptyLines()) {\n+        if (isIgnoringEmptyLines()) {\n             sb.append(\" EmptyLines:ignored\");\n         }\n-        if (getIgnoreSurroundingSpaces()) {\n+        if (isIgnoringSurroundingSpaces()) {\n             sb.append(\" SurroundingSpaces:ignored\");\n         }\n         sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n                     headerRecord = nextRecord.values();\n                 }\n             } else {\n-                if (this.format.getSkipHeaderRecord()) {\n+                if (this.format.isSkippingHeaderRecord()) {\n                     this.nextRecord();\n                 }\n                 headerRecord = formatHeader;\n                     final String header = headerRecord[i];\n                     final boolean containsHeader = hdrMap.containsKey(header);\n                     final boolean emptyHeader = header == null || header.trim().isEmpty();\n-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {\n+                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.isIgnoringEmptyHeaders()))) {\n                         throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                 \"\\\" in \" + Arrays.toString(headerRecord));\n                     }\n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n         this.escape = mapNullToDisabled(format.getEscape());\n         this.quoteChar = mapNullToDisabled(format.getQuoteChar());\n         this.commentStart = mapNullToDisabled(format.getCommentStart());\n-        this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();\n-        this.ignoreEmptyLines = format.getIgnoreEmptyLines();\n+        this.ignoreSurroundingSpaces = format.isIgnoringSurroundingSpaces();\n+        this.ignoreEmptyLines = format.isIgnoringEmptyLines();\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n         assertEquals(null, RFC4180.getCommentStart());\n         assertEquals(',', RFC4180.getDelimiter());\n         assertEquals(null, RFC4180.getEscape());\n-        assertFalse(RFC4180.getIgnoreEmptyLines());\n+        assertFalse(RFC4180.isIgnoringEmptyLines());\n         assertEquals(Character.valueOf('\"'), RFC4180.getQuoteChar());\n         assertEquals(null, RFC4180.getQuotePolicy());\n         assertEquals(\"\\r\\n\", RFC4180.getRecordSeparator());\n         assertEquals(\"comment start\", CSVFormat.DEFAULT.getCommentStart(), format.getCommentStart());\n         assertEquals(\"record separator\", CSVFormat.DEFAULT.getRecordSeparator(), format.getRecordSeparator());\n         assertEquals(\"escape\", CSVFormat.DEFAULT.getEscape(), format.getEscape());\n-        assertEquals(\"trim\", CSVFormat.DEFAULT.getIgnoreSurroundingSpaces(), format.getIgnoreSurroundingSpaces());\n-        assertEquals(\"empty lines\", CSVFormat.DEFAULT.getIgnoreEmptyLines(), format.getIgnoreEmptyLines());\n+        assertEquals(\"trim\", CSVFormat.DEFAULT.isIgnoringSurroundingSpaces(), format.isIgnoringSurroundingSpaces());\n+        assertEquals(\"empty lines\", CSVFormat.DEFAULT.isIgnoringEmptyLines(), format.isIgnoringEmptyLines());\n     }\n \n     @Test\n \n     @Test\n     public void testWithIgnoreEmptyLines() throws Exception {\n-        assertFalse(CSVFormat.DEFAULT.withIgnoreEmptyLines(false).getIgnoreEmptyLines());\n-        assertTrue(CSVFormat.DEFAULT.withIgnoreEmptyLines(true).getIgnoreEmptyLines());\n+        assertFalse(CSVFormat.DEFAULT.withIgnoreEmptyLines(false).isIgnoringEmptyLines());\n+        assertTrue(CSVFormat.DEFAULT.withIgnoreEmptyLines(true).isIgnoringEmptyLines());\n     }\n \n     @Test\n     public void testWithIgnoreSurround() throws Exception {\n-        assertFalse(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(false).getIgnoreSurroundingSpaces());\n-        assertTrue(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true).getIgnoreSurroundingSpaces());\n+        assertFalse(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(false).isIgnoringSurroundingSpaces());\n+        assertTrue(CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true).isIgnoringSurroundingSpaces());\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/csv/LexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/LexerTest.java\n                 \"\\n\"+                      // 6c\n                 \"# Final comment\\n\";       // 7\n         final CSVFormat format = CSVFormat.DEFAULT.withCommentStart('#').withIgnoreEmptyLines(false);\n-        assertFalse(\"Should not ignore empty lines\", format.getIgnoreEmptyLines());\n+        assertFalse(\"Should not ignore empty lines\", format.isIgnoringEmptyLines());\n \n         final Lexer parser = getLexer(code, format);\n ", "timestamp": 1405365903, "metainfo": ""}