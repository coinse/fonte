{"sha": "b502c5a20d1c9d98f10cbe50ccb376b907f45172", "log": "Sort 1 method into place.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     }\n \n     /**\n+     * Returns a new {@code CSVFormat} with the header of the format defined by the enum class:\n+     *\n+     * <pre>\n+     * public enum Header {\n+     *     Name, Email, Phone\n+     * }\n+     *\n+     * CSVFormat format = aformat.withHeader(Header.class);\n+     * </pre>\n+     * <p>\n+     * The header is also used by the {@link CSVPrinter}..\n+     * </p>\n+     *\n+     * @param headerEnum\n+     *              the enum defining the header, {@code null} if disabled, empty if parsed automatically, user\n+     *              specified otherwise.\n+     *\n+     * @return A new CSVFormat that is equal to this but with the specified header\n+     * @see #withHeader(String...)\n+     * @see #withSkipHeaderRecord(boolean)\n+     * @since 1.3\n+     */\n+    public CSVFormat withHeader(final Class<? extends Enum<?>> headerEnum) {\n+        String[] header = null;\n+        if (headerEnum != null) {\n+            Enum<?>[] enumValues = headerEnum.getEnumConstants();\n+            header = new String[enumValues.length];\n+            for (int i = 0; i < enumValues.length; i++) {\n+                header[i] = enumValues[i].name();\n+            }\n+        }\n+        return withHeader(header);\n+    }\n+\n+    /**\n      * Returns a new {@code CSVFormat} with the header of the format set from the result set metadata. The header can\n      * either be parsed automatically from the input file with:\n      *\n     }\n \n     /**\n-     * Returns a new {@code CSVFormat} with the header of the format defined by the enum class:\n-     *\n-     * <pre>\n-     * public enum Header {\n-     *     Name, Email, Phone\n-     * }\n-     *\n-     * CSVFormat format = aformat.withHeader(Header.class);\n-     * </pre>\n-     * <p>\n-     * The header is also used by the {@link CSVPrinter}..\n-     * </p>\n-     *\n-     * @param headerEnum\n-     *              the enum defining the header, {@code null} if disabled, empty if parsed automatically, user\n-     *              specified otherwise.\n-     *\n-     * @return A new CSVFormat that is equal to this but with the specified header\n-     * @see #withHeader(String...)\n-     * @see #withSkipHeaderRecord(boolean)\n-     * @since 1.3\n-     */\n-    public CSVFormat withHeader(final Class<? extends Enum<?>> headerEnum) {\n-        String[] header = null;\n-        if (headerEnum != null) {\n-            Enum<?>[] enumValues = headerEnum.getEnumConstants();\n-            header = new String[enumValues.length];\n-            for (int i = 0; i < enumValues.length; i++) {\n-                header[i] = enumValues[i].name();\n-            }\n-        }\n-        return withHeader(header);\n-    }\n-\n-    /**\n      * Returns a new {@code CSVFormat} with the header comments of the format set to the given values. The comments will\n      * be printed first, before the headers. This setting is ignored by the parser.\n      *", "timestamp": 1462803837, "metainfo": ""}