{"sha": "103995083c1cf8f30c02c8589a4e800f9ed303fa", "log": "Sort members.  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n         parser.close();\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testDuplicateHeaders() throws Exception {\n+        CSVParser.parse(\"a,b,a\\n1,2,3\\nx,y,z\", CSVFormat.DEFAULT.withHeader(new String[] {}));\n+    }\n+\n     @Test\n     public void testEmptyFile() throws Exception {\n         final CSVParser parser = CSVParser.parse(\"\", CSVFormat.DEFAULT);\n         final String[] codes = { \"hello,\\r\\n\\r\\n\\r\\n\", \"hello,\\n\\n\\n\", \"hello,\\\"\\\"\\r\\n\\r\\n\\r\\n\", \"hello,\\\"\\\"\\n\\n\\n\" };\n         final String[][] res = { { \"hello\", \"\" }, { \"\" }, // Excel format does not ignore empty lines\n                 { \"\" } };\n-        for (final String code : codes) {\n-            final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL);\n-            final List<CSVRecord> records = parser.getRecords();\n-            assertEquals(res.length, records.size());\n-            assertTrue(records.size() > 0);\n-            for (int i = 0; i < res.length; i++) {\n-                assertArrayEquals(res[i], records.get(i).values());\n-            }\n-            parser.close();\n-        }\n-    }\n-\n-    @Test\n-    @Ignore\n-    public void testStartWithEmptyLinesThenHeaders() throws Exception {\n-        final String[] codes = {\"\\r\\n\\r\\n\\r\\nhello,\\r\\n\\r\\n\\r\\n\", \"hello,\\n\\n\\n\", \"hello,\\\"\\\"\\r\\n\\r\\n\\r\\n\",\n-                \"hello,\\\"\\\"\\n\\n\\n\"};\n-        final String[][] res = {{\"hello\", \"\"}, {\"\"}, // Excel format does not ignore empty lines\n-                {\"\"}};\n         for (final String code : codes) {\n             final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL);\n             final List<CSVRecord> records = parser.getRecords();\n         parser.close();\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testDuplicateHeaders() throws Exception {\n-        CSVParser.parse(\"a,b,a\\n1,2,3\\nx,y,z\", CSVFormat.DEFAULT.withHeader(new String[] {}));\n-    }\n-\n     @Test\n     public void testGetLine() throws IOException {\n         final CSVParser parser = CSVParser.parse(CSV_INPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces());\n     @Test\n     public void testGetLineNumberWithLF() throws Exception {\n         this.validateLineNumbers(String.valueOf(LF));\n-    }\n-\n-    @Test\n-    public void testGetRecordPositionWithCRLF() throws Exception {\n-        this.validateRecordPosition(CRLF);\n-    }\n-\n-    @Test\n-    public void testGetRecordPositionWithLF() throws Exception {\n-        this.validateRecordPosition(String.valueOf(LF));\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void testGetRecordPositionWithCRLF() throws Exception {\n+        this.validateRecordPosition(CRLF);\n+    }\n+\n+    @Test\n+    public void testGetRecordPositionWithLF() throws Exception {\n+        this.validateRecordPosition(String.valueOf(LF));\n+    }\n+\n+    @Test\n     public void testGetRecords() throws IOException {\n         final CSVParser parser = CSVParser.parse(CSV_INPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces());\n         final List<CSVRecord> records = parser.getRecords();\n     }\n \n     @Test\n-    public void testHeaderMissing() throws Exception {\n-        final Reader in = new StringReader(\"a,,c\\n1,2,3\\nx,y,z\");\n-\n-        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator();\n-\n-        for (int i = 0; i < 2; i++) {\n-            assertTrue(records.hasNext());\n-            final CSVRecord record = records.next();\n-            assertEquals(record.get(0), record.get(\"a\"));\n-            assertEquals(record.get(2), record.get(\"c\"));\n-        }\n-\n-        assertFalse(records.hasNext());\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testHeadersMissingException() throws Exception {\n-        final Reader in = new StringReader(\"a,,c,,d\\n1,2,3,4\\nx,y,z,zz\");\n-        CSVFormat.DEFAULT.withHeader().parse(in).iterator();\n-    }\n-\n-    @Test\n-    public void testHeadersMissing() throws Exception {\n-        final Reader in = new StringReader(\"a,,c,,d\\n1,2,3,4\\nx,y,z,zz\");\n-        CSVFormat.DEFAULT.withHeader().withAllowMissingColumnNames().parse(in).iterator();\n-    }\n-\n-    @Test\n-    public void testHeaderMissingWithNull() throws Exception {\n-        final Reader in = new StringReader(\"a,,c,,d\\n1,2,3,4\\nx,y,z,zz\");\n-        CSVFormat.DEFAULT.withHeader().withNullString(\"\").withAllowMissingColumnNames().parse(in).iterator();\n-    }\n-\n-    @Test\n     public void testHeaderComment() throws Exception {\n         final Reader in = new StringReader(\"# comment\\na,b,c\\n1,2,3\\nx,y,z\");\n \n         }\n \n         assertFalse(records.hasNext());\n+    }\n+\n+    @Test\n+    public void testHeaderMissing() throws Exception {\n+        final Reader in = new StringReader(\"a,,c\\n1,2,3\\nx,y,z\");\n+\n+        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator();\n+\n+        for (int i = 0; i < 2; i++) {\n+            assertTrue(records.hasNext());\n+            final CSVRecord record = records.next();\n+            assertEquals(record.get(0), record.get(\"a\"));\n+            assertEquals(record.get(2), record.get(\"c\"));\n+        }\n+\n+        assertFalse(records.hasNext());\n+    }\n+\n+    @Test\n+    public void testHeaderMissingWithNull() throws Exception {\n+        final Reader in = new StringReader(\"a,,c,,d\\n1,2,3,4\\nx,y,z,zz\");\n+        CSVFormat.DEFAULT.withHeader().withNullString(\"\").withAllowMissingColumnNames().parse(in).iterator();\n+    }\n+\n+    @Test\n+    public void testHeadersMissing() throws Exception {\n+        final Reader in = new StringReader(\"a,,c,,d\\n1,2,3,4\\nx,y,z,zz\");\n+        CSVFormat.DEFAULT.withHeader().withAllowMissingColumnNames().parse(in).iterator();\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testHeadersMissingException() throws Exception {\n+        final Reader in = new StringReader(\"a,,c,,d\\n1,2,3,4\\nx,y,z,zz\");\n+        CSVFormat.DEFAULT.withHeader().parse(in).iterator();\n+    }\n+\n+    @Test\n+    public void testIgnoreCaseHeaderMapping() throws Exception {\n+        final Reader in = new StringReader(\"1,2,3\");\n+        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"One\", \"TWO\", \"three\").withIgnoreHeaderCase()\n+                .parse(in).iterator();\n+        final CSVRecord record = records.next();\n+        assertEquals(\"1\", record.get(\"one\"));\n+        assertEquals(\"2\", record.get(\"two\"));\n+        assertEquals(\"3\", record.get(\"THREE\"));\n     }\n \n     @Test\n     }\n     \n     @Test\n+    public void testSkipHeaderOverrideDuplicateHeaders() throws Exception {\n+        final Reader in = new StringReader(\"a,a,a\\n1,2,3\\nx,y,z\");\n+        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"X\", \"Y\", \"Z\").withSkipHeaderRecord()\n+                .parse(in).iterator();\n+        final CSVRecord record = records.next();\n+        assertEquals(\"1\", record.get(\"X\"));\n+        assertEquals(\"2\", record.get(\"Y\"));\n+        assertEquals(\"3\", record.get(\"Z\"));\n+    }\n+\n+    @Test\n+    public void testSkipSetAltHeaders() throws Exception {\n+        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n+        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"X\", \"Y\", \"Z\").withSkipHeaderRecord()\n+                .parse(in).iterator();\n+        final CSVRecord record = records.next();\n+        assertEquals(\"1\", record.get(\"X\"));\n+        assertEquals(\"2\", record.get(\"Y\"));\n+        assertEquals(\"3\", record.get(\"Z\"));\n+    }\n+\n+    @Test\n     public void testSkipSetHeader() throws Exception {\n         final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n         final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"a\", \"b\", \"c\").withSkipHeaderRecord()\n     }\n \n     @Test\n-    public void testSkipSetAltHeaders() throws Exception {\n-        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n-        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"X\", \"Y\", \"Z\").withSkipHeaderRecord()\n-                .parse(in).iterator();\n-        final CSVRecord record = records.next();\n-        assertEquals(\"1\", record.get(\"X\"));\n-        assertEquals(\"2\", record.get(\"Y\"));\n-        assertEquals(\"3\", record.get(\"Z\"));\n-    }\n-\n-    @Test\n-    public void testSkipHeaderOverrideDuplicateHeaders() throws Exception {\n-        final Reader in = new StringReader(\"a,a,a\\n1,2,3\\nx,y,z\");\n-        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"X\", \"Y\", \"Z\").withSkipHeaderRecord()\n-                .parse(in).iterator();\n-        final CSVRecord record = records.next();\n-        assertEquals(\"1\", record.get(\"X\"));\n-        assertEquals(\"2\", record.get(\"Y\"));\n-        assertEquals(\"3\", record.get(\"Z\"));\n+    @Ignore\n+    public void testStartWithEmptyLinesThenHeaders() throws Exception {\n+        final String[] codes = {\"\\r\\n\\r\\n\\r\\nhello,\\r\\n\\r\\n\\r\\n\", \"hello,\\n\\n\\n\", \"hello,\\\"\\\"\\r\\n\\r\\n\\r\\n\",\n+                \"hello,\\\"\\\"\\n\\n\\n\"};\n+        final String[][] res = {{\"hello\", \"\"}, {\"\"}, // Excel format does not ignore empty lines\n+                {\"\"}};\n+        for (final String code : codes) {\n+            final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL);\n+            final List<CSVRecord> records = parser.getRecords();\n+            assertEquals(res.length, records.size());\n+            assertTrue(records.size() > 0);\n+            for (int i = 0; i < res.length; i++) {\n+                assertArrayEquals(res[i], records.get(i).values());\n+            }\n+            parser.close();\n+        }\n     }\n \n     private void validateLineNumbers(final String lineSeparator) throws IOException {\n \n         parser.close();\n     }\n-\n-    @Test\n-    public void testIgnoreCaseHeaderMapping() throws Exception {\n-        final Reader in = new StringReader(\"1,2,3\");\n-        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"One\", \"TWO\", \"three\").withIgnoreHeaderCase()\n-                .parse(in).iterator();\n-        final CSVRecord record = records.next();\n-        assertEquals(\"1\", record.get(\"one\"));\n-        assertEquals(\"2\", record.get(\"two\"));\n-        assertEquals(\"3\", record.get(\"THREE\"));\n-    }\n }", "timestamp": 1460953881, "metainfo": ""}