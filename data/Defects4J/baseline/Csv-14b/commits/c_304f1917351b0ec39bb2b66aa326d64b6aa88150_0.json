{"sha": "304f1917351b0ec39bb2b66aa326d64b6aa88150", "log": "Load the data in memory before running the benchmarks  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVBenchmark.java\n+++ b/src/test/java/org/apache/commons/csv/CSVBenchmark.java\n package org.apache.commons.csv;\n \n import java.io.BufferedReader;\n-import java.io.FileReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.StringReader;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n+import java.util.zip.GZIPInputStream;\n \n import com.generationjava.io.CsvReader;\n+import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.openjdk.jmh.annotations.Benchmark;\n import org.openjdk.jmh.annotations.BenchmarkMode;\n import org.openjdk.jmh.annotations.Measurement;\n import org.openjdk.jmh.annotations.Mode;\n import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n import org.openjdk.jmh.annotations.Threads;\n import org.openjdk.jmh.annotations.Warmup;\n import org.openjdk.jmh.infra.Blackhole;\n import org.supercsv.prefs.CsvPreference;\n \n @BenchmarkMode(Mode.AverageTime)\n-@Fork(value = 1, jvmArgs = {\"-server\", \"-Xms128M\", \"-Xmx128M\"})\n+@Fork(value = 1, jvmArgs = {\"-server\", \"-Xms1024M\", \"-Xmx1024M\"})\n @Threads(1)\n @Warmup(iterations = 5)\n @Measurement(iterations = 20)\n @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n public class CSVBenchmark {\n \n+    private String data;\n+\n+    /**\n+     * Load the data in memory before running the benchmarks, this takes out IO from the results.\n+     */\n+    @Setup\n+    public void init() throws IOException {\n+        File file = new File(\"src/test/resources/perf/worldcitiespop.txt.gz\");\n+        InputStream in = new GZIPInputStream(new FileInputStream(file));\n+        this.data = IOUtils.toString(in, \"ISO-8859-1\");\n+        in.close();\n+    }\n+\n     private BufferedReader getReader() throws IOException {\n-        return new BufferedReader(new FileReader(\"worldcitiespop.txt\"));\n+        return new BufferedReader(new StringReader(data));\n     }\n \n     @Benchmark", "timestamp": 1423561596, "metainfo": ""}