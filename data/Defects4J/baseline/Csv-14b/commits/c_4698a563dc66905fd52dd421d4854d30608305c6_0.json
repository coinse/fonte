{"sha": "4698a563dc66905fd52dd421d4854d30608305c6", "log": "Add missing fields to hashcode and equals methods  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n         } else if (!escape.equals(other.escape)) {\n             return false;\n         }\n+        if (nullString == null) {\n+            if (other.nullString != null) {\n+                return false;\n+            }\n+        } else if (!nullString.equals(other.nullString)) {\n+            return false;\n+        }\n         if (!Arrays.equals(header, other.header)) {\n             return false;\n         }\n             return false;\n         }\n         if (ignoreEmptyLines != other.ignoreEmptyLines) {\n+            return false;\n+        }\n+        if (skipHeaderRecord != other.skipHeaderRecord) {\n             return false;\n         }\n         if (recordSeparator == null) {\n         result = prime * result + ((quoteChar == null) ? 0 : quoteChar.hashCode());\n         result = prime * result + ((commentStart == null) ? 0 : commentStart.hashCode());\n         result = prime * result + ((escape == null) ? 0 : escape.hashCode());\n+        result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());\n         result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);\n         result = prime * result + (ignoreEmptyLines ? 1231 : 1237);\n+        result = prime * result + (skipHeaderRecord ? 1231 : 1237);\n         result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());\n         result = prime * result + Arrays.hashCode(header);\n         return result;\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n         assertNotEquals(right, left);\n     }\n \n+    @Test\n+    public void testEqualsNullString() {\n+        final CSVFormat right = CSVFormat.newFormat('\\'')\n+                .withRecordSeparator('*')\n+                .withCommentStart('#')\n+                .withEscape('+')\n+                .withIgnoreEmptyLines(true)\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteChar('\"')\n+                .withQuotePolicy(Quote.ALL)\n+                .withNullString(\"null\");\n+        final CSVFormat left = right\n+                .withNullString(\"---\");\n+\n+        assertNotEquals(right, left);\n+    }\n+\n+    @Test\n+    public void testEqualsSkipHeaderRecord() {\n+        final CSVFormat right = CSVFormat.newFormat('\\'')\n+                .withRecordSeparator('*')\n+                .withCommentStart('#')\n+                .withEscape('+')\n+                .withIgnoreEmptyLines(true)\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteChar('\"')\n+                .withQuotePolicy(Quote.ALL)\n+                .withNullString(\"null\")\n+                .withSkipHeaderRecord(true);\n+        final CSVFormat left = right\n+                .withSkipHeaderRecord(false);\n+\n+        assertNotEquals(right, left);\n+    }\n+\n     @Test(expected = IllegalStateException.class)\n     public void testEscapeSameAsCommentStartThrowsException() {\n         CSVFormat.DEFAULT.withEscape('!').withCommentStart('!').validate();", "timestamp": 1399401158, "metainfo": ""}