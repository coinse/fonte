{"sha": "86ef75f808306d4dbbc63d900ec73dfa5ff74cad", "log": "[CSV-192] Add convenience API CSVParser.parse(Path, Charset, CSVFormat). Adjust API to be Charset-based instead of String (charset name), just like it says in the Jira title.", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      * @since 1.5\n      */\n     @SuppressWarnings(\"resource\")\n-    public static CSVParser parse(final InputStream inputStream, final String charset, final CSVFormat format) throws IOException {\n+    public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format) throws IOException {\n         Assertions.notNull(inputStream, \"inputStream\");\n         Assertions.notNull(format, \"format\");\n         return parse(new InputStreamReader(inputStream, charset), format);\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n import java.io.StringWriter;\n import java.net.URL;\n import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n  * @version $Id$\n  */\n public class CSVParserTest {\n+\n+    private static final Charset UTF_8 = StandardCharsets.UTF_8;\n+\n+    private static final String UTF_8_NAME = UTF_8.name();\n \n     private static final String CSV_INPUT = \"a,b,c,d\\n\" + \" a , b , 1 2 \\n\" + \"\\\"foo baar\\\", b,\\n\"\n             // + \" \\\"foo\\n,,\\n\\\"\\\",,\\n\\\\\\\"\\\",d,e\\n\";\n     @Ignore(\"CSV-107\")\n     public void testBOM() throws IOException {\n         final URL url = ClassLoader.getSystemClassLoader().getResource(\"CSVFileParser/bom.csv\");\n-        try (final CSVParser parser = CSVParser.parse(url, Charset.forName(\"UTF-8\"), CSVFormat.EXCEL.withHeader())) {\n+        try (final CSVParser parser = CSVParser.parse(url, Charset.forName(UTF_8_NAME), CSVFormat.EXCEL.withHeader())) {\n             for (final CSVRecord record : parser) {\n                 final String string = record.get(\"Date\");\n                 Assert.assertNotNull(string);\n \n     @Test\n     public void testBOMInputStream_ParserWithReader() throws IOException {\n-        try (final Reader reader = new InputStreamReader(createBOMInputStream(\"CSVFileParser/bom.csv\"), \"UTF-8\");\n+        try (final Reader reader = new InputStreamReader(createBOMInputStream(\"CSVFileParser/bom.csv\"), UTF_8_NAME);\n                 final CSVParser parser = new CSVParser(reader, CSVFormat.EXCEL.withHeader())) {\n             for (final CSVRecord record : parser) {\n                 final String string = record.get(\"Date\");\n \n     @Test\n     public void testBOMInputStream_parseWithReader() throws IOException {\n-        try (final Reader reader = new InputStreamReader(createBOMInputStream(\"CSVFileParser/bom.csv\"), \"UTF-8\");\n+        try (final Reader reader = new InputStreamReader(createBOMInputStream(\"CSVFileParser/bom.csv\"), UTF_8_NAME);\n                 final CSVParser parser = CSVParser.parse(reader, CSVFormat.EXCEL.withHeader())) {\n             for (final CSVRecord record : parser) {\n                 final String string = record.get(\"Date\");\n     @Test\n     public void testBOMInputStream_ParserWithInputStream() throws IOException {\n         try (final BOMInputStream inputStream = createBOMInputStream(\"CSVFileParser/bom.csv\");\n-                final CSVParser parser = CSVParser.parse(inputStream, \"UTF-8\", CSVFormat.EXCEL.withHeader())) {\n+                final CSVParser parser = CSVParser.parse(inputStream, UTF_8, CSVFormat.EXCEL.withHeader())) {\n             for (final CSVRecord record : parser) {\n                 final String string = record.get(\"Date\");\n                 Assert.assertNotNull(string);", "timestamp": 1469921052, "metainfo": ""}