{"sha": "e2bbfcc6d3290ba69710e936bc88d13f1add76a6", "log": "Add convenience API CSVFormat.print(Path, Charset) (JIRA is down ATM).  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n import java.io.Serializable;\n import java.io.StringWriter;\n import java.nio.charset.Charset;\n+import java.nio.file.Path;\n import java.sql.ResultSet;\n import java.sql.ResultSetMetaData;\n import java.sql.SQLException;\n     }\n \n     /**\n+     * Prints to the specified output.\n+     *\n+     * <p>\n+     * See also {@link CSVPrinter}.\n+     * </p>\n+     *\n+     * @param out\n+     *            the output\n+     * @param charset \n+     *            A charset\n+     * @return a printer to an output\n+     * @throws IOException\n+     *             thrown if the optional header cannot be printed.\n+     * @since 1.5\n+     */\n+    public CSVPrinter print(final Path out, Charset charset) throws IOException {\n+        return print(out.toFile(), charset);\n+    }\n+\n+    /**\n      * Prints the {@code value} as the next value on the line to {@code out}. The value will be escaped or encapsulated\n      * as needed. Useful when one wants to avoid creating CSVPrinters.\n      *\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n import java.io.StringWriter;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.ResultSet;\n     }\n \n     @Test\n+    public void testPrintToPathWithDefaultCharset() throws IOException {\n+        File file = File.createTempFile(getClass().getName(), \".csv\");\n+        try (final CSVPrinter printer = CSVFormat.DEFAULT.print(file.toPath(), Charset.defaultCharset())) {\n+            printer.printRecord(\"a\", \"b\\\\c\");\n+        }\n+        assertEquals(\"a,b\\\\c\" + recordSeparator, FileUtils.readFileToString(file, Charset.defaultCharset()));\n+    }\n+\n+    @Test\n     public void testPrintToFileWithCharsetUtf16Be() throws IOException {\n         File file = File.createTempFile(getClass().getName(), \".csv\");\n         try (final CSVPrinter printer = CSVFormat.DEFAULT.print(file, StandardCharsets.UTF_16BE)) {", "timestamp": 1465884015, "metainfo": ""}