{"sha": "225cbe95743a5be5f9afe41568ae78c1473a83ce", "log": "Document how the pintRecord(s) methods work  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n     }\n \n     /**\n-     * Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n-     * characters will be escaped.\n+     * Prints the given values a single record of delimiter separated values followed by the record separator.\n+     *\n+     * <p>\n+     * The values will be quoted if needed. Quotes and newLine characters will be escaped.\n+     * </p>\n      *\n      * @param values\n      *            values to output.\n     }\n \n     /**\n-     * Prints a single line of delimiter separated values. The values will be quoted if needed. Quotes and newLine\n-     * characters will be escaped.\n+     * Prints the given values a single record of delimiter separated values followed by the record separator.\n+     *\n+     * <p>\n+     * The values will be quoted if needed. Quotes and newLine characters will be escaped.\n+     * </p>\n      *\n      * @param values\n      *            values to output.\n     }\n \n     /**\n-     * Prints all the objects in the given collection.\n+     * Prints all the objects in the given collection handling nested collections/arrays as records.\n+     *\n+     * <p>If the given collection only contains simple objects, this method will print a single record like\n+     * {@link #printRecord(Iterable)}. If the given collections contains nested collections/arrays those nested elements\n+     * will each be printed as records using {@link #printRecord(Object...)}.</p>\n+     *\n+     * <p>Given the following data structure:</p>\n+     * <pre>\n+     * <source>\n+     * List&lt;String[]&gt; data = ...\n+     * data.add(new String[]{ \"A\", \"B\", \"C\" });\n+     * data.add(new String[]{ \"1\", \"2\", \"3\" });\n+     * data.add(new String[]{ \"A1\", \"B2\", \"C3\" });\n+     * </source>\n+     * </pre>\n+     *\n+     * <p>Calling this method will print:</p>\n+     * <pre>\n+     * <source>\n+     * A, B, C\n+     * 1, 2, 3\n+     * A1, B2, C3\n+     * </source>\n+     * </pre>\n      *\n      * @param values\n      *            the values to print.\n     }\n \n     /**\n-     * Prints all the objects in the given array.\n+     * Prints all the objects in the given array handling nested collections/arrays as records.\n+     *\n+     * <p>If the given array only contains simple objects, this method will print a single record like\n+     * {@link #printRecord(Object...)}. If the given collections contains nested collections/arrays those nested elements\n+     * will each be printed as records using {@link #printRecord(Object...)}.</p>\n+     *\n+     * <p>Given the following data structure:</p>\n+     * <pre>\n+     * <source>\n+     * String[][] data = new String[3][]\n+     * data[0] = String[]{ \"A\", \"B\", \"C\" };\n+     * data[1] = new String[]{ \"1\", \"2\", \"3\" };\n+     * data[2] = new String[]{ \"A1\", \"B2\", \"C3\" };\n+     * </source>\n+     * </pre>\n+     *\n+     * <p>Calling this method will print:</p>\n+     * <pre>\n+     * <source>\n+     * A, B, C\n+     * 1, 2, 3\n+     * A1, B2, C3\n+     * </source>\n+     * </pre>\n      *\n      * @param values\n      *            the values to print.\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n-    public void printRecords(final Object[] values) throws IOException {\n+    public void printRecords(final Object... values) throws IOException {\n         for (final Object value : values) {\n             if (value instanceof Object[]) {\n                 this.printRecord((Object[]) value);", "timestamp": 1405367779, "metainfo": ""}