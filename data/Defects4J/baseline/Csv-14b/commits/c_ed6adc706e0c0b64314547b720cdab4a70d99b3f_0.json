{"sha": "ed6adc706e0c0b64314547b720cdab4a70d99b3f", "log": "Use generics diamonds.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n \n         // validate header\n         if (header != null) {\n-            final Set<String> dupCheck = new HashSet<String>();\n+            final Set<String> dupCheck = new HashSet<>();\n             for (final String hdr : header) {\n                 if (!dupCheck.add(hdr)) {\n                     throw new IllegalArgumentException(\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n     private final Lexer lexer;\n \n     /** A record buffer for getRecord(). Grows as necessary and is reused. */\n-    private final List<String> record = new ArrayList<String>();\n+    private final List<String> record = new ArrayList<>();\n \n     /**\n      * The next record number to assign.\n      * @return a copy of the header map that iterates in column order.\n      */\n     public Map<String, Integer> getHeaderMap() {\n-        return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);\n+        return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap);\n     }\n \n     /**\n      */\n     public List<CSVRecord> getRecords() throws IOException {\n         CSVRecord rec;\n-        final List<CSVRecord> records = new ArrayList<CSVRecord>();\n+        final List<CSVRecord> records = new ArrayList<>();\n         while ((rec = this.nextRecord()) != null) {\n             records.add(rec);\n         }\n--- a/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n \n     @Parameters\n     public static Collection<Object[]> generateData() {\n-        final List<Object[]> list = new ArrayList<Object[]>();\n+        final List<Object[]> list = new ArrayList<>();\n \n         final FilenameFilter filenameFilter = new FilenameFilter() {\n \n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n \n     @Test\n     public void testForEach() throws Exception {\n-        final List<CSVRecord> records = new ArrayList<CSVRecord>();\n+        final List<CSVRecord> records = new ArrayList<>();\n \n         final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n \n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n         final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, format);\n-        final List<String> list = new LinkedList<String>();\n+        final List<String> list = new LinkedList<>();\n         list.add(\"\\\"\");\n         printer.printRecord(list);\n         printer.close();\n         final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, format);\n-        final List<String> list = new LinkedList<String>();\n+        final List<String> list = new LinkedList<>();\n         list.add(\"\\n\");\n         printer.printRecord(list);\n         printer.close();\n         final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, format);\n-        final List<String> list = new LinkedList<String>();\n+        final List<String> list = new LinkedList<>();\n         list.add(\"\\\\\");\n         printer.printRecord(list);\n         printer.close();\n         final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, format);\n-        final List<String> list = new LinkedList<String>();\n+        final List<String> list = new LinkedList<>();\n         list.add(\"\\\"\");\n         list.add(\"\\n\");\n         list.add(\"\\\\\");\n--- a/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n     public void setUp() throws Exception {\n         values = new String[] { \"A\", \"B\", \"C\" };\n         record = new CSVRecord(values, null, null, 0, -1);\n-        header = new HashMap<String, Integer>();\n+        header = new HashMap<>();\n         header.put(\"first\", Integer.valueOf(0));\n         header.put(\"second\", Integer.valueOf(1));\n         header.put(\"third\", Integer.valueOf(2));\n \n     @Test\n     public void testPutInMap() {\n-        final Map<String, String> map = new ConcurrentHashMap<String, String>();\n+        final Map<String, String> map = new ConcurrentHashMap<>();\n         this.recordWithHeader.putIn(map);\n         this.validateMap(map, false);\n         // Test that we can compile with assigment to the same map as the param.\n         map.remove(\"OldColumn\");\n         map.put(\"ZColumn\", \"NewValue\");\n         // check:\n-        final ArrayList<String> list = new ArrayList<String>(map.values());\n+        final ArrayList<String> list = new ArrayList<>(map.values());\n         Collections.sort(list);\n         printer.printRecord(list);\n         Assert.assertEquals(\"A,B,C,NewValue\" + CSVFormat.DEFAULT.getRecordSeparator(), printer.getOut().toString());", "timestamp": 1465784993, "metainfo": ""}