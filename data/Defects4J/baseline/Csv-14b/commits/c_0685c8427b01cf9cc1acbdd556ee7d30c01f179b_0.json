{"sha": "0685c8427b01cf9cc1acbdd556ee7d30c01f179b", "log": "Format nits.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      * @see Predefined#Excel\n      */\n     public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames();\n+\n     /**\n      * Default MySQL format used by the {@code SELECT INTO OUTFILE} and {@code LOAD DATA INFILE} operations.\n      *\n      */\n     public static final CSVFormat MYSQL = DEFAULT.withDelimiter(TAB).withEscape(BACKSLASH).withIgnoreEmptyLines(false)\n             .withQuote(null).withRecordSeparator(LF).withNullString(\"\\\\N\");\n+    \n     /**\n      * Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n      *\n      * @see Predefined#RFC4180\n      */\n     public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);\n+    \n     private static final long serialVersionUID = 1L;\n+    \n     /**\n      * Tab-delimited format.\n      *\n      * @see Predefined#TDF\n      */\n     public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();\n+    \n     /**\n      * Returns true if the given character is a line break character.\n      *\n     private static boolean isLineBreak(final char c) {\n         return c == LF || c == CR;\n     }\n+    \n     /**\n      * Returns true if the given character is a line break character.\n      *\n     private static boolean isLineBreak(final Character c) {\n         return c != null && isLineBreak(c.charValue());\n     }\n+    \n     /**\n      * Creates a new CSV format with the specified delimiter.\n      *\n     public static CSVFormat newFormat(final char delimiter) {\n         return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false, false);\n     }\n+    \n     /**\n      * Gets one of the predefined formats from {@link CSVFormat.Predefined}.\n      * \n     public static CSVFormat valueOf(final String format) {\n         return CSVFormat.Predefined.valueOf(format).getFormat();\n     }\n+    \n     private final boolean allowMissingColumnNames;\n+    \n     private final Character commentMarker; // null if commenting is disabled\n+    \n     private final char delimiter;\n+    \n     private final Character escapeCharacter; // null if escaping is disabled\n+    \n     private final String[] header; // array of header column names\n \n     private final String[] headerComments; // array of header comment lines", "timestamp": 1460941389, "metainfo": ""}