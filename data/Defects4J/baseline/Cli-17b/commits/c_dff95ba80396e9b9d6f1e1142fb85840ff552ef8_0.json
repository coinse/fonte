{"sha": "dff95ba80396e9b9d6f1e1142fb85840ff552ef8", "log": "- replaced tags with spaces  ", "commit": "\n--- a/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n+++ b/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java\n package org.apache.commons.cli2.validation;\n \n import java.io.File;\n-import java.io.FileOutputStream;\n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Iterator;\n \n /**\n  * JUnit test case for the FileValidator.\n- *\n+ * \n  * @author Rob Oxspring\n  * @author John Keyes\n  */\n public class FileValidatorTest extends TestCase {\n \n     public void testValidate() throws InvalidArgumentException {\n-        final Object[] array = new Object[] { \"src\", \"project.xml\", \"veryunlikelyfilename\"};\n+        final Object[] array = new Object[] { \"src\", \"project.xml\",\n+                \"veryunlikelyfilename\" };\n         final List list = Arrays.asList(array);\n         final FileValidator validator = new FileValidator();\n \n     }\n \n     public void testValidate_Directory() {\n-        final Object[] array = new Object[] { \"src\", \"project.xml\"};\n+        final Object[] array = new Object[] { \"src\", \"project.xml\" };\n         final List list = Arrays.asList(array);\n-        final FileValidator validator = FileValidator.getExistingDirectoryInstance();\n+        final FileValidator validator = FileValidator\n+                .getExistingDirectoryInstance();\n \n         assertTrue(\"is a directory validator\", validator.isDirectory());\n         assertFalse(\"is not a file validator\", validator.isFile());\n         assertTrue(\"is an existing file validator\", validator.isExisting());\n         assertFalse(\"is not a hidden file validator\", validator.isHidden());\n \n-        try{\n+        try {\n             validator.validate(list);\n             fail(\"InvalidArgumentException\");\n-        }\n-        catch(InvalidArgumentException e){\n-            assertEquals(\"project.xml\",e.getMessage());\n+        } catch (InvalidArgumentException e) {\n+            assertEquals(\"project.xml\", e.getMessage());\n         }\n     }\n \n     public void testValidate_ReadableFile() {\n-    \t// make file readonly\n-    \tFile file = new File(\"src/test/data/readable.txt\");\n-    \tfile.setReadOnly();\n+        // make file readonly\n+        File file = new File(\"src/test/data/readable.txt\");\n+        file.setReadOnly();\n \n-        final Object[] array = new Object[] { \"src/test/data/readable.txt\", \"src/test/data/notreadable.txt\"};\n+        final Object[] array = new Object[] { \"src/test/data/readable.txt\",\n+                \"src/test/data/notreadable.txt\" };\n         final List list = Arrays.asList(array);\n         final FileValidator validator = FileValidator.getExistingFileInstance();\n         validator.setReadable(true);\n         assertTrue(\"is a readable file validator\", validator.isReadable());\n         assertFalse(\"is not a writable file validator\", validator.isWritable());\n \n-        try{\n+        try {\n             validator.validate(list);\n             fail(\"InvalidArgumentException\");\n-        }\n-        catch(InvalidArgumentException e){\n-            assertEquals(\"src/test/data/notreadable.txt\",e.getMessage());\n+        } catch (InvalidArgumentException e) {\n+            assertEquals(\"src/test/data/notreadable.txt\", e.getMessage());\n         }\n     }\n \n     public void testValidate_WritableFile() {\n-    \t// make file readonly\n-    \tFile file = new File(\"src/test/data/readable.txt\");\n-    \tfile.setReadOnly();\n+        // make file readonly\n+        File file = new File(\"src/test/data/readable.txt\");\n+        file.setReadOnly();\n \n-    \tfinal Object[] array = new Object[] { \"src/test/data/writable.txt\", \"src/test/data/readable.txt\"};\n+        final Object[] array = new Object[] { \"src/test/data/writable.txt\",\n+                \"src/test/data/readable.txt\" };\n         final List list = Arrays.asList(array);\n         final FileValidator validator = FileValidator.getExistingFileInstance();\n         validator.setWritable(true);\n         assertFalse(\"is not a readable file validator\", validator.isReadable());\n         assertTrue(\"is a writable file validator\", validator.isWritable());\n \n-        try{\n+        try {\n             validator.validate(list);\n             fail(\"InvalidArgumentException\");\n-        }\n-        catch(InvalidArgumentException e){\n-            assertEquals(\"src/test/data/readable.txt\",e.getMessage());\n+        } catch (InvalidArgumentException e) {\n+            assertEquals(\"src/test/data/readable.txt\", e.getMessage());\n         }\n     }\n \n     public void testValidate_HiddenFile() throws InvalidArgumentException {\n-    \t// make file hidden on Windows\n-    \tattribute(\"H\");\n-    \t\n-\t\tfinal Object[] array = new Object[] { \".hidden\", \"src\"};\n-\t\tfinal List list = Arrays.asList(array);\n-\t\tfinal FileValidator validator = FileValidator.getExistingFileInstance();\n-\t\tvalidator.setHidden(true);\n-\t\t\n-\t\tassertFalse(\"is not a directory validator\", validator.isDirectory());\n-\t\tassertTrue(\"is a file validator\", validator.isFile());\n-\t\tassertTrue(\"is an existing file validator\", validator.isExisting());\n-\t\tassertTrue(\"is a hidden file validator\", validator.isHidden());\n-\t\n-\t\ttry{\n-\t\t\tvalidator.validate(list);\n-\t\t\tfail(\"InvalidArgumentException\");\n-\t\t}\n-\t\tcatch(InvalidArgumentException e){\n-\t\t\tassertEquals(\"src\",e.getMessage());\n-\t\t}\n+        // make file hidden on Windows\n+        attribute(\"H\");\n+\n+        final Object[] array = new Object[] { \".hidden\", \"src\" };\n+        final List list = Arrays.asList(array);\n+        final FileValidator validator = FileValidator.getExistingFileInstance();\n+        validator.setHidden(true);\n+\n+        assertFalse(\"is not a directory validator\", validator.isDirectory());\n+        assertTrue(\"is a file validator\", validator.isFile());\n+        assertTrue(\"is an existing file validator\", validator.isExisting());\n+        assertTrue(\"is a hidden file validator\", validator.isHidden());\n+\n+        try {\n+            validator.validate(list);\n+            fail(\"InvalidArgumentException\");\n+        } catch (InvalidArgumentException e) {\n+            assertEquals(\"src\", e.getMessage());\n+        }\n     }\n \n     private void attribute(String attr) {\n-\t\tfinal String os = System.getProperty(\"os.name\").toLowerCase();\n+        final String os = System.getProperty(\"os.name\").toLowerCase();\n \n-\t\t// if the test is run on windows, run the attrib program\n-\t\t// to set the hidden attribute\n-\t\tif (os.indexOf(\"windows\") != -1) {\n-\t\t\t// windows\n-\t\t\ttry {\n-\t\t\t\tProcess proc = Runtime.getRuntime().exec(\"attrib.exe +\" + attr + \" src/test/data/.hidden.txt\", null, new File(\".\"));\n-\t\t\t} \n-\t\t\tcatch (IOException e) {\n-\t\t\t\t\tSystem.out.println(e.getMessage());\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n-\t\t} \n+        // if the test is run on windows, run the attrib program\n+        // to set the hidden attribute\n+        if (os.indexOf(\"windows\") != -1) {\n+            // windows\n+            try {\n+                Process proc = Runtime.getRuntime().exec(\n+                        \"attrib.exe +\" + attr + \" src/test/data/.hidden.txt\",\n+                        null, new File(\".\"));\n+            } catch (IOException e) {\n+                System.out.println(e.getMessage());\n+                e.printStackTrace();\n+            }\n+        }\n     }\n \n     public void testValidate_Existing() {\n-        final Object[] array = new Object[] { \"project.xml\", \"veryunlikelyfilename\"};\n+        final Object[] array = new Object[] { \"project.xml\",\n+                \"veryunlikelyfilename\" };\n         final List list = Arrays.asList(array);\n         final FileValidator validator = FileValidator.getExistingInstance();\n \n         assertTrue(\"is an existing file validator\", validator.isExisting());\n         assertFalse(\"is not a hidden file validator\", validator.isHidden());\n \n-        try{\n+        try {\n             validator.validate(list);\n             fail(\"InvalidArgumentException\");\n-        }\n-        catch(InvalidArgumentException e){\n-            assertEquals(\"veryunlikelyfilename\",e.getMessage());\n+        } catch (InvalidArgumentException e) {\n+            assertEquals(\"veryunlikelyfilename\", e.getMessage());\n         }\n     }\n \n     public void testValidate_File() {\n-        final Object[] array = new Object[] { \"project.xml\", \"src\"};\n+        final Object[] array = new Object[] { \"project.xml\", \"src\" };\n         final List list = Arrays.asList(array);\n         final Validator validator = FileValidator.getExistingFileInstance();\n \n-        try{\n+        try {\n             validator.validate(list);\n             fail(\"InvalidArgumentException\");\n-        }\n-        catch(InvalidArgumentException e){\n-            assertEquals(\"src\",e.getMessage());\n+        } catch (InvalidArgumentException e) {\n+            assertEquals(\"src\", e.getMessage());\n         }\n     }\n }", "timestamp": 1125955222, "metainfo": ""}