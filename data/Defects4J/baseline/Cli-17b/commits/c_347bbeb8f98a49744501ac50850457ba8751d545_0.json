{"sha": "347bbeb8f98a49744501ac50850457ba8751d545", "log": "refactored the option string handling, added property support for options with an argument value   ", "commit": "\n--- a/src/java/org/apache/commons/cli/CommandLine.java\n+++ b/src/java/org/apache/commons/cli/CommandLine.java\n     public Object getOptionObject( String opt ) {\n         String res = getOptionValue( opt );\n         \n-        Object type = ((Option)((List)options.get(opt)).iterator().next()).getType();\n+        Object type = ((Option)options.get(opt)).getType();\n         return res == null ? null : TypeHandler.createValue(res, type);\n     }\n \n     public String[] getOptionValues( String opt ) {\n         List values = new java.util.ArrayList();\n \n+        opt = Util.stripLeadingHyphens( opt );\n+\n         String key = opt;\n         if( names.containsKey( opt ) ) {\n             key = (String)names.get( opt );\n         }\n \n         if( options.containsKey( key ) ) {\n-            List opts = (List)options.get( key );\n-            Iterator iter = opts.iterator();\n-\n-            while( iter.hasNext() ) {\n-                Option optt = (Option)iter.next();\n-                values.addAll( optt.getValuesList() );\n-            }\n-        }\n-        return (values.size() == 0) ? null : (String[])values.toArray(new String[]{});\n+            return ((Option)options.get(key)).getValues();\n+        }\n+        return null;\n     }\n \n     /** \n     void addOption( Option opt ) {\n         hashcodeMap.put( new Integer( opt.hashCode() ), opt );\n \n-        String key = opt.getOpt();\n-        if( \" \".equals(key) ) {\n+        String key = opt.getKey();\n+        if( key == null ) {\n             key = opt.getLongOpt();\n         }\n         else {\n             names.put( opt.getLongOpt(), key );\n         }\n \n-        if( options.get( key ) != null ) {\n-            ((java.util.List)options.get( key )).add( opt );\n-        }\n-        else {\n-            options.put( key, new java.util.ArrayList() );\n-            ((java.util.List)options.get( key ) ).add( opt );\n-        }\n+        if( opt.getValues() != null ) {\n+            System.out.println( opt.getKey() + \"=\" + opt.getValues().length );\n+        }\n+\n+        options.put( key, opt );\n     }\n \n     /**\n--- a/src/java/org/apache/commons/cli/CommandLineParser.java\n+++ b/src/java/org/apache/commons/cli/CommandLineParser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/CommandLineParser.java,v 1.4 2002/09/19 22:59:43 jkeyes Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/09/19 22:59:43 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/CommandLineParser.java,v 1.5 2002/11/18 08:41:26 jkeyes Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/11/18 08:41:26 $\n  *\n  * ====================================================================\n  *\n  */\n package org.apache.commons.cli;\n \n+import java.util.Properties;\n+\n /**\n  * A class that implements the <code>CommandLineParser</code> interface \n  * can parse a String array according to the {@link Options} specified\n      * @param options the specified Options\n      * @param arguments the command line arguments\n      * @return the list of atomic option and value tokens\n+     *\n      * @throws ParseException if there are any problems encountered\n      * while parsing the command line tokens.\n      */\n     public CommandLine parse( Options options, String[] arguments )\n+    throws ParseException;\n+\n+    /**\n+     * Parse the arguments according to the specified options and\n+     * properties.\n+     *\n+     * @param options the specified Options\n+     * @param arguments the command line arguments\n+     * @param properties command line option name-value pairs\n+     * @return the list of atomic option and value tokens\n+     *\n+     * @throws ParseException if there are any problems encountered\n+     * while parsing the command line tokens.\n+     */\n+    public CommandLine parse( Options options, String[] arguments, Properties props )\n     throws ParseException;\n \n     /**\n      * @param arguments the command line arguments\n      * @param stopAtNonOption specifies whether to continue parsing the\n      * arguments if a non option is encountered.\n+     *\n      * @return the list of atomic option and value tokens\n      * @throws ParseException if there are any problems encountered\n      * while parsing the command line tokens.\n      */\n     public CommandLine parse( Options options, String[] arguments, boolean stopAtNonOption )\n     throws ParseException;\n+\n+    /**\n+     * Parse the arguments according to the specified options and\n+     * properties.\n+     *\n+     * @param options the specified Options\n+     * @param arguments the command line arguments\n+     * @param properties command line option name-value pairs\n+     * @param stopAtNonOption specifies whether to continue parsing the\n+     *\n+     * @return the list of atomic option and value tokens\n+     * @throws ParseException if there are any problems encountered\n+     * while parsing the command line tokens.\n+     */\n+    public CommandLine parse( Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n+    throws ParseException;\n }\n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n  * <http://www.apache.org/>.\n  *\n  */\n-\n-/*\n- * Copyright (C) The Apache Software Foundation. All rights reserved.\n- *\n- * This software is published under the terms of the Apache Software License\n- * version 1.1, a copy of which has been included with this distribution in\n- * the LICENSE file.\n- * \n- * $Id: Option.java,v 1.6 2002/06/06 22:50:14 bayard Exp $\n- */\n-\n package org.apache.commons.cli;\n \n import java.util.ArrayList;\n  * @author <a href=\"mailto:jstrachan@apache.org\">James Strachan</a>\n  * @version $Revision: 1.6 $\n  */\n-\n public class Option implements Cloneable {\n \n     /** constant that specifies the number of argument values has not been specified */\n     /** constant that specifies the number of argument values is infinite */\n     public final static int UNLIMITED_VALUES = -2;\n     \n-    /** opt the single character representation of the option */\n+    /** opt the name of the option */\n     private String opt;\n \n     /** longOpt is the long representation of the option */\n     /** the list of argument values **/\n     private ArrayList values = new ArrayList();\n     \n-    /** option char (only valid for single character options) */\n-    private char id;\n-\n     /** the character that is the value separator */\n     private char valuesep;\n-\n-    /**\n-     * <p>Validates whether <code>opt</code> is a permissable Option\n-     * shortOpt.  The rules that specify if the <code>opt</code>\n-     * is valid are:</p>\n-     * <ul>\n-     *  <li><code>opt</code> is not NULL</li>\n-     *  <li>a single character <code>opt</code> that is either\n-     *  ' '(special case), '?', '@' or a letter</li>\n-     *  <li>a multi character <code>opt</code> that only contains\n-     *  letters.</li>\n-     * </ul>\n-     *\n-     * @param opt The option string to validate\n-     * @throws IllegalArgumentException if the Option is not valid.\n-     */\n-    private void validateOption( String opt ) \n-    throws IllegalArgumentException\n-    {\n-        // check that opt is not NULL\n-        if( opt == null ) {\n-            throw new IllegalArgumentException( \"opt is null\" );\n-        }\n-        // handle the single character opt\n-        else if( opt.length() == 1 ) {\n-            char ch = opt.charAt( 0 );\n-            if ( !isValidOpt( ch ) ) {\n-                throw new IllegalArgumentException( \"illegal option value '\" \n-                                                    + ch + \"'\" );\n-            }\n-            id = ch;\n-        }\n-        // handle the multi character opt\n-        else {\n-            char[] chars = opt.toCharArray();\n-            for( int i = 0; i < chars.length; i++ ) {\n-                if( !isValidChar( chars[i] ) ) {\n-                    throw new IllegalArgumentException( \"opt contains illegal character value '\" + chars[i] + \"'\" );\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * <p>Returns whether the specified character is a valid Option.</p>\n-     *\n-     * @param c the option to validate\n-     * @return true if <code>c</code> is a letter, ' ', '?' or '@', otherwise false.\n-     */\n-    private boolean isValidOpt( char c ) {\n-        return ( isValidChar( c ) || c == ' ' || c == '?' || c == '@' );\n-    }\n-\n-    /**\n-     * <p>Returns whether the specified character is a valid character.</p>\n-     *\n-     * @param c the character to validate\n-     * @return true if <code>c</code> is a letter.\n-     */\n-    private boolean isValidChar( char c ) {\n-        return Character.isJavaIdentifierPart( c );\n-    }\n-\n-    /**\n-     * <p>Returns the id of this Option.  This is only set when the\n-     * Option shortOpt is a single character.  This is used for switch\n-     * statements.</p>\n-     *\n-     * @return the id of this Option\n-     */\n-    public int getId( ) {\n-        return id;\n-    }\n \n     /**\n      * Creates an Option using the specified parameters.\n     throws IllegalArgumentException\n     {\n         // ensure that the option is valid\n-        validateOption( opt );\n+        OptionValidator.validateOption( opt );\n \n         this.opt          = opt;\n         this.longOpt      = longOpt;\n         this.description  = description;\n     }\n     \n+    /**\n+     * <p>Returns the id of this Option.  This is only set when the\n+     * Option shortOpt is a single character.  This is used for switch\n+     * statements.</p>\n+     *\n+     * @return the id of this Option\n+     */\n+    public int getId( ) {\n+        return getKey().charAt( 0 );\n+    }\n+\n+    /**\n+     * <p>Returns the 'unique' Option identifier.</p>\n+     * \n+     * @return the 'unique' Option identifier\n+     */\n+    String getKey() {\n+        // if 'opt' is null, then it is a 'long' option\n+        if( opt == null ) {\n+            return this.longOpt;\n+        }\n+        return this.opt;\n+    }\n+\n     /** <p>Retrieve the name of this Option.</p>\n      *\n      * <p>It is this String which can be used with\n          return this.numberOfArgs;\n      }\n \n-    /** \n-     * <p>Dump state, suitable for debugging.</p>\n-     *\n-     * @return Stringified form of this object\n-     */\n-    public String toString() {\n-        StringBuffer buf = new StringBuffer().append(\"[ option: \");\n-        \n-        buf.append( this.opt );\n-        \n-        if ( this.longOpt != null ) {\n-            buf.append(\" \")\n-            .append(this.longOpt);\n-        }\n-        \n-        buf.append(\" \");\n-        \n-        if ( hasArg ) {\n-            buf.append( \"+ARG\" );\n-        }\n-        \n-        buf.append(\" :: \")\n-        .append( this.description );\n-        \n-        if ( this.type != null ) {\n-            buf.append(\" :: \")\n-            .append( this.type );\n-        }\n-\n-        buf.append(\" ]\");\n-        return buf.toString();\n+    public void clearValues() {\n+        this.values.clear();\n     }\n \n     /**\n         option.setValueSeparator( getValueSeparator() );\n         return option;\n     }\n+\n+    /** \n+     * <p>Dump state, suitable for debugging.</p>\n+     *\n+     * @return Stringified form of this object\n+     */\n+    public String toString() {\n+        StringBuffer buf = new StringBuffer().append(\"[ option: \");\n+        \n+        buf.append( this.opt );\n+        \n+        if ( this.longOpt != null ) {\n+            buf.append(\" \")\n+            .append(this.longOpt);\n+        }\n+        \n+        buf.append(\" \");\n+        \n+        if ( hasArg ) {\n+            buf.append( \"+ARG\" );\n+        }\n+        \n+        buf.append(\" :: \")\n+        .append( this.description );\n+        \n+        if ( this.type != null ) {\n+            buf.append(\" :: \")\n+            .append( this.type );\n+        }\n+\n+        buf.append(\" ]\");\n+        return buf.toString();\n+    }\n+\n }\n--- a/src/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/OptionBuilder.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.12 2002/10/15 22:50:45 jkeyes Exp $\n- * $Revision: 1.12 $\n- * $Date: 2002/10/15 22:50:45 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.13 2002/11/18 08:41:26 jkeyes Exp $\n+ * $Revision: 1.13 $\n+ * $Date: 2002/11/18 08:41:26 $\n  *\n  * ====================================================================\n  *\n             throw new IllegalArgumentException( \"must specify longopt\" );\n         }\n \n-        return create( \" \" );\n+        return create( null );\n     }\n \n     /**\n--- /dev/null\n+++ b/src/java/org/apache/commons/cli/OptionValidator.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionValidator.java,v 1.1 2002/11/18 08:41:26 jkeyes Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/18 08:41:26 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.cli;\n+\n+/**\n+ * Validates an Option string.\n+ *\n+ * @author John Keyes ( john at integralsource.com )\n+ */\n+public class OptionValidator {\n+\n+    /**\n+     * <p>Validates whether <code>opt</code> is a permissable Option\n+     * shortOpt.  The rules that specify if the <code>opt</code>\n+     * is valid are:</p>\n+     * <ul>\n+     *  <li><code>opt</code> is not NULL</li>\n+     *  <li>a single character <code>opt</code> that is either\n+     *  ' '(special case), '?', '@' or a letter</li>\n+     *  <li>a multi character <code>opt</code> that only contains\n+     *  letters.</li>\n+     * </ul>\n+     *\n+     * @param opt The option string to validate\n+     * @throws IllegalArgumentException if the Option is not valid.\n+     */\n+    static void validateOption( String opt ) \n+    throws IllegalArgumentException\n+    {\n+        // check that opt is not NULL\n+        if( opt == null ) {\n+            return;\n+        }\n+        // handle the single character opt\n+        else if( opt.length() == 1 ) {\n+            char ch = opt.charAt( 0 );\n+            if ( !isValidOpt( ch ) ) {\n+                throw new IllegalArgumentException( \"illegal option value '\" \n+                                                    + ch + \"'\" );\n+            }\n+        }\n+        // handle the multi character opt\n+        else {\n+            char[] chars = opt.toCharArray();\n+            for( int i = 0; i < chars.length; i++ ) {\n+                if( !isValidChar( chars[i] ) ) {\n+                    throw new IllegalArgumentException( \"opt contains illegal character value '\" + chars[i] + \"'\" );\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Returns whether the specified character is a valid Option.</p>\n+     *\n+     * @param c the option to validate\n+     * @return true if <code>c</code> is a letter, ' ', '?' or '@', otherwise false.\n+     */\n+    private static boolean isValidOpt( char c ) {\n+        return ( isValidChar( c ) || c == ' ' || c == '?' || c == '@' );\n+    }\n+\n+    /**\n+     * <p>Returns whether the specified character is a valid character.</p>\n+     *\n+     * @param c the character to validate\n+     * @return true if <code>c</code> is a letter.\n+     */\n+    private static boolean isValidChar( char c ) {\n+        return Character.isJavaIdentifierPart( c );\n+    }\n+}\n--- a/src/java/org/apache/commons/cli/Options.java\n+++ b/src/java/org/apache/commons/cli/Options.java\n             option.setRequired( false );\n             addOption( option );\n \n-            optionGroups.put( option.getOpt(), group );\n+            optionGroups.put( option.getKey(), group );\n         }\n \n         return this;\n      * @return the resulting Options instance\n      */\n     public Options addOption(Option opt)  {\n-        String shortOpt = \"-\" + opt.getOpt();\n+        String shortOpt = opt.getOpt();\n         \n         // add it to the long option list\n         if ( opt.hasLongOpt() ) {\n-            longOpts.put( \"--\" + opt.getLongOpt(), opt );\n+            longOpts.put( opt.getLongOpt(), opt );\n         }\n         \n         // if the option is required add it to the required list\n         if ( opt.isRequired() ) {\n-            requiredOpts.add( shortOpt );\n+            requiredOpts.add( opt.getKey() );\n         }\n \n         shortOpts.put( shortOpt, opt );\n      */\n     public Option getOption( String opt ) {\n \n-        Option option = null;\n-\n-        // short option\n-        if( opt.length() == 1 ) {\n-            option = (Option)shortOpts.get( \"-\" + opt );\n-        }\n-        // long option\n-        else if( opt.startsWith( \"--\" ) ) {\n-            option = (Option)longOpts.get( opt );\n-        }\n-        // a just-in-case\n-        else {\n-            option = (Option)shortOpts.get( opt );\n-        }\n-\n-        return (option == null) ? null : (Option)option.clone();\n+        opt = Util.stripLeadingHyphens( opt );\n+\n+        if( shortOpts.containsKey( opt ) ) {\n+            return (Option) shortOpts.get( opt );\n+        }\n+        return (Option) longOpts.get( opt );\n     }\n \n     /** \n      * of this {@link Options}\n      */\n     public boolean hasOption( String opt ) {\n-\n-        // short option\n-        if( opt.length() == 1 ) {\n-            return shortOpts.containsKey( \"-\" + opt );\n-        }\n-        // long option\n-        else if( opt.startsWith( \"--\" ) ) {\n-            return longOpts.containsKey( opt );\n-        }\n-        // a just-in-case\n-        else {\n-            return shortOpts.containsKey( opt );\n-        }\n+        opt = Util.stripLeadingHyphens( opt );\n+        return shortOpts.containsKey( opt ) || longOpts.containsKey( opt );\n     }\n \n     /** <p>Returns the OptionGroup the <code>opt</code>\n      * of an OptionGroup, otherwise return null\n      */\n     public OptionGroup getOptionGroup( Option opt ) {\n-        return (OptionGroup)optionGroups.get( opt.getOpt() );\n+        return (OptionGroup)optionGroups.get( opt.getKey() );\n     }\n     \n     /** <p>Dump state, suitable for debugging.</p>\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.7 2002/10/24 23:17:49 jkeyes Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/10/24 23:17:49 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Parser.java,v 1.8 2002/11/18 08:41:26 jkeyes Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/11/18 08:41:26 $\n  *\n  * ====================================================================\n  *\n package org.apache.commons.cli;\n \n import java.util.Arrays;\n+import java.util.Enumeration;\n import java.util.Iterator;\n import java.util.List;\n import java.util.ListIterator;\n import java.util.Map;\n+import java.util.Properties;\n \n /**\n  * <p><code>Parser</code> creates {@link CommandLine}s.</p>\n  *\n  * @author John Keyes (john at integralsource.com)\n  * @see Parser\n- * @version $Revision: 1.7 $\n+ * @version $Revision: 1.8 $\n  */\n public abstract class Parser implements CommandLineParser {\n \n      * @throws ParseException if an error occurs when parsing the\n      * arguments.\n      */\n-    public CommandLine parse( Options options, String[] arguments ) \n+    public CommandLine parse( Options options, \n+                              String[] arguments ) \n     throws ParseException \n     {\n-        return parse( options, arguments, false );\n+        return parse( options, arguments, null, false );\n+    }\n+\n+    /**\n+     * Parse the arguments according to the specified options and\n+     * properties.\n+     *\n+     * @param options the specified Options\n+     * @param arguments the command line arguments\n+     * @param properties command line option name-value pairs\n+     * @return the list of atomic option and value tokens\n+     *\n+     * @throws ParseException if there are any problems encountered\n+     * while parsing the command line tokens.\n+     */\n+    public CommandLine parse( Options options, \n+                              String[] arguments,\n+                              Properties properties ) \n+    throws ParseException \n+    {\n+        return parse( options, arguments, properties, false );\n     }\n \n     /**\n      * interpreting the arguments when a non option has \n      * been encountered and to add them to the CommandLines\n      * args list.\n+     *\n      * @return the <code>CommandLine</code>\n      * @throws ParseException if an error occurs when parsing the\n      * arguments.\n      */\n+    public CommandLine parse( Options options, \n+                              String[] arguments,\n+                              boolean stopAtNonOption ) \n+    throws ParseException \n+    {\n+        return parse( options, arguments, null, stopAtNonOption );\n+    }\n+\n+    /**\n+     * Parse the arguments according to the specified options and\n+     * properties.\n+     *\n+     * @param options the specified Options\n+     * @param arguments the command line arguments\n+     * @param properties command line option name-value pairs\n+     * @return the list of atomic option and value tokens\n+     *\n+     * @throws ParseException if there are any problems encountered\n+     * while parsing the command line tokens.\n+     */\n     public CommandLine parse( Options opts, \n                               String[] arguments, \n+                              Properties properties,\n                               boolean stopAtNonOption ) \n     throws ParseException \n     {\n         cmd = new CommandLine();\n \n         boolean eatTheRest = false;\n+\n+        if( arguments == null ) {\n+            arguments = new String[0];\n+        }\n \n         List tokenList = Arrays.asList( flatten( opts, arguments, stopAtNonOption ) );\n         ListIterator iterator = tokenList.listIterator();\n                 }\n             }\n         }\n+        processProperties( properties );\n         checkRequiredOptions();\n         return cmd;\n+    }\n+\n+    /**\n+     * <p>Sets the values of Options using the values in <code>properties</code>.</p>\n+     */\n+    private void processProperties( Properties properties ) {\n+        if( properties == null ) {\n+            return;\n+        }\n+\n+        for( Enumeration e = properties.propertyNames(); e.hasMoreElements(); ) {\n+            String option = e.nextElement().toString();\n+            if( !cmd.hasOption( option ) ) {\n+                Option opt = options.getOption( option );\n+                if( opt.getValues() == null || opt.getValues().length == 0 ) {\n+                    opt.addValue( properties.getProperty( option ) );\n+                }\n+                cmd.addOption( opt );\n+            }\n+        }\n     }\n \n     /**\n     {\n         // loop until an option is found\n         while( iter.hasNext() ) {\n-            String var = (String)iter.next();\n+            String str = (String)iter.next();\n \n             // found an Option\n-            if( options.hasOption( var ) ) {\n+            if( options.hasOption( str ) ) {\n                 iter.previous();\n                 break;\n             }\n             // found a value\n-            else if( !opt.addValue( var ) ) {\n+            else if( !opt.addValue( str ) ) {\n                 iter.previous();\n                 break;\n             }\n         }\n \n         if( opt.getValues() == null && !opt.hasOptionalArg() ) {\n-            throw new MissingArgumentException( \"no argument for:\" + opt.getOpt() );\n+            throw new MissingArgumentException( \"no argument for:\" + opt.getKey() );\n         }\n     }\n \n         // if the option is a required option remove the option from\n         // the requiredOptions list\n         if ( opt.isRequired() ) {\n-            requiredOptions.remove( \"-\" + opt.getOpt() );\n+            requiredOptions.remove( opt.getKey() );\n         }\n \n         // if the option is in an OptionGroup make that option the selected\n--- /dev/null\n+++ b/src/java/org/apache/commons/cli/Util.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/Util.java,v 1.1 2002/11/18 08:41:26 jkeyes Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2002/11/18 08:41:26 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2001 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.cli;\n+\n+/**\n+ * Contains useful helper methods for classes within this package.\n+ *\n+ * @author John Keyes (john at integralsource.com)\n+ */\n+class Util {\n+\n+    static String stripLeadingHyphens( String str ) {\n+        if( str.startsWith( \"--\" ) ) {\n+            return str.substring( 2, str.length() );\n+        }\n+        else if ( str.startsWith( \"-\" ) ) {\n+            return str.substring( 1, str.length() );\n+        }\n+        return str;\n+    }\n+            }\n--- a/src/test/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/org/apache/commons/cli/BugsTest.java\n  * version 1.1, a copy of which has been included with this distribution in\n  * the LICENSE file.\n  * \n- * $Id: BugsTest.java,v 1.10 2002/10/24 23:17:49 jkeyes Exp $\n+ * $Id: BugsTest.java,v 1.11 2002/11/18 08:41:26 jkeyes Exp $\n  */\n \n package org.apache.commons.cli;\n             CommandLine line = parser.parse( opts, args );\n         }\n         catch( ParseException exp ) {\n-            fail( \"Unexpected exception: \" + exp.getMessage() );\n+            fail( \"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage() );\n         }\n \n         opts.addOption( forward );\n             CommandLine line = parser.parse( opts, args );\n         }\n         catch( ParseException exp ) {\n-            fail( \"Unexpected exception: \" + exp.getMessage() );\n+            fail( \"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage() );\n         }\n     }\n }\n--- a/src/test/org/apache/commons/cli/OptionBuilderTest.java\n+++ b/src/test/org/apache/commons/cli/OptionBuilderTest.java\n             // success\n         }\n \n-        // null option\n-        try {\n-            Option opt = OptionBuilder.create( null );\n-            fail( \"IllegalArgumentException not caught\" );\n-        }\n-        catch( IllegalArgumentException exp ) {\n-            // success\n-        }\n-\n         // valid option \n         try {\n             Option opt = OptionBuilder.create( \"opt\" );\n--- a/src/test/org/apache/commons/cli/ValueTest.java\n+++ b/src/test/org/apache/commons/cli/ValueTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import java.util.Properties;\n+\n public class ValueTest extends TestCase\n {\n \n             fail(\"Cannot setUp() CommandLine: \" + e.toString());\n         }\n     }\n+\n+    public void testPropertyValues()\n+    {\n+        Properties properties = new Properties();\n+        properties.setProperty( \"hide\", \"seek\" );\n+        try\n+        {\n+            CommandLineParser parser = new PosixParser();\n+            CommandLine cmd = parser.parse(opts, null, properties);\n+            assertTrue( cmd.hasOption(\"hide\") );\n+            assertEquals( \"seek\", cmd.getOptionValue(\"hide\") );\n+            assertTrue( !cmd.hasOption(\"fake\") );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+    } \n+\n+    public void testPropertyOverrideValues()\n+    {\n+        String[] args = new String[] { \n+            \"-j\",\n+            \"found\",\n+            \"-i\",\n+            \"ink\"\n+        };\n+\n+        Properties properties = new Properties();\n+        properties.setProperty( \"j\", \"seek\" );\n+        try\n+        {\n+            CommandLineParser parser = new PosixParser();\n+            CommandLine cmd = parser.parse(opts, args, properties);\n+            assertTrue( cmd.hasOption(\"j\") );\n+            assertEquals( \"found\", cmd.getOptionValue(\"j\") );\n+            assertTrue( cmd.hasOption(\"i\") );\n+            assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n+            assertTrue( !cmd.hasOption(\"fake\") );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+    }\n+\n }", "timestamp": 1037608886, "metainfo": ""}