{"sha": "8d450c9096426d4419d07f67f260067e42e5a76e", "log": "Changed AlreadySelectedException to include the related option group and the option that triggered the exception  ", "commit": "\n--- a/src/java/org/apache/commons/cli/AlreadySelectedException.java\n+++ b/src/java/org/apache/commons/cli/AlreadySelectedException.java\n  */\n public class AlreadySelectedException extends ParseException\n {\n+    /** The option group selected. */\n+    private OptionGroup group;\n+\n+    /** The option that triggered the exception. */\n+    private Option option;\n+\n     /**\n      * Construct a new <code>AlreadySelectedException</code>\n      * with the specified detail message.\n     {\n         super(message);\n     }\n+\n+    /**\n+     * Construct a new <code>AlreadySelectedException</code>\n+     * for the specified option group.\n+     *\n+     * @param group  the option group already selected\n+     * @param option the option that triggered the exception\n+     * @since 1.2\n+     */\n+    public AlreadySelectedException(OptionGroup group, Option option)\n+    {\n+        this(\"The option '\" + option.getKey() + \"' was specified but an option from this group \" +\n+                \"has already been selected: '\" + group.getSelected() + \"'\");\n+        this.group = group;\n+        this.option = option;\n+    }\n+\n+    /**\n+     * Returns the option group where another option has been selected.\n+     *\n+     * @since 1.2\n+     */\n+    public OptionGroup getOptionGroup()\n+    {\n+        return group;\n+    }\n+\n+    /**\n+     * Returns the option that was added to the group and triggered the exception.\n+     *\n+     * @since 1.2\n+     */\n+    public Option getOption()\n+    {\n+        return option;\n+    }\n }\n--- a/src/java/org/apache/commons/cli/OptionGroup.java\n+++ b/src/java/org/apache/commons/cli/OptionGroup.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.cli;\n \n import java.io.Serializable;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.Map;\n \n /**\n  * A group of mutually exclusive options.\n+ *\n  * @author John Keyes ( john at integralsource.com )\n  * @version $Revision$\n  */\n     private static final long serialVersionUID = 1L;\n     \n     /** hold the options */\n-    private HashMap optionMap = new HashMap();\n+    private Map optionMap = new HashMap();\n \n     /** the name of the selected option */\n     private String selected;\n     private boolean required;\n \n     /**\n-     * add <code>opt</code> to this group\n+     * Add the specified <code>Option</code> to this group.\n      *\n-     * @param opt the option to add to this group\n-     * @return this option group with opt added\n+     * @param option the option to add to this group\n+     * @return this option group with the option added\n      */\n-    public OptionGroup addOption(Option opt)\n+    public OptionGroup addOption(Option option)\n     {\n         // key   - option name\n         // value - the option\n-        optionMap.put(opt.getKey(), opt);\n+        optionMap.put(option.getKey(), option);\n \n         return this;\n     }\n \n     /**\n      * set the selected option of this group to <code>name</code>.\n-     * @param opt the option that is selected\n+     * @param option the option that is selected\n      * @throws AlreadySelectedException if an option from this group has \n      * already been selected.\n      */\n-    public void setSelected(Option opt)\n-                     throws AlreadySelectedException\n+    public void setSelected(Option option) throws AlreadySelectedException\n     {\n         // if no option has already been selected or the \n         // same option is being reselected then set the\n         // selected member variable\n-        if ((this.selected == null) || this.selected.equals(opt.getOpt()))\n+        if ((this.selected == null) || this.selected.equals(option.getOpt()))\n         {\n-            this.selected = opt.getOpt();\n+            this.selected = option.getOpt();\n         }\n         else\n         {\n-            throw new AlreadySelectedException(\"an option from this group has \"\n-                                               + \"already been selected: '\"\n-                                               + selected + \"'\");\n+            throw new AlreadySelectedException(this, option);\n         }\n     }\n \n \n         return buff.toString();\n     }\n-}\n+}\n--- a/src/test/org/apache/commons/cli/OptionGroupTest.java\n+++ b/src/test/org/apache/commons/cli/OptionGroupTest.java\n         assertTrue( \"Confirm TWO extra args\", cl.getArgList().size() == 2);\n     }\n \n-    public void testTwoOptionsFromGroup()\n+    public void testTwoOptionsFromGroup() throws Exception\n     {\n         String[] args = new String[] { \"-f\", \"-d\" };\n \n             parser.parse( _options, args);\n             fail( \"two arguments from group not allowed\" );\n         }\n-        catch (ParseException e)\n-        {\n-            if( !( e instanceof AlreadySelectedException ) )\n-            {\n-                fail( \"incorrect exception caught:\" + e.getMessage() );\n-            }\n-        }\n-    }\n-\n-    public void testTwoLongOptionsFromGroup()\n+        catch (AlreadySelectedException e)\n+        {\n+            assertNotNull(\"null option group\", e.getOptionGroup());\n+            assertEquals(\"selected option\", \"f\", e.getOptionGroup().getSelected());\n+            assertEquals(\"option\", \"d\", e.getOption().getOpt());\n+        }\n+    }\n+\n+    public void testTwoLongOptionsFromGroup() throws Exception\n     {\n         String[] args = new String[] { \"--file\", \"--directory\" };\n \n             parser.parse(_options, args);\n             fail( \"two arguments from group not allowed\" );\n         }\n-        catch (ParseException e)\n-        {\n-            if( !( e instanceof AlreadySelectedException ) )\n-            {\n-                fail( \"incorrect exception caught:\" + e.getMessage() );\n-            }\n+        catch (AlreadySelectedException e)\n+        {\n+            assertNotNull(\"null option group\", e.getOptionGroup());\n+            assertEquals(\"selected option\", \"f\", e.getOptionGroup().getSelected());\n+            assertEquals(\"option\", \"d\", e.getOption().getOpt());\n         }\n     }\n ", "timestamp": 1216940158, "metainfo": ""}