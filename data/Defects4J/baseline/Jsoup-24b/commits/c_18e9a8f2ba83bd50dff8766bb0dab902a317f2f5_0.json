{"sha": "18e9a8f2ba83bd50dff8766bb0dab902a317f2f5", "log": "Removed dependency on Apache Commons-lang. Jsoup now has no external dependencies.", "commit": "\n--- a/src/main/java/org/jsoup/DataUtil.java\n+++ b/src/main/java/org/jsoup/DataUtil.java\n package org.jsoup;\n \n-import org.apache.commons.lang.Validate;\n+import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n \n import java.io.*;\n+import java.net.HttpURLConnection;\n import java.net.URL;\n-import java.net.HttpURLConnection;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.util.regex.Matcher;\n--- a/src/main/java/org/jsoup/examples/ListLinks.java\n+++ b/src/main/java/org/jsoup/examples/ListLinks.java\n package org.jsoup.examples;\n \n-import org.apache.commons.lang.Validate;\n+import org.jsoup.Jsoup;\n+import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n-import org.jsoup.Jsoup;\n import org.jsoup.select.Elements;\n \n+import java.io.IOException;\n import java.net.URL;\n-import java.io.IOException;\n \n /**\n  * Example program to list links from a URL.\n--- /dev/null\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n+package org.jsoup.helper;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+/**\n+ * A minimal String utility class. Designed for interal jsoup use only.\n+ */\n+public final class StringUtil {\n+    // memoised padding up to 10\n+    private static final String[] padding = {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \", \"         \", \"          \"};\n+\n+    /**\n+     * Join a collection of strings by a seperator\n+     * @param strings collection of string objects\n+     * @param sep string to place between strings\n+     * @return joined string\n+     */\n+    public static String join(Collection<String> strings, String sep) {\n+        return join(strings.iterator(), sep);\n+    }\n+\n+    /**\n+     * Join a collection of strings by a seperator\n+     * @param strings iterator of string objects\n+     * @param sep string to place between strings\n+     * @return joined string\n+     */\n+    public static String join(Iterator<String> strings, String sep) {\n+        if (!strings.hasNext())\n+            return \"\";\n+\n+        String start = strings.next();\n+        if (!strings.hasNext()) // only one, avoid builder\n+            return start;\n+\n+        StringBuilder sb = new StringBuilder(64).append(start);\n+        while (strings.hasNext()) {\n+            sb.append(sep);\n+            sb.append(strings.next());\n+        }\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Returns space padding\n+     * @param width amount of padding desired\n+     * @return string of spaces * width\n+     */\n+    public static String padding(int width) {\n+        if (width < 0)\n+            throw new IllegalArgumentException(\"width must be > 0\");\n+\n+        if (width < padding.length)\n+            return padding[width];\n+\n+        char[] out = new char[width];\n+        for (int i = 0; i < width; i++)\n+            out[i] = ' ';\n+        return String.valueOf(out);\n+    }\n+\n+    /**\n+     * Tests if a string is blank: null, emtpy, or only whitespace (\" \", \\r\\n, \\t, etc)\n+     * @param string string to test\n+     * @return if string is blank\n+     */\n+    public static boolean isBlank(String string) {\n+        if (string == null || string.length() == 0)\n+            return true;\n+\n+        int l = string.length();\n+        for (int i = 0; i < l; i++) {\n+            if (!Character.isWhitespace(string.codePointAt(i)))\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Tests if a string is numeric, i.e. contains only digit characters\n+     * @param string string to test\n+     * @return true if only digit chars, false if empty or null or contains non-digit chrs\n+     */\n+    public static boolean isNumeric(String string) {\n+        if (string == null || string.length() == 0)\n+            return false;\n+\n+        int l = string.length();\n+        for (int i = 0; i < l; i++) {\n+            if (!Character.isDigit(string.codePointAt(i)))\n+                return false;\n+        }\n+        return true;\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/helper/Validate.java\n+package org.jsoup.helper;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Simple validation methods. Designed for jsoup internal use\n+ */\n+public final class Validate {\n+\n+    /**\n+     * Validates that the obect is not null\n+     * @param obj object to test\n+     */\n+    public static void notNull(Object obj) {\n+        if (obj == null)\n+            throw new IllegalArgumentException(\"Object must not be null\");\n+    }\n+\n+    /**\n+     * Validates that the object is not null\n+     * @param obj object to test\n+     * @param msg message to output if validation fails\n+     */\n+    public static void notNull(Object obj, String msg) {\n+        if (obj == null)\n+            throw new IllegalArgumentException(msg);\n+    }\n+\n+    /**\n+     * Validates that the value is true\n+     * @param val object to test\n+     */\n+    public static void isTrue(boolean val) {\n+        if (!val)\n+            throw new IllegalArgumentException(\"Must be true\");\n+    }\n+\n+    /**\n+     * Validates that the value is true\n+     * @param val object to test\n+     * @param msg message to output if validation fails\n+     */\n+    public static void isTrue(boolean val, String msg) {\n+        if (!val)\n+            throw new IllegalArgumentException(msg);\n+    }\n+\n+    /**\n+     * Validates that the array contains no null elements\n+     * @param objects the array to test\n+     */\n+    public static void noNullElements(Object[] objects) {\n+        noNullElements(objects, \"Array must not contain any null objects\");\n+    }\n+\n+    /**\n+     * Validates that the array contains no null elements\n+     * @param objects the array to test\n+     * @param msg message to output if validation fails\n+     */\n+    public static void noNullElements(Object[] objects, String msg) {\n+        for (Object obj : objects)\n+            if (obj == null)\n+                throw new IllegalArgumentException(msg);\n+    }\n+\n+    /**\n+     * Validates that the string is not empty\n+     * @param string the string to test\n+     */\n+    public static void notEmpty(String string) {\n+        if (string == null || string.length() == 0)\n+            throw new IllegalArgumentException(\"String must not be empty\");\n+    }\n+\n+    /**\n+     * Validates that the string is not empty\n+     * @param string the string to test\n+     * @param msg message to output if validation fails\n+     */\n+    public static void notEmpty(String string, String msg) {\n+        if (string == null || string.length() == 0)\n+            throw new IllegalArgumentException(msg);\n+    }\n+}\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n package org.jsoup.nodes;\n \n-import org.apache.commons.lang.StringEscapeUtils;\n-import org.apache.commons.lang.Validate;\n+import org.jsoup.helper.Validate;\n \n import java.util.Map;\n \n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n package org.jsoup.nodes;\n \n-import org.apache.commons.lang.Validate;\n+import org.jsoup.helper.Validate;\n \n import java.util.*;\n \n--- a/src/main/java/org/jsoup/nodes/DataNode.java\n+++ b/src/main/java/org/jsoup/nodes/DataNode.java\n package org.jsoup.nodes;\n-\n-import org.apache.commons.lang.StringEscapeUtils;\n \n /**\n  A data node, for contents of style, script tags etc, where contents should not show in text().\n      @return new DataNode\n      */\n     public static DataNode createFromEncoded(String encodedData, String baseUri) {\n-        String data = StringEscapeUtils.unescapeHtml(encodedData);\n+        String data = Entities.unescape(encodedData);\n         return new DataNode(data, baseUri);\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n package org.jsoup.nodes;\n \n-import org.apache.commons.lang.Validate;\n+import org.jsoup.helper.Validate;\n import org.jsoup.parser.Tag;\n \n-import java.util.List;\n-import java.util.ArrayList;\n import java.nio.charset.Charset;\n import java.nio.charset.CharsetEncoder;\n+import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  A HTML Document.\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n package org.jsoup.nodes;\n \n-import org.apache.commons.lang.Validate;\n-import org.apache.commons.lang.StringUtils;\n+import org.jsoup.helper.StringUtil;\n+import org.jsoup.helper.Validate;\n import org.jsoup.parser.Parser;\n import org.jsoup.parser.Tag;\n import org.jsoup.select.Collector;\n      */\n     public Element classNames(Set<String> classNames) {\n         Validate.notNull(classNames);\n-        attributes.put(\"class\", StringUtils.join(classNames, \" \"));\n+        attributes.put(\"class\", StringUtil.join(classNames, \" \"));\n         return this;\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n package org.jsoup.nodes;\n \n+import java.nio.charset.CharsetEncoder;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n-import java.util.regex.Matcher;\n-import java.nio.charset.CharsetEncoder;\n \n /**\n  * HMTL entities, and escape routines.\n--- a/src/main/java/org/jsoup/nodes/Evaluator.java\n+++ b/src/main/java/org/jsoup/nodes/Evaluator.java\n package org.jsoup.nodes;\n \n+import org.jsoup.helper.Validate;\n+\n+import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n-import java.util.List;\n-\n-import org.apache.commons.lang.Validate;\n \n \n /**\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n package org.jsoup.nodes;\n \n-import org.apache.commons.lang.Validate;\n-import org.apache.commons.lang.StringUtils;\n+import org.jsoup.helper.StringUtil;\n+import org.jsoup.helper.Validate;\n+import org.jsoup.select.NodeTraversor;\n import org.jsoup.select.NodeVisitor;\n-import org.jsoup.select.NodeTraversor;\n \n import java.net.MalformedURLException;\n import java.net.URL;\n     }\n \n     protected void indent(StringBuilder accum, int depth) {\n-        accum.append(\"\\n\").append(StringUtils.leftPad(\"\", depth));\n+        accum.append(\"\\n\").append(StringUtil.padding(depth));\n     }\n \n     @Override\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n package org.jsoup.nodes;\n \n+import org.jsoup.helper.StringUtil;\n+import org.jsoup.helper.Validate;\n+\n import java.util.regex.Pattern;\n-\n-import org.apache.commons.lang.StringEscapeUtils;\n-import org.apache.commons.lang.Validate;\n-import org.apache.commons.lang.StringUtils;\n \n /**\n  A text node.\n      @return true if this document is empty or only whitespace, false if it contains any text content.\n      */\n     public boolean isBlank() {\n-        return StringUtils.isBlank(normaliseWhitespace(getWholeText()));\n+        return StringUtil.isBlank(getWholeText());\n     }\n \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n     }\n \n     static boolean lastCharIsWhitespace(StringBuilder sb) {\n-        if (sb.length() == 0)\n-            return false;\n-        String lastChar = sb.substring(sb.length()-1, sb.length());\n-        Validate.isTrue(lastChar.length() == 1); // todo: remove check\n-        return lastChar.equals(\" \");\n+        return sb.length() != 0 && sb.charAt(sb.length() - 1) == ' ';\n     }\n }\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n package org.jsoup.parser;\n \n-import org.apache.commons.lang.Validate;\n+\n+import org.jsoup.helper.Validate;\n import org.jsoup.nodes.*;\n \n-import java.util.*;\n+import java.util.LinkedList;\n \n /**\n  Parses HTML into a {@link Document}. Generally best to use one of the  more convenient parse methods in {@link org.jsoup.Jsoup}.\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n package org.jsoup.parser;\n \n-import org.apache.commons.lang.Validate;\n+import org.jsoup.helper.Validate;\n \n import java.util.*;\n \n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n package org.jsoup.parser;\n \n-import org.apache.commons.lang.Validate;\n+import org.jsoup.helper.Validate;\n \n /**\n  * A character queue with parsing helpers.\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n package org.jsoup.safety;\n \n-import org.apache.commons.lang.Validate;\n+import org.jsoup.helper.Validate;\n import org.jsoup.nodes.*;\n import org.jsoup.parser.Tag;\n \n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n     this whitelist configuration, and the initial defaults.\n  */\n \n-import org.apache.commons.lang.Validate;\n+import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Attributes;\n import org.jsoup.nodes.Element;\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n package org.jsoup.select;\n \n+import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Element;\n-import org.apache.commons.lang.Validate;\n \n import java.util.*;\n \n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n package org.jsoup.select;\n \n-import org.apache.commons.lang.StringUtils;\n-import org.apache.commons.lang.Validate;\n+\n+import org.jsoup.helper.StringUtil;\n+import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Element;\n import org.jsoup.parser.TokenQueue;\n \n \n     private int consumeIndex() {\n         String indexS = tq.chompTo(\")\").trim();\n-        Validate.isTrue(StringUtils.isNumeric(indexS), \"Index must be numeric\");\n+        Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\");\n         return Integer.parseInt(indexS);\n     }\n \n--- /dev/null\n+++ b/src/test/java/org/jsoup/helper/StringUtilTest.java\n+package org.jsoup.helper;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Arrays;\n+\n+public class StringUtilTest {\n+\n+    @Test public void join() {\n+        assertEquals(\"\", StringUtil.join(Arrays.<String>asList(\"\"), \" \"));\n+        assertEquals(\"one\", StringUtil.join(Arrays.<String>asList(\"one\"), \" \"));\n+        assertEquals(\"one two three\", StringUtil.join(Arrays.<String>asList(\"one\", \"two\", \"three\"), \" \"));\n+    }\n+\n+    @Test public void padding() {\n+        assertEquals(\"\", StringUtil.padding(0));\n+        assertEquals(\" \", StringUtil.padding(1));\n+        assertEquals(\"  \", StringUtil.padding(2));\n+        assertEquals(\"               \", StringUtil.padding(15));\n+    }\n+\n+    @Test public void isBlank() {\n+        assertTrue(StringUtil.isBlank(null));\n+        assertTrue(StringUtil.isBlank(\"\"));\n+        assertTrue(StringUtil.isBlank(\"      \"));\n+        assertTrue(StringUtil.isBlank(\"   \\r\\n  \"));\n+\n+        assertFalse(StringUtil.isBlank(\"hello\"));\n+        assertFalse(StringUtil.isBlank(\"   hello   \"));\n+    }\n+\n+    @Test public void isNumeric() {\n+        assertFalse(StringUtil.isNumeric(null));\n+        assertFalse(StringUtil.isNumeric(\" \"));\n+        assertFalse(StringUtil.isNumeric(\"123 546\"));\n+        assertFalse(StringUtil.isNumeric(\"hello\"));\n+        assertFalse(StringUtil.isNumeric(\"123.334\"));\n+\n+        assertTrue(StringUtil.isNumeric(\"1\"));\n+        assertTrue(StringUtil.isNumeric(\"1234\"));\n+    }\n+}", "timestamp": 1309605117, "metainfo": ""}