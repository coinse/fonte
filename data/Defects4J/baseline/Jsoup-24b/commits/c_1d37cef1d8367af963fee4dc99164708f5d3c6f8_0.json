{"sha": "1d37cef1d8367af963fee4dc99164708f5d3c6f8", "log": "Fixed HTML entity parser to correctly parse entities like frac14 (letter + number combo).  Fixes #145", "commit": "\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n         return input.substring(start, pos);\n     }\n \n+    String consumeLetterThenDigitSequence() {\n+        int start = pos;\n+        while (!isEmpty()) {\n+            char c = input.charAt(pos);\n+            if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\n+                pos++;\n+            else\n+                break;\n+        }\n+        while (!isEmpty()) {\n+            char c = input.charAt(pos);\n+            if (c >= '0' && c <= '9')\n+                pos++;\n+            else\n+                break;\n+        }\n+\n+        return input.substring(start, pos);\n+    }\n+\n     String consumeHexSequence() {\n         int start = pos;\n         while (!isEmpty()) {\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n             }\n         } else { // named\n             // get as many letters as possible, and look for matching entities. unconsume backwards till a match is found\n-            String nameRef = reader.consumeLetterSequence();\n+            String nameRef = reader.consumeLetterThenDigitSequence();\n             String origNameRef = new String(nameRef); // for error reporting. nameRef gets chomped looking for matches\n             boolean looksLegit = reader.matches(';');\n             boolean found = false;\n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n package org.jsoup.nodes;\n \n+import org.jsoup.Jsoup;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n         \n         assertEquals(unescaped, Entities.unescape(escaped));\n     }\n+\n+    @Test public void letterDigitEntities() {\n+        String html = \"<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>\";\n+        Document doc = Jsoup.parse(html);\n+        Element p = doc.select(\"p\").first();\n+        assertEquals(\"&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;\", p.html());\n+        assertEquals(\"\u00b9\u00b2\u00b3\u00bc\u00bd\u00be\", p.text());\n+    }\n }", "timestamp": 1334431906, "metainfo": ""}