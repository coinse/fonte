{"sha": "04025259e96d3676097e84126fb55124b92c50ed", "log": "Initial, partial implementation of Selector.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n import org.jsoup.parser.StartTag;\n import org.jsoup.parser.Tag;\n import org.jsoup.select.Collector;\n+import org.jsoup.select.ElementList;\n import org.jsoup.select.Evaluator;\n+import org.jsoup.select.Selector;\n \n import java.util.*;\n \n \n     public List<Element> children() {\n         return Collections.unmodifiableList(elementChildren);\n+    }\n+\n+    public ElementList select(String query) {\n+        return Selector.select(query, this);\n     }\n \n     public void addChild(Element child) {\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n             } else {\n                 StringBuilder valueAccum = new StringBuilder();\n                 // no ' or \" to look for, so scan to end tag or space (or end of stream)\n-                while (!tq.matches(\"<\") && !tq.matches(\"/>\") && !tq.matches(\">\") && !Character.isWhitespace(tq.peek()) && !tq.isEmpty()) {\n+                while (!tq.matches(\"<\") && !tq.matches(\"/>\") && !tq.matches(\">\") && !tq.matchesWhitespace() && !tq.isEmpty()) {\n                     valueAccum.append(tq.consume());\n                 }\n                 value = valueAccum.toString();\n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n  *\n  * @author Jonathan Hedley\n  */\n-class TokenQueue {\n+public class TokenQueue {\n     private LinkedList<Character> queue;\n \n-    TokenQueue(String data) {\n+    public TokenQueue(String data) {\n         Validate.notNull(data);\n \n         queue = new LinkedList<Character>();\n      * Is the queue empty?\n      * @return true if no data left in queue.\n      */\n-    boolean isEmpty() {\n+    public boolean isEmpty() {\n         return queue.isEmpty();\n     }\n \n      * Retrieves but does not remove the first characater from the queue.\n      * @return First character, or null if empty.\n      */\n-    Character peek() {\n+    public Character peek() {\n         return queue.peek();\n     }\n \n      * @param seq String to check queue for.\n      * @return true if the next characters match.\n      */\n-    boolean matches(String seq) {\n+    public boolean matches(String seq) {\n         int len = seq.length();\n         if (len > queue.size())\n             return false;\n     }\n \n     /**\n+     Tests if the next characters match any of the sequences.\n+     @param seq\n+     @return\n+     */\n+    public boolean matchesAny(String... seq) {\n+        for (String s : seq) {\n+            if (matches(s))\n+                return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n      * Tests if the queue matches the sequence (as with match), and if they do, removes the matched string from the\n      * queue.\n      * @param seq String to search for, and if found, remove from queue.\n      * @return true if found and removed, false if not found.\n      */\n-    boolean matchChomp(String seq) {\n+    public boolean matchChomp(String seq) {\n         if (matches(seq)) {\n             consume(seq);\n             return true;\n         }\n     }\n \n+    public boolean matchesWhitespace() {\n+        return !queue.isEmpty() && Character.isWhitespace(queue.peek());\n+    }\n+\n+    public boolean matchesWord() {\n+        return !queue.isEmpty() && Character.isLetterOrDigit(queue.peek());\n+    }\n+\n     /**\n      * Consume one character off queue.\n      * @return first character on queue.\n      */\n-    Character consume() {\n+    public Character consume() {\n         return queue.removeFirst();\n     }\n \n      * throw an illegal state exception -- but you should be running match() against that condition.\n      * @param seq sequence to remove from head of queue.\n      */\n-    void consume(String seq) {\n+    public void consume(String seq) {\n         int len = seq.length();\n         if (len > queue.size())\n             throw new IllegalStateException(\"Queue not long enough to consume sequence\");\n      * @param seq String to end on (and not include in return, but leave on queue)\n      * @return The matched data consumed from queue.\n      */\n-    String consumeTo(String seq) {\n+    public String consumeTo(String seq) {\n+        return consumeToAny(seq);\n+    }\n+\n+    public String consumeToAny(String... seq) {\n         StringBuilder accum = new StringBuilder();\n-        while (!queue.isEmpty() && !matches(seq))\n+        while (!queue.isEmpty() && !matchesAny(seq))\n             accum.append(consume());\n \n         return accum.toString();\n      * @param seq String to match up to, and not include in return, and to pull off queue\n      * @return Data matched from queue.\n      */\n-    String chompTo(String seq) {\n+    public String chompTo(String seq) {\n         String data = consumeTo(seq);\n         matchChomp(seq);\n         return data;\n     /**\n      * Pulls the next run of whitespace characters of the queue.\n      */\n-    void consumeWhitespace() {\n+    public void consumeWhitespace() {\n         while (!queue.isEmpty() && Character.isWhitespace(queue.peekFirst())) {\n             consume();\n         }\n      * Retrieves the next run of word type (letter or digit) off the queue.\n      * @return String of word characters from queue, or empty string if none.\n      */\n-    String consumeWord() {\n+    public String consumeWord() {\n         StringBuilder wordAccum = new StringBuilder();\n         while (!queue.isEmpty() && Character.isLetterOrDigit(queue.peekFirst())) {\n             wordAccum.append(queue.removeFirst());\n         }\n         return wordAccum.toString();\n     }\n+\n+    public String consumeClassName() {\n+        StringBuilder accum = new StringBuilder();\n+        Character c = queue.peek();\n+        while (!queue.isEmpty() && (Character.isLetterOrDigit(c) || c.equals('-') || c.equals('_'))) {\n+            accum.append(queue.removeFirst());\n+        }\n+        return accum.toString();\n+    }\n }\n--- /dev/null\n+++ b/src/main/java/org/jsoup/select/ElementList.java\n+package org.jsoup.select;\n+\n+import org.jsoup.nodes.Element;\n+\n+import java.util.*;\n+\n+/**\n+ A list of {@link Element Elements}, with methods that act on every element in the list\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class ElementList implements List<Element>{\n+    private List<Element> contents;\n+\n+    public ElementList() {\n+        contents = new ArrayList<Element>();\n+    }\n+\n+    // implements List<Element> delegates:\n+    public int size() {return contents.size();}\n+\n+    public boolean isEmpty() {return contents.isEmpty();}\n+\n+    public boolean contains(Object o) {return contents.contains(o);}\n+\n+    public Iterator<Element> iterator() {return contents.iterator();}\n+\n+    public Object[] toArray() {return contents.toArray();}\n+\n+    public <T> T[] toArray(T[] a) {return contents.toArray(a);}\n+\n+    public boolean add(Element element) {return contents.add(element);}\n+\n+    public boolean remove(Object o) {return contents.remove(o);}\n+\n+    public boolean containsAll(Collection<?> c) {return contents.containsAll(c);}\n+\n+    public boolean addAll(Collection<? extends Element> c) {return contents.addAll(c);}\n+\n+    public boolean addAll(int index, Collection<? extends Element> c) {return contents.addAll(index, c);}\n+\n+    public boolean removeAll(Collection<?> c) {return contents.removeAll(c);}\n+\n+    public boolean retainAll(Collection<?> c) {return contents.retainAll(c);}\n+\n+    public void clear() {contents.clear();}\n+\n+    public boolean equals(Object o) {return contents.equals(o);}\n+\n+    public int hashCode() {return contents.hashCode();}\n+\n+    public Element get(int index) {return contents.get(index);}\n+\n+    public Element set(int index, Element element) {return contents.set(index, element);}\n+\n+    public void add(int index, Element element) {contents.add(index, element);}\n+\n+    public Element remove(int index) {return contents.remove(index);}\n+\n+    public int indexOf(Object o) {return contents.indexOf(o);}\n+\n+    public int lastIndexOf(Object o) {return contents.lastIndexOf(o);}\n+\n+    public ListIterator<Element> listIterator() {return contents.listIterator();}\n+\n+    public ListIterator<Element> listIterator(int index) {return contents.listIterator(index);}\n+\n+    public List<Element> subList(int fromIndex, int toIndex) {return contents.subList(fromIndex, toIndex);}\n+}\n--- /dev/null\n+++ b/src/main/java/org/jsoup/select/Selector.java\n+package org.jsoup.select;\n+\n+import org.apache.commons.lang.Validate;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.parser.TokenQueue;\n+\n+import java.util.List;\n+\n+\n+/**\n+ TODO: Document\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class Selector {\n+    private final Element root;\n+    private final ElementList elements;\n+    private final String query;\n+    private final TokenQueue tq;\n+\n+    private Selector(String query, Element root) {\n+        Validate.notEmpty(query);\n+        Validate.notNull(root);\n+\n+        this.elements = new ElementList();\n+        this.query = query.trim();\n+        this.root = root;\n+        this.tq = new TokenQueue(query);\n+    }\n+\n+    public static ElementList select(String query, Element root) {\n+        return new Selector(query, root).select();\n+    }\n+\n+    private ElementList select() {\n+        tq.consumeWhitespace();\n+        while (!tq.isEmpty()) {\n+            if (tq.matchChomp(\"#\")) {\n+                byId();\n+            } else if (tq.matchChomp(\".\")) {\n+                byClass();\n+            } else if (tq.matchesWord()) {\n+                byTag();\n+            } else if (tq.matchChomp(\"[\")) {\n+                byAttribute();\n+            } else { // unhandled\n+                throw new SelectorParseException(\"Could not parse query \" + query);\n+            }\n+        }\n+        return elements;\n+    }\n+\n+    private void byId() {\n+        String id = tq.consumeWord();\n+        Validate.notEmpty(id);\n+\n+        Element found = root.getElementById(id);\n+        if(found != null)\n+            elements.add(found);\n+    }\n+\n+    private void byClass() {\n+        String className = tq.consumeClassName();\n+        Validate.notEmpty(className);\n+\n+        List<Element> found = root.getElementsWithClass(className);\n+        elements.addAll(found);\n+    }\n+\n+    private void byTag() {\n+        String tagName = tq.consumeWord();\n+        Validate.notEmpty(tagName);\n+\n+        elements.addAll(root.getElementsByTag(tagName));\n+    }\n+\n+    private void byAttribute() {\n+        String key = tq.consumeToAny(\"=\", \"]\");\n+        Validate.notEmpty(key);\n+        String value = null;\n+        if (tq.matchChomp(\"=\"))\n+            value = tq.chompTo(\"]\");\n+        else\n+            tq.consume(\"]\");\n+\n+        if (value != null)\n+            elements.addAll(root.getElementsWithAttributeValue(key, value));\n+        else {\n+            elements.addAll(root.getElementsWithAttribute(key));\n+        }\n+\n+    }\n+\n+    public static class SelectorParseException extends IllegalStateException {\n+        public SelectorParseException(String s) {\n+            super(s);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n+package org.jsoup.select;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+/**\n+ Tests that the selector selects correctly.\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class SelectorTest {\n+    @Test public void testByTag() {\n+        ElementList els = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\").select(\"div\");\n+        assertEquals(3, els.size());\n+        assertEquals(\"1\", els.get(0).id());\n+        assertEquals(\"2\", els.get(1).id());\n+        assertEquals(\"3\", els.get(2).id());\n+\n+        ElementList none = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\").select(\"span\");\n+        assertEquals(0, none.size());\n+    }\n+\n+    @Test public void testById() {\n+        ElementList els = Jsoup.parse(\"<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>\").select(\"#foo\");\n+        assertEquals(1, els.size());\n+        assertEquals(\"Hello\", els.get(0).text());\n+\n+        ElementList none = Jsoup.parse(\"<div id=1></div>\").select(\"#foo\");\n+        assertEquals(0, none.size());\n+    }\n+\n+    @Test public void testByClass() {\n+        ElementList els = Jsoup.parse(\"<p id=0 class='one two'><p id=1 class='one'><p id=2 class='two'>\").select(\".one\");\n+        assertEquals(2, els.size());\n+        assertEquals(\"0\", els.get(0).id());\n+        assertEquals(\"1\", els.get(1).id());\n+\n+        ElementList none = Jsoup.parse(\"<div class='one'></div>\").select(\".foo\");\n+        assertEquals(0, none.size());\n+\n+        ElementList els2 = Jsoup.parse(\"<div class='one-two'></div>\").select(\".one-two\");\n+        assertEquals(1, els2.size());\n+    }\n+\n+    @Test public void testByAttribute() {\n+        String h = \"<div title=foo /><div title=bar /><div />\";\n+        Document doc = Jsoup.parse(h);\n+        ElementList withTitle = doc.select(\"[title]\");\n+        ElementList foo = doc.select(\"[title=foo]\");\n+\n+        assertEquals(2, withTitle.size());\n+        assertEquals(1, foo.size());\n+    }\n+}", "timestamp": 1309605101, "metainfo": ""}