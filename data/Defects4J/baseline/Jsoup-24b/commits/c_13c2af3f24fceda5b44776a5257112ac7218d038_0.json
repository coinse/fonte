{"sha": "13c2af3f24fceda5b44776a5257112ac7218d038", "log": "Output format tweak", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        if (out.prettyPrint() && (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0)))\n+        if (out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock())))\n             indent(accum, depth, out);\n         accum\n                 .append(\"<\")\n \n     void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n         if (!(childNodes.isEmpty() && tag.isSelfClosing())) {\n-            if (out.prettyPrint() && !childNodes.isEmpty() && tag.canContainBlock())\n+            if (out.prettyPrint() && !childNodes.isEmpty() && tag.formatAsBlock())\n                 indent(accum, depth, out);\n             accum.append(\"</\").append(tagName()).append(\">\");\n         }\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n             html = normaliseWhitespace(html);\n         }\n \n-        if (out.prettyPrint() && siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().canContainBlock() && !isBlank())\n+        if (out.prettyPrint() && siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().formatAsBlock() && !isBlank())\n             indent(accum, depth, out);\n         accum.append(html);\n     }\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n     private String tagName;\n     private boolean knownTag = false; // if pre-defined or auto-created\n     private boolean isBlock = true; // block or inline\n+    private boolean formatAsBlock = true;\n     private boolean canContainBlock = true; // Can this tag hold block level tags?\n     private boolean canContainInline = true; // only pcdata if not\n     private boolean optionalClosing = false; // If tag is open, and another seen, close previous tag\n     }\n \n     /**\n+     * Gets if this tag should be formatted as a block (or as inline)\n+     * @return if should be formatted as block or inline\n+     */\n+    public boolean formatAsBlock() {\n+        return formatAsBlock;\n+    }\n+\n+    /**\n      Gets if this tag can contain block tags.\n      @return if tag can contain block tags\n      */\n         createBlock(\"META\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n         createBlock(\"LINK\").setAncestor(\"HEAD\", \"BODY\").setEmpty(); // only within head\n         createInline(\"OBJECT\").setAncestor(\"HEAD\", \"BODY\"); // flow (block/inline) or param\n-        createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly();\n+        createBlock(\"TITLE\").setAncestor(\"HEAD\", \"BODY\").setContainDataOnly().setFormatAsInline();\n         createInline(\"BASE\").setAncestor(\"HEAD\", \"BODY\").setEmpty();\n \n         createBlock(\"FRAME\").setParent(\"FRAMESET\").setEmpty();\n         // will need to have another non block/inline type, and explicit include & exclude rules. should be right though\n \n         // block\n-        createInline(\"SPAN\").setCanContainBlock(); // spec is phrasing only, practise is block\n+        createInline(\"SPAN\").setCanContainBlock().setFormatAsInline(); // spec is phrasing only, practise is block\n         createBlock(\"P\").setContainInlineOnly(); // emasculated block?\n-        createBlock(\"H1\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n-        createBlock(\"H2\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n-        createBlock(\"H3\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n-        createBlock(\"H4\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n-        createBlock(\"H5\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n-        createBlock(\"H6\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n+        createBlock(\"H1\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n+        createBlock(\"H2\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n+        createBlock(\"H3\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n+        createBlock(\"H4\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n+        createBlock(\"H5\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n+        createBlock(\"H6\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\").setFormatAsInline();\n         createBlock(\"UL\");\n         createBlock(\"OL\");\n         createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n         createBlock(\"DT\").setAncestor(\"DL\").setExcludes(\"DL\", \"DD\").setOptionalClosing(); // only within DL.\n         createBlock(\"DD\").setAncestor(\"DL\").setExcludes(\"DL\", \"DT\").setOptionalClosing(); // only within DL.\n \n-        createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing(); // only within OL or UL.\n+        createBlock(\"LI\").setAncestor(\"UL\", \"OL\").setOptionalClosing().setFormatAsInline(); // only within OL or UL.\n \n         // tables\n         createBlock(\"TABLE\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TBODY\", \"TD\", \"TFOO\", \"TH\", \"THEAD\", \"TR\"); // specific list of only includes (tr, td, thead etc) not implemented\n         createBlock(\"COLGROUP\").setParent(\"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"COL\"); // just COL\n         createBlock(\"COL\").setParent(\"COLGROUP\").setEmpty();\n         createBlock(\"TR\").setParent(\"TBODY\", \"THEAD\", \"TFOOT\", \"TABLE\").setLimitChildren().setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\", \"TD\", \"TH\"); // just TH, TD\n-        createBlock(\"TH\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\");\n-        createBlock(\"TD\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\");\n+        createBlock(\"TH\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\").setFormatAsInline();\n+        createBlock(\"TD\").setParent(\"TR\").setExcludes(\"THEAD\", \"TFOOT\", \"TBODY\", \"COLGROUP\", \"COL\", \"TR\", \"TH\", \"TD\").setOptionalClosing().setIgnoreEnd(\"BODY\", \"CAPTION\", \"COL\", \"COLGROUP\", \"HTML\").setFormatAsInline();\n         \n         // html5 media\n         createBlock(\"VIDEO\").setExcludes(\"VIDEO\", \"AUDIO\");\n         Tag inline = new Tag(tagName);\n         inline.isBlock = false;\n         inline.canContainBlock = false;\n+        inline.formatAsBlock = false;\n         return register(inline);\n     }\n \n     private Tag setContainInlineOnly() {\n         canContainBlock = false;\n         canContainInline = true;\n+        formatAsBlock = false;\n+        return this;\n+    }\n+\n+    private Tag setFormatAsInline() {\n+        formatAsBlock = false;\n         return this;\n     }\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n     }\n \n     @Test public void testFormatHtml() {\n-        Document doc = Jsoup.parse(\"<div><p>Hello</p></div>\");\n-        assertEquals(\"<html>\\n <head></head>\\n <body>\\n  <div>\\n   <p>Hello</p>\\n  </div>\\n </body>\\n</html>\", doc.html());\n+        Document doc = Jsoup.parse(\"<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>\");\n+        assertEquals(\"<html>\\n <head>\\n  <title>Format test</title>\\n </head>\\n <body>\\n  <div>\\n   <p>Hello <span>jsoup <span>users</span></span></p>\\n   <p>Good.</p>\\n  </div>\\n </body>\\n</html>\", doc.html());\n     }\n \n     @Test public void testSetIndent() {\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n     @Test public void handlesWhatWgExpensesTableExample() {\n         // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0\n         Document doc = Jsoup.parse(\"<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>\");\n-        assertEquals(\"<table> <colgroup> <col /> </colgroup><colgroup> <col /> <col /> <col /> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\\\"rowgroup\\\">Research and development </th><td>$ 1,109 </td><td>$ 782 </td><td>$ 712 </td></tr><tr> <th scope=\\\"row\\\">Percentage of net sales </th><td>3.4% </td><td>3.3% </td><td>3.7% </td></tr></tbody><tbody> <tr> <th scope=\\\"rowgroup\\\">Selling, general, and administrative </th><td>$ 3,761 </td><td>$ 2,963 </td><td>$ 2,433 </td></tr><tr> <th scope=\\\"row\\\">Percentage of net sales </th><td>11.6% </td><td>12.3% </td><td>12.6% </td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n+        assertEquals(\"<table> <colgroup> <col /> </colgroup><colgroup> <col /> <col /> <col /> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\\\"rowgroup\\\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\\\"rowgroup\\\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\\\"row\\\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n     \n     @Test public void handlesTbodyTable() {\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         els.val(\"three\");\n         assertEquals(\"three\", els.first().val());\n         assertEquals(\"three\", els.last().val());\n-        assertEquals(\"<textarea>three</textarea>\", els.last().outerHtml());\n+        assertEquals(\"\\n<textarea>three</textarea>\", els.last().outerHtml());\n     }\n     \n     @Test public void before() {", "timestamp": 1309605122, "metainfo": ""}