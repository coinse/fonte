{"sha": "0b56f3e5e012e689af8dda0e96d6e0c9f31853b6", "log": "Test fix", "commit": "\n--- a/src/main/java/org/jsoup/parser/Tag.java\n+++ b/src/main/java/org/jsoup/parser/Tag.java\n         // will need to have another non block/inline type, and explicit include & exclude rules. should be right though\n \n         // block\n-        createBlock(\"SPAN\"); // spec is phrasing only, practise is block\n+        createInline(\"SPAN\").setCanContainBlock(); // spec is phrasing only, practise is block\n         createBlock(\"P\").setContainInlineOnly(); // emasculated block?\n-        createBlock(\"H1\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n-        createBlock(\"H2\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n-        createBlock(\"H3\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n-        createBlock(\"H4\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n-        createBlock(\"H5\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n-        createBlock(\"H6\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n+        createBlock(\"H1\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n+        createBlock(\"H2\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n+        createBlock(\"H3\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n+        createBlock(\"H4\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n+        createBlock(\"H5\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n+        createBlock(\"H6\").setAncestor(\"BODY\", \"HGROUP\").setExcludes(\"HGROUP\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\");\n         createBlock(\"UL\");\n         createBlock(\"OL\");\n         createBlock(\"PRE\").setContainInlineOnly().setPreserveWhitespace();\n         return tag;\n     }\n \n+    private Tag setCanContainBlock() {\n+        canContainBlock = true;\n+        return this;\n+    }\n+\n     private Tag setContainInlineOnly() {\n         canContainBlock = false;\n         canContainInline = true;\n--- a/src/test/java/org/jsoup/nodes/NodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n package org.jsoup.nodes;\n \n import org.jsoup.Jsoup;\n+import org.jsoup.TextUtil;\n import org.jsoup.parser.Tag;\n import org.junit.Test;\n \n         p.childNode(0).remove();\n         \n         assertEquals(\"two three\", p.text());\n-        assertEquals(\"<span>two</span> three\", p.html());\n+        assertEquals(\"<span>two</span> three\", TextUtil.stripNewlines(p.html()));\n     }\n     \n     @Test public void testReplace() {\n--- a/src/test/java/org/jsoup/nodes/TextNodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/TextNodeTest.java\n package org.jsoup.nodes;\n \n import org.jsoup.Jsoup;\n+import org.jsoup.TextUtil;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n         assertEquals(\" three &\", tn.text());\n         \n         tn.text(\" POW!\");\n-        assertEquals(\"One <span>two &amp;</span> POW!\", p.html());\n+        assertEquals(\"One <span>two &amp;</span> POW!\", TextUtil.stripNewlines(p.html()));\n \n         tn.attr(\"text\", \"kablam &\");\n         assertEquals(\"kablam &\", tn.text());\n-        assertEquals(\"One <span>two &amp;</span>kablam &amp;\", p.html());\n+        assertEquals(\"One <span>two &amp;</span>kablam &amp;\", TextUtil.stripNewlines(p.html()));\n     }\n }\n--- a/src/test/java/org/jsoup/parser/TagTest.java\n+++ b/src/test/java/org/jsoup/parser/TagTest.java\n         Tag div = Tag.valueOf(\"div\");\n \n         assertTrue(span.canContain(span));\n-        assertFalse(span.canContain(p));\n-        assertFalse(span.canContain(div));\n+        assertTrue(span.canContain(p));\n+        assertTrue(span.canContain(div));\n     }\n \n     @Test public void imgSemantics() {\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n     @Test public void before() {\n         Document doc = Jsoup.parse(\"<p>This <a>is</a> <a>jsoup</a>.</p>\");\n         doc.select(\"a\").before(\"<span>foo</span>\");\n-        assertEquals(\"<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>\", doc.body().html());\n+        assertEquals(\"<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n     \n     @Test public void after() {\n         Document doc = Jsoup.parse(\"<p>This <a>is</a> <a>jsoup</a>.</p>\");\n         doc.select(\"a\").after(\"<span>foo</span>\");\n-        assertEquals(\"<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>\", doc.body().html());\n+        assertEquals(\"<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void wrap() {", "timestamp": 1309605121, "metainfo": ""}