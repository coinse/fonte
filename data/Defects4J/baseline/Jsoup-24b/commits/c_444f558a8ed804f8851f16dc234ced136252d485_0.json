{"sha": "444f558a8ed804f8851f16dc234ced136252d485", "log": "Working on http connection implementation", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n package org.jsoup.helper;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLEncoder;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n import org.jsoup.Connection;\n import org.jsoup.nodes.Document;\n import org.jsoup.parser.TokenQueue;\n-\n-import java.io.BufferedInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.net.HttpURLConnection;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n-import java.util.*;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n \n /** DRAFT implementation of Connection. */\n public class HttpConnection implements Connection {\n         private Collection<Connection.KeyVal> data;\n \n         private Request() {\n+            timeoutSeconds = 3;\n             data = new ArrayList<Connection.KeyVal>();\n             method = Connection.Method.GET;\n         }\n             conn.setInstanceFollowRedirects(true);\n             conn.setConnectTimeout(req.timeout() * 1000);\n             conn.setReadTimeout(req.timeout() * 1000);\n-            // todo: handle get params not in url, and post params\n+            if (req.method() == Connection.Method.POST)\n+                conn.setDoOutput(true);\n+            \n+            if (req.cookies().size() > 0)\n+                conn.addRequestProperty(\"cookie\", getRequestCookieString(req));\n+                \n+            // todo: handle get params not in url\n             conn.connect();\n+            \n+            if (req.method() == Connection.Method.POST)\n+                writePost(req.data(), conn.getOutputStream());          \n \n             // todo: error handling options, allow user to get !200 without exception\n             int status = conn.getResponseCode();\n         }\n \n         public String body() {\n-            // gets set from header on execute, and from meta-equiv on parse. parse may not have happened yet\n+            // charset gets set from header on execute, and from meta-equiv on parse. parse may not have happened yet\n             String body;\n             if (charset == null)\n                 body = Charset.forName(DataUtil.defaultCharset).decode(byteData).toString();\n                 }\n             }\n         }\n+        \n+        private static void writePost(Collection<Connection.KeyVal> data, OutputStream outputStream) throws IOException {\n+            OutputStreamWriter w = new OutputStreamWriter(outputStream, DataUtil.defaultCharset);\n+            boolean first = true;\n+            for (Connection.KeyVal keyVal : data) {\n+                if (!first) \n+                    w.append('&');\n+                else\n+                    first = false;\n+                \n+                w.write(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset));\n+                w.write('=');\n+                w.write(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));\n+            }\n+            w.close();\n+        }\n+        \n+        private static String getRequestCookieString(Connection.Request req) {\n+            StringBuilder sb = new StringBuilder();\n+            boolean first = true;\n+            for (Map.Entry<String, String> cookie : req.cookies().entrySet()) {\n+                if (!first)\n+                    sb.append(\"; \");\n+                else\n+                    first = false;\n+                sb.append(cookie.getKey()).append('=').append(cookie.getValue());\n+                // todo: spec says only ascii, no escaping / encoding defined. validate on set? or escape somehow here?\n+            }\n+            return sb.toString();\n+        }\n     }\n \n     public static class KeyVal implements Connection.KeyVal {\n         public String value() {\n             return value;\n         }\n+\n+        @Override\n+        public String toString() {\n+            return key + \"=\" + value;\n+        }      \n     }\n \n     /**", "timestamp": 1309605118, "metainfo": ""}