{"sha": "668514d0e1be5f1dae2048b145298ce9e116e34c", "log": "Merge pull request #351 from marconilanna/patch-1  Add \"cite\" protocols to relaxed", "commit": "\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n \n                 .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n                 .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n+                .addProtocols(\"cite\", \"cite\", \"http\", \"https\")\n                 .addProtocols(\"img\", \"src\", \"http\", \"https\")\n                 .addProtocols(\"q\", \"cite\", \"http\", \"https\")\n                 ;\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n         this.quirksMode = quirksMode;\n         return this;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        return super.equals(o);\n+    }\n }\n \n--- a/src/main/java/org/jsoup/nodes/FormElement.java\n+++ b/src/main/java/org/jsoup/nodes/FormElement.java\n         }\n         return data;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        return super.equals(o);\n+    }\n }\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n             // scan to first instance of startchar:\n             if (startChar != input[offset])\n                 while(++offset < length && startChar != input[offset]);\n-            if (offset < length) {\n-                int i = offset + 1;\n-                int last = i + seq.length()-1;\n+            int i = offset + 1;\n+            int last = i + seq.length()-1;\n+            if (offset < length && last <= length) {\n                 for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);\n                 if (i == last) // found full sequence\n                     return offset - pos;\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n         if (startTag.isSelfClosing()) {\n             Element el = insertEmpty(startTag);\n             stack.add(el);\n+            tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data\n             tokeniser.emit(new Token.EndTag(el.tagName()));  // ensure we get out of whatever state we are in. emitted for yielded processing\n             return el;\n         }\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n                         tb.transition(InHeadNoscript);\n                     } else if (name.equals(\"script\")) {\n                         // skips some script rules as won't execute them\n-                        tb.insert(start);\n+\n                         tb.tokeniser.transition(TokeniserState.ScriptData);\n                         tb.markInsertionMode();\n                         tb.transition(Text);\n+                        tb.insert(start);\n                     } else if (name.equals(\"head\")) {\n                         tb.error(this);\n                         return false;\n                                 commonAncestor.appendChild(lastNode);\n                             }\n \n-                            Element adopter = new Element(Tag.valueOf(name), tb.getBaseUri());\n+                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n+                            adopter.attributes().addAll(formatEl.attributes());\n                             Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                             for (Node childNode : childNodes) {\n                                 adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n      */\n     @Override\n \tpublic Elements clone() {\n+        Elements clone;\n+        try {\n+            clone = (Elements) super.clone();\n+        } catch (CloneNotSupportedException e) {\n+            throw new RuntimeException(e);\n+        }\n     \tList<Element> elements = new ArrayList<Element>();\n+        clone.contents = elements;\n     \t\n     \tfor(Element e : contents)\n     \t\telements.add(e.clone());\n \t\t\n     \t\n-    \treturn new Elements(elements);\n+    \treturn clone;\n \t}\n \n \t// attribute methods\n--- a/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n+++ b/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n         assertEquals(10, r.nextIndexOf(\"Two\"));\n         assertEquals(\"something Two Three Four\", r.consumeToEnd());\n         assertEquals(-1, r.nextIndexOf(\"Two\"));\n+    }\n+\n+    @Test public void nextIndexOfUnmatched() {\n+        CharacterReader r = new CharacterReader(\"<[[one]]\");\n+        assertEquals(-1, r.nextIndexOf(\"]]>\"));\n     }\n \n     @Test public void consumeToChar() {\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         assertEquals(1, div.childNodeSize()); // no elements, one text node\n     }\n \n+    @Test public void handlesUnclosedCdataAtEOF() {\n+        // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF\n+        String h = \"<![CDATA[]]\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(1, doc.body().childNodeSize());\n+    }\n+\n     @Test public void handlesInvalidStartTags() {\n         String h = \"<div>Hello < There <&amp;></div>\"; // parse to <div {#text=Hello < There <&>}>\n         Document doc = Jsoup.parse(h);\n \n     @Test public void handlesKnownEmptyBlocks() {\n         // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.\n-        String h = \"<div id='1' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two\";\n-        Document doc = Jsoup.parse(h);\n-        assertEquals(\"<div id=\\\"1\\\"></div><div id=\\\"2\\\"><img /><img /></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n+        String h = \"<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"<div id=\\\"1\\\"></div><script src=\\\"/foo\\\"></script><div id=\\\"2\\\"><img /><img /></div><a id=\\\"3\\\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two\", TextUtil.stripNewlines(doc.body().html()));\n     }\n \n     @Test public void handlesSolidusAtAttributeEnd() {\n                 \"</body>\\n\" +\n                 \"</html>\";\n         assertEquals(want, doc.html());\n+    }\n+\n+    @Test public void handlesUnclosedAnchors() {\n+        String h = \"<a href='http://example.com/'>Link<p>Error link</a>\";\n+        Document doc = Jsoup.parse(h);\n+        String want = \"<a href=\\\"http://example.com/\\\">Link</a>\\n<p><a href=\\\"http://example.com/\\\">Error link</a></p>\";\n+        assertEquals(want, doc.body().html());\n     }\n \n     @Test public void reconstructFormattingElements() {\n \n         assertEquals(\"<table><tbody><tr><form></form><input type=\\\"hidden\\\" id=\\\"1\\\" /><td><input type=\\\"text\\\" id=\\\"2\\\" /></td></tr><tr></tr></tbody></table>\", TextUtil.stripNewlines(doc.body().html()));\n     }\n+\n+    @Test public void handlesInputInTable() {\n+        String h = \"<body>\\n\" +\n+                \"<input type=\\\"hidden\\\" name=\\\"a\\\" value=\\\"\\\">\\n\" +\n+                \"<table>\\n\" +\n+                \"<input type=\\\"hidden\\\" name=\\\"b\\\" value=\\\"\\\" />\\n\" +\n+                \"</table>\\n\" +\n+                \"</body>\";\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(1, doc.select(\"table input\").size());\n+        assertEquals(2, doc.select(\"input\").size());\n+    }\n }", "timestamp": 1381106753, "metainfo": ""}