{"sha": "5998a3eaaea26882550b657ff4d1f00e6b04fa1a", "log": "added javadocs", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Evaluator.java\n+++ b/src/main/java/org/jsoup/nodes/Evaluator.java\n      */\n     public abstract boolean matches(Element root, Element element);\n \n+    /**\n+     * Evaluator for tag name\n+     * @author ant\n+     *\n+     */\n     public static final class Tag extends Evaluator {\n         private String tagName;\n         public Tag (String tagName) {\n         \treturn String.format(\":tag=%s\", tagName);\n         }\n     }\n-\n+    \n+    /**\n+     * Evaluator for element id\n+     * @author ant\n+     *\n+     */\n     public static final class Id extends Evaluator {\n         private String id;\n         public Id (String id) {\n         }\n \n     }\n-\n+    \n+    /**\n+     * Evaluator for element class\n+     * @author ant\n+     *\n+     */\n     public static final class Class extends Evaluator {\n         private String className;\n         public Class(String className) {\n \n     }\n \n+    /**\n+     * Evaluator for attibute name matching\n+     * @author ant\n+     *\n+     */\n     public static final class Attribute extends Evaluator {\n         private String key;\n \n \n     }\n \n+    /**\n+     * Evaluator for attribute name prefix matching\n+     * @author ant\n+     *\n+     */\n     public static final class AttributeStarting extends Evaluator {\n         private String keyPrefix;\n \n \n     }\n \n+    /**\n+     * Evaluator for attribute name/value matching\n+     * @author ant\n+     *\n+     */\n     public static final class AttributeWithValue extends AttributeKeyPair {\n         public AttributeWithValue(String key, String value) {\n             super(key, value);\n \n     }\n \n+    /**\n+     * Evaluator for attribute name != value matching\n+     * @author ant\n+     *\n+     */\n     public static final class AttributeWithValueNot extends AttributeKeyPair {\n         public AttributeWithValueNot(String key, String value) {\n             super(key, value);\n         }\n \n     }\n-\n+    \n+    /**\n+     * Evaluator for attribute name/value matching (value prefix)\n+     * @author ant\n+     *\n+     */\n     public static final class AttributeWithValueStarting extends AttributeKeyPair {\n         public AttributeWithValueStarting(String key, String value) {\n             super(key, value);\n \n     }\n \n+    /**\n+     * Evaluator for attribute name/value matching (value ending)\n+     * @author ant\n+     *\n+     */\n     public static final class AttributeWithValueEnding extends AttributeKeyPair {\n         public AttributeWithValueEnding(String key, String value) {\n             super(key, value);\n \n     }\n \n+    /**\n+     * Evaluator for attribute name/value matching (value containing)\n+     * @author ant\n+     *\n+     */\n     public static final class AttributeWithValueContaining extends AttributeKeyPair {\n         public AttributeWithValueContaining(String key, String value) {\n             super(key, value);\n         }\n \n     }\n-    \n+\n+    /**\n+     * Evaluator for attribute name/value matching (value regex matching)\n+     * @author ant\n+     *\n+     */\n     public static final class AttributeWithValueMatching extends Evaluator{\n         protected String key;\n         protected Pattern pattern;\n \n     }\n \n+    /**\n+     * Abstract evaluator for attribute name/value matching\n+     * @author ant\n+     *\n+     */\n     public abstract static class AttributeKeyPair extends Evaluator {\n         protected String key;\n         protected String value;\n         }\n     }\n \n+    /**\n+     * Dummy evaluator for any element matching\n+     * @author ant\n+     *\n+     */\n     public static final class AllElements extends Evaluator {\n \n     \t@Override\n             return true;\n         }\n     }\n-    \n+\n+    /**\n+     * Evaluator for matching by sibling index number (e < idx)\n+     * @author ant\n+     *\n+     */\n     public static final class IndexLessThan extends IndexEvaluator {\n         public IndexLessThan(int index) {\n             super(index);\n         }\n \n     }\n-    \n+\n+    /**\n+     * Evaluator for matching by sibling index number (e > idx)\n+     * @author ant\n+     *\n+     */\n     public static final class IndexGreaterThan extends IndexEvaluator {\n         public IndexGreaterThan(int index) {\n             super(index);\n \n     }\n     \n+    /**\n+     * Evaluator for matching by sibling index number (e = idx)\n+     * @author ant\n+     *\n+     */\n     public static final class IndexEquals extends IndexEvaluator {\n         public IndexEquals(int index) {\n             super(index);\n \n     }    \n     \n+    /**\n+     * Abstract evaluator for sibling index matching\n+     * @author ant\n+     *\n+     */\n     public abstract static class IndexEvaluator extends Evaluator {\n         protected int index;\n         \n             this.index = index;\n         }\n     }\n-    \n+\n+    /**\n+     * Evaluator for matching Element (and its descendents) text\n+     * @author ant\n+     *\n+     */\n     public static final class ContainsText extends Evaluator {\n         private String searchText;\n         public ContainsText(String searchText) {\n             return (element.text().toLowerCase().contains(searchText));\n         }\n     }\n-    \n+\n+    /**\n+     * Evaluator for matching Element's own text\n+     * @author ant\n+     *\n+     */\n     public static final class ContainsOwnText extends Evaluator {\n         private String searchText;\n         public ContainsOwnText(String searchText) {\n         }\n     }\n     \n+    /**\n+     * Evaluator for matching Element (and its descendents) text with regex\n+     * @author ant\n+     *\n+     */\n     public static final class Matches extends Evaluator {\n         private Pattern pattern;\n         public Matches(Pattern pattern) {\n             return m.find();\n         }\n     }\n-    \n+\n+    /**\n+     * Evaluator for matching Element's own text with regex\n+     * @author ant\n+     *\n+     */\n     public static final class MatchesOwn extends Evaluator {\n         private Pattern pattern;\n         public MatchesOwn(Pattern pattern) {", "timestamp": 1309605125, "metainfo": ""}