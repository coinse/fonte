{"sha": "d0a7e3a00350ea9bdca6a1f005ccc75e5b2d19d4", "log": "Fixed issue when using descendant regex attribute selectors.  Fixes #52", "commit": "\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n     \n     private void combinator(char combinator) {\n         tq.consumeWhitespace();\n-        String subQuery = tq.consumeToAny(combinators); // support multi > childs\n+        String subQuery = consumeSubQuery(); // support multi > childs\n         \n         Elements output;\n         if (combinator == '>')\n             throw new IllegalStateException(\"Unknown combinator: \" + combinator);\n         \n         elements.clear(); elements.addAll(output);\n+    }\n+\n+    private String consumeSubQuery() {\n+        StringBuilder sq = new StringBuilder();\n+        while (!tq.isEmpty()) {\n+            if (tq.matches(\"(\"))\n+                sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");\n+            else if (tq.matches(\"[\"))\n+                sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");\n+            else if (tq.matchesAny(combinators))\n+                break;\n+            else\n+                sq.append(tq.consume());\n+        }\n+        return sq.toString();\n     }\n     \n     private Elements findElements() {\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(\"Bar\", contains.first().attr(\"title\"));\n         assertEquals(\"SLAM\", contains.last().attr(\"title\"));\n     }\n-    \n+\n     @Test public void testNamespacedTag() {\n         Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>\");\n         Elements byTag = doc.select(\"abc|def\");\n         assertEquals(2, byTag.size());\n         assertEquals(\"1\", byTag.first().id());\n         assertEquals(\"2\", byTag.last().id());\n-        \n+\n         Elements byAttr = doc.select(\".bold\");\n         assertEquals(1, byAttr.size());\n         assertEquals(\"2\", byAttr.last().id());\n-        \n+\n         Elements byTagAttr = doc.select(\"abc|def.bold\");\n         assertEquals(1, byTagAttr.size());\n         assertEquals(\"2\", byTagAttr.last().id());\n-        \n+\n         Elements byContains = doc.select(\"abc|def:contains(e)\");\n         assertEquals(2, byContains.size());\n         assertEquals(\"1\", byContains.first().id());\n         assertEquals(1, withData.size());\n         assertEquals(\"2\", withData.first().id());\n     }\n-    \n+\n     @Test public void testByAttributeRegex() {\n         Document doc = Jsoup.parse(\"<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif><img></p>\");\n         Elements imgs = doc.select(\"img[src~=(?i)\\\\.(png|jpe?g)]\");\n         assertEquals(\"4\", imgs.get(1).id());\n     }\n \n+    @Test public void testByAttributeRegexCombined() {\n+        Document doc = Jsoup.parse(\"<div><table class=x><td>Hello</td></table></div>\");\n+        Elements els = doc.select(\"div table[class~=x|y]\");\n+        assertEquals(1, els.size());\n+        assertEquals(\"Hello\", els.text());\n+    }\n+\n     @Test public void testAllElements() {\n         String h = \"<div><p>Hello</p><p><b>there</b></p></div>\";\n         Document doc = Jsoup.parse(h);\n         assertEquals(3, allUnderDiv.size());\n         assertEquals(\"p\", allUnderDiv.first().tagName());\n     }\n-    \n+\n     @Test public void testAllWithClass() {\n         String h = \"<p class=first>One<p class=first>Two<p>Three\";\n         Document doc = Jsoup.parse(h);\n         Elements empty = doc.select(\"p .first\"); // self, not descend, should not match\n         assertEquals(0, empty.size());\n     }\n-    \n+\n     @Test public void and() {\n         String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\";\n         Document doc = Jsoup.parse(h);\n-        \n+\n         Elements div = doc.select(\"div.foo\");\n         assertEquals(1, div.size());\n         assertEquals(\"div\", div.first().tagName());\n-        \n+\n         Elements p = doc.select(\"div .foo\"); // space indicates like \"div *.foo\"\n         assertEquals(1, p.size());\n         assertEquals(\"p\", p.first().tagName());\n-        \n+\n         Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); // very specific!\n         assertEquals(1, div2.size());\n         assertEquals(\"div\", div2.first().tagName());\n-        \n+\n         Elements p2 = doc.select(\"div *.foo\"); // space indicates like \"div *.foo\"\n         assertEquals(1, p2.size());\n         assertEquals(\"p\", p2.first().tagName());\n         assertEquals(1, div2.size());\n         assertEquals(\"2\", div2.get(0).id());\n     }\n-    \n+\n     @Test public void parentWithClassChild() {\n         String h = \"<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>\";\n         Document doc = Jsoup.parse(h);\n-        \n+\n         Elements allAs = doc.select(\"h1 > a\");\n         assertEquals(3, allAs.size());\n         assertEquals(\"a\", allAs.first().tagName());\n-        \n+\n         Elements fooAs = doc.select(\"h1.foo > a\");\n         assertEquals(2, fooAs.size());\n         assertEquals(\"a\", fooAs.first().tagName());\n-        \n+\n         Elements barAs = doc.select(\"h1.foo > a.bar\");\n         assertEquals(1, barAs.size());\n     }\n         assertEquals(\"p\", divChilds.get(1).tagName());\n         assertEquals(\"span\", divChilds.get(2).tagName());\n     }\n-    \n+\n     @Test public void multiChildDescent() {\n         String h = \"<div id=foo><h1 class=bar><a href=http://example.com/>One</a></h1></div>\";\n         Document doc = Jsoup.parse(h);\n         assertEquals(1, doc.select(\"DIV[TITLE=BAR]\").size());\n         assertEquals(0, doc.select(\"DIV[TITLE=BARBARELLA\").size());\n     }\n-    \n+\n     @Test public void adjacentSiblings() {\n         String h = \"<ol><li>One<li>Two<li>Three</ol>\";\n         Document doc = Jsoup.parse(h);\n         assertEquals(\"Two\", sibs.get(0).text());\n         assertEquals(\"Three\", sibs.get(1).text());\n     }\n-    \n+\n     @Test public void adjacentSiblingsWithId() {\n         String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n         Document doc = Jsoup.parse(h);\n         assertEquals(1, sibs.size());\n         assertEquals(\"Two\", sibs.get(0).text());\n     }\n-    \n+\n     @Test public void notAdjacent() {\n         String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n         Document doc = Jsoup.parse(h);\n         Elements sibs = doc.select(\"li#1 + li#3\");\n         assertEquals(0, sibs.size());\n     }\n-    \n+\n     @Test public void mixCombinator() {\n         String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n         Document doc = Jsoup.parse(h);\n         Elements sibs = doc.select(\"body > div.foo li + li\");\n-        \n+\n         assertEquals(2, sibs.size());\n         assertEquals(\"Two\", sibs.get(0).text());\n         assertEquals(\"Three\", sibs.get(1).text());\n     }\n-    \n+\n     @Test public void mixCombinatorGroup() {\n         String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n         Document doc = Jsoup.parse(h);\n         Elements els = doc.select(\".foo > ol, ol > li + li\");\n-        \n+\n         assertEquals(3, els.size());\n         assertEquals(\"ol\", els.get(0).tagName());\n         assertEquals(\"Two\", els.get(1).text());\n         assertEquals(\"Three\", els.get(2).text());\n     }\n-    \n+\n     @Test public void generalSiblings() {\n         String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n         Document doc = Jsoup.parse(h);\n         assertEquals(1, els.size());\n         assertEquals(\"Three\", els.first().text());\n     }\n-    \n+\n     // for http://github.com/jhy/jsoup/issues#issue/10\n     @Test public void testCharactersInIdAndClass() {\n         // using CSS spec for identifiers (id and class): a-z0-9, -, _. NOT . (which is OK in html spec, but not css)\n         String h = \"<div><p id='a1-foo_bar'>One</p><p class='b2-qux_bif'>Two</p></div>\";\n         Document doc = Jsoup.parse(h);\n-        \n+\n         Element el1 = doc.getElementById(\"a1-foo_bar\");\n         assertEquals(\"One\", el1.text());\n         Element el2 = doc.getElementsByClass(\"b2-qux_bif\").first();\n         assertEquals(\"Two\", el2.text());\n-        \n+\n         Element el3 = doc.select(\"#a1-foo_bar\").first();\n         assertEquals(\"One\", el3.text());\n         Element el4 = doc.select(\".b2-qux_bif\").first();\n         assertEquals(\"Two\", el4.text());\n     }\n-    \n+\n     // for http://github.com/jhy/jsoup/issues#issue/13\n     @Test public void testSupportsLeadingCombinator() {\n         String h = \"<div><p><span>One</span><span>Two</span></p></div>\";\n         Document doc = Jsoup.parse(h);\n-        \n+\n         Element p = doc.select(\"div > p\").first();\n         Elements spans = p.select(\"> span\");\n         assertEquals(2, spans.size());\n         assertEquals(\"One\", spans.first().text());\n-        \n+\n         // make sure doesn't get nested\n         h = \"<div id=1><div id=2><div id=3></div></div></div>\";\n         doc = Jsoup.parse(h);\n         Element div = doc.select(\"div\").select(\" > div\").first();\n         assertEquals(\"2\", div.id());\n     }\n-    \n+\n     @Test public void testPseudoLessThan() {\n         Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n         Elements ps = doc.select(\"div p:lt(2)\");\n         assertEquals(\"Two\", ps.get(1).text());\n         assertEquals(\"Four\", ps.get(2).text());\n     }\n-    \n+\n     @Test public void testPseudoGreaterThan() {\n         Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>\");\n         Elements ps = doc.select(\"div p:gt(0)\");\n         assertEquals(\"Two\", ps.get(0).text());\n         assertEquals(\"Three\", ps.get(1).text());\n     }\n-    \n+\n     @Test public void testPseudoEquals() {\n         Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n         Elements ps = doc.select(\"div p:eq(0)\");\n         assertEquals(2, ps.size());\n         assertEquals(\"One\", ps.get(0).text());\n         assertEquals(\"Four\", ps.get(1).text());\n-        \n+\n         Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\");\n         assertEquals(1, ps2.size());\n         assertEquals(\"One\", ps2.get(0).text());\n         assertEquals(\"p\", ps2.get(0).tagName());\n     }\n-    \n+\n     @Test public void testPseudoBetween() {\n         Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n         Elements ps = doc.select(\"div p:gt(0):lt(2)\");\n         assertEquals(1, ps.size());\n         assertEquals(\"Two\", ps.get(0).text());\n     }\n-    \n+\n     @Test public void testPseudoCombined() {\n         Document doc = Jsoup.parse(\"<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>\");\n         Elements ps = doc.select(\"div.foo p:gt(0)\");\n         assertEquals(\"div\", divs.first().tagName());\n         assertEquals(\"Two\", divs.first().text());\n     }\n-    \n+\n     @Test public void testPseudoContains() {\n         Document doc = Jsoup.parse(\"<div><p>The Rain.</p> <p class=light>The <i>rain</i>.</p> <p>Rain, the.</p></div>\");\n-        \n+\n         Elements ps1 = doc.select(\"p:contains(Rain)\");\n         assertEquals(3, ps1.size());\n-        \n+\n         Elements ps2 = doc.select(\"p:contains(the rain)\");\n         assertEquals(2, ps2.size());\n         assertEquals(\"The Rain.\", ps2.first().html());\n         assertEquals(\"The <i>rain</i>.\", ps2.last().html());\n-        \n+\n         Elements ps3 = doc.select(\"p:contains(the Rain):has(i)\");\n         assertEquals(1, ps3.size());\n         assertEquals(\"light\", ps3.first().className());\n         Elements ps5 = doc.select(\":contains(rain)\");\n         assertEquals(8, ps5.size()); // html, body, div,...\n     }\n-    \n+\n     @Test public void testPsuedoContainsWithParentheses() {\n         Document doc = Jsoup.parse(\"<div><p id=1>This (is good)</p><p id=2>This is bad)</p>\");\n-        \n+\n         Elements ps1 = doc.select(\"p:contains(this (is good))\");\n         assertEquals(1, ps1.size());\n         assertEquals(\"1\", ps1.first().id());\n-        \n+\n         Elements ps2 = doc.select(\"p:contains(this is bad\\\\))\");\n         assertEquals(1, ps2.size());\n         assertEquals(\"2\", ps2.first().id());\n     }\n-    \n+\n     @Test public void containsOwn() {\n         Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n         Elements ps = doc.select(\"p:containsOwn(Hello now)\");\n         assertEquals(1, ps.size());\n         assertEquals(\"1\", ps.first().id());\n-        \n+\n         assertEquals(0, doc.select(\"p:containsOwn(there)\").size());\n     }\n-    \n-    @Test public void testMatches() {       \n+\n+    @Test public void testMatches() {\n         Document doc = Jsoup.parse(\"<p id=1>The <i>Rain</i></p> <p id=2>There are 99 bottles.</p> <p id=3>Harder (this)</p> <p id=4>Rain</p>\");\n-        \n+\n         Elements p1 = doc.select(\"p:matches(The rain)\"); // no match, case sensitive\n         assertEquals(0, p1.size());\n-        \n+\n         Elements p2 = doc.select(\"p:matches((?i)the rain)\"); // case insense. should include root, html, body\n         assertEquals(1, p2.size());\n         assertEquals(\"1\", p2.first().id());\n-        \n+\n         Elements p4 = doc.select(\"p:matches((?i)^rain$)\"); // bounding\n         assertEquals(1, p4.size());\n         assertEquals(\"4\", p4.first().id());\n-        \n+\n         Elements p5 = doc.select(\"p:matches(\\\\d+)\");\n         assertEquals(1, p5.size());\n         assertEquals(\"2\", p5.first().id());\n-        \n+\n         Elements p6 = doc.select(\"p:matches(\\\\w+\\\\s+\\\\(\\\\w+\\\\))\"); // test bracket matching\n         assertEquals(1, p6.size());\n         assertEquals(\"3\", p6.first().id());\n-        \n+\n         Elements p7 = doc.select(\"p:matches((?i)the):has(i)\"); // multi\n         assertEquals(1, p7.size());\n         assertEquals(\"1\", p7.first().id());\n     }\n-    \n+\n     @Test public void matchesOwn() {\n         Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n-        \n+\n         Elements p1 = doc.select(\"p:matchesOwn((?i)hello now)\");\n         assertEquals(1, p1.size());\n         assertEquals(\"1\", p1.first().id());\n-        \n+\n         assertEquals(0, doc.select(\"p:matchesOwn(there)\").size());\n     }\n-    \n+\n     @Test public void testRelaxedTags() {\n         Document doc = Jsoup.parse(\"<abc_def id=1>Hello</abc_def> <abc-def id=2>There</abc-def>\");\n-        \n+\n         Elements el1 = doc.select(\"abc_def\");\n         assertEquals(1, el1.size());\n         assertEquals(\"1\", el1.first().id());\n-        \n+\n         Elements el2 = doc.select(\"abc-def\");\n         assertEquals(1, el2.size());\n         assertEquals(\"2\", el2.first().id());", "timestamp": 1309605125, "metainfo": ""}