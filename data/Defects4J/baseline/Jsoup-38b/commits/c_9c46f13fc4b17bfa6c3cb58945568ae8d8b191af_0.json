{"sha": "9c46f13fc4b17bfa6c3cb58945568ae8d8b191af", "log": "Prevent infinite redirection loops in jsoup.connect.", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n     }\n \n     public static class Response extends Base<Connection.Response> implements Connection.Response {\n+        private static final int MAX_REDIRECTS = 20;\n         private int statusCode;\n         private String statusMessage;\n         private ByteBuffer byteData;\n         private String charset;\n         private String contentType;\n         private boolean executed = false;\n+        private int numRedirects = 0;\n+\n+        Response() {\n+            super();\n+        }\n+\n+        private Response(Response previousResponse) throws IOException {\n+            super();\n+            if (previousResponse != null) {\n+                numRedirects = previousResponse.numRedirects + 1;\n+                if (numRedirects >= MAX_REDIRECTS)\n+                    throw new IOException(String.format(\"Too many redirects occurred trying to load URL %s\", previousResponse.url()));\n+            }\n+        }\n \n         static Response execute(Connection.Request req) throws IOException {\n             return execute(req, null);\n         }\n \n-        static Response execute(Connection.Request req, Connection.Response previousResponse) throws IOException {\n+        static Response execute(Connection.Request req, Response previousResponse) throws IOException {\n             Validate.notNull(req, \"Request must not be null\");\n             String protocol = req.url().getProtocol();\n             Validate\n                 else\n                     throw new IOException(status + \" error loading URL \" + req.url().toString());\n             }\n-            Response res = new Response();\n+            Response res = new Response(previousResponse);\n             res.setupFromConnection(conn, previousResponse);\n             if (needsRedirect && req.followRedirects()) {\n                 req.url(new URL(req.url(), res.header(\"Location\")));\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n  Tests the URL connection. Not enabled by default, so tests don't require network connection.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-@Ignore // ignored by default so tests don't require network access. comment out to enable.\n+//@Ignore // ignored by default so tests don't require network access. comment out to enable.\n public class UrlConnectTest {\n     private static String echoURL = \"http://infohound.net/tools/q.pl\";\n \n         assertEquals(\"token=asdfg123\", ihVal(\"HTTP_COOKIE\", doc)); // confirms that redirected hit saw cookie\n     }\n \n+    @Test\n+    public void maximumRedirects() {\n+        boolean threw = false;\n+        try {\n+            Document doc = Jsoup.connect(\"http://infohound.net/tools/loop.pl\").get();\n+        } catch (IOException e) {\n+            assertTrue(e.getMessage().contains(\"Too many redirects\"));\n+            threw = true;\n+        }\n+        assertTrue(threw);\n+    }\n+\n }", "timestamp": 1309605126, "metainfo": ""}