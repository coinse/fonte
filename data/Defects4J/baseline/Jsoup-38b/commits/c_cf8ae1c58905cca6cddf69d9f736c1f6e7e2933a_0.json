{"sha": "cf8ae1c58905cca6cddf69d9f736c1f6e7e2933a", "log": "In jsoup.clean, allow custom OutputSettings, to control pretty printing, character set, and entity escaping.  Fixes #148", "commit": "\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n      Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted\n      tags and attributes.\n \n-     @param bodyHtml  input untrusted HTML\n+     @param bodyHtml  input untrusted HTML (body fragment)\n      @param baseUri   URL to resolve relative URLs against\n      @param whitelist white-list of permitted HTML elements\n-     @return safe HTML\n+     @return safe HTML (body fragment)\n \n      @see Cleaner#clean(Document)\n      */\n      Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted\n      tags and attributes.\n \n-     @param bodyHtml  input untrusted HTML\n+     @param bodyHtml  input untrusted HTML (body fragment)\n      @param whitelist white-list of permitted HTML elements\n-     @return safe HTML\n+     @return safe HTML (body fragment)\n \n      @see Cleaner#clean(Document)\n      */\n     public static String clean(String bodyHtml, Whitelist whitelist) {\n         return clean(bodyHtml, \"\", whitelist);\n+    }\n+\n+    /**\n+     * Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of\n+     * permitted\n+     * tags and attributes.\n+     *\n+     * @param bodyHtml input untrusted HTML (body fragment)\n+     * @param baseUri URL to resolve relative URLs against\n+     * @param whitelist white-list of permitted HTML elements\n+     * @param outputSettings document output settings; use to control pretty-printing and entity escape modes\n+     * @return safe HTML (body fragment)\n+     * @see Cleaner#clean(Document)\n+     */\n+    public static String clean(String bodyHtml, String baseUri, Whitelist whitelist, Document.OutputSettings outputSettings) {\n+        Document dirty = parseBodyFragment(bodyHtml, baseUri);\n+        Cleaner cleaner = new Cleaner(whitelist);\n+        Document clean = cleaner.clean(dirty);\n+        clean.outputSettings(outputSettings);\n+        return clean.body().html();\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n         return outputSettings;\n     }\n \n+    /**\n+     * Set the document's output settings.\n+     * @param outputSettings new output settings.\n+     * @return this document, for chaining.\n+     */\n+    public Document outputSettings(OutputSettings outputSettings) {\n+        Validate.notNull(outputSettings);\n+        this.outputSettings = outputSettings;\n+        return this;\n+    }\n+\n     public enum QuirksMode {\n         noQuirks, quirks, limitedQuirks;\n     }\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n \n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Entities;\n import org.jsoup.safety.Whitelist;\n import org.junit.Test;\n import static org.junit.Assert.*;\n         String clean = Jsoup.clean(html, whitelist);\n         assertEquals(\"<p class=\\\"foo\\\">One</p>\", clean);\n     }\n+\n+    @Test public void supplyOutputSettings() {\n+        // test that one can override the default document output settings\n+        Document.OutputSettings os = new Document.OutputSettings();\n+        os.prettyPrint(false);\n+        os.escapeMode(Entities.EscapeMode.extended);\n+\n+        String html = \"<div><p>&bernou;</p></div>\";\n+        String customOut = Jsoup.clean(html, \"http://foo.com/\", Whitelist.relaxed(), os);\n+        String defaultOut = Jsoup.clean(html, \"http://foo.com/\", Whitelist.relaxed());\n+        assertNotSame(defaultOut, customOut);\n+\n+        assertEquals(\"<div><p>&bernou;</p></div>\", customOut);\n+        assertEquals(\"<div>\\n\" +\n+            \" <p>\u212c</p>\\n\" +\n+            \"</div>\", defaultOut);\n+\n+        os.charset(\"ASCII\");\n+        os.escapeMode(Entities.EscapeMode.base);\n+        String customOut2 = Jsoup.clean(html, \"http://foo.com/\", Whitelist.relaxed(), os);\n+        assertEquals(\"<div><p>&#8492;</p></div>\", customOut2);\n+    }\n }", "timestamp": 1338239364, "metainfo": ""}