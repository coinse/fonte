{"sha": "d8dbde85408a685075e5cbec0709877317393497", "log": "Attributes format", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n import java.util.*;\n \n /**\n- The attributes of an Element.\n- <p/>\n- Attributes are treated as a map: there can be only one value associated with an attribute key.\n- <p/>\n- Attribute key and value comparisons are done case insensitively, and keys are normalised to lower-case.\n-\n- @author Jonathan Hedley, jonathan@hedley.net */\n+ * The attributes of an Element.\n+ * <p/>\n+ * Attributes are treated as a map: there can be only one value associated with an attribute key.\n+ * <p/>\n+ * Attribute key and value comparisons are done case insensitively, and keys are normalised to\n+ * lower-case.\n+ * \n+ * @author Jonathan Hedley, jonathan@hedley.net\n+ */\n public class Attributes implements Iterable<Attribute> {\n-    private LinkedHashMap<String, Attribute> attributes = new LinkedHashMap<String, Attribute>(); // linked hash map to preserve insertion order.\n-\n+    private LinkedHashMap<String, Attribute> attributes = new LinkedHashMap<String, Attribute>();\n+    \n+    // linked hash map to preserve insertion order.\n+    \n     public String get(String key) {\n         Validate.notEmpty(key);\n         \n         Attribute attr = attributes.get(key.toLowerCase());\n         return attr != null ? attr.getValue() : \"\";\n     }\n-\n+    \n     public void put(String key, String value) {\n         Attribute attr = new Attribute(key, value);\n         put(attr);\n     }\n-\n+    \n     public void put(Attribute attribute) {\n         Validate.notNull(attribute);\n         attributes.put(attribute.getKey(), attribute);\n     }\n-\n+    \n     public void remove(String key) {\n         Validate.notEmpty(key);\n         attributes.remove(key.toLowerCase());\n     }\n-\n+    \n     public boolean hasKey(String key) {\n         return attributes.containsKey(key.toLowerCase());\n     }\n-\n+    \n     public int size() {\n         return attributes.size();\n     }\n-\n+    \n     public void mergeAttributes(Attributes incoming) {\n         for (Attribute attribute : incoming) {\n             this.put(attribute);\n         }\n     }\n-\n+    \n     public Iterator<Attribute> iterator() {\n         return asList().iterator();\n     }\n-\n+    \n     public List<Attribute> asList() {\n         List<Attribute> list = new ArrayList<Attribute>(attributes.size());\n         for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\n         }\n         return Collections.unmodifiableList(list);\n     }\n-\n+    \n     public String html() {\n         StringBuilder accum = new StringBuilder();\n         for (Attribute attribute : this) {\n         }\n         return accum.toString();\n     }\n-\n+    \n     public String toString() {\n         return html();\n     }\n-\n+    \n     @Override\n     public boolean equals(Object o) {\n         if (this == o) return true;\n         if (!(o instanceof Attributes)) return false;\n-\n+        \n         Attributes that = (Attributes) o;\n-\n+        \n         if (attributes != null ? !attributes.equals(that.attributes) : that.attributes != null) return false;\n-\n+        \n         return true;\n     }\n-\n+    \n     @Override\n     public int hashCode() {\n         return attributes != null ? attributes.hashCode() : 0;\n     }\n+    \n }", "timestamp": 1309605106, "metainfo": ""}