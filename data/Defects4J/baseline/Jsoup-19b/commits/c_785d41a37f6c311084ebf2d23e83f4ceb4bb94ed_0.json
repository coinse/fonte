{"sha": "785d41a37f6c311084ebf2d23e83f4ceb4bb94ed", "log": "Moved .wrap, .before, and .after from Element to Node for flexibility. Overriding implementations in Element still return Element.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         addChildren(0, fragment.childNodesAsArray());\n         return this;\n     }\n-    \n+\n     /**\n      * Insert the specified HTML into the DOM before this element (i.e. as a preceeding sibling).\n+     *\n      * @param html HTML to add before this element\n      * @return this element, for chaining\n      * @see #after(String)\n      */\n+    @Override\n     public Element before(String html) {\n-        addSiblingHtml(siblingIndex(), html);\n-        return this;\n-    }\n-    \n+        return (Element) super.before(html);\n+    }\n+\n     /**\n      * Insert the specified HTML into the DOM after this element (i.e. as a following sibling).\n+     *\n      * @param html HTML to add after this element\n      * @return this element, for chaining\n      * @see #before(String)\n      */\n+    @Override\n     public Element after(String html) {\n-        addSiblingHtml(siblingIndex()+1, html);\n-        return this;\n-    }\n-    \n-    private void addSiblingHtml(int index, String html) {\n-        Validate.notNull(html);\n-        Validate.notNull(parentNode);\n-        \n-        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n-        parentNode.addChildren(index, fragment.childNodesAsArray());\n-    }\n-       \n+        return (Element) super.after(html);\n+    }\n+\n     /**\n      * Remove all of the element's child nodes. Any attributes are left as-is.\n      * @return this element\n     }\n \n     /**\n-     Wrap the supplied HTML around this element.\n-     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitralily deep.\n-     @return this element, for chaining.\n-     */\n+     * Wrap the supplied HTML around this element.\n+     *\n+     * @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitrarily deep.\n+     * @return this element, for chaining.\n+     */\n+    @Override\n     public Element wrap(String html) {\n-        Validate.notEmpty(html);\n-\n-        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n-        Elements wrapChildren = wrapBody.children();\n-        Element wrap = wrapChildren.first();\n-        if (wrap == null) // nothing to wrap with; noop\n-            return null;\n-\n-        Element deepest = getDeepChild(wrap);\n-        parentNode.replaceChild(this, wrap);\n-        deepest.addChildren(this);\n-\n-        // remainder (unbalananced wrap, like <div></div><p></p> -- The <p> is remainder\n-        if (wrapChildren.size() > 1) {\n-            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n-                Element remainder = wrapChildren.get(i);\n-                remainder.parentNode.removeChild(remainder);\n-                wrap.appendChild(remainder);\n-            }\n-        }\n-        return this;\n-    }\n-\n-    private Element getDeepChild(Element el) {\n-        List<Element> children = el.children();\n-        if (children.size() > 0)\n-            return getDeepChild(children.get(0));\n-        else\n-            return el;\n-    }\n-    \n+        return (Element) super.wrap(html);\n+    }\n+\n     /**\n      * Get sibling elements.\n      * @return sibling elements\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n \n import org.jsoup.helper.StringUtil;\n import org.jsoup.helper.Validate;\n+import org.jsoup.parser.Parser;\n+import org.jsoup.select.Elements;\n import org.jsoup.select.NodeTraversor;\n import org.jsoup.select.NodeVisitor;\n \n         Validate.notNull(parentNode);\n         parentNode.removeChild(this);\n     }\n+\n+    /**\n+     * Insert the specified HTML into the DOM before this node (i.e. as a preceeding sibling).\n+     * @param html HTML to add before this element\n+     * @return this node, for chaining\n+     * @see #after(String)\n+     */\n+    public Node before(String html) {\n+        addSiblingHtml(siblingIndex(), html);\n+        return this;\n+    }\n+\n+    /**\n+     * Insert the specified HTML into the DOM after this node (i.e. as a following sibling).\n+     * @param html HTML to add after this element\n+     * @return this node, for chaining\n+     * @see #before(String)\n+     */\n+    public Node after(String html) {\n+        addSiblingHtml(siblingIndex()+1, html);\n+        return this;\n+    }\n+\n+    private void addSiblingHtml(int index, String html) {\n+        Validate.notNull(html);\n+        Validate.notNull(parentNode);\n+\n+        Element fragment = Parser.parseBodyFragmentRelaxed(html, baseUri()).body();\n+        parentNode.addChildren(index, fragment.childNodesAsArray());\n+    }\n+\n+    /**\n+     Wrap the supplied HTML around this node.\n+     @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitrarily deep.\n+     @return this node, for chaining.\n+     */\n+    public Node wrap(String html) {\n+        Validate.notEmpty(html);\n+\n+        Element wrapBody = Parser.parseBodyFragmentRelaxed(html, baseUri).body();\n+        Elements wrapChildren = wrapBody.children();\n+        Element wrap = wrapChildren.first();\n+        if (wrap == null) // nothing to wrap with; noop\n+            return null;\n+\n+        Element deepest = getDeepChild(wrap);\n+        parentNode.replaceChild(this, wrap);\n+        deepest.addChildren(this);\n+\n+        // remainder (unbalanced wrap, like <div></div><p></p> -- The <p> is remainder\n+        if (wrapChildren.size() > 1) {\n+            for (int i = 1; i < wrapChildren.size(); i++) { // skip first\n+                Element remainder = wrapChildren.get(i);\n+                remainder.parentNode.removeChild(remainder);\n+                wrap.appendChild(remainder);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    private Element getDeepChild(Element el) {\n+        List<Element> children = el.children();\n+        if (children.size() > 0)\n+            return getDeepChild(children.get(0));\n+        else\n+            return el;\n+    }\n     \n     /**\n      * Replace this node in the DOM with the supplied node.\n--- a/src/test/java/org/jsoup/nodes/TextNodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/TextNodeTest.java\n         assertEquals(\"Hello there!\", div.text());\n         assertTrue(tn.parent() == tail.parent());\n     }\n+\n+    @Test public void testSplitAnEmbolden() {\n+        Document doc = Jsoup.parse(\"<div>Hello there</div>\");\n+        Element div = doc.select(\"div\").first();\n+        TextNode tn = (TextNode) div.childNode(0);\n+        TextNode tail = tn.splitText(6);\n+        tail.wrap(\"<b></b>\");\n+\n+        assertEquals(\"Hello <b>there</b>\", TextUtil.stripNewlines(div.html())); // not great that we get \\n<b>there there... must correct\n+    }\n }", "timestamp": 1309605126, "metainfo": ""}