{"sha": "76de9d87000f375749f355a7d7d6af9fe37c3558", "log": "Fixed cookie handling issue in jsoup.Connect where empty cookies would cause a validation exception.  Fixes #87", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n             statusMessage = conn.getResponseMessage();\n             contentType = conn.getContentType();\n \n-            // headers into map\n             Map<String, List<String>> resHeaders = conn.getHeaderFields();\n-            for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\n-                String name = entry.getKey();\n-                if (name == null)\n-                    continue; // http/1.1 line\n-\n-                List<String> values = entry.getValue();\n-\n-                if (name.equalsIgnoreCase(\"Set-Cookie\")) {\n-                    for (String value : values) {\n-                        TokenQueue cd = new TokenQueue(value);\n-                        String cookieName = cd.chompTo(\"=\").trim();\n-                        String cookieVal = cd.consumeTo(\";\").trim();\n-                        // ignores path, date, domain, secure et al. req'd?\n-                        cookie(cookieName, cookieVal);\n-                    }\n-                } else { // only take the first instance of each header\n-                    if (!values.isEmpty())\n-                        header(name, values.get(0));\n-                }\n-            }\n+            processResponseHeaders(resHeaders);\n \n             // if from a redirect, map previous response cookies into this response\n             if (previousResponse != null) {\n                 }\n             }\n         }\n-        \n+\n+        void processResponseHeaders(Map<String, List<String>> resHeaders) {\n+            for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {\n+                String name = entry.getKey();\n+                if (name == null)\n+                    continue; // http/1.1 line\n+\n+                List<String> values = entry.getValue();\n+                if (name.equalsIgnoreCase(\"Set-Cookie\")) {\n+                    for (String value : values) {\n+                        if (value == null)\n+                            continue;\n+                        TokenQueue cd = new TokenQueue(value);\n+                        String cookieName = cd.chompTo(\"=\").trim();\n+                        String cookieVal = cd.consumeTo(\";\").trim();\n+                        if (cookieVal == null)\n+                            cookieVal = \"\";\n+                        // ignores path, date, domain, secure et al. req'd?\n+                        // name not blank, value not null\n+                        if (cookieName != null && cookieName.length() > 0)\n+                            cookie(cookieName, cookieVal);\n+                    }\n+                } else { // only take the first instance of each header\n+                    if (!values.isEmpty())\n+                        header(name, values.get(0));\n+                }\n+            }\n+        }\n+\n         private static void writePost(Collection<Connection.KeyVal> data, OutputStream outputStream) throws IOException {\n             OutputStreamWriter w = new OutputStreamWriter(outputStream, DataUtil.defaultCharset);\n             boolean first = true;\n--- a/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n+++ b/src/test/java/org/jsoup/helper/HttpConnectionTest.java\n import org.jsoup.Connection;\n \n import java.io.IOException;\n-import java.util.Map;\n-import java.util.Collection;\n+import java.util.*;\n import java.net.URL;\n import java.net.MalformedURLException;\n \n         res.header(\"accept-encoding\", \"deflate\");\n         assertEquals(\"deflate\", res.header(\"Accept-Encoding\"));\n         assertEquals(\"deflate\", res.header(\"accept-Encoding\"));\n+    }\n+\n+    @Test public void ignoresEmptySetCookies() {\n+        // prep http response header map\n+        Map<String, List<String>> headers = new HashMap<String, List<String>>();\n+        headers.put(\"Set-Cookie\", Collections.<String>emptyList());\n+        HttpConnection.Response res = new HttpConnection.Response();\n+        res.processResponseHeaders(headers);\n+        assertEquals(0, res.cookies().size());\n+    }\n+\n+    @Test public void ignoresEmptyCookieNameAndVals() {\n+        // prep http response header map\n+        Map<String, List<String>> headers = new HashMap<String, List<String>>();\n+        List<String> cookieStrings = new ArrayList<String>();\n+        cookieStrings.add(null);\n+        cookieStrings.add(\"\");\n+        cookieStrings.add(\"one\");\n+        cookieStrings.add(\"two=\");\n+        cookieStrings.add(\"three=;\");\n+        cookieStrings.add(\"four=data; Domain=.example.com; Path=/\");\n+\n+        headers.put(\"Set-Cookie\", cookieStrings);\n+        HttpConnection.Response res = new HttpConnection.Response();\n+        res.processResponseHeaders(headers);\n+        assertEquals(4, res.cookies().size());\n+        assertEquals(\"\", res.cookie(\"one\"));\n+        assertEquals(\"\", res.cookie(\"two\"));\n+        assertEquals(\"\", res.cookie(\"three\"));\n+        assertEquals(\"data\", res.cookie(\"four\"));\n     }\n \n     @Test public void connectWithUrl() throws MalformedURLException {", "timestamp": 1309605128, "metainfo": ""}