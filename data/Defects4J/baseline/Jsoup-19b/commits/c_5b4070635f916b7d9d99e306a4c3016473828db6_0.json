{"sha": "5b4070635f916b7d9d99e306a4c3016473828db6", "log": "Attributes values back to Attribute", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n import org.apache.commons.lang.Validate;\n \n /**\n- A single key + value attribute.\n+ A single key + value attribute. Keys are trimmed and normalised to lower-case.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class Attribute {\n     public Attribute(String key, String value) {\n         Validate.notEmpty(key);\n         Validate.notNull(value);\n-        this.key = key;\n+        this.key = key.trim().toLowerCase();\n         this.value = value;\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n import java.util.*;\n \n /**\n- Element attribute list.\n+ The attributes of an Element.\n+ <p/>\n+ Attributes are treated as a map: there can be only one value associated with an attribute key.\n+ <p/>\n+ Attribute key and value comparisons are done case insensitively, and keys are normalised to lower-case.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class Attributes implements Iterable<Attribute> {\n-    private LinkedHashMap<String, String> attributes = new LinkedHashMap<String, String>(); // linked hash map to preserve insertion order.\n+    private LinkedHashMap<String, Attribute> attributes = new LinkedHashMap<String, Attribute>(); // linked hash map to preserve insertion order.\n \n     public String get(String key) {\n         Validate.notEmpty(key);\n-        return attributes.get(key.toLowerCase());\n+        \n+        Attribute attr = attributes.get(key.toLowerCase());\n+        return attr != null ? attr.getValue() : \"\";\n     }\n \n     public void put(String key, String value) {\n-        Validate.notEmpty(key);\n-        Validate.notNull(value);\n-        attributes.put(key.toLowerCase().trim(), value);\n+        Attribute attr = new Attribute(key, value);\n+        put(attr);\n     }\n \n     public void put(Attribute attribute) {\n         Validate.notNull(attribute);\n-        put(attribute.getKey(), attribute.getValue());\n+        attributes.put(attribute.getKey(), attribute);\n     }\n \n     public void remove(String key) {\n \n     public List<Attribute> asList() {\n         List<Attribute> list = new ArrayList<Attribute>(attributes.size());\n-        for (Map.Entry<String, String> entry : attributes.entrySet()) {\n-            Attribute attribute = new Attribute(entry.getKey(), entry.getValue());\n-            list.add(attribute);\n+        for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {\n+            list.add(entry.getValue());\n         }\n         return Collections.unmodifiableList(list);\n     }", "timestamp": 1309605106, "metainfo": ""}