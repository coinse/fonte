{"sha": "81d1fb98e61ff42c856504b1427a700cda7707f2", "log": "Refactor of script and rawtext end tag name states.", "commit": "\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n                 return;\n             }\n \n-            char c = r.consume();\n-            boolean handled = true;\n-            switch (c) {\n-                case '\\t':\n-                case '\\n':\n-                case '\\f':\n-                case ' ':\n-                    if (t.isAppropriateEndTagToken())\n+            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n+                char c = r.consume();\n+                switch (c) {\n+                    case '\\t':\n+                    case '\\n':\n+                    case '\\f':\n+                    case ' ':\n                         t.transition(BeforeAttributeName);\n-                    else\n-                        handled = false;\n-                    break;\n-                case '/':\n-                    if (t.isAppropriateEndTagToken())\n+                        break;\n+                    case '/':\n                         t.transition(SelfClosingStartTag);\n-                    else\n-                        handled = false;\n-                    break;\n-                case '>':\n-                    if (t.isAppropriateEndTagToken()) {\n+                        break;\n+                    case '>':\n                         t.emitTagPending();\n                         t.transition(Data);\n-                    }\n-                    else\n-                        handled = false;\n-                    break;\n-            }\n-            if (!handled) {\n-                t.emit(\"</\" + t.dataBuffer.toString());\n-                r.unconsume();\n-                t.transition(Rawtext);\n-            }\n+                        break;\n+                    default:\n+                        t.dataBuffer.append(c);\n+                        anythingElse(t, r);\n+                }\n+            } else\n+                anythingElse(t, r);\n+        }\n+\n+        private void anythingElse(Tokeniser t, CharacterReader r) {\n+            t.emit(\"</\" + t.dataBuffer.toString());\n+            t.transition(Rawtext);\n         }\n     },\n     ScriptDataLessthanSign {\n                 return;\n             }\n \n-            char c = r.consume();\n-            boolean handled = true;\n-            switch (c) {\n-                case '\\t':\n-                case '\\n':\n-                case '\\f':\n-                case ' ':\n-                    if (t.isAppropriateEndTagToken())\n+            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n+                char c = r.consume();\n+                switch (c) {\n+                    case '\\t':\n+                    case '\\n':\n+                    case '\\f':\n+                    case ' ':\n                         t.transition(BeforeAttributeName);\n-                    else\n-                        handled = false;\n-                    break;\n-                case '/':\n-                    if (t.isAppropriateEndTagToken())\n+                        break;\n+                    case '/':\n                         t.transition(SelfClosingStartTag);\n-                    else\n-                        handled = false;\n-                    break;\n-                case '>':\n-                    if (t.isAppropriateEndTagToken()) {\n+                        break;\n+                    case '>':\n                         t.emitTagPending();\n                         t.transition(Data);\n-                    }\n-                    else\n-                        handled = false;\n-                    break;\n-            }\n-            if (!handled) {\n-                t.emit(\"</\" + t.dataBuffer.toString());\n-                r.unconsume();\n-                t.transition(ScriptData);\n-            }\n+                        break;\n+                    default:\n+                        t.dataBuffer.append(c);\n+                        anythingElse(t, r);\n+                }\n+            } else {\n+                anythingElse(t, r);\n+            }\n+        }\n+\n+        private void anythingElse(Tokeniser t, CharacterReader r) {\n+            t.emit(\"</\" + t.dataBuffer.toString());\n+            t.transition(ScriptData);\n         }\n     },\n     ScriptDataEscapeStart {\n                 return;\n             }\n \n-            char c = r.consume();\n-            boolean handled = true;\n-            switch (c) {\n-                case '\\t':\n-                case '\\n':\n-                case '\\f':\n-                case ' ':\n-                    if (t.isAppropriateEndTagToken())\n+            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n+                char c = r.consume();\n+                switch (c) {\n+                    case '\\t':\n+                    case '\\n':\n+                    case '\\f':\n+                    case ' ':\n                         t.transition(BeforeAttributeName);\n-                    else\n-                        handled = false;\n-                    break;\n-                case '/':\n-                    if (t.isAppropriateEndTagToken())\n+                        break;\n+                    case '/':\n                         t.transition(SelfClosingStartTag);\n-                    else\n-                        handled = false;\n-                    break;\n-                case '>':\n-                    if (t.isAppropriateEndTagToken()) {\n+                        break;\n+                    case '>':\n                         t.emitTagPending();\n                         t.transition(Data);\n-                    }\n-                    else\n-                        handled = false;\n-                    break;\n-            }\n-            if (!handled) {\n-                t.emit(\"</\" + t.dataBuffer.toString());\n-                r.unconsume();\n-                t.transition(ScriptDataEscaped);\n-            }\n+                    default:\n+                        t.dataBuffer.append(c);\n+                        anythingElse(t, r);\n+                        break;\n+                }\n+            } else {\n+                anythingElse(t, r);\n+            }\n+        }\n+        \n+        private void anythingElse(Tokeniser t, CharacterReader r) {\n+            t.emit(\"</\" + t.dataBuffer.toString());\n+            t.transition(ScriptDataEscaped);\n         }\n     },\n     ScriptDataDoubleEscapeStart {\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         assertEquals(\"<b>Two <p>Test</p></b>\", two.body().html());\n     }\n \n+    @Test public void handlesUnclosedScriptAtEof() {\n+        assertEquals(\"Data\", Jsoup.parse(\"<script>Data\").select(\"script\").first().data());\n+        assertEquals(\"Data</sc\", Jsoup.parse(\"<script>Data</sc\").select(\"script\").first().data());\n+        assertEquals(\"Data</-sc\", Jsoup.parse(\"<script>Data</-sc\").select(\"script\").first().data());\n+        assertEquals(\"Data</sc-\", Jsoup.parse(\"<script>Data</sc-\").select(\"script\").first().data());\n+        assertEquals(\"Data</sc--\", Jsoup.parse(\"<script>Data</sc--\").select(\"script\").first().data());\n+        assertEquals(\"Data\", Jsoup.parse(\"<script>Data</script>\").select(\"script\").first().data());\n+        assertEquals(\"Data</script\", Jsoup.parse(\"<script>Data</script\").select(\"script\").first().data());\n+    }\n+\n+    @Test public void handlesUnclosedRawtextAtEof() {\n+        assertEquals(\"Data\", Jsoup.parse(\"<style>Data\").select(\"style\").first().data());\n+        assertEquals(\"Data</st\", Jsoup.parse(\"<style>Data</st\").select(\"style\").first().data());\n+        assertEquals(\"Data\", Jsoup.parse(\"<style>Data</style>\").select(\"style\").first().data());\n+        assertEquals(\"Data</style\", Jsoup.parse(\"<style>Data</style\").select(\"style\").first().data());\n+        assertEquals(\"Data</-style\", Jsoup.parse(\"<style>Data</-style\").select(\"style\").first().data());\n+        assertEquals(\"Data</style-\", Jsoup.parse(\"<style>Data</style-\").select(\"style\").first().data());\n+        assertEquals(\"Data</style--\", Jsoup.parse(\"<style>Data</style--\").select(\"style\").first().data());\n+    }\n+\n     @Test public void noImplicitFormForTextAreas() {\n         // old jsoup parser would create implicit forms for form children like <textarea>, but no more\n         Document doc = Jsoup.parse(\"<textarea>One</textarea>\");", "timestamp": 1309605130, "metainfo": ""}