{"sha": "ae3cd6981317741354c1bad30c7b38f0fac67f12", "log": "yet more work on format visitors", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * @param t The class to generate schema for\n      * @return Constructed JSON schema.\n      */\n+    @SuppressWarnings(\"deprecation\")\n     public JsonSchema generateJsonSchema(Class<?> t) throws JsonMappingException {\n         return _serializerProvider(getSerializationConfig()).generateJsonSchema(t);\n     }\n         if (type == null) {\n             throw new IllegalArgumentException(\"type must be provided\");\n         }\n-        if (visitor != null) {\n-            DefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());\n-            visitor.setProvider(provider);\n-            provider.acceptJsonFormatVisitor(type, visitor);\n-        }\n+        _serializerProvider(getSerializationConfig()).acceptJsonFormatVisitor(type, visitor);\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n import com.fasterxml.jackson.core.util.Instantiatable;\n import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;\n import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n import com.fasterxml.jackson.databind.ser.SerializerFactory;\n     /**********************************************************\n      */\n \n+    /**\n+     * Method for visiting type hierarchy for given type, using specified visitor.\n+     * Visitation uses <code>Serializer</code> hierarchy and related properties\n+     *<p>\n+     * This method can be used for things like\n+     * generating <a href=\"http://json-schema.org/\">Json Schema</a>\n+     * instance for specified type.\n+     *\n+     * @param type Type to generate schema for (possibly with generic signature)\n+     * \n+     * @since 2.2\n+     */\n+    public void acceptJsonFormatVisitor(JavaType type, JsonFormatVisitorWrapper visitor)\n+        throws JsonMappingException\n+    {\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"type must be provided\");\n+        }\n+        _serializerProvider(_config).acceptJsonFormatVisitor(type, visitor);\n+    }\n+    \n     public boolean canSerialize(Class<?> type) {\n         return _serializerProvider(_config).hasSerializerFor(type);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n         /* no need for embedded type information for JSON schema generation (all\n          * type information it needs is accessible via \"untyped\" serializer)\n          */\n+        visitor.setProvider(this);\n         findValueSerializer(javaType, null).acceptJsonFormatVisitor(visitor, javaType);\n     }\n     ", "timestamp": 1353726505, "metainfo": ""}