{"sha": "c6eaf4b5230d4e72cef6a4cb74d17631c6304f79", "log": "Implemented #253", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n import java.util.Collection;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;\n+import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n     public JsonDeserializer<?> getDelegatee() {\n         return null;\n     }\n+\n+    \n+    /**\n+     * Method needed by {@link BeanDeserializerFactory} to properly link\n+     * managed- and back-reference pairs.\n+     * \n+     * @since 2.2 (was moved out of <code>BeanDeserializerBase</code>)\n+     */\n+    public SettableBeanProperty findBackReference(String refName)\n+    {\n+        throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n+                +\"': type: value deserializer of type \"+getClass().getName()+\" does not support them\");\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n      * Method called by <code>BeanDeserializer</code> to resolve back reference\n      * part of managed references.\n      */\n-    public SettableBeanProperty findBackReference(String logicalName)\n-    {\n+    @Override\n+    public SettableBeanProperty findBackReference(String logicalName) {\n         return (_backRefProperties == null) ? null : _backRefProperties.get(logicalName);\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.impl.*;\n-import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;\n import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.introspect.*;\n             return prop;\n         }\n         JsonDeserializer<?> valueDeser = prop.getValueDeserializer();\n-        SettableBeanProperty backProp = null;\n-        boolean isContainer = false;\n+        SettableBeanProperty backProp = valueDeser.findBackReference(refName);\n+\n+        // 04-Jul-2013, tatu: Before 'findBackReference()' in 'JsonDeserializer' had to cast;\n+        //   became unwieldy with delegating deserializer etc\n+        /*\n         if (valueDeser instanceof BeanDeserializerBase) {\n             backProp = ((BeanDeserializerBase) valueDeser).findBackReference(refName);\n         } else if (valueDeser instanceof ContainerDeserializerBase<?>) {\n                     +\"': type for value deserializer is not BeanDeserializer or ContainerDeserializerBase, but \"\n                     +valueDeser.getClass().getName());\n         }\n+        */\n         if (backProp == null) {\n             throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \"\n                     +prop.getType());\n         // also: verify that type is compatible\n         JavaType referredType = _beanType;\n         JavaType backRefType = backProp.getType();\n+        boolean isContainer = prop.getType().isContainerType();\n         if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n             throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\"\n                     +backRefType.getRawClass().getName()+\") not compatible with managed type (\"\n         }\n         return prop;\n     }\n-    \n     /**\n      * Method needed by {@link BeanDeserializerFactory} to properly link\n      * managed- and back-reference pairs.\n      */\n+    @Override\n     public SettableBeanProperty findBackReference(String logicalName)\n     {\n         if (_backRefs == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java\n \n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n \n /**\n  * Intermediate base deserializer class that adds more shared accessor\n \n     /*\n     /**********************************************************\n+    /* Overrides\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public SettableBeanProperty findBackReference(String refName) {\n+        JsonDeserializer<Object> valueDeser = getContentDeserializer();\n+        if (valueDeser == null) {\n+            throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName\n+                    +\"': type: container deserializer of type \"+getClass().getName()+\" returned null for 'getContentDeserializer()'\");\n+        }\n+        return valueDeser.findBackReference(refName);\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Extended API\n     /**********************************************************\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n         return newDelegatingInstance(newDelegatee);\n     }\n \n+    @Override\n+    public SettableBeanProperty findBackReference(String logicalName) {\n+        // [Issue#253]: Hope this works....\n+        return _delegatee.findBackReference(logicalName);\n+    }\n+    \n     /*\n     /**********************************************************************\n     /* Overridden deserialization methods", "timestamp": 1372994717, "metainfo": ""}