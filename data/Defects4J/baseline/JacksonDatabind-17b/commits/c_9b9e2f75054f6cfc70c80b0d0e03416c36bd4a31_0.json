{"sha": "9b9e2f75054f6cfc70c80b0d0e03416c36bd4a31", "log": "added SimplePropertyFilter.depositPropertyFilter", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n  * Interface that defines API for filter objects use (as configured\n     public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov,\n             BeanPropertyWriter writer)\n         throws Exception;\n+    \n+    public void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider);\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n+import java.lang.reflect.Type;\n import java.util.*;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n+import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.BeanPropertyFilter;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n+import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase;\n \n /**\n  * Simple {@link BeanPropertyFilter} implementation that only uses property name\n  */\n public abstract class SimpleBeanPropertyFilter implements BeanPropertyFilter\n {\n-    /*\n+\t/*\n     /**********************************************************\n     /* Life-cycle\n     /**********************************************************\n-     */\n-    \n-    protected SimpleBeanPropertyFilter() { }\n+\t */\n \n-    /**\n-     * Factory method to construct filter that filters out all properties <b>except</b>\n-     * ones includes in set\n-     */\n-    public static SimpleBeanPropertyFilter filterOutAllExcept(Set<String> properties) {\n-        return new FilterExceptFilter(properties);\n-    }\n+\tprotected SimpleBeanPropertyFilter() { }\n \n-    public static SimpleBeanPropertyFilter filterOutAllExcept(String... propertyArray) {\n-        HashSet<String> properties = new HashSet<String>(propertyArray.length);\n-        Collections.addAll(properties, propertyArray);\n-        return new FilterExceptFilter(properties);\n-    }\n-    \n-    public static SimpleBeanPropertyFilter serializeAllExcept(Set<String> properties) {\n-        return new SerializeExceptFilter(properties);\n-    }\n+\t/**\n+\t * Factory method to construct filter that filters out all properties <b>except</b>\n+\t * ones includes in set\n+\t */\n+\tpublic static SimpleBeanPropertyFilter filterOutAllExcept(Set<String> properties) {\n+\t\treturn new FilterExceptFilter(properties);\n+\t}\n \n-    public static SimpleBeanPropertyFilter serializeAllExcept(String... propertyArray) {\n-        HashSet<String> properties = new HashSet<String>(propertyArray.length);\n-        Collections.addAll(properties, propertyArray);\n-        return new SerializeExceptFilter(properties);\n-    }\n-    \n-    /*\n+\tpublic static SimpleBeanPropertyFilter filterOutAllExcept(String... propertyArray) {\n+\t\tHashSet<String> properties = new HashSet<String>(propertyArray.length);\n+\t\tCollections.addAll(properties, propertyArray);\n+\t\treturn new FilterExceptFilter(properties);\n+\t}\n+\n+\tpublic static SimpleBeanPropertyFilter serializeAllExcept(Set<String> properties) {\n+\t\treturn new SerializeExceptFilter(properties);\n+\t}\n+\n+\tpublic static SimpleBeanPropertyFilter serializeAllExcept(String... propertyArray) {\n+\t\tHashSet<String> properties = new HashSet<String>(propertyArray.length);\n+\t\tCollections.addAll(properties, propertyArray);\n+\t\treturn new SerializeExceptFilter(properties);\n+\t}\n+\n+\t/*\n     /**********************************************************\n     /* Sub-classes\n     /**********************************************************\n-     */\n+\t */\n \n-    /**\n-     * Filter implementation which defaults to filtering out unknown\n-     * properties and only serializes ones explicitly listed.\n-     */\n-    public static class FilterExceptFilter\n-        extends SimpleBeanPropertyFilter\n-    {\n-        /**\n-         * Set of property names to serialize.\n-         */\n-        protected final Set<String> _propertiesToInclude;\n+\t/**\n+\t * Filter implementation which defaults to filtering out unknown\n+\t * properties and only serializes ones explicitly listed.\n+\t */\n+\tpublic static class FilterExceptFilter\n+\textends SimpleBeanPropertyFilter\n+\t{\n+\t\t/**\n+\t\t * Set of property names to serialize.\n+\t\t */\n+\t\tprotected final Set<String> _propertiesToInclude;\n \n-        public FilterExceptFilter(Set<String> properties) {\n-            _propertiesToInclude = properties;\n-        }\n-        \n-//      @Override\n-        public void serializeAsField(Object bean, JsonGenerator jgen,\n-                SerializerProvider provider, BeanPropertyWriter writer)\n-            throws Exception\n-        {\n-            if (_propertiesToInclude.contains(writer.getName())) {\n-                writer.serializeAsField(bean, jgen, provider);\n-            }\n-        }\n-    }\n+\t\tpublic FilterExceptFilter(Set<String> properties) {\n+\t\t\t_propertiesToInclude = properties;\n+\t\t}\n \n-    /**\n-     * Filter implementation which defaults to serializing all\n-     * properties, except for ones explicitly listed to be filtered out.\n-     */\n-    public static class SerializeExceptFilter\n-        extends SimpleBeanPropertyFilter\n-    {\n-        /**\n-         * Set of property names to filter out.\n-         */\n-        protected final Set<String> _propertiesToExclude;\n+\t\t//      @Override\n+\t\tpublic void serializeAsField(Object bean, JsonGenerator jgen,\n+\t\t\t\tSerializerProvider provider, BeanPropertyWriter writer) throws Exception\n+\t\t{\n+\t\t\tif (_propertiesToInclude.contains(writer.getName())) {\n+\t\t\t\twriter.serializeAsField(bean, jgen, provider);\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic void depositSchemaProperty(BeanPropertyWriter writer,\n+\t\t\t\tObjectNode propertiesNode, SerializerProvider provider) {\n+\t\t\tif (_propertiesToInclude.contains(writer.getName())) {\n+\t\t\t\tsuper.depositSchemaProperty(writer, propertiesNode, provider);\n+\t\t\t}\n+\t\t}\n+\t}\n \n-        public SerializeExceptFilter(Set<String> properties) {\n-            _propertiesToExclude = properties;\n-        }\n-        \n-//      @Override\n-        public void serializeAsField(Object bean, JsonGenerator jgen,\n-                SerializerProvider provider, BeanPropertyWriter writer)\n-            throws Exception\n-        {\n-            if (!_propertiesToExclude.contains(writer.getName())) {\n-                writer.serializeAsField(bean, jgen, provider);\n-            }\n-        }\n-    }\n+\t/**\n+\t * Filter implementation which defaults to serializing all\n+\t * properties, except for ones explicitly listed to be filtered out.\n+\t */\n+\tpublic static class SerializeExceptFilter\n+\textends SimpleBeanPropertyFilter\n+\t{\n+\t\t/**\n+\t\t * Set of property names to filter out.\n+\t\t */\n+\t\tprotected final Set<String> _propertiesToExclude;\n+\n+\t\tpublic SerializeExceptFilter(Set<String> properties) {\n+\t\t\t_propertiesToExclude = properties;\n+\t\t}\n+\n+\t\t//      @Override\n+\t\tpublic void serializeAsField(Object bean, JsonGenerator jgen,\n+\t\t\t\tSerializerProvider provider, BeanPropertyWriter writer) throws Exception\n+\t\t{\n+\t\t\tif (!_propertiesToExclude.contains(writer.getName())) {\n+\t\t\t\twriter.serializeAsField(bean, jgen, provider);\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic void depositSchemaProperty(BeanPropertyWriter writer,\n+\t\t\t\tObjectNode propertiesNode, SerializerProvider provider) {\n+\t\t\tif (!_propertiesToExclude.contains(writer.getName())) {\n+\t\t\t\tsuper.depositSchemaProperty(writer, propertiesNode, provider);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider) {\n+\t\tJavaType propType = writer.getSerializationType();\n+\n+\t\t// 03-Dec-2010, tatu: SchemaAware REALLY should use JavaType, but alas it doesn't...\n+\t\tType hint = (propType == null) ? writer.getGenericPropertyType() : propType.getRawClass();\n+\t\tJsonNode schemaNode;\n+\t\t// Maybe it already has annotated/statically configured serializer?\n+\t\tJsonSerializer<Object> ser = writer.getSerializer();\n+\n+\t\ttry {\n+\t\t\tif (ser == null) { // nope\n+\t\t\t\tClass<?> serType = writer.getRawSerializationType();\n+\t\t\t\tif (serType == null) {\n+\t\t\t\t\tserType = writer.getPropertyType();\n+\t\t\t\t}\n+\t\t\t\tser = provider.findValueSerializer(serType, writer);\n+\t\t\t}\n+\t\t\tboolean isOptional = !BeanSerializerBase.isPropertyRequired(writer, provider);\n+\t\t\tif (ser instanceof SchemaAware) {\n+\t\t\t\tschemaNode =  ((SchemaAware) ser).getSchema(provider, hint, isOptional) ;\n+\t\t\t} else {  \n+\t\t\t\tschemaNode = JsonSchema.getDefaultSchemaNode(); \n+\t\t\t}\n+\t\t} catch (JsonMappingException e) {\n+\t\t\tschemaNode = JsonSchema.getDefaultSchemaNode(); \n+\t\t\t//TODO: log error\n+\t\t}\n+\t\tpropertiesNode.put(writer.getName(), schemaNode);\n+\t}\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n         //todo: should the classname go in the title?\n         //o.put(\"title\", _className);\n         ObjectNode propertiesNode = o.objectNode();\n+        final BeanPropertyFilter filter;\n+        if (_propertyFilterId != null) {\n+        \tfilter = findFilter(provider);\n+        } else {\n+        \tfilter = null;\n+        }\n+        \t\t\n         for (int i = 0; i < _props.length; i++) {\n             BeanPropertyWriter prop = _props[i];\n+            if (filter != null) {\n+            \tfilter.depositSchemaProperty(prop, propertiesNode, provider);\n+            \t continue;\n+            }\n             JavaType propType = prop.getSerializationType();\n \n             // 03-Dec-2010, tatu: SchemaAware REALLY should use JavaType, but alas it doesn't...\n      * @param prop the bean property.\n      * @return true if the property is optional, false otherwise.\n      */\n-    private boolean isPropertyRequired(final BeanPropertyWriter prop, final SerializerProvider provider) {\n+    public static boolean isPropertyRequired(final BeanPropertyWriter prop, final SerializerProvider provider) {\n         Boolean value = provider.getAnnotationIntrospector().hasRequiredMarker(prop.getMember());\n         return (value == null) ? false : value.booleanValue();\n     }\n+    \n }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n import java.util.Collection;\n import java.util.Map;\n \n+import com.fasterxml.jackson.annotation.JsonFilter;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.ser.FilterProvider;\n+import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;\n+import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;\n \n /**\n  * @author Ryan Heaton\n         assertEquals(false, property4Schema.path(\"required\").booleanValue());\n         assertEquals(\"number\", property4Schema.get(\"items\").get(\"type\").asText());\n     }\n+    \n+    @JsonFilter(\"filteredBean\")\n+    private static class FilteredBean {\n+    \t\n+    \t@JsonProperty\n+    \tprivate String secret = \"secret\";\n+    \t\n+    \t@JsonProperty\n+    \tprivate String obvious = \"obvious\";\n+    \t\n+    \tpublic String getSecret() { return secret; }\n+    \tpublic void setSecret(String s) { secret = s; }\n+    \t\n+    \tpublic String getObvious() { return obvious; }\n+    \tpublic void setObvious(String s) {obvious = s; }\n+    }\n+    \n+    public static FilterProvider secretFilterProvider = new SimpleFilterProvider()\n+    .addFilter(\"filteredBean\", SimpleBeanPropertyFilter.filterOutAllExcept(new String[]{\"obvious\"}));\n+    /** */\n+    public void testGeneratingJsonSchemaWithFilters() throws Exception {\n+    \tObjectMapper mapper = new ObjectMapper();\n+    \tmapper.setFilters(secretFilterProvider);\n+    \tJsonSchema schema = mapper.generateJsonSchema(FilteredBean.class);\n+    \tJsonNode node = schema.getSchemaNode().get(\"properties\");\n+    \tassertTrue(node.has(\"obvious\"));\n+    \tassertFalse(node.has(\"secret\"));\n+    }\n \n     /**\n      * Additional unit test for verifying that schema object itself", "timestamp": 1343168398, "metainfo": ""}