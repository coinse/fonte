{"sha": "2a41afcbb877081476a441628b50ff59f08a2d0d", "log": "Starting to work on resolving more of non-conflicting getters", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n \n import java.util.*;\n \n-import com.fasterxml.jackson.databind.AnnotationIntrospector;\n-import com.fasterxml.jackson.databind.PropertyMetadata;\n-import com.fasterxml.jackson.databind.PropertyName;\n-import com.fasterxml.jackson.databind.util.BeanUtil;\n+import com.fasterxml.jackson.databind.*;\n \n /**\n  * Helper class used for aggregating information about a single\n     @Override\n     public AnnotatedMethod getGetter()\n     {\n-        if (_getters == null) {\n+        Linked<AnnotatedMethod> curr = _getters;\n+        // If zero easy\n+        if (curr == null) {\n             return null;\n         }\n-        // If multiple, verify that they do not conflict...\n-        AnnotatedMethod getter = _getters.value;\n-        Linked<AnnotatedMethod> next = _getters.next;\n+        Linked<AnnotatedMethod> next = curr.next;\n+        // ditto, if one\n+        if (next == null) {\n+            return curr.value;\n+        }\n+\n+        // But if multiple, verify that they do not conflict...\n         for (; next != null; next = next.next) {\n-            /* [JACKSON-255] Allow masking, i.e. report exception only if\n-             *   declarations in same class, or there's no inheritance relationship\n-             *   (sibling interfaces etc)\n+            \n+            /* [JACKSON-255] Allow masking, i.e. do not report exception if one\n+             *   is in super-class from the other\n              */\n-            AnnotatedMethod nextGetter = next.value;\n-            Class<?> getterClass = getter.getDeclaringClass();\n-            Class<?> nextClass = nextGetter.getDeclaringClass();\n+            Class<?> getterClass = curr.value.getDeclaringClass();\n+            Class<?> nextClass = next.value.getDeclaringClass();\n             if (getterClass != nextClass) {\n                 if (getterClass.isAssignableFrom(nextClass)) { // next is more specific\n-                    getter = nextGetter;\n+                    curr = next;\n                     continue;\n                 }\n-                if (nextClass.isAssignableFrom(getterClass)) { // getter more specific\n+                if (nextClass.isAssignableFrom(getterClass)) { // current more specific\n                     continue;\n                 }\n             }\n-            /* [Issue#238]: Also, regular getters have precedence over \"is-getters\", so\n-             *   latter can be skipped to resolve otherwise conflict.\n-             *   This is bit ugly as we have to re-process naming (as determination of type\n-             *   is not retained), but should work.\n+            /* 30-May-2014, tatu: Three levels of precedence:\n+             * \n+             * 1. Regular getters (\"getX\")\n+             * 2. Is-getters (\"isX\")\n+             * 3. Implicit, possible getters (\"x\")\n              */\n-            boolean thisIsGetter = BeanUtil.okNameForIsGetter(getter, getter.getName()) != null;\n-            boolean nextIsGetter = BeanUtil.okNameForIsGetter(nextGetter, nextGetter.getName()) != null;\n-            \n-            if (thisIsGetter != nextIsGetter) {\n-                if (thisIsGetter) {\n-                    getter = nextGetter;\n-                } \n+            int priNext = _getterPriority(next.value);\n+            int priCurr = _getterPriority(curr.value);\n+\n+            if (priNext != priCurr) {\n+                if (priNext < priCurr) {\n+                    curr = next;\n+                }\n                 continue;\n             }\n             throw new IllegalArgumentException(\"Conflicting getter definitions for property \\\"\"+getName()+\"\\\": \"\n-                    +getter.getFullName()+\" vs \"+nextGetter.getFullName());\n-        }\n-        return getter;\n-    }\n-\n+                    +curr.value.getFullName()+\" vs \"+next.value.getFullName());\n+        }\n+\n+        // One more thing; to avoid having to do it again...\n+        _getters = curr.withoutNext();\n+        return curr.value;\n+    }\n+\n+    protected int _getterPriority(AnnotatedMethod m)\n+    {\n+        final String name = m.getName();\n+        // [#238]: Also, regular getters have precedence over \"is-getters\"\n+        if (name.startsWith(\"get\") && name.length() > 3) {\n+            // should we check capitalization?\n+            return 1;\n+        }\n+        if (name.startsWith(\"is\") && name.length() > 2) {\n+            return 2;\n+        }\n+        return 3;\n+    }\n+    \n     @Override\n     public AnnotatedMethod getSetter()\n     {\n             isMarkedIgnored = ignored;\n         }\n \n+        public Linked<T> withoutNext() {\n+            if (next == null) {\n+                return this;\n+            }\n+            return new Linked<T>(value, null, name, isNameExplicit, isVisible, isMarkedIgnored);\n+        }\n+        \n         public Linked<T> withValue(T newValue) {\n             if (newValue == value) {\n                 return this;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n         sers.put(Class.class, ClassSerializer.class);\n \n         // And then some stranger types... not 100% they are needed but:\n-        sers.put(Void.TYPE, NullSerializer.class);\n+        sers.put(Void.TYPE, NullSerializer.instance);\n         \n         return sers.entrySet();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/BeanUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/BeanUtil.java\n \n     public static String okNameForMutator(AnnotatedMethod am, String prefix)\n     {\n-\t    String name = am.getName();\n+        String name = am.getName();\n         if (name.startsWith(prefix)) {\n-        \treturn manglePropertyName(name.substring(prefix.length()));\n+            return manglePropertyName(name.substring(prefix.length()));\n         }\n         return null;\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts.java\n         public String _name() { return \"foo\"; }\n         public String getName() { return \"Bob\"; }\n \n-        public void setStuff() { ; // ok\n+        public void setStuff(String value) { ; // ok\n         }\n \n-        public void _stuff() {\n+        public void _stuff(String value) {\n             throw new UnsupportedOperationException();\n         }\n     }", "timestamp": 1401515921, "metainfo": ""}