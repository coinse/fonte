{"sha": "85282b1630ad1acda5c6b62ed30b68f5ff4db953", "log": "(and actual #744 fix here, doh)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n         throws JsonMappingException\n     {\n         if (_rootDeserializer != null) {\n-            return _rootDeserializer;\n+            // 02-Apr-2015, tatu: Patch for #744 (better fix in 2.5.3)\n+            if (valueType != JSON_NODE_TYPE) {\n+                return _rootDeserializer;\n+            }\n         }\n \n         // Sanity check: must have actual type...\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue.java\n package com.fasterxml.jackson.databind.convert;\n \n+import java.io.IOException;\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonView;\n-import com.fasterxml.jackson.databind.BaseMapTest;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n \n import static org.junit.Assert.assertArrayEquals;\n \n         @JsonView(TextView.class)\n         public String str;\n     }\n-        \n+\n+    // for [databind#744]\n+    static class DataA {\n+        public int i = 1;\n+        public int j = 2;\n+\n+    }\n+\n+    static class DataB {\n+        public DataA da = new DataA();\n+        public int k = 3;\n+    }\n+\n+    static class DataADeserializer extends StdDeserializer<DataA> {\n+        private static final long serialVersionUID = 1L;\n+\n+        DataADeserializer() {\n+            super(DataA.class);\n+        }\n+\n+        public DataA deserialize(JsonParser jp, DeserializationContext ctxt)\n+                throws JsonProcessingException, IOException {\n+            if (jp.getCurrentToken() != JsonToken.START_OBJECT) {\n+                throw ctxt.mappingException(\"Wrong current token, expected START_OBJECT, got: \"\n+                        +jp.getCurrentToken());\n+            }\n+            /*JsonNode node =*/ jp.readValueAsTree();\n+\n+            DataA da = new DataA();\n+            da.i = 5;\n+            return da;\n+        }\n+    }\n+    \n     /*\n     /********************************************************\n     /* Unit tests\n         assertEquals(100, bean.num);\n         assertEquals(\"foobar\", bean.str);\n     }\n+\n+    // [databind#744]\n+    public void testIssue744() throws IOException\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        SimpleModule module = new SimpleModule();\n+        module.addDeserializer(DataA.class, new DataADeserializer());\n+        mapper.registerModule(module);\n+\n+        DataB db = new DataB();\n+        db.da.i = 11;\n+        db.k = 13;\n+        String jsonBString = mapper.writeValueAsString(db);\n+        JsonNode jsonBNode = mapper.valueToTree(db);\n+\n+        // create parent\n+        DataB dbNewViaString = mapper.readValue(jsonBString, DataB.class);\n+        assertEquals(5, dbNewViaString.da.i);\n+        assertEquals(13, dbNewViaString.k);\n+\n+        DataB dbNewViaNode = mapper.treeToValue(jsonBNode, DataB.class);\n+        assertEquals(5, dbNewViaNode.da.i);\n+        assertEquals(13, dbNewViaNode.k);\n+\n+        // update parent\n+        DataB dbUpdViaString = new DataB();\n+        DataB dbUpdViaNode = new DataB();\n+\n+        assertEquals(1, dbUpdViaString.da.i);\n+        assertEquals(3, dbUpdViaString.k);\n+        mapper.readerForUpdating(dbUpdViaString).readValue(jsonBString);\n+        assertEquals(5, dbUpdViaString.da.i);\n+        assertEquals(13, dbUpdViaString.k);\n+\n+        assertEquals(1, dbUpdViaNode.da.i);\n+        assertEquals(3, dbUpdViaNode.k);\n+        \n+        mapper.readerForUpdating(dbUpdViaNode).readValue(jsonBNode);\n+        assertEquals(5, dbUpdViaNode.da.i);\n+        assertEquals(13, dbUpdViaNode.k);\n+    }\n }", "timestamp": 1428004593, "metainfo": ""}