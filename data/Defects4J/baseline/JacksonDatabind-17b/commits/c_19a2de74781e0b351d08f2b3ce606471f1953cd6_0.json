{"sha": "19a2de74781e0b351d08f2b3ce606471f1953cd6", "log": "Fix a UUID serialization problem, unit test bug (which masked serialization prob)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java\n public class UUIDSerializer\n     extends StdScalarSerializer<UUID>\n {\n-    final static char[] HEX_CHARS = \"01234567890abcdef\".toCharArray();\n+    final static char[] HEX_CHARS = \"0123456789abcdef\".toCharArray();\n     \n     public UUIDSerializer() { super(UUID.class); }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n         }\n         \n         // // // Mutators\n-\n-        /*\n-\n-    protected final void _appendNativeIds(int offset)\n-    {\n-        Segment seg = _last;\n-        _hasNativeId = false;\n-        if (_objectId != null) {\n-            seg.assignObjectId(offset, _objectId);\n-            _objectId = null;\n-        }\n-        if (_typeId != null) {\n-            seg.assignTypeId(offset, _typeId);\n-            _typeId = null;\n-        }\n-    }\n-         */\n         \n         public Segment append(int index, JsonToken tokenType)\n         {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n         // first, couple of generated UUIDs:\n         for (String value : new String[] {\n                 \"76e6d183-5f68-4afa-b94a-922c1fdb83f8\",\n+                \"540a88d1-e2d8-4fb1-9396-9212280d0a7f\",\n+                \"2c9e441d-1cd0-472d-9bab-69838f877574\",\n+                \"591b2869-146e-41d7-8048-e8131f1fdec5\",\n+                \"82994ac2-7b23-49f2-8cc5-e24cf6ed77be\",\n                 \"00000007-0000-0000-0000-000000000000\"\n         }) {\n             assertEquals(UUID.fromString(value),\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJdkTypes.java\n         // first, couple of generated UUIDs:\n         for (String value : new String[] {\n                 \"76e6d183-5f68-4afa-b94a-922c1fdb83f8\",\n+                \"540a88d1-e2d8-4fb1-9396-9212280d0a7f\",\n+                \"2c9e441d-1cd0-472d-9bab-69838f877574\",\n+                \"591b2869-146e-41d7-8048-e8131f1fdec5\",\n+                \"82994ac2-7b23-49f2-8cc5-e24cf6ed77be\",\n                 \"00000007-0000-0000-0000-000000000000\"\n         }) {\n             UUID uuid = UUID.fromString(value);\n-            assertEquals(quote(uuid.toString()), MAPPER.writeValueAsString(value));\n+            String json = MAPPER.writeValueAsString(uuid);\n+            assertEquals(quote(uuid.toString()), json);\n         }\n+        \n         // then use templating; note that these are not exactly valid UUIDs\n         // wrt spec (type bits etc), but JDK UUID should deal ok\n         final String TEMPL = \"00000000-0000-0000-0000-000000000000\";\n         for (int i = 0; i < chars.length(); ++i) {\n             String value = TEMPL.replace('0', chars.charAt(i));\n             UUID uuid = UUID.fromString(value);\n-            assertEquals(quote(uuid.toString()), MAPPER.writeValueAsString(value));\n+            String json = MAPPER.writeValueAsString(uuid);\n+            assertEquals(quote(uuid.toString()), json);\n         }\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java\n     public void testWithUUID() throws IOException\n     {\n         ObjectMapper mapper = new ObjectMapper();\n-        TokenBuffer buf = new TokenBuffer(mapper, false); // no ObjectCodec\n-        UUID uuid = UUID.fromString(\"76e6d183-5f68-4afa-b94a-922c1fdb83f8\");\n-        mapper.writeValue(buf, uuid);\n-        buf.close();\n-\n-        // and bring it back\n-        UUID out = mapper.readValue(buf.asParser(), UUID.class);\n-        assertEquals(uuid, out);\n+\n+        for (String value : new String[] {\n+                \"00000007-0000-0000-0000-000000000000\",\n+                \"76e6d183-5f68-4afa-b94a-922c1fdb83f8\",\n+                \"540a88d1-e2d8-4fb1-9396-9212280d0a7f\",\n+                \"2c9e441d-1cd0-472d-9bab-69838f877574\",\n+                \"591b2869-146e-41d7-8048-e8131f1fdec5\",\n+                \"82994ac2-7b23-49f2-8cc5-e24cf6ed77be\",\n+        }) {\n+            TokenBuffer buf = new TokenBuffer(mapper, false); // no ObjectCodec\n+            UUID uuid = UUID.fromString(value);\n+            mapper.writeValue(buf, uuid);\n+            buf.close();\n+    \n+            // and bring it back\n+            UUID out = mapper.readValue(buf.asParser(), UUID.class);\n+            assertEquals(uuid.toString(), out.toString());\n+        }\n     }\n     \n     /*", "timestamp": 1379187290, "metainfo": ""}