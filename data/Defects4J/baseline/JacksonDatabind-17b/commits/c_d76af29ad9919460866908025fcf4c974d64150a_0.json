{"sha": "d76af29ad9919460866908025fcf4c974d64150a", "log": "...", "commit": "\n--- /dev/null\n+++ b/backup/TypeSerializerWrapper.java\n+package com.fasterxml.jackson.databind.jsontype;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.BeanProperty;\n+\n+/**\n+ * Helper class used in cases where we caller has to override source\n+ * for type identifier, for example when serializing a value using\n+ * a delegate or surrogate value, in which case type id is to be based\n+ * on the original value, but serialization done using surrogate.\n+ * \n+ * @since 2.2\n+ */\n+public class TypeSerializerWrapper\n+    extends TypeSerializer\n+{\n+    /**\n+     * Actual TypeSerializer to use\n+     */\n+    protected final TypeSerializer _delegate;\n+\n+    protected final Object _value;\n+    \n+    public TypeSerializerWrapper(TypeSerializer delegate, Object value)\n+    {\n+        _delegate = delegate;\n+        _value = value;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* TypeSerializer implementation, metadata\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public TypeSerializer forProperty(BeanProperty prop) {\n+        TypeSerializer d2 = _delegate.forProperty(prop);\n+        if (d2 == _delegate) {\n+            return this;\n+        }\n+        return new TypeSerializerWrapper(d2, _value);\n+    }\n+\n+    @Override\n+    public As getTypeInclusion() {\n+        return _delegate.getTypeInclusion();\n+    }\n+\n+    @Override\n+    public String getPropertyName() {\n+        return _delegate.getPropertyName();\n+    }\n+\n+    @Override\n+    public TypeIdResolver getTypeIdResolver() {\n+        return _delegate.getTypeIdResolver();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* TypeSerializer implementation, actual write methods\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public void writeTypePrefixForScalar(Object value, JsonGenerator jgen)\n+            throws IOException, JsonProcessingException {\n+        _delegate.writeTypePrefixForScalar(_value, jgen);\n+    }\n+\n+    @Override\n+    public void writeTypePrefixForObject(Object value, JsonGenerator jgen)\n+            throws IOException, JsonProcessingException {\n+        _delegate.writeTypePrefixForObject(_value, jgen);\n+    }\n+\n+    @Override\n+    public void writeTypePrefixForArray(Object value, JsonGenerator jgen)\n+            throws IOException, JsonProcessingException {\n+        _delegate.writeTypePrefixForArray(_value, jgen);\n+    }\n+\n+    @Override\n+    public void writeTypeSuffixForScalar(Object value, JsonGenerator jgen)\n+            throws IOException, JsonProcessingException {\n+        _delegate.writeTypeSuffixForScalar(_value, jgen);\n+    }\n+\n+    @Override\n+    public void writeTypeSuffixForObject(Object value, JsonGenerator jgen)\n+            throws IOException, JsonProcessingException {\n+        _delegate.writeTypeSuffixForObject(_value, jgen);\n+    }\n+\n+    @Override\n+    public void writeTypeSuffixForArray(Object value, JsonGenerator jgen)\n+            throws IOException, JsonProcessingException {\n+        _delegate.writeTypeSuffixForArray(_value, jgen);\n+    }\n+\n+    @Override\n+    public void writeCustomTypePrefixForScalar(Object value,\n+            JsonGenerator jgen, String typeId) throws IOException, JsonProcessingException {\n+        _delegate.writeCustomTypePrefixForScalar(_value, jgen, typeId);\n+    }\n+\n+    @Override\n+    public void writeCustomTypePrefixForObject(Object value,\n+            JsonGenerator jgen, String typeId) throws IOException, JsonProcessingException {\n+        _delegate.writeCustomTypePrefixForObject(_value, jgen, typeId);\n+    }\n+\n+    @Override\n+    public void writeCustomTypePrefixForArray(Object value, JsonGenerator jgen,\n+            String typeId) throws IOException, JsonProcessingException {\n+        _delegate.writeCustomTypePrefixForArray(_value, jgen, typeId);\n+    }\n+\n+    @Override\n+    public void writeCustomTypeSuffixForScalar(Object value,\n+            JsonGenerator jgen, String typeId) throws IOException, JsonProcessingException {\n+        _delegate.writeCustomTypeSuffixForScalar(_value, jgen, typeId);\n+    }\n+\n+    @Override\n+    public void writeCustomTypeSuffixForObject(Object value,\n+            JsonGenerator jgen, String typeId) throws IOException,\n+            JsonProcessingException {\n+        _delegate.writeCustomTypeSuffixForObject(_value, jgen, typeId);\n+    }\n+\n+    @Override\n+    public void writeCustomTypeSuffixForArray(Object value, JsonGenerator jgen,\n+            String typeId) throws IOException, JsonProcessingException {\n+        _delegate.writeCustomTypeSuffixForArray(_value, jgen, typeId);\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonValue.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonValue.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\n-import junit.framework.Assert;\n \n /**\n  * This unit test suite tests functioning of {@link JsonValue}\n         \n         External(Internal e) { i = e.value; }\n     }\n+\n+    // [Issue#167]\n+    \n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"boingo\")\n+    @JsonSubTypes(value = {@JsonSubTypes.Type(name = \"boopsy\", value = AdditionInterfaceImpl.class) })\n+    static interface AdditionInterface\n+    {\n+    \tpublic int add(int in);\n+    }\n+\t\n+    public static class AdditionInterfaceImpl implements AdditionInterface\n+    {\n+\t    private final int toAdd;\n+\t\n+\t    @JsonCreator\n+\t    public AdditionInterfaceImpl(@JsonProperty(\"toAdd\") int toAdd) {\n+\t      this.toAdd = toAdd;\n+\t    }\n+\t\n+\t    @JsonProperty\n+\t    public int getToAdd() {\n+\t      return toAdd;\n+\t    }\n+\t\n+\t    @Override\n+\t    public int add(int in) {\n+\t      return in + toAdd;\n+\t    }\n+    }\n+\t\n+    public static class NegatingAdditionInterface implements AdditionInterface\n+    {\n+\t    final AdditionInterface delegate;\n+\t\n+\t    public NegatingAdditionInterface(AdditionInterface delegate) {\n+\t    \tthis.delegate = delegate;\n+\t    }\n+\t\n+\t    @Override\n+\t    public int add(int in) {\n+\t      return delegate.add(-in);\n+\t    }\n+\t\n+\t    @JsonValue\n+\t    public AdditionInterface getDelegate() {\n+\t      return delegate;\n+\t    }\n+    }\n     \n     /*\n     /*********************************************************\n         assertEquals(json, \"{\\\"values\\\":[{\\\"i\\\":1},{\\\"i\\\":2}]}\");\n     }\n \n-  public void testPolymorphicSerdeWithDelegate() throws Exception\n-  {\n-    AdditionInterface adder = new AdditionInterfaceImpl(1);\n-\n-    assertEquals(2, adder.add(1));\n-    String json = MAPPER.writeValueAsString(adder);\n-    assertEquals(\"{\\\"boingo\\\":\\\"boopsy\\\",\\\"toAdd\\\":1}\", json);\n-    assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1));\n-\n-    adder = new NegatingAdditionInterface(adder);\n-    assertEquals(0, adder.add(1));\n-    json = MAPPER.writeValueAsString(adder);\n-    assertEquals(\"{\\\"boingo\\\":\\\"boopsy\\\",\\\"toAdd\\\":1}\", json);\n-    assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1));\n-  }\n-\n-  @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"boingo\")\n-  @JsonSubTypes(value = {\n-      @JsonSubTypes.Type(name = \"boopsy\", value = AdditionInterfaceImpl.class)\n-  })\n-  static interface AdditionInterface\n-  {\n-    public int add(int in);\n-  }\n-\n-  public static class AdditionInterfaceImpl implements AdditionInterface\n-  {\n-    private final int toAdd;\n-\n-    @JsonCreator\n-    public AdditionInterfaceImpl(\n-        @JsonProperty(\"toAdd\") int toAdd\n-    )\n-    {\n-      this.toAdd = toAdd;\n-    }\n-\n-    @JsonProperty\n-    public int getToAdd()\n-    {\n-      return toAdd;\n-    }\n-\n-    @Override\n-    public int add(int in)\n-    {\n-      return in + toAdd;\n-    }\n-  }\n-\n-  public static class NegatingAdditionInterface implements AdditionInterface\n-  {\n-    private final AdditionInterface delegate;\n-\n-    public NegatingAdditionInterface(\n-        AdditionInterface delegate\n-    )\n-    {\n-      this.delegate = delegate;\n-    }\n-\n-    @Override\n-    public int add(int in)\n-    {\n-      return delegate.add(-in);\n-    }\n-\n-    @JsonValue\n-    public AdditionInterface getDelegate()\n-    {\n-      return delegate;\n-    }\n-  }\n+    // [Issue#167]\n+    public void testPolymorphicSerdeWithDelegate() throws Exception\n+    {\n+\t    AdditionInterface adder = new AdditionInterfaceImpl(1);\n+\t\n+\t    assertEquals(2, adder.add(1));\n+\t    String json = MAPPER.writeValueAsString(adder);\n+\t    assertEquals(\"{\\\"boingo\\\":\\\"boopsy\\\",\\\"toAdd\\\":1}\", json);\n+\t    assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1));\n+\t\n+\t    adder = new NegatingAdditionInterface(adder);\n+\t    assertEquals(0, adder.add(1));\n+\t    json = MAPPER.writeValueAsString(adder);\n+\t    \n+\t    assertEquals(\"{\\\"boingo\\\":\\\"boopsy\\\",\\\"toAdd\\\":1}\", json);\n+\t    assertEquals(2, MAPPER.readValue(json, AdditionInterface.class).add(1));\n+    }\n+\n }", "timestamp": 1360803588, "metainfo": ""}