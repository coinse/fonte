{"sha": "1a7c6f905711ecf704576024dfead79aee47b320", "log": "javadoc cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy.java\n  * is used, which leaves field names as is, and removes set/get/is prefix\n  * from methods (as well as lower-cases initial sequence of capitalized\n  * characters).\n- * \n- * @since 1.8\n  */\n public abstract class PropertyNamingStrategy\n {\n      *   during serialization or deserialization\n      * @param ctorParam Constructor parameter used to pass property.\n      * @param defaultName Default name that would be used for property in absence of custom strategy\n-     * @since 1.9\n      */\n     public String nameForConstructorParameter(MapperConfig<?> config, AnnotatedParameter ctorParam,\n             String defaultName)\n     /**********************************************************\n      */\n     \n-    /**\n-     * @since 1.9\n-     */\n     public static abstract class PropertyNamingStrategyBase extends PropertyNamingStrategy\n     {\n         @Override\n \n     /**\n      * See {@link LowerCaseWithUnderscoresStrategy} for details.\n-     * \n-     * @since 1.9\n      */\n     public static final PropertyNamingStrategy CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES =\n         new LowerCaseWithUnderscoresStrategy();\n      * (the first of two underscores was removed)</li>\n      * <li>&quot;user__name&quot; is translated to &quot;user__name&quot;\n      * (unchanged, with two underscores)</li></ul>\n-     * \n-     * @since 1.9\n      */\n     public static class LowerCaseWithUnderscoresStrategy extends PropertyNamingStrategyBase\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonDeserialize.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonDeserialize.java\n      * of a Collection/array, values of Maps) of annotated property.\n      * Can only be used on instances (methods, fields, constructors),\n      * and not value classes themselves.\n-     *\n-     * @since 1.3\n      */\n     public Class<? extends JsonDeserializer<?>> contentUsing()\n         default JsonDeserializer.None.class;\n      * of annotated property.\n      * Can only be used on instances (methods, fields, constructors),\n      * and not value classes themselves.\n-     *\n-     * @since 1.3\n      */\n     public Class<? extends KeyDeserializer> keyUsing()\n         default KeyDeserializer.None.class;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n \n     /**\n      * As per [JACKSON-522], also need special handling for TimeZones\n-     * \n-     * @since 1.7.4\n      */\n     protected static class TimeZoneDeserializer\n         extends FromStringDeserializer<TimeZone>\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java\n  * Object[]), JSON objects to {@link java.util.Map}s, numbers to\n  * {@link java.lang.Number}s, booleans to {@link java.lang.Boolean}s and\n  * strings to {@link java.lang.String} (and nulls to nulls).\n- *\n- * @since 1.9 (moved from higher-level package)\n  */\n @JacksonStdImpl\n public class UntypedObjectDeserializer\n \n     /**\n      * Method called to map a JSON Array into a Java Object array (Object[]).\n-     * \n-     * @since 1.9\n      */\n     protected Object[] mapArrayToArray(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/package-info.java\n  * Note that since this package was only added relatively late\n  * in development cycle, not all classes that belong here are\n  * included. Plan is to move more classes over time.\n- * \n- * @since 1.9\n  */\n package com.fasterxml.jackson.databind.deser.std;\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n  * Container deserializers that handle \"core\" XML types: ones included in standard\n  * JDK 1.5. Types are directly needed by JAXB, and are thus supported within core\n  * mapper package, not in \"xc\" package.\n- *\n- * @since 1.3\n  */\n public class CoreXMLDeserializers\n     implements Provider<StdDeserializer<?>>\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java\n     /**********************************************************\n      */\n \n-    /**\n-     * @since 1.9\n-     */\n     public POJOPropertiesCollector collectProperties(MapperConfig<?> config,\n             JavaType type, MixInResolver r, boolean forSerialization)\n     {\n     /**\n      * Overridable method called for creating {@link POJOPropertiesCollector} instance\n      * to use; override is needed if a custom sub-class is to be used.\n-     * \n-     * @since 1.9\n      */\n     protected POJOPropertiesCollector constructPropertyCollector(MapperConfig<?> config,\n             AnnotatedClass ac, JavaType type,\n         return new POJOPropertiesCollector(config, forSerialization, type, ac);\n     }\n     \n-    /**\n-     * @since 1.9\n-     */\n     public AnnotatedClass classWithCreators(MapperConfig<?> config,\n             JavaType type, MixInResolver r)\n     {\n     /**\n      * Method called to see if type is one of core JDK types\n      * that we have cached for efficiency.\n-     * \n-     * @since 1.9\n      */\n     protected BasicBeanDescription _findCachedDesc(JavaType type)\n     {\n     /**\n      * Going forward, we will only do very minimal filtering;\n      * mostly just gets rid of static methods really.\n-     * \n-     * @since 1.9\n      */\n     private static class MinimalMethodFilter\n         implements MethodFilter\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n /**\n  * Helper class used for aggregating information about all possible\n  * properties of a POJO.\n- * \n- * @since 1.9\n  */\n public class POJOPropertiesCollector\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n      *     mapper.getVisibilityChecker().withVisibility(JsonMethod.FIELD, Visibility.ANY));\n      *</pre>\n      * (which would basically enable auto-detection for all member fields)\n-     *\n-     * @since 1.9\n      */\n     public T withVisibility(PropertyAccessor method, Visibility v);\n     \n \t * properties.\n \t * \n \t * @param v level to use for all property types\n-\t * \n-\t * @since 1.9\n \t */\n         public Std(Visibility v)\n         {\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n public class TypeNameIdResolver\n     extends TypeIdResolverBase\n {\n-    /**\n-     * @since 1.8\n-     */\n     protected final MapperConfig<?> _config;\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/package-info.java\n  * {@link com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder}\n  * and\n  * {@link com.fasterxml.jackson.databind.jsontype.TypeIdResolver}.\n- *\n- * @since 1.5\n  */\n package com.fasterxml.jackson.databind.jsontype.impl;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/package-info.java\n  * This is needed for complete handling of polymorphic types, where\n  * actual type can not be determined statically (declared type is\n  * a supertype of actual polymorphic serialized types).\n- *\n- * @since 1.5\n  */\n package com.fasterxml.jackson.databind.jsontype;\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java\n  * Can also be used as an alternative to per-class annotations when defining\n  * concrete implementations; however, only works with abstract types (since\n  * this is only called for abstract types)\n- *\n- * @since 1.8\n  */\n public class SimpleAbstractTypeResolver extends AbstractTypeResolver\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n  *<p>\n  * Unlike {@link SimpleSerializers}, this class does not currently support generic mappings;\n  * all mappings must be to exact declared deserialization type.\n- * \n- * @since 1.7\n  */\n public class SimpleDeserializers implements Deserializers\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n  *<p>\n  * Unlike {@link SimpleSerializers}, this class does not currently support generic mappings;\n  * all mappings must be to exact declared deserialization type.\n- * \n- * @since 1.7\n  */\n public class SimpleKeyDeserializers implements KeyDeserializers\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n      * Method for removing all children container has (if any)\n      *\n      * @return Container node itself (to allow method call chaining)\n-     *\n-     * @since 1.3\n      */\n     public abstract ContainerNode removeAll();\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/JsonSerializerMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/JsonSerializerMap.java\n \n /**\n  * Specialized read-only map used for storing and accessing serializers by type.\n- * \n- * @since 1.7\n  */\n public class JsonSerializerMap\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n         jgen.writeEndObject();\n     }\n \n-    // since 1.6.2; needed to retain type information\n     @Override\n     public final void serializeWithType(Object value, JsonGenerator jgen, SerializerProvider provider,\n             TypeSerializer typeSer)", "timestamp": 1327266180, "metainfo": ""}