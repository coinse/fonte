{"sha": "43abc3b696bfbc194f5e43825de32b13deb50040", "log": "...", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n     extends BaseTest\n {\n     private final static Object SINGLETON_OBJECT = new Object();\n-\n+    \n     /*\n     /**********************************************************\n     /* Shared helper classes\n     /**********************************************************\n      */\n \n+    private final static ObjectMapper SHARED_MAPPER = new ObjectMapper();\n+\n+    protected ObjectReader objectReader() {\n+        return SHARED_MAPPER.reader();\n+    }\n+\n+    protected ObjectWriter objectWriter() {\n+        return SHARED_MAPPER.writer();\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Additional assert methods\n+    /**********************************************************\n+     */\n+\n     protected void assertEquals(int[] exp, int[] act)\n     {\n         assertArrayEquals(exp, act);\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestAnyGetter.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+\n+public class TestAnyGetter\n+    extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Helper bean classes\n+    /**********************************************************\n+     */\n+\n+    static class Bean\n+    {\n+        final static Map<String,Boolean> extra = new HashMap<String,Boolean>();\n+        static {\n+            extra.put(\"a\", Boolean.TRUE);\n+        }\n+        \n+        public int getX() { return 3; }\n+\n+        @JsonAnyGetter\n+        public Map<String,Boolean> getExtra() { return extra; }\n+    }\n+\n+    static class AnyOnlyBean\n+    {\n+        @JsonAnyGetter\n+        public Map<String,Integer> any() {\n+            HashMap<String,Integer> map = new HashMap<String,Integer>();\n+            map.put(\"a\", 3);\n+            return map;\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test cases\n+    /**********************************************************\n+     */\n+\n+    public void testSimpleJsonValue() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        String json = serializeAsString(m, new Bean());\n+        Map<?,?> map = m.readValue(json, Map.class);\n+        assertEquals(2, map.size());\n+        assertEquals(Integer.valueOf(3), map.get(\"x\"));\n+        assertEquals(Boolean.TRUE, map.get(\"a\"));\n+    }\n+\n+    // [JACKSON-392]\n+    public void testAnyOnly() throws Exception\n+    {\n+        ObjectMapper m;\n+\n+        // First, with normal fail settings:\n+        m = new ObjectMapper();\n+        m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true);\n+        String json = serializeAsString(m, new AnyOnlyBean());\n+        assertEquals(\"{\\\"a\\\":3}\", json);\n+\n+        // then without fail\n+        m = new ObjectMapper();\n+        m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);\n+        json = serializeAsString(m, new AnyOnlyBean());\n+        assertEquals(\"{\\\"a\\\":3}\", json);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonRawValue.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * This unit test suite tests functioning of {@link JsonRawValue}\n+ * annotation with bean serialization.\n+ */\n+public class TestJsonRawValue\n+    extends com.fasterxml.jackson.databind.BaseMapTest\n+{\n+    /*\n+    /*********************************************************\n+    /* Helper bean classes\n+    /*********************************************************\n+     */\n+\n+    /// Class for testing {@link JsonRawValue} annotations with getters returning String\n+    @JsonPropertyOrder(alphabetic=true)\n+    final static class ClassGetter<T>\n+    {\n+    \tprivate final T _value;\n+    \t\n+        private ClassGetter(T value) { _value = value;}\n+ \n+        public T getNonRaw() { return _value; }\n+\n+        @JsonProperty(\"raw\") @JsonRawValue public T foobar() { return _value; }\n+        \n+        @JsonProperty @JsonRawValue protected T value() { return _value; }\n+    }\n+    \n+    /*\n+    /*********************************************************\n+    /* Test cases\n+    /*********************************************************\n+     */\n+\n+    public void testSimpleStringGetter() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        String value = \"abc\";\n+        String result = m.writeValueAsString(new ClassGetter<String>(value));\n+        String expected = String.format(\"{\\\"nonRaw\\\":\\\"%s\\\",\\\"raw\\\":%s,\\\"value\\\":%s}\", value, value, value);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testSimpleNonStringGetter() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        int value = 123;\n+        String result = m.writeValueAsString(new ClassGetter<Integer>(value));\n+        String expected = String.format(\"{\\\"nonRaw\\\":%d,\\\"raw\\\":%d,\\\"value\\\":%d}\", value, value, value);\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testNullStringGetter() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        String result = m.writeValueAsString(new ClassGetter<String>(null));\n+        String expected = \"{\\\"nonRaw\\\":null,\\\"raw\\\":null,\\\"value\\\":null}\";\n+        assertEquals(expected, result);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+/**\n+ * This unit test suite tests use of @JsonClass Annotation\n+ * with bean serialization.\n+ */\n+public class TestJsonSerialize\n+    extends BaseMapTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Annotated helper classes\n+    /**********************************************************\n+     */\n+\n+    interface ValueInterface {\n+        public int getX();\n+    }\n+\n+    static class ValueClass\n+        implements ValueInterface\n+    {\n+        @Override\n+        public int getX() { return 3; }\n+        public int getY() { return 5; }\n+    }\n+\n+    /**\n+     * Test class to verify that <code>JsonSerialize.as</code>\n+     * works as expected\n+     */\n+    static class WrapperClassForAs\n+    {\n+        @JsonSerialize(as=ValueInterface.class)\n+        public ValueClass getValue() {\n+            return new ValueClass();\n+        }\n+    }\n+\n+    // This should indicate that static type be used for all fields\n+    @JsonSerialize(typing=JsonSerialize.Typing.STATIC)\n+    static class WrapperClassForStaticTyping\n+    {\n+        public ValueInterface getValue() {\n+            return new ValueClass();\n+        }\n+    }\n+\n+    static class WrapperClassForStaticTyping2\n+    {\n+        @JsonSerialize(typing=JsonSerialize.Typing.STATIC)\n+        public ValueInterface getStaticValue() {\n+            return new ValueClass();\n+        }\n+\n+        @JsonSerialize(typing=JsonSerialize.Typing.DYNAMIC)\n+        public ValueInterface getDynamicValue() {\n+            return new ValueClass();\n+        }\n+    }\n+\n+    /**\n+     * Test bean that has an invalid {@link JsonClass} annotation.\n+     */\n+    static class BrokenClass\n+    {\n+        // invalid annotation: String not a supertype of Long\n+        @JsonSerialize(as=String.class)\n+        public Long getValue() {\n+            return Long.valueOf(4L);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class ValueMap extends HashMap<String,ValueInterface> { }\n+    @SuppressWarnings(\"serial\")\n+    static class ValueList extends ArrayList<ValueInterface> { }\n+    @SuppressWarnings(\"serial\")\n+    static class ValueLinkedList extends LinkedList<ValueInterface> { }\n+    \n+    // Classes for [JACKSON-294]\n+    @SuppressWarnings(\"unused\")\n+    static class Foo294\n+    {\n+        @JsonProperty private String id;\n+        @JsonSerialize(using = Bar294Serializer.class)\n+        private Bar294 bar;\n+\n+        public Foo294() { }\n+        public Foo294(String id, String id2) {\n+            this.id = id;\n+            bar = new Bar294(id2);\n+        }\n+    }\n+\n+    static class Bar294{\n+        @JsonProperty private String id;\n+        @JsonProperty private String name;\n+\n+        public Bar294() { }\n+        public Bar294(String id) {\n+            this.id = id;\n+        }\n+\n+        public String getId() { return id; }\n+        public String getName() { return name; }\n+    }\n+\n+    static class Bar294Serializer extends JsonSerializer<Bar294>\n+    {\n+        @Override\n+        public void serialize(Bar294 bar, JsonGenerator jgen,\n+            SerializerProvider provider) throws IOException\n+        {\n+            jgen.writeString(bar.id);\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Main tests\n+    /**********************************************************\n+     */\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSimpleValueDefinition() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        Map<String,Object> result = writeAndMap(m, new WrapperClassForAs());\n+        assertEquals(1, result.size());\n+        Object ob = result.get(\"value\");\n+        // Should see only \"x\", not \"y\"\n+        result = (Map<String,Object>) ob;\n+        assertEquals(1, result.size());\n+        assertEquals(Integer.valueOf(3), result.get(\"x\"));\n+    }\n+\n+    public void testBrokenAnnotation() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        try {\n+            serializeAsString(m, new BrokenClass());\n+        } catch (Exception e) {\n+            verifyException(e, \"not a super-type of\");\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testStaticTypingForClass() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        Map<String,Object> result = writeAndMap(m, new WrapperClassForStaticTyping());\n+        assertEquals(1, result.size());\n+        Object ob = result.get(\"value\");\n+        // Should see only \"x\", not \"y\"\n+        result = (Map<String,Object>) ob;\n+        assertEquals(1, result.size());\n+        assertEquals(Integer.valueOf(3), result.get(\"x\"));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public void testMixedTypingForClass() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        Map<String,Object> result = writeAndMap(m, new WrapperClassForStaticTyping2());\n+        assertEquals(2, result.size());\n+\n+        Object obStatic = result.get(\"staticValue\");\n+        // Should see only \"x\", not \"y\"\n+        Map<String,Object> stat = (Map<String,Object>) obStatic;\n+        assertEquals(1, stat.size());\n+        assertEquals(Integer.valueOf(3), stat.get(\"x\"));\n+\n+        Object obDynamic = result.get(\"dynamicValue\");\n+        // Should see both\n+        Map<String,Object> dyn = (Map<String,Object>) obDynamic;\n+        assertEquals(2, dyn.size());\n+        assertEquals(Integer.valueOf(3), dyn.get(\"x\"));\n+        assertEquals(Integer.valueOf(5), dyn.get(\"y\"));\n+    }\n+\n+    public void testStaticTypingWithMap() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        m.configure(MapperFeature.USE_STATIC_TYPING, true);\n+        ValueMap map = new ValueMap();\n+        map.put(\"a\", new ValueClass());\n+        assertEquals(\"{\\\"a\\\":{\\\"x\\\":3}}\", serializeAsString(m, map));\n+    }\n+\n+    public void testStaticTypingWithArrayList() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        m.configure(MapperFeature.USE_STATIC_TYPING, true);\n+        ValueList list = new ValueList();\n+        list.add(new ValueClass());\n+        assertEquals(\"[{\\\"x\\\":3}]\", m.writeValueAsString(list));\n+    }\n+\n+    public void testStaticTypingWithLinkedList() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        m.configure(MapperFeature.USE_STATIC_TYPING, true);\n+        ValueLinkedList list = new ValueLinkedList();\n+        list.add(new ValueClass());\n+        assertEquals(\"[{\\\"x\\\":3}]\", serializeAsString(m, list));\n+    }\n+    \n+    public void testStaticTypingWithArray() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        m.configure(MapperFeature.USE_STATIC_TYPING, true);\n+        ValueInterface[] array = new ValueInterface[] { new ValueClass() };\n+        assertEquals(\"[{\\\"x\\\":3}]\", serializeAsString(m, array));\n+    }\n+\n+    public void testProblem294() throws Exception\n+    {\n+        assertEquals(\"{\\\"id\\\":\\\"fooId\\\",\\\"bar\\\":\\\"barId\\\"}\",\n+                new ObjectMapper().writeValueAsString(new Foo294(\"fooId\", \"barId\")));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize2.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.NullSerializer;\n+\n+@SuppressWarnings(\"serial\")\n+public class TestJsonSerialize2\n+    extends BaseMapTest\n+{\n+    // [JACKSON-480]\n+\n+    static class SimpleKey {\n+        protected final String key;\n+        \n+        public SimpleKey(String str) { key = str; }\n+        \n+        @Override public String toString() { return \"toString:\"+key; }\n+    }\n+\n+    static class SimpleValue {\n+        public final String value;\n+        \n+        public SimpleValue(String str) { value = str; }\n+    }\n+\n+    @JsonPropertyOrder({\"value\", \"value2\"})\n+    static class ActualValue extends SimpleValue\n+    {\n+        public final String other = \"123\";\n+        \n+        public ActualValue(String str) { super(str); }\n+    }\n+\n+    static class SimpleKeySerializer extends JsonSerializer<SimpleKey> {\n+        @Override\n+        public void serialize(SimpleKey key, JsonGenerator jgen, SerializerProvider provider)\n+            throws IOException, JsonProcessingException {\n+            jgen.writeFieldName(\"key \"+key.key);\n+        }\n+    }\n+\n+    static class SimpleValueSerializer extends JsonSerializer<SimpleValue> {\n+        @Override\n+        public void serialize(SimpleValue value, JsonGenerator jgen, SerializerProvider provider)\n+            throws IOException, JsonProcessingException {\n+            jgen.writeString(\"value \"+value.value);\n+        }\n+    }\n+\n+    @JsonSerialize(contentAs=SimpleValue.class)\n+    static class SimpleValueList extends ArrayList<ActualValue> { }\n+\n+    @JsonSerialize(contentAs=SimpleValue.class)\n+    static class SimpleValueMap extends HashMap<SimpleKey, ActualValue> { }\n+\n+    @JsonSerialize(contentUsing=SimpleValueSerializer.class)\n+    static class SimpleValueListWithSerializer extends ArrayList<ActualValue> { }\n+\n+    @JsonSerialize(keyUsing=SimpleKeySerializer.class, contentUsing=SimpleValueSerializer.class)\n+    static class SimpleValueMapWithSerializer extends HashMap<SimpleKey, ActualValue> { }\n+    \n+    static class ListWrapperSimple\n+    {\n+        @JsonSerialize(contentAs=SimpleValue.class)\n+        public final ArrayList<ActualValue> values = new ArrayList<ActualValue>();\n+        \n+        public ListWrapperSimple(String value) {\n+            values.add(new ActualValue(value));\n+        }\n+    }\n+\n+    static class ListWrapperWithSerializer\n+    {\n+        @JsonSerialize(contentUsing=SimpleValueSerializer.class)\n+        public final ArrayList<ActualValue> values = new ArrayList<ActualValue>();\n+        \n+        public ListWrapperWithSerializer(String value) {\n+            values.add(new ActualValue(value));\n+        }\n+    }\n+    \n+    static class MapWrapperSimple\n+    {\n+        @JsonSerialize(contentAs=SimpleValue.class)\n+        public final HashMap<SimpleKey, ActualValue> values = new HashMap<SimpleKey, ActualValue>();\n+        \n+        public MapWrapperSimple(String key, String value) {\n+            values.put(new SimpleKey(key), new ActualValue(value));\n+        }\n+    }\n+\n+    static class MapWrapperWithSerializer\n+    {\n+        @JsonSerialize(keyUsing=SimpleKeySerializer.class, contentUsing=SimpleValueSerializer.class)\n+        public final HashMap<SimpleKey, ActualValue> values = new HashMap<SimpleKey, ActualValue>();\n+        \n+        public MapWrapperWithSerializer(String key, String value) {\n+            values.put(new SimpleKey(key), new ActualValue(value));\n+        }\n+    }\n+\n+    static class NullBean\n+    {\n+        @JsonSerialize(using=NullSerializer.class)\n+        public String value = \"abc\";\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    // [JACKSON-480], test value annotation applied to List value class\n+    public void testSerializedAsListWithClassAnnotations() throws IOException\n+    {\n+        SimpleValueList list = new SimpleValueList();\n+        list.add(new ActualValue(\"foo\"));\n+        assertEquals(\"[{\\\"value\\\":\\\"foo\\\"}]\", MAPPER.writeValueAsString(list));\n+    }\n+\n+    // [JACKSON-480], test value annotation applied to Map value class\n+    public void testSerializedAsMapWithClassAnnotations() throws IOException\n+    {\n+        SimpleValueMap map = new SimpleValueMap();\n+        map.put(new SimpleKey(\"x\"), new ActualValue(\"y\"));\n+        assertEquals(\"{\\\"toString:x\\\":{\\\"value\\\":\\\"y\\\"}}\", MAPPER.writeValueAsString(map));\n+    }\n+\n+    // [JACKSON-480], test Serialization annotation with List\n+    public void testSerializedAsListWithClassSerializer() throws IOException\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        SimpleValueListWithSerializer list = new SimpleValueListWithSerializer();\n+        list.add(new ActualValue(\"foo\"));\n+        assertEquals(\"[\\\"value foo\\\"]\", m.writeValueAsString(list));\n+    }\n+\n+    // [JACKSON-480], test Serialization annotation with Map\n+    public void testSerializedAsMapWithClassSerializer() throws IOException\n+    {\n+        SimpleValueMapWithSerializer map = new SimpleValueMapWithSerializer();\n+        map.put(new SimpleKey(\"abc\"), new ActualValue(\"123\"));\n+        assertEquals(\"{\\\"key abc\\\":\\\"value 123\\\"}\", MAPPER.writeValueAsString(map));\n+    }\n+    \n+    // [JACKSON-480], test annotations when applied to List property (getter, setter)\n+    public void testSerializedAsListWithPropertyAnnotations() throws IOException\n+    {\n+        ListWrapperSimple input = new ListWrapperSimple(\"bar\");\n+        assertEquals(\"{\\\"values\\\":[{\\\"value\\\":\\\"bar\\\"}]}\", MAPPER.writeValueAsString(input));\n+    }\n+\n+    public void testSerializedAsListWithPropertyAnnotations2() throws IOException\n+    {\n+        ListWrapperWithSerializer input = new ListWrapperWithSerializer(\"abc\");\n+        assertEquals(\"{\\\"values\\\":[\\\"value abc\\\"]}\", MAPPER.writeValueAsString(input));\n+    }\n+    \n+    // [JACKSON-480], test annotations when applied to Map property (getter, setter)\n+    public void testSerializedAsMapWithPropertyAnnotations() throws IOException\n+    {\n+        MapWrapperSimple input = new MapWrapperSimple(\"a\", \"b\");\n+        assertEquals(\"{\\\"values\\\":{\\\"toString:a\\\":{\\\"value\\\":\\\"b\\\"}}}\", MAPPER.writeValueAsString(input));\n+    }\n+\n+    public void testSerializedAsMapWithPropertyAnnotations2() throws IOException\n+    {\n+        MapWrapperWithSerializer input = new MapWrapperWithSerializer(\"foo\", \"b\");\n+        assertEquals(\"{\\\"values\\\":{\\\"key foo\\\":\\\"value b\\\"}}\", MAPPER.writeValueAsString(input));\n+    }\n+\n+    // [JACKSON-602]: Include.NON_EMPTY\n+    public void testEmptyInclusion() throws IOException\n+    {\n+        ObjectMapper defMapper = MAPPER;\n+        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);\n+\n+        StringWrapper str = new StringWrapper(\"\");\n+        assertEquals(\"{\\\"str\\\":\\\"\\\"}\", defMapper.writeValueAsString(str));\n+        assertEquals(\"{}\", inclMapper.writeValueAsString(str));\n+        assertEquals(\"{}\", inclMapper.writeValueAsString(new StringWrapper()));\n+\n+        ListWrapper<String> list = new ListWrapper<String>();\n+        assertEquals(\"{\\\"list\\\":[]}\", defMapper.writeValueAsString(list));\n+        assertEquals(\"{}\", inclMapper.writeValueAsString(list));\n+        assertEquals(\"{}\", inclMapper.writeValueAsString(new ListWrapper<String>()));\n+\n+        MapWrapper<String,Integer> map = new MapWrapper<String,Integer>(new HashMap<String,Integer>());\n+        assertEquals(\"{\\\"map\\\":{}}\", defMapper.writeValueAsString(map));\n+        assertEquals(\"{}\", inclMapper.writeValueAsString(map));\n+        assertEquals(\"{}\", inclMapper.writeValueAsString(new MapWrapper<String,Integer>(null)));\n+\n+        ArrayWrapper<Integer> array = new ArrayWrapper<Integer>(new Integer[0]);\n+        assertEquals(\"{\\\"array\\\":[]}\", defMapper.writeValueAsString(array));\n+        assertEquals(\"{}\", inclMapper.writeValueAsString(array));\n+        assertEquals(\"{}\", inclMapper.writeValueAsString(new ArrayWrapper<Integer>(null)));\n+    }\n+\n+    // [JACKSON-699]\n+    public void testNullSerializer() throws Exception\n+    {\n+        String json = MAPPER.writeValueAsString(new NullBean());\n+        assertEquals(\"{\\\"value\\\":null}\", json);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+public class TestJsonSerializeAs extends BaseMapTest\n+{\n+    // [JACKSON-799] stuff:\n+    \n+    public interface Fooable {\n+        public int getFoo();\n+    }\n+\n+    // force use of interface\n+    @JsonSerialize(as=Fooable.class)\n+    public static class FooImpl implements Fooable {\n+        public int getFoo() { return 42; }\n+        public int getBar() { return 15; }\n+    }\n+\n+    public class Fooables {\n+        public FooImpl[] getFoos() {\n+            return new FooImpl[] { new FooImpl() };\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    private final ObjectWriter WRITER = objectWriter();\n+    \n+    // [JACKSON-799]\n+    public void testSerializeAsInClass() throws IOException\n+    {\n+        assertEquals(\"{\\\"foo\\\":42}\", WRITER.writeValueAsString(new FooImpl()));\n+    }\n+\n+    public void testSerializeAsForArrayProp() throws IOException\n+    {\n+        assertEquals(\"[{\\\"foo\\\":42}]\", WRITER.writeValueAsString(new Fooables()));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonValue.java\n+package com.fasterxml.jackson.databind.ser;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\n+\n+/**\n+ * This unit test suite tests functioning of {@link JsonValue}\n+ * annotation with bean serialization.\n+ */\n+public class TestJsonValue\n+    extends BaseMapTest\n+{\n+    /*\n+    /*********************************************************\n+    /* Helper bean classes\n+    /*********************************************************\n+     */\n+\n+    static class ValueClass<T>\n+    {\n+        final T _value;\n+\n+        public ValueClass(T v) { _value = v; }\n+\n+        @JsonValue T value() { return _value; }\n+\n+        // shouldn't need this, but may be useful for troubleshooting:\n+        @Override\n+        public String toString() { return \"???\"; }\n+    }\n+\n+    /**\n+     * Another test class to check that it is also possible to\n+     * force specific serializer to use with @JsonValue annotated\n+     * method. Difference is between Integer serialization, and\n+     * conversion to a Json String.\n+     */\n+    final static class ToStringValueClass<T>\n+        extends ValueClass<T>\n+    {\n+        public ToStringValueClass(T value) { super(value); }\n+\n+        // Also, need to use this annotation to help\n+        @JsonSerialize(using=ToStringSerializer.class)\n+        @Override\n+        @JsonValue T value() { return super.value(); }\n+    }\n+\n+    final static class ToStringValueClass2\n+        extends ValueClass<String>\n+    {\n+        public ToStringValueClass2(String value) { super(value); }\n+\n+        /* Simple as well, but let's ensure that other getters won't matter...\n+         */\n+\n+        @JsonProperty int getFoobar() { return 4; }\n+\n+        public String[] getSomethingElse() { return new String[] { \"1\", \"a\" }; }\n+    }\n+\n+    static class ValueBase {\n+        public String a = \"a\";\n+    }\n+\n+    static class ValueType extends ValueBase {\n+        public String b = \"b\";\n+    }\n+    \n+    // Finally, let's also test static vs dynamic type\n+    static class ValueWrapper {\n+        @JsonValue\n+        public ValueBase getX() { return new ValueType(); }\n+    }\n+\n+    static class MapBean\n+    {\n+        @JsonValue\n+        public Map<String,String> toMap()\n+        {\n+            HashMap<String,String> map = new HashMap<String,String>();\n+            map.put(\"a\", \"1\");\n+            return map;\n+        }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class MapAsNumber extends HashMap<String,String>\n+    {\n+        @JsonValue\n+        public int value() { return 42; }\n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class ListAsNumber extends ArrayList<Integer>\n+    {\n+        @JsonValue\n+        public int value() { return 13; }\n+    }\n+    \n+    /*\n+    /*********************************************************\n+    /* Test cases\n+    /*********************************************************\n+     */\n+\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    public void testSimpleJsonValue() throws Exception\n+    {\n+        String result = MAPPER.writeValueAsString(new ValueClass<String>(\"abc\"));\n+        assertEquals(\"\\\"abc\\\"\", result);\n+    }\n+\n+    public void testJsonValueWithUseSerializer() throws Exception\n+    {\n+        String result = serializeAsString(MAPPER, new ToStringValueClass<Integer>(Integer.valueOf(123)));\n+        assertEquals(\"\\\"123\\\"\", result);\n+    }\n+\n+    /**\n+     * Test for verifying that additional getters won't confuse serializer.\n+     */\n+    public void testMixedJsonValue() throws Exception\n+    {\n+        String result = serializeAsString(MAPPER, new ToStringValueClass2(\"xyz\"));\n+        assertEquals(\"\\\"xyz\\\"\", result);\n+    }\n+\n+    public void testValueWithStaticType() throws Exception\n+    {\n+        // Ok; first, with dynamic type:\n+        assertEquals(\"{\\\"a\\\":\\\"a\\\",\\\"b\\\":\\\"b\\\"}\", MAPPER.writeValueAsString(new ValueWrapper()));\n+\n+        // then static\n+        ObjectMapper staticMapper = new ObjectMapper();\n+        staticMapper.configure(MapperFeature.USE_STATIC_TYPING, true);\n+        assertEquals(\"{\\\"a\\\":\\\"a\\\"}\", staticMapper.writeValueAsString(new ValueWrapper()));\n+    }\n+\n+    public void testMapWithJsonValue() throws Exception {\n+        assertEquals(\"{\\\"a\\\":\\\"1\\\"}\", MAPPER.writeValueAsString(new MapBean()));\n+    }\n+\n+    public void testWithMap() throws Exception {\n+        assertEquals(\"42\", MAPPER.writeValueAsString(new MapAsNumber()));\n+\n+    }\n+\n+    public void testWithList() throws Exception {\n+        assertEquals(\"13\", MAPPER.writeValueAsString(new ListAsNumber()));\n+    }\n+}", "timestamp": 1331343634, "metainfo": ""}