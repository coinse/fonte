{"sha": "71e876b3bc3cceec1ac5934840edf7fc1b8ce4fb", "log": "Bit more refactoring to hide \"ObjectMapper-only\" methods from SerializerProvider, DeserializationContext", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n  * is registered with {@link ObjectMapper} (and {@link ObjectReader},\n  * and when an actual instance is needed for deserialization,\n  * a fully configured instance will\n- * be created using {@link #createInstance}.\n+ * be created using a method in excented API of sub-class\n+ * ({@link com.fasterxml.jackson.databind.deser.DefaultDeserializationContext#createInstance}).\n  * Each instance is guaranteed to only be used from single-threaded context;\n  * instances may be reused iff no configuration has changed.\n  *<p>\n     /**********************************************************\n      */\n     \n+    /**\n+     * Object that handle details of {@link JsonDeserializer} caching.\n+     */\n     protected final DeserializerCache _cache;\n \n     /*\n     /*\n     /**********************************************************\n     /* Configuration that gets set for instances (not blueprints)\n-    /**********************************************************\n-     */\n-\n+    /* (partly denormalized for performance)\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Generic deserialization processing configuration\n+     */\n     protected final DeserializationConfig _config;\n-    \n+\n+    /**\n+     * Bitmap of {@link DeserializationFeature}s that are enabled\n+     */\n     protected final int _featureFlags;\n \n+    /**\n+     * Currently active view, if any.\n+     */\n     protected final Class<?> _view;\n \n     /**\n      */\n     protected JsonParser _parser;\n     \n+    /**\n+     * Object used for resolving references to injectable\n+     * values.\n+     */\n     protected final InjectableValues _injectableValues;\n     \n     /*\n         _parser = jp;\n         _injectableValues = injectableValues;\n     }\n-\n-    /**\n-     * Fluent factory method used for constructing a blueprint instance\n-     * with different factory\n-     */\n-    public abstract DeserializationContext with(DeserializerFactory factory);\n-    \n-    /**\n-     * Method called to create actual usable per-deserialization\n-     * context instance.\n-     */\n-    public abstract DeserializationContext createInstance(DeserializationConfig config,\n-            JsonParser jp, InjectableValues values);\n     \n     /*\n     /**********************************************************\n         if (deser instanceof ResolvableDeserializer) {\n             ((ResolvableDeserializer) deser).resolve(this);\n         }\n-        /*\n-        // Second: contextualize:\n-        if (deser instanceof ContextualKeyDeserializer) {\n-            deser = ((ContextualKeyDeserializer) deser).createContextual(this, property);\n-        }\n-        */\n         return deser;\n     }\n     \n         }\n         return desc;\n     }\n-\n-    /*\n-    /**********************************************************\n-    /* Helper classes\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Standard implementation, used if no custom context is\n-     * implemented.\n-     */\n-    public final static class Std extends DeserializationContext\n-    {\n-        /**\n-         * Default constructor for a blueprint object, which will use the standard\n-         * {@link DeserializerCache}, given factory.\n-         */\n-        public Std(DeserializerFactory df) {\n-            this(df, null);\n-        }\n-\n-        /**\n-         * Constructor that will pass specified deserializer factory and\n-         * cache: cache may be null (in which case default implementation\n-         * will be used), factory can not be null\n-         */\n-        public Std(DeserializerFactory df, DeserializerCache cache) {\n-            super(df, cache);\n-        }\n-        \n-        protected Std(Std src, DeserializationConfig config,\n-                JsonParser jp, InjectableValues values) {\n-            super(src, config, jp, values);\n-        }\n-\n-        protected Std(Std src, DeserializerFactory factory) {\n-            super(src, factory);\n-        }\n-        \n-        @Override\n-        public Std createInstance(DeserializationConfig config,\n-                JsonParser jp, InjectableValues values) {\n-            return new Std(this, config, jp, values);\n-        }\n-\n-        @Override\n-        public Std with(DeserializerFactory factory) {\n-            return new Std(this, factory);\n-        }\n-    \n-    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * sub-classes. Contains references to objects needed for\n      * deserialization construction (cache, factory).\n      */\n-    protected DeserializationContext _deserializationContext;\n+    protected DefaultDeserializationContext _deserializationContext;\n \n     /*\n     /**********************************************************\n      *    {@link DeserializationContext}\n      */\n     public ObjectMapper(JsonFactory jf,\n-            DefaultSerializerProvider sp, DeserializationContext dc)\n+            DefaultSerializerProvider sp, DefaultDeserializationContext dc)\n     {\n         /* 02-Mar-2009, tatu: Important: we MUST default to using\n          *   the mapping factory, otherwise tree serialization will\n                     _subtypeResolver, _mixInAnnotations);\n         _serializerProvider = (sp == null) ? new DefaultSerializerProvider.Impl() : sp;\n         _deserializationContext = (dc == null) ?\n-                new DeserializationContext.Std(BeanDeserializerFactory.instance) : dc;\n+                new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance) : dc;\n \n         // Default serializer factory is stateless, can just assign\n         _serializerFactory = BeanSerializerFactory.instance;\n      * for deserializing a single root value.\n      * Can be overridden if a custom context is needed.\n      */\n-    protected final DeserializationContext createDeserializationContext(JsonParser jp,\n+    protected final DefaultDeserializationContext createDeserializationContext(JsonParser jp,\n             DeserializationConfig cfg)\n     {\n         return _deserializationContext.createInstance(cfg,\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n import com.fasterxml.jackson.core.type.TypeReference;\n \n import com.fasterxml.jackson.databind.cfg.DatabindVersion;\n+import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.node.NullNode;\n import com.fasterxml.jackson.databind.node.TreeTraversingParser;\n      * Blueprint instance of deserialization context; used for creating\n      * actual instance when needed.\n      */\n-    protected final DeserializationContext _context;\n+    protected final DefaultDeserializationContext _context;\n \n     /**\n      * Factory used for constructing {@link JsonGenerator}s\n      * for deserializing a single root value.\n      * Can be overridden if a custom context is needed.\n      */\n-    protected final DeserializationContext createDeserializationContext(JsonParser jp,\n+    protected final DefaultDeserializationContext createDeserializationContext(JsonParser jp,\n             DeserializationConfig cfg) {\n         // 04-Jan-2010, tatu: we do actually need the provider too... (for polymorphic deser)\n         return _context.createInstance(cfg, jp, _injectableValues);\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Default {@link DeserializationContext} implementation that adds\n+ * extended API for {@link ObjectMapper} (and {@link ObjectReader})\n+ * to call, as well as implements certain parts that base class\n+ * has left abstract.\n+ */\n+public abstract class DefaultDeserializationContext\n+    extends DeserializationContext\n+{\n+    /**\n+     * Constructor that will pass specified deserializer factory and\n+     * cache: cache may be null (in which case default implementation\n+     * will be used), factory can not be null\n+     */\n+    protected DefaultDeserializationContext(DeserializerFactory df, DeserializerCache cache) {\n+        super(df, cache);\n+    }\n+    \n+    protected DefaultDeserializationContext(DefaultDeserializationContext src,\n+            DeserializationConfig config, JsonParser jp, InjectableValues values) {\n+        super(src, config, jp, values);\n+    }\n+\n+    protected DefaultDeserializationContext(DefaultDeserializationContext src,\n+            DeserializerFactory factory) {\n+        super(src, factory);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Extended API\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Fluent factory method used for constructing a blueprint instance\n+     * with different factory\n+     */\n+    public abstract DefaultDeserializationContext with(DeserializerFactory factory);\n+    \n+    /**\n+     * Method called to create actual usable per-deserialization\n+     * context instance.\n+     */\n+    public abstract DefaultDeserializationContext createInstance(\n+            DeserializationConfig config, JsonParser jp, InjectableValues values);\n+    \n+    /*\n+    /**********************************************************\n+    /* And then the concrete implementation class\n+    /**********************************************************\n+     */\n+\n+    public final static class Impl extends DefaultDeserializationContext\n+    {\n+        /**\n+         * Default constructor for a blueprint object, which will use the standard\n+         * {@link DeserializerCache}, given factory.\n+         */\n+        public Impl(DeserializerFactory df) {\n+            super(df, null);\n+        }\n+\n+        protected Impl(Impl src,\n+                DeserializationConfig config, JsonParser jp, InjectableValues values) {\n+            super(src, config, jp, values);\n+        }\n+\n+        protected Impl(Impl src, DeserializerFactory factory) {\n+            super(src, factory);\n+        }\n+        \n+        @Override\n+        public DefaultDeserializationContext createInstance(DeserializationConfig config,\n+                JsonParser jp, InjectableValues values) {\n+            return new Impl(this, config, jp, values);\n+        }\n+\n+        @Override\n+        public DefaultDeserializationContext with(DeserializerFactory factory) {\n+            return new Impl(this, factory);\n+        }        \n+    }\n+}", "timestamp": 1328498148, "metainfo": ""}