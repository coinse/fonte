{"sha": "5e799a2e2265cbb6a056b37b50f82cc1eebf1d45", "log": "Fix #570", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java\n      * JDK date parsing is awfully brittle, and ISO-8601 is quite\n      * permissive. The two don't mix, need to write a better one.\n      */\n+    // 02-Oct-2014, tatu: Alas. While spit'n'polished a few times, still\n+    //   not really robust\n \n     /**\n      * Defines a commonly used date format that conforms\n                     // let's just append '00'\n                     dateStr += \"00\";\n                 }\n-                // [JACKSON-334]: may be missing milliseconds... if so, add\n+                // Milliseconds partial or missing; and even seconds are optional\n                 len = dateStr.length();\n-                // '+0000' (5 chars); should come after '.000' (4 chars) of milliseconds, so:\n-                c = dateStr.charAt(len-9);\n-                if (Character.isDigit(c)) {\n+                // remove 'T', '+'/'-' and 4-digit timezone-offset\n+                int timeLen = len - dateStr.lastIndexOf('T') - 6;\n+                if (timeLen < 12) { // 8 for hh:mm:ss, 4 for .sss\n+                    int offset = len - 5; // insertion offset, before tz-offset\n                     StringBuilder sb = new StringBuilder(dateStr);\n-                    sb.insert(len-5, \".000\");\n+                    switch (timeLen) {\n+                    case 11:\n+                        sb.insert(offset, '0'); break;\n+                    case 10:\n+                        sb.insert(offset, \"00\"); break;\n+                    case 9: // is this legal? (just second fraction marker)\n+                        sb.insert(offset, \"000\"); break;\n+                    case 8:\n+                        sb.insert(offset, \".000\"); break;\n+                    case 7: // not legal to have single-digit second\n+                        break;\n+                    case 6: // probably not legal, but let's allow\n+                        sb.insert(offset, \"00.000\");\n+                    case 5: // is legal to omit seconds\n+                        sb.insert(offset, \":00.000\");\n+                    }\n                     dateStr = sb.toString();\n                 }\n-                \n                 df = _formatISO8601;\n                 if (_formatISO8601 == null) {\n                     df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale);\n                 }\n             } else {\n-                /* 24-Nov-2009, tatu: Ugh. This is getting pretty\n-                 *   ugly. Need to rewrite!\n-                 */\n-\n                 // If not, plain date. Easiest to just patch 'Z' in the end?\n                 StringBuilder sb = new StringBuilder(dateStr);\n                 // And possible also millisecond part if missing\n                 int timeLen = len - dateStr.lastIndexOf('T') - 1;\n-                if (timeLen <= 8) {\n-                    sb.append(\".000\");\n+                if (timeLen < 12) { // missing, or partial\n+                    switch (timeLen) {\n+                    case 11: sb.append('0');\n+                    case 10: sb.append('0');\n+                    case 9: sb.append('0');\n+                        break;\n+                    default:\n+                        sb.append(\".000\");\n+                    }\n                 }\n                 sb.append('Z');\n                 dateStr = sb.toString();\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java\n         assertEquals(30, c.get(Calendar.DAY_OF_MONTH));\n     }\n \n+    // [Databind#570]\n+    public void testISO8601PartialMilliseconds() throws Exception\n+    {\n+        String inputStr;\n+        Date inputDate;\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n+        \n+        inputStr = \"2014-10-03T18:00:00.6-05:00\";\n+        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n+        c.setTime(inputDate);\n+        assertEquals(2014, c.get(Calendar.YEAR));\n+        assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));\n+        assertEquals(3, c.get(Calendar.DAY_OF_MONTH));\n+        assertEquals(600, c.get(Calendar.MILLISECOND));\n+\n+        inputStr = \"2014-10-03T18:00:00.61-05:00\";\n+        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n+        c.setTime(inputDate);\n+        assertEquals(2014, c.get(Calendar.YEAR));\n+        assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));\n+        assertEquals(3, c.get(Calendar.DAY_OF_MONTH));\n+        assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));\n+        assertEquals(0, c.get(Calendar.MINUTE));\n+        assertEquals(0, c.get(Calendar.SECOND));\n+        assertEquals(610, c.get(Calendar.MILLISECOND));\n+\n+        inputStr = \"1997-07-16T19:20:30.45+01:00\";\n+        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n+        c.setTime(inputDate);\n+        assertEquals(1997, c.get(Calendar.YEAR));\n+        assertEquals(Calendar.JULY, c.get(Calendar.MONTH));\n+        assertEquals(16, c.get(Calendar.DAY_OF_MONTH));\n+        assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));\n+        assertEquals(20, c.get(Calendar.MINUTE));\n+        assertEquals(30, c.get(Calendar.SECOND));\n+        assertEquals(450, c.get(Calendar.MILLISECOND));\n+    }\n+\n+    public void testISO8601MissingSeconds() throws Exception\n+    {\n+        String inputStr;\n+        Date inputDate;\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n+    \n+        inputStr = \"1997-07-16T19:20+01:00\";\n+        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);\n+        c.setTime(inputDate);\n+        assertEquals(1997, c.get(Calendar.YEAR));\n+        assertEquals(Calendar.JULY, c.get(Calendar.MONTH));\n+        assertEquals(16, c.get(Calendar.DAY_OF_MONTH));\n+        assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));\n+        assertEquals(0, c.get(Calendar.SECOND));\n+        assertEquals(0, c.get(Calendar.MILLISECOND));\n+}\n+\n     public void testDateUtilISO8601NoTimezone() throws Exception\n     {\n         // Timezone itself is optional as well... \n         assertEquals(0, c.get(Calendar.MILLISECOND));\n \n         // 03-Nov-2013, tatu: This wouldn't work, and is the nominal reason\n-        //    for #338 I thinl\n+        //    for #338 I think\n         /*\n         inputDate =  ISO8601Utils.parse(INPUT_STR);\n         c = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));", "timestamp": 1412316986, "metainfo": ""}