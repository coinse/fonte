{"sha": "cc05493c69ba7c2068ba7be87394f8bb59862996", "log": "Fixed #707", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/FloatNode.java\n \n     @Override\n     public String asText() {\n-        return NumberOutput.toString(_value);\n+        // As per [jackson-core#179]\n+//        return NumberOutput.toString(_value);\n+        return Float.toString(_value);\n     }\n \n     @Override\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n     // @since 2.2\n     public void testFloat()\n     {\n-        FloatNode n = FloatNode.valueOf(0.25f);\n+        FloatNode n = FloatNode.valueOf(0.45f);\n         assertStandardEquals(n);\n         assertTrue(0 != n.hashCode());\n         assertEquals(JsonToken.VALUE_NUMBER_FLOAT, n.asToken());\n         assertEquals(JsonParser.NumberType.FLOAT, n.numberType());\n         assertEquals(0, n.intValue());\n-        assertEquals(0.25, n.doubleValue());\n-        assertEquals(0.25f, n.floatValue());\n+        \n+        // NOTE: conversion to double NOT as simple as with exact numbers like 0.25:\n+        assertEquals(0.45f, n.floatValue());\n+        assertEquals(\"0.45\", n.asText());\n+\n+        // so; as double we'll get more complex number; however, should round-trip\n+        // to something that gets printed the same way. But not exact value, alas, hence:\n+        assertEquals(\"0.45\",  String.valueOf((float) n.doubleValue()));\n+\n         assertNotNull(n.decimalValue());\n+        // possibly surprisingly, however, this will produce same output:\n         assertEquals(BigInteger.ZERO, n.bigIntegerValue());\n-        assertEquals(\"0.25\", n.asText());\n+        assertEquals(\"0.45\", n.asText());\n \n         // 1.6:\n         assertNodeNumbers(FloatNode.valueOf(4.5f), 4, 4.5f);", "timestamp": 1424124621, "metainfo": ""}