{"sha": "779a259bee468f0b75d638bf4aec975642229234", "log": "Minor tweaking of a contribution", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n             if (_externalTypeIdHandler != null) {\n                 return deserializeWithExternalTypeId(jp, ctxt);\n             }\n-\n             Object bean = deserializeFromObjectUsingNonDefault(jp, ctxt);\n             if (_injectables != null) {\n                 injectValues(ctxt, bean);\n             }\n+            /* 27-May-2014, tatu: I don't think view processing would work\n+             *   at this point, so commenting it out; but leaving in place\n+             *   just in case I forgot something fundamental...\n+             */\n+            /*\n             if (_needViewProcesing) {\n                 Class<?> view = ctxt.getActiveView();\n                 if (view != null) {\n                     return deserializeWithView(jp, ctxt, bean, view);\n                 }\n             }\n+            */\n             return bean;\n         }\n         final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n import java.io.IOException;\n import java.util.*;\n \n-import com.fasterxml.jackson.annotation.JacksonInject;\n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.BeanDeserializer;\n         }\n     }\n \n-    static class IssueGH471Bean {\n-\n-        private final Object constructorInjected;\n-        private final String constructorValue;\n-\n-        @JacksonInject(\"field_injected\") private Object fieldInjected;\n-        @JsonProperty(\"field_value\")     private String fieldValue;\n-\n-        private Object methodInjected;\n-        private String methodValue;\n-\n-        @JsonCreator\n-        private IssueGH471Bean(@JacksonInject(\"constructor_injected\") Object constructorInjected,\n-                               @JsonProperty(\"constructor_value\") String constructorValue) {\n-            this.constructorInjected = constructorInjected;\n-            this.constructorValue = constructorValue;\n-        }\n-\n-        @JacksonInject(\"method_injected\")\n-        private void setMethodInjected(Object methodInjected) {\n-            this.methodInjected = methodInjected;\n-        }\n-\n-        @JsonProperty(\"method_value\")\n-        public void setMethodValue(String methodValue) {\n-            this.methodValue = methodValue;\n-        }\n-\n-    }\n-\n     /*\n     /********************************************************\n     /* Unit tests\n         assertEquals(1, result.size());\n         assertEquals(\"foo\", result.entrySet().iterator().next().getKey());\n     }\n-\n-    public void testIssueGH471() throws Exception\n-    {\n-        final Object constructorInjected = \"constructorInjected\";\n-        final Object methodInjected = \"methodInjected\";\n-        final Object fieldInjected = \"fieldInjected\";\n-\n-        ObjectMapper mapper = new ObjectMapper()\n-                        .setInjectableValues(new InjectableValues.Std()\n-                                .addValue(\"constructor_injected\", constructorInjected)\n-                                .addValue(\"method_injected\", methodInjected)\n-                                .addValue(\"field_injected\", fieldInjected));\n-\n-        IssueGH471Bean bean = mapper.readValue(\"{\\\"constructor_value\\\":\\\"constructor\\\",\\\"method_value\\\":\\\"method\\\",\\\"field_value\\\":\\\"field\\\"}\", IssueGH471Bean.class);\n-\n-        /* Assert *SAME* instance */\n-        assertSame(constructorInjected, bean.constructorInjected);\n-        assertSame(methodInjected, bean.methodInjected);\n-        assertSame(fieldInjected, bean.fieldInjected);\n-\n-        /* Check that basic properties still work (better safe than sorry) */\n-        assertEquals(\"constructor\", bean.constructorValue);\n-        assertEquals(\"method\", bean.methodValue);\n-        assertEquals(\"field\", bean.fieldValue);\n-    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestInjectables.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestInjectables.java\n             name = n;\n             age = a;\n         }\n+    }\n+\n+    static class IssueGH471Bean {\n+\n+        private final Object constructorInjected;\n+        private final String constructorValue;\n+\n+        @JacksonInject(\"field_injected\") private Object fieldInjected;\n+        @JsonProperty(\"field_value\")     private String fieldValue;\n+\n+        private Object methodInjected;\n+        private String methodValue;\n+\n+        public int x;\n+        \n+        @JsonCreator\n+        private IssueGH471Bean(@JacksonInject(\"constructor_injected\") Object constructorInjected,\n+                               @JsonProperty(\"constructor_value\") String constructorValue) {\n+            this.constructorInjected = constructorInjected;\n+            this.constructorValue = constructorValue;\n+        }\n+\n+        @JacksonInject(\"method_injected\")\n+        private void setMethodInjected(Object methodInjected) {\n+            this.methodInjected = methodInjected;\n+        }\n+\n+        @JsonProperty(\"method_value\")\n+        public void setMethodValue(String methodValue) {\n+            this.methodValue = methodValue;\n+        }\n+\n     }\n     \n     /*\n             verifyException(e, \"Duplicate injectable value\");\n         }\n     }\n+\n+    public void testIssueGH471() throws Exception\n+    {\n+        final Object constructorInjected = \"constructorInjected\";\n+        final Object methodInjected = \"methodInjected\";\n+        final Object fieldInjected = \"fieldInjected\";\n+\n+        ObjectMapper mapper = new ObjectMapper()\n+                        .setInjectableValues(new InjectableValues.Std()\n+                                .addValue(\"constructor_injected\", constructorInjected)\n+                                .addValue(\"method_injected\", methodInjected)\n+                                .addValue(\"field_injected\", fieldInjected));\n+\n+        IssueGH471Bean bean = mapper.readValue(\"{\\\"x\\\":13,\\\"constructor_value\\\":\\\"constructor\\\",\\\"method_value\\\":\\\"method\\\",\\\"field_value\\\":\\\"field\\\"}\",\n+                IssueGH471Bean.class);\n+\n+        /* Assert *SAME* instance */\n+        assertSame(constructorInjected, bean.constructorInjected);\n+        assertSame(methodInjected, bean.methodInjected);\n+        assertSame(fieldInjected, bean.fieldInjected);\n+\n+        /* Check that basic properties still work (better safe than sorry) */\n+        assertEquals(\"constructor\", bean.constructorValue);\n+        assertEquals(\"method\", bean.methodValue);\n+        assertEquals(\"field\", bean.fieldValue);\n+\n+        assertEquals(13, bean.x);\n+    }\n }", "timestamp": 1401233695, "metainfo": ""}