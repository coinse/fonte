{"sha": "13c8421b8a4bd8a84a18fc6e492bf698b49ea62a", "log": "Documented depositSchemaProperty, and refactored duplicate code into a single method within BeanSerializerBase", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyFilter.java\n             BeanPropertyWriter writer)\n         throws Exception;\n     \n-    public void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider);\n+    /**\n+     * Method called by {@link BeanSerializer} to let the filter determine whether, and in what\n+     * form the given property exist within the parent, or root, schema. Filters can omit\n+     * adding the property to the node, or choose the form of the schema value for the property\n+     * \n+     * @param writer Bean property serializer to use to create schema value\n+     * @param propertiesNode Node which the given property would exist within\n+     * @param provider Provider that can be used for accessing dynamic aspects of serialization\n+     * \tprocessing\n+     *\n+     */\n+    public void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode,\n+    \t\tSerializerProvider provider);\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n \t\t\t_propertiesToInclude = properties;\n \t\t}\n \n-\t\t//      @Override\n \t\tpublic void serializeAsField(Object bean, JsonGenerator jgen,\n \t\t\t\tSerializerProvider provider, BeanPropertyWriter writer) throws Exception\n \t\t{\n \t\t\t}\n \t\t}\n \t\t\n-\t\t@Override\n \t\tpublic void depositSchemaProperty(BeanPropertyWriter writer,\n \t\t\t\tObjectNode propertiesNode, SerializerProvider provider) {\n \t\t\tif (_propertiesToInclude.contains(writer.getName())) {\n-\t\t\t\tsuper.depositSchemaProperty(writer, propertiesNode, provider);\n+\t\t\t\tBeanSerializerBase.depositSchemaProperty(writer, propertiesNode, provider);\n \t\t\t}\n \t\t}\n \t}\n \t\t\t_propertiesToExclude = properties;\n \t\t}\n \n-\t\t//      @Override\n \t\tpublic void serializeAsField(Object bean, JsonGenerator jgen,\n \t\t\t\tSerializerProvider provider, BeanPropertyWriter writer) throws Exception\n \t\t{\n \t\tpublic void depositSchemaProperty(BeanPropertyWriter writer,\n \t\t\t\tObjectNode propertiesNode, SerializerProvider provider) {\n \t\t\tif (!_propertiesToExclude.contains(writer.getName())) {\n-\t\t\t\tsuper.depositSchemaProperty(writer, propertiesNode, provider);\n+\t\t\t\tBeanSerializerBase.depositSchemaProperty(writer, propertiesNode, provider);\n \t\t\t}\n \t\t}\n \t}\n \n-\tpublic void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider) {\n-\t\tJavaType propType = writer.getSerializationType();\n-\n-\t\t// 03-Dec-2010, tatu: SchemaAware REALLY should use JavaType, but alas it doesn't...\n-\t\tType hint = (propType == null) ? writer.getGenericPropertyType() : propType.getRawClass();\n-\t\tJsonNode schemaNode;\n-\t\t// Maybe it already has annotated/statically configured serializer?\n-\t\tJsonSerializer<Object> ser = writer.getSerializer();\n-\n-\t\ttry {\n-\t\t\tif (ser == null) { // nope\n-\t\t\t\tClass<?> serType = writer.getRawSerializationType();\n-\t\t\t\tif (serType == null) {\n-\t\t\t\t\tserType = writer.getPropertyType();\n-\t\t\t\t}\n-\t\t\t\tser = provider.findValueSerializer(serType, writer);\n-\t\t\t}\n-\t\t\tboolean isOptional = !BeanSerializerBase.isPropertyRequired(writer, provider);\n-\t\t\tif (ser instanceof SchemaAware) {\n-\t\t\t\tschemaNode =  ((SchemaAware) ser).getSchema(provider, hint, isOptional) ;\n-\t\t\t} else {  \n-\t\t\t\tschemaNode = JsonSchema.getDefaultSchemaNode(); \n-\t\t\t}\n-\t\t} catch (JsonMappingException e) {\n-\t\t\tschemaNode = JsonSchema.getDefaultSchemaNode(); \n-\t\t\t//TODO: log error\n-\t\t}\n-\t\tpropertiesNode.put(writer.getName(), schemaNode);\n-\t}\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n             }\n             JavaType propType = prop.getSerializationType();\n \n-            // 03-Dec-2010, tatu: SchemaAware REALLY should use JavaType, but alas it doesn't...\n-            Type hint = (propType == null) ? prop.getGenericPropertyType() : propType.getRawClass();\n-            // Maybe it already has annotated/statically configured serializer?\n-            JsonSerializer<Object> ser = prop.getSerializer();\n-            if (ser == null) { // nope\n-                Class<?> serType = prop.getRawSerializationType();\n-                if (serType == null) {\n-                    serType = prop.getPropertyType();\n-                }\n-                ser = provider.findValueSerializer(serType, prop);\n-            }\n-            boolean isOptional = !isPropertyRequired(prop, provider);\n-            \n-            JsonNode schemaNode = (ser instanceof SchemaAware) ?\n-                    ((SchemaAware) ser).getSchema(provider, hint, isOptional) : \n-                    JsonSchema.getDefaultSchemaNode();\n-            propertiesNode.put(prop.getName(), schemaNode);\n+            depositSchemaProperty(prop, propertiesNode, provider);\n+\n         }\n         o.put(\"properties\", propertiesNode);\n         return o;\n         return (value == null) ? false : value.booleanValue();\n     }\n     \n+    /**\n+     * \tAttempt to add the output of the given {@link BeanPropertyWriter} in the given {@link ObjectNode}.\n+     * \tOtherwise, add the default schema {@link JsonNode} in place of the writer's output\n+     * \n+     * @param writer Bean property serializer to use to create schema value\n+     * @param propertiesNode Node which the given property would exist within\n+     * @param provider Provider that can be used for accessing dynamic aspects of serialization\n+     * \tprocessing\n+     * \t\n+     *  {@link BeanPropertyFilter#depositSchemaProperty(BeanPropertyWriter, ObjectNode, SerializerProvider)}\n+     */\n+    public static void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider) {\n+\t\tJavaType propType = writer.getSerializationType();\n+\n+\t\t// 03-Dec-2010, tatu: SchemaAware REALLY should use JavaType, but alas it doesn't...\n+\t\tType hint = (propType == null) ? writer.getGenericPropertyType() : propType.getRawClass();\n+\t\tJsonNode schemaNode;\n+\t\t// Maybe it already has annotated/statically configured serializer?\n+\t\tJsonSerializer<Object> ser = writer.getSerializer();\n+\n+\t\ttry {\n+\t\t\tif (ser == null) { // nope\n+\t\t\t\tClass<?> serType = writer.getRawSerializationType();\n+\t\t\t\tif (serType == null) {\n+\t\t\t\t\tserType = writer.getPropertyType();\n+\t\t\t\t}\n+\t\t\t\tser = provider.findValueSerializer(serType, writer);\n+\t\t\t}\n+\t\t\tboolean isOptional = !BeanSerializerBase.isPropertyRequired(writer, provider);\n+\t\t\tif (ser instanceof SchemaAware) {\n+\t\t\t\tschemaNode =  ((SchemaAware) ser).getSchema(provider, hint, isOptional) ;\n+\t\t\t} else {  \n+\t\t\t\tschemaNode = JsonSchema.getDefaultSchemaNode(); \n+\t\t\t}\n+\t\t} catch (JsonMappingException e) {\n+\t\t\tschemaNode = JsonSchema.getDefaultSchemaNode(); \n+\t\t\t//TODO: log error\n+\t\t}\n+\t\tpropertiesNode.put(writer.getName(), schemaNode);\n+\t}\n+    \n }", "timestamp": 1343169658, "metainfo": ""}