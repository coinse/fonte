{"sha": "d06026f73b52bafc7cc1a44ae86e5405d97f8350", "log": "Fix compilation problem (due to Collections.emptyIterator()), upgrade to 'createParser' etc (from 'createJsonParser')", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonToken;\n import com.fasterxml.jackson.core.TreeNode;\n+import com.fasterxml.jackson.databind.util.EmptyIterator;\n \n /**\n  * Base class for all JSON nodes, which form the basis of JSON\n      * field names (keys) are not included, only values.\n      * For other types of nodes, returns empty iterator.\n      */\n-    public Iterator<JsonNode> elements()\n-    {\n-        return Collections.emptyIterator();\n+    public Iterator<JsonNode> elements() {\n+        return EmptyIterator.instance();\n     }\n \n     /**\n      * Method for accessing names of all fields for this Node, iff\n      * this node is a JSON Object node.\n      */\n-    public Iterator<String> fieldNames()\n-    {\n-        return Collections.emptyIterator();\n+    public Iterator<String> fieldNames() {\n+        return EmptyIterator.instance();\n     }\n \n     /**\n      * @return Iterator that can be used to traverse all key/value pairs for\n      *   object nodes; empty iterator (no contents) for other types\n      */\n-    public Iterator<Map.Entry<String, JsonNode>> fields()\n-    {\n-        return Collections.emptyIterator();\n+    public Iterator<Map.Entry<String, JsonNode>> fields() {\n+        return EmptyIterator.instance();\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     public JsonNode readTree(InputStream in)\n         throws IOException, JsonProcessingException\n     {\n-        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createJsonParser(in), JSON_NODE_TYPE);\n+        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(in), JSON_NODE_TYPE);\n         return (n == null) ? NullNode.instance : n;\n     }\n \n     public JsonNode readTree(Reader r)\n         throws IOException, JsonProcessingException\n     {\n-        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createJsonParser(r), JSON_NODE_TYPE);\n+        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(r), JSON_NODE_TYPE);\n         return (n == null) ? NullNode.instance : n;\n     }\n \n     public JsonNode readTree(String content)\n         throws IOException, JsonProcessingException\n     {\n-        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createJsonParser(content), JSON_NODE_TYPE);\n+        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(content), JSON_NODE_TYPE);\n         return (n == null) ? NullNode.instance : n;\n     }\n \n     public JsonNode readTree(byte[] content)\n         throws IOException, JsonProcessingException\n     {\n-        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createJsonParser(content), JSON_NODE_TYPE);\n+        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(content), JSON_NODE_TYPE);\n         return (n == null) ? NullNode.instance : n;\n     }\n     \n     public JsonNode readTree(File file)\n         throws IOException, JsonProcessingException\n     {\n-        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createJsonParser(file), JSON_NODE_TYPE);\n+        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(file), JSON_NODE_TYPE);\n         return (n == null) ? NullNode.instance : n;\n     }\n \n     public JsonNode readTree(URL source)\n         throws IOException, JsonProcessingException\n     {\n-        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createJsonParser(source), JSON_NODE_TYPE);\n+        JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(source), JSON_NODE_TYPE);\n         return (n == null) ? NullNode.instance : n;\n     }\n \n     {\n      // !!! TODO\n //    \t_setupClassLoaderForDeserialization(valueType);\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), _typeFactory.constructType(valueType));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n     } \n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public <T> T readValue(File src, TypeReference valueTypeRef)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), _typeFactory.constructType(valueTypeRef));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));\n     } \n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(File src, JavaType valueType)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), valueType);\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n     } \n \n     @SuppressWarnings(\"unchecked\")\n     {\n      // !!! TODO\n //    \t_setupClassLoaderForDeserialization(valueType);\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), _typeFactory.constructType(valueType));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n     } \n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public <T> T readValue(URL src, TypeReference valueTypeRef)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), _typeFactory.constructType(valueTypeRef));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));\n     } \n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(URL src, JavaType valueType)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), valueType);\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n     } \n \n     @SuppressWarnings(\"unchecked\")\n     {\n      // !!! TODO\n //    \t_setupClassLoaderForDeserialization(valueType);\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(content), _typeFactory.constructType(valueType));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueType));\n     } \n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public <T> T readValue(String content, TypeReference valueTypeRef)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(content), _typeFactory.constructType(valueTypeRef));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueTypeRef));\n     } \n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(String content, JavaType valueType)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(content), valueType);\n+        return (T) _readMapAndClose(_jsonFactory.createParser(content), valueType);\n     } \n \n     @SuppressWarnings(\"unchecked\")\n     {\n      // !!! TODO\n //    \t_setupClassLoaderForDeserialization(valueType);\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), _typeFactory.constructType(valueType));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n     } \n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public <T> T readValue(Reader src, TypeReference valueTypeRef)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), _typeFactory.constructType(valueTypeRef));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));\n     } \n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(Reader src, JavaType valueType)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), valueType);\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n     } \n \n     @SuppressWarnings(\"unchecked\")\n     {\n      // !!! TODO\n //    \t_setupClassLoaderForDeserialization(valueType);\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), _typeFactory.constructType(valueType));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n     } \n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public <T> T readValue(InputStream src, TypeReference valueTypeRef)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), _typeFactory.constructType(valueTypeRef));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));\n     } \n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(InputStream src, JavaType valueType)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), valueType);\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n     } \n \n     @SuppressWarnings(\"unchecked\")\n     {\n      // !!! TODO\n //      _setupClassLoaderForDeserialization(valueType);\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), _typeFactory.constructType(valueType));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n     } \n     \n     @SuppressWarnings(\"unchecked\")\n     {\n      // !!! TODO\n //    \t_setupClassLoaderForDeserialization(valueType);\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src, offset, len), _typeFactory.constructType(valueType));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), _typeFactory.constructType(valueType));\n     } \n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     public <T> T readValue(byte[] src, TypeReference valueTypeRef)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), _typeFactory.constructType(valueTypeRef));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef));\n     } \n     \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n                            TypeReference valueTypeRef)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src, offset, len), _typeFactory.constructType(valueTypeRef));\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), _typeFactory.constructType(valueTypeRef));\n     } \n \n     @SuppressWarnings(\"unchecked\")\n     public <T> T readValue(byte[] src, JavaType valueType)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src), valueType);\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType);\n     } \n \n     @SuppressWarnings(\"unchecked\")\n                            JavaType valueType)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-        return (T) _readMapAndClose(_jsonFactory.createJsonParser(src, offset, len), valueType);\n+        return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), valueType);\n     } \n     \n     /*\n     public void writeValue(File resultFile, Object value)\n         throws IOException, JsonGenerationException, JsonMappingException\n     {\n-        _configAndWriteValue(_jsonFactory.createJsonGenerator(resultFile, JsonEncoding.UTF8), value);\n+        _configAndWriteValue(_jsonFactory.createGenerator(resultFile, JsonEncoding.UTF8), value);\n     }\n \n     /**\n     public void writeValue(OutputStream out, Object value)\n         throws IOException, JsonGenerationException, JsonMappingException\n     {\n-        _configAndWriteValue(_jsonFactory.createJsonGenerator(out, JsonEncoding.UTF8), value);\n+        _configAndWriteValue(_jsonFactory.createGenerator(out, JsonEncoding.UTF8), value);\n     }\n \n     /**\n     public void writeValue(Writer w, Object value)\n         throws IOException, JsonGenerationException, JsonMappingException\n     {\n-        _configAndWriteValue(_jsonFactory.createJsonGenerator(w), value);\n+        _configAndWriteValue(_jsonFactory.createGenerator(w), value);\n     }\n \n     /**\n         // alas, we have to pull the recycler directly here...\n         SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n         try {\n-            _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+            _configAndWriteValue(_jsonFactory.createGenerator(sw), value);\n         } catch (JsonProcessingException e) { // to support [JACKSON-758]\n             throw e;\n         } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:\n     {\n         ByteArrayBuilder bb = new ByteArrayBuilder(_jsonFactory._getBufferRecycler());\n         try {\n-            _configAndWriteValue(_jsonFactory.createJsonGenerator(bb, JsonEncoding.UTF8), value);\n+            _configAndWriteValue(_jsonFactory.createGenerator(bb, JsonEncoding.UTF8), value);\n         } catch (JsonProcessingException e) { // to support [JACKSON-758]\n             throw e;\n         } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n         if (_dataFormatReaders != null) {\n             return (T) _detectBindAndClose(_dataFormatReaders.findFormat(src), false);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createJsonParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(src);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createJsonParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n     }\n     \n     /**\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(src);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createJsonParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             return (T) _detectBindAndClose(src, 0, src.length);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createJsonParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             return (T) _detectBindAndClose(src, offset, length);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createJsonParser(src, offset, length), _valueToUpdate);\n+        return (T) _bindAndClose(_jsonFactory.createParser(src, offset, length), _valueToUpdate);\n     }\n     \n     @SuppressWarnings(\"unchecked\")\n         if (_dataFormatReaders != null) {\n             return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createJsonParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true);\n         }\n-        return (T) _bindAndClose(_jsonFactory.createJsonParser(src), _valueToUpdate);\n+        return (T) _bindAndClose(_jsonFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             return _detectBindAndCloseAsTree(in);\n         }\n-        return _bindAndCloseAsTree(_jsonFactory.createJsonParser(in));\n+        return _bindAndCloseAsTree(_jsonFactory.createParser(in));\n     }\n     \n     /**\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(r);\n         }\n-        return _bindAndCloseAsTree(_jsonFactory.createJsonParser(r));\n+        return _bindAndCloseAsTree(_jsonFactory.createParser(r));\n     }\n \n     /**\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(json);\n         }\n-        return _bindAndCloseAsTree(_jsonFactory.createJsonParser(json));\n+        return _bindAndCloseAsTree(_jsonFactory.createParser(json));\n     }\n \n     /*\n         if (_dataFormatReaders != null) {\n             return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false);\n         }\n-        return _bindAndReadValues(_jsonFactory.createJsonParser(src), _valueToUpdate);\n+        return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate);\n     }\n     \n     /**\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(src);\n         }\n-        JsonParser jp = _jsonFactory.createJsonParser(src);\n+        JsonParser jp = _jsonFactory.createParser(src);\n         if (_schema != null) {\n             jp.setSchema(_schema);\n         }\n         if (_dataFormatReaders != null) {\n             _reportUndetectableSource(json);\n         }\n-        JsonParser jp = _jsonFactory.createJsonParser(json);\n+        JsonParser jp = _jsonFactory.createParser(json);\n         if (_schema != null) {\n             jp.setSchema(_schema);\n         }\n         if (_dataFormatReaders != null) {\n             return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);\n         }\n-        return _bindAndReadValues(_jsonFactory.createJsonParser(src), _valueToUpdate);\n+        return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n             return _detectBindAndReadValues(\n                     _dataFormatReaders.findFormat(_inputStream(src)), false);\n         }\n-        return _bindAndReadValues(_jsonFactory.createJsonParser(src), _valueToUpdate);\n+        return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate);\n     }\n \n     /**\n             return _detectBindAndReadValues(\n                     _dataFormatReaders.findFormat(_inputStream(src)), true);\n         }\n-        return _bindAndReadValues(_jsonFactory.createJsonParser(src), _valueToUpdate);\n+        return _bindAndReadValues(_jsonFactory.createParser(src), _valueToUpdate);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n     public void writeValue(File resultFile, Object value)\n         throws IOException, JsonGenerationException, JsonMappingException\n     {\n-        _configAndWriteValue(_jsonFactory.createJsonGenerator(resultFile, JsonEncoding.UTF8), value);\n+        _configAndWriteValue(_jsonFactory.createGenerator(resultFile, JsonEncoding.UTF8), value);\n     }\n \n     /**\n     public void writeValue(OutputStream out, Object value)\n         throws IOException, JsonGenerationException, JsonMappingException\n     {\n-        _configAndWriteValue(_jsonFactory.createJsonGenerator(out, JsonEncoding.UTF8), value);\n+        _configAndWriteValue(_jsonFactory.createGenerator(out, JsonEncoding.UTF8), value);\n     }\n \n     /**\n     public void writeValue(Writer w, Object value)\n         throws IOException, JsonGenerationException, JsonMappingException\n     {\n-        _configAndWriteValue(_jsonFactory.createJsonGenerator(w), value);\n+        _configAndWriteValue(_jsonFactory.createGenerator(w), value);\n     }\n \n     /**\n         // alas, we have to pull the recycler directly here...\n         SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n         try {\n-            _configAndWriteValue(_jsonFactory.createJsonGenerator(sw), value);\n+            _configAndWriteValue(_jsonFactory.createGenerator(sw), value);\n         } catch (JsonProcessingException e) { // to support [JACKSON-758]\n             throw e;\n         } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:\n     {\n         ByteArrayBuilder bb = new ByteArrayBuilder(_jsonFactory._getBufferRecycler());\n         try {\n-            _configAndWriteValue(_jsonFactory.createJsonGenerator(bb, JsonEncoding.UTF8), value);\n+            _configAndWriteValue(_jsonFactory.createGenerator(bb, JsonEncoding.UTF8), value);\n         } catch (JsonProcessingException e) { // to support [JACKSON-758]\n             throw e;\n         } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.util.EmptyIterator;\n \n /**\n  * Node class that represents Arrays mapped from Json content.\n     @Override\n     public Iterator<JsonNode> elements()\n     {\n-        return _children == null\n-            ? Collections.<JsonNode>emptyIterator()\n-            : _children.iterator();\n+        if (_children == null) {\n+            return EmptyIterator.instance();\n+        }\n+        return _children.iterator();\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n+import com.fasterxml.jackson.databind.util.EmptyIterator;\n \n /**\n  * Node that maps to JSON Object structures in JSON content.\n     @Override\n     public Iterator<JsonNode> elements()\n     {\n-        return _children == null\n-            ? Collections.<JsonNode>emptyIterator()\n-            : _children.values().iterator();\n+        if (_children == null) {\n+            return EmptyIterator.instance();\n+        }\n+        return _children.values().iterator();\n     }\n \n     @Override\n     @Override\n     public Iterator<String> fieldNames()\n     {\n-        return _children == null\n-            ? Collections.<String>emptyIterator()\n-            : _children.keySet().iterator();\n+        if (_children == null) {\n+            return EmptyIterator.instance();\n+        }\n+        return _children.keySet().iterator();\n     }\n \n     @Override\n     @Override\n     public Iterator<Map.Entry<String, JsonNode>> fields()\n     {\n-        return _children == null\n-            ? Collections.<Map.Entry<String, JsonNode>>emptyIterator()\n-            : _children.entrySet().iterator();\n+        if (_children == null) {\n+            return EmptyIterator.instance();\n+        }\n+        return _children.entrySet().iterator();\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n     protected final boolean _staticTyping;\n \n     /**\n-     * Propery for which this serializer is being used, if any;\n+     * Property for which this serializer is being used, if any;\n      * null for root values.\n      */\n     protected final BeanProperty _property;\n         throws JsonMappingException\n     {\n         JsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);\n-    \t/*\n-        JavaType enumType = typeHint.containedType(0);\n-    \tif (enumType == null) {\n-    \t    enumType = visitor.getProvider().constructType(Object.class);\n-    \t}\n-    \t*/\n         JavaType valueType = typeHint.containedType(1);\n+        JsonSerializer<Object> ser = _valueSerializer;\n+        if (ser == null && valueType != null) {\n+            ser = visitor.getProvider().findValueSerializer(valueType, _property);\n+        }\n         if (valueType == null) {\n             valueType = visitor.getProvider().constructType(Object.class);\n         }\n-        JsonSerializer<Object> ser = _valueSerializer;\n-//        Class<Enum<?>> enumClass = (Class<Enum<?>>) enumType.getRawClass();\n-        for (Map.Entry<?,SerializedString> entry : _keyEnums.internalMap().entrySet()) {\n+        EnumValues keyEnums = _keyEnums;\n+        if (keyEnums == null) {\n+            JavaType enumType = typeHint.containedType(0);\n+             if (enumType == null) {\n+                 throw new IllegalStateException(\"Can not resolve Enum type of EnumMap: \"+typeHint);\n+             }\n+             JsonSerializer<?> enumSer = (enumType == null) ? null :\n+                 visitor.getProvider().findValueSerializer(enumType, _property);\n+             if (!(enumSer instanceof EnumSerializer)) {\n+                 throw new IllegalStateException(\"Can not resolve Enum type of EnumMap: \"+typeHint);\n+             }\n+             keyEnums = ((EnumSerializer) enumSer).getEnumValues();\n+        }\n+        for (Map.Entry<?,SerializedString> entry : keyEnums.internalMap().entrySet()) {\n             String name = entry.getValue().getValue();\n             // should all have the same type, so:\n             if (ser == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n                 }\n             }\n         } else if (ser instanceof ContextualSerializer) {\n-            ser = ((ContextualSerializer) _elementSerializer).createContextual(provider, property);\n+            ser = ((ContextualSerializer) ser).createContextual(provider, property);\n         }\n         return withResolved(property, vts, ser);\n     }\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/EmptyIterator.java\n+package com.fasterxml.jackson.databind.util;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * Implementation of {@link Iterator} for Empty collections.\n+ * While JDK has an implementation starting with 1.7, we need this\n+ * class until then.\n+ * \n+ * @since 2.2 (before, we had embedded instances)\n+ */\n+public class EmptyIterator<T> implements Iterator<T>\n+{\n+    private final static EmptyIterator<?> instance = new EmptyIterator<Object>();\n+\n+    private EmptyIterator() { }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Iterator<T> instance() {\n+        return (Iterator<T>) instance;\n+    }\n+    \n+    public boolean hasNext() { return false; }\n+    public T next() { throw new NoSuchElementException(); }\n+\n+    // @Override\n+    public void remove() {\n+        throw new UnsupportedOperationException();\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n     {\n         private static final long serialVersionUID = 1L;\n         @Override\n-        protected JsonParser _createJsonParser(Reader r, IOContext ctxt)\n+        protected JsonParser _createParser(Reader r, IOContext ctxt)\n             throws IOException, JsonParseException\n         {\n             return new ParserWithSchema(ctxt, _parserFeatures);\n         }\n \n         @Override\n-        protected JsonGenerator _createJsonGenerator(Writer out, IOContext ctxt) throws IOException\n+        protected JsonGenerator _createGenerator(Writer out, IOContext ctxt) throws IOException\n         {\n             return new GeneratorWithSchema(_generatorFeatures, _objectCodec);\n         }", "timestamp": 1353032293, "metainfo": ""}