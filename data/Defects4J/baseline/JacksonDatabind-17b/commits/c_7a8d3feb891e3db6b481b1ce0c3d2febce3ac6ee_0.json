{"sha": "7a8d3feb891e3db6b481b1ce0c3d2febce3ac6ee", "log": "Start working on #315, (more) configurable null serialization", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n      * type is returned, a runtime exception may be thrown by caller.\n      */\n     public Object findContentSerializer(Annotated am) {\n+        return null;\n+    }\n+\n+    /**\n+     * Method for getting a serializer definition for serializer to use\n+     * for nulls (null values) of associated property or type.\n+     * \n+     * @since 2.3\n+     */\n+    public Object findNullSerializer(Annotated am) {\n         return null;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n      */\n     public Class<? extends JsonSerializer<?>> keyUsing()\n         default JsonSerializer.None.class;\n-    \n+\n+    /**\n+     * Serializer class to use for serializing nulls for properties that\n+     * are annotated (or for types that are annotated), instead of the\n+     * default null serializer.\n+     * \n+     * @since 2.3\n+     */\n+    public Class<? extends JsonSerializer<?>> nullsUsing()\n+        default JsonSerializer.None.class;\n+\n     // // // Annotations for type handling, explicit declaration\n     // // // (type used for choosing deserializer, if not explicitly\n     // // // specified)\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair.java\n         }\n         return result;\n     }\n-\n     @Override\n     public Object findContentSerializer(Annotated a)\n     {\n         Object result = _primary.findContentSerializer(a);\n         if (result == null || result == JsonSerializer.None.class || result == NoClass.class) {\n             result = _secondary.findContentSerializer(a);\n+        }\n+        return result;\n+    }\n+    \n+    @Override\n+    public Object findNullSerializer(Annotated a)\n+    {\n+        Object result = _primary.findNullSerializer(a);\n+        if (result == null || result == JsonSerializer.None.class || result == NoClass.class) {\n+            result = _secondary.findNullSerializer(a);\n         }\n         return result;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         }\n         return null;\n     }\n-    \n+\n+    @Override\n+    public Object findNullSerializer(Annotated a)\n+    {\n+        JsonSerialize ann = a.getAnnotation(JsonSerialize.class);\n+        if (ann != null) {\n+            Class<? extends JsonSerializer<?>> serClass = ann.nullsUsing();\n+            if (serClass != JsonSerializer.None.class) {\n+                return serClass;\n+            }\n+        }\n+        return null;\n+    }\n+\n     @Override\n     public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue)\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n public class TestNullSerialization\n             return super.findNullValueSerializer(property);\n         }\n     }\n+\n+    static class BeanWithNullProps\n+    {\n+        @JsonSerialize(nullsUsing=NullSerializer.class)\n+        public String a = null;\n+    }\n+\n+    @JsonSerialize(nullsUsing=NullSerializer.class)\n+    static class NullValuedType { }\n     \n     /*\n     /**********************************************************\n     /* Test methods\n     /**********************************************************\n      */\n+\n+    private final ObjectMapper MAPPER = objectMapper();\n     \n     public void testSimple() throws Exception\n     {\n-        assertEquals(\"null\", new ObjectMapper().writeValueAsString(null));\n+        assertEquals(\"null\", MAPPER.writeValueAsString(null));\n     }\n \n     public void testOverriddenDefaultNulls() throws Exception\n     // #281\n     public void testCustomNullForTrees() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        ObjectNode root = m.createObjectNode();\n+        ObjectNode root = MAPPER.createObjectNode();\n         root.putNull(\"a\");\n \n         // by default, null is... well, null\n-        assertEquals(\"{\\\"a\\\":null}\", m.writeValueAsString(root));\n+        assertEquals(\"{\\\"a\\\":null}\", MAPPER.writeValueAsString(root));\n \n         // but then we can customize it:\n         DefaultSerializerProvider prov = new MyNullProvider();\n         prov.setNullValueSerializer(new NullSerializer());\n+        ObjectMapper m = new ObjectMapper();\n         m.setSerializerProvider(prov);\n         assertEquals(\"{\\\"a\\\":\\\"foobar\\\"}\", m.writeValueAsString(root));\n     }\n \n+    public void testNullSerializerViaClass() throws Exception\n+    {\n+        assertEquals(\"[\\\"foobar\\\"]\",\n+                MAPPER.writeValueAsString(new NullValuedType[] { new NullValuedType() }));\n+    }\n+\n+    public void testNullSerializerForProperty() throws Exception\n+    {\n+        assertEquals(\"{\\\"a\\\":\\\"foobar\\\"}\", MAPPER.writeValueAsString(new BeanWithNullProps()));\n+    }\n }", "timestamp": 1381805346, "metainfo": ""}