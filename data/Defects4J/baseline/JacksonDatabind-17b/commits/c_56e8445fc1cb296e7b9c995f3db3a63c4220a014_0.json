{"sha": "56e8445fc1cb296e7b9c995f3db3a63c4220a014", "log": "add unit tests for converting deserializers (5, failing)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingDeserializer.java\n package com.fasterxml.jackson.databind.convert;\n \n-public class TestConvertingDeserializer {\n+import java.util.*;\n \n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.ConvertingBean;\n+import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.ConvertingBeanContainer;\n+import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.PointListWrapperArray;\n+import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.PointListWrapperList;\n+import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.PointListWrapperMap;\n+import com.fasterxml.jackson.databind.convert.TestConvertingSerializer.PointWrapper;\n+import com.fasterxml.jackson.databind.util.Converter;\n+\n+public class TestConvertingDeserializer\n+extends com.fasterxml.jackson.databind.BaseMapTest\n+{\n+    @JsonDeserialize(converter=ConvertingBeanConverter.class)\n+    static class ConvertingBean\n+    {\n+        protected int x, y;\n+    \n+        protected ConvertingBean(int x, int y) {\n+            this.x = x;\n+            this.y = y;\n+        }\n+    }\n+    \n+    static class Point\n+    {\n+        protected int x, y;\n+    \n+        public Point(int v1, int v2) {\n+            x = v1;\n+            y = v2;\n+        }\n+    }\n+\n+    static class ConvertingBeanContainer\n+    {\n+        public List<ConvertingBean> values;\n+        \n+        public ConvertingBeanContainer(ConvertingBean... beans) {\n+            values = Arrays.asList(beans);\n+        }\n+    }\n+\n+    static class ConvertingBeanConverter implements Converter<int[],ConvertingBean>\n+    {\n+        @Override\n+        public ConvertingBean convert(int[] values) {\n+            return new ConvertingBean(values[0], values[1]);\n+        }\n+    }\n+\n+    static class PointConverter implements Converter<int[], Point>\n+    {\n+        @Override public Point convert(int[] value) {\n+            return new Point(value[0], value[1]);\n+        }\n+    }\n+\n+    static class PointWrapper {\n+        @JsonDeserialize(converter=PointConverter.class)\n+        public Point value;\n+    \n+        public PointWrapper(int x, int y) {\n+            value = new Point(x, y);\n+        }\n+    }\n+    \n+    static class PointListWrapperArray {\n+        @JsonDeserialize(contentConverter=PointConverter.class)\n+        public Point[] values;\n+    }\n+\n+    static class PointListWrapperList {\n+        @JsonDeserialize(contentConverter=PointConverter.class)\n+        public List<Point> values;\n+    }\n+\n+    static class PointListWrapperMap {\n+        @JsonDeserialize(contentConverter=PointConverter.class)\n+        public Map<String,Point> values;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    public void testClassAnnotationSimple() throws Exception\n+    {\n+        ConvertingBean bean = objectReader(ConvertingBean.class).readValue(\"[1,2]\");\n+        assertNotNull(bean);\n+        assertEquals(1, bean.x);\n+        assertEquals(2, bean.y);\n+    }\n+\n+    public void testClassAnnotationForLists() throws Exception\n+    {\n+        ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class)\n+                .readValue(\"{\\\"values\\\":[[1,2],[3,4]]}\");\n+        assertNotNull(container);\n+        assertNotNull(container.values);\n+        assertEquals(2, container.values.size());\n+        assertEquals(4, container.values.get(1).y);\n+    }\n+\n+    public void testPropertyAnnotationSimple() throws Exception\n+    {\n+        PointWrapper wrapper = objectReader(PointWrapper.class).readValue(\"{\\\"value\\\":[3,4]}\");\n+        assertNotNull(wrapper);\n+        assertNotNull(wrapper.value);\n+        assertEquals(3, wrapper.value.x);\n+        assertEquals(4, wrapper.value.y);\n+    }\n+\n+    public void testPropertyAnnotationForArrays() throws Exception\n+    {\n+        PointListWrapperArray array = objectReader(PointListWrapperArray.class)\n+                .readValue(\"{\\\"values\\\":[[4,5],[5,4]]}\");\n+        assertNotNull(array);\n+        assertNotNull(array.values);\n+        assertEquals(2, array.values.length);\n+        assertEquals(5, array.values[1].x);\n+    }\n+\n+    public void testPropertyAnnotationForLists() throws Exception\n+    {\n+        PointListWrapperList array = objectReader(PointListWrapperList.class)\n+                .readValue(\"{\\\"values\\\":[[7,8],[8,7]]}\");\n+        assertNotNull(array);\n+        assertNotNull(array.values);\n+        assertEquals(2, array.values.size());\n+        assertEquals(7, array.values.get(0).x);\n+    }\n+\n+    public void testPropertyAnnotationForMaps() throws Exception\n+    {\n+        PointListWrapperMap map = objectReader(PointListWrapperMap.class)\n+                .readValue(\"{\\\"values\\\":{\\\"a\\\":[1,2]}}\");\n+        assertNotNull(map);\n+        assertNotNull(map.values);\n+        assertEquals(1, map.values.size());\n+        Point p = map.values.get(\"a\");\n+        assertNotNull(p);\n+        assertEquals(1, p.x);\n+        assertEquals(2, p.y);\n+    }\n }", "timestamp": 1362198559, "metainfo": ""}