{"sha": "6c98fa9d28182ebe44f4466fc316e9817f387d17", "log": "Change JsonDeserializer._valueDeserializer to be fully immutable (yay)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n      * used, {@link #deserialize(JsonParser, DeserializationContext)}),\n      * which takes in initialized value instance, to be\n      * configured and/or populated by deserializer.\n-     * Method is not necessarily used for all supported types; most commonly\n-     * it is used\n-     * for Collections and Maps.\n+     * Method is not necessarily used (or supported) by all types\n+     * (it will not work for immutable types, for obvious reasons):\n+     * most commonly it is used for Collections and Maps.\n+     * It may be used both with \"updating readers\" (for POJOs) and\n+     * when Collections and Maps use \"getter as setter\".\n      *<p>\n      * Default implementation just throws\n      * {@link UnsupportedOperationException}, to indicate that types\n      * update-existing-value operation (esp. immutable types)\n      */\n     public T deserialize(JsonParser jp, DeserializationContext ctxt,\n-                         T intoValue)\n+            T intoValue)\n         throws IOException, JsonProcessingException\n     {\n         throw new UnsupportedOperationException(\"Can not update object of type \"\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n     \n     /**\n      * Deserializer used for handling property value.\n-     */\n-    protected JsonDeserializer<Object> _valueDeserializer;\n+     *<p>\n+     * NOTE: has been immutable since 2.3\n+     */\n+    protected final JsonDeserializer<Object> _valueDeserializer;\n \n     /**\n      * If value will contain type information (to support\n     {\n         this(propName, type, wrapper, typeDeser, contextAnnotations, false);\n     }\n-    \n+\n     protected SettableBeanProperty(String propName, JavaType type, PropertyName wrapper,\n             TypeDeserializer typeDeser, Annotations contextAnnotations,\n             boolean isRequired)\n         _valueDeserializer = MISSING_VALUE_DESERIALIZER;\n     }\n \n+    /**\n+     * Constructor only used by {@link ObjectIdValueProperty}.\n+     * \n+     * @since 2.3\n+     */\n+    protected SettableBeanProperty(String propName, JavaType type, \n+            boolean isRequired, JsonDeserializer<Object> valueDeser)\n+    {\n+        // as with above ctor, intern()ing probably fine\n+        if (propName == null || propName.length() == 0) {\n+            _propName = \"\";\n+        } else {\n+            _propName = InternCache.instance.intern(propName);\n+        }\n+        _type = type;\n+        _wrapperName = null;\n+        _isRequired = isRequired;\n+        _contextAnnotations = null;\n+        _viewMatcher = null;\n+        _nullProvider = null;\n+        _valueTypeDeserializer = null;\n+        _valueDeserializer = valueDeser;\n+    }\n+    \n     /**\n      * Basic copy-constructor for sub-classes to use.\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java\n     public ObjectIdValueProperty(ObjectIdReader objectIdReader,\n             boolean isRequired)\n     {\n-        super(objectIdReader.propertyName, objectIdReader.idType, null, null, null,\n-                isRequired);\n+        super(objectIdReader.propertyName, objectIdReader.idType, isRequired,\n+                objectIdReader.deserializer);\n         _objectIdReader = objectIdReader;\n-        _valueDeserializer = objectIdReader.deserializer;\n     }\n \n     protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser)\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n     /**\n      * Deserializer for {@link InetSocketAddress}.\n      *\n-     * @see <a href=\"https://github.com/FasterXML/jackson-databind/issues/48\">Issue 48</a>.\n+     * @see <a href=\"https://github.com/FasterXML/jackson-databind/issues/48\">Issue 48</a>\n      */\n     protected static class InetSocketAddressDeserializer\n             extends FromStringDeserializer<InetSocketAddress>\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonNumberFormatVisitor;\n-import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n /**\n  * Container class for serializers used for handling standard JDK-provided types.", "timestamp": 1373430893, "metainfo": ""}