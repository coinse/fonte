{"sha": "4e85ad12692cd6952ddc871bdf8c314ed8d673f7", "log": "refactor tests to move long-term failures under failing/", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n import com.fasterxml.jackson.annotation.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n \n \n         public Iterable<String> getValues() { return values; }\n     }\n-\n-    // [JACKSON-822]\n-    static interface Issue822Interface {\n-        public int getA();\n-    }\n-\n-    // If this annotation is added, things will work:\n-    //@com.fasterxml.jackson.databind.annotation.JsonSerialize(as=Issue822Interface.class)\n-    // but it should not be necessary when root type is passed\n-    static class Issue822Impl implements Issue822Interface {\n-        public int getA() { return 3; }\n-        public int getB() { return 9; }\n-    }\n     \n     /*\n     /**********************************************************\n      */\n \n     private final static ObjectMapper MAPPER = new ObjectMapper();\n-    \n+\n     public void testCollections()\n         throws IOException\n     {\n         assertEquals(\"{\\\"values\\\":[\\\"value\\\"]}\",\n                 MAPPER.writeValueAsString(new BeanWithIterable()));\n     }\n-    \n-    // [JACKSON-822]: ensure that type can be coerced\n-    public void testTypedArrays() throws Exception\n-    {\n-        assertEquals(\"[{\\\"a\\\":3}]\", MAPPER.writerWithType(Issue822Interface[].class).writeValueAsString(\n-                new Issue822Interface[] { new Issue822Impl() }));\n-    }\n-    \n-    // [JACKSON-822]: ensure that type can be coerced\n-    public void testTypedLists() throws Exception\n-    {\n-        /*\n-        String singleJson = MAPPER.writerWithType(Issue822Interface.class).writeValueAsString(new Issue822Impl());\n-        // start with specific value case:\n-        assertEquals(\"{\\\"a\\\":3}\", singleJson);\n-        */\n-\n-        // then lists\n-        List<Issue822Interface> list = new ArrayList<Issue822Interface>();\n-        list.add(new Issue822Impl());\n-        String listJson = MAPPER.writerWithType(new TypeReference<List<Issue822Interface>>(){})\n-                .writeValueAsString(list);\n-        assertEquals(\"[{\\\"a\\\":3}]\", listJson);\n-    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestCollectionSerialization.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class TestCollectionSerialization extends BaseMapTest\n+{\n+    // [JACKSON-822]\n+    static interface Issue822Interface {\n+        public int getA();\n+    }\n+\n+    // If this annotation is added, things will work:\n+    //@com.fasterxml.jackson.databind.annotation.JsonSerialize(as=Issue822Interface.class)\n+    // but it should not be necessary when root type is passed\n+    static class Issue822Impl implements Issue822Interface {\n+        public int getA() { return 3; }\n+        public int getB() { return 9; }\n+    }\n+\n+    // [JACKSON-822]: ensure that type can be coerced\n+    public void testTypedArrays() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(MapperFeature.USE_STATIC_TYPING);\n+        assertEquals(\"[{\\\"a\\\":3}]\", mapper.writerWithType(Issue822Interface[].class).writeValueAsString(\n+                new Issue822Interface[] { new Issue822Impl() }));\n+    }\n+    \n+    // [JACKSON-822]: ensure that type can be coerced\n+    public void testTypedLists() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(MapperFeature.USE_STATIC_TYPING);\n+\n+        String singleJson = mapper.writerWithType(Issue822Interface.class).writeValueAsString(new Issue822Impl());\n+        // start with specific value case:\n+        assertEquals(\"{\\\"a\\\":3}\", singleJson);\n+\n+        // then lists\n+        List<Issue822Interface> list = new ArrayList<Issue822Interface>();\n+        list.add(new Issue822Impl());\n+        String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>(){})\n+                .writeValueAsString(list);\n+        assertEquals(\"[{\\\"a\\\":3}]\", listJson);\n+    }\n+\n+}", "timestamp": 1338696984, "metainfo": ""}