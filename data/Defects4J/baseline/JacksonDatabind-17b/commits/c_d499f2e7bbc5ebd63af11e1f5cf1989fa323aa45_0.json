{"sha": "d499f2e7bbc5ebd63af11e1f5cf1989fa323aa45", "log": "Merge pull request #384 from yinzara/master  Added new UNWRAP_SINGLE_VALUE_ARRAYS DeserializationFeature", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n      * Feature is disabled by default.\n      */\n     ACCEPT_SINGLE_VALUE_AS_ARRAY(false),\n+    \n+    /**\n+     * Feature that determines whether it is acceptable to coerce single value array (in JSON)\n+     * values to the corresponding value type.  This is basically the opposite of the {@link #ACCEPT_SINGLE_VALUE_AS_ARRAY}\n+     * feature.  If more than one value is found in the array, a JsonMappingException is thrown.\n+     * <p>\n+     * Feature is disabled by default\n+     */\n+    UNWRAP_SINGLE_VALUE_ARRAYS(false),\n \n     /**\n      * Feature to allow \"unwrapping\" root-level JSON value, to match setting of\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n             } catch (Exception e) {\n                 wrapInstantiationProblem(e, ctxt);\n             }\n+        } else if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Object value = deserialize(jp, ctxt);\n+            if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\");\n+            }\n+            return value;\n         }\n         throw ctxt.mappingException(getBeanClass());\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n \n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n         protected java.util.Date _parseDate(JsonParser jp, DeserializationContext ctxt)\n             throws IOException, JsonProcessingException\n         {\n-            if (_customFormat != null && jp.getCurrentToken() == JsonToken.VALUE_STRING) {\n-                String str = jp.getText().trim();\n-                if (str.length() == 0) {\n-                    return (Date) getEmptyValue();\n+            if (_customFormat != null) {\n+                JsonToken t = jp.getCurrentToken();\n+                if (t == JsonToken.VALUE_STRING) {\n+                    String str = jp.getText().trim();\n+                    if (str.length() == 0) {\n+                        return (Date) getEmptyValue();\n+                    }\n+                    synchronized (_customFormat) {\n+                        try {\n+                            return _customFormat.parse(str);\n+                        } catch (ParseException e) {\n+                            throw new IllegalArgumentException(\"Failed to parse Date value '\"+str\n+                                    +\"' (format: \\\"\"+_formatString+\"\\\"): \"+e.getMessage());\n+                        }\n+                    }\n                 }\n-                synchronized (_customFormat) {\n-                    try {\n-                        return _customFormat.parse(str);\n-                    } catch (ParseException e) {\n-                        throw new IllegalArgumentException(\"Failed to parse Date value '\"+str\n-                                +\"' (format: \\\"\"+_formatString+\"\\\"): \"+e.getMessage());\n-                    }\n+                // Issue#381\n+                if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+                    jp.nextToken();\n+                    final Date parsed = _parseDate(jp, ctxt);\n+                    t = jp.nextToken();\n+                    if (t != JsonToken.END_ARRAY) {\n+                        throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                                \"Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array\");\n+                    }            \n+                    return parsed;            \n                 }\n             }\n             return super._parseDate(jp, ctxt);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n             }\n             return result;\n         }\n+        \n+        // Issue#381\n+        if (curr == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Enum<?> parsed = deserialize(jp, ctxt);\n+            curr = jp.nextToken();\n+            if (curr != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY,\n+                        \"Attempted to unwrap single value array for single '\" + _resolver.getEnumClass().getName() + \"' value but there was more than a single value in the array\");\n+            }\n+            return parsed;\n+        }\n+\n         throw ctxt.mappingException(_resolver.getEnumClass());\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n     @Override\n     public T deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n+        // Issue#381\n+        if (jp.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final T value = deserialize(jp, ctxt);\n+            if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\");\n+            }\n+            return value;\n+        }\n         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n         String text = jp.getValueAsString();\n         if (text != null) { // has String representation\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java\n             throws IOException, JsonProcessingException\n         {\n             JsonToken t = jp.getCurrentToken();\n-            int value;\n-\n+            \n             if (t == JsonToken.VALUE_NUMBER_INT) { // ok iff ascii value\n-                value = jp.getIntValue();\n+                int value = jp.getIntValue();\n                 if (value >= 0 && value <= 0xFFFF) {\n                     return Character.valueOf((char) value);\n                 }\n                 // actually, empty should become null?\n                 if (text.length() == 0) {\n                     return (Character) getEmptyValue();\n-                }\n+                }               \n+            } else if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+                //Issue#381\n+                jp.nextToken();\n+                final Character value = deserialize(jp, ctxt);\n+                if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                    throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                            \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n+                            );\n+                }\n+                return value;\n+            } else if (t == JsonToken.VALUE_NULL && !_valueClass.isPrimitive()) {\n+                //Issue#unreported\n+                //  This handles the case where the value required is the Character wrapper class and the token is the null token\n+                return getEmptyValue();\n             }\n             throw ctxt.mappingException(_valueClass, t);\n         }\n                     throw ctxt.weirdStringException(text, _valueClass, \"not a valid number\");\n                 }\n             }\n+            \n+            if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+                jp.nextToken();\n+                final Number value = deserialize(jp, ctxt);\n+                if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                    throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                            \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"\n+                            );\n+                }\n+                return value;\n+            }\n             // Otherwise, no can do:\n             throw ctxt.mappingException(_valueClass, t);\n         }\n                  * Could do by calling BigDecimal.toBigIntegerExact()\n                  */\n                 return jp.getDecimalValue().toBigInteger();\n+            } else if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+                jp.nextToken();\n+                final BigInteger value = deserialize(jp, ctxt);\n+                if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                    throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY,\n+                        \"Attempted to unwrap single value array for single 'BigInteger' value but there was more than a single value in the array\"\n+                    );\n+                }\n+                return value;\n             } else if (t != JsonToken.VALUE_STRING) { // let's do implicit re-parse\n                 // String is ok too, can easily convert; otherwise, no can do:\n                 throw ctxt.mappingException(_valueClass, t);\n-            }\n+            }            \n             text = jp.getText().trim();\n             if (text.length() == 0) {\n                 return null;\n                     throw ctxt.weirdStringException(text, _valueClass, \"not a valid representation\");\n                 }\n             }\n+            \n+            if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+                jp.nextToken();\n+                final BigDecimal value = deserialize(jp, ctxt);\n+                if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                    throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY,\n+                        \"Attempted to unwrap single value array for single 'BigDecimal' value but there was more than a single value in the array\"\n+                    );\n+                }\n+                return value;\n+            }\n             // Otherwise, no can do:\n             throw ctxt.mappingException(_valueClass, t);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StackTraceElementDeserializer.java\n import com.fasterxml.jackson.core.JsonToken;\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.JsonMappingException;\n \n public class StackTraceElementDeserializer\n                 }\n             }\n             return new StackTraceElement(className, methodName, fileName, lineNumber);\n+        } else if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final StackTraceElement value = deserialize(jp, ctxt);\n+            if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY,\n+                        \"Attempted to unwrap single value array for single 'java.lang.StackTraceElement' value but there was more than a single value in the array\"\n+                    );\n+            }\n+            return value;\n         }\n+            \n         throw ctxt.mappingException(_valueClass, t);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n             }\n             throw ctxt.weirdStringException(text, _valueClass, \"only \\\"true\\\" or \\\"false\\\" recognized\");\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final boolean parsed = _parseBooleanPrimitive(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'boolean' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n             }\n             throw ctxt.weirdStringException(text, _valueClass, \"only \\\"true\\\" or \\\"false\\\" recognized\");\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Boolean parsed = _parseBoolean(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Boolean' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Byte) getNullValue();\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Byte parsed = _parseByte(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         throw ctxt.mappingException(_valueClass, t);\n     }\n     \n         }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Short) getNullValue();\n+        }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Short parsed = _parseShort(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Short' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n         }\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return 0;\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final int parsed = _parseIntPrimitive(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'int' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Integer) getNullValue();\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Integer parsed = _parseInteger(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Integer' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Long) getNullValue();\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Long parsed = _parseLong(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Long' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         }\n         if (t == JsonToken.VALUE_NULL) {\n             return 0L;\n+        }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final long parsed = _parseLongPrimitive(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'long' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n         }\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Float) getNullValue();\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Float parsed = _parseFloat(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return 0.0f;\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final float parsed = _parseFloatPrimitive(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'float' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return (Double) getNullValue();\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Double parsed = _parseDouble(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Double' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n             // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n         if (t == JsonToken.VALUE_NULL) {\n             return 0.0;\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final double parsed = _parseDoublePrimitive(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'Byte' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n             // Otherwise, no can do:\n         throw ctxt.mappingException(_valueClass, t);\n     }\n                         \"not a valid representation (error: \"+iae.getMessage()+\")\");\n             }\n         }\n+        // Issue#381\n+        if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final Date parsed = _parseDate(jp, ctxt);\n+            t = jp.nextToken();\n+            if (t != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'java.util.Date' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         throw ctxt.mappingException(_valueClass, t);\n     }\n \n     protected final String _parseString(JsonParser jp, DeserializationContext ctxt)\n         throws IOException\n     {\n+        // Issue#381\n+        if (jp.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final String parsed = _parseString(jp, ctxt);\n+            if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         String value = jp.getValueAsString();\n         if (value != null) {\n             return value;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringDeserializer.java\n import com.fasterxml.jackson.core.*;\n \n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n \n     @Override\n     public String deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException\n     {\n+        // Issue#381\n+        if (jp.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n+            jp.nextToken();\n+            final String parsed = _parseString(jp, ctxt);\n+            if (jp.nextToken() != JsonToken.END_ARRAY) {\n+                throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n+                        \"Attempted to unwrap single value array for single 'String' value but there was more than a single value in the array\");\n+            }            \n+            return parsed;            \n+        }\n         // 22-Sep-2012, tatu: For 2.1, use this new method, may force coercion:\n         String text = jp.getValueAsString();\n         if (text != null) {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n      */\n \n     protected final ObjectMapper MAPPER = new ObjectMapper();\n+    \n \n     public void testSimple() throws Exception\n     {\n             verifyException(e, \"foobar\");\n         }\n     }\n+    \n+    // [Issue#381]\n+    public void testUnwrappedEnum() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        assertEquals(TestEnum.JACKSON, mapper.readValue(\"[\" + quote(\"JACKSON\") + \"]\", TestEnum.class));\n+    }\n+    \n+    public void testUnwrappedEnumException() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        try {\n+            assertEquals(TestEnum.JACKSON, mapper.readValue(\"[\" + quote(\"JACKSON\") + \"]\", TestEnum.class));\n+            fail(\"Exception was not thrown on deserializing a single array element of type enum\");\n+        } catch (JsonMappingException exp) {\n+            //exception as thrown correctly\n+        }\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionDeserialization.java\n         Exception exc = MAPPER.readValue(\"{\\\"suppressed\\\":[]}\", IOException.class);\n         assertNotNull(exc);\n     }\n+    \n+    // [Issue#381]\n+    public void testSingleValueArrayDeserialization() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        final IOException exp;\n+        try {\n+            throw new IOException(\"testing\");\n+        } catch (IOException internal) {\n+            exp = internal;\n+        }\n+        final String value = \"[\" + mapper.writeValueAsString(exp) + \"]\";\n+        \n+        final IOException cloned = mapper.readValue(value, IOException.class);\n+        assertEquals(exp.getMessage(), cloned.getMessage());    \n+        \n+        assertEquals(exp.getStackTrace().length, cloned.getStackTrace().length);\n+        for (int i = 0; i < exp.getStackTrace().length; i ++) {\n+            assertEquals(exp.getStackTrace()[i], cloned.getStackTrace()[i]);\n+        }\n+    }\n+    \n+    public void testSingleValueArrayDeserializationException() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        final IOException exp;\n+        try {\n+            throw new IOException(\"testing\");\n+        } catch (IOException internal) {\n+            exp = internal;\n+        }\n+        final String value = \"[\" + mapper.writeValueAsString(exp) + \"]\";\n+        \n+        try {\n+            mapper.readValue(value, IOException.class);\n+            fail(\"Exception not thrown when attempting to deserialize an IOException wrapped in a single value array with UNWRAP_SINGLE_VALUE_ARRAYS disabled\");\n+        } catch (JsonMappingException exp2) {\n+            //Exception thrown correctly\n+        }\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestGenerics.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestGenerics.java\n         SimpleBean bean = (SimpleBean) contents;\n         assertEquals(13, bean.x);\n     }\n+    \n+    public void testGenericWrapperWithSingleElementArray() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        Wrapper<SimpleBean> result = mapper.readValue\n+            (\"[{\\\"value\\\": [{ \\\"x\\\" : 13 }] }]\",\n+             new TypeReference<Wrapper<SimpleBean>>() { });\n+        assertNotNull(result);\n+        assertEquals(Wrapper.class, result.getClass());\n+        Object contents = result.value;\n+        assertNotNull(contents);\n+        assertEquals(SimpleBean.class, contents.getClass());\n+        SimpleBean bean = (SimpleBean) contents;\n+        assertEquals(13, bean.x);\n+    }\n \n     /**\n      * Unit test for verifying that we can use different\n             (\"{\\\"value\\\": 7}\", new TypeReference<Wrapper<Long>>() { });\n         assertEquals(new Wrapper<Long>(7L), result3);\n     }\n+    \n+    //[Issue#381]\n+    public void testMultipleWrappersSingleValueArray() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+\n+        // First, numeric wrapper\n+        Wrapper<Boolean> result = mapper.readValue\n+            (\"[{\\\"value\\\": [true]}]\", new TypeReference<Wrapper<Boolean>>() { });\n+        assertEquals(new Wrapper<Boolean>(Boolean.TRUE), result);\n+\n+        // Then string one\n+        Wrapper<String> result2 = mapper.readValue\n+            (\"[{\\\"value\\\": [\\\"abc\\\"]}]\", new TypeReference<Wrapper<String>>() { });\n+        assertEquals(new Wrapper<String>(\"abc\"), result2);\n+\n+        // And then number\n+        Wrapper<Long> result3 = mapper.readValue\n+            (\"[{\\\"value\\\": [7]}]\", new TypeReference<Wrapper<Long>>() { });\n+        assertEquals(new Wrapper<Long>(7L), result3);\n+    }\n \n     /**\n      * Unit test for verifying fix to [JACKSON-109].\n         SimpleBean bean = (SimpleBean) contents;\n         assertEquals(9, bean.x);\n     }\n+    \n+    // [Issue#381]\n+    public void testArrayOfGenericWrappersSingleValueArray() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        Wrapper<SimpleBean>[] result = mapper.readValue\n+            (\"[ {\\\"value\\\": [ { \\\"x\\\" : [ 9 ] } ] } ]\",\n+             new TypeReference<Wrapper<SimpleBean>[]>() { });\n+        assertNotNull(result);\n+        assertEquals(Wrapper[].class, result.getClass());\n+        assertEquals(1, result.length);\n+        Wrapper<SimpleBean> elem = result[0];\n+        Object contents = elem.value;\n+        assertNotNull(contents);\n+        assertEquals(SimpleBean.class, contents.getClass());\n+        SimpleBean bean = (SimpleBean) contents;\n+        assertEquals(9, bean.x);\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n         }\n         assertEquals(0, result.remaining());\n     }\n+    \n+    // [Issue#381]\n+    public void testSingleElementArray() throws Exception {\n+        final int intTest = 932832;\n+        final double doubleTest = 32.3234;\n+        final long longTest = 2374237428374293423L;\n+        final short shortTest = (short) intTest;\n+        final float floatTest = 84.3743f;\n+        final byte byteTest = (byte) 43;\n+        final char charTest = 'c';\n+\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+\n+        final int intValue = mapper.readValue(asArray(intTest), Integer.TYPE);\n+        assertEquals(intTest, intValue);\n+        final Integer integerWrapperValue = mapper.readValue(asArray(Integer.valueOf(intTest)), Integer.class);\n+        assertEquals(Integer.valueOf(intTest), integerWrapperValue);\n+\n+        final double doubleValue = mapper.readValue(asArray(doubleTest), Double.class);\n+        assertEquals(doubleTest, doubleValue);\n+        final Double doubleWrapperValue = mapper.readValue(asArray(Double.valueOf(doubleTest)), Double.class);\n+        assertEquals(Double.valueOf(doubleTest), doubleWrapperValue);\n+\n+        final long longValue = mapper.readValue(asArray(longTest), Long.TYPE);\n+        assertEquals(longTest, longValue);\n+        final Long longWrapperValue = mapper.readValue(asArray(Long.valueOf(longTest)), Long.class);\n+        assertEquals(Long.valueOf(longTest), longWrapperValue);\n+\n+        final short shortValue = mapper.readValue(asArray(shortTest), Short.TYPE);\n+        assertEquals(shortTest, shortValue);\n+        final Short shortWrapperValue = mapper.readValue(asArray(Short.valueOf(shortTest)), Short.class);\n+        assertEquals(Short.valueOf(shortTest), shortWrapperValue);\n+\n+        final float floatValue = mapper.readValue(asArray(floatTest), Float.TYPE);\n+        assertEquals(floatTest, floatValue);\n+        final Float floatWrapperValue = mapper.readValue(asArray(Float.valueOf(floatTest)), Float.class);\n+        assertEquals(Float.valueOf(floatTest), floatWrapperValue);\n+\n+        final byte byteValue = mapper.readValue(asArray(byteTest), Byte.TYPE);\n+        assertEquals(byteTest, byteValue);\n+        final Byte byteWrapperValue = mapper.readValue(asArray(Byte.valueOf(byteTest)), Byte.class);\n+        assertEquals(Byte.valueOf(byteTest), byteWrapperValue);\n+\n+        final char charValue = mapper.readValue(asArray(quote(String.valueOf(charTest))), Character.TYPE);\n+        assertEquals(charTest, charValue);\n+        final Character charWrapperValue = mapper.readValue(asArray(quote(String.valueOf(charTest))), Character.class);\n+        assertEquals(Character.valueOf(charTest), charWrapperValue);\n+\n+        final boolean booleanTrueValue = mapper.readValue(asArray(true), Boolean.TYPE);\n+        assertTrue(booleanTrueValue);\n+\n+        final boolean booleanFalseValue = mapper.readValue(asArray(false), Boolean.TYPE);\n+        assertFalse(booleanFalseValue);\n+\n+        final Boolean booleanWrapperTrueValue = mapper.readValue(asArray(Boolean.valueOf(true)), Boolean.class);\n+        assertEquals(Boolean.TRUE, booleanWrapperTrueValue);\n+    }\n+\n+    private static String asArray(Object value) {\n+        final String stringVal = value.toString();\n+        return new StringBuilder(stringVal.length() + 2).append(\"[\").append(stringVal).append(\"]\").toString();\n+    }\n+\n+    public void testSingleElementArrayException() throws Exception {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        try {\n+            mapper.readValue(\"[42]\", Integer.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42]\", Integer.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[42.273]\", Double.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42.2723]\", Double.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[42342342342342]\", Long.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42342342342342342]\", Long.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[42]\", Short.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42]\", Short.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[327.2323]\", Float.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[82.81902]\", Float.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[22]\", Byte.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[22]\", Byte.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"['d']\", Character.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"['d']\", Character.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+\n+        try {\n+            mapper.readValue(\"[true]\", Boolean.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[true]\", Boolean.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+    }\n+\n+    public void testMultiValueArrayException() throws IOException {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        try {\n+            mapper.readValue(\"[42,42]\", Integer.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42,42]\", Integer.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[42.273,42.273]\", Double.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42.2723,42.273]\", Double.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[42342342342342,42342342342342]\", Long.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42342342342342342,42342342342342]\", Long.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[42,42]\", Short.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[42,42]\", Short.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[327.2323,327.2323]\", Float.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[82.81902,327.2323]\", Float.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[22,23]\", Byte.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[22,23]\", Byte.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(asArray(quote(\"c\") + \",\"  + quote(\"d\")), Character.class);\n+            \n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(asArray(quote(\"c\") + \",\"  + quote(\"d\")), Character.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        try {\n+            mapper.readValue(\"[true,false]\", Boolean.class);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        try {\n+            mapper.readValue(\"[true,false]\", Boolean.TYPE);\n+            fail(\"Single value array didn't throw an exception when DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n         assertNotNull(array);\n         assertEquals(1, array.length);\n         assertFalse(array[0]);\n+        \n+        // [Issue#381]\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[true]}\"), BooleanBean.class);\n+        assertTrue(result._v);\n+        \n+        try {\n+            mapper.readValue(new StringReader(\"[{\\\"v\\\":[true,true]}]\"), BooleanBean.class);\n+            fail(\"Did not throw exception while reading a value from a multi value array with UNWRAP_SINGLE_VALUE_ARRAY feature enabled\");\n+        } catch (JsonMappingException exp) {\n+            //threw exception as required\n+        }\n+        \n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[null]}\"), BooleanBean.class);\n+        assertNotNull(result);\n+        assertFalse(result._v);\n+        \n+        result = mapper.readValue(new StringReader(\"[{\\\"v\\\":[null]}]\"), BooleanBean.class);\n+        assertNotNull(result);\n+        assertFalse(result._v);\n+        \n+        array = mapper.readValue(new StringReader(\"[ [ null ] ]\"), boolean[].class);\n+        assertNotNull(array);\n+        assertEquals(1, array.length);\n+        assertFalse(array[0]);\n     }\n \n     public void testIntPrimitive() throws Exception\n \n         // should work with arrays too..\n         int[] array = MAPPER.readValue(new StringReader(\"[ null ]\"), int[].class);\n+        assertNotNull(array);\n+        assertEquals(1, array.length);\n+        assertEquals(0, array[0]);\n+        \n+        // [Issue#381]\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        try {\n+            mapper.readValue(new StringReader(\"{\\\"v\\\":[3]}\"), IntBean.class);\n+            fail(\"Did not throw exception when reading a value from a single value array with the UNWRAP_SINGLE_VALUE_ARRAYS feature disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Correctly threw exception\n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[3]}\"), IntBean.class);\n+        assertEquals(3, result._v);\n+        \n+        result = mapper.readValue(new StringReader(\"[{\\\"v\\\":[3]}]\"), IntBean.class);\n+        assertEquals(3, result._v);\n+        \n+        try {\n+            mapper.readValue(new StringReader(\"[{\\\"v\\\":[3,3]}]\"), IntBean.class);\n+            fail(\"Did not throw exception while reading a value from a multi value array with UNWRAP_SINGLE_VALUE_ARRAY feature enabled\");\n+        } catch (JsonMappingException exp) {\n+            //threw exception as required\n+        }\n+        \n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[null]}\"), IntBean.class);\n+        assertNotNull(result);\n+        assertEquals(0, result._v);\n+\n+        array = mapper.readValue(new StringReader(\"[ [ null ] ]\"), int[].class);\n         assertNotNull(array);\n         assertEquals(1, array.length);\n         assertEquals(0, array[0]);\n         assertNotNull(array);\n         assertEquals(1, array.length);\n         assertEquals(0.0, array[0]);\n+        \n+        // [Issue#381]\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        try {\n+            mapper.readValue(new StringReader(\"{\\\"v\\\":[\" + value + \"]}\"), DoubleBean.class);\n+            fail(\"Did not throw exception when reading a value from a single value array with the UNWRAP_SINGLE_VALUE_ARRAYS feature disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Correctly threw exception\n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[\" + value + \"]}\"), DoubleBean.class);\n+        assertEquals(value, result._v);\n+        \n+        result = mapper.readValue(new StringReader(\"[{\\\"v\\\":[\" + value + \"]}]\"), DoubleBean.class);\n+        assertEquals(value, result._v);\n+        \n+        try {\n+            mapper.readValue(new StringReader(\"[{\\\"v\\\":[\" + value + \",\" + value + \"]}]\"), DoubleBean.class);\n+            fail(\"Did not throw exception while reading a value from a multi value array with UNWRAP_SINGLE_VALUE_ARRAY feature enabled\");\n+        } catch (JsonMappingException exp) {\n+            //threw exception as required\n+        }\n+        \n+        result = mapper.readValue(new StringReader(\"{\\\"v\\\":[null]}\"), DoubleBean.class);\n+        assertNotNull(result);\n+        assertEquals(0d, result._v);\n+\n+        array = mapper.readValue(new StringReader(\"[ [ null ] ]\"), double[].class);\n+        assertNotNull(array);\n+        assertEquals(1, array.length);\n+        assertEquals(0d, array[0]);\n     }\n \n     public void testDoublePrimitiveNonNumeric() throws Exception\n         String result = MAPPER.readValue(new StringReader(\"\\\"\"+value+\"\\\"\"), String.class);\n         assertEquals(value, result);\n     }\n+    \n+    public void testSingleStringWrapped() throws Exception\n+    {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        String value = \"FOO!\";\n+        try {\n+            mapper.readValue(new StringReader(\"[\\\"\"+value+\"\\\"]\"), String.class);\n+            fail(\"Exception not thrown when attempting to unwrap a single value 'String' array into a simple String\");\n+        } catch (JsonMappingException exp) {\n+            //exception thrown correctly\n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        try {\n+            mapper.readValue(new StringReader(\"[\\\"\"+value+\"\\\",\\\"\"+value+\"\\\"]\"), String.class);\n+            fail(\"Exception not thrown when attempting to unwrap a single value 'String' array that contained more than one value into a simple String\");\n+        } catch (JsonMappingException exp) {\n+            //exception thrown correctly\n+        }\n+        \n+        String result = mapper.readValue(new StringReader(\"[\\\"\"+value+\"\\\"]\"), String.class);\n+        assertEquals(value, result);\n+    }\n \n     public void testNull() throws Exception\n     {\n         // null doesn't really have a type, fake by assuming Object\n         Object result = MAPPER.readValue(\"   null\", Object.class);\n         assertNull(result);\n-    }\n+    }  \n \n     public void testClass() throws Exception\n     {\n-        Class<?> result = MAPPER.readValue(\"\\\"java.lang.String\\\"\", Class.class);\n+        final ObjectMapper mapper = new ObjectMapper();        \n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);        \n+        \n+        Class<?> result = mapper.readValue(quote(String.class.getName()), Class.class);\n         assertEquals(String.class, result);\n+        \n+        //[Issue#381]\n+        try {\n+            mapper.readValue(\"[\" + quote(String.class.getName()) + \"]\", Class.class);\n+            fail(\"Did not throw exception when UNWRAP_SINGLE_VALUE_ARRAYS feature was disabled and attempted to read a Class array containing one element\");\n+        } catch (JsonMappingException exp) {\n+            \n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        try {\n+           mapper.readValue(\"[\" + quote(Object.class.getName()) + \",\" + quote(Object.class.getName()) +\"]\", Class.class); \n+           fail(\"Did not throw exception when UNWRAP_SINGLE_VALUE_ARRAYS feature was enabled and attempted to read a Class array containing two elements\");\n+        } catch (JsonMappingException exp) {\n+            \n+        }               \n+        result = mapper.readValue(\"[\" + quote(String.class.getName()) + \"]\", Class.class);\n+        assertEquals(String.class, result);\n     }\n \n     public void testBigDecimal() throws Exception\n     {\n+        final ObjectMapper mapper = objectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n         BigDecimal value = new BigDecimal(\"0.001\");\n-        BigDecimal result = MAPPER.readValue(new StringReader(value.toString()), BigDecimal.class);\n+        BigDecimal result = mapper.readValue(value.toString(), BigDecimal.class);\n         assertEquals(value, result);\n+        \n+        //Issue#381\n+        try {\n+            mapper.readValue(\"[\" + value.toString() + \"]\", BigDecimal.class);\n+            fail(\"Exception was not thrown when attempting to read a single value array of BigDecimal when UNWRAP_SINGLE_VALUE_ARRAYS feature is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        result = mapper.readValue(\"[\" + value.toString() + \"]\", BigDecimal.class);\n+        assertEquals(value, result);\n+        \n+        try {\n+            mapper.readValue(\"[\" + value.toString() + \",\" + value.toString() + \"]\", BigDecimal.class);\n+            fail(\"Exception was not thrown when attempting to read a muti value array of BigDecimal when UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n     }\n \n     public void testBigInteger() throws Exception\n     {\n+        final ObjectMapper mapper = objectMapper();\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n         BigInteger value = new BigInteger(\"-1234567890123456789012345567809\");\n-        BigInteger result = MAPPER.readValue(new StringReader(value.toString()), BigInteger.class);\n+        BigInteger result = mapper.readValue(new StringReader(value.toString()), BigInteger.class);\n         assertEquals(value, result);\n+        \n+        //Issue#381\n+        try {\n+            mapper.readValue(\"[\" + value.toString() + \"]\", BigInteger.class);\n+            fail(\"Exception was not thrown when attempting to read a single value array of BigInteger when UNWRAP_SINGLE_VALUE_ARRAYS feature is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        result = mapper.readValue(\"[\" + value.toString() + \"]\", BigInteger.class);\n+        assertEquals(value, result);\n+        \n+        try {\n+            mapper.readValue(\"[\" + value.toString() + \",\" + value.toString() + \"]\", BigInteger.class);\n+            fail(\"Exception was not thrown when attempting to read a muti value array of BigInteger when UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled\");\n+        } catch (JsonMappingException exp) {\n+            //Exception was thrown correctly\n+        }        \n     }\n \n     public void testUUID() throws Exception\n     {\n+        final ObjectMapper mapper = objectMapper();\n+        \n         final String NULL_UUID = \"00000000-0000-0000-0000-000000000000\";\n         // first, couple of generated UUIDs:\n         for (String value : new String[] {\n                 \"82994ac2-7b23-49f2-8cc5-e24cf6ed77be\",\n                 \"00000007-0000-0000-0000-000000000000\"\n         }) {\n+            \n+            mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+            \n             UUID uuid = UUID.fromString(value);\n             assertEquals(uuid,\n-                    MAPPER.readValue(quote(value), UUID.class));\n+                    mapper.readValue(quote(value), UUID.class));\n+            \n+            try {\n+                mapper.readValue(\"[\" + quote(value) + \"]\", UUID.class);\n+                fail(\"Exception was not thrown when UNWRAP_SINGLE_VALUE_ARRAYS is disabled and attempted to read a single value array as a single element\");\n+            } catch (JsonMappingException exp) {\n+                //Exception thrown successfully\n+            }\n+            \n+            mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+            \n+            assertEquals(uuid,\n+                    mapper.readValue(\"[\" + quote(value) + \"]\", UUID.class));\n+            \n+            try {\n+                mapper.readValue(\"[\" + quote(value) + \",\" + quote(value) + \"]\", UUID.class);\n+                fail(\"Exception was not thrown when UNWRAP_SINGLE_VALUE_ARRAYS is enabled and attempted to read a multi value array as a single element\");\n+            } catch (JsonMappingException exp) {\n+                //Exception thrown successfully\n+            }\n         }\n         // then use templating; note that these are not exactly valid UUIDs\n         // wrt spec (type bits etc), but JDK UUID should deal ok\n         for (int i = 0; i < chars.length(); ++i) {\n             String value = TEMPL.replace('0', chars.charAt(i));\n             assertEquals(UUID.fromString(value).toString(),\n-                    MAPPER.readValue(quote(value), UUID.class).toString());\n+                    mapper.readValue(quote(value), UUID.class).toString());\n         }\n \n         // also: see if base64 encoding works as expected\n         String base64 = Base64Variants.getDefaultVariant().encode(new byte[16]);\n         assertEquals(UUID.fromString(NULL_UUID),\n-                MAPPER.readValue(quote(base64), UUID.class));\n+                mapper.readValue(quote(base64), UUID.class));\n     }\n \n     public void testUUIDAux() throws Exception\n \n     public void testURI() throws Exception\n     {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        \n         URI value = new URI(\"http://foo.com\");\n-        assertEquals(value, MAPPER.readValue(\"\\\"\"+value.toString()+\"\\\"\", URI.class));\n+        assertEquals(value, mapper.readValue(\"\\\"\"+value.toString()+\"\\\"\", URI.class));\n+        \n+        //[Issue#381]\n+        mapper.disable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        try {            \n+            assertEquals(value, mapper.readValue(\"[\\\"\"+value.toString()+\"\\\"]\", URI.class));\n+            fail(\"Did not throw exception for single value array when UNWRAP_SINGLE_VALUE_ARRAYS is disabled\");\n+        } catch (JsonMappingException exp) {\n+            //exception thrown successfully\n+        }\n+        \n+        try {\n+            assertEquals(value, mapper.readValue(\"[\\\"\"+value.toString()+\"\\\",\\\"\"+value.toString()+\"\\\"]\", URI.class));\n+            fail(\"Did not throw exception for single value array when there were multiple values\");\n+        } catch (JsonMappingException exp) {\n+            //exception thrown successfully\n+        }\n+        \n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        assertEquals(value, mapper.readValue(\"[\\\"\"+value.toString()+\"\\\"]\", URI.class));\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestTimestampDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestTimestampDeserialization.java\n \n         assertEquals(\"Date: expect \"+value+\" (\"+value.getTime()+\"), got \"+result+\" (\"+result.getTime()+\")\", value.getTime(), result.getTime());\n     }\n+    \n+    public void testTimestampUtilSingleElementArray() throws Exception\n+    {\n+        final ObjectMapper mapper = new ObjectMapper();\n+        mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);\n+        \n+        long now = System.currentTimeMillis();\n+        java.sql.Timestamp value = new java.sql.Timestamp(now);\n+\n+        // First from long\n+        assertEquals(value, mapper.readValue(\"[\"+now+\"]\", java.sql.Timestamp.class));\n+\n+        String dateStr = serializeTimestampAsString(value);\n+        java.sql.Timestamp result = mapper.readValue(\"[\\\"\"+dateStr+\"\\\"]\", java.sql.Timestamp.class);\n+\n+        assertEquals(\"Date: expect \"+value+\" (\"+value.getTime()+\"), got \"+result+\" (\"+result.getTime()+\")\", value.getTime(), result.getTime());\n+    }\n \n     /*\n     /**********************************************************", "timestamp": 1389376208, "metainfo": ""}