{"sha": "28ff1a967d2b047813feb525d656ce3c81d389fc", "log": "Implement [JACKSON-546]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n             // and then we must get something...\n             t = jp.nextToken();\n             if (t == null) {\n-                /* [JACKSON-99] Should throw EOFException, closest thing\n-                 *   semantically\n+                /* [JACKSON-546] Throw mapping exception, since it's failure to map,\n+                 *   not an actual parsing problem\n                  */\n-                throw new EOFException(\"No content to map to Object due to end of input\");\n+                throw JsonMappingException.from(jp, \"No content to map due to end-of-input\");\n             }\n         }\n         return t;\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n         JsonToken t = jp.getCurrentToken();\n         if (t == null) { // and then we must get something...\n             t = jp.nextToken();\n-            if (t == null) { // [JACKSON-99] Should throw EOFException?\n-                throw new EOFException(\"No content to map to Object due to end of input\");\n+            if (t == null) {\n+                /* [JACKSON-546] Throw mapping exception, since it's failure to map,\n+                 *   not an actual parsing problem\n+                 */\n+                throw JsonMappingException.from(jp, \"No content to map due to end-of-input\");\n             }\n         }\n         return t;\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandling.java\n \n     /**\n      * Simple test to check behavior when end-of-stream is encountered\n-     * without content. Should throw EOFException.\n+     * without content. Used to expect EOFException (Jackson 1.x); but\n+     * nowadays ought to be JsonMappingException\n      */\n     public void testExceptionWithEmpty() throws Exception\n     {\n             Object result = mapper.readValue(\"    \", Object.class);\n             fail(\"Expected an exception, but got result value: \"+result);\n         } catch (Exception e) {\n-            verifyException(e, EOFException.class, \"No content\");\n+            verifyException(e, JsonMappingException.class, \"No content\");\n         }\n     }\n \n             I = mapper.readValue(jp, Integer.class);\n             fail(\"Should have gotten an exception\");\n         } catch (IOException e) {\n-            verifyException(e, EOFException.class, \"No content\");\n+            verifyException(e, JsonMappingException.class, \"No content\");\n         }\n         // also: should have no current token after end-of-input\n         JsonToken t = jp.getCurrentToken();", "timestamp": 1326851691, "metainfo": ""}