{"sha": "5bdafdc05628efcca7384bcd384be264dc9dcb23", "log": "One minor change to handling of native type ids; allow coercion from empty string to null if `DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT` is set", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java\n         if (jp.canReadTypeId()) {\n             Object typeId = jp.getTypeId();\n             if (typeId != null) {\n-                Object ob = _deserializeWithNativeTypeId(jp, ctxt, typeId);\n-                if (ob != null) {\n-                    return ob;\n-                }\n+                return _deserializeWithNativeTypeId(jp, ctxt, typeId);\n             }\n         }\n         boolean hadStartArray = jp.isExpectedStartArrayToken();\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n         if (jp.canReadTypeId()) {\n             Object typeId = jp.getTypeId();\n             if (typeId != null) {\n-                Object ob = _deserializeWithNativeTypeId(jp, ctxt, typeId);\n-                if (ob != null) {\n-                    return ob;\n-                }\n+                return _deserializeWithNativeTypeId(jp, ctxt, typeId);\n             }\n         }\n         \n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java\n      * @since 2.4\n      */\n     protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId)\n-            throws IOException\n+        throws IOException\n     {\n         JsonDeserializer<Object> deser;\n         if (typeId == null) {", "timestamp": 1399258376, "metainfo": ""}