{"sha": "fd4eb1b1503d66138881f645de6f8e5ef9f233e1", "log": "Fix #601", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n             if (ser != null) { break; }\n         }\n         if (ser == null) {\n-            /* 05-Nov-2014, tatu: As per [databind#601], may be easier NOT to use specialized\n-             *    serializers, if custom serialization of keys is needed.\n-             */\n+            // 08-Nov-2014, tatu: As per [databind#601], better just use default Map serializer\n+            /*\n             if (EnumMap.class.isAssignableFrom(type.getRawClass())\n                     && ((keySerializer == null) || ClassUtil.isJacksonStdImpl(keySerializer))) {\n                 JavaType keyType = type.getKeyType();\n                 ser = new EnumMapSerializer(type.getContentType(), staticTyping, enums,\n                     elementTypeSerializer, elementValueSerializer);\n             } else {\n-                Object filterId = findFilterId(config, beanDesc);\n-                ser = MapSerializer.construct(config.getAnnotationIntrospector().findPropertiesToIgnore(beanDesc.getClassInfo()),\n+            */\n+            Object filterId = findFilterId(config, beanDesc);\n+            ser = MapSerializer.construct(config.getAnnotationIntrospector().findPropertiesToIgnore(beanDesc.getClassInfo()),\n                     type, staticTyping, elementTypeSerializer,\n                     keySerializer, elementValueSerializer, filterId);\n-            }\n         }\n         // [Issue#120]: Allow post-processing\n         if (_factoryConfig.hasSerializerModifiers()) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n  * Specialized serializer for {@link EnumMap}s. Somewhat tricky to\n  * implement because actual Enum value type may not be available;\n  * and if not, it can only be gotten from actual instance.\n+ * \n+ * @deprecated Since 2.4.4; standard {@link MapSerializer} works better.\n  */\n @JacksonStdImpl\n+@Deprecated\n public class EnumMapSerializer\n     extends ContainerSerializer<EnumMap<? extends Enum<?>, ?>>\n     implements ContextualSerializer\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n         assertEquals(\"\\\"B\\\"\", mapper.writeValueAsString(EnumWithSubClass.B));\n     }\n \n-    // [JACKSON-193]\n     public void testEnumsWithJsonValue() throws Exception\n     {\n         assertEquals(\"\\\"bar\\\"\", mapper.writeValueAsString(EnumWithJsonValue.B));\n     }\n \n-    // also, for [JACKSON-193], needs to work via mix-ins\n     public void testEnumsWithJsonValueUsingMixin() throws Exception\n     {\n         // can't share, as new mix-ins are added\n         assertEquals(\"\\\"b\\\"\", m.writeValueAsString(TestEnum.B));\n     }\n \n+    // [databind#601]\n+    public void testEnumsWithJsonValueInMap() throws Exception\n+    {\n+        EnumMap<EnumWithJsonValue,String> input = new EnumMap<EnumWithJsonValue,String>(EnumWithJsonValue.class);\n+        input.put(EnumWithJsonValue.B, \"x\");\n+        assertEquals(\"{\\\"\"+EnumWithJsonValue.B.toString()+\"\\\":\\\"x\\\"}\", mapper.writeValueAsString(input));\n+    }\n+    \n     /**\n      * Test for ensuring that @JsonSerializable is used with Enum types as well\n      * as with any other types.", "timestamp": 1415506114, "metainfo": ""}