{"sha": "593257dd0f9a50458a8a589410649fcaa80343a9", "log": "Add test for deserialize-POJOs-from-arrays feature (not implemented yet)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n \n     /**\n      * Copy-constructor that can be used by sub-classes to allow\n-     * copy-on-write styling copying of settings of an existing instance.\n+     * copy-on-write style copying of settings of an existing instance.\n      */\n     protected BeanDeserializer(BeanDeserializerBase src) {\n     \tsuper(src, src._ignoreAllUnknown);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java\n             SerializerProvider provider, TypeSerializer typeSer)\n         throws IOException, JsonGenerationException\n     {\n-        /* Should not even get here; but let's be nice and re-routed\n+        /* Should not even get here; but let's be nice and re-route\n          * if need be.\n          */\n         _defaultSerializer.serializeWithType(bean, jgen, provider, typeSer);\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestPojoAsArrayDeserialization.java\n+package com.fasterxml.jackson.databind.struct;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class TestPojoAsArrayDeserialization extends BaseMapTest\n+{\n+    static class Pojo\n+    {\n+        @JsonFormat(shape=JsonFormat.Shape.ARRAY)\n+        public PojoValue value;\n+\n+        public Pojo() { }\n+        public Pojo(String name, int x, int y, boolean c) {\n+            value = new PojoValue(name, x, y, c);\n+        }\n+    }\n+\n+    // note: must be serialized/deserialized alphabetically; fields NOT declared in that order\n+    @JsonPropertyOrder(alphabetic=true)\n+    static class PojoValue\n+    {\n+        public int x, y;\n+        public String name;\n+        public boolean complete;\n+\n+        public PojoValue() { }\n+        public PojoValue(String name, int x, int y, boolean c) {\n+            this.name = name;\n+            this.x = x;\n+            this.y = y;\n+            this.complete = c;\n+        }\n+    }\n+\n+    @JsonPropertyOrder(alphabetic=true)\n+    @JsonFormat(shape=JsonFormat.Shape.ARRAY)\n+    static class FlatPojo\n+    {\n+        public int x, y;\n+        public String name;\n+        public boolean complete;\n+\n+        public FlatPojo() { }\n+        public FlatPojo(String name, int x, int y, boolean c) {\n+            this.name = name;\n+            this.x = x;\n+            this.y = y;\n+            this.complete = c;\n+        }\n+    }\n+    \n+    /*\n+    /*****************************************************\n+    /* Unit tests\n+    /*****************************************************\n+     */\n+\n+    private final static ObjectMapper MAPPER = new ObjectMapper();\n+    \n+    /**\n+     * Test that verifies that property annotation works\n+     */\n+    public void testSimplePropertyValue() throws Exception\n+    {\n+        String json = \"{\\\"value\\\":[true,\\\"Foobar\\\",42,13]}\";\n+        Pojo p = MAPPER.readValue(json, Pojo.class);\n+        assertNotNull(p.value);\n+        assertTrue(p.value.complete);\n+        assertEquals(\"Foobar\", p.value.name);\n+        assertEquals(42, p.value.x);\n+        assertEquals(13, p.value.y);\n+    }\n+\n+    /**\n+     * Test that verifies that Class annotation works\n+     */\n+    public void testSimpleRootValue() throws Exception\n+    {\n+        String json = \"[false,\\\"Bubba\\\",1,2]\";\n+        FlatPojo p = MAPPER.readValue(json, FlatPojo.class);\n+        assertFalse(p.complete);\n+        assertEquals(\"Bubba\", p.name);\n+        assertEquals(1, p.x);\n+        assertEquals(2, p.y);\n+    }\n+    \n+}", "timestamp": 1342501128, "metainfo": ""}