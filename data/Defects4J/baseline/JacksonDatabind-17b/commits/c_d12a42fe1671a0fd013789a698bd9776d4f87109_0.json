{"sha": "d12a42fe1671a0fd013789a698bd9776d4f87109", "log": "Fixed #226", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n \n         _nonStandardCreation = src._nonStandardCreation;\n         UnwrappedPropertyHandler uph = src._unwrappedPropertyHandler;\n-        \n+\n         if (unwrapper != null) {\n             // delegate further unwraps, if any\n             if (uph != null) { // got handler, delegate\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/UnwrappedPropertyHandler.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/UnwrappedPropertyHandler.java\n  */\n public class UnwrappedPropertyHandler\n {\n-    protected final ArrayList<SettableBeanProperty> _properties = new ArrayList<SettableBeanProperty>();\n-    \n-    public UnwrappedPropertyHandler()  { }\n+    protected final List<SettableBeanProperty> _properties;\n+\n+    public UnwrappedPropertyHandler()  {\n+        _properties = new ArrayList<SettableBeanProperty>();\n+   }\n+    protected UnwrappedPropertyHandler(List<SettableBeanProperty> props)  {\n+        _properties = props;\n+    }\n \n     public void addProperty(SettableBeanProperty property) {\n         _properties.add(property);\n \n     public UnwrappedPropertyHandler renameAll(NameTransformer transformer)\n     {\n-        ArrayList<SettableBeanProperty> oldProps = new ArrayList<SettableBeanProperty>(_properties);\n-        Iterator<SettableBeanProperty> it = oldProps.iterator();\n-        _properties.clear();\n-\n-        while (it.hasNext()) {\n-            SettableBeanProperty prop = it.next();\n+        ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(_properties.size());\n+        for (SettableBeanProperty prop : _properties) {\n             String newName = transformer.transform(prop.getName());\n             prop = prop.withName(newName);\n             JsonDeserializer<?> deser = prop.getValueDeserializer();\n                     prop = prop.withValueDeserializer(newDeser);\n                 }\n             }\n-            _properties.add(prop);\n+            newProps.add(prop);\n         }\n-        return this;\n+        return new UnwrappedPropertyHandler(newProps);\n     }\n     \n     public Object processUnwrapped(JsonParser originalParser, DeserializationContext ctxt, Object bean,\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java\n         public int value;\n     }\n \n+    // For [Issue#226]\n+    static class Parent {\n+        @JsonUnwrapped(prefix=\"c1.\")\n+        public Child c1;\n+        @JsonUnwrapped(prefix=\"c2.\")\n+        public Child c2;\n+      }\n+\n+    static class Child {\n+        @JsonUnwrapped(prefix=\"sc2.\")\n+        public SubChild sc1;\n+      }\n+\n+    static class SubChild {\n+        public String value;\n+    }\n+    \n     // // // Reuse mapper to keep tests bit faster\n \n     private final ObjectMapper MAPPER = new ObjectMapper();\n         assertEquals(\"Joe\", root.general.names.name);\n         assertEquals(42, root.misc.value);\n     }\n+\n+    public void testIssue226() throws Exception\n+    {\n+        Parent input = new Parent();\n+        input.c1 = new Child();\n+        input.c1.sc1 = new SubChild();\n+        input.c1.sc1.value = \"a\";\n+        input.c2 = new Child();\n+        input.c2.sc1 = new SubChild();\n+        input.c2.sc1.value = \"b\";\n+\n+        String json = MAPPER.writeValueAsString(input);\n+\n+        Parent output = MAPPER.readValue(json, Parent.class);\n+        assertNotNull(output.c1);\n+        assertNotNull(output.c2);\n+\n+        assertNotNull(output.c1.sc1);\n+        assertNotNull(output.c2.sc1);\n+        \n+        assertEquals(\"a\", output.c1.sc1.value);\n+        assertEquals(\"b\", output.c2.sc1.value);\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithPrefix.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithPrefix.java\n \n         @JsonUnwrapped(prefix=\"map.\")\n         public Map<String, Object> map;\n-    }\n-\n-    static class Parent {\n-        @JsonUnwrapped(prefix=\"c1.\")\n-        public Child c1;\n-        @JsonUnwrapped(prefix=\"c2.\")\n-        public Child c2;\n-      }\n-\n-    static class Child {\n-        @JsonUnwrapped(prefix=\"sc2.\")\n-        public SubChild sc1;\n-      }\n-\n-    static class SubChild {\n-        public String value;\n     }\n     \n     // // // Reuse mapper to keep tests bit faster\n         assertEquals(1, root.map.size());\n         assertEquals(6, ((Number)root.map.get(\"test\")).intValue());\n     }\n-\n-    public void testIssue226() throws Exception\n-    {\n-        Parent input = new Parent();\n-        input.c1 = new Child();\n-        input.c1.sc1 = new SubChild();\n-        input.c1.sc1.value = \"a\";\n-        input.c2 = new Child();\n-        input.c2.sc1 = new SubChild();\n-        input.c2.sc1.value = \"b\";\n-\n-        String json = MAPPER.writeValueAsString(input);\n-System.out.println(\"JSON -> \"+json);\n-\n-        Parent output = MAPPER.readValue(json, Parent.class);\n-        assertNotNull(output.c1);\n-        assertNotNull(output.c2);\n-\n-        assertNotNull(output.c1.sc1);\n-        assertNotNull(output.c2.sc1);\n-        \n-        assertEquals(\"a\", output.c1.sc1.value);\n-        assertEquals(\"b\", output.c2.sc1.value);\n-    }\n }", "timestamp": 1369541092, "metainfo": ""}