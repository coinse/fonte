{"sha": "aad217570dc98b3c09c9170e4b5c27475738d49b", "log": "minor optimization for tests", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators2.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestCreators2.java\n     /**********************************************************\n      */\n \n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     // for [JACKSON-547]\n     public void testExceptionFromConstructor() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         try {\n-            m.readValue(\"{}\", BustedCtor.class);\n+            MAPPER.readValue(\"{}\", BustedCtor.class);\n             fail(\"Expected exception\");\n         } catch (JsonMappingException e) {\n             verifyException(e, \": foobar\");\n     \n     public void testSimpleConstructor() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        HashTest test = m.readValue(\"{\\\"type\\\":\\\"custom\\\",\\\"bytes\\\":\\\"abc\\\" }\", HashTest.class);\n+        HashTest test = MAPPER.readValue(\"{\\\"type\\\":\\\"custom\\\",\\\"bytes\\\":\\\"abc\\\" }\", HashTest.class);\n         assertEquals(\"custom\", test.type);\n         assertEquals(\"abc\", new String(test.bytes, \"UTF-8\"));\n     }    \n     // Test for [JACKSON-372]\n     public void testMissingPrimitives() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        Primitives p = m.readValue(\"{}\", Primitives.class);\n+        Primitives p = MAPPER.readValue(\"{}\", Primitives.class);\n         assertFalse(p.b);\n         assertEquals(0, p.x);\n         assertEquals(0.0, p.d);\n \n     public void testJackson431() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        final Test431Container foo = m.readValue(\n+        final Test431Container foo = MAPPER.readValue(\n                 \"{\\\"items\\\":\\n\"\n                 +\"[{\\\"bar\\\": 0,\\n\"\n                 +\"\\\"id\\\": \\\"id123\\\",\\n\"\n     // [JACKSON-438]: Catch and rethrow exceptions that Creator methods throw\n     public void testJackson438() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         try {\n-            m.readValue(\"{ \\\"name\\\":\\\"foobar\\\" }\", BeanFor438.class);\n+            MAPPER.readValue(\"{ \\\"name\\\":\\\"foobar\\\" }\", BeanFor438.class);\n             fail(\"Should have failed\");\n         } catch (Exception e) {\n             if (!(e instanceof JsonMappingException)) {\n     @SuppressWarnings(\"unchecked\")\n     public void testIssue465() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         final String JSON = \"{\\\"A\\\":12}\";\n \n         // first, test with regular Map, non empty\n-        Map<String,Long> map = mapper.readValue(JSON, Map.class);\n+        Map<String,Long> map = MAPPER.readValue(JSON, Map.class);\n         assertEquals(1, map.size());\n         assertEquals(Integer.valueOf(12), map.get(\"A\"));\n         \n-        MapBean bean = mapper.readValue(JSON, MapBean.class);\n+        MapBean bean = MAPPER.readValue(JSON, MapBean.class);\n         assertEquals(1, bean.map.size());\n         assertEquals(Long.valueOf(12L), bean.map.get(\"A\"));\n \n         // and then empty ones\n         final String EMPTY_JSON = \"{}\";\n \n-        map = mapper.readValue(EMPTY_JSON, Map.class);\n+        map = MAPPER.readValue(EMPTY_JSON, Map.class);\n         assertEquals(0, map.size());\n         \n-        bean = mapper.readValue(EMPTY_JSON, MapBean.class);\n+        bean = MAPPER.readValue(EMPTY_JSON, MapBean.class);\n         assertEquals(0, bean.map.size());\n     }\n \n     public void testCreatorWithDupNames() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         try {\n-            mapper.readValue(\"{\\\"bar\\\":\\\"x\\\"}\", BrokenCreatorBean.class);\n+            MAPPER.readValue(\"{\\\"bar\\\":\\\"x\\\"}\", BrokenCreatorBean.class);\n             fail(\"Should have caught duplicate creator parameters\");\n         } catch (JsonMappingException e) {\n             verifyException(e, \"duplicate creator property \\\"bar\\\"\");\n     }\n     \n     public void testCreatorMultipleArgumentWithoutAnnotation() throws Exception {\n-    \tObjectMapper mapper = new ObjectMapper();\n-    \tAutoDetectConstructorBean value = mapper.readValue(\"{\\\"bar\\\":\\\"bar\\\",\\\"foo\\\":\\\"foo\\\"}\", AutoDetectConstructorBean.class);\n-    \tassertEquals(\"bar\", value.bar);\n-    \tassertEquals(\"foo\", value.foo);\n+        AutoDetectConstructorBean value = MAPPER.readValue(\"{\\\"bar\\\":\\\"bar\\\",\\\"foo\\\":\\\"foo\\\"}\", AutoDetectConstructorBean.class);\n+        assertEquals(\"bar\", value.bar);\n+        assertEquals(\"foo\", value.foo);\n     }\n \n     // for [JACKSON-575]\n     public void testIgnoredSingleArgCtor() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         try {\n-            mapper.readValue(quote(\"abc\"), IgnoredCtor.class);\n+            MAPPER.readValue(quote(\"abc\"), IgnoredCtor.class);\n             fail(\"Should have caught missing constructor problem\");\n         } catch (JsonMappingException e) {\n             verifyException(e, \"no single-String constructor/factory method\");\n \n     public void testAbstractFactory() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        AbstractBase bean = mapper.readValue(\"{\\\"a\\\":3}\",\n-                AbstractBase.class);\n+        AbstractBase bean = MAPPER.readValue(\"{\\\"a\\\":3}\", AbstractBase.class);\n         assertNotNull(bean);\n         AbstractBaseImpl impl = (AbstractBaseImpl) bean;\n         assertEquals(1, impl.props.size());\n     // [JACKSON-700]\n     public void testCreatorProperties() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        Issue700Bean value = mapper.readValue(\"{ \\\"item\\\" : \\\"foo\\\" }\", Issue700Bean.class);\n+        Issue700Bean value = MAPPER.readValue(\"{ \\\"item\\\" : \\\"foo\\\" }\", Issue700Bean.class);\n         assertNotNull(value);\n     }\n }", "timestamp": 1353180678, "metainfo": ""}