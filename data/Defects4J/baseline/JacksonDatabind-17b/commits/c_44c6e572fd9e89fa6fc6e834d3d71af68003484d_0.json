{"sha": "44c6e572fd9e89fa6fc6e834d3d71af68003484d", "log": "Complete [Issue#120] impl: Extend BeanDeserializerModifier to work with non-POJO deserializers", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         throws JsonMappingException\n     {\n         final DeserializationConfig config = ctxt.getConfig();\n+        KeyDeserializer deser = null;\n         if (_factoryConfig.hasKeyDeserializers()) {\n             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n-                KeyDeserializer deser = d.findKeyDeserializer(type, config, beanDesc);\n+                deser = d.findKeyDeserializer(type, config, beanDesc);\n                 if (deser != null) {\n-                    return deser;\n-                }\n-            }\n-        }\n-        // and if none found, standard ones:\n-        Class<?> raw = type.getRawClass();\n-        if (raw == String.class || raw == Object.class) {\n-            return StdKeyDeserializers.constructStringKeyDeserializer(config, type);\n-        }\n-        // Most other keys are for limited number of static types\n-        KeyDeserializer kdes = _keyDeserializers.get(type);\n-        if (kdes != null) {\n-            return kdes;\n-        }\n-        // And then other one-offs; first, Enum:\n-        if (type.isEnumType()) {\n-            return _createEnumKeyDeserializer(ctxt, type);\n-        }\n-        // One more thing: can we find ctor(String) or valueOf(String)?\n-        kdes = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n-        return kdes;\n+                    break;\n+                }\n+            }\n+        }\n+        if (deser == null) {\n+            // and if none found, standard ones:\n+            Class<?> raw = type.getRawClass();\n+            if (raw == String.class || raw == Object.class) {\n+                deser = StdKeyDeserializers.constructStringKeyDeserializer(config, type);\n+            } else {\n+                // Most other keys are for limited number of static types\n+                deser = _keyDeserializers.get(type);\n+                if (deser == null) {\n+                    // And then other one-offs; first, Enum:\n+                    if (type.isEnumType()) {\n+                        deser = _createEnumKeyDeserializer(ctxt, type);\n+                    } else {\n+                        // One more thing: can we find ctor(String) or valueOf(String)?\n+                        deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);\n+                    }\n+                }\n+            }\n+        }\n+        // and then new with 2.2: ability to post-process it too (Issue#120)\n+        if (_factoryConfig.hasDeserializerModifiers()) {\n+            for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n+                deser = mod.modifyKeyDeserializer(config, type, deser);\n+            }\n+        }\n+        return deser;\n     }\n \n     private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt,\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier.java\n     }\n     \n     /**\n+     * Method called by {@link DeserializerFactory} after it has constructed the\n+     * standard key deserializer for given key type.\n+     * This make it possible to replace the default key deserializer, or augment\n+     * it somehow (including optional use of default deserializer with occasional\n+     * override).\n+     * \n      * @since 2.2\n      */\n-    public KeyDeserializer createKeyDeserializer(DeserializationConfig config,\n+    public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config,\n             JavaType type, KeyDeserializer deserializer) {\n         return deserializer;\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n             };\n         }\n     }\n+\n+    static class KeyDeserializerModifier extends BeanDeserializerModifier {\n+        public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config, JavaType valueType,\n+                KeyDeserializer kd) {\n+            return new KeyDeserializer() {\n+                @Override\n+                public Object deserializeKey(String key,\n+                        DeserializationContext ctxt) throws IOException,\n+                        JsonProcessingException {\n+                    return \"foo\";\n+                }\n+            };\n+        }\n+    }\n     \n     /*\n     /********************************************************\n         Object result = mapper.readValue(quote(\"B\"), EnumABC.class);\n         assertEquals(\"foo\", result);\n     }\n+\n+    public void testModifyKeyDeserializer() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new SimpleModule(\"test\")\n+            .setDeserializerModifier(new KeyDeserializerModifier())\n+        );\n+        Map<?,?> result = mapper.readValue(\"{\\\"a\\\":1}\", Map.class);\n+        assertEquals(1, result.size());\n+        assertEquals(\"foo\", result.entrySet().iterator().next().getKey());\n+    }\n }", "timestamp": 1354327011, "metainfo": ""}