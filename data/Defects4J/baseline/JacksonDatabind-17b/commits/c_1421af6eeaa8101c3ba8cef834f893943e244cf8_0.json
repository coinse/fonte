{"sha": "1421af6eeaa8101c3ba8cef834f893943e244cf8", "log": "Implement [JACKSON-805], SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n     protected final LinkedNode<DeserializationProblemHandler> _problemHandlers;\n     \n     /**\n-     * Factory used for constructing {@link com.fasterxml.jackson.core.JsonNode} instances.\n+     * Factory used for constructing {@link com.fasterxml.jackson.databind.JsonNode} instances.\n      */\n     protected final JsonNodeFactory _nodeFactory;\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n     WRITE_EMPTY_JSON_ARRAYS(true),\n     \n     /**\n+     * Feature added for interoperability, to work with oddities of\n+     * so-called \"BadgerFish\" convention.\n+     * Feature determines handling of single element {@link java.util.Collection}s\n+     * and arrays: if enabled, {@link java.util.Collection}s and arrays that contain exactly\n+     * one element will be serialized as if that element itself was serialized.\n+     *<p>\n+     * When enabled, a POJO with array that normally looks like this:\n+     *<pre>\n+     *  { \"arrayProperty\" : [ 1 ] }\n+     *</pre>\n+     * will instead be serialized as\n+     *<pre>\n+     *  { \"arrayProperty\" : 1 }\n+     *</pre>\n+     *<p>\n+     * Note that this feature is counterpart to {@link DeserializationFeature#ACCEPT_SINGLE_VALUE_AS_ARRAY}\n+     * (that is, usually both are enabled, or neither is).\n+     *<p>\n+     * Feature is disabled by default, so that no special handling is done.\n+     */\n+    WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED(false),\n+    \n+    /**\n      * Feature that determines whether {@link java.util.Map} entries are first\n      * sorted by key before serialization or not: if enabled, additional sorting\n      * step is performed if necessary (not necessary for {@link java.util.SortedMap}s),\n      * Feature is disabled by default.\n      */\n     ORDER_MAP_ENTRIES_BY_KEYS(false)\n-    \n         ;\n \n     private final boolean _defaultState;\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n      * Serializer that gets called for values of types for which no\n      * serializers can be constructed.\n      *<p>\n-     * The default serializer will simply thrown an exception; a possible\n-     * alternative that can be used would be\n-     * {@link ToStringSerializer}.\n+     * The default serializer will simply thrown an exception.\n      */\n     protected JsonSerializer<Object> _unknownTypeSerializer = DEFAULT_UNKNOWN_SERIALIZER;\n \n     }\n \n     /**\n-     * \"Copy-constructor\", used from {@link #createInstance} (or by\n-     * sub-classes)\n+     * \"Copy-constructor\", used by sub-classes.\n      *\n      * @param src Blueprint object used as the baseline for this instance\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java\n \n     /**\n      * Default {@link java.util.TimeZone} used with serialization formats.\n-     * Default value is {@link Timezone#getDefault()}, which is typically the\n-     * local timezone (unless overridden for JVM).\n+     * Default value is {@link TimeZone#getDefault()}, which is typically the\n+     * local time zone (unless overridden for JVM).\n      *<p>\n-     * Note that if a new value is set, timezone is also assigned to\n+     * Note that if a new value is set, time zone is also assigned to\n      * {@link #_dateFormat} of this object.\n      */\n     protected final TimeZone _timeZone;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n      * (or, implementing class if original Class instance is an interface).\n      *\n      * @param a Method or field that the type is associated with\n-     * @param type Type derived from the setter argument\n-     * @param prop property that refers to type, if any; null\n-     *   if no property information available (when modify type declaration\n-     *   of a class, for example)\n+     * @param type Type of field, or the setter argument\n      *\n      * @return Original type if no annotations are present; or a more\n      *   specific type derived from it if type annotation(s) was found\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n      * Method that will construct a regular bean property setter using\n      * the given setter method.\n      *\n-     * @param setter Method to use to set property value; or null if none.\n-     *    Null only for \"setterless\" properties\n-     *\n      * @return Property constructed, if any; or null to indicate that\n      *   there should be no property based on given definitions.\n      */\n     /**\n      * Method that will construct a regular bean property setter using\n      * the given setter method.\n-     *\n-     * @param getter Method to use to get property value to modify, null if\n-     *    none. Non-null for \"setterless\" properties.\n      */\n     protected SettableBeanProperty constructSetterlessProperty(DeserializationContext ctxt,\n             BeanDescription beanDesc, BeanPropertyDefinition propDef)\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n      * Method that will try to create a deserializer for given type,\n      * and resolve and cache it if necessary\n      * \n-     * @param config Configuration\n      * @param type Type of property to deserializer\n      * @param property Property (field, setter, ctor arg) to use deserializer for\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n                 throw ctxt.weirdStringException(_valueClass, \"not a valid Byte value\");\n             }\n             // So far so good: but does it fit?\n-            if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {\n+            // as per [JACKSON-804], allow range up to 255, inclusive\n+            if (value < Byte.MIN_VALUE || value > 255) {\n                 throw ctxt.weirdStringException(_valueClass, \"overflow, value can not be represented as 8-bit value\");\n             }\n             return Byte.valueOf((byte) value);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n \t\tpublic Byte _parse(String key, DeserializationContext ctxt) throws JsonMappingException\n         {\n             int value = _parseInt(key);\n-            if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {\n+            // as per [JACKSON-804], allow range up to 255, inclusive\n+            if (value < Byte.MIN_VALUE || value > 255) {\n                 throw ctxt.weirdKeyException(_keyClass, key, \"overflow, value can not be represented as 8-bit value\");\n             }\n             return Byte.valueOf((byte) value);\n--- a/src/main/java/com/fasterxml/jackson/databind/node/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/package-info.java\n /**\n- * Contains concrete {@link com.fasterxml.jackson.core.JsonNode} implementations\n+ * Contains concrete {@link com.fasterxml.jackson.databind.JsonNode} implementations\n  * Jackson uses for the Tree model.\n  * These classes are public since concrete type will be needed\n  * for most operations that modify node trees. For read-only access concrete\n--- a/src/main/java/com/fasterxml/jackson/databind/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/package-info.java\n Collection types (List, Map), Java Beans,\n Strings and nulls.\n <p>\n-Tree mapper builds dynamically typed tree of {@link com.fasterxml.jackson.core.JsonNode}s\n+Tree mapper builds dynamically typed tree of {@link com.fasterxml.jackson.databind.JsonNode}s\n from JSON content (and writes such trees as JSON),\n similar to how DOM model works with XML.\n Main benefits over Object mapping are:\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n      *<ul>\n      * <li>If type implements {@link JsonSerializable}, use that\n      *  </li>\n-     * <li>If type has {@link JsonValue} annotation (or equivalent), build serializer\n+     * <li>If type has {@link com.fasterxml.jackson.annotation.JsonValue} annotation (or equivalent), build serializer\n      *    based on that property\n      *  </li>\n      *</ul>\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n     public abstract boolean isEmpty(T value);\n \n     /**\n+     * Method called to determine if the given value (of type handled by\n+     * this serializer) contains exactly one element.\n+     *<p>\n+     * Note: although it might seem sensible to instead define something\n+     * like \"getElementCount()\" method, this would not work well for\n+     * containers that do not keep track of size (like linked lists may\n+     * not).\n+     */\n+    public abstract boolean hasSingleElement(T value);\n+    \n+    /**\n      * Method that needs to be implemented to allow construction of a new\n      * serializer object with given {@link TypeSerializer}, used when\n      * addition type information is to be embedded.\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedListSerializer.java\n     public boolean isEmpty(List<?> value) {\n         return (value == null) || value.isEmpty();\n     }\n-    \n+\n+    @Override\n+    public boolean hasSingleElement(List<?> value) {\n+        return (value.size() == 1);\n+    }\n+\n     @Override\n     public ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts) {\n         return new IndexedListSerializer(_elementType, _staticTyping, vts, _property, _elementSerializer);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IteratorSerializer.java\n     @Override\n     public boolean isEmpty(Iterator<?> value) {\n         return (value == null) || !value.hasNext();\n+    }\n+\n+    @Override\n+    public boolean hasSingleElement(Iterator<?> value) {\n+        // no really good way to determine (without consuming iterator), so:\n+        return false;\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n         return (value == null) || (value.length == 0);\n     }\n \n+    @Override\n+    public boolean hasSingleElement(String[] value) {\n+        return (value.length == 1);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Actual serialization\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.*;\n \n+/**\n+ * Intermediate base class for serializers used for various\n+ * Java arrays.\n+ * \n+ * @param <T>\n+ */\n public abstract class ArraySerializerBase<T>\n     extends ContainerSerializer<T>\n {\n     public final void serialize(T value, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonGenerationException\n     {\n+        // [JACKSON-805]\n+        if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)\n+                && hasSingleElement(value)) {\n+            serializeContents(value, jgen, provider);\n+            return;\n+        }\n         jgen.writeStartArray();\n         serializeContents(value, jgen, provider);\n         jgen.writeEndArray();\n             TypeSerializer typeSer)\n         throws IOException, JsonGenerationException\n     {\n+        // note: let's NOT consider [JACKSON-805] here; gets too complicated, and probably just won't work\n         typeSer.writeTypePrefixForArray(value, jgen);\n         serializeContents(value, jgen, provider);\n         typeSer.writeTypeSuffixForArray(value, jgen);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n     public final void serialize(T value, JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonGenerationException\n     {\n+        // [JACKSON-805]\n+        if (provider.isEnabled(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED)\n+                && hasSingleElement(value)) {\n+            serializeContents(value, jgen, provider);\n+            return;\n+        }\n         jgen.writeStartArray();\n         serializeContents(value, jgen, provider);\n         jgen.writeEndArray();\n             TypeSerializer typeSer)\n         throws IOException, JsonGenerationException\n     {\n+        // note: let's NOT consider [JACKSON-805] here; gets too complicated, and probably just won't work\n         typeSer.writeTypePrefixForArray(value, jgen);\n         serializeContents(value, jgen, provider);\n         typeSer.writeTypeSuffixForArray(value, jgen);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/CollectionSerializer.java\n         return (value == null) || value.isEmpty();\n     }\n \n+    @Override\n+    public boolean hasSingleElement(Collection<?> value) {\n+        Iterator<?> it = value.iterator();\n+        if (!it.hasNext()) {\n+            return false;\n+        }\n+        it.next();\n+        return !it.hasNext();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Actual serialization\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n         return (value == null) || value.isEmpty();\n     }\n \n+    @Override\n+    public boolean hasSingleElement(EnumMap<? extends Enum<?>, ?> value) {\n+        return value.size() == 1;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Serialization\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSetSerializer.java\n     public boolean isEmpty(EnumSet<? extends Enum<?>> value) {\n         return (value == null) || value.isEmpty();\n     }\n+\n+    @Override\n+    public boolean hasSingleElement(EnumSet<? extends Enum<?>> value) {\n+        return value.size() == 1;\n+    }\n     \n     @Override\n     public void serializeContents(EnumSet<? extends Enum<?>> value, JsonGenerator jgen, SerializerProvider provider)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/IterableSerializer.java\n         // Not really good way to implement this, but has to do for now:\n         return (value == null) || value.iterator().hasNext();\n     }\n+\n+    @Override\n+    public boolean hasSingleElement(Iterable<?> value) {\n+        // no really good way to determine (without consuming iterator), so:\n+        return false;\n+    }\n     \n     @Override\n     public void serializeContents(Iterable<?> value, JsonGenerator jgen, SerializerProvider provider)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n         return (value == null) || value.isEmpty();\n     }\n \n+    @Override\n+    public boolean hasSingleElement(Map<?,?> value) {\n+        return (value.size() == 1);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Extended API\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n-\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n     @Override\n     public boolean isEmpty(Object[] value) {\n         return (value == null) || (value.length == 0);\n+    }\n+\n+    @Override\n+    public boolean hasSingleElement(Object[] value) {\n+        return (value.length == 1);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n         public boolean isEmpty(boolean[] value) {\n             return (value == null) || (value.length == 0);\n         }\n+\n+        @Override\n+        public boolean hasSingleElement(boolean[] value) {\n+            return (value.length == 1);\n+        }\n         \n         @Override\n         public void serializeContents(boolean[] value, JsonGenerator jgen, SerializerProvider provider)\n             return (value == null) || (value.length == 0);\n         }\n \n+        @Override\n+        public boolean hasSingleElement(short[] value) {\n+            return (value.length == 1);\n+        }\n+        \n         @SuppressWarnings(\"cast\")\n         @Override\n         public void serializeContents(short[] value, JsonGenerator jgen, SerializerProvider provider)\n         public boolean isEmpty(int[] value) {\n             return (value == null) || (value.length == 0);\n         }\n-        \n+\n+        @Override\n+        public boolean hasSingleElement(int[] value) {\n+            return (value.length == 1);\n+        }\n+\n         @Override\n         public void serializeContents(int[] value, JsonGenerator jgen, SerializerProvider provider)\n             throws IOException, JsonGenerationException\n         @Override\n         public boolean isEmpty(long[] value) {\n             return (value == null) || (value.length == 0);\n+        }\n+\n+        @Override\n+        public boolean hasSingleElement(long[] value) {\n+            return (value.length == 1);\n         }\n         \n         @Override\n         }\n \n         @Override\n+        public boolean hasSingleElement(float[] value) {\n+            return (value.length == 1);\n+        }\n+        \n+        @Override\n         public void serializeContents(float[] value, JsonGenerator jgen, SerializerProvider provider)\n             throws IOException, JsonGenerationException\n         {\n         public boolean isEmpty(double[] value) {\n             return (value == null) || (value.length == 0);\n         }\n+\n+        @Override\n+        public boolean hasSingleElement(double[] value) {\n+            return (value.length == 1);\n+        }\n         \n         @Override\n         public void serializeContents(double[] value, JsonGenerator jgen, SerializerProvider provider)\n--- a/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n \n     private final static ObjectMapper SHARED_MAPPER = new ObjectMapper();\n \n-    protected ObjectReader objectReader() {\n-        return SHARED_MAPPER.reader();\n-    }\n-\n     protected ObjectWriter objectWriter() {\n         return SHARED_MAPPER.writer();\n+    }\n+\n+    protected ObjectReader objectReader(Class<?> cls) {\n+        return SHARED_MAPPER.reader(cls);\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java\n         StringBuilder sb = new StringBuilder();\n         sb.append('[');\n         for (int i = 0; i < LEN; ++i) {\n-            if (i > 0) {\n-                sb.append(',');\n-            }\n-            sb.append(i & 0x7F);\n-        }\n-        sb.append(']');\n+            int value = i - 128;\n+            sb.append((value < 256) ? value : (value & 0x7F));\n+            sb.append(',');\n+        }\n+        sb.append(\"0]\");\n         byte[] result = MAPPER.readValue(sb.toString(), byte[].class);\n         assertNotNull(result);\n-        assertEquals(LEN, result.length);\n-        for (int i = 0; i < LEN; ++i) {\n-            byte exp = (byte) (i & 0x7F);\n+        assertEquals(LEN+1, result.length);\n+        for (int i = 0; i < LEN; ++i) {\n+            int value = i - 128;\n+            byte exp = (byte) ((value < 256) ? value : (value & 0x7F));\n+            if (exp != result[i]) {\n+                fail(\"At offset #\"+i+\" (\"+result.length+\"), expected \"+exp+\", got \"+result[i]);\n+            }\n             assertEquals(exp, result[i]);\n         }\n+        assertEquals(0, result[LEN]);\n     }\n \n     public void testByteArrayAsBase64() throws Exception\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n         assertEquals(\"99\", sw.toString());\n         jgen.close();\n     }\n+\n+    // Test for [JACKSON-805]\n+    public void testSingleElementCollections() throws IOException\n+    {\n+        final ObjectWriter writer = objectWriter().with(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);\n+\n+        // Lists:\n+        ArrayList<String> strs = new ArrayList<String>();\n+        strs.add(\"xyz\");\n+        assertEquals(quote(\"xyz\"), writer.writeValueAsString(strs));\n+        ArrayList<Integer> ints = new ArrayList<Integer>();\n+        ints.add(13);\n+        assertEquals(\"13\", writer.writeValueAsString(ints));\n+\n+        // other Collections, like Sets:\n+        HashSet<Long> longs = new HashSet<Long>();\n+        longs.add(42L);\n+        assertEquals(\"42\", writer.writeValueAsString(longs));\n+\n+        // arrays:\n+        assertEquals(\"true\", writer.writeValueAsString(new boolean[] { true }));\n+        assertEquals(\"true\", writer.writeValueAsString(new Boolean[] { Boolean.TRUE }));\n+        assertEquals(\"3\", writer.writeValueAsString(new int[] { 3 }));\n+        assertEquals(quote(\"foo\"), writer.writeValueAsString(new String[] { \"foo\" }));\n+    }\n }", "timestamp": 1331358404, "metainfo": ""}