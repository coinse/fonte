{"sha": "40f1c93b492e535a9d1c74579c702a08123f329d", "log": "Avoid setting explName to true if name is null in POJOPropertyBuilder  This change enables backwards compatibility of Jackson 2.4.0 with modules relying on the 2.3 API (e.g., jackson-module-scala 2.3.X).  Prior to this change, old versions of jackson-module-scala would receive this exception, when running with Jacskon 2.4: ``` java.lang.IllegalArgumentException: Can not pass true for 'explName' if name is null/empty     at com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder$Linked.<init>(POJOPropertyBuilder.java:955) ```  Note that this behavior is effectively what jackson-module-scala does in 2.4.0: https://github.com/FasterXML/jackson-module-scala/blob/master/src/main/scala/com/fasterxml/jackson/module/scala/introspect/ScalaPropertiesCollector.scala#L211", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n     /**\n      * @deprecated Since 2.4 call method that takes additional 'explName' argument, to indicate\n      *   whether name of property was provided by annotation (and not derived from accessor name);\n-     *   this method simply passes 'true' for it.\n+     *   this method assumes the name is explicit if it is non-null.\n      */\n     @Deprecated\n     public void addField(AnnotatedField a, String name, boolean visible, boolean ignored) {\n-        addField(a, _propName(name), true, visible, ignored);\n+        addField(a, _propName(name), name != null, visible, ignored);\n     }\n \n     @Deprecated\n     /**\n      * @deprecated Since 2.4 call method that takes additional 'explName' argument, to indicate\n      *   whether name of property was provided by annotation (and not derived from accessor name);\n-     *   this method simply passes 'true' for it.\n+     *   this method assumes the name is explicit if it is non-null.\n      */\n     @Deprecated\n     public void addCtor(AnnotatedParameter a, String name, boolean visible, boolean ignored) {\n-        addCtor(a, _propName(name), true, visible, ignored);\n+        addCtor(a, _propName(name), name != null, visible, ignored);\n     }\n     @Deprecated\n     public void addCtor(AnnotatedParameter a, String name, boolean explName, boolean visible, boolean ignored) {\n     /**\n      * @deprecated Since 2.4 call method that takes additional 'explName' argument, to indicate\n      *   whether name of property was provided by annotation (and not derived from accessor name);\n-     *   this method simply passes 'true' for it.\n+     *   this method assumes the name is explicit if it is non-null.\n      */\n     @Deprecated\n     public void addGetter(AnnotatedMethod a, String name, boolean visible, boolean ignored) {\n-        addGetter(a, _propName(name), true, visible, ignored);\n+        addGetter(a, _propName(name), name != null, visible, ignored);\n     }\n     @Deprecated\n     public void addGetter(AnnotatedMethod a, String name, boolean explName, boolean visible, boolean ignored) {\n     /**\n      * @deprecated Since 2.4 call method that takes additional 'explName' argument, to indicate\n      *   whether name of property was provided by annotation (and not derived from accessor name);\n-     *   this method simply passes 'true' for it.\n+     *   this method assumes the name is explicit if it is non-null.\n      */\n     @Deprecated\n     public void addSetter(AnnotatedMethod a, String name, boolean visible, boolean ignored) {\n-        addSetter(a, _propName(name), true, visible, ignored);\n+        addSetter(a, _propName(name), name != null, visible, ignored);\n     }\n     @Deprecated\n     public void addSetter(AnnotatedMethod a, String name, boolean explName, boolean visible, boolean ignored) {", "timestamp": 1401138932, "metainfo": ""}