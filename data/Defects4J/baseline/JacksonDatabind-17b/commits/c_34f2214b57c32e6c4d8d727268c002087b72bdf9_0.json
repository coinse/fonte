{"sha": "34f2214b57c32e6c4d8d727268c002087b72bdf9", "log": "Add test for [JACKSON-811]", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdWithPolymorphic.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdWithPolymorphic.java\n package com.fasterxml.jackson.databind.struct;\n \n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n+import com.fasterxml.jackson.annotation.PropertyAccessor;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;\n \n public class TestObjectIdWithPolymorphic extends BaseMapTest\n {\n     @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)\n     @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class, property=\"id\")\n-    static class Base\n+    static abstract class Base\n     {\n         public int value;\n \n             extra = e;\n         }\n     }\n+\n+    // [JACKSON-811] types\n+\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.PropertyGenerator.class, property=\"id\")\n+    public static class Base811 {\n+        public int id;\n+        public Base811 owner;\n+            \n+        private Base811() {}\n+        public Base811(Process owner) {\n+            this.owner = owner;\n+            if (owner == null) {\n+                id = 0;\n+            } else {\n+                id = ++owner.childIdCounter;\n+                owner.children.add(this);\n+            }\n+        }\n+    }\n+\n+    public static class Process extends Base811 {\n+        protected int childIdCounter = 0;\n+        protected List<Base811> children = new ArrayList<Base811>();\n+        \n+        public Process() { super(null); }\n+    }\n     \n+    public static abstract class Activity extends Base811 {\n+        protected Activity parent;\n+        public Activity(Process owner, Activity parent) {\n+                super(owner);\n+                this.parent = parent;\n+        }\n+        private Activity() {\n+                super();\n+        }\n+    }\n+    \n+    public static class Scope extends Activity {\n+        public final List<FaultHandler> faultHandlers = new ArrayList<FaultHandler>();\n+        public Scope(Process owner, Activity parent) {\n+            super(owner, parent);\n+        }\n+        private Scope() {\n+            super();\n+        }\n+    }\n+    \n+    public static class FaultHandler extends Base811 {\n+        public final List<Catch> catchBlocks = new ArrayList<Catch>();\n+        \n+        public FaultHandler(Process owner) {\n+            super(owner);\n+        }\n+\n+        protected FaultHandler() {}\n+    }\n+    \n+    public static class Catch extends Scope {\n+        public Catch(Process owner, Activity parent) {\n+            super(owner, parent);\n+        }\n+        protected Catch() {};\n+    }\n+\n     /*\n     /*****************************************************\n     /* Unit tests for polymorphic type handling\n         assertSame(result, result2.next);\n     }\n \n+    public void testIssue811() throws Exception\n+    {\n+        ObjectMapper om = new ObjectMapper();\n+        om.disable(MapperFeature.AUTO_DETECT_CREATORS);\n+        om.disable(MapperFeature.AUTO_DETECT_GETTERS);\n+        om.disable(MapperFeature.AUTO_DETECT_IS_GETTERS);\n+        om.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);\n+        \n+        om.enable(SerializationFeature.WRITE_ENUMS_USING_INDEX);\n+        om.enable(SerializationFeature.INDENT_OUTPUT);\n+        om.enableDefaultTypingAsProperty(DefaultTyping.NON_FINAL, \"@class\");\n+    \n+        Process p = new Process();\n+        Scope s = new Scope(p, null);\n+        FaultHandler fh = new FaultHandler(p);\n+        Catch c = new Catch(p, s);\n+        fh.catchBlocks.add(c);\n+        s.faultHandlers.add(fh);\n+        \n+        String json = om.writeValueAsString(p);\n+        Process restored = om.readValue(json, Process.class);\n+        assertNotNull(restored);\n+\n+        assertEquals(0, p.id);\n+        assertEquals(3, p.children.size());\n+        assertSame(p, p.children.get(0).owner);\n+        assertSame(p, p.children.get(1).owner);\n+        assertSame(p, p.children.get(2).owner);\n+    }\n }", "timestamp": 1332205715, "metainfo": ""}