{"sha": "4e5e2b3e1e8ceacfbd9e174608239a788312e6ca", "log": "work bit more on context attributes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.core.util.*;\n import com.fasterxml.jackson.databind.cfg.BaseSettings;\n+import com.fasterxml.jackson.databind.cfg.ContextAttributes;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.deser.*;\n         return writer().with(escapes);\n     }\n \n+    /**\n+     * Factory method for constructing {@link ObjectWriter} that will\n+     * use specified default attributes.\n+     * \n+     * @since 2.3\n+     */\n+    public ObjectWriter writer(ContextAttributes attrs) {\n+        return new ObjectWriter(this, getSerializationConfig().with(attrs));\n+    }\n     \n     /*\n     /**********************************************************\n         return new ObjectReader(this, getDeserializationConfig().with(defaultBase64));\n     }\n \n+    /**\n+     * Factory method for constructing {@link ObjectReader} that will\n+     * use specified default attributes.\n+     * \n+     * @since 2.3\n+     */\n+    public ObjectReader reader(ContextAttributes attrs) {\n+        return new ObjectReader(this, getDeserializationConfig().with(attrs));\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Extended Public API: convenience type conversion\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n import java.net.URL;\n import java.util.Iterator;\n import java.util.Locale;\n+import java.util.Map;\n import java.util.TimeZone;\n import java.util.concurrent.ConcurrentHashMap;\n \n import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.core.type.ResolvedType;\n import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.cfg.ContextAttributes;\n import com.fasterxml.jackson.databind.deser.DataFormatReaders;\n import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;\n import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;\n         return new ObjectReader(this, _config, _valueType, _rootDeserializer, _valueToUpdate,\n                 _schema, _injectableValues, readers);\n     }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public ObjectReader with(ContextAttributes attrs) {\n+        DeserializationConfig newConfig = _config.with(attrs);\n+        return (newConfig == _config) ? this :  new ObjectReader(this, newConfig);\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public ObjectReader withAttributes(Map<Object,Object> attrs) {\n+        DeserializationConfig newConfig = _config.withAttributes(attrs);\n+        return (newConfig == _config) ? this :  new ObjectReader(this, newConfig);\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public ObjectReader withAttribute(Object key, Object value) {\n+        DeserializationConfig newConfig = _config.withAttribute(key, value);\n+        return (newConfig == _config) ? this :  new ObjectReader(this, newConfig);\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public ObjectReader withoutAttribute(Object key) {\n+        DeserializationConfig newConfig = _config.withoutAttribute(key);\n+        return (newConfig == _config) ? this :  new ObjectReader(this, newConfig);\n+    }\n     \n     /*\n     /**********************************************************\n \n     public TypeFactory getTypeFactory() {\n         return _config.getTypeFactory();\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public ContextAttributes getAttributes() {\n+        return _config.getAttributes();\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n import java.io.*;\n import java.text.DateFormat;\n import java.util.Locale;\n+import java.util.Map;\n import java.util.TimeZone;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n import com.fasterxml.jackson.core.util.Instantiatable;\n import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;\n+import com.fasterxml.jackson.databind.cfg.ContextAttributes;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n         }\n         return new ObjectWriter(this, f);\n     }    \n+\n+    /**\n+     * @since 2.3\n+     */\n+    public ObjectWriter with(ContextAttributes attrs) {\n+        SerializationConfig newConfig = _config.with(attrs);\n+        return (newConfig == _config) ? this :  new ObjectWriter(this, newConfig);\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public ObjectWriter withAttributes(Map<Object,Object> attrs) {\n+        SerializationConfig newConfig = _config.withAttributes(attrs);\n+        return (newConfig == _config) ? this :  new ObjectWriter(this, newConfig);\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public ObjectWriter withAttribute(Object key, Object value) {\n+        SerializationConfig newConfig = _config.withAttribute(key, value);\n+        return (newConfig == _config) ? this :  new ObjectWriter(this, newConfig);\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public ObjectWriter withoutAttribute(Object key) {\n+        SerializationConfig newConfig = _config.withoutAttribute(key);\n+        return (newConfig == _config) ? this :  new ObjectWriter(this, newConfig);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Simple accessors\n      */\n     public boolean hasPrefetchedSerializer() {\n         return _rootSerializer != null;\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public ContextAttributes getAttributes() {\n+        return _config.getAttributes();\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n     public FilterProvider getFilterProvider() {\n         return _filterProvider;\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Introspection methods\n--- a/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/BaseMapTest.java\n         // just for fun, let's also call hash code...\n         o.hashCode();\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Helper methods\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods, serialization\n     /**********************************************************\n      */\n \n     {\n         String str = m.writeValueAsString(value);\n         return (Map<String,Object>) m.readValue(str, Map.class);\n-    }\n-\n-    protected <T> T readAndMapFromString(String input, Class<T> cls)\n-        throws IOException\n-    {\n-        return readAndMapFromString(SHARED_MAPPER, input, cls);\n-    }\n-    \n-    protected <T> T readAndMapFromString(ObjectMapper m, String input, Class<T> cls)\n-        throws IOException\n-    {\n-        return (T) m.readValue(\"\\\"\"+input+\"\\\"\", cls);\n     }\n     \n     protected String serializeAsString(ObjectMapper m, Object value)\n         return m.writeValueAsString(map);\n     }\n \n+    /*\n+    /**********************************************************\n+    /* Helper methods, deserialization\n+    /**********************************************************\n+     */\n+    \n+    protected <T> T readAndMapFromString(String input, Class<T> cls)\n+        throws IOException\n+    {\n+        return readAndMapFromString(SHARED_MAPPER, input, cls);\n+    }\n+    \n+    protected <T> T readAndMapFromString(ObjectMapper m, String input, Class<T> cls)\n+        throws IOException\n+    {\n+        return (T) m.readValue(\"\\\"\"+input+\"\\\"\", cls);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods, other\n+    /**********************************************************\n+     */\n+    \n     protected TimeZone getUTCTimeZone() {\n         return TimeZone.getTimeZone(\"GMT\");\n     }\n             throw new IllegalArgumentException(e);\n         }\n     }\n+\n+    protected String aposToQuotes(String json) {\n+        return json.replace(\"'\", \"\\\"\");\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithDeser.java\n+package com.fasterxml.jackson.databind.contextual;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+\n+public class TestContextAttributeWithDeser extends BaseMapTest\n+{\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextAttributeWithSer.java\n+package com.fasterxml.jackson.databind.contextual;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import com.fasterxml.jackson.databind.ser.std.StdScalarSerializer;\n+\n+public class TestContextAttributeWithSer extends BaseMapTest\n+{\n+    final static String KEY = \"foobar\";\n+    \n+    static class PrefixStringSerializer extends StdScalarSerializer<String>\n+    {\n+        protected PrefixStringSerializer() {\n+            super(String.class);\n+        }\n+\n+        @Override\n+        public void serialize(String value, JsonGenerator jgen,\n+                SerializerProvider provider)\n+            throws IOException\n+        {\n+            Integer I = (Integer) provider.getAttribute(KEY);\n+            if (I == null) {\n+                I = Integer.valueOf(0);\n+            }\n+            int i = I.intValue();\n+            jgen.writeString(\"\" +i+\":\"+value);\n+            provider.setAttribute(KEY, Integer.valueOf(i + 1));\n+        }\n+    }\n+\n+    static class TestPOJO\n+    {\n+        @JsonSerialize(using=PrefixStringSerializer.class)\n+        public String value;\n+\n+        public TestPOJO(String str) { value = str; }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    final ObjectMapper MAPPER = objectMapper();\n+    \n+    public void testSimplePerCall() throws Exception\n+    {\n+        ObjectWriter w = MAPPER.writer();\n+        String json = w.writeValueAsString(new TestPOJO(\"def\"));\n+        assertEquals(\"\", json);\n+    }\n+\n+    public void testSimpleDefaults() throws Exception\n+    {\n+        String json = MAPPER.writer().withAttribute(KEY, Integer.valueOf(3))\n+                .writeValueAsString(new TestPOJO(\"xyz\"));\n+        assertEquals(aposToQuotes(\"{'value':'3:xyz'}\"), json);\n+    }\n+\n+    public void testHierarchic() throws Exception\n+    {\n+        ObjectWriter w = MAPPER.writer().withAttribute(KEY, Integer.valueOf(3));\n+        String json = w.writeValueAsString(new TestPOJO(\"abc\"));\n+        assertEquals(\"\", json);\n+        \n+    }\n+}", "timestamp": 1381202611, "metainfo": ""}