{"sha": "1b156152652c29efb564de3e71bf1ba878a7177b", "log": "Fix [JACKSON-775]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n      */\n \n     /**\n-     * Method that will return valid String representation of\n+     * Method that will return a valid String representation of\n      * the container value, if the node is a value node\n-     * (method {@link #isValueNode} returns true), otherwise\n-     * empty String.\n+     * (method {@link #isValueNode} returns true),\n+     * otherwise empty String.\n      */\n     public abstract String asText();\n \n--- a/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/MissingNode.java\n     public boolean isMissingNode() { return true; }\n \n     @Override\n-    public String asText() { return null; }\n+    public String asText() { return \"\"; }\n     \n     @Override\n     public int asInt(int defaultValue) {\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n     {\n         MissingNode n = MissingNode.getInstance();\n         assertEquals(JsonToken.NOT_AVAILABLE, n.asToken());\n-        assertNull(n.asText());\n+        // as per [JACKSON-775]\n+        assertEquals(\"\", n.asText());\n         assertStandardEquals(n);\n         assertEquals(\"\", n.toString());\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeDeserialization.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * This unit test suite tries to verify that JsonNode-based trees\n+ * can be deserialized as expected.\n+ */\n+public class TestTreeDeserialization\n+    extends BaseMapTest\n+{\n+    final static class Bean {\n+        int _x;\n+        JsonNode _node;\n+\n+        public void setX(int x) { _x = x; }\n+        public void setNode(JsonNode n) { _node = n; }\n+    }\n+\n+    /**\n+     * This test checks that is possible to mix \"regular\" Java objects\n+     * and JsonNode.\n+     */\n+    public void testMixed() throws IOException\n+    {\n+        ObjectMapper om = new ObjectMapper();\n+        String JSON = \"{\\\"node\\\" : { \\\"a\\\" : 3 }, \\\"x\\\" : 9 }\";\n+        Bean bean = om.readValue(JSON, Bean.class);\n+\n+        assertEquals(9, bean._x);\n+        JsonNode n = bean._node;\n+        assertNotNull(n);\n+        assertEquals(1, n.size());\n+        ObjectNode on = (ObjectNode) n;\n+        assertEquals(3, on.get(\"a\").intValue());\n+    }\n+\n+    /// Verifying [JACKSON-143]\n+    public void testArrayNodeEquality()\n+    {\n+        ArrayNode n1 = new ArrayNode(null);\n+        ArrayNode n2 = new ArrayNode(null);\n+\n+        assertTrue(n1.equals(n2));\n+        assertTrue(n2.equals(n1));\n+\n+        n1.add(TextNode.valueOf(\"Test\"));\n+\n+        assertFalse(n1.equals(n2));\n+        assertFalse(n2.equals(n1));\n+\n+        n2.add(TextNode.valueOf(\"Test\"));\n+\n+        assertTrue(n1.equals(n2));\n+        assertTrue(n2.equals(n1));\n+    }\n+\n+    public void testObjectNodeEquality()\n+    {\n+        ObjectNode n1 = new ObjectNode(null);\n+        ObjectNode n2 = new ObjectNode(null);\n+\n+        assertTrue(n1.equals(n2));\n+        assertTrue(n2.equals(n1));\n+\n+        n1.put(\"x\", TextNode.valueOf(\"Test\"));\n+\n+        assertFalse(n1.equals(n2));\n+        assertFalse(n2.equals(n1));\n+\n+        n2.put(\"x\", TextNode.valueOf(\"Test\"));\n+\n+        assertTrue(n1.equals(n2));\n+        assertTrue(n2.equals(n1));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperDeserializer.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import java.io.*;\n+import java.math.BigDecimal;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+/**\n+ * This unit test suite tries to verify that ObjectMapper\n+ * can properly parse JSON and bind contents into appropriate\n+ * JsonNode instances.\n+ */\n+public class TestTreeMapperDeserializer\n+    extends BaseTest\n+{\n+\tpublic void testSimple()\n+        throws Exception\n+    {\n+        final String JSON = SAMPLE_DOC_JSON_SPEC;\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        for (int type = 0; type < 2; ++type) {\n+            JsonNode result;\n+\n+            if (type == 0) {\n+                result = mapper.readTree(new StringReader(JSON));\n+            } else {\n+                result = mapper.readTree(JSON);\n+            }\n+\n+            assertType(result, ObjectNode.class);\n+            assertEquals(1, result.size());\n+            assertTrue(result.isObject());\n+            \n+            ObjectNode main = (ObjectNode) result;\n+            assertEquals(\"Image\", main.fieldNames().next());\n+            JsonNode ob = main.elements().next();\n+            assertType(ob, ObjectNode.class);\n+            ObjectNode imageMap = (ObjectNode) ob;\n+            \n+            assertEquals(5, imageMap.size());\n+            ob = imageMap.get(\"Width\");\n+            assertTrue(ob.isIntegralNumber());\n+            assertFalse(ob.isFloatingPointNumber());\n+            assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue());\n+            ob = imageMap.get(\"Height\");\n+            assertTrue(ob.isIntegralNumber());\n+            assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue());\n+            \n+            ob = imageMap.get(\"Title\");\n+            assertTrue(ob.isTextual());\n+            assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue());\n+            \n+            ob = imageMap.get(\"Thumbnail\");\n+            assertType(ob, ObjectNode.class);\n+            ObjectNode tn = (ObjectNode) ob;\n+            ob = tn.get(\"Url\");\n+            assertTrue(ob.isTextual());\n+            assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue());\n+            ob = tn.get(\"Height\");\n+            assertTrue(ob.isIntegralNumber());\n+            assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue());\n+            ob = tn.get(\"Width\");\n+            assertTrue(ob.isTextual());\n+            assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue());\n+            \n+            ob = imageMap.get(\"IDs\");\n+            assertTrue(ob.isArray());\n+            ArrayNode idList = (ArrayNode) ob;\n+            assertEquals(4, idList.size());\n+            assertEquals(4, calcLength(idList.elements()));\n+            assertEquals(4, calcLength(idList.iterator()));\n+            {\n+                int[] values = new int[] {\n+                    SAMPLE_SPEC_VALUE_TN_ID1,\n+                    SAMPLE_SPEC_VALUE_TN_ID2,\n+                    SAMPLE_SPEC_VALUE_TN_ID3,\n+                    SAMPLE_SPEC_VALUE_TN_ID4\n+                };\n+                for (int i = 0; i < values.length; ++i) {\n+                    assertEquals(values[i], idList.get(i).intValue());\n+                }\n+                int i = 0;\n+                for (JsonNode n : idList) {\n+                    assertEquals(values[i], n.intValue());\n+                    ++i;\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testBoolean()\n+        throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode result = mapper.readTree(\"true\\n\");\n+        assertFalse(result.isNull());\n+        assertFalse(result.isNumber());\n+        assertFalse(result.isTextual());\n+        assertTrue(result.isBoolean());\n+        assertType(result, BooleanNode.class);\n+        assertTrue(result.booleanValue());\n+        assertEquals(\"true\", result.asText());\n+        assertFalse(result.isMissingNode());\n+\n+        // also, equality should work ok\n+        assertEquals(result, BooleanNode.valueOf(true));\n+        assertEquals(result, BooleanNode.getTrue());\n+    }\n+\n+    public void testDouble()\n+        throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        double value = 3.04;\n+        JsonNode result = mapper.readTree(String.valueOf(value));\n+        assertTrue(result.isNumber());\n+        assertFalse(result.isNull());\n+        assertType(result, DoubleNode.class);\n+        assertTrue(result.isFloatingPointNumber());\n+        assertTrue(result.isDouble());\n+        assertFalse(result.isInt());\n+        assertFalse(result.isLong());\n+        assertFalse(result.isIntegralNumber());\n+        assertFalse(result.isTextual());\n+        assertFalse(result.isMissingNode());\n+\n+        assertEquals(value, result.doubleValue());\n+        assertEquals(value, result.numberValue().doubleValue());\n+        assertEquals((int) value, result.intValue());\n+        assertEquals((long) value, result.longValue());\n+        assertEquals(String.valueOf(value), result.asText());\n+\n+        // also, equality should work ok\n+        assertEquals(result, DoubleNode.valueOf(value));\n+    }\n+\n+    public void testInt()\n+        throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        int value = -90184;\n+        JsonNode result = mapper.readTree(String.valueOf(value));\n+        assertTrue(result.isNumber());\n+        assertTrue(result.isIntegralNumber());\n+        assertTrue(result.isInt());\n+        assertType(result, IntNode.class);\n+        assertFalse(result.isLong());\n+        assertFalse(result.isFloatingPointNumber());\n+        assertFalse(result.isDouble());\n+        assertFalse(result.isNull());\n+        assertFalse(result.isTextual());\n+        assertFalse(result.isMissingNode());\n+\n+        assertEquals(value, result.numberValue().intValue());\n+        assertEquals(value, result.intValue());\n+        assertEquals(String.valueOf(value), result.asText());\n+        assertEquals((double) value, result.doubleValue());\n+        assertEquals((long) value, result.longValue());\n+\n+        // also, equality should work ok\n+        assertEquals(result, IntNode.valueOf(value));\n+    }\n+\n+    public void testLong()\n+        throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        // need to use something being 32-bit value space\n+        long value = 12345678L << 32;\n+        JsonNode result = mapper.readTree(String.valueOf(value));\n+        assertTrue(result.isNumber());\n+        assertTrue(result.isIntegralNumber());\n+        assertTrue(result.isLong());\n+        assertType(result, LongNode.class);\n+        assertFalse(result.isInt());\n+        assertFalse(result.isFloatingPointNumber());\n+        assertFalse(result.isDouble());\n+        assertFalse(result.isNull());\n+        assertFalse(result.isTextual());\n+        assertFalse(result.isMissingNode());\n+\n+        assertEquals(value, result.numberValue().longValue());\n+        assertEquals(value, result.longValue());\n+        assertEquals(String.valueOf(value), result.asText());\n+        assertEquals((double) value, result.doubleValue());\n+\n+        // also, equality should work ok\n+        assertEquals(result, LongNode.valueOf(value));\n+    }\n+\n+    public void testNull()\n+        throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode result = mapper.readTree(\"   null \");\n+        // should not get java null, but NullNode...\n+        assertNotNull(result);\n+        assertTrue(result.isNull());\n+        assertFalse(result.isNumber());\n+        assertFalse(result.isTextual());\n+        assertEquals(\"null\", result.asText());\n+\n+        // also, equality should work ok\n+        assertEquals(result, NullNode.instance);\n+    }\n+\n+    public void testDecimalNode()\n+        throws Exception\n+    {\n+        // no \"natural\" way to get it, must construct\n+        BigDecimal value = new BigDecimal(\"0.1\");\n+        JsonNode result = DecimalNode.valueOf(value);\n+\n+        assertFalse(result.isArray());\n+        assertFalse(result.isObject());\n+        assertTrue(result.isNumber());\n+        assertFalse(result.isIntegralNumber());\n+        assertFalse(result.isLong());\n+        assertType(result, DecimalNode.class);\n+        assertFalse(result.isInt());\n+        assertTrue(result.isFloatingPointNumber());\n+        assertTrue(result.isBigDecimal());\n+        assertFalse(result.isDouble());\n+        assertFalse(result.isNull());\n+        assertFalse(result.isTextual());\n+        assertFalse(result.isMissingNode());\n+\n+        assertEquals(value, result.numberValue());\n+        assertEquals(value.toString(), result.asText());\n+\n+        // also, equality should work ok\n+        assertEquals(result, DecimalNode.valueOf(value));\n+    }\n+\n+    public void testSimpleArray() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ArrayNode result = mapper.createArrayNode();\n+\n+        assertTrue(result.isArray());\n+        assertType(result, ArrayNode.class);\n+\n+        assertFalse(result.isObject());\n+        assertFalse(result.isNumber());\n+        assertFalse(result.isNull());\n+        assertFalse(result.isTextual());\n+\n+        // and let's add stuff...\n+        result.add(false);\n+        result.insertNull(0);\n+\n+        // should be equal to itself no matter what\n+        assertEquals(result, result);\n+        assertFalse(result.equals(null)); // but not to null\n+\n+        // plus see that we can access stuff\n+        assertEquals(NullNode.instance, result.path(0));\n+        assertEquals(NullNode.instance, result.get(0));\n+        assertEquals(BooleanNode.FALSE, result.path(1));\n+        assertEquals(BooleanNode.FALSE, result.get(1));\n+        assertEquals(2, result.size());\n+\n+        assertNull(result.get(-1));\n+        assertNull(result.get(2));\n+        JsonNode missing = result.path(2);\n+        assertTrue(missing.isMissingNode());\n+        assertTrue(result.path(-100).isMissingNode());\n+\n+        // then construct and compare\n+        ArrayNode array2 = mapper.createArrayNode();\n+        array2.addNull();\n+        array2.add(false);\n+        assertEquals(result, array2);\n+\n+        // plus remove entries\n+        JsonNode rm1 = array2.remove(0);\n+        assertEquals(NullNode.instance, rm1);\n+        assertEquals(1, array2.size());\n+        assertEquals(BooleanNode.FALSE, array2.get(0));\n+        assertFalse(result.equals(array2));\n+\n+        JsonNode rm2 = array2.remove(0);\n+        assertEquals(BooleanNode.FALSE, rm2);\n+        assertEquals(0, array2.size());\n+    }\n+\n+    /**\n+     * Type mappers should be able to gracefully deal with end of\n+     * input.\n+     */\n+    public void testEOF() throws Exception\n+    {\n+        String JSON =\n+            \"{ \\\"key\\\": [ { \\\"a\\\" : { \\\"name\\\": \\\"foo\\\",  \\\"type\\\": 1\\n\"\n+            +\"},  \\\"type\\\": 3, \\\"url\\\": \\\"http://www.google.com\\\" } ],\\n\"\n+            +\"\\\"name\\\": \\\"xyz\\\", \\\"type\\\": 1, \\\"url\\\" : null }\\n  \"\n+            ;\n+        JsonFactory jf = new JsonFactory();\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonParser jp = jf.createJsonParser(new StringReader(JSON));\n+        JsonNode result = mapper.readTree(jp);\n+\n+        assertTrue(result.isObject());\n+        assertEquals(4, result.size());\n+\n+        assertNull(mapper.readTree(jp));\n+    }\n+\n+    public void testMultiple() throws Exception\n+    {\n+        String JSON = \"12  \\\"string\\\" [ 1, 2, 3 ]\";\n+        JsonFactory jf = new JsonFactory();\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonParser jp = jf.createJsonParser(new StringReader(JSON));\n+        JsonNode result = mapper.readTree(jp);\n+\n+        assertTrue(result.isIntegralNumber());\n+        assertTrue(result.isInt());\n+        assertFalse(result.isTextual());\n+        assertEquals(12, result.intValue());\n+\n+        result = mapper.readTree(jp);\n+        assertTrue(result.isTextual());\n+        assertFalse(result.isIntegralNumber());\n+        assertFalse(result.isInt());\n+        assertEquals(\"string\", result.textValue());\n+\n+        result = mapper.readTree(jp);\n+        assertTrue(result.isArray());\n+        assertEquals(3, result.size());\n+\n+        assertNull(mapper.readTree(jp));\n+    }\n+\n+    /**\n+     * Let's also verify behavior of \"MissingNode\" -- one needs to be able\n+     * to traverse such bogus nodes with appropriate methods.\n+     */\n+    @SuppressWarnings(\"unused\")\n+    public void testMissingNode()\n+        throws Exception\n+    {\n+        String JSON = \"[ { }, [ ] ]\";\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode result = mapper.readTree(new StringReader(JSON));\n+\n+        assertTrue(result.isContainerNode());\n+        assertTrue(result.isArray());\n+        assertEquals(2, result.size());\n+\n+        int count = 0;\n+        for (JsonNode node : result) {\n+            ++count;\n+        }\n+        assertEquals(2, count);\n+\n+        Iterator<JsonNode> it = result.iterator();\n+\n+        JsonNode onode = it.next();\n+        assertTrue(onode.isContainerNode());\n+        assertTrue(onode.isObject());\n+        assertEquals(0, onode.size());\n+        assertFalse(onode.isMissingNode()); // real node\n+        assertNull(onode.textValue());\n+\n+        // how about dereferencing?\n+        assertNull(onode.get(0));\n+        JsonNode dummyNode = onode.path(0);\n+        assertNotNull(dummyNode);\n+        assertTrue(dummyNode.isMissingNode());\n+        assertNull(dummyNode.get(3));\n+        assertNull(dummyNode.get(\"whatever\"));\n+        JsonNode dummyNode2 = dummyNode.path(98);\n+        assertNotNull(dummyNode2);\n+        assertTrue(dummyNode2.isMissingNode());\n+        JsonNode dummyNode3 = dummyNode.path(\"field\");\n+        assertNotNull(dummyNode3);\n+        assertTrue(dummyNode3.isMissingNode());\n+\n+        // and same for the array node\n+\n+        JsonNode anode = it.next();\n+        assertTrue(anode.isContainerNode());\n+        assertTrue(anode.isArray());\n+        assertFalse(anode.isMissingNode()); // real node\n+        assertEquals(0, anode.size());\n+\n+        assertNull(anode.get(0));\n+        dummyNode = anode.path(0);\n+        assertNotNull(dummyNode);\n+        assertTrue(dummyNode.isMissingNode());\n+        assertNull(dummyNode.get(0));\n+        assertNull(dummyNode.get(\"myfield\"));\n+        dummyNode2 = dummyNode.path(98);\n+        assertNotNull(dummyNode2);\n+        assertTrue(dummyNode2.isMissingNode());\n+        dummyNode3 = dummyNode.path(\"f\");\n+        assertNotNull(dummyNode3);\n+        assertTrue(dummyNode3.isMissingNode());\n+    }\n+\n+    public void testArray() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        final String JSON = \"[[[-0.027512,51.503221],[-0.008497,51.503221],[-0.008497,51.509744],[-0.027512,51.509744]]]\";\n+\n+        JsonNode n = mapper.readTree(JSON);\n+        assertNotNull(n);\n+        assertTrue(n.isArray());\n+        ArrayNode an = (ArrayNode) n;\n+        assertEquals(1, an.size());\n+        ArrayNode an2 = (ArrayNode) n.get(0);\n+        assertTrue(an2.isArray());\n+        assertEquals(4, an2.size());\n+    }\n+    \n+    /*\n+    /**********************************************\n+    /* Helper methods\n+    /**********************************************\n+     */\n+\n+    private int calcLength(Iterator<JsonNode> it)\n+    {\n+        int count = 0;\n+        while (it.hasNext()) {\n+            it.next();\n+            ++count;\n+        }\n+        return count;\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperMaps.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+/**\n+ * Unit tests to verify that Json Objects map property to Map-like\n+ * ObjectNodes.\n+ */\n+public class TestTreeMapperMaps\n+    extends BaseTest\n+{\n+    public void testSimpleObject() throws Exception\n+    {\n+        String JSON = \"{ \\\"key\\\" : 1, \\\"b\\\" : \\\"x\\\" }\";\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode root = mapper.readTree(JSON);\n+\n+        // basic properties first:\n+        assertFalse(root.isValueNode());\n+        assertTrue(root.isContainerNode());\n+        assertFalse(root.isArray());\n+        assertTrue(root.isObject());\n+        assertEquals(2, root.size());\n+\n+        // Related to [JACKSON-50]:\n+        Iterator<JsonNode> it = root.iterator();\n+        assertNotNull(it);\n+        assertTrue(it.hasNext());\n+        JsonNode n = it.next();\n+        assertNotNull(n);\n+        assertEquals(IntNode.valueOf(1), n);\n+\n+        assertTrue(it.hasNext());\n+        n = it.next();\n+        assertNotNull(n);\n+        assertEquals(TextNode.valueOf(\"x\"), n);\n+\n+        assertFalse(it.hasNext());\n+\n+        // Ok, then, let's traverse via extended interface\n+        ObjectNode obNode = (ObjectNode) root;\n+        Iterator<Map.Entry<String,JsonNode>> fit = obNode.fields();\n+        // we also know that LinkedHashMap is used, i.e. order preserved\n+        assertTrue(fit.hasNext());\n+        Map.Entry<String,JsonNode> en = fit.next();\n+        assertEquals(\"key\", en.getKey());\n+        assertEquals(IntNode.valueOf(1), en.getValue());\n+\n+        assertTrue(fit.hasNext());\n+        en = fit.next();\n+        assertEquals(\"b\", en.getKey());\n+        assertEquals(TextNode.valueOf(\"x\"), en.getValue());\n+\n+        // Plus: we should be able to modify the node via iterator too:\n+        fit.remove();\n+        assertEquals(1, obNode.size());\n+        assertEquals(IntNode.valueOf(1), root.get(\"key\"));\n+        assertNull(root.get(\"b\"));\n+    }\n+\n+    public void testSimplePath() throws Exception\n+    {\n+        JsonNode root = new ObjectMapper().readTree(\"{ \\\"results\\\" : { \\\"a\\\" : 3 } }\");\n+        assertTrue(root.isObject());\n+        JsonNode rnode = root.path(\"results\");\n+        assertNotNull(rnode);\n+        assertTrue(rnode.isObject());\n+        assertEquals(3, rnode.path(\"a\").intValue());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperSerializer.java\n+package com.fasterxml.jackson.databind.node;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+/**\n+ * This unit test suite tries to verify that the trees ObjectMapper\n+ * constructs can be serialized properly.\n+ */\n+public class TestTreeMapperSerializer\n+    extends BaseTest\n+{\n+    final static String FIELD1 = \"first\";\n+    final static String FIELD2 = \"Second?\";\n+    final static String FIELD3 = \"foo'n \\\"bar\\\"\";\n+    final static String FIELD4 = \"4\";\n+\n+    final static String TEXT1 = \"Some text & \\\"stuff\\\"\";\n+    final static String TEXT2 = \"Some more text:\\twith\\nlinefeeds and all!\";\n+\n+    final static double DOUBLE_VALUE = 9.25;\n+\n+    public void testFromArray()\n+        throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ArrayNode root = mapper.createArrayNode();\n+        root.add(TEXT1);\n+        root.add(3);\n+        ObjectNode obj = root.addObject();\n+        obj.put(FIELD1, true);\n+        obj.putArray(FIELD2);\n+        root.add(false);\n+\n+        /* Ok, ready... let's serialize using one of two alternate\n+         * methods: first preferred (using generator)\n+         * (there are 2 variants here too)\n+         */\n+        for (int i = 0; i < 2; ++i) {\n+            StringWriter sw = new StringWriter();\n+            if (i == 0) {\n+                JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+                root.serialize(gen, null);\n+                gen.close();\n+            } else {\n+                mapper.writeValue(sw, root);\n+            }\n+            verifyFromArray(sw.toString());\n+        }\n+            \n+        // And then convenient but less efficient alternative:\n+        verifyFromArray(root.toString());\n+    }\n+\n+    public void testFromMap()\n+        throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ObjectNode root = mapper.createObjectNode();\n+        root.put(FIELD4, TEXT2);\n+        root.put(FIELD3, -1);\n+        root.putArray(FIELD2);\n+        root.put(FIELD1, DOUBLE_VALUE);\n+\n+        /* Let's serialize using one of two alternate methods:\n+         * first preferred (using generator)\n+         * (there are 2 variants here too)\n+         */\n+        for (int i = 0; i < 2; ++i) {\n+            StringWriter sw = new StringWriter();\n+            if (i == 0) {\n+                JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+                root.serialize(gen, null);\n+                gen.close();\n+            } else {\n+                mapper.writeValue(sw, root);\n+            }\n+            verifyFromMap(sw.toString());\n+        }\n+\n+        // And then convenient but less efficient alternative:\n+        verifyFromMap(root.toString());\n+    }\n+\n+    /**\n+     * Unit test to check for regression of [JACKSON-18].\n+     */\n+    public void testSmallNumbers()\n+        throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        ArrayNode root = mapper.createArrayNode();\n+        for (int i = -20; i <= 20; ++i) {\n+            JsonNode n = root.numberNode(i);\n+            root.add(n);\n+            // Hmmh. Not sure why toString() won't be triggered otherwise...\n+            assertEquals(String.valueOf(i), n.toString());\n+        }\n+\n+        // Loop over 2 different serialization methods\n+        for (int type = 0; type < 2; ++type) {\n+            StringWriter sw = new StringWriter();\n+            if (type == 0) {\n+                JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+                root.serialize(gen, null);\n+                gen.close();\n+            } else {\n+                mapper.writeValue(sw, root);\n+            }\n+            \n+            String doc = sw.toString();\n+            JsonParser jp = new JsonFactory().createJsonParser(new StringReader(doc));\n+            \n+            assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n+            for (int i = -20; i <= 20; ++i) {\n+                assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+                assertEquals(i, jp.getIntValue());\n+                assertEquals(\"\"+i, jp.getText());\n+            }\n+            assertEquals(JsonToken.END_ARRAY, jp.nextToken());\n+            jp.close();\n+        }\n+    }\n+\n+    public void testNull() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        StringWriter sw = new StringWriter();\n+        mapper.writeValue(sw, NullNode.instance);\n+        assertEquals(\"null\", sw.toString());\n+    }\n+\n+    public void testBinary()\n+        throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        final int LENGTH = 13045;\n+        byte[] data = new byte[LENGTH];\n+        for (int i = 0; i < LENGTH; ++i) {\n+            data[i] = (byte) i;\n+        }\n+        StringWriter sw = new StringWriter();\n+        mapper.writeValue(sw, BinaryNode.valueOf(data));\n+\n+        JsonParser jp = new JsonFactory().createJsonParser(sw.toString());\n+        // note: can't determine it's binary from json alone:\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertArrayEquals(data, jp.getBinaryValue());\n+        jp.close();\n+    }\n+\n+    /*\n+    ///////////////////////////////////////////////////////////////\n+    // Internal methods\n+    ///////////////////////////////////////////////////////////////\n+     */\n+\n+    private void verifyFromArray(String input)\n+        throws Exception\n+    {\n+        JsonParser jp = new JsonFactory().createJsonParser(new StringReader(input));\n+        \n+        assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n+        \n+        assertEquals(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(TEXT1, getAndVerifyText(jp));\n+        \n+        assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertEquals(3, jp.getIntValue());\n+        \n+        assertEquals(JsonToken.START_OBJECT, jp.nextToken());\n+        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertEquals(FIELD1, getAndVerifyText(jp));\n+        \n+        assertEquals(JsonToken.VALUE_TRUE, jp.nextToken());\n+        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertEquals(FIELD2, getAndVerifyText(jp));\n+        \n+        assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n+        assertEquals(JsonToken.END_ARRAY, jp.nextToken());\n+        assertEquals(JsonToken.END_OBJECT, jp.nextToken());\n+        \n+        assertEquals(JsonToken.VALUE_FALSE, jp.nextToken());\n+        \n+        assertEquals(JsonToken.END_ARRAY, jp.nextToken());\n+        assertNull(jp.nextToken());\n+    }\n+\n+    private void verifyFromMap(String input)\n+        throws Exception\n+    {\n+        JsonParser jp = new JsonFactory().createJsonParser(new StringReader(input));\n+        assertEquals(JsonToken.START_OBJECT, jp.nextToken());\n+        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertEquals(FIELD4, getAndVerifyText(jp));\n+        assertEquals(JsonToken.VALUE_STRING, jp.nextToken());\n+        assertEquals(TEXT2, getAndVerifyText(jp));\n+        \n+        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertEquals(FIELD3, getAndVerifyText(jp));\n+        assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertEquals(-1, jp.getIntValue());\n+        \n+        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertEquals(FIELD2, getAndVerifyText(jp));\n+        assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n+        assertEquals(JsonToken.END_ARRAY, jp.nextToken());\n+        \n+        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertEquals(FIELD1, getAndVerifyText(jp));\n+        assertEquals(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n+        assertEquals(DOUBLE_VALUE, jp.getDoubleValue());\n+        \n+        assertEquals(JsonToken.END_OBJECT, jp.nextToken());\n+        \n+        assertNull(jp.nextToken());\n+    }\n+}", "timestamp": 1328213084, "metainfo": ""}