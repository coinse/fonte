{"sha": "6b9266d2f5b1b5e412d7179af1b078124fc4863a", "log": "Merge pull request #434 from fge/decimalnode-equals  Ensure that DecimalNodes with mathematically equal values are equal", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/DecimalNode.java\n         if (o == this) return true;\n         if (o == null) return false;\n         if (o instanceof DecimalNode) {\n-            return ((DecimalNode) o)._value.equals(_value);\n+            return ((DecimalNode) o)._value.compareTo(_value) == 0;\n         }\n         return false;\n     }\n \n     @Override\n-    public int hashCode() { return _value.hashCode(); }\n+    public int hashCode() { return Double.valueOf(doubleValue()).hashCode(); }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestNumberNodes.java\n         assertTrue(DecimalNode.valueOf(BigDecimal.ZERO).canConvertToLong());\n         assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MAX_VALUE)).canConvertToLong());\n         assertTrue(DecimalNode.valueOf(BigDecimal.valueOf(Long.MIN_VALUE)).canConvertToLong());\n+    }\n+\n+    public void testDecimalNodeEqualsHashCode()\n+    {\n+        /*\n+         * We want DecimalNodes with equivalent _numeric_ values to be equal;\n+         * this is not the case for BigDecimal where \"1.0\" and \"1\" are not\n+         * equal!\n+         */\n+        BigDecimal b1 = BigDecimal.ONE;\n+        BigDecimal b2 = new BigDecimal(\"1.0\");\n+        BigDecimal b3 = new BigDecimal(\"0.01e2\");\n+        BigDecimal b4 = new BigDecimal(\"1000e-3\");\n+\n+        DecimalNode node1 = new DecimalNode(b1);\n+        DecimalNode node2 = new DecimalNode(b2);\n+        DecimalNode node3 = new DecimalNode(b3);\n+        DecimalNode node4 = new DecimalNode(b4);\n+\n+        assertEquals(node1.hashCode(), node2.hashCode());\n+        assertEquals(node2.hashCode(), node3.hashCode());\n+        assertEquals(node3.hashCode(), node4.hashCode());\n+\n+        assertEquals(node1, node2);\n+        assertEquals(node2, node1);\n+        assertEquals(node2, node3);\n+        assertEquals(node3, node4);\n     }\n \n     public void testBigIntegerNode() throws Exception\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleModule.java\n import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n \n /**\n- * Simple {@link Module} implementation that allows registration\n- * of serializers and deserializers, and bean serializer\n- * and deserializer modifiers.\n+ * Vanilla {@link Module} implementation that allows registration\n+ * of serializers and deserializers, bean serializer\n+ * and deserializer modifiers, registration of subtypes and mix-ins\n+ * as well as some other commonly\n+ * needed aspects (addition of custom {@link AbstractTypeResolver}s,\n+ * {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s).\n+ *<p>\n+ * NOTE: although it is not expected that sub-types should need to\n+ * override {@link #setupModule(SetupContext)} method, if they choose\n+ * to do so they MUST call <code>super.setupModule(context);</code>\n+ * to ensure that registration works as expected.\n  */\n public class SimpleModule\n     extends Module\n     implements java.io.Serializable\n {\n-    private static final long serialVersionUID = 3132264350026957446L;\n+    // at 2.4.0:\n+    private static final long serialVersionUID = -8905749147637667249L;\n \n     protected final String _name;\n     protected final Version _version;\n         return _name;\n     }\n \n+    /**\n+     * Standard implementation handles registration of all configured\n+     * customizations: it is important that sub-classes call this \n+     * implementation (usually before additional custom logic)\n+     * if they choose to override it; otherwise customizations\n+     * will not be registered.\n+     */\n     @Override\n     public void setupModule(SetupContext context)\n     {\n     }\n \n     @Override\n-    public Version version() {\n-        return _version;\n-    }\n+    public Version version() { return _version; }\n }", "timestamp": 1396889829, "metainfo": ""}