{"sha": "d2af37379b25961cb0b31033270113b69425a214", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n \n     // Also part of BeanProperty implementation\n     @Override\n-    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n+    public void depositSchemaProperty(JsonObjectFormatVisitor v)\n         throws JsonMappingException\n     {\n-        if (objectVisitor != null) {\n+        if (v != null) {\n             if (isRequired()) {\n-                objectVisitor.property(this); \n+                v.property(this); \n             } else {\n-                objectVisitor.optionalProperty(this);\n+                v.optionalProperty(this);\n             }\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n     /**********************************************************\n      */\n     \n-    protected boolean _asTimestamp(SerializerProvider provider) {\n+    protected boolean _asTimestamp(SerializerProvider provider)\n+    {\n         if (_useTimestamp != null) {\n-        \treturn _useTimestamp.booleanValue();\n+            return _useTimestamp.booleanValue();\n         }\n         if (_customFormat == null) {\n-        \treturn provider.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+            if (provider != null) {\n+                return provider.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n+            }\n+            // 12-Jun-2014, tatu: Is it legal not to have provider? Was NPE:ing earlier so leave a check\n+            throw new IllegalArgumentException(\"Null 'provider' passed for \"+handledType().getName());\n         }\n         return false;\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n \n         assertEquals(\"{\\\"id\\\":\\\"fooId\\\",\\\"bar\\\":\\\"barId\\\"}\",\n                 MAPPER.writeValueAsString(new Foo294(\"fooId\", \"barId\")));\n     }\n+\n+    @JsonPropertyOrder({ \"a\", \"something\" })\n+    static class Response {\n+        public String a = \"x\";\n+\n+        @JsonProperty   //does not show up\n+        public boolean isSomething() { return true; }\n+    }\n+\n+    public void testWithIsGetter() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+        m.setVisibility(PropertyAccessor.GETTER, Visibility.NONE)\n+        .setVisibility(PropertyAccessor.FIELD, Visibility.ANY)\n+        .setVisibility(PropertyAccessor.CREATOR, Visibility.NONE)\n+        .setVisibility(PropertyAccessor.IS_GETTER, Visibility.NONE)\n+        .setVisibility(PropertyAccessor.SETTER, Visibility.NONE);        \n+        final String JSON = m.writeValueAsString(new Response());\n+        assertEquals(aposToQuotes(\"{'a':'x','something':true}\"), JSON);\n+    }\n }", "timestamp": 1402805481, "metainfo": ""}