{"sha": "46249bdd2e33d2a57cc7bbe6840672011a785496", "log": "Merge pull request #576 from adstro/2.4  Add fluent API for adding mixins", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * @param target Class (or interface) whose annotations to effectively override\n      * @param mixinSource Class (or interface) whose annotations are to\n      *   be \"added\" to target's annotations, overriding as necessary\n-     */\n+     *\n+     * @deprecated Replaced by a fluent form of the method; {@link #addMixIn(Class, Class)}.\n+     */\n+    @Deprecated\n     public final void addMixInAnnotations(Class<?> target, Class<?> mixinSource)\n     {\n         _mixInAnnotations.put(new ClassKey(target), mixinSource);\n+    }\n+\n+    /**\n+     * Method to use for adding mix-in annotations to use for augmenting\n+     * specified class or interface. All annotations from\n+     * <code>mixinSource</code> are taken to override annotations\n+     * that <code>target</code> (or its supertypes) has.\n+     *\n+     * @param target Class (or interface) whose annotations to effectively override\n+     * @param mixinSource Class (or interface) whose annotations are to\n+     *   be \"added\" to target's annotations, overriding as necessary\n+     */\n+    public final ObjectMapper addMixIn(Class<?> target, Class<?> mixinSource)\n+    {\n+        _mixInAnnotations.put(new ClassKey(target), mixinSource);\n+        return this;\n     }\n \n     public final Class<?> findMixInClassFor(Class<?> cls) {", "timestamp": 1412739867, "metainfo": ""}