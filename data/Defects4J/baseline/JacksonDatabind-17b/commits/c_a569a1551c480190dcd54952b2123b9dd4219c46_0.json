{"sha": "a569a1551c480190dcd54952b2123b9dd4219c46", "log": "minor refactoring", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n      * be created.\n      */\n     public boolean canInstantiate() {\n-        return\n-             canCreateUsingDefault()\n-             || canCreateUsingDelegate()\n-             || canCreateFromObjectWith()\n-             || canCreateFromString()\n-             || canCreateFromInt()\n-             || canCreateFromLong()\n-             || canCreateFromDouble()\n-             || canCreateFromBoolean()\n-             ;\n+        return canCreateUsingDefault() || canCreateUsingDelegate()\n+             || canCreateFromObjectWith() || canCreateFromString()\n+             || canCreateFromInt() || canCreateFromLong()\n+             || canCreateFromDouble() || canCreateFromBoolean();\n     }    \n     \n     /**\n      * Method that can be called to check whether a String-based creator\n      * is available for this instantiator\n      */\n-    public boolean canCreateFromString() {\n-        return false;\n-    }\n+    public boolean canCreateFromString() { return false; }\n \n     /**\n      * Method that can be called to check whether an integer (int, Integer) based\n      * creator is available to use (to call {@link #createFromInt}).\n      */\n-    public boolean canCreateFromInt() {\n-        return false;\n-    }\n+    public boolean canCreateFromInt() { return false; }\n \n     /**\n      * Method that can be called to check whether a long (long, Long) based\n      * creator is available to use (to call {@link #createFromLong}).\n      */\n-    public boolean canCreateFromLong() {\n-        return false;\n-    }\n+    public boolean canCreateFromLong() { return false; }\n \n     /**\n      * Method that can be called to check whether a double (double / Double) based\n      * creator is available to use (to call {@link #createFromDouble}).\n      */\n-    public boolean canCreateFromDouble() {\n-        return false;\n-    }\n+    public boolean canCreateFromDouble() { return false; }\n \n     /**\n      * Method that can be called to check whether a double (boolean / Boolean) based\n      * creator is available to use (to call {@link #createFromDouble}).\n      */\n-    public boolean canCreateFromBoolean() {\n-        return false;\n-    }\n+    public boolean canCreateFromBoolean() { return false; }\n     \n     /**\n      * Method that can be called to check whether a default creator (constructor,\n      * or no-arg static factory method)\n      * is available for this instantiator\n      */\n-    public boolean canCreateUsingDefault() {\n-        return getDefaultCreator() != null;\n-    }\n+    public boolean canCreateUsingDefault() {  return getDefaultCreator() != null; }\n \n     /**\n      * Method that can be called to check whether a delegate-based creator (single-arg\n      * constructor or factory method)\n      * is available for this instantiator\n      */\n-    public boolean canCreateUsingDelegate() {\n-        return false;\n-    }\n+    public boolean canCreateUsingDelegate() { return false; }\n \n     /**\n      * Method that can be called to check whether a property-based creator\n      * (argument-taking constructor or factory method)\n      * is available to instantiate values from JSON Object\n      */\n-    public boolean canCreateFromObjectWith() {\n-        return false;\n-    }\n+    public boolean canCreateFromObjectWith() { return false; }\n \n     /**\n      * Method called to determine types of instantiation arguments\n      * NOTE: all properties will be of type\n      * {@link com.fasterxml.jackson.databind.deser.CreatorProperty}.\n      */\n-    public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig config) {\n-        return null;\n-    }\n+    public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig config) { return null; }\n \n     /**\n      * Method that can be used to determine what is the type of delegate\n      * specified type (using standard deserializer for that type), and\n      * pass that to instantiator.\n      */\n-    public JavaType getDelegateType(DeserializationConfig config) {\n-        return null;\n-    }\n+    public JavaType getDelegateType(DeserializationConfig config) { return null; }\n     \n     /*\n     /**********************************************************\n      */\n     public Object createFromObjectWith(DeserializationContext ctxt, Object[] args)\n         throws IOException, JsonProcessingException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n-                +getValueTypeDesc()+\" with arguments\");\n+        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()+\" with arguments\");\n     }\n \n     /**\n      * an intermediate \"delegate\" value to pass to createor method\n      */\n     public Object createUsingDelegate(DeserializationContext ctxt, Object delegate)\n-        throws IOException, JsonProcessingException\n-    {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n-                +getValueTypeDesc()+\" using delegate\");\n+        throws IOException, JsonProcessingException {\n+        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()+\" using delegate\");\n     }\n     \n     /*\n      * That is, even if {@link #canCreateUsingDefault()} returns true,\n      * this method may return null .\n      */\n-    public AnnotatedWithParams getDefaultCreator() {\n-        return null;\n-    }\n+    public AnnotatedWithParams getDefaultCreator() { return null; }\n     \n     /**\n      * Method that can be called to try to access member (constructor,\n      * That is, even if {@link #canCreateUsingDelegate()} returns true,\n      * this method may return null .\n      */\n-    public AnnotatedWithParams getDelegateCreator() {\n-        return null;\n-    }\n+    public AnnotatedWithParams getDelegateCreator() { return null; }\n \n     /**\n      * Method that can be called to try to access member (constructor,\n      * That is, even if {@link #canCreateFromObjectWith()} returns true,\n      * this method may return null .\n      */\n-    public AnnotatedWithParams getWithArgsCreator() {\n-        return null;\n-    }\n+    public AnnotatedWithParams getWithArgsCreator() { return null; }\n \n     /**\n      * If an incomplete creator was found, this is the first parameter that\n      * needs further annotation to help make the creator complete.\n      */\n-    public AnnotatedParameter getIncompleteParameter() {\n-        return null;\n-    }\n+    public AnnotatedParameter getIncompleteParameter() { return null; }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n import com.fasterxml.jackson.databind.util.EnumResolver;\n \n /**\n- * Base class for simple key deserializers.\n+ * Default {@link KeyDeserializer} implementation used for most {@link java.util.Map}\n+ * types Jackson supports.\n+ * Implemented as \"chameleon\" (or swiss pocket knife) class; not particularly elegant,\n+ * but helps reduce number of classes and jar size (class metadata adds significant\n+ * per-class overhead; much more than bytecode).\n  */\n @JacksonStdImpl\n public class StdKeyDeserializer extends KeyDeserializer\n     public static StdKeyDeserializer forType(Class<?> raw)\n     {\n         int kind;\n-        FromStringDeserializer<?> deser = null;\n \n         // first common types:\n-        if (raw == UUID.class) {\n+        if (raw == String.class || raw == Object.class) {\n+            return StringKD.forType(raw);\n+        } else if (raw == UUID.class) {\n             kind = TYPE_UUID;\n         } else if (raw == Integer.class) {\n             kind = TYPE_INT;\n         } else if (raw == Double.class) {\n             kind = TYPE_DOUBLE;\n         } else if (raw == Locale.class) {\n-            kind = TYPE_LOCALE;\n-            deser = FromStringDeserializer.findDeserializer(Locale.class);\n+            FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);\n+            return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);\n         } else {\n             return null;\n         }\n-        return new StdKeyDeserializer(kind, raw, deser);\n+        return new StdKeyDeserializer(kind, raw);\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java\n     implements KeyDeserializers, java.io.Serializable\n {\n     private static final long serialVersionUID = 923268084968181479L;\n-\n-    /**\n-     * @deprecated Since 2.2, just call <code>StdKeyDeserializer.StringKD</code> directly\n-     */\n-    @Deprecated\n-    public static KeyDeserializer constructStringKeyDeserializer(DeserializationConfig config,\n-            JavaType type) {\n-        return StdKeyDeserializer.StringKD.forType(type.getRawClass());\n-    }\n     \n     public static KeyDeserializer constructEnumKeyDeserializer(EnumResolver<?> enumResolver) {\n         return new StdKeyDeserializer.EnumKD(enumResolver, null);\n             DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException\n     {\n         Class<?> raw = type.getRawClass();\n-        // First, common types; String/Object/UUID, Int/Long, Dates\n-        if (raw == String.class || raw == Object.class) {\n-            return StdKeyDeserializer.StringKD.forType(raw);\n-        }\n         // 23-Apr-2013, tatu: Map primitive types, just in case one was given\n         if (raw.isPrimitive()) {\n             raw = ClassUtil.wrapperType(raw);", "timestamp": 1388731395, "metainfo": ""}