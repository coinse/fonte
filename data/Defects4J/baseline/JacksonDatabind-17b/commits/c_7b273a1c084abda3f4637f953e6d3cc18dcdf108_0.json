{"sha": "7b273a1c084abda3f4637f953e6d3cc18dcdf108", "log": "Merge branch 'master' of github.com:FasterXML/jackson-databind", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestScalaLikeImplicitProperties.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Tests Scala-style JVM naming patterns for properties.\n+ *\n+ * Scala uses identifiers that are legal JVM names, but not legal Java names:\n+ *\n+ * <ul>\n+ *     <li><code>prop\u2423</code> (trailing space) for fields</li>\n+ *     <li><code>prop</code> for getters</li>\n+ *     <li><code>prop_=</code> for setters</li>\n+ * </ul>\n+ *\n+ * Scala sources turn property accesses into method calls in most cases; the\n+ * backing field and the particulars of the method names are implementation details.\n+ *\n+ * Since I can't reproduce them in Java, I've substituted legal but uncommonly\n+ * used characters as placeholders.\n+ */\n+public class TestScalaLikeImplicitProperties extends BaseMapTest\n+{\n+    static class ValProperty\n+    {\n+        public final String prop\u203f;\n+        public String prop() { return prop\u203f; }\n+\n+        public ValProperty(String prop) {\n+            prop\u203f = prop;\n+        }\n+    }\n+\n+\n+    static class ValWithBeanProperty\n+    {\n+        public final String prop\u203f;\n+        public String prop() { return prop\u203f; }\n+        public String getProp() { return prop\u203f; }\n+\n+        public ValWithBeanProperty(String prop) {\n+            prop\u203f = prop;\n+        }\n+    }\n+\n+\n+    static class VarProperty\n+    {\n+        public String prop\u203f;\n+        public String prop() { return prop\u203f; }\n+        public void prop_\u2040(String p) { prop\u203f = p; }\n+\n+        public VarProperty(String prop) {\n+            prop\u203f = prop;\n+        }\n+    }\n+\n+\n+    static class VarWithBeanProperty\n+    {\n+        public String prop\u203f;\n+        public String prop() { return prop\u203f; }\n+        public void prop_\u2040(String p) { prop\u203f = p; }\n+        public String getProp() { return prop\u203f; }\n+        public void setProp(String p) { prop\u203f = p; }\n+\n+        public VarWithBeanProperty(String prop) {\n+            prop\u203f = prop;\n+        }\n+    }\n+\n+    static class GetterSetterProperty\n+    {\n+        // Different name to represent an arbitrary implementation, not necessarily local to this class.\n+        private String _prop_impl = \"get/set\";\n+        public String prop() { return _prop_impl; }\n+        public void prop_\u2040(String p) { _prop_impl = p; }\n+\n+        // Getter/Setters are typically not in the constructor because they are implemented\n+        // by the end user, not the compiler. They should be detected similar to 'bean-style'\n+        // getProp/setProp pairs.\n+    }\n+\n+\n+    public void testValProperty() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+\n+        // TODO: Activate whatever handler implements the property detection style\n+\n+        assertEquals(\"{\\\"prop\\\":\\\"val\\\"}\", m.writeValueAsString(new ValProperty(\"val\")));\n+    }\n+\n+\n+    public void testValWithBeanProperty() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+\n+        // TODO: Activate whatever handler implements the property detection style\n+\n+        assertEquals(\"{\\\"prop\\\":\\\"val\\\"}\", m.writeValueAsString(new ValWithBeanProperty(\"val\")));\n+    }\n+\n+\n+    public void testVarProperty() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+\n+        // TODO: Activate whatever handler implements the property detection style\n+\n+        assertEquals(\"{\\\"prop\\\":\\\"var\\\"}\", m.writeValueAsString(new VarProperty(\"var\")));\n+        VarProperty result = m.readValue(\"{\\\"prop\\\":\\\"read\\\"}\", VarProperty.class);\n+        assertEquals(\"read\", result.prop());\n+    }\n+\n+\n+    public void testVarWithBeanProperty() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+\n+        // TODO: Activate whatever handler implements the property detection style\n+\n+        assertEquals(\"{\\\"prop\\\":\\\"var\\\"}\", m.writeValueAsString(new VarWithBeanProperty(\"var\")));\n+        VarWithBeanProperty result = m.readValue(\"{\\\"prop\\\":\\\"read\\\"}\", VarWithBeanProperty.class);\n+        assertEquals(\"read\", result.prop());\n+    }\n+\n+\n+    public void testGetterSetterProperty() throws Exception\n+    {\n+        ObjectMapper m = new ObjectMapper();\n+\n+        // TODO: Activate whatever handler implements the property detection style\n+\n+        assertEquals(\"{\\\"prop\\\":\\\"get/set\\\"}\", m.writeValueAsString(new GetterSetterProperty()));\n+        GetterSetterProperty result = m.readValue(\"{\\\"prop\\\":\\\"read\\\"}\", GetterSetterProperty.class);\n+        assertEquals(\"read\", result.prop());\n+    }\n+}", "timestamp": 1398972010, "metainfo": ""}