{"sha": "25d69f5cb4d559807d51098a49ac013a2eaa8954", "log": "... and cleanup. Mostly done by now.", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanSerializer.java\n \n         //END OF TOKEN PARSING\n         assertNull(jp.nextToken());\n+        jp.close();\n     }\n \n     private static enum EFixtureEnum\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue.java\n     }\n \n     // Test for [JACKSON-717] -- ensure 'readValues' also does update\n+    @SuppressWarnings(\"resource\")\n     public void testUpdateSequence() throws Exception\n     {\n         XYBean toUpdate = new XYBean();\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBlocking.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBlocking.java\n         } catch (IOException ioe) {\n             verifyException(ioe, \"Unexpected end-of-input: expected close marker for ARRAY\");\n         }\n+        jp.close();\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandling.java\n package com.fasterxml.jackson.databind.deser;\n \n import java.io.*;\n-\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n         }\n     }\n \n+    @SuppressWarnings(\"resource\")\n     public void testExceptionWithIncomplete()\n         throws Exception\n     {\n         if (t != null) {\n             fail(\"Expected current token to be null after end-of-stream, was: \"+t);\n         }\n+        jp.close();\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestFieldDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestFieldDeserialization.java\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.*;\n \n         @JsonProperty(\"x\")\n         protected int myX = 10;\n \n+        @SuppressWarnings(\"hiding\")\n         public int y = 11;\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n             Integer result = MAPPER.readValue(jp, Integer.class);\n             assertEquals(Integer.valueOf(i), result);\n         }\n+        jp.close();\n     }\n }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/interop/TestJDKProxy.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestJDKProxy.java\n \n     public static <T> T getProxy(Class<T> type, Object obj) {\n         class ProxyUtil implements InvocationHandler {\n+            @SuppressWarnings(\"hiding\")\n             Object obj;\n             public ProxyUtil(Object o) {\n                 obj = o;\n--- a/src/test/java/com/fasterxml/jackson/databind/introspect/TestBuilderMethods.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestBuilderMethods.java\n {\n     static class SimpleBuilder\n     {\n-    \tpublic int x;\n-    \t\n-    \tpublic SimpleBuilder withX(int x) {\n-    \t\tthis.x = x;\n-    \t\treturn this;\n-    \t}\n+        public int x;\n+\n+        @SuppressWarnings(\"hiding\")\n+        public SimpleBuilder withX(int x) {\n+    \t\t    this.x = x;\n+    \t\t    return this;\n+        }\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestReadJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestReadJsonSchema.java\n import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n \n /**\n- * Trivial test to ensure {@link JsonSchema} can be also deserialized\n+ * Trivial test to ensure <code>JsonSchema</code> can be also deserialized\n  */\n @SuppressWarnings(\"deprecation\")\n public class TestReadJsonSchema\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForObject.java\n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n         assertNull(jp.nextToken());\n         jp.close();\n+        buf.close();\n \n         // then as an array:\n         buf = new TokenBuffer(mapper);\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n         assertNull(jp.nextToken());\n         jp.close();\n+        buf.close();\n \n         // and finally as scalar\n         buf = new TokenBuffer(mapper);\n         assertEquals(321, jp.getIntValue());\n         assertNull(jp.nextToken());\n         jp.close();\n+        buf.close();\n     }\n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestArrayNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestArrayNode.java\n \n         n.removeAll();\n         assertEquals(0, n.size());\n+        jg.close();\n     }\n \n     public void testAdds()\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperDeserializer.java\n         assertEquals(4, result.size());\n \n         assertNull(mapper.readTree(jp));\n+        jp.close();\n     }\n \n     public void testMultiple() throws Exception\n         assertEquals(3, result.size());\n \n         assertNull(mapper.readTree(jp));\n+        jp.close();\n     }\n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestTreeMapperSerializer.java\n         \n         assertEquals(JsonToken.END_ARRAY, jp.nextToken());\n         assertNull(jp.nextToken());\n+        jp.close();\n     }\n \n     private void verifyFromMap(String input)\n         assertEquals(JsonToken.END_OBJECT, jp.nextToken());\n         \n         assertNull(jp.nextToken());\n+        jp.close();\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestArraySerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestArraySerialization.java\n         assertEquals(str, jp.getText());\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n         assertNull(jp.nextToken());\n+        jp.close();\n     }\n     \n     public void testIntArray() throws Exception\n                 assertEquals(i, jp.getIntValue());\n             }\n             assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+            jp.close();\n         }\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.*;\n-\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n                 assertEquals(i, jp.getIntValue());\n             }\n             assertToken(JsonToken.END_ARRAY, jp.nextToken());\n-        }\n-    }\n-\n+            jp.close();\n+        }\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n     public void testBigCollection()\n         throws IOException\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestExceptionHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestExceptionHandling.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n-\n import com.fasterxml.jackson.test.BaseTest;\n import com.fasterxml.jackson.test.BrokenStringWriter;\n \n      * Unit test for verifying that regular IOExceptions are not wrapped\n      * but are passed through as is.\n      */\n+    @SuppressWarnings(\"resource\")\n     public void testExceptionWithSimpleMapper()\n         throws Exception\n     {\n         }\n     }\n \n+    @SuppressWarnings(\"resource\")\n     public void testExceptionWithMapperAndGenerator()\n         throws Exception\n     {\n         }\n     }\n \n+    @SuppressWarnings(\"resource\")\n     public void testExceptionWithGeneratorMapping()\n         throws Exception\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n     }\n \n     // Test for [JACKSON-282]\n+    @SuppressWarnings(\"resource\")\n     public void testCloseCloseable() throws IOException\n     {\n         ObjectMapper m = new ObjectMapper();\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFieldSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFieldSerialization.java\n         public int _z;\n     }\n \n+    @SuppressWarnings(\"hiding\")\n     public static class OkDupFieldBean\n         extends SimpleFieldBean\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJacksonTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJacksonTypes.java\n         while (jp.nextToken() != null) {\n             tb.copyCurrentEvent(jp);\n         }\n+        jp.close();\n         // Then serialize as String\n         String str = serializeAsString(tb);\n+        tb.close();\n         // and verify it looks ok\n         verifyJsonSpecSampleDoc(createParserUsingReader(str), true);\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestUntypedSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestUntypedSerialization.java\n             \n             assertEquals(JsonToken.END_ARRAY, jp.nextToken());\n             assertNull(jp.nextToken());\n+            jp.close();\n         }\n     }\n \n             assertEquals(JsonToken.END_OBJECT, jp.nextToken());\n \n             assertNull(jp.nextToken());\n+            jp.close();\n         }\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArrayWithBuilder.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestPOJOAsArrayWithBuilder.java\n package com.fasterxml.jackson.databind.struct;\n \n import com.fasterxml.jackson.annotation.*;\n-\n import com.fasterxml.jackson.databind.BaseMapTest;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n     {\n         public int x, y;\n         \n+        @SuppressWarnings(\"hiding\")\n         public SimpleBuilderXY withX(int x) {\n             this.x = x;\n             return this;\n         }\n \n+        @SuppressWarnings(\"hiding\")\n         public SimpleBuilderXY withY(int y) {\n             this.y = y;\n             return this;\n--- a/src/test/java/perf/ManualObjectWriterPerf.java\n+++ b/src/test/java/perf/ManualObjectWriterPerf.java\n         final long[] times = new long[TYPES];\n \n         while (true) {\n+            @SuppressWarnings(\"resource\")\n             final NopOutputStream out = new NopOutputStream();\n             try {  Thread.sleep(100L); } catch (InterruptedException ie) { }\n             int round = (i++ % TYPES);", "timestamp": 1374818235, "metainfo": ""}