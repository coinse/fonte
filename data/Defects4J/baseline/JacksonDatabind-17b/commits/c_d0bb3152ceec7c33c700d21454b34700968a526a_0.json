{"sha": "d0bb3152ceec7c33c700d21454b34700968a526a", "log": "Removing BeanProperty from TypeDeserializer handling as well", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n      */\n     public final KeyDeserializer findKeyDeserializer(JavaType keyType,\n             BeanProperty property) throws JsonMappingException {\n-        return _deserCache.findKeyDeserializer(this, keyType, property);\n+        KeyDeserializer kd = _deserCache.findKeyDeserializer(this, keyType);\n+        // Second: contextualize?\n+        if (kd instanceof ContextualKeyDeserializer) {\n+            kd = ((ContextualKeyDeserializer) kd).createContextual(this, property);\n+        }\n+        return kd;\n     }\n     \n     /*\n     }\n \n     public final KeyDeserializer keyDeserializerInstance(Annotated annotated,\n-            BeanProperty property, Object deserDef)\n+            Object deserDef)\n         throws JsonMappingException\n     {\n         if (deserDef == null) {\n         if (deser instanceof ResolvableDeserializer) {\n             ((ResolvableDeserializer) deser).resolve(this);\n         }\n+        /*\n         // Second: contextualize:\n         if (deser instanceof ContextualKeyDeserializer) {\n             deser = ((ContextualKeyDeserializer) deser).createContextual(this, property);\n         }\n+        */\n         return deser;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         final DeserializationConfig config = ctxt.getConfig();\n         JavaType t0 = config.getTypeFactory().constructType(param.getParameterType(), beanDesc.bindingsForBeanType());\n         BeanProperty.Std property = new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), param);\n-        JavaType type = resolveType(ctxt, beanDesc, t0, param, property);\n+        JavaType type = resolveType(ctxt, beanDesc, t0, param);\n         if (type != t0) {\n             property = property.withType(type);\n         }\n         // Is there an annotation that specifies exact deserializer?\n         JsonDeserializer<Object> deser = findDeserializerFromAnnotation(ctxt, param);\n         // If yes, we are mostly done:\n-        type = modifyTypeByAnnotation(ctxt, param, type, property);\n+        type = modifyTypeByAnnotation(ctxt, param, type);\n \n         // Type deserializer: either comes from property (and already resolved)\n         TypeDeserializer typeDeser = (TypeDeserializer) type.getTypeHandler();\n         \n     @Override\n     public JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt,\n-            ArrayType type, final BeanDescription beanDesc, BeanProperty property)\n+            ArrayType type, final BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         JavaType elemType = type.getContentType();\n     \n     @Override\n     public JsonDeserializer<?> createCollectionDeserializer(DeserializationContext ctxt,\n-            CollectionType type, BeanDescription beanDesc, BeanProperty property)\n+            CollectionType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         JavaType contentType = type.getContentType();\n     \n     @Override\n     public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,\n-            MapType type, BeanDescription beanDesc, BeanProperty property)\n+            MapType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n         final DeserializationConfig config = ctxt.getConfig();\n     \n     @Override\n     public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n-            JavaType type, BeanProperty property)\n+            JavaType type)\n         throws JsonMappingException\n     {\n         final DeserializationConfig config = ctxt.getConfig();\n         if (_factoryConfig.hasKeyDeserializers()) {\n             BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n             for (KeyDeserializers d  : _factoryConfig.keyDeserializers()) {\n-                KeyDeserializer deser = d.findKeyDeserializer(type, config, beanDesc, property);\n+                KeyDeserializer deser = d.findKeyDeserializer(type, config, beanDesc);\n                 if (deser != null) {\n                     return deser;\n                 }\n      */\n     @SuppressWarnings({ \"unchecked\" })\n     protected <T extends JavaType> T modifyTypeByAnnotation(DeserializationContext ctxt,\n-            Annotated a, T type, BeanProperty prop)\n+            Annotated a, T type)\n         throws JsonMappingException\n     {\n         // first: let's check class for the instance itself:\n              */\n             if (keyType != null && keyType.getValueHandler() == null) {\n                 Object kdDef = intr.findKeyDeserializer(a);\n-                KeyDeserializer kd = ctxt.keyDeserializerInstance(a, prop, kdDef);\n+                KeyDeserializer kd = ctxt.keyDeserializerInstance(a, kdDef);\n                 if (kd != null) {\n                     type = (T) ((MapLikeType) type).withKeyValueHandler(kd);\n                     keyType = type.getKeyType(); // just in case it's used below\n      * needed in some cases.\n      */\n     protected JavaType resolveType(DeserializationContext ctxt,\n-            BeanDescription beanDesc, JavaType type, AnnotatedMember member,\n-            BeanProperty property)                    \n+            BeanDescription beanDesc, JavaType type, AnnotatedMember member)\n         throws JsonMappingException\n     {\n         // [JACKSON-154]: Also need to handle keyUsing, contentUsing\n             JavaType keyType = type.getKeyType();\n             if (keyType != null) {\n                 Object kdDef = intr.findKeyDeserializer(member);\n-                KeyDeserializer kd = ctxt.keyDeserializerInstance(member, property, kdDef);\n+                KeyDeserializer kd = ctxt.keyDeserializerInstance(member, kdDef);\n                 if (kd != null) {\n                     type = ((MapLikeType) type).withKeyValueHandler(kd);\n                     keyType = type.getKeyType(); // just in case it's used below\n     \treturn type;\n     }\n     \n-    protected EnumResolver<?> constructEnumResolver(Class<?> enumClass, DeserializationConfig config,\n-            AnnotatedMethod jsonValueMethod)\n+    protected EnumResolver<?> constructEnumResolver(Class<?> enumClass,\n+            DeserializationConfig config, AnnotatedMethod jsonValueMethod)\n     {\n         if (jsonValueMethod != null) {\n             Method accessor = jsonValueMethod.getAnnotated();\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n         // we know it's a 2-arg method, second arg is the value\n         JavaType type = beanDesc.bindingsForBeanType().resolveType(setter.getGenericParameterType(1));\n         BeanProperty.Std property = new BeanProperty.Std(setter.getName(), type, beanDesc.getClassAnnotations(), setter);\n-        type = resolveType(ctxt, beanDesc, type, setter, property);\n+        type = resolveType(ctxt, beanDesc, type, setter);\n \n         /* AnySetter can be annotated with @JsonClass (etc) just like a\n          * regular setter... so let's see if those are used.\n         /* Otherwise, method may specify more specific (sub-)class for\n          * value (no need to check if explicit deser was specified):\n          */\n-        type = modifyTypeByAnnotation(ctxt, setter, type, property);\n+        type = modifyTypeByAnnotation(ctxt, setter, type);\n         return new SettableAnyProperty(property, setter, type, null);\n     }\n \n         JavaType t0 = beanDesc.resolveType(jdkType);\n \n         BeanProperty.Std property = new BeanProperty.Std(name, t0, beanDesc.getClassAnnotations(), mutator);\n-        JavaType type = resolveType(ctxt, beanDesc, t0, mutator, property);\n+        JavaType type = resolveType(ctxt, beanDesc, t0, mutator);\n         // did type change?\n         if (type != t0) {\n             property = property.withType(type);\n          * If so, let's use it.\n          */\n         JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);\n-        type = modifyTypeByAnnotation(ctxt, mutator, type, property);\n+        type = modifyTypeByAnnotation(ctxt, mutator, type);\n         TypeDeserializer typeDeser = type.getTypeHandler();\n         SettableBeanProperty prop;\n         if (mutator instanceof AnnotatedMethod) {\n         /* First: does the Method specify the deserializer to use?\n          * If so, let's use it.\n          */\n-        BeanProperty.Std property = new BeanProperty.Std(name, type, beanDesc.getClassAnnotations(), getter);\n-        // @TODO: create BeanProperty to pass?\n+//        BeanProperty.Std property = new BeanProperty.Std(name, type, beanDesc.getClassAnnotations(), getter);\n+\n         JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, getter);\n-        type = modifyTypeByAnnotation(ctxt, getter, type, property);\n+        type = modifyTypeByAnnotation(ctxt, getter, type);\n         TypeDeserializer typeDeser = type.getTypeHandler();\n         SettableBeanProperty prop = new SettableBeanProperty.SetterlessProperty(name, type, typeDeser,\n                 beanDesc.getClassAnnotations(), getter);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n      *   finding any serializer\n      */\n     public KeyDeserializer findKeyDeserializer(DeserializationContext ctxt,\n-            JavaType type, BeanProperty property)\n-        throws JsonMappingException\n-    {\n-        KeyDeserializer kd = _factory.createKeyDeserializer(ctxt, type, property);\n+            JavaType type)\n+        throws JsonMappingException\n+    {\n+        KeyDeserializer kd = _factory.createKeyDeserializer(ctxt, type);\n         if (kd == null) { // if none found, need to use a placeholder that'll fail\n             return _handleUnknownKeyDeserializer(type);\n         }\n         // First: need to resolve?\n         if (kd instanceof ResolvableDeserializer) {\n             ((ResolvableDeserializer) kd).resolve(ctxt);\n-        }\n-        // Second: contextualize?\n-        if (kd instanceof ContextualKeyDeserializer) {\n-            kd = ((ContextualKeyDeserializer) kd).createContextual(ctxt, property);\n         }\n         return kd;\n     }\n         if (type.isContainerType()) {\n             if (type.isArrayType()) {\n                 return (JsonDeserializer<Object>)_factory.createArrayDeserializer(ctxt,\n-                        (ArrayType) type, beanDesc, null);\n+                        (ArrayType) type, beanDesc);\n             }\n             if (type.isMapLikeType()) {\n                 MapLikeType mlt = (MapLikeType) type;\n                 if (mlt.isTrueMapType()) {\n                     return (JsonDeserializer<Object>)_factory.createMapDeserializer(ctxt,\n-                            (MapType) mlt, beanDesc, null);\n+                            (MapType) mlt, beanDesc);\n                 }\n                 return (JsonDeserializer<Object>)_factory.createMapLikeDeserializer(ctxt,\n                         mlt, beanDesc);\n                 CollectionLikeType clt = (CollectionLikeType) type;\n                 if (clt.isTrueCollectionType()) {\n                     return (JsonDeserializer<Object>)_factory.createCollectionDeserializer(ctxt,\n-                            (CollectionType) clt, beanDesc, null);\n+                            (CollectionType) clt, beanDesc);\n                 }\n                 return (JsonDeserializer<Object>)_factory.createCollectionLikeDeserializer(ctxt,\n                         clt, beanDesc);\n             if (keyType != null && keyType.getValueHandler() == null) {\n                 Object kdDef = intr.findKeyDeserializer(a);\n                 if (kdDef != null) {\n-                    KeyDeserializer kd = ctxt.keyDeserializerInstance(a, null, kdDef);\n+                    KeyDeserializer kd = ctxt.keyDeserializerInstance(a, kdDef);\n                     if (kd != null) {\n                         type = ((MapLikeType) type).withKeyValueHandler(kd);\n                         keyType = type.getKeyType(); // just in case it's used below\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory.java\n      * @param type Type to be deserialized\n      */\n     public abstract JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt,\n-            ArrayType type, BeanDescription beanDesc, BeanProperty property)\n+            ArrayType type, BeanDescription beanDesc)\n         throws JsonMappingException;\n \n     public abstract JsonDeserializer<?> createCollectionDeserializer(DeserializationContext ctxt,\n-            CollectionType type, BeanDescription beanDesc, BeanProperty property)\n+            CollectionType type, BeanDescription beanDesc)\n         throws JsonMappingException;\n \n     public abstract JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationContext ctxt,\n         throws JsonMappingException;\n \n     public abstract JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,\n-            MapType type, BeanDescription beanDesc, BeanProperty property)\n+            MapType type, BeanDescription beanDesc)\n         throws JsonMappingException;\n \n     public abstract JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt,\n      *   (and default key deserializer should be used)\n      */\n     public abstract KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n-            JavaType type, BeanProperty property)\n+            JavaType type)\n         throws JsonMappingException;\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/KeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/KeyDeserializers.java\n package com.fasterxml.jackson.databind.deser;\n \n-import com.fasterxml.jackson.databind.BeanDescription;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.KeyDeserializer;\n-\n+import com.fasterxml.jackson.databind.*;\n \n /**\n  * Interface that defines API for simple extensions that can provide additional deserializers\n  */\n public interface KeyDeserializers\n {\n-    public KeyDeserializer findKeyDeserializer(JavaType type, DeserializationConfig config,\n-            BeanDescription beanDesc, BeanProperty property)\n+    public KeyDeserializer findKeyDeserializer(JavaType type,\n+            DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException;\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n      */\n \n     @Override\n-    public KeyDeserializer findKeyDeserializer(JavaType type, DeserializationConfig config, \n-            BeanDescription beanDesc, BeanProperty property)\n+    public KeyDeserializer findKeyDeserializer(JavaType type,\n+            DeserializationConfig config, BeanDescription beanDesc)\n     {\n         if (_classMappings == null) {\n             return null;", "timestamp": 1328043846, "metainfo": ""}