{"sha": "6a540c1be655c27f0cb05eb85b796a119ae10407", "log": "Make delegating (de)serializer properly delegate resolve()", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n     {\n         ObjectIdReader oir = _objectIdReader;\n         String[] ignorals = null;\n-\n+        \n         // First: may have an override for Object Id:\n         final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n         final AnnotatedMember accessor = (property == null || intr == null)\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n+import com.fasterxml.jackson.databind.deser.ResolvableDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.util.Converter;\n \n  */\n public class StdDelegatingDeserializer<T>\n     extends StdDeserializer<T>\n-    implements ContextualDeserializer\n+    implements ContextualDeserializer, ResolvableDeserializer\n {\n     private static final long serialVersionUID = 1L;\n \n     /* Contextualization\n     /**********************************************************\n      */\n+\n+    @Override\n+    public void resolve(DeserializationContext ctxt)\n+        throws JsonMappingException\n+    {\n+        if (_delegateDeserializer != null && _delegateDeserializer instanceof ResolvableDeserializer) {\n+            ((ResolvableDeserializer) _delegateDeserializer).resolve(ctxt);\n+        }\n+    }\n     \n     @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.BeanProperty;\n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n+import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n import com.fasterxml.jackson.databind.util.Converter;\n \n import java.io.IOException;\n  */\n public class StdDelegatingSerializer\n     extends StdSerializer<Object>\n-    implements ContextualSerializer,\n+    implements ContextualSerializer, ResolvableSerializer,\n         JsonFormatVisitable, SchemaAware\n {\n     protected final Converter<Object,?> _converter;\n     /* Contextualization\n     /**********************************************************\n      */\n-    \n+\n+    @Override\n+    public void resolve(SerializerProvider provider) throws JsonMappingException\n+    {\n+        if ((_delegateSerializer != null)\n+                && (_delegateSerializer instanceof ResolvableSerializer)) {\n+                ((ResolvableSerializer) _delegateSerializer).resolve(provider);\n+        }\n+    }\n+\n     @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property)\n         throws JsonMappingException\n     protected Object convertValue(Object value) {\n         return _converter.convert(value);\n     }\n-\n }", "timestamp": 1362372449, "metainfo": ""}