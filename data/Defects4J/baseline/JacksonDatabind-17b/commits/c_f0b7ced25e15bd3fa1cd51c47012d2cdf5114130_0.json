{"sha": "f0b7ced25e15bd3fa1cd51c47012d2cdf5114130", "log": "...", "commit": "\n--- a/src/test/java/perf/ObjectReaderBase.java\n+++ b/src/test/java/perf/ObjectReaderBase.java\n {\n     protected final static int WARMUP_ROUNDS = 5;\n \n+    protected String _desc1, _desc2;\n+    \n     protected int hash;\n \n     protected int roundsDone = 0;\n         /*T1 back1 =*/ mapper1.readValue(byteInput1, inputClass1);\n         /*T2 back2 =*/ mapper2.readValue(byteInput2, inputClass2);\n         System.out.println(\"Input successfully round-tripped for both styles...\");\n-        \n-        doTest(mapper1, desc1, byteInput1, inputClass1, mapper2, desc2, byteInput2, inputClass2);\n+\n+        _desc1 = String.format(\"%s (%d bytes)\", desc1, byteInput1.length);\n+        _desc2 = String.format(\"%s (%d bytes)\", desc2, byteInput2.length);\n+        \n+        doTest(mapper1, byteInput1, inputClass1, mapper2, byteInput2, inputClass2);\n     }\n     \n     protected <T1, T2> void testFromString(ObjectMapper mapper1, String desc1,\n             T1 inputValue1, Class<T1> inputClass1,\n-            ObjectMapper mapper2, String desc2,\n-            T2 inputValue2, Class<T2> inputClass2)\n+            ObjectMapper mapper2, String desc2, T2 inputValue2, Class<T2> inputClass2)\n         throws Exception\n     {\n         final String input1 = mapper1.writeValueAsString(inputValue1);\n         final String input2 = mapper2.writeValueAsString(inputValue2);\n         // Let's try to guestimate suitable size... to get to N megs to process\n         REPS = (int) ((double) (8 * 1000 * 1000) / (double) input1.length());\n+        _desc1 = String.format(\"%s (%d chars)\", desc1, input1.length());\n+        _desc2 = String.format(\"%s (%d chars)\", desc2, input2.length());\n \n         // sanity check:\n         /*T1 back1 =*/ mapper1.readValue(input1, inputClass1);\n         /*T2 back2 =*/ mapper2.readValue(input2, inputClass2);\n         System.out.println(\"Input successfully round-tripped for both styles...\");\n         \n-        doTest(mapper1, desc1, input1, inputClass1, mapper2, desc2, input2, inputClass2);\n-    }\n-    \n-    protected void doTest(ObjectMapper mapper1, String desc1,\n-            byte[] byteInput1, Class<?> inputClass1,\n-            ObjectMapper mapper2, String desc2,\n-            byte[] byteInput2, Class<?> inputClass2)\n-        throws Exception\n-    {\n-        desc1 = String.format(\"%s (%d bytes)\", desc1, byteInput1.length);\n-        desc2 = String.format(\"%s (%d bytes)\", desc2, byteInput2.length);\n-\n+        doTest(mapper1, input1, inputClass1, mapper2, input2, inputClass2);\n+    }\n+    \n+    protected void doTest(ObjectMapper mapper1, byte[] byteInput1, Class<?> inputClass1,\n+            ObjectMapper mapper2, byte[] byteInput2, Class<?> inputClass2)\n+        throws Exception\n+    {\n         System.out.printf(\"Read %d bytes to bind (%d as array); will do %d repetitions\\n\",\n                 byteInput1.length, byteInput2.length, REPS);\n \n             \n             switch (type) {\n             case 0:\n-                msg = desc1;\n+                msg = _desc1;\n                 msecs = testDeser(REPS, byteInput1, jsonReader);\n                 break;\n             case 1:\n-                msg = desc2;\n+                msg = _desc2;\n                 msecs = testDeser(REPS, byteInput2, arrayReader);\n                 break;\n             default:\n         }\n     }\n \n-    protected void doTest(ObjectMapper mapper1, String desc1,\n-            String input1, Class<?> inputClass1,\n-            ObjectMapper mapper2, String desc2,\n-            String input2, Class<?> inputClass2)\n-        throws Exception\n-    {\n-        desc1 = String.format(\"%s (%d bytes)\", desc1, input1.length());\n-        desc2 = String.format(\"%s (%d bytes)\", desc2, input2.length());\n-\n+    protected void doTest(ObjectMapper mapper1, String input1, Class<?> inputClass1,\n+            ObjectMapper mapper2, String input2, Class<?> inputClass2)\n+        throws Exception\n+    {\n         System.out.printf(\"Read %d bytes to bind (%d as array); will do %d repetitions\\n\",\n                 input1.length(), input2.length(), REPS);\n \n             \n             switch (type) {\n             case 0:\n-                msg = desc1;\n+                msg = _desc1;\n                 msecs = testDeser(REPS, input1, jsonReader);\n                 break;\n             case 1:\n-                msg = desc2;\n+                msg = _desc2;\n                 msecs = testDeser(REPS, input2, arrayReader);\n                 break;\n             default:", "timestamp": 1398029764, "metainfo": ""}