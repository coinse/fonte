{"sha": "db705dd8be62fe439971ae0e1d6db4df0e83ac54", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n     protected final static int TYPE_DURATION = 1;\n     protected final static int TYPE_G_CALENDAR = 2;\n     protected final static int TYPE_QNAME = 3;\n-    \n+\n+    /**\n+     * Combo-deserializer that supports deserialization of somewhat optional\n+     * javax.xml types {@link QName}, {@link Duration} and {@link XMLGregorianCalendar}.\n+     * Combined into a single class to eliminate bunch of one-off implementation\n+     * classes, to reduce resulting jar size (mostly).\n+     * \n+     * @since 2.4\n+     */\n     public static class Std extends FromStringDeserializer<Object>\n     {\n         private static final long serialVersionUID = 1L;\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n             return ToStringSerializer.instance;\n         }\n         if (XMLGregorianCalendar.class.isAssignableFrom(raw)) {\n-            return XMLGregorianCalendarSerializer.instance;\n+            return new XMLGregorianCalendarSerializer();\n         }\n         return null;\n     }\n \n     public static class XMLGregorianCalendarSerializer extends StdSerializer<XMLGregorianCalendar>\n     {\n-        public final static XMLGregorianCalendarSerializer instance = new XMLGregorianCalendarSerializer();\n-        \n         public XMLGregorianCalendarSerializer() {\n             super(XMLGregorianCalendar.class);\n         }\n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-                throws JsonMappingException\n-        {\n+        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n             CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMDeserializer.java\n     @Override\n     public abstract T _deserialize(String value, DeserializationContext ctxt);\n \n-    protected final Document parse(String value) throws IllegalArgumentException\n-    {\n+    protected final Document parse(String value) throws IllegalArgumentException {\n         try {\n             return _parserFactory.newDocumentBuilder().parse(new InputSource(new StringReader(value)));\n         } catch (Exception e) {\n     /**********************************************************\n      */\n     \n-    public static class NodeDeserializer extends DOMDeserializer<Node>\n-    {\n+    public static class NodeDeserializer extends DOMDeserializer<Node> {\n         private static final long serialVersionUID = 1L;\n         public NodeDeserializer() { super(Node.class); }\n         @Override\n         }\n     }    \n \n-    public static class DocumentDeserializer extends DOMDeserializer<Document>\n-    {\n+    public static class DocumentDeserializer extends DOMDeserializer<Document> {\n         private static final long serialVersionUID = 1L;\n         public DocumentDeserializer() { super(Document.class); }\n         @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n-public class DOMSerializer\n-    extends StdSerializer<Node>\n+public class DOMSerializer extends StdSerializer<Node>\n {\n     protected final DOMImplementationLS _domImpl;\n \n-    public DOMSerializer()\n-    {\n+    public DOMSerializer() {\n         super(Node.class);\n         DOMImplementationRegistry registry;\n         try {\n     }\n \n \t@Override\n-    public JsonNode getSchema(SerializerProvider provider, java.lang.reflect.Type typeHint)\n-    {\n+    public JsonNode getSchema(SerializerProvider provider, java.lang.reflect.Type typeHint) {\n         // Well... it is serialized as String\n         return createSchemaNode(\"string\", true);\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n-            throws JsonMappingException\n-    {\n+    public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {\n         if (visitor != null) visitor.expectAnyFormat(typeHint);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n /**\n  * Helper class used for isolating details of handling optional+external types\n  * (javax.xml classes) from standard factories that offer them.\n- * \n- * @author tatu\n  */\n-public class OptionalHandlerFactory\n-    implements java.io.Serializable\n+public class OptionalHandlerFactory implements java.io.Serializable\n {\n     private static final long serialVersionUID = 1;\n \n     {\n         try {\n             return Class.forName(className).newInstance();\n-        }\n-        catch (LinkageError e) { }\n+        } catch (LinkageError e) { }\n         // too many different kinds to enumerate here:\n         catch (Exception e) { }\n         return null;\n         }\n         return false;\n     }\n-    \n }", "timestamp": 1388624450, "metainfo": ""}