{"sha": "b69857b558812c7a28806bd00654db4eace002bf", "log": "Implement #315", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/annotation/JsonSerialize.java\n \n     /**\n      * Serializer class to use for serializing nulls for properties that\n-     * are annotated (or for types that are annotated), instead of the\n+     * are annotated, instead of the\n      * default null serializer.\n+     * Note that using this property when annotation types (classes) has\n+     * no effect currently (it is possible this could be improved in future).\n      * \n      * @since 2.3\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         }\n         return (JsonSerializer<Object>) ser;\n     }\n-    \n+\n     /**\n      * Method called to construct a type serializer for values with given declared\n      * base type. This is called for values other than those of bean property\n     /* Additional API for other core classes\n     /**********************************************************\n      */\n-\n-    public final JsonSerializer<?> getNullSerializer() {\n-        return NullSerializer.instance;\n-    }    \n \n     protected abstract Iterable<Serializers> customSerializers();\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java\n          */\n         throw new IllegalStateException();\n     }\n-    \n-    /*\n-     */\n-    \n+\n     /**\n      * @param contentTypeSer Optional explicit type information serializer\n      *    to use for contained values (only used for properties that are\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n         public String a = null;\n     }\n \n+/*\n     @JsonSerialize(nullsUsing=NullSerializer.class)\n     static class NullValuedType { }\n+*/\n     \n     /*\n     /**********************************************************\n         assertEquals(\"{\\\"a\\\":\\\"foobar\\\"}\", m.writeValueAsString(root));\n     }\n \n+    /* 14-Oct-2013, tatu: Support for annotating classes is not\n+     *   implemented yet.\n+     */\n+/*    \n     public void testNullSerializerViaClass() throws Exception\n     {\n         assertEquals(\"[\\\"foobar\\\"]\",\n                 MAPPER.writeValueAsString(new NullValuedType[] { new NullValuedType() }));\n     }\n+    */\n \n     public void testNullSerializerForProperty() throws Exception\n     {", "timestamp": 1381809451, "metainfo": ""}