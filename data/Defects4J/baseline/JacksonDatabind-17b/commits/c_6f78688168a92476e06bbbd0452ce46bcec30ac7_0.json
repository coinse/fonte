{"sha": "6f78688168a92476e06bbbd0452ce46bcec30ac7", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/TextNode.java\n import com.fasterxml.jackson.core.io.NumberInput;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-\n \n /**\n  * Value node that contains a text value.\n public class TextNode\n     extends ValueNode\n {\n-    final static int INT_SPACE = ' ';\n-\n     final static TextNode EMPTY_STRING_NODE = new TextNode(\"\");\n \n-    final String _value;\n+    protected final String _value;\n \n     public TextNode(String v) { _value = v; }\n \n     }\n \n     @Override\n-    public JsonNodeType getNodeType()\n-    {\n+    public JsonNodeType getNodeType() {\n         return JsonNodeType.STRING;\n     }\n \n      * base64 encoded; if so, they are decoded and resulting binary\n      * data is returned.\n      */\n-    public byte[] getBinaryValue(Base64Variant b64variant)\n-        throws IOException\n+    public byte[] getBinaryValue(Base64Variant b64variant) throws IOException\n     {\n         @SuppressWarnings(\"resource\")\n         ByteArrayBuilder builder = new ByteArrayBuilder(100);\n                 if (ptr >= len) {\n                     break main_loop;\n                 }\n-            } while (ch <= INT_SPACE);\n+            } while (ch <= ' ');\n             int bits = b64variant.decodeBase64Char(ch);\n             if (bits < 0) {\n                 _reportInvalidBase64(b64variant, ch, 0);\n     }\n \n     @Override\n-    public byte[] binaryValue() throws IOException\n-    {\n+    public byte[] binaryValue() throws IOException {\n         return getBinaryValue(Base64Variants.getDefaultVariant());\n     }\n     \n         return _value;\n     }\n \n+    public String asText(String defaultValue) {\n+        return (_value == null) ? defaultValue : _value;\n+    }\n+    \n     // note: neither fast nor elegant, but these work for now:\n \n     @Override\n      */\n     \n     @Override\n-    public final void serialize(JsonGenerator jg, SerializerProvider provider)\n-        throws IOException, JsonProcessingException\n+    public final void serialize(JsonGenerator jg, SerializerProvider provider) throws IOException\n     {\n         if (_value == null) {\n             jg.writeNull();\n         throws JsonParseException\n     {\n         String base;\n-        if (ch <= INT_SPACE) {\n+        if (ch <= ' ') {\n             base = \"Illegal white space character (code 0x\"+Integer.toHexString(ch)+\") as character #\"+(bindex+1)+\" of 4-char base64 unit: can only used between units\";\n         } else if (b64variant.usesPaddingChar(ch)) {\n             base = \"Unexpected padding character ('\"+b64variant.getPaddingChar()+\"') as character #\"+(bindex+1)+\" of 4-char base64 unit: padding only legal as 3rd or 4th character\";\n         throw new JsonParseException(base, JsonLocation.NA);\n     }\n \n-    protected void _reportBase64EOF()\n-        throws JsonParseException\n-    {\n+    protected void _reportBase64EOF() throws JsonParseException {\n         throw new JsonParseException(\"Unexpected end-of-String when base64 content\", JsonLocation.NA);\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java\n         assertNodeNumbersForNonNumeric(n);\n \n         assertEquals(\"foobar\", n.asText(\"barf\"));\n-\n+        assertEquals(\"\", empty.asText(\"xyz\"));\n     }\n \n     public void testBoolean()", "timestamp": 1400708801, "metainfo": ""}