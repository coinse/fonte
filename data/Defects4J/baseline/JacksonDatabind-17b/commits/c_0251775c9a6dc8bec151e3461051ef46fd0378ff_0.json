{"sha": "0251775c9a6dc8bec151e3461051ef46fd0378ff", "log": "Refactoring optional XML handlers to reduce startup time, code duplication", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n             JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException\n     {\n-        return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig());\n+        return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig(), beanDesc);\n     }\n     \n     protected JavaType materializeAbstractType(DeserializationContext ctxt,\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.deser.Deserializers;\n import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;\n-import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer;\n-import com.fasterxml.jackson.databind.util.Provider;\n \n /**\n  * Container deserializers that handle \"core\" XML types: ones included in standard\n- * JDK 1.5. Types are directly needed by JAXB, and are thus supported within core\n- * mapper package, not in \"xc\" package.\n+ * JDK 1.5. Types are directly needed by JAXB, but may be unavailable on some\n+ * limited platforms; hence separate out from basic deserializer factory.\n  */\n public class CoreXMLDeserializers\n-    implements Provider<StdDeserializer<?>>\n+    extends Deserializers.Base\n {\n     /**\n      * Data type factories are thread-safe after instantiation (and\n             throw new RuntimeException(e);\n         }\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Provider implementation\n-    /**********************************************************\n-     */\n \n-    /**\n-     * Method called by {@link com.fasterxml.jackson.databind.deser.BasicDeserializerFactory}\n-     * to register deserializers this class provides.\n-     */\n     @Override\n-    public Collection<StdDeserializer<?>> provide()\n+    public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n+        DeserializationConfig config, BeanDescription beanDesc)\n     {\n-        return Arrays.asList(new StdDeserializer<?>[] {\n-            new DurationDeserializer()\n-            ,new GregorianCalendarDeserializer()\n-            ,new QNameDeserializer()\n-        });\n+        Class<?> raw = type.getRawClass();\n+        if (raw == QName.class) {\n+            return QNameDeserializer.instance;\n+        }\n+        if (raw == XMLGregorianCalendar.class) {\n+            return GregorianCalendarDeserializer.instance;\n+        }\n+        if (raw == Duration.class) {\n+            return DurationDeserializer.instance;\n+        }\n+        return null;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Concrete deserializers\n         extends FromStringDeserializer<Duration>\n     {\n         private static final long serialVersionUID = 1L;\n+        public final static DurationDeserializer instance = new DurationDeserializer();\n         public DurationDeserializer() { super(Duration.class); }\n     \n         @Override\n         extends StdScalarDeserializer<XMLGregorianCalendar>\n     {\n         private static final long serialVersionUID = 1L;\n+        public final static GregorianCalendarDeserializer instance = new GregorianCalendarDeserializer();\n         public GregorianCalendarDeserializer() { super(XMLGregorianCalendar.class); }\n         \n         @Override\n         extends FromStringDeserializer<QName>\n     {\n         private static final long serialVersionUID = 1L;\n+        public final static QNameDeserializer instance = new QNameDeserializer();\n+        \n+        \n         public QNameDeserializer() { super(QName.class); }\n         \n         @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n \n import java.io.IOException;\n import java.lang.reflect.Type;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Map;\n \n import javax.xml.datatype.Duration;\n import javax.xml.datatype.XMLGregorianCalendar;\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.JavaType;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.JsonNode;\n-import com.fasterxml.jackson.databind.JsonSerializer;\n-import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n+import com.fasterxml.jackson.databind.ser.Serializers;\n import com.fasterxml.jackson.databind.ser.std.CalendarSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;\n-import com.fasterxml.jackson.databind.util.Provider;\n \n /**\n  * Provider for serializers of XML types that are part of full JDK 1.5, but\n  * care not to just use straight equivalency check but rather consider\n  * subclassing as well.\n  */\n-public class CoreXMLSerializers\n-    implements Provider<Map.Entry<Class<?>,JsonSerializer<?>>>\n+public class CoreXMLSerializers extends Serializers.Base\n {\n-    final static HashMap<Class<?>,JsonSerializer<?>> _serializers = new HashMap<Class<?>,JsonSerializer<?>>();\n-    /**\n-     * We will construct instances statically, during class loading, to try to\n-     * make things fail-fast, i.e. to catch problems as soon as possible.\n-     */\n-    static {\n-        ToStringSerializer tss = ToStringSerializer.instance;\n-        _serializers.put(Duration.class, tss);\n-        _serializers.put(XMLGregorianCalendar.class, new XMLGregorianCalendarSerializer());\n-        _serializers.put(QName.class, tss);\n-    }\n-\n     @Override\n-    public Collection<Map.Entry<Class<?>,JsonSerializer<?>>> provide() {\n-        return _serializers.entrySet();\n+    public JsonSerializer<?> findSerializer(SerializationConfig config,\n+            JavaType type, BeanDescription beanDesc)\n+    {\n+        Class<?> raw = type.getRawClass();\n+        if (Duration.class.isAssignableFrom(raw) || QName.class.isAssignableFrom(raw)) {\n+            return ToStringSerializer.instance;\n+        }\n+        if (XMLGregorianCalendar.class.isAssignableFrom(raw)) {\n+            return XMLGregorianCalendarSerializer.instance;\n+        }\n+        return null;\n     }\n \n     public static class XMLGregorianCalendarSerializer extends StdSerializer<XMLGregorianCalendar>\n     {\n+        public final static XMLGregorianCalendarSerializer instance = new XMLGregorianCalendarSerializer();\n+        \n         public XMLGregorianCalendarSerializer() {\n             super(XMLGregorianCalendar.class);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java\n package com.fasterxml.jackson.databind.ext;\n \n-import java.util.Collection;\n-import java.util.Map;\n-\n import com.fasterxml.jackson.databind.*;\n-import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n-import com.fasterxml.jackson.databind.util.Provider;\n+import com.fasterxml.jackson.databind.deser.Deserializers;\n+import com.fasterxml.jackson.databind.ser.Serializers;\n \n /**\n  * Helper class used for isolating details of handling optional+external types\n public class OptionalHandlerFactory\n     implements java.io.Serializable\n {\n-    private static final long serialVersionUID = -7103336512296456640L;\n+    private static final long serialVersionUID = 1;\n \n     /* 1.6.1+ To make 2 main \"optional\" handler groups (javax.xml.stream)\n      * more dynamic, we better only figure out handlers completely dynamically, if and\n     /**********************************************************\n      */\n     \n-    public JsonSerializer<?> findSerializer(SerializationConfig config, JavaType type)\n+    public JsonSerializer<?> findSerializer(SerializationConfig config, JavaType type,\n+            BeanDescription beanDesc)\n     {\n         Class<?> rawType = type.getRawClass();\n         String className = rawType.getName();\n         if (ob == null) { // could warn, if we had logging system (j.u.l?)\n             return null;\n         }\n-        @SuppressWarnings(\"unchecked\")\n-        Provider<Map.Entry<Class<?>,JsonSerializer<?>>> prov = (Provider<Map.Entry<Class<?>,JsonSerializer<?>>>) ob;\n-        Collection<Map.Entry<Class<?>,JsonSerializer<?>>> entries = prov.provide();\n-\n-        // first, check for exact match (concrete)\n-        for (Map.Entry<Class<?>,JsonSerializer<?>> entry : entries) {\n-            if (rawType == entry.getKey()) {\n-                return entry.getValue();\n-            }\n-        }\n-        // if no match, check super-type match\n-        for (Map.Entry<Class<?>,JsonSerializer<?>> entry : entries) {\n-            if (entry.getKey().isAssignableFrom(rawType)) {\n-                return entry.getValue();\n-            }\n-        }\n-        // but maybe there's just no match to be found?\n-        return null;\n+        return ((Serializers) ob).findSerializer(config, type, beanDesc);\n     }\n \n-    public JsonDeserializer<?> findDeserializer(JavaType type, DeserializationConfig config)\n+    public JsonDeserializer<?> findDeserializer(JavaType type, DeserializationConfig config,\n+            BeanDescription beanDesc)\n+        throws JsonMappingException\n     {\n         Class<?> rawType = type.getRawClass();\n         String className = rawType.getName();\n         if (ob == null) { // could warn, if we had logging system (j.u.l?)\n             return null;\n         }\n+        return ((Deserializers) ob).findBeanDeserializer(type, config, beanDesc);\n+\n+        /*\n         @SuppressWarnings(\"unchecked\")\n         Provider<StdDeserializer<?>> prov = (Provider<StdDeserializer<?>>) ob;\n         Collection<StdDeserializer<?>> entries = prov.provide();\n         }\n         // but maybe there's just no match to be found?\n         return null;\n+        */\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         final JsonSerializer<?> ns = new NumberSerializers.NumberSerializer();\n         _concrete.put(BigInteger.class.getName(), ns);\n         _concrete.put(BigDecimal.class.getName(), ns);\n-        \n+\n         // Other discrete non-container types:\n         // First, Date/Time zoo:\n         _concrete.put(Calendar.class.getName(), CalendarSerializer.instance);\n             JavaType type, BeanDescription beanDesc, boolean staticTyping)\n         throws JsonMappingException\n     {\n-        return OptionalHandlerFactory.instance.findSerializer(prov.getConfig(), type);\n+        return OptionalHandlerFactory.instance.findSerializer(prov.getConfig(), type, beanDesc);\n     }\n         \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;\n import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonIntegerFormatVisitor;\n import com.fasterxml.jackson.databind.ser.BasicSerializerFactory;\n-import com.fasterxml.jackson.databind.util.Provider;\n \n /**\n  * Class that providers access to serializers user for non-structured JDK types that\n  * others explicit serializers.\n  */\n public class StdJdkSerializers\n-    implements Provider<Map.Entry<Class<?>,Object>>\n {\n     /**\n      * Method called by {@link BasicSerializerFactory} to access\n      * all serializers this class provides.\n      */\n-    @Override\n     public Collection<Map.Entry<Class<?>, Object>> provide()\n     {\n         HashMap<Class<?>,Object> sers = new HashMap<Class<?>,Object>();\n--- a/src/main/java/com/fasterxml/jackson/databind/util/Provider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/Provider.java\n  * @author tatu\n  *\n  * @param <T> Type of objects provided\n+ * \n+ * @since 2.2 Not really needed that much, will be eventually removed\n  */\n+@Deprecated\n public interface Provider<T>\n {\n     /**", "timestamp": 1366158880, "metainfo": ""}