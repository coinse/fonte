{"sha": "ca93163ef2a71f2e1497ef5d4e5a841d6fb3ac82", "log": "Add unit tests to reproduce [JACKSON-822]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         \n         // Next: we may have annotations that further define types to use...\n         JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);\n-        if (type == origType) { // no changes, won't force static typin\n+        if (type == origType) { // no changes, won't force static typing\n             staticTyping = false;\n         } else { // changes; assume static typing; plus, need to re-introspect if class differs\n             staticTyping = true;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n             vts = vts.forProperty(property);\n         }\n         JsonSerializer<?> ser = _elementSerializer;\n+\n         if (ser == null) {\n             if (_staticTyping) {\n                 ser = provider.findValueSerializer(_elementType, property);\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java\n \n     static class XBean {\n         public int x;\n+    }\n+\n+    // [JACKSON-822]\n+    static interface Issue822Interface {\n+        public int getA();\n+    }\n+\n+    // If this annotation is added, things will work:\n+    //@com.fasterxml.jackson.databind.annotation.JsonSerialize(as=Issue822Interface.class)\n+    // but it should not be necessary when root type is passed\n+    static class Issue822Impl implements Issue822Interface {\n+        public int getA() { return 3; }\n+        public int getB() { return 9; }\n     }\n     \n     /*\n         List<?> result = m.readValue(quote(\"\"), List.class);\n         assertNull(result);\n     }\n+\n+    // [JACKSON-822]: ensure that type can be coerced\n+    public void testTypedLists() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        List<Issue822Interface> list = new ArrayList<Issue822Interface>();\n+        String singleJson = mapper.writerWithType(Issue822Interface.class).writeValueAsString(new Issue822Impl());\n+        // start with specific value case:\n+        assertEquals(\"{\\\"a\\\":3}\", singleJson);\n+        // then lists\n+        list.add(new Issue822Impl());\n+        String listJson = mapper.writerWithType(new TypeReference<List<Issue822Interface>>(){})\n+                .writeValueAsString(list);\n+        assertEquals(\"[{\\\"a\\\":3}]\", listJson);\n+    }\n+\n+    public void testTypedArrays() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        assertEquals(\"[{\\\"a\\\":3}]\", mapper.writerWithType(Issue822Interface[].class).writeValueAsString(\n+                new Issue822Interface[] { new Issue822Impl() }));\n+    }\n }", "timestamp": 1335847912, "metainfo": ""}