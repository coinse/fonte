{"sha": "3a1cff29c844632ba640fe1718e680829ae147b1", "log": "Fix #523 (at least for std Map deser) for 2.4.3", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n \n /**\n- * Basic serializer that can take Json \"Object\" structure and\n+ * Basic serializer that can take JSON \"Object\" structure and\n  * construct a {@link java.util.Map} instance, with typed contents.\n  *<p>\n  * Note: for untyped content (one indicated by passing Object.class\n                 } else {\n                     result.put(key, value);\n                 }\n-            } catch(UnresolvedForwardReference reference) {\n+            } catch (UnresolvedForwardReference reference) {\n                 handleUnresolvedReference(jp, referringAccumulator, key, reference);\n+            } catch (Exception e) {\n+                wrapAndThrow(e, result, fieldName);\n             }\n         }\n     }\n                 }\n             } catch (UnresolvedForwardReference reference) {\n                 handleUnresolvedReference(jp, referringAccumulator, fieldName, reference);\n+            } catch (Exception e) {\n+                wrapAndThrow(e, result, fieldName);\n             }\n         }\n     }\n                     try {\n                         result = (Map<Object,Object>)creator.build(ctxt, buffer);\n                     } catch (Exception e) {\n-                        wrapAndThrow(e, _mapType.getRawClass());\n+                        wrapAndThrow(e, _mapType.getRawClass(), propName);\n                         return null;\n                     }\n                     _readAndBind(jp, ctxt, result);\n             // other property? needs buffering\n             String fieldName = jp.getCurrentName();\n             Object key = _keyDeserializer.deserializeKey(fieldName, ctxt);\n-            Object value;            \n-            if (t == JsonToken.VALUE_NULL) {\n-                value = valueDes.getNullValue();\n-            } else if (typeDeser == null) {\n-                value = valueDes.deserialize(jp, ctxt);\n-            } else {\n-                value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n+            Object value; \n+\n+            try {\n+                if (t == JsonToken.VALUE_NULL) {\n+                    value = valueDes.getNullValue();\n+                } else if (typeDeser == null) {\n+                    value = valueDes.deserialize(jp, ctxt);\n+                } else {\n+                    value = valueDes.deserializeWithType(jp, ctxt, typeDeser);\n+                }\n+            } catch (Exception e) {\n+                wrapAndThrow(e, _mapType.getRawClass(), propName);\n+                return null;\n             }\n             buffer.bufferMapProperty(key, value);\n         }\n         try {\n             return (Map<Object,Object>)creator.build(ctxt, buffer);\n         } catch (Exception e) {\n-            wrapAndThrow(e, _mapType.getRawClass());\n+            wrapAndThrow(e, _mapType.getRawClass(), null);\n             return null;\n         }\n     }\n \n+    @Deprecated // since 2.5\n+    protected void wrapAndThrow(Throwable t, Object ref) throws IOException {\n+        wrapAndThrow(t, ref, null);\n+    }\n+    \n     // note: copied from BeanDeserializer; should try to share somehow...\n-    protected void wrapAndThrow(Throwable t, Object ref)\n-        throws IOException\n+    protected void wrapAndThrow(Throwable t, Object ref, String key) throws IOException\n     {\n         // to handle StackOverflow:\n         while (t instanceof InvocationTargetException && t.getCause() != null) {\n         if (t instanceof IOException && !(t instanceof JsonMappingException)) {\n             throw (IOException) t;\n         }\n-        throw JsonMappingException.wrapWithPath(t, ref, null);\n+        throw JsonMappingException.wrapWithPath(t, ref, key);\n     }\n \n     private void handleUnresolvedReference(JsonParser jp, MapReferringAccumulator accumulator, Object key,", "timestamp": 1408512180, "metainfo": ""}