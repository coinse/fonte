{"sha": "cc737528660b99e71865096e3cd0c4c4a2b3871e", "log": "Improvements to Converter, added StdConverter base class", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.JsonToken;\n+\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.impl.*;\n import com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.type.ClassKey;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.*;\n \n /**\n             Object convDef = intr.findDeserializationConverter(prop.getMember());\n             if (convDef != null) {\n                 Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef);\n-                TypeFactory tf = ctxt.getTypeFactory();\n-                JavaType converterType = tf.constructType(conv.getClass());\n-                JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n-                if (params == null || params.length != 2) {\n-                    throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n-                            +converterType);\n-                }\n-                JavaType delegateType = params[0];\n+                JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n                 JsonDeserializer<?> ser = ctxt.findContextualValueDeserializer(delegateType, prop);\n                 return new StdDelegatingDeserializer<Object>(conv, delegateType, ser);\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n             return (JsonDeserializer<Object>) _createDeserializer2(ctxt, factory, type, beanDesc);\n         }\n         // otherwise need to do bit of introspection\n-        TypeFactory tf = ctxt.getTypeFactory();\n-        JavaType converterType = tf.constructType(conv.getClass());\n-        JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n-        if (params == null || params.length != 2) {\n-            throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n-                    +converterType);\n-        }\n-        JavaType delegateType = params[0];\n+        JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n         return new StdDelegatingDeserializer<Object>(conv, delegateType,\n                 _createDeserializer2(ctxt, factory, delegateType, beanDesc));\n     }\n         throws JsonMappingException\n     {\n         final DeserializationConfig config = ctxt.getConfig();\n-    // If not, let's see which factory method to use:\n+        // If not, let's see which factory method to use:\n         if (type.isEnumType()) {\n             return factory.createEnumDeserializer(ctxt, type, beanDesc);\n         }\n         if (conv == null) {\n             return deser;\n         }\n-        TypeFactory tf = ctxt.getTypeFactory();\n-        JavaType converterType = tf.constructType(conv.getClass());\n-        JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n-        if (params == null || params.length != 2) {\n-            throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n-                    +converterType);\n-        }\n-        JavaType delegateType = params[0];\n+        JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n         return (JsonDeserializer<Object>) new StdDelegatingDeserializer<Object>(conv, delegateType, deser);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDelegatingDeserializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.ContextualDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n             }\n             return this;\n         }\n-\n-        // First: figure out what is the fully generic delegate type:\n-        TypeFactory tf = ctxt.getTypeFactory();\n-        JavaType implType = tf.constructType(_converter.getClass());\n-        JavaType[] params = tf.findTypeParameters(implType, Converter.class);\n-        if (params == null || params.length != 2) {\n-            throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n-                    +implType);\n-        }\n-        // and then we can find serializer to delegate to, construct a new instance:\n-        JavaType delegateType = params[0];\n+        // Otherwise: figure out what is the fully generic delegate type, then find deserializer\n+        JavaType delegateType = _converter.getInputType(ctxt.getTypeFactory());\n         return withDelegate(_converter, delegateType,\n                 ctxt.findContextualValueDeserializer(delegateType, property));\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n             Object convDef = intr.findDeserializationContentConverter(prop.getMember());\n             if (convDef != null) {\n                 Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef);\n-                TypeFactory tf = ctxt.getTypeFactory();\n-                JavaType converterType = tf.constructType(conv.getClass());\n-                JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n-                if (params == null || params.length != 2) {\n-                    throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n-                            +converterType);\n-                }\n-                // We need to use input type, as that's what deserializer needs to produce:\n-                JavaType delegateType = params[0];\n+                JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());\n                 if (existingDeserializer == null) {\n                     existingDeserializer = ctxt.findContextualValueDeserializer(delegateType, prop);\n                 }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n         if (conv == null) {\n             return ser;\n         }\n-        TypeFactory tf = prov.getTypeFactory();\n-        JavaType converterType = tf.constructType(conv.getClass());\n-        JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n-        if (params == null || params.length != 2) {\n-            throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n-                    +converterType);\n-        }\n-        JavaType delegateType = params[1];\n+        JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n         return new StdDelegatingSerializer(conv, delegateType, ser);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         if (conv == null) { // no, simple:\n             return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping);\n         }\n-        // otherwise need to do bit of introspection\n-        TypeFactory tf = prov.getTypeFactory();\n-        JavaType converterType = tf.constructType(conv.getClass());\n-        JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n-        if (params == null || params.length != 2) {\n-            throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n-                    +converterType);\n-        }\n-        JavaType delegateType = params[1];\n+        JavaType delegateType = conv.getOutputType(prov.getTypeFactory());\n         return new StdDelegatingSerializer(conv, delegateType,\n                 _createSerializer2(prov, delegateType, beanDesc, true));\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;\n import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator;\n import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ArrayBuilders;\n import com.fasterxml.jackson.databind.util.Converter;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n             Object convDef = intr.findSerializationConverter(prop.getMember());\n             if (convDef != null) {\n                 Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);\n-                TypeFactory tf = provider.getTypeFactory();\n-                JavaType converterType = tf.constructType(conv.getClass());\n-                JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n-                if (params == null || params.length != 2) {\n-                    throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n-                            +converterType);\n-                }\n-                JavaType delegateType = params[1];\n+                JavaType delegateType = conv.getOutputType(provider.getTypeFactory());\n                 JsonSerializer<?> ser = provider.findValueSerializer(delegateType, prop);\n                 return new StdDelegatingSerializer(conv, delegateType, ser);\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java\n         // Otherwise, need to locate serializer to delegate to. For that we need type information...\n         JavaType delegateType = _delegateType;\n         if (delegateType == null) {\n-            TypeFactory tf = provider.getTypeFactory();\n-            JavaType implType = tf.constructType(_converter.getClass());\n-            JavaType[] params = tf.findTypeParameters(implType, Converter.class);\n-            if (params == null || params.length != 2) {\n-                throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n-                        +implType);\n-            }\n-            delegateType = params[1];\n+            delegateType = _converter.getOutputType(provider.getTypeFactory());\n         }\n         // and then find the thing...\n         return withDelegate(_converter, delegateType,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.Converter;\n \n /**\n             Object convDef = intr.findSerializationContentConverter(prop.getMember());\n             if (convDef != null) {\n                 Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef);\n-                TypeFactory tf = provider.getTypeFactory();\n-                JavaType converterType = tf.constructType(conv.getClass());\n-                JavaType[] params = tf.findTypeParameters(converterType, Converter.class);\n-                if (params == null || params.length != 2) {\n-                    throw new JsonMappingException(\"Could not determine Converter parameterization for \"\n-                            +converterType);\n-                }\n-                JavaType delegateType = params[1];\n+                JavaType delegateType = conv.getOutputType(provider.getTypeFactory());\n                 if (existingSerializer == null) {\n                     existingSerializer = provider.findValueSerializer(delegateType, prop);\n                 }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/Converter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/Converter.java\n package com.fasterxml.jackson.databind.util;\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n \n /**\n  * Helper interface for things that convert Objects of\n  * one type to another.\n+ *<p>\n+ * NOTE: implementors are strongly encouraged to extend {@link StdConverter}\n+ * instead of directly implementing {@link Converter}, since that can\n+ * help with default implementation of typically boiler-plate code.\n  *\n  * @param <IN> Type of values converter takes\n  * @param <OUT> Result type from conversion\n      */\n     public OUT convert(IN value);\n \n+    /**\n+     * Method that can be used to find out actual input (source) type; this\n+     * usually can be determined from type parameters, but may need\n+     * to be implemented differently from programmatically defined\n+     * converters (which can not change static type parameter bindings).\n+     * \n+     * @since 2.2\n+     */\n+    public JavaType getInputType(TypeFactory typeFactory);\n+\n+    /**\n+     * Method that can be used to find out actual output (target) type; this\n+     * usually can be determined from type parameters, but may need\n+     * to be implemented differently from programmatically defined\n+     * converters (which can not change static type parameter bindings).\n+     * \n+     * @since 2.2\n+     */\n+    public JavaType getOutputType(TypeFactory typeFactory);\n+    \n     /*\n     /**********************************************************\n     /* Helper class(es)\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/StdConverter.java\n+package com.fasterxml.jackson.databind.util;\n+\n+import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.type.TypeFactory;\n+\n+/**\n+ * Standard implementation of {@link Converter} that supports explicit\n+ * type access, instead of relying type detection of generic type\n+ * parameters. \n+ * \n+ * @since 2.2\n+ */\n+public abstract class StdConverter<IN,OUT>\n+    implements Converter<IN,OUT>\n+{\n+    /*\n+    /**********************************************************\n+    /* Partial Converter API implementation\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public abstract OUT convert(IN value);\n+\n+    @Override\n+    public JavaType getInputType(TypeFactory typeFactory)\n+    {\n+        JavaType[] types = typeFactory.findTypeParameters(getClass(), Converter.class);\n+        if (types == null || types.length < 2) {\n+            throw new IllegalStateException(\"Can not find OUT type parameter for Converter of type \"+getClass().getName());\n+        }\n+        return types[0];\n+    }\n+\n+    @Override\n+    public JavaType getOutputType(TypeFactory typeFactory)\n+    {\n+        JavaType[] types = typeFactory.findTypeParameters(getClass(), Converter.class);\n+        if (types == null || types.length < 2) {\n+            throw new IllegalStateException(\"Can not find OUT type parameter for Converter of type \"+getClass().getName());\n+        }\n+        return types[1];\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingDeserializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n-import com.fasterxml.jackson.databind.util.Converter;\n+import com.fasterxml.jackson.databind.util.StdConverter;\n \n public class TestConvertingDeserializer\n extends com.fasterxml.jackson.databind.BaseMapTest\n         }\n     }\n \n-    static class ConvertingBeanConverter implements Converter<int[],ConvertingBean>\n+    static class ConvertingBeanConverter extends StdConverter<int[],ConvertingBean>\n     {\n         @Override\n         public ConvertingBean convert(int[] values) {\n         }\n     }\n     \n-    static class PointConverter implements Converter<int[], Point>\n+    static class PointConverter extends StdConverter<int[], Point>\n     {\n         @Override public Point convert(int[] value) {\n             return new Point(value[0], value[1]);\n         public Map<String,Point> values;\n     }\n \n-    static class LowerCaser implements Converter<String, String>\n+    static class LowerCaser extends StdConverter<String, String>\n     {\n         @Override\n         public String convert(String value) {\n--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingSerializer.java\n import java.util.*;\n \n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n-import com.fasterxml.jackson.databind.util.Converter;\n+import com.fasterxml.jackson.databind.util.StdConverter;\n \n public class TestConvertingSerializer\n     extends com.fasterxml.jackson.databind.BaseMapTest\n         }\n     }\n \n-    static class ConvertingBeanConverter implements Converter<ConvertingBean, int[]>\n+    static class ConvertingBeanConverter extends StdConverter<ConvertingBean, int[]>\n     {\n         @Override\n         public int[] convert(ConvertingBean value) {\n         }\n     }\n \n-    static class PointConverter implements Converter<Point, int[]>\n+    static class PointConverter extends StdConverter<Point, int[]>\n     {\n         @Override public int[] convert(Point value) {\n             return new int[] { value.x, value.y };\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n-import com.fasterxml.jackson.databind.util.Converter;\n+import com.fasterxml.jackson.databind.util.StdConverter;\n \n /**\n  * Test to check that customizations work as expected.\n         SimpleModule module = new SimpleModule(\"test\", Version.unknownVersion());\n         module.addDeserializer(Immutable.class,\n             new StdDelegatingDeserializer<Immutable>(\n-                new Converter<JsonNode, Immutable>() {\n+                new StdConverter<JsonNode, Immutable>() {\n                     @Override\n                     public Immutable convert(JsonNode value)\n                     {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCustomSerializers.java\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.ser.std.CollectionSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer;\n-import com.fasterxml.jackson.databind.util.Converter;\n+import com.fasterxml.jackson.databind.util.StdConverter;\n \n /**\n  * Test for verifying [JACKSON-238]\n         ObjectMapper mapper = new ObjectMapper();\n         SimpleModule module = new SimpleModule(\"test\", Version.unknownVersion());\n         module.addSerializer(new StdDelegatingSerializer(Immutable.class,\n-                new Converter<Immutable, Map<String,Integer>>() {\n+                new StdConverter<Immutable, Map<String,Integer>>() {\n                     @Override\n                     public Map<String, Integer> convert(Immutable value)\n                     {", "timestamp": 1362345085, "metainfo": ""}