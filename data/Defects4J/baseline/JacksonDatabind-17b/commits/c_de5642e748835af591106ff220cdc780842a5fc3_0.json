{"sha": "de5642e748835af591106ff220cdc780842a5fc3", "log": "Add an improved test for #735: turns out there is still at least one, ordering-dependant issue", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCachingOfDeser.java\n+package com.fasterxml.jackson.databind.deser;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+\n+@SuppressWarnings(\"serial\")\n+public class TestCachingOfDeser extends BaseMapTest\n+{\n+    // For [databind#735]\n+    public static class TestMapNoCustom {\n+\n+        public Map<String, Integer> map;\n+    }\n+\n+    public static class TestMapWithCustom {\n+\n+        @JsonDeserialize(contentUsing = CustomDeserializer735.class)\n+        public Map<String, Integer> map;\n+    }\n+\n+    public static class TestListWithCustom {\n+        @JsonDeserialize(contentUsing = CustomDeserializer735.class)\n+        public List<Integer> list;\n+    }\n+\n+    public static class TestListNoCustom {\n+        public List<Integer> list;\n+    }\n+\n+    public static class CustomDeserializer735 extends StdDeserializer<Integer> {\n+        public CustomDeserializer735() {\n+            super(Integer.class);\n+        }\n+\n+        @Override\n+        public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n+            return 100 * p.getValueAsInt();\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Unit tests\n+    /**********************************************************\n+     */\n+\n+    final static String MAP_INPUT = \"{\\\"map\\\":{\\\"a\\\":1}}\";\n+    final static String LIST_INPUT = \"{\\\"list\\\":[1]}\";\n+\n+    \n+    // Ok: first, use custom-annotated instance first, then standard\n+    public void testCustomMapCaching1() throws Exception\n+    {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        TestMapWithCustom mapC = mapper.readValue(MAP_INPUT, TestMapWithCustom.class);\n+        TestMapNoCustom mapStd = mapper.readValue(MAP_INPUT, TestMapNoCustom.class);\n+\n+        assertNotNull(mapC.map);\n+        assertNotNull(mapStd.map);\n+        assertEquals(Integer.valueOf(100), mapC.map.get(\"a\"));\n+        assertEquals(Integer.valueOf(1), mapStd.map.get(\"a\"));\n+    }\n+        \n+    // And then standard first, custom next\n+    public void testCustomMapCaching2() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        TestMapNoCustom mapStd = mapper.readValue(MAP_INPUT, TestMapNoCustom.class);\n+        TestMapWithCustom mapC = mapper.readValue(MAP_INPUT, TestMapWithCustom.class);\n+\n+        assertNotNull(mapStd.map);\n+        assertNotNull(mapC.map);\n+        assertEquals(Integer.valueOf(1), mapStd.map.get(\"a\"));\n+        assertEquals(Integer.valueOf(100), mapC.map.get(\"a\"));\n+    }\n+\n+    // Ok: first, use custom-annotated instance first, then standard\n+    public void testCustomListCaching1() throws Exception {\n+        ObjectMapper mapper = new ObjectMapper();\n+        TestListWithCustom listC = mapper.readValue(LIST_INPUT, TestListWithCustom.class);\n+        TestListNoCustom listStd = mapper.readValue(LIST_INPUT, TestListNoCustom.class);\n+\n+        assertNotNull(listC.list);\n+        assertNotNull(listStd.list);\n+        assertEquals(Integer.valueOf(100), listC.list.get(0));\n+        assertEquals(Integer.valueOf(1), listStd.list.get(0));\n+    }\n+\n+    // First custom-annotated, then standard\n+    public void testCustomListCaching2() throws Exception {\n+        ObjectMapper mapper = new ObjectMapper();\n+        TestListNoCustom listStd = mapper.readValue(LIST_INPUT, TestListNoCustom.class);\n+        TestListWithCustom listC = mapper.readValue(LIST_INPUT, TestListWithCustom.class);\n+\n+        assertNotNull(listC.list);\n+        assertNotNull(listStd.list);\n+        assertEquals(Integer.valueOf(100), listC.list.get(0));\n+        assertEquals(Integer.valueOf(1), listStd.list.get(0));\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java\n         }\n     }\n \n-    // For [databind#735]\n-    public static class TestMapBean735 {\n-\n-        @JsonDeserialize(contentUsing = CustomDeserializer735.class)\n-        public Map<String, Integer> map1;\n-\n-        public Map<String, Integer> map2;\n-    }\n-\n-    public static class TestListBean735 {\n-\n-        @JsonDeserialize(contentUsing = CustomDeserializer735.class)\n-        public List<Integer> list1;\n-\n-        public List<Integer> list2;\n-    }\n-    \n-    public static class CustomDeserializer735 extends StdDeserializer<Integer> {\n-        public CustomDeserializer735() {\n-            super(Integer.class);\n-        }\n-\n-        @Override\n-        public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\n-            return 100 * p.getValueAsInt();\n-        }\n-    }\n-\n     /*\n     /**********************************************************\n     /* Unit tests\n         assertNotNull(w.value.inner);\n         assertEquals(-13, w.value.inner.x);\n     }\n-\n-    // [databind#735]: erroneous application of custom deserializer\n-    public void testCustomMapValueDeser735() throws Exception {\n-        String json = \"{\\\"map1\\\":{\\\"a\\\":1},\\\"map2\\\":{\\\"a\\\":1}}\";\n-        TestMapBean735 bean = MAPPER.readValue(json, TestMapBean735.class);\n-\n-        assertEquals(100, bean.map1.get(\"a\").intValue());\n-        assertEquals(1, bean.map2.get(\"a\").intValue());\n-    }\n-\n-    public void testCustomListValueDeser735() throws Exception {\n-        String json = \"{\\\"list1\\\":[1],\\\"list2\\\":[1]}\";\n-        TestListBean735 bean = MAPPER.readValue(json, TestListBean735.class);\n-\n-        assertEquals(100, bean.list1.get(0).intValue());\n-        assertEquals(1, bean.list2.get(0).intValue());\n-    }\n }", "timestamp": 1427484413, "metainfo": ""}