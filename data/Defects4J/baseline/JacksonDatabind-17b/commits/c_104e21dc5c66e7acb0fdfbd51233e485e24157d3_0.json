{"sha": "104e21dc5c66e7acb0fdfbd51233e485e24157d3", "log": "Add unit test for [JACKSON-806]", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotations.java\n         // and included, as there is a field\n         public int getD() { return 6; }\n     }\n+\n+    // [JACKSON-806]: override 'need-setter' with explicit annotation\n+    static class GettersWithoutSetters2\n+    {\n+        @JsonProperty\n+        public int getA() { return 123; }\n+    }\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n+    private final ObjectMapper MAPPER = new ObjectMapper();\n+    \n     public void testSimpleGetter() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        Map<String,Object> result = writeAndMap(m, new SizeClassGetter());\n+        Map<String,Object> result = writeAndMap(MAPPER, new SizeClassGetter());\n         assertEquals(3, result.size());\n         assertEquals(Integer.valueOf(3), result.get(\"size\"));\n         assertEquals(Integer.valueOf(-17), result.get(\"length\"));\n \n     public void testSimpleGetter2() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        Map<String,Object> result = writeAndMap(m, new SizeClassGetter2());\n+        Map<String,Object> result = writeAndMap(MAPPER, new SizeClassGetter2());\n         assertEquals(1, result.size());\n         assertEquals(Integer.valueOf(3), result.get(\"x\"));\n     }\n     // testing [JACKSON-120], implied getter\n     public void testSimpleGetter3() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        Map<String,Object> result = writeAndMap(m, new SizeClassGetter3());\n+        Map<String,Object> result = writeAndMap(MAPPER, new SizeClassGetter3());\n         assertEquals(1, result.size());\n         assertEquals(Integer.valueOf(8), result.get(\"y\"));\n     }\n      */\n     public void testGetterInheritance() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        Map<String,Object> result = writeAndMap(m, new SubClassBean());\n+        Map<String,Object> result = writeAndMap(MAPPER, new SubClassBean());\n         assertEquals(3, result.size());\n         assertEquals(Integer.valueOf(1), result.get(\"x\"));\n         assertEquals(Integer.valueOf(2), result.get(\"y\"));\n      */\n     public void testClassSerializer() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         StringWriter sw = new StringWriter();\n-        m.writeValue(sw, new ClassSerializer());\n+        MAPPER.writeValue(sw, new ClassSerializer());\n         assertEquals(\"true\", sw.toString());\n     }\n \n      */\n     public void testActiveMethodSerializer() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n         StringWriter sw = new StringWriter();\n-        m.writeValue(sw, new ClassMethodSerializer(13));\n+        MAPPER.writeValue(sw, new ClassMethodSerializer(13));\n         /* Here we will get wrapped as an object, since we have\n          * full object, just override a single property\n          */\n \n     public void testInactiveMethodSerializer() throws Exception\n     {\n-        ObjectMapper m = new ObjectMapper();\n-        StringWriter sw = new StringWriter();\n-        m.writeValue(sw, new InactiveClassMethodSerializer(8));\n+        String json = MAPPER.writeValueAsString(new InactiveClassMethodSerializer(8));\n         /* Here we will get wrapped as an object, since we have\n          * full object, just override a single property\n          */\n-        assertEquals(\"{\\\"x\\\":8}\", sw.toString());\n+        assertEquals(\"{\\\"x\\\":8}\", json);\n     }\n \n     public void testGettersWithoutSetters() throws Exception\n         m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS);\n         assertEquals(\"{\\\"a\\\":3,\\\"c\\\":5,\\\"d\\\":6}\", m.writeValueAsString(bean));\n     }\n+\n+    public void testGettersWithoutSettersOverride() throws Exception\n+    {\n+        GettersWithoutSetters2 bean = new GettersWithoutSetters2();\n+        ObjectMapper m = new ObjectMapper();\n+        m.enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS);\n+        assertEquals(\"{\\\"a\\\":123}\", m.writeValueAsString(bean));\n+    }\n }", "timestamp": 1331618937, "metainfo": ""}