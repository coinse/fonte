{"sha": "4a656d537e8277d862340362c3ee6dbcd5a44068", "log": "Merge [JACKSON-834] fix from 1.9.7", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n     public static JsonDeserializer<?> deserializerForCreator(DeserializationConfig config,\n             Class<?> enumClass, AnnotatedMethod factory)\n     {\n+        \n         // note: caller has verified there's just one arg; but we must verify its type\n-        if (factory.getGenericParameterType(0) != String.class) {\n-            throw new IllegalArgumentException(\"Parameter #0 type for factory method (\"+factory+\") not suitable, must be java.lang.String\");\n+        Class<?> paramClass = factory.getRawParameterType(0);\n+        if (paramClass == String.class) {\n+            paramClass = null;\n+        } else  if (paramClass == Integer.TYPE || paramClass == Integer.class) {\n+            paramClass = Integer.class;\n+        } else  if (paramClass == Long.TYPE || paramClass == Long.class) {\n+            paramClass = Long.class;\n+        } else {\n+            throw new IllegalArgumentException(\"Parameter #0 type for factory method (\"+factory\n+                    +\") not suitable, must be java.lang.String or int/Integer/long/Long\");\n         }\n         if (config.canOverrideAccessModifiers()) {\n             ClassUtil.checkAndFixAccess(factory.getMember());\n         }\n-        return new FactoryBasedDeserializer(enumClass, factory);\n+        return new FactoryBasedDeserializer(enumClass, factory, paramClass);\n     }\n     \n     /*\n         extends StdScalarDeserializer<Object>\n     {\n         protected final Class<?> _enumClass;\n+        // Marker type; null if String expected; otherwise numeric wrapper\n+        protected final Class<?> _inputType;\n         protected final Method _factory;\n         \n-        public FactoryBasedDeserializer(Class<?> cls, AnnotatedMethod f)\n+        public FactoryBasedDeserializer(Class<?> cls, AnnotatedMethod f,\n+                Class<?> inputType)\n         {\n             super(Enum.class);\n             _enumClass = cls;\n             _factory = f.getAnnotated();\n+            _inputType = inputType;\n         }\n \n         @Override\n         public Object deserialize(JsonParser jp, DeserializationContext ctxt)\n             throws IOException, JsonProcessingException\n         {\n-            JsonToken curr = jp.getCurrentToken();\n-            \n-            // Usually should just get string value:\n-            if (curr != JsonToken.VALUE_STRING && curr != JsonToken.FIELD_NAME) {\n+            // couple of accepted types...\n+            Object value;\n+            if (_inputType == null) {\n+                value = jp.getText();\n+            } else  if (_inputType == Integer.class) {\n+                value = Integer.valueOf(jp.getValueAsInt());\n+            } else  if (_inputType == Long.class) {\n+                value = Long.valueOf(jp.getValueAsLong());\n+            } else {\n                 throw ctxt.mappingException(_enumClass);\n             }\n-            String value = jp.getText();\n             try {\n-                return _factory.invoke(null, value);\n+                return _factory.invoke(_enumClass, value);\n             } catch (Exception e) {\n                 ClassUtil.unwrapAndThrowAsIAE(e);\n             }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n     static class ClassWithEnumMapKey {\n     \t@JsonProperty Map<TestEnum, String> map;\n     }\n-    \n+\n+    // [JACKSON-834]\n+    protected enum TestEnumFor834\n+    {\n+        ENUM_A(1), ENUM_B(2), ENUM_C(3);\n+        \n+        private final int id;\n+        \n+        private TestEnumFor834(int id) {\n+            this.id = id;\n+        }\n+        \n+        @JsonCreator public static TestEnumFor834 fromId(int id) {\n+            for (TestEnumFor834 e: values()) {\n+                if (e.id == id) return e;\n+            }\n+            return null;\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Tests\n          }\n     }\n \n+    // [JACKSON-834]\n+    public void testEnumsFromInts() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        TestEnumFor834 res = mapper.readValue(\"1 \", TestEnumFor834.class);\n+        assertSame(TestEnumFor834.ENUM_A, res);\n+    }\n }", "timestamp": 1335977533, "metainfo": ""}