{"sha": "50a8c416286786d216b0fed551e18f9f32f6f52c", "log": "include JsonLocation in more mapping exceptions", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator.java\n      * null or empty List.\n      */\n     public Object createUsingDefault(DeserializationContext ctxt) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\"; no default creator found\");\n     }\n \n      * a non-empty List of arguments.\n      */\n     public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()+\" with arguments\");\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()+\" with arguments\");\n     }\n \n     /**\n      * an intermediate \"delegate\" value to pass to createor method\n      */\n     public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()+\" using delegate\");\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()+\" using delegate\");\n     }\n     \n     /*\n     }\n \n     public Object createFromInt(DeserializationContext ctxt, int value) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from Integer number (\"+value+\", int)\");\n     }\n \n     public Object createFromLong(DeserializationContext ctxt, long value) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from Integer number (\"+value+\", long)\");\n     }\n \n     public Object createFromDouble(DeserializationContext ctxt, double value) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from Floating-point number (\"+value+\", double)\");\n     }\n     \n     public Object createFromBoolean(DeserializationContext ctxt, boolean value) throws IOException {\n-        throw new JsonMappingException(\"Can not instantiate value of type \"\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"\n                 +getValueTypeDesc()+\" from Boolean value (\"+value+\")\");\n     }\n \n                 return null;\n             }\n         }\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n                 +\" from String value ('\"+value+\"'); no single-String constructor/factory method\");\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java\n         } catch (ExceptionInInitializerError e) {\n             throw wrapException(e);\n         }\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n                 +\" from Integral number (\"+value+\"); no single-int-arg constructor/factory method\");\n     }\n \n         } catch (ExceptionInInitializerError e) {\n             throw wrapException(e);\n         }\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n                 +\" from Long integral number (\"+value+\"); no single-long-arg constructor/factory method\");\n     }\n \n         } catch (ExceptionInInitializerError e) {\n             throw wrapException(e);\n         }\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n                 +\" from Floating-point number (\"+value+\"); no one-double/Double-arg constructor/factory method\");\n     }\n \n         } catch (ExceptionInInitializerError e) {\n             throw wrapException(e);\n         }\n-        throw new JsonMappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n+        throw ctxt.mappingException(\"Can not instantiate value of type \"+getValueTypeDesc()\n                 +\" from Boolean value (\"+value+\"); no single-boolean/Boolean-arg constructor/factory method\");\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanDeserializer.java\n         public CtorValueBean(String d) { _desc = d; }\n         public CtorValueBean(int value) { _desc = String.valueOf(value); }\n         public CtorValueBean(long value) { _desc = String.valueOf(value); }\n+        public CtorValueBean(double value) { _desc = String.valueOf(value); }\n \n         @Override\n         public void serialize(JsonGenerator jgen, SerializerProvider provider)\n         public static FactoryValueBean valueOf(long v) { return new FactoryValueBean(String.valueOf(v), 0); }\n \n         @Override public String toString() { return _desc; }\n+    }\n+\n+    static class OtherBean {\n+        SomeIncompatibleType o;\n+\n+        protected OtherBean(SomeIncompatibleType o) {\n+            this.o = o;\n+        }\n+\n+        static class SomeIncompatibleType { }\n     }\n \n     /**\n     {\n         CtorValueBean result = MAPPER.readValue(\"13\", CtorValueBean.class);\n         assertEquals(\"13\", result.toString());\n+\n+        try {\n+            OtherBean otherResult = MAPPER.readValue(\"13\", OtherBean.class);\n+            fail(\"Expected an exception, but got result value: \"+otherResult.o);\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"from Integral number\", \"no single-int-arg constructor/factory method\");\n+            assertValidLocation(e.getLocation());\n+        }\n     }\n \n     public void testFromLongCtor() throws Exception\n         long value = 12345678901244L;\n         CtorValueBean result = MAPPER.readValue(\"\"+value, CtorValueBean.class);\n         assertEquals(\"\"+value, result.toString());\n+\n+        try {\n+            OtherBean otherResult = MAPPER.readValue(\"\"+value, OtherBean.class);\n+            fail(\"Expected an exception, but got result value: \"+otherResult.o);\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"from Long integral number\", \"no single-long-arg constructor/factory method\");\n+            assertValidLocation(e.getLocation());\n+        }\n+    }\n+\n+    public void testFromDoubleCtor() throws Exception\n+    {\n+        CtorValueBean result = MAPPER.readValue(\"13.5\", CtorValueBean.class);\n+        assertEquals(\"13.5\", result.toString());\n+\n+        try {\n+            OtherBean otherResult = MAPPER.readValue(\"13.5\", OtherBean.class);\n+            fail(\"Expected an exception, but got result value: \"+otherResult.o);\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"from Floating-point number\", \"no one-double/Double-arg constructor/factory method\");\n+            assertValidLocation(e.getLocation());\n+        }\n     }\n \n     public void testFromStringFactory() throws Exception\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestBeanDeserializer.java\n             fail(\"Should not accept Empty String for POJO\");\n         } catch (JsonProcessingException e) {\n             verifyException(e, \"from String value\");\n+            assertValidLocation(e.getLocation());\n         }\n \n         // should be ok to enable dynamically:\n--- a/src/test/java/com/fasterxml/jackson/test/BaseTest.java\n+++ b/src/test/java/com/fasterxml/jackson/test/BaseTest.java\n         }\n     }\n \n+    protected void assertValidLocation(JsonLocation location) {\n+        assertNotNull(\"Should have non-null location\", location);\n+        assertTrue(\"Should have positive line number\", location.getLineNr() > 0);\n+    }\n+\n     protected void verifyException(Throwable e, String... matches)\n     {\n         String msg = e.getMessage();", "timestamp": 1400621753, "metainfo": ""}