{"sha": "7db1f44069bbcac9d884d829f8052a89b5ec271b", "log": "Update release notes wrt #785, minor refactoring", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n         List<AnnotatedMethod> creatorMethods = null;\n         \n         // Then static methods which are potential factory methods\n-\n-        Method[] classMethods;\n-        try{\n-            classMethods = _class.getDeclaredMethods();\n-        }catch(final NoClassDefFoundError ex){\n-            // One of the methods had a class that was not found in the cls.getClassLoader.\n-            // Maybe the developer was nice and has a different class loader for this context.\n-            final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n-            if(loader == null){\n-                // Nope... this is going to end poorly\n-                throw ex;\n-            }\n-            final Class<?> contextClass;\n-            try {\n-                contextClass = loader.loadClass(_class.getName());\n-            }\n-            catch (ClassNotFoundException e) {\n-                //ex.addSuppressed(e); Not until 1.7\n-                throw ex;\n-            }\n-            classMethods = contextClass.getDeclaredMethods(); // Cross fingers\n-        }\n-\n-        for (Method m : classMethods) {\n+        for (Method m : _findClassMethods(_class)) {\n             if (!Modifier.isStatic(m.getModifiers())) {\n                 continue;\n             }\n         }\n         _creatorsResolved = true;\n     }\n-    \n+\n     /**\n      * Method for resolving member method information: aggregating all non-static methods\n      * and combining annotations (to implement method-annotation inheritance)\n         if (cls == null) { // just so caller need not check when passing super-class\n             return;\n         }\n-        Method[] classMethods;\n-        try{\n-            classMethods = cls.getDeclaredMethods();\n-        }catch(final NoClassDefFoundError ex){\n-            // One of the methods had a class that was not found in the cls.getClassLoader.\n-            // Maybe the developer was nice and has a different class loader for this context.\n-            final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n-            if (loader == null) {\n-                // Nope... this is going to end poorly\n-                throw ex;\n-            }\n-            final Class<?> contextClass;\n-            try {\n-                contextClass = loader.loadClass(cls.getName());\n-            }\n-            catch (ClassNotFoundException e) {\n-                //ex.addSuppressed(e); Not until 1.7\n-                throw ex;\n-            }\n-            classMethods = contextClass.getDeclaredMethods(); // Cross fingers\n-        }\n         // then methods from the class itself\n-        for (Method m : classMethods) {\n+        for (Method m : _findClassMethods(cls)) {\n             if (!_isIncludableMemberMethod(m)) {\n                 continue;\n             }\n         _addAnnotationsIfNotPresent(target, src.getDeclaredAnnotations());\n     }\n \n-   private final boolean _isAnnotationBundle(Annotation ann)\n-   {\n-       return (_annotationIntrospector != null) && _annotationIntrospector.isAnnotationBundle(ann);\n-   }\n-   \n+    private final boolean _isAnnotationBundle(Annotation ann) {\n+        return (_annotationIntrospector != null) && _annotationIntrospector.isAnnotationBundle(ann);\n+    }\n+\n+    /**\n+     * Helper method that gets methods declared in given class; usually a simple thing,\n+     * but sometimes (as per [databind#785]) more complicated, depending on classloader\n+     * setup.\n+     *\n+     * @since 2.4.7\n+     */\n+    protected Method[] _findClassMethods(Class<?> cls)\n+    {\n+        try {\n+            return cls.getDeclaredMethods();\n+        } catch (final NoClassDefFoundError ex) {\n+            // One of the methods had a class that was not found in the cls.getClassLoader.\n+            // Maybe the developer was nice and has a different class loader for this context.\n+            final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+            if(loader == null){\n+                // Nope... this is going to end poorly\n+                throw ex;\n+            }\n+            final Class<?> contextClass;\n+            try {\n+                contextClass = loader.loadClass(cls.getName());\n+            } catch (ClassNotFoundException e) {\n+                // !!! TODO: 08-May-2015, tatu: Chain appropriately once we have JDK7 as baseline\n+                //ex.addSuppressed(e); Not until 1.7\n+               throw ex;\n+            }\n+            return contextClass.getDeclaredMethods(); // Cross fingers\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Other methods", "timestamp": 1431123618, "metainfo": ""}