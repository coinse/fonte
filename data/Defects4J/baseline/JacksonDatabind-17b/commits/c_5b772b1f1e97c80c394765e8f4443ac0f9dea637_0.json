{"sha": "5b772b1f1e97c80c394765e8f4443ac0f9dea637", "log": "minor clean up", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     public void acceptJsonFormatVisitor(JavaType type, JsonFormatVisitorWrapper visitor)\n         throws JsonMappingException\n     {\n-    \tif (type == null) {\n-    \t    throw new IllegalArgumentException(\"type must be provided\");\n-    \t}\n-    \tif (visitor == null) {\n-    \t    return;\n-    \t}\n-    \tDefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"type must be provided\");\n+        }\n+        if (visitor == null) {\n+            return;\n+        }\n+        DefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());\n         visitor.setProvider(provider);\n-    \tprovider.acceptJsonFormatVisitor(type, visitor);\n+        provider.acceptJsonFormatVisitor(type, visitor);\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n      * @param type The type for which to generate schema\n      */\n     public JsonSchema generateJsonSchema(Class<?> type)\n-            throws JsonMappingException\n-        {\n-            if (type == null) {\n-                throw new IllegalArgumentException(\"A class must be provided\");\n-            }\n-            /* no need for embedded type information for JSON schema generation (all\n-             * type information it needs is accessible via \"untyped\" serializer)\n-             */\n-            JsonSerializer<Object> ser = findValueSerializer(type, null);\n-            JsonNode schemaNode = (ser instanceof SchemaAware) ?\n-                    ((SchemaAware) ser).getSchema(this, null) : \n-                    JsonSchema.getDefaultSchemaNode();\n-            if (!(schemaNode instanceof ObjectNode)) {\n-                throw new IllegalArgumentException(\"Class \" + type.getName() +\n-                        \" would not be serialized as a JSON object and therefore has no schema\");\n-            }\n-            return new JsonSchema((ObjectNode) schemaNode);\n-        }\n+        throws JsonMappingException\n+    {\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"A class must be provided\");\n+        }\n+        /* no need for embedded type information for JSON schema generation (all\n+         * type information it needs is accessible via \"untyped\" serializer)\n+         */\n+        JsonSerializer<Object> ser = findValueSerializer(type, null);\n+        JsonNode schemaNode = (ser instanceof SchemaAware) ?\n+                ((SchemaAware) ser).getSchema(this, null) : JsonSchema.getDefaultSchemaNode();\n+        if (!(schemaNode instanceof ObjectNode)) {\n+            throw new IllegalArgumentException(\"Class \" + type.getName()\n+                    +\" would not be serialized as a JSON object and therefore has no schema\");\n+        }\n+        return new JsonSchema((ObjectNode) schemaNode);\n+    }\n     \n     /**\n      * The method to be called by {@link ObjectMapper} and {@link ObjectWriter}\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)\n         throws JsonMappingException\n     {\n-    \tJsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);\n+        JsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint);\n     \t/*\n         JavaType enumType = typeHint.containedType(0);\n     \tif (enumType == null) {\n     \t}\n     \t*/\n         JavaType valueType = typeHint.containedType(1);\n-    \tif (valueType == null) {\n-    \t    valueType = visitor.getProvider().constructType(Object.class);\n-    \t}\n+        if (valueType == null) {\n+            valueType = visitor.getProvider().constructType(Object.class);\n+        }\n         JsonSerializer<Object> ser = _valueSerializer;\n //        Class<Enum<?>> enumClass = (Class<Enum<?>>) enumType.getRawClass();\n         for (Map.Entry<?,SerializedString> entry : _keyEnums.internalMap().entrySet()) {", "timestamp": 1352766806, "metainfo": ""}