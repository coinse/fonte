{"sha": "e2bb0ee2088fa7f8d487669630999d7dcbe5de08", "log": "Fix [Issue#57] in master", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java\n      */\n     public static boolean isProxyType(Class<?> type)\n     {\n+        // As per [Issue#57], should NOT disqualify JDK proxy:\n+        /*\n         // Then: well-known proxy (etc) classes\n         if (Proxy.isProxyClass(type)) {\n             return true;\n         }\n+        */\n         String name = type.getName();\n         // Hibernate uses proxies heavily as well:\n         if (name.startsWith(\"net.sf.cglib.proxy.\")\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestJDKProxy.java\n+package com.fasterxml.jackson.databind.interop;\n+\n+import java.lang.reflect.*;\n+\n+import com.fasterxml.jackson.databind.*;\n+\n+// mostly for [Issue#57]\n+public class TestJDKProxy extends BaseMapTest\n+{\n+    final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    public interface IPlanet {\n+        String getName();\n+        String setName(String s);\n+    }\n+\n+    // bit silly example; usually wouldn't implement interface (no need to proxy if it did)\n+    static class Planet implements IPlanet {\n+        private String name;\n+\n+        public Planet() { }\n+        public Planet(String s) { name = s; }\n+        \n+        public String getName(){return name;}\n+        public String setName(String iName) {name = iName;\n+            return name;\n+        }\n+    }    \n+    \n+    /*\n+    /********************************************************\n+    /* Test methods\n+    /********************************************************\n+     */\n+    \n+    public void testSimple() throws Exception\n+    {\n+        IPlanet input = getProxy(IPlanet.class, new Planet(\"Foo\"));\n+        String json = MAPPER.writeValueAsString(input);\n+        assertEquals(\"{\\\"name\\\":\\\"Foo\\\"}\", json);\n+        \n+        // and just for good measure\n+        Planet output = MAPPER.readValue(json, Planet.class);\n+        assertEquals(\"Foo\", output.getName());\n+    }\n+\n+    /*\n+    /********************************************************\n+    /* Helper methods\n+    /********************************************************\n+     */\n+\n+    public static <T> T getProxy(Class<T> type, Object obj) {\n+        class ProxyUtil implements InvocationHandler {\n+            Object obj;\n+            public ProxyUtil(Object o) {\n+                obj = o;\n+            }\n+            public Object invoke(Object proxy, Method m, Object[] args) throws Throwable {\n+                Object result = null;\n+                result = m.invoke(obj, args);\n+                return result;\n+            }\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        T proxy = (T) Proxy.newProxyInstance(type.getClassLoader(), new Class[] { type },\n+                new ProxyUtil(obj));\n+        return proxy;\n+    }\n+}", "timestamp": 1346004980, "metainfo": ""}