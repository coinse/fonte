{"sha": "f75585ee649a1ad7d47646f31efb7a51aec555ed", "log": "eclipse warning cleanup, minor unit test additions", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n         }\n         return flags;\n     }\n+\n     /*\n     /**********************************************************\n     /* Life-cycle: factory methods\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeSerializer.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n-\n \n /**\n  * Interface for serializing type information regarding instances of specified\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java\n         } catch (JsonMappingException jex) {\n             verifyException(jex, \"value not one of declared\");\n         }\n+        jp.close();\n     }\n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestVisibleTypeId.java\n package com.fasterxml.jackson.databind.jsontype;\n \n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonSubTypes;\n import com.fasterxml.jackson.annotation.JsonTypeId;\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.annotation.JsonTypeName;\n-\n import com.fasterxml.jackson.databind.*;\n \n /**\n         @JsonTypeId\n         public String getType2() { return \"type2\"; };\n     }\n+\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = \"name\")\n+    @JsonSubTypes({ @JsonSubTypes.Type(value=I263Impl.class) })\n+    public static abstract class I263Base {\n+        @JsonTypeId\n+        public abstract String getName();\n+    }\n+\n+    @JsonPropertyOrder({ \"age\", \"name\" })\n+    @JsonTypeName(\"bob\")\n+    public static class I263Impl extends I263Base\n+    {\n+        @Override\n+        public String getName() { return \"bob\"; }\n+        \n+        public int age = 41;\n+    }\n     \n     /*\n     /**********************************************************\n-    /* Unit tests\n+    /* Unit tests, success\n     /**********************************************************\n      */\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n     \n     public void testVisibleWithProperty() throws Exception\n     {\n-        String json = mapper.writeValueAsString(new PropertyBean());\n+        String json = MAPPER.writeValueAsString(new PropertyBean());\n         // just default behavior:\n         assertEquals(\"{\\\"type\\\":\\\"BaseType\\\",\\\"a\\\":3}\", json);\n         // but then expect to read it back\n-        PropertyBean result = mapper.readValue(json, PropertyBean.class);\n+        PropertyBean result = MAPPER.readValue(json, PropertyBean.class);\n         assertEquals(\"BaseType\", result.type);\n \n         // also, should work with order reversed\n-        result = mapper.readValue(\"{\\\"a\\\":7, \\\"type\\\":\\\"BaseType\\\"}\", PropertyBean.class);\n+        result = MAPPER.readValue(\"{\\\"a\\\":7, \\\"type\\\":\\\"BaseType\\\"}\", PropertyBean.class);\n         assertEquals(7, result.a);\n         assertEquals(\"BaseType\", result.type);\n     }\n \n     public void testVisibleWithWrapperArray() throws Exception\n     {\n-        String json = mapper.writeValueAsString(new WrapperArrayBean());\n+        String json = MAPPER.writeValueAsString(new WrapperArrayBean());\n         // just default behavior:\n         assertEquals(\"[\\\"ArrayType\\\",{\\\"a\\\":1}]\", json);\n         // but then expect to read it back\n-        WrapperArrayBean result = mapper.readValue(json, WrapperArrayBean.class);\n+        WrapperArrayBean result = MAPPER.readValue(json, WrapperArrayBean.class);\n         assertEquals(\"ArrayType\", result.type);\n         assertEquals(1, result.a);\n     }\n \n     public void testVisibleWithWrapperObject() throws Exception\n     {\n-        String json = mapper.writeValueAsString(new WrapperObjectBean());\n+        String json = MAPPER.writeValueAsString(new WrapperObjectBean());\n         assertEquals(\"{\\\"ObjectType\\\":{\\\"a\\\":2}}\", json);\n         // but then expect to read it back\n-        WrapperObjectBean result = mapper.readValue(json, WrapperObjectBean.class);\n+        WrapperObjectBean result = MAPPER.readValue(json, WrapperObjectBean.class);\n         assertEquals(\"ObjectType\", result.type);\n     }\n \n     public void testVisibleWithExternalId() throws Exception\n     {\n-        String json = mapper.writeValueAsString(new ExternalIdWrapper());\n-        // but then expect to read it back\n-        ExternalIdWrapper result = mapper.readValue(json, ExternalIdWrapper.class);\n+        String json = MAPPER.writeValueAsString(new ExternalIdWrapper());\n+        // but then expect to read it back\n+        ExternalIdWrapper result = MAPPER.readValue(json, ExternalIdWrapper.class);\n         assertEquals(\"ExternalType\", result.bean.type);\n         assertEquals(2, result.bean.a);\n     }\n     public void testTypeIdFromProperty() throws Exception\n     {\n         assertEquals(\"{\\\"type\\\":\\\"SomeType\\\",\\\"a\\\":3}\",\n-                mapper.writeValueAsString(new TypeIdFromFieldProperty()));\n+                MAPPER.writeValueAsString(new TypeIdFromFieldProperty()));\n     }\n \n     public void testTypeIdFromArray() throws Exception\n     {\n         assertEquals(\"[\\\"SomeType\\\",{\\\"a\\\":3}]\",\n-                mapper.writeValueAsString(new TypeIdFromFieldArray()));\n+                MAPPER.writeValueAsString(new TypeIdFromFieldArray()));\n     }\n \n     public void testTypeIdFromObject() throws Exception\n     {\n         assertEquals(\"{\\\"SomeType\\\":{\\\"a\\\":3}}\",\n-                mapper.writeValueAsString(new TypeIdFromMethodObject()));\n+                MAPPER.writeValueAsString(new TypeIdFromMethodObject()));\n     }\n \n     public void testTypeIdFromExternal() throws Exception\n     {\n-        String json = mapper.writeValueAsString(new ExternalIdWrapper2());\n+        String json = MAPPER.writeValueAsString(new ExternalIdWrapper2());\n         // Implementation detail: type id written AFTER value, due to constraints\n         assertEquals(\"{\\\"bean\\\":{\\\"a\\\":2},\\\"type\\\":\\\"SomeType\\\"}\", json);\n         \n     }\n-\n-    // Failing cases\n+    \n+    public void testIssue263() throws Exception\n+    {\n+        // first, serialize:\n+        assertEquals(\"{\\\"name\\\":\\\"bob\\\",\\\"age\\\":41}\", MAPPER.writeValueAsString(new I263Impl()));\n+        \n+        // then bring back:\n+        I263Base result = MAPPER.readValue(\"{\\\"age\\\":19,\\\"name\\\":\\\"bob\\\"}\", I263Base.class);\n+        assertTrue(result instanceof I263Impl);\n+        assertEquals(19, ((I263Impl) result).age);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Unit tests, fails\n+    /**********************************************************\n+     */\n \n     public void testInvalidMultipleTypeIds() throws Exception\n     {\n         try {\n-            mapper.writeValueAsString(new MultipleIds());\n+            MAPPER.writeValueAsString(new MultipleIds());\n             fail(\"Should have failed\");\n         } catch (JsonMappingException e) {\n             verifyException(e, \"multiple type ids\");", "timestamp": 1374732201, "metainfo": ""}