{"sha": "a97f06e9ad3f96e4d52c45d1b5742e819e690165", "log": "Add unit test for [JACKSON-757]", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n \n         @Override\n         public byte[] getBinaryValue(Base64Variant b64variant) {\n+            return null;\n+        }\n+\n+        @Override\n+        public byte[] getEmbeddedObject() {\n             return null;\n         }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n import java.io.*;\n import java.util.*;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.annotation.JsonValue;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n             map.put(key, Integer.valueOf(value));\n         }\n     }\n+\n+    // [JACKSON-757]\n+    static enum NOT_OK {\n+        V1(\"v1\"); \n+        protected String key;\n+        // any runtime-persistent annotation is fine\n+        NOT_OK(@JsonProperty String key) { this.key = key; }\n+    }\n+\n+    static enum OK {\n+        V1(\"v1\");\n+        protected String key;\n+        OK(String key) { this.key = key; }\n+    }\n     \n     /*\n     /**********************************************************\n         mapper.enable(SerializationConfig.Feature.WRITE_ENUMS_USING_INDEX);\n         assertEquals(\"1\", mapper.writeValueAsString(TestEnum.B));\n     }\n+\n+    // [JACKSON-757]\n+    public void testAnnotationsOnEnumCtor() throws Exception\n+    {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.writeValueAsString(OK.V1);\n+        mapper.writeValueAsString(NOT_OK.V1);\n+    }\n }", "timestamp": 1326836203, "metainfo": ""}