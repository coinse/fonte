{"sha": "953eab22634e3bd019ef33813769873aa9758c72", "log": "minor cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n     extends DatabindContext\n     implements java.io.Serializable\n {\n-    private static final long serialVersionUID = -7727373309391091315L;\n+    private static final long serialVersionUID = -4290063686213707727L;\n \n     /**\n      * Let's limit length of error messages, for cases where underlying data\n      * Helper method for indicating that the current token was expected to be another\n      * token.\n      */\n-    public JsonMappingException wrongTokenException(JsonParser p, JsonToken expToken, String msg) {\n-        return JsonMappingException.from(p, \"Unexpected token (\"+p.getCurrentToken()+\"), expected \"+expToken+\": \"+msg);\n+    public JsonMappingException wrongTokenException(JsonParser p, JsonToken expToken, String msg0) {\n+        String msg = \"Unexpected token (\"+p.getCurrentToken()+\"), expected \"+expToken;\n+        if (msg0 != null) {\n+            msg = msg + \": \"+msg0;\n+        }\n+        return JsonMappingException.from(p, msg);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.DeserializationConfig;\n-import com.fasterxml.jackson.databind.DeserializationContext;\n-import com.fasterxml.jackson.databind.DeserializationFeature;\n-import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.EnumResolver;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n             }\n         }\n \n-        // As per [Issue#24], may want to use alternate shape, serialize as JSON Object.\n-        // Challenge here is that EnumSerializer does not know how to produce\n-        // POJO style serialization, so we must handle that special case separately;\n-        // otherwise pass it to EnumSerializer.\n         if (ser == null) {\n+            // We may also want to use serialize Collections \"as beans\", if (and only if)\n+            // this is specified with `@JsonFormat(shape=Object)`\n             JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n             if (format != null && format.getShape() == JsonFormat.Shape.OBJECT) {\n                 return null;", "timestamp": 1400214928, "metainfo": ""}