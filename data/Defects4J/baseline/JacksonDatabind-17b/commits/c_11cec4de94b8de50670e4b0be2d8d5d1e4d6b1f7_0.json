{"sha": "11cec4de94b8de50670e4b0be2d8d5d1e4d6b1f7", "log": "Implement [JACKSON-850]: allow use of zero-arg factory methods using @JsonCreator", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanDescription.java\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n-import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;\n-import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n-import com.fasterxml.jackson.databind.introspect.ClassIntrospector;\n-import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n+import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.type.TypeBindings;\n import com.fasterxml.jackson.databind.util.Annotations;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n         CreatorCollector creators =  new CreatorCollector(beanDesc, fixAccess);\n         AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();\n         \n-        // First, let's figure out constructor/factory-based instantiation\n-        // 23-Jan-2010, tatus: but only for concrete types\n-        if (beanDesc.getType().isConcrete()) {\n-            AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n-            if (defaultCtor != null) {\n-                if (fixAccess) {\n-                    ClassUtil.checkAndFixAccess(defaultCtor.getAnnotated());\n-                }\n-                creators.setDefaultConstructor(defaultCtor);\n-            }\n-        }\n-\n         // need to construct suitable visibility checker:\n         final DeserializationConfig config = ctxt.getConfig();\n         VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker();\n-        vchecker = config.getAnnotationIntrospector().findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n+        vchecker = intr.findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);\n \n         /* Important: first add factory methods; then constructors, so\n          * latter can override former!\n          */\n         _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators);\n-        _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n-\n+        // constructors only usable on concrete types:\n+        if (beanDesc.getType().isConcrete()) {\n+            _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators);\n+        }\n         return creators.constructValueInstantiator(config);\n     }\n \n          AnnotationIntrospector intr, CreatorCollector creators)\n         throws JsonMappingException\n     {\n+        /* First things first: the \"default constructor\" (zero-arg\n+         * constructor; whether implicit or explicit) is NOT included\n+         * in list of constructors, so needs to be handled separately.\n+         */\n+        AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();\n+        if (defaultCtor != null) {\n+            if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) {\n+                creators.setDefaultCreator(defaultCtor);\n+            }\n+        }\n+        \n         for (AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n             int argCount = ctor.getParameterCount();\n-            if (argCount < 1) {\n-                continue;\n-            }\n             boolean isCreator = intr.hasCreatorAnnotation(ctor);\n             boolean isVisible =  vchecker.isCreatorVisible(ctor);\n             // some single-arg constructors (String, number) are auto-detected\n     {\n         final DeserializationConfig config = ctxt.getConfig();\n         for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n+            boolean isCreator = intr.hasCreatorAnnotation(factory);\n             int argCount = factory.getParameterCount();\n-            if (argCount < 1) {\n+            // zero-arg methods must be annotated; if so, are \"default creators\" [JACKSON-850]\n+            if (argCount == 0) {\n+                if (isCreator) {\n+                    creators.setDefaultCreator(factory);\n+                }\n                 continue;\n             }\n-            boolean isCreator = intr.hasCreatorAnnotation(factory);\n             // some single-arg factory methods (String, number) are auto-detected\n             if (argCount == 1) {\n                 AnnotatedParameter param = factory.getParameter(0);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n public class CreatorCollector\n {\n     /// Type of bean being created\n-    final BeanDescription _beanDesc;\n-\n-    final boolean _canFixAccess;\n-\n-    protected AnnotatedConstructor _defaultConstructor;\n+    final protected BeanDescription _beanDesc;\n+\n+    final protected boolean _canFixAccess;\n+\n+    /**\n+     * Reference to the default creator (constructor or factory method).\n+     *<p>\n+     * Note: name is a misnomer, after resolving of [JACKSON-850], since this\n+     * can also point to factory method.\n+     */\n+    protected AnnotatedWithParams _defaultConstructor;\n     \n     protected AnnotatedWithParams _stringCreator, _intCreator, _longCreator;\n     protected AnnotatedWithParams _doubleCreator, _booleanCreator;\n     /**********************************************************\n      */\n \n+    /**\n+     * @deprecated since 2.1, use {@link #setDefaultCreator} instead.\n+     */\n     public void setDefaultConstructor(AnnotatedConstructor ctor) {\n-        _defaultConstructor = ctor;\n+        _defaultConstructor = _fixAccess(ctor);\n+    }\n+    \n+    /**\n+     * Method called to indicate the default creator: no-arguments\n+     * constructor or factory method that is called to instantiate\n+     * a value before populating it with data. Default creator is\n+     * only used if no other creators are indicated.\n+     * \n+     * @param creator Creator method; no-arguments constructor or static\n+     *   factory method.\n+     */\n+    public void setDefaultCreator(AnnotatedWithParams creator)\n+    {\n+        // !!! TODO: 23-Jul-2012, tatu: Should change to directly change things\n+        //    here in future; but for backwards compatibility, can't do that yet\n+        if (creator instanceof AnnotatedConstructor) {\n+            setDefaultConstructor((AnnotatedConstructor) creator);\n+            return;\n+        }\n+        _defaultConstructor = _fixAccess(creator);\n     }\n     \n     public void addStringCreator(AnnotatedWithParams creator) {\n \n     /*\n     /**********************************************************\n+    /* Accessors\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * @since 2.1\n+     */\n+    public boolean hasDefaultCreator() {\n+        return _defaultConstructor != null;\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Helper methods\n     /**********************************************************\n      */\n+\n+    private <T extends AnnotatedMember> T _fixAccess(T member)\n+    {\n+        if (member != null && _canFixAccess) {\n+            ClassUtil.checkAndFixAccess((Member) member.getAnnotated());\n+        }\n+        return member;\n+    }\n \n     protected AnnotatedWithParams verifyNonDup(AnnotatedWithParams newOne, AnnotatedWithParams oldOne,\n             String type)\n                 throw new IllegalArgumentException(\"Conflicting \"+type+\" creators: already had \"+oldOne+\", encountered \"+newOne);\n             }\n         }\n-        if (_canFixAccess) {\n-            ClassUtil.checkAndFixAccess((Member) newOne.getAnnotated());\n-        }\n-        return newOne;\n+        return _fixAccess(newOne);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n             if (!Modifier.isStatic(m.getModifiers())) {\n                 continue;\n             }\n-            int argCount = m.getParameterTypes().length;\n-            // factory methods take at least one arg:\n-            if (argCount < 1) {\n-                continue;\n-            }\n+            // all factory methods are fine, as per [JACKSON-850]\n+            //int argCount = m.getParameterTypes().length;\n             if (creatorMethods == null) {\n                 creatorMethods = new ArrayList<AnnotatedMethod>(8);\n             }\n--- a/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple.java\n \n public class TestBuilderSimple extends BaseMapTest\n {\n-\t// // Simple 2-property value class, builder with standard naming\n+    // // Simple 2-property value class, builder with standard naming\n \t\n-\t@JsonDeserialize(builder=SimpleBuilderXY.class)\n-\tstatic class ValueClassXY\n-\t{\n-\t\tfinal int _x, _y;\n-\n-\t\tprotected ValueClassXY(int x, int y) {\n-\t\t\t_x = x+1;\n-\t\t\t_y = y+1;\n-\t\t}\n-\t}\n+    @JsonDeserialize(builder=SimpleBuilderXY.class)\n+    static class ValueClassXY\n+    {\n+        final int _x, _y;\n+\n+        protected ValueClassXY(int x, int y) {\n+            _x = x+1;\n+            _y = y+1;\n+        }\n+    }\n \n     static class SimpleBuilderXY\n     {", "timestamp": 1343021600, "metainfo": ""}