{"sha": "214a7a9fcc2c63e5b5b3912db90f35a650ab738f", "log": "warnings cleanup for tests", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanSerializer.java\n \n             if (name.equals(\"uri\")) {\n                 assertToken(JsonToken.VALUE_STRING, t);\n-                assertEquals(FixtureObject.VALUE_URSTR, getAndVerifyText(jp));\n+                assertEquals(FixtureObjectBase.VALUE_URSTR, getAndVerifyText(jp));\n             } else if (name.equals(\"url\")) {\n                 assertToken(JsonToken.VALUE_STRING, t);\n-                assertEquals(FixtureObject.VALUE_URSTR, getAndVerifyText(jp));\n+                assertEquals(FixtureObjectBase.VALUE_URSTR, getAndVerifyText(jp));\n             } else if (name.equals(\"testNull\")) {\n                 assertToken(JsonToken.VALUE_NULL, t);\n             } else if (name.equals(\"testString\")) {\n                 assertToken(JsonToken.VALUE_STRING, t);\n-                assertEquals(FixtureObject.VALUE_STRING, getAndVerifyText(jp));\n+                assertEquals(FixtureObjectBase.VALUE_STRING, getAndVerifyText(jp));\n             } else if (name.equals(\"testBoolean\")) {\n                 assertToken(JsonToken.VALUE_TRUE, t);\n             } else if (name.equals(\"testEnum\")) {\n                 assertToken(JsonToken.VALUE_STRING, t);\n-                assertEquals(FixtureObject.VALUE_ENUM.toString(),getAndVerifyText(jp));\n+                assertEquals(FixtureObjectBase.VALUE_ENUM.toString(),getAndVerifyText(jp));\n             } else if (name.equals(\"testInteger\")) {\n                 assertToken(JsonToken.VALUE_NUMBER_INT, t);\n-                assertEquals(jp.getIntValue(),FixtureObject.VALUE_INT);\n+                assertEquals(jp.getIntValue(),FixtureObjectBase.VALUE_INT);\n             } else if (name.equals(\"testLong\")) {\n                 assertToken(JsonToken.VALUE_NUMBER_INT, t);\n-                assertEquals(jp.getLongValue(),FixtureObject.VALUE_LONG);\n+                assertEquals(jp.getLongValue(),FixtureObjectBase.VALUE_LONG);\n             } else if (name.equals(\"testBigInteger\")) {\n                 assertToken(JsonToken.VALUE_NUMBER_INT, t);\n-                assertEquals(jp.getLongValue(),FixtureObject.VALUE_BIGINT.longValue());\n+                assertEquals(jp.getLongValue(),FixtureObjectBase.VALUE_BIGINT.longValue());\n             } else if (name.equals(\"testBigDecimal\")) {\n                 assertToken(JsonToken.VALUE_NUMBER_FLOAT, t);\n-                assertEquals(jp.getText(), FixtureObject.VALUE_BIGDEC.toString());\n+                assertEquals(jp.getText(), FixtureObjectBase.VALUE_BIGDEC.toString());\n             } else if (name.equals(\"testCharacter\")) {\n                 assertToken(JsonToken.VALUE_STRING, t);\n-                assertEquals(String.valueOf(FixtureObject.VALUE_CHAR), getAndVerifyText(jp));\n+                assertEquals(String.valueOf(FixtureObjectBase.VALUE_CHAR), getAndVerifyText(jp));\n             } else if (name.equals(\"testShort\")) {\n                 assertToken(JsonToken.VALUE_NUMBER_INT, t);\n-                assertEquals(jp.getIntValue(),FixtureObject.VALUE_SHORT);\n+                assertEquals(jp.getIntValue(),FixtureObjectBase.VALUE_SHORT);\n             } else if (name.equals(\"testByte\")) {\n                 assertToken(JsonToken.VALUE_NUMBER_INT, t);\n-                assertEquals(jp.getIntValue(),FixtureObject.VALUE_BYTE);\n+                assertEquals(jp.getIntValue(),FixtureObjectBase.VALUE_BYTE);\n             } else if (name.equals(\"testFloat\")) {\n                 assertToken(JsonToken.VALUE_NUMBER_FLOAT, t);\n-                assertEquals(jp.getDecimalValue().floatValue(),FixtureObject.VALUE_FLOAT);\n+                assertEquals(jp.getDecimalValue().floatValue(),FixtureObjectBase.VALUE_FLOAT);\n             } else if (name.equals(\"testDouble\")) {\n                 assertToken(JsonToken.VALUE_NUMBER_FLOAT, t);\n-                assertEquals(jp.getDoubleValue(),FixtureObject.VALUE_DBL);\n+                assertEquals(jp.getDoubleValue(),FixtureObjectBase.VALUE_DBL);\n             } else if (name.equals(\"testStringBuffer\")) {\n                 assertToken(JsonToken.VALUE_STRING, t);\n-                assertEquals(FixtureObject.VALUE_STRING, getAndVerifyText(jp));\n+                assertEquals(FixtureObjectBase.VALUE_STRING, getAndVerifyText(jp));\n             } else if (name.equals(\"testError\")) {\n                 // More complicated...\n                 assertToken(JsonToken.START_OBJECT, t);\n                         assertEquals(JsonToken.VALUE_NULL, jp.nextToken());\n                     } else if (name.equals(\"message\")) {\n                         assertEquals(JsonToken.VALUE_STRING, jp.nextToken());\n-                        assertEquals(FixtureObject.VALUE_ERRTXT, getAndVerifyText(jp));\n+                        assertEquals(FixtureObjectBase.VALUE_ERRTXT, getAndVerifyText(jp));\n                     } else if (name.equals(\"localizedMessage\")) {\n                         assertEquals(JsonToken.VALUE_STRING, jp.nextToken());\n                     } else if (name.equals(\"stackTrace\")) {", "timestamp": 1396927687, "metainfo": ""}