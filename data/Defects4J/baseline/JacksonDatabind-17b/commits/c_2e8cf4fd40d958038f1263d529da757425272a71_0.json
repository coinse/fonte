{"sha": "2e8cf4fd40d958038f1263d529da757425272a71", "log": "Merge branch '2.4' of github.com:FasterXML/jackson-databind into 2.4", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n      * kinds of JSON values); if enable, empty JSON String can be taken\n      * to be equivalent of JSON null.\n      *<p>\n-     * Feature is enabled by default.\n+     * Feature is disabled by default.\n      */\n     ACCEPT_EMPTY_STRING_AS_NULL_OBJECT(false),\n     \n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings.java\n                         }\n                         _addPlaceholder(name); // to prevent infinite loops\n \n-                        if (typeParams != null) {\n+                        if (typeParams != null && typeParams.length > i) {\n                             _bindings.put(name, typeParams[i]);\n                         } else {\n                             _bindings.put(name, _typeFactory._constructType(varType, this));\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;\n import com.fasterxml.jackson.databind.ser.ResolvableSerializer;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n \n public class TestWithGenerics extends BaseMapTest\n {\n         public ContainerWithField(T a) { animal = a; }\n     }\n     \n-    // Beans for [JACKSON-387], [JACKSON-430]\n+    static class WrappedContainerWithField {\n+        public ContainerWithField<?> animalContainer;\n+    }\n+\n+\t// Beans for [JACKSON-387], [JACKSON-430]\n     \n     @JsonTypeInfo(use=JsonTypeInfo.Id.CLASS, include=JsonTypeInfo.As.PROPERTY, property=\"@classAttr1\")\n     static class MyClass {\n         }\n     }\n \n+    // [Issue#543]\n+    static class ContainerWithTwoAnimals<U extends Animal,V extends Animal> extends ContainerWithField<U> {\n+         public V otherAnimal;\n+        \n+         public ContainerWithTwoAnimals(U a1, V a2) {\n+              super(a1);\n+              otherAnimal = a2;\n+         }\n+    }\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n \n+    private final ObjectMapper MAPPER = objectMapper();\n+\n     public void testWrapperWithGetter() throws Exception\n     {\n         Dog dog = new Dog(\"Fluffy\", 3);\n-        String json = new ObjectMapper().writeValueAsString(new ContainerWithGetter<Animal>(dog));\n+        String json = MAPPER.writeValueAsString(new ContainerWithGetter<Animal>(dog));\n         if (json.indexOf(\"\\\"object-type\\\":\\\"doggy\\\"\") < 0) {\n             fail(\"polymorphic type not kept, result == \"+json+\"; should contain 'object-type':'...'\");\n         }\n     public void testWrapperWithField() throws Exception\n     {\n         Dog dog = new Dog(\"Fluffy\", 3);\n-        String json = new ObjectMapper().writeValueAsString(new ContainerWithField<Animal>(dog));\n+        String json = MAPPER.writeValueAsString(new ContainerWithField<Animal>(dog));\n         if (json.indexOf(\"\\\"object-type\\\":\\\"doggy\\\"\") < 0) {\n             fail(\"polymorphic type not kept, result == \"+json+\"; should contain 'object-type':'...'\");\n         }\n     {\n         Dog dog = new Dog(\"Fluffy\", 3);\n         ContainerWithGetter<Animal> c2 = new ContainerWithGetter<Animal>(dog);\n-        ObjectMapper mapper = new ObjectMapper();\n-        String json = mapper.writerWithType(TypeFactory.defaultInstance().constructParametricType(ContainerWithGetter.class, Animal.class)).writeValueAsString(c2);\n+        String json = MAPPER.writerWithType(MAPPER.getTypeFactory().constructParametricType(ContainerWithGetter.class, Animal.class)).writeValueAsString(c2);\n         if (json.indexOf(\"\\\"object-type\\\":\\\"doggy\\\"\") < 0) {\n             fail(\"polymorphic type not kept, result == \"+json+\"; should contain 'object-type':'...'\");\n         }\n         assertNotNull(mc2.params);\n         assertEquals(1, mc2.params.size());\n     }\n+\n+    // [Issue#543]\n+    public void testValueWithMoreGenericParameters() throws Exception\n+    {\n+        WrappedContainerWithField wrappedContainerWithField = new WrappedContainerWithField();\n+        wrappedContainerWithField.animalContainer = new ContainerWithTwoAnimals<Dog,Dog>(new Dog(\"d1\",1), new Dog(\"d2\",2));\n+        String json = MAPPER.writeValueAsString(wrappedContainerWithField);\n+        assertNotNull(json);\n+    }\n }", "timestamp": 1410821568, "metainfo": ""}