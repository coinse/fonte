{"sha": "a0d1475f48e979d48c7c1f3dc033f55e0f8ba548", "log": "add a unit test for cyclic dep problem with untyped deser", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n-\n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n \n /**\n- * Unit tests for verifying \"old\" data binding from JSON to JDK objects;\n+ * Unit tests for verifying \"raw\" (or \"untyped\") data binding from JSON to JDK objects;\n  * one that only uses core JDK types; wrappers, Maps and Lists.\n  */\n+@SuppressWarnings(\"serial\")\n public class TestUntypedDeserialization\n     extends BaseMapTest\n {\n-    @SuppressWarnings(\"serial\")\n     static class UCStringDeserializer\n         extends StdScalarDeserializer<String>\n     {\n         public UCStringDeserializer() { super(String.class); }\n \n         @Override\n-        public String deserialize(JsonParser jp, DeserializationContext ctxt)\n-            throws IOException, JsonProcessingException\n-        {\n+        public String deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n             return jp.getText().toUpperCase();\n         }\n     }\n \n-    @SuppressWarnings(\"serial\")\n     static class CustomNumberDeserializer\n         extends StdScalarDeserializer<Number>\n     {\n         }\n \n         @Override\n-        public Number deserialize(JsonParser jp, DeserializationContext ctxt)\n-            throws IOException, JsonProcessingException\n-        {\n+        public Number deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {\n             return value;\n         }\n     }\n \n-    @SuppressWarnings(\"serial\")\n+    // Let's make this Contextual, to tease out cyclic resolution issues, if any\n     static class ListDeserializer extends StdDeserializer<List<Object>>\n+        implements ContextualDeserializer\n     {\n         public ListDeserializer() { super(List.class); }\n \n             }\n             return list;\n         }\n-    }\n-\n-    @SuppressWarnings(\"serial\")\n+\n+        @Override\n+        public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n+                BeanProperty property) throws JsonMappingException\n+        {\n+            // For now, we just need to access \"untyped\" deserializer; not use it.\n+            \n+            /*JsonDeserializer<Object> ob = */\n+            ctxt.findContextualValueDeserializer(ctxt.constructType(Object.class), property);\n+            return this;\n+        }\n+    }\n+\n     static class MapDeserializer extends StdDeserializer<Map<String,Object>>\n     {\n         public MapDeserializer() { super(Map.class); }", "timestamp": 1417026485, "metainfo": ""}