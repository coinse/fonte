{"sha": "1826df76743de7de97bc9423794262e335d640ff", "log": "FINALLY fixed handling of nested @JsonUnwrapped+prefix", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n         _valueInstantiator = src._valueInstantiator;\n         _delegateDeserializer = src._delegateDeserializer;\n         _propertyBasedCreator = src._propertyBasedCreator;\n-\n-        _beanProperties = src._beanProperties.renameAll(unwrapper);\n-\n+        \n         _backRefs = src._backRefs;\n         _ignorableProps = src._ignorableProps;\n         _ignoreAllUnknown = (unwrapper != null) || src._ignoreAllUnknown;\n \n         _nonStandardCreation = src._nonStandardCreation;\n         _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n+\n+        if (unwrapper != null) {\n+            // delegate further unwraps, if any\n+            if (_unwrappedPropertyHandler != null) { // got handler, delegate\n+                _unwrappedPropertyHandler.renameAll(unwrapper);\n+            }\n+            // and handle direct unwrapping as well:\n+            _beanProperties = src._beanProperties.renameAll(unwrapper);\n+        } else {\n+            _beanProperties = src._beanProperties;\n+        }\n     }\n \n     @Override\n     public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)\n     {\n-        /* bit kludgy but we don't want to accidentally change type;\n-         * sub-classes MUST override this method to support unwrapped\n-         * properties...\n+        /* bit kludgy but we don't want to accidentally change type; sub-classes\n+         * MUST override this method to support unwrapped properties...\n          */\n         if (getClass() != BeanDeserializer.class) {\n             return this;\n                     unwrapped = new UnwrappedPropertyHandler();\n                 }\n                 unwrapped.addProperty(prop);\n+                continue;\n             }\n             // [JACKSON-594]: non-static inner classes too:\n             prop = _resolveInnerClassValuedProperty(config, prop);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n         throws IOException, JsonProcessingException\n     {\n         JsonToken t = jp.getCurrentToken();\n+        \n         if (t == JsonToken.VALUE_NULL) {\n             return (_nullProvider == null) ? null : _nullProvider.nullValue(ctxt);\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n \n import java.util.*;\n \n+import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n         ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>();\n         while (it.hasNext()) {\n             SettableBeanProperty prop = it.next();\n-            newProps.add(prop.withName(transformer.transform(prop.getName())));\n+            String newName = transformer.transform(prop.getName());\n+            prop = prop.withName(newName);\n+            JsonDeserializer<?> deser = prop.getValueDeserializer();\n+            if (deser != null) {\n+                @SuppressWarnings(\"unchecked\")\n+                JsonDeserializer<Object> newDeser = (JsonDeserializer<Object>)\n+                    deser.unwrappingDeserializer(transformer);\n+                if (newDeser != deser) {\n+                    prop = prop.withValueDeserializer(newDeser);\n+                }\n+            }\n+            newProps.add(prop);\n         }\n         // should we try to re-index? Ordering probably changed but called probably doesn't want changes...\n         return new BeanPropertyMap(newProps);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/UnwrappedPropertyHandler.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/UnwrappedPropertyHandler.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n+import com.fasterxml.jackson.databind.util.NameTransformer;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n /**\n         _properties.add(property);\n     }\n \n+    public void renameAll(NameTransformer transformer)\n+    {\n+        ArrayList<SettableBeanProperty> oldProps = new ArrayList<SettableBeanProperty>(_properties);\n+        Iterator<SettableBeanProperty> it = oldProps.iterator();\n+        _properties.clear();\n+        while (it.hasNext()) {\n+            SettableBeanProperty prop = it.next();\n+            String newName = transformer.transform(prop.getName());\n+            prop = prop.withName(newName);\n+            JsonDeserializer<?> deser = prop.getValueDeserializer();\n+            if (deser != null) {\n+                @SuppressWarnings(\"unchecked\")\n+                JsonDeserializer<Object> newDeser = (JsonDeserializer<Object>)\n+                    deser.unwrappingDeserializer(transformer);\n+                if (newDeser != deser) {\n+                    prop = prop.withValueDeserializer(newDeser);\n+                }\n+            }\n+            _properties.add(prop);\n+        }\n+    }\n+    \n     public Object processUnwrapped(JsonParser originalParser, DeserializationContext ctxt, Object bean,\n             TokenBuffer buffered)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n             JsonToken t;\n             try {\n                 t = jp.nextToken();\n+                if (t == null) break;\n+                if (count < MAX_COUNT) {\n+                    if (count > 0) {\n+                        sb.append(\", \");\n+                    }\n+                    sb.append(t.toString());\n+                    if (t == JsonToken.FIELD_NAME) {\n+                        sb.append('(');\n+                        sb.append(jp.getCurrentName());\n+                        sb.append(')');\n+                    }\n+                }\n             } catch (IOException ioe) { // should never occur\n                 throw new IllegalStateException(ioe);\n-            }\n-            if (t == null) break;\n-            if (count < MAX_COUNT) {\n-                if (count > 0) {\n-                    sb.append(\", \");\n-                }\n-                sb.append(t.toString());\n             }\n             ++count;\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java\n     /**********************************************************\n      */\n \n-    /*\n     public void testPrefixedUnwrapping() throws Exception\n     {\n         PrefixUnwrap bean = mapper.readValue(\"{\\\"name\\\":\\\"Axel\\\",\\\"_x\\\":4,\\\"_y\\\":7}\", PrefixUnwrap.class);\n     \n     public void testDeepPrefixedUnwrappingDeserialize() throws Exception\n     {\n-        DeepPrefixUnwrap bean = mapper.readValue(\"{\\\"u.name\\\":\\\"Bubba\\\",\\\"_x\\\":2,\\\"_y\\\":3}\",\n+        DeepPrefixUnwrap bean = mapper.readValue(\"{\\\"u.name\\\":\\\"Bubba\\\",\\\"u._x\\\":2,\\\"u._y\\\":3}\",\n                 DeepPrefixUnwrap.class);\n         assertNotNull(bean.unwrapped);\n-        assertEquals(\"Bubba\", bean.unwrapped.name);\n         assertNotNull(bean.unwrapped.location);\n         assertEquals(2, bean.unwrapped.location.x);\n         assertEquals(3, bean.unwrapped.location.y);\n+        assertEquals(\"Bubba\", bean.unwrapped.name);\n     }\n     \n     public void testHierarchicConfigDeserialize() throws Exception\n                 ConfigRoot.class);\n         assertNotNull(root.general);\n         assertNotNull(root.general.names);\n-        assertEquals(\"Bob\", root.general.names.name);\n         assertNotNull(root.misc);\n         assertEquals(3, root.misc.value);\n+        assertEquals(\"Bob\", root.general.names.name);\n     }\n-*/\n }", "timestamp": 1327376597, "metainfo": ""}