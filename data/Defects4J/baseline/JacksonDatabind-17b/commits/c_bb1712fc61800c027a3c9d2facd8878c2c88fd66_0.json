{"sha": "bb1712fc61800c027a3c9d2facd8878c2c88fd66", "log": "Try to fix unreliable test case", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n         /* 12-Apr-2014, tatu: for now, pass explicit 'false' to mean 'not using timestamp',\n          *     for backwards compatibility; this differs from other Date/Calendar types.\n          */\n-    \tthis(Boolean.FALSE);\n+        this(Boolean.FALSE);\n     }\n \n     protected SqlDateSerializer(Boolean useTimestamp) {\n-    \tsuper(java.sql.Date.class, useTimestamp, null);\n+        super(java.sql.Date.class, useTimestamp, null);\n     }\n \n     @Override\n     @Override\n     public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException\n     {\n-    \t_acceptJsonFormatVisitor(visitor, typeHint, _useTimestamp);\n+        _acceptJsonFormatVisitor(visitor, typeHint, _useTimestamp);\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestDateSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestDateSerialization.java\n         java.sql.Date date = new java.sql.Date(99, Calendar.APRIL, 1);\n         assertEquals(quote(\"1999-04-01\"), MAPPER.writeValueAsString(date));\n \n-        assertEquals(aposToQuotes(\"{'date':'1969-12-31'}\"), MAPPER.writeValueAsString(new SqlDateAsDefaultBean(0L)));\n+        java.sql.Date date0 = new java.sql.Date(0L);\n+        assertEquals(aposToQuotes(\"{'date':'\"+date0.toString()+\"'}\"),\n+                MAPPER.writeValueAsString(new SqlDateAsDefaultBean(0L)));\n \n         // but may explicitly force timestamp too\n         assertEquals(aposToQuotes(\"{'date':0}\"), MAPPER.writeValueAsString(new SqlDateAsNumberBean(0L)));", "timestamp": 1397788692, "metainfo": ""}