{"sha": "f1c79d4a2b5eb0b8ed63c2772cadb322801ce8da", "log": "Changes to make 1.5 compatible against: first, removing @Override from interface impls", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n     /**********************************************************\n      */\n \n-    @Override\n+//  @Override\n     public abstract Version version();\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n     /**\n      * Method to get logical name of the property\n      */\n-    @Override\n+//  @Override\n     public String getName();\n     \n     /**\n             return new Std(_name, type, _contextAnnotations, _member);\n         }\n         \n-        @Override\n+//        @Override\n         public <A extends Annotation> A getAnnotation(Class<A> acls) {\n             return (_member == null) ? null : _member.getAnnotation(acls);\n         }\n \n-        @Override\n+//        @Override\n         public <A extends Annotation> A getContextAnnotation(Class<A> acls) {\n             return (_contextAnnotations == null) ? null : _contextAnnotations.get(acls);\n         }\n         \n-        @Override\n+//      @Override\n         public String getName() {\n             return _name;\n         }\n \n-        @Override\n+//      @Override\n         public JavaType getType() {\n             return _type;\n         }\n \n-        @Override\n+//      @Override\n         public AnnotatedMember getMember() {\n             return _member;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n         _defaultState = defaultState;\n     }\n \n-    @Override\n+//  @Override\n     public boolean enabledByDefault() { return _defaultState; }\n \n-    @Override\n+//  @Override\n     public int getMask() { return (1 << ordinal()); }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n      * convenience \"for-each\" loop can be used for looping over elements\n      * of JSON Array constructs.\n      */\n-    @Override\n+//  @Override\n     public final Iterator<JsonNode> iterator() { return elements(); }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MapperFeature.java\n         _defaultState = defaultState;\n     }\n     \n-    @Override\n+//  @Override\n     public boolean enabledByDefault() { return _defaultState; }\n \n-    @Override\n+//  @Override\n     public int getMask() { return (1 << ordinal()); }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/MappingIterator.java\n     /**********************************************************\n      */\n \n-    @Override\n+//  @Override\n     public boolean hasNext()\n     {\n         try {\n         }\n     }\n \n-    @Override\n+//  @Override\n     public T next()\n     {\n         try {\n         }\n     }\n \n-    @Override public void remove() {\n+//  @Override\n+    public void remove() {\n         throw new UnsupportedOperationException();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/Module.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java\n      * Method that returns version of this module. Can be used by Jackson for\n      * informational purposes.\n      */\n-    @Override\n+//  @Override\n     public abstract Version version();\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * Method that will return version information stored in and read from jar\n      * that contains this class.\n      */\n-    @Override\n+//  @Override\n     public Version version() {\n         return DatabindVersion.instance.version();\n     }\n         {\n             // // // Accessors\n \n-            @Override\n+//          @Override\n             public Version getMapperVersion() {\n                 return version();\n             }\n \n             @SuppressWarnings(\"unchecked\")\n-            @Override\n+//          @Override\n             public <C extends ObjectCodec> C getOwner() {\n                 // why do we need the cast here?!?\n                 return (C) mapper;\n             }\n \n-            @Override\n+//          @Override\n             public TypeFactory getTypeFactory() {\n                 return _typeFactory;\n             }\n             \n-            @Override\n+//          @Override\n             public boolean isEnabled(MapperFeature f) {\n                 return mapper.isEnabled(f);\n             }\n \n-            @Override\n+//          @Override\n             public boolean isEnabled(DeserializationFeature f) {\n                 return mapper.isEnabled(f);\n             }\n             \n-            @Override\n+//          @Override\n             public boolean isEnabled(SerializationFeature f) {\n                 return mapper.isEnabled(f);\n             }\n \n-            @Override\n+//          @Override\n             public boolean isEnabled(JsonFactory.Feature f) {\n                 return mapper.isEnabled(f);\n             }\n \n-            @Override\n+//          @Override\n             public boolean isEnabled(JsonParser.Feature f) {\n                 return mapper.isEnabled(f);\n             }\n             \n-            @Override\n+//          @Override\n             public boolean isEnabled(JsonGenerator.Feature f) {\n                 return mapper.isEnabled(f);\n             }\n             \n             // // // Methods for registering handlers: deserializers\n             \n-            @Override\n+//          @Override\n             public void addDeserializers(Deserializers d) {\n                 DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalDeserializers(d);\n                 mapper._deserializationContext = mapper._deserializationContext.with(df);\n             }\n \n-            @Override\n+//          @Override\n             public void addKeyDeserializers(KeyDeserializers d) {\n                 DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalKeyDeserializers(d);\n                 mapper._deserializationContext = mapper._deserializationContext.with(df);\n             }\n \n-            @Override\n+//          @Override\n             public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) {\n                 DeserializerFactory df = mapper._deserializationContext._factory.withDeserializerModifier(modifier);\n                 mapper._deserializationContext = mapper._deserializationContext.with(df);\n             \n             // // // Methods for registering handlers: serializers\n             \n-            @Override\n+//          @Override\n             public void addSerializers(Serializers s) {\n                 mapper._serializerFactory = mapper._serializerFactory.withAdditionalSerializers(s);\n             }\n \n-            @Override\n+//          @Override\n             public void addKeySerializers(Serializers s) {\n                 mapper._serializerFactory = mapper._serializerFactory.withAdditionalKeySerializers(s);\n             }\n             \n-            @Override\n+//          @Override\n             public void addBeanSerializerModifier(BeanSerializerModifier modifier) {\n                 mapper._serializerFactory = mapper._serializerFactory.withSerializerModifier(modifier);\n             }\n \n             // // // Methods for registering handlers: other\n             \n-            @Override\n+//          @Override\n             public void addAbstractTypeResolver(AbstractTypeResolver resolver) {\n                 DeserializerFactory df = mapper._deserializationContext._factory.withAbstractTypeResolver(resolver);\n                 mapper._deserializationContext = mapper._deserializationContext.with(df);\n             }\n \n-            @Override\n+//          @Override\n             public void addTypeModifier(TypeModifier modifier) {\n                 TypeFactory f = mapper._typeFactory;\n                 f = f.withModifier(modifier);\n                 mapper.setTypeFactory(f);\n             }\n \n-            @Override\n+//          @Override\n             public void addValueInstantiators(ValueInstantiators instantiators) {\n                 DeserializerFactory df = mapper._deserializationContext._factory.withValueInstantiators(instantiators);\n                 mapper._deserializationContext = mapper._deserializationContext.with(df);\n             }\n             \n-            @Override\n+//          @Override\n             public void insertAnnotationIntrospector(AnnotationIntrospector ai) {\n                 mapper._deserializationConfig = mapper._deserializationConfig.withInsertedAnnotationIntrospector(ai);\n                 mapper._serializationConfig = mapper._serializationConfig.withInsertedAnnotationIntrospector(ai);\n             }\n             \n-            @Override\n+//          @Override\n             public void appendAnnotationIntrospector(AnnotationIntrospector ai) {\n                 mapper._deserializationConfig = mapper._deserializationConfig.withAppendedAnnotationIntrospector(ai);\n                 mapper._serializationConfig = mapper._serializationConfig.withAppendedAnnotationIntrospector(ai);\n             }\n \n-            @Override\n+//          @Override\n             public void registerSubtypes(Class<?>... subtypes) {\n                 mapper.registerSubtypes(subtypes);\n             }\n \n-            @Override\n+//          @Override\n             public void registerSubtypes(NamedType... subtypes) {\n                 mapper.registerSubtypes(subtypes);\n             }\n             \n-            @Override\n+//          @Override\n             public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) {\n                 mapper.addMixInAnnotations(target, mixinSource);\n             }\n             \n-            @Override\n+//          @Override\n             public void addDeserializationProblemHandler(DeserializationProblemHandler handler) {\n                 mapper.addHandler(handler);\n             }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n      * Method that will return version information stored in and read from jar\n      * that contains this class.\n      */\n-    @Override\n+//  @Override\n     public Version version() {\n         return DatabindVersion.instance.version();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n  * new instances are constructed for different configurations.\n  * Instances are initially constructed by {@link ObjectMapper} and can be\n  * reused in completely thread-safe manner with no explicit synchronization\n- * \n- * @author tatu\n  */\n public class ObjectWriter\n     implements Versioned\n      * Method that will return version information stored in and read from jar\n      * that contains this class.\n      */\n-    @Override\n+//  @Override\n     public Version version() {\n         return DatabindVersion.instance.version();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java\n     private SerializationFeature(boolean defaultState) {\n         _defaultState = defaultState;\n     }\n-    \n-    @Override\n+\n+//    @Override\n     public boolean enabledByDefault() { return _defaultState; }\n \n-    @Override\n+//    @Override\n     public int getMask() { return (1 << ordinal()); }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n      * Method that will check if there are \"mix-in\" classes (with mix-in\n      * annotations) for given class\n      */\n-    @Override\n+//  @Override\n     public final Class<?> findMixInClassFor(Class<?> cls) {\n         return (_mixInAnnotations == null) ? null : _mixInAnnotations.get(new ClassKey(cls));\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n      * after deserializer itself has been registered.\n      * This is needed to handle recursive and transitive dependencies.\n      */\n-    @Override\n+//  @Override\n     public void resolve(DeserializationContext ctxt)\n         throws JsonMappingException\n     {\n      * access to referring property's annotations here; and this is needed\n      * to support per-property ObjectIds.\n      */\n-    @Override\n+//  @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers.java\n      */\n     public static class Base implements Deserializers\n     {\n-        @Override\n+//      @Override\n         public JsonDeserializer<?> findArrayDeserializer(ArrayType type,\n                 DeserializationConfig config, BeanDescription beanDesc,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             return null;\n         }\n \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> findCollectionDeserializer(CollectionType type,\n                 DeserializationConfig config, BeanDescription beanDesc,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             return null;\n         }\n \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type,\n                 DeserializationConfig config, BeanDescription beanDesc,\n                 TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n             return null;\n         }\n \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> findMapDeserializer(MapType type,\n                 DeserializationConfig config, BeanDescription beanDesc,\n                 KeyDeserializer keyDeserializer,\n             return null;\n         }\n \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type,\n                 DeserializationConfig config, BeanDescription beanDesc,\n                 KeyDeserializer keyDeserializer,\n             return null;\n         }\n \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> findEnumDeserializer(Class<?> type,\n                 DeserializationConfig config, BeanDescription beanDesc)\n             throws JsonMappingException\n             return null;\n         }\n         \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType,\n                 DeserializationConfig config, BeanDescription beanDesc)\n             throws JsonMappingException\n             return null;\n         }\n \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n                 DeserializationConfig config, BeanDescription beanDesc)\n             throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n     /**********************************************************\n      */\n     \n-    @Override\n+//  @Override\n     public final String getName() { return _propName; }\n \n-    @Override\n+//  @Override\n     public JavaType getType() { return _type; }\n \n-    @Override\n     public abstract <A extends Annotation> A getAnnotation(Class<A> acls);\n \n-    @Override\n+//  @Override\n     public abstract AnnotatedMember getMember();\n \n-    @Override\n     public <A extends Annotation> A getContextAnnotation(Class<A> acls) {\n         return _contextAnnotations.get(acls);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiators.java\n      */\n     public static class Base implements ValueInstantiators\n     {\n-        @Override\n+//      @Override\n         public ValueInstantiator findValueInstantiator(DeserializationConfig config,\n                 BeanDescription beanDesc, ValueInstantiator defaultInstantiator) {\n             return defaultInstantiator;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n     /**\n      * Accessor for traversing over all contained properties.\n      */\n-    @Override\n+//    @Override\n     public Iterator<SettableBeanProperty> iterator() {\n         return new IteratorImpl(_buckets);\n     }\n             _nextBucketIndex = i;\n         }\n \n-        @Override\n+//        @Override\n         public boolean hasNext() {\n             return _currentBucket != null;\n         }\n \n-        @Override\n+//        @Override\n         public SettableBeanProperty next()\n         {\n             Bucket curr = _currentBucket;\n             return curr.value;\n         }\n \n-        @Override\n+//       @Override\n         public void remove() {\n             throw new UnsupportedOperationException();\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java\n      * when it is known for which property deserializer is needed\n      * for.\n      */\n-    @Override\n+//    @Override\n     public CollectionDeserializer createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java\n \n         protected abstract DateBasedDeserializer<T> withDateFormat(DateFormat df, String formatStr);\n         \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n            throws JsonMappingException\n         {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumMapDeserializer.java\n      * Method called to finalize setup of this deserializer,\n      * when it is known for which property deserializer is needed for.\n      */\n-    @Override\n+//  @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer.java\n     @Override\n     public boolean isCachable() { return true; }\n     \n-    @Override\n+//    @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n             return new AtomicReference<Object>(_valueDeserializer.deserialize(jp, ctxt));\n         }\n         \n-        @Override\n+//        @Override\n         public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property) throws JsonMappingException\n         {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer.java\n     /**********************************************************\n      */\n \n-\n-    @Override\n+//    @Override\n     public void resolve(DeserializationContext ctxt) throws JsonMappingException\n     {\n         // May need to resolve types for delegate- and/or property-based creators:\n      * Method called to finalize setup of this deserializer,\n      * when it is known for which property deserializer is needed for.\n      */\n-    @Override\n+//    @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer.java\n                 (JsonDeserializer<Object>) elemDeser, elemTypeDeser);\n     }\n \n-    @Override\n+//    @Override\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java\n     /**********************************************************\n      */\n \n-    @Override\n+//    @Override\n     @SuppressWarnings(\"unchecked\")\n     public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n             BeanProperty property) throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLDeserializers.java\n      * Method called by {@link com.fasterxml.jackson.databind.deser.BasicDeserializerFactory}\n      * to register deserializers this class provides.\n      */\n-    @Override\n+//    @Override\n     public Collection<StdDeserializer<?>> provide()\n     {\n         return Arrays.asList(new StdDeserializer<?>[] {\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n         _serializers.put(QName.class, tss);\n     }\n     \n-    @Override\n+//    @Override\n     public Collection<Map.Entry<Class<?>,JsonSerializer<?>>> provide() {\n         return _serializers.entrySet();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethodMap.java\n     /**********************************************************\n      */\n \n-    @Override\n+//  @Override\n     public Iterator<AnnotatedMethod> iterator()\n     {\n         if (_methods != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap.java\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    @Override\n+//  @Override\n     public <A extends Annotation> A get(Class<A> cls)\n     {\n         if (_annotations == null) {\n         return new AnnotationMap(annotations);\n     }\n     \n-    @Override\n+//  @Override\n     public int size() {\n         return (_annotations == null) ? 0 : _annotations.size();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n     /**\n      * Accessor for name used for external representation (in JSON).\n      */\n-    @Override // from Named\n+//  @Override // from Named\n     public abstract String getName();\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n     /**********************************************************\n      */\n \n-    @Override\n+//    @Override\n     public int compareTo(POJOPropertyBuilder other)\n     {\n         // first, if one has ctor params, that should come first:\n     @Override\n     public Class<?>[] findViews() {\n         return fromMemberAnnotation(new WithMember<Class<?>[]>() {\n-            @Override public Class<?>[] withMember(AnnotatedMember member) {\n+            public Class<?>[] withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.findViews(member);\n             }\n         });\n     @Override\n     public AnnotationIntrospector.ReferenceProperty findReferenceType() {\n         return fromMemberAnnotation(new WithMember<AnnotationIntrospector.ReferenceProperty>() {\n-            @Override public AnnotationIntrospector.ReferenceProperty withMember(AnnotatedMember member) {\n+            public AnnotationIntrospector.ReferenceProperty withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.findReferenceType(member);\n             }\n         });\n     @Override\n     public boolean isTypeId() {\n         Boolean b = fromMemberAnnotation(new WithMember<Boolean>() {\n-            @Override public Boolean withMember(AnnotatedMember member) {\n+            public Boolean withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.isTypeId(member);\n             }\n         });\n     @Override\n     public boolean isRequired() {\n         Boolean b = fromMemberAnnotation(new WithMember<Boolean>() {\n-            @Override public Boolean withMember(AnnotatedMember member) {\n+            public Boolean withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.hasRequiredMarker(member);\n             }\n         });\n     @Override\n     public ObjectIdInfo findObjectIdInfo() {\n         return fromMemberAnnotation(new WithMember<ObjectIdInfo>() {\n-            @Override public ObjectIdInfo withMember(AnnotatedMember member) {\n+            public ObjectIdInfo withMember(AnnotatedMember member) {\n                 return _annotationIntrospector.findObjectIdInfo(member);\n             }\n         });\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/VisibilityChecker.java\n \t/********************************************************\n \t */\n \n-        @Override\n+//      @Override\n \tpublic Std with(JsonAutoDetect ann)\n \t{\n             Std curr = this;\n \t    return curr;\n \t}\n \n-        @Override\n+//      @Override\n \tpublic Std with(Visibility v)\n \t{\n \t    if (v == Visibility.DEFAULT) {\n \t    return new Std(v);\n \t}\n \n-        @Override\n+//      @Override\n \tpublic Std withVisibility(PropertyAccessor method, Visibility v)\n \t{\n \t    switch (method) {\n             return this;\n \t}\n \t\n-        @Override\n+//      @Override\n \tpublic Std withGetterVisibility(Visibility v) {\n \t    if (v == Visibility.DEFAULT)  v = DEFAULT._getterMinLevel;\n             if (_getterMinLevel == v) return this;\n \t    return new Std(v, _isGetterMinLevel, _setterMinLevel, _creatorMinLevel, _fieldMinLevel);\n \t}\n \n-        @Override\n+//      @Override\n         public Std withIsGetterVisibility(Visibility v) {\n             if (v == Visibility.DEFAULT)  v = DEFAULT._isGetterMinLevel;\n             if (_isGetterMinLevel == v) return this;\n             return new Std(_getterMinLevel, v, _setterMinLevel, _creatorMinLevel, _fieldMinLevel);\n         }\n \t\t\n-        @Override\n+//      @Override\n \tpublic Std withSetterVisibility(Visibility v) {\n             if (v == Visibility.DEFAULT)  v = DEFAULT._setterMinLevel;\n             if (_setterMinLevel == v) return this;\n             return new Std(_getterMinLevel, _isGetterMinLevel, v, _creatorMinLevel, _fieldMinLevel);\n \t}\n \n-\t@Override\n+//      @Override\n \tpublic Std withCreatorVisibility(Visibility v) {\n             if (v == Visibility.DEFAULT)  v = DEFAULT._creatorMinLevel;\n             if (_creatorMinLevel == v) return this;\n \t    return new Std(_getterMinLevel, _isGetterMinLevel, _setterMinLevel, v, _fieldMinLevel);\n \t}\n \n-        @Override\n+//      @Override\n \tpublic Std withFieldVisibility(Visibility v) {\n             if (v == Visibility.DEFAULT)  v = DEFAULT._fieldMinLevel;\n             if (_fieldMinLevel == v) return this;\n         /********************************************************\n          */\n \n-\t@Override\n+//\t@Override\n \tpublic boolean isCreatorVisible(Member m) {\n \t    return _creatorMinLevel.isVisible(m);\n     \t}\n     \n-        @Override\n+//      @Override\n     \tpublic boolean isCreatorVisible(AnnotatedMember m) {\n     \t    return isCreatorVisible(m.getMember());\n     \t}\n     \n-        @Override\n+//      @Override\n     \tpublic boolean isFieldVisible(Field f) {\n     \t    return _fieldMinLevel.isVisible(f);\n     \t}\n     \n-        @Override\n+//      @Override\n     \tpublic boolean isFieldVisible(AnnotatedField f) {\n     \t    return isFieldVisible(f.getAnnotated());\n     \t}\n     \n-        @Override\n+//      @Override\n     \tpublic boolean isGetterVisible(Method m) {\n     \t    return _getterMinLevel.isVisible(m);\n     \t}    \n \n-        @Override\n+//      @Override\n         public boolean isGetterVisible(AnnotatedMethod m) {\n     \t    return isGetterVisible(m.getAnnotated());\n     \t}\n \n-        @Override\n+//      @Override\n         public boolean isIsGetterVisible(Method m) {\n             return _isGetterMinLevel.isVisible(m);\n         }    \n \n-        @Override\n+//      @Override\n         public boolean isIsGetterVisible(AnnotatedMethod m) {\n             return isIsGetterVisible(m.getAnnotated());\n         }\n \n-        @Override\n+//      @Override\n         public boolean isSetterVisible(Method m) {\n             return _setterMinLevel.isVisible(m);\n         }\n     \n-        @Override\n+//      @Override\n         public boolean isSetterVisible(AnnotatedMethod m) {\n             return isSetterVisible(m.getAnnotated());\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java\n         super(baseType, typeFactory);\n     }\n \n-    @Override\n+//  @Override\n     public JsonTypeInfo.Id getMechanism() { return JsonTypeInfo.Id.CLASS; }\n \n     public void registerSubtype(Class<?> type, String name) {\n         // not used with class name - based resolvers\n     }\n     \n-    @Override\n-    public String idFromValue(Object value)\n-    {\n+//  @Override\n+    public String idFromValue(Object value) {\n         return _idFrom(value, value.getClass());\n     }\n \n-    @Override\n-    public String idFromValueAndType(Object value, Class<?> type)\n-    {\n+//  @Override\n+    public String idFromValueAndType(Object value, Class<?> type) {\n         return _idFrom(value, type);\n     }\n \n-    @Override\n+//  @Override\n     public JavaType typeFromId(String id)\n     {\n         /* 30-Jan-2010, tatu: Most ids are basic class names; so let's first\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java\n         return new StdTypeResolverBuilder().init(JsonTypeInfo.Id.NONE, null);\n     }\n     \n-    @Override\n+//  @Override\n     public StdTypeResolverBuilder init(JsonTypeInfo.Id idType, TypeIdResolver idRes)\n     {\n         // sanity checks\n         return this;\n     }\n     \n-    @Override\n+//  @Override\n     public TypeSerializer buildTypeSerializer(SerializationConfig config,\n             JavaType baseType, Collection<NamedType> subtypes)\n     {\n         throw new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \"+_includeAs);\n     }\n     \n-    @Override\n+//  @Override\n     public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,\n             JavaType baseType, Collection<NamedType> subtypes)\n     {\n     /**********************************************************\n      */\n \n-    @Override\n+//  @Override\n     public StdTypeResolverBuilder inclusion(JsonTypeInfo.As includeAs) {\n         if (includeAs == null) {\n             throw new IllegalArgumentException(\"includeAs can not be null\");\n      * Method for constructing an instance with specified type property name\n      * (property name to use for type id when using \"as-property\" inclusion).\n      */\n-    @Override\n+//  @Override\n     public StdTypeResolverBuilder typeProperty(String typeIdPropName)\n     {\n         // ok to have null/empty; will restore to use defaults\n         return this;\n     }\n \n-    @Override\n+//  @Override\n     public StdTypeResolverBuilder defaultImpl(Class<?> defaultImpl)\n     {\n         _defaultImpl = defaultImpl;\n         return this;\n     }\n \n-    @Override\n+//  @Override\n     public StdTypeResolverBuilder typeIdVisibility(boolean isVisible) {\n         _typeIdVisible = isVisible;\n         return this;\n \n     public String getTypeProperty() { return _typeProperty; }\n \n-    @Override\n+//  @Override\n     public Class<?> getDefaultImpl() {\n         return _defaultImpl;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java\n         _typeFactory = typeFactory;\n     }\n \n-    @Override\n+//  @Override\n     public void init(JavaType bt) {\n         // Standard type id resolvers do not need this: only useful for custom ones.\n     }\n \n-    @Override\n+//  @Override\n     public String idFromBaseType()\n     {\n         /* By default we will just defer to regular handling, handing out the\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeNameIdResolver.java\n         return new TypeNameIdResolver(config, baseType, typeToId, idToType);\n     }\n \n-    @Override\n+//  @Override\n     public JsonTypeInfo.Id getMechanism() { return JsonTypeInfo.Id.NAME; }\n \n-    @Override\n+//  @Override\n     public String idFromValue(Object value)\n     {\n         Class<?> cls = value.getClass();\n         return name;\n     }\n \n-    @Override\n+//  @Override\n     public String idFromValueAndType(Object value, Class<?> type)\n     {\n         return idFromValue(value);\n     }\n     \n-    @Override\n+//  @Override\n     public JavaType typeFromId(String id)\n         throws IllegalArgumentException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers.java\n     /**********************************************************\n      */\n     \n-    @Override\n+//  @Override\n     public JsonDeserializer<?> findArrayDeserializer(ArrayType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n \n-    @Override\n+//  @Override\n     public JsonDeserializer<?> findBeanDeserializer(JavaType type,\n             DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n \n-    @Override\n+//  @Override\n     public JsonDeserializer<?> findCollectionDeserializer(CollectionType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer,\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n \n-    @Override\n+//  @Override\n     public JsonDeserializer<?> findCollectionLikeDeserializer(CollectionLikeType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n             TypeDeserializer elementTypeDeserializer,\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n     \n-    @Override\n+//  @Override\n     public JsonDeserializer<?> findEnumDeserializer(Class<?> type,\n             DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type));\n     }\n \n-    @Override\n+//  @Override\n     public JsonDeserializer<?> findMapDeserializer(MapType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n             KeyDeserializer keyDeserializer,\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n \n-    @Override\n+//  @Override\n     public JsonDeserializer<?> findMapLikeDeserializer(MapLikeType type,\n             DeserializationConfig config, BeanDescription beanDesc,\n             KeyDeserializer keyDeserializer,\n         return (_classMappings == null) ? null : _classMappings.get(new ClassKey(type.getRawClass()));\n     }\n     \n-    @Override\n+//  @Override\n     public JsonDeserializer<?> findTreeNodeDeserializer(Class<? extends JsonNode> nodeType,\n             DeserializationConfig config, BeanDescription beanDesc)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/module/SimpleKeyDeserializers.java\n     /**********************************************************\n      */\n \n-    @Override\n+//  @Override\n     public KeyDeserializer findKeyDeserializer(JavaType type,\n             DeserializationConfig config, BeanDescription beanDesc)\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/BaseJsonNode.java\n     /**\n      * Method called to serialize node instances using given generator.\n      */\n-    @Override\n+//  @Override\n     public abstract void serialize(JsonGenerator jgen, SerializerProvider provider)\n         throws IOException, JsonProcessingException;\n \n      * Type information is needed, even if JsonNode instances are \"plain\" JSON,\n      * since they may be mixed with other types.\n      */\n-    @Override\n+//  @Override\n     public abstract void serializeWithType(JsonGenerator jgen, SerializerProvider provider,\n             TypeSerializer typeSer)\n         throws IOException, JsonProcessingException;\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n \n         public static NoNodesIterator instance() { return instance; }\n \n-        @Override\n+//      @Override\n         public boolean hasNext() { return false; }\n-        @Override\n+//      @Override\n         public JsonNode next() { throw new NoSuchElementException(); }\n \n-        @Override\n+//      @Override\n         public void remove() {\n             // could as well throw IllegalOperationException?\n             throw new IllegalStateException();\n \n         public static NoStringsIterator instance() { return instance; }\n \n-        @Override\n+//      @Override\n         public boolean hasNext() { return false; }\n-        @Override\n+//      @Override\n         public String next() { throw new NoSuchElementException(); }\n \n-        @Override\n+//      @Override\n         public void remove() {\n             // could as well throw IllegalOperationException?\n             throw new IllegalStateException();\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n \n         private NoFieldsIterator() { }\n \n-        @Override\n+//      @Override\n         public boolean hasNext() { return false; }\n-        @Override\n+//      @Override\n         public Map.Entry<String,JsonNode> next() { throw new NoSuchElementException(); }\n \n-        @Override\n+//      @Override\n         public void remove() { // or IllegalOperationException?\n             throw new IllegalStateException();\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n     /**********************************************************\n      */\n     \n-    @Override\n+//    @Override\n     public String getName() {\n         return _name.getValue();\n     }\n \n-    @Override\n+//    @Override\n     public JavaType getType() {\n         return _declaredType;\n     }\n \n-    @Override\n+//  @Override\n     public <A extends Annotation> A getAnnotation(Class<A> acls) {\n         return _member.getAnnotation(acls);\n     }\n \n-    @Override\n+//  @Override\n     public <A extends Annotation> A getContextAnnotation(Class<A> acls) {\n         return _contextAnnotations.get(acls);\n     }\n-    \n-    @Override\n+\n+//    @Override\n     public AnnotatedMember getMember() {\n         return _member;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/Serializers.java\n      */\n     public static class Base implements Serializers\n     {\n-        @Override\n+//      @Override\n         public JsonSerializer<?> findSerializer(SerializationConfig config,\n                 JavaType type, BeanDescription beanDesc)\n         {\n             return null;\n         }\n         \n-        @Override\n+//      @Override\n         public JsonSerializer<?> findArraySerializer(SerializationConfig config,\n                 ArrayType type, BeanDescription beanDesc,\n                 TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n             return null;\n         }\n \n-        @Override\n+//      @Override\n         public JsonSerializer<?> findCollectionSerializer(SerializationConfig config,\n                 CollectionType type, BeanDescription beanDesc,\n                 TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n             return null;\n         }\n \n-        @Override\n+//      @Override\n         public JsonSerializer<?> findCollectionLikeSerializer(SerializationConfig config,\n                 CollectionLikeType type, BeanDescription beanDesc,\n                 TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n             return null;\n         }\n             \n-        @Override\n+//      @Override\n         public JsonSerializer<?> findMapSerializer(SerializationConfig config,\n                 MapType type, BeanDescription beanDesc,\n                 JsonSerializer<Object> keySerializer,\n             return null;\n         }\n \n-        @Override\n+//      @Override\n         public JsonSerializer<?> findMapLikeSerializer(SerializationConfig config,\n                 MapLikeType type, BeanDescription beanDesc,\n                 JsonSerializer<Object> keySerializer,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/IndexedStringListSerializer.java\n     /**********************************************************\n      */\n     \n-    @Override\n+//  @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter.java\n             _propertiesToInclude = properties;\n         }\n         \n-        @Override\n+//      @Override\n         public void serializeAsField(Object bean, JsonGenerator jgen,\n                 SerializerProvider provider, BeanPropertyWriter writer)\n             throws Exception\n             _propertiesToExclude = properties;\n         }\n         \n-        @Override\n+//      @Override\n         public void serializeAsField(Object bean, JsonGenerator jgen,\n                 SerializerProvider provider, BeanPropertyWriter writer)\n             throws Exception\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n     /**********************************************************\n      */\n     \n-    @Override\n+//  @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringCollectionSerializer.java\n     /**********************************************************\n      */\n     \n-    @Override\n+//  @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n     /**********************************************************\n      */\n     \n-    @Override\n+//  @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n      * We need to implement {@link ResolvableSerializer} to be able to\n      * properly handle cyclic type references.\n      */\n-    @Override\n+//  @Override\n     public void resolve(SerializerProvider provider)\n         throws JsonMappingException\n     {\n         }\n     }\n \n-    @Override\n+//  @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n \n     public abstract DateTimeSerializerBase<T> withFormat(boolean timestamp, DateFormat customFormat);\n \n-    @Override\n+//  @Override\n     public JsonSerializer<?> createContextual(SerializerProvider prov,\n             BeanProperty property) throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n         return new EnumMapSerializer(this, prop, ser);\n     }\n     \n-    @Override\n+//  @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n      * We can try to find the actual serializer for value, if we can\n      * statically figure out what the result type must be.\n      */\n-    @Override\n+//  @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n     /**********************************************************\n      */\n \n-    @Override\n+//  @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n     /**********************************************************\n      */\n \n-    @Override\n+//  @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n      * Method called by {@link BasicSerializerFactory} to access\n      * all serializers this class provides.\n      */\n-    @Override\n+//  @Override\n     public Collection<Map.Entry<Class<?>, Object>> provide()\n     {\n         HashMap<Class<?>,Object> sers = new HashMap<Class<?>,Object>();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n      * Default implementation simply claims type is \"string\"; usually\n      * overriden by custom serializers.\n      */\n-    @Override\n+//  @Override\n     public JsonNode getSchema(SerializerProvider provider, Type typeHint)\n         throws JsonMappingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/type/ClassKey.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/ClassKey.java\n     /**********************************************************\n      */\n \n-    @Override\n+//  @Override\n     public int compareTo(ClassKey other)\n     {\n         // Just need to sort by name, ok to collide (unless used in TreeMap/Set!)\n--- a/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/TypeBase.java\n     /**********************************************************\n      */\n \n-    @Override\n+//  @Override\n     public void serializeWithType(JsonGenerator jgen, SerializerProvider provider,\n             TypeSerializer typeSer)\n         throws IOException, JsonProcessingException\n         typeSer.writeTypeSuffixForScalar(this, jgen);\n     }\n \n-    @Override\n+//  @Override\n     public void serialize(JsonGenerator jgen, SerializerProvider provider)\n             throws IOException, JsonProcessingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/ArrayBuilders.java\n             _index = 0;\n         }\n         \n-        @Override public boolean hasNext() {\n+//      @Override\n+        public boolean hasNext() {\n             return _index < _array.length;\n         }\n \n-        @Override\n+//      @Override\n         public T next()\n         {\n             if (_index >= _array.length) {\n             return _array[_index++];\n         }\n \n-        @Override public void remove() {\n+//      @Override\n+        public void remove() {\n             throw new UnsupportedOperationException();\n         }\n \n-        @Override\n+//      @Override\n         public Iterator<T> iterator() {\n             return this;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/JSONPObject.java\n     /**********************************************************\n      */\n     \n-    @Override\n+//  @Override\n     public void serializeWithType(JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)\n             throws IOException, JsonProcessingException\n     {\n         serialize(jgen, provider);\n     }\n \n-    @Override\n+//  @Override\n     public void serialize(JsonGenerator jgen, SerializerProvider provider)\n             throws IOException, JsonProcessingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/JSONWrappedObject.java\n     /**************************************************************\n      */\n     \n-    @Override\n+//  @Override\n     public void serializeWithType(JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)\n             throws IOException, JsonProcessingException\n     {\n         serialize(jgen, provider);\n     }\n \n-    @Override\n+//  @Override\n     public void serialize(JsonGenerator jgen, SerializerProvider provider)\n             throws IOException, JsonProcessingException\n     {\n--- a/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n      */\n \n     static class MySchema implements FormatSchema {\n-        @Override\n+//      @Override\n         public String getSchemaType() { return \"test\"; }\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation.java\n             _id = idForBean;\n         }\n         \n-        @Override\n+//      @Override\n         public Id getMechanism() {\n             return Id.CUSTOM;\n         }\n \n-        @Override\n+//      @Override\n         public String idFromValue(Object value)\n         {\n             if (value.getClass() == TypeIdBean.class) {\n             return \"unknown\";\n         }\n \n-        @Override\n+//      @Override\n         public String idFromValueAndType(Object value, Class<?> type) {\n             return idFromValue(value);\n         }\n         \n-        @Override\n+//      @Override\n         public void init(JavaType baseType) {\n             if (initTypes != null) {\n                 initTypes.add(baseType);\n             }\n         }\n \n-        @Override\n+//      @Override\n         public JavaType typeFromId(String id)\n         {\n             if (id.equals(_id)) {\n             return null;\n         }\n \n-        @Override\n+//      @Override\n         public String idFromBaseType() {\n             return \"xxx\";\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestObjectMapperBeanDeserializer.java\n         public CtorValueBean(int value) { _desc = String.valueOf(value); }\n         public CtorValueBean(long value) { _desc = String.valueOf(value); }\n \n-        @Override\n+//      @Override\n         public void serialize(JsonGenerator jgen, SerializerProvider provider)\n             throws IOException, JsonGenerationException\n         {\n             CtorValueBean other = (CtorValueBean) o;\n             return _desc.equals(other._desc);\n         }\n-        @Override\n+//      @Override\n         public void serializeWithType(JsonGenerator jgen,\n                 SerializerProvider provider, TypeSerializer typeSer)\n                 throws IOException, JsonProcessingException {\n-            // TODO Auto-generated method stub\n-            \n         }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualDeserialization.java\n             return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n         }\n \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n             return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n         }\n     \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualKeyTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualKeyTypes.java\n             jgen.writeFieldName(value);\n         }\n     \n-        @Override\n+//      @Override\n         public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)\n             throws JsonMappingException\n         {\n             return _prefix + \":\" + key;\n         }\n \n-        @Override\n+//      @Override\n         public KeyDeserializer createContextual(DeserializationContext ctxt,\n                 BeanProperty property) throws JsonMappingException\n         {\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualSerialization.java\n             jgen.writeString(_prefix + value);\n         }\n \n-        @Override\n+//      @Override\n         public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)\n                 throws JsonMappingException\n         {\n             jgen.writeString(\"contextual=\"+isContextual+\",resolved=\"+isResolved);\n         }\n \n-        @Override\n+//      @Override\n         public JsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property)\n                 throws JsonMappingException\n         {\n             return new ContextualAndResolvable(isResolved, isContextual+1);\n         }\n \n-        @Override\n+//      @Override\n         public void resolve(SerializerProvider provider) {\n             ++isResolved;\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualWithAnnDeserializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/contextual/TestContextualWithAnnDeserializer.java\n             return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n         }\n \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n             return new StringValue(\"\"+_fieldName+\"=\"+jp.getText());\n         }\n     \n-        @Override\n+//      @Override\n         public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n                 BeanProperty property)\n             throws JsonMappingException\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java\n             _desc = d;\n         }\n \n-        @Override\n+//      @Override\n         public void serialize(JsonGenerator jgen, SerializerProvider provider)\n             throws IOException, JsonGenerationException\n         {\n             return _desc.equals(other._desc);\n         }\n \n-        @Override\n+//      @Override\n         public void serializeWithType(JsonGenerator jgen,\n                 SerializerProvider provider, TypeSerializer typeSer)\n                 throws IOException, JsonProcessingException {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestConcurrency.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestConcurrency.java\n             return b;\n         }\n \n-        @Override\n+//      @Override\n         public void resolve(DeserializationContext ctxt) throws JsonMappingException\n         {\n             try {\n         for (int i = 0; i < 5; ++i) {\n             final ObjectMapper mapper = new ObjectMapper();\n             Runnable r = new Runnable() {\n-                @Override\n+//              @Override\n                 public void run() {\n                     try {\n                         /*Bean b =*/ mapper.readValue(JSON, Bean.class);\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericMapDeser.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestGenericMapDeser.java\n \n         public StringMap() { }\n \n-        @Override\n+//      @Override\n         public Map<String,Long> getEntries() { return entries; }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestValueAnnotations.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestValueAnnotations.java\n \n         public RootStringImpl(String x) { _contents = x; }\n \n-        @Override\n+//      @Override\n         public String contents() { return _contents; }\n         public String contents2() { return _contents; }\n     }\n \n         public RootInterfaceImpl() { }\n \n-        @Override\n+//      @Override\n         public String getA() { return a; }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/interop/TestCglibUsage.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestCglibUsage.java\n         Enhancer enh = new Enhancer();\n         enh.setInterfaces(new Class[] { BeanInterface.class });\n         enh.setCallback(new MethodInterceptor() {\n-            @Override\n-                public Object intercept(Object obj, Method method,\n+//          @Override\n+            public Object intercept(Object obj, Method method,\n                                         Object[] args, MethodProxy proxy)\n                     throws Throwable\n                 {\n--- a/src/test/java/com/fasterxml/jackson/databind/interop/TestHibernate.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/interop/TestHibernate.java\n         Enhancer enh = new Enhancer();\n         enh.setInterfaces(new Class[] { BeanInterfaceHib.class });\n         enh.setCallback(new MethodInterceptor() {\n-            @Override\n+//          @Override\n             public Object intercept(Object obj, Method method,\n                     Object[] args, MethodProxy proxy)\n                             throws Throwable\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractTypeNames.java\n /**\n  * Unit tests for checking how combination of interfaces, implementation\n  * classes are handled, with respect to type names.\n- * \n- * @since 1.8\n  */\n public class TestAbstractTypeNames  extends BaseMapTest\n {\n             _employer = employer;\n         }\n \n-        @Override\n+//      @Override\n         public String getEmployer() {\n             return _employer;\n         }\n             _friends = friends;\n         }\n \n-        @Override public String getName() {\n+        public String getName() {\n             return _name;\n         }\n \n-        @Override public List<User> getFriends() {\n+        public List<User> getFriends() {\n             return _friends;\n         }\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver.java\n \n         public CustomResolver() { }\n         \n-        @Override\n+//      @Override\n         public Id getMechanism() {\n             return Id.CUSTOM;\n         }\n \n-        @Override\n+//      @Override\n         public String idFromValue(Object value)\n         {\n             if (value.getClass() == CustomBean.class) {\n             return \"unknown\";\n         }\n \n-        @Override\n+//      @Override\n         public String idFromValueAndType(Object value, Class<?> type) {\n             return idFromValue(value);\n         }\n         \n-        @Override\n+//      @Override\n         public void init(JavaType baseType) {\n             if (initTypes != null) {\n                 initTypes.add(baseType);\n             }\n         }\n \n-        @Override\n+//      @Override\n         public JavaType typeFromId(String id)\n         {\n             if (\"*\".equals(id)) {\n             return null;\n         }\n \n-        @Override\n+//      @Override\n         public String idFromBaseType() {\n             return \"xxx\";\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java\n             baseProperty = bp;\n         }\n \n-        @Override\n+//      @Override\n         @JsonProperty public String getBaseProperty() {\n             return baseProperty;\n         }\n             baseProperty = bp;\n         }\n \n-        @Override\n+//      @Override\n         @JsonProperty public String getBaseProperty() {\n             return baseProperty;\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics.java\n             beanSerializer.serializeWithType( value, jgen, provider, typeSer );\n         }\n \n-        @Override\n+//      @Override\n         public void resolve(SerializerProvider provider) throws JsonMappingException\n         {\n             if (beanSerializer instanceof ResolvableSerializer) {\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestAbstractTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestAbstractTypes.java\n         \n         public MyString(String s) { value = s; }\n \n-        @Override\n+//      @Override\n         public char charAt(int index) {\n             return value.charAt(index);\n         }\n \n-        @Override\n+//      @Override\n         public int length() {\n             return value.length();\n         }\n \n-        @Override\n+//      @Override\n         public CharSequence subSequence(int arg0, int arg1) { return this; }\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n     }\n     \n     static class Impl1 implements Base {\n-        @Override\n+//      @Override\n         public String getText() { return \"1\"; }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers.java\n             value = v;\n         }\n \n-        @Override\n+//      @Override\n         public String getKey() { return key; }\n-        @Override\n+//      @Override\n         public Integer getValue() { return value; }\n     }\n \n             value = v;\n         }\n \n-        @Override\n+//      @Override\n         public Integer getValue() { return value; }\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotationInheritance.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestAnnotationInheritance.java\n     {\n         // Both should be recognized as getters here\n \n-        @Override\n+//      @Override\n         public int width() { return 1; }\n-        @Override\n+//      @Override\n         public int length() { return 2; }\n \n         public int getFoobar() { return 5; }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n             }\n         }\n \n-        @Override\n+//      @Override\n         public Iterator<Integer> iterator() {\n             return _ints.iterator();\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n \n         private SerializableEnum() { }\n         \n-        @Override\n+//      @Override\n         public void serializeWithType(JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer)\n                 throws IOException, JsonProcessingException\n         {\n             serialize(jgen, provider);\n         }\n \n-        @Override\n+//      @Override\n         public void serialize(JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException\n         {\n             jgen.writeString(\"foo\");\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java\n \n         protected boolean wasClosed = false;\n         \n-        @Override\n+//      @Override\n         public void close() throws IOException {\n             wasClosed = true;\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java\n     static class ValueClass\n         implements ValueInterface\n     {\n-        @Override\n+//      @Override\n         public int getX() { return 3; }\n         public int getY() { return 5; }\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestRootType.java\n /**\n  * Unit tests for verifying functioning of [JACKSON-195], ability to\n  * force specific root type for serialization (super type of value)\n- * \n- * @author tatu\n  */\n public class TestRootType\n     extends BaseMapTest\n     {\n         public String a = \"a\";\n \n-        @Override\n         public int getB() { return 3; }\n     }\n ", "timestamp": 1334674661, "metainfo": ""}