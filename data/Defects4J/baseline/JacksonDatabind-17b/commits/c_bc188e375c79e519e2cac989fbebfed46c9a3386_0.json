{"sha": "bc188e375c79e519e2cac989fbebfed46c9a3386", "log": "Merge pull request #394 from pgelinas/custom-object-id-serialization  Support for custom object id serialization by subclasses.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n-\n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.AnnotatedMember;\n             w.serializer.serialize(id, jgen, provider);\n             return;\n         }\n+\n+        _serializeObjectId(bean, jgen, provider, typeSer, objectId);\n+    }\n+\n+    protected  void _serializeObjectId(Object bean,\n+            JsonGenerator jgen,SerializerProvider provider,\n+            TypeSerializer typeSer, WritableObjectId objectId)\n+        throws IOException, JsonProcessingException, JsonGenerationException {\n+        final ObjectIdWriter w = _objectIdWriter;\n         String typeStr = (_typeId == null) ? null :_customTypeId(bean);\n         if (typeStr == null) {\n             typeSer.writeTypePrefixForObject(bean, jgen);\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n     public Collection<Object> getKnownPropertyNames() { return _delegatee.getKnownPropertyNames(); }\n     \n     @Override\n-    public boolean isCachable() { return false; }\n+    public boolean isCachable() { return _delegatee.isCachable(); }\n \n     @Override\n     public ObjectIdReader getObjectIdReader() { return _delegatee.getObjectIdReader(); }", "timestamp": 1390936919, "metainfo": ""}