{"sha": "7c9023453e8801f2d4a0aa44db9ccbf3347afb6a", "log": "Add unit test for [JACKSON-778]", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestGenericSubTyping.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class TestGenericSubTyping extends BaseMapTest\n+{\n+    // Types for [JACKSON-778]\n+    \n+    static class Document {}\n+    static class Row {}\n+    static class RowWithDoc<D extends Document> extends Row { @JsonProperty(\"d\") D d; }\n+    static class ResultSet<R extends Row> { @JsonProperty(\"rows\") List<R> rows; }\n+    static class ResultSetWithDoc<D extends Document> extends ResultSet<RowWithDoc<D>> {}\n+\n+    static class MyDoc extends Document {}\n+\n+    /*\n+    /*******************************************************\n+    /* Unit tests\n+    /*******************************************************\n+     */\n+    \n+    public void testIssue778() throws Exception\n+    {\n+        String json = \"{\\\"rows\\\":[{\\\"d\\\":{}}]}\";\n+    \n+        ResultSetWithDoc<MyDoc> rs = new ObjectMapper().readValue(json, new TypeReference<ResultSetWithDoc<MyDoc>>() {});\n+    \n+        Document d = rs.rows.iterator().next().d;\n+    \n+        assertEquals(MyDoc.class, d.getClass()); //expected MyDoc but was Document\n+    }    \n+}", "timestamp": 1328999663, "metainfo": ""}