{"sha": "3858853f649949c8eba9302d1c42d63d017b260f", "log": "Add handlings for classes which are available in `Thread.currentThread().getContextClassLoader()`", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n         List<AnnotatedMethod> creatorMethods = null;\n         \n         // Then static methods which are potential factory methods\n-        for (Method m : _class.getDeclaredMethods()) {\n+\n+        Method[] classMethods;\n+        try{\n+            classMethods = _class.getDeclaredMethods();\n+        }catch(final NoClassDefFoundError ex){\n+            // One of the methods had a class that was not found in the cls.getClassLoader.\n+            // Maybe the developer was nice and has a different class loader for this context.\n+            final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+            if(loader == null){\n+                // Nope... this is going to end poorly\n+                throw ex;\n+            }\n+            final Class<?> contextClass;\n+            try {\n+                contextClass = loader.loadClass(_class.getName());\n+            }\n+            catch (ClassNotFoundException e) {\n+                //ex.addSuppressed(e); Not until 1.7\n+                throw ex;\n+            }\n+            classMethods = contextClass.getDeclaredMethods(); // Cross fingers\n+        }\n+\n+        for (Method m : classMethods) {\n             if (!Modifier.isStatic(m.getModifiers())) {\n                 continue;\n             }\n         if (cls == null) { // just so caller need not check when passing super-class\n             return;\n         }\n-\n+        Method[] classMethods;\n+        try{\n+            classMethods = cls.getDeclaredMethods();\n+        }catch(final NoClassDefFoundError ex){\n+            // One of the methods had a class that was not found in the cls.getClassLoader.\n+            // Maybe the developer was nice and has a different class loader for this context.\n+            final ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+            if (loader == null) {\n+                // Nope... this is going to end poorly\n+                throw ex;\n+            }\n+            final Class<?> contextClass;\n+            try {\n+                contextClass = loader.loadClass(cls.getName());\n+            }\n+            catch (ClassNotFoundException e) {\n+                //ex.addSuppressed(e); Not until 1.7\n+                throw ex;\n+            }\n+            classMethods = contextClass.getDeclaredMethods(); // Cross fingers\n+        }\n         // then methods from the class itself\n-        for (Method m : cls.getDeclaredMethods()) {\n+        for (Method m : classMethods) {\n             if (!_isIncludableMemberMethod(m)) {\n                 continue;\n             }", "timestamp": 1431030940, "metainfo": ""}