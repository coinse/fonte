{"sha": "aba736db4dcbdf6e9bc52b68dc1de24934801994", "log": "working on #433", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n                 if (type == byte[].class) { // most common special case\n                     return nodeFactory.binaryNode((byte[]) ob);\n                 }\n+                if (JsonNode.class.isAssignableFrom(type)) {\n+                    // [Issue#433]: but could also be a JsonNode hiding in there!\n+                    return (JsonNode) ob;\n+                }\n                 // any other special handling needed?\n                 return nodeFactory.pojoNode(ob);\n             }\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java\n import org.junit.Assert;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n \n /**\n     /**********************************************************\n      */\n \n-    private final static ObjectMapper MAPPER = new ObjectMapper();\n+    private final ObjectMapper MAPPER = objectMapper();\n     \n     public void testAsInt() throws Exception\n     {\n     }\n \n     // [Issue#232]\n-    public void testBigDecimalAsPlainStringTreeConversion()\n-        throws Exception\n+    public void testBigDecimalAsPlainStringTreeConversion() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN);\n         assertEquals(1, tree.size());\n         assertTrue(tree.has(\"pi\"));\n     }\n+\n+    static class CustomSerializedPojo implements JsonSerializable\n+    {\n+        private final ObjectNode node = JsonNodeFactory.instance.objectNode();\n+\n+        public void setFoo(final String foo) {\n+            node.put(\"foo\", foo);\n+        }\n+    \n+        @Override\n+        public void serialize(final JsonGenerator jgen, final SerializerProvider provider)\n+            throws IOException\n+        {\n+            jgen.writeTree(node);\n+        }\n+\n+        @Override\n+        public void serializeWithType(JsonGenerator jgen,\n+                SerializerProvider provider, TypeSerializer typeSer) throws IOException {\n+            typeSer.writeTypePrefixForObject(this, jgen);\n+            serialize(jgen, provider);\n+            typeSer.writeTypeSuffixForObject(this, jgen);\n+        }    \n+    }\n+\n+    // [Issue#433]\n+    public void testBeanToTree() throws Exception\n+    {\n+        final CustomSerializedPojo pojo = new CustomSerializedPojo();\n+        pojo.setFoo(\"bar\");\n+        final JsonNode node = MAPPER.valueToTree(pojo);\n+        assertEquals(JsonNodeType.OBJECT, node.getNodeType());\n+    }\n }\n ", "timestamp": 1396664405, "metainfo": ""}