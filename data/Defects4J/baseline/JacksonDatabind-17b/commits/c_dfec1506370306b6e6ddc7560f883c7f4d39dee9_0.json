{"sha": "dfec1506370306b6e6ddc7560f883c7f4d39dee9", "log": "Working on [JACKSON-736]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig.java\n         return vchecker;\n     }\n \n-    /*\n-    /**********************************************************\n-    /* MapperConfig overrides for 1.8 backwards compatibility\n-    /**********************************************************\n-     */\n-    \n-    /**\n-     * An overload for {@link MapperConfig#isEnabled(MapperConfig.ConfigFeature)},\n-     * needed for backwards-compatibility.\n-     */\n     public boolean isEnabled(DeserializationConfig.Feature f) {\n         return (_featureFlags & f.getMask()) != 0;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/Module.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/Module.java\n \n         /**\n          * Method that module can use to register additional\n-         * {@link TypeModifier} instance, which can augment {@link com.fasterxml.jackson.databind.type.JavaType}\n+         * {@link TypeModifier} instance, which can augment {@link com.fasterxml.jackson.databind.JavaType}\n          * instances constructed by {@link com.fasterxml.jackson.databind.type.TypeFactory}.\n          * \n          * @param modifier to add\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n      * argument.\n      *<p>\n      * The use case is that of changing object settings of the configuration\n-     * (like date format being used, see {@link SerializationConfig#setDateFormat}).\n+     * (like date format being used, see {@link SerializationConfig#withDateFormat}).\n      */\n     public SerializationConfig copySerializationConfig() {\n         return _serializationConfig.createUnshared(_subtypeResolver);\n      *  mapper.setFilters(mapper.getSerializationConfig().withFilters(filterProvider));\n      *</pre>\n      *<p>\n-     * Note that usually it is better to use method {@link #filteredWriter}; however, sometimes\n+     * Note that usually it is better to use method {@link #writer(FilterProvider)};\n+     * however, sometimes\n      * this method is more convenient. For example, some frameworks only allow configuring\n      * of ObjectMapper instances and not ObjectWriters.\n      */\n     public void setFilters(FilterProvider filterProvider) {\n         _serializationConfig = _serializationConfig.withFilters(filterProvider);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Configuration, other\n     /**\n      * Method for changing state of an on/off serialization feature for\n      * this object mapper.\n-     *<p>\n-     * This is method is basically a shortcut method for calling\n-     * {@link SerializationConfig#set} on the shared {@link SerializationConfig}\n-     * object with given arguments.\n      */\n     public ObjectMapper configure(SerializationConfig.Feature f, boolean state) {\n         _serializationConfig = state ?\n     /**\n      * Method for changing state of an on/off deserialization feature for\n      * this object mapper.\n-     *<p>\n-     * This is method is basically a shortcut method for calling\n-     * {@link DeserializationConfig#set} on the shared {@link DeserializationConfig}\n-     * object with given arguments.\n      */\n     public ObjectMapper configure(DeserializationConfig.Feature f, boolean state) {\n         _deserializationConfig = state ?\n      * {@link JsonFactory} instance this object mapper uses.\n      *<p>\n      * This is method is basically a shortcut method for calling\n-     * {@link JsonFactory#setParserFeature} on the shared\n+     * {@link JsonFactory#enable} on the shared\n      * {@link JsonFactory} this mapper uses (which is accessible\n      * using {@link #getJsonFactory}).\n      */\n      * {@link JsonFactory} instance this object mapper uses.\n      *<p>\n      * This is method is basically a shortcut method for calling\n-     * {@link JsonFactory#setGeneratorFeature} on the shared\n+     * {@link JsonFactory#enable} on the shared\n      * {@link JsonFactory} this mapper uses (which is accessible\n      * using {@link #getJsonFactory}).\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n         return vchecker;\n     }\n \n-    /** \n-     * Alias for {@link MapperConfig#isEnabled(com.fasterxml.jackson.databind.MapperConfig.ConfigFeature)}.\n-     * \n-     * @since 1.0 However, note that version 1.9.0 and 1.9.1 accidentally missed\n-     *    this overloaded variant\n-     */\n     public boolean isEnabled(SerializationConfig.Feature f) {\n         return (_featureFlags & f.getMask()) != 0;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n         throws JsonMappingException;\n \n     /**\n-     * Similar to {@link #findValueSerializer(Class)}, but takes full generics-aware\n+     * Similar to {@link #findValueSerializer(Class,BeanProperty)}, but takes full generics-aware\n      * type instead of raw class.\n      */\n     public abstract JsonSerializer<Object> findValueSerializer(JavaType serializationType,\n      * instances are able to construct a serializer.\n      *<p>\n      * Typically, returned serializer will throw an exception,\n-     * although alternatively {@link com.fasterxml.jackson.databind.ser.ToStringSerializer} could\n-     * be returned as well.\n+     * although alternatively {@link com.fasterxml.jackson.databind.ser.std.ToStringSerializer}\n+     * could be returned as well.\n      *\n      * @param unknownType Type for which no serializer is found\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n package com.fasterxml.jackson.databind.ser;\n \n import com.fasterxml.jackson.databind.JavaType;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.std.SerializerBase;\n \n      * type this serializer is used for.\n      */\n     public abstract JavaType getContentType();\n+\n+    /**\n+     * Accessor for serializer used for serializing contents\n+     * (List and array elements, Map values etc) of the\n+     * container for which this serializer is used, if it is\n+     * known statically.\n+     * Note that for dynamic types this may return null; if so,\n+     * caller has to instead use {@link #getContentType()} and\n+     * {@link com.fasterxml.jackson.databind.SerializerProvider#findValueSerializer}.\n+     */\n+    public abstract JsonSerializer<?> getContentSerializer();\n     \n     /*\n     /**********************************************************\n      */\n     @Override\n     public abstract boolean isEmpty(T value);\n-    \n-    public abstract ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts);\n+\n+    /**\n+     * Method that needs to be implemented to allow construction of a new\n+     * serializer object with given {@link TypeSerializer}, used when\n+     * addition type information is to be embedded.\n+     */\n+    protected abstract ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts);\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/FilterProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/FilterProvider.java\n /**\n  * Interface for objects that providers instances of {@link BeanPropertyFilter}\n  * that match given ids. A provider is configured to be used during serialization,\n- * to find filter to used based on id specified by {@link com.fasterxml.jackson.databind.annotate.JsonFilter}\n+ * to find filter to used based on id specified by {@link com.fasterxml.jackson.annotation.JsonFilter}\n  * annotation on bean class.\n- * \n- * @since 1.7\n  */\n public abstract class FilterProvider\n {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n      * Type serializer used for values, if any.\n      */\n     protected final TypeSerializer _valueTypeSerializer;\n-    \n+\n     /**\n      * Value serializer to use, if it can be statically determined\n      */\n     @Override\n     public JavaType getContentType() {\n         return _elementType;\n+    }\n+\n+    @Override\n+    public JsonSerializer<?> getContentSerializer() {\n+        return _elementSerializer;\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n     @Override\n     public JavaType getContentType() {\n         return _valueType;\n+    }\n+\n+    @Override\n+    public JsonSerializer<?> getContentSerializer() {\n+        return _valueSerializer;\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n     @Override\n     public JavaType getContentType() {\n         return _valueType;\n+    }\n+\n+    @Override\n+    public JsonSerializer<?> getContentSerializer() {\n+        return _valueSerializer;\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n     public JavaType getContentType() {\n         return _elementType;\n     }\n-    \n+\n+    @Override\n+    public JsonSerializer<?> getContentSerializer() {\n+        return _elementSerializer;\n+    }\n+\n     @Override\n     public boolean isEmpty(Object[] value) {\n         return (value == null) || (value.length == 0);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n         @Override\n         public JavaType getContentType() {\n             return VALUE_TYPE;\n+        }\n+\n+        @Override\n+        public JsonSerializer<?> getContentSerializer() {\n+            return _elementSerializer;\n         }\n         \n         @Override\n         public JavaType getContentType() {\n             return VALUE_TYPE;\n         }\n+\n+        @Override\n+        public JsonSerializer<?> getContentSerializer() {\n+            // 14-Jan-2012, tatu: We could refer to an actual serializer if absolutely necessary\n+            return null;\n+        }\n         \n         @Override\n         public boolean isEmpty(boolean[] value) {\n         @Override\n         public JavaType getContentType() {\n             return VALUE_TYPE;\n+        }\n+\n+        @Override\n+        public JsonSerializer<?> getContentSerializer() {\n+            // 14-Jan-2012, tatu: We could refer to an actual serializer if absolutely necessary\n+            return null;\n         }\n         \n         @Override\n         public JavaType getContentType() {\n             return VALUE_TYPE;\n         }\n+\n+        @Override\n+        public JsonSerializer<?> getContentSerializer() {\n+            // 14-Jan-2012, tatu: We could refer to an actual serializer if absolutely necessary\n+            return null;\n+        }\n         \n         @Override\n         public boolean isEmpty(int[] value) {\n         public JavaType getContentType() {\n             return VALUE_TYPE;\n         }\n+\n+        @Override\n+        public JsonSerializer<?> getContentSerializer() {\n+            // 14-Jan-2012, tatu: We could refer to an actual serializer if absolutely necessary\n+            return null;\n+        }\n         \n         @Override\n         public boolean isEmpty(long[] value) {\n             return VALUE_TYPE;\n         }\n \n+        @Override\n+        public JsonSerializer<?> getContentSerializer() {\n+            // 14-Jan-2012, tatu: We could refer to an actual serializer if absolutely necessary\n+            return null;\n+        }\n+        \n         @Override\n         public boolean isEmpty(float[] value) {\n             return (value == null) || (value.length == 0);\n         public JavaType getContentType() {\n             return VALUE_TYPE;\n         }\n+\n+        @Override\n+        public JsonSerializer<?> getContentSerializer() {\n+            // 14-Jan-2012, tatu: We could refer to an actual serializer if absolutely necessary\n+            return null;\n+        }\n         \n         @Override\n         public boolean isEmpty(double[] value) {\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomFactory.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomFactory.java\n import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n \n /**\n- * Test to check that customization using {@link CustomDeserializerFactory}\n- * works as expected.\n+ * Test to check that customizations work as expected.\n  */\n public class TestCustomFactory\n     extends BaseMapTest", "timestamp": 1326593280, "metainfo": ""}