{"sha": "b344e458b3de6680f61cb259a120f7228cdd05cf", "log": "Get rid of custom empty iterator classes  These classes implemented Iterator<T> and implemented the .hasNext(), .next() and .remove() method exactly as Collections.emptyIterator() does.  Use the latter instead.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonNode.java\n public abstract class JsonNode\n     implements TreeNode, Iterable<JsonNode>\n {\n-    protected final static List<JsonNode> NO_NODES = Collections.emptyList();\n-    protected final static List<String> NO_STRINGS = Collections.emptyList();\n-\n     /*\n     /**********************************************************\n     /* Construction, related\n      * field names (keys) are not included, only values.\n      * For other types of nodes, returns empty iterator.\n      */\n-    public Iterator<JsonNode> elements() { return NO_NODES.iterator(); }\n+    public Iterator<JsonNode> elements()\n+    {\n+        return Collections.emptyIterator();\n+    }\n \n     /**\n      * Method for accessing names of all fields for this Node, iff\n      * this node is a JSON Object node.\n      */\n-    public Iterator<String> fieldNames() { return NO_STRINGS.iterator(); }\n+    public Iterator<String> fieldNames()\n+    {\n+        return Collections.emptyIterator();\n+    }\n \n     /**\n      * @return Iterator that can be used to traverse all key/value pairs for\n      *   object nodes; empty iterator (no contents) for other types\n      */\n-    public Iterator<Map.Entry<String, JsonNode>> fields() {\n-        Collection<Map.Entry<String, JsonNode>> coll = Collections.emptyList();\n-        return coll.iterator();\n+    public Iterator<Map.Entry<String, JsonNode>> fields()\n+    {\n+        return Collections.emptyIterator();\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java\n     @Override\n     public Iterator<JsonNode> elements()\n     {\n-        return (_children == null) ? NoNodesIterator.instance() : _children.iterator();\n+        return _children == null\n+            ? Collections.<JsonNode>emptyIterator()\n+            : _children.iterator();\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ContainerNode.java\n     /* Helper classes\n     /**********************************************************\n      */\n-\n-    protected static class NoNodesIterator\n-        implements Iterator<JsonNode>\n-    {\n-        final static NoNodesIterator instance = new NoNodesIterator();\n-\n-        private NoNodesIterator() { }\n-\n-        public static NoNodesIterator instance() { return instance; }\n-\n-//      @Override\n-        public boolean hasNext() { return false; }\n-//      @Override\n-        public JsonNode next() { throw new NoSuchElementException(); }\n-\n-//      @Override\n-        public void remove() {\n-            // could as well throw IllegalOperationException?\n-            throw new IllegalStateException();\n-        }\n-    }\n-\n-    protected static class NoStringsIterator\n-        implements Iterator<String>\n-    {\n-        final static NoStringsIterator instance = new NoStringsIterator();\n-\n-        private NoStringsIterator() { }\n-\n-        public static NoStringsIterator instance() { return instance; }\n-\n-//      @Override\n-        public boolean hasNext() { return false; }\n-//      @Override\n-        public String next() { throw new NoSuchElementException(); }\n-\n-//      @Override\n-        public void remove() {\n-            // could as well throw IllegalOperationException?\n-            throw new IllegalStateException();\n-        }\n-    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java\n     @Override\n     public Iterator<JsonNode> elements()\n     {\n-        return (_children == null) ? NoNodesIterator.instance() : _children.values().iterator();\n+        return _children == null\n+            ? Collections.<JsonNode>emptyIterator()\n+            : _children.values().iterator();\n     }\n \n     @Override\n     }\n \n     @Override\n-    public Iterator<String> fieldNames() {\n-        return (_children == null) ? NoStringsIterator.instance() : _children.keySet().iterator();\n+    public Iterator<String> fieldNames()\n+    {\n+        return _children == null\n+            ? Collections.<String>emptyIterator()\n+            : _children.keySet().iterator();\n     }\n \n     @Override\n     @Override\n     public Iterator<Map.Entry<String, JsonNode>> fields()\n     {\n-        if (_children == null) {\n-            return NoFieldsIterator.instance;\n-        }\n-        return _children.entrySet().iterator();\n+        return _children == null\n+            ? Collections.<Map.Entry<String, JsonNode>>emptyIterator()\n+            : _children.entrySet().iterator();\n     }\n \n     @Override", "timestamp": 1352749858, "metainfo": ""}