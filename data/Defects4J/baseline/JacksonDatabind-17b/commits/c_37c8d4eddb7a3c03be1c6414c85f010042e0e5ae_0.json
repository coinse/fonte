{"sha": "37c8d4eddb7a3c03be1c6414c85f010042e0e5ae", "log": "Moved failing tests to failing package.", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectId.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectId.java\n \n     @JsonIdentityInfo(property=\"id\",\n             generator=ObjectIdGenerators.PropertyGenerator.class)\n-    static class Employee {\n+    public static class Employee {\n         public int id;\n      \n         public String name;\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n package com.fasterxml.jackson.databind.struct;\n \n-import java.util.ArrayList;\n-import java.util.EnumMap;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n-import java.util.concurrent.ArrayBlockingQueue;\n \n import com.fasterxml.jackson.annotation.JsonAnySetter;\n import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n-import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;\n import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference.UnresolvedId;\n import com.fasterxml.jackson.databind.struct.TestObjectId.Company;\n import com.fasterxml.jackson.databind.struct.TestObjectId.Employee;\n-import com.fasterxml.jackson.databind.struct.TestObjectIdDeserialization.EnumMapCompany.FooEnum;\n \n /**\n  * Unit test to verify handling of Object Id deserialization\n     \n     static class MappedCompany {\n         public Map<Integer, Employee> employees;\n-    }\n-\n-    static class ArrayCompany {\n-        public Employee[] employees;\n-    }\n-\n-    static class ArrayBlockingQueueCompany {\n-        public ArrayBlockingQueue<Employee> employees;\n-    }\n-\n-    static class EnumMapCompany {\n-        public EnumMap<FooEnum,Employee> employees;\n-\n-        static enum FooEnum {\n-            A, B\n-        }\n-    }\n-\n-    static class DefensiveCompany {\n-        public List<DefensiveEmployee> employees;\n-\n-        static class DefensiveEmployee extends Employee {\n-\n-            public void setReports(List<DefensiveEmployee> reports)\n-            {\n-                this.reports = new ArrayList<TestObjectId.Employee>(reports);\n-            }\n-        }\n     }\n \n     @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)\n         assertEquals(3, company.employees.size());\n         Employee firstEmployee = company.employees.get(1);\n         Employee secondEmployee = company.employees.get(3);\n-        assertEmployees(firstEmployee, secondEmployee);\n-    }\n-\n-    public void testForwardReferenceInArray()\n-        throws Exception\n-    {\n-        String json = \"{\\\"employees\\\":[\"\n-                      + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n-                      + \"2,\"\n-                      +\"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n-                      + \"]}\";\n-        ArrayCompany company = mapper.readValue(json, ArrayCompany.class);\n-        assertEquals(3, company.employees.length);\n-        Employee firstEmployee = company.employees[0];\n-        Employee secondEmployee = company.employees[1];\n-        assertEmployees(firstEmployee, secondEmployee);\n-    }\n-\n-    // Do a specific test for ArrayBlockingQueue since it has its own deser.\n-    public void testForwardReferenceInQueue()\n-        throws Exception\n-    {\n-        String json = \"{\\\"employees\\\":[\"\n-                      + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n-                      + \"2,\"\n-                      +\"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n-                      + \"]}\";\n-        ArrayBlockingQueueCompany company = mapper.readValue(json, ArrayBlockingQueueCompany.class);\n-        assertEquals(3, company.employees.size());\n-        Employee firstEmployee = company.employees.take();\n-        Employee secondEmployee = company.employees.take();\n-        assertEmployees(firstEmployee, secondEmployee);\n-    }\n-\n-    public void testForwardReferenceInEnumMap()\n-        throws Exception\n-   {\n-        String json = \"{\\\"employees\\\":{\"\n-                      + \"\\\"A\\\":{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n-                      + \"\\\"B\\\": 2,\"\n-                      + \"\\\"C\\\":{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n-                      + \"}}\";\n-        EnumMapCompany company = mapper.readValue(json, EnumMapCompany.class);\n-        assertEquals(3, company.employees.size());\n-        Employee firstEmployee = company.employees.get(FooEnum.A);\n-        Employee secondEmployee = company.employees.get(FooEnum.B);\n-        assertEmployees(firstEmployee, secondEmployee);\n-    }\n-\n-    public void testForwardReferenceWithDefensiveCopy()\n-        throws Exception\n-    {\n-        String json = \"{\\\"employees\\\":[\" + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n-                + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\" + \"]}\";\n-        DefensiveCompany company = mapper.readValue(json, DefensiveCompany.class);\n-        assertEquals(2, company.employees.size());\n-        Employee firstEmployee = company.employees.get(0);\n-        Employee secondEmployee = company.employees.get(1);\n         assertEmployees(firstEmployee, secondEmployee);\n     }\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestObjectIdDeserialization.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.ArrayList;\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.concurrent.ArrayBlockingQueue;\n+\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.struct.TestObjectId.Employee;\n+import com.fasterxml.jackson.failing.TestObjectIdDeserialization.EnumMapCompany.FooEnum;\n+\n+/**\n+ * Unit test to verify handling of Object Id deserialization\n+ */\n+public class TestObjectIdDeserialization extends BaseMapTest\n+{\n+    static class ArrayCompany {\n+        public Employee[] employees;\n+    }\n+\n+    static class ArrayBlockingQueueCompany {\n+        public ArrayBlockingQueue<Employee> employees;\n+    }\n+\n+    static class EnumMapCompany {\n+        public EnumMap<FooEnum,Employee> employees;\n+\n+        static enum FooEnum {\n+            A, B\n+        }\n+    }\n+\n+    static class DefensiveCompany {\n+        public List<DefensiveEmployee> employees;\n+\n+        static class DefensiveEmployee extends Employee {\n+\n+            public void setReports(List<DefensiveEmployee> reports)\n+            {\n+                this.reports = new ArrayList<Employee>(reports);\n+            }\n+        }\n+    }\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+    \n+    /*\n+    /*****************************************************\n+    /* Unit tests, external id deserialization\n+    /*****************************************************\n+     */\n+\n+\n+    public void testForwardReferenceInArray()\n+        throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":[\"\n+                      + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                      + \"2,\"\n+                      +\"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n+                      + \"]}\";\n+        ArrayCompany company = mapper.readValue(json, ArrayCompany.class);\n+        assertEquals(3, company.employees.length);\n+        Employee firstEmployee = company.employees[0];\n+        Employee secondEmployee = company.employees[1];\n+        assertEmployees(firstEmployee, secondEmployee);\n+    }\n+\n+    // Do a specific test for ArrayBlockingQueue since it has its own deser.\n+    public void testForwardReferenceInQueue()\n+        throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":[\"\n+                      + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                      + \"2,\"\n+                      +\"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n+                      + \"]}\";\n+        ArrayBlockingQueueCompany company = mapper.readValue(json, ArrayBlockingQueueCompany.class);\n+        assertEquals(3, company.employees.size());\n+        Employee firstEmployee = company.employees.take();\n+        Employee secondEmployee = company.employees.take();\n+        assertEmployees(firstEmployee, secondEmployee);\n+    }\n+\n+    public void testForwardReferenceInEnumMap()\n+        throws Exception\n+   {\n+        String json = \"{\\\"employees\\\":{\"\n+                      + \"\\\"A\\\":{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                      + \"\\\"B\\\": 2,\"\n+                      + \"\\\"C\\\":{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n+                      + \"}}\";\n+        EnumMapCompany company = mapper.readValue(json, EnumMapCompany.class);\n+        assertEquals(3, company.employees.size());\n+        Employee firstEmployee = company.employees.get(FooEnum.A);\n+        Employee secondEmployee = company.employees.get(FooEnum.B);\n+        assertEmployees(firstEmployee, secondEmployee);\n+    }\n+\n+    public void testForwardReferenceWithDefensiveCopy()\n+        throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":[\" + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\" + \"]}\";\n+        DefensiveCompany company = mapper.readValue(json, DefensiveCompany.class);\n+        assertEquals(2, company.employees.size());\n+        Employee firstEmployee = company.employees.get(0);\n+        Employee secondEmployee = company.employees.get(1);\n+        assertEmployees(firstEmployee, secondEmployee);\n+    }\n+\n+    private void assertEmployees(Employee firstEmployee, Employee secondEmployee)\n+    {\n+        assertEquals(1, firstEmployee.id);\n+        assertEquals(2, secondEmployee.id);\n+        assertEquals(1, firstEmployee.reports.size());\n+        assertSame(secondEmployee, firstEmployee.reports.get(0)); // Ensure that forward reference was properly resolved and in order.\n+        assertSame(firstEmployee, secondEmployee.manager); // And that back reference is also properly resolved.\n+    }\n+}", "timestamp": 1389637528, "metainfo": ""}