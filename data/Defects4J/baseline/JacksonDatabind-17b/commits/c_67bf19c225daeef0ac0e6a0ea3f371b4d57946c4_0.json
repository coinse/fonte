{"sha": "67bf19c225daeef0ac0e6a0ea3f371b4d57946c4", "log": "Move BasicSerializerFactory.Config to a separate class", "commit": "\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java\n+package com.fasterxml.jackson.databind.cfg;\n+\n+import com.fasterxml.jackson.databind.AbstractTypeResolver;\n+import com.fasterxml.jackson.databind.deser.*;\n+import com.fasterxml.jackson.databind.util.ArrayBuilders;\n+\n+/**\n+ * Configuration settings container class for {@link DeserializerFactory}.\n+ */\n+public class DeserializerFactoryConfig\n+{\n+    protected final static Deserializers[] NO_DESERIALIZERS = new Deserializers[0];\n+    protected final static KeyDeserializers[] NO_KEY_DESERIALIZERS = new KeyDeserializers[0];\n+    protected final static BeanDeserializerModifier[] NO_MODIFIERS = new BeanDeserializerModifier[0];\n+    protected final static AbstractTypeResolver[] NO_ABSTRACT_TYPE_RESOLVERS = new AbstractTypeResolver[0];\n+    protected final static ValueInstantiators[] NO_VALUE_INSTANTIATORS = new ValueInstantiators[0];\n+    \n+    /**\n+     * List of providers for additional deserializers, checked before considering default\n+     * basic or bean deserializers.\n+     */\n+    protected final Deserializers[] _additionalDeserializers;\n+\n+    /**\n+     * List of providers for additional key deserializers, checked before considering\n+     * standard key deserializers.\n+     */\n+    protected final KeyDeserializers[] _additionalKeyDeserializers;\n+    \n+    /**\n+     * List of modifiers that can change the way {@link BeanDeserializer} instances\n+     * are configured and constructed.\n+     */\n+    protected final BeanDeserializerModifier[] _modifiers;\n+\n+\n+    /**\n+     * List of objects that may be able to resolve abstract types to\n+     * concrete types. Used by functionality like \"mr Bean\" to materialize\n+     * types as needed.\n+     */\n+    protected final AbstractTypeResolver[] _abstractTypeResolvers;\n+\n+    /**\n+     * List of objects that know how to create instances of POJO types;\n+     * possibly using custom construction (non-annoted constructors; factory\n+     * methods external to value type etc).\n+     * Used to support objects that are created using non-standard methods;\n+     * or to support post-constructor functionality.\n+     */\n+    protected final ValueInstantiators[] _valueInstantiators;\n+    \n+    /**\n+     * Constructor for creating basic configuration with no additional\n+     * handlers.\n+     */\n+    public DeserializerFactoryConfig() {\n+        this(null, null, null, null, null);\n+    }\n+\n+    /**\n+     * Copy-constructor that will create an instance that contains defined\n+     * set of additional deserializer providers.\n+     */\n+    protected DeserializerFactoryConfig(Deserializers[] allAdditionalDeserializers,\n+            KeyDeserializers[] allAdditionalKeyDeserializers,\n+            BeanDeserializerModifier[] modifiers,\n+            AbstractTypeResolver[] atr,\n+            ValueInstantiators[] vi)\n+    {\n+        _additionalDeserializers = (allAdditionalDeserializers == null) ?\n+                NO_DESERIALIZERS : allAdditionalDeserializers;\n+        _additionalKeyDeserializers = (allAdditionalKeyDeserializers == null) ?\n+                NO_KEY_DESERIALIZERS : allAdditionalKeyDeserializers;\n+        _modifiers = (modifiers == null) ? NO_MODIFIERS : modifiers;\n+        _abstractTypeResolvers = (atr == null) ? NO_ABSTRACT_TYPE_RESOLVERS : atr;\n+        _valueInstantiators = (vi == null) ? NO_VALUE_INSTANTIATORS : vi;\n+    }\n+\n+    /**\n+     * Fluent/factory method used to construct a configuration object that\n+     * has same deserializer providers as this instance, plus one specified\n+     * as argument. Additional provider will be added before existing ones,\n+     * meaning it has priority over existing definitions.\n+     */\n+    public DeserializerFactoryConfig withAdditionalDeserializers(Deserializers additional)\n+    {\n+        if (additional == null) {\n+            throw new IllegalArgumentException(\"Can not pass null Deserializers\");\n+        }\n+        Deserializers[] all = ArrayBuilders.insertInListNoDup(_additionalDeserializers, additional);\n+        return new DeserializerFactoryConfig(all, _additionalKeyDeserializers, _modifiers,\n+                _abstractTypeResolvers, _valueInstantiators);\n+    }\n+    /**\n+     * Fluent/factory method used to construct a configuration object that\n+     * has same key deserializer providers as this instance, plus one specified\n+     * as argument. Additional provider will be added before existing ones,\n+     * meaning it has priority over existing definitions.\n+     */\n+    public DeserializerFactoryConfig withAdditionalKeyDeserializers(KeyDeserializers additional)\n+    {\n+        if (additional == null) {\n+            throw new IllegalArgumentException(\"Can not pass null KeyDeserializers\");\n+        }\n+        KeyDeserializers[] all = ArrayBuilders.insertInListNoDup(_additionalKeyDeserializers, additional);\n+        return new DeserializerFactoryConfig(_additionalDeserializers, all, _modifiers,\n+                _abstractTypeResolvers, _valueInstantiators);\n+    }\n+\n+    /**\n+     * Fluent/factory method used to construct a configuration object that\n+     * has same configuration as this instance plus one additional\n+     * deserialiazer modifier. Added modifier has the highest priority (that is, it\n+     * gets called before any already registered modifier).\n+     */\n+    public DeserializerFactoryConfig withDeserializerModifier(BeanDeserializerModifier modifier)\n+    {\n+        if (modifier == null) {\n+            throw new IllegalArgumentException(\"Can not pass null modifier\");\n+        }\n+        BeanDeserializerModifier[] all = ArrayBuilders.insertInListNoDup(_modifiers, modifier);\n+        return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, all,\n+                _abstractTypeResolvers, _valueInstantiators);\n+    }\n+\n+    /**\n+     * Fluent/factory method used to construct a configuration object that\n+     * has same configuration as this instance plus one additional\n+     * abstract type resolver.\n+     * Added resolver has the highest priority (that is, it\n+     * gets called before any already registered resolver).\n+     */\n+    public DeserializerFactoryConfig withAbstractTypeResolver(AbstractTypeResolver resolver)\n+    {\n+        if (resolver == null) {\n+            throw new IllegalArgumentException(\"Can not pass null resolver\");\n+        }\n+        AbstractTypeResolver[] all = ArrayBuilders.insertInListNoDup(_abstractTypeResolvers, resolver);\n+        return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, _modifiers,\n+                all, _valueInstantiators);\n+    }\n+\n+    /**\n+     * Fluent/factory method used to construct a configuration object that\n+     * has same configuration as this instance plus specified additional\n+     * value instantiator provider object.\n+     * Added instantiator provider has the highest priority (that is, it\n+     * gets called before any already registered resolver).\n+     * \n+     * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for\n+     *    constructing POJO values during deserialization\n+     */\n+    public DeserializerFactoryConfig withValueInstantiators(ValueInstantiators instantiators) \n+    {\n+        if (instantiators == null) {\n+            throw new IllegalArgumentException(\"Can not pass null resolver\");\n+        }\n+        ValueInstantiators[] all = ArrayBuilders.insertInListNoDup(_valueInstantiators, instantiators);\n+        return new DeserializerFactoryConfig(_additionalDeserializers, _additionalKeyDeserializers, _modifiers,\n+                _abstractTypeResolvers, all);\n+    }\n+    \n+    public boolean hasDeserializers() { return _additionalDeserializers.length > 0; }\n+\n+    public boolean hasKeyDeserializers() { return _additionalKeyDeserializers.length > 0; }\n+    \n+    public boolean hasDeserializerModifiers() { return _modifiers.length > 0; }\n+\n+    public boolean hasAbstractTypeResolvers() { return _abstractTypeResolvers.length > 0; }\n+\n+    public boolean hasValueInstantiators() { return _valueInstantiators.length > 0; }\n+    \n+    public Iterable<Deserializers> deserializers() {\n+        return ArrayBuilders.arrayAsIterable(_additionalDeserializers);\n+    }\n+\n+    public Iterable<KeyDeserializers> keyDeserializers() {\n+        return ArrayBuilders.arrayAsIterable(_additionalKeyDeserializers);\n+    }\n+    \n+    public Iterable<BeanDeserializerModifier> deserializerModifiers() {\n+        return ArrayBuilders.arrayAsIterable(_modifiers);\n+    }\n+\n+    public Iterable<AbstractTypeResolver> abstractTypeResolvers() {\n+        return ArrayBuilders.arrayAsIterable(_abstractTypeResolvers);\n+    }\n+\n+    public Iterable<ValueInstantiators> valueInstantiators() {\n+        return ArrayBuilders.arrayAsIterable(_valueInstantiators);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java\n+package com.fasterxml.jackson.databind.cfg;\n+\n+import com.fasterxml.jackson.databind.ser.*;\n+import com.fasterxml.jackson.databind.util.ArrayBuilders;\n+\n+/**\n+ * Configuration settings container class for\n+ * {@link SerializerFactory} implementations.\n+ */\n+public final class SerializerFactoryConfig\n+{\n+    /**\n+     * Constant for empty <code>Serializers</code> array (which by definition\n+     * is stateless and reusable)\n+     */\n+    protected final static Serializers[] NO_SERIALIZERS = new Serializers[0];\n+\n+    protected final static BeanSerializerModifier[] NO_MODIFIERS = new BeanSerializerModifier[0];\n+    \n+    /**\n+     * List of providers for additional serializers, checked before considering default\n+     * basic or bean serialializers.\n+     */\n+    protected final Serializers[] _additionalSerializers;\n+\n+    /**\n+     * List of providers for additional key serializers, checked before considering default\n+     * key serialializers.\n+     */\n+    protected final Serializers[] _additionalKeySerializers;\n+    \n+    /**\n+     * List of modifiers that can change the way {@link BeanSerializer} instances\n+     * are configured and constructed.\n+     */\n+    protected final BeanSerializerModifier[] _modifiers;\n+    \n+    public SerializerFactoryConfig() {\n+        this(null, null, null);\n+    }\n+\n+    protected SerializerFactoryConfig(Serializers[] allAdditionalSerializers,\n+            Serializers[] allAdditionalKeySerializers,\n+            BeanSerializerModifier[] modifiers)\n+    {\n+        _additionalSerializers = (allAdditionalSerializers == null) ?\n+                NO_SERIALIZERS : allAdditionalSerializers;\n+        _additionalKeySerializers = (allAdditionalKeySerializers == null) ?\n+                NO_SERIALIZERS : allAdditionalKeySerializers;\n+        _modifiers = (modifiers == null) ? NO_MODIFIERS : modifiers;\n+    }\n+\n+    public SerializerFactoryConfig withAdditionalSerializers(Serializers additional)\n+    {\n+        if (additional == null) {\n+            throw new IllegalArgumentException(\"Can not pass null Serializers\");\n+        }\n+        Serializers[] all = ArrayBuilders.insertInListNoDup(_additionalSerializers, additional);\n+        return new SerializerFactoryConfig(all, _additionalKeySerializers, _modifiers);\n+    }\n+\n+    public SerializerFactoryConfig withAdditionalKeySerializers(Serializers additional)\n+    {\n+        if (additional == null) {\n+            throw new IllegalArgumentException(\"Can not pass null Serializers\");\n+        }\n+        Serializers[] all = ArrayBuilders.insertInListNoDup(_additionalKeySerializers, additional);\n+        return new SerializerFactoryConfig(_additionalSerializers, all, _modifiers);\n+    }\n+    \n+    public SerializerFactoryConfig withSerializerModifier(BeanSerializerModifier modifier)\n+    {\n+        if (modifier == null) {\n+            throw new IllegalArgumentException(\"Can not pass null modifier\");\n+        }\n+        BeanSerializerModifier[] modifiers = ArrayBuilders.insertInListNoDup(_modifiers, modifier);\n+        return new SerializerFactoryConfig(_additionalSerializers, _additionalKeySerializers, modifiers);\n+    }\n+\n+    public boolean hasSerializers() { return _additionalSerializers.length > 0; }\n+\n+    public boolean hasKeySerializers() { return _additionalKeySerializers.length > 0; }\n+    \n+    public boolean hasSerializerModifiers() { return _modifiers.length > 0; }\n+    \n+    public Iterable<Serializers> serializers() {\n+        return ArrayBuilders.arrayAsIterable(_additionalSerializers);\n+    }\n+\n+    public Iterable<Serializers> keySerializers() {\n+        return ArrayBuilders.arrayAsIterable(_additionalKeySerializers);\n+    }\n+    \n+    public Iterable<BeanSerializerModifier> serializerModifiers() {\n+        return ArrayBuilders.arrayAsIterable(_modifiers);\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.NoClass;\n+import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;\n import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;\n-import com.fasterxml.jackson.databind.deser.impl.DeserializerFactoryConfig;\n import com.fasterxml.jackson.databind.deser.std.*;\n import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;\n import com.fasterxml.jackson.databind.introspect.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n-import com.fasterxml.jackson.databind.deser.impl.DeserializerFactoryConfig;\n import com.fasterxml.jackson.databind.deser.std.JdkDeserializers;\n import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer;\n import com.fasterxml.jackson.databind.introspect.*;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;\n import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.ser.impl.StringCollectionSerializer;\n import com.fasterxml.jackson.databind.ser.std.*;\n import com.fasterxml.jackson.databind.type.*;\n-import com.fasterxml.jackson.databind.util.ArrayBuilders;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.EnumValues;\n import com.fasterxml.jackson.databind.util.TokenBuffer;\n     /**********************************************************\n      */\n     \n-    /**\n-     * Configuration settings container class for bean serializer factory\n-     */\n-    final static class Config\n-    {\n-        /**\n-         * Constant for empty <code>Serializers</code> array (which by definition\n-         * is stateless and reusable)\n-         */\n-        protected final static Serializers[] NO_SERIALIZERS = new Serializers[0];\n-\n-        protected final static BeanSerializerModifier[] NO_MODIFIERS = new BeanSerializerModifier[0];\n-        \n-        /**\n-         * List of providers for additional serializers, checked before considering default\n-         * basic or bean serialializers.\n-         */\n-        protected final Serializers[] _additionalSerializers;\n-\n-        /**\n-         * List of providers for additional key serializers, checked before considering default\n-         * key serialializers.\n-         */\n-        protected final Serializers[] _additionalKeySerializers;\n-        \n-        /**\n-         * List of modifiers that can change the way {@link BeanSerializer} instances\n-         * are configured and constructed.\n-         */\n-        protected final BeanSerializerModifier[] _modifiers;\n-        \n-        public Config() {\n-            this(null, null, null);\n-        }\n-\n-        protected Config(Serializers[] allAdditionalSerializers,\n-                Serializers[] allAdditionalKeySerializers,\n-                BeanSerializerModifier[] modifiers)\n-        {\n-            _additionalSerializers = (allAdditionalSerializers == null) ?\n-                    NO_SERIALIZERS : allAdditionalSerializers;\n-            _additionalKeySerializers = (allAdditionalKeySerializers == null) ?\n-                    NO_SERIALIZERS : allAdditionalKeySerializers;\n-            _modifiers = (modifiers == null) ? NO_MODIFIERS : modifiers;\n-        }\n-\n-        public Config withAdditionalSerializers(Serializers additional)\n-        {\n-            if (additional == null) {\n-                throw new IllegalArgumentException(\"Can not pass null Serializers\");\n-            }\n-            Serializers[] all = ArrayBuilders.insertInListNoDup(_additionalSerializers, additional);\n-            return new Config(all, _additionalKeySerializers, _modifiers);\n-        }\n-\n-        public Config withAdditionalKeySerializers(Serializers additional)\n-        {\n-            if (additional == null) {\n-                throw new IllegalArgumentException(\"Can not pass null Serializers\");\n-            }\n-            Serializers[] all = ArrayBuilders.insertInListNoDup(_additionalKeySerializers, additional);\n-            return new Config(_additionalSerializers, all, _modifiers);\n-        }\n-        \n-        public Config withSerializerModifier(BeanSerializerModifier modifier)\n-        {\n-            if (modifier == null) {\n-                throw new IllegalArgumentException(\"Can not pass null modifier\");\n-            }\n-            BeanSerializerModifier[] modifiers = ArrayBuilders.insertInListNoDup(_modifiers, modifier);\n-            return new Config(_additionalSerializers, _additionalKeySerializers, modifiers);\n-        }\n-\n-        public boolean hasSerializers() { return _additionalSerializers.length > 0; }\n-\n-        public boolean hasKeySerializers() { return _additionalKeySerializers.length > 0; }\n-        \n-        public boolean hasSerializerModifiers() { return _modifiers.length > 0; }\n-        \n-        public Iterable<Serializers> serializers() {\n-            return ArrayBuilders.arrayAsIterable(_additionalSerializers);\n-        }\n-\n-        public Iterable<Serializers> keySerializers() {\n-            return ArrayBuilders.arrayAsIterable(_additionalKeySerializers);\n-        }\n-        \n-        public Iterable<BeanSerializerModifier> serializerModifiers() {\n-            return ArrayBuilders.arrayAsIterable(_modifiers);\n-        }\n-    }\n     \n     /**\n      * Configuration settings for this factory; immutable instance (just like this\n      * factory), new version created via copy-constructor (fluent-style)\n      */\n-    protected final Config _factoryConfig;\n+    protected final SerializerFactoryConfig _factoryConfig;\n     \n     /**\n      * Helper object used to deal with serializers for optional JDK types (like ones\n      * but make it protected so that no non-singleton instances of\n      * the class will be instantiated.\n      */\n-    protected BasicSerializerFactory(Config config) {\n-        _factoryConfig = (config == null) ? new Config() : config;\n+    protected BasicSerializerFactory(SerializerFactoryConfig config) {\n+        _factoryConfig = (config == null) ? new SerializerFactoryConfig() : config;\n     }\n     \n     /**\n      * factory type. Check out javadocs for\n      * {@link com.fasterxml.jackson.databind.ser.BeanSerializerFactory} for more details.\n      */\n-    public abstract SerializerFactory withConfig(Config config);\n+    public abstract SerializerFactory withConfig(SerializerFactoryConfig config);\n \n     /**\n      * Convenience method for creating a new factory instance with an additional\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n \n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n+import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;\n import com.fasterxml.jackson.databind.introspect.*;\n import com.fasterxml.jackson.databind.jsontype.NamedType;\n import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;\n     /**\n      * Constructor for creating instances with specified configuration.\n      */\n-    protected BeanSerializerFactory(Config config)\n+    protected BeanSerializerFactory(SerializerFactoryConfig config)\n     {\n         super(config);\n     }\n      * to ensure thread-safe access.\n      */\n     @Override\n-    public SerializerFactory withConfig(Config config)\n+    public SerializerFactory withConfig(SerializerFactoryConfig config)\n     {\n         if (_factoryConfig == config) {\n             return this;", "timestamp": 1328149020, "metainfo": ""}