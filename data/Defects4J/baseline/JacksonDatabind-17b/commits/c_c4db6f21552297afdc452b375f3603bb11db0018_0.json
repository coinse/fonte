{"sha": "c4db6f21552297afdc452b375f3603bb11db0018", "log": "Revert \"jsonFormatVisitor/acceptor now passes/accepts typeHint of JavaType, but some access is formatted incorrectly or, less likely, there is a bug in jackson. \"  This reverts commit 7fd884e4f7b0f02942fd425080e50f24fd6dfdfa.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     public Schema generateJsonSchema(Class<?> t) throws JsonMappingException {\n     \tDefaultSerializerProvider provider = _serializerProvider(getSerializationConfig());\n     \tSchemaFactory visitor = new SchemaFactory(provider);\n-        provider.acceptJsonFormatVisitor(constructType(t), visitor);\n+        provider.acceptJsonFormatVisitor(t, visitor);\n         return visitor.finalSchema();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/CoreXMLSerializers.java\n package com.fasterxml.jackson.databind.ext;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.JsonSerializer;\n             CalendarSerializer.instance.serialize(value.toGregorianCalendar(), jgen, provider);\n         }\n \n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {\n             CalendarSerializer.instance.acceptJsonFormatVisitor(visitor, null);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ext/DOMSerializer.java\n package com.fasterxml.jackson.databind.ext;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import org.w3c.dom.Node;\n import  org.w3c.dom.bootstrap.DOMImplementationRegistry;\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n         visitor.anyFormat();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/SchemaAware.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/SchemaAware.java\n package com.fasterxml.jackson.databind.jsonschema;\n \n+import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n \n /**\n      *\n      * @return <a href=\"http://json-schema.org/\">Json-schema</a> for this serializer.\n      */\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint);\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint);\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ObjectSchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/ObjectSchemaFactory.java\n package com.fasterxml.jackson.databind.jsonschema.factories;\n \n+import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.jsonschema.types.SchemaType;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n \n public class ObjectSchemaFactory extends SchemaFactory implements JsonObjectFormatVisitor, SchemaFactoryDelegate {\n \n \t}\n \t\n \tpublic Schema getSchema() {\n+\t\t// TODO Auto-generated method stub\n \t\treturn objectSchema;\n \t}\n \n-\tprivate JsonSerializer<Object> getSer(BeanPropertyWriter writer) {\n+\tprivate JsonSerializer<Object> getSer(BeanPropertyWriter writer, Class<?> serType) {\n \t\tJsonSerializer<Object> ser = writer.getSerializer();\n \t\tif (ser == null) { // nope\n-\t\t\t\n-\t\t\tJavaType serType = writer.getSerializationType();\n+\t\t\tif (serType == null) {\n+\t\t\t\tserType = writer.getPropertyType();\n+\t\t\t}\n \t\t\ttry {\n \t\t\t\treturn getProvider().findValueSerializer(serType, writer);\n \t\t\t} catch (JsonMappingException e) {\n \t\treturn ser;\n \t}\t\n \t\n-//\tprivate Class<?> writerType(BeanPropertyWriter writer) {\n-//\t\t\n-//\t\t//TODO:Will these ever return different types?\n-//\t\t\n-//\t\tJavaType propType = writer.getSerializationType();\n-//\t\tTypeFactory.defaultInstance().\n-//\t\tType hint = (propType == null) ? writer.getGenericPropertyType() : propType.getRawClass();\n-//\t\treturn writer.getPropertyType();\n-//\t}\n+\tprivate Class<?> writerType(BeanPropertyWriter writer) {\n+\t\t\n+\t\t//TODO:Will these ever return different types?\n+\t\t\n+\t\t//JavaType propType = writer.getSerializationType();\n+\t\t//Type hint = (propType == null) ? writer.getGenericPropertyType() : propType.getRawClass();\n+\t\treturn writer.getPropertyType();\n+\t}\n \t\n \tprotected Schema propertySchema(BeanPropertyWriter writer) {\n \t\tSchemaFactory visitor = new SchemaFactory(provider);\n-\t\tJsonSerializer<Object> ser = getSer(writer);\n+\t\tClass<?> serType = writerType(writer);\n+\t\tJsonSerializer<Object> ser = getSer(writer, serType);\n \t\tif (ser != null && ser instanceof SchemaAware) {\n-\t\t\t((SchemaAware)ser).acceptJsonFormatVisitor(visitor, writer.getSerializationType());\n+\t\t\t((SchemaAware)ser).acceptJsonFormatVisitor(visitor, serType);\n \t\t} else {\n \t\t\tvisitor.anyFormat();\n \t\t}\n \t\treturn visitor.finalSchema();\n \t}\n \t\n-\tprotected Schema propertySchema(SchemaAware handler, JavaType propertyTypeHint) {\n+\tprotected Schema propertySchema(SchemaAware handler, Type propertyTypeHint) {\n \t\tSchemaFactory visitor = new SchemaFactory(provider);\n \t\thandler.acceptJsonFormatVisitor(visitor, propertyTypeHint);\n \t\treturn visitor.finalSchema();\n \t\tobjectSchema.putOptionalProperty(writer.getName(), propertySchema(writer));\n \t}\n \t\n-\tpublic void property(String name, SchemaAware handler, JavaType propertyTypeHint) {\n+\tpublic void property(String name, SchemaAware handler, Type propertyTypeHint) {\n \t\tobjectSchema.putProperty(name, propertySchema(handler, propertyTypeHint));\n \t}\n \t\n-\tpublic void optionalProperty(String name, SchemaAware handler, JavaType propertyTypeHint) {\n+\tpublic void optionalProperty(String name, SchemaAware handler, Type propertyTypeHint) {\n \t\tobjectSchema.putOptionalProperty(name, propertySchema(handler, propertyTypeHint));\n \t}\n \t\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/SchemaFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/factories/SchemaFactory.java\n package com.fasterxml.jackson.databind.jsonschema.factories;\n \n+import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.types.Schema;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonAnyFormatVisitor;\n \t\treturn (JsonAnyFormatVisitor) delegate;\n \t}\n \n-\tpublic JsonArrayFormatVisitor arrayFormat(JavaType elementType) {\n+\tpublic JsonArrayFormatVisitor arrayFormat(Type elementType) {\n \t\tdelegate = new ArraySchemaFactory(this);\n \t\treturn (JsonArrayFormatVisitor) delegate;\n \t}\n \t\treturn (JsonNumberFormatVisitor) delegate;\n \t}\n \n-\tpublic JsonObjectFormatVisitor objectFormat(JavaType type) {\n+\tpublic JsonObjectFormatVisitor objectFormat(Type type) {\n \t\t// BasicClassIntrospector.instance.\n \t\tdelegate = new ObjectSchemaFactory(this);\n \t\treturn (JsonObjectFormatVisitor) delegate;\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonschema.visitors;\n \n+import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n \n public interface JsonFormatVisitor {\n \n-\tpublic JsonObjectFormatVisitor objectFormat(JavaType type);\n-\tpublic JsonArrayFormatVisitor arrayFormat(JavaType elementType);\n+\tpublic JsonObjectFormatVisitor objectFormat(Type type);\n+\tpublic JsonArrayFormatVisitor arrayFormat(Type elementType);\n \tpublic JsonStringFormatVisitor stringFormat();\n \tpublic JsonNumberFormatVisitor numberFormat();\n \tpublic JsonIntegerFormatVisitor integerFormat();\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonObjectFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/visitors/JsonObjectFormatVisitor.java\n package com.fasterxml.jackson.databind.jsonschema.visitors;\n \n+import java.lang.reflect.Type;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;\n \n \n \tpublic void optionalProperty(BeanPropertyWriter writer);\n \n-\tpublic void property(String name, SchemaAware handler, JavaType propertyTypeHint);\n+\tpublic void property(String name, SchemaAware handler, Type propertyTypeHint);\n \n \tpublic void optionalProperty(String name, SchemaAware handler,\n-\t\t\tJavaType propertyTypeHint);\n+\t\t\tType propertyTypeHint);\n \n \tpublic void property(String name);\n \t\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n      *\n      * @param type The type for which to generate schema\n      */\n-    public void acceptJsonFormatVisitor(JavaType type, JsonFormatVisitor visitor)\n+    public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitor visitor)\n         throws JsonMappingException\n     {\n         if (type == null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n         ;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n     \tvisitor.arrayFormat(null).itemsFormat(SchemaType.STRING);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java\n package com.fasterxml.jackson.databind.ser.impl;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n \n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { \n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) { \n     \tvisitor.anyFormat();\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n         throws IOException, JsonGenerationException;\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n         /* 15-Jan-2010, tatu: This should probably be rewritten, given that\n          *    more information about content type is actually being explicitly\n          */\n         //ObjectNode o = createSchemaNode(\"array\", true);\n         JsonArrayFormatVisitor arrayVisitor = \n-        \t\tvisitor.arrayFormat(typeHint);\n+        \t\tvisitor.arrayFormat(typeHint == null ? _elementType.getRawClass() : typeHint);\n         JavaType contentType = null;\n         if (typeHint != null) {\n-            contentType = typeHint.getContentType();\n+            JavaType javaType = visitor.getProvider().constructType(typeHint);\n+            contentType = javaType.getContentType();\n             if (contentType == null) { // could still be parametrized (Iterators)\n                 if (typeHint instanceof ParameterizedType) {\n                     Type[] typeArgs = ((ParameterizedType) typeHint).getActualTypeArguments();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonFormat;\n         return filter;\n     }\n     \n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-    {\n-    \tJsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint);\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n+    {\n+    \tJsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint == null ? _handledType : typeHint);\n         // [JACKSON-813]: Add optional JSON Schema id attribute, if found\n         // NOTE: not optimal, does NOT go through AnnotationIntrospector etc:\n //        JsonSerializableSchema ann = _handledType.getAnnotation(JsonSerializableSchema.class);\n             \tfilter.depositSchemaProperty(prop, objectVisitor, visitor.getProvider());\n             \t continue;\n             }\n+            JavaType propType = prop.getSerializationType();\n             BeanSerializerBase.depositSchemaProperty(prop, objectVisitor);\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n         visitor.booleanFormat();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Locale;\n \n     protected abstract long _timestamp(T value);\n     \n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n         //todo: (ryan) add a format for the date in the schema?\n         boolean asNumber = _useTimestamp;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumMapSerializer.java\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.ContainerSerializer;\n import com.fasterxml.jackson.databind.ser.ContextualSerializer;\n-import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.EnumValues;\n \n /**\n     \n     @SuppressWarnings(\"unchecked\")\n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n     \tJsonObjectFormatVisitor objectVisitor = visitor.objectFormat(typeHint);\n         if (typeHint instanceof ParameterizedType) {\n                 \ttry {\n                 \t\tser = visitor.getProvider().findValueSerializer(valueType.getRawClass(), _property);\n                 \t\tif (ser instanceof SchemaAware)  {\n-                \t\t\tobjectVisitor.property(name, (SchemaAware) ser, TypeFactory.defaultInstance().constructType(typeArgs[1]));\n+                \t\t\tobjectVisitor.property(name, (SchemaAware) ser, typeArgs[1]);\n                 \t\t} \n                 \t\tcontinue;\n                 \t} catch (JsonMappingException e) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.util.HashSet;\n import java.util.Set;\n \n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n         // [JACKSON-684]: serialize as index?\n     \tif (visitor.getProvider().isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n     \t} else {\n     \t\tJsonStringFormatVisitor stringVisitor = visitor.stringFormat();\n     \t\tif (typeHint != null) {\n-    \t\t\tif (typeHint.isEnumType()) {\n+    \t\t\tJavaType type = visitor.getProvider().constructType(typeHint);\n+    \t\t\tif (type.isEnumType()) {\n     \t\t\t\tSet<String> enums = new HashSet<String>();\n     \t\t\t\tfor (SerializedString value : _values.values()) {\n     \t\t\t\t\tenums.add(value.getValue());\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/JsonValueSerializer.java\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n \n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n     \tif (_valueSerializer instanceof SchemaAware) {\n     \t\t((SchemaAware) _valueSerializer).acceptJsonFormatVisitor(visitor, null); \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n     \tvisitor.objectFormat(null);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NullSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n+import java.lang.reflect.Type;\n import java.io.IOException;\n \n import com.fasterxml.jackson.core.*;\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n     \tvisitor.nullFormat();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.util.Map;\n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.integerFormat();\n         }\n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.integerFormat();\n         }\n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.numberFormat();\n         }\n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.numberFormat();\n         }\n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.numberFormat();\n         }\n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.numberFormat();\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n \n import java.io.IOException;\n import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n \n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-    {\n-    \tvisitor.arrayFormat(typeHint).itemsFormat(_elementType);\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n+    {\n+    \tvisitor.arrayFormat(typeHint == null ? _property.getType().getRawClass() : typeHint).itemsFormat(_elementType);\n     }\n \n     protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/RawSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n \n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n         visitor.stringFormat();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SerializableSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.core.*;\n \n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.JsonSerializable;\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n         if (typeHint == null) {\n         \tvisitor.anyFormat();\n         } else  {\n-            Class<?> rawClass = typeHint.getRawClass();\n+            Class<?> rawClass = TypeFactory.rawClass(typeHint);\n             if (rawClass.isAnnotationPresent(JsonSerializableSchema.class)) {\n                 JsonSerializableSchema schemaInfo = rawClass.getAnnotation(JsonSerializableSchema.class);\n                 \n                 if (!JsonSerializableSchema.NO_VALUE.equals(schemaInfo.schemaObjectPropertiesDefinition())) {\n-                \tvisitor.objectFormat(typeHint);\n+                \tvisitor.objectFormat(rawClass);\n                     //objectProperties = schemaInfo.schemaObjectPropertiesDefinition();\n                 } else \n                 if (!JsonSerializableSchema.NO_VALUE.equals(schemaInfo.schemaItemDefinition())) {\n-                    visitor.arrayFormat(typeHint);\n+                    visitor.arrayFormat(rawClass);\n                 \t//itemDefinition = schemaInfo.schemaItemDefinition();\n                 } else {\n                 \tvisitor.anyFormat();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlDateSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n     \tvisitor.stringFormat().format(JsonValueFormat.DATE_TIME);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n     \tvisitor.stringFormat().format(JsonValueFormat.DATE_TIME);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StaticListSerializerBase.java\n package com.fasterxml.jackson.databind.ser.std;\n \n+import java.lang.reflect.Type;\n import java.util.*;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n     \tacceptContentVisitor(visitor.arrayFormat(typeHint));\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.util.HashMap;\n \n import com.fasterxml.jackson.core.*;\n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.BOOLEAN);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n+        {\n+        \tvisitor.arrayFormat(typeHint == null ? _handledType : typeHint).itemsFormat(SchemaType.BOOLEAN);\n         }\n     }\n \n         }\n         \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.STRING);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n+        {\n+        \tvisitor.arrayFormat(typeHint == null ? _handledType : typeHint).itemsFormat(SchemaType.STRING);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.INTEGER);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n+        {\n+        \tvisitor.arrayFormat(typeHint == null ? _handledType : typeHint).itemsFormat(SchemaType.INTEGER);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.STRING);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n+        {\n+        \tvisitor.arrayFormat(typeHint == null ? _handledType : typeHint).itemsFormat(SchemaType.STRING);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.INTEGER);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n+        {\n+        \tvisitor.arrayFormat(typeHint == null ? _handledType : typeHint).itemsFormat(SchemaType.INTEGER);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n+        {\n+        \tvisitor.arrayFormat(typeHint == null ? _handledType : typeHint).itemsFormat(SchemaType.NUMBER);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n+        {\n+        \tvisitor.arrayFormat(typeHint == null ? _handledType : typeHint).itemsFormat(SchemaType.NUMBER);\n         }\n     }\n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n-        {\n-        \tvisitor.arrayFormat(typeHint).itemsFormat(SchemaType.NUMBER);\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n+        {\n+        \tvisitor.arrayFormat(typeHint == null ? _handledType : typeHint).itemsFormat(SchemaType.NUMBER);\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.*;\n+import java.lang.reflect.Type;\n import java.util.*;\n import java.util.concurrent.atomic.*;\n \n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.booleanFormat();\n         }\n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.integerFormat();\n         }\n         }\n     \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.integerFormat();\n         }\n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.anyFormat();\n         }\n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.stringFormat();\n         }\n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n         {\n         \tvisitor.stringFormat();\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.util.Date;\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n     \tvisitor.stringFormat();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n         visitor.anyFormat();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java\n \n import java.io.IOException;\n import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n      * overriden by custom serializers.\n      */\n //  @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) { \n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) { \n     \tvisitor.anyFormat();\n     }\n             \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StringSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n     }\n \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n     \tvisitor.stringFormat();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n     \tvisitor.stringFormat();\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/TokenBufferSerializer.java\n package com.fasterxml.jackson.databind.ser.std;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n \n import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;\n     }\n     \n     @Override\n-    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint)\n+    public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint)\n     {\n         /* 01-Jan-2010, tatu: Not 100% sure what we should say here:\n          *   type is basically not known. This seems closest\n--- a/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/module/TestSimpleModule.java\n package com.fasterxml.jackson.databind.module;\n \n import java.io.IOException;\n+import java.lang.reflect.Type;\n import java.util.*;\n \n \n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {\n             visitor.anyFormat();\n         }\n     }\n         }\n \n         @Override\n-        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, JavaType typeHint) {\n+        public void acceptJsonFormatVisitor(JsonFormatVisitor visitor, Type typeHint) {\n             visitor.anyFormat();\n         }\n     }", "timestamp": 1343953520, "metainfo": ""}