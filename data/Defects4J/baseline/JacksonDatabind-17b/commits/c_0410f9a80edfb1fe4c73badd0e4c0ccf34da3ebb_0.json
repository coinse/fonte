{"sha": "0410f9a80edfb1fe4c73badd0e4c0ccf34da3ebb", "log": "Further fixes for [JACKSON-757]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass.java\n          * (for non-static inner classes) are NOT included, but type is? Strange, sounds like\n          * a bug. Alas, we can't really fix that...\n          */\n-        // Also: [JACKSON-767] (enum value constructors)\n+        // Also: [JACKSON-757] (enum value constructors)\n         AnnotationMap[] resolvedAnnotations = null;\n         if (paramCount != paramAnns.length) {\n             // Limits of the work-around (to avoid hiding real errors):\n             // first, only applicable for member classes and then either:\n \n             Class<?> dc = ctor.getDeclaringClass();\n-            if (dc.isMemberClass()) {\n-                // (a) just one annotation (for non-static inner classes)\n+            // (a) is enum, which have two extra hidden params (name, index)\n+            if (dc.isEnum() && (paramCount == paramAnns.length + 2)) {\n+                Annotation[][] old = paramAnns;\n+                paramAnns = new Annotation[old.length+2][];\n+                System.arraycopy(old, 0, paramAnns, 2, old.length);\n+                resolvedAnnotations = _collectRelevantAnnotations(paramAnns);\n+            } else if (dc.isMemberClass()) {\n+                // (b) non-static inner classes, get implicit 'this' for parameter, not  annotation\n                 if (paramCount == (paramAnns.length + 1)) {\n                     // hack attack: prepend a null entry to make things match\n                     Annotation[][] old = paramAnns;\n                     paramAnns = new Annotation[old.length+1][];\n                     System.arraycopy(old, 0, paramAnns, 1, old.length);\n-                    resolvedAnnotations = _collectRelevantAnnotations(paramAnns);\n-\n-                    // (b) or is enum, which have two extra hidden params (but not for annotations!)\n-                } else if (dc.isEnum() && (paramCount == paramAnns.length + 2)) {\n-                    Annotation[][] old = paramAnns;\n-                    paramAnns = new Annotation[old.length+2][];\n-                    System.arraycopy(old, 0, paramAnns, 2, old.length);\n                     resolvedAnnotations = _collectRelevantAnnotations(paramAnns);\n                 }\n             }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java\n     /**********************************************************\n      */\n \n+    private final ObjectMapper mapper = new ObjectMapper();\n+    \n     public void testSimple() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        StringWriter sw = new StringWriter();\n-        mapper.writeValue(sw, TestEnum.B);\n-        assertEquals(\"\\\"B\\\"\", sw.toString());\n+        assertEquals(\"\\\"B\\\"\", mapper.writeValueAsString(TestEnum.B));\n     }\n \n     public void testEnumSet() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         StringWriter sw = new StringWriter();\n         EnumSet<TestEnum> value = EnumSet.of(TestEnum.B);\n         mapper.writeValue(sw, value);\n      */\n     public void testEnumUsingToString() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         StringWriter sw = new StringWriter();\n         mapper.writeValue(sw, AnnotatedTestEnum.C2);\n         assertEquals(\"\\\"c2\\\"\", sw.toString());\n     // Test [JACKSON-214]\n     public void testSubclassedEnums() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         assertEquals(\"\\\"B\\\"\", mapper.writeValueAsString(EnumWithSubClass.B));\n     }\n \n     // [JACKSON-193]\n     public void testEnumsWithJsonValue() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         assertEquals(\"\\\"bar\\\"\", mapper.writeValueAsString(EnumWithJsonValue.B));\n     }\n \n     // also, for [JACKSON-193], needs to work via mix-ins\n     public void testEnumsWithJsonValueUsingMixin() throws Exception\n     {\n+        // can't share, as new mix-ins are added\n         ObjectMapper mapper = new ObjectMapper();\n         mapper.addMixInAnnotations(TestEnum.class, ToStringMixin.class);\n         assertEquals(\"\\\"b\\\"\", mapper.writeValueAsString(TestEnum.B));\n      */\n     public void testSerializableEnum() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n         assertEquals(\"\\\"foo\\\"\", mapper.writeValueAsString(SerializableEnum.A));\n     }\n \n     public void testToStringEnumWithEnumMap() throws Exception\n     {\n         ObjectMapper mapper = new ObjectMapper();\n+        mapper.configure(SerializationConfig.Feature.WRITE_ENUMS_USING_TO_STRING, true);\n         EnumMap<LowerCaseEnum,String> m = new EnumMap<LowerCaseEnum,String>(LowerCaseEnum.class);\n         m.put(LowerCaseEnum.C, \"value\");\n-        mapper.configure(SerializationConfig.Feature.WRITE_ENUMS_USING_TO_STRING, true);\n         assertEquals(\"{\\\"c\\\":\\\"value\\\"}\", mapper.writeValueAsString(m));\n     }\n \n     {\n         MapBean bean = new MapBean();\n         bean.add(TestEnum.B, 3);\n-        String json = new ObjectMapper().writeValueAsString(bean);\n+        String json = mapper.writeValueAsString(bean);\n         assertEquals(\"{\\\"map\\\":{\\\"b\\\":3}}\", json);\n     }\n     \n     // [JACKSON-757]\n     public void testAnnotationsOnEnumCtor() throws Exception\n     {\n-        ObjectMapper mapper = new ObjectMapper();\n-        mapper.writeValueAsString(OK.V1);\n-        mapper.writeValueAsString(NOT_OK.V1);\n+        assertEquals(quote(\"V1\"), mapper.writeValueAsString(OK.V1));\n+        assertEquals(quote(\"V1\"), mapper.writeValueAsString(NOT_OK.V1));\n+        assertEquals(quote(\"V2\"), mapper.writeValueAsString(NOT_OK2.V2));\n     }\n }\n+\n+// [JACKSON-757], non-inner enum\n+enum NOT_OK2 {\n+    V2(\"v2\"); \n+    protected String key;\n+    // any runtime-persistent annotation is fine\n+    NOT_OK2(@JsonProperty String key) { this.key = key; }\n+}", "timestamp": 1327522024, "metainfo": ""}