{"sha": "a877f25e4b75a0e73cd572ef9e9cbc5375f6d70e", "log": "Remove 2 more \"simple\" string deserializers", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n package com.fasterxml.jackson.databind.deser.std;\n \n import java.io.*;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n import java.net.URI;\n import java.net.URL;\n+import java.nio.charset.Charset;\n import java.util.Currency;\n import java.util.Locale;\n import java.util.regex.Pattern;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.exc.InvalidFormatException;\n+import com.fasterxml.jackson.databind.util.ClassUtil;\n \n /**\n  * Base class for simple deserializers that only accept JSON String\n         return new Class<?>[] {\n             URL.class,\n             URI.class,\n+            Class.class,\n             File.class,\n             Currency.class,\n             Pattern.class,\n             Locale.class,\n+            Charset.class,\n+            InetAddress.class,\n+            InetSocketAddress.class,\n         };\n     }\n     \n             kind = Std.STD_URL;\n         } else if (rawType == URI.class) {\n             kind = Std.STD_URI;\n+        } else if (rawType == Class.class) {\n+            kind = Std.STD_CLASS;\n         } else if (rawType == Currency.class) {\n             kind = Std.STD_CURRENCY;\n         } else if (rawType == Pattern.class) {\n             kind = Std.STD_PATTERN;\n         } else if (rawType == Locale.class) {\n             kind = Std.STD_LOCALE;\n+        } else if (rawType == Charset.class) {\n+            kind = Std.STD_CHARSET;\n+        } else if (rawType == InetAddress.class) {\n+            kind = Std.STD_INET_ADDRESS;\n+        } else if (rawType == InetSocketAddress.class) {\n+            kind = Std.STD_INET_SOCKET_ADDRESS;\n         } else {\n             return null;\n         }\n         public final static int STD_FILE = 1;\n         public final static int STD_URL = 2;\n         public final static int STD_URI = 3;\n-        public final static int STD_CURRENCY = 4;\n-        public final static int STD_PATTERN = 5;\n-        public final static int STD_LOCALE = 6;\n+        public final static int STD_CLASS = 4;\n+        public final static int STD_CURRENCY = 5;\n+        public final static int STD_PATTERN = 6;\n+        public final static int STD_LOCALE = 7;\n+        public final static int STD_CHARSET = 8;\n+        public final static int STD_INET_ADDRESS = 9;\n+        public final static int STD_INET_SOCKET_ADDRESS = 10;\n         \n         protected final int _kind;\n         \n                 return new URL(value);\n             case STD_URI:\n                 return URI.create(value);\n+            case STD_CLASS:\n+                try {\n+                    return ctxt.findClass(value);\n+                } catch (Exception e) {\n+                    throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));\n+                }\n             case STD_CURRENCY:\n                 // will throw IAE if unknown:\n                 return Currency.getInstance(value);\n                     String second = value.substring(0, ix);\n                     return new Locale(first, second, value.substring(ix+1));\n                 }\n+            case STD_CHARSET:\n+                return Charset.forName(value);\n+            case STD_INET_ADDRESS:\n+                return InetAddress.getByName(value);\n+            case STD_INET_SOCKET_ADDRESS:\n+                if (value.startsWith(\"[\")) {\n+                    // bracketed IPv6 (with port number)\n+\n+                    int i = value.lastIndexOf(']');\n+                    if (i == -1) {\n+                        throw new InvalidFormatException(\n+                                \"Bracketed IPv6 address must contain closing bracket.\",\n+                                value, InetSocketAddress.class);\n+                    }\n+\n+                    int j = value.indexOf(':', i);\n+                    int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;\n+                    return new InetSocketAddress(value.substring(0, i + 1), port);\n+                } else {\n+                    int i = value.indexOf(':');\n+                    if (i != -1 && value.indexOf(':', i + 1) == -1) {\n+                        // host:port\n+                        int port = Integer.parseInt(value.substring(i));\n+                        return new InetSocketAddress(value.substring(0, i), port);\n+                    } else {\n+                        // host or unbracketed IPv6, without port number\n+                        return new InetSocketAddress(value, 0);\n+                    }\n+                }\n             }\n             throw new IllegalArgumentException();\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java\n package com.fasterxml.jackson.databind.deser.std;\n \n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n import java.nio.ByteBuffer;\n-import java.nio.charset.Charset;\n import java.util.*;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n         // note: can skip primitive types; other ways to check them:\n         Class<?>[] types = new Class<?>[] {\n                 UUID.class,\n-                InetAddress.class,\n-                InetSocketAddress.class,\n-                Charset.class,\n                 AtomicBoolean.class,\n-                Class.class,\n                 StackTraceElement.class,\n                 ByteBuffer.class\n         };\n         if (rawType == UUID.class) {\n             return new UUIDDeserializer();\n         }\n-        if (rawType == InetAddress.class) {\n-            return new InetAddressDeserializer();\n-        }\n-        if (rawType == InetSocketAddress.class) {\n-            return new InetSocketAddressDeserializer();\n-        }\n-        if (rawType == Charset.class) {\n-            return new CharsetDeserializer();\n-        }\n-        if (rawType == Class.class) {\n-            return new ClassDeserializer();\n-        }\n         if (rawType == StackTraceElement.class) {\n             return new StackTraceElementDeserializer();\n         }", "timestamp": 1388610800, "metainfo": ""}