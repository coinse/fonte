{"sha": "6cada0a47ed675fffe15697968dfef68864b57e7", "log": "Add unit tests, support for jackson-annotations issue #4: add `@JsonIdentityInfo.firstAsId` to force serialization of the very first reference as id (as well as following ones)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         if (info == null || info.generator() == ObjectIdGenerators.None.class) {\n             return null;\n         }\n-        return new ObjectIdInfo(info.property(), info.scope(), info.generator());\n+        return new ObjectIdInfo(info.property(), info.scope(), info.generator(),\n+                info.firstAsId());\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n     protected final String _propertyName;\n     protected final Class<? extends ObjectIdGenerator<?>> _generator;\n     protected final Class<?> _scope;\n+    protected final boolean _firstAsId;\n+\n+    /**\n+     * @deprecated Since 2.1 use the constructor that takes 4 arguments.\n+     */\n+    @Deprecated\n+    public ObjectIdInfo(String prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen) {\n+        this(prop, scope, gen, false);\n+    }\n     \n-    public ObjectIdInfo(String prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen)\n+    public ObjectIdInfo(String prop, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen,\n+            boolean firstAsId)\n     {\n         _propertyName = prop;\n         _generator = gen;\n         _scope = scope;\n+        _firstAsId = firstAsId;\n     }\n \n     public String getPropertyName() { return _propertyName; }\n     public Class<?> getScope() { return _scope; }\n     public Class<? extends ObjectIdGenerator<?>> getGeneratorType() { return _generator; }\n+    public boolean getFirstAsId() { return _firstAsId; }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java\n         // if not, bit more work:\n         oid.serializer = w.serializer;\n         oid.id = id = oid.generator.generateId(bean);\n+        // possibly. Or maybe not:\n+        if (w.firstAsId) { \n+            oid.serializer.serialize(id, jgen, provider);\n+            return;\n+        }\n         // If not, need to inject the id:\n         jgen.writeStartObject();\n         SerializedString name = w.propertyName;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n             JavaType idType = idProp.getType();\n             gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n             // one more thing: must ensure that ObjectIdWriter does not actually write the value:\n-            return ObjectIdWriter.construct(idType, null, gen);\n+            return ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());\n             \n         } \n         // other types are simpler\n         // Could require type to be passed explicitly, but we should be able to find it too:\n         JavaType idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];\n         gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);\n-        return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n+        return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,\n+                objectIdInfo.getFirstAsId());\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/ObjectIdWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/ObjectIdWriter.java\n      * Serializer used for serializing id values.\n      */\n     public final JsonSerializer<Object> serializer;\n+\n+    /**\n+     * Marker that indicates what the first reference is to be\n+     * serialized as full POJO, or as Object Id (other references\n+     * will always be serialized as Object Id)\n+     * \n+     * @since 2.1\n+     */\n+    public final boolean firstAsId;\n     \n     /*\n     /**********************************************************\n      */\n \n     @SuppressWarnings(\"unchecked\")\n-    protected ObjectIdWriter(JavaType t, SerializedString propName, ObjectIdGenerator<?> gen,\n-            JsonSerializer<?> ser)\n+    protected ObjectIdWriter(JavaType t, SerializedString propName,\n+            ObjectIdGenerator<?> gen, JsonSerializer<?> ser, boolean firstAsId)\n     {\n         idType = t;\n         propertyName = propName;\n         generator = gen;\n         serializer = (JsonSerializer<Object>) ser;\n+        this.firstAsId = firstAsId;\n     }\n \n     /**\n      * for which serializer is being built.\n      */\n     public static ObjectIdWriter construct(JavaType idType, String propName,\n-            ObjectIdGenerator<?> generator)\n+            ObjectIdGenerator<?> generator, boolean firstAsId)\n     {\n         SerializedString serName = (propName == null) ? null : new SerializedString(propName);\n-        return new ObjectIdWriter(idType, serName, generator, null);\n+        return new ObjectIdWriter(idType, serName, generator, null, firstAsId);\n     }\n \n     public ObjectIdWriter withSerializer(JsonSerializer<?> ser) {\n-        return new ObjectIdWriter(idType, propertyName, generator, ser);\n+        return new ObjectIdWriter(idType, propertyName, generator, ser, firstAsId);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java\n         // if not, bit more work:\n         oid.serializer = w.serializer;\n         oid.id = id = oid.generator.generateId(bean);\n-        // If not, need to inject the id:\n+        // possibly. Or maybe not:\n+        if (w.firstAsId) { \n+            oid.serializer.serialize(id, jgen, provider);\n+            return;\n+        }\n+        \n         jgen.writeStartObject();\n         SerializedString name = w.propertyName;\n         if (name != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n                     }\n                     idType = idProp.getType();\n                     gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp);\n-                    oiw = ObjectIdWriter.construct(idType, null, gen);\n+                    oiw = ObjectIdWriter.construct(idType, null, gen, objectIdInfo.getFirstAsId());\n                 } else { // other types need to be simpler\n                     gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo);\n-                    oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen);\n+                    oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen,\n+                            objectIdInfo.getFirstAsId());\n                 }\n             }\n         }\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdSerialization.java\n package com.fasterxml.jackson.databind.struct;\n \n import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n \n import com.fasterxml.jackson.databind.*;\n         }\n     }\n \n+    // For [https://github.com/FasterXML/jackson-annotations/issues/4]\n+    @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class,\n+            property=\"id\", firstAsId=true)\n+    static class AlwaysAsId\n+    {\n+        public int value;\n+        \n+        public AlwaysAsId() { this(0); }\n+        public AlwaysAsId(int v) {\n+            value = v;\n+        }\n+    }\n+\n+    @JsonPropertyOrder(alphabetic=true)\n+    static class AlwaysContainer\n+    {\n+        public AlwaysAsId a = new AlwaysAsId(13);\n+        \n+        @JsonIdentityInfo(generator=ObjectIdGenerators.IntSequenceGenerator.class,\n+                property=\"id\", firstAsId=true)\n+        public Value b = new Value();\n+    }\n+\n+    static class Value {\n+        public int x = 3;\n+    }\n+    \n     // // Let's also have one 'broken' test\n \n     // no \"id\" property\n \n     private final static String EXP_SIMPLE_INT_CLASS = \"{\\\"id\\\":1,\\\"value\\\":13,\\\"next\\\":1}\";\n     \n-    private final ObjectMapper mapper = new ObjectMapper();\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n \n     public void testSimpleSerializationClass() throws Exception\n     {\n         src.next = src;\n         \n         // First, serialize:\n-        String json = mapper.writeValueAsString(src);\n+        String json = MAPPER.writeValueAsString(src);\n         assertEquals(EXP_SIMPLE_INT_CLASS, json);\n \n         // and ensure that state is cleared in-between as well:\n-        json = mapper.writeValueAsString(src);\n+        json = MAPPER.writeValueAsString(src);\n         assertEquals(EXP_SIMPLE_INT_CLASS, json);\n     }\n     \n         src.node.next = src;\n         \n         // First, serialize:\n-        String json = mapper.writeValueAsString(src);\n+        String json = MAPPER.writeValueAsString(src);\n         assertEquals(EXP_SIMPLE_INT_PROP, json);\n         // and second time too, for a good measure\n-        json = mapper.writeValueAsString(src);\n+        json = MAPPER.writeValueAsString(src);\n         assertEquals(EXP_SIMPLE_INT_PROP, json);\n     }\n \n         src.next = src;\n         \n         // First, serialize:\n-        String json = mapper.writeValueAsString(src);\n+        String json = MAPPER.writeValueAsString(src);\n         assertEquals(EXP_CUSTOM_PROP, json);\n \n         // and ensure that state is cleared in-between as well:\n-        json = mapper.writeValueAsString(src);\n+        json = MAPPER.writeValueAsString(src);\n         assertEquals(EXP_CUSTOM_PROP, json);\n     }\n \n         src.node.next = src;\n         \n         // First, serialize:\n-        String json = mapper.writeValueAsString(src);\n+        String json = MAPPER.writeValueAsString(src);\n         assertEquals(EXP_CUSTOM_PROP_VIA_REF, json);\n         // and second time too, for a good measure\n-        json = mapper.writeValueAsString(src);\n+        json = MAPPER.writeValueAsString(src);\n         assertEquals(EXP_CUSTOM_PROP_VIA_REF, json);\n     }\n \n+    public void testAlwaysAsId() throws Exception\n+    {\n+        String json = MAPPER.writeValueAsString(new AlwaysContainer());\n+        assertEquals(json, \"{\\\"a\\\":1,\\\"b\\\":2}\");\n+    }\n+    \n     /*\n     /*****************************************************\n     /* Unit tests, error handling\n     public void testInvalidProp() throws Exception\n     {\n         try {\n-            mapper.writeValueAsString(new Broken());\n+            MAPPER.writeValueAsString(new Broken());\n             fail(\"Should have thrown an exception\");\n         } catch (JsonMappingException e) {\n             verifyException(e, \"can not find property with name 'id'\");", "timestamp": 1343798643, "metainfo": ""}