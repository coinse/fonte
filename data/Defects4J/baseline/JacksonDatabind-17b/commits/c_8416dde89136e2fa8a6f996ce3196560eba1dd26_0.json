{"sha": "8416dde89136e2fa8a6f996ce3196560eba1dd26", "log": "Completed [Issue#120] implementation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.ser.impl.*;\n import com.fasterxml.jackson.databind.ser.std.NullSerializer;\n-import com.fasterxml.jackson.databind.ser.std.StdKeySerializers;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n import com.fasterxml.jackson.databind.util.RootNameLookup;\n             BeanProperty property)\n         throws JsonMappingException\n     {\n-        JsonSerializer<Object> ser = _serializerFactory.createKeySerializer(_config, keyType);\n-    \n-        // First things first: maybe there are registered custom implementations\n-        // if not, use default one:\n-        if (ser == null) {\n-            if (_keySerializer == null) {\n-                ser = StdKeySerializers.getStdKeySerializer(keyType);\n-            } else {\n-                ser = _keySerializer;\n-            }\n-        }\n+        JsonSerializer<Object> ser = _serializerFactory.createKeySerializer(_config, keyType, _keySerializer);\n         // 25-Feb-2011, tatu: As per [JACKSON-519], need to ensure contextuality works here, too\n         return _handleContextualResolvable(ser, property);\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public JsonSerializer<Object> createKeySerializer(SerializationConfig config,\n-            JavaType type)\n-    {\n+            JavaType keyType, JsonSerializer<Object> defaultImpl)\n+    {\n+        // We should not need any member method info; at most class annotations for Map type\n+        BeanDescription beanDesc = config.introspectClassAnnotations(keyType.getRawClass());\n+        JsonSerializer<?> ser = null;\n         // Minor optimization: to avoid constructing beanDesc, bail out if none registered\n-        if (!_factoryConfig.hasKeySerializers()) {\n-            return null;\n-        }\n-        // We should not need any member method info; at most class annotations for Map type\n-        BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());\n-        JsonSerializer<?> ser = null;\n+        if (_factoryConfig.hasKeySerializers()) {\n+            // Only thing we have here are module-provided key serializers:\n+            for (Serializers serializers : _factoryConfig.keySerializers()) {\n+                ser = serializers.findSerializer(config, keyType, beanDesc);\n+                if (ser != null) {\n+                    break;\n+                }\n+            }\n+        }\n+        if (ser == null) {\n+            ser = defaultImpl;\n+            if (ser == null) {\n+                ser = StdKeySerializers.getStdKeySerializer(keyType);\n+            }\n+        }\n         \n-        // Only thing we have here are module-provided key serializers:\n-        for (Serializers serializers : _factoryConfig.keySerializers()) {\n-            ser = serializers.findSerializer(config, type, beanDesc);\n-            if (ser != null) {\n-                break;\n+        // [Issue#120]: Allow post-processing\n+        if (_factoryConfig.hasSerializerModifiers()) {\n+            for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n+                ser = mod.modifyKeySerializer(config, keyType, beanDesc, ser);\n             }\n         }\n         return (JsonSerializer<Object>) ser;\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n      * Method that will try to construct a {@link BeanSerializer} for\n      * given class. Returns null if no properties are found.\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov,\n             JavaType type, BeanDescription beanDesc)\n         throws JsonMappingException\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerModifier.java\n      * \n      * @param config Configuration in use\n      * @param valueType Type of the value serializer is used for.\n-     * @param beanDesc Description f\n+     * @param beanDesc Details of the type in question, to allow checking class annotations\n      * @param serializer Default serializer that would be used.\n      * \n      * @return Serializer to use; either <code>serializer</code> that was passed\n         return serializer;\n     }\n \n+    /**\n+     * @since 2.2\n+     */\n     public JsonSerializer<?> modifyCollectionSerializer(SerializationConfig config,\n             CollectionType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {\n         return serializer;\n     }\n \n+    /**\n+     * @since 2.2\n+     */\n     public JsonSerializer<?> modifyCollectionLikeSerializer(SerializationConfig config,\n             CollectionLikeType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {\n         return serializer;\n     }\n     \n+    /**\n+     * @since 2.2\n+     */\n     public JsonSerializer<?> modifyMapSerializer(SerializationConfig config,\n             MapType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {\n         return serializer;\n     }\n \n+    /**\n+     * @since 2.2\n+     */\n     public JsonSerializer<?> modifyMapLikeSerializer(SerializationConfig config,\n             MapLikeType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {\n         return serializer;\n     }\n \n+    /**\n+     * @since 2.2\n+     */\n     public JsonSerializer<?> modifyEnumSerializer(SerializationConfig config,\n             JavaType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {\n         return serializer;\n     }\n+\n+    /**\n+     * Method called by {@link DeserializerFactory} after it has constructed the\n+     * default key serializer to use for serializing {@link java.util.Map} keys of\n+     * given type.\n+     * This makes it possible to either replace or augment default serializer with\n+     * additional functionality.\n+     * \n+     * @param config Configuration in use\n+     * @param valueType Type of keys the serializer is used for.\n+     * @param beanDesc Details of the type in question, to allow checking class annotations\n+     * @param serializer Default serializer that would be used.\n+     * \n+     * @return Serializer to use; either <code>serializer</code> that was passed\n+     *   in, or an instance method constructed.\n+     * \n+     * @since 2.2\n+     */\n+    public JsonSerializer<?> modifyKeySerializer(SerializationConfig config,\n+            JavaType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {\n+        return serializer;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/SerializerFactory.java\n      * key type, and is for specified property (or, if property is null, as root value)\n      * \n      * @param baseType Declared type for Map keys\n+     * @param defaultImpl Default key serializer implementation to use, if no custom ones\n+     *    are found (may be null)\n      * \n      * @return Serializer to use, if factory knows it; null if not (in which case default\n      *   serializer is to be used)\n      */\n     public abstract JsonSerializer<Object> createKeySerializer(SerializationConfig config,\n+            JavaType baseType, JsonSerializer<Object> defaultImpl)\n+        throws JsonMappingException;\n+\n+    /**\n+     * @deprecated Since 2.2, use one that takes additional <code>defaultImpl</code> parameter\n+     */\n+    @Deprecated\n+    public JsonSerializer<Object> createKeySerializer(SerializationConfig config,\n             JavaType baseType)\n-        throws JsonMappingException;\n+        throws JsonMappingException {\n+        return createKeySerializer(config, baseType, null);\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestBeanSerializer.java\n             };\n         }\n     }\n+\n+    static class KeySerializerModifier extends BeanSerializerModifier {\n+        @Override\n+        public JsonSerializer<?> modifyKeySerializer(SerializationConfig config,\n+                JavaType valueType, BeanDescription beanDesc, JsonSerializer<?> serializer) {\n+            return new StdSerializer<Object>(Object.class) {\n+                @Override public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException {\n+                    jgen.writeFieldName(\"foo\");\n+                }\n+            };\n+        }\n+    }\n     \n     enum EnumABC { A, B, C };\n     \n \n     public void testModifyKeySerializer() throws Exception\n     {\n+        ObjectMapper mapper = new ObjectMapper();\n+        mapper.registerModule(new SimpleModule(\"test\")\n+            .setSerializerModifier(new KeySerializerModifier()));\n+        Map<String,Integer> map = new HashMap<String,Integer>();\n+        map.put(\"x\", 3);\n+        assertEquals(\"{\\\"foo\\\":3}\", mapper.writeValueAsString(map));\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestSerializerProvider.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestSerializerProvider.java\n         DefaultSerializerProvider prov = new DefaultSerializerProvider.Impl().createInstance(config, f);\n \n         // Should have working default key and null key serializers\n-        assertNotNull(prov.findKeySerializer(null, null));\n+        assertNotNull(prov.findKeySerializer(mapper.constructType(String.class), null));\n         assertNotNull(prov.getDefaultNullKeySerializer());\n         assertNotNull(prov.getDefaultNullValueSerializer());\n         // as well as 'unknown type' one (throws exception)", "timestamp": 1354434030, "metainfo": ""}