{"sha": "4b107ff341fab06aa50d6101cac386142b5e970b", "log": "Add unit tests for #429", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.deser.std.StdDeserializer;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n \n public class TestJdkTypes extends BaseMapTest\n {\n         public BooleanBean(@JsonProperty(\"ctor\") Boolean foo) {\n             ctor = foo;\n         }\n+    }\n+\n+    // [Issue#429]\n+    static class StackTraceBean {\n+        public final static int NUM = 13;\n+\n+        @JsonProperty(\"Location\")\n+        @JsonDeserialize(using=MyStackTraceElementDeserializer.class)\n+        private StackTraceElement location;    \n+    }\n+\n+    @SuppressWarnings(\"serial\")\n+    static class MyStackTraceElementDeserializer extends StdDeserializer<StackTraceElement>\n+    {\n+        public MyStackTraceElementDeserializer() { super(StackTraceElement.class); }\n+        \n+        @Override\n+        public StackTraceElement deserialize(JsonParser jp,\n+                DeserializationContext ctxt) throws IOException, JsonProcessingException {\n+            jp.skipChildren();\n+            return new StackTraceElement(\"a\", \"b\", \"b\", StackTraceBean.NUM);\n+        }\n+        \n     }\n     \n     /*\n         }\n         assertEquals(0, result.remaining());\n     }\n+\n+    // [Issue#429]\n+    public void testStackTraceElementWithCustom() throws Exception\n+    {\n+        // first, via bean that contains StackTraceElement\n+        StackTraceBean bean = MAPPER.readValue(aposToQuotes(\"{'Location':'foobar'}\"),\n+                StackTraceBean.class);\n+        assertNotNull(bean);\n+        assertNotNull(bean.location);\n+        assertEquals(StackTraceBean.NUM, bean.location.getLineNumber());\n+\n+        // and then directly, iff registered\n+        ObjectMapper mapper = new ObjectMapper();\n+        SimpleModule module = new SimpleModule();\n+        module.addDeserializer(StackTraceElement.class, new MyStackTraceElementDeserializer());\n+        mapper.registerModule(module);\n+        \n+        StackTraceElement elem = mapper.readValue(\"123\", StackTraceElement.class);\n+        assertNotNull(elem);\n+        assertEquals(StackTraceBean.NUM, elem.getLineNumber());\n+    }\n     \n     /*\n     /**********************************************************", "timestamp": 1396668794, "metainfo": ""}