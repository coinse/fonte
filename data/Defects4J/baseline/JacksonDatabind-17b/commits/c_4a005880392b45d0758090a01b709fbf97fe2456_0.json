{"sha": "4a005880392b45d0758090a01b709fbf97fe2456", "log": "minor nip & tuck", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n     /**********************************************************\n      */\n     \n-    @SuppressWarnings(\"incomplete-switch\")\n     protected Object _deserializeIfNatural(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n          * Finally, we may have to consider possibility of custom handlers for\n          * these values: but for now this should work ok.\n          */\n-        switch (jp.getCurrentToken()) {\n-        case VALUE_STRING:\n-            if (_acceptString) {\n-                return jp.getText();\n+        /* 21-Sep-2013, tatu: It may seem odd that I'm not using a switch here.\n+         *   But turns out that a switch on an enum generates an inner class...\n+         *   crazy! So this is to avoid that, simply since new class weighs about 1kB\n+         *   after compression.\n+         */\n+        final JsonToken t = jp.getCurrentToken();\n+        if (t.isScalarValue()) {\n+            if (t == JsonToken.VALUE_STRING) {\n+                if (_acceptString) {\n+                    return jp.getText();\n+                }\n+            } else if (t == JsonToken.VALUE_NUMBER_INT) {\n+                if (_acceptInt) {\n+                    return jp.getIntValue();\n+                }\n+            } else if (t == JsonToken.VALUE_NUMBER_FLOAT) {\n+                if (_acceptDouble) {\n+                    return Double.valueOf(jp.getDoubleValue());\n+                }\n+            } else if (t == JsonToken.VALUE_TRUE) {\n+                if (_acceptBoolean) {\n+                    return Boolean.TRUE;\n+                }\n+            } else if (t == JsonToken.VALUE_FALSE) {\n+                if (_acceptBoolean) {\n+                    return Boolean.FALSE;\n+                }\n             }\n-            break;\n-        case VALUE_NUMBER_INT:\n-            if (_acceptInt) {\n-                return jp.getIntValue();\n-            }\n-            break;\n-\n-        case VALUE_NUMBER_FLOAT:\n-            if (_acceptDouble) {\n-                return Double.valueOf(jp.getDoubleValue());\n-            }\n-            break;\n-        case VALUE_TRUE:\n-            if (_acceptBoolean) {\n-                return Boolean.TRUE;\n-            }\n-            break;\n-        case VALUE_FALSE:\n-            if (_acceptBoolean) {\n-                return Boolean.FALSE;\n-            }\n-            break;\n         }\n         return null;\n     }", "timestamp": 1379794455, "metainfo": ""}