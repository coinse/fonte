{"sha": "a0e8d5dbfefde7d9969fb4f5c5f4b648fe3e13eb", "log": "Test case for issue #351.", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java\n package com.fasterxml.jackson.databind.struct;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n import com.fasterxml.jackson.annotation.JsonIdentityInfo;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n-\n import com.fasterxml.jackson.databind.*;\n+import com.fasterxml.jackson.databind.struct.TestObjectId.Company;\n+import com.fasterxml.jackson.databind.struct.TestObjectId.Employee;\n \n /**\n  * Unit test to verify handling of Object Id deserialization\n         }\n     }\n     \n+    static class MappedCompany {\n+        public Map<Integer, Employee> employees;\n+    }\n+\n+    static class ArrayCompany {\n+        public Employee[] employees;\n+    }\n+\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)\n+    static class AnySetterObjectId {\n+        private Map<String, AnySetterObjectId> values = new HashMap<String, AnySetterObjectId>();\n+\n+        @JsonAnySetter\n+        public void anySet(String field, AnySetterObjectId value) {\n+            // Ensure that it is never called with null because of unresolved reference.\n+            assertNotNull(value);\n+            values.put(field, value);\n+        }\n+    }\n+\n     private final ObjectMapper mapper = new ObjectMapper();\n     \n     /*\n         assertEquals(7, result.node.value);\n         assertSame(result.node, result.node.next.node);\n     }\n-    \n+\n+    public void testLateForwardReferenceInCollection() throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":[\"\n+                      + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                      + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n+                      + \"]}\";\n+        Company company = mapper.readValue(json, Company.class);\n+        assertEquals(2, company.employees.size());\n+        // Deser must keep object ordering.\n+        Employee firstEmployee = company.employees.get(0);\n+        Employee secondEmployee = company.employees.get(1);\n+        assertEquals(1, firstEmployee.id);\n+        assertEquals(2, secondEmployee.id);\n+        assertSame(secondEmployee, firstEmployee.reports.get(0)); // Ensure that forward reference was properly resolved and in order.\n+        assertSame(firstEmployee, secondEmployee.manager); // And that back reference is also properly resolved.\n+    }\n+\n+    // Variant of before but forward reference is not \"wrapped\" inside a collection, might be easier to fix first.\n+    public void testLateForwardReference() throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":[\"\n+                      + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":2,\\\"reports\\\":[]},\"\n+                      + \"{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":null,\\\"reports\\\":[1]}\"\n+                      + \"]}\";\n+        Company company = mapper.readValue(json, Company.class);\n+        assertEquals(2, company.employees.size());\n+        // Deser must keep object ordering.\n+        Employee firstEmployee = company.employees.get(0);\n+        Employee secondEmployee = company.employees.get(1);\n+        assertEquals(1, firstEmployee.id);\n+        assertEquals(2, secondEmployee.id);\n+        assertEquals(secondEmployee, firstEmployee.manager); // Ensure that forward reference was properly resolved.\n+        assertEquals(firstEmployee, secondEmployee.reports.get(0)); // And that back reference is also properly resolved.\n+    }\n+\n+    public void testLateForwardReferenceInMap() throws Exception\n+    {\n+        String json = \"{\\\"employees\\\":{\"\n+                      + \"\\\"1\\\":{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":2,\\\"reports\\\":[]},\"\n+                      + \"\\\"2\\\": 2,\"\n+                      + \"\\\"3\\\":{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":null,\\\"reports\\\":[1]}\"\n+                      + \"}}\";\n+        MappedCompany company = mapper.readValue(json, MappedCompany.class);\n+        assertEquals(3, company.employees.size());\n+        // Deser must keep object ordering.\n+        Employee firstEmployee = company.employees.get(1);\n+        Employee secondEmployee = company.employees.get(3);\n+        assertEquals(1, firstEmployee.id);\n+        assertEquals(2, secondEmployee.id);\n+        assertEquals(secondEmployee, firstEmployee.manager); // Ensure that forward reference was properly resolved.\n+        assertEquals(firstEmployee, secondEmployee.reports.get(0)); // And that back reference is also properly resolved.\n+    }\n+\n+    public void testLateForwardReferenceInArray() throws Exception {\n+        String json = \"{\\\"employees\\\":[\"\n+                      + \"{\\\"id\\\":1,\\\"name\\\":\\\"First\\\",\\\"manager\\\":null,\\\"reports\\\":[2]},\"\n+                      + \"2,{\\\"id\\\":2,\\\"name\\\":\\\"Second\\\",\\\"manager\\\":1,\\\"reports\\\":[]}\"\n+                      + \"]}\";\n+        ArrayCompany company = mapper.readValue(json, ArrayCompany.class);\n+        assertEquals(3, company.employees.length);\n+        // Deser must keep object ordering.\n+        Employee firstEmployee = company.employees[0];\n+        Employee secondEmployee = company.employees[1];\n+        assertEquals(1, firstEmployee.id);\n+        assertEquals(2, secondEmployee.id);\n+        assertSame(secondEmployee, firstEmployee.reports.get(0)); // Ensure that forward reference was properly resolved and in order.\n+        assertSame(firstEmployee, secondEmployee.manager); // And that back reference is also properly resolved.\n+    }\n+\n+    public void testForwardReferenceAnySetterCombo() throws Exception {\n+        String json = \"{\\\"@id\\\":1, \\\"foo\\\":2, \\\"bar\\\":{\\\"@id\\\":2, \\\"foo\\\":1}}\";\n+        AnySetterObjectId value = mapper.readValue(json, AnySetterObjectId.class);\n+        assertSame(value.values.get(\"bar\"), value.values.get(\"foo\"));\n+    }\n+\n     /*\n     /*****************************************************\n     /* Unit tests, custom (property-based) id deserialization", "timestamp": 1389625653, "metainfo": ""}