{"sha": "c34e2136a7646a16a85e54cac15da61f8417d551", "log": "improvements to time calcs for benchmarks", "commit": "\n--- a/src/test/java/perf/ManualReadPerfUntyped.java\n+++ b/src/test/java/perf/ManualReadPerfUntyped.java\n     // When comparing to simple streaming parsing, uncomment:\n \n     @Override\n-    protected long testDeser1(int reps, String input, ObjectReader reader) throws Exception {\n-//        return _testRawDeser(reps, input, reader);\n-        return _testDeser(reps, input, reader);\n+    protected double testDeser1(int reps, String input, ObjectReader reader) throws Exception {\n+        return _testRawDeser(reps, input, reader);\n+//        return _testDeser(reps, input, reader);\n     }\n \n     @Override\n-    protected long testDeser2(int reps, String input, ObjectReader reader) throws Exception {\n-//        return _testRawDeser(reps, input, reader);\n-        return _testDeser(reps, input, reader);\n+    protected double testDeser2(int reps, String input, ObjectReader reader) throws Exception {\n+        return _testRawDeser(reps, input, reader);\n+//        return _testDeser(reps, input, reader);\n     }\n     \n-    protected final long _testRawDeser(int reps, String input, ObjectReader reader) throws Exception\n+    protected final double _testRawDeser(int reps, String input, ObjectReader reader) throws Exception\n     {\n-        long start = System.currentTimeMillis();\n+        long start = System.nanoTime();\n         final JsonFactory f = reader.getFactory();\n         while (--reps >= 0) {\n             JsonParser p = f.createParser(input);\n             p.close();\n         }\n         hash = f.hashCode();\n-        return System.currentTimeMillis() - start;\n+        return _msecsFromNanos(System.nanoTime() - start);\n     }\n }\n--- a/src/test/java/perf/ObjectReaderBase.java\n+++ b/src/test/java/perf/ObjectReaderBase.java\n     protected int roundsDone = 0;\n \n     protected int REPS;\n+\n+    private double[] timeMsecs;;\n     \n     protected <T1, T2> void testFromBytes(ObjectMapper mapper1, String desc1,\n             T1 inputValue1, Class<T1> inputClass1,\n         int i = 0;\n         final int TYPES = 2;\n \n-        final long[] times = new long[TYPES];\n         while (true) {\n             Thread.sleep(100L);\n             int type = (i++ % TYPES);\n \n             String msg;\n-            long msecs;\n+            long micros;\n             \n             switch (type) {\n             case 0:\n                 msg = _desc1;\n-                msecs = testDeser1(REPS, byteInput1, jsonReader);\n+                micros = testDeser1(REPS, byteInput1, jsonReader);\n                 break;\n             case 1:\n                 msg = _desc2;\n-                msecs = testDeser2(REPS, byteInput2, arrayReader);\n+                micros = testDeser2(REPS, byteInput2, arrayReader);\n                 break;\n             default:\n                 throw new Error();\n             }\n-            updateStats(type, (i % 17) == 0, msg, msecs, times);\n+            updateStats(type, (i % 17) == 0, msg, micros);\n         }\n     }\n \n         int i = 0;\n         final int TYPES = 2;\n \n-        final long[] times = new long[TYPES];\n+        timeMsecs = new double[TYPES];\n+\n         while (true) {\n             Thread.sleep(100L);\n             int type = (i++ % TYPES);\n \n             String msg;\n-            long msecs;\n+            double msecs;\n             \n             switch (type) {\n             case 0:\n             default:\n                 throw new Error();\n             }\n-            updateStats(type, (i % 17) == 0, msg, msecs, times);\n-        }\n-    }\n-    \n-    private void updateStats(int type, boolean doGc, String msg, long msecs, long[] times)\n+            updateStats(type, (i % 17) == 0, msg, msecs);\n+        }\n+    }\n+    \n+    private void updateStats(int type, boolean doGc, String msg, double msecs)\n         throws Exception\n     {\n         // skip first N rounds to let results stabilize\n         if (roundsDone >= WARMUP_ROUNDS) {\n-            times[type] += msecs;\n-        }\n-        System.out.printf(\"Test '%s' [hash: 0x%s] -> %d msecs\\n\", msg, this.hash, msecs);\n+            timeMsecs[type] += msecs;\n+        }\n+        System.out.printf(\"Test '%s' [hash: 0x%s] -> %.1f msecs\\n\", msg, this.hash, msecs);\n         if (type == 0) {\n             ++roundsDone;\n             if ((roundsDone % 3) == 0 && roundsDone > WARMUP_ROUNDS) {\n                 double den = (double) (roundsDone - WARMUP_ROUNDS);\n                 System.out.printf(\"Averages after %d rounds (Object / Array): %.1f / %.1f msecs\\n\",\n                         (int) den,\n-                        times[0] / den, times[1] / den);\n+                        timeMsecs[0] / den, timeMsecs[1] / den);\n                         \n             }\n             System.out.println();\n     \n     protected final long _testDeser(int reps, byte[] input, ObjectReader reader) throws Exception\n     {\n-        long start = System.currentTimeMillis();\n+        long start = System.nanoTime();\n         Object result = null;\n         while (--reps >= 0) {\n             result = reader.readValue(input);\n         }\n         hash = result.hashCode();\n-        return System.currentTimeMillis() - start;\n-    }\n-\n-    protected long testDeser1(int reps, String input, ObjectReader reader) throws Exception {\n-        return _testDeser(reps, input, reader);\n-    }\n-\n-    protected long testDeser2(int reps, String input, ObjectReader reader) throws Exception {\n-        return _testDeser(reps, input, reader);\n-    }\n-    \n-    protected final long _testDeser(int reps, String input, ObjectReader reader) throws Exception\n-    {\n-        long start = System.currentTimeMillis();\n+        // return microseconds\n+        return (System.nanoTime() - start) >> 10;\n+    }\n+\n+    protected double testDeser1(int reps, String input, ObjectReader reader) throws Exception {\n+        return _testDeser(reps, input, reader);\n+    }\n+\n+    protected double testDeser2(int reps, String input, ObjectReader reader) throws Exception {\n+        return _testDeser(reps, input, reader);\n+    }\n+    \n+    protected final double _testDeser(int reps, String input, ObjectReader reader) throws Exception\n+    {\n+        long start = System.nanoTime();\n         Object result = null;\n         while (--reps >= 0) {\n             result = reader.readValue(input);\n         }\n         hash = result.hashCode();\n-        return System.currentTimeMillis() - start;\n-    }\n-\n-    public static byte[] readAll(String filename) throws IOException\n+        return _msecsFromNanos(System.nanoTime() - start);\n+    }\n+\n+    protected final double _msecsFromNanos(long nanos) {\n+        return (nanos / 1000000.0);\n+    }\n+    \n+    protected static byte[] readAll(String filename) throws IOException\n     {\n         File f = new File(filename);\n         ByteArrayOutputStream bytes = new ByteArrayOutputStream((int) f.length());", "timestamp": 1398145975, "metainfo": ""}