{"sha": "3955abb9198e2fddad65c157610e62e301a0c4a7", "log": "Fixed #237", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java\n      * @since 2.2\n      */\n     FAIL_ON_INVALID_SUBTYPE(true),\n+\n+    /**\n+     * Feature that determines what happens when reading JSON content into tree\n+     * ({@link com.fasterxml.jackson.core.TreeNode}) and a duplicate key\n+     * is encountered (property name that was already seen for the JSON Object).\n+     * If enabled, {@link JsonMappingException} will be thrown; if disabled, no exception\n+     * is thrown and the new (later) value overwrites the earlier value.\n+     *<p>\n+     * Note that this property does NOT affect other aspects of data-binding; that is,\n+     * no detection is done with respect to POJO properties or {@link java.util.Map}\n+     * keys. New features may be added to control additional cases.\n+     * \n+     * @since 2.3\n+     */\n+    FAIL_ON_READING_DUP_TREE_KEY(false),\n     \n     /**\n      * Feature that determines whether Jackson code should catch\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer.java\n         throw new JsonMappingException(msg, jp.getTokenLocation());\n     }\n     \n+    /**\n+     * \n+     * @deprecated Since 2.3, use the overloaded variant\n+     */\n+    @Deprecated\n+    protected void _handleDuplicateField(String fieldName, ObjectNode objectNode,\n+                                         JsonNode oldValue, JsonNode newValue)\n+        throws JsonProcessingException\n+    {\n+        // By default, we don't do anything\n+        ;\n+    }\n+\n     /**\n      * Method called when there is a duplicate value for a field.\n      * By default we don't care, and the last value is used.\n      *   was added\n      * @param newValue Newly added value just added to the object node\n      */\n-    protected void _handleDuplicateField(String fieldName, ObjectNode objectNode,\n-                                         JsonNode oldValue, JsonNode newValue)\n+    protected void _handleDuplicateField(JsonParser jp, DeserializationContext ctxt,\n+            JsonNodeFactory nodeFactory,\n+            String fieldName, ObjectNode objectNode,\n+            JsonNode oldValue, JsonNode newValue)\n         throws JsonProcessingException\n     {\n-        // By default, we don't do anything\n-        ;\n+        // [Issue#237]: Report an error if asked to do so:\n+        if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY)) {\n+            _reportProblem(jp, \"Duplicate field '\"+fieldName+\"' for ObjectNode: not allowed when FAIL_ON_READING_DUP_TREE_KEY enabled\");\n+        }\n+        // Backwards-compatibility; call in case it's overloaded\n+        _handleDuplicateField(fieldName, objectNode, oldValue, newValue);\n     }\n     \n     /*\n             }\n             JsonNode old = node.replace(fieldName, value);\n             if (old != null) {\n-                _handleDuplicateField(fieldName, node, old, value);\n+                _handleDuplicateField(jp, ctxt, nodeFactory,\n+                        fieldName, node, old, value);\n             }\n         }\n         return node;\n--- a/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java\n         assertEquals(3, root3.size());\n         assertEquals(1, root3.path(\"a\").intValue());\n     }\n+\n+    // [Issue#237] (databind): support DeserializationFeature#FAIL_ON_READING_DUP_TREE_KEY\n+    public void testFailOnDupKeys() throws Exception\n+    {\n+        final String DUP_JSON = \"{ \\\"a\\\":1, \\\"a\\\":2 }\";\n+        \n+        // first: verify defaults:\n+        ObjectMapper mapper = new ObjectMapper();\n+        assertFalse(mapper.isEnabled(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY));\n+        ObjectNode root = (ObjectNode) mapper.readTree(DUP_JSON);\n+        assertEquals(2, root.path(\"a\").asInt());\n+        \n+        // and then enable checks:\n+        try {\n+            mapper.reader(DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY).readTree(DUP_JSON);\n+            fail(\"Should have thrown exception!\");\n+        } catch (JsonMappingException e) {\n+            verifyException(e, \"duplicate field 'a'\");\n+        }\n+    }\n }", "timestamp": 1370557798, "metainfo": ""}