{"sha": "a1e496f0e6da44ac68ae93a58cb1645d40ee5739", "log": "Added MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n import com.fasterxml.jackson.databind.BeanProperty;\n+import com.fasterxml.jackson.databind.PropertyName;\n import com.fasterxml.jackson.databind.util.Named;\n \n /**\n     }\n \n     /**\n+     * Method used to find possible wrapper name this logical property\n+     * may have.\n+     */\n+    public PropertyName findWrapperName() {\n+        return null;\n+    }\n+    \n+    /**\n      * Method used to check if this property is expected to have a value;\n      * and if none found, should either be considered invalid (and most likely\n      * fail deserialization), or handled by other means (by providing default\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n         if (naming != null) {\n             _renameUsing(naming);\n         }\n+        // and, if required, apply wrapper name\n+        if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\n+            _renameWithWrappers();\n+        }\n \n         /* Sort by visibility (explicit over implicit); drop all but first\n          * of member type (getter, setter etc) if there is visibility\n             property.trimByVisibility();\n         }\n \n-        // and then the final step, \"merge\" annotations\n+        // and then \"merge\" annotations\n         for (POJOPropertyBuilder property : _properties.values()) {\n             property.mergeAnnotations(_forSerialization);\n         }\n-\n+        \n         // well, almost last: there's still ordering...\n         _sortProperties();\n         return this;\n             }\n         }\n     }\n+\n+    protected void _renameWithWrappers()\n+    {\n+        /* 11-Sep-2012, tatu: To support 'MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME',\n+         *   need another round of renaming...\n+         */\n+        Iterator<Map.Entry<String,POJOPropertyBuilder>> it = _properties.entrySet().iterator();\n+        LinkedList<POJOPropertyBuilder> renamed = null;\n+        while (it.hasNext()) {\n+            Map.Entry<String, POJOPropertyBuilder> entry = it.next();\n+            POJOPropertyBuilder prop = entry.getValue();\n+            PropertyName wrapperName = prop.findWrapperName();\n+            if (wrapperName == null || !wrapperName.hasSimpleName()) {\n+                continue;\n+            }\n+            String name = wrapperName.getSimpleName();\n+            if (!name.equals(prop.getName())) {\n+                if (renamed == null) {\n+                    renamed = new LinkedList<POJOPropertyBuilder>();\n+                }\n+                prop = prop.withName(name);\n+                renamed.add(prop);\n+                it.remove();\n+            }\n+        }\n+        // and if any were renamed, merge back in...\n+        if (renamed != null) {\n+            for (POJOPropertyBuilder prop : renamed) {\n+                String name = prop.getName();\n+                POJOPropertyBuilder old = _properties.get(name);\n+                if (old == null) {\n+                    _properties.put(name, prop);\n+                } else {\n+                    old.addAll(prop);\n+                }\n+            }\n+        }\n+    }\n+    \n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n package com.fasterxml.jackson.databind.introspect;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.PropertyName;\n \n /**\n  * Helper class used for aggregating information about a single\n             }\n         });\n     }\n+\n+    @Override\n+    public PropertyName findWrapperName() {\n+        return fromMemberAnnotation(new WithMember<PropertyName>() {\n+            public PropertyName withMember(AnnotatedMember member) {\n+                PropertyName name = _annotationIntrospector.findWrapperName(member);\n+                if (name != null) {\n+                    name = _annotationIntrospector.findWrapperName(member);\n+                }\n+                return name;\n+            }\n+        });\n+    }\n     \n     /*\n     /**********************************************************\n         }\n         return renamed;\n     }\n-\n+    \n     // For trouble-shooting\n     @Override\n     public String toString()", "timestamp": 1347420312, "metainfo": ""}