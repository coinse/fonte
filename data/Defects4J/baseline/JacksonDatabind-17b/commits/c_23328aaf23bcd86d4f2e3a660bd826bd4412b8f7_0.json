{"sha": "23328aaf23bcd86d4f2e3a660bd826bd4412b8f7", "log": "Fix #245", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n         _attributes = config.getAttributes();\n     }\n \n+    /**\n+     * Copy-constructor for use with <code>copy()</code> by {@link ObjectMapper#copy()}\n+     */\n+    protected DeserializationContext(DeserializationContext src) {\n+        _cache = new DeserializerCache();\n+        _factory = src._factory;\n+\n+        _config = src._config;\n+        _featureFlags = src._featureFlags;\n+        _view = src._view;\n+        _injectableValues = null;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* DatabindContext implementation\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n         _subtypeResolver = src._subtypeResolver;\n         _rootNames = new RootNameLookup();\n         _typeFactory = src._typeFactory;\n-        _serializationConfig = src._serializationConfig;\n         HashMap<ClassKey,Class<?>> mixins = new HashMap<ClassKey,Class<?>>(src._mixInAnnotations);\n         _mixInAnnotations = mixins;\n         _serializationConfig = new SerializationConfig(src._serializationConfig, mixins);\n         _deserializationConfig = new DeserializationConfig(src._deserializationConfig, mixins);\n-        _serializerProvider = src._serializerProvider;\n-        _deserializationContext = src._deserializationContext;\n+        _serializerProvider = src._serializerProvider.copy();\n+        _deserializationContext = src._deserializationContext.copy();\n \n         // Default serializer factory is stateless, can just assign\n         _serializerFactory = src._serializerFactory;\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n \n     /**\n      * View used for currently active serialization, if any.\n+     * Only set for non-blueprint instances.\n      */\n     final protected Class<?> _serializationView;\n     \n \n     /**\n      * Factory used for constructing actual serializer instances.\n+     * Only set for non-blueprint instances.\n      */\n     final protected SerializerFactory _serializerFactory;\n \n     \n     /**\n      * Lazily-constructed holder for per-call attributes.\n+     * Only set for non-blueprint instances.\n      * \n      * @since 2.3\n      */\n         _unknownTypeSerializer = src._unknownTypeSerializer;\n         _keySerializer = src._keySerializer;\n         _nullValueSerializer = src._nullValueSerializer;\n+        _nullKeySerializer = src._nullKeySerializer;\n+\n         _stdNullValueSerializer = (_nullValueSerializer == DEFAULT_NULL_KEY_SERIALIZER);\n-        _nullKeySerializer = src._nullKeySerializer;\n+\n         _rootNames = src._rootNames;\n-\n+        \n         /* Non-blueprint instances do have a read-only map; one that doesn't\n          * need synchronization for lookups.\n          */\n \n         _serializationView = config.getActiveView();\n         _attributes = config.getAttributes();\n+    }\n+\n+    /**\n+     * Copy-constructor used when making a {@link #copy} of a blueprint\n+     * object.\n+     * \n+     * @since 2.4.4\n+     */\n+    protected SerializerProvider(SerializerProvider src)\n+    {\n+        // since this is assumed to be a blue-print instance, many settings missing:\n+        _config = null;\n+        _serializationView = null;\n+        _serializerFactory = null;\n+        _knownSerializers = null;\n+\n+        // and others initialized to default empty state\n+        _serializerCache = new SerializerCache();\n+        _rootNames = new RootNameLookup();\n+\n+        _unknownTypeSerializer = src._unknownTypeSerializer;\n+        _keySerializer = src._keySerializer;\n+        _nullValueSerializer = src._nullValueSerializer;\n+        _nullKeySerializer = src._nullKeySerializer;\n+\n+        _stdNullValueSerializer = src._stdNullValueSerializer;\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java\n package com.fasterxml.jackson.databind.deser;\n \n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.LinkedHashMap;\n-import java.util.List;\n+import java.util.*;\n import java.util.Map.Entry;\n \n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n         super(src, factory);\n     }\n \n+    /**\n+     * @since 2.4.4\n+     */\n+    protected DefaultDeserializationContext(DefaultDeserializationContext src) {\n+        super(src);\n+    }\n+    \n+    /**\n+     * Method needed to ensure that {@link ObjectMapper#copy} will work\n+     * properly; specifically, that caches are cleared, but settings\n+     * will otherwise remain identical; and that no sharing of state\n+     * occurs.\n+     * \n+     * @since 2.4.4\n+     */\n+    public DefaultDeserializationContext copy() {\n+        throw new IllegalStateException(\"DefaultDeserializationContext sub-class not overriding copy()\");\n+    }\n+\n     /*\n     /**********************************************************\n     /* Abstract methods impls, Object Id\n             super(src, config, jp, values);\n         }\n \n+        protected Impl(Impl src) { super(src); }\n+        \n         protected Impl(Impl src, DeserializerFactory factory) {\n             super(src, factory);\n+        }\n+\n+        @Override\n+        public DefaultDeserializationContext copy() {\n+            if (getClass() != Impl.class) {\n+                return super.copy();\n+            }\n+           return new Impl(this);\n         }\n         \n         @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n import java.util.concurrent.atomic.AtomicReference;\n \n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n-\n import com.fasterxml.jackson.core.JsonGenerator;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n         super(src, config, f);\n     }\n \n+    protected DefaultSerializerProvider(DefaultSerializerProvider src) {\n+        super(src);\n+    }\n+\n+    /**\n+     * Method needed to ensure that {@link ObjectMapper#copy} will work\n+     * properly; specifically, that caches are cleared, but settings\n+     * will otherwise remain identical; and that no sharing of state\n+     * occurs.\n+     * \n+     * @since 2.4.4\n+     */\n+    public DefaultSerializerProvider copy() {\n+        throw new IllegalStateException(\"DefaultSerializerProvider sub-class not overriding copy()\");\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Extended API: methods that ObjectMapper will call\n         private static final long serialVersionUID = 1L;\n \n         public Impl() { super(); }\n+        public Impl(Impl src) { super(src); }\n \n         protected Impl(SerializerProvider src, SerializationConfig config,SerializerFactory f) {\n             super(src, config, f);\n         }\n \n+        @Override\n+        public DefaultSerializerProvider copy()\n+        {\n+            if (getClass() != Impl.class) {\n+                return super.copy();\n+            }\n+            return new Impl(this);\n+        }\n+        \n         @Override\n         public Impl createInstance(SerializationConfig config, SerializerFactory jsf) {\n             return new Impl(this, config, jsf);\n--- a/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForClass.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/mixins/TestMixinSerForClass.java\n         assertEquals(1, result.size());\n         assertEquals(\"c2\", result.get(\"c\"));\n \n-        // and related to [databind#245], retry with a copy\n-        ObjectMapper mapper2 = mapper.copy();\n+        // and related to [databind#245], apply mix-ins to a copy of ObjectMapper\n+        ObjectMapper mapper2 = new ObjectMapper();\n         result = writeAndMap(mapper2, bean);\n+        assertEquals(2, result.size());\n+        ObjectMapper mapper3 = mapper2.copy();\n+        mapper3.addMixInAnnotations(BaseClass.class, MixInAutoDetect.class);\n+        result = writeAndMap(mapper3, bean);\n         assertEquals(1, result.size());\n         assertEquals(\"c2\", result.get(\"c\"));\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestNullSerialization.java\n         public MyNullProvider() { super(); }\n         public MyNullProvider(MyNullProvider base, SerializationConfig config, SerializerFactory jsf) {\n             super(base, config, jsf);\n+        }\n+\n+        // not really a proper impl, but has to do\n+        @Override\n+        public DefaultSerializerProvider copy() {\n+            return this;\n         }\n         \n         @Override", "timestamp": 1414561095, "metainfo": ""}