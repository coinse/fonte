{"sha": "eb7924e8edb2f172ea9109a1a83539a6616332a3", "log": "Completed [Issue#40]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java\n import java.util.HashMap;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.annotation.NoClass;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n                         mlt, beanDesc);\n             }\n             if (type.isCollectionLikeType()) {\n-                CollectionLikeType clt = (CollectionLikeType) type;\n-                if (clt.isTrueCollectionType()) {\n-                    return (JsonDeserializer<Object>) factory.createCollectionDeserializer(ctxt,\n-                            (CollectionType) clt, beanDesc);\n-                }\n-                return (JsonDeserializer<Object>) factory.createCollectionLikeDeserializer(ctxt,\n-                        clt, beanDesc);\n+                /* 03-Aug-2012, tatu: As per [Issue#40], one exception is if shape\n+                 *   is to be Shape.OBJECT. Ideally we'd determine it bit later on\n+                 *   (to allow custom handler checks), but that won't work for other\n+                 *   reasons. So do it here.\n+                 */\n+                JsonFormat.Value format = beanDesc.findExpectedFormat(null);\n+                if (format == null || format.getShape() != JsonFormat.Shape.OBJECT) {\n+                    CollectionLikeType clt = (CollectionLikeType) type;\n+                    if (clt.isTrueCollectionType()) {\n+                        return (JsonDeserializer<Object>) factory.createCollectionDeserializer(ctxt,\n+                                (CollectionType) clt, beanDesc);\n+                    }\n+                    return (JsonDeserializer<Object>) factory.createCollectionLikeDeserializer(ctxt,\n+                            clt, beanDesc);\n+                }\n             }\n         }\n         if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization.java\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.*;\n-import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.databind.*;\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestFormatForCollections.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestFormatForCollections.java\n package com.fasterxml.jackson.databind.struct;\n \n import java.util.ArrayList;\n+import java.util.List;\n \n import com.fasterxml.jackson.annotation.*;\n import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n         @JsonProperty(\"size\")\n         public int foo() { return size(); }\n         \n-        public String[] getValues() {\n-            return toArray(new String[size()]);\n+        public List<String> getValues() {\n+            return new ArrayList<String>(this);\n         }\n+\n+        public void setValues(List<String> v) {\n+            addAll(v);\n+        }\n+        \n+        // bogus setter to handle \"size\" property\n+        public void setSize(int i) { }\n     }\n \n     /*", "timestamp": 1344054458, "metainfo": ""}