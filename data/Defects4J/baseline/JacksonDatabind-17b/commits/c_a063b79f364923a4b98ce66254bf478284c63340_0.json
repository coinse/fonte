{"sha": "a063b79f364923a4b98ce66254bf478284c63340", "log": "Fixes to make TokenBuffer (etc) support 'readBinaryValue()'; also improve handling of custom serializers (wasn't being resolved for array types)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/node/TreeTraversingParser.java\n package com.fasterxml.jackson.databind.node;\n \n import java.io.IOException;\n+import java.io.OutputStream;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n         return null;\n     }\n \n+\n+    @Override\n+    public int readBinaryValue(Base64Variant b64variant, OutputStream out)\n+            throws IOException, JsonParseException\n+    {\n+        byte[] data = getBinaryValue(b64variant);\n+        if (data != null) {\n+            out.write(data, 0, data.length);\n+            return data.length;\n+        }\n+        return 0;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Internal methods\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n             TypeSerializer elementTypeSerializer, JsonSerializer<Object> elementValueSerializer)\n         throws JsonMappingException\n     {\n+         // Module-provided custom collection serializers?\n+         for (Serializers serializers : customSerializers()) {\n+             JsonSerializer<?> ser = serializers.findArraySerializer(config,\n+                     type, beanDesc, elementTypeSerializer, elementValueSerializer);\n+             if (ser != null) {\n+                 return ser;\n+             }\n+         }\n         Class<?> raw = type.getRawClass();\n         // Important: do NOT use standard serializers if non-standard element value serializer specified\n         if (elementValueSerializer == null || ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n             }\n         }\n \n-        // Modules may provide serializers of all types:\n-        for (Serializers serializers : _factoryConfig.serializers()) {\n-            ser = serializers.findSerializer(config, type, beanDesc);\n-            if (ser != null) {\n-                return (JsonSerializer<Object>) ser;\n-            }\n-        }\n-\n         // Then JsonSerializable, @JsonValue etc:\n         ser = findSerializerByAnnotations(prov, type, beanDesc);\n         if (ser != null) {\n             return (JsonSerializer<Object>) ser;\n         }\n         \n-        // Container types differ from non-container types:\n+        // Container types differ from non-container types\n+        // (note: called method checks for module-provided serializers)\n         if (origType.isContainerType()) {\n             if (!staticTyping) {\n                 staticTyping = usesStaticTyping(config, beanDesc, null, property);\n-                \n                 // [JACKSON-822]: Need to figure out how to force passed parameterization\n                 //  to stick...\n                 /*\n             }\n             return (JsonSerializer<Object>) buildContainerSerializer(prov,\n                     type, beanDesc, property, staticTyping);\n+        }\n+\n+        // Modules may provide serializers of POJO types:\n+        for (Serializers serializers : customSerializers()) {\n+            ser = serializers.findSerializer(config, type, beanDesc);\n+            if (ser != null) {\n+                return (JsonSerializer<Object>) ser;\n+            }\n         }\n         \n         /* Otherwise, we will check \"primary types\"; both marker types that\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.OutputStream;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n             return builder.toByteArray();\n         }\n \n+        @Override\n+        public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException, JsonParseException\n+        {\n+            byte[] data = getBinaryValue(b64variant);\n+            if (data != null) {\n+                out.write(data, 0, data.length);\n+                return data.length;\n+            }\n+            return 0;\n+        }\n+        \n         /*\n         /**********************************************************\n         /* Internal methods\n--- a/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/TestFormatSchema.java\n \n         @Override\n         protected void _closeInput() throws IOException {\n+        }\n+\n+        @Override\n+        public int readBinaryValue(Base64Variant b64variant, OutputStream out) {\n+            return 0;\n         }\n     }\n ", "timestamp": 1339638445, "metainfo": ""}