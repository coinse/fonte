{"sha": "b2d3c7d55b46ee36a7435495e1fa97cac9acf687", "log": "Bit more work on view handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java\n     protected final DeserializationConfig _config;\n \n     protected final int _featureFlags;\n+\n+    protected final Class<?> _view;\n     \n     /*\n     /**********************************************************\n     {\n         _config = config;\n         _featureFlags = config.getFeatureFlags();\n+        _view = config.getActiveView();\n     }\n \n     /*\n \n     public final boolean isEnabled(MapperConfig.Feature feat) {\n         return _config.isEnabled(feat);\n+    }\n+\n+    public final Class<?> getActiveView() {\n+        return _view;\n     }\n     \n     public final boolean canOverrideAccessModifiers() {\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectWriter.java\n      * Note that the method does NOT change state of this reader, but\n      * rather construct and returns a newly configured instance.\n      */\n-    public ObjectWriter withView(Class<?> view)\n-    {\n-        return (view == _config.getSerializationView()) ? this\n-            : new ObjectWriter(this, _config.withView(view));\n+    public ObjectWriter withView(Class<?> view) {\n+        SerializationConfig newConfig = _config.withView(view);\n+        return (newConfig == _config) ? this :  new ObjectWriter(this, newConfig);\n     }    \n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializationConfig.java\n     /**********************************************************\n      */\n \n-    /**\n-     * Method for checking which serialization view is being used,\n-     * if any; null if none.\n-     */\n-    public Class<?> getSerializationView() { return _view; }\n-\n     public JsonInclude.Include getSerializationInclusion()\n     {\n         if (_serializationInclusion != null) {\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n     protected SerializerProvider(SerializationConfig config)\n     {\n         _config = config;\n-        _serializationView = (config == null) ? null : _config.getSerializationView();\n+        _serializationView = (config == null) ? null : _config.getActiveView();\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig.java\n     \n     /*\n     /**********************************************************\n+    /* Configuration: introspection support\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Accessor for getting bean description that only contains class\n+     * annotations: useful if no getter/setter/creator information is needed.\n+     */\n+    public BeanDescription introspectClassAnnotations(Class<?> cls) {\n+        return introspectClassAnnotations(constructType(cls));\n+    }\n+    \n+    /**\n+     * Accessor for getting bean description that only contains class\n+     * annotations: useful if no getter/setter/creator information is needed.\n+     */\n+    public abstract BeanDescription introspectClassAnnotations(JavaType type);\n+\n+    /**\n+     * Accessor for getting bean description that only contains immediate class\n+     * annotations: ones from the class, and its direct mix-in, if any, but\n+     * not from super types.\n+     */\n+    public BeanDescription introspectDirectClassAnnotations(Class<?> cls) {\n+        return introspectDirectClassAnnotations(constructType(cls));\n+    }\n+    /**\n+     * Accessor for getting bean description that only contains immediate class\n+     * annotations: ones from the class, and its direct mix-in, if any, but\n+     * not from super types.\n+     */\n+    public abstract BeanDescription introspectDirectClassAnnotations(JavaType type);\n+\n+    /*\n+    /**********************************************************\n     /* Configuration: other\n     /**********************************************************\n      */\n     public final DateFormat getDateFormat() { return _base.getDateFormat(); }\n \n     /**\n-     * Accessor for getting bean description that only contains class\n-     * annotations: useful if no getter/setter/creator information is needed.\n-     */\n-    public BeanDescription introspectClassAnnotations(Class<?> cls) {\n-        return introspectClassAnnotations(constructType(cls));\n-    }\n-    \n-    /**\n-     * Accessor for getting bean description that only contains class\n-     * annotations: useful if no getter/setter/creator information is needed.\n-     */\n-    public abstract BeanDescription introspectClassAnnotations(JavaType type);\n-\n-    /**\n-     * Accessor for getting bean description that only contains immediate class\n-     * annotations: ones from the class, and its direct mix-in, if any, but\n-     * not from super types.\n-     */\n-    public BeanDescription introspectDirectClassAnnotations(Class<?> cls) {\n-        return introspectDirectClassAnnotations(constructType(cls));\n-    }\n-    /**\n-     * Accessor for getting bean description that only contains immediate class\n-     * annotations: ones from the class, and its direct mix-in, if any, but\n-     * not from super types.\n-     */\n-    public abstract BeanDescription introspectDirectClassAnnotations(JavaType type);\n-        \n+     * Accessor for finding currently active view, if any (null if none)\n+     */\n+    public abstract Class<?> getActiveView();\n+    \n     /*\n     /**********************************************************\n     /* Methods for instantiating handlers\n--- a/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase.java\n     public final String getRootName() {\n         return _rootName;\n     }\n+\n+    public final Class<?> getActiveView() {\n+        return _view;\n+    }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n      * values to consider.\n      */\n     protected boolean _nonStandardCreation;\n+\n+    /**\n+     * Flag that indicates that no \"special features\" whatsoever\n+     * are enabled, so the simplest processing is possible.\n+     */\n+    protected boolean _vanillaProcessing;\n     \n     /*\n     /**********************************************************\n             ;\n \n         _needViewProcesing = hasViews;    \n+\n+        _vanillaProcessing = !_nonStandardCreation\n+                && (_injectables == null)\n+                && !_needViewProcesing\n+                ;\n     }\n \n     /**\n         _nonStandardCreation = src._nonStandardCreation;\n         _unwrappedPropertyHandler = src._unwrappedPropertyHandler;\n         _needViewProcesing = src._needViewProcesing;\n+\n+        _vanillaProcessing = src._vanillaProcessing;\n     }\n     \n     protected BeanDeserializer(BeanDeserializer src, NameTransformer unwrapper)\n             _beanProperties = src._beanProperties;\n         }\n         _needViewProcesing = src._needViewProcesing;\n+        // probably adds a twist, so:\n+        _vanillaProcessing = false;        \n     }\n \n     @Override\n         if (unwrapped != null) { // we consider this non-standard, to offline handling\n             _nonStandardCreation = true;\n         }\n+\n+        // may need to disable vanilla processing, if unwrapped handling was enabled...\n+        _vanillaProcessing = _vanillaProcessing && !_nonStandardCreation;\n     }\n \n     /**\n         JsonToken t = jp.getCurrentToken();\n         // common case first:\n         if (t == JsonToken.START_OBJECT) {\n-            jp.nextToken();\n+            t = jp.nextToken();\n+            if (_vanillaProcessing) {\n+                return vanillaDeserialize(jp, ctxt, t);\n+            }\n             return deserializeFromObject(jp, ctxt);\n         }\n         // and then others, generally requiring use of @JsonCreator\n     @Override\n     public Object deserialize(JsonParser jp, DeserializationContext ctxt, Object bean)\n         throws IOException, JsonProcessingException\n-    {\n+    {        \n         if (_injectables != null) {\n             injectValues(ctxt, bean);\n         }\n         }\n         if (_externalTypeIdHandler != null) {\n             return deserializeWithExternalTypeId(jp, ctxt, bean);\n+        }\n+        if (_needViewProcesing) {\n+            Class<?> view = ctxt.getActiveView();\n+            if (view != null) {\n+                return deserializeWithView(jp, ctxt, bean, view);\n+            }\n         }\n         JsonToken t = jp.getCurrentToken();\n         // 23-Mar-2010, tatu: In some cases, we start with full JSON object too...\n     /* Concrete deserialization methods\n     /**********************************************************\n      */\n-    \n+\n+    /**\n+     * Streamlined version that is only used when no \"special\"\n+     * features are enabled.\n+     */\n+    private final Object vanillaDeserialize(JsonParser jp, DeserializationContext ctxt,\n+            JsonToken t)\n+        throws IOException, JsonProcessingException\n+    {\n+        final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n+        for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) {\n+            String propName = jp.getCurrentName();\n+            // Skip field name:\n+            jp.nextToken();\n+            SettableBeanProperty prop = _beanProperties.find(propName);\n+            if (prop != null) { // normal case\n+                try {\n+                    prop.deserializeAndSet(jp, ctxt, bean);\n+                } catch (Exception e) {\n+                    wrapAndThrow(e, bean, propName, ctxt);\n+                }\n+            } else {\n+                _vanillaDeserializeHandleUnknown(jp, ctxt, bean, propName);\n+            }\n+        }\n+        return bean;\n+    }\n+\n+    /**\n+     * Helper method called for an unknown property, when using \"vanilla\"\n+     * processing.\n+     */\n+    private final void _vanillaDeserializeHandleUnknown(JsonParser jp, DeserializationContext ctxt,\n+            Object bean, String propName)\n+        throws IOException, JsonProcessingException\n+    {\n+        if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n+            jp.skipChildren();\n+        } else if (_anySetter != null) {\n+            try {\n+                _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n+            } catch (Exception e) {\n+                wrapAndThrow(e, bean, propName, ctxt);\n+            }\n+        } else {\n+            // Unknown: let's call handler method\n+            handleUnknownProperty(jp, ctxt, bean, propName);         \n+        }\n+    }\n+\n+    /**\n+     * General version used when handling needs more advanced\n+     * features.\n+     */\n     public Object deserializeFromObject(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n             }\n             return deserializeFromObjectUsingNonDefault(jp, ctxt);\n         }\n-\n         final Object bean = _valueInstantiator.createUsingDefault(ctxt);\n         if (_injectables != null) {\n             injectValues(ctxt, bean);\n+        }\n+        if (_needViewProcesing) {\n+            Class<?> view = ctxt.getActiveView();\n+            if (view != null) {\n+                return deserializeWithView(jp, ctxt, bean, view);\n+            }\n         }\n         for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) {\n             String propName = jp.getCurrentName();\n         // and/or things left to process via main parser?\n         if (jp != null) {\n             bean = deserialize(jp, ctxt, bean);\n+        }\n+        return bean;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Deserializing when we have to consider an active View\n+    /**********************************************************\n+     */\n+    \n+    protected final Object deserializeWithView(JsonParser jp, DeserializationContext ctxt,\n+            Object bean, Class<?> activeView)\n+        throws IOException, JsonProcessingException\n+    {\n+        JsonToken t = jp.getCurrentToken();\n+        for (; t == JsonToken.FIELD_NAME; t = jp.nextToken()) {\n+            String propName = jp.getCurrentName();\n+            // Skip field name:\n+            jp.nextToken();\n+            SettableBeanProperty prop = _beanProperties.find(propName);\n+            \n+            if (prop != null) { // normal case\n+                try {\n+                    prop.deserializeAndSet(jp, ctxt, bean);\n+                } catch (Exception e) {\n+                    wrapAndThrow(e, bean, propName, ctxt);\n+                }\n+                continue;\n+            }\n+            /* As per [JACKSON-313], things marked as ignorable should not be\n+             * passed to any setter\n+             */\n+            if (_ignorableProps != null && _ignorableProps.contains(propName)) {\n+                jp.skipChildren();\n+            } else if (_anySetter != null) {\n+                _anySetter.deserializeAndSet(jp, ctxt, bean, propName);\n+                continue;\n+            } else {\n+                // Unknown: let's call handler method\n+                handleUnknownProperty(jp, ctxt, bean, propName);\n+            }\n         }\n         return bean;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java\n     public ThrowableDeserializer(BeanDeserializer baseDeserializer)\n     {\n         super(baseDeserializer);\n+        // need to disable this, since we do post-processing\n+        _vanillaProcessing = false;\n     }\n \n     /**", "timestamp": 1327729308, "metainfo": ""}