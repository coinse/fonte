{"sha": "c6c8859648b9dda9eee7f7c00850b1f8be0599c7", "log": "test renaming", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     public <T> T readValue(File src, Class<T> valueType)\n         throws IOException, JsonParseException, JsonMappingException\n     {\n-     // !!! TODO\n-//    \t_setupClassLoaderForDeserialization(valueType);\n         return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType));\n     } \n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestNameConflicts.java\n+package com.fasterxml.jackson.databind.introspect;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestNameConflicts extends BaseMapTest\n+{\n+    static class Bean193\n+    {\n+        @JsonProperty(\"val1\")\n+        private int x;\n+        @JsonIgnore\n+        private int value2;\n+        \n+        public Bean193(@JsonProperty(\"val1\")int value1,\n+                    @JsonProperty(\"val2\")int value2)\n+        {\n+            this.x = value1;\n+            this.value2 = value2;\n+        }\n+        \n+        @JsonProperty(\"val2\")\n+        int x()\n+        {\n+            return value2;\n+        }\n+    }\n+\n+    /* We should only report an exception for cases where there is\n+     * real ambiguity as to how to rename things; but not when everything\n+     * has been explicitly defined\n+     */\n+    // [Issue#327]\n+    @JsonPropertyOrder({ \"prop1\", \"prop2\" })\n+    static class BogusConflictBean\n+    {\n+        @JsonProperty(\"prop1\")\n+        public int a = 2;\n+\n+        @JsonProperty(\"prop2\")\n+        public int getA() {\n+            return 1;\n+        }\n+    }\n+\n+    // Bean that should not have conflicts, but could be problematic\n+    static class MultipleTheoreticalGetters\n+    {\n+        public MultipleTheoreticalGetters() { }\n+\n+        public MultipleTheoreticalGetters(@JsonProperty(\"a\") int foo) {\n+            ;\n+        }\n+        \n+        @JsonProperty\n+        public int getA() { return 3; }\n+\n+        public int a() { return 5; }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    // [Issue#193]\n+    public void testIssue193() throws Exception\n+    {\n+        String json = objectWriter().writeValueAsString(new Bean193(1, 2));\n+        assertNotNull(json);\n+    }\n+\n+    // [Issue#327]\n+    public void testNonConflict() throws Exception\n+    {\n+        String json = objectMapper().writeValueAsString(new BogusConflictBean());\n+        assertEquals(aposToQuotes(\"{'prop1':2,'prop2':1}\"), json);\n+    }    \n+\n+    public void testHypotheticalGetters() throws Exception\n+    {\n+        String json = objectWriter().writeValueAsString(new MultipleTheoreticalGetters());\n+        assertEquals(aposToQuotes(\"{'a':3}\"), json);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyRename.java\n+package com.fasterxml.jackson.databind.introspect;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.databind.*;\n+\n+/**\n+ * Unit tests verifying handling of potential and actual\n+ * conflicts, regarding property handling.\n+ */\n+public class TestPropertyRename extends BaseMapTest\n+{\n+    static class Bean323WithIgnore { \n+        @JsonIgnore\n+        private int a;\n+\n+        public Bean323WithIgnore(@JsonProperty(\"a\") final int a ) {\n+            this.a = a;\n+        }\n+\n+        @JsonProperty(\"b\")\n+        private int getA () {\n+            return a;\n+        }\n+    }    \n+\n+    static class Bean323WithExplicitCleave1 { \n+        @JsonProperty(\"a\")\n+        private int a;\n+\n+        public Bean323WithExplicitCleave1(@JsonProperty(\"a\") final int a ) {\n+            this.a = a;\n+        }\n+\n+        @JsonProperty(\"b\")\n+        private int getA () {\n+            return a;\n+        }\n+    } \n+\n+    @JsonPropertyOrder({ \"a\",\"b\" })\n+    static class Bean323WithExplicitCleave2 { \n+        @JsonProperty(\"b\")\n+        private int a;\n+\n+        public Bean323WithExplicitCleave2(@JsonProperty(\"a\") final int a ) {\n+            this.a = a;\n+        }\n+\n+        @JsonProperty(\"b\")\n+        private int getA () {\n+            return a;\n+        }\n+    }    \n+   \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    public void testCreatorPropRenameWithIgnore() throws Exception\n+    {\n+        Bean323WithIgnore input = new Bean323WithIgnore(7);\n+        assertEquals(\"{\\\"b\\\":7}\", objectWriter().writeValueAsString(input));\n+    }\n+\n+    public void testCreatorPropRenameWithCleave() throws Exception\n+    {\n+        assertEquals(\"{\\\"a\\\":7,\\\"b\\\":7}\", objectWriter().writeValueAsString(new Bean323WithExplicitCleave1(7)));\n+        assertEquals(\"{\\\"b\\\":7}\", objectWriter().writeValueAsString(new Bean323WithExplicitCleave2(7)));\n+    }\n+}", "timestamp": 1401490870, "metainfo": ""}