{"sha": "61add0346b9bca1caee8f229b2866be9d1dcd37f", "log": "Adding support for (eventually) handling Object Id forward references; unit test (now failing) to verify functionality", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java\n      * is done.\n      */\n     public boolean isCachable() { return false; }\n+\n+    /**\n+     * Accessor that can be used to check whether this deserializer\n+     * is expecting to possibly get an Object Identifier value instead of full value\n+     * serialization, and if so, should be able to resolve it to actual\n+     * Object instance to return as deserialized value.\n+     *<p>\n+     * Default implementation returns false, as support can not be implemented\n+     * generically. Some standard deserializers (most notably\n+     * {@link com.fasterxml.jackson.databind.deser.BeanDeserializer})\n+     * do implement this feature, and may return true depending on exact\n+     * configuration of instance (which is based on type, and referring property).\n+     * \n+     * @return True if this deserializer can be given an Object Identifier\n+     *    instead of full value serialization\n+     * \n+     * @since 2.0\n+     */\n+    public boolean canResolveObjectId() { return false; }\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n     public abstract BeanDeserializerBase withObjectIdReader(ObjectIdReader oir);\n \n     public abstract BeanDeserializerBase withIgnorableProperties(HashSet<String> ignorableProps);\n-    \n-    /*\n-    /**********************************************************\n-    /* Public accessors\n-    /**********************************************************\n-     */\n-\n-    @Override\n-    public boolean isCachable() { return true; }\n-    \n-    public boolean hasProperty(String propertyName) {\n-        return _beanProperties.find(propertyName) != null;\n-    }\n-\n-    public boolean hasViews() {\n-        return _needViewProcesing;\n-    }\n-    \n-    /**\n-     * Accessor for checking number of deserialized properties.\n-     */\n-    public int getPropertyCount() { \n-        return _beanProperties.size();\n-    }\n-\n-    public final Class<?> getBeanClass() { return _beanType.getRawClass(); }\n-\n-    @Override public JavaType getValueType() { return _beanType; }\n-\n-    /**\n-     * Accessor for iterating over properties this deserializer uses; with\n-     * the exception that properties passed via Creator methods\n-     * (specifically, \"property-based constructor\") are not included,\n-     * but can be accessed separate by calling\n-     * {@link #creatorProperties}\n-     */\n-    public Iterator<SettableBeanProperty> properties()\n-    {\n-        if (_beanProperties == null) {\n-            throw new IllegalStateException(\"Can only call after BeanDeserializer has been resolved\");\n-        }\n-        return _beanProperties.allProperties();\n-    }\n-\n-    /**\n-     * Accessor for finding properties that represents values to pass\n-     * through property-based creator method (constructor or\n-     * factory method)\n-     * \n-     * @since 2.0\n-     */\n-    public Iterator<SettableBeanProperty> creatorProperties()\n-    {\n-        if (_propertyBasedCreator == null) {\n-            return Collections.<SettableBeanProperty>emptyList().iterator();\n-        }\n-        return _propertyBasedCreator.properties().iterator();\n-    }\n-\n-    /**\n-     * Accessor for finding the property with given name, if POJO\n-     * has one. Name used is the external name, i.e. name used\n-     * in external data representation (JSON).\n-     * \n-     * @since 2.0\n-     */\n-    public SettableBeanProperty findProperty(String propertyName)\n-    {\n-        SettableBeanProperty prop = (_beanProperties == null) ?\n-                null : _beanProperties.find(propertyName);\n-        if (prop == null && _propertyBasedCreator != null) {\n-            prop = _propertyBasedCreator.findCreatorProperty(propertyName);\n-        }\n-        return prop;\n-    }\n-    \n-    /**\n-     * Method needed by {@link BeanDeserializerFactory} to properly link\n-     * managed- and back-reference pairs.\n-     */\n-    public SettableBeanProperty findBackReference(String logicalName)\n-    {\n-        if (_backRefs == null) {\n-            return null;\n-        }\n-        return _backRefs.get(logicalName);\n-    }\n-\n-    public ValueInstantiator getValueInstantiator() {\n-        return _valueInstantiator;\n-    }\n \n     /*\n     /**********************************************************\n \n     /*\n     /**********************************************************\n+    /* Public accessors\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public boolean isCachable() { return true; }\n+\n+    /**\n+     * Overridden to return tru for those instances that are\n+     * handling value for which Object Identity handling is enabled\n+     * (either via value type or referring property).\n+     */\n+    @Override\n+    public boolean canResolveObjectId() {\n+        return _objectIdReader != null;\n+    }\n+    \n+    public boolean hasProperty(String propertyName) {\n+        return _beanProperties.find(propertyName) != null;\n+    }\n+\n+    public boolean hasViews() {\n+        return _needViewProcesing;\n+    }\n+    \n+    /**\n+     * Accessor for checking number of deserialized properties.\n+     */\n+    public int getPropertyCount() { \n+        return _beanProperties.size();\n+    }\n+\n+    public final Class<?> getBeanClass() { return _beanType.getRawClass(); }\n+\n+    @Override public JavaType getValueType() { return _beanType; }\n+\n+    /**\n+     * Accessor for iterating over properties this deserializer uses; with\n+     * the exception that properties passed via Creator methods\n+     * (specifically, \"property-based constructor\") are not included,\n+     * but can be accessed separate by calling\n+     * {@link #creatorProperties}\n+     */\n+    public Iterator<SettableBeanProperty> properties()\n+    {\n+        if (_beanProperties == null) {\n+            throw new IllegalStateException(\"Can only call after BeanDeserializer has been resolved\");\n+        }\n+        return _beanProperties.allProperties();\n+    }\n+\n+    /**\n+     * Accessor for finding properties that represents values to pass\n+     * through property-based creator method (constructor or\n+     * factory method)\n+     * \n+     * @since 2.0\n+     */\n+    public Iterator<SettableBeanProperty> creatorProperties()\n+    {\n+        if (_propertyBasedCreator == null) {\n+            return Collections.<SettableBeanProperty>emptyList().iterator();\n+        }\n+        return _propertyBasedCreator.properties().iterator();\n+    }\n+\n+    /**\n+     * Accessor for finding the property with given name, if POJO\n+     * has one. Name used is the external name, i.e. name used\n+     * in external data representation (JSON).\n+     * \n+     * @since 2.0\n+     */\n+    public SettableBeanProperty findProperty(String propertyName)\n+    {\n+        SettableBeanProperty prop = (_beanProperties == null) ?\n+                null : _beanProperties.find(propertyName);\n+        if (prop == null && _propertyBasedCreator != null) {\n+            prop = _propertyBasedCreator.findCreatorProperty(propertyName);\n+        }\n+        return prop;\n+    }\n+    \n+    /**\n+     * Method needed by {@link BeanDeserializerFactory} to properly link\n+     * managed- and back-reference pairs.\n+     */\n+    public SettableBeanProperty findBackReference(String logicalName)\n+    {\n+        if (_backRefs == null) {\n+            return null;\n+        }\n+        return _backRefs.get(logicalName);\n+    }\n+\n+    public ValueInstantiator getValueInstantiator() {\n+        return _valueInstantiator;\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Partial deserializer implementation\n     /**********************************************************\n      */\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdProperty.java\n     @Override\n     public Object setAndReturn(Object instance, Object value)\n    \t\tthrows IOException\n-\t{\n+    {\n         SettableBeanProperty idProp = _objectIdReader.idProperty;\n         if (idProp == null) {\n         \tthrow new UnsupportedOperationException(\n-        \t\t\t\"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\");\n+        \t        \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\");\n         }\n         return idProp.setAndReturn(instance, value);\n-\t}\n+    }\n }", "timestamp": 1330304565, "metainfo": ""}