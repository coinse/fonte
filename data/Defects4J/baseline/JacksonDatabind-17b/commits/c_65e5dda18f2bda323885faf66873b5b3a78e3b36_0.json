{"sha": "65e5dda18f2bda323885faf66873b5b3a78e3b36", "log": "working, but passed type information isn't precise enough for collection as array", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/ArraySchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/ArraySchema.java\n \tpublic static class ArrayItems extends ArraySchema.Items {\n \t\t@JsonProperty\n \t\tprivate Schema[] schemas;\n+\t\t\n+\t\t/* (non-Javadoc)\n+\t\t * @see com.fasterxml.jackson.databind.jsonschema.types.ArraySchema.Items#isArrayItems()\n+\t\t */\n+\t\t@Override\n+\t\tpublic boolean isArrayItems() { return true; }\n+\t\t\n+\t\t/* (non-Javadoc)\n+\t\t * @see com.fasterxml.jackson.databind.jsonschema.types.ArraySchema.Items#asArrayItems()\n+\t\t */\n+\t\t@Override\n+\t\tpublic ArrayItems asArrayItems() { return this; }\n \t}\n \t\n \t/**\n \t   MUST be a schema or an array of schemas.  The default value is an\n \t   empty schema which allows any value for items in the instance array.\n \t */\n-\tpublic static abstract class Items {}\n+\tpublic static abstract class Items {\n+\t\tpublic boolean isSingleItems() { return false; }\n+\t\tpublic boolean isArrayItems() { return false; }\n+\t\t\n+\t\tpublic SingleItems asSingleItems() { return null; }\n+\t\tpublic ArrayItems asArrayItems() { return null; }\n+\t}\n \t\n \t/**\n \t *  This can be false\n \tpublic static class SingleItems extends ArraySchema.Items {\n \t\t@JsonProperty\n \t\tprivate Schema schema;\n+\t\t\t\n \t\tpublic SingleItems(Schema schema) {\n \t\t\tthis.schema = schema;\n \t\t}\n+\t\t\n+\t\t/**\n+\t\t * {@link ArraySchema.SingleItems#schema}\n+\t\t * @return the schema\n+\t\t */\n+\t\tpublic Schema getSchema() {\n+\t\t\treturn schema;\n+\t\t}\n+\t\t\n+\t\t/**\n+\t\t * {@link ArraySchema.SingleItems#schema}\n+\t\t * @param schema the schema to set\n+\t\t */\n+\t\tpublic void setSchema(Schema schema) {\n+\t\t\tthis.schema = schema;\n+\t\t}\n+\t\t\n+\t\t/* (non-Javadoc)\n+\t\t * @see com.fasterxml.jackson.databind.jsonschema.types.ArraySchema.Items#isSingleItems()\n+\t\t */\n+\t\t@Override\n+\t\tpublic boolean isSingleItems() { return true; }\n+\t\t\n+\t\t/* (non-Javadoc)\n+\t\t * @see com.fasterxml.jackson.databind.jsonschema.types.ArraySchema.Items#asSingleItems()\n+\t\t */\n+\t\t@Override\n+\t\tpublic SingleItems asSingleItems() { return this; }\n \t}\n  }\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/ObjectSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonschema/types/ObjectSchema.java\n \t}\n \n \tpublic void putOptionalProperty(String name, Schema schema) {\n-\t\t// just don't put anything in the property list\n+\t\tschema.setRequired(false);\n+\t\tproperties.put(name, schema);\n \t}\n \n \tpublic Schema putPatternProperty(String regex, Schema value) {\n \t}\n \n \tpublic Schema putProperty(String name, Schema value) {\n+\t\tvalue.setRequired(true);\n \t\treturn properties.put(name, value);\n \t}\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.introspect.Annotated;\n import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;\n-import com.fasterxml.jackson.databind.jsonschema.JsonSchema;\n import com.fasterxml.jackson.databind.jsonschema.SchemaAware;\n-import com.fasterxml.jackson.databind.jsonschema.factories.SchemaFactory;\n-import com.fasterxml.jackson.databind.jsonschema.types.Schema;\n-import com.fasterxml.jackson.databind.jsonschema.types.SchemaType;\n import com.fasterxml.jackson.databind.jsonschema.visitors.JsonFormatVisitor;\n-import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;\n import com.fasterxml.jackson.databind.util.ClassUtil;\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n      * @param propertiesNode Node which the given property would exist within\n \t */\n \tpublic static void depositSchemaProperty(BeanPropertyWriter writer, JsonObjectFormatVisitor objectVisitor) {\n-\t\t//if (isPropertyRequired(writer, objectVisitor.getProvider())) {\n+\t\tif (isPropertyRequired(writer, objectVisitor.getProvider())) {\n \t\t\tobjectVisitor.property(writer); \n-\t\t//} else {\n-\t\t\t//objectVisitor.optionalProperty(writer);\n-\t\t//}\n+\t\t} else {\n+\t\t\tobjectVisitor.optionalProperty(writer);\n+\t\t}\n \t}\n \n \t/**\n--- a/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema.java\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.jsonschema.types.ObjectSchema;\n import com.fasterxml.jackson.databind.jsonschema.types.Schema;\n+import com.fasterxml.jackson.databind.jsonschema.types.ArraySchema.Items;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.ser.FilterProvider;\n         private String property2;\n         private String[] property3;\n         private Collection<Float> property4;\n-        @JsonProperty(required=true)\n+        @JsonProperty(required = true)\n         private String property5;\n         \n         public int getProperty1()\n         public String name;\n     }\n \n-    @JsonSerializableSchema(id=\"myType\")\n+    //@JsonSerializableSchema(id=\"myType\")\n     public class BeanWithId {\n         public String value;\n     }\n     \tDefaultSerializerProvider sp = new DefaultSerializerProvider.Impl();\n         ObjectMapper m = new ObjectMapper();\n         m.setSerializerProvider(sp);\n-        Schema jsonSchema = m.generateJsonSchema(SimpleBean.class);\n-        \n-        assertNotNull(jsonSchema);\n+        Schema schema = m.generateJsonSchema(SimpleBean.class);\n+        \n+        assertNotNull(schema);\n \n         // test basic equality, and that equals() handles null, other obs\n-        assertTrue(jsonSchema.equals(jsonSchema));\n-        assertFalse(jsonSchema.equals(null));\n-        assertFalse(jsonSchema.equals(\"foo\"));\n-\n-        // other basic things\n-        assertNotNull(jsonSchema.toString());\n-        assertNotNull(JsonSchema.getDefaultSchemaNode());\n-\n-//\tObjectNode root = jsonSchema.getSchemaNode();\n-//        assertEquals(\"object\", root.get(\"type\").asText());\n-//        assertEquals(false, root.path(\"required\").booleanValue());\n-//        JsonNode propertiesSchema = root.get(\"properties\");\n-//        assertNotNull(propertiesSchema);\n-//        JsonNode property1Schema = propertiesSchema.get(\"property1\");\n-//        assertNotNull(property1Schema);\n-//        assertEquals(\"integer\", property1Schema.get(\"type\").asText());\n-//        assertEquals(false, property1Schema.path(\"required\").booleanValue());\n-//        JsonNode property2Schema = propertiesSchema.get(\"property2\");\n-//        assertNotNull(property2Schema);\n-//        assertEquals(\"string\", property2Schema.get(\"type\").asText());\n-//        assertEquals(false, property2Schema.path(\"required\").booleanValue());\n-//        JsonNode property3Schema = propertiesSchema.get(\"property3\");\n-//        assertNotNull(property3Schema);\n+        assertTrue(schema.equals(schema));\n+        assertFalse(schema.equals(null));\n+        assertFalse(schema.equals(\"foo\"));\n+\n+        assertTrue(schema.isObjectSchema());\n+        ObjectSchema object = schema.asObjectSchema();\n+        assertNotNull(object);\n+        Map<String,Schema> properties = object.getProperties();\n+        assertNotNull(properties);\n+        Schema prop1 = properties.get(\"property1\");\n+        assertNotNull(prop1);\n+        assertTrue(prop1.isIntegerSchema());\n+        assertFalse(prop1.getRequired());\n+        \n+        Schema prop2 = properties.get(\"property2\");\n+        assertNotNull(prop2);\n+        assertTrue(prop2.isStringSchema());\n+        assertFalse(prop2.getRequired());\n+        \n+        Schema prop3 = properties.get(\"property3\");\n+        assertNotNull(prop3);\n+        assertTrue(prop3.isArraySchema());\n+        assertFalse(prop3.getRequired());\n+        Items items = prop3.asArraySchema().getItems();\n+        assertTrue(items.isSingleItems());\n+        Schema itemType = items.asSingleItems().getSchema();\n+        assertNotNull(itemType);\n+        assertTrue(itemType.isStringSchema());\n+        \n+        Schema prop4 = properties.get(\"property4\");\n+        assertNotNull(prop4);\n+        assertTrue(prop4.isArraySchema());\n+        assertFalse(prop4.getRequired());\n+        items = prop4.asArraySchema().getItems();\n+        assertTrue(items.isSingleItems());\n+        itemType = items.asSingleItems().getSchema();\n+        assertNotNull(itemType);\n+        assertTrue(itemType.isNumberSchema());\n+        \n+        Schema prop5 = properties.get(\"property5\");\n+        assertNotNull(prop5);\n+        assertTrue(prop5.getRequired());\n+        \n+        \n+\n //        assertEquals(\"array\", property3Schema.get(\"type\").asText());\n //        assertEquals(false, property3Schema.path(\"required\").booleanValue());\n //        assertEquals(\"string\", property3Schema.get(\"items\").get(\"type\").asText());", "timestamp": 1343944620, "metainfo": ""}