{"sha": "cb56363cdd550e5fd46f6b3eef2dc09088465f60", "log": "Add missing ObjectMapper.writeTree(); improve DelegatingDeserializer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n         }\n     }\n \n-    /**\n-     * Method to serialize given JSON Tree, using generator\n-     * provided.\n-     */\n-    public void writeTree(JsonGenerator jgen, JsonNode rootNode)\n+    /*\n+    /**********************************************************\n+    /* Public API (from TreeCodec via ObjectCodec): Tree Model support\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public void writeTree(JsonGenerator jgen, TreeNode rootNode)\n         throws IOException, JsonProcessingException\n     {\n         SerializationConfig config = getSerializationConfig();\n             jgen.flush();\n         }\n     }\n-\n-    /*\n-    /**********************************************************\n-    /* Public API (from ObjectCodec): Tree Model support\n-    /**********************************************************\n-     */\n-\n+    \n+    /**\n+     * Method to serialize given JSON Tree, using generator\n+     * provided.\n+     */\n+    public void writeTree(JsonGenerator jgen, JsonNode rootNode)\n+        throws IOException, JsonProcessingException\n+    {\n+        SerializationConfig config = getSerializationConfig();\n+        _serializerProvider(config).serializeValue(jgen, rootNode);\n+        if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\n+            jgen.flush();\n+        }\n+    }\n+    \n     /**\n      *<p>\n      * Note: return type is co-variant, as basic ObjectCodec\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n     public <T> T readValue(JsonParser jp, JavaType valueType) throws IOException, JsonProcessingException {\n         return (T) withType(valueType).readValue(jp);\n     }\n-    \n-    /**\n-     * Convenience method that binds content read using given parser, using\n-     * configuration of this reader, except that content is bound as\n-     * JSON tree instead of configured root value type.\n-     *<p>\n-     * Note: if an object was specified with {@link #withValueToUpdate}, it\n-     * will be ignored.\n-     *<p>\n-     * NOTE: this method never tries to auto-detect format, since actual\n-     * (data-format specific) parser is given.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <T extends TreeNode> T readTree(JsonParser jp)\n-        throws IOException, JsonProcessingException\n-    {\n-        return (T) _bindAsTree(jp);\n-    }\n \n     /**\n      * Convenience method that is equivalent to:\n     public <T> Iterator<T> readValues(JsonParser jp, JavaType valueType)\n         throws IOException, JsonProcessingException {\n         return withType(valueType).readValues(jp);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* TreeCodec impl\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonNode createArrayNode() {\n+        return _config.getNodeFactory().arrayNode();\n+    }\n+\n+    @Override\n+    public JsonNode createObjectNode() {\n+        return _config.getNodeFactory().objectNode();\n+    }\n+\n+    @Override\n+    public JsonParser treeAsTokens(TreeNode n) {\n+        return new TreeTraversingParser((JsonNode) n, this);\n+    }\n+     /**\n+      * Convenience method that binds content read using given parser, using\n+      * configuration of this reader, except that content is bound as\n+      * JSON tree instead of configured root value type.\n+      *<p>\n+      * Note: if an object was specified with {@link #withValueToUpdate}, it\n+      * will be ignored.\n+      *<p>\n+      * NOTE: this method never tries to auto-detect format, since actual\n+      * (data-format specific) parser is given.\n+      */\n+     @SuppressWarnings(\"unchecked\")\n+     @Override\n+     public <T extends TreeNode> T readTree(JsonParser jp)\n+         throws IOException, JsonProcessingException\n+     {\n+         return (T) _bindAsTree(jp);\n+     }\n+     \n+    @Override\n+    public void writeTree(JsonGenerator jgen, TreeNode rootNode) {\n+        throw new UnsupportedOperationException();\n     }\n     \n     /*\n     /* Implementation of rest of ObjectCodec methods\n     /**********************************************************\n      */\n-    \n-    @Override\n-    public JsonNode createArrayNode() {\n-        return _config.getNodeFactory().arrayNode();\n-    }\n-\n-    @Override\n-    public JsonNode createObjectNode() {\n-        return _config.getNodeFactory().objectNode();\n-    }\n-\n-    @Override\n-    public JsonParser treeAsTokens(TreeNode n) {\n-        return new TreeTraversingParser((JsonNode) n, this);\n-    }\n \n     @Override\n     public <T> T treeToValue(TreeNode n, Class<T> valueType)\n         } catch (IOException e) { // should not occur, no real i/o...\n             throw new IllegalArgumentException(e.getMessage(), e);\n         }\n-    }\n-\n+    }    \n+    \n     @Override\n     public void writeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/DelegatingDeserializer.java\n         return newDelegatingInstance(del);\n     }\n \n-    /* Removed in 2.3.0\n+    /**\n+     * @deprecated Since 2.3, use {@link #newDelegatingInstance} instead\n+     */\n+    @Deprecated\n     protected JsonDeserializer<?> _createContextual(DeserializationContext ctxt,\n             BeanProperty property, JsonDeserializer<?> newDelegatee)\n     {\n         }\n         return newDelegatingInstance(newDelegatee);\n     }\n-    */\n \n     @Override\n     public SettableBeanProperty findBackReference(String logicalName) {\n         // [Issue#253]: Hope this works....\n         return _delegatee.findBackReference(logicalName);\n     }\n-    \n+\n     /*\n     /**********************************************************************\n     /* Overridden deserialization methods", "timestamp": 1378836881, "metainfo": ""}