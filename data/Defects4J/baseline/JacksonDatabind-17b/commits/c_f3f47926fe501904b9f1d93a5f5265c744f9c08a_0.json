{"sha": "f3f47926fe501904b9f1d93a5f5265c744f9c08a", "log": "Minor cleanup, to move failing (and not immediately fixable) problem to set of failing tests", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java\n         private final ArrayList<ExtTypedProperty> _properties = new ArrayList<ExtTypedProperty>();\n         private final HashMap<String, Integer> _nameToPropertyIndex = new HashMap<String, Integer>();\n \n-        // note: signature changed between 2.1.0 and 2.1.1 (alas!)\n         public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser)\n         {\n             Integer index = _properties.size();\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter.java\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n+import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.fasterxml.jackson.databind.ser.*;\n import com.fasterxml.jackson.databind.util.NameTransformer;\n \n     /*\n     /**********************************************************\n-    /* Overrides\n+    /* Overrides, public methods\n     /**********************************************************\n      */\n \n         }\n     }\n \n+    /*\n+    /**********************************************************\n+    /* Overrides: schema generation\n+    /**********************************************************\n+     */\n+\n+    // TODO: if/how to change this? Base class has this\n+/*    \n+    @Override\n+    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor)\n+        throws JsonMappingException\n+    {\n+        if (objectVisitor != null) {\n+            if (isRequired()) {\n+                objectVisitor.property(this); \n+            } else {\n+                objectVisitor.optionalProperty(this);\n+            }\n+        }\n+    }\n+    */\n+    \n     // Override needed to support legacy JSON Schema generator\n     @Override\n     protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode)\n             }\n         }\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Overrides: internal, other\n+    /**********************************************************\n+     */\n     \n     // need to override as we must get unwrapping instance...\n     @Override\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestMultipleExternalIds.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.annotation.*;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\n+import com.fasterxml.jackson.databind.*;\n+\n+public class TestMultipleExternalIds extends BaseMapTest\n+{\n+    // For [Issue#291]\n+    interface F1 {}\n+\n+    static class A implements F1 {\n+        public String a;\n+    }\n+\n+    static class B implements F1 {\n+        public String b;\n+    }\n+\n+    static interface F2 {}\n+\n+    static class C implements F2 {\n+        public String c;\n+    }\n+\n+    static class D implements F2{\n+        public String d;\n+    }\n+\n+    static class Container {\n+        public String type;\n+\n+        @JsonTypeInfo(use = Id.NAME, property = \"type\", include = As.EXTERNAL_PROPERTY)\n+        @JsonSubTypes({\n+                @JsonSubTypes.Type(value = A.class, name = \"1\"),\n+                @JsonSubTypes.Type(value = B.class, name = \"2\")})\n+        public F1 field1;\n+\n+        @JsonTypeInfo(use = Id.NAME, property = \"type\", include = As.EXTERNAL_PROPERTY)\n+        @JsonSubTypes({\n+                @JsonSubTypes.Type(value = C.class, name = \"1\"),\n+                @JsonSubTypes.Type(value = D.class, name = \"2\")})\n+        public F2 field2;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    // [Issue#291]\n+    public void testMultiple() throws Exception\n+    {\n+        final ObjectMapper mapper = objectMapper();\n+        final String JSON =\n+\"{\\\"type\\\" : \\\"1\\\",\\n\"\n++\"\\\"field1\\\" : {\\n\"\n++\"  \\\"a\\\" : \\\"AAA\\\"\\n\"\n++\"}, \\\"field2\\\" : {\\n\"\n++\"  \\\"c\\\" : \\\"CCC\\\"\\n\"\n++\"}\\n\"\n++\"}\";\n+\n+        Container c = mapper.readValue(JSON, Container.class);\n+        assertNotNull(c);\n+        assertTrue(c.field1 instanceof A);\n+        assertTrue(c.field2 instanceof C);\n+    }\n+}", "timestamp": 1379735264, "metainfo": ""}