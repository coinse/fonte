{"sha": "bd3ded190c05c5f2f34a5677bbb4469d02599444", "log": "More SerializerFactory clean up, getting read of BeanProperty arg", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java\n      */\n     @Deprecated\n     protected final JsonSerializer<?> buildContainerSerializer(SerializerProvider prov,\n-            JavaType type, BeanDescription beanDesc, BeanProperty Xproperty, boolean staticTyping)\n+            JavaType type, BeanDescription beanDesc, BeanProperty property, boolean staticTyping)\n         throws JsonMappingException\n     {\n         return  buildContainerSerializer(prov, type, beanDesc, staticTyping);\n         }\n         TypeSerializer vts = createTypeSerializer(config, valueType);\n         return StdContainerSerializers.iteratorSerializer(valueType,\n-                usesStaticTyping(config, beanDesc, vts, null), vts);\n+                usesStaticTyping(config, beanDesc, vts), vts);\n     }\n     \n     protected JsonSerializer<?> buildIterableSerializer(SerializationConfig config,\n         }\n         TypeSerializer vts = createTypeSerializer(config, valueType);\n         return StdContainerSerializers.iterableSerializer(valueType,\n-                usesStaticTyping(config, beanDesc, vts, null),\n-                vts);\n+                usesStaticTyping(config, beanDesc, vts), vts);\n     }\n     \n     /*\n         }\n         return null;\n     }\n+\n+    /**\n+     * @deprecated Since 2.1: use method without 'property'\n+     */\n+    @Deprecated\n+    protected final  boolean usesStaticTyping(SerializationConfig config,\n+            BeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property)\n+    {\n+        return usesStaticTyping(config, beanDesc, typeSer);\n+    }\n     \n     /**\n      * Helper method to check whether global settings and/or class\n      * annotations for the bean class indicate that static typing\n      * (declared types)  should be used for properties.\n      * (instead of dynamic runtime types).\n+     * \n+     * @since 2.1 (earlier had variant with additional 'property' parameter)\n      */\n     protected boolean usesStaticTyping(SerializationConfig config,\n-            BeanDescription beanDesc, TypeSerializer typeSer, BeanProperty property)\n+            BeanDescription beanDesc, TypeSerializer typeSer)\n     {\n         /* 16-Aug-2010, tatu: If there is a (value) type serializer, we can not force\n          *    static typing; that would make it impossible to handle expected subtypes\n                 return true;\n             }\n         }\n-        /* 11-Mar-2011, tatu: Ok. This is bit hacky, but we really need to be able to find cases\n-         *    where key and/or value serializers were specified, to force use of static typing\n-         */\n-        if (property != null) {\n-            JavaType type = property.getType();\n-            if (type.isContainerType()) {\n-                if (intr.findSerializationContentType(property.getMember(), property.getType()) != null) {\n-                    return true;\n-                }\n-                if (type instanceof MapType) {\n-                    if (intr.findSerializationKeyType(property.getMember(), property.getType()) != null) {\n-                        return true;\n-                    }\n-                }\n-            }\n-        }\n         return false;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n         // (note: called method checks for module-provided serializers)\n         if (origType.isContainerType()) {\n             if (!staticTyping) {\n-                staticTyping = usesStaticTyping(config, beanDesc, null, property);\n+                staticTyping = usesStaticTyping(config, beanDesc, null);\n                 // [JACKSON-822]: Need to figure out how to force passed parameterization\n                 //  to stick...\n                 /*\n             return null;\n         }\n         // null is for value type serializer, which we don't have access to from here (ditto for bean prop)\n-        boolean staticTyping = usesStaticTyping(config, beanDesc, null, null);\n+        boolean staticTyping = usesStaticTyping(config, beanDesc, null);\n         PropertyBuilder pb = constructPropertyBuilder(config, beanDesc);\n         \n         ArrayList<BeanPropertyWriter> result = new ArrayList<BeanPropertyWriter>(properties.size());\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer.java\n package com.fasterxml.jackson.databind.ser;\n \n+import com.fasterxml.jackson.databind.AnnotationIntrospector;\n+import com.fasterxml.jackson.databind.BeanProperty;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.jsontype.TypeSerializer;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n      * addition type information is to be embedded.\n      */\n     protected abstract ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts);\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods for sub-types\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Helper method used to encapsulate logic for determining whether there is\n+     * a property annotation that overrides element type; if so, we can\n+     * and need to statically find the serializer.\n+     * \n+     * @since 2.1\n+     */\n+    protected boolean hasContentTypeAnnotation(SerializerProvider provider,\n+            BeanProperty property)\n+    {\n+        if (property != null) {\n+            AnnotationIntrospector intr = provider.getAnnotationIntrospector();\n+            if (intr != null) {\n+                if (intr.findSerializationContentType(property.getMember(), property.getType()) != null) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ArraySerializerBase.java\n  * Intermediate base class for serializers used for various\n  * Java arrays.\n  * \n- * @param <T>\n+ * @param <T> Type of arrays serializer handles\n  */\n public abstract class ArraySerializerBase<T>\n     extends ContainerSerializer<T>\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n     /**********************************************************\n      */\n     \n+    /**\n+     * This method is needed to resolve contextual annotations like\n+     * per-property overrides, as well as do recursive call\n+     * to <code>createContextual</code> of content serializer, if\n+     * known statically.\n+     */\n //  @Override\n     public JsonSerializer<?> createContextual(SerializerProvider provider,\n             BeanProperty property)\n             ser = _elementSerializer;\n         }\n         if (ser == null) {\n-            if (_staticTyping && _elementType != null) {\n-                ser = provider.findValueSerializer(_elementType, property);\n+            // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,\n+            //   we can consider it a static case as well.\n+            if (_elementType != null) {\n+                if (_staticTyping || hasContentTypeAnnotation(provider, property)) {\n+                    ser = provider.findValueSerializer(_elementType, property);\n+                }\n             }\n         } else if (ser instanceof ContextualSerializer) {\n             ser = ((ContextualSerializer) ser).createContextual(provider, property);\n         }\n         return this;\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Accessors\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n             ser = _valueSerializer;\n         }\n         if (ser == null) {\n-            if (_valueTypeIsStatic) {\n+            // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,\n+            //   we can consider it a static case as well.\n+            if (_valueTypeIsStatic || hasContentTypeAnnotation(provider, property)) {\n                 ser = provider.findValueSerializer(_valueType, property);\n             }\n         } else if (ser instanceof ContextualSerializer) {\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/ObjectArraySerializer.java\n             ser = _elementSerializer;\n         }\n         if (ser == null) {\n-            if (_staticTyping) {\n-                ser = provider.findValueSerializer(_elementType, property);\n+            // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,\n+            //   we can consider it a static case as well.\n+            if (_elementType != null) {\n+                if (_staticTyping || hasContentTypeAnnotation(provider, property)) {\n+                    ser = provider.findValueSerializer(_elementType, property);\n+                }\n             }\n         } else if (ser instanceof ContextualSerializer) {\n             ser = ((ContextualSerializer) _elementSerializer).createContextual(provider, property);\n--- a/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize2.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize2.java\n         assertEquals(\"[\\\"value foo\\\"]\", m.writeValueAsString(list));\n     }\n \n+    // [JACKSON-480], test annotations when applied to List property (getter, setter)\n+    public void testSerializedAsListWithPropertyAnnotations() throws IOException\n+    {\n+        ListWrapperSimple input = new ListWrapperSimple(\"bar\");\n+        assertEquals(\"{\\\"values\\\":[{\\\"value\\\":\\\"bar\\\"}]}\", MAPPER.writeValueAsString(input));\n+    }\n+    \n     // [JACKSON-480], test Serialization annotation with Map\n     public void testSerializedAsMapWithClassSerializer() throws IOException\n     {\n         map.put(new SimpleKey(\"abc\"), new ActualValue(\"123\"));\n         assertEquals(\"{\\\"key abc\\\":\\\"value 123\\\"}\", MAPPER.writeValueAsString(map));\n     }\n-    \n-    // [JACKSON-480], test annotations when applied to List property (getter, setter)\n-    public void testSerializedAsListWithPropertyAnnotations() throws IOException\n-    {\n-        ListWrapperSimple input = new ListWrapperSimple(\"bar\");\n-        assertEquals(\"{\\\"values\\\":[{\\\"value\\\":\\\"bar\\\"}]}\", MAPPER.writeValueAsString(input));\n-    }\n-\n+\n+    // [JACKSON-480], test annotations when applied to Map property (getter, setter)\n+    public void testSerializedAsMapWithPropertyAnnotations() throws IOException\n+    {\n+        MapWrapperSimple input = new MapWrapperSimple(\"a\", \"b\");\n+        assertEquals(\"{\\\"values\\\":{\\\"toString:a\\\":{\\\"value\\\":\\\"b\\\"}}}\",\n+                MAPPER.writeValueAsString(input));\n+    }\n+    \n     public void testSerializedAsListWithPropertyAnnotations2() throws IOException\n     {\n         ListWrapperWithSerializer input = new ListWrapperWithSerializer(\"abc\");\n         assertEquals(\"{\\\"values\\\":[\\\"value abc\\\"]}\", MAPPER.writeValueAsString(input));\n-    }\n-    \n-    // [JACKSON-480], test annotations when applied to Map property (getter, setter)\n-    public void testSerializedAsMapWithPropertyAnnotations() throws IOException\n-    {\n-        MapWrapperSimple input = new MapWrapperSimple(\"a\", \"b\");\n-        assertEquals(\"{\\\"values\\\":{\\\"toString:a\\\":{\\\"value\\\":\\\"b\\\"}}}\", MAPPER.writeValueAsString(input));\n     }\n \n     public void testSerializedAsMapWithPropertyAnnotations2() throws IOException", "timestamp": 1349034217, "metainfo": ""}