{"sha": "2dac9663a86a82a47fa7e5d6fa5de1b209f00988", "log": "Solve [JACKSON-877] (no fix, changed call in test), renamed related test", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/AbstractDeserializer.java\n     {\n         // Hmmh. One tricky question; for scalar, is it an Object Id, or \"Natural\" type?\n \n+System.err.println(\"Abstract, objR = \"+_objectIdReader);\n+\n         // for now, prefer Object Id:\n         if (_objectIdReader != null) {\n             JsonToken t = jp.getCurrentToken();\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/databind/jsontype/TestAbstractWithObjectId.java\n+package com.fasterxml.jackson.databind.jsontype;\n+\n+import com.fasterxml.jackson.annotation.*;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.*;\n+\n+import java.util.*;\n+\n+public class TestAbstractWithObjectId extends BaseMapTest\n+{\n+    interface BaseInterface { }\n+\n+    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class, property = \"@id\")\n+    static class BaseInterfaceImpl implements BaseInterface {\n+\n+        @JsonProperty\n+        private List<BaseInterfaceImpl> myInstances = new ArrayList<BaseInterfaceImpl>();\n+\n+        void addInstance(BaseInterfaceImpl instance) {\n+            myInstances.add(instance);\n+        }\n+    }\n+\n+    static class ListWrapper<T extends BaseInterface> {\n+\n+        @JsonProperty\n+        private List<T> myList = new ArrayList<T>();\n+\n+        void add(T t) {\n+            myList.add(t);\n+        }\n+\n+        int size() {\n+            return myList.size();\n+        }\n+    }\n+\n+    public void testIssue877() throws Exception\n+    {\n+        // make two instances\n+        BaseInterfaceImpl one = new BaseInterfaceImpl();\n+        BaseInterfaceImpl two = new BaseInterfaceImpl();\n+\n+        // add them to each other's list to show identify info being used\n+        one.addInstance(two);\n+        two.addInstance(one);\n+\n+        // make a typed version of the list and add the 2 instances to it\n+        ListWrapper<BaseInterfaceImpl> myList = new ListWrapper<BaseInterfaceImpl>();\n+        myList.add(one);\n+        myList.add(two);\n+\n+        // make an object mapper that will add class info in so deserialisation works\n+        ObjectMapper om = new ObjectMapper();\n+        om.enableDefaultTypingAsProperty(ObjectMapper.DefaultTyping.NON_FINAL, \"@class\");\n+\n+        // write and print the JSON\n+        String json = om.writerWithDefaultPrettyPrinter().writeValueAsString(myList);\n+        ListWrapper<BaseInterfaceImpl> result;\n+        \n+        result = om.readValue(json, new TypeReference<ListWrapper<BaseInterfaceImpl>>() { });\n+\n+        assertNotNull(result);\n+        // see what we get back\n+        System.out.println(\"deserialised list size = \" + result.size());\n+    }\n+}", "timestamp": 1353709638, "metainfo": ""}