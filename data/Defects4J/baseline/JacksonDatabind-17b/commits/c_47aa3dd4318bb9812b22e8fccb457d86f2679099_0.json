{"sha": "47aa3dd4318bb9812b22e8fccb457d86f2679099", "log": "Add a unit test for #226", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java\n \n     // // // Reuse mapper to keep tests bit faster\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n \n     /*\n     /**********************************************************\n     public void testPrefixedUnwrappingSerialize() throws Exception\n     {\n         assertEquals(\"{\\\"name\\\":\\\"Tatu\\\",\\\"_x\\\":1,\\\"_y\\\":2}\",\n-                mapper.writeValueAsString(new PrefixUnwrap(\"Tatu\", 1, 2)));\n+                MAPPER.writeValueAsString(new PrefixUnwrap(\"Tatu\", 1, 2)));\n     }\n \n     public void testDeepPrefixedUnwrappingSerialize() throws Exception\n     {\n-        String json = mapper.writeValueAsString(new DeepPrefixUnwrap(\"Bubba\", 1, 1));\n+        String json = MAPPER.writeValueAsString(new DeepPrefixUnwrap(\"Bubba\", 1, 1));\n         assertEquals(\"{\\\"u.name\\\":\\\"Bubba\\\",\\\"u._x\\\":1,\\\"u._y\\\":1}\", json);\n     }\n \n     public void testHierarchicConfigSerialize() throws Exception\n     {\n-        String json = mapper.writeValueAsString(new ConfigRoot(\"Fred\", 25));\n+        String json = MAPPER.writeValueAsString(new ConfigRoot(\"Fred\", 25));\n         assertEquals(\"{\\\"general.names.name\\\":\\\"Fred\\\",\\\"misc.value\\\":25}\", json);\n     }\n \n \n     public void testPrefixedUnwrapping() throws Exception\n     {\n-        PrefixUnwrap bean = mapper.readValue(\"{\\\"name\\\":\\\"Axel\\\",\\\"_x\\\":4,\\\"_y\\\":7}\", PrefixUnwrap.class);\n+        PrefixUnwrap bean = MAPPER.readValue(\"{\\\"name\\\":\\\"Axel\\\",\\\"_x\\\":4,\\\"_y\\\":7}\", PrefixUnwrap.class);\n         assertNotNull(bean);\n         assertEquals(\"Axel\", bean.name);\n         assertNotNull(bean.location);\n     \n     public void testDeepPrefixedUnwrappingDeserialize() throws Exception\n     {\n-        DeepPrefixUnwrap bean = mapper.readValue(\"{\\\"u.name\\\":\\\"Bubba\\\",\\\"u._x\\\":2,\\\"u._y\\\":3}\",\n+        DeepPrefixUnwrap bean = MAPPER.readValue(\"{\\\"u.name\\\":\\\"Bubba\\\",\\\"u._x\\\":2,\\\"u._y\\\":3}\",\n                 DeepPrefixUnwrap.class);\n         assertNotNull(bean.unwrapped);\n         assertNotNull(bean.unwrapped.location);\n     \n     public void testHierarchicConfigDeserialize() throws Exception\n     {\n-        ConfigRoot root = mapper.readValue(\"{\\\"general.names.name\\\":\\\"Bob\\\",\\\"misc.value\\\":3}\",\n+        ConfigRoot root = MAPPER.readValue(\"{\\\"general.names.name\\\":\\\"Bob\\\",\\\"misc.value\\\":3}\",\n                 ConfigRoot.class);\n         assertNotNull(root.general);\n         assertNotNull(root.general.names);\n \n     /*\n     /**********************************************************\n-    /* Tests, deserialization\n+    /* Tests, round-trip\n     /**********************************************************\n      */\n-    \n+\n     public void testHierarchicConfigRoundTrip() throws Exception\n     {\n         ConfigAlternate input = new ConfigAlternate(123, \"Joe\", 42);\n-        String json = mapper.writeValueAsString(input);\n-\n-        ConfigAlternate root = mapper.readValue(json, ConfigAlternate.class);\n+        String json = MAPPER.writeValueAsString(input);\n+\n+        ConfigAlternate root = MAPPER.readValue(json, ConfigAlternate.class);\n         assertEquals(123, root.id);\n         assertNotNull(root.general);\n         assertNotNull(root.general.names);\n--- a/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithPrefix.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithPrefix.java\n         public Map<String, Object> map;\n     }\n \n+    static class Parent {\n+        @JsonUnwrapped(prefix=\"c1\")\n+        public Child c1;\n+        @JsonUnwrapped(prefix=\"c2\")\n+        public Child c2;\n+      }\n+\n+    static class Child {\n+        @JsonUnwrapped(prefix=\"sc2\")\n+        public SubChild sc1;\n+      }\n+\n+    static class SubChild {\n+        public String value;\n+    }\n+    \n     // // // Reuse mapper to keep tests bit faster\n \n-    private final ObjectMapper mapper = new ObjectMapper();\n+    private final ObjectMapper MAPPER = new ObjectMapper();\n \n     /*\n     /**********************************************************\n \n     public void testMapUnwrapSerialize() throws Exception\n     {\n-        String json = mapper.writeValueAsString(new MapUnwrap(\"test\", 6));\n+        String json = MAPPER.writeValueAsString(new MapUnwrap(\"test\", 6));\n         assertEquals(\"{\\\"map.test\\\": 6}\", json);\n     }\n \n \n     public void testMapUnwrapDeserialize() throws Exception\n     {\n-        MapUnwrap root = mapper.readValue(\"{\\\"map.test\\\": 6}\", MapUnwrap.class);\n+        MapUnwrap root = MAPPER.readValue(\"{\\\"map.test\\\": 6}\", MapUnwrap.class);\n \n         assertEquals(1, root.map.size());\n         assertEquals(6, ((Number)root.map.get(\"test\")).intValue());\n     }\n+\n+    public void testIssue226() throws Exception\n+    {\n+        Parent input = new Parent();\n+        input.c1 = new Child();\n+        input.c1.sc1 = new SubChild();\n+        input.c1.sc1.value = \"a\";\n+        input.c2 = new Child();\n+        input.c2.sc1 = new SubChild();\n+        input.c2.sc1.value = \"b\";\n+\n+        String json = MAPPER.writeValueAsString(input);\n+//System.out.println(\"JSON -> \"+json);\n+\n+        Parent output = MAPPER.readValue(json, Parent.class);\n+        assertNotNull(output.c1);\n+        assertNotNull(output.c2);\n+\n+        assertNotNull(output.c1.sc1);\n+        assertNotNull(output.c2.sc1);\n+        \n+        assertEquals(\"a\", output.c1.sc1.value);\n+        assertEquals(\"b\", output.c2.sc1.value);\n+    }\n }", "timestamp": 1369091090, "metainfo": ""}