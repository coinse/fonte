{"sha": "a455b53c75d4649461ba3e7fdcc625f2cd223202", "log": "Warning cleanup.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/BeanProperty.java\n      */\n     @Override\n     public String getName();\n-    \n+\n+    /**\n+     * Method for getting full name definition, including possible\n+     * format-specific additional properties (such as namespace when\n+     * using XML backend).\n+     * \n+     * @since 2.3\n+     */\n+    public PropertyName getFullName();\n+\n     /**\n      * Method to get declared type of the property.\n      */\n         }\n \n         @Override\n+        public PropertyName getFullName() {\n+            return new PropertyName(_name);\n+        }\n+        \n+        @Override\n         public JavaType getType() {\n             return _type;\n         }\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n      * as well.\n      */\n     @Override\n+    @SuppressWarnings(\"resource\")\n     protected Object _deserializeUsingPropertyBased(final JsonParser jp, final DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     { \n      * Method called when there are declared \"unwrapped\" properties\n      * which need special handling\n      */\n+    @SuppressWarnings(\"resource\")\n     protected Object deserializeWithUnwrapped(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n         return bean;\n     }    \n \n+    @SuppressWarnings(\"resource\")\n     protected Object deserializeWithUnwrapped(JsonParser jp, DeserializationContext ctxt, Object bean)\n         throws IOException, JsonProcessingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import com.fasterxml.jackson.annotation.ObjectIdGenerator;\n import com.fasterxml.jackson.annotation.ObjectIdGenerators;\n-\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.core.JsonToken;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.impl.*;\n import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;\n      * stored in their entirety in given {@link TokenBuffer}\n      * (as field entries, name and value).\n      */\n+    @SuppressWarnings(\"resource\")\n     protected Object handleUnknownProperties(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens)\n         throws IOException, JsonProcessingException\n     {\n      *   (in addition to buffered properties); if null, all properties are passed\n      *   in buffer\n      */\n+    @SuppressWarnings(\"resource\")\n     protected Object handlePolymorphic(JsonParser jp, DeserializationContext ctxt,                                          \n             Object bean, TokenBuffer unknownTokens)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n      * as well.\n      */\n     @Override\n+    @SuppressWarnings(\"resource\")\n     protected final Object _deserializeUsingPropertyBased(final JsonParser jp,\n             final DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n      * Method called when there are declared \"unwrapped\" properties\n      * which need special handling\n      */\n+    @SuppressWarnings(\"resource\")\n     protected Object deserializeWithUnwrapped(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n         return bean;\n     }    \n \n+    @SuppressWarnings(\"resource\")\n     protected Object deserializeWithUnwrapped(JsonParser jp,\n     \t\tDeserializationContext ctxt, Object bean)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java\n     public final String getName() { return _propName; }\n \n     @Override\n+    public PropertyName getFullName() {\n+        // !!! TODO: impl properly\n+        return new PropertyName(_propName);\n+    }\n+    \n+    @Override\n     public boolean isRequired() { return _isRequired; }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java\n import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.deser.SettableBeanProperty;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n         return true;\n     }\n     \n+    @SuppressWarnings(\"resource\")\n     public Object complete(JsonParser jp, DeserializationContext ctxt, Object bean)\n         throws IOException, JsonProcessingException\n     {\n         return bean;\n     }\n \n+    @SuppressWarnings(\"resource\")\n     protected final Object _deserialize(JsonParser jp, DeserializationContext ctxt,\n             int index, String typeId)\n         throws IOException, JsonProcessingException\n     {\n-        @SuppressWarnings(\"resource\")\n         TokenBuffer merged = new TokenBuffer(jp.getCodec());\n         merged.writeStartArray();\n         merged.writeString(typeId);\n         p2.nextToken();\n         return _properties[index].getProperty().deserialize(p2, ctxt);\n     }\n-    \n+\n+    @SuppressWarnings(\"resource\")\n     protected final void _deserializeAndSet(JsonParser jp, DeserializationContext ctxt,\n             Object bean, int index, String typeId)\n         throws IOException, JsonProcessingException\n         /* Ok: time to mix type id, value; and we will actually use \"wrapper-array\"\n          * style to ensure we can handle all kinds of JSON constructs.\n          */\n-        @SuppressWarnings(\"resource\")\n         TokenBuffer merged = new TokenBuffer(jp.getCodec());\n         merged.writeStartArray();\n         merged.writeString(typeId);\n--- a/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor.java\n         public void setProvider(SerializerProvider p) { _provider = p; }\n \n         @Override\n-        public void property(BeanProperty writer) throws JsonMappingException { }\n+        public void property(BeanProperty prop) throws JsonMappingException { }\n \n         @Override\n         public void property(String name, JsonFormatVisitable handler,\n         public void property(String name) throws JsonMappingException { }\n \n         @Override\n-        public void optionalProperty(BeanProperty writer)\n+        public void optionalProperty(BeanProperty prop)\n                 throws JsonMappingException { }\n \n         @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.util.JsonParserSequence;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n      * for may be anywhere...\n      */\n     @Override\n+    @SuppressWarnings(\"resource\")\n     public Object deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n     }\n     \n     // off-lined to keep main method lean and mean...\n+    @SuppressWarnings(\"resource\")\n     protected Object _deserializeTypedUsingDefaultImpl(JsonParser jp,\n             DeserializationContext ctxt, TokenBuffer tb)\n         throws IOException, JsonProcessingException\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsWrapperTypeDeserializer.java\n import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.util.JsonParserSequence;\n-\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;\n      * subtype deserializer to use, and calls it to do actual\n      * deserialization.\n      */\n+    @SuppressWarnings(\"resource\")\n     private final Object _deserialize(JsonParser jp, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n         // Minor complication: we may need to merge type id in?\n         if (_typeIdVisible && jp.getCurrentToken() == JsonToken.START_OBJECT) {\n             // but what if there's nowhere to add it in? Error? Or skip? For now, skip.\n-            @SuppressWarnings(\"resource\")\n             TokenBuffer tb = new TokenBuffer(null);\n             tb.writeStartObject(); // recreate START_OBJECT\n             tb.writeFieldName(_typePropertyName);\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java\n     }\n \n     @Override\n+    public PropertyName getFullName() {\n+        // !!! TODO: impl properly\n+        return new PropertyName(_name.getValue());\n+    }\n+    \n+    @Override\n     public JavaType getType() {\n         return _declaredType;\n     }\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase.java\n         // 18-Feb-2013, tatu: May have a content converter:\n         ser = findConvertingContentSerializer(provider, property, ser);\n         if (ser == null) {\n-            if (ser == null) {\n-                // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,\n-                //   we can consider it a static case as well.\n-                if (_elementType != null) {\n-                    if (_staticTyping || hasContentTypeAnnotation(provider, property)) {\n-                        ser = provider.findValueSerializer(_elementType, property);\n-                    }\n+            // 30-Sep-2012, tatu: One more thing -- if explicit content type is annotated,\n+            //   we can consider it a static case as well.\n+            if (_elementType != null) {\n+                if (_staticTyping || hasContentTypeAnnotation(provider, property)) {\n+                    ser = provider.findValueSerializer(_elementType, property);\n                 }\n             }\n         } else {\n--- a/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer.java\n      * \n      * @return This buffer\n      */\n+    @SuppressWarnings(\"resource\")\n     public TokenBuffer append(TokenBuffer other)\n         throws IOException, JsonGenerationException\n     {\n     }\n \n     @Override\n+    @SuppressWarnings(\"resource\")\n     public String toString()\n     {\n         // Let's print up to 100 first tokens...\n         }\n \n         @Override\n+        @SuppressWarnings(\"resource\")\n         public byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException\n         {\n             // First: maybe we some special types?", "timestamp": 1374815531, "metainfo": ""}