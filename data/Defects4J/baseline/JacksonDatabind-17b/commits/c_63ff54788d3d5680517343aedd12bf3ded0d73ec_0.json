{"sha": "63ff54788d3d5680517343aedd12bf3ded0d73ec", "log": "Refactoring tests for #171, as they are failing, and may not be fixed immediately", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrappedWithPrefix.java\n package com.fasterxml.jackson.databind.struct;\n-\n-import java.util.Collections;\n-import java.util.Map;\n \n import com.fasterxml.jackson.annotation.JsonUnwrapped;\n import com.fasterxml.jackson.databind.BaseMapTest;\n         public int value;\n     }\n \n-    static class MapUnwrap {\n-\n-        public MapUnwrap() { }\n-        public MapUnwrap(String key, Object value) {\n-            map = Collections.singletonMap(key, value);\n-        }\n-\n-        @JsonUnwrapped(prefix=\"map.\")\n-        public Map<String, Object> map;\n-    }\n-\n     // // // Reuse mapper to keep tests bit faster\n \n     private final ObjectMapper mapper = new ObjectMapper();\n     {\n         String json = mapper.writeValueAsString(new ConfigRoot(\"Fred\", 25));\n         assertEquals(\"{\\\"general.names.name\\\":\\\"Fred\\\",\\\"misc.value\\\":25}\", json);\n-    }\n-\n-    public void testMapUnwrapSerialize() throws Exception\n-    {\n-        String json = mapper.writeValueAsString(new MapUnwrap(\"test\", 6));\n-        assertEquals(\"{\\\"map.test\\\": 6}\", json);\n     }\n \n     /*\n         assertEquals(\"Joe\", root.general.names.name);\n         assertEquals(42, root.misc.value);\n     }\n-\n-    public void testMapUnwrapDeserialize() throws Exception\n-    {\n-        MapUnwrap root = mapper.readValue(\"{\\\"map.test\\\": 6}\", MapUnwrap.class);\n-\n-        assertEquals(1, root.map.size());\n-        assertEquals(6, ((Number)root.map.get(\"test\")).intValue());\n-    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/TestUnwrappedWithPrefix.java\n+package com.fasterxml.jackson.failing;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonUnwrapped;\n+import com.fasterxml.jackson.databind.BaseMapTest;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+// Tests for [#171]\n+public class TestUnwrappedWithPrefix extends BaseMapTest\n+{\n+    static class MapUnwrap {\n+\n+        public MapUnwrap() { }\n+        public MapUnwrap(String key, Object value) {\n+            map = Collections.singletonMap(key, value);\n+        }\n+\n+        @JsonUnwrapped(prefix=\"map.\")\n+        public Map<String, Object> map;\n+    }\n+\n+    // // // Reuse mapper to keep tests bit faster\n+\n+    private final ObjectMapper mapper = new ObjectMapper();\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, serialization\n+    /**********************************************************\n+     */\n+\n+    public void testMapUnwrapSerialize() throws Exception\n+    {\n+        String json = mapper.writeValueAsString(new MapUnwrap(\"test\", 6));\n+        assertEquals(\"{\\\"map.test\\\": 6}\", json);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Tests, deserialization\n+    /**********************************************************\n+     */\n+\n+    public void testMapUnwrapDeserialize() throws Exception\n+    {\n+        MapUnwrap root = mapper.readValue(\"{\\\"map.test\\\": 6}\", MapUnwrap.class);\n+\n+        assertEquals(1, root.map.size());\n+        assertEquals(6, ((Number)root.map.get(\"test\")).intValue());\n+    }\n+}", "timestamp": 1361918043, "metainfo": ""}