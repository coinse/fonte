{"sha": "3c950dd1bd06e661780ffd414da6017ea7f89643", "log": "Minor refactoring of handling of root name, to cache PropertyName", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java\n @SuppressWarnings(\"serial\")\n public abstract class AnnotationIntrospector\n     implements Versioned, java.io.Serializable\n-{    \n+{\n     /*\n     /**********************************************************\n     /* Helper types\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java\n     {\n         String expName = config.getRootName();\n         if (expName == null) {\n-            SerializableString sstr = _rootNames.findRootName(rootType, config);\n-            expName = sstr.getValue();\n+            PropertyName pname = _rootNames.findRootName(rootType, config);\n+            expName = pname.getSimpleName();\n         }\n         if (jp.getCurrentToken() != JsonToken.START_OBJECT) {\n             throw JsonMappingException.from(jp, \"Current token not START_OBJECT (needed to unwrap root name '\"\n--- a/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ObjectReader.java\n     {\n         String expName = _config.getRootName();\n         if (expName == null) {\n-            SerializableString sstr = _rootNames.findRootName(rootType, _config);\n-            expName = sstr.getValue();\n+            PropertyName pname = _rootNames.findRootName(rootType, _config);\n+            expName = pname.getSimpleName();\n         }\n         if (jp.getCurrentToken() != JsonToken.START_OBJECT) {\n             throw JsonMappingException.from(jp, \"Current token not START_OBJECT (needed to unwrap root name '\"\n--- a/src/main/java/com/fasterxml/jackson/databind/PropertyName.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/PropertyName.java\n package com.fasterxml.jackson.databind;\n \n+import com.fasterxml.jackson.core.SerializableString;\n+import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.core.util.InternCache;\n+import com.fasterxml.jackson.databind.cfg.MapperConfig;\n \n /**\n  * Simple value class used for containing names of properties as defined\n      */\n     protected final String _namespace;\n \n+    /**\n+     * Lazily-constructed efficient representation of the simple name.\n+     *<p>\n+     * NOTE: not defined as volatile to avoid performance problem with\n+     * concurrent access in multi-core environments; due to statelessness\n+     * of {@link SerializedString} at most leads to multiple instantiations.\n+     * \n+     * @since 2.4\n+     */\n+    protected SerializableString _encodedSimple;\n+    \n     public PropertyName(String simpleName) {\n         this(simpleName, null);\n     }\n         return _simpleName;\n     }\n \n+    /**\n+     * Accessor that may be used to get lazily-constructed efficient\n+     * representation of the simple name.\n+     * \n+     * @since 2.4\n+     */\n+    public SerializableString simpleAsEncoded(MapperConfig<?> config) {\n+        SerializableString sstr = _encodedSimple;\n+        if (sstr == null) {\n+            sstr = config.compileString(_simpleName);\n+            _encodedSimple = sstr;\n+        }\n+        return sstr;\n+    }\n+    \n     public String getNamespace() {\n         return _namespace;\n     }\n     public boolean isEmpty() {\n         return (_namespace == null) && (_simpleName.isEmpty());\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Std method overrides\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n         if (ann == null) {\n             return null;\n         }\n-        return new PropertyName(ann.value());\n+        String ns = ann.namespace();\n+        if (ns != null && ns.length() == 0) {\n+            ns = null;\n+        }\n+        return PropertyName.construct(ann.value(), ns);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java\n             // [JACKSON-163]\n             wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n             if (wrap) {\n+                PropertyName pname = _rootNames.findRootName(value.getClass(), _config);\n                 jgen.writeStartObject();\n-                jgen.writeFieldName(_rootNames.findRootName(value.getClass(), _config));\n+                jgen.writeFieldName(pname.simpleAsEncoded(_config));\n             }\n         } else if (rootName.length() == 0) {\n             wrap = false;\n             wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n             if (wrap) {\n                 jgen.writeStartObject();\n-                jgen.writeFieldName(_rootNames.findRootName(rootType, _config));\n+                PropertyName pname = _rootNames.findRootName(value.getClass(), _config);\n+                jgen.writeFieldName(pname.simpleAsEncoded(_config));\n             }\n         } else if (rootName.length() == 0) {\n             wrap = false;\n             wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n             if (wrap) {\n                 jgen.writeStartObject();\n-                jgen.writeFieldName((rootType == null)\n+                PropertyName pname = (rootType == null)\n                         ? _rootNames.findRootName(value.getClass(), _config)\n-                        : _rootNames.findRootName(rootType, _config));\n+                        : _rootNames.findRootName(rootType, _config);\n+                jgen.writeFieldName(pname.simpleAsEncoded(_config));\n             }\n         } else if (rootName.length() == 0) {\n             wrap = false;\n--- a/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/RootNameLookup.java\n package com.fasterxml.jackson.databind.util;\n \n-import com.fasterxml.jackson.core.SerializableString;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n import com.fasterxml.jackson.databind.introspect.AnnotatedClass;\n      * For efficient operation, let's try to minimize number of times we\n      * need to introspect root element name to use.\n      */\n-    protected transient LRUMap<ClassKey,SerializableString> _rootNames;\n+    protected transient LRUMap<ClassKey,PropertyName> _rootNames;\n \n     public RootNameLookup() {\n-        _rootNames = new LRUMap<ClassKey,SerializableString>(20, 200);\n+        _rootNames = new LRUMap<ClassKey,PropertyName>(20, 200);\n    }\n \n-    public SerializableString findRootName(JavaType rootType, MapperConfig<?> config) {\n+    public PropertyName findRootName(JavaType rootType, MapperConfig<?> config) {\n         return findRootName(rootType.getRawClass(), config);\n     }\n \n-    public SerializableString findRootName(Class<?> rootType, MapperConfig<?> config)\n+    public PropertyName findRootName(Class<?> rootType, MapperConfig<?> config)\n     {\n         ClassKey key = new ClassKey(rootType);\n-        SerializableString name = _rootNames.get(key);\n+        PropertyName name = _rootNames.get(key); \n         if (name != null) {\n             return name;\n         }\n         BeanDescription beanDesc = config.introspectClassAnnotations(rootType);\n         AnnotationIntrospector intr = config.getAnnotationIntrospector();\n         AnnotatedClass ac = beanDesc.getClassInfo();\n-        PropertyName pname = intr.findRootName(ac);\n-        String nameStr;\n+        name = intr.findRootName(ac);\n         // No answer so far? Let's just default to using simple class name\n-        if (pname == null || !pname.hasSimpleName()) {\n+        if (name == null || !name.hasSimpleName()) {\n             // Should we strip out enclosing class tho? For now, nope:\n-            nameStr = rootType.getSimpleName();\n-        } else {\n-            nameStr = pname.getSimpleName();\n+            name = new PropertyName(rootType.getSimpleName());\n         }\n-        name = config.compileString(nameStr);\n         _rootNames.put(key, name);\n         return name;\n     }\n--- a/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java\n \n             // First, as regular double value\n             if (NAN_STRING != str) {\n-            \tresult = MAPPER.readValue(new StringReader(str), Double.class);\n+                result = MAPPER.readValue(str, Double.class);\n             \tassertEquals(exp, result);\n             }\n             // and then as coerced String:", "timestamp": 1399526379, "metainfo": ""}