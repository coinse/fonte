{"sha": "73ec29f75f1dd6f0c52e9c310dc4f8414346f49a", "log": "Rename \"line separator\" to \"record separator\".  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     private final Character escape;\n     private final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?\n     private final boolean ignoreEmptyLines;\n-    private final String lineSeparator; // for outputs\n+    private final String recordSeparator; // for outputs\n     private final String[] header;\n \n     /**\n             .withDelimiter(COMMA)\n             .withQuoteChar(DOUBLE_QUOTE)\n             .withIgnoreEmptyLines(true)\n-            .withLineSeparator(CRLF);\n+            .withRecordSeparator(CRLF);\n \n     /**\n      * Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n             PRISTINE\n             .withDelimiter(COMMA)\n             .withQuoteChar(DOUBLE_QUOTE)\n-            .withLineSeparator(CRLF);\n+            .withRecordSeparator(CRLF);\n \n     /**\n      * Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n             PRISTINE\n             .withDelimiter(COMMA)\n             .withQuoteChar(DOUBLE_QUOTE)\n-            .withLineSeparator(CRLF);\n+            .withRecordSeparator(CRLF);\n \n     /** Tab-delimited format, with quote; leading and trailing spaces ignored. */\n     public static final CSVFormat TDF =\n             .withQuoteChar(DOUBLE_QUOTE)\n             .withIgnoreSurroundingSpaces(true)\n             .withIgnoreEmptyLines(true)\n-            .withLineSeparator(CRLF);\n+            .withRecordSeparator(CRLF);\n \n     /**\n      * Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations. This is\n             PRISTINE\n             .withDelimiter(TAB)\n             .withEscape(ESCAPE)\n-            .withLineSeparator(LF);\n+            .withRecordSeparator(LF);\n \n     /**\n      * Creates a basic CSV format.\n      *            <tt>true</tt> when whitespaces enclosing values should be ignored\n      * @param ignoreEmptyLines\n      *            <tt>true</tt> when the parser should skip empty lines\n-     * @param lineSeparator\n+     * @param recordSeparator\n      *            the line separator to use for output\n      * @param header\n      *            the header\n         this.escape = escape;\n         this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\n         this.ignoreEmptyLines = ignoreEmptyLines;\n-        this.lineSeparator = lineSeparator;\n+        this.recordSeparator = lineSeparator;\n         this.header = header;\n     }\n \n      */\n     public CSVFormat withDelimiter(final char delimiter) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, header);\n     }\n \n     /**\n             throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n         }\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, header);\n     }\n \n     /**\n             throw new IllegalArgumentException(\"The comment start character cannot be a line break\");\n         }\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, header);\n     }\n \n     /**\n             throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n         }\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, header);\n     }\n \n     /**\n      */\n     public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, header);\n     }\n \n     /**\n      */\n     public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, header);\n     }\n \n     /**\n      *\n      * @return the line separator\n      */\n-    public String getLineSeparator() {\n-        return lineSeparator;\n-    }\n-\n-    /**\n-     * Returns a copy of this format using the specified output line separator.\n-     *\n-     * @param lineSeparator\n-     *            the line separator to use for output.\n-     *\n-     * @return A copy of this format using the specified output line separator\n-     */\n-    public CSVFormat withLineSeparator(final char lineSeparator) {\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                ignoreSurroundingSpaces, ignoreEmptyLines, String.valueOf(lineSeparator), header);\n-    }\n-\n-    /**\n-     * Returns a copy of this format using the specified output line separator.\n-     *\n-     * @param lineSeparator\n-     *            the line separator to use for output.\n-     *\n-     * @return A copy of this format using the specified output line separator\n-     */\n-    public CSVFormat withLineSeparator(final String lineSeparator) {\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n+    public String getRecordSeparator() {\n+        return recordSeparator;\n+    }\n+\n+    /**\n+     * Returns a copy of this format using the specified output record separator.\n+     *\n+     * @param recordSeparator\n+     *            the record separator to use for output.\n+     *\n+     * @return A copy of this format using the specified output record separator\n+     */\n+    public CSVFormat withRecordSeparator(final char recordSeparator) {\n+        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, String.valueOf(recordSeparator), header);\n+    }\n+\n+    /**\n+     * Returns a copy of this format using the specified output record separator.\n+     *\n+     * @param recordSeparator\n+     *            the record separator to use for output.\n+     *\n+     * @return A copy of this format using the specified output record separator\n+     */\n+    public CSVFormat withRecordSeparator(final String recordSeparator) {\n+        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, header);\n     }\n \n     /**\n      */\n     public CSVFormat withQuotePolicy(final Quote quotePolicy) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, header);\n     }\n \n     String[] getHeader() {\n      */\n     public CSVFormat withHeader(final String... header) {\n         return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n-                ignoreSurroundingSpaces, ignoreEmptyLines, lineSeparator, header);\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, header);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n      * Outputs the line separator.\n      */\n     public void println() throws IOException {\n-        out.append(format.getLineSeparator());\n+        out.append(format.getRecordSeparator());\n         newLine = true;\n     }\n \n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n         format.withQuoteChar('?');\n         format.withQuotePolicy(Quote.ALL);\n         format.withCommentStart('?');\n-        format.withLineSeparator(\"?\");\n+        format.withRecordSeparator(\"?\");\n         format.withEscape('?');\n         format.withIgnoreSurroundingSpaces(false);\n         format.withIgnoreEmptyLines(false);\n         assertEquals('!', format.getQuoteChar().charValue());\n         assertEquals('!', format.getCommentStart().charValue());\n         assertEquals('!', format.getEscape().charValue());\n-        assertEquals(CRLF, format.getLineSeparator());\n+        assertEquals(CRLF, format.getRecordSeparator());\n \n         assertTrue(format.getIgnoreSurroundingSpaces());\n         assertTrue(format.getIgnoreEmptyLines());\n         assertEquals('?', format.withQuoteChar('?').getQuoteChar().charValue());\n         assertEquals(Quote.ALL, format.withQuotePolicy(Quote.ALL).getQuotePolicy());\n         assertEquals('?', format.withCommentStart('?').getCommentStart().charValue());\n-        assertEquals(\"?\", format.withLineSeparator(\"?\").getLineSeparator());\n+        assertEquals(\"?\", format.withRecordSeparator(\"?\").getRecordSeparator());\n         assertEquals('?', format.withEscape('?').getEscape().charValue());\n \n         assertFalse(format.withIgnoreSurroundingSpaces(false).getIgnoreSurroundingSpaces());\n         assertEquals(\"delimiter\", CSVFormat.DEFAULT.getDelimiter(), format.getDelimiter());\n         assertEquals(\"encapsulator\", CSVFormat.DEFAULT.getQuoteChar(), format.getQuoteChar());\n         assertEquals(\"comment start\", CSVFormat.DEFAULT.getCommentStart(), format.getCommentStart());\n-        assertEquals(\"line separator\", CSVFormat.DEFAULT.getLineSeparator(), format.getLineSeparator());\n+        assertEquals(\"line separator\", CSVFormat.DEFAULT.getRecordSeparator(), format.getRecordSeparator());\n         assertEquals(\"escape\", CSVFormat.DEFAULT.getEscape(), format.getEscape());\n         assertEquals(\"trim\", CSVFormat.DEFAULT.getIgnoreSurroundingSpaces(), format.getIgnoreSurroundingSpaces());\n         assertEquals(\"empty lines\", CSVFormat.DEFAULT.getIgnoreEmptyLines(), format.getIgnoreEmptyLines());\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n \n \n         final CSVFormat format = new CSVFormat(',').withQuoteChar('\\'').withEscape('/')\n-                               .withIgnoreEmptyLines(true).withLineSeparator(CRLF);\n+                               .withIgnoreEmptyLines(true).withRecordSeparator(CRLF);\n \n         final CSVParser parser = new CSVParser(code, format);\n         final List<CSVRecord> records = parser.getRecords();\n \n \n         final CSVFormat format = new CSVFormat(',').withEscape('/')\n-                .withIgnoreEmptyLines(true).withLineSeparator(CRLF);\n+                .withIgnoreEmptyLines(true).withRecordSeparator(CRLF);\n \n         final CSVParser parser = new CSVParser(code, format);\n         final List<CSVRecord> records = parser.getRecords();\n     @Test\n     public void testGetRecordWithMultiiLineValues() throws Exception {\n         final CSVParser parser = new CSVParser(\"\\\"a\\r\\n1\\\",\\\"a\\r\\n2\\\"\" + CRLF + \"\\\"b\\r\\n1\\\",\\\"b\\r\\n2\\\"\" + CRLF + \"\\\"c\\r\\n1\\\",\\\"c\\r\\n2\\\"\",\n-                CSVFormat.DEFAULT.withLineSeparator(CRLF));\n+                CSVFormat.DEFAULT.withRecordSeparator(CRLF));\n         CSVRecord record;\n         assertEquals(0, parser.getRecordNumber());\n         assertEquals(0, parser.getLineNumber());\n     }\n \n     private void validateRecordNumbers(String lineSeparator) throws IOException {\n-        final CSVParser parser = new CSVParser(\"a\" + lineSeparator + \"b\" + lineSeparator + \"c\", CSVFormat.DEFAULT.withLineSeparator(lineSeparator));\n+        final CSVParser parser = new CSVParser(\"a\" + lineSeparator + \"b\" + lineSeparator + \"c\", CSVFormat.DEFAULT.withRecordSeparator(lineSeparator));\n         CSVRecord record;\n         assertEquals(0, parser.getRecordNumber());\n         assertNotNull(record = parser.nextRecord());\n     }\n \n     private void validateLineNumbers(String lineSeparator) throws IOException {\n-        final CSVParser parser = new CSVParser(\"a\" + lineSeparator + \"b\" + lineSeparator + \"c\", CSVFormat.DEFAULT.withLineSeparator(lineSeparator));\n+        final CSVParser parser = new CSVParser(\"a\" + lineSeparator + \"b\" + lineSeparator + \"c\", CSVFormat.DEFAULT.withRecordSeparator(lineSeparator));\n         assertEquals(0, parser.getLineNumber());\n         assertNotNull(parser.nextRecord());\n         assertEquals(1, parser.getLineNumber());\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n         return sb.toString();\n     }\n \n-    String lineSeparator = CSVFormat.DEFAULT.getLineSeparator();\n+    String recordSeparator = CSVFormat.DEFAULT.getRecordSeparator();\n \n     public void doOneRandom(final CSVFormat format) throws Exception {\n         final Random r = new Random();\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecords(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } });\n-        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+        assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecords(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }), Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) });\n-        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+        assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecords(Arrays.asList(new String[][] { { \"r1c1\", \"r1c2\" }, { \"r2c1\", \"r2c2\" } }));\n-        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+        assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecords(Arrays.asList(new List[] { Arrays.asList(new String[] { \"r1c1\", \"r1c2\" }),\n                 Arrays.asList(new String[] { \"r2c1\", \"r2c2\" }) }));\n-        assertEquals(\"r1c1,r1c2\" + lineSeparator + \"r2c1,r2c2\" + lineSeparator, sw.toString());\n+        assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecord(\"a\", \"b\");\n-        assertEquals(\"a,b\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,b\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.printRecord(\"a,b\", \"b\");\n-        assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n+        assertEquals(\"\\\"a,b\\\",b\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n             stmt.execute(\"insert into TEST values(2, 'r2')\");\n             final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n             printer.printRecords(stmt.executeQuery(\"select ID, NAME from TEST\"));\n-            assertEquals(\"1,r1\" + lineSeparator + \"2,r2\" + lineSeparator, sw.toString());\n+            assertEquals(\"1,r1\" + recordSeparator + \"2,r2\" + recordSeparator, sw.toString());\n         } finally {\n             connection.close();\n         }\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n         printer.printComment(\"This is a comment\\non multiple lines\");\n \n-        assertEquals(\"# This is a comment\" + lineSeparator + \"# on multiple lines\" + lineSeparator, sw.toString());\n+        assertEquals(\"# This is a comment\" + recordSeparator + \"# on multiple lines\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\");\n-        assertEquals(\"a,b\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,b\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a,b\", \"b\");\n-        assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n+        assertEquals(\"\\\"a,b\\\",b\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a, b\", \"b \");\n-        assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + lineSeparator, sw.toString());\n+        assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\\"c\");\n-        assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\nc\");\n-        assertEquals(\"a,\\\"b\\nc\\\"\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,\\\"b\\nc\\\"\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\r\\nc\");\n-        assertEquals(\"a,\\\"b\\r\\nc\\\"\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,\\\"b\\r\\nc\\\"\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\\\c\");\n-        assertEquals(\"a,b\\\\c\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,b\\\\c\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", null, \"b\");\n-        assertEquals(\"a,,b\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,,b\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL));\n         printer.printRecord(\"a\", \"b\\nc\", \"d\");\n-        assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",\\\"d\\\"\" + lineSeparator, sw.toString());\n+        assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",\\\"d\\\"\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.NON_NUMERIC));\n         printer.printRecord(\"a\", \"b\\nc\", Integer.valueOf(1));\n-        assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",1\" + lineSeparator, sw.toString());\n+        assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",1\" + recordSeparator, sw.toString());\n     }\n \n     @Test\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n         printer.printComment(\"This is a comment\");\n \n-        assertEquals(\"# This is a comment\" + lineSeparator, sw.toString());\n+        assertEquals(\"# This is a comment\" + recordSeparator, sw.toString());\n     }\n \n }", "timestamp": 1350411652, "metainfo": ""}