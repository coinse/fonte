{"sha": "a72c71f5cc6431890f82707a2782325be6747dd1", "log": "Consistently rename Quote/QuotePolicy to QuoteMode  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n \n     private final char delimiter;\n     private final Character quoteChar; // null if quoting is disabled\n-    private final Quote quotePolicy;\n+    private final QuoteMode quoteMode;\n     private final Character commentStart; // null if commenting is disabled\n     private final Character escape; // null if escaping is disabled\n     private final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values?\n      *            the char used for value separation, must not be a line break character\n      * @param quoteChar\n      *            the Character used as value encapsulation marker, may be {@code null} to disable\n-     * @param quotePolicy\n-     *            the quote policy\n+     * @param quoteMode\n+     *            the quote mode\n      * @param commentStart\n      *            the Character used for comment identification, may be {@code null} to disable\n      * @param escape\n      * @throws IllegalArgumentException if the delimiter is a line break character\n      */\n     private CSVFormat(final char delimiter, final Character quoteChar,\n-            final Quote quotePolicy, final Character commentStart,\n+            final QuoteMode quoteMode, final Character commentStart,\n             final Character escape, final boolean ignoreSurroundingSpaces,\n             final boolean ignoreEmptyLines, final String recordSeparator,\n             final String nullString, final String[] header, final boolean skipHeaderRecord,\n         }\n         this.delimiter = delimiter;\n         this.quoteChar = quoteChar;\n-        this.quotePolicy = quotePolicy;\n+        this.quoteMode = quoteMode;\n         this.commentStart = commentStart;\n         this.escape = escape;\n         this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;\n         if (delimiter != other.delimiter) {\n             return false;\n         }\n-        if (quotePolicy != other.quotePolicy) {\n+        if (quoteMode != other.quoteMode) {\n             return false;\n         }\n         if (quoteChar == null) {\n      *\n      * @return the quote policy\n      */\n-    public Quote getQuotePolicy() {\n-        return quotePolicy;\n+    public QuoteMode getQuoteMode() {\n+        return quoteMode;\n     }\n \n     /**\n         int result = 1;\n \n         result = prime * result + delimiter;\n-        result = prime * result + ((quotePolicy == null) ? 0 : quotePolicy.hashCode());\n+        result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());\n         result = prime * result + ((quoteChar == null) ? 0 : quoteChar.hashCode());\n         result = prime * result + ((commentStart == null) ? 0 : commentStart.hashCode());\n         result = prime * result + ((escape == null) ? 0 : escape.hashCode());\n                     \"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");\n         }\n \n-        if (escape == null && quotePolicy == Quote.NONE) {\n+        if (escape == null && quoteMode == QuoteMode.NONE) {\n             throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");\n         }\n     }\n         if (isLineBreak(commentMarker)) {\n             throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");\n         }\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentMarker, escape,\n+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n         if (isLineBreak(delimiter)) {\n             throw new IllegalArgumentException(\"The delimiter cannot be a line break\");\n         }\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n         if (isLineBreak(escape)) {\n             throw new IllegalArgumentException(\"The escape character cannot be a line break\");\n         }\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n      * @see #withSkipHeaderRecord(boolean)\n      */\n     public CSVFormat withHeader(final String... header) {\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n      * @return A new CSVFormat that is equal to this but with the specified missing column names behavior.\n      */\n     public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n      * @return A new CSVFormat that is equal to this but with the specified empty line skipping behavior.\n      */\n     public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n      * @return A new CSVFormat that is equal to this but with the specified trimming behavior.\n      */\n     public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n      * @return A new CSVFormat that is equal to this but with the specified null conversion string.\n      */\n     public CSVFormat withNullString(final String nullString) {\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n         if (isLineBreak(quoteChar)) {\n             throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");\n         }\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n     /**\n      * Sets the output quote policy of the format to the specified value.\n      *\n-     * @param quotePolicy\n+     * @param quoteModePolicy\n      *            the quote policy to use for output.\n      *\n      * @return A new CSVFormat that is equal to this but with the specified quote policy\n      */\n-    public CSVFormat withQuotePolicy(final Quote quotePolicy) {\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+    public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy) {\n+        return new CSVFormat(delimiter, quoteChar, quoteModePolicy, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n      *              if recordSeparator is none of CR, LF or CRLF\n      */\n     public CSVFormat withRecordSeparator(final String recordSeparator) {\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n      * @see #withHeader(String...)\n      */\n     public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord) {\n-        return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n+        return new CSVFormat(delimiter, quoteChar, quoteMode, commentStart, escape,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord,\n                 allowMissingColumnNames);\n     }\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n         final char delimChar = format.getDelimiter();\n         final char quoteChar = format.getQuoteChar().charValue();\n \n-        Quote quotePolicy = format.getQuotePolicy();\n-        if (quotePolicy == null) {\n-            quotePolicy = Quote.MINIMAL;\n-        }\n-        switch (quotePolicy) {\n+        QuoteMode quoteModePolicy = format.getQuoteMode();\n+        if (quoteModePolicy == null) {\n+            quoteModePolicy = QuoteMode.MINIMAL;\n+        }\n+        switch (quoteModePolicy) {\n         case ALL:\n             quote = true;\n             break;\n             }\n             break;\n         default:\n-            throw new IllegalStateException(\"Unexpected Quote value: \" + quotePolicy);\n+            throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy);\n         }\n \n         if (!quote) {\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/csv/QuoteMode.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv;\n+\n+/**\n+ * Defines quote behavior when printing.\n+ *\n+ * @version $Id$\n+ */\n+public enum QuoteMode {\n+\n+    /**\n+     * Quotes all fields.\n+     */\n+    ALL,\n+\n+    /**\n+     * Quotes fields which contain special characters such as a delimiter, quote character or any of the characters in\n+     * line separator.\n+     */\n+    MINIMAL,\n+\n+    /**\n+     * Quotes all non-numeric fields.\n+     */\n+    NON_NUMERIC,\n+\n+    /**\n+     * Never quotes fields. When the delimiter occurs in data, it is preceded by the current escape character. If the\n+     * escape character is not set, printing will throw an exception if any characters that require escaping are\n+     * encountered.\n+     */\n+    NONE\n+}\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n         final CSVFormat right = CSVFormat.newFormat('\\'')\n                 .withQuoteChar('\"')\n                 .withCommentMarker('#')\n-                .withQuotePolicy(Quote.ALL);\n+                .withQuoteMode(QuoteMode.ALL);\n         final CSVFormat left = right\n                 .withCommentMarker('!');\n \n                 .withQuoteChar('\"')\n                 .withCommentMarker('#')\n                 .withEscape('+')\n-                .withQuotePolicy(Quote.ALL);\n+                .withQuoteMode(QuoteMode.ALL);\n         final CSVFormat left = right\n                 .withEscape('!');\n \n                 .withIgnoreEmptyLines(true)\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL);\n+                .withQuoteMode(QuoteMode.ALL);\n         final CSVFormat left = right\n                 .withHeader(\"Three\", \"Two\", \"One\");\n \n                 .withIgnoreEmptyLines(true)\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL);\n+                .withQuoteMode(QuoteMode.ALL);\n         final CSVFormat left = right\n                 .withIgnoreEmptyLines(false);\n \n                 .withEscape('+')\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL);\n+                .withQuoteMode(QuoteMode.ALL);\n         final CSVFormat left = right\n                 .withIgnoreSurroundingSpaces(false);\n \n     public void testEqualsQuotePolicy() {\n         final CSVFormat right = CSVFormat.newFormat('\\'')\n                 .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = right\n-                .withQuotePolicy(Quote.MINIMAL);\n+                .withQuoteMode(QuoteMode.ALL);\n+        final CSVFormat left = right\n+                .withQuoteMode(QuoteMode.MINIMAL);\n \n         assertNotEquals(right, left);\n     }\n                 .withIgnoreEmptyLines(true)\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL);\n+                .withQuoteMode(QuoteMode.ALL);\n         final CSVFormat left = right\n                 .withRecordSeparator(LF);\n \n                 .withIgnoreEmptyLines(true)\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL)\n+                .withQuoteMode(QuoteMode.ALL)\n                 .withNullString(\"null\");\n         final CSVFormat left = right\n                 .withNullString(\"---\");\n                 .withIgnoreEmptyLines(true)\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteChar('\"')\n-                .withQuotePolicy(Quote.ALL)\n+                .withQuoteMode(QuoteMode.ALL)\n                 .withNullString(\"null\")\n                 .withSkipHeaderRecord(true);\n         final CSVFormat left = right\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testQuotePolicyNoneWithoutEscapeThrowsException() {\n-        CSVFormat.newFormat('!').withQuotePolicy(Quote.NONE);\n+        CSVFormat.newFormat('!').withQuoteMode(QuoteMode.NONE);\n     }\n \n     @Test\n         assertEquals(null, RFC4180.getEscape());\n         assertFalse(RFC4180.getIgnoreEmptyLines());\n         assertEquals(Character.valueOf('\"'), RFC4180.getQuoteChar());\n-        assertEquals(null, RFC4180.getQuotePolicy());\n+        assertEquals(null, RFC4180.getQuoteMode());\n         assertEquals(\"\\r\\n\", RFC4180.getRecordSeparator());\n     }\n \n \n     @Test\n     public void testWithQuotePolicy() throws Exception {\n-        final CSVFormat formatWithQuotePolicy = CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL);\n-        assertEquals(Quote.ALL, formatWithQuotePolicy.getQuotePolicy());\n+        final CSVFormat formatWithQuotePolicy = CSVFormat.DEFAULT.withQuoteMode(QuoteMode.ALL);\n+        assertEquals(QuoteMode.ALL, formatWithQuotePolicy.getQuoteMode());\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n     @Test\n     public void testQuoteAll() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.ALL));\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteMode(QuoteMode.ALL));\n         printer.printRecord(\"a\", \"b\\nc\", \"d\");\n         assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",\\\"d\\\"\" + recordSeparator, sw.toString());\n         printer.close();\n     @Test\n     public void testQuoteNonNumeric() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuotePolicy(Quote.NON_NUMERIC));\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteMode(QuoteMode.NON_NUMERIC));\n         printer.printRecord(\"a\", \"b\\nc\", Integer.valueOf(1));\n         assertEquals(\"\\\"a\\\",\\\"b\\nc\\\",1\" + recordSeparator, sw.toString());\n         printer.close();\n     @Test\n     public void testDelimeterQuoteNONE() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVFormat format = CSVFormat.DEFAULT.withEscape('!').withQuotePolicy(Quote.NONE);\n+        final CSVFormat format = CSVFormat.DEFAULT.withEscape('!').withQuoteMode(QuoteMode.NONE);\n         final CSVPrinter printer = new CSVPrinter(sw, format);\n         printer.print(\"a,b,c\");\n         printer.print(\"xyz\");", "timestamp": 1405960328, "metainfo": ""}