{"sha": "d54b339caa945f35b4b2536b1455f314e57808dd", "log": "[CSV-159] Add IgnoreCase option for accessing header names  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     private final String[] header; // array of header column names\n     private final String[] headerComments; // array of header comment lines\n     private final boolean skipHeaderRecord;\n+    private final boolean ignoreHeaderCase; // should ignore header names case\n \n     /**\n      * Standard comma separated format, as for {@link #RFC4180} but allowing empty lines.\n      * @see Predefined#Default\n      */\n     public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true,\n-            CRLF, null, null, null, false, false);\n+            CRLF, null, null, null, false, false, false);\n \n     /**\n      * Comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n      * @see #TDF\n      */\n     public static CSVFormat newFormat(final char delimiter) {\n-        return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false);\n+        return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false, false);\n     }\n \n     /**\n      *            TODO\n      * @param allowMissingColumnNames\n      *            TODO\n+     * @param ignoreHeaderCase\n+     *            TODO\n      * @throws IllegalArgumentException\n      *             if the delimiter is a line break character\n      */\n             final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\n             final boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\n             final Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\n-            final boolean allowMissingColumnNames) {\n+            final boolean allowMissingColumnNames, final boolean ignoreHeaderCase) {\n         this.delimiter = delimiter;\n         this.quoteCharacter = quoteChar;\n         this.quoteMode = quoteMode;\n         this.headerComments = toStringArray(headerComments);\n         this.header = header == null ? null : header.clone();\n         this.skipHeaderRecord = skipHeaderRecord;\n+        this.ignoreHeaderCase = ignoreHeaderCase;\n         validate();\n     }\n \n     }\n \n     /**\n+     * Specifies whether header names will be accessed ignoring case.\n+     *\n+     * @return {@code true} if header names cases are ignored, {@code false} if they are case sensitive.\n+     */\n+    public boolean getIgnoreHeaderCase() {\n+        return ignoreHeaderCase;\n+    }\n+\n+    /**\n      * Gets the String to convert to and from {@code null}.\n      * <ul>\n      * <li>\n         result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());\n         result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());\n         result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);\n+        result = prime * result + (ignoreHeaderCase ? 1231 : 1237);\n         result = prime * result + (ignoreEmptyLines ? 1231 : 1237);\n         result = prime * result + (skipHeaderRecord ? 1231 : 1237);\n         result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());\n         }\n         if (getIgnoreSurroundingSpaces()) {\n             sb.append(\" SurroundingSpaces:ignored\");\n+        }\n+        if (getIgnoreHeaderCase()) {\n+            sb.append(\" IgnoreHeaderCase:ignored\");\n         }\n         sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);\n         if (headerComments != null) {\n         }\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n                 ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n-                allowMissingColumnNames);\n+                allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n     public CSVFormat withHeader(final String... header) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, labels,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n     public CSVFormat withHeaderComments(final Object... headerComments) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n     public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n     public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n     public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n+    }\n+\n+    /**\n+     * Sets the header ignore case behavior to {@code true}.\n+     *\n+     * @return A new CSVFormat that will ignore case header name.\n+     * @see #withIgnoreHeaderCase(boolean)\n+     * @since ?\n+     */\n+    public CSVFormat withIgnoreHeaderCase() {\n+        return this.withIgnoreHeaderCase(true);\n+    }\n+\n+    /**\n+     * Sets if header names should be accessed ignoring case.\n+     *\n+     * @param ignoreHeaderCase\n+     *            the case mapping behavior, {@code true} to access name/values, {@code false} to leave the\n+     *            mapping as is.\n+     * @return A new CSVFormat that will ignore case header name if specified as {@code true}\n+     */\n+    public CSVFormat withIgnoreHeaderCase(final boolean ignoreHeaderCase) {\n+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n     public CSVFormat withNullString(final String nullString) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n                 ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n-                allowMissingColumnNames);\n+                allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n     public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n     public CSVFormat withRecordSeparator(final String recordSeparator) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n \n     /**\n     public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);\n     }\n }\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n+import java.util.TreeMap;\n \n import static org.apache.commons.csv.Token.Type.*;\n \n         Map<String, Integer> hdrMap = null;\n         final String[] formatHeader = this.format.getHeader();\n         if (formatHeader != null) {\n-            hdrMap = new LinkedHashMap<String, Integer>();\n+            hdrMap = this.format.getIgnoreHeaderCase()\n+                    ? new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER)\n+                    : new LinkedHashMap<String, Integer>();\n \n             String[] headerRecord = null;\n             if (formatHeader.length == 0) {\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n \n         parser.close();\n     }\n+\n+    @Test\n+    public void testIgnoreCaseHeaderMapping() throws Exception {\n+        final Reader in = new StringReader(\"1,2,3\");\n+        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"One\", \"TWO\", \"three\").withIgnoreHeaderCase()\n+                .parse(in).iterator();\n+        final CSVRecord record = records.next();\n+        assertEquals(\"1\", record.get(\"one\"));\n+        assertEquals(\"2\", record.get(\"two\"));\n+        assertEquals(\"3\", record.get(\"THREE\"));\n+    }\n }", "timestamp": 1444852109, "metainfo": ""}