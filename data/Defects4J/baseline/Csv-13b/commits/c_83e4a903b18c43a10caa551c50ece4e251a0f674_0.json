{"sha": "83e4a903b18c43a10caa551c50ece4e251a0f674", "log": "CSV-71 - Add convenience Methods to CSVLexer Use convenience methods from Lexer parent class  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n             }\n             \n             // ok, start of token reached: comment, encapsulated, or token\n-            if (c == format.getCommentStart()) {\n+            if (isCommentStart(c)) {\n                 // ignore everything till end of line and continue (incr linecount)\n                 in.readLine();\n                 tkn = nextToken(tkn.reset());\n-            } else if (c == format.getDelimiter()) {\n+            } else if (isDelimiter(c)) {\n                 // empty token return TOKEN(\"\")\n                 tkn.type = TOKEN;\n                 tkn.isReady = true;\n                 //noop: tkn.content.append(\"\");\n                 tkn.type = EORECORD;\n                 tkn.isReady = true;\n-            } else if (c == format.getEncapsulator()) {\n+            } else if (isEncapsulator(c)) {\n                 // consume encapsulated token\n                 encapsulatedTokenLexer(tkn, c);\n             } else if (isEndOfFile(c)) {\n                 tkn.type = EOF;\n                 tkn.isReady = true;\n                 break;\n-            } else if (c == format.getDelimiter()) {\n+            } else if (isDelimiter(c)) {\n                 // end of token\n                 tkn.type = TOKEN;\n                 tkn.isReady = true;\n                 break;\n-            } else if (c == format.getEscape()) {\n+            } else if (isEscape(c)) {\n                 tkn.content.append((char) readEscape(c));\n             } else {\n                 tkn.content.append((char) c);\n         while (true) {\n             c = in.read();\n             \n-            if (c == format.getEscape()) {\n+            if (isEscape(c)) {\n                 tkn.content.append((char) readEscape(c));\n-            } else if (c == format.getEncapsulator()) {\n-                if (in.lookAhead() == format.getEncapsulator()) {\n+            } else if (isEncapsulator(c)) {\n+                if (isEncapsulator(in.lookAhead())) {\n                     // double or escaped encapsulator -> add single encapsulator to token\n                     c = in.read();\n                     tkn.content.append((char) c);\n                     // token finish mark (encapsulator) reached: ignore whitespace till delimiter\n                     while (true) {\n                         c = in.read();\n-                        if (c == format.getDelimiter()) {\n+                        if (isDelimiter(c)) {\n                             tkn.type = TOKEN;\n                             tkn.isReady = true;\n                             return tkn;", "timestamp": 1332437271, "metainfo": ""}