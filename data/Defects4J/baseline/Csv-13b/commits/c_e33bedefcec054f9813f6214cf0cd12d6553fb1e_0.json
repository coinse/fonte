{"sha": "e33bedefcec054f9813f6214cf0cd12d6553fb1e", "log": "Change back to DEFAULT format name.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      * <li>withIgnoreEmptyLines(true)</li>\n      * </ul>\n      */\n-    public static final CSVFormat RFC4180_EMPTY_LINES =\n+    public static final CSVFormat DEFAULT =\n             newBuilder()\n             .build();\n \n      * <li>withLineSeparator(CRLF)</li>\n      * </ul>\n      *\n-     * Shortcut for {@code CSVFormat.newBuilder(CSVFormat.RFC4180_EMPTY_LINES)}\n+     * Shortcut for {@code CSVFormat.newBuilder(CSVFormat.DEFAULT)}\n      *\n      * @return a standard comma separated format builder, as for {@link #RFC4180} but allowing empty lines.\n      */\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      *             thrown if the parameters of the format are inconsistent\n      */\n     public CSVParser(final Reader input) throws IOException {\n-        this(input, CSVFormat.RFC4180_EMPTY_LINES);\n+        this(input, CSVFormat.DEFAULT);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n      * @param out\n      *            stream to which to print.\n      * @param format\n-     *            the CSV format. If null the default format is used ({@link CSVFormat#RFC4180_EMPTY_LINES})\n+     *            the CSV format. If null the default format is used ({@link CSVFormat#DEFAULT})\n      * @throws IllegalArgumentException\n      *             thrown if the parameters of the format are inconsistent\n      */\n     public CSVPrinter(final Appendable out, final CSVFormat format) {\n         this.out = out;\n-        this.format = format == null ? CSVFormat.RFC4180_EMPTY_LINES : format;\n+        this.format = format == null ? CSVFormat.DEFAULT : format;\n     }\n \n     // ======================================================\n--- a/src/main/java/org/apache/commons/csv/package-info.java\n+++ b/src/main/java/org/apache/commons/csv/package-info.java\n  * <p>Example usage:</p>\n  * <blockquote><pre>\n  * Reader in = new StringReader(\"a,b,c\");\n- * for (CSVRecord record : CSVFormat.RFC4180_EMPTY_LINES.parse(in)) {\n+ * for (CSVRecord record : CSVFormat.DEFAULT.parse(in)) {\n  *     for (String field : record) {\n  *         System.out.print(\"\\\"\" + field + \"\\\", \");\n  *     }\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n \n     @Test\n     public void testFormat() {\n-        final CSVFormat format = CSVFormat.RFC4180_EMPTY_LINES;\n+        final CSVFormat format = CSVFormat.DEFAULT;\n \n         assertEquals(\"\", format.format());\n         assertEquals(\"a,b,c\", format.format(\"a\", \"b\", \"c\"));\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n \n         final ObjectOutputStream oos = new ObjectOutputStream(out);\n-        oos.writeObject(CSVFormat.RFC4180_EMPTY_LINES);\n+        oos.writeObject(CSVFormat.DEFAULT);\n         oos.flush();\n         oos.close();\n \n         final CSVFormat format = (CSVFormat) in.readObject();\n \n         assertNotNull(format);\n-        assertEquals(\"delimiter\", CSVFormat.RFC4180_EMPTY_LINES.getDelimiter(), format.getDelimiter());\n-        assertEquals(\"encapsulator\", CSVFormat.RFC4180_EMPTY_LINES.getQuoteChar(), format.getQuoteChar());\n-        assertEquals(\"comment start\", CSVFormat.RFC4180_EMPTY_LINES.getCommentStart(), format.getCommentStart());\n-        assertEquals(\"line separator\", CSVFormat.RFC4180_EMPTY_LINES.getRecordSeparator(), format.getRecordSeparator());\n-        assertEquals(\"escape\", CSVFormat.RFC4180_EMPTY_LINES.getEscape(), format.getEscape());\n-        assertEquals(\"trim\", CSVFormat.RFC4180_EMPTY_LINES.getIgnoreSurroundingSpaces(), format.getIgnoreSurroundingSpaces());\n-        assertEquals(\"empty lines\", CSVFormat.RFC4180_EMPTY_LINES.getIgnoreEmptyLines(), format.getIgnoreEmptyLines());\n+        assertEquals(\"delimiter\", CSVFormat.DEFAULT.getDelimiter(), format.getDelimiter());\n+        assertEquals(\"encapsulator\", CSVFormat.DEFAULT.getQuoteChar(), format.getQuoteChar());\n+        assertEquals(\"comment start\", CSVFormat.DEFAULT.getCommentStart(), format.getCommentStart());\n+        assertEquals(\"line separator\", CSVFormat.DEFAULT.getRecordSeparator(), format.getRecordSeparator());\n+        assertEquals(\"escape\", CSVFormat.DEFAULT.getEscape(), format.getEscape());\n+        assertEquals(\"trim\", CSVFormat.DEFAULT.getIgnoreSurroundingSpaces(), format.getIgnoreSurroundingSpaces());\n+        assertEquals(\"empty lines\", CSVFormat.DEFAULT.getIgnoreEmptyLines(), format.getIgnoreEmptyLines());\n     }\n     \n     @Test\n     public void testEquals() {\n-        final CSVFormat right = CSVFormat.RFC4180_EMPTY_LINES;\n+        final CSVFormat right = CSVFormat.DEFAULT;\n         final CSVFormat left = CSVFormat.newBuilder().build();\n \n         assertFalse(right.equals(null));\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n         *       \\,,\n         */\n         final String code = \"a,\\\\,,b\\\\\\n\\\\,,\";\n-        final CSVFormat format = CSVFormat.RFC4180_EMPTY_LINES;\n+        final CSVFormat format = CSVFormat.DEFAULT;\n         assertFalse(format.isEscaping());\n         final Lexer parser = getLexer(code, format);\n \n     @Test\n     public void testNextToken5() throws IOException {\n         final String code = \"a,\\\"foo\\n\\\",b\\n\\\"foo\\n  baar ,,,\\\"\\n\\\"\\n\\t \\n\\\"\";\n-        final Lexer parser = getLexer(code, CSVFormat.RFC4180_EMPTY_LINES);\n+        final Lexer parser = getLexer(code, CSVFormat.DEFAULT);\n         assertTokenEquals(TOKEN, \"a\", parser.nextToken(new Token()));\n         assertTokenEquals(TOKEN, \"foo\\n\", parser.nextToken(new Token()));\n         assertTokenEquals(EORECORD, \"b\", parser.nextToken(new Token()));\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n \n     @Test\n     public void testEmptyFile() throws Exception {\n-        final CSVParser parser = new CSVParser(\"\", CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVParser parser = new CSVParser(\"\", CSVFormat.DEFAULT);\n         assertNull(parser.nextRecord());\n     }\n \n     @Test\n     public void testCSV57() throws Exception {\n-        final CSVParser parser = new CSVParser(\"\", CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVParser parser = new CSVParser(\"\", CSVFormat.DEFAULT);\n         final List<CSVRecord> list = parser.getRecords();\n         assertNotNull(list);\n         assertEquals(0, list.size());\n                 {\"# Final comment\"}\n         };\n \n-        CSVFormat format = CSVFormat.RFC4180_EMPTY_LINES;\n+        CSVFormat format = CSVFormat.DEFAULT;\n         assertFalse(format.isCommentingEnabled());\n \n         CSVParser parser = new CSVParser(code, format);\n \n         final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n \n-        for (final CSVRecord record : CSVFormat.RFC4180_EMPTY_LINES.parse(in)) {\n+        for (final CSVRecord record : CSVFormat.DEFAULT.parse(in)) {\n             records.add(record);\n         }\n \n     @Test\n     public void testRoundtrip() throws Exception {\n         final StringWriter out = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(out, CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVPrinter printer = new CSVPrinter(out, CSVFormat.DEFAULT);\n         final String input = \"a,b,c\\r\\n1,2,3\\r\\nx,y,z\\r\\n\";\n-        for (final CSVRecord record : CSVFormat.RFC4180_EMPTY_LINES.parse(new StringReader(input))) {\n+        for (final CSVRecord record : CSVFormat.DEFAULT.parse(new StringReader(input))) {\n             printer.printRecord(record);\n         }\n         assertEquals(input, out.toString());\n     public void testIterator() throws Exception {\n         final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n \n-        final Iterator<CSVRecord> iterator = CSVFormat.RFC4180_EMPTY_LINES.parse(in).iterator();\n+        final Iterator<CSVRecord> iterator = CSVFormat.DEFAULT.parse(in).iterator();\n \n         assertTrue(iterator.hasNext());\n         try {\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n         return sb.toString();\n     }\n \n-    String recordSeparator = CSVFormat.RFC4180_EMPTY_LINES.getRecordSeparator();\n+    String recordSeparator = CSVFormat.DEFAULT.getRecordSeparator();\n \n     public void doOneRandom(final CSVFormat format) throws Exception {\n         final Random r = new Random();\n     @Test\n     public void testDisabledComment() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printComment(\"This is a comment\");\n \n         assertEquals(\"\", sw.toString());\n             stmt.execute(\"CREATE TABLE TEST(ID INT PRIMARY KEY, NAME VARCHAR(255))\");\n             stmt.execute(\"insert into TEST values(1, 'r1')\");\n             stmt.execute(\"insert into TEST values(2, 'r2')\");\n-            final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180_EMPTY_LINES);\n+            final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n             printer.printRecords(stmt.executeQuery(\"select ID, NAME from TEST\"));\n             assertEquals(\"1,r1\" + recordSeparator + \"2,r2\" + recordSeparator, sw.toString());\n             printer.close();\n     @Test\n     public void testPrinter1() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\");\n         assertEquals(\"a,b\" + recordSeparator, sw.toString());\n         printer.close();\n     @Test\n     public void testPrinter2() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a,b\", \"b\");\n         assertEquals(\"\\\"a,b\\\",b\" + recordSeparator, sw.toString());\n         printer.close();\n     @Test\n     public void testPrinter3() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a, b\", \"b \");\n         assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + recordSeparator, sw.toString());\n         printer.close();\n     @Test\n     public void testPrinter4() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\\"c\");\n         assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + recordSeparator, sw.toString());\n         printer.close();\n     @Test\n     public void testPrinter5() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\nc\");\n         assertEquals(\"a,\\\"b\\nc\\\"\" + recordSeparator, sw.toString());\n         printer.close();\n     @Test\n     public void testPrinter6() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\r\\nc\");\n         assertEquals(\"a,\\\"b\\r\\nc\\\"\" + recordSeparator, sw.toString());\n         printer.close();\n     @Test\n     public void testPrinter7() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", \"b\\\\c\");\n         assertEquals(\"a,b\\\\c\" + recordSeparator, sw.toString());\n         printer.close();\n     @Test\n     public void testPrintNullValues() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180_EMPTY_LINES);\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printRecord(\"a\", null, \"b\");\n         assertEquals(\"a,,b\" + recordSeparator, sw.toString());\n         printer.close();\n     @Test\n     public void testRandom() throws Exception {\n         final int iter = 10000;\n-        doRandom(CSVFormat.RFC4180_EMPTY_LINES, iter);\n+        doRandom(CSVFormat.DEFAULT, iter);\n         doRandom(CSVFormat.EXCEL, iter);\n         doRandom(CSVFormat.MYSQL, iter);\n     }", "timestamp": 1364313018, "metainfo": ""}