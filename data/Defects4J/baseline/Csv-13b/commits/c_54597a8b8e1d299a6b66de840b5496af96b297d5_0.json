{"sha": "54597a8b8e1d299a6b66de840b5496af96b297d5", "log": "Unit test for [CSV-167] Comment line hides next record.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n     }\n \n     /**\n+     * Checks whether this record is a comment, false otherwise.\n+     *\n+     * @return true if this record is a comment, false otherwise\n+     * @since 1.3\n+     */\n+    public boolean isComment() {\n+        return comment != null;\n+    }\n+\n+    /**\n      * Checks whether a given column is mapped, i.e. its name has been defined to the parser.\n      *\n      * @param name\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/JiraCsv167Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import org.junit.Assert;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+public class JiraCsv167Test {\n+\n+    @Test\n+    @Ignore(\"Fails\")\n+    public void parse() throws IOException {\n+        File csvData = new File(\"src/test/resources/csv-167/sample1.csv\");\n+        CSVFormat format = CSVFormat.DEFAULT;\n+        //\n+        format = format.withAllowMissingColumnNames(false);\n+        format = format.withCommentMarker('#');\n+        format = format.withDelimiter(',');\n+        format = format.withEscape('\\\\');\n+        format = format.withHeader(\"author\", \"title\", \"publishDate\");\n+        format = format.withHeaderComments(\"headerComment\");\n+        format = format.withNullString(\"NULL\");\n+        format = format.withIgnoreEmptyLines(true);\n+        format = format.withIgnoreSurroundingSpaces(true);\n+        format = format.withQuote('\"');\n+        format = format.withQuoteMode(QuoteMode.ALL);\n+        format = format.withRecordSeparator('\\n');\n+        format = format.withSkipHeaderRecord(false);\n+        //\n+        CSVParser parser = CSVParser.parse(csvData, Charset.defaultCharset(), format);\n+        int comments = 0;\n+        int records = 0;\n+        for (CSVRecord csvRecord : parser) {\n+            if (csvRecord.isComment()) {\n+                comments++;\n+            } else {\n+                records++;\n+                // System.out.println(\"[\" + csvRecord.toString() + \"]\");\n+            }\n+        }\n+        // Comment lines are concatenated, in this example 4 lines become 2 comments.\n+        Assert.assertEquals(2, comments);\n+        Assert.assertEquals(3, records);\n+    }\n+}", "timestamp": 1451174550, "metainfo": ""}