{"sha": "1933f8abaf844b402a07bbcd90361d4ee1dca0e3", "log": "Avoid resource leak warnings  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n             final int count = record.size();\n             assertEquals(testName, readTestData(), count+\":\"+parsed);\n         }\n+        parser.close();\n     }\n \n     @Test\n             final int count = record.size();\n             assertEquals(testName, readTestData(), count + \":\" + parsed);\n         }\n+        parser.close();\n     }\n }\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n         assertTrue(records.size() > 0);\n \n         Utils.compare(\"Records do not match expected result\", res, records);\n+        parser.close();\n     }\n \n     @Test\n         assertTrue(records.size() > 0);\n \n         Utils.compare(\"\", res, records);\n+        parser.close();\n     }\n \n     @Test\n         for (int i = 0; i < res.length; i++) {\n             assertArrayEquals(res[i], records.get(i).values());\n         }\n+        parser.close();\n     }\n \n     @Test\n             }\n         } finally {\n             parser.close();\n+            reader.close();\n         }\n     }\n \n         final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT);\n         final List<CSVRecord> records = parser.getRecords();\n         assertEquals(4, records.size());\n+        parser.close();\n     }\n \n     @Test\n         final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT);\n         final List<CSVRecord> records = parser.getRecords();\n         assertEquals(4, records.size());\n+        parser.close();\n     }\n \n     @Test(expected = NoSuchElementException.class)\n         final List<CSVRecord> list = parser.getRecords();\n         assertNotNull(list);\n         assertEquals(0, list.size());\n+        parser.close();\n     }\n \n     @Test\n         };\n \n         format = CSVFormat.DEFAULT.withCommentStart('#');\n+        parser.close();\n         parser = CSVParser.parse(code, format);\n         records = parser.getRecords();\n \n         Utils.compare(\"Failed to parse with comments\", res_comments, records);\n+        parser.close();\n     }\n \n     @Test\n     public void testEmptyFile() throws Exception {\n         final CSVParser parser = CSVParser.parse(\"\", CSVFormat.DEFAULT);\n         assertNull(parser.nextRecord());\n+        parser.close();\n     }\n \n     @Test\n             for (int i = 0; i < res.length; i++) {\n                 assertArrayEquals(res[i], records.get(i).values());\n             }\n+            parser.close();\n         }\n     }\n \n             for (int i = 0; i < res.length; i++) {\n                 assertArrayEquals(res[i], records.get(i).values());\n             }\n+            parser.close();\n         }\n     }\n \n             for (int i = 0; i < res.length; i++) {\n                 assertArrayEquals(res[i], records.get(i).values());\n             }\n+            parser.close();\n         }\n     }\n \n             for (int i = 0; i < res.length; i++) {\n                 assertArrayEquals(res[i], records.get(i).values());\n             }\n+            parser.close();\n         }\n     }\n \n         for (int i = 0; i < res.length; i++) {\n             assertArrayEquals(res[i], records.get(i).values());\n         }\n+        parser.close();\n     }\n \n     @Test\n         for (int i = 0; i < res.length; i++) {\n             assertArrayEquals(res[i], records.get(i).values());\n         }\n+        parser.close();\n     }\n \n     @Test\n         }\n \n         assertFalse(records.hasNext());\n+        parser.close();\n     }\n \n     @Test\n         }\n \n         assertNull(parser.nextRecord());\n+        parser.close();\n     }\n \n     @Test\n         for (int i = 0; i < RESULT.length; i++) {\n             assertArrayEquals(RESULT[i], records.get(i).values());\n         }\n+        parser.close();\n     }\n \n     @Test\n         assertNull(record = parser.nextRecord());\n         assertEquals(8, parser.getCurrentLineNumber());\n         assertEquals(3, parser.getRecordNumber());\n+        parser.close();\n     }\n \n     @Test\n         final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT);\n         final List<CSVRecord> records = parser.getRecords();\n         assertEquals(3, records.size());\n+        parser.close();\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n         final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT);\n         final List<CSVRecord> records = parser.getRecords();\n         assertEquals(4, records.size());\n+        parser.close();\n     }\n \n     @Test\n         assertEquals(\"d\", second.get(0));\n         assertEquals(\"e\", second.get(1));\n         assertEquals(\"f\", second.get(2));\n+        parser.close();\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testNewCSVParserNullReaderFormat() throws Exception {\n-        new CSVParser(null, CSVFormat.DEFAULT);\n+        new CSVParser(null, CSVFormat.DEFAULT).close();\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testNewCSVParserReaderNullFormat() throws Exception {\n-        new CSVParser(new StringReader(\"\"), null);\n+        new CSVParser(new StringReader(\"\"), null).close();\n     }\n \n     @Test\n     public void testNoHeaderMap() throws Exception {\n         final CSVParser parser = CSVParser.parse(\"a,b,c\\n1,2,3\\nx,y,z\", CSVFormat.DEFAULT);\n         Assert.assertNull(parser.getHeaderMap());\n+        parser.close();\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n         assertNull(parser.nextRecord());\n         // Still 2 because the last line is does not have EOL chars\n         assertEquals(2, parser.getCurrentLineNumber());\n+        parser.close();\n     }\n \n     private void validateRecordNumbers(final String lineSeparator) throws IOException {\n         assertEquals(3, parser.getRecordNumber());\n         assertNull(record = parser.nextRecord());\n         assertEquals(3, parser.getRecordNumber());\n+        parser.close();\n     }\n \n }\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n         final List<CSVRecord> parseResult = parser.getRecords();\n \n         Utils.compare(\"Printer output :\" + printable(result), lines, parseResult);\n+        parser.close();\n     }\n \n     private void doRandom(final CSVFormat format, final int iter) throws Exception {\n         assertEquals(null, record.get(1));\n         assertEquals(\"b\", record.get(2));\n         assertFalse(iterator.hasNext());\n+        ((CSVParser) iterable).close();\n     }\n \n     @Test\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testNewCSVPrinterNullAppendableFormat() throws Exception {\n-        new CSVPrinter(null, CSVFormat.DEFAULT);\n+        new CSVPrinter(null, CSVFormat.DEFAULT).close();\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void testNewCsvPrinterAppendableNullFormat() throws Exception {\n-        new CSVPrinter(new StringWriter(), null);\n+        new CSVPrinter(new StringWriter(), null).close();\n     }\n }\n--- a/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVRecordTest.java\n         Collections.sort(list);\n         printer.printRecord(list);\n         Assert.assertEquals(\"A,B,C,NewValue\" + CSVFormat.DEFAULT.getRecordSeparator(), printer.getOut().toString());\n+        printer.close();\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n+++ b/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n         assertEquals(END_OF_STREAM, br.getLastChar());\n         assertNull(br.readLine());\n         assertEquals(0, br.read(new char[10], 0, 0));\n+        br.close();\n     }\n \n     @Test\n         assertEquals(END_OF_STREAM, br.lookAhead());\n         assertEquals(3, br.getCurrentLineNumber());\n \n+        br.close();\n     }\n \n     @Test\n         assertEquals(1, br.read(res, 4, 1));\n         assertArrayEquals(ref, res);\n         assertEquals('d', br.getLastChar());\n+        br.close();\n     }\n \n     @Test\n         ExtendedBufferedReader br = getBufferedReader(\"\");\n         assertNull(br.readLine());\n \n+        br.close();\n         br = getBufferedReader(\"\\n\");\n         assertEquals(\"\",br.readLine());\n         assertNull(br.readLine());\n \n+        br.close();\n         br = getBufferedReader(\"foo\\n\\nhello\");\n         assertEquals(0, br.getCurrentLineNumber());\n         assertEquals(\"foo\",br.readLine());\n         assertNull(br.readLine());\n         assertEquals(3, br.getCurrentLineNumber());\n \n+        br.close();\n         br = getBufferedReader(\"foo\\n\\nhello\");\n         assertEquals('f', br.read());\n         assertEquals('o', br.lookAhead());\n         assertEquals(3, br.getCurrentLineNumber());\n \n \n+        br.close();\n         br = getBufferedReader(\"foo\\rbaar\\r\\nfoo\");\n         assertEquals(\"foo\",br.readLine());\n         assertEquals('b', br.lookAhead());\n         assertEquals('f', br.lookAhead());\n         assertEquals(\"foo\",br.readLine());\n         assertNull(br.readLine());\n+        br.close();\n     }\n \n     /*\n         }\n         assertEquals(EOLeolct, br.getCurrentLineNumber());\n \n+        br.close();\n         br = getBufferedReader(test);\n         assertEquals(0, br.getCurrentLineNumber());\n         while (br.read() != -1) {\n         }\n         assertEquals(EOLeolct, br.getCurrentLineNumber());\n \n+        br.close();\n         br = getBufferedReader(test);\n         assertEquals(0, br.getCurrentLineNumber());\n         final char[] buff = new char[10];\n             // consume all\n         }\n         assertEquals(EOLeolct, br.getCurrentLineNumber());\n+        br.close();\n     }\n \n     private ExtendedBufferedReader getBufferedReader(final String s) {\n--- a/src/test/java/org/apache/commons/csv/PerformanceTest.java\n+++ b/src/test/java/org/apache/commons/csv/PerformanceTest.java\n            final Stats s = iterate(parser);\n            reader.close();\n            show(\"CSV\", s, t0);\n+           parser.close();\n        }\n        show();\n    }\n                    break;\n                 case COMMENT: // not really expecting these\n                     break;\n+                default:\n+                    throw new IllegalStateException(\"Unexpected Token type: \" + token.type);\n               }\n \n            } while (!token.type.equals(Token.Type.EOF));", "timestamp": 1396024674, "metainfo": ""}