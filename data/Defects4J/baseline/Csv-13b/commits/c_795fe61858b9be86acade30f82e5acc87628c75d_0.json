{"sha": "795fe61858b9be86acade30f82e5acc87628c75d", "log": "Use public CRLF constant  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n \n \n         CSVFormat format = CSVFormat.PRISTINE.withDelimiter(',').withEncapsulator('\\'').withEscape('/')\n-                               .withEmptyLinesIgnored(true).withLineSeparator(\"\\r\\n\");\n+                               .withEmptyLinesIgnored(true).withLineSeparator(CSVFormat.CRLF);\n \n         CSVParser parser = new CSVParser(code, format);\n         List<CSVRecord> records = parser.getRecords();\n \n \n         CSVFormat format = CSVFormat.PRISTINE.withDelimiter(',').withEscape('/')\n-                .withEmptyLinesIgnored(true).withLineSeparator(\"\\r\\n\");\n+                .withEmptyLinesIgnored(true).withLineSeparator(CSVFormat.CRLF);\n \n         CSVParser parser = new CSVParser(code, format);\n         List<CSVRecord> records = parser.getRecords();\n \n     @Test\n     public void testGetLineNumberWithCRLF() throws Exception {\n-        CSVParser parser = new CSVParser(\"a\\r\\nb\\r\\nc\", CSVFormat.DEFAULT.withLineSeparator(\"\\r\\n\"));\n+        CSVParser parser = new CSVParser(\"a\\r\\nb\\r\\nc\", CSVFormat.DEFAULT.withLineSeparator(CSVFormat.CRLF));\n         \n         assertEquals(0, parser.getLineNumber());\n         assertNotNull(parser.getRecord());", "timestamp": 1333071182, "metainfo": ""}