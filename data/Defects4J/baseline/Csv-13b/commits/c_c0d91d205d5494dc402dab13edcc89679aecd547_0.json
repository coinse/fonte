{"sha": "c0d91d205d5494dc402dab13edcc89679aecd547", "log": "Remove copy method. It is not needed since every withXxx() method returns a copy  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      */\n     public static CSVFormat newFormat(final char delimiter) {\n         return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false);\n-    }\n-\n-    /**\n-     * Creates a CSVFormatBuilder, using the values of the given CSVFormat.\n-     *\n-     * @param format\n-     *            The format to use values from\n-     * @return a new CSVFormat\n-     */\n-    public static CSVFormat copy(final CSVFormat format) {\n-        return new CSVFormat(format);\n     }\n \n     /**\n         this.skipHeaderRecord = skipHeaderRecord;\n     }\n \n-    CSVFormat(final CSVFormat format) {\n-        this(format.getDelimiter(), format.getQuoteChar(), format.getQuotePolicy(), format.getCommentStart(),\n-                format.getEscape(), format.getIgnoreSurroundingSpaces(), format.getIgnoreEmptyLines(),\n-                format.getRecordSeparator(), format.getNullString(), format.getHeader(), format.getSkipHeaderRecord());\n-    }\n-\n     @Override\n     public boolean equals(final Object obj) {\n         if (this == obj) {\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n     @Test\n     public void testEquals() {\n         final CSVFormat right = CSVFormat.DEFAULT;\n-        final CSVFormat left = CSVFormat.copy(right);\n+        final CSVFormat left = copy(right);\n \n         assertFalse(right.equals(null));\n         assertFalse(right.equals(\"A String Instance\"));\n                 .withQuoteChar('\"')\n                 .withCommentStart('#')\n                 .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n+        final CSVFormat left = right\n                 .withCommentStart('!');\n \n         assertNotEquals(right, left);\n                 .withCommentStart('#')\n                 .withEscape('+')\n                 .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n+        final CSVFormat left = right\n                 .withEscape('!');\n \n         assertNotEquals(right, left);\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteChar('\"')\n                 .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n+        final CSVFormat left = right\n                 .withHeader(\"Three\", \"Two\", \"One\");\n \n         assertNotEquals(right, left);\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteChar('\"')\n                 .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n+        final CSVFormat left = right\n                 .withIgnoreEmptyLines(false);\n \n         assertNotEquals(right, left);\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteChar('\"')\n                 .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n+        final CSVFormat left = right\n                 .withIgnoreSurroundingSpaces(false);\n \n         assertNotEquals(right, left);\n     @Test\n     public void testEqualsQuoteChar() {\n         final CSVFormat right = CSVFormat.newFormat('\\'').withQuoteChar('\"');\n-        final CSVFormat left = CSVFormat.copy(right).withQuoteChar('!');\n+        final CSVFormat left = right.withQuoteChar('!');\n \n         assertNotEquals(right, left);\n     }\n         final CSVFormat right = CSVFormat.newFormat('\\'')\n                 .withQuoteChar('\"')\n                 .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n+        final CSVFormat left = right\n                 .withQuotePolicy(Quote.MINIMAL);\n \n         assertNotEquals(right, left);\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteChar('\"')\n                 .withQuotePolicy(Quote.ALL);\n-        final CSVFormat left = CSVFormat.copy(right)\n+        final CSVFormat left = right\n                 .withRecordSeparator('!');\n \n         assertNotEquals(right, left);\n         CSVFormat formatWithRecordSeparator = CSVFormat.DEFAULT.withRecordSeparator('!');\n         assertEquals(\"!\", formatWithRecordSeparator.getRecordSeparator());\n     }\n+\n+    private static CSVFormat copy(final CSVFormat format) {\n+        return format.withDelimiter(format.getDelimiter());\n+    }\n }", "timestamp": 1375292594, "metainfo": ""}