{"sha": "c4014b6b38c9f661a12557db7ee464e158f386f7", "log": "Method names should start with a verb  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n                 token.type = EORECORD;\n             } else if (isQuoteChar(c)) {\n                 // consume encapsulated token\n-                encapsulatedTokenLexer(token);\n+                parseEncapsulatedToken(token);\n             } else if (isEndOfFile(c)) {\n                 // end of file return EOF()\n                 // noop: tkn.content.append(\"\");\n             } else {\n                 // next token must be a simple token\n                 // add removed blanks when not ignoring whitespace chars...\n-                simpleTokenLexer(token, c);\n+                parseSimpleToken(token, c);\n             }\n         }\n         return token;\n     }\n \n     /**\n-     * A simple token lexer\n+     * Parsed a simple token.\n      * <p/>\n      * Simple token are tokens which are not surrounded by encapsulators. A simple token might contain escaped\n      * delimiters (as \\, or \\;). The token is finished when one of the following conditions become true:\n      * @throws IOException\n      *             on stream access error\n      */\n-    private Token simpleTokenLexer(final Token tkn, int c) throws IOException {\n+    private Token parseSimpleToken(final Token tkn, int c) throws IOException {\n         // Faster to use while(true)+break than while(tkn.type == INVALID)\n         while (true) {\n             if (readEndOfLine(c)) {\n     }\n \n     /**\n-     * An encapsulated token lexer\n+     * Parses an encapsulated token.\n      * <p/>\n      * Encapsulated tokens are surrounded by the given encapsulating-string. The encapsulator itself might be included\n      * in the token using a doubling syntax (as \"\", '') or using escaping (as in \\\", \\'). Whitespaces before and after\n      * @throws IOException\n      *             on invalid state: EOF before closing encapsulator or invalid character before delimiter or EOL\n      */\n-    private Token encapsulatedTokenLexer(final Token tkn) throws IOException {\n+    private Token parseEncapsulatedToken(final Token tkn) throws IOException {\n         // save current line number in case needed for IOE\n         final long startLineNumber = getLineNumber();\n         int c;", "timestamp": 1364042904, "metainfo": ""}