{"sha": "62345245e994c35cb37d55502fc0313bc2a189d4", "log": "Use the more modern, compact, and flexible Javadoc \"{@code ...}\" instead of the HTML \"<tt>...</tt>\".  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n             .withIgnoreSurroundingSpaces(true);\n \n     /**\n-     * Default MySQL format used by the <tt>SELECT INTO OUTFILE</tt> and <tt>LOAD DATA INFILE</tt> operations.\n+     * Default MySQL format used by the {@code SELECT INTO OUTFILE} and {@code LOAD DATA INFILE} operations.\n      *\n      * <p>\n      * This is a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n      * @param escape\n      *            the Character used to escape special characters in values, may be {@code null} to disable\n      * @param ignoreSurroundingSpaces\n-     *            <tt>true</tt> when whitespaces enclosing values should be ignored\n+     *            {@code true} when whitespaces enclosing values should be ignored\n      * @param ignoreEmptyLines\n-     *            <tt>true</tt> when the parser should skip empty lines\n+     *            {@code true} when the parser should skip empty lines\n      * @param recordSeparator\n      *            the line separator to use for output\n      * @param nullString\n     /**\n      * Specifies whether empty headers are ignored when parsing the header line.\n      *\n-     * @return <tt>true</tt> if headers are ignored when parsing the header line, <tt>false</tt> to throw an\n+     * @return {@code true} if headers are ignored when parsing the header line, {@code false} to throw an\n      *         {@link IllegalArgumentException}.\n      */\n     public boolean isIgnoringEmptyHeaders() {\n     /**\n      * Specifies whether empty lines between records are ignored when parsing input.\n      *\n-     * @return <tt>true</tt> if empty lines between records are ignored, <tt>false</tt> if they are turned into empty\n+     * @return {@code true} if empty lines between records are ignored, {@code false} if they are turned into empty\n      *         records.\n      */\n     public boolean isIgnoringEmptyLines() {\n     /**\n      * Specifies whether spaces around values are ignored when parsing input.\n      *\n-     * @return <tt>true</tt> if spaces around values are ignored, <tt>false</tt> if they are treated as part of the\n+     * @return {@code true} if spaces around values are ignored, {@code false} if they are treated as part of the\n      *         value.\n      */\n     public boolean isIgnoringSurroundingSpaces() {\n      *\n      * Note that the comment introducer character is only recognized at the start of a line.\n      *\n-     * @return <tt>true</tt> is comments are supported, <tt>false</tt> otherwise\n+     * @return {@code true} is comments are supported, {@code false} otherwise\n      */\n     public boolean isCommentingEnabled() {\n         return commentStart != null;\n      * CSVFormat format = aformat.withHeader(&quot;name&quot;, &quot;email&quot;, &quot;phone&quot;);</pre>\n      *\n      * @param header\n-     *            the header, <tt>null</tt> if disabled, empty if parsed automatically, user specified otherwise.\n+     *            the header, {@code null} if disabled, empty if parsed automatically, user specified otherwise.\n      *\n      * @return A new CSVFormat that is equal to this but with the specified header\n      * @see #withSkipHeaderRecord(boolean)\n      * Sets the empty header behavior of the format.\n      *\n      * @param ignoreEmptyHeaders\n-     *            the empty header behavior, <tt>true</tt> to ignore empty headers in the header line,\n-     *            <tt>false</tt> to cause an {@link IllegalArgumentException} to be thrown.\n+     *            the empty header behavior, {@code true} to ignore empty headers in the header line,\n+     *            {@code false} to cause an {@link IllegalArgumentException} to be thrown.\n      * @return A new CSVFormat that is equal to this but with the specified empty header behavior.\n      */\n     public CSVFormat withIgnoreEmptyHeaders(final boolean ignoreEmptyHeaders) {\n      * Sets the empty line skipping behavior of the format.\n      *\n      * @param ignoreEmptyLines\n-     *            the empty line skipping behavior, <tt>true</tt> to ignore the empty lines between the records,\n-     *            <tt>false</tt> to translate empty lines to empty records.\n+     *            the empty line skipping behavior, {@code true} to ignore the empty lines between the records,\n+     *            {@code false} to translate empty lines to empty records.\n      * @return A new CSVFormat that is equal to this but with the specified empty line skipping behavior.\n      */\n     public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\n      * Sets the trimming behavior of the format.\n      *\n      * @param ignoreSurroundingSpaces\n-     *            the trimming behavior, <tt>true</tt> to remove the surrounding spaces, <tt>false</tt> to leave the\n+     *            the trimming behavior, {@code true} to remove the surrounding spaces, {@code false} to leave the\n      *            spaces as is.\n      * @return A new CSVFormat that is equal to this but with the specified trimming behavior.\n      */\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n     /**\n      * Parses the next record from the current point in the stream.\n      *\n-     * @return the record as an array of values, or <tt>null</tt> if the end of the stream has been reached\n+     * @return the record as an array of values, or {@code null} if the end of the stream has been reached\n      * @throws IOException\n      *             on parse error or input read-failure\n      */", "timestamp": 1405831060, "metainfo": ""}