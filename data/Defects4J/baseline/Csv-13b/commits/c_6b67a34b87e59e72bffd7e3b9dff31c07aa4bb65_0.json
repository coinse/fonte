{"sha": "6b67a34b87e59e72bffd7e3b9dff31c07aa4bb65", "log": "Sort methods  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n     }\n \n     /**\n-     * @return true if the given char is a whitespace character\n-     */\n-    boolean isWhitespace(final int c) {\n-        return c != format.getDelimiter() && Character.isWhitespace((char) c);\n-    }\n-\n-    /**\n      * Greedily accepts \\n, \\r and \\r\\n This checker consumes silently the second control-character...\n      *\n      * @return true if the given or next character is a line-terminator\n             c = in.read();\n         }\n         return c == LF || c == CR;\n+    }\n+\n+    abstract Token nextToken(Token reusableToken) throws IOException;\n+\n+    /**\n+     * @return true if the given char is a whitespace character\n+     */\n+    boolean isWhitespace(final int c) {\n+        return c != format.getDelimiter() && Character.isWhitespace((char) c);\n     }\n \n     /**\n         return c == END_OF_STREAM;\n     }\n \n-    abstract Token nextToken(Token reusableToken) throws IOException;\n-\n     boolean isDelimiter(final int c) {\n         return c == delimiter;\n     }", "timestamp": 1364130861, "metainfo": ""}