{"sha": "045dbbbe4ab84618cee8ba27d00b9283ce0a2715", "log": "Made CSVParser iterable to simplify the iteration over the records  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n import java.io.IOException;\n import java.io.Reader;\n import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.NoSuchElementException;\n \n import static org.apache.commons.csv.CSVParser.Token.Type.*;\n \n  * <p>Parsing of a csv-string having tabs as separators,\n  * '\"' as an optional value encapsulator, and comments starting with '#':</p>\n  * <pre>\n- *  String[][] record =\n- *   (new CSVParser(new StringReader(\"a\\tb\\nc\\td\"), new CSVFormat('\\t','\"','#'))).getAllValues();\n+ * CSVFormat format = new CSVFormat('\\t', '\"', '#');\n+ * Reader in = new StringReader(\"a\\tb\\nc\\td\");\n+ * String[][] records = new CSVParser(in, format).getRecords();\n  * </pre>\n  *\n- * <p>Parsing of a csv-string in Excel CSV format</p>\n+ * <p>Parsing of a csv-string in Excel CSV format, using a for-each loop:</p>\n  * <pre>\n- *  String[][] record =\n- *   (new CSVParser(new StringReader(\"a;b\\nc;d\"), CSVFormat.EXCEL)).getAllValues();\n+ * Reader in = new StringReader(\"a;b\\nc;d\");\n+ * CSVParser parser = new CSVParser(in, CSVFormat.EXCEL);\n+ * for (String[] record : parser) {\n+ *     ...\n+ * }\n  * </pre>\n  *\n  * <p>\n  * <p>see <a href=\"package-summary.html\">package documentation</a>\n  * for more details</p>\n  */\n-public class CSVParser {\n+public class CSVParser implements Iterable<String[]> {\n \n     /** length of the initial token (content-)buffer */\n     private static final int INITIAL_TOKEN_LENGTH = 50;\n      *         ('null' when end of file has been reached)\n      * @throws IOException on parse error or input read-failure\n      */\n-    public String[] getLine() throws IOException {\n+    String[] getLine() throws IOException {\n         String[] ret = EMPTY_STRING_ARRAY;\n         record.clear();\n         while (true) {\n             ret = (String[]) record.toArray(new String[record.size()]);\n         }\n         return ret;\n+    }\n+\n+    /**\n+     * Returns an iterator on the records. IOExceptions occuring\n+     * during the iteration are wrapped in a RuntimeException.\n+     */\n+    public Iterator<String[]> iterator() {\n+        return new Iterator<String[]>() {\n+            String[] current;\n+            \n+            public boolean hasNext() {\n+                if (current == null) {\n+                    current = getNextLine();\n+                }\n+                \n+                return current != null;\n+            }\n+\n+            public String[] next() {\n+                String[] next = current;\n+                current = null;\n+\n+                if (next == null) {\n+                    // hasNext() wasn't called before\n+                    next = getNextLine();\n+                    if (next == null) {\n+                        throw new NoSuchElementException(\"No more CSV records available\");\n+                    }\n+                }\n+                \n+                return next;\n+            }\n+            \n+            private String[] getNextLine() {\n+                try {\n+                    return getLine();\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+\n+            public void remove() { }\n+        };\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n \n import junit.framework.TestCase;\n \n         assertTrue(parser.getLine() == null);\n     }\n \n-    public void testGetAllValues() throws IOException {\n+    public void testGetRecords() throws IOException {\n         CSVParser parser = new CSVParser(new StringReader(code));\n         String[][] tmp = parser.getRecords();\n         assertEquals(res.length, tmp.length);\n     public void testUnicodeEscape() throws IOException {\n         String code = \"abc,\\\\u0070\\\\u0075\\\\u0062\\\\u006C\\\\u0069\\\\u0063\";\n         CSVParser parser = new CSVParser(new StringReader(code), CSVFormat.DEFAULT.withUnicodeEscapesInterpreted(true));\n-        String[] data = parser.getLine();\n+        String[] data = parser.iterator().next();\n         assertEquals(2, data.length);\n         assertEquals(\"abc\", data[0]);\n         assertEquals(\"public\", data[1]);\n         assertEquals(TOKEN + \";five;\", parser.testNextToken());\n         assertEquals(EOF + \";six;\", parser.testNextToken());\n     }\n+\n+    public void testForEach() {\n+        List<String[]> records = new ArrayList<String[]>();\n+        \n+        String code = \"a,b,c\\n1,2,3\\nx,y,z\";\n+        Reader in = new StringReader(code);\n+        \n+        for (String[] record : new CSVParser(in)) {\n+            records.add(record);\n+        }\n+        \n+        assertEquals(3, records.size());\n+        assertTrue(Arrays.equals(new String[] {\"a\", \"b\", \"c\"}, records.get(0)));\n+        assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, records.get(1)));\n+        assertTrue(Arrays.equals(new String[] {\"x\", \"y\", \"z\"}, records.get(2)));\n+    }\n+\n+    public void testIterator() {\n+        String code = \"a,b,c\\n1,2,3\\nx,y,z\";\n+        Iterator<String[]> iterator = new CSVParser(new StringReader(code)).iterator();\n+        \n+        assertTrue(iterator.hasNext());\n+        iterator.remove();\n+        assertTrue(Arrays.equals(new String[]{\"a\", \"b\", \"c\"}, iterator.next()));\n+        assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, iterator.next()));\n+        assertTrue(iterator.hasNext());\n+        assertTrue(iterator.hasNext());\n+        assertTrue(iterator.hasNext());\n+        assertTrue(Arrays.equals(new String[]{\"x\", \"y\", \"z\"}, iterator.next()));\n+        assertFalse(iterator.hasNext());\n+        \n+        try {\n+            iterator.next();\n+            fail(\"NoSuchElementException expected\");\n+        } catch (NoSuchElementException e) {\n+            // expected\n+        }\n+    }\n }", "timestamp": 1320879853, "metainfo": ""}