{"sha": "3eededce883695b2035cc69e0014d7d2de7ad234", "log": "Add CVSRecord.isMapped(String) API.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n      * Returns a value by name.\n      *\n      * @param name\n-     *            the name of the column to be retrieved\n+     *            the name of the column to be retrieved.\n      * @return the column value, or {@code null} if the column name is not found\n      * @throws IllegalStateException\n      *             if no header mapping was provided\n      */\n     public String get(String name) {\n         if (mapping == null) {\n-            throw new IllegalStateException(\"No header was specified, the record values can't be accessed by name\");\n+            throw new IllegalStateException(\"No header mapping was specified, the record values can't be accessed by name\");\n         }\n \n         Integer index = mapping.get(name);\n         return index != null ? values[index.intValue()] : null;\n     }\n \n+    /**\n+     * Checks whether a given columns is mapped.\n+     * \n+     * @param name\n+     *            the name of the column to be retrieved.\n+     * @return whether a given columns is mapped.\n+     */\n+    public boolean isMapped(String name) {\n+        return mapping != null ? mapping.containsKey(name) : false;\n+    }\n+    \n     public Iterator<String> iterator() {\n         return Arrays.asList(values).iterator();\n     }\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n         for (int i = 0; i < 3; i++) {\n             assertTrue(records.hasNext());\n             CSVRecord record = records.next();\n+            assertTrue(record.isMapped(\"A\"));\n+            assertTrue(record.isMapped(\"B\"));\n+            assertTrue(record.isMapped(\"C\"));\n+            assertFalse(record.isMapped(\"NOT MAPPED\"));\n             assertEquals(record.get(0), record.get(\"A\"));\n             assertEquals(record.get(1), record.get(\"B\"));\n             assertEquals(record.get(2), record.get(\"C\"));", "timestamp": 1349967376, "metainfo": ""}