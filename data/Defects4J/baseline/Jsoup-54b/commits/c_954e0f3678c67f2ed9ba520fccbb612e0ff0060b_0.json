{"sha": "954e0f3678c67f2ed9ba520fccbb612e0ff0060b", "log": "Better handle class names and the empty string  This actually handles two distinct problems:   1. Elements with no class attribute at all would have a classNames Set     that contained a single entry (the empty string); see #317   2. Elements whose class attribute contained leading or trailing     whitespace would have an extra classNames Set entry for the empty     string, and a className with either a leading or trailing space", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * @return The literal class attribute, or <b>empty string</b> if no class attribute set.\n      */\n     public String className() {\n-        return attr(\"class\");\n+        return attr(\"class\").trim();\n     }\n \n     /**\n         if (classNames == null) {\n             String[] names = className().split(\"\\\\s+\");\n             classNames = new LinkedHashSet<String>(Arrays.asList(names));\n+            classNames.remove(\"\");\n         }\n         return classNames;\n     }\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n     }\n     \n     @Test public void testClassDomMethods() {\n-        Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\");\n+        Document doc = Jsoup.parse(\"<div><span class=' mellow yellow '>Hello <b>Yellow</b></span></div>\");\n         List<Element> els = doc.getElementsByAttribute(\"class\");\n         Element span = els.get(0);\n         assertEquals(\"mellow yellow\", span.className());\n         assertTrue(classes.contains(\"yellow\"));\n \n         assertEquals(\"\", doc.className());\n+        classes = doc.classNames();\n+        assertEquals(0, classes.size());\n         assertFalse(doc.hasClass(\"mellow\"));\n     }\n ", "timestamp": 1413008737, "metainfo": ""}