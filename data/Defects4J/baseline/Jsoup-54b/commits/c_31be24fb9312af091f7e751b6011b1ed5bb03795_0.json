{"sha": "31be24fb9312af091f7e751b6011b1ed5bb03795", "log": "Bit of a cleanup", "commit": "\n--- a/src/main/java/org/jsoup/helper/DescendableLinkedList.java\n+++ b/src/main/java/org/jsoup/helper/DescendableLinkedList.java\n      * Add a new element to the start of the list.\n      * @param e element to add\n      */\n-    @Override\n     public void push(E e) {\n         addFirst(e);\n     }\n      * Look at the last element, if there is one.\n      * @return the last element, or null\n      */\n-    @Override\n     public E peekLast() {\n         return size() == 0 ? null : getLast();\n     }\n      * Remove and return the last element, if there is one\n      * @return the last element, or null\n      */\n-    @Override\n     public E pollLast() {\n         return size() == 0 ? null : removeLast();\n     }\n      * Get an iterator that starts and the end of the list and works towards the start.\n      * @return an iterator that starts and the end of the list and works towards the start.\n      */\n-    @Override\n     public Iterator<E> descendingIterator() {\n         return new DescendingIterator<E>(size());\n     }\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n \n                     prependChild(decl);\n                 }\n-            } else {\n-                // Unsupported syntax - nothing to do yet\n             }\n         }\n     }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n         if (this == o) return true;\n         if (o == null || getClass() != o.getClass()) return false;\n \n-        Node node = (Node) o;\n         return this.outerHtml().equals(((Node) o).outerHtml());\n     }\n \n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n  */\n public class HtmlTreeBuilder extends TreeBuilder {\n     // tag searches\n-    private static final String[] TagsScriptStyle = new String[]{\"script\", \"style\"};\n     public static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"};\n     private static final String[] TagSearchList = new String[]{\"ol\", \"ul\"};\n     private static final String[] TagSearchButton = new String[]{\"button\"};\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n \t\tprotected int calculatePosition(Element root, Element element) {\n \t\t\tint pos = 0;\n         \tElements family = element.parent().children();\n-        \tfor (int i = 0; i < family.size(); i++) {\n-        \t\tif (family.get(i).tag().equals(element.tag())) pos++;\n-        \t\tif (family.get(i) == element) break;\n-        \t}\n+            for (Element el : family) {\n+                if (el.tag().equals(element.tag())) pos++;\n+                if (el == element) break;\n+            }\n \t\t\treturn pos;\n \t\t}\n \n \t\t\t\n \t\t\tint pos = 0;\n         \tElements family = p.children();\n-        \tfor (int i = 0; i < family.size(); i++) {\n-        \t\tif (family.get(i).tag().equals(element.tag())) pos++;\n-        \t}\n+            for (Element el : family) {\n+                if (el.tag().equals(element.tag())) pos++;\n+            }\n         \treturn pos == 1;\n \t\t}\n     \t@Override\n \t\t@Override\n \t\tpublic boolean matches(Element root, Element element) {\n         \tList<Node> family = element.childNodes();\n-        \tfor (int i = 0; i < family.size(); i++) {\n-        \t\tNode n = family.get(i);\n-        \t\tif (!(n instanceof Comment || n instanceof XmlDeclaration || n instanceof DocumentType)) return false; \n-        \t}\n+            for (Node n : family) {\n+                if (!(n instanceof Comment || n instanceof XmlDeclaration || n instanceof DocumentType)) return false;\n+            }\n         \treturn true;\n \t\t}\n     \t@Override", "timestamp": 1461441194, "metainfo": ""}