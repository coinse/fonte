{"sha": "671e03b570f586b6583feb1ee3ddb5d5c62bd50c", "log": "Selector documentation", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      * <li>{@code el.select(\"a[href]\")} - finds links ({@code a} tags with {@code href} attributes)\n      * <li>{@code el.select(\"a[href*=example.com]\")} - finds links pointing to example.com (loosely)\n      * </ul>\n-     * \n+     * <p/>\n+     * See the query syntax documentation in {@link org.jsoup.select.Selector}.\n+     *\n      * @param query a {@link Selector} query\n      * @return elements that match the query (empty if none match)\n+     * @see org.jsoup.select.Selector\n      */\n     public Elements select(String query) {\n         return Selector.select(query, this);\n--- a/src/main/java/org/jsoup/select/Collector.java\n+++ b/src/main/java/org/jsoup/select/Collector.java\n  * @author Jonathan Hedley\n  */\n public class Collector {\n+\n+    /**\n+     Build a list of elements, by visiting root and every descendant of root, and testing it against the evaluator.\n+     @param eval Evaluator to test elements against\n+     @param root root of tree to descend\n+     @return list of matches; empty if none\n+     */\n     public static Elements collect (Evaluator eval, Element root) {\n         Elements elements = new Elements();\n         accumulateMatches(eval, elements, root);\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n \n import org.apache.commons.lang.Validate;\n import org.jsoup.nodes.Element;\n-import org.jsoup.nodes.Evaluator;\n import org.jsoup.parser.TokenQueue;\n \n import java.util.Collection;\n import java.util.LinkedHashSet;\n \n /**\n- TODO: Document\n-\n+ CSS-like element selector, that finds elements matching a query.\n+\n+ <h2>Selector syntax</h2>\n+ A selector is a chain of simple selectors, seperated by combinators. Selectors are case insensitive (including against\n+ elements, attributes, and attribute values).\n+ <p/>\n+ The universal selector (*) is implicit when no element selector is supplied (i.e. {@code *.header} and {@code .header}\n+ is equivalent).\n+\n+ <table>\n+ <tr><th>Pattern</th><th>Matches</th><th>Example</th></tr>\n+ <tr><td><code>*</code></td><td>any element</td><td><code>*</code></td></tr>\n+ <tr><td><code>E</code></td><td>an element of type E</td><td><code>h1</code></td></tr>\n+ <tr><td><code>E#id</code></td><td>an Element with attribute ID of \"id\"</td><td><code>div#wrap</code>, <code>#logo</code></td></tr>\n+ <tr><td><code>E.class</code></td><td>an Element with a class name of \"class\"</td><td><code>div.left</code>, <code>.result</code></td></tr>\n+ <tr><td><code>E[attr]</code></td><td>an Element with the attribute named \"attr\"</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n+ <tr><td><code>E[attr=val]</code></td><td>an Element with the attribute named \"attr\" and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n+ <tr><td><code>E[attr^=val]</code></td><td>an Element with the attribute named \"attr\" and value starting with \"val\"</td><td><code>a[href^=http:]</code></code></td></tr>\n+ <tr><td><code>E[attr$=val]</code></td><td>an Element with the attribute named \"attr\" and value ending with \"val\"</td><td><code>img[src$=.png]</code></td></tr>\n+ <tr><td><code>E[attr*=val]</code></td><td>an Element with the attribute named \"attr\" and value containing \"val\"</td><td><code>a[href*=/search/]</code></td></tr>\n+ <tr><td></td><td>The above may be combined in any order</td><td><code>div.header[title]</code></td></tr>\n+ <tr><td><td colspan=\"3\"><h3>Combinators</h3></td></tr>\n+ <tr><td><code>E F</code></td><td>an F element descended from an E element</td><td><code>div a</code>, <code>.logo h1</code></td></tr>\n+ <tr><td><code>E > F</code></td><td>an F child of E</td><td><code> ol > li</code></td></tr>\n+ <tr><td><code>E, F, G</code></td><td>any matching element E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n+ </table>\n+\n+ @see Element#select(String)\n  @author Jonathan Hedley, jonathan@hedley.net */\n public class Selector {\n     private final Element root;\n         this.tq = new TokenQueue(query);\n     }\n \n+    /**\n+     Find elements matching selector.\n+     @param query CSS selector\n+     @param root root element to descend into\n+     @return matching elements, empty if not\n+     */\n     public static Elements select(String query, Element root) {\n         return new Selector(query, root).select();\n     }\n \n+    /**\n+     Find elements matching selector.\n+     @param query CSS selector\n+     @param roots root elements to descend into\n+     @return matching elements, empty if not\n+     */\n     public static Elements select(String query, Iterable<Element> roots) {\n         Validate.notEmpty(query);\n         Validate.notNull(roots);", "timestamp": 1309605108, "metainfo": ""}