{"sha": "81594d5bd21af23e7378c7192197fd1966c9852e", "log": "Adding evaluators tests", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/jsoup/select/SelectorNGTest.java\n+package org.jsoup.select;\n+\n+import java.util.regex.Pattern;\n+\n+import junit.framework.TestCase;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Evaluator;\n+import org.jsoup.select.ng.AndSelector;\n+import org.jsoup.select.ng.BasicSelector;\n+import org.jsoup.select.ng.ElementSelector;\n+import org.jsoup.select.ng.ParentSelector;\n+import org.jsoup.select.ng.SelectMatch;\n+import org.junit.Test;\n+\n+public class SelectorNGTest extends TestCase {\n+\n+\t@Test\n+\tpublic void testByTag() {\n+\t\t\n+\t\tElements els = SelectMatch.match(Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\"),\n+\t\t\t\tnew ElementSelector(\"div\", null, null));\n+\t\t\n+\t\tassertEquals(3, els.size());\n+\t\tassertEquals(\"1\", els.get(0).id());\n+\t\tassertEquals(\"2\", els.get(1).id());\n+\t\tassertEquals(\"3\", els.get(2).id());\n+\n+\t\tElements none = SelectMatch.match(Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\"),\n+\t\t\t\tnew ElementSelector(\"span\", null, null));\n+\t\tassertEquals(0, none.size());\n+\t}\n+\n+    @Test \n+    public void testById() {\n+        Elements els = SelectMatch.match(Jsoup.parse(\"<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>\"),\n+        \t\tnew ElementSelector(null, null, \"foo\"));\n+        assertEquals(2, els.size());\n+        assertEquals(\"Hello\", els.get(0).text());\n+\n+        Elements none = SelectMatch.match(Jsoup.parse(\"<div id=1></div>\"),\n+        \t\tnew ElementSelector(null, null, \"foo\"));\n+        assertEquals(0, none.size());\n+    }\n+\n+    @Test \n+    public void testByClass() {\n+        Elements els = SelectMatch.match(Jsoup.parse(\"<p id=0 class='one two'><p id=1 class='one'><p id=2 class='two'>\"),\n+        \t\tnew ElementSelector(\"p\", \"one\", null));\n+        assertEquals(2, els.size());\n+        assertEquals(\"0\", els.get(0).id());\n+        assertEquals(\"1\", els.get(1).id());\n+\n+        Elements none = SelectMatch.match(Jsoup.parse(\"<div class='one'></div>\"),\n+        \t\tnew ElementSelector(null, \"foo\", null));\n+        assertEquals(0, none.size());\n+\n+        Elements els2 = SelectMatch.match(Jsoup.parse(\"<div class='one-two'></div>\"),\n+        \t\tnew ElementSelector(null, \"one-two\", null));\n+        assertEquals(1, els2.size());\n+    }\n+\n+    \n+    @Test \n+    public void testByAttribute() {\n+        String h = \"<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />\";\n+        Document doc = Jsoup.parse(h);\n+\n+        Elements withTitle = SelectMatch.match(doc, new Evaluator.Attribute(\"title\"));\n+        assertEquals(4, withTitle.size());\n+\n+        Elements foo = SelectMatch.match(doc, new Evaluator.AttributeWithValue(\"title\", \"foo\"));\n+        assertEquals(1, foo.size());\n+\n+        Elements not = SelectMatch.match(doc, \n+        \t\tBasicSelector.and(\n+        \t\t\t\tnew ElementSelector(\"div\", null, null), \n+        \t\t\t\tnew Evaluator.AttributeWithValueNot(\"title\", \"bar\")));\n+        assertEquals(5, not.size());\n+        assertEquals(\"Foo\", not.first().attr(\"title\"));\n+\n+        Elements starts = SelectMatch.match(doc, new Evaluator.AttributeWithValueStarting(\"title\", \"ba\"));// doc.select(\"[title^=ba]\");\n+        assertEquals(2, starts.size());\n+        assertEquals(\"Bar\", starts.first().attr(\"title\"));\n+        assertEquals(\"Bam\", starts.last().attr(\"title\"));\n+\n+        Elements ends = SelectMatch.match(doc, new Evaluator.AttributeWithValueEnding(\"title\", \"am\"));//doc.select(\"[title$=am]\");\n+        assertEquals(2, ends.size());\n+        assertEquals(\"Bam\", ends.first().attr(\"title\"));\n+        assertEquals(\"SLAM\", ends.last().attr(\"title\"));\n+\n+        Elements contains = SelectMatch.match(doc, new Evaluator.AttributeWithValueContaining(\"title\", \"a\"));//doc.select(\"[title*=a]\");\n+        assertEquals(3, contains.size());\n+        assertEquals(\"Bar\", contains.first().attr(\"title\"));\n+        assertEquals(\"SLAM\", contains.last().attr(\"title\"));\n+    }\n+    \n+    @Test \n+    public void testNamespacedTag() {\n+        Document doc = Jsoup.parse(\"<div><abc:def id=1>Hello</abc:def></div> <abc:def class=bold id=2>There</abc:def>\");\n+        Elements byTag = SelectMatch.match(doc, new Evaluator.Tag(\"abc:def\")); //doc.select(\"abc|def\");\n+        assertEquals(2, byTag.size());\n+        assertEquals(\"1\", byTag.first().id());\n+        assertEquals(\"2\", byTag.last().id());\n+        \n+        Elements byAttr = SelectMatch.match(doc, new Evaluator.Class(\"bold\")); //doc.select(\".bold\");\n+        assertEquals(1, byAttr.size());\n+        assertEquals(\"2\", byAttr.last().id());\n+        \n+        Elements byTagAttr = SelectMatch.match(doc, new ElementSelector(\"abc:def\", \"bold\", null));//doc.select(\"abc|def.bold\");\n+        assertEquals(1, byTagAttr.size());\n+        assertEquals(\"2\", byTagAttr.last().id());\n+        \n+        Elements byContains = SelectMatch.match(doc, \n+        \t\tBasicSelector.and(\n+        \t\t\t\tnew Evaluator.Tag(\"abc:def\"), \n+        \t\t\t\tnew Evaluator.ContainsText(\"e\")\n+        \t\t));//doc.select(\"abc|def:contains(e)\");\n+        assertEquals(2, byContains.size());\n+        assertEquals(\"1\", byContains.first().id());\n+        assertEquals(\"2\", byContains.last().id());\n+    }\n+\n+    @Test \n+    public void testByAttributeStarting() {\n+        Document doc = Jsoup.parse(\"<div id=1 data-name=jsoup>Hello</div><p data-val=5 id=2>There</p><p id=3>No</p>\");\n+        Elements withData = SelectMatch.match(doc, new Evaluator.AttributeStarting(\"data-\"));\n+        assertEquals(2, withData.size());\n+        assertEquals(\"1\", withData.first().id());\n+        assertEquals(\"2\", withData.last().id());\n+\n+        withData = SelectMatch.match(doc, BasicSelector.and(new Evaluator.Tag(\"p\"), new Evaluator.AttributeStarting(\"data-\")));\n+        assertEquals(1, withData.size());\n+        assertEquals(\"2\", withData.first().id());\n+    }\n+    \n+    @Test \n+    public void testByAttributeRegex() {\n+        Document doc = Jsoup.parse(\"<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif><img></p>\");\n+        Elements imgs = SelectMatch.match(doc, BasicSelector.and(new Evaluator.Tag(\"img\"), \n+        \t\tnew Evaluator.AttributeWithValueMatching(\"src\", Pattern.compile(\"(?i)\\\\.(png|jpe?g)\"))));\n+        assertEquals(3, imgs.size());\n+        assertEquals(\"1\", imgs.get(0).id());\n+        assertEquals(\"2\", imgs.get(1).id());\n+        assertEquals(\"3\", imgs.get(2).id());\n+    }\n+\n+    @Test \n+    public void testByAttributeRegexCharacterClass() {\n+        Document doc = Jsoup.parse(\"<p><img src=foo.png id=1><img src=bar.jpg id=2><img src=qux.JPEG id=3><img src=old.gif id=4></p>\");\n+        Elements imgs = SelectMatch.match(doc, new Evaluator.Tag(\"img\"), \n+        \t\tnew Evaluator.AttributeWithValueMatching(\"src\", Pattern.compile(\"[o]\")));\n+        assertEquals(2, imgs.size());\n+        assertEquals(\"1\", imgs.get(0).id());\n+        assertEquals(\"4\", imgs.get(1).id());\n+    }\n+\n+    @Test \n+    public void testAllElements() {\n+        String h = \"<div><p>Hello</p><p><b>there</b></p></div>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements allDoc = SelectMatch.match(doc, new Evaluator.AllElements());\n+        Elements allUnderDiv = SelectMatch.match(doc, new ParentSelector(new Evaluator.Tag(\"div\")));\n+        assertEquals(8, allDoc.size());\n+        assertEquals(3, allUnderDiv.size());\n+        assertEquals(\"p\", allUnderDiv.first().tagName());\n+    }\n+    \n+    @Test \n+    public void testGroupOr() {\n+        String h = \"<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements els = SelectMatch.match(doc, \n+        \t\tBasicSelector.or(\n+        \t\t\t\tnew Evaluator.Tag(\"p\"),\n+        \t\t\t\tnew Evaluator.Tag(\"div\"),\n+        \t\t\t\tnew Evaluator.Attribute(\"title\")));\n+\n+\n+        assertEquals(5, els.size());\n+        assertEquals(\"div\", els.get(0).tagName());\n+        assertEquals(\"foo\", els.get(0).attr(\"title\"));\n+        assertEquals(\"div\", els.get(1).tagName());\n+        assertEquals(\"bar\", els.get(1).attr(\"title\"));\n+        assertEquals(\"div\", els.get(2).tagName());\n+        assertTrue(els.get(2).attr(\"title\").length() == 0); // missing attributes come back as empty string\n+        assertFalse(els.get(2).hasAttr(\"title\"));\n+        assertEquals(\"p\", els.get(3).tagName());\n+        assertEquals(\"span\", els.get(4).tagName());\n+    }\n+\n+    /*@Test public void testGroupOrAttribute() {\n+        String h = \"<div id=1 /><div id=2 /><div title=foo /><div title=bar />\";\n+        Elements els = Jsoup.parse(h).select(\"[id],[title=foo]\");\n+\n+        assertEquals(3, els.size());\n+        assertEquals(\"1\", els.get(0).id());\n+        assertEquals(\"2\", els.get(1).id());\n+        assertEquals(\"foo\", els.get(2).attr(\"title\"));\n+    }\n+\n+    @Test public void descendant() {\n+        String h = \"<div class=head><p class=first>Hello</p><p>There</p></div><p>None</p>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements els = doc.select(\".head p\");\n+        assertEquals(2, els.size());\n+        assertEquals(\"Hello\", els.get(0).text());\n+        assertEquals(\"There\", els.get(1).text());\n+\n+        Elements p = doc.select(\"p.first\");\n+        assertEquals(1, p.size());\n+        assertEquals(\"Hello\", p.get(0).text());\n+\n+        Elements empty = doc.select(\"p .first\"); // self, not descend, should not match\n+        assertEquals(0, empty.size());\n+    }\n+    \n+    @Test public void and() {\n+        String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\";\n+        Document doc = Jsoup.parse(h);\n+        \n+        Elements div = doc.select(\"div.foo\");\n+        assertEquals(1, div.size());\n+        assertEquals(\"div\", div.first().tagName());\n+        \n+        Elements p = doc.select(\"div .foo\"); // space indicates like \"div *.foo\"\n+        assertEquals(1, p.size());\n+        assertEquals(\"p\", p.first().tagName());\n+        \n+        Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); // very specific!\n+        assertEquals(1, div2.size());\n+        assertEquals(\"div\", div2.first().tagName());\n+        \n+        Elements p2 = doc.select(\"div *.foo\"); // space indicates like \"div *.foo\"\n+        assertEquals(1, p2.size());\n+        assertEquals(\"p\", p2.first().tagName());\n+    }\n+\n+    @Test public void deeperDescendant() {\n+        String h = \"<div class=head><p><span class=first>Hello</div><div class=head><p class=first><span>Another</span><p>Again</div>\";\n+        Elements els = Jsoup.parse(h).select(\"div p .first\");\n+        assertEquals(1, els.size());\n+        assertEquals(\"Hello\", els.first().text());\n+        assertEquals(\"span\", els.first().tagName());\n+    }\n+\n+    @Test public void parentChildElement() {\n+        String h = \"<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>\";\n+        Document doc = Jsoup.parse(h);\n+\n+        Elements divs = doc.select(\"div > div\");\n+        assertEquals(2, divs.size());\n+        assertEquals(\"2\", divs.get(0).id()); // 2 is child of 1\n+        assertEquals(\"3\", divs.get(1).id()); // 3 is child of 2\n+\n+        Elements div2 = doc.select(\"div#1 > div\");\n+        assertEquals(1, div2.size());\n+        assertEquals(\"2\", div2.get(0).id());\n+    }\n+    \n+    @Test public void parentWithClassChild() {\n+        String h = \"<h1 class=foo><a href=1 /></h1><h1 class=foo><a href=2 class=bar /></h1><h1><a href=3 /></h1>\";\n+        Document doc = Jsoup.parse(h);\n+        \n+        Elements allAs = doc.select(\"h1 > a\");\n+        assertEquals(3, allAs.size());\n+        assertEquals(\"a\", allAs.first().tagName());\n+        \n+        Elements fooAs = doc.select(\"h1.foo > a\");\n+        assertEquals(2, fooAs.size());\n+        assertEquals(\"a\", fooAs.first().tagName());\n+        \n+        Elements barAs = doc.select(\"h1.foo > a.bar\");\n+        assertEquals(1, barAs.size());\n+    }\n+\n+    @Test public void parentChildStar() {\n+        String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements divChilds = doc.select(\"div > *\");\n+        assertEquals(3, divChilds.size());\n+        assertEquals(\"p\", divChilds.get(0).tagName());\n+        assertEquals(\"p\", divChilds.get(1).tagName());\n+        assertEquals(\"span\", divChilds.get(2).tagName());\n+    }\n+    \n+    @Test public void multiChildDescent() {\n+        String h = \"<div id=foo><h1 class=bar><a href=http://example.com/>One</a></h1></div>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements els = doc.select(\"div#foo > h1.bar > a[href*=example]\");\n+        assertEquals(1, els.size());\n+        assertEquals(\"a\", els.first().tagName());\n+    }\n+\n+    @Test public void caseInsensitive() {\n+        String h = \"<dIv tItle=bAr><div>\"; // mixed case so a simple toLowerCase() on value doesn't catch\n+        Document doc = Jsoup.parse(h);\n+\n+        assertEquals(2, doc.select(\"DIV\").size());\n+        assertEquals(1, doc.select(\"DIV[TITLE]\").size());\n+        assertEquals(1, doc.select(\"DIV[TITLE=BAR]\").size());\n+        assertEquals(0, doc.select(\"DIV[TITLE=BARBARELLA\").size());\n+    }\n+    \n+    @Test public void adjacentSiblings() {\n+        String h = \"<ol><li>One<li>Two<li>Three</ol>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements sibs = doc.select(\"li + li\");\n+        assertEquals(2, sibs.size());\n+        assertEquals(\"Two\", sibs.get(0).text());\n+        assertEquals(\"Three\", sibs.get(1).text());\n+    }\n+    \n+    @Test public void adjacentSiblingsWithId() {\n+        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements sibs = doc.select(\"li#1 + li#2\");\n+        assertEquals(1, sibs.size());\n+        assertEquals(\"Two\", sibs.get(0).text());\n+    }\n+    \n+    @Test public void notAdjacent() {\n+        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements sibs = doc.select(\"li#1 + li#3\");\n+        assertEquals(0, sibs.size());\n+    }\n+    \n+    @Test public void mixCombinator() {\n+        String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements sibs = doc.select(\"body > div.foo li + li\");\n+        \n+        assertEquals(2, sibs.size());\n+        assertEquals(\"Two\", sibs.get(0).text());\n+        assertEquals(\"Three\", sibs.get(1).text());\n+    }\n+    \n+    @Test public void mixCombinatorGroup() {\n+        String h = \"<div class=foo><ol><li>One<li>Two<li>Three</ol></div>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements els = doc.select(\".foo > ol, ol > li + li\");\n+        \n+        assertEquals(3, els.size());\n+        assertEquals(\"ol\", els.get(0).tagName());\n+        assertEquals(\"Two\", els.get(1).text());\n+        assertEquals(\"Three\", els.get(2).text());\n+    }\n+    \n+    @Test public void generalSiblings() {\n+        String h = \"<ol><li id=1>One<li id=2>Two<li id=3>Three</ol>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements els = doc.select(\"#1 ~ #3\");\n+        assertEquals(1, els.size());\n+        assertEquals(\"Three\", els.first().text());\n+    }\n+    \n+    // for http://github.com/jhy/jsoup/issues#issue/10\n+    @Test public void testCharactersInIdAndClass() {\n+        // using CSS spec for identifiers (id and class): a-z0-9, -, _. NOT . (which is OK in html spec, but not css)\n+        String h = \"<div><p id='a1-foo_bar'>One</p><p class='b2-qux_bif'>Two</p></div>\";\n+        Document doc = Jsoup.parse(h);\n+        \n+        Element el1 = doc.getElementById(\"a1-foo_bar\");\n+        assertEquals(\"One\", el1.text());\n+        Element el2 = doc.getElementsByClass(\"b2-qux_bif\").first();\n+        assertEquals(\"Two\", el2.text());\n+        \n+        Element el3 = doc.select(\"#a1-foo_bar\").first();\n+        assertEquals(\"One\", el3.text());\n+        Element el4 = doc.select(\".b2-qux_bif\").first();\n+        assertEquals(\"Two\", el4.text());\n+    }\n+    \n+    // for http://github.com/jhy/jsoup/issues#issue/13\n+    @Test public void testSupportsLeadingCombinator() {\n+        String h = \"<div><p><span>One</span><span>Two</span></p></div>\";\n+        Document doc = Jsoup.parse(h);\n+        \n+        Element p = doc.select(\"div > p\").first();\n+        Elements spans = p.select(\"> span\");\n+        assertEquals(2, spans.size());\n+        assertEquals(\"One\", spans.first().text());\n+        \n+        // make sure doesn't get nested\n+        h = \"<div id=1><div id=2><div id=3></div></div></div>\";\n+        doc = Jsoup.parse(h);\n+        Element div = doc.select(\"div\").select(\" > div\").first();\n+        assertEquals(\"2\", div.id());\n+    }\n+    \n+    @Test public void testPseudoLessThan() {\n+        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n+        Elements ps = doc.select(\"div p:lt(2)\");\n+        assertEquals(3, ps.size());\n+        assertEquals(\"One\", ps.get(0).text());\n+        assertEquals(\"Two\", ps.get(1).text());\n+        assertEquals(\"Four\", ps.get(2).text());\n+    }\n+    \n+    @Test public void testPseudoGreaterThan() {\n+        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>\");\n+        Elements ps = doc.select(\"div p:gt(0)\");\n+        assertEquals(2, ps.size());\n+        assertEquals(\"Two\", ps.get(0).text());\n+        assertEquals(\"Three\", ps.get(1).text());\n+    }\n+    \n+    @Test public void testPseudoEquals() {\n+        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n+        Elements ps = doc.select(\"div p:eq(0)\");\n+        assertEquals(2, ps.size());\n+        assertEquals(\"One\", ps.get(0).text());\n+        assertEquals(\"Four\", ps.get(1).text());\n+        \n+        Elements ps2 = doc.select(\"div:eq(0) p:eq(0)\");\n+        assertEquals(1, ps2.size());\n+        assertEquals(\"One\", ps2.get(0).text());\n+        assertEquals(\"p\", ps2.get(0).tagName());\n+    }\n+    \n+    @Test public void testPseudoBetween() {\n+        Document doc = Jsoup.parse(\"<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>\");\n+        Elements ps = doc.select(\"div p:gt(0):lt(2)\");\n+        assertEquals(1, ps.size());\n+        assertEquals(\"Two\", ps.get(0).text());\n+    }\n+    \n+    @Test public void testPseudoCombined() {\n+        Document doc = Jsoup.parse(\"<div class='foo'><p>One</p><p>Two</p></div><div><p>Three</p><p>Four</p></div>\");\n+        Elements ps = doc.select(\"div.foo p:gt(0)\");\n+        assertEquals(1, ps.size());\n+        assertEquals(\"Two\", ps.get(0).text());\n+    }\n+\n+    @Test public void testPseudoHas() {\n+        Document doc = Jsoup.parse(\"<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>\");\n+\n+        Elements divs1 = doc.select(\"div:has(span)\");\n+        assertEquals(2, divs1.size());\n+        assertEquals(\"0\", divs1.get(0).id());\n+        assertEquals(\"1\", divs1.get(1).id());\n+\n+        Elements divs2 = doc.select(\"div:has([class]\");\n+        assertEquals(1, divs2.size());\n+        assertEquals(\"1\", divs2.get(0).id());\n+\n+        Elements divs3 = doc.select(\"div:has(span, p)\");\n+        assertEquals(3, divs3.size());\n+        assertEquals(\"0\", divs3.get(0).id());\n+        assertEquals(\"1\", divs3.get(1).id());\n+        assertEquals(\"2\", divs3.get(2).id());\n+\n+        Elements els1 = doc.body().select(\":has(p)\");\n+        assertEquals(3, els1.size()); // body, div, dib\n+        assertEquals(\"body\", els1.first().tagName());\n+        assertEquals(\"0\", els1.get(1).id());\n+        assertEquals(\"2\", els1.get(2).id());\n+    }\n+\n+    @Test public void testNestedHas() {\n+        Document doc = Jsoup.parse(\"<div><p><span>One</span></p></div> <div><p>Two</p></div>\");\n+        Elements divs = doc.select(\"div:has(p:has(span))\");\n+        assertEquals(1, divs.size());\n+        assertEquals(\"One\", divs.first().text());\n+\n+        // test matches in has\n+        divs = doc.select(\"div:has(p:matches((?i)two))\");\n+        assertEquals(1, divs.size());\n+        assertEquals(\"div\", divs.first().tagName());\n+        assertEquals(\"Two\", divs.first().text());\n+\n+        // test contains in has\n+        divs = doc.select(\"div:has(p:contains(two))\");\n+        assertEquals(1, divs.size());\n+        assertEquals(\"div\", divs.first().tagName());\n+        assertEquals(\"Two\", divs.first().text());\n+    }\n+    \n+    @Test public void testPseudoContains() {\n+        Document doc = Jsoup.parse(\"<div><p>The Rain.</p> <p class=light>The <i>rain</i>.</p> <p>Rain, the.</p></div>\");\n+        \n+        Elements ps1 = doc.select(\"p:contains(Rain)\");\n+        assertEquals(3, ps1.size());\n+        \n+        Elements ps2 = doc.select(\"p:contains(the rain)\");\n+        assertEquals(2, ps2.size());\n+        assertEquals(\"The Rain.\", ps2.first().html());\n+        assertEquals(\"The <i>rain</i>.\", ps2.last().html());\n+        \n+        Elements ps3 = doc.select(\"p:contains(the Rain):has(i)\");\n+        assertEquals(1, ps3.size());\n+        assertEquals(\"light\", ps3.first().className());\n+\n+        Elements ps4 = doc.select(\".light:contains(rain)\");\n+        assertEquals(1, ps4.size());\n+        assertEquals(\"light\", ps3.first().className());\n+\n+        Elements ps5 = doc.select(\":contains(rain)\");\n+        assertEquals(8, ps5.size()); // html, body, div,...\n+    }\n+    \n+    @Test public void testPsuedoContainsWithParentheses() {\n+        Document doc = Jsoup.parse(\"<div><p id=1>This (is good)</p><p id=2>This is bad)</p>\");\n+        \n+        Elements ps1 = doc.select(\"p:contains(this (is good))\");\n+        assertEquals(1, ps1.size());\n+        assertEquals(\"1\", ps1.first().id());\n+        \n+        Elements ps2 = doc.select(\"p:contains(this is bad\\\\))\");\n+        assertEquals(1, ps2.size());\n+        assertEquals(\"2\", ps2.first().id());\n+    }\n+    \n+    @Test public void containsOwn() {\n+        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n+        Elements ps = doc.select(\"p:containsOwn(Hello now)\");\n+        assertEquals(1, ps.size());\n+        assertEquals(\"1\", ps.first().id());\n+        \n+        assertEquals(0, doc.select(\"p:containsOwn(there)\").size());\n+    }\n+    \n+    @Test public void testMatches() {       \n+        Document doc = Jsoup.parse(\"<p id=1>The <i>Rain</i></p> <p id=2>There are 99 bottles.</p> <p id=3>Harder (this)</p> <p id=4>Rain</p>\");\n+        \n+        Elements p1 = doc.select(\"p:matches(The rain)\"); // no match, case sensitive\n+        assertEquals(0, p1.size());\n+        \n+        Elements p2 = doc.select(\"p:matches((?i)the rain)\"); // case insense. should include root, html, body\n+        assertEquals(1, p2.size());\n+        assertEquals(\"1\", p2.first().id());\n+        \n+        Elements p4 = doc.select(\"p:matches((?i)^rain$)\"); // bounding\n+        assertEquals(1, p4.size());\n+        assertEquals(\"4\", p4.first().id());\n+        \n+        Elements p5 = doc.select(\"p:matches(\\\\d+)\");\n+        assertEquals(1, p5.size());\n+        assertEquals(\"2\", p5.first().id());\n+        \n+        Elements p6 = doc.select(\"p:matches(\\\\w+\\\\s+\\\\(\\\\w+\\\\))\"); // test bracket matching\n+        assertEquals(1, p6.size());\n+        assertEquals(\"3\", p6.first().id());\n+        \n+        Elements p7 = doc.select(\"p:matches((?i)the):has(i)\"); // multi\n+        assertEquals(1, p7.size());\n+        assertEquals(\"1\", p7.first().id());\n+    }\n+    \n+    @Test public void matchesOwn() {\n+        Document doc = Jsoup.parse(\"<p id=1>Hello <b>there</b> now</p>\");\n+        \n+        Elements p1 = doc.select(\"p:matchesOwn((?i)hello now)\");\n+        assertEquals(1, p1.size());\n+        assertEquals(\"1\", p1.first().id());\n+        \n+        assertEquals(0, doc.select(\"p:matchesOwn(there)\").size());\n+    }\n+    \n+    @Test public void testRelaxedTags() {\n+        Document doc = Jsoup.parse(\"<abc_def id=1>Hello</abc_def> <abc-def id=2>There</abc-def>\");\n+        \n+        Elements el1 = doc.select(\"abc_def\");\n+        assertEquals(1, el1.size());\n+        assertEquals(\"1\", el1.first().id());\n+        \n+        Elements el2 = doc.select(\"abc-def\");\n+        assertEquals(1, el2.size());\n+        assertEquals(\"2\", el2.first().id());\n+    }\n+\n+    @Test public void notParas() {\n+        Document doc = Jsoup.parse(\"<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>\");\n+\n+        Elements el1 = doc.select(\"p:not([id=1])\");\n+        assertEquals(2, el1.size());\n+        assertEquals(\"Two\", el1.first().text());\n+        assertEquals(\"Three\", el1.last().text());\n+\n+        Elements el2 = doc.select(\"p:not(:has(span))\");\n+        assertEquals(2, el2.size());\n+        assertEquals(\"One\", el2.first().text());\n+        assertEquals(\"Two\", el2.last().text());\n+    }\n+\n+    @Test public void notAll() {\n+        Document doc = Jsoup.parse(\"<p>Two</p> <p><span>Three</span></p>\");\n+\n+        Elements el1 = doc.body().select(\":not(p)\"); // should just be the span\n+        assertEquals(2, el1.size());\n+        assertEquals(\"body\", el1.first().tagName());\n+        assertEquals(\"span\", el1.last().tagName());\n+    }\n+\n+    @Test public void notClass() {\n+        Document doc = Jsoup.parse(\"<div class=left>One</div><div class=right id=1><p>Two</p></div>\");\n+\n+        Elements el1 = doc.select(\"div:not(.left)\");\n+        assertEquals(1, el1.size());\n+        assertEquals(\"1\", el1.first().id());\n+    }*/\n+\n+\n+}", "timestamp": 1309605123, "metainfo": ""}