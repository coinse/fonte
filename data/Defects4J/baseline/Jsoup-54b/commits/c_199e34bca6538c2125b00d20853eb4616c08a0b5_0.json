{"sha": "199e34bca6538c2125b00d20853eb4616c08a0b5", "log": "Merge branch 'pr/441'", "commit": "\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n      URLs with the defined protocol.\n      <p/>\n      E.g.: <code>addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\")</code>\n+     <p/>\n+     To allow a link to an in-page URL anchor (i.e. <code>&lt;a href=\"#anchor\"&gt;</code>, add a <code>#</code>:<br>\n+     E.g.: <code>addProtocols(\"a\", \"href\", \"#\")</code>\n \n      @param tag       Tag the URL protocol is for\n      @param key       Attribute key\n             attr.setValue(value);\n         \n         for (Protocol protocol : protocols) {\n-            String prot = protocol.toString() + \":\";\n+            String prot = protocol.toString();\n+\n+            if (prot.equals(\"#\")) { // allows anchor links\n+                if (isValidAnchor(value)) {\n+                    return true;\n+                } else {\n+                    continue;\n+                }\n+            }\n+\n+            prot += \":\";\n+\n             if (value.toLowerCase().startsWith(prot)) {\n                 return true;\n             }\n         }\n         return false;\n+    }\n+\n+    private boolean isValidAnchor(String value) {\n+        return value.startsWith(\"#\") && !value.matches(\".*\\\\s.*\");\n     }\n \n     Attributes getEnforcedAttributes(String tagName) {\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n         String h = \"<A HREF=\\\"javascript:document.location='http://www.google.com/'\\\">XSS</A>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n         assertEquals(\"<a>XSS</a>\", cleanHtml);\n+    }\n+\n+    @Test public void testCleanAnchorProtocol() {\n+        String validAnchor = \"<a href=\\\"#valid\\\">Valid anchor</a>\";\n+        String invalidAnchor = \"<a href=\\\"#anchor with spaces\\\">Invalid anchor</a>\";\n+\n+        // A Whitelist that does not allow anchors will strip them out.\n+        String cleanHtml = Jsoup.clean(validAnchor, Whitelist.relaxed());\n+        assertEquals(\"<a>Valid anchor</a>\", cleanHtml);\n+\n+        cleanHtml = Jsoup.clean(invalidAnchor, Whitelist.relaxed());\n+        assertEquals(\"<a>Invalid anchor</a>\", cleanHtml);\n+\n+        // A Whitelist that allows them will keep them.\n+        Whitelist relaxedWithAnchor = Whitelist.relaxed().addProtocols(\"a\", \"href\", \"#\");\n+\n+        cleanHtml = Jsoup.clean(validAnchor, relaxedWithAnchor);\n+        assertEquals(validAnchor, cleanHtml);\n+\n+        // An invalid anchor is never valid.\n+        cleanHtml = Jsoup.clean(invalidAnchor, relaxedWithAnchor);\n+        assertEquals(\"<a>Invalid anchor</a>\", cleanHtml);\n     }\n \n     @Test public void testDropsUnknownTags() {\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n         if (m.find()) {\n             String charset = m.group(1).trim();\n             charset = charset.replace(\"charset=\", \"\");\n-            if (charset.isEmpty()) return null;\n+            if (charset.length() == 0) return null;\n             try {\n                 if (Charset.isSupported(charset)) return charset;\n                 charset = charset.toUpperCase(Locale.ENGLISH);\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.util.*;\n+import java.util.regex.Pattern;\n import java.util.zip.GZIPInputStream;\n \n /**\n  * Implementation of {@link Connection}.\n- * @see org.jsoup.Jsoup#connect(String) \n+ * @see org.jsoup.Jsoup#connect(String)\n  */\n public class HttpConnection implements Connection {\n+    private static final int HTTP_TEMP_REDIR = 307; // http/1.1 temporary redirect, not in Java's set.\n+\n     public static Connection connect(String url) {\n         Connection con = new HttpConnection();\n         con.url(url);\n         public Collection<Connection.KeyVal> data() {\n             return data;\n         }\n-        \n+\n         public Request parser(Parser parser) {\n             this.parser = parser;\n             return this;\n         }\n-        \n+\n         public Parser parser() {\n             return parser;\n         }\n         private int numRedirects = 0;\n         private Connection.Request req;\n \n+        /*\n+         * For example {@code application/atom+xml;charset=utf-8}.\n+         * Stepping through it: start with {@code \"application/\"}, follow with word\n+         * characters up to a {@code \"+xml\"}, and then maybe more ({@code .*}).\n+         */\n+        private static final Pattern xmlContentTypeRxp = Pattern.compile(\"application/\\\\w+\\\\+xml.*\");\n+\n         Response() {\n             super();\n         }\n                     throw new IOException(String.format(\"Too many redirects occurred trying to load URL %s\", previousResponse.url()));\n             }\n         }\n-        \n+\n         static Response execute(Connection.Request req) throws IOException {\n             return execute(req, null);\n         }\n                 int status = conn.getResponseCode();\n                 boolean needsRedirect = false;\n                 if (status != HttpURLConnection.HTTP_OK) {\n-                    if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)\n+                    if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER || status == HTTP_TEMP_REDIR)\n                         needsRedirect = true;\n                     else if (!req.ignoreHttpErrors())\n                         throw new HttpStatusException(\"HTTP error fetching URL\", status, req.url().toString());\n \n                 // check that we can handle the returned content type; if not, abort before fetching it\n                 String contentType = res.contentType();\n-                if (contentType != null && !req.ignoreContentType() && (!(contentType.startsWith(\"text/\") || contentType.startsWith(\"application/xml\") || contentType.startsWith(\"application/xhtml+xml\"))))\n+                if (contentType != null\n+                        && !req.ignoreContentType()\n+                        && !contentType.startsWith(\"text/\")\n+                        && !contentType.startsWith(\"application/xml\")\n+                        && !xmlContentTypeRxp.matcher(contentType).matches()\n+                        )\n                     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml\",\n                             contentType, req.url().toString());\n \n             OutputStreamWriter w = new OutputStreamWriter(outputStream, DataUtil.defaultCharset);\n             boolean first = true;\n             for (Connection.KeyVal keyVal : data) {\n-                if (!first) \n+                if (!first)\n                     w.append('&');\n                 else\n                     first = false;\n-                \n+\n                 w.write(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset));\n                 w.write('=');\n                 w.write(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));\n             }\n             w.close();\n         }\n-        \n+\n         private static String getRequestCookieString(Connection.Request req) {\n             StringBuilder sb = new StringBuilder();\n             boolean first = true;\n         @Override\n         public String toString() {\n             return key + \"=\" + value;\n-        }      \n+        }\n     }\n }\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n      * @param accum builder to append to\n      * @param string string to normalize whitespace within\n      * @param stripLeading set to true if you wish to remove any leading whitespace\n-     * @return\n      */\n     public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading) {\n         boolean lastWasWhite = false;\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n     public DocumentType(String name, String publicId, String systemId, String baseUri) {\n         super(baseUri);\n \n-        Validate.notEmpty(name);\n         attr(\"name\", name);\n         attr(\"publicId\", publicId);\n         attr(\"systemId\", systemId);\n \n     @Override\n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        accum.append(\"<!DOCTYPE \").append(attr(\"name\"));\n+        accum.append(\"<!DOCTYPE\");\n+        if (!StringUtil.isBlank(attr(\"name\")))\n+            accum.append(\" \").append(attr(\"name\"));\n         if (!StringUtil.isBlank(attr(\"publicId\")))\n             accum.append(\" PUBLIC \\\"\").append(attr(\"publicId\")).append('\"');\n         if (!StringUtil.isBlank(attr(\"systemId\")))\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      */\n     public Elements children() {\n         // create on the fly rather than maintaining two lists. if gets slow, memoize, and mark dirty on change\n-        List<Element> elements = new ArrayList<Element>();\n+        List<Element> elements = new ArrayList<Element>(childNodes.size());\n         for (Node node : childNodes) {\n             if (node instanceof Element)\n                 elements.add((Element) node);\n     }\n \n     /**\n+     * Get a CSS selector that will uniquely select this element.\n+     * <p/>If the element has an ID, returns #id;\n+     * otherwise returns the parent (if any) CSS selector, followed by '>',\n+     * followed by a unique selector for the element (tag.class.class:nth-child(n)).\n+     *\n+     * @return the CSS Path that can be used to retrieve the element in a selector.\n+     */\n+    public String cssSelector() {\n+        if (id().length() > 0)\n+            return \"#\" + id();\n+\n+        StringBuilder selector = new StringBuilder(tagName());\n+        String classes = StringUtil.join(classNames(), \".\");\n+        if (classes.length() > 0)\n+            selector.append('.').append(classes);\n+\n+        if (parent() == null || parent() instanceof Document) // don't add Document to selector, as will always have a html node\n+            return selector.toString();\n+\n+        selector.insert(0, \" > \");\n+        if (parent().select(selector.toString()).size() > 1)\n+            selector.append(String.format(\n+                \":nth-child(%d)\", elementSiblingIndex() + 1));\n+\n+        return parent().cssSelector() + selector.toString();\n+    }\n+\n+    /**\n      * Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling\n      * of itself, so will not be included in the returned list.\n      * @return sibling elements\n     }\n \n     /**\n-     * Gets the combined text of this element and all its children.\n+     * Gets the combined text of this element and all its children. Whitespace is normalized and trimmed.\n      * <p>\n-     * For example, given HTML {@code <p>Hello <b>there</b> now!</p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n+     * For example, given HTML {@code <p>Hello  <b>there</b> now! </p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n      *\n      * @return unencoded text, or empty string if none.\n      * @see #ownText()\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n     @Override\n     Document parse(String input, String baseUri, ParseErrorList errors) {\n         state = HtmlTreeBuilderState.Initial;\n+        baseUriSetFromDoc = false;\n         return super.parse(input, baseUri, errors);\n     }\n \n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n         }\n \n         String name() {\n-            Validate.isFalse(tagName.length() == 0);\n+            Validate.isFalse(tagName == null || tagName.length() == 0);\n             return tagName;\n         }\n \n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n     }\n \n     String appropriateEndTagName() {\n+        if (lastStartTag == null)\n+            return null;\n         return lastStartTag.tagName;\n     }\n \n         }\n         return builder.toString();\n     }\n-}\n+}\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n             if (r.matches('/')) {\n                 t.createTempBuffer();\n                 t.advanceTransition(RCDATAEndTagOpen);\n-            } else if (r.matchesLetter() && !r.containsIgnoreCase(\"</\" + t.appropriateEndTagName())) {\n+            } else if (r.matchesLetter() && t.appropriateEndTagName() != null && !r.containsIgnoreCase(\"</\" + t.appropriateEndTagName())) {\n                 // diverge from spec: got a start tag, but there's no appropriate end tag (</title>), so rather than\n                 // consuming to EOF; break out here\n                 t.tagPending = new Token.EndTag(t.appropriateEndTagName());\n                     break;\n                 case eof:\n                     t.eofError(this);\n+                    // note: fall through to > case\n+                case '>': // catch invalid <!DOCTYPE>\n+                    t.error(this);\n                     t.createDoctypePending();\n                     t.doctypePending.forceQuirks = true;\n                     t.emitDoctypePending();\n                     break; // ignore whitespace\n                 case nullChar:\n                     t.error(this);\n+                    t.createDoctypePending();\n                     t.doctypePending.name.append(replacementChar);\n                     t.transition(DoctypeName);\n                     break;\n                 t.transition(fallback);\n         }\n     }\n-}\n+}\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n                 TextNode sourceText = (TextNode) source;\n                 TextNode destText = new TextNode(sourceText.getWholeText(), source.baseUri());\n                 destination.appendChild(destText);\n+            } else if (source instanceof DataNode && whitelist.isSafeTag(source.parent().nodeName())) {\n+              DataNode sourceData = (DataNode) source;\n+              DataNode destData = new DataNode(sourceData.getWholeData(), source.baseUri());\n+              destination.appendChild(destData);\n             } else { // else, we don't care about comments, xml proc instructions, etc\n                 numDiscarded++;\n             }\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n  <li>{@link #addProtocols}\n  </ul>\n  <p/>\n+ You can remove any setting from an existing whitelist with:\n+ <ul>\n+ <li>{@link #removeTags}\n+ <li>{@link #removeAttributes}\n+ <li>{@link #removeEnforcedAttribute}\n+ <li>{@link #removeProtocols}\n+ </ul>\n+ <p/>\n  The cleaner and these whitelists assume that you want to clean a <code>body</code> fragment of HTML (to add user\n  supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the\n  document HTML around the cleaned body HTML, or create a whitelist that allows <code>html</code> and <code>head</code>\n \n     /**\n      This whitelist allows a fuller range of text nodes: <code>a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li,\n-     ol, p, pre, q, small, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.\n+     ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.\n      <p/>\n      Links (<code>a</code> elements) can point to <code>http, https, ftp, mailto</code>, and have an enforced\n      <code>rel=nofollow</code> attribute.\n         return new Whitelist()\n                 .addTags(\n                         \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n-                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\", \"sub\",\n+                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\", \"sub\",\n                         \"sup\", \"u\", \"ul\")\n \n                 .addAttributes(\"a\", \"href\")\n \n     /**\n      This whitelist allows a full range of text and structural body HTML: <code>a, b, blockquote, br, caption, cite,\n-     code, col, colgroup, dd, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, strike, strong, sub,\n+     code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub,\n      sup, table, tbody, td, tfoot, th, thead, tr, u, ul</code>\n      <p/>\n      Links do not have an enforced <code>rel=nofollow</code> attribute, but you can add that if desired.\n                 .addTags(\n                         \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n                         \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n-                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\",\n+                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\",\n                         \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\",\n                         \"ul\")\n \n     }\n \n     /**\n+     Remove a list of allowed elements from a whitelist. (If a tag is not allowed, it will be removed from the HTML.)\n+\n+     @param tags tag names to disallow\n+     @return this (for chaining)\n+     */\n+    public Whitelist removeTags(String... tags) {\n+        Validate.notNull(tags);\n+\n+        for(String tag: tags) {\n+            Validate.notEmpty(tag);\n+            TagName tagName = TagName.valueOf(tag);\n+\n+            if(tagNames.remove(tagName)) { // Only look in sub-maps if tag was allowed\n+                attributes.remove(tagName);\n+                enforcedAttributes.remove(tagName);\n+                protocols.remove(tagName);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n      Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.)\n      <p/>\n      E.g.: <code>addAttributes(\"a\", \"href\", \"class\")</code> allows <code>href</code> and <code>class</code> attributes\n     }\n \n     /**\n+     Remove a list of allowed attributes from a tag. (If an attribute is not allowed on an element, it will be removed.)\n+     <p/>\n+     E.g.: <code>removeAttributes(\"a\", \"href\", \"class\")</code> disallows <code>href</code> and <code>class</code>\n+     attributes on <code>a</code> tags.\n+     <p/>\n+     To make an attribute invalid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g.\n+     <code>removeAttributes(\":all\", \"class\")</code>.\n+\n+     @param tag  The tag the attributes are for.\n+     @param keys List of invalid attributes for the tag\n+     @return this (for chaining)\n+     */\n+    public Whitelist removeAttributes(String tag, String... keys) {\n+        Validate.notEmpty(tag);\n+        Validate.notNull(keys);\n+        Validate.isTrue(keys.length > 0, \"No attributes supplied.\");\n+\n+        TagName tagName = TagName.valueOf(tag);\n+        Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();\n+        for (String key : keys) {\n+            Validate.notEmpty(key);\n+            attributeSet.add(AttributeKey.valueOf(key));\n+        }\n+        if(tagNames.contains(tagName) && attributes.containsKey(tagName)) { // Only look in sub-maps if tag was allowed\n+            Set<AttributeKey> currentSet = attributes.get(tagName);\n+            currentSet.removeAll(attributeSet);\n+\n+            if(currentSet.isEmpty()) // Remove tag from attribute map if no attributes are allowed for tag\n+                attributes.remove(tagName);\n+        }\n+        if(tag.equals(\":all\")) // Attribute needs to be removed from all individually set tags\n+            for(TagName name: attributes.keySet()) {\n+                Set<AttributeKey> currentSet = attributes.get(name);\n+                currentSet.removeAll(attributeSet);\n+\n+                if(currentSet.isEmpty()) // Remove tag from attribute map if no attributes are allowed for tag\n+                    attributes.remove(name);\n+            }\n+        return this;\n+    }\n+\n+    /**\n      Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element\n      already has the attribute set, it will be overridden.\n      <p/>\n             Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>();\n             attrMap.put(attrKey, attrVal);\n             enforcedAttributes.put(tagName, attrMap);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     Remove a previously configured enforced attribute from a tag.\n+\n+     @param tag   The tag the enforced attribute is for.\n+     @param key   The attribute key\n+     @return this (for chaining)\n+     */\n+    public Whitelist removeEnforcedAttribute(String tag, String key) {\n+        Validate.notEmpty(tag);\n+        Validate.notEmpty(key);\n+\n+        TagName tagName = TagName.valueOf(tag);\n+        if(tagNames.contains(tagName) && enforcedAttributes.containsKey(tagName)) {\n+            AttributeKey attrKey = AttributeKey.valueOf(key);\n+            Map<AttributeKey, AttributeValue> attrMap = enforcedAttributes.get(tagName);\n+            attrMap.remove(attrKey);\n+\n+            if(attrMap.isEmpty()) // Remove tag from enforced attribute map if no enforced attributes are present\n+                enforcedAttributes.remove(tagName);\n         }\n         return this;\n     }\n     }\n \n     /**\n+     Remove allowed URL protocols for an element's URL attribute.\n+     <p/>\n+     E.g.: <code>removeProtocols(\"a\", \"href\", \"ftp\")</code>\n+\n+     @param tag       Tag the URL protocol is for\n+     @param key       Attribute key\n+     @param protocols List of invalid protocols\n+     @return this, for chaining\n+     */\n+    public Whitelist removeProtocols(String tag, String key, String... protocols) {\n+        Validate.notEmpty(tag);\n+        Validate.notEmpty(key);\n+        Validate.notNull(protocols);\n+\n+        TagName tagName = TagName.valueOf(tag);\n+        AttributeKey attrKey = AttributeKey.valueOf(key);\n+\n+        if(this.protocols.containsKey(tagName)) {\n+            Map<AttributeKey, Set<Protocol>> attrMap = this.protocols.get(tagName);\n+            if(attrMap.containsKey(attrKey)) {\n+                Set<Protocol> protSet = attrMap.get(attrKey);\n+                for (String protocol : protocols) {\n+                    Validate.notEmpty(protocol);\n+                    Protocol prot = Protocol.valueOf(protocol);\n+                    protSet.remove(prot);\n+                }\n+\n+                if(protSet.isEmpty()) { // Remove protocol set if empty\n+                    attrMap.remove(attrKey);\n+                    if(attrMap.isEmpty()) // Remove entry for tag if empty\n+                        this.protocols.remove(tagName);\n+                }\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n      * Test if the supplied tag is allowed by this whitelist\n      * @param tag test tag\n      * @return true if allowed\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n import java.util.*;\n \n /**\n- A list of {@link Element Elements}, with methods that act on every element in the list.\n+ A list of {@link Element}s, with methods that act on every element in the list.\n  <p/>\n- To get an Elements object, use the {@link Element#select(String)} method.\n+ To get an {@code Elements} object, use the {@link Element#select(String)} method.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class Elements implements List<Element>, Cloneable {\n \n     /**\n      * Get the {@link FormElement} forms from the selected elements, if any.\n-     * @return a list of FormElements pulled from the matched elements. The list will be empty if the elements contain\n+     * @return a list of {@link FormElement}s pulled from the matched elements. The list will be empty if the elements contain\n      * no forms.\n      */\n     public List<FormElement> forms() {\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n             Validate.notEmpty(value);\n \n             this.key = key.trim().toLowerCase();\n+            if (value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")) {\n+                value = value.substring(1, value.length()-1);\n+            }\n             this.value = value.trim().toLowerCase();\n         }\n     }\n \t\t\tint pos = 0;\n         \tElements family = element.parent().children();\n         \tfor (int i = 0; i < family.size(); i++) {\n-        \t\tif (family.get(i).tag() == element.tag()) pos++;\n+        \t\tif (family.get(i).tag().equals(element.tag())) pos++;\n         \t\tif (family.get(i) == element) break;\n         \t}\n \t\t\treturn pos;\n \t\t\tint pos = 0;\n         \tElements family = element.parent().children();\n         \tfor (int i = element.elementSiblingIndex(); i < family.size(); i++) {\n-        \t\tif (family.get(i).tag() == element.tag()) pos++;\n+        \t\tif (family.get(i).tag().equals(element.tag())) pos++;\n         \t}\n \t\t\treturn pos;\n \t\t}\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  * <tr><td><code>[attr]</code></td><td>elements with an attribute named \"attr\" (with any value)</td><td><code>a[href]</code>, <code>[title]</code></td></tr>\n  * <tr><td><code>[^attrPrefix]</code></td><td>elements with an attribute name starting with \"attrPrefix\". Use to find elements with HTML5 datasets</td><td><code>[^data-]</code>, <code>div[^data-]</code></td></tr>\n  * <tr><td><code>[attr=val]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>img[width=500]</code>, <code>a[rel=nofollow]</code></td></tr>\n+ * <tr><td><code>[attr=&quot;val&quot;]</code></td><td>elements with an attribute named \"attr\", and value equal to \"val\"</td><td><code>span[hello=\"Cleveland\"][goodbye=\"Columbus\"]</code>, <code>a[rel=&quot;nofollow&quot;]</code></td></tr>\n  * <tr><td><code>[attr^=valPrefix]</code></td><td>elements with an attribute named \"attr\", and value starting with \"valPrefix\"</td><td><code>a[href^=http:]</code></code></td></tr>\n  * <tr><td><code>[attr$=valSuffix]</code></td><td>elements with an attribute named \"attr\", and value ending with \"valSuffix\"</td><td><code>img[src$=.png]</code></td></tr>\n  * <tr><td><code>[attr*=valContaining]</code></td><td>elements with an attribute named \"attr\", and value containing \"valContaining\"</td><td><code>a[href*=/search/]</code></td></tr>\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302.pl\"); // http://jsoup.org\n         Document doc = con.get();\n         assertTrue(doc.title().contains(\"jsoup\"));\n+    }\n+\n+    @Test\n+    public void followsNewTempRedirect() throws IOException {\n+        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/307.pl\"); // http://jsoup.org\n+        Document doc = con.get();\n+        assertTrue(doc.title().contains(\"jsoup\"));\n+        assertEquals(\"http://jsoup.org\", con.response().url().toString());\n     }\n \n     @Test\n         assertEquals(\"ISO-8859-1\", res.charset());\n     }\n \n+    @Test\n+    public void baseHrefCorrectAfterHttpEquiv() throws IOException {\n+        // https://github.com/jhy/jsoup/issues/440\n+        Connection.Response res = Jsoup.connect(\"http://direct.infohound.net/tools/charset-base.html\").execute();\n+        Document doc = res.parse();\n+        assertEquals(\"http://example.com/foo.jpg\", doc.select(\"img\").first().absUrl(\"src\"));\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/nodes/DocumentTypeTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTypeTest.java\n  * @author Jonathan Hedley, http://jonathanhedley.com/\n  */\n public class DocumentTypeTest {\n-    @Test(expected = IllegalArgumentException.class)\n-    public void constructorValidationThrowsExceptionOnBlankName() {\n+    @Test\n+    public void constructorValidationOkWithBlankName() {\n         DocumentType fail = new DocumentType(\"\",\"\", \"\", \"\");\n     }\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"<p>there</p><p>now</p>\", TextUtil.stripNewlines(div.html()));\n     }\n \n+    @Test public void testSetHtmlTitle() {\n+        Document doc = Jsoup.parse(\"<html><head id=2><title id=1></title></head></html>\");\n+\n+        Element title = doc.getElementById(\"1\");\n+        title.html(\"good\");\n+        assertEquals(\"good\", title.html());\n+        title.html(\"<i>bad</i>\");\n+        assertEquals(\"&lt;i&gt;bad&lt;/i&gt;\", title.html());\n+\n+        Element head = doc.getElementById(\"2\");\n+        head.html(\"<title><i>bad</i></title>\");\n+        assertEquals(\"<title>&lt;i&gt;bad&lt;/i&gt;</title>\", head.html());\n+    }\n+\n     @Test public void testWrap() {\n         Document doc = Jsoup.parse(\"<div><p>Hello</p><p>There</p></div>\");\n         Element p = doc.select(\"p\").first();\n         assertEquals(\"<div id=\\\"1\\\">Text <p>One</p> Text <p>Two</p></div><div id=\\\"2\\\"><p>One cloned</p><p>Two</p></div>\",\n             TextUtil.stripNewlines(doc.body().html()));\n     }\n+\n+    @Test\n+    public void testCssPath() {\n+        Document doc = Jsoup.parse(\"<div id=\\\"id1\\\">A</div><div>B</div><div class=\\\"c1 c2\\\">C</div>\");\n+        Element divA = doc.select(\"div\").get(0);\n+        Element divB = doc.select(\"div\").get(1);\n+        Element divC = doc.select(\"div\").get(2);\n+        assertEquals(divA.cssSelector(), \"#id1\");\n+        assertEquals(divB.cssSelector(), \"html > body > div:nth-child(2)\");\n+        assertEquals(divC.cssSelector(), \"html > body > div.c1.c2\");\n+\n+        assertTrue(divA == doc.select(divA.cssSelector()).first());\n+        assertTrue(divB == doc.select(divB.cssSelector()).first());\n+        assertTrue(divC == doc.select(divC.cssSelector()).first());\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n \n public class EntitiesTest {\n     @Test public void escape() {\n-        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\";\n+        String text = \"Hello &<> \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb\";\n         String escapedAscii = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(base));\n         String escapedAsciiFull = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(extended));\n         String escapedAsciiXhtml = Entities.escape(text, new OutputSettings().charset(\"ascii\").escapeMode(xhtml));\n         String escapedUtfFull = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(base));\n         String escapedUtfMin = Entities.escape(text, new OutputSettings().charset(\"UTF-8\").escapeMode(xhtml));\n \n-        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy;\", escapedAscii);\n-        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy;\", escapedAsciiFull);\n-        assertEquals(\"Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9;\", escapedAsciiXhtml);\n-        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\", escapedUtfFull);\n-        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\", escapedUtfMin);\n+        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;\", escapedAscii);\n+        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;\", escapedAsciiFull);\n+        assertEquals(\"Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;\", escapedAsciiXhtml);\n+        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb\", escapedUtfFull);\n+        assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9 \u00bb\", escapedUtfMin);\n         // odd that it's defined as aring in base but angst in full\n \n         // round trip\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         assertEquals(\"http://foo/2/1\", anchors.get(0).absUrl(\"href\"));\n         assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\"));\n         assertEquals(\"http://foo/4\", anchors.get(2).absUrl(\"href\"));\n+    }\n+\n+    @Test public void handlesProtocolRelativeUrl() {\n+        String base = \"https://example.com/\";\n+        String html = \"<img src='//example.net/img.jpg'>\";\n+        Document doc = Jsoup.parse(html, base);\n+        Element el = doc.select(\"img\").first();\n+        assertEquals(\"https://example.net/img.jpg\", el.absUrl(\"src\"));\n     }\n \n     @Test public void handlesCdata() {\n         Document doc = Jsoup.parse(h);\n         assertEquals(\"<img>\\n<svg>\\n <image />\\n</svg>\", doc.body().html());\n     }\n+\n+    @Test public void handlesInvalidDoctypes() {\n+        // would previously throw invalid name exception on empty doctype\n+        Document doc = Jsoup.parse(\"<!DOCTYPE>\");\n+        assertEquals(\n+                \"<!DOCTYPE> <html> <head></head> <body></body> </html>\",\n+                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+\n+        doc = Jsoup.parse(\"<!DOCTYPE><html><p>Foo</p></html>\");\n+        assertEquals(\n+                \"<!DOCTYPE> <html> <head></head> <body> <p>Foo</p> </body> </html>\",\n+                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+\n+        doc = Jsoup.parse(\"<!DOCTYPE \\u0000>\");\n+        assertEquals(\n+                \"<!DOCTYPE \ufffd> <html> <head></head> <body></body> </html>\",\n+                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+    }\n }\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n         String h = \"<h1>Head</h1><table><tr><td>One<td>Two</td></tr></table>\";\n         String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());\n         assertEquals(\"<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>\", TextUtil.stripNewlines(cleanHtml));\n+    }\n+\n+    @Test public void testRemoveTags() {\n+        String h = \"<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>\";\n+        String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeTags(\"a\"));\n+\n+        assertEquals(\"<p>Nice</p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml));\n+    }\n+\n+    @Test public void testRemoveAttributes() {\n+        String h = \"<div><p>Nice</p><blockquote cite='http://example.com/quotations'>Hello</blockquote>\";\n+        String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeAttributes(\"blockquote\", \"cite\"));\n+\n+        assertEquals(\"<p>Nice</p><blockquote>Hello</blockquote>\", TextUtil.stripNewlines(cleanHtml));\n+    }\n+\n+    @Test public void testRemoveEnforcedAttributes() {\n+        String h = \"<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>\";\n+        String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeEnforcedAttribute(\"a\", \"rel\"));\n+\n+        assertEquals(\"<p><a href=\\\"http://nice.com\\\">Nice</a></p><blockquote>Hello</blockquote>\",\n+                TextUtil.stripNewlines(cleanHtml));\n+    }\n+\n+    @Test public void testRemoveProtocols() {\n+        String h = \"<p>Contact me <a href='mailto:info@example.com'>here</a></p>\";\n+        String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeProtocols(\"a\", \"href\", \"ftp\", \"mailto\"));\n+\n+        assertEquals(\"<p>Contact me <a rel=\\\"nofollow\\\">here</a></p>\",\n+                TextUtil.stripNewlines(cleanHtml));\n     }\n     \n     @Test public void testDropComments() {\n     @Test public void cleansInternationalText() {\n         assertEquals(\"\u043f\u0440\u0438\u0432\u0435\u0442\", Jsoup.clean(\"\u043f\u0440\u0438\u0432\u0435\u0442\", Whitelist.none()));\n     }\n+\n+    @Test\n+    public void testScriptTagInWhiteList() {\n+        Whitelist whitelist = Whitelist.relaxed();\n+        whitelist.addTags( \"script\" );\n+        assertTrue( Jsoup.isValid(\"Hello<script>alert('Doh')</script>World !\", whitelist ) );\n+    }\n }\n--- a/src/test/java/org/jsoup/select/CssTest.java\n+++ b/src/test/java/org/jsoup/select/CssTest.java\n \t\t\tsb.append(String.format(\"<p>%d</p>\",i));\n \t\t\tsb.append(String.format(\"<span>%d</span>\",i));\n \t\t\tsb.append(String.format(\"<em>%d</em>\",i));\n+            sb.append(String.format(\"<svg>%d</svg>\",i));\n \t\t}\n \t\tsb.append(\"</div>\");\n \n \t\t}\n \t}\n \n+    @Test\n+    public void nthOfType_unknownTag() {\n+        for(int i = 1; i <=10; i++) {\n+            check(html.select(String.format(\"#type svg:nth-of-type(%d)\", i)), String.valueOf(i));\n+        }\n+    }\n \n \t@Test\n \tpublic void nthLastChild_simple() {\n \t@Test\n \tpublic void nthLastOfType_simple() {\n \t\tfor(int i = 1; i <=10; i++) {\n-\t\t\tcheck(html.select(String.format(\"#type :nth-last-of-type(%d)\", i)), String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i));\n+\t\t\tcheck(html.select(String.format(\"#type :nth-last-of-type(%d)\", i)), String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i));\n \t\t}\n \t}\n \n \t\tcheck(html.select(\"#type p:nth-of-type(2n)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n \t\tcheck(html.select(\"#type p:nth-of-type(3n-1)\"), \"2\", \"5\", \"8\");\n \t\tcheck(html.select(\"#type p:nth-of-type(-2n+5)\"), \"1\", \"3\", \"5\");\n-\t\tcheck(html.select(\"#type :nth-of-type(+5)\"), \"5\", \"5\", \"5\");\n+\t\tcheck(html.select(\"#type :nth-of-type(+5)\"), \"5\", \"5\", \"5\", \"5\");\n \t}\n \n \t\n \t\tcheck(html.select(\"#type p:nth-last-of-type(3n-1)\"), \"3\", \"6\", \"9\");\n \n \t\tcheck(html.select(\"#type span:nth-last-of-type(-2n+5)\"), \"6\", \"8\", \"10\");\n-\t\tcheck(html.select(\"#type :nth-last-of-type(+5)\"), \"6\", \"6\", \"6\");\n+\t\tcheck(html.select(\"#type :nth-last-of-type(+5)\"), \"6\", \"6\", \"6\", \"6\");\n \t}\n \t\n \t@Test\n \tpublic void firstOfType() {\n-\t\tcheck(html.select(\"div:not(#only) :first-of-type\"), \"1\", \"1\", \"1\", \"1\");\n+\t\tcheck(html.select(\"div:not(#only) :first-of-type\"), \"1\", \"1\", \"1\", \"1\", \"1\");\n \t}\n \n \t@Test\n \tpublic void lastOfType() {\n-\t\tcheck(html.select(\"div:not(#only) :last-of-type\"), \"10\", \"10\", \"10\", \"10\");\n+\t\tcheck(html.select(\"div:not(#only) :last-of-type\"), \"10\", \"10\", \"10\", \"10\", \"10\");\n \t}\n \n \t@Test\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n     }\n \n     @Test public void testByAttribute() {\n-        String h = \"<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />\";\n+        String h = \"<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM />\" +\n+                \"<div data-name='with spaces'/>\";\n         Document doc = Jsoup.parse(h);\n \n         Elements withTitle = doc.select(\"[title]\");\n \n         Elements foo = doc.select(\"[title=foo]\");\n         assertEquals(1, foo.size());\n+\n+        Elements foo2 = doc.select(\"[title=\\\"foo\\\"]\");\n+        assertEquals(1, foo2.size());\n+\n+        Elements foo3 = doc.select(\"[title=\\\"Foo\\\"]\");\n+        assertEquals(1, foo3.size());\n+\n+        Elements dataName = doc.select(\"[data-name=\\\"with spaces\\\"]\");\n+        assertEquals(1, dataName.size());\n+        assertEquals(\"with spaces\", dataName.first().attr(\"data-name\"));\n \n         Elements not = doc.select(\"div[title!=bar]\");\n         assertEquals(5, not.size());", "timestamp": 1412225053, "metainfo": ""}