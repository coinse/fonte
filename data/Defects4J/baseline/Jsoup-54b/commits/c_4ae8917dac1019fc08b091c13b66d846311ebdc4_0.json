{"sha": "4ae8917dac1019fc08b091c13b66d846311ebdc4", "log": "Renamed SSL to TLS  And moved, and updated docs.", "commit": "\n--- a/src/main/java/org/jsoup/Connection.java\n+++ b/src/main/java/org/jsoup/Connection.java\n     }\n \n     /**\n-     * Setter to disable\\enable SSL certificates checks during https connection\n-     * <p/>\n-     * By default all connections over HTTPS perform normal validation of certificates.\n-     * <b>NB!</b>Use this feature at your own risk.\n-     * <p/>\n-     * Some websites use self generated certificates to sign data, which sometimes are expired,\n-     * by default request to those websites would fail, this feature allows to communicate to them.\n-     *\n-     * @param value\n-     */\n-    Connection setValidateSSLCertificates(boolean value);\n-\n-    /**\n      * Set the request URL to fetch. The protocol must be HTTP or HTTPS.\n      * @param url URL to connect to\n      * @return this Connection, for chaining\n      * @return this Connection, for chaining\n      */\n     public Connection ignoreContentType(boolean ignoreContentType);\n+\n+    /**\n+     * Disable/enable TSL certificates validation for HTTPS requests.\n+     * <p/>\n+     * By default this is <b>true</b>; all\n+     * connections over HTTPS perform normal validation of certificates, and will abort requests if the provided\n+     * certificate does not validate.\n+     * <p/>\n+     * Some servers use expired, self-generated certificates; or your JDK may not\n+     * support SNI hosts. In which case, you may want to enable this setting.\n+     * <p/> <b>Be careful</b> and understand why you need to disable these validations.\n+     * @param value if should validate TSL (SSL) certificates. <b>true</b> by default.\n+     * @return this Connection, for chaining\n+     */\n+    Connection validateTLSCertificates(boolean value);\n \n     /**\n      * Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the\n         public Request ignoreContentType(boolean ignoreContentType);\n \n         /**\n+         * Get the current state of TLS (SSL) certificate validation.\n+         * @return true if TLS cert validation enabled\n+         */\n+        boolean validateTLSCertificates();\n+\n+        /**\n+         * Set TLS certificate validation.\n+         * @param value set false to ignore TLS (SSL) certificates\n+         */\n+        void validateTLSCertificates(boolean value);\n+\n+        /**\n          * Add a data parameter to the request\n          * @param keyval data to add.\n          * @return this Request, for chaining\n          * @return current Parser\n          */\n         public Parser parser();\n-\n-        /**\n-         * get current state of security enabling\\disabling feature\n-         *\n-         * @return\n-         */\n-        boolean isValidateSSLCertificates();\n-\n-        /**\n-         * Disable SSL certificates checks.\n-         * @param value\n-         */\n-        void setValidateSSLCertificates(boolean value);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n import java.util.regex.Pattern;\n import java.util.zip.GZIPInputStream;\n \n-import static org.jsoup.Connection.Method;\n-\n /**\n  * Implementation of {@link Connection}.\n  * @see org.jsoup.Jsoup#connect(String)\n         res = new Response();\n     }\n \n-    public Connection setValidateSSLCertificates(boolean value) {\n-        req.setValidateSSLCertificates(value);\n-        return this;\n-    }\n-\n     public Connection url(URL url) {\n         req.url(url);\n         return this;\n \n     public Connection ignoreContentType(boolean ignoreContentType) {\n         req.ignoreContentType(ignoreContentType);\n+        return this;\n+    }\n+\n+    public Connection validateTLSCertificates(boolean value) {\n+        req.validateTLSCertificates(value);\n         return this;\n     }\n \n         private boolean ignoreHttpErrors = false;\n         private boolean ignoreContentType = false;\n         private Parser parser;\n-//      always default to validateSSLCertificates connections in https\n-        private boolean validateSSLCertificates = true;\n+        private boolean validateTSLCertificates = true;\n \n         private Request() {\n             timeoutMilliseconds = 3000;\n             return ignoreHttpErrors;\n         }\n \n+        public boolean validateTLSCertificates() {\n+            return validateTSLCertificates;\n+        }\n+\n+        public void validateTLSCertificates(boolean value) {\n+            validateTSLCertificates = value;\n+        }\n+\n         public Connection.Request ignoreHttpErrors(boolean ignoreHttpErrors) {\n             this.ignoreHttpErrors = ignoreHttpErrors;\n             return this;\n \n         public Parser parser() {\n             return parser;\n-        }\n-\n-        public boolean isValidateSSLCertificates() {\n-            return validateSSLCertificates;\n-        }\n-\n-        public void setValidateSSLCertificates(boolean value) {\n-            validateSSLCertificates = value;\n         }\n     }\n \n             conn.setReadTimeout(req.timeout());\n \n             if (conn instanceof HttpsURLConnection) {\n-                if (!req.isValidateSSLCertificates()) {\n-                    initUnSecureSSL();\n+                if (!req.validateTLSCertificates()) {\n+                    initUnSecureTSL();\n                     ((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory);\n                     ((HttpsURLConnection)conn).setHostnameVerifier(getInsecureVerifier());\n                 }\n          * @return Hostname Verifier that does nothing and accepts all hostnames\n          */\n         private static HostnameVerifier getInsecureVerifier() {\n-            HostnameVerifier hv = new HostnameVerifier() {\n+            return new HostnameVerifier() {\n                 public boolean verify(String urlHostName, SSLSession session) {\n                     return true;\n                 }\n             };\n-            return hv;\n         }\n \n         /**\n          *\n          * @throws IOException\n          */\n-        private static synchronized void initUnSecureSSL() throws IOException {\n+        private static synchronized void initUnSecureTSL() throws IOException {\n             if (sslSocketFactory == null) {\n                 // Create a trust manager that does not validate certificate chains\n                 final TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {\n                         String cookieVal = cd.consumeTo(\";\").trim();\n                         if (cookieVal == null)\n                             cookieVal = \"\";\n-                        // ignores path, date, domain, validateSSLCertificates et al. req'd?\n+                        // ignores path, date, domain, validateTLSCertificates et al. req'd?\n                         // name not blank, value not null\n                         if (cookieName != null && cookieName.length() > 0)\n                             cookie(cookieName, cookieVal);\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n @Ignore // ignored by default so tests don't require network access. comment out to enable.\n public class UrlConnectTest {\n     private static final String WEBSITE_WITH_INVALID_CERTIFICATE = \"https://certs.cac.washington.edu/CAtest/\";\n-    private static final String WEBSITE_WITH_SNI = \"https://sni.velox.ch/\";\n+    private static final String WEBSITE_WITH_SNI = \"https://jsoup.org/\";\n     private static String echoURL = \"http://direct.infohound.net/tools/q.pl\";\n \n     @Test\n      * @throws Exception\n      */\n     @Test(expected = IOException.class)\n-    @Ignore\n     public void testSNIFail() throws Exception {\n         String url = WEBSITE_WITH_SNI;\n         Jsoup.connect(url).execute();\n      * @throws Exception\n      */\n     @Test\n-    @Ignore\n     public void testSNIPass() throws Exception {\n         String url = WEBSITE_WITH_SNI;\n-        Connection.Response defaultRes = Jsoup.connect(url).setValidateSSLCertificates(false).execute();\n+        Connection.Response defaultRes = Jsoup.connect(url).validateTLSCertificates(false).execute();\n         assertThat(defaultRes.statusCode(), is(200));\n     }\n \n     @Test\n     public void testUnsafePass() throws Exception {\n         String url = WEBSITE_WITH_INVALID_CERTIFICATE;\n-        Connection.Response defaultRes = Jsoup.connect(url).setValidateSSLCertificates(false).execute();\n+        Connection.Response defaultRes = Jsoup.connect(url).validateTLSCertificates(false).execute();\n         assertThat(defaultRes.statusCode(), is(200));\n     }\n ", "timestamp": 1414563383, "metainfo": ""}