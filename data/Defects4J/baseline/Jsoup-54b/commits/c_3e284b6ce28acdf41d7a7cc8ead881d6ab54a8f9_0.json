{"sha": "3e284b6ce28acdf41d7a7cc8ead881d6ab54a8f9", "log": "No longer strip \\r before parsing.  This saves memory and CPU time at start of parse.", "commit": "\n--- a/src/main/java/org/jsoup/parser/CharacterReader.java\n+++ b/src/main/java/org/jsoup/parser/CharacterReader.java\n \n     CharacterReader(String input) {\n         Validate.notNull(input);\n-        input = input.replaceAll(\"\\r\\n?\", \"\\n\"); // normalise carriage returns to newlines\n-\n         this.input = input;\n         this.length = input.length();\n     }\n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n             return null;\n         if (additionalAllowedCharacter != null && additionalAllowedCharacter == reader.current())\n             return null;\n-        if (reader.matchesAny('\\t', '\\n', '\\f', ' ', '<', '&'))\n+        if (reader.matchesAny('\\t', '\\n', '\\r', '\\f', ' ', '<', '&'))\n             return null;\n \n         reader.mark();\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n         // from < or </ in data, will have start or end tag pending\n         void read(Tokeniser t, CharacterReader r) {\n             // previous TagOpen state did NOT consume, will have a letter char in current\n-            String tagName = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '>', nullChar).toLowerCase();\n+            String tagName = r.consumeToAny('\\t', '\\n', '\\r', '\\f', ' ', '/', '>', nullChar).toLowerCase();\n             t.tagPending.appendTagName(tagName);\n \n             switch (r.consume()) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     t.transition(BeforeAttributeName);\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     if (t.isAppropriateEndTagToken())\n                 switch (c) {\n                     case '\\t':\n                     case '\\n':\n+                    case '\\r':\n                     case '\\f':\n                     case ' ':\n                         t.transition(BeforeAttributeName);\n                 switch (c) {\n                     case '\\t':\n                     case '\\n':\n+                    case '\\r':\n                     case '\\f':\n                     case ' ':\n                         t.transition(BeforeAttributeName);\n                 switch (c) {\n                     case '\\t':\n                     case '\\n':\n+                    case '\\r':\n                     case '\\f':\n                     case ' ':\n                         t.transition(BeforeAttributeName);\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                 case '/':\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                 case '/':\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     break; // ignore whitespace\n     AttributeName {\n         // from before attribute name\n         void read(Tokeniser t, CharacterReader r) {\n-            String name = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<');\n+            String name = r.consumeToAny('\\t', '\\n', '\\r', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<');\n             t.tagPending.appendAttributeName(name.toLowerCase());\n \n             char c = r.consume();\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     t.transition(AfterAttributeName);\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     // ignore\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     // ignore\n     },\n     AttributeValue_unquoted {\n         void read(Tokeniser t, CharacterReader r) {\n-            String value = r.consumeToAny('\\t', '\\n', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`');\n+            String value = r.consumeToAny('\\t', '\\n', '\\r', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`');\n             if (value.length() > 0)\n                 t.tagPending.appendAttributeValue(value);\n \n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     t.transition(BeforeAttributeName);\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     t.transition(BeforeAttributeName);\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     t.transition(BeforeDoctypeName);\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     break; // ignore whitespace\n                     break;\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     t.transition(AfterDoctypeName);\n                 t.transition(Data);\n                 return;\n             }\n-            if (r.matchesAny('\\t', '\\n', '\\f', ' '))\n+            if (r.matchesAny('\\t', '\\n', '\\r', '\\f', ' '))\n                 r.advance(); // ignore whitespace\n             else if (r.matches('>')) {\n                 t.emitDoctypePending();\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     t.transition(BeforeDoctypePublicIdentifier);\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     break;\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     t.transition(BetweenDoctypePublicAndSystemIdentifiers);\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     break;\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     t.transition(BeforeDoctypeSystemIdentifier);\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     break;\n             switch (c) {\n                 case '\\t':\n                 case '\\n':\n+                case '\\r':\n                 case '\\f':\n                 case ' ':\n                     break;\n--- a/src/test/java/org/jsoup/parser/AttributeParseTest.java\n+++ b/src/test/java/org/jsoup/parser/AttributeParseTest.java\n         assertEquals(\"18\", attr.get(\"mux\"));\n     }\n \n+    @Test public void handlesNewLinesAndReturns() {\n+        String html = \"<a\\r\\nfoo='bar\\r\\nqux'\\r\\nbar\\r\\n=\\r\\ntwo>One</a>\";\n+        Element el = Jsoup.parse(html).select(\"a\").first();\n+        assertEquals(2, el.attributes().size());\n+        assertEquals(\"bar\\r\\nqux\", el.attr(\"foo\")); // currently preserves newlines in quoted attributes. todo confirm if should.\n+        assertEquals(\"two\", el.attr(\"bar\"));\n+    }\n+\n     @Test public void parsesEmptyString() {\n         String html = \"<a />\";\n         Element el = Jsoup.parse(html).getElementsByTag(\"a\").get(0);\n--- a/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n+++ b/src/test/java/org/jsoup/parser/CharacterReaderTest.java\n         assertEquals('n', r.consume());\n     }\n \n-    @Test public void handleCarriageReturnAsLineFeed() {\n-        String in = \"one \\r two \\r\\n three\";\n-        CharacterReader r = new CharacterReader(in);\n-\n-        String first = r.consumeTo('\\n');\n-        assertEquals(\"one \", first);\n-        assertEquals(\"\\n two \\n three\", r.consumeToEnd());\n-    }\n-\n     @Test public void consumeToEnd() {\n         String in = \"one two three\";\n         CharacterReader r = new CharacterReader(in);\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n     }\n \n     @Test public void handlesWhitespaceInoDocType() {\n-        String html = \"<!DOCTYPE html\\n\" +\n-                \"      PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\\n\" +\n+        String html = \"<!DOCTYPE html\\r\\n\" +\n+                \"      PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\"\\r\\n\" +\n                 \"      \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\";\n         Document doc = Jsoup.parse(html);\n         assertEquals(\"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\", doc.childNode(0).outerHtml());", "timestamp": 1338263967, "metainfo": ""}