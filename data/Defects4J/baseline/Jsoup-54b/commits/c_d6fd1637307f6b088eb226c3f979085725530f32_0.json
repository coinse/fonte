{"sha": "d6fd1637307f6b088eb226c3f979085725530f32", "log": "Performance improvment for Element.text  Increase the speed of getting an element's text content by 220%, by reducing new object creation. Also reduces GC load.", "commit": "\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n         return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r';\n     }\n \n+    /**\n+     * Normalise the whitespace within this string; multiple spaces collapse to a single, and all whitespace characters\n+     * (e.g. newline, tab) convert to a simple space\n+     * @param string content to normalise\n+     * @return normalised string\n+     */\n     public static String normaliseWhitespace(String string) {\n         StringBuilder sb = new StringBuilder(string.length());\n+        appendNormalisedWhitespace(sb, string, false);\n+        return sb.toString();\n+    }\n \n+    /**\n+     * After normalizing the whitespace within a string, appends it to a string builder.\n+     * @param accum builder to append to\n+     * @param string string to normalize whitespace within\n+     * @param stripLeading set to true if you wish to remove any leading whitespace\n+     * @return\n+     */\n+    public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading) {\n         boolean lastWasWhite = false;\n-        boolean modified = false;\n+        boolean reachedNonWhite = false;\n \n-        int l = string.length();\n+        int len = string.length();\n         int c;\n-        for (int i = 0; i < l; i+= Character.charCount(c)) {\n+        for (int i = 0; i < len; i+= Character.charCount(c)) {\n             c = string.codePointAt(i);\n             if (isWhitespace(c)) {\n-                if (lastWasWhite) {\n-                    modified = true;\n+                if ((stripLeading && !reachedNonWhite) || lastWasWhite)\n                     continue;\n-                }\n-                if (c != ' ')\n-                    modified = true;\n-                sb.append(' ');\n+                accum.append(' ');\n                 lastWasWhite = true;\n             }\n             else {\n-                sb.appendCodePoint(c);\n+                accum.appendCodePoint(c);\n                 lastWasWhite = false;\n+                reachedNonWhite = true;\n             }\n         }\n-        return modified ? sb.toString() : string;\n     }\n \n     public static boolean in(String needle, String... haystack) {\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     private static void appendNormalisedText(StringBuilder accum, TextNode textNode) {\n         String text = textNode.getWholeText();\n \n-        if (!preserveWhitespace(textNode.parent())) {\n-            text = TextNode.normaliseWhitespace(text);\n-            if (TextNode.lastCharIsWhitespace(accum))\n-                text = TextNode.stripLeadingWhitespace(text);\n-        }\n-        accum.append(text);\n+        if (preserveWhitespace(textNode.parentNode))\n+            accum.append(text);\n+        else\n+            StringUtil.appendNormalisedWhitespace(accum, text, TextNode.lastCharIsWhitespace(accum));\n     }\n \n     private static void appendWhitespaceIfBr(Element element, StringBuilder accum) {\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n     }\n \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        String html = Entities.escape(getWholeText(), out);\n-        if (out.prettyPrint() && parent() instanceof Element && !Element.preserveWhitespace((Element) parent())) {\n-            html = normaliseWhitespace(html);\n-        }\n-\n         if (out.prettyPrint() && ((siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().formatAsBlock() && !isBlank()) || (out.outline() && siblingNodes().size()>0 && !isBlank()) ))\n             indent(accum, depth, out);\n-        accum.append(html);\n+\n+        String html = Entities.escape(getWholeText(), out);\n+        if (out.prettyPrint() && parent() instanceof Element && !Element.preserveWhitespace((Element) parent()))\n+            StringUtil.appendNormalisedWhitespace(accum, html, false);\n+        else\n+            accum.append(html);\n     }\n \n     void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n--- a/src/test/java/org/jsoup/helper/StringUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/StringUtilTest.java\n         assertEquals(\"hello there\", StringUtil.normaliseWhitespace(\"hello\\nthere\"));\n     }\n \n-    @Test public void normaliseWhiteSpaceModified() {\n-        String check1 = \"Hello there\";\n-        String check2 = \"Hello\\nthere\";\n-        String check3 = \"Hello  there\";\n-\n-        // does not create new string no mods done\n-        assertTrue(check1 == StringUtil.normaliseWhitespace(check1));\n-        assertTrue(check2 != StringUtil.normaliseWhitespace(check2));\n-        assertTrue(check3 != StringUtil.normaliseWhitespace(check3));\n-    }\n-\n     @Test public void normaliseWhiteSpaceHandlesHighSurrogates() {\n         String test71540chars = \"\\ud869\\udeb2\\u304b\\u309a  1\";\n         String test71540charsExpectedSingleWhitespace = \"\\ud869\\udeb2\\u304b\\u309a 1\";", "timestamp": 1384639346, "metainfo": ""}