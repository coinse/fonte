{"sha": "ef57a000b65f075de35f8d593a5223779755ac26", "log": "Fixed support for jsoup.connect to follow redirects between http & https URLs.  Fixes #37", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n \n         static Response execute(Connection.Request req) throws IOException {\n             Validate.notNull(req, \"Request must not be null\");\n-            URL url = req.url();\n-            String protocol = url.getProtocol();\n+            String protocol = req.url().getProtocol();\n             Validate\n                 .isTrue(protocol.equals(\"http\") || protocol.equals(\"https\"), \"Only http & https protocols supported\");\n \n             // set up the request for execution\n             if (req.method() == Connection.Method.GET && req.data().size() > 0)\n-                url = getRequestUrl(req); // appends query string\n-            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n-            conn.setRequestMethod(req.method().name());\n-            conn.setInstanceFollowRedirects(true);\n-            conn.setConnectTimeout(req.timeout());\n-            conn.setReadTimeout(req.timeout());\n-            if (req.method() == Connection.Method.POST)\n-                conn.setDoOutput(true);\n-            if (req.cookies().size() > 0)\n-                conn.addRequestProperty(\"Cookie\", getRequestCookieString(req));\n-            for (Map.Entry<String, String> header : req.headers().entrySet()) {\n-                conn.addRequestProperty(header.getKey(), header.getValue());\n-            }\n+                serialiseRequestUrl(req); // appends query string\n+            HttpURLConnection conn = createConnection(req);\n             conn.connect();\n             if (req.method() == Connection.Method.POST)\n                 writePost(req.data(), conn.getOutputStream());          \n \n             // todo: error handling options, allow user to get !200 without exception\n             int status = conn.getResponseCode();\n-            if (status != HttpURLConnection.HTTP_OK)\n-                throw new IOException(status + \" error loading URL \" + url.toString());\n+            boolean needsRedirect = false;\n+            if (status != HttpURLConnection.HTTP_OK) {\n+                // java url connection will follow redirects on same protocol, but not switch between http & https, so do that here\n+                if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)\n+                    needsRedirect = true;\n+                else\n+                    throw new IOException(status + \" error loading URL \" + req.url().toString());\n+            }\n             Response res = new Response();\n             res.setupFromConnection(conn);\n+            if (needsRedirect) {\n+                req.url(new URL(res.header(\"Location\")));\n+                return execute(req);\n+            }\n \n             InputStream inStream = null;\n             try {\n         public byte[] bodyAsBytes() {\n             Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");\n             return byteData.array();\n+        }\n+\n+        // set up connection defaults, and details from request\n+        private static HttpURLConnection createConnection(Connection.Request req) throws IOException {\n+            HttpURLConnection conn = (HttpURLConnection) req.url().openConnection();\n+            conn.setRequestMethod(req.method().name());\n+            conn.setInstanceFollowRedirects(true);\n+            conn.setConnectTimeout(req.timeout());\n+            conn.setReadTimeout(req.timeout());\n+            if (req.method() == Method.POST)\n+                conn.setDoOutput(true);\n+            if (req.cookies().size() > 0)\n+                conn.addRequestProperty(\"Cookie\", getRequestCookieString(req));\n+            for (Map.Entry<String, String> header : req.headers().entrySet()) {\n+                conn.addRequestProperty(header.getKey(), header.getValue());\n+            }\n+            return conn;\n         }\n \n         // set up url, method, header, cookies\n             }\n             return sb.toString();\n         }\n-        \n-        private static URL getRequestUrl(Connection.Request req) throws IOException {\n+\n+        // for get url reqs, serialise the data map into the url\n+        private static void serialiseRequestUrl(Connection.Request req) throws IOException {\n             URL in = req.url();\n             StringBuilder url = new StringBuilder();\n             boolean first = true;\n                     .append('=')\n                     .append(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset));\n             }\n-            return new URL(url.toString());\n+            req.url(new URL(url.toString()));\n+            req.data().clear(); // moved into url as get params\n         }\n     }\n \n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         return doc.select(\"th:contains(\"+key+\") + td\").first().text();\n     }\n \n+    @Test\n+    public void followsTempRedirect() throws IOException {\n+        Connection con = Jsoup.connect(\"http://infohound.net/tools/302.pl\"); // http://jsoup.org\n+        Document doc = con.get();\n+        assertTrue(doc.title().contains(\"jsoup\"));\n+    }\n+\n+    @Test\n+    public void followsRedirectToHttps() throws IOException {\n+        Connection con = Jsoup.connect(\"http://infohound.net/tools/302-secure.pl\"); // https://www.google.com\n+        con.data(\"id\", \"5\");\n+        Document doc = con.get();\n+        assertTrue(doc.title().contains(\"Google\"));\n+    }\n+\n }", "timestamp": 1309605121, "metainfo": ""}