{"sha": "ffde882f49c01900d6ff3b65e9407a3da3d57f1c", "log": "Implemented sibling methods", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         return this;\n     }\n \n+    @Override\n+    public Element parent() {\n+        return (Element) super.parent();\n+    }\n+\n     public Element child(int index) {\n         return elementChildren.get(index);\n     }\n     }\n \n     public Element nextElementSibling() {\n-        // TODO: implement\n-        return null;\n+        List<Element> siblings = parent().elementChildren;\n+        Integer index = indexInList(this, siblings);\n+        Validate.notNull(index);\n+        if (siblings.size() > index+1)\n+            return siblings.get(index+1);\n+        else\n+            return null;\n     }\n \n     public Element previousElementSibling() {\n-        // TODO: implement\n-        return null;\n+        List<Element> siblings = parent().elementChildren;\n+        Integer index = indexInList(this, siblings);\n+        Validate.notNull(index);\n+        if (index > 0)\n+            return siblings.get(index-1);\n+        else\n+            return null;\n+    }\n+\n+    public Element firstElementSibling() {\n+        // todo: should firstSibling() exclude this?\n+        List<Element> siblings = parent().elementChildren;\n+        return siblings.size() > 1 ? siblings.get(0) : null;\n+    }\n+\n+    public Element lastElementSibling() {\n+        List<Element> siblings = parent().elementChildren;\n+        return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;\n     }\n \n     // DOM type methods\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n package org.jsoup.nodes;\n \n import org.apache.commons.lang.NotImplementedException;\n+import org.apache.commons.lang.Validate;\n \n import java.util.ArrayList;\n import java.util.Collections;\n     }\n \n     public Node nextSibling() {\n-        // TODO: implement\n-        return null;\n+        List<Node> siblings = parentNode.childNodes;\n+        Integer index = indexInList(this, siblings);\n+        Validate.notNull(index);\n+        if (siblings.size() > index+1)\n+            return siblings.get(index+1);\n+        else\n+            return null;\n     }\n \n     public Node previousSibling() {\n-        // TODO: implement\n+        List<Node> siblings = parentNode.childNodes;\n+        Integer index = indexInList(this, siblings);\n+        Validate.notNull(index);\n+        if (index > 0)\n+            return siblings.get(index-1);\n+        else\n+            return null;\n+    }\n+\n+    protected static <N extends Node> Integer indexInList(N search, List<N> nodes) {\n+        Validate.notNull(search);\n+        Validate.notNull(nodes);\n+\n+        for (int i = 0; i < nodes.size(); i++) {\n+            N node = nodes.get(i);\n+            if (node.equals(search))\n+                return i;\n+        }\n         return null;\n     }\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"Another element\", doc.getElementsByTag(\"p\").get(1).text());\n     }\n \n+    @Test public void testGetSiblings() {\n+        Document doc = JSoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>\");\n+        Element p = doc.getElementById(\"1\");\n+        assertEquals(\"there\", p.text());\n+        assertEquals(\"Hello\", p.previousElementSibling().text());\n+        assertEquals(\"this\", p.nextElementSibling().text());\n+        assertEquals(\"Hello\", p.firstElementSibling().text());\n+        assertEquals(\"element\", p.lastElementSibling().text());\n+    }\n+\n }", "timestamp": 1309605100, "metainfo": ""}