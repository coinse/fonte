{"sha": "431f8236e89acd1bd3c678fad727f2d585226be8", "log": "Remove useless and old SVN @version Javadoc tags.", "commit": "\n--- a/src/main/java/org/apache/commons/csv/Assertions.java\n+++ b/src/main/java/org/apache/commons/csv/Assertions.java\n  * Utility class for input parameter validation.\n  *\n  * TODO Replace usage with {@link Objects} when we switch to Java 7.\n- *\n- * @version $Id$\n  */\n final class Assertions {\n \n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n  * <p>\n  * This class is immutable.\n  * </p>\n- *\n- * @version $Id$\n  */\n public final class CSVFormat implements Serializable {\n \n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n  * Internal parser state is completely covered by the format and the reader-state.\n  * </p>\n  *\n- * @version $Id$\n- *\n  * @see <a href=\"package-summary.html\">package documentation for more details</a>\n  */\n public final class CSVParser implements Iterable<CSVRecord>, Closeable {\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n \n /**\n  * Prints values in a CSV format.\n- *\n- * @version $Id$\n  */\n public final class CSVPrinter implements Flushable, Closeable {\n \n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n \n /**\n  * A CSV record parsed from a CSV file.\n- *\n- * @version $Id$\n  */\n public final class CSVRecord implements Serializable, Iterable<String> {\n \n--- a/src/main/java/org/apache/commons/csv/Constants.java\n+++ b/src/main/java/org/apache/commons/csv/Constants.java\n \n /**\n  * Constants for this package.\n- *\n- * @version $Id$\n  */\n final class Constants {\n \n--- a/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n+++ b/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n  * In particular the reader supports a look-ahead option, which allows you to see the next char returned by\n  * {@link #read()}. This reader also tracks how many characters have been read with {@link #getPosition()}.\n  * </p>\n- *\n- * @version $Id$\n  */\n final class ExtendedBufferedReader extends BufferedReader {\n \n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n \n /**\n  * Lexical analyzer.\n- *\n- * @version $Id$\n  */\n final class Lexer implements Closeable {\n \n--- a/src/main/java/org/apache/commons/csv/QuoteMode.java\n+++ b/src/main/java/org/apache/commons/csv/QuoteMode.java\n /**\n  * Defines quote behavior when printing.\n  *\n- * @version $Id$\n  */\n public enum QuoteMode {\n \n--- a/src/main/java/org/apache/commons/csv/Token.java\n+++ b/src/main/java/org/apache/commons/csv/Token.java\n  * Internal token representation.\n  * <p/>\n  * It is used as contract between the lexer and the parser.\n- *\n- * @version $Id$\n  */\n final class Token {\n \n--- a/src/test/java/org/apache/commons/csv/AssertionsTest.java\n+++ b/src/test/java/org/apache/commons/csv/AssertionsTest.java\n import org.junit.Test;\n \n /**\n- * @version $Id$\n  */\n public class AssertionsTest {\n \n--- a/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n \n /**\n  * Parse tests using test files\n- *\n- * @version $Id$\n  */\n @RunWith(Parameterized.class)\n public class CSVFileParserTest {\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n \n /**\n  *\n- *\n- * @version $Id$\n  */\n public class CSVFormatTest {\n \n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n  * The test are organized in three different sections: The 'setter/getter' section, the lexer section and finally the\n  * parser section. In case a test fails, you should follow a top-down approach for fixing a potential bug (its likely\n  * that the parser itself fails if the lexer has problems...).\n- *\n- * @version $Id$\n  */\n public class CSVParserTest {\n \n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n \n /**\n  *\n- *\n- * @version $Id$\n  */\n public class CSVPrinterTest {\n \n--- a/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n+++ b/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n \n /**\n  *\n- *\n- * @version $Id$\n  */\n public class ExtendedBufferedReaderTest {\n \n--- a/src/test/java/org/apache/commons/csv/LexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/LexerTest.java\n \n /**\n  *\n- *\n- * @version $Id$\n  */\n public class LexerTest {\n \n--- a/src/test/java/org/apache/commons/csv/PerformanceTest.java\n+++ b/src/test/java/org/apache/commons/csv/PerformanceTest.java\n  * Basic test harness.\n  *\n  * Requires test file to be downloaded separately.\n- *\n- * @version $Id$\n  */\n @SuppressWarnings(\"boxing\")\n public class PerformanceTest {\n--- a/src/test/java/org/apache/commons/csv/Utils.java\n+++ b/src/test/java/org/apache/commons/csv/Utils.java\n \n /**\n  * Utility methods for test cases\n- *\n- * @version $Id$\n  */\n final class Utils {\n \n--- a/src/test/java/org/apache/commons/csv/perf/PerformanceTest.java\n+++ b/src/test/java/org/apache/commons/csv/perf/PerformanceTest.java\n  * Tests performance.\n  *\n  * To run this test, use: mvn test -Dtest=PeformanceTest\n- *\n- * @version $Id$\n  */\n @SuppressWarnings(\"boxing\") // test code\n public class PerformanceTest {", "timestamp": 1502840442, "metainfo": ""}