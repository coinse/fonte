{"sha": "4f3ef66ce3f030c1f45b9426908da32e462e6bac", "log": "Removed the constructors of CSVFormat from the public API, as well as the DISABLED constant which becomes useless because the special characters are disabled by default in the predefined formats  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      * and because the unicode value FFFE would be encoded as two chars (using surrogates)\n      * and thus there should never be a collision with a real text char.\n      */\n-    public static final char DISABLED = '\\ufffe';\n+    static final char DISABLED = '\\ufffe';\n \n     /** Standard comma separated format as defined by <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>. */\n     public static final CSVFormat DEFAULT = new CSVFormat(',', '\"', DISABLED, DISABLED, true, true, false, true);\n     /**\n      * Creates a CSV format with the default parameters.\n      */\n-    public CSVFormat() {\n+    CSVFormat() {\n     }\n \n     /**\n      * @param encapsulator              the char used as value encapsulation marker\n      * @param commentStart              the char used for comment identification\n      */\n-    public CSVFormat(char delimiter, char encapsulator, char commentStart) {\n+    CSVFormat(char delimiter, char encapsulator, char commentStart) {\n         this(delimiter, encapsulator, commentStart, DISABLED, true, true, false, true);\n     }\n \n      * @param unicodeEscapesInterpreted <tt>true</tt> when unicode escapes should be interpreted\n      * @param emptyLinesIgnored         <tt>true</tt> when the parser should skip emtpy lines\n      */\n-    public CSVFormat(\n+    CSVFormat(\n             char delimiter,\n             char encapsulator,\n             char commentStart,", "timestamp": 1331118172, "metainfo": ""}