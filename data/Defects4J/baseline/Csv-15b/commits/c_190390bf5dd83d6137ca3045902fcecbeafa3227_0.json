{"sha": "190390bf5dd83d6137ca3045902fcecbeafa3227", "log": "[CSV-171] Negative numeric values in the first column are always quoted in minimal mode.", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n             } else {\n                 char c = value.charAt(pos);\n \n-                // TODO where did this rule come from?\n-                if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {\n+                // RFC4180 (https://tools.ietf.org/html/rfc4180) TEXTDATA =  %x20-21 / %x23-2B / %x2D-7E\n+                if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {\n                     quote = true;\n                 } else if (c <= COMMENT) {\n                     // Some other chars at the start of a value caused the parser to fail, so for now\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n  */\n public class CSVPrinterTest {\n \n+    private static final char DQUOTE_CHAR = '\"';\n+    private static final char BACKSLASH_CH = '\\\\';\n     private static final char QUOTE_CH = '\\'';\n     private static final int ITERATIONS_FOR_RANDOM_TEST = 50000;\n \n                 ch = ',';\n                 break;\n             case 6:\n-                ch = '\"';\n+                ch = DQUOTE_CHAR;\n                 break;\n             case 7:\n                 ch = '\\'';\n                 break;\n             case 8:\n-                ch = '\\\\';\n+                ch = BACKSLASH_CH;\n                 break;\n             default:\n                 ch = (char) r.nextInt(300);\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\n             printer.print(\"\\\\\");\n         }\n-        assertEquals(\"'\\\\'\", sw.toString());\n+        assertEquals(\"\\\\\", sw.toString());\n     }\n \n     @Test\n             printer.print(\"\\\\\\r\");\n         }\n         assertEquals(\"'\\\\\\r'\", sw.toString());\n-\n     }\n \n     @Test\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\n             printer.print(\"\\\\\\\\\");\n         }\n-        assertEquals(\"'\\\\\\\\'\", sw.toString());\n+        assertEquals(\"\\\\\\\\\", sw.toString());\n     }\n \n     @Test\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\n             printer.print(\"\\\\\\\\\");\n         }\n-        assertEquals(\"'\\\\\\\\'\", sw.toString());\n+        assertEquals(\"\\\\\\\\\", sw.toString());\n+    }\n+\n+    @Test\n+    public void testEscapeNull1() throws IOException {\n+        StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n+            printer.print(\"\\\\\");\n+        }\n+        assertEquals(\"\\\\\", sw.toString());\n+    }\n+\n+    @Test\n+    public void testEscapeNull2() throws IOException {\n+        StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n+            printer.print(\"\\\\\\r\");\n+        }\n+        assertEquals(\"\\\"\\\\\\r\\\"\", sw.toString());\n+    }\n+\n+    @Test\n+    public void testEscapeNull3() throws IOException {\n+        StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n+            printer.print(\"X\\\\\\r\");\n+        }\n+        assertEquals(\"\\\"X\\\\\\r\\\"\", sw.toString());\n+    }\n+\n+    @Test\n+    public void testEscapeNull4() throws IOException {\n+        StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n+            printer.print(\"\\\\\\\\\");\n+        }\n+        assertEquals(\"\\\\\\\\\", sw.toString());\n+    }\n+\n+    @Test\n+    public void testEscapeNull5() throws IOException {\n+        StringWriter sw = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n+            printer.print(\"\\\\\\\\\");\n+        }\n+        assertEquals(\"\\\\\\\\\", sw.toString());\n     }\n \n     @Test\n     @Test\n     @Ignore\n     public void testJira135_part1() throws IOException {\n-        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n+        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote(DQUOTE_CHAR).withEscape(BACKSLASH_CH);\n         final StringWriter sw = new StringWriter();\n         final List<String> list = new LinkedList<>();\n         try (final CSVPrinter printer = new CSVPrinter(sw, format)) {\n     @Test\n     @Ignore\n     public void testJira135_part2() throws IOException {\n-        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n+        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote(DQUOTE_CHAR).withEscape(BACKSLASH_CH);\n         final StringWriter sw = new StringWriter();\n         final List<String> list = new LinkedList<>();\n         try (final CSVPrinter printer = new CSVPrinter(sw, format)) {\n     @Test\n     @Ignore\n     public void testJira135_part3() throws IOException {\n-        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n+        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote(DQUOTE_CHAR).withEscape(BACKSLASH_CH);\n         final StringWriter sw = new StringWriter();\n         final List<String> list = new LinkedList<>();\n         try (final CSVPrinter printer = new CSVPrinter(sw, format)) {\n     @Test\n     @Ignore\n     public void testJira135All() throws IOException {\n-        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n+        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote(DQUOTE_CHAR).withEscape(BACKSLASH_CH);\n         final StringWriter sw = new StringWriter();\n         final List<String> list = new LinkedList<>();\n         try (final CSVPrinter printer = new CSVPrinter(sw, format)) {\n     @Test\n     public void testMySqlNullOutput() throws IOException {\n         Object[] s = new String[] { \"NULL\", null };\n-        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n+        CSVFormat format = CSVFormat.MYSQL.withQuote(DQUOTE_CHAR).withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n         StringWriter writer = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n             printer.printRecord(s);", "timestamp": 1469949695, "metainfo": ""}