{"sha": "7e471527915cb0c73316c598fd02b71a56f2cf43", "log": "[CSV-217] Add autoFlush option for CsvPrinter. Applying modified patch This closes #24.", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      * @see Predefined#Default\n      */\n     public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,\n-            null, null, null, false, false, false, false, false);\n+            null, null, null, false, false, false, false, false, false);\n \n     /**\n      * Excel file format (using a comma as the value delimiter). Note that the actual value delimiter used by Excel is\n      */\n     public static CSVFormat newFormat(final char delimiter) {\n         return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false,\n-                false, false, false);\n+                false, false, false, false);\n     }\n \n     /**\n     private final boolean trailingDelimiter;\n \n     private final boolean trim;\n+\n+    private final boolean autoFlush;\n \n     /**\n      * Creates a customized CSV format.\n      *            TODO\n      * @param trailingDelimiter\n      *            TODO\n+     * @param autoFlush\n      * @throws IllegalArgumentException\n      *             if the delimiter is a line break character\n      */\n     private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\n-            final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\n-            final boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\n-            final Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\n-            final boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\n-            final boolean trailingDelimiter) {\n+                      final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\n+                      final boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\n+                      final Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\n+                      final boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\n+                      final boolean trailingDelimiter, boolean autoFlush) {\n         this.delimiter = delimiter;\n         this.quoteCharacter = quoteChar;\n         this.quoteMode = quoteMode;\n         this.ignoreHeaderCase = ignoreHeaderCase;\n         this.trailingDelimiter = trailingDelimiter;\n         this.trim = trim;\n+        this.autoFlush = autoFlush;\n         validate();\n     }\n \n      */\n     public boolean getTrim() {\n         return trim;\n+    }\n+\n+    /**\n+     * Returns whether to flush on close.\n+     *\n+     * @return whether to flush on close.\n+     * @since 1.6\n+     */\n+    public boolean getAutoFlush() {\n+        return autoFlush;\n     }\n \n     @Override\n     public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n                 ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n-                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n     public CSVFormat withHeader(final String... header) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n     public CSVFormat withHeaderComments(final Object... headerComments) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n     public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n     public CSVFormat withIgnoreHeaderCase(final boolean ignoreHeaderCase) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n     public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n     public CSVFormat withNullString(final String nullString) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n         }\n         return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n                 ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n-                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n     public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n     public CSVFormat withRecordSeparator(final String recordSeparator) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n     public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n     public CSVFormat withTrailingDelimiter(final boolean trailingDelimiter) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n \n     /**\n     public CSVFormat withTrim(final boolean trim) {\n         return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n+    }\n+\n+    /**\n+     * Returns a new {@code CSVFormat} with whether to flush on close.\n+     *\n+     * @param autoFlush\n+     *            whether to flush on close.\n+     *\n+     * @return A new CSVFormat that is equal to this but with the specified autoFlush setting.\n+     * @since 1.6\n+     */\n+    public CSVFormat withAutoFlush(final boolean autoFlush) {\n+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n+            ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n+            skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter, autoFlush);\n     }\n }\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n \n     @Override\n     public void close() throws IOException {\n+        close(false);\n+    }\n+\n+    /**\n+     * Closes the underlying stream with an optional flush first.\n+     * @param flush whether to flush before the actual close.\n+     * \n+     * @throws IOException\n+     *             If an I/O error occurs\n+     * @since 1.6\n+     */\n+    public void close(boolean flush) throws IOException {\n+        if (flush || format.getAutoFlush()) {\n+            if (out instanceof Flushable) {\n+                ((Flushable) out).flush();\n+            }\n+        }\n         if (out instanceof Closeable) {\n             ((Closeable) out).close();\n         }\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n \n import java.io.CharArrayWriter;\n import java.io.File;\n import java.io.IOException;\n import java.io.StringReader;\n import java.io.StringWriter;\n+import java.io.Writer;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.sql.BatchUpdateException;\n         }\n     }\n \n+    @Test\n+    public void testCloseWithFlushOn() throws IOException {\n+        Writer writer = mock(Writer.class);\n+        CSVFormat csvFormat = CSVFormat.DEFAULT;\n+        CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat);\n+        csvPrinter.close(true);\n+        verify(writer, times(1)).flush();\n+    }\n+\n+    @Test\n+    public void testCloseWithFlushOff() throws IOException {\n+        Writer writer = mock(Writer.class);\n+        CSVFormat csvFormat = CSVFormat.DEFAULT;\n+        CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat);\n+        csvPrinter.close(false);\n+        verify(writer, never()).flush();\n+        verify(writer, times(1)).close();\n+    }\n+\n+    @Test\n+    public void testCloseBackwardCompatibility() throws IOException {\n+        Writer writer = mock(Writer.class);\n+        CSVFormat csvFormat = CSVFormat.DEFAULT;\n+        try (CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat)) {\n+        }\n+        verify(writer, never()).flush();\n+        verify(writer, times(1)).close();\n+    }\n+\n+    @Test\n+    public void testCloseWithCsvFormatAutoFlushOn() throws IOException {\n+        System.out.println(\"start method\");\n+        Writer writer = mock(Writer.class);\n+        CSVFormat csvFormat = CSVFormat.DEFAULT.withAutoFlush(true);\n+        try (CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat)) {\n+        }\n+        verify(writer, times(1)).flush();\n+        verify(writer, times(1)).close();\n+    }\n+\n+    @Test\n+    public void testCloseWithCsvFormatAutoFlushOff() throws IOException {\n+        Writer writer = mock(Writer.class);\n+        CSVFormat csvFormat = CSVFormat.DEFAULT.withAutoFlush(false);\n+        try (CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat)) {\n+        }\n+        verify(writer, never()).flush();\n+        verify(writer, times(1)).close();\n+    }\n+\n }", "timestamp": 1507576973, "metainfo": ""}