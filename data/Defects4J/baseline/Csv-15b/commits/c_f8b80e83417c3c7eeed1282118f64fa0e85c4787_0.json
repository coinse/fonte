{"sha": "f8b80e83417c3c7eeed1282118f64fa0e85c4787", "log": "[CSV-168] CsvFormat.nullString should not be escaped. [CSV-170] CSVFormat.MYSQL nullString should be \"\\N\".  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      *\n      * <p>\n      * This is a tab-delimited format with a LF character as the line separator. Values are not quoted and special\n-     * characters are escaped with '\\'.\n+     * characters are escaped with {@code '\\'}. The default NULL string is {@code \"\\\\N\"}.\n      * </p>\n      *\n      * <p>\n      * <li>withRecordSeparator('\\n')</li>\n      * <li>withIgnoreEmptyLines(false)</li>\n      * <li>withEscape('\\\\')</li>\n+     * <li>withNullString(\"\\\\N\")</li>\n      * </ul>\n      *\n      * @see Predefined#MySQL\n      *      http://dev.mysql.com/doc/refman/5.1/en/load-data.html</a>\n      */\n     public static final CSVFormat MYSQL = DEFAULT.withDelimiter(TAB).withEscape(BACKSLASH).withIgnoreEmptyLines(false)\n-            .withQuote(null).withRecordSeparator(LF);\n+            .withQuote(null).withRecordSeparator(LF).withNullString(\"\\\\N\");\n \n     /**\n      * Returns true if the given character is a line break character.\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n         if (!newRecord) {\n             out.append(format.getDelimiter());\n         }\n-        if (format.isQuoteCharacterSet()) {\n+        if (object == null) {\n+            out.append(value);\n+        } else if (format.isQuoteCharacterSet()) {\n             // the original object is needed so can check for Number\n             printAndQuote(object, value, offset, len);\n         } else if (format.isEscapeCharacterSet()) {\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n package org.apache.commons.csv;\n \n import static org.apache.commons.csv.Constants.CR;\n+import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n \n import java.util.List;\n import java.util.Random;\n \n+import org.apache.commons.lang3.ObjectUtils;\n import org.junit.Test;\n \n /**\n  */\n public class CSVPrinterTest {\n \n+    private static final int ITERATIONS_FOR_RANDOM_TEST = 50000;\n+    \n     private final String recordSeparator = CSVFormat.DEFAULT.getRecordSeparator();\n \n     private static String printable(final String s) {\n         final int nLines = r.nextInt(4) + 1;\n         final int nCol = r.nextInt(3) + 1;\n         // nLines=1;nCol=2;\n+        final String[][] lines = generateLines(nLines, nCol);\n+\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, format);\n+\n+        for (int i = 0; i < nLines; i++) {\n+            // for (int j=0; j<lines[i].length; j++) System.out.println(\"### VALUE=:\" + printable(lines[i][j]));\n+            printer.printRecord((Object[]) lines[i]);\n+        }\n+\n+        printer.flush();\n+        printer.close();\n+        final String result = sw.toString();\n+        // System.out.println(\"### :\" + printable(result));\n+\n+        final CSVParser parser = CSVParser.parse(result, format);\n+        final List<CSVRecord> parseResult = parser.getRecords();\n+\n+        String[][] expected = lines.clone();\n+        for (int i = 0; i < expected.length; i++) {\n+            expected[i] = expectNulls(expected[i], format);\n+        }\n+        Utils.compare(\"Printer output :\" + printable(result), expected, parseResult);\n+        parser.close();\n+    }\n+\n+    private String[][] generateLines(final int nLines, final int nCol) {\n         final String[][] lines = new String[nLines][];\n         for (int i = 0; i < nLines; i++) {\n             final String[] line = new String[nCol];\n                 line[j] = randStr();\n             }\n         }\n-\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, format);\n-\n-        for (int i = 0; i < nLines; i++) {\n-            // for (int j=0; j<lines[i].length; j++) System.out.println(\"### VALUE=:\" + printable(lines[i][j]));\n-            printer.printRecord((Object[])lines[i]);\n-        }\n-\n-        printer.flush();\n-        printer.close();\n-        final String result = sw.toString();\n-        // System.out.println(\"### :\" + printable(result));\n-\n-        final CSVParser parser = CSVParser.parse(result, format);\n-        final List<CSVRecord> parseResult = parser.getRecords();\n-\n-        Utils.compare(\"Printer output :\" + printable(result), lines, parseResult);\n-        parser.close();\n+        return lines;\n     }\n \n     private void doRandom(final CSVFormat format, final int iter) throws Exception {\n             char ch;\n             final int what = r.nextInt(20);\n             switch (what) {\n-                case 0:\n-                    ch = '\\r';\n-                    break;\n-                case 1:\n-                    ch = '\\n';\n-                    break;\n-                case 2:\n-                    ch = '\\t';\n-                    break;\n-                case 3:\n-                    ch = '\\f';\n-                    break;\n-                case 4:\n-                    ch = ' ';\n-                    break;\n-                case 5:\n-                    ch = ',';\n-                    break;\n-                case 6:\n-                    ch = '\"';\n-                    break;\n-                case 7:\n-                    ch = '\\'';\n-                    break;\n-                case 8:\n-                    ch = '\\\\';\n-                    break;\n-                default:\n-                    ch = (char) r.nextInt(300);\n-                    break;\n-                // default: ch = 'a'; break;\n+            case 0:\n+                ch = '\\r';\n+                break;\n+            case 1:\n+                ch = '\\n';\n+                break;\n+            case 2:\n+                ch = '\\t';\n+                break;\n+            case 3:\n+                ch = '\\f';\n+                break;\n+            case 4:\n+                ch = ' ';\n+                break;\n+            case 5:\n+                ch = ',';\n+                break;\n+            case 6:\n+                ch = '\"';\n+                break;\n+            case 7:\n+                ch = '\\'';\n+                break;\n+            case 8:\n+                ch = '\\\\';\n+                break;\n+            default:\n+                ch = (char) r.nextInt(300);\n+                break;\n+            // default: ch = 'a'; break;\n             }\n             buf[i] = ch;\n         }\n     public void testExcelPrintAllIterableOfLists() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n-        printer.printRecords(Arrays.asList(new List[] { Arrays.asList(\"r1c1\", \"r1c2\"),\n-                Arrays.asList(\"r2c1\", \"r2c2\") }));\n+        printer.printRecords(\n+                Arrays.asList(new List[] { Arrays.asList(\"r1c1\", \"r1c2\"), Arrays.asList(\"r2c1\", \"r2c2\") }));\n         assertEquals(\"r1c1,r1c2\" + recordSeparator + \"r2c1,r2c2\" + recordSeparator, sw.toString());\n         printer.close();\n     }\n     }\n \n     @Test\n+    public void testMySqlNullStringDefault() throws IOException {\n+        assertEquals(\"\\\\N\", CSVFormat.MYSQL.getNullString());\n+    }\n+\n+    @Test\n+    public void testMySqlNullOutput() throws IOException {\n+        Object[] s = new String[] { \"NULL\", null };\n+        CSVFormat format = CSVFormat.MYSQL.withQuote('\"').withNullString(\"NULL\").withQuoteMode(QuoteMode.NON_NUMERIC);\n+        StringWriter writer = new StringWriter();\n+        CSVPrinter printer = new CSVPrinter(writer, format);\n+        printer.printRecord(s);\n+        printer.close();\n+        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n+        assertEquals(expected, writer.toString());\n+        String[] record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(new Object[2], record0);\n+\n+        s = new String[] { \"\\\\N\", null };\n+        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n+        writer = new StringWriter();\n+        printer = new CSVPrinter(writer, format);\n+        printer.printRecord(s);\n+        printer.close();\n+        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\\\N\", \"A\" };\n+        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n+        writer = new StringWriter();\n+        printer = new CSVPrinter(writer, format);\n+        printer.printRecord(s);\n+        printer.close();\n+        expected = \"\\\\\\\\N\\tA\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\n\", \"A\" };\n+        format = CSVFormat.MYSQL.withNullString(\"\\\\N\");\n+        writer = new StringWriter();\n+        printer = new CSVPrinter(writer, format);\n+        printer.printRecord(s);\n+        printer.close();\n+        expected = \"\\\\n\\tA\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\", null };\n+        format = CSVFormat.MYSQL.withNullString(\"NULL\");\n+        writer = new StringWriter();\n+        printer = new CSVPrinter(writer, format);\n+        printer.printRecord(s);\n+        printer.close();\n+        expected = \"\\tNULL\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\", null };\n+        format = CSVFormat.MYSQL;\n+        writer = new StringWriter();\n+        printer = new CSVPrinter(writer, format);\n+        printer.printRecord(s);\n+        printer.close();\n+        expected = \"\\t\\\\N\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n+        format = CSVFormat.MYSQL;\n+        writer = new StringWriter();\n+        printer = new CSVPrinter(writer, format);\n+        printer.printRecord(s);\n+        printer.close();\n+        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"NULL\", \"\\\\\\r\" };\n+        format = CSVFormat.MYSQL;\n+        writer = new StringWriter();\n+        printer = new CSVPrinter(writer, format);\n+        printer.printRecord(s);\n+        printer.close();\n+        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\\\\\r\" };\n+        format = CSVFormat.MYSQL;\n+        writer = new StringWriter();\n+        printer = new CSVPrinter(writer, format);\n+        printer.printRecord(s);\n+        printer.close();\n+        expected = \"\\\\\\\\\\\\r\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+    }\n+\n+    /**\n+     * Converts an input CSV array into expected output values WRT NULLs. NULL strings are converted to null values\n+     * because the parser will convert these strings to null.\n+     */\n+    private <T> T[] expectNulls(T[] original, CSVFormat csvFormat) {\n+        T[] fixed = original.clone();\n+        for (int i = 0; i < fixed.length; i++) {\n+            if (ObjectUtils.equals(csvFormat.getNullString(), fixed[i])) {\n+                fixed[i] = null;\n+            }\n+        }\n+        return fixed;\n+    }\n+\n+    private String[] toFirstRecordValues(final String expected, CSVFormat format) throws IOException {\n+        return CSVParser.parse(expected, format).getRecords().get(0).values();\n+    }\n+\n+    @Test\n     public void testPrinter1() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n     }\n \n     @Test\n-    public void testRandom() throws Exception {\n-        final int iter = 10000;\n-        doRandom(CSVFormat.DEFAULT, iter);\n-        doRandom(CSVFormat.EXCEL, iter);\n-        doRandom(CSVFormat.MYSQL, iter);\n+    public void testRandomDefault() throws Exception {\n+        doRandom(CSVFormat.DEFAULT, ITERATIONS_FOR_RANDOM_TEST);\n+    }\n+\n+    @Test\n+    public void testRandomExcel() throws Exception {\n+        doRandom(CSVFormat.EXCEL, ITERATIONS_FOR_RANDOM_TEST);\n+    }\n+\n+    @Test\n+    public void testRandomMySql() throws Exception {\n+        doRandom(CSVFormat.MYSQL, ITERATIONS_FOR_RANDOM_TEST);\n+    }\n+\n+    @Test\n+    public void testRandomTdf() throws Exception {\n+        doRandom(CSVFormat.TDF, ITERATIONS_FOR_RANDOM_TEST);\n+    }\n+\n+    @Test\n+    public void testRandomRfc4180() throws Exception {\n+        doRandom(CSVFormat.RFC4180, ITERATIONS_FOR_RANDOM_TEST);\n     }\n \n     @Test\n     }\n \n     @Test\n+    public void testEscapeBackslash() throws IOException {\n+        StringWriter sw = new StringWriter();\n+        final char quoteChar = '\\'';\n+        final String eol = \"\\r\\n\";\n+        CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(quoteChar));\n+        printer.print(\"\\\\\");\n+        printer.close();\n+        assertEquals(\"'\\\\'\", sw.toString());\n+\n+        sw = new StringWriter();\n+        printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(quoteChar));\n+        printer.print(\"\\\\\\r\");\n+        printer.close();\n+        assertEquals(\"'\\\\\\r'\", sw.toString());\n+\n+        sw = new StringWriter();\n+        printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(quoteChar));\n+        printer.print(\"X\\\\\\r\");\n+        printer.close();\n+        assertEquals(\"'X\\\\\\r'\", sw.toString());\n+\n+        sw = new StringWriter();\n+        printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(quoteChar));\n+        printer.printRecord(new Object[] { \"\\\\\\r\" });\n+        printer.close();\n+        assertEquals(\"'\\\\\\r'\" + eol, sw.toString());\n+\n+        sw = new StringWriter();\n+        printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(quoteChar));\n+        printer.print(\"\\\\\\\\\");\n+        printer.close();\n+        assertEquals(\"'\\\\\\\\'\", sw.toString());\n+\n+    }\n+\n+    @Test\n     public void testPlainEscaped() throws IOException {\n         final StringWriter sw = new StringWriter();\n         final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(null).withEscape('!'));\n     @Test\n     public void testHeader() throws IOException {\n         final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(null)\n-                .withHeader(\"C1\", \"C2\", \"C3\"));\n+        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(null).withHeader(\"C1\", \"C2\", \"C3\"));\n         printer.printRecord(\"a\", \"b\", \"c\");\n         printer.printRecord(\"x\", \"y\", \"z\");\n         assertEquals(\"C1,C2,C3\\r\\na,b,c\\r\\nx,y,z\\r\\n\", sw.toString());\n \n     @Test\n     public void testSkipHeaderRecordTrue() throws IOException {\n-    \t// functionally identical to testHeaderNotSet, used to test CSV-153\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(null)\n-                .withHeader(\"C1\", \"C2\", \"C3\").withSkipHeaderRecord(true));\n+        // functionally identical to testHeaderNotSet, used to test CSV-153\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw,\n+                CSVFormat.DEFAULT.withQuote(null).withHeader(\"C1\", \"C2\", \"C3\").withSkipHeaderRecord(true));\n         printer.printRecord(\"a\", \"b\", \"c\");\n         printer.printRecord(\"x\", \"y\", \"z\");\n         assertEquals(\"a,b,c\\r\\nx,y,z\\r\\n\", sw.toString());\n \n     @Test\n     public void testSkipHeaderRecordFalse() throws IOException {\n-    \t// functionally identical to testHeader, used to test CSV-153\n-        final StringWriter sw = new StringWriter();\n-        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(null)\n-                .withHeader(\"C1\", \"C2\", \"C3\").withSkipHeaderRecord(false));\n+        // functionally identical to testHeader, used to test CSV-153\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw,\n+                CSVFormat.DEFAULT.withQuote(null).withHeader(\"C1\", \"C2\", \"C3\").withSkipHeaderRecord(false));\n         printer.printRecord(\"a\", \"b\", \"c\");\n         printer.printRecord(\"x\", \"y\", \"z\");\n         assertEquals(\"C1,C2,C3\\r\\na,b,c\\r\\nx,y,z\\r\\n\", sw.toString());\n         final Date now = new Date();\n         final CSVFormat format = CSVFormat.EXCEL;\n         final CSVPrinter csvPrinter = printWithHeaderComments(sw, now, format);\n-        assertEquals(\"# Generated by Apache Commons CSV 1.1\\r\\n# \" + now + \"\\r\\nCol1,Col2\\r\\nA,B\\r\\nC,D\\r\\n\", sw.toString());\n+        assertEquals(\"# Generated by Apache Commons CSV 1.1\\r\\n# \" + now + \"\\r\\nCol1,Col2\\r\\nA,B\\r\\nC,D\\r\\n\",\n+                sw.toString());\n         csvPrinter.close();\n     }\n \n         final Date now = new Date();\n         final CSVFormat format = CSVFormat.TDF;\n         final CSVPrinter csvPrinter = printWithHeaderComments(sw, now, format);\n-        assertEquals(\"# Generated by Apache Commons CSV 1.1\\r\\n# \" + now + \"\\r\\nCol1\\tCol2\\r\\nA\\tB\\r\\nC\\tD\\r\\n\", sw.toString());\n+        assertEquals(\"# Generated by Apache Commons CSV 1.1\\r\\n# \" + now + \"\\r\\nCol1\\tCol2\\r\\nA\\tB\\r\\nC\\tD\\r\\n\",\n+                sw.toString());\n         csvPrinter.close();\n     }\n ", "timestamp": 1453170859, "metainfo": ""}