{"sha": "ad38b2d28b00017577ec56a8ffc65c9f0baa59ad", "log": "Use final.  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n         final CSVParser parser = CSVParser.parse(result, format);\n         final List<CSVRecord> parseResult = parser.getRecords();\n \n-        String[][] expected = lines.clone();\n+        final String[][] expected = lines.clone();\n         for (int i = 0; i < expected.length; i++) {\n             expected[i] = expectNulls(expected[i], format);\n         }\n     @Test\n     @Ignore\n     public void testJira135All() throws IOException {\n-        CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n-        StringWriter sw = new StringWriter();\n-        CSVPrinter printer = new CSVPrinter(sw, format);\n-        List<String> list = new LinkedList<String>();\n+        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, format);\n+        final List<String> list = new LinkedList<String>();\n         list.add(\"\\\"\");\n         list.add(\"\\n\");\n         list.add(\"\\\\\");\n         printer.close();\n         final String expected = \"\\\"\\\\\\\"\\\",\\\"\\\\n\\\",\\\"\\\\\\\"\" + format.getRecordSeparator();\n         assertEquals(expected, sw.toString());\n-        String[] record0 = toFirstRecordValues(expected, format);\n+        final String[] record0 = toFirstRecordValues(expected, format);\n         assertArrayEquals(expectNulls(list.toArray(), format), record0);\n     }\n     \n     @Test\n     @Ignore\n     public void testJira135_part3() throws IOException {\n-        CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n-        StringWriter sw = new StringWriter();\n-        CSVPrinter printer = new CSVPrinter(sw, format);\n-        List<String> list = new LinkedList<String>();\n+        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, format);\n+        final List<String> list = new LinkedList<String>();\n         list.add(\"\\\\\");\n         printer.printRecord(list);\n         printer.close();\n         final String expected = \"\\\"\\\\\\\\\\\"\" + format.getRecordSeparator();\n         assertEquals(expected, sw.toString());\n-        String[] record0 = toFirstRecordValues(expected, format);\n+        final String[] record0 = toFirstRecordValues(expected, format);\n         assertArrayEquals(expectNulls(list.toArray(), format), record0);\n     }\n     \n     @Test\n     @Ignore\n     public void testJira135_part2() throws IOException {\n-        CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n-        StringWriter sw = new StringWriter();\n-        CSVPrinter printer = new CSVPrinter(sw, format);\n-        List<String> list = new LinkedList<String>();\n+        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, format);\n+        final List<String> list = new LinkedList<String>();\n         list.add(\"\\n\");\n         printer.printRecord(list);\n         printer.close();\n         final String expected = \"\\\"\\\\n\\\"\" + format.getRecordSeparator();\n         assertEquals(expected, sw.toString());\n-        String[] record0 = toFirstRecordValues(expected, format);\n+        final String[] record0 = toFirstRecordValues(expected, format);\n         assertArrayEquals(expectNulls(list.toArray(), format), record0);\n     }\n     \n     @Test\n     @Ignore\n     public void testJira135_part1() throws IOException {\n-        CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n-        StringWriter sw = new StringWriter();\n-        CSVPrinter printer = new CSVPrinter(sw, format);\n-        List<String> list = new LinkedList<String>();\n+        final CSVFormat format = CSVFormat.DEFAULT.withRecordSeparator('\\n').withQuote('\"').withEscape('\\\\');\n+        final StringWriter sw = new StringWriter();\n+        final CSVPrinter printer = new CSVPrinter(sw, format);\n+        final List<String> list = new LinkedList<String>();\n         list.add(\"\\\"\");\n         printer.printRecord(list);\n         printer.close();\n         final String expected = \"\\\"\\\\\\\"\\\"\" + format.getRecordSeparator();\n         assertEquals(expected, sw.toString());\n-        String[] record0 = toFirstRecordValues(expected, format);\n+        final String[] record0 = toFirstRecordValues(expected, format);\n         assertArrayEquals(expectNulls(list.toArray(), format), record0);\n     }\n     \n      * Converts an input CSV array into expected output values WRT NULLs. NULL strings are converted to null values\n      * because the parser will convert these strings to null.\n      */\n-    private <T> T[] expectNulls(T[] original, CSVFormat csvFormat) {\n-        T[] fixed = original.clone();\n+    private <T> T[] expectNulls(final T[] original, final CSVFormat csvFormat) {\n+        final T[] fixed = original.clone();\n         for (int i = 0; i < fixed.length; i++) {\n             if (ObjectUtils.equals(csvFormat.getNullString(), fixed[i])) {\n                 fixed[i] = null;\n         return fixed;\n     }\n \n-    private String[] toFirstRecordValues(final String expected, CSVFormat format) throws IOException {\n+    private String[] toFirstRecordValues(final String expected, final CSVFormat format) throws IOException {\n         return CSVParser.parse(expected, format).getRecords().get(0).values();\n     }\n \n--- a/src/test/java/org/apache/commons/csv/JiraCsv167Test.java\n+++ b/src/test/java/org/apache/commons/csv/JiraCsv167Test.java\n     @Test\n     public void parse() throws IOException {\n         final File csvData = new File(\"src/test/resources/csv-167/sample1.csv\");\n-        BufferedReader br = new BufferedReader(new FileReader(csvData));\n+        final BufferedReader br = new BufferedReader(new FileReader(csvData));\n         String s = null;\n         int totcomment = 0;\n         int totrecs = 0;", "timestamp": 1460941222, "metainfo": ""}