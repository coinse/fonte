{"sha": "0051a83dcdceb818562fd30d7f195b91a549985f", "log": "Fix Javadocs typos", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      * @param recordSeparator\n      *            the record separator to use for output.\n      *\n-     * @return A new CSVFormat that is equal to this but with the the specified output record separator\n+     * @return A new CSVFormat that is equal to this but with the specified output record separator\n      */\n     public CSVFormat withRecordSeparator(final char recordSeparator) {\n         return withRecordSeparator(String.valueOf(recordSeparator));\n      * @param recordSeparator\n      *            the record separator to use for output.\n      *\n-     * @return A new CSVFormat that is equal to this but with the the specified output record separator\n+     * @return A new CSVFormat that is equal to this but with the specified output record separator\n      * @throws IllegalArgumentException\n      *             if recordSeparator is none of CR, LF or CRLF\n      */\n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n      * @return the unescaped character (as an int) or {@link Constants#END_OF_STREAM} if char following the escape is\n      *      invalid.\n      * @throws IOException if there is a problem reading the stream or the end of stream is detected:\n-     *      the escape character is not allowed at end of strem\n+     *      the escape character is not allowed at end of stream\n      */\n     int readEscape() throws IOException {\n         // the escape char has just been read (normally a backslash)", "timestamp": 1508584402, "metainfo": ""}