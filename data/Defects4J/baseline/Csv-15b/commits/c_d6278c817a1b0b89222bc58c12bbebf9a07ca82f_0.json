{"sha": "d6278c817a1b0b89222bc58c12bbebf9a07ca82f", "log": "Sort static methods.", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n public final class CSVParser implements Iterable<CSVRecord>, Closeable {\n \n     /**\n+     * Creates a parser for the given {@link File}.\n+     *\n+     * <p><strong>Note:</strong> This method internally creates a FileReader using\n+     * {@link java.io.FileReader#FileReader(java.io.File)} which in turn relies on the default encoding of the JVM that\n+     * is executing the code. If this is insufficient create a URL to the file and use\n+     * {@link #parse(URL, Charset, CSVFormat)}</p>\n+     *\n+     * @param file\n+     *            a CSV file. Must not be null.\n+     * @param charset\n+     *            A charset\n+     * @param format\n+     *            the CSVFormat used for CSV parsing. Must not be null.\n+     * @return a new parser\n+     * @throws IllegalArgumentException\n+     *             If the parameters of the format are inconsistent or if either file or format are null.\n+     * @throws IOException\n+     *             If an I/O error occurs\n+     */\n+    public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException {\n+        Assertions.notNull(file, \"file\");\n+        Assertions.notNull(format, \"format\");\n+        return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);\n+    }\n+\n+    /**\n      * Creates a CSV parser using the given {@link CSVFormat}.\n      *\n      * <p>\n      */\n     public static CSVParser parse(Reader reader, final CSVFormat format) throws IOException {\n         return new CSVParser(reader, format);\n-    }\n-\n-    /**\n-     * Creates a parser for the given {@link File}.\n-     *\n-     * <p><strong>Note:</strong> This method internally creates a FileReader using\n-     * {@link java.io.FileReader#FileReader(java.io.File)} which in turn relies on the default encoding of the JVM that\n-     * is executing the code. If this is insufficient create a URL to the file and use\n-     * {@link #parse(URL, Charset, CSVFormat)}</p>\n-     *\n-     * @param file\n-     *            a CSV file. Must not be null.\n-     * @param charset\n-     *            A charset\n-     * @param format\n-     *            the CSVFormat used for CSV parsing. Must not be null.\n-     * @return a new parser\n-     * @throws IllegalArgumentException\n-     *             If the parameters of the format are inconsistent or if either file or format are null.\n-     * @throws IOException\n-     *             If an I/O error occurs\n-     */\n-    public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException {\n-        Assertions.notNull(file, \"file\");\n-        Assertions.notNull(format, \"format\");\n-        return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);\n     }\n \n     /**", "timestamp": 1469901775, "metainfo": ""}