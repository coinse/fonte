{"sha": "e41d4841ff196ec74e1e09f1eb85b7160099f22e", "log": "Add some tests from PR https://patch-diff.githubusercontent.com/raw/apache/commons-csv/pull/19. Closes #19.", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n \n package org.apache.commons.csv;\n \n+import static junit.framework.TestCase.assertNull;\n import static org.apache.commons.csv.CSVFormat.RFC4180;\n import static org.apache.commons.csv.Constants.CR;\n import static org.apache.commons.csv.Constants.CRLF;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNotSame;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n         assertTrue(formatWithFirstRecordAsHeader.getHeader().length == 0);\n     }\n \n+    @Test\n+    public void testToStringAndWithCommentMarkerTakingCharacter() {\n+\n+        CSVFormat.Predefined cSVFormat_Predefined = CSVFormat.Predefined.Default;\n+        CSVFormat cSVFormat = cSVFormat_Predefined.getFormat();\n+\n+        assertNull(cSVFormat.getEscapeCharacter());\n+        assertTrue(cSVFormat.isQuoteCharacterSet());\n+\n+        assertFalse(cSVFormat.getTrim());\n+        assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n+\n+        assertFalse(cSVFormat.getTrailingDelimiter());\n+        assertEquals(',', cSVFormat.getDelimiter());\n+\n+        assertFalse(cSVFormat.getIgnoreHeaderCase());\n+        assertEquals(\"\\r\\n\", cSVFormat.getRecordSeparator());\n+\n+        assertFalse(cSVFormat.isCommentMarkerSet());\n+        assertNull(cSVFormat.getCommentMarker());\n+\n+        assertFalse(cSVFormat.isNullStringSet());\n+        assertFalse(cSVFormat.getAllowMissingColumnNames());\n+\n+        assertFalse(cSVFormat.isEscapeCharacterSet());\n+        assertFalse(cSVFormat.getSkipHeaderRecord());\n+\n+        assertNull(cSVFormat.getNullString());\n+        assertNull(cSVFormat.getQuoteMode());\n+\n+        assertTrue(cSVFormat.getIgnoreEmptyLines());\n+        assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n+\n+        Character character = Character.valueOf('n');\n+\n+        CSVFormat cSVFormatTwo = cSVFormat.withCommentMarker(character);\n+\n+        assertNull(cSVFormat.getEscapeCharacter());\n+        assertTrue(cSVFormat.isQuoteCharacterSet());\n+\n+        assertFalse(cSVFormat.getTrim());\n+        assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n+\n+        assertFalse(cSVFormat.getTrailingDelimiter());\n+        assertEquals(',', cSVFormat.getDelimiter());\n+\n+        assertFalse(cSVFormat.getIgnoreHeaderCase());\n+        assertEquals(\"\\r\\n\", cSVFormat.getRecordSeparator());\n+\n+        assertFalse(cSVFormat.isCommentMarkerSet());\n+        assertNull(cSVFormat.getCommentMarker());\n+\n+        assertFalse(cSVFormat.isNullStringSet());\n+        assertFalse(cSVFormat.getAllowMissingColumnNames());\n+\n+        assertFalse(cSVFormat.isEscapeCharacterSet());\n+        assertFalse(cSVFormat.getSkipHeaderRecord());\n+\n+        assertNull(cSVFormat.getNullString());\n+        assertNull(cSVFormat.getQuoteMode());\n+\n+        assertTrue(cSVFormat.getIgnoreEmptyLines());\n+        assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n+\n+        assertFalse(cSVFormatTwo.isNullStringSet());\n+        assertFalse(cSVFormatTwo.getAllowMissingColumnNames());\n+\n+        assertEquals('\\\"', (char)cSVFormatTwo.getQuoteCharacter());\n+        assertNull(cSVFormatTwo.getNullString());\n+\n+        assertEquals(',', cSVFormatTwo.getDelimiter());\n+        assertFalse(cSVFormatTwo.getTrailingDelimiter());\n+\n+        assertTrue(cSVFormatTwo.isCommentMarkerSet());\n+        assertFalse(cSVFormatTwo.getIgnoreHeaderCase());\n+\n+        assertFalse(cSVFormatTwo.getTrim());\n+        assertNull(cSVFormatTwo.getEscapeCharacter());\n+\n+        assertTrue(cSVFormatTwo.isQuoteCharacterSet());\n+        assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces());\n+\n+        assertEquals(\"\\r\\n\", cSVFormatTwo.getRecordSeparator());\n+        assertNull(cSVFormatTwo.getQuoteMode());\n+\n+        assertEquals('n', (char)cSVFormatTwo.getCommentMarker());\n+        assertFalse(cSVFormatTwo.getSkipHeaderRecord());\n+\n+        assertFalse(cSVFormatTwo.isEscapeCharacterSet());\n+        assertTrue(cSVFormatTwo.getIgnoreEmptyLines());\n+\n+        assertNotSame(cSVFormat, cSVFormatTwo);\n+        assertNotSame(cSVFormatTwo, cSVFormat);\n+\n+        assertFalse(cSVFormatTwo.equals(cSVFormat));\n+\n+        assertNull(cSVFormat.getEscapeCharacter());\n+        assertTrue(cSVFormat.isQuoteCharacterSet());\n+\n+        assertFalse(cSVFormat.getTrim());\n+        assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n+\n+        assertFalse(cSVFormat.getTrailingDelimiter());\n+        assertEquals(',', cSVFormat.getDelimiter());\n+\n+        assertFalse(cSVFormat.getIgnoreHeaderCase());\n+        assertEquals(\"\\r\\n\", cSVFormat.getRecordSeparator());\n+\n+        assertFalse(cSVFormat.isCommentMarkerSet());\n+        assertNull(cSVFormat.getCommentMarker());\n+\n+        assertFalse(cSVFormat.isNullStringSet());\n+        assertFalse(cSVFormat.getAllowMissingColumnNames());\n+\n+        assertFalse(cSVFormat.isEscapeCharacterSet());\n+        assertFalse(cSVFormat.getSkipHeaderRecord());\n+\n+        assertNull(cSVFormat.getNullString());\n+        assertNull(cSVFormat.getQuoteMode());\n+\n+        assertTrue(cSVFormat.getIgnoreEmptyLines());\n+        assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n+\n+        assertFalse(cSVFormatTwo.isNullStringSet());\n+        assertFalse(cSVFormatTwo.getAllowMissingColumnNames());\n+\n+        assertEquals('\\\"', (char)cSVFormatTwo.getQuoteCharacter());\n+        assertNull(cSVFormatTwo.getNullString());\n+\n+        assertEquals(',', cSVFormatTwo.getDelimiter());\n+        assertFalse(cSVFormatTwo.getTrailingDelimiter());\n+\n+        assertTrue(cSVFormatTwo.isCommentMarkerSet());\n+        assertFalse(cSVFormatTwo.getIgnoreHeaderCase());\n+\n+        assertFalse(cSVFormatTwo.getTrim());\n+        assertNull(cSVFormatTwo.getEscapeCharacter());\n+\n+        assertTrue(cSVFormatTwo.isQuoteCharacterSet());\n+        assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces());\n+\n+        assertEquals(\"\\r\\n\", cSVFormatTwo.getRecordSeparator());\n+        assertNull(cSVFormatTwo.getQuoteMode());\n+\n+        assertEquals('n', (char)cSVFormatTwo.getCommentMarker());\n+        assertFalse(cSVFormatTwo.getSkipHeaderRecord());\n+\n+        assertFalse(cSVFormatTwo.isEscapeCharacterSet());\n+        assertTrue(cSVFormatTwo.getIgnoreEmptyLines());\n+\n+        assertNotSame(cSVFormat, cSVFormatTwo);\n+        assertNotSame(cSVFormatTwo, cSVFormat);\n+\n+        assertFalse(cSVFormat.equals(cSVFormatTwo));\n+\n+        assertFalse(cSVFormatTwo.equals(cSVFormat));\n+        assertEquals(\"Delimiter=<,> QuoteChar=<\\\"> CommentStart=<n> \" +\n+                        \"RecordSeparator=<\\r\\n> EmptyLines:ignored SkipHeaderRecord:false\"\n+                , cSVFormatTwo.toString());\n+\n+    }\n+\n+\n+    @Test\n+    public void testNewFormat() {\n+\n+        CSVFormat cSVFormat = CSVFormat.newFormat('X');\n+\n+        assertFalse(cSVFormat.getSkipHeaderRecord());\n+        assertFalse(cSVFormat.isEscapeCharacterSet());\n+\n+        assertNull(cSVFormat.getRecordSeparator());\n+        assertNull(cSVFormat.getQuoteMode());\n+\n+        assertNull(cSVFormat.getCommentMarker());\n+        assertFalse(cSVFormat.getIgnoreHeaderCase());\n+\n+        assertFalse(cSVFormat.getAllowMissingColumnNames());\n+        assertFalse(cSVFormat.getTrim());\n+\n+        assertFalse(cSVFormat.isNullStringSet());\n+        assertNull(cSVFormat.getEscapeCharacter());\n+\n+        assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n+        assertFalse(cSVFormat.getTrailingDelimiter());\n+\n+        assertEquals('X', cSVFormat.getDelimiter());\n+        assertNull(cSVFormat.getNullString());\n+\n+        assertFalse(cSVFormat.isQuoteCharacterSet());\n+        assertFalse(cSVFormat.isCommentMarkerSet());\n+\n+        assertNull(cSVFormat.getQuoteCharacter());\n+        assertFalse(cSVFormat.getIgnoreEmptyLines());\n+\n+        assertFalse(cSVFormat.getSkipHeaderRecord());\n+        assertFalse(cSVFormat.isEscapeCharacterSet());\n+\n+        assertNull(cSVFormat.getRecordSeparator());\n+        assertNull(cSVFormat.getQuoteMode());\n+\n+        assertNull(cSVFormat.getCommentMarker());\n+        assertFalse(cSVFormat.getIgnoreHeaderCase());\n+\n+        assertFalse(cSVFormat.getAllowMissingColumnNames());\n+        assertFalse(cSVFormat.getTrim());\n+\n+        assertFalse(cSVFormat.isNullStringSet());\n+        assertNull(cSVFormat.getEscapeCharacter());\n+\n+        assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n+        assertFalse(cSVFormat.getTrailingDelimiter());\n+\n+        assertEquals('X', cSVFormat.getDelimiter());\n+        assertNull(cSVFormat.getNullString());\n+\n+        assertFalse(cSVFormat.isQuoteCharacterSet());\n+        assertFalse(cSVFormat.isCommentMarkerSet());\n+\n+        assertNull(cSVFormat.getQuoteCharacter());\n+        assertFalse(cSVFormat.getIgnoreEmptyLines());\n+\n+    }\n+\n+\n+    @Test\n+    public void testWithHeaderComments() {\n+\n+        CSVFormat cSVFormat = CSVFormat.DEFAULT;\n+\n+        assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n+        assertFalse(cSVFormat.isCommentMarkerSet());\n+\n+        assertFalse(cSVFormat.isEscapeCharacterSet());\n+        assertTrue(cSVFormat.isQuoteCharacterSet());\n+\n+        assertFalse(cSVFormat.getSkipHeaderRecord());\n+        assertNull(cSVFormat.getQuoteMode());\n+\n+        assertEquals(',', cSVFormat.getDelimiter());\n+        assertTrue(cSVFormat.getIgnoreEmptyLines());\n+\n+        assertFalse(cSVFormat.getIgnoreHeaderCase());\n+        assertNull(cSVFormat.getCommentMarker());\n+\n+        assertEquals(\"\\r\\n\", cSVFormat.getRecordSeparator());\n+        assertFalse(cSVFormat.getTrailingDelimiter());\n+\n+        assertFalse(cSVFormat.getAllowMissingColumnNames());\n+        assertFalse(cSVFormat.getTrim());\n+\n+        assertFalse(cSVFormat.isNullStringSet());\n+        assertNull(cSVFormat.getNullString());\n+\n+        assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n+        assertNull(cSVFormat.getEscapeCharacter());\n+\n+        Object[] objectArray = new Object[8];\n+        CSVFormat cSVFormatTwo = cSVFormat.withHeaderComments(objectArray);\n+\n+        assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n+        assertFalse(cSVFormat.isCommentMarkerSet());\n+\n+        assertFalse(cSVFormat.isEscapeCharacterSet());\n+        assertTrue(cSVFormat.isQuoteCharacterSet());\n+\n+        assertFalse(cSVFormat.getSkipHeaderRecord());\n+        assertNull(cSVFormat.getQuoteMode());\n+\n+        assertEquals(',', cSVFormat.getDelimiter());\n+        assertTrue(cSVFormat.getIgnoreEmptyLines());\n+\n+        assertFalse(cSVFormat.getIgnoreHeaderCase());\n+        assertNull(cSVFormat.getCommentMarker());\n+\n+        assertEquals(\"\\r\\n\", cSVFormat.getRecordSeparator());\n+        assertFalse(cSVFormat.getTrailingDelimiter());\n+\n+        assertFalse(cSVFormat.getAllowMissingColumnNames());\n+        assertFalse(cSVFormat.getTrim());\n+\n+        assertFalse(cSVFormat.isNullStringSet());\n+        assertNull(cSVFormat.getNullString());\n+\n+        assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n+        assertNull(cSVFormat.getEscapeCharacter());\n+\n+        assertFalse(cSVFormatTwo.getIgnoreHeaderCase());\n+        assertNull(cSVFormatTwo.getQuoteMode());\n+\n+        assertTrue(cSVFormatTwo.getIgnoreEmptyLines());\n+        assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces());\n+\n+        assertNull(cSVFormatTwo.getEscapeCharacter());\n+        assertFalse(cSVFormatTwo.getTrim());\n+\n+        assertFalse(cSVFormatTwo.isEscapeCharacterSet());\n+        assertTrue(cSVFormatTwo.isQuoteCharacterSet());\n+\n+        assertFalse(cSVFormatTwo.getSkipHeaderRecord());\n+        assertEquals('\\\"', (char)cSVFormatTwo.getQuoteCharacter());\n+\n+        assertFalse(cSVFormatTwo.getAllowMissingColumnNames());\n+        assertNull(cSVFormatTwo.getNullString());\n+\n+        assertFalse(cSVFormatTwo.isNullStringSet());\n+        assertFalse(cSVFormatTwo.getTrailingDelimiter());\n+\n+        assertEquals(\"\\r\\n\", cSVFormatTwo.getRecordSeparator());\n+        assertEquals(',', cSVFormatTwo.getDelimiter());\n+\n+        assertNull(cSVFormatTwo.getCommentMarker());\n+        assertFalse(cSVFormatTwo.isCommentMarkerSet());\n+\n+        assertNotSame(cSVFormat, cSVFormatTwo);\n+        assertNotSame(cSVFormatTwo, cSVFormat);\n+\n+        assertTrue(cSVFormatTwo.equals(cSVFormat));\n+\n+        String string = cSVFormatTwo.format(objectArray);\n+\n+        assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n+        assertFalse(cSVFormat.isCommentMarkerSet());\n+\n+        assertFalse(cSVFormat.isEscapeCharacterSet());\n+        assertTrue(cSVFormat.isQuoteCharacterSet());\n+\n+        assertFalse(cSVFormat.getSkipHeaderRecord());\n+        assertNull(cSVFormat.getQuoteMode());\n+\n+        assertEquals(',', cSVFormat.getDelimiter());\n+        assertTrue(cSVFormat.getIgnoreEmptyLines());\n+\n+        assertFalse(cSVFormat.getIgnoreHeaderCase());\n+        assertNull(cSVFormat.getCommentMarker());\n+\n+        assertEquals(\"\\r\\n\", cSVFormat.getRecordSeparator());\n+        assertFalse(cSVFormat.getTrailingDelimiter());\n+\n+        assertFalse(cSVFormat.getAllowMissingColumnNames());\n+        assertFalse(cSVFormat.getTrim());\n+\n+        assertFalse(cSVFormat.isNullStringSet());\n+        assertNull(cSVFormat.getNullString());\n+\n+        assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n+        assertNull(cSVFormat.getEscapeCharacter());\n+\n+        assertFalse(cSVFormatTwo.getIgnoreHeaderCase());\n+        assertNull(cSVFormatTwo.getQuoteMode());\n+\n+        assertTrue(cSVFormatTwo.getIgnoreEmptyLines());\n+        assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces());\n+\n+        assertNull(cSVFormatTwo.getEscapeCharacter());\n+        assertFalse(cSVFormatTwo.getTrim());\n+\n+        assertFalse(cSVFormatTwo.isEscapeCharacterSet());\n+        assertTrue(cSVFormatTwo.isQuoteCharacterSet());\n+\n+        assertFalse(cSVFormatTwo.getSkipHeaderRecord());\n+        assertEquals('\\\"', (char)cSVFormatTwo.getQuoteCharacter());\n+\n+        assertFalse(cSVFormatTwo.getAllowMissingColumnNames());\n+        assertNull(cSVFormatTwo.getNullString());\n+\n+        assertFalse(cSVFormatTwo.isNullStringSet());\n+        assertFalse(cSVFormatTwo.getTrailingDelimiter());\n+\n+        assertEquals(\"\\r\\n\", cSVFormatTwo.getRecordSeparator());\n+        assertEquals(',', cSVFormatTwo.getDelimiter());\n+\n+        assertNull(cSVFormatTwo.getCommentMarker());\n+        assertFalse(cSVFormatTwo.isCommentMarkerSet());\n+\n+        assertNotSame(cSVFormat, cSVFormatTwo);\n+        assertNotSame(cSVFormatTwo, cSVFormat);\n+\n+        assertNotNull(string);\n+        assertTrue(cSVFormat.equals(cSVFormatTwo));\n+\n+        assertTrue(cSVFormatTwo.equals(cSVFormat));\n+        assertEquals(\",,,,,,,\", string);\n+\n+    }\n+\n+\n+    @Test  //I assume this to be a defect.\n+    public void testFormatThrowsNullPointerException() {\n+\n+        CSVFormat cSVFormat = CSVFormat.MYSQL;\n+\n+        try {\n+            cSVFormat.format(null);\n+            fail(\"Expecting exception: NullPointerException\");\n+        } catch(NullPointerException e) {\n+            assertEquals(CSVFormat.class.getName(), e.getStackTrace()[0].getClassName());\n+        }\n+\n+    }\n+\n+\n+    @Test\n+    public void testEqualsOne() {\n+\n+        CSVFormat cSVFormatOne = CSVFormat.INFORMIX_UNLOAD;\n+        CSVFormat cSVFormatTwo = CSVFormat.MYSQL;\n+\n+\n+        assertEquals('\\\\', (char)cSVFormatOne.getEscapeCharacter());\n+        assertNull(cSVFormatOne.getQuoteMode());\n+\n+        assertTrue(cSVFormatOne.getIgnoreEmptyLines());\n+        assertFalse(cSVFormatOne.getSkipHeaderRecord());\n+\n+        assertFalse(cSVFormatOne.getIgnoreHeaderCase());\n+        assertNull(cSVFormatOne.getCommentMarker());\n+\n+        assertFalse(cSVFormatOne.isCommentMarkerSet());\n+        assertTrue(cSVFormatOne.isQuoteCharacterSet());\n+\n+        assertEquals('|', cSVFormatOne.getDelimiter());\n+        assertFalse(cSVFormatOne.getAllowMissingColumnNames());\n+\n+        assertTrue(cSVFormatOne.isEscapeCharacterSet());\n+        assertEquals(\"\\n\", cSVFormatOne.getRecordSeparator());\n+\n+        assertEquals('\\\"', (char)cSVFormatOne.getQuoteCharacter());\n+        assertFalse(cSVFormatOne.getTrailingDelimiter());\n+\n+        assertFalse(cSVFormatOne.getTrim());\n+        assertFalse(cSVFormatOne.isNullStringSet());\n+\n+        assertNull(cSVFormatOne.getNullString());\n+        assertFalse(cSVFormatOne.getIgnoreSurroundingSpaces());\n+\n+\n+        assertTrue(cSVFormatTwo.isEscapeCharacterSet());\n+        assertNull(cSVFormatTwo.getQuoteCharacter());\n+\n+        assertFalse(cSVFormatTwo.getAllowMissingColumnNames());\n+        assertEquals(QuoteMode.ALL_NON_NULL, cSVFormatTwo.getQuoteMode());\n+\n+        assertEquals('\\t', cSVFormatTwo.getDelimiter());\n+        assertEquals(\"\\n\", cSVFormatTwo.getRecordSeparator());\n+\n+        assertFalse(cSVFormatTwo.isQuoteCharacterSet());\n+        assertTrue(cSVFormatTwo.isNullStringSet());\n+\n+        assertEquals('\\\\', (char)cSVFormatTwo.getEscapeCharacter());\n+        assertFalse(cSVFormatTwo.getIgnoreHeaderCase());\n+\n+        assertFalse(cSVFormatTwo.getTrim());\n+        assertFalse(cSVFormatTwo.getIgnoreEmptyLines());\n+\n+        assertEquals(\"\\\\N\", cSVFormatTwo.getNullString());\n+        assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces());\n+\n+        assertFalse(cSVFormatTwo.getTrailingDelimiter());\n+        assertFalse(cSVFormatTwo.getSkipHeaderRecord());\n+\n+        assertNull(cSVFormatTwo.getCommentMarker());\n+        assertFalse(cSVFormatTwo.isCommentMarkerSet());\n+\n+        assertNotSame(cSVFormatTwo, cSVFormatOne);\n+        assertFalse(cSVFormatTwo.equals(cSVFormatOne));\n+\n+        assertEquals('\\\\', (char)cSVFormatOne.getEscapeCharacter());\n+        assertNull(cSVFormatOne.getQuoteMode());\n+\n+        assertTrue(cSVFormatOne.getIgnoreEmptyLines());\n+        assertFalse(cSVFormatOne.getSkipHeaderRecord());\n+\n+        assertFalse(cSVFormatOne.getIgnoreHeaderCase());\n+        assertNull(cSVFormatOne.getCommentMarker());\n+\n+        assertFalse(cSVFormatOne.isCommentMarkerSet());\n+        assertTrue(cSVFormatOne.isQuoteCharacterSet());\n+\n+        assertEquals('|', cSVFormatOne.getDelimiter());\n+        assertFalse(cSVFormatOne.getAllowMissingColumnNames());\n+\n+        assertTrue(cSVFormatOne.isEscapeCharacterSet());\n+        assertEquals(\"\\n\", cSVFormatOne.getRecordSeparator());\n+\n+        assertEquals('\\\"', (char)cSVFormatOne.getQuoteCharacter());\n+        assertFalse(cSVFormatOne.getTrailingDelimiter());\n+\n+        assertFalse(cSVFormatOne.getTrim());\n+        assertFalse(cSVFormatOne.isNullStringSet());\n+\n+        assertNull(cSVFormatOne.getNullString());\n+        assertFalse(cSVFormatOne.getIgnoreSurroundingSpaces());\n+\n+        assertTrue(cSVFormatTwo.isEscapeCharacterSet());\n+        assertNull(cSVFormatTwo.getQuoteCharacter());\n+\n+        assertFalse(cSVFormatTwo.getAllowMissingColumnNames());\n+        assertEquals(QuoteMode.ALL_NON_NULL, cSVFormatTwo.getQuoteMode());\n+\n+        assertEquals('\\t', cSVFormatTwo.getDelimiter());\n+        assertEquals(\"\\n\", cSVFormatTwo.getRecordSeparator());\n+\n+        assertFalse(cSVFormatTwo.isQuoteCharacterSet());\n+        assertTrue(cSVFormatTwo.isNullStringSet());\n+\n+        assertEquals('\\\\', (char)cSVFormatTwo.getEscapeCharacter());\n+        assertFalse(cSVFormatTwo.getIgnoreHeaderCase());\n+\n+        assertFalse(cSVFormatTwo.getTrim());\n+        assertFalse(cSVFormatTwo.getIgnoreEmptyLines());\n+\n+        assertEquals(\"\\\\N\", cSVFormatTwo.getNullString());\n+        assertFalse(cSVFormatTwo.getIgnoreSurroundingSpaces());\n+\n+        assertFalse(cSVFormatTwo.getTrailingDelimiter());\n+        assertFalse(cSVFormatTwo.getSkipHeaderRecord());\n+\n+        assertNull(cSVFormatTwo.getCommentMarker());\n+        assertFalse(cSVFormatTwo.isCommentMarkerSet());\n+\n+        assertNotSame(cSVFormatOne, cSVFormatTwo);\n+        assertNotSame(cSVFormatTwo, cSVFormatOne);\n+\n+        assertFalse(cSVFormatOne.equals(cSVFormatTwo));\n+        assertFalse(cSVFormatTwo.equals(cSVFormatOne));\n+\n+        assertFalse(cSVFormatTwo.equals(cSVFormatOne));\n+\n+    }\n+\n+\n+    @Test\n+    public void testEqualsWithNull() {\n+\n+        CSVFormat cSVFormat = CSVFormat.POSTGRESQL_TEXT;\n+\n+        assertEquals('\\\"', (char)cSVFormat.getEscapeCharacter());\n+        assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n+\n+        assertFalse(cSVFormat.getTrailingDelimiter());\n+        assertFalse(cSVFormat.getTrim());\n+\n+        assertTrue(cSVFormat.isQuoteCharacterSet());\n+        assertEquals(\"\\\\N\", cSVFormat.getNullString());\n+\n+        assertFalse(cSVFormat.getIgnoreHeaderCase());\n+        assertTrue(cSVFormat.isEscapeCharacterSet());\n+\n+        assertFalse(cSVFormat.isCommentMarkerSet());\n+        assertNull(cSVFormat.getCommentMarker());\n+\n+        assertFalse(cSVFormat.getAllowMissingColumnNames());\n+        assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat.getQuoteMode());\n+\n+        assertEquals('\\t', cSVFormat.getDelimiter());\n+        assertFalse(cSVFormat.getSkipHeaderRecord());\n+\n+        assertEquals(\"\\n\", cSVFormat.getRecordSeparator());\n+        assertFalse(cSVFormat.getIgnoreEmptyLines());\n+\n+        assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n+        assertTrue(cSVFormat.isNullStringSet());\n+\n+        assertEquals('\\\"', (char)cSVFormat.getEscapeCharacter());\n+        assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n+\n+        assertFalse(cSVFormat.getTrailingDelimiter());\n+        assertFalse(cSVFormat.getTrim());\n+\n+        assertTrue(cSVFormat.isQuoteCharacterSet());\n+        assertEquals(\"\\\\N\", cSVFormat.getNullString());\n+\n+        assertFalse(cSVFormat.getIgnoreHeaderCase());\n+        assertTrue(cSVFormat.isEscapeCharacterSet());\n+\n+        assertFalse(cSVFormat.isCommentMarkerSet());\n+        assertNull(cSVFormat.getCommentMarker());\n+\n+        assertFalse(cSVFormat.getAllowMissingColumnNames());\n+        assertEquals(QuoteMode.ALL_NON_NULL, cSVFormat.getQuoteMode());\n+\n+        assertEquals('\\t', cSVFormat.getDelimiter());\n+        assertFalse(cSVFormat.getSkipHeaderRecord());\n+\n+        assertEquals(\"\\n\", cSVFormat.getRecordSeparator());\n+        assertFalse(cSVFormat.getIgnoreEmptyLines());\n+\n+        assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n+        assertTrue(cSVFormat.isNullStringSet());\n+\n+        assertFalse(cSVFormat.equals( null));\n+\n+    }\n+\n+\n+    @Test\n+    public void testToString() {\n+\n+        CSVFormat cSVFormat = CSVFormat.POSTGRESQL_TEXT;\n+        String string = cSVFormat.INFORMIX_UNLOAD.toString();\n+\n+        assertEquals(\"Delimiter=<|> Escape=<\\\\> QuoteChar=<\\\"> RecordSeparator=<\\n> EmptyLines:ignored SkipHeaderRecord:false\", string);\n+\n+    }\n+\n+\n+    @Test\n+    public void testHashCodeAndWithIgnoreHeaderCase() {\n+\n+        CSVFormat cSVFormat = CSVFormat.INFORMIX_UNLOAD_CSV;\n+        CSVFormat cSVFormatTwo = cSVFormat.withIgnoreHeaderCase();\n+        cSVFormatTwo.hashCode();\n+\n+        assertTrue(cSVFormatTwo.getIgnoreHeaderCase());\n+        assertFalse(cSVFormatTwo.getTrailingDelimiter());\n+\n+        assertTrue(cSVFormatTwo.equals(cSVFormat));\n+        assertFalse(cSVFormatTwo.getAllowMissingColumnNames());\n+\n+        assertFalse(cSVFormatTwo.getTrim());\n+\n+    }\n+\n     public enum Header {\n         Name, Email, Phone\n     }\n \n     public enum EmptyEnum {\n     }\n+\n }\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n \n+import java.io.CharArrayWriter;\n import java.io.File;\n import java.io.IOException;\n import java.io.StringReader;\n import java.io.StringWriter;\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n+import java.sql.BatchUpdateException;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.ResultSet;\n import java.sql.Statement;\n import java.util.Arrays;\n import java.util.Date;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Objects;\n import java.util.Random;\n+import java.util.Vector;\n \n import org.apache.commons.io.FileUtils;\n+import org.h2.value.Value;\n+import org.h2.value.ValueArray;\n import org.junit.Assert;\n import org.junit.Ignore;\n import org.junit.Test;\n     private String[] toFirstRecordValues(final String expected, final CSVFormat format) throws IOException {\n         return CSVParser.parse(expected, format).getRecords().get(0).values();\n     }\n+\n+    @Test\n+    public void testPrintRecordsWithResultSetOneRow() throws IOException, SQLException {\n+        try (CSVPrinter csvPrinter = CSVFormat.MYSQL.printer()) {\n+            Value[] valueArray = new Value[0];\n+            ValueArray valueArrayTwo = ValueArray.get(valueArray);\n+            try (ResultSet resultSet = valueArrayTwo.getResultSet()) {\n+                csvPrinter.printRecords(resultSet);\n+                assertEquals(0, resultSet.getRow());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void testPrintRecordsWithObjectArray() throws IOException {\n+        CharArrayWriter charArrayWriter = new CharArrayWriter(0);\n+        try (CSVPrinter csvPrinter = CSVFormat.INFORMIX_UNLOAD.print(charArrayWriter)) {\n+            HashSet<BatchUpdateException> hashSet = new HashSet<>();\n+            Object[] objectArray = new Object[6];\n+            objectArray[3] = hashSet;\n+            csvPrinter.printRecords(objectArray);\n+        }\n+        assertEquals(6, charArrayWriter.size());\n+        assertEquals(\"\\n\\n\\n\\n\\n\\n\", charArrayWriter.toString());\n+    }\n+\n+\n+    @Test\n+    public void testPrintRecordsWithEmptyVector() throws IOException {\n+        try (CSVPrinter csvPrinter = CSVFormat.POSTGRESQL_TEXT.printer()) {\n+            Vector<CSVFormatTest.EmptyEnum> vector = new Vector<>();\n+            int expectedCapacity = 23;\n+            vector.setSize(expectedCapacity);\n+            csvPrinter.printRecords(vector);\n+            assertEquals(expectedCapacity, vector.capacity());\n+        }\n+    }\n+\n }", "timestamp": 1499718452, "metainfo": ""}