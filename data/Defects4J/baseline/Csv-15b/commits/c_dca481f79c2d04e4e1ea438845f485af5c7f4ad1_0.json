{"sha": "dca481f79c2d04e4e1ea438845f485af5c7f4ad1", "log": "Sort members in AB order.  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatBuilderTest.java\n     }\n \n     @Test\n+    public void testCommentStart() {\n+        assertEquals('?', builder.withCommentStart('?').build().getCommentStart().charValue());\n+    }\n+    \n+    @Test\n+    public void testCopiedFormatIsEqualToOriginal() {\n+        final CSVFormat copyOfRCF4180 = CSVFormat.newBuilder(RFC4180).build();\n+        assertEquals(RFC4180, copyOfRCF4180);\n+    }\n+\n+    @Test\n+    public void testCopiedFormatWithChanges() {\n+        final CSVFormat newFormat = CSVFormat.newBuilder(RFC4180).withDelimiter('!').build();\n+        assertTrue(newFormat.getDelimiter() != RFC4180.getDelimiter());\n+    }\n+    \n+    @Test\n     public void testDelimiter() {\n         assertEquals('?', builder.withDelimiter('?').build().getDelimiter());\n     }\n     \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testNewFormatLFThrowsException() {\n-        CSVFormat.newBuilder(LF);\n+    @Test(expected = IllegalStateException.class)\n+    public void testDelimiterSameAsCommentStartThrowsException() {\n+        builder.withDelimiter('!').withCommentStart('!').build();\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testNewFormatCRThrowsException() {\n-        CSVFormat.newBuilder(CR);\n-    }\n-    \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testWithDelimiterLFThrowsException() {\n-        builder.withDelimiter(LF).build();\n-    }\n-    \n     @Test(expected = IllegalStateException.class)\n     public void testDelimiterSameAsEscapeThrowsException() {\n         builder.withDelimiter('!').withEscape('!').build();\n     }\n \n-    @Test(expected = IllegalStateException.class)\n-    public void testDelimiterSameAsCommentStartThrowsException() {\n-        builder.withDelimiter('!').withCommentStart('!').build();\n-    }\n-\n-    @Test\n-    public void testQuoteChar() {\n-        assertEquals('?', builder.withQuoteChar('?').build().getQuoteChar().charValue());\n-    }\n-    \n-    @Test(expected = IllegalStateException.class)\n-    public void testQuoteCharSameAsCommentStartThrowsException() {\n-        builder.withQuoteChar('!').withCommentStart('!').build();\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType() {\n-        // Cannot assume that callers won't use different Character objects\n-        builder.withQuoteChar(new Character('!')).withCommentStart('!').build();\n-    }\n-\n-    @Test(expected = IllegalStateException.class)\n-    public void testQuoteCharSameAsDelimiterThrowsException() {\n-        builder.withQuoteChar('!').withDelimiter('!').build();\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testWithQuoteLFThrowsException() {\n-        builder.withQuoteChar(LF).build();\n-    }\n-\n-    @Test\n-    public void testQuotePolicy() {\n-        assertEquals(Quote.ALL, builder.withQuotePolicy(Quote.ALL).build().getQuotePolicy());\n-    }\n-    \n-    @Test(expected = IllegalStateException.class)\n-    public void testQuotePolicyNoneWithoutEscapeThrowsException() {\n-        CSVFormat.newBuilder('!').withQuotePolicy(Quote.NONE).build();\n-    }\n-\n-    @Test\n-    public void testCommentStart() {\n-        assertEquals('?', builder.withCommentStart('?').build().getCommentStart().charValue());\n-    }\n-    \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testWithCommentStartCRThrowsException() {\n-        builder.withCommentStart(CR).build();\n-    }\n-\n-    @Test\n-    public void testRecoardSeparator() {\n-        assertEquals(\"?\", builder.withRecordSeparator(\"?\").build().getRecordSeparator());\n-    }\n-    \n     @Test\n     public void testEscape() {\n         assertEquals('?', builder.withEscape('?').build().getEscape().charValue());\n     }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testWithEscapeCRThrowsExceptions() {\n-        builder.withEscape(CR).build();\n-    }\n-\n+    \n     @Test(expected = IllegalStateException.class)\n     public void testEscapeSameAsCommentStartThrowsException() {\n         builder.withEscape('!').withCommentStart('!').build();\n     }\n \n     @Test\n+    public void testHeaderReferenceCannotEscape() {\n+        final String[] header = new String[]{\"one\", \"tow\", \"three\"};\n+        builder.withHeader(header);\n+        \n+        final CSVFormat firstFormat = builder.build();\n+        final CSVFormat secondFormat = builder.build();\n+        assertNotSame(header, firstFormat.getHeader());\n+        assertNotSame(firstFormat, secondFormat.getHeader());\n+    }\n+\n+    @Test\n+    public void testIgnoreEmptyLines() {\n+        assertFalse(builder.withIgnoreEmptyLines(false).build().getIgnoreEmptyLines());\n+    }\n+\n+    @Test\n     public void testIgnoreSurroundingSpaces() {\n         assertFalse(builder.withIgnoreSurroundingSpaces(false).build().getIgnoreSurroundingSpaces());\n     }\n     \n-    @Test\n-    public void testIgnoreEmptyLines() {\n-        assertFalse(builder.withIgnoreEmptyLines(false).build().getIgnoreEmptyLines());\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNewFormatCRThrowsException() {\n+        CSVFormat.newBuilder(CR);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNewFormatLFThrowsException() {\n+        CSVFormat.newBuilder(LF);\n     }\n     \n     @Test\n-    public void testCopiedFormatIsEqualToOriginal() {\n-        final CSVFormat copyOfRCF4180 = CSVFormat.newBuilder(RFC4180).build();\n-        assertEquals(RFC4180, copyOfRCF4180);\n+    public void testQuoteChar() {\n+        assertEquals('?', builder.withQuoteChar('?').build().getQuoteChar().charValue());\n     }\n \n+    @Test(expected = IllegalStateException.class)\n+    public void testQuoteCharSameAsCommentStartThrowsException() {\n+        builder.withQuoteChar('!').withCommentStart('!').build();\n+    }\n+    \n+    @Test(expected = IllegalStateException.class)\n+    public void testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType() {\n+        // Cannot assume that callers won't use different Character objects\n+        builder.withQuoteChar(new Character('!')).withCommentStart('!').build();\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testQuoteCharSameAsDelimiterThrowsException() {\n+        builder.withQuoteChar('!').withDelimiter('!').build();\n+    }\n+\n+    @Test\n+    public void testQuotePolicy() {\n+        assertEquals(Quote.ALL, builder.withQuotePolicy(Quote.ALL).build().getQuotePolicy());\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void testQuotePolicyNoneWithoutEscapeThrowsException() {\n+        CSVFormat.newBuilder('!').withQuotePolicy(Quote.NONE).build();\n+    }\n+\n+    @Test\n+    public void testRecoardSeparator() {\n+        assertEquals(\"?\", builder.withRecordSeparator(\"?\").build().getRecordSeparator());\n+    }\n+    \n     @Test\n     public void testRFC4180() {\n         assertEquals(null, RFC4180.getCommentStart());\n         assertEquals(null, RFC4180.getQuotePolicy());\n         assertEquals(\"\\r\\n\", RFC4180.getRecordSeparator());\n     }\n+    \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithCommentStartCRThrowsException() {\n+        builder.withCommentStart(CR).build();\n+    }\n \n-    @Test\n-    public void testCopiedFormatWithChanges() {\n-        final CSVFormat newFormat = CSVFormat.newBuilder(RFC4180).withDelimiter('!').build();\n-        assertTrue(newFormat.getDelimiter() != RFC4180.getDelimiter());\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithDelimiterLFThrowsException() {\n+        builder.withDelimiter(LF).build();\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithEscapeCRThrowsExceptions() {\n+        builder.withEscape(CR).build();\n     }\n     \n-    @Test\n-    public void testHeaderReferenceCannotEscape() {\n-        final String[] header = new String[]{\"one\", \"tow\", \"three\"};\n-        builder.withHeader(header);\n-        \n-        final CSVFormat firstFormat = builder.build();\n-        final CSVFormat secondFormat = builder.build();\n-        assertNotSame(header, firstFormat.getHeader());\n-        assertNotSame(firstFormat, secondFormat.getHeader());\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testWithQuoteLFThrowsException() {\n+        builder.withQuoteChar(LF).build();\n     }\n }", "timestamp": 1363757067, "metainfo": ""}