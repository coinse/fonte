{"sha": "0c216e783cbff346c820cabb83486e4401b2c0a2", "log": "Use final.", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n                       final boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\n                       final Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\n                       final boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim,\n-                      final boolean trailingDelimiter, boolean autoFlush) {\n+                      final boolean trailingDelimiter, final boolean autoFlush) {\n         this.delimiter = delimiter;\n         this.quoteCharacter = quoteChar;\n         this.quoteMode = quoteMode;\n      * @since 1.5\n      */\n     @SuppressWarnings(\"resource\")\n-    public CSVPrinter print(final File out, Charset charset) throws IOException {\n+    public CSVPrinter print(final File out, final Charset charset) throws IOException {\n         // The writer will be closed when close() is called.\n         return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);\n     }\n      *             thrown if the optional header cannot be printed.\n      * @since 1.5\n      */\n-    public CSVPrinter print(final Path out, Charset charset) throws IOException {\n+    public CSVPrinter print(final Path out, final Charset charset) throws IOException {\n         return print(Files.newBufferedWriter(out, charset));\n     }\n \n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      *             If there is a problem reading the header or skipping the first record\n      * @since 1.5\n      */\n-    public static CSVParser parse(Reader reader, final CSVFormat format) throws IOException {\n+    public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException {\n         return new CSVParser(reader, format);\n     }\n \n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n      *             If an I/O error occurs\n      * @since 1.6\n      */\n-    public void close(boolean flush) throws IOException {\n+    public void close(final boolean flush) throws IOException {\n         if (flush || format.getAutoFlush()) {\n             if (out instanceof Flushable) {\n                 ((Flushable) out).flush();\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n     @Test\n     public void testToStringAndWithCommentMarkerTakingCharacter() {\n \n-        CSVFormat.Predefined cSVFormat_Predefined = CSVFormat.Predefined.Default;\n-        CSVFormat cSVFormat = cSVFormat_Predefined.getFormat();\n+        final CSVFormat.Predefined cSVFormat_Predefined = CSVFormat.Predefined.Default;\n+        final CSVFormat cSVFormat = cSVFormat_Predefined.getFormat();\n \n         assertNull(cSVFormat.getEscapeCharacter());\n         assertTrue(cSVFormat.isQuoteCharacterSet());\n         assertTrue(cSVFormat.getIgnoreEmptyLines());\n         assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n \n-        Character character = Character.valueOf('n');\n-\n-        CSVFormat cSVFormatTwo = cSVFormat.withCommentMarker(character);\n+        final Character character = Character.valueOf('n');\n+\n+        final CSVFormat cSVFormatTwo = cSVFormat.withCommentMarker(character);\n \n         assertNull(cSVFormat.getEscapeCharacter());\n         assertTrue(cSVFormat.isQuoteCharacterSet());\n     @Test\n     public void testNewFormat() {\n \n-        CSVFormat cSVFormat = CSVFormat.newFormat('X');\n+        final CSVFormat cSVFormat = CSVFormat.newFormat('X');\n \n         assertFalse(cSVFormat.getSkipHeaderRecord());\n         assertFalse(cSVFormat.isEscapeCharacterSet());\n     @Test\n     public void testWithHeaderComments() {\n \n-        CSVFormat cSVFormat = CSVFormat.DEFAULT;\n+        final CSVFormat cSVFormat = CSVFormat.DEFAULT;\n \n         assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n         assertFalse(cSVFormat.isCommentMarkerSet());\n         assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n         assertNull(cSVFormat.getEscapeCharacter());\n \n-        Object[] objectArray = new Object[8];\n-        CSVFormat cSVFormatTwo = cSVFormat.withHeaderComments(objectArray);\n+        final Object[] objectArray = new Object[8];\n+        final CSVFormat cSVFormatTwo = cSVFormat.withHeaderComments(objectArray);\n \n         assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n         assertFalse(cSVFormat.isCommentMarkerSet());\n \n         assertTrue(cSVFormatTwo.equals(cSVFormat));\n \n-        String string = cSVFormatTwo.format(objectArray);\n+        final String string = cSVFormatTwo.format(objectArray);\n \n         assertEquals('\\\"', (char)cSVFormat.getQuoteCharacter());\n         assertFalse(cSVFormat.isCommentMarkerSet());\n     @Test  //I assume this to be a defect.\n     public void testFormatThrowsNullPointerException() {\n \n-        CSVFormat cSVFormat = CSVFormat.MYSQL;\n+        final CSVFormat cSVFormat = CSVFormat.MYSQL;\n \n         try {\n             cSVFormat.format(null);\n             fail(\"Expecting exception: NullPointerException\");\n-        } catch(NullPointerException e) {\n+        } catch(final NullPointerException e) {\n             assertEquals(CSVFormat.class.getName(), e.getStackTrace()[0].getClassName());\n         }\n \n     @Test\n     public void testEqualsOne() {\n \n-        CSVFormat cSVFormatOne = CSVFormat.INFORMIX_UNLOAD;\n-        CSVFormat cSVFormatTwo = CSVFormat.MYSQL;\n+        final CSVFormat cSVFormatOne = CSVFormat.INFORMIX_UNLOAD;\n+        final CSVFormat cSVFormatTwo = CSVFormat.MYSQL;\n \n \n         assertEquals('\\\\', (char)cSVFormatOne.getEscapeCharacter());\n     @Test\n     public void testEqualsWithNull() {\n \n-        CSVFormat cSVFormat = CSVFormat.POSTGRESQL_TEXT;\n+        final CSVFormat cSVFormat = CSVFormat.POSTGRESQL_TEXT;\n \n         assertEquals('\\\"', (char)cSVFormat.getEscapeCharacter());\n         assertFalse(cSVFormat.getIgnoreSurroundingSpaces());\n     @Test\n     public void testToString() {\n \n-        CSVFormat cSVFormat = CSVFormat.POSTGRESQL_TEXT;\n-        String string = cSVFormat.INFORMIX_UNLOAD.toString();\n+        final CSVFormat cSVFormat = CSVFormat.POSTGRESQL_TEXT;\n+        final String string = cSVFormat.INFORMIX_UNLOAD.toString();\n \n         assertEquals(\"Delimiter=<|> Escape=<\\\\> QuoteChar=<\\\"> RecordSeparator=<\\n> EmptyLines:ignored SkipHeaderRecord:false\", string);\n \n     @Test\n     public void testHashCodeAndWithIgnoreHeaderCase() {\n \n-        CSVFormat cSVFormat = CSVFormat.INFORMIX_UNLOAD_CSV;\n-        CSVFormat cSVFormatTwo = cSVFormat.withIgnoreHeaderCase();\n+        final CSVFormat cSVFormat = CSVFormat.INFORMIX_UNLOAD_CSV;\n+        final CSVFormat cSVFormatTwo = cSVFormat.withIgnoreHeaderCase();\n         cSVFormatTwo.hashCode();\n \n         assertTrue(cSVFormatTwo.getIgnoreHeaderCase());\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n     private static final String[][] RESULT = { { \"a\", \"b\", \"c\", \"d\" }, { \"a\", \"b\", \"1 2\" }, { \"foo baar\", \"b\", \"\" },\n             { \"foo\\n,,\\n\\\",,\\n\\\"\", \"d\", \"e\" } };\n \n-    private BOMInputStream createBOMInputStream(String resource) throws IOException {\n+    private BOMInputStream createBOMInputStream(final String resource) throws IOException {\n         final URL url = ClassLoader.getSystemClassLoader().getResource(resource);\n         return new BOMInputStream(url.openStream());\n     }\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n \n     @Test\n     public void testEscapeBackslash1() throws IOException {\n-        StringWriter sw = new StringWriter();\n+        final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\n             printer.print(\"\\\\\");\n         }\n \n     @Test\n     public void testEscapeBackslash2() throws IOException {\n-        StringWriter sw = new StringWriter();\n+        final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\n             printer.print(\"\\\\\\r\");\n         }\n \n     @Test\n     public void testEscapeBackslash3() throws IOException {\n-        StringWriter sw = new StringWriter();\n+        final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\n             printer.print(\"X\\\\\\r\");\n         }\n \n     @Test\n     public void testEscapeBackslash4() throws IOException {\n-        StringWriter sw = new StringWriter();\n+        final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\n             printer.print(\"\\\\\\\\\");\n         }\n \n     @Test\n     public void testEscapeBackslash5() throws IOException {\n-        StringWriter sw = new StringWriter();\n+        final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {\n             printer.print(\"\\\\\\\\\");\n         }\n \n     @Test\n     public void testEscapeNull1() throws IOException {\n-        StringWriter sw = new StringWriter();\n+        final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n             printer.print(\"\\\\\");\n         }\n \n     @Test\n     public void testEscapeNull2() throws IOException {\n-        StringWriter sw = new StringWriter();\n+        final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n             printer.print(\"\\\\\\r\");\n         }\n \n     @Test\n     public void testEscapeNull3() throws IOException {\n-        StringWriter sw = new StringWriter();\n+        final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n             printer.print(\"X\\\\\\r\");\n         }\n \n     @Test\n     public void testEscapeNull4() throws IOException {\n-        StringWriter sw = new StringWriter();\n+        final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n             printer.print(\"\\\\\\\\\");\n         }\n \n     @Test\n     public void testEscapeNull5() throws IOException {\n-        StringWriter sw = new StringWriter();\n+        final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {\n             printer.print(\"\\\\\\\\\");\n         }\n \n     @Test\n     public void testPrintToFileWithCharsetUtf16Be() throws IOException {\n-        File file = File.createTempFile(getClass().getName(), \".csv\");\n+        final File file = File.createTempFile(getClass().getName(), \".csv\");\n         try (final CSVPrinter printer = CSVFormat.DEFAULT.print(file, StandardCharsets.UTF_16BE)) {\n             printer.printRecord(\"a\", \"b\\\\c\");\n         }\n \n     @Test\n     public void testPrintToFileWithDefaultCharset() throws IOException {\n-        File file = File.createTempFile(getClass().getName(), \".csv\");\n+        final File file = File.createTempFile(getClass().getName(), \".csv\");\n         try (final CSVPrinter printer = CSVFormat.DEFAULT.print(file, Charset.defaultCharset())) {\n             printer.printRecord(\"a\", \"b\\\\c\");\n         }\n \n     @Test\n     public void testPrintToPathWithDefaultCharset() throws IOException {\n-        File file = File.createTempFile(getClass().getName(), \".csv\");\n+        final File file = File.createTempFile(getClass().getName(), \".csv\");\n         try (final CSVPrinter printer = CSVFormat.DEFAULT.print(file.toPath(), Charset.defaultCharset())) {\n             printer.printRecord(\"a\", \"b\\\\c\");\n         }\n     @Test\n     public void testPrintRecordsWithResultSetOneRow() throws IOException, SQLException {\n         try (CSVPrinter csvPrinter = CSVFormat.MYSQL.printer()) {\n-            Value[] valueArray = new Value[0];\n-            ValueArray valueArrayTwo = ValueArray.get(valueArray);\n+            final Value[] valueArray = new Value[0];\n+            final ValueArray valueArrayTwo = ValueArray.get(valueArray);\n             try (ResultSet resultSet = valueArrayTwo.getResultSet()) {\n                 csvPrinter.printRecords(resultSet);\n                 assertEquals(0, resultSet.getRow());\n \n     @Test\n     public void testPrintRecordsWithObjectArray() throws IOException {\n-        CharArrayWriter charArrayWriter = new CharArrayWriter(0);\n+        final CharArrayWriter charArrayWriter = new CharArrayWriter(0);\n         try (CSVPrinter csvPrinter = CSVFormat.INFORMIX_UNLOAD.print(charArrayWriter)) {\n-            HashSet<BatchUpdateException> hashSet = new HashSet<>();\n-            Object[] objectArray = new Object[6];\n+            final HashSet<BatchUpdateException> hashSet = new HashSet<>();\n+            final Object[] objectArray = new Object[6];\n             objectArray[3] = hashSet;\n             csvPrinter.printRecords(objectArray);\n         }\n     @Test\n     public void testPrintRecordsWithEmptyVector() throws IOException {\n         try (CSVPrinter csvPrinter = CSVFormat.POSTGRESQL_TEXT.printer()) {\n-            Vector<CSVFormatTest.EmptyEnum> vector = new Vector<>();\n-            int expectedCapacity = 23;\n+            final Vector<CSVFormatTest.EmptyEnum> vector = new Vector<>();\n+            final int expectedCapacity = 23;\n             vector.setSize(expectedCapacity);\n             csvPrinter.printRecords(vector);\n             assertEquals(expectedCapacity, vector.capacity());\n \n     @Test\n     public void testCloseWithFlushOn() throws IOException {\n-        Writer writer = mock(Writer.class);\n-        CSVFormat csvFormat = CSVFormat.DEFAULT;\n-        CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat);\n+        final Writer writer = mock(Writer.class);\n+        final CSVFormat csvFormat = CSVFormat.DEFAULT;\n+        final CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat);\n         csvPrinter.close(true);\n         verify(writer, times(1)).flush();\n     }\n \n     @Test\n     public void testCloseWithFlushOff() throws IOException {\n-        Writer writer = mock(Writer.class);\n-        CSVFormat csvFormat = CSVFormat.DEFAULT;\n-        CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat);\n+        final Writer writer = mock(Writer.class);\n+        final CSVFormat csvFormat = CSVFormat.DEFAULT;\n+        final CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat);\n         csvPrinter.close(false);\n         verify(writer, never()).flush();\n         verify(writer, times(1)).close();\n \n     @Test\n     public void testCloseBackwardCompatibility() throws IOException {\n-        Writer writer = mock(Writer.class);\n-        CSVFormat csvFormat = CSVFormat.DEFAULT;\n+        final Writer writer = mock(Writer.class);\n+        final CSVFormat csvFormat = CSVFormat.DEFAULT;\n         try (CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat)) {\n         }\n         verify(writer, never()).flush();\n     @Test\n     public void testCloseWithCsvFormatAutoFlushOn() throws IOException {\n         // System.out.println(\"start method\");\n-        Writer writer = mock(Writer.class);\n-        CSVFormat csvFormat = CSVFormat.DEFAULT.withAutoFlush(true);\n+        final Writer writer = mock(Writer.class);\n+        final CSVFormat csvFormat = CSVFormat.DEFAULT.withAutoFlush(true);\n         try (CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat)) {\n         }\n         verify(writer, times(1)).flush();\n \n     @Test\n     public void testCloseWithCsvFormatAutoFlushOff() throws IOException {\n-        Writer writer = mock(Writer.class);\n-        CSVFormat csvFormat = CSVFormat.DEFAULT.withAutoFlush(false);\n+        final Writer writer = mock(Writer.class);\n+        final CSVFormat csvFormat = CSVFormat.DEFAULT.withAutoFlush(false);\n         try (CSVPrinter csvPrinter = new CSVPrinter(writer, csvFormat)) {\n         }\n         verify(writer, never()).flush();\n--- a/src/test/java/org/apache/commons/csv/issues/JiraCsv198Test.java\n+++ b/src/test/java/org/apache/commons/csv/issues/JiraCsv198Test.java\n \n     @Test\n     public void test() throws UnsupportedEncodingException, IOException {\n-        InputStream pointsOfReference = getClass().getResourceAsStream(\"/CSV-198/optd_por_public.csv\");\n+        final InputStream pointsOfReference = getClass().getResourceAsStream(\"/CSV-198/optd_por_public.csv\");\n         Assert.assertNotNull(pointsOfReference);\n         try (@SuppressWarnings(\"resource\")\n         CSVParser parser = CSV_FORMAT.parse(new InputStreamReader(pointsOfReference, \"UTF-8\"))) {\n-            for (CSVRecord record : parser) {\n-                String locationType = record.get(\"location_type\");\n+            for (final CSVRecord record : parser) {\n+                final String locationType = record.get(\"location_type\");\n                 Assert.assertNotNull(locationType);\n             }\n         }\n--- a/src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java\n+++ b/src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java\n \n     @Test\n     public void testQuoteModeAll() throws Exception {\n-        CSVFormat format = CSVFormat.EXCEL\n+        final CSVFormat format = CSVFormat.EXCEL\n                 .withNullString(\"N/A\")\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteMode(QuoteMode.ALL);\n \n-        StringBuffer buffer = new StringBuffer();\n-        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        final StringBuffer buffer = new StringBuffer();\n+        final CSVPrinter printer = new CSVPrinter(buffer, format);\n         printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n \n         Assert.assertEquals(\"\\\"N/A\\\",\\\"Hello\\\",\\\"N/A\\\",\\\"World\\\"\\r\\n\", buffer.toString());\n \n     @Test\n     public void testQuoteModeAllNonNull() throws Exception {\n-        CSVFormat format = CSVFormat.EXCEL\n+        final CSVFormat format = CSVFormat.EXCEL\n                 .withNullString(\"N/A\")\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteMode(QuoteMode.ALL_NON_NULL);\n \n-        StringBuffer buffer = new StringBuffer();\n-        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        final StringBuffer buffer = new StringBuffer();\n+        final CSVPrinter printer = new CSVPrinter(buffer, format);\n         printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n \n         Assert.assertEquals(\"N/A,\\\"Hello\\\",N/A,\\\"World\\\"\\r\\n\", buffer.toString());\n \n     @Test\n     public void testWithoutQuoteMode() throws Exception {\n-        CSVFormat format = CSVFormat.EXCEL\n+        final CSVFormat format = CSVFormat.EXCEL\n                 .withNullString(\"N/A\")\n                 .withIgnoreSurroundingSpaces(true);\n \n-        StringBuffer buffer = new StringBuffer();\n-        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        final StringBuffer buffer = new StringBuffer();\n+        final CSVPrinter printer = new CSVPrinter(buffer, format);\n         printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n \n         Assert.assertEquals(\"N/A,Hello,N/A,World\\r\\n\", buffer.toString());\n \n     @Test\n     public void testQuoteModeMinimal() throws Exception {\n-        CSVFormat format = CSVFormat.EXCEL\n+        final CSVFormat format = CSVFormat.EXCEL\n                 .withNullString(\"N/A\")\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteMode(QuoteMode.MINIMAL);\n \n-        StringBuffer buffer = new StringBuffer();\n-        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        final StringBuffer buffer = new StringBuffer();\n+        final CSVPrinter printer = new CSVPrinter(buffer, format);\n         printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n \n         Assert.assertEquals(\"N/A,Hello,N/A,World\\r\\n\", buffer.toString());\n \n     @Test\n     public void testQuoteModeNonNumeric() throws Exception {\n-        CSVFormat format = CSVFormat.EXCEL\n+        final CSVFormat format = CSVFormat.EXCEL\n                 .withNullString(\"N/A\")\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteMode(QuoteMode.NON_NUMERIC);\n \n-        StringBuffer buffer = new StringBuffer();\n-        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        final StringBuffer buffer = new StringBuffer();\n+        final CSVPrinter printer = new CSVPrinter(buffer, format);\n         printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n \n         Assert.assertEquals(\"N/A,\\\"Hello\\\",N/A,\\\"World\\\"\\r\\n\", buffer.toString());\n \n     @Test\n     public void testWithoutNullString() throws Exception {\n-        CSVFormat format = CSVFormat.EXCEL\n+        final CSVFormat format = CSVFormat.EXCEL\n                 //.withNullString(\"N/A\")\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteMode(QuoteMode.ALL);\n \n-        StringBuffer buffer = new StringBuffer();\n-        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        final StringBuffer buffer = new StringBuffer();\n+        final CSVPrinter printer = new CSVPrinter(buffer, format);\n         printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n \n         Assert.assertEquals(\",\\\"Hello\\\",,\\\"World\\\"\\r\\n\", buffer.toString());\n \n     @Test\n     public void testWithEmptyValues() throws Exception {\n-        CSVFormat format = CSVFormat.EXCEL\n+        final CSVFormat format = CSVFormat.EXCEL\n                 .withNullString(\"N/A\")\n                 .withIgnoreSurroundingSpaces(true)\n                 .withQuoteMode(QuoteMode.ALL);\n \n-        StringBuffer buffer = new StringBuffer();\n-        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        final StringBuffer buffer = new StringBuffer();\n+        final CSVPrinter printer = new CSVPrinter(buffer, format);\n         printer.printRecord(new Object[] { \"\", \"Hello\", \"\", \"World\" });\n         //printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n \n--- a/src/test/java/org/apache/commons/csv/issues/JiraCsv213Test.java\n+++ b/src/test/java/org/apache/commons/csv/issues/JiraCsv213Test.java\n @Ignore\n public class JiraCsv213Test {\n \n-    private void createEndChannel(File csvFile) {\n+    private void createEndChannel(final File csvFile) {\n         // @formatter:off\n         final CSVFormat csvFormat =\n                 CSVFormat.DEFAULT\n                 System.out.println(parser.getCurrentLineNumber());\n                 System.out.println(parser.getRecordNumber());\n                 // get only first record we don't need other's\n-                CSVRecord firstRecord = parser.iterator().next(); // this fails\n+                final CSVRecord firstRecord = parser.iterator().next(); // this fails\n \n                 return;\n             }\n-        } catch (IOException e) {\n+        } catch (final IOException e) {\n             throw new RuntimeException(\"Error while adding end channel to csv\", e);\n         }\n ", "timestamp": 1507578182, "metainfo": ""}