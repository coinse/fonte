{"sha": "9afec3ed39d954ae2ad927ee73445a9ee5163d07", "log": "Rename test package org.apache.commons.csv.bugs to org.apache.commons.csv.issues.", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/issues/JiraCsv164Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv.issues;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.junit.Test;\n+\n+public class JiraCsv164Test {\n+\n+    @Test\n+    public void testJiraCsv154_withCommentMarker() throws IOException {\n+        final String comment = \"This is a header comment\";\n+        final CSVFormat format = CSVFormat.EXCEL.withHeader(\"H1\", \"H2\").withCommentMarker('#')\n+                .withHeaderComments(comment);\n+        final StringBuilder out = new StringBuilder();\n+        try (final CSVPrinter printer = format.print(out)) {\n+            printer.print(\"A\");\n+            printer.print(\"B\");\n+        }\n+        final String s = out.toString();\n+        assertTrue(s, s.contains(comment));\n+    }\n+\n+    @Test\n+    public void testJiraCsv154_withHeaderComments() throws IOException {\n+        final String comment = \"This is a header comment\";\n+        final CSVFormat format = CSVFormat.EXCEL.withHeader(\"H1\", \"H2\").withHeaderComments(comment)\n+                .withCommentMarker('#');\n+        final StringBuilder out = new StringBuilder();\n+        try (final CSVPrinter printer = format.print(out)) {\n+            printer.print(\"A\");\n+            printer.print(\"B\");\n+        }\n+        final String s = out.toString();\n+        assertTrue(s, s.contains(comment));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/issues/JiraCsv167Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv.issues;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVParser;\n+import org.apache.commons.csv.CSVRecord;\n+import org.apache.commons.csv.QuoteMode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class JiraCsv167Test {\n+\n+    @Test\n+    public void parse() throws IOException {\n+        int totcomment = 0;\n+        int totrecs = 0;\n+        try (final BufferedReader br = new BufferedReader(getTestInput())) {\n+            String s = null;\n+            boolean lastWasComment = false;\n+            while ((s = br.readLine()) != null) {\n+                if (s.startsWith(\"#\")) {\n+                    if (!lastWasComment) { // comments are merged\n+                        totcomment++;\n+                    }\n+                    lastWasComment = true;\n+                } else {\n+                    totrecs++;\n+                    lastWasComment = false;\n+                }\n+            }\n+        }\n+        CSVFormat format = CSVFormat.DEFAULT;\n+        //\n+        format = format.withAllowMissingColumnNames(false);\n+        format = format.withCommentMarker('#');\n+        format = format.withDelimiter(',');\n+        format = format.withEscape('\\\\');\n+        format = format.withHeader(\"author\", \"title\", \"publishDate\");\n+        format = format.withHeaderComments(\"headerComment\");\n+        format = format.withNullString(\"NULL\");\n+        format = format.withIgnoreEmptyLines(true);\n+        format = format.withIgnoreSurroundingSpaces(true);\n+        format = format.withQuote('\"');\n+        format = format.withQuoteMode(QuoteMode.ALL);\n+        format = format.withRecordSeparator('\\n');\n+        format = format.withSkipHeaderRecord(false);\n+        //\n+        int comments = 0;\n+        int records = 0;\n+        try (final CSVParser parser = format.parse(getTestInput())) {\n+            for (final CSVRecord csvRecord : parser) {\n+                records++;\n+                if (csvRecord.hasComment()) {\n+                    comments++;\n+                }\n+            }\n+        }\n+        // Comment lines are concatenated, in this example 4 lines become 2 comments.\n+        Assert.assertEquals(totcomment, comments);\n+        Assert.assertEquals(totrecs, records); // records includes the header\n+    }\n+\n+    private Reader getTestInput() {\n+        final InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(\"csv-167/sample1.csv\");\n+        return new InputStreamReader(is);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/issues/JiraCsv198Test.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.csv.issues;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.UnsupportedEncodingException;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVParser;\n+import org.apache.commons.csv.CSVRecord;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class JiraCsv198Test {\n+\n+    private static final CSVFormat CSV_FORMAT = CSVFormat.EXCEL.withDelimiter('^').withFirstRecordAsHeader();\n+\n+    @Test\n+    public void test() throws UnsupportedEncodingException, IOException {\n+        InputStream pointsOfReference = getClass().getResourceAsStream(\"/CSV-198/optd_por_public.csv\");\n+        Assert.assertNotNull(pointsOfReference);\n+        try (@SuppressWarnings(\"resource\")\n+        CSVParser parser = CSV_FORMAT.parse(new InputStreamReader(pointsOfReference, \"UTF-8\"))) {\n+            for (CSVRecord record : parser) {\n+                String locationType = record.get(\"location_type\");\n+                Assert.assertNotNull(locationType);\n+            }\n+        }\n+    }\n+\n+}", "timestamp": 1480627660, "metainfo": ""}