{"sha": "a2b9dfbd4ea1087fcb0e6b49c08361e2e8cd2c02", "log": "Add missing '@Override' annotations Add missing '@Override' annotations to implementations of interface methods  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n+    @Override\n     public void close() throws IOException {\n         if (this.lexer != null) {\n             this.lexer.close();\n      * If the parser is closed a call to {@code next()} will throw a\n      * NoSuchElementException.</p>\n      */\n+    @Override\n     public Iterator<CSVRecord> iterator() {\n         return new Iterator<CSVRecord>() {\n             private CSVRecord current;\n                 }\n             }\n \n+            @Override\n             public boolean hasNext() {\n                 if (CSVParser.this.isClosed()) {\n                     return false;\n                 return this.current != null;\n             }\n \n+            @Override\n             public CSVRecord next() {\n                 if (CSVParser.this.isClosed()) {\n                     throw new NoSuchElementException(\"CSVParser has been closed\");\n                 return next;\n             }\n \n+            @Override\n             public void remove() {\n                 throw new UnsupportedOperationException();\n             }\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n     // printing implementation\n     // ======================================================\n \n+    @Override\n     public void close() throws IOException {\n         if (out instanceof Closeable) {\n             ((Closeable) out).close();\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n+    @Override\n     public void flush() throws IOException {\n         if (out instanceof Flushable) {\n             ((Flushable) out).flush();\n--- a/src/test/java/org/apache/commons/csv/TokenMatchers.java\n+++ b/src/test/java/org/apache/commons/csv/TokenMatchers.java\n     public static Matcher<Token> hasType(final Token.Type expectedType) {\n         return new TypeSafeDiagnosingMatcher<Token>() {\n \n+            @Override\n             public void describeTo(final Description description) {\n                 description.appendText(\"token has type \");\n                 description.appendValue(expectedType);\n     public static Matcher<Token> hasContent(final String expectedContent) {\n         return new TypeSafeDiagnosingMatcher<Token>() {\n \n+            @Override\n             public void describeTo(final Description description) {\n                 description.appendText(\"token has content \");\n                 description.appendValue(expectedContent);\n     public static Matcher<Token> isReady() {\n         return new TypeSafeDiagnosingMatcher<Token>() {\n \n+            @Override\n             public void describeTo(final Description description) {\n                 description.appendText(\"token is ready \");\n             }", "timestamp": 1414677889, "metainfo": ""}