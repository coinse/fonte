{"sha": "977824491d8d65b9952005573f2ebffe6ced671d", "log": "[CSV-203]   withNullString value is printed without quotes when QuoteMode.ALL is specified; add QuoteMode.ALL_NON_NULL. PR #17.", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n         // Only call CharSequence.toString() if you have to, helps GC-free use cases.\n         CharSequence charSequence;\n         if (value == null) {\n-            charSequence = nullString == null ? Constants.EMPTY : nullString;\n+            // https://issues.apache.org/jira/browse/CSV-203\n+            if (null == nullString) {\n+                charSequence = Constants.EMPTY;\n+            } else {\n+                if (QuoteMode.ALL == quoteMode) {\n+                    charSequence = quoteCharacter + nullString + quoteCharacter;\n+                } else {\n+                    charSequence = nullString;\n+                }\n+            }\n         } else {\n             charSequence = value instanceof CharSequence ? (CharSequence) value : value.toString();\n         }\n         }\n         switch (quoteModePolicy) {\n         case ALL:\n+        case ALL_NON_NULL:\n             quote = true;\n             break;\n         case NON_NUMERIC:\n--- a/src/main/java/org/apache/commons/csv/QuoteMode.java\n+++ b/src/main/java/org/apache/commons/csv/QuoteMode.java\n     ALL,\n \n     /**\n+     * Quotes all non-null fields.\n+     */\n+    ALL_NON_NULL,\n+\n+    /**\n      * Quotes fields which contain special characters such as a delimiter, quotes character or any of the characters in\n      * line separator.\n      */\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/issues/JiraCsv203Test.java\n+package org.apache.commons.csv.issues;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVPrinter;\n+import org.apache.commons.csv.QuoteMode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * JIRA: <a href=\"https://issues.apache.org/jira/browse/CSV-203\">withNullString value is printed without quotes when QuoteMode.ALL is specified</a>\n+ */\n+public class JiraCsv203Test {\n+\n+    @Test\n+    public void testQuoteModeAll() throws Exception {\n+        CSVFormat format = CSVFormat.EXCEL\n+                .withNullString(\"N/A\")\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteMode(QuoteMode.ALL);\n+\n+        StringBuffer buffer = new StringBuffer();\n+        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n+\n+        Assert.assertEquals(\"\\\"N/A\\\",\\\"Hello\\\",\\\"N/A\\\",\\\"World\\\"\\r\\n\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void testQuoteModeAllNonNull() throws Exception {\n+        CSVFormat format = CSVFormat.EXCEL\n+                .withNullString(\"N/A\")\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteMode(QuoteMode.ALL_NON_NULL);\n+\n+        StringBuffer buffer = new StringBuffer();\n+        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n+\n+        Assert.assertEquals(\"N/A,\\\"Hello\\\",N/A,\\\"World\\\"\\r\\n\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void testWithoutQuoteMode() throws Exception {\n+        CSVFormat format = CSVFormat.EXCEL\n+                .withNullString(\"N/A\")\n+                .withIgnoreSurroundingSpaces(true);\n+\n+        StringBuffer buffer = new StringBuffer();\n+        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n+\n+        Assert.assertEquals(\"N/A,Hello,N/A,World\\r\\n\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void testQuoteModeMinimal() throws Exception {\n+        CSVFormat format = CSVFormat.EXCEL\n+                .withNullString(\"N/A\")\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteMode(QuoteMode.MINIMAL);\n+\n+        StringBuffer buffer = new StringBuffer();\n+        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n+\n+        Assert.assertEquals(\"N/A,Hello,N/A,World\\r\\n\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void testQuoteModeNonNumeric() throws Exception {\n+        CSVFormat format = CSVFormat.EXCEL\n+                .withNullString(\"N/A\")\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteMode(QuoteMode.NON_NUMERIC);\n+\n+        StringBuffer buffer = new StringBuffer();\n+        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n+\n+        Assert.assertEquals(\"N/A,\\\"Hello\\\",N/A,\\\"World\\\"\\r\\n\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void testWithoutNullString() throws Exception {\n+        CSVFormat format = CSVFormat.EXCEL\n+                //.withNullString(\"N/A\")\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteMode(QuoteMode.ALL);\n+\n+        StringBuffer buffer = new StringBuffer();\n+        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n+\n+        Assert.assertEquals(\",\\\"Hello\\\",,\\\"World\\\"\\r\\n\", buffer.toString());\n+    }\n+\n+    @Test\n+    public void testWithEmptyValues() throws Exception {\n+        CSVFormat format = CSVFormat.EXCEL\n+                .withNullString(\"N/A\")\n+                .withIgnoreSurroundingSpaces(true)\n+                .withQuoteMode(QuoteMode.ALL);\n+\n+        StringBuffer buffer = new StringBuffer();\n+        CSVPrinter printer = new CSVPrinter(buffer, format);\n+        printer.printRecord(new Object[] { \"\", \"Hello\", \"\", \"World\" });\n+        //printer.printRecord(new Object[] { null, \"Hello\", null, \"World\" });\n+\n+        Assert.assertEquals(\"\\\"\\\",\\\"Hello\\\",\\\"\\\",\\\"World\\\"\\r\\n\", buffer.toString());\n+    }\n+}", "timestamp": 1490641433, "metainfo": ""}