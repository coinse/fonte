{"sha": "dbbae1eccdf486c70204f99f1a938c26fc062e2f", "log": "Initialize format used by several test methods in setUp  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n import java.io.IOException;\n import java.io.StringReader;\n \n+import org.junit.Before;\n import org.junit.Ignore;\n import org.junit.Test;\n \n  * @version $Id$\n  */\n public class CSVLexerTest {\n+\n+    private CSVFormat formatWithEscaping;\n+\n+    @Before\n+    public void setUp() {\n+        formatWithEscaping = CSVFormat.newBuilder().withEscape('\\\\').build();\n+    }\n \n     private Lexer getLexer(final String input, final CSVFormat format) {\n         return new CSVLexer(format, new ExtendedBufferedReader(new StringReader(input)));\n         *       \\,,\n         */\n         final String code = \"a,\\\\,,b\\\\\\\\\\n\\\\,,\\\\\\nc,d\\\\\\r\\ne\";\n-        final CSVFormat format = CSVFormat.newBuilder().withEscape('\\\\').withIgnoreEmptyLines(false).build();\n+        final CSVFormat format = formatWithEscaping.toBuilder().withIgnoreEmptyLines(false).build();\n         assertTrue(format.isEscaping());\n         final Lexer parser = getLexer(code, format);\n \n \n     @Test\n     public void testEscapedCR() throws Exception {\n-        final Lexer lexer = getLexer(\"character\\\\\" + CR + \"Escaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        final Lexer lexer = getLexer(\"character\\\\\" + CR + \"Escaped\", formatWithEscaping);\n         assertTokenEquals(EOF, \"character\" + CR + \"Escaped\", lexer.nextToken(new Token()));\n     }\n \n     @Test\n     public void testEscapedLF() throws Exception {\n-        final Lexer lexer = getLexer(\"character\\\\\" + LF + \"Escaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        final Lexer lexer = getLexer(\"character\\\\\" + LF + \"Escaped\", formatWithEscaping);\n         assertTokenEquals(EOF, \"character\" + LF + \"Escaped\", lexer.nextToken(new Token()));\n     }\n \n     @Test\n     public void testEscapedTab() throws Exception {\n-        final Lexer lexer = getLexer(\"character\\\\\" + TAB + \"Escaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        final Lexer lexer = getLexer(\"character\\\\\" + TAB + \"Escaped\", formatWithEscaping);\n         assertTokenEquals(EOF, \"character\" + TAB + \"Escaped\", lexer.nextToken(new Token()));\n     }\n \n     @Test\n     public void testEscapeBackspace() throws Exception {\n-        final Lexer lexer = getLexer(\"character\\\\\" + BACKSPACE + \"Escaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        final Lexer lexer = getLexer(\"character\\\\\" + BACKSPACE + \"Escaped\", formatWithEscaping);\n         assertTokenEquals(EOF, \"character\" + BACKSPACE + \"Escaped\", lexer.nextToken(new Token()));\n     }\n \n     @Test\n     public void testEscapeFF() throws Exception {\n-        final Lexer lexer = getLexer(\"character\\\\\" + FF + \"Escaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        final Lexer lexer = getLexer(\"character\\\\\" + FF + \"Escaped\", formatWithEscaping);\n         assertTokenEquals(EOF, \"character\" + FF + \"Escaped\", lexer.nextToken(new Token()));\n     }\n \n     @Test\n     public void testEscapedMySqlNullValue() throws Exception {\n         // MySQL uses \\N to symbolize null values. We have to restore this\n-        final Lexer lexer = getLexer(\"character\\\\\\\\NEscaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        final Lexer lexer = getLexer(\"character\\\\\\\\NEscaped\", formatWithEscaping);\n         assertTokenEquals(EOF, \"character\\\\NEscaped\", lexer.nextToken(new Token()));\n     }\n \n     @Test\n     @Ignore\n     public void testEscapedCharacter() throws Exception {\n-        final Lexer lexer = getLexer(\"character\\\\aEscaped\", CSVFormat.newBuilder().withEscape('\\\\').build());\n+        final Lexer lexer = getLexer(\"character\\\\aEscaped\", formatWithEscaping);\n         assertTokenEquals(EOF, \"character\\\\aEscaped\", lexer.nextToken(new Token()));\n     }\n \n \n     @Test(expected = IOException.class)\n     public void testEscapingAtEOF() throws Exception {\n-        final String code = \"escaping at EOF is evil!\";\n-        final Lexer lexer = getLexer(code, CSVFormat.newBuilder().withEscape('!').build());\n+        final String code = \"escaping at EOF is evil\\\\\";\n+        final Lexer lexer = getLexer(code, formatWithEscaping);\n \n         lexer.nextToken(new Token());\n     }", "timestamp": 1364132176, "metainfo": ""}