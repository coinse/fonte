{"sha": "74afb17d34e9f9a880bfe898633609068fc338e1", "log": "[CSV-207]   Provide a CSV Format for printing PostgreSQL CSV and Text formats.", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n import static org.apache.commons.csv.Constants.BACKSLASH;\n import static org.apache.commons.csv.Constants.COMMA;\n import static org.apache.commons.csv.Constants.COMMENT;\n+import static org.apache.commons.csv.Constants.EMPTY;\n import static org.apache.commons.csv.Constants.CR;\n import static org.apache.commons.csv.Constants.CRLF;\n import static org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR;\n         MySQL(CSVFormat.MYSQL),\n \n         /**\n+         * @see CSVFormat#POSTGRESQL_CSV\n+         * @since 1.5\n+         */\n+        PostgreSQLCsv(CSVFormat.POSTGRESQL_CSV),\n+\n+        /**\n+         * @see CSVFormat#POSTGRESQL_CSV\n+         */\n+        PostgreSQLText(CSVFormat.POSTGRESQL_TEXT),\n+\n+        /**\n          * @see CSVFormat#RFC4180\n          */\n         RFC4180(CSVFormat.RFC4180),\n     \t\t.withEscape(BACKSLASH)\n     \t\t.withIgnoreEmptyLines(false)\n             .withQuote(null)\n+            .withRecordSeparator(LF)\n+            .withNullString(\"\\\\N\")\n+    \t\t.withQuoteMode(QuoteMode.ALL_NON_NULL);\n+    // @formatter:off\n+\n+    /**\n+     * Default PostgreSQL CSV format used by the {@code COPY} operation.\n+     *\n+     * <p>\n+     * This is a comma-delimited format with a LF character as the line separator. Values are double quoted and special\n+     * characters are escaped with {@code '\"'}. The default NULL string is {@code \"\"}.\n+     * </p>\n+     *\n+     * <p>\n+     * Settings are:\n+     * </p>\n+     * <ul>\n+     * <li>withDelimiter(',')</li>\n+     * <li>withQuote('\"')</li>\n+     * <li>withRecordSeparator('\\n')</li>\n+     * <li>withIgnoreEmptyLines(false)</li>\n+     * <li>withEscape('\\\\')</li>\n+     * <li>withNullString(\"\")</li>\n+     * <li>withQuoteMode(QuoteMode.ALL_NON_NULL)</li>\n+     * </ul>\n+     *\n+     * @see Predefined#MySQL\n+     * @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\"> http://dev.mysql.com/doc/refman/5.1/en/load\n+     *      -data.html</a>\n+     * @since 1.5\n+     */\n+    // @formatter:off\n+    public static final CSVFormat POSTGRESQL_CSV = DEFAULT\n+    \t\t.withDelimiter(COMMA)\n+    \t\t.withEscape(DOUBLE_QUOTE_CHAR)\n+    \t\t.withIgnoreEmptyLines(false)\n+            .withQuote(DOUBLE_QUOTE_CHAR)\n+            .withRecordSeparator(LF)\n+            .withNullString(EMPTY)\n+    \t\t.withQuoteMode(QuoteMode.ALL_NON_NULL);\n+    // @formatter:off\n+\n+    /**\n+     * Default PostgreSQL text format used by the {@code COPY} operation.\n+     *\n+     * <p>\n+     * This is a tab-delimited format with a LF character as the line separator. Values are double quoted and special\n+     * characters are escaped with {@code '\"'}. The default NULL string is {@code \"\\\\N\"}.\n+     * </p>\n+     *\n+     * <p>\n+     * Settings are:\n+     * </p>\n+     * <ul>\n+     * <li>withDelimiter('\\t')</li>\n+     * <li>withQuote('\"')</li>\n+     * <li>withRecordSeparator('\\n')</li>\n+     * <li>withIgnoreEmptyLines(false)</li>\n+     * <li>withEscape('\\\\')</li>\n+     * <li>withNullString(\"\\\\N\")</li>\n+     * <li>withQuoteMode(QuoteMode.ALL_NON_NULL)</li>\n+     * </ul>\n+     *\n+     * @see Predefined#MySQL\n+     * @see <a href=\"http://dev.mysql.com/doc/refman/5.1/en/load-data.html\"> http://dev.mysql.com/doc/refman/5.1/en/load\n+     *      -data.html</a>\n+     * @since 1.5\n+     */\n+    // @formatter:off\n+    public static final CSVFormat POSTGRESQL_TEXT = DEFAULT\n+    \t\t.withDelimiter(TAB)\n+    \t\t.withEscape(DOUBLE_QUOTE_CHAR)\n+    \t\t.withIgnoreEmptyLines(false)\n+            .withQuote(DOUBLE_QUOTE_CHAR)\n             .withRecordSeparator(LF)\n             .withNullString(\"\\\\N\")\n     \t\t.withQuoteMode(QuoteMode.ALL_NON_NULL);\n--- a/src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatPredefinedTest.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.csv;\n-\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-/**\n- * Tests {@link CSVFormat.Predefined}.\n- */\n-public class CSVFormatPredefinedTest {\n-\n-    private void test(final CSVFormat format, final String enumName) {\n-        Assert.assertEquals(format, CSVFormat.Predefined.valueOf(enumName).getFormat());\n-        Assert.assertEquals(format, CSVFormat.valueOf(enumName));\n-    }\n-\n-    @Test\n-    public void testDefault() {\n-        test(CSVFormat.DEFAULT, \"Default\");\n-    }\n-\n-    @Test\n-    public void testExcel() {\n-        test(CSVFormat.EXCEL, \"Excel\");\n-    }\n-\n-    @Test\n-    public void testMySQL() {\n-        test(CSVFormat.MYSQL, \"MySQL\");\n-    }\n-\n-    @Test\n-    public void testRFC4180() {\n-        test(CSVFormat.RFC4180, \"RFC4180\");\n-    }\n-\n-    @Test\n-    public void testTDF() {\n-        test(CSVFormat.TDF, \"TDF\");\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.csv;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Tests {@link CSVFormat.Predefined}.\n+ */\n+public class CSVFormatPredefinedTest {\n+\n+    private void test(final CSVFormat format, final String enumName) {\n+        Assert.assertEquals(format, CSVFormat.Predefined.valueOf(enumName).getFormat());\n+        Assert.assertEquals(format, CSVFormat.valueOf(enumName));\n+    }\n+\n+    @Test\n+    public void testDefault() {\n+        test(CSVFormat.DEFAULT, \"Default\");\n+    }\n+\n+    @Test\n+    public void testExcel() {\n+        test(CSVFormat.EXCEL, \"Excel\");\n+    }\n+\n+    @Test\n+    public void testMySQL() {\n+        test(CSVFormat.MYSQL, \"MySQL\");\n+    }\n+\n+    @Test\n+    public void testPostgreSqlCsv() {\n+        test(CSVFormat.POSTGRESQL_CSV, \"PostgreSQLCsv\");\n+    }\n+\n+    @Test\n+    public void testPostgreSqlText() {\n+        test(CSVFormat.POSTGRESQL_TEXT, \"PostgreSQLText\");\n+    }\n+\n+    @Test\n+    public void testRFC4180() {\n+        test(CSVFormat.RFC4180, \"RFC4180\");\n+    }\n+\n+    @Test\n+    public void testTDF() {\n+        test(CSVFormat.TDF, \"TDF\");\n+    }\n+}\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n     }\n \n     @Test\n+    @Ignore\n+    public void testPostgreSqlCsvNullOutput() throws IOException {\n+        Object[] s = new String[] { \"NULL\", null };\n+        CSVFormat format = CSVFormat.POSTGRESQL_CSV.withQuote(DQUOTE_CHAR).withNullString(\"NULL\").withQuoteMode(QuoteMode.ALL_NON_NULL);\n+        StringWriter writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        String expected = \"\\\"NULL\\\",NULL\\n\";\n+        assertEquals(expected, writer.toString());\n+        String[] record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(new Object[2], record0);\n+\n+        s = new String[] { \"\\\\N\", null };\n+        format = CSVFormat.POSTGRESQL_CSV.withNullString(\"\\\\N\");\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\\\N\", \"A\" };\n+        format = CSVFormat.POSTGRESQL_CSV.withNullString(\"\\\\N\");\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\\\\\\\N\\tA\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\n\", \"A\" };\n+        format = CSVFormat.POSTGRESQL_CSV.withNullString(\"\\\\N\");\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\\\n\\tA\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\", null };\n+        format = CSVFormat.POSTGRESQL_CSV.withNullString(\"NULL\");\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\tNULL\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\", null };\n+        format = CSVFormat.POSTGRESQL_CSV;\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\t\\\\N\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n+        format = CSVFormat.POSTGRESQL_CSV;\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"NULL\", \"\\\\\\r\" };\n+        format = CSVFormat.POSTGRESQL_CSV;\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\\\\\r\" };\n+        format = CSVFormat.POSTGRESQL_CSV;\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\\\\\\\\\\\r\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void testPostgreSqlCsvTextOutput() throws IOException {\n+        Object[] s = new String[] { \"NULL\", null };\n+        CSVFormat format = CSVFormat.POSTGRESQL_TEXT.withQuote(DQUOTE_CHAR).withNullString(\"NULL\").withQuoteMode(QuoteMode.ALL_NON_NULL);\n+        StringWriter writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        String expected = \"\\\"NULL\\\"\\tNULL\\n\";\n+        assertEquals(expected, writer.toString());\n+        String[] record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(new Object[2], record0);\n+\n+        s = new String[] { \"\\\\N\", null };\n+        format = CSVFormat.POSTGRESQL_TEXT.withNullString(\"\\\\N\");\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\\\\\\\N\\t\\\\N\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\\\N\", \"A\" };\n+        format = CSVFormat.POSTGRESQL_TEXT.withNullString(\"\\\\N\");\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\\\\\\\N\\tA\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\n\", \"A\" };\n+        format = CSVFormat.POSTGRESQL_TEXT.withNullString(\"\\\\N\");\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\\\n\\tA\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\", null };\n+        format = CSVFormat.POSTGRESQL_TEXT.withNullString(\"NULL\");\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\tNULL\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\", null };\n+        format = CSVFormat.POSTGRESQL_TEXT;\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\t\\\\N\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\\\N\", \"\", \"\\u000e,\\\\\\r\" };\n+        format = CSVFormat.POSTGRESQL_TEXT;\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\\\\\\\N\\t\\t\\u000e,\\\\\\\\\\\\r\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"NULL\", \"\\\\\\r\" };\n+        format = CSVFormat.POSTGRESQL_TEXT;\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"NULL\\t\\\\\\\\\\\\r\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+\n+        s = new String[] { \"\\\\\\r\" };\n+        format = CSVFormat.POSTGRESQL_TEXT;\n+        writer = new StringWriter();\n+        try (final CSVPrinter printer = new CSVPrinter(writer, format)) {\n+            printer.printRecord(s);\n+        }\n+        expected = \"\\\\\\\\\\\\r\\n\";\n+        assertEquals(expected, writer.toString());\n+        record0 = toFirstRecordValues(expected, format);\n+        assertArrayEquals(expectNulls(s, format), record0);\n+    }\n+\n+    @Test\n     public void testMySqlNullStringDefault() {\n         assertEquals(\"\\\\N\", CSVFormat.MYSQL.getNullString());\n+    }\n+\n+    @Test\n+    public void testPostgreSQLNullStringDefaultCsv() {\n+        assertEquals(\"\", CSVFormat.POSTGRESQL_CSV.getNullString());\n+    }\n+\n+    @Test\n+    public void testPostgreSQLNullStringDefaultText() {\n+        assertEquals(\"\\\\N\", CSVFormat.POSTGRESQL_TEXT.getNullString());\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     }\n \n     @Test\n+    @Ignore\n+    public void testRandomPostgreSqlCsv() throws Exception {\n+        doRandom(CSVFormat.POSTGRESQL_CSV, ITERATIONS_FOR_RANDOM_TEST);\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void testRandomPostgreSqlText() throws Exception {\n+        doRandom(CSVFormat.POSTGRESQL_TEXT, ITERATIONS_FOR_RANDOM_TEST);\n+    }\n+\n+    @Test\n     public void testRandomRfc4180() throws Exception {\n         doRandom(CSVFormat.RFC4180, ITERATIONS_FOR_RANDOM_TEST);\n     }", "timestamp": 1490645213, "metainfo": ""}