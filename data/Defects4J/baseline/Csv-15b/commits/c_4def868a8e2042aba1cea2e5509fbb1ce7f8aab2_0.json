{"sha": "4def868a8e2042aba1cea2e5509fbb1ce7f8aab2", "log": "CSV-180: Add withHeader(Class<? extends Enum>) to CSVFormat  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     }\n \n     /**\n+     * Returns a new {@code CSVFormat} with the header of the format defined by the enum class:\n+     *\n+     * <pre>\n+     * public enum Header {\n+     *     Name, Email, Phone\n+     * }\n+     *\n+     * CSVFormat format = aformat.withHeader(Header.class);\n+     * </pre>\n+     * <p>\n+     * The header is also used by the {@link CSVPrinter}..\n+     * </p>\n+     *\n+     * @param headerEnum\n+     *              the enum defining the header, {@code null} if disabled, empty if parsed automatically, user specified otherwise.\n+     *\n+     * @return A new CSVFormat that is equal to this but with the specified header\n+     * @see #withHeader(String...)\n+     * @see #withSkipHeaderRecord(boolean)\n+     */\n+    public CSVFormat withHeader(final Class<? extends Enum<?>> headerEnum) {\n+        String[] header = null;\n+        if (headerEnum != null) {\n+            Enum<?>[] enumValues = headerEnum.getEnumConstants();\n+            header = new String[enumValues.length];\n+            for (int i = 0; i < enumValues.length; i++) {\n+                header[i] = enumValues[i].name();\n+            }\n+        }\n+        return withHeader(header);\n+    }\n+\n+    /**\n      * Returns a new {@code CSVFormat} with the header comments of the format set to the given values. The comments will\n      * be printed first, before the headers. This setting is ignored by the parser.\n      *\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n import static org.apache.commons.csv.Constants.CR;\n import static org.apache.commons.csv.Constants.CRLF;\n import static org.apache.commons.csv.Constants.LF;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n     }\n \n     @Test\n+    public void testWithHeaderEnum() throws Exception {\n+        final CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(Header.class);\n+        assertArrayEquals(new String[]{ \"Name\", \"Email\", \"Phone\" }, formatWithHeader.getHeader());\n+    }\n+\n+    @Test\n+    public void testWithEmptyEnum() throws Exception {\n+        final CSVFormat formatWithHeader = CSVFormat.DEFAULT.withHeader(EmptyEnum.class);\n+        Assert.assertTrue(formatWithHeader.getHeader().length == 0);\n+    }\n+\n+    @Test\n     public void testJiraCsv154_withCommentMarker() throws IOException {\n         final String comment = \"This is a header comment\";\n         final CSVFormat format = CSVFormat.EXCEL.withHeader(\"H1\", \"H2\").withCommentMarker('#').withHeaderComments(comment);\n         final CSVFormat formatWithRecordSeparator = CSVFormat.DEFAULT.withRecordSeparator(CRLF);\n         assertEquals(CRLF, formatWithRecordSeparator.getRecordSeparator());\n     }\n+\n+    public enum Header {\n+        Name, Email, Phone\n+    }\n+\n+    public enum EmptyEnum {\n+    }\n }", "timestamp": 1462299669, "metainfo": ""}