{"sha": "eb5c332a72365777bb1a9c408463d64ed558cb1f", "log": "Add convenience API CSVFormat.print(File, Charset) (JIRA is down ATM).  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n import static org.apache.commons.csv.Constants.SP;\n import static org.apache.commons.csv.Constants.TAB;\n \n+import java.io.File;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.OutputStreamWriter;\n import java.io.Reader;\n import java.io.Serializable;\n import java.io.StringWriter;\n+import java.nio.charset.Charset;\n import java.sql.ResultSet;\n import java.sql.ResultSetMetaData;\n import java.sql.SQLException;\n     }\n \n     /**\n+     * Prints to the specified output.\n+     *\n+     * <p>\n+     * See also {@link CSVPrinter}.\n+     * </p>\n+     *\n+     * @param out\n+     *            the output\n+     * @param charset \n+     *            A charset\n+     * @return a printer to an output\n+     * @throws IOException\n+     *             thrown if the optional header cannot be printed.\n+     * @since 1.5\n+     */\n+    public CSVPrinter print(final File out, Charset charset) throws IOException {\n+        // The FileWriter will be closed when close() is called.\n+        return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);\n+    }\n+\n+    /**\n      * Prints the {@code value} as the next value on the line to {@code out}. The value will be escaped or encapsulated\n      * as needed. Useful when one wants to avoid creating CSVPrinters.\n      *\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.StringReader;\n import java.io.StringWriter;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.sql.Connection;\n import java.sql.DriverManager;\n import java.sql.ResultSet;\n import java.util.Objects;\n import java.util.Random;\n \n+import org.apache.commons.io.FileUtils;\n import org.junit.Assert;\n import org.junit.Ignore;\n import org.junit.Test;\n     }\n \n     @Test\n+    public void testPrintToFileWithDefaultCharset() throws IOException {\n+        File file = File.createTempFile(getClass().getName(), \".csv\");\n+        try (final CSVPrinter printer = CSVFormat.DEFAULT.print(file, Charset.defaultCharset())) {\n+            printer.printRecord(\"a\", \"b\\\\c\");\n+        }\n+        assertEquals(\"a,b\\\\c\" + recordSeparator, FileUtils.readFileToString(file, Charset.defaultCharset()));\n+    }\n+\n+    @Test\n+    public void testPrintToFileWithCharsetUtf16Be() throws IOException {\n+        File file = File.createTempFile(getClass().getName(), \".csv\");\n+        try (final CSVPrinter printer = CSVFormat.DEFAULT.print(file, StandardCharsets.UTF_16BE)) {\n+            printer.printRecord(\"a\", \"b\\\\c\");\n+        }\n+        assertEquals(\"a,b\\\\c\" + recordSeparator, FileUtils.readFileToString(file, StandardCharsets.UTF_16BE));\n+    }\n+\n+    @Test\n     public void testPrintCustomNullValues() throws IOException {\n         final StringWriter sw = new StringWriter();\n         try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withNullString(\"NULL\"))) {", "timestamp": 1465883612, "metainfo": ""}