{"sha": "259812ec0af308b2ceec4687ffa52b873425bb5b", "log": "Better ivar name.", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n     private final Lexer lexer;\n \n     /** A record buffer for getRecord(). Grows as necessary and is reused. */\n-    private final List<String> record = new ArrayList<>();\n+    private final List<String> recordList = new ArrayList<>();\n \n     /**\n      * The next record number to assign.\n             return;\n         }\n         final String nullString = this.format.getNullString();\n-        this.record.add(inputClean.equals(nullString) ? null : inputClean);\n+        this.recordList.add(inputClean.equals(nullString) ? null : inputClean);\n     }\n \n     /**\n      */\n     CSVRecord nextRecord() throws IOException {\n         CSVRecord result = null;\n-        this.record.clear();\n+        this.recordList.clear();\n         StringBuilder sb = null;\n         final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;\n         do {\n             }\n         } while (this.reusableToken.type == TOKEN);\n \n-        if (!this.record.isEmpty()) {\n+        if (!this.recordList.isEmpty()) {\n             this.recordNumber++;\n             final String comment = sb == null ? null : sb.toString();\n-            result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\n+            result = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment,\n                     this.recordNumber, startCharPosition);\n         }\n         return result;", "timestamp": 1503068539, "metainfo": ""}