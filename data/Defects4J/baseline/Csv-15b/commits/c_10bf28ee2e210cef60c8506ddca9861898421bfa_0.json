{"sha": "10bf28ee2e210cef60c8506ddca9861898421bfa", "log": "eol native  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.commons.csv;\n-\n-import java.io.Serializable;\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.Map;\n-\n-/**\n- * A CSV record\n- *\n- * @author Emmanuel Bourg\n- */\n-public class CSVRecord implements Serializable, Iterable<String> {\n-    \n-    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n-    \n-    /** The values of the record */\n-    private final String[] values;\n-\n-    /** The column name to index mapping. */\n-    private final Map<String, Integer> mapping;\n-\n-    CSVRecord(String[] values, Map<String, Integer> mapping) {\n-        this.values = values != null ? values : EMPTY_STRING_ARRAY;\n-        this.mapping = mapping;\n-    }\n-\n-    /**\n-     * Returns a value by index.\n-     *\n-     * @param i the index of the column retrieved\n-     */\n-    public String get(int i) {\n-        return values[i];\n-    }\n-\n-    /**\n-     * Returns a value by name.\n-     *\n-     * @param name the name of the column retrieved\n-     */\n-    public String get(String name) {\n-        if (mapping == null) {\n-            throw new IllegalStateException(\"No header was specified, the record values can't be accessed by name\");\n-        }\n-\n-        Integer index = mapping.get(name);\n-\n-        return index != null ? values[index.intValue()] : null;\n-    }\n-\n-    public Iterator<String> iterator() {\n-        return Arrays.asList(values).iterator();\n-    }\n-\n-    String[] values() {\n-        return values;\n-    }\n-\n-    /**\n-     * Returns the number of values in this record.\n-     */\n-    public int size() {\n-        return values.length;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return Arrays.toString(values);\n-    }\n-}\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.csv;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.Map;\n+\n+/**\n+ * A CSV record\n+ *\n+ * @author Emmanuel Bourg\n+ */\n+public class CSVRecord implements Serializable, Iterable<String> {\n+    \n+    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n+    \n+    /** The values of the record */\n+    private final String[] values;\n+\n+    /** The column name to index mapping. */\n+    private final Map<String, Integer> mapping;\n+\n+    CSVRecord(String[] values, Map<String, Integer> mapping) {\n+        this.values = values != null ? values : EMPTY_STRING_ARRAY;\n+        this.mapping = mapping;\n+    }\n+\n+    /**\n+     * Returns a value by index.\n+     *\n+     * @param i the index of the column retrieved\n+     */\n+    public String get(int i) {\n+        return values[i];\n+    }\n+\n+    /**\n+     * Returns a value by name.\n+     *\n+     * @param name the name of the column retrieved\n+     */\n+    public String get(String name) {\n+        if (mapping == null) {\n+            throw new IllegalStateException(\"No header was specified, the record values can't be accessed by name\");\n+        }\n+\n+        Integer index = mapping.get(name);\n+\n+        return index != null ? values[index.intValue()] : null;\n+    }\n+\n+    public Iterator<String> iterator() {\n+        return Arrays.asList(values).iterator();\n+    }\n+\n+    String[] values() {\n+        return values;\n+    }\n+\n+    /**\n+     * Returns the number of values in this record.\n+     */\n+    public int size() {\n+        return values.length;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return Arrays.toString(values);\n+    }\n+}", "timestamp": 1332157930, "metainfo": ""}