{"sha": "a6a92598de5983c7278b0daba1a839e5a3db463b", "log": "Make checkstyle happy  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      * Default MySQL format used by the {@code SELECT INTO OUTFILE} and {@code LOAD DATA INFILE} operations.\n      *\n      * <p>\n-     * This is a tab-delimited format with a LF character as the line separator. Values are not quoted and special characters\n-     * are escaped with '\\'.\n+     * This is a tab-delimited format with a LF character as the line separator. Values are not quoted and special\n+     * characters are escaped with '\\'.\n      * </p>\n      *\n      * <p>\n     /**\n      * Sets the record separator of the format to the specified character.\n      *\n-     * <p><strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing currently\n-     * only works for inputs with '\\n', '\\r' and \"\\r\\n\"</p>\n+     * <p><strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing\n+     * currently only works for inputs with '\\n', '\\r' and \"\\r\\n\"</p>\n      *\n      * @param recordSeparator\n      *            the record separator to use for output.\n     /**\n      * Sets the record separator of the format to the specified String.\n      *\n-     * <p><strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing currently\n-     * only works for inputs with '\\n', '\\r' and \"\\r\\n\"</p>\n+     * <p><strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing\n+     * currently only works for inputs with '\\n', '\\r' and \"\\r\\n\"</p>\n      *\n      * @param recordSeparator\n      *            the record separator to use for output.\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      */\n     public List<CSVRecord> getRecords() throws IOException {\n         CSVRecord rec;\n-        // can not use Java 7 diamond notation here, since JavaNCSS will fail, see https://jira.codehaus.org/browse/JAVANCSS-51\n         List<CSVRecord> records = new ArrayList<CSVRecord>();\n         while ((rec = this.nextRecord()) != null) {\n             records.add(rec);\n                     final String header = headerRecord[i];\n                     final boolean containsHeader = hdrMap.containsKey(header);\n                     final boolean emptyHeader = header == null || header.trim().isEmpty();\n-                    if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getAllowMissingColumnNames()))) {\n+                    if (containsHeader &&\n+                            (!emptyHeader || (emptyHeader && !this.format.getAllowMissingColumnNames()))) {\n                         throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                 \"\\\" in \" + Arrays.toString(headerRecord));\n                     }\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n      * Prints all the objects in the given array handling nested collections/arrays as records.\n      *\n      * <p>If the given array only contains simple objects, this method will print a single record like\n-     * {@link #printRecord(Object...)}. If the given collections contains nested collections/arrays those nested elements\n-     * will each be printed as records using {@link #printRecord(Object...)}.</p>\n+     * {@link #printRecord(Object...)}. If the given collections contains nested collections/arrays those nested\n+     * elements will each be printed as records using {@link #printRecord(Object...)}.</p>\n      *\n      * <p>Given the following data structure:</p>\n      * <pre>\n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n      * </p>\n      *\n      * @return the number of this record.\n-     * @see CSVParser#getCurrentLineNumber() \n+     * @see CSVParser#getCurrentLineNumber()\n      */\n     public long getRecordNumber() {\n         return recordNumber;", "timestamp": 1407660605, "metainfo": ""}