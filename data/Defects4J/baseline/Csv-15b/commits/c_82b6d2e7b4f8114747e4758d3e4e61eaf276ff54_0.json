{"sha": "82b6d2e7b4f8114747e4758d3e4e61eaf276ff54", "log": "[CSV-161] Fix Javadoc to say CSVFormat with() methods return a new CSVFormat.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     }\n \n     /**\n-     * Sets the comment start marker of the format to the specified character.\n+     * Returns a new {@code CSVFormat} with the comment start marker of the format set to the specified character.\n      *\n      * Note that the comment start character is only recognized at the start of a line.\n      *\n     }\n \n     /**\n-     * Sets the comment start marker of the format to the specified character.\n+     * Returns a new {@code CSVFormat} with the comment start marker of the format set to the specified character.\n      *\n      * Note that the comment start character is only recognized at the start of a line.\n      *\n     }\n \n     /**\n-     * Sets the delimiter of the format to the specified character.\n+     * Returns a new {@code CSVFormat} with the delimiter of the format set to the specified character.\n      *\n      * @param delimiter\n      *            the delimiter character\n     }\n \n     /**\n-     * Sets the escape character of the format to the specified character.\n+     * Returns a new {@code CSVFormat} with the escape character of the format set to the specified character.\n      *\n      * @param escape\n      *            the escape character\n     }\n \n     /**\n-     * Sets the escape character of the format to the specified character.\n+     * Returns a new {@code CSVFormat} with the escape character of the format set to the specified character.\n      *\n      * @param escape\n      *            the escape character, use {@code null} to disable\n     }\n \n     /**\n-     * Sets the header of the format. The header can either be parsed automatically from the input file with:\n+     * Returns a new {@code CSVFormat} with the header of the format set to the given values. \n+     * The header can either be parsed automatically from the input file with:\n      *\n      * <pre>\n      * CSVFormat format = aformat.withHeader();\n     }\n \n     /**\n-     * Sets the header of the format. The header can either be parsed automatically from the input file with:\n+     * Returns a new {@code CSVFormat} with the header of the format set from the result set metadata. \n+     * The header can either be parsed automatically from the input file with:\n      *\n      * <pre>\n      * CSVFormat format = aformat.withHeader();\n     }\n \n     /**\n-     * Sets the header of the format. The header can either be parsed automatically from the input file with:\n+     * Returns a new {@code CSVFormat} with the header of the format set from the result set metadata.\n+     *  The header can either be parsed automatically from the input file with:\n      *\n      * <pre>\n      * CSVFormat format = aformat.withHeader();\n     }\n \n     /**\n-     * Sets the header comments of the format. The comments will be printed first, before the headers. This setting is\n-     * ignored by the parser.\n+     * Returns a new {@code CSVFormat} with the header comments of the format set to the given values. \n+     * The comments will be printed first, before the headers. This setting is ignored by the parser.\n      *\n      * <pre>\n      * CSVFormat format = aformat.withHeaderComments(&quot;Generated by Apache Commons CSV 1.1.&quot;, new Date());\n     }\n \n     /**\n-     * Sets the missing column names behavior of the format to {@code true}\n+     * Returns a new {@code CSVFormat} with the missing column names behavior of the format set to {@code true}\n      *\n      * @return A new CSVFormat that is equal to this but with the specified missing column names behavior.\n      * @see #withAllowMissingColumnNames(boolean)\n     }\n \n     /**\n-     * Sets the missing column names behavior of the format.\n+     * Returns a new {@code CSVFormat} with the missing column names behavior of the format set to the given value.\n      *\n      * @param allowMissingColumnNames\n      *            the missing column names behavior, {@code true} to allow missing column names in the header line,\n     }\n \n     /**\n-     * Sets the empty line skipping behavior of the format to {@code true}.\n+     * Returns a new {@code CSVFormat} with the empty line skipping behavior of the format set to {@code true}.\n      *\n      * @return A new CSVFormat that is equal to this but with the specified empty line skipping behavior.\n      * @since {@link #withIgnoreEmptyLines(boolean)}\n     }\n \n     /**\n-     * Sets the empty line skipping behavior of the format.\n+     * Returns a new {@code CSVFormat} with the empty line skipping behavior of the format set to the given value.\n      *\n      * @param ignoreEmptyLines\n      *            the empty line skipping behavior, {@code true} to ignore the empty lines between the records,\n     }\n \n     /**\n-     * Sets the trimming behavior of the format to {@code true}.\n+     * Returns a new {@code CSVFormat} with the trimming behavior of the format set to {@code true}.\n      *\n      * @return A new CSVFormat that is equal to this but with the specified trimming behavior.\n      * @see #withIgnoreSurroundingSpaces(boolean)\n     }\n \n     /**\n-     * Sets the trimming behavior of the format.\n+     * Returns a new {@code CSVFormat} with the trimming behavior of the format set to the given value.\n      *\n      * @param ignoreSurroundingSpaces\n      *            the trimming behavior, {@code true} to remove the surrounding spaces, {@code false} to leave the\n     }\n \n     /**\n-     * Sets the header ignore case behavior to {@code true}.\n+     * Returns a new {@code CSVFormat} with the header ignore case behavior set to {@code true}.\n      *\n      * @return A new CSVFormat that will ignore case header name.\n      * @see #withIgnoreHeaderCase(boolean)\n     }\n \n     /**\n-     * Sets if header names should be accessed ignoring case.\n+     * Returns a new {@code CSVFormat} with whether header names should be accessed ignoring case.\n      *\n      * @param ignoreHeaderCase\n      *            the case mapping behavior, {@code true} to access name/values, {@code false} to leave the\n     }\n \n     /**\n-     * Performs conversions to and from null for strings on input and output.\n+     * Returns a new {@code CSVFormat} with conversions to and from null for strings on input and output.\n      * <ul>\n      * <li>\n      * <strong>Reading:</strong> Converts strings equal to the given {@code nullString} to {@code null} when reading\n     }\n \n     /**\n-     * Sets the quoteChar of the format to the specified character.\n+     * Returns a new {@code CSVFormat} with the quoteChar of the format set to the specified character.\n      *\n      * @param quoteChar\n      *            the quoteChar character\n     }\n \n     /**\n-     * Sets the quoteChar of the format to the specified character.\n+     * Returns a new {@code CSVFormat} with the quoteChar of the format set to the specified character.\n      *\n      * @param quoteChar\n      *            the quoteChar character, use {@code null} to disable\n     }\n \n     /**\n-     * Sets the output quote policy of the format to the specified value.\n+     * Returns a new {@code CSVFormat} with the output quote policy of the format set to the specified value.\n      *\n      * @param quoteModePolicy\n      *            the quote policy to use for output.\n     }\n \n     /**\n-     * Sets the record separator of the format to the specified character.\n+     * Returns a new {@code CSVFormat} with the record separator of the format set to the specified character.\n      *\n      * <p>\n      * <strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing currently\n     }\n \n     /**\n-     * Sets the record separator of the format to the specified String.\n+     * Returns a new {@code CSVFormat} with the record separator of the format set to the specified String.\n      *\n      * <p>\n      * <strong>Note:</strong> This setting is only used during printing and does not affect parsing. Parsing currently\n     }\n \n     /**\n-     * Sets skipping the header record to {@code true}.\n+     * Returns a new {@code CSVFormat} with skipping the header record set to {@code true}.\n      *\n      * @return A new CSVFormat that is equal to this but with the the specified skipHeaderRecord setting.\n      * @see #withSkipHeaderRecord(boolean)\n     }\n \n     /**\n-     * Sets whether to skip the header record.\n+     * Returns a new {@code CSVFormat} with whether to skip the header record.\n      *\n      * @param skipHeaderRecord\n      *            whether to skip the header record.", "timestamp": 1453172474, "metainfo": ""}