{"sha": "2305e0e80c9ceaba6736bea4dbf07c0979279280", "log": "[CSV-213] CSVParser#iterator()#hasNext() fails.", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/issues/JiraCsv213Test.java\n+package org.apache.commons.csv.issues;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.csv.CSVFormat;\n+import org.apache.commons.csv.CSVParser;\n+import org.apache.commons.csv.CSVRecord;\n+import org.apache.commons.csv.QuoteMode;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests https://issues.apache.org/jira/browse/CSV-213\n+ * \n+ * This is normal behavior with the current architecture: The iterator() API presents an object that is backed by data\n+ * in the CSVParser as the parser is streaming over the file. The CSVParser is like a forward-only stream. When you\n+ * create a new Iterator you are only created a new view on the same position in the parser's stream. For the behavior\n+ * you want, you need to open a new CSVParser.\n+ *\n+ */\n+@Ignore\n+public class JiraCsv213Test {\n+\n+    private void createEndChannel(File csvFile) {\n+        // @formatter:off\n+        final CSVFormat csvFormat =\n+                CSVFormat.DEFAULT\n+                    .withDelimiter(';')\n+                    .withFirstRecordAsHeader()\n+                    .withRecordSeparator('\\n')\n+                    .withQuoteMode(QuoteMode.ALL);\n+        // @formatter:on\n+        try (CSVParser parser = csvFormat\n+                .parse(new InputStreamReader(new FileInputStream(csvFile), StandardCharsets.UTF_8))) {\n+            if (parser.iterator().hasNext()) {\n+                System.out.println(parser.getCurrentLineNumber());\n+                System.out.println(parser.getRecordNumber());\n+                // get only first record we don't need other's\n+                CSVRecord firstRecord = parser.iterator().next(); // this fails\n+\n+                return;\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Error while adding end channel to csv\", e);\n+        }\n+\n+        return;\n+    }\n+\n+    @Test\n+    public void test() {\n+        createEndChannel(new File(\"src/test/resources/CSV-213/999751170.patch.csv\"));\n+    }\n+}", "timestamp": 1500610209, "metainfo": ""}