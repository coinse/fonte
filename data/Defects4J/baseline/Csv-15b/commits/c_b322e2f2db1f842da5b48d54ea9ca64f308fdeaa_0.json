{"sha": "b322e2f2db1f842da5b48d54ea9ca64f308fdeaa", "log": "Sort methods in alphabetic order  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     }\n \n     /**\n+     * Returns a new {@code CSVFormat} to add a trailing delimiter.\n+     *\n+     * @return A new CSVFormat that is equal to this but with the trailing delimiter setting.\n+     * @since 1.3\n+     */\n+    public CSVFormat withTrailingDelimiter() {\n+        return withTrailingDelimiter(true);\n+    }\n+\n+    /**\n+     * Returns a new {@code CSVFormat} with whether to add a trailing delimiter.\n+     *\n+     * @param trailingDelimiter\n+     *            whether to add a trailing delimiter.\n+     *\n+     * @return A new CSVFormat that is equal to this but with the specified trailing delimiter setting.\n+     * @since 1.3\n+     */\n+    public CSVFormat withTrailingDelimiter(final boolean trailingDelimiter) {\n+        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n+                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n+                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n+    }\n+\n+    /**\n+     * Returns a new {@code CSVFormat} to trim leading and trailing blanks.\n+     *\n+     * @return A new CSVFormat that is equal to this but with the trim setting on.\n+     * @since 1.3\n+     */\n+    public CSVFormat withTrim() {\n+        return withTrim(true);\n+    }\n+\n+    /**\n      * Returns a new {@code CSVFormat} with whether to trim leading and trailing blanks.\n      *\n      * @param trim\n                 ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                 skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n     }\n-\n-    /**\n-     * Returns a new {@code CSVFormat} to add a trailing delimiter.\n-     *\n-     * @return A new CSVFormat that is equal to this but with the trailing delimiter setting.\n-     * @since 1.3\n-     */\n-    public CSVFormat withTrailingDelimiter() {\n-        return withTrailingDelimiter(true);\n-    }\n-\n-    /**\n-     * Returns a new {@code CSVFormat} with whether to add a trailing delimiter.\n-     *\n-     * @param trailingDelimiter\n-     *            whether to add a trailing delimiter.\n-     *\n-     * @return A new CSVFormat that is equal to this but with the specified trailing delimiter setting.\n-     * @since 1.3\n-     */\n-    public CSVFormat withTrailingDelimiter(final boolean trailingDelimiter) {\n-        return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n-                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n-                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase, trim, trailingDelimiter);\n-    }\n-\n-    /**\n-     * Returns a new {@code CSVFormat} to trim leading and trailing blanks.\n-     *\n-     * @return A new CSVFormat that is equal to this but with the trim setting on.\n-     * @since 1.3\n-     */\n-    public CSVFormat withTrim() {\n-        return withTrim(true);\n-    }\n }", "timestamp": 1462518463, "metainfo": ""}