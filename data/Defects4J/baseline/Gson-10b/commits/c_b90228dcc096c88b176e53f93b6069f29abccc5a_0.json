{"sha": "b90228dcc096c88b176e53f93b6069f29abccc5a", "log": "Enable serialization of nulls within Maps.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n import java.text.SimpleDateFormat;\n import java.util.Collection;\n import java.util.Date;\n-import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.LinkedList;\n import java.util.List;\n \n     public JsonElement serialize(Collection src, Type typeOfSrc, JsonSerializationContext context) {\n       if (src == null) {\n-        return JsonNull.INSTANCE;\n+        return JsonNull.createJsonNull();\n       }\n       JsonArray array = new JsonArray();\n       Type childGenericType = null;\n       if (typeOfSrc instanceof ParameterizedType) {\n         childGenericType = new TypeInfoMap(typeOfSrc).getValueType();        \n       }\n-      for (Iterator iterator = src.entrySet().iterator(); iterator.hasNext(); ) {\n-        Map.Entry entry = (Map.Entry) iterator.next();\n+\n+      for (Map.Entry entry : (Set<Map.Entry>) src.entrySet()) {\n         Object value = entry.getValue();\n-        Type childType = (childGenericType == null) ? \n-            childType = value.getClass() : childGenericType;\n-        JsonElement valueElement = context.serialize(value, childType);\n-        map.add(entry.getKey().toString(), valueElement);\n+\n+        JsonElement valueElement;\n+        if (value == null) {\n+          valueElement = JsonNull.createJsonNull();\n+        } else {\n+          Type childType = (childGenericType == null) ? \n+              childType = value.getClass() : childGenericType;\n+          valueElement = context.serialize(value, childType);\n+        }\n+        map.add(String.valueOf(entry.getKey()), valueElement);\n       }\n       return map;\n     }\n--- a/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n       JsonElement jsonChild = jsonArray.get(i);\n       Object child;\n \n-      if (jsonChild == null) {\n+      if (jsonChild == null || jsonChild.isJsonNull()) {\n         child = null;\n       } else if (jsonChild instanceof JsonObject) {\n         child = visitChildAsObject(arrayTypeInfo.getComponentRawType(), jsonChild);\n--- a/gson/src/main/java/com/google/gson/JsonNull.java\n+++ b/gson/src/main/java/com/google/gson/JsonNull.java\n package com.google.gson;\n \n /**\n- * A class representing a Json null value.\n+ * A class representing a Json {@code null} value.\n  *\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n public final class JsonNull extends JsonElement {\n \n-  static final JsonNull INSTANCE = new JsonNull();\n+  private static final JsonNull INSTANCE = new JsonNull(true);\n+  \n+  /**\n+   * @deprecated use the creation method, {@link #createJsonNull()}, instead.\n+   */\n+  @Deprecated\n+  public JsonNull() {\n+    // Do nothing\n+  }\n+  \n+  private JsonNull(boolean placeholder) {\n+    // Prevent instantiation\n+  }\n   \n   @Override\n   protected void toString(StringBuilder sb) {\n   @Override\n   public boolean equals(Object other) {\n     return other instanceof JsonNull;\n-  }  \n+  }\n+  \n+  public static JsonNull createJsonNull() {\n+    return INSTANCE;\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n   public JsonElement get(String memberName) {\n     if (members.containsKey(memberName)) {\n       JsonElement member = members.get(memberName);\n-      return member == null ? JsonNull.INSTANCE : member;\n+      return member == null ? JsonNull.createJsonNull() : member;\n     } else {\n       return null;\n     }\n--- a/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n       JsonElement child = json.getAsJsonObject().get(fName);\n       if (child == null) {\n         return true;\n-      } else if (JsonNull.INSTANCE.equals(child)) {\n+      } else if (child.isJsonNull()) {\n         TypeInfo typeInfo = new TypeInfo(actualTypeOfField);\n         if (!typeInfo.isPrimitive()) {\n           f.set(parent, null);\n--- a/gson/src/main/java/com/google/gson/JsonParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonParser.java\n   final private JsonNull JsonNull() throws ParseException {\n   Token t;\n     t = jj_consume_token(NULL);\n-               {if (true) return JsonNull.INSTANCE;}\n+               {if (true) return JsonNull.createJsonNull();}\n     throw new Error(\"Missing return statement in function\");\n   }\n \n       o = JsonBoolean();\n       break;\n     case NULL:\n-      jj_consume_token(NULL);\n+      o = JsonNull();\n       break;\n     default:\n       jj_la1[6] = jj_gen;\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n   public void visitArrayField(Field f, Type typeOfF, Object obj) {\n     if (isFieldNull(f, obj)) {\n       if (serializeNulls) {\n-        addChildAsElement(f, JsonNull.INSTANCE);\n+        addChildAsElement(f, JsonNull.createJsonNull());\n       }\n     } else {\n       Object array = getFieldValue(f, obj);\n   public void visitObjectField(Field f, Type typeOfF, Object obj) {\n     if (isFieldNull(f, obj)) {\n       if (serializeNulls) {\n-        addChildAsElement(f, JsonNull.INSTANCE);\n+        addChildAsElement(f, JsonNull.createJsonNull());\n       }\n     } else {\n       Object fieldValue = getFieldValue(f, obj);\n     JsonSerializer serializer = serializers.getHandlerFor(objType);\n     if (serializer != null) {\n       if (obj == null) {\n-        assignToRoot(JsonNull.INSTANCE);\n+        assignToRoot(JsonNull.createJsonNull());\n       } else {\n         assignToRoot(serializer.serialize(obj, objType, context));\n       }\n       Object obj = f.get(parent);\n       if (obj == null) {\n         if (serializeNulls) {\n-          addChildAsElement(f, JsonNull.INSTANCE);\n+          addChildAsElement(f, JsonNull.createJsonNull());\n         }\n         return true;\n       }\n--- a/gson/src/main/java/com/google/gson/JsonTreeNavigator.java\n+++ b/gson/src/main/java/com/google/gson/JsonTreeNavigator.java\n         }\n       }\n       visitor.endArray(array);\n-    } else if (element.isJsonObject()){\n+    } else if (element.isJsonObject()) {\n       JsonObject object = element.getAsJsonObject();\n       visitor.startObject(object);\n       boolean isFirst = true;\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n     String json = gson.toJson(map, typeOfMap);\n     assertEquals(\"{}\", json);\n   }\n+  \n+  public void testMapDeserializationEmpty() {\n+    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n+    Map<String, Integer> map = gson.fromJson(\"{}\", typeOfMap);\n+    assertTrue(map.isEmpty());\n+  }\n+  \n+  public void testMapSerializationWithNullValue() {\n+    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n+    map.put(\"abc\", null);\n+    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n+    String json = gson.toJson(map, typeOfMap);\n+    \n+    // Maps are represented as JSON objects, so ignoring null field\n+    assertEquals(\"{}\", json);\n+  }\n+  \n+  public void testMapDeserializationWithNullValue() {\n+    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n+    Map<String, Integer> map = gson.fromJson(\"{\\\"abc\\\":null}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertNull(map.get(\"abc\"));\n+  }\n+  \n+  public void testMapSerializationWithNullValueButSerializeNulls() {\n+    gson = new GsonBuilder().serializeNulls().create();\n+    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n+    map.put(\"abc\", null);\n+    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n+    String json = gson.toJson(map, typeOfMap);\n+\n+    assertEquals(\"{\\\"abc\\\":null}\", json);\n+  }\n+  \n+  public void testMapSerializationWithNullKey() {\n+    Map<String, Integer> map = new LinkedHashMap<String, Integer>();\n+    map.put(null, 123);\n+    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n+    String json = gson.toJson(map, typeOfMap);\n+\n+    assertEquals(\"{\\\"null\\\":123}\", json);\n+  }\n+  \n+  public void testMapDeserializationWithNullKey() {\n+    Type typeOfMap = new TypeToken<Map<String, Integer>>() {}.getType();\n+    Map<String, Integer> map = gson.fromJson(\"{\\\"null\\\":123}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertNull(map.get(null));\n+  }\n \n   public void testParameterizedMapSubclassSerialization() {\n     MyParameterizedMap<String, String> map = new MyParameterizedMap<String, String>();", "timestamp": 1228086074, "metainfo": ""}