{"sha": "38ce53766ee5c98e5b9aeac58d8db14eca6de8a4", "log": "More consistency on serializeNulls: we never emit the empty string for top-level objects.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     boolean oldSerializeNulls = writer.getSerializeNulls();\n     writer.setSerializeNulls(serializeNulls);\n     try {\n-      Streams.write(jsonElement, serializeNulls, writer);\n+      Streams.write(jsonElement, writer);\n     } catch (IOException e) {\n       throw new JsonIOException(e);\n     } finally {\n--- a/gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/GsonToMiniGsonTypeAdapterFactory.java\n           return;\n         }\n         JsonElement element = serializer.serialize(value, type, serializationContext);\n-        Streams.write(element, serializeNulls, writer);\n+        Streams.write(element, writer);\n       }\n \n       private TypeAdapter<T> delegate() {\n--- a/gson/src/main/java/com/google/gson/JsonElement.java\n+++ b/gson/src/main/java/com/google/gson/JsonElement.java\n       StringWriter stringWriter = new StringWriter();\n       JsonWriter jsonWriter = new JsonWriter(stringWriter);\n       jsonWriter.setLenient(true);\n-      Streams.write(this, true, jsonWriter);\n+      Streams.write(this, jsonWriter);\n       return stringWriter.toString();\n     } catch (IOException e) {\n       throw new AssertionError(e);\n--- a/gson/src/main/java/com/google/gson/internal/Streams.java\n+++ b/gson/src/main/java/com/google/gson/internal/Streams.java\n   /**\n    * Writes the JSON element to the writer, recursively.\n    */\n-  public static void write(JsonElement element, boolean serializeNulls, JsonWriter writer)\n+  public static void write(JsonElement element, JsonWriter writer)\n       throws IOException {\n     if (element == null || element.isJsonNull()) {\n-      if (serializeNulls) {\n-        writer.nullValue();\n-      }\n-\n+      writer.nullValue();\n     } else if (element.isJsonPrimitive()) {\n       JsonPrimitive primitive = element.getAsJsonPrimitive();\n       if (primitive.isNumber()) {\n           writer.nullValue();\n           continue;\n         }\n-        write(e, serializeNulls, writer);\n+        write(e, writer);\n       }\n       writer.endArray();\n \n       writer.beginObject();\n       for (Map.Entry<String, JsonElement> e : element.getAsJsonObject().entrySet()) {\n         JsonElement value = e.getValue();\n-        if (!serializeNulls && value.isJsonNull()) {\n-          continue;\n-        }\n         writer.name(e.getKey());\n-        write(value, serializeNulls, writer);\n+        write(value, writer);\n       }\n       writer.endObject();\n \n--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java\n     private final TypeAdapter<V> valueTypeAdapter;\n     private final ObjectConstructor<? extends Map<K, V>> constructor;\n \n-    public Adapter(MiniGson context, Type keyType, TypeAdapter<K> keyTypeAdapter, \n+    public Adapter(MiniGson context, Type keyType, TypeAdapter<K> keyTypeAdapter,\n         Type valueType, TypeAdapter<V> valueTypeAdapter,\n         ObjectConstructor<? extends Map<K, V>> constructor) {\n       this.keyTypeAdapter =\n         writer.beginArray();\n         for (int i = 0; i < keys.size(); i++) {\n           writer.beginArray(); // entry array\n-          Streams.write(keys.get(i), true, writer);\n+          Streams.write(keys.get(i), writer);\n           valueTypeAdapter.write(writer, values.get(i));\n           writer.endArray();\n         }\n--- a/gson/src/test/java/com/google/gson/MixedStreamTest.java\n+++ b/gson/src/test/java/com/google/gson/MixedStreamTest.java\n \n     StringWriter stringWriter = new StringWriter();\n     gson.toJson(null, new JsonWriter(stringWriter));\n-    assertEquals(\"\", stringWriter.toString());\n+    assertEquals(\"null\", stringWriter.toString());\n   }\n \n   public void testReadNulls() {\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n     assertEquals(json, target.getExpectedJson());\n   }\n   public void testNullSerialization() throws Exception {\n-    assertEquals(\"\", gson.toJson(null));\n+    assertEquals(\"null\", gson.toJson(null));\n   }\n \n   public void testEmptyStringDeserialization() throws Exception {\n--- a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n   public void testTopLevelNullObjectSerializationWithWriter() {\n     StringWriter writer = new StringWriter();\n     gson.toJson(null, writer);\n-    assertEquals(\"\", writer.toString());\n+    assertEquals(\"null\", writer.toString());\n   }\n \n   public void testTopLevelNullObjectDeserializationWithReader() {\n     Integer nullIntObject = gson.fromJson(reader, Integer.class);\n     assertNull(nullIntObject);\n   }\n-  \n+\n   public void testReadWriteTwoStrings() throws IOException {\n     Gson gson= new Gson();\n     CharArrayWriter writer= new CharArrayWriter();\n     String actualTwo = gson.fromJson(parser.next(), String.class);\n     assertEquals(\"two\", actualTwo);\n   }\n-  \n+\n   public void testReadWriteTwoObjects() throws IOException {\n     Gson gson= new Gson();\n     CharArrayWriter writer= new CharArrayWriter();", "timestamp": 1317431411, "metainfo": ""}