{"sha": "9fb39c89ea06ce5472d6979e264de5d9cc031c91", "log": "Switched Locale type adapter to new-style.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n import java.util.Queue;\n import java.util.Set;\n import java.util.SortedSet;\n-import java.util.StringTokenizer;\n import java.util.TimeZone;\n import java.util.TreeSet;\n \n \n   @SuppressWarnings(\"unchecked\")\n   private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\n-  private static final LocaleTypeAdapter LOCALE_TYPE_ADAPTER = new LocaleTypeAdapter();\n   private static final BitSetTypeAdapter BIT_SET_ADAPTER = new BitSetTypeAdapter();\n   private static final DefaultInetAddressAdapter INET_ADDRESS_ADAPTER =\n       new DefaultInetAddressAdapter();\n     ParameterizedTypeHandlerMap<JsonSerializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n \n-    map.register(Locale.class, LOCALE_TYPE_ADAPTER, true);\n     map.register(Date.class, DATE_TYPE_ADAPTER, true);\n     map.register(java.sql.Date.class, JAVA_SQL_DATE_TYPE_ADAPTER, true);\n     map.register(Timestamp.class, DATE_TYPE_ADAPTER, true);\n   private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers() {\n     ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n-    map.register(Locale.class, wrapDeserializer(LOCALE_TYPE_ADAPTER), true);\n     map.register(Date.class, wrapDeserializer(DATE_TYPE_ADAPTER), true);\n     map.register(java.sql.Date.class, wrapDeserializer(JAVA_SQL_DATE_TYPE_ADAPTER), true);\n     map.register(Timestamp.class, wrapDeserializer(TIMESTAMP_DESERIALIZER), true);\n     }\n   }\n \n-  private static final class LocaleTypeAdapter\n-      implements JsonSerializer<Locale>, JsonDeserializer<Locale> {\n-    public JsonElement serialize(Locale src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src.toString());\n-    }\n-\n-    public Locale deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      String locale = json.getAsString();\n-      StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");\n-      String language = null;\n-      String country = null;\n-      String variant = null;\n-      if (tokenizer.hasMoreElements()) {\n-        language = tokenizer.nextToken();\n-      }\n-      if (tokenizer.hasMoreElements()) {\n-        country = tokenizer.nextToken();\n-      }\n-      if (tokenizer.hasMoreElements()) {\n-        variant = tokenizer.nextToken();\n-      }\n-      if (country == null && variant == null) {\n-        return new Locale(language);\n-      } else if (variant == null) {\n-        return new Locale(language, country);\n-      } else {\n-        return new Locale(language, country, variant);\n-      }\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return LocaleTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n   @SuppressWarnings(\"unchecked\")\n   private static final class CollectionTypeAdapter implements JsonSerializer<Collection>,\n       JsonDeserializer<Collection> {\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n         .factory(TypeAdapters.URL_FACTORY)\n         .factory(TypeAdapters.URI_FACTORY)\n         .factory(TypeAdapters.UUID_FACTORY)\n+        .factory(TypeAdapters.LOCALE_FACTORY)\n         .typeAdapter(BigDecimal.class, new BigDecimalTypeAdapter())\n         .typeAdapter(BigInteger.class, new BigIntegerTypeAdapter())\n         .factory(excludedTypeFactory)\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n+import java.util.Locale;\n+import java.util.StringTokenizer;\n import java.util.UUID;\n \n import com.google.gson.reflect.TypeToken;\n \n   public static final TypeAdapter.Factory UUID_FACTORY = newFactory(UUID.class, UUID);\n \n+  public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {\n+    public Locale read(JsonReader reader) throws IOException {\n+      String locale = reader.nextString();\n+      StringTokenizer tokenizer = new StringTokenizer(locale, \"_\");\n+      String language = null;\n+      String country = null;\n+      String variant = null;\n+      if (tokenizer.hasMoreElements()) {\n+        language = tokenizer.nextToken();\n+      }\n+      if (tokenizer.hasMoreElements()) {\n+        country = tokenizer.nextToken();\n+      }\n+      if (tokenizer.hasMoreElements()) {\n+        variant = tokenizer.nextToken();\n+      }\n+      if (country == null && variant == null) {\n+        return new Locale(language);\n+      } else if (variant == null) {\n+        return new Locale(language, country);\n+      } else {\n+        return new Locale(language, country, variant);\n+      }\n+    }\n+    public void write(JsonWriter writer, Locale value) throws IOException {\n+      writer.value(value.toString());\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);\n+\n   public static final TypeAdapter EXCLUDED_TYPE_ADAPTER = new TypeAdapter<Object>() {\n     @Override public Object read(JsonReader reader) throws IOException {\n       reader.skipValue();", "timestamp": 1314328441, "metainfo": ""}