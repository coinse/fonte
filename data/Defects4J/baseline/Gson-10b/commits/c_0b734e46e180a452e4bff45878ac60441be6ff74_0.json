{"sha": "0b734e46e180a452e4bff45878ac60441be6ff74", "log": "Incorporated code review comments from r1061.  Made nullSafe() an instance method instead of a static method. Updated code javadoc to match Guava style.", "commit": "\n--- a/gson/src/main/java/com/google/gson/TypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TypeAdapter.java\n    * This wrapper method is used to make a type adapter null tolerant. In general, a\n    * type adapter is required to handle nulls in write and read methods. Here is how this\n    * is typically done:<br>\n-   * <pre>{@code\n-   Gson gson = new GsonBuilder().registerTypeAdapter(Foo.class,\n-    new TypeAdapter<Foo>() {\n-      public Foo read(JsonReader in) throws IOException {\n-        if (in.peek() == JsonToken.NULL) {\n-          in.nextNull();\n-          return null;\n-        }\n-        // read a Foo from in and return it\n-      }\n-      public void write(JsonWriter out, Foo src) throws IOException {\n-        if (src == null) {\n-          out.nullValue();\n-          return;\n-        }\n-        // write src as JSON to out\n-      }\n-    ).create();\n+   * <pre>   {@code\n+   *\n+   * Gson gson = new GsonBuilder().registerTypeAdapter(Foo.class,\n+   *   new TypeAdapter<Foo>() {\n+   *     public Foo read(JsonReader in) throws IOException {\n+   *       if (in.peek() == JsonToken.NULL) {\n+   *         in.nextNull();\n+   *         return null;\n+   *       }\n+   *       // read a Foo from in and return it\n+   *     }\n+   *     public void write(JsonWriter out, Foo src) throws IOException {\n+   *       if (src == null) {\n+   *         out.nullValue();\n+   *         return;\n+   *       }\n+   *       // write src as JSON to out\n+   *     }\n+   *   }).create();\n    * }</pre>\n    * You can avoid this boilerplate handling of nulls by wrapping your type adapter with\n    * {@link #nullSafe(TypeAdapter)} method. Here is how we will rewrite the above example:\n-   * <pre>{@code\n-   Gson gson = new GsonBuilder().registerTypeAdapter(Foo.class,\n-    TypeAdapter.nullSafe(new TypeAdapter<Foo>() {\n-      public Foo read(JsonReader in) throws IOException {\n-        // read a Foo from in and return it\n-      }\n-      public void write(JsonWriter out, Foo src) throws IOException {\n-        // write src as JSON to out\n-      }\n-    )).create();\n+   * <pre>   {@code\n+   *\n+   * Gson gson = new GsonBuilder().registerTypeAdapter(Foo.class,\n+   *   new TypeAdapter<Foo>() {\n+   *     public Foo read(JsonReader in) throws IOException {\n+   *       // read a Foo from in and return it\n+   *     }\n+   *     public void write(JsonWriter out, Foo src) throws IOException {\n+   *       // write src as JSON to out\n+   *     }\n+   *   }.nullSafe()).create();\n    * }</pre>\n    * Note that we didn't need to check for nulls in our type adapter after we used nullSafe. \n    */\n-  public static <T> TypeAdapter<T> nullSafe(final TypeAdapter<T> typeAdapter) {\n+  public TypeAdapter<T> nullSafe() {\n     return new TypeAdapter<T>() {\n       @Override public void write(JsonWriter out, T value) throws IOException {\n         if (value == null) {\n           out.nullValue();\n         } else {\n-          typeAdapter.write(out, value);\n+          write(out, value);\n         }\n       }\n       @Override public T read(JsonReader reader) throws IOException {\n           reader.nextNull();\n           return null;\n         }\n-        return typeAdapter.read(reader);\n+        return read(reader);\n       }\n     };\n   }\n--- a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java\n       gson.fromJson(json, Truck.class);\n       fail();\n     } catch (JsonSyntaxException expected) {}\n-    gson = new GsonBuilder().registerTypeAdapter(\n-        Person.class, TypeAdapter.nullSafe(typeAdapter)).create();\n+    gson = new GsonBuilder().registerTypeAdapter(Person.class, typeAdapter.nullSafe()).create();\n     assertEquals(\"{\\\"horsePower\\\":1.0,\\\"passengers\\\":[null]}\", gson.toJson(truck, Truck.class));\n     truck = gson.fromJson(json, Truck.class);\n     assertEquals(1.0D, truck.horsePower);", "timestamp": 1323159480, "metainfo": ""}