{"sha": "c9cb05fc720a8b041a7fbcf1068beb85a134674a", "log": "Do not leak out a ClassCastException to our clients.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n    * @throws JsonParseException if json is not a valid representation for an object of type typeOfT\n    * @since 1.3\n    */\n-  @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(JsonElement json, Class<T> classOfT) throws JsonParseException {\n     T target = classOfT.cast(fromJson(json, (Type) classOfT));\n     return target;\n--- a/gson/src/main/java/com/google/gson/JsonElement.java\n+++ b/gson/src/main/java/com/google/gson/JsonElement.java\n    * first.\n    *\n    * @return get this element as a {@link JsonObject}.\n-   * @throws ClassCastException if the element is of another type.\n+   * @throws IllegalStateException if the element is of another type.\n    */\n   public JsonObject getAsJsonObject() {\n-    return (JsonObject) this;\n+    if (isJsonObject()) {\n+      return (JsonObject) this;\n+    } else {\n+      throw new IllegalStateException(\"This is not a JSON Object.\");\n+    }\n   }\n \n   /**\n    * first.\n    *\n    * @return get this element as a {@link JsonArray}.\n-   * @throws ClassCastException if the element is of another type.\n+   * @throws IllegalStateException if the element is of another type.\n    */\n   public JsonArray getAsJsonArray() {\n-    return (JsonArray) this;\n+    if (isJsonArray()) {\n+      return (JsonArray) this;\n+    } else {\n+      throw new IllegalStateException(\"This is not a JSON Array.\");\n+    }\n   }\n \n   /**\n    * first.\n    *\n    * @return get this element as a {@link JsonPrimitive}.\n-   * @throws ClassCastException if the element is of another type.\n+   * @throws IllegalStateException if the element is of another type.\n    */\n   public JsonPrimitive getAsJsonPrimitive() {\n-    return (JsonPrimitive) this;\n+    if (isJsonPrimitive()) {\n+      return (JsonPrimitive) this;\n+    } else {\n+      throw new IllegalStateException(\"This is not a JSON Primitive.\");\n+    }\n   }\n \n   /**\n    * first.\n    *\n    * @return get this element as a {@link JsonNull}.\n-   * @throws ClassCastException if the element is of another type.\n+   * @throws IllegalStateException if the element is of another type.\n    * @since 1.2\n    */\n   public JsonNull getAsJsonNull() {\n-    return (JsonNull) this;\n+    if (isJsonNull()) {\n+      return (JsonNull) this;\n+    } else {\n+      throw new IllegalStateException(\"This is not a JSON Null.\");\n+    }\n   }\n \n   /**\n--- a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonParserTest.java\n \n package com.google.gson.functional;\n \n-import com.google.gson.Gson;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonParser;\n-import com.google.gson.common.TestTypes.BagOfPrimitives;\n+import java.io.StringReader;\n \n import junit.framework.TestCase;\n \n-import java.io.StringReader;\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.common.TestTypes.BagOfPrimitives;\n+import com.google.gson.common.TestTypes.Nested;\n \n /**\n  * Functional tests for that use JsonParser and related Gson methods\n     assertEquals(11, target.intValue);\n     assertEquals(\"foo\", target.stringValue);\n   }\n+  \n+  public void testBadTypeForDeserializingCustomTree() {\n+    JsonObject obj = new JsonObject();\n+    obj.addProperty(\"stringValue\", \"foo\");\n+    obj.addProperty(\"intValue\", 11);\n+    JsonArray array = new JsonArray();\n+    array.add(obj);\n+    try {\n+      gson.fromJson(array, BagOfPrimitives.class);\n+      fail(\"BagOfPrimitives is not an array\");\n+    } catch (UnsupportedOperationException expected) { }\n+  }\n+  \n+  public void testBadFieldTypeForCustomDeserializerCustomTree() {\n+    JsonArray array = new JsonArray();\n+    array.add(new JsonPrimitive(\"blah\"));\n+    JsonObject obj = new JsonObject();\n+    obj.addProperty(\"stringValue\", \"foo\");\n+    obj.addProperty(\"intValue\", 11);\n+    obj.add(\"longValue\", array);\n+\n+    try {\n+      gson.fromJson(obj, BagOfPrimitives.class);\n+      fail(\"BagOfPrimitives is not an array\");\n+    } catch (JsonParseException expected) { }\n+  }\n+\n+  public void testBadFieldTypeForDeserializingCustomTree() {\n+    JsonArray array = new JsonArray();\n+    array.add(new JsonPrimitive(\"blah\"));\n+    JsonObject primitive1 = new JsonObject();\n+    primitive1.addProperty(\"string\", \"foo\");\n+    primitive1.addProperty(\"intValue\", 11);\n+\n+    JsonObject obj = new JsonObject();\n+    obj.add(\"primitive1\", primitive1);\n+    obj.add(\"primitive2\", array);\n+    \n+    try {\n+      gson.fromJson(obj, Nested.class);\n+      fail(\"Nested has field BagOfPrimitives which is not an array\");\n+    } catch (IllegalStateException expected) { }\n+  }\n \n   public void testChangingCustomTreeAndDeserializing() {\n     StringReader json = \n--- a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n   private interface Immutable {    \n   }\n   \n-  public static final class Amount<Q extends Quantity> implements\n-      Measurable<Q>, Field<Amount<?>>, Serializable, Immutable {\n+  public static final class Amount<Q extends Quantity> \n+      implements Measurable<Q>, Field<Amount<?>>, Serializable, Immutable {\n+    private static final long serialVersionUID = -7560491093120970437L;\n+\n     int value = 30;\n   }\n   ", "timestamp": 1238183013, "metainfo": ""}