{"sha": "451a9dbe6672f773c7cb4ecee7a8f2eea79b5b6b", "log": "Add ability to allocate memory for an object without the use of the default constructor.", "commit": "\n--- a/gson/src/main/java/com/google/gson/MappedObjectConstructor.java\n+++ b/gson/src/main/java/com/google/gson/MappedObjectConstructor.java\n \n package com.google.gson;\n \n-import java.lang.reflect.AccessibleObject;\n+import sun.misc.Unsafe;\n+\n import java.lang.reflect.Array;\n import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Type;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n  */\n final class MappedObjectConstructor implements ObjectConstructor {\n   private static final Logger log = Logger.getLogger(MappedObjectConstructor.class.getName());\n+  private static final Unsafe THE_UNSAFE =  AccessController.doPrivileged(\n+      new PrivilegedAction<Unsafe>() {\n+        public Unsafe run() {\n+          try {\n+            Field f = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+            f.setAccessible(true);\n+            return (Unsafe) f.get(null);\n+          } catch (NoSuchFieldException e) {\n+            throw new Error();\n+          } catch (IllegalAccessException e) {\n+            throw new Error();\n+          }\n+        }\n+      });\n \n   private final ParameterizedTypeHandlerMap<InstanceCreator<?>> instanceCreatorMap;\n   \n     return Array.newInstance(Types.getRawType(type), length);\n   }\n \n+  @SuppressWarnings({\"unchecked\", \"cast\"})\n   private <T> T constructWithNoArgConstructor(Type typeOfT) {\n     try {\n-      Constructor<T> constructor = getNoArgsConstructor(typeOfT);\n+      Class<T> clazz = (Class<T>) Types.getRawType(typeOfT);\n+      Constructor<T> constructor = getNoArgsConstructor(clazz);\n       if (constructor == null) {\n-        throw new RuntimeException((\"No-args constructor for \" + typeOfT + \" does not exist. \"\n-            + \"Register an InstanceCreator with Gson for this type to fix this problem.\"));\n+        return (T) THE_UNSAFE.allocateInstance(clazz);\n       }\n       return constructor.newInstance();\n     } catch (InstantiationException e) {\n     }\n   }\n \n-  @SuppressWarnings({\"unchecked\", \"cast\"})\n-  private <T> Constructor<T> getNoArgsConstructor(Type typeOfT) {\n-    Class<?> clazz = Types.getRawType(typeOfT);\n-    Constructor<T>[] declaredConstructors = (Constructor<T>[]) clazz.getDeclaredConstructors();\n-    AccessibleObject.setAccessible(declaredConstructors, true);\n-    for (Constructor<T> constructor : declaredConstructors) {\n-      if (constructor.getParameterTypes().length == 0) {\n-        return constructor;\n-      }\n+  private <T> Constructor<T> getNoArgsConstructor(Class<T> clazz) {\n+    try {\n+      Constructor<T> declaredConstructor = clazz.getDeclaredConstructor();\n+      declaredConstructor.setAccessible(true);\n+      return declaredConstructor;\n+    } catch (Exception e) {\n+      return null;\n     }\n-    return null;\n   }\n \n   /**\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import com.google.gson.common.TestTypes.CrazyLongTypeAdapter;\n+\n+import junit.framework.TestCase;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Unit tests for the {@link MappedObjectConstructor} class.\n+ *\n+ * @author Joel Leitch\n+ */\n+public class MappedObjectConstructorTest extends TestCase {\n+  private ParameterizedTypeHandlerMap<InstanceCreator<?>> creatorMap;\n+  private MappedObjectConstructor constructor;\n+  \n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    creatorMap = new ParameterizedTypeHandlerMap<InstanceCreator<?>>();\n+    constructor = new MappedObjectConstructor(creatorMap);\n+  }\n+\n+  public void testInstanceCreatorTakesTopPrecedence() throws Exception {\n+    creatorMap.register(ObjectWithDefaultConstructor.class, new MyInstanceCreator());\n+    ObjectWithDefaultConstructor obj = \n+        constructor.construct(ObjectWithDefaultConstructor.class);\n+    assertEquals(\"instanceCreator\", obj.stringValue);\n+    assertEquals(10, obj.intValue);\n+  }\n+  \n+  public void testNoInstanceCreatorInvokesDefaultConstructor() throws Exception {\n+    ObjectWithDefaultConstructor expected = new ObjectWithDefaultConstructor();\n+    ObjectWithDefaultConstructor obj = \n+        constructor.construct(ObjectWithDefaultConstructor.class);\n+    assertEquals(expected.stringValue, obj.stringValue);\n+    assertEquals(expected.intValue, obj.intValue);\n+  }\n+  \n+  public void testNoDefaultConstructor() throws Exception {\n+    ObjectNoDefaultConstructor obj = constructor.construct(ObjectNoDefaultConstructor.class);\n+    assertNull(obj.stringValue);\n+    assertEquals(0, obj.intValue);\n+  }\n+  \n+  private static class MyInstanceCreator\n+      implements InstanceCreator<ObjectWithDefaultConstructor> {\n+    public ObjectWithDefaultConstructor createInstance(Type type) {\n+      return new ObjectWithDefaultConstructor(\"instanceCreator\", 10);\n+    }\n+  }\n+  \n+  private static class ObjectWithDefaultConstructor {\n+    public final String stringValue;\n+    public final int intValue;\n+    \n+    private ObjectWithDefaultConstructor() {\n+      this(\"default\", 5);\n+    }\n+    \n+    public ObjectWithDefaultConstructor(String stringValue, int intValue) {\n+      this.stringValue = stringValue;\n+      this.intValue = intValue;\n+    }\n+  }\n+  \n+  private static class ObjectNoDefaultConstructor extends ObjectWithDefaultConstructor {\n+    public ObjectNoDefaultConstructor(String stringValue, int intValue) {\n+      super(stringValue, intValue);\n+    }\n+  }\n+}", "timestamp": 1297448527, "metainfo": ""}