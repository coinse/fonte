{"sha": "11a29b63b0af33c340072091db9d036c6311f6a1", "log": "Implemented suggested changes from r324 code review.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n \n     public JsonElement serialize(Collection src, Type typeOfSrc, JsonSerializationContext context) {\n       if (src == null) {\n-        return JsonNull.createJsonNull();\n+        return new JsonNull();\n       }\n       JsonArray array = new JsonArray();\n       Type childGenericType = null;\n \n         JsonElement valueElement;\n         if (value == null) {\n-          valueElement = JsonNull.createJsonNull();\n+          valueElement = new JsonNull();\n         } else {\n           Type childType = (childGenericType == null) ? \n               childType = value.getClass() : childGenericType;\n--- a/gson/src/main/java/com/google/gson/JsonNull.java\n+++ b/gson/src/main/java/com/google/gson/JsonNull.java\n  */\n public final class JsonNull extends JsonElement {\n \n-  private static final JsonNull INSTANCE = new JsonNull(true);\n-  \n   /**\n-   * @deprecated Instead, use the creation method, {@link #createJsonNull()}.\n+   * Creates a new JsonNull object.\n    */\n-  @Deprecated\n   public JsonNull() {\n     // Do nothing\n-  }\n-  \n-  private JsonNull(boolean placeholder) {\n-    // Prevent instantiation\n   }\n   \n   @Override\n   public boolean equals(Object other) {\n     return other instanceof JsonNull;\n   }\n-\n-  /**\n-   * Creation method used to return an instance of a {@link JsonNull}.  To reduce the memory\n-   * footprint, a single object has been created for this class; therefore the same instance is\n-   * being returned for each invocation of this method.\n-   *\n-   * @return a instance of a {@link JsonNull}\n-   */\n-  public static JsonNull createJsonNull() {\n-    return INSTANCE;\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n    */\n   private JsonElement createJsonElement(Object value) {\n     if (value == null) {\n-      return JsonNull.createJsonNull();\n+      return new JsonNull();\n     } else {\n       return new JsonPrimitive(value);\n     }\n   public JsonElement get(String memberName) {\n     if (members.containsKey(memberName)) {\n       JsonElement member = members.get(memberName);\n-      return member == null ? JsonNull.createJsonNull() : member;\n+      return member == null ? new JsonNull() : member;\n     } else {\n       return null;\n     }\n--- a/gson/src/main/java/com/google/gson/JsonParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonParser.java\n   final private JsonNull JsonNull() throws ParseException {\n   Token t;\n     t = jj_consume_token(NULL);\n-               {if (true) return JsonNull.createJsonNull();}\n+               {if (true)\n+                return new JsonNull();}\n     throw new Error(\"Missing return statement in function\");\n   }\n \n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n   public void visitArrayField(Field f, Type typeOfF, Object obj) {\n     if (isFieldNull(f, obj)) {\n       if (serializeNulls) {\n-        addChildAsElement(f, JsonNull.createJsonNull());\n+        addChildAsElement(f, new JsonNull());\n       }\n     } else {\n       Object array = getFieldValue(f, obj);\n   public void visitObjectField(Field f, Type typeOfF, Object obj) {\n     if (isFieldNull(f, obj)) {\n       if (serializeNulls) {\n-        addChildAsElement(f, JsonNull.createJsonNull());\n+        addChildAsElement(f, new JsonNull());\n       }\n     } else {\n       Object fieldValue = getFieldValue(f, obj);\n     JsonSerializer serializer = serializers.getHandlerFor(objType);\n     if (serializer != null) {\n       if (obj == null) {\n-        assignToRoot(JsonNull.createJsonNull());\n+        assignToRoot(new JsonNull());\n       } else {\n         assignToRoot(serializer.serialize(obj, objType, context));\n       }\n       Object obj = f.get(parent);\n       if (obj == null) {\n         if (serializeNulls) {\n-          addChildAsElement(f, JsonNull.createJsonNull());\n+          addChildAsElement(f, new JsonNull());\n         }\n         return true;\n       }\n--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n     public JsonElement serialize(ClassWithObjects src, Type typeOfSrc,\n         JsonSerializationContext context) {\n       JsonObject obj = new JsonObject();\n-      obj.add(\"bag\", JsonNull.createJsonNull());\n+      obj.add(\"bag\", new JsonNull());\n       return obj;\n     }\n   }", "timestamp": 1228261264, "metainfo": ""}