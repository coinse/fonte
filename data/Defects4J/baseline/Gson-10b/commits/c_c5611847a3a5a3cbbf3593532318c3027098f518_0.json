{"sha": "c5611847a3a5a3cbbf3593532318c3027098f518", "log": "Gson synchronized map replaced with concurrent hash map", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicLongArray;\n \n   static final boolean DEFAULT_COMPLEX_MAP_KEYS = false;\n   static final boolean DEFAULT_SPECIALIZE_FLOAT_VALUES = false;\n \n+  private static final TypeToken<?> NULL_KEY_SURROGATE = new TypeToken<Object>() {};\n   private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";\n \n   /**\n   private final ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>> calls\n       = new ThreadLocal<Map<TypeToken<?>, FutureTypeAdapter<?>>>();\n \n-  private final Map<TypeToken<?>, TypeAdapter<?>> typeTokenCache\n-      = Collections.synchronizedMap(new HashMap<TypeToken<?>, TypeAdapter<?>>());\n+  private final Map<TypeToken<?>, TypeAdapter<?>> typeTokenCache = new ConcurrentHashMap<TypeToken<?>, TypeAdapter<?>>();\n \n   private final List<TypeAdapterFactory> factories;\n   private final ConstructorConstructor constructorConstructor;\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\n+    if (type == null) {\n+      type = (TypeToken<T>) NULL_KEY_SURROGATE;\n+    }\n     TypeAdapter<?> cached = typeTokenCache.get(type);\n     if (cached != null) {\n       return (TypeAdapter<T>) cached;", "timestamp": 1457126905, "metainfo": ""}