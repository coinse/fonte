{"sha": "3cbe355cb6b1ab5d84ddb75837430c3d9584119b", "log": "Test precedence of type hierarchy adapters.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonElement;\n-import com.google.gson.JsonParseException;\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSerializationContext;\n import com.google.gson.JsonSerializer;\n import junit.framework.TestCase;\n \n public final class TypeAdapterPrecedenceTest extends TestCase {\n-  private static final JsonSerializer<Foo> FOO_SERIALIZER = new JsonSerializer<Foo>() {\n-    public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src.name + \" (via FOO_SERIALIZER)\");\n-    }\n-  };\n-\n-  private static final JsonDeserializer<Foo> FOO_DESERIALIZER = new JsonDeserializer<Foo>() {\n-    public Foo deserialize(JsonElement json, Type typeOfT,\n-        JsonDeserializationContext context) throws JsonParseException {\n-      return new Foo(json.getAsString() + \" (via FOO_DESERIALIZER)\");\n-    }\n-  };\n-\n-  private static final TypeAdapter<Foo> FOO_TYPE_ADAPTER = new TypeAdapter<Foo>() {\n-    @Override public Foo read(JsonReader reader) throws IOException {\n-      return new Foo(reader.nextString() + \" (via FOO_TYPE_ADAPTER)\");\n-    }\n-    @Override public void write(JsonWriter writer, Foo value) throws IOException {\n-      writer.value(value.name + \" (via FOO_TYPE_ADAPTER)\");\n-    }\n-  };\n-\n   public void testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter() {\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(Foo.class, FOO_SERIALIZER)\n-        .registerTypeAdapter(Foo.class, FOO_TYPE_ADAPTER)\n+        .registerTypeAdapter(Foo.class, newSerializer(\"serializer\"))\n+        .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer\"))\n+        .registerTypeAdapter(Foo.class, newTypeAdapter(\"type adapter\"))\n         .create();\n-    assertEquals(\"\\\"foo (via FOO_SERIALIZER)\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"\\\"foo via serializer\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"foo via deserializer\", gson.fromJson(\"foo\", Foo.class).name);\n   }\n \n-  public void testSerializeStreamingTypeAdapterFollowedByNonstreamingTypeAdapter() {\n+  public void testStreamingFollowedByNonstreaming() {\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(Foo.class, FOO_TYPE_ADAPTER)\n-        .registerTypeAdapter(Foo.class, FOO_SERIALIZER)\n+        .registerTypeAdapter(Foo.class, newTypeAdapter(\"type adapter\"))\n+        .registerTypeAdapter(Foo.class, newSerializer(\"serializer\"))\n+        .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer\"))\n         .create();\n-    assertEquals(\"\\\"foo (via FOO_TYPE_ADAPTER)\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"\\\"foo via type adapter\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"foo via type adapter\", gson.fromJson(\"foo\", Foo.class).name);\n   }\n \n-  public void testDeserializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter() {\n+  public void testStreamingHierarchicalFollowedByNonstreaming() {\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(Foo.class, FOO_DESERIALIZER)\n-        .registerTypeAdapter(Foo.class, FOO_TYPE_ADAPTER)\n+        .registerTypeHierarchyAdapter(Foo.class, newTypeAdapter(\"type adapter\"))\n+        .registerTypeAdapter(Foo.class, newSerializer(\"serializer\"))\n+        .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer\"))\n         .create();\n-    assertEquals(\"foo (via FOO_DESERIALIZER)\", gson.fromJson(\"foo\", Foo.class).name);\n+    assertEquals(\"\\\"foo via type adapter\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"foo via type adapter\", gson.fromJson(\"foo\", Foo.class).name);\n   }\n \n-  public void testDeserializeStreamingTypeAdapterFollowedByNonstreamingTypeAdapter() {\n+  public void testStreamingFollowedByNonstreamingHierarchical() {\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(Foo.class, FOO_TYPE_ADAPTER)\n-        .registerTypeAdapter(Foo.class, FOO_DESERIALIZER)\n+        .registerTypeAdapter(Foo.class, newTypeAdapter(\"type adapter\"))\n+        .registerTypeHierarchyAdapter(Foo.class, newSerializer(\"serializer\"))\n+        .registerTypeHierarchyAdapter(Foo.class, newDeserializer(\"deserializer\"))\n         .create();\n-    assertEquals(\"foo (via FOO_TYPE_ADAPTER)\", gson.fromJson(\"foo\", Foo.class).name);\n+    assertEquals(\"\\\"foo via type adapter\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"foo via type adapter\", gson.fromJson(\"foo\", Foo.class).name);\n+  }\n+\n+  public void testStreamingHierarchicalFollowedByNonstreamingHierarchical() {\n+    Gson gson = new GsonBuilder()\n+        .registerTypeHierarchyAdapter(Foo.class, newSerializer(\"serializer\"))\n+        .registerTypeHierarchyAdapter(Foo.class, newDeserializer(\"deserializer\"))\n+        .registerTypeHierarchyAdapter(Foo.class, newTypeAdapter(\"type adapter\"))\n+        .create();\n+    assertEquals(\"\\\"foo via type adapter\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"foo via type adapter\", gson.fromJson(\"foo\", Foo.class).name);\n   }\n \n   private static class Foo {\n-    private final String name;\n+    final String name;\n     private Foo(String name) {\n       this.name = name;\n     }\n   }\n+\n+  private JsonSerializer<Foo> newSerializer(final String name) {\n+    return new JsonSerializer<Foo>() {\n+      public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {\n+        return new JsonPrimitive(src.name + \" via \" + name);\n+      }\n+    };\n+  }\n+\n+  private JsonDeserializer<Foo> newDeserializer(final String name) {\n+    return new JsonDeserializer<Foo>() {\n+      public Foo deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\n+        return new Foo(json.getAsString() + \" via \" + name);\n+      }\n+    };\n+  }\n+\n+  private TypeAdapter<Foo> newTypeAdapter(final String name) {\n+    return new TypeAdapter<Foo>() {\n+      @Override public Foo read(JsonReader reader) throws IOException {\n+        return new Foo(reader.nextString() + \" via \" + name);\n+      }\n+      @Override public void write(JsonWriter writer, Foo value) throws IOException {\n+        writer.value(value.name + \" via \" + name);\n+      }\n+    };\n+  }\n }", "timestamp": 1322025197, "metainfo": ""}