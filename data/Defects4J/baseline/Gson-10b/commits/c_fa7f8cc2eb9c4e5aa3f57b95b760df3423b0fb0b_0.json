{"sha": "fa7f8cc2eb9c4e5aa3f57b95b760df3423b0fb0b", "log": "Rolling back test deletion.", "commit": "\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/reflect/reflect/TypeTokenTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.reflect;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.RandomAccess;\n+import java.util.Set;\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Jesse Wilson\n+ */\n+@SuppressWarnings({\"UnusedDeclaration\", \"deprecation\"})\n+public final class TypeTokenTest extends TestCase {\n+\n+  List<Integer> listOfInteger = null;\n+  List<Number> listOfNumber = null;\n+  List<String> listOfString = null;\n+  List<?> listOfUnknown = null;\n+  List<Set<String>> listOfSetOfString = null;\n+  List<Set<?>> listOfSetOfUnknown = null;\n+\n+  public void testIsAssignableFromRawTypes() {\n+    assertTrue(TypeToken.get(Object.class).isAssignableFrom(String.class));\n+    assertFalse(TypeToken.get(String.class).isAssignableFrom(Object.class));\n+    assertTrue(TypeToken.get(RandomAccess.class).isAssignableFrom(ArrayList.class));\n+    assertFalse(TypeToken.get(ArrayList.class).isAssignableFrom(RandomAccess.class));\n+  }\n+\n+  public void testIsAssignableFromWithTypeParameters() throws Exception {\n+    Type a = getClass().getDeclaredField(\"listOfInteger\").getGenericType();\n+    Type b = getClass().getDeclaredField(\"listOfNumber\").getGenericType();\n+    assertTrue(TypeToken.get(a).isAssignableFrom(a));\n+    assertTrue(TypeToken.get(b).isAssignableFrom(b));\n+\n+    // listOfInteger = listOfNumber; // doesn't compile; must be false\n+    assertFalse(TypeToken.get(a).isAssignableFrom(b));\n+    // listOfNumber = listOfInteger; // doesn't compile; must be false\n+    assertFalse(TypeToken.get(b).isAssignableFrom(a));\n+  }\n+\n+  public void testIsAssignableFromWithBasicWildcards() throws Exception {\n+    Type a = getClass().getDeclaredField(\"listOfString\").getGenericType();\n+    Type b = getClass().getDeclaredField(\"listOfUnknown\").getGenericType();\n+    assertTrue(TypeToken.get(a).isAssignableFrom(a));\n+    assertTrue(TypeToken.get(b).isAssignableFrom(b));\n+\n+    // listOfString = listOfUnknown  // doesn't compile; must be false\n+    assertFalse(TypeToken.get(a).isAssignableFrom(b));\n+    listOfUnknown = listOfString; // compiles; must be true\n+    assertTrue(TypeToken.get(b).isAssignableFrom(a));\n+  }\n+\n+  public void testIsAssignableFromWithNestedWildcards() throws Exception {\n+    Type a = getClass().getDeclaredField(\"listOfSetOfString\").getGenericType();\n+    Type b = getClass().getDeclaredField(\"listOfSetOfUnknown\").getGenericType();\n+    assertTrue(TypeToken.get(a).isAssignableFrom(a));\n+    assertTrue(TypeToken.get(b).isAssignableFrom(b));\n+\n+    // listOfSetOfString = listOfSetOfUnknown; // doesn't compile; must be false\n+    assertFalse(TypeToken.get(a).isAssignableFrom(b));\n+    // listOfSetOfUnknown = listOfSetOfString; // doesn't compile; must be false\n+    assertFalse(TypeToken.get(b).isAssignableFrom(a));\n+  }\n+}", "timestamp": 1294784501, "metainfo": ""}