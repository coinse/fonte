{"sha": "f9976f4b0125ffb6482728448e56c917dd6b35a7", "log": "Switched Short, URI, URL, UUID, StringBuilder and StringBuffer type adapters to new-style.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.net.InetAddress;\n-import java.net.MalformedURLException;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.net.URL;\n import java.net.UnknownHostException;\n import java.sql.Time;\n import java.sql.Timestamp;\n import java.util.StringTokenizer;\n import java.util.TimeZone;\n import java.util.TreeSet;\n-import java.util.UUID;\n \n import com.google.gson.internal.$Gson$Types;\n \n \n   @SuppressWarnings(\"unchecked\")\n   private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\n-  private static final UrlTypeAdapter URL_TYPE_ADAPTER = new UrlTypeAdapter();\n-  private static final UriTypeAdapter URI_TYPE_ADAPTER = new UriTypeAdapter();\n-  private static final UuidTypeAdapter UUUID_TYPE_ADAPTER = new UuidTypeAdapter();\n   private static final LocaleTypeAdapter LOCALE_TYPE_ADAPTER = new LocaleTypeAdapter();\n   private static final BitSetTypeAdapter BIT_SET_ADAPTER = new BitSetTypeAdapter();\n   private static final DefaultInetAddressAdapter INET_ADDRESS_ADAPTER =\n   private static final CharacterTypeAdapter CHARACTER_TYPE_ADAPTER = new CharacterTypeAdapter();\n   private static final LongDeserializer LONG_DESERIALIZER = new LongDeserializer();\n   private static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\n-  private static final ShortTypeAdapter SHORT_TYPE_ADAPTER = new ShortTypeAdapter();\n-  private static final StringBuilderTypeAdapter STRING_BUILDER_TYPE_ADAPTER =\n-      new StringBuilderTypeAdapter();\n-  private static final StringBufferTypeAdapter STRING_BUFFER_TYPE_ADAPTER =\n-      new StringBufferTypeAdapter();\n \n   private static final GregorianCalendarTypeAdapter GREGORIAN_CALENDAR_TYPE_ADAPTER =\n       new GregorianCalendarTypeAdapter();\n     ParameterizedTypeHandlerMap<JsonSerializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n \n-    map.register(URL.class, URL_TYPE_ADAPTER, true);\n-    map.register(URI.class, URI_TYPE_ADAPTER, true);\n-    map.register(UUID.class, UUUID_TYPE_ADAPTER, true);\n     map.register(Locale.class, LOCALE_TYPE_ADAPTER, true);\n     map.register(Date.class, DATE_TYPE_ADAPTER, true);\n     map.register(java.sql.Date.class, JAVA_SQL_DATE_TYPE_ADAPTER, true);\n     map.register(byte.class, BYTE_TYPE_ADAPTER, true);\n     map.register(Character.class, CHARACTER_TYPE_ADAPTER, true);\n     map.register(Number.class, NUMBER_TYPE_ADAPTER, true);\n-    map.register(Short.class, SHORT_TYPE_ADAPTER, true);\n-    map.register(short.class, SHORT_TYPE_ADAPTER, true);\n-    map.register(StringBuilder.class, STRING_BUILDER_TYPE_ADAPTER, true);\n-    map.register(StringBuffer.class, STRING_BUFFER_TYPE_ADAPTER, true);\n \n     map.makeUnmodifiable();\n     return map;\n   private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers() {\n     ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n-    map.register(URL.class, wrapDeserializer(URL_TYPE_ADAPTER), true);\n-    map.register(URI.class, wrapDeserializer(URI_TYPE_ADAPTER), true);\n-    map.register(UUID.class, wrapDeserializer(UUUID_TYPE_ADAPTER), true);\n     map.register(Locale.class, wrapDeserializer(LOCALE_TYPE_ADAPTER), true);\n     map.register(Date.class, wrapDeserializer(DATE_TYPE_ADAPTER), true);\n     map.register(java.sql.Date.class, wrapDeserializer(JAVA_SQL_DATE_TYPE_ADAPTER), true);\n     map.register(Long.class, LONG_DESERIALIZER, true);\n     map.register(long.class, LONG_DESERIALIZER, true);\n     map.register(Number.class, NUMBER_TYPE_ADAPTER, true);\n-    map.register(Short.class, SHORT_TYPE_ADAPTER, true);\n-    map.register(short.class, SHORT_TYPE_ADAPTER, true);\n-    map.register(StringBuilder.class, wrapDeserializer(STRING_BUILDER_TYPE_ADAPTER), true);\n-    map.register(StringBuffer.class, wrapDeserializer(STRING_BUFFER_TYPE_ADAPTER), true);\n \n     map.makeUnmodifiable();\n     return map;\n     }\n   }\n \n-  private static final class UrlTypeAdapter implements JsonSerializer<URL>, JsonDeserializer<URL> {\n-    public JsonElement serialize(URL src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src.toExternalForm());\n-    }\n-\n-    public URL deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      try {\n-        return new URL(json.getAsString());\n-      } catch (MalformedURLException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return UrlTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n-  private static final class UriTypeAdapter implements JsonSerializer<URI>, JsonDeserializer<URI> {\n-    public JsonElement serialize(URI src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src.toASCIIString());\n-    }\n-    public URI deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-    throws JsonParseException {\n-      try {\n-        return new URI(json.getAsString());\n-      } catch (URISyntaxException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-    @Override\n-    public String toString() {\n-      return UriTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n-  private static final class UuidTypeAdapter implements JsonSerializer<UUID>, JsonDeserializer<UUID> {\n-    public JsonElement serialize(UUID src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src.toString());\n-    }\n-\n-    public UUID deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      return UUID.fromString(json.getAsString());\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return UuidTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n   private static final class LocaleTypeAdapter\n       implements JsonSerializer<Locale>, JsonDeserializer<Locale> {\n     public JsonElement serialize(Locale src, Type typeOfSrc, JsonSerializationContext context) {\n     }\n   }\n \n-  private static final class ShortTypeAdapter\n-      implements JsonSerializer<Short>, JsonDeserializer<Short> {\n-    public JsonElement serialize(Short src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src);\n-    }\n-\n-    public Short deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      try {\n-        return json.getAsShort();\n-      } catch (NumberFormatException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return ShortTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n   private static final class ByteTypeAdapter implements JsonSerializer<Byte>, JsonDeserializer<Byte> {\n     public JsonElement serialize(Byte src, Type typeOfSrc, JsonSerializationContext context) {\n       return new JsonPrimitive(src);\n     @Override\n     public String toString() {\n       return CharacterTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n-  private static final class StringBuilderTypeAdapter\n-      implements JsonSerializer<StringBuilder>, JsonDeserializer<StringBuilder> {\n-    public JsonElement serialize(StringBuilder src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src.toString());\n-    }\n-\n-    public StringBuilder deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-    throws JsonParseException {\n-      return new StringBuilder(json.getAsString());\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return StringBuilderTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n-  private static final class StringBufferTypeAdapter\n-      implements JsonSerializer<StringBuffer>, JsonDeserializer<StringBuffer> {\n-    public JsonElement serialize(StringBuffer src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src.toString());\n-    }\n-\n-    public StringBuffer deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-    throws JsonParseException {\n-      return new StringBuffer(json.getAsString());\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return StringBufferTypeAdapter.class.getSimpleName();\n     }\n   }\n \n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     MiniGson.Builder builder = new MiniGson.Builder()\n         .withoutDefaultFactories()\n         .factory(TypeAdapters.BOOLEAN_FACTORY)\n+        .factory(TypeAdapters.SHORT_FACTORY)\n         .factory(TypeAdapters.INTEGER_FACTORY)\n         .factory(TypeAdapters.newFactory(double.class, Double.class,\n             doubleAdapter(serializeSpecialFloatingPointValues)))\n         .factory(TypeAdapters.newFactory(long.class, Long.class,\n             longAdapter(longSerializationPolicy)))\n         .factory(TypeAdapters.STRING_FACTORY)\n+        .factory(TypeAdapters.STRING_BUILDER_FACTORY)\n+        .factory(TypeAdapters.STRING_BUFFER_FACTORY)\n+        .factory(TypeAdapters.URL_FACTORY)\n+        .factory(TypeAdapters.URI_FACTORY)\n+        .factory(TypeAdapters.UUID_FACTORY)\n         .typeAdapter(BigDecimal.class, new BigDecimalTypeAdapter())\n         .typeAdapter(BigInteger.class, new BigIntegerTypeAdapter())\n         .factory(excludedTypeFactory)\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n \n package com.google.gson.internal.bind;\n \n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.UUID;\n+\n import com.google.gson.reflect.TypeToken;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n-import java.io.IOException;\n \n /**\n  * Type adapters for basic types.\n   public static final TypeAdapter.Factory INTEGER_FACTORY\n       = newFactory(int.class, Integer.class, INTEGER);\n \n+  public static final TypeAdapter<Short> SHORT = new TypeAdapter<Short>() {\n+    public Short read(JsonReader reader) throws IOException {\n+      return (short) reader.nextInt();\n+    }\n+    public void write(JsonWriter writer, Short value) throws IOException {\n+      writer.value(value);\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory SHORT_FACTORY\n+      = newFactory(short.class, Short.class, SHORT);\n+\n   public static final TypeAdapter<Long> LONG = new TypeAdapter<Long>() {\n     public Long read(JsonReader reader) throws IOException {\n       return reader.nextLong();\n   };\n \n   public static final TypeAdapter.Factory STRING_FACTORY = newFactory(String.class, STRING);\n+\n+  public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {\n+    public StringBuilder read(JsonReader reader) throws IOException {\n+      return new StringBuilder(reader.nextString());\n+    }\n+    public void write(JsonWriter writer, StringBuilder value) throws IOException {\n+      writer.value(value.toString());\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory STRING_BUILDER_FACTORY =\n+    newFactory(StringBuilder.class, STRING_BUILDER);\n+\n+  public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {\n+    public StringBuffer read(JsonReader reader) throws IOException {\n+      return new StringBuffer(reader.nextString());\n+    }\n+    public void write(JsonWriter writer, StringBuffer value) throws IOException {\n+      writer.value(value.toString());\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory STRING_BUFFER_FACTORY =\n+    newFactory(StringBuffer.class, STRING_BUFFER);\n+\n+  public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {\n+    public URL read(JsonReader reader) throws IOException {\n+      String nextString = reader.nextString();\n+      return \"null\".equals(nextString) ? null : new URL(nextString);\n+    }\n+    public void write(JsonWriter writer, URL value) throws IOException {\n+      writer.value(value == null ? null : value.toExternalForm());\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory URL_FACTORY = newFactory(URL.class, URL);\n+\n+  public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {\n+    public URI read(JsonReader reader) throws IOException {\n+      try {\n+        String nextString = reader.nextString();\n+        return \"null\".equals(nextString) ? null : new URI(nextString);\n+      } catch (URISyntaxException e) {\n+        throw new IOException(e);\n+      }\n+    }\n+    public void write(JsonWriter writer, URI value) throws IOException {\n+      writer.value(value == null ? null : value.toASCIIString());\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory URI_FACTORY = newFactory(URI.class, URI);\n+\n+  public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {\n+    public UUID read(JsonReader reader) throws IOException {\n+      return java.util.UUID.fromString(reader.nextString());\n+    }\n+    public void write(JsonWriter writer, UUID value) throws IOException {\n+      writer.value(value.toString());\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory UUID_FACTORY = newFactory(UUID.class, UUID);\n \n   public static final TypeAdapter EXCLUDED_TYPE_ADAPTER = new TypeAdapter<Object>() {\n     @Override public Object read(JsonReader reader) throws IOException {", "timestamp": 1314326034, "metainfo": ""}