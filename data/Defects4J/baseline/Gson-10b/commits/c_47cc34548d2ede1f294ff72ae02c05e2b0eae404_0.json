{"sha": "47cc34548d2ede1f294ff72ae02c05e2b0eae404", "log": "added currency class", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     factories.add(TypeAdapters.URL_FACTORY);\n     factories.add(TypeAdapters.URI_FACTORY);\n     factories.add(TypeAdapters.UUID_FACTORY);\n+    factories.add(TypeAdapters.CURRENCY_FACTORY);\n     factories.add(TypeAdapters.LOCALE_FACTORY);\n     factories.add(TypeAdapters.INET_ADDRESS_FACTORY);\n     factories.add(TypeAdapters.BIT_SET_FACTORY);\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n import java.util.ArrayList;\n import java.util.BitSet;\n import java.util.Calendar;\n+import java.util.Currency;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.HashMap;\n \n   public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);\n \n+  public static final TypeAdapter<Currency> CURRENCY = new TypeAdapter<Currency>() {\n+    @Override\n+    public Currency read(JsonReader in) throws IOException {\n+      return Currency.getInstance(in.nextString());\n+    }\n+    @Override\n+    public void write(JsonWriter out, Currency value) throws IOException {\n+      out.value(value.getCurrencyCode());\n+    }\n+  }.nullSafe();\n+  public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class, CURRENCY);\n+\n   public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {\n     @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n     @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java\n+/*\n+ * Copyright (C) 2015 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import java.util.Currency;\n+\n+import com.google.gson.Gson;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Functional test for Json serialization and deserialization for classes in java.util\n+ */\n+public class JavaUtilTest extends TestCase {\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new Gson();\n+  }\n+\n+  public void testCurrency() throws Exception {\n+    CurrencyHolder target = gson.fromJson(\"{'value':'USD'}\", CurrencyHolder.class);\n+    assertEquals(\"USD\", target.value.getCurrencyCode());\n+    String json = gson.toJson(target);\n+    assertEquals(\"{\\\"value\\\":\\\"USD\\\"}\", json);\n+\n+    // null handling\n+    target = gson.fromJson(\"{'value':null}\", CurrencyHolder.class);\n+    assertNull(target.value);\n+    assertEquals(\"{}\", gson.toJson(target));\n+  }\n+\n+  private static class CurrencyHolder {\n+    Currency value;\n+  }\n+}", "timestamp": 1446853275, "metainfo": ""}