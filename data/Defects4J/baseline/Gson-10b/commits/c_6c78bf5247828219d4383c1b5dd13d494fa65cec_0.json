{"sha": "6c78bf5247828219d4383c1b5dd13d494fa65cec", "log": "made toJson/fromJson/toJsonTree methods public in TypeAdapter. made Gson.getNextAdapter method public.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     }\n   }\n \n-  static {\n-    GsonInternalAccess.INSTANCE = new GsonInternalAccess() {\n-      @Override public <T> TypeAdapter<T> getNextAdapter(\n-          Gson gson, TypeAdapterFactory skipPast, TypeToken<T> type) {\n-        boolean skipPastFound = false;\n-\n-        for (TypeAdapterFactory factory : gson.factories) {\n-          if (!skipPastFound) {\n-            if (factory == skipPast) {\n-              skipPastFound = true;\n-            }\n-            continue;\n-          }\n-\n-          TypeAdapter<T> candidate = factory.create(gson, type);\n-          if (candidate != null) {\n-            return candidate;\n-          }\n+  /**\n+   * TODO: needs documentation\n+   * @since 2.2\n+   */\n+  public <T> TypeAdapter<T> getNextAdapter(TypeAdapterFactory skipPast, TypeToken<T> type) {\n+    boolean skipPastFound = false;\n+\n+    for (TypeAdapterFactory factory : factories) {\n+      if (!skipPastFound) {\n+        if (factory == skipPast) {\n+          skipPastFound = true;\n         }\n-\n-        throw new IllegalArgumentException(\"GSON cannot serialize \" + type);\n-      }\n-    };\n+        continue;\n+      }\n+\n+      TypeAdapter<T> candidate = factory.create(this, type);\n+      if (candidate != null) {\n+        return candidate;\n+      }\n+    }\n+    throw new IllegalArgumentException(\"GSON cannot serialize \" + type);\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/TreeTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TreeTypeAdapter.java\n     TypeAdapter<T> d = delegate;\n     return d != null\n         ? d\n-        : (delegate = GsonInternalAccess.INSTANCE.getNextAdapter(gson, skipPast, typeToken));\n+        : (delegate = gson.getNextAdapter(skipPast, typeToken));\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/TypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TypeAdapter.java\n    * writing.\n    *\n    * @param value the Java object to convert. May be null.\n-   */\n-  /*public*/ final void toJson(Writer out, T value) throws IOException {\n+   * @since 2.2\n+   */\n+  public final void toJson(Writer out, T value) throws IOException {\n     JsonWriter writer = new JsonWriter(out);\n     write(writer, value);\n   }\n    * writing.\n    *\n    * @param value the Java object to convert. May be null.\n-   */\n-  /*public*/ final String toJson(T value) throws IOException {\n+   * @since 2.2\n+   */\n+  public final String toJson(T value) throws IOException {\n     StringWriter stringWriter = new StringWriter();\n     toJson(stringWriter, value);\n     return stringWriter.toString();\n    *\n    * @param value the Java object to convert. May be null.\n    * @return the converted JSON tree. May be {@link JsonNull}.\n-   */\n-  /*public*/ final JsonElement toJsonTree(T value) {\n+   * @since 2.2\n+   */\n+  public final JsonElement toJsonTree(T value) {\n     try {\n       JsonTreeWriter jsonWriter = new JsonTreeWriter();\n       jsonWriter.setLenient(true);\n    * {@code JsonReader} and call {@link #read(JsonReader)} for lenient reading.\n    *\n    * @return the converted Java object. May be null.\n-   */\n-  /*public*/ final T fromJson(Reader in) throws IOException {\n+   * @since 2.2\n+   */\n+  public final T fromJson(Reader in) throws IOException {\n     JsonReader reader = new JsonReader(in);\n     reader.setLenient(true); // TODO: non-lenient?\n     return read(reader);\n    * JsonReader} and call {@link #read(JsonReader)} for lenient reading.\n    *\n    * @return the converted Java object. May be null.\n-   */\n-  /*public*/ final T fromJson(String json) throws IOException {\n+   * @since 2.2\n+   */\n+  public final T fromJson(String json) throws IOException {\n     return fromJson(new StringReader(json));\n   }\n \n    * Converts {@code jsonTree} to a Java object.\n    *\n    * @param jsonTree the Java object to convert. May be {@link JsonNull}.\n-   */\n-  /*public*/ final T fromJsonTree(JsonElement jsonTree) {\n+   * @since 2.2\n+   */\n+  public final T fromJsonTree(JsonElement jsonTree) {\n     try {\n       JsonReader jsonReader = new JsonTreeReader(jsonTree);\n       jsonReader.setLenient(true);\n--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java\n \n package com.google.gson.internal.bind;\n \n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n import com.google.gson.Gson;\n import com.google.gson.JsonElement;\n-import com.google.gson.JsonIOException;\n import com.google.gson.JsonPrimitive;\n import com.google.gson.JsonSyntaxException;\n import com.google.gson.TypeAdapter;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import java.io.IOException;\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n \n /**\n  * Adapts maps to either JSON objects or JSON arrays.\n \n       List<V> values = new ArrayList<V>(map.size());\n       for (Map.Entry<K, V> entry : map.entrySet()) {\n-        JsonElement keyElement = toJsonTree(keyTypeAdapter, entry.getKey());\n+        JsonElement keyElement = keyTypeAdapter.toJsonTree(entry.getKey());\n         keys.add(keyElement);\n         values.add(entry.getValue());\n         hasComplexKeys |= keyElement.isJsonArray() || keyElement.isJsonObject();\n       }\n     }\n   }\n-\n-  // TODO: remove this when TypeAdapter.toJsonTree() is public\n-  private static <T> JsonElement toJsonTree(TypeAdapter<T> typeAdapter, T value) {\n-    try {\n-      JsonTreeWriter jsonWriter = new JsonTreeWriter();\n-      jsonWriter.setLenient(true);\n-      typeAdapter.write(jsonWriter, value);\n-      return jsonWriter.get();\n-    } catch (IOException e) {\n-      throw new JsonIOException(e);\n-    }\n-  }\n }", "timestamp": 1325321579, "metainfo": ""}