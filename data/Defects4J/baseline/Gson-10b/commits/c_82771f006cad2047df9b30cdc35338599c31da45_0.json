{"sha": "82771f006cad2047df9b30cdc35338599c31da45", "log": "removed Java 1.5 warnings", "commit": "\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n    * {@link JsonSerializer}, and a {@link JsonDeserializer} interfaces.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    */\n+  @SuppressWarnings(\"unchecked\")\n   public GsonBuilder registerTypeAdapter(Type type, Object typeAdapter) {\n     Preconditions.checkArgument(typeAdapter instanceof JsonSerializer\n         || typeAdapter instanceof JsonDeserializer || typeAdapter instanceof InstanceCreator);\n--- a/gson/src/main/java/com/google/gson/TypeInfoFactory.java\n+++ b/gson/src/main/java/com/google/gson/TypeInfoFactory.java\n     return new TypeInfo(actualType);\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   private static Type getActualType(\n       Type typeToEvaluate, Type parentType, Class<?> rawParentClass) {\n     if (typeToEvaluate instanceof Class) {\n--- a/gson/src/main/java/com/google/gson/TypeInfoMap.java\n+++ b/gson/src/main/java/com/google/gson/TypeInfoMap.java\n   private final Type keyType;\n   private final Type valueType;\n   \n+  @SuppressWarnings(\"unchecked\")\n   public TypeInfoMap(Type mapType) {\n     if (mapType instanceof Class && Properties.class.isAssignableFrom((Class<?>) mapType)) {\n       keyType = String.class;\n--- a/gson/src/main/java/com/google/gson/TypeUtils.java\n+++ b/gson/src/main/java/com/google/gson/TypeUtils.java\n    * </pre>\n    * <code>TypeUtils.getActualTypeForFirstTypeVariable(fooType)</code> will return Integer.class.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   static Type getActualTypeForFirstTypeVariable(Type type) {\n     if (type instanceof Class) {\n       return Object.class;\n     }\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n   static boolean isArray(Type type) {\n     if (type instanceof Class) {\n       return ((Class<?>)type).isArray();\n   /**\n    * This method returns the actual raw class associated with the specified type.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   static Class<?> toRawClass(Type type) {\n     if (type instanceof Class) {\n       return (Class<?>) type;\n--- a/gson/src/main/java/com/google/gson/reflect/TypeToken.java\n+++ b/gson/src/main/java/com/google/gson/reflect/TypeToken.java\n   /**\n    * Gets type from super class's type parameter.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   static Type getSuperclassTypeParameter(Class<?> subclass) {\n     Type superclass = subclass.getGenericSuperclass();\n     if (superclass instanceof Class) {\n   /**\n    * Check if this type is assignable from the given Type.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   public boolean isAssignableFrom(Type from) {\n     if (from == null) {\n       return false;\n    * Private helper function that performs some assignability checks for\n    * the provided GenericArrayType.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   private static boolean isAssignableFrom(Type from, GenericArrayType to) {\n     Type toGenericComponentType = to.getGenericComponentType();\n     if (toGenericComponentType instanceof ParameterizedType) {\n    * Private recursive helper function to actually do the type-safe checking\n    * of assignability.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   private static boolean isAssignableFrom(Type from, ParameterizedType to,\n       Map<String, Type> typeVarMap) {\n \n    * Checks if two types are the same or are equivalent under a variable mapping\n    * given in the type map that was provided.\n    */\n+  @SuppressWarnings(\"unchecked\")\n   private static boolean matches(Type from, Type to,\n       Map<String, Type> typeMap) {\n     if (to.equals(from)) return true;\n--- a/gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/ExposeAnnotationBasedExclusionStrategyTest.java\n     assertFalse(strategy.shouldSkipField(f));\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class MockObject {\n     @Expose\n     public final int exposedField = 0;\n--- a/gson/src/test/java/com/google/gson/JsonParserAsyncTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonParserAsyncTest.java\n package com.google.gson;\n \n-import java.util.Enumeration;\n import java.util.Iterator;\n \n import junit.framework.TestCase;\n--- a/gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java\n     assertEquals(fieldName, policy.translateName(f));\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class SomeObject {\n     @SerializedName(ANNOTATED_FIELD_NAME) public final int fieldWithAnnotation = 1;\n     public final int fieldWithoutAnnotation = 1;\n--- a/gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java\n+++ b/gson/src/test/java/com/google/gson/TypeInfoFactoryTest.java\n     assertEquals(List[].class, typeInfo.getRawClass());\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class ObjectWithDifferentFields<T> {\n     public static enum TestEnum {\n       TEST_1, TEST_2;\n--- a/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java\n \n   @Since(VERSION)\n   private static class MockObject {\n+    @SuppressWarnings(\"unused\")\n     @Since(VERSION)\n     public final int someField = 0;\n   }\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n   private static class ObjectWithWildcardCollection {\n     private final Collection<? extends BagOfPrimitives> collection;\n \n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings({ \"unchecked\", \"unused\" })\n     public ObjectWithWildcardCollection() {\n       this(Collections.EMPTY_LIST);\n     }\n   \n   private static class Entry {\n     int value;\n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n     Entry() {\n       this(10);\n     }\n--- a/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java\n     assertFalse(failed.get());\n   }\n   \n+  @SuppressWarnings(\"unused\")\n   private static class MyObject {\n     String a;\n     String b;\n--- a/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java\n   private static class DataHolder {\n     private final String data;\n \n+    @SuppressWarnings(\"unused\")\n     public DataHolder() {\n       throw new IllegalStateException();\n     }\n   private static class DataHolderWrapper {\n     private final DataHolder wrappedData;\n     \n+    @SuppressWarnings(\"unused\")\n     public DataHolderWrapper() {\n       this(new DataHolder(DEFAULT_VALUE));\n     }\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n   \n   private static class ClassWithBigDecimal {\n     BigDecimal value;\n+    @SuppressWarnings(\"unused\")\n     ClassWithBigDecimal() { }\n     ClassWithBigDecimal(String value) {\n       this.value = new BigDecimal(value);\n \n   private static class ClassWithBigInteger {\n     BigInteger value;\n+    @SuppressWarnings(\"unused\")\n     ClassWithBigInteger() { }\n     ClassWithBigInteger(String value) {\n       this.value = new BigInteger(value);\n--- a/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java\n     @Expose(deserialize = false) final double d;\n     @Expose(serialize = false, deserialize = false) final char e;\n \n+    @SuppressWarnings(\"unused\")\n     ClassWithExposedFields() {\n       this(null, null);\n     }\n       sb.append(\"\\\"d\\\":\").append(d);\n       sb.append(\"}\");\n       return sb.toString();\n-    }\n-\n-    public String getExpectedJsonWithoutAnnotations() {\n-      return String.format(\"{\\\"a\\\":%d,\\\"b\\\":%d,\\\"c\\\":%d,\\\"d\\\":%f,\\\"e\\\":\\\"%c\\\"}\", a, b, c, d, e);\n     }\n   }\n \n     @Expose\n     private final SomeInterface interfaceField;\n     \n+    @SuppressWarnings(\"unused\")\n     public ClassWithInterfaceField() {\n       this(null);\n     }\n--- a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java\n   }\n   \n   private static class SubTypeOfBagOfPrimitives extends BagOfPrimitives {\n+    @SuppressWarnings(\"unused\")\n     float f = 1.2F;\n     public SubTypeOfBagOfPrimitives(long l, int i, boolean b, String string, float f) {\n       super(l, i, b, string);\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n   private static class MyParameterizedMap<K, V> extends LinkedHashMap<K, V> {\n     private static final long serialVersionUID = 1L;\n \n+    @SuppressWarnings(\"unused\")\n     int foo = 10;\n   }\n   \n   private static class MyMap extends LinkedHashMap<String, String> {\n     private static final long serialVersionUID = 1L;\n \n+    @SuppressWarnings(\"unused\")\n     int foo = 10;\n   }\n   \n--- a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n     assertEquals(\"{\\\"a\\\":3.0}\", actual);\n   }\n   \n+  @SuppressWarnings(\"unused\")\n   private static class ClassWithDuplicateFields {\n     public Integer a;\n     @SerializedName(\"a\") public Double b;\n--- a/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java\n     private Long value;\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class ClassWithMembers {\n     String str;\n     int[] array;\n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n     assertTrue(json.contains(\"abc\"));\n   }\n   \n+  @SuppressWarnings(\"unused\")\n   private static class ClassWithObjectField {\n     Object member;\n   }\n   }\n    \n   private static class Parent {\n+    @SuppressWarnings(\"unused\")\n     int value1 = 1;\n     private class Child {\n       int value2 = 2;\n     private Set<Float> set;\n     private SortedSet<Character> sortedSet;\n \n+    // For use by Gson\n+    @SuppressWarnings(\"unused\")\n     ClassWithSubInterfacesOfCollection() {\n     }\n \n   private static class SubTypeOfNested extends Nested {\n     private final long value = 5;\n \n+    @SuppressWarnings(\"unused\")\n     public SubTypeOfNested() {\n       this(null, null);\n     }\n   public void testArrayOfObjectsWithoutTypeInfoDeserialization() {\n     String json = \"[1,'abc',{a:1},5]\";\n     try {\n-      Object[] objs = gson.fromJson(json, Object[].class);\n+      gson.fromJson(json, Object[].class);\n     } catch (JsonParseException expected) {\n     }\n   }\n   public void testArrayWithoutTypeInfoDeserialization() {\n     String json = \"[1,'abc',[1,2],5]\";\n     try {\n-      Object[] objs = gson.fromJson(json, Object[].class);\n+      gson.fromJson(json, Object[].class);\n     } catch (JsonParseException expected) {\n     }\n   }\n--- a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n     private final List<? extends T> listOfWildcardTypeParameters;\n     private final List<? extends T>[] arrayOfListOfWildcardTypeParameters;\n \n+    @SuppressWarnings(\"unused\")\n     public ObjectWithTypeVariables() {\n       this(null, null, null, null, null, null);\n     }\n     C c;\n     D d;\n     E e;\n+    @SuppressWarnings(\"unused\")\n     MultiParameters() {\n     }\n     MultiParameters(A a, B b, C c, D d, E e) {\n   \n   // Begin: tests to reproduce issue 103\n   private static class Quantity {\n+    @SuppressWarnings(\"unused\")\n     int q = 10;\n   }\n   private static class MyQuantity extends Quantity {\n+    @SuppressWarnings(\"unused\")\n     int q2 = 20;\n   }\n   private interface Measurable<T> {    \n--- a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java\n+++ b/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java\n   private static class ExceptionHolder {\n     public final String message;\n     public final String stackTrace;\n+    @SuppressWarnings(\"unused\")\n     public ExceptionHolder() {\n       this(\"\", \"\");\n     }\n     }\n   }\n \n+  @SuppressWarnings(\"unused\")\n   private static class CollectionEntry {\n     final String name;\n     final String value;\n       for (int i = 0; i < size; ++i) {\n         ba[i] = 0x05;\n       }\n-      String json = gson.toJson(ba);\n+      gson.toJson(ba);\n       System.out.printf(\"Gson could serialize a byte array of size: %d\\n\", size);\n     }\n   }", "timestamp": 1251741107, "metainfo": ""}