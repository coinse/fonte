{"sha": "d0977c2e3af152901b7b921a31ab6597b0884a4a", "log": "Exposing the declaring class for the field wrapped by FieldAttributes.", "commit": "\n--- a/gson/src/main/java/com/google/gson/FieldAttributes.java\n+++ b/gson/src/main/java/com/google/gson/FieldAttributes.java\n public final class FieldAttributes {\n   private static final String MAX_CACHE_PROPERTY_NAME =\n       \"com.google.gson.annotation_cache_size_hint\";\n-  \n+\n   private static final Cache<Pair<Class<?>, String>, Collection<Annotation>> ANNOTATION_CACHE =\n       new LruCache<Pair<Class<?>,String>, Collection<Annotation>>(getMaxCacheSize());\n \n-  private final Class<?> parentClazz;\n+  private final Class<?> declaringClazz;\n   private final Field field;\n   private final Class<?> declaredType;\n   private final boolean isSynthetic;\n    *\n    * @param f the field to pull attributes from\n    */\n-  FieldAttributes(final Class<?> parentClazz, final Field f) {\n-    Preconditions.checkNotNull(parentClazz);\n-    this.parentClazz = parentClazz;\n+  FieldAttributes(final Class<?> declaringClazz, final Field f) {\n+    Preconditions.checkNotNull(declaringClazz);\n+    this.declaringClazz = declaringClazz;\n     name = f.getName();\n     declaredType = f.getType();\n     isSynthetic = f.isSynthetic();\n   }\n \n   /**\n+   * @return the declaring class that contains this field\n+   */\n+  public Class<?> getDeclaringClass() {\n+    return declaringClazz;\n+  }\n+\n+  /**\n    * @return the name of the field\n    */\n   public String getName() {\n    * Return the annotations that are present on this field.\n    *\n    * @return an array of all the annotations set on the field\n-   * @since 1.4 \n+   * @since 1.4\n    */\n   public Collection<Annotation> getAnnotations() {\n     if (annotations == null) {\n-      Pair<Class<?>, String> key = new Pair<Class<?>, String>(parentClazz, name);\n+      Pair<Class<?>, String> key = new Pair<Class<?>, String>(declaringClazz, name);\n       annotations = ANNOTATION_CACHE.getElement(key);\n       if (annotations == null) {\n         annotations = Collections.unmodifiableCollection(\n    * This is exposed internally only for the removing synthetic fields from the JSON output.\n    *\n    * @return true if the field is synthetic; otherwise false\n-   * @throws IllegalAccessException \n-   * @throws IllegalArgumentException \n+   * @throws IllegalAccessException\n+   * @throws IllegalArgumentException\n    */\n   void set(Object instance, Object value) throws IllegalAccessException {\n     field.set(instance, value);\n   }\n-  \n+\n   /**\n    * This is exposed internally only for the removing synthetic fields from the JSON output.\n    *\n    * @return true if the field is synthetic; otherwise false\n-   * @throws IllegalAccessException \n-   * @throws IllegalArgumentException \n+   * @throws IllegalAccessException\n+   * @throws IllegalArgumentException\n    */\n   Object get(Object instance) throws IllegalAccessException {\n     return field.get(instance);\n   }\n-  \n+\n   /**\n    * This is exposed internally only for the removing synthetic fields from the JSON output.\n    *\n   boolean isSynthetic() {\n     return isSynthetic;\n   }\n-  \n+\n   /**\n    * @deprecated remove this when {@link FieldNamingStrategy} is deleted.\n    */\n--- a/gson/src/test/java/com/google/gson/FieldAttributesTest.java\n+++ b/gson/src/test/java/com/google/gson/FieldAttributesTest.java\n \n package com.google.gson;\n \n+import com.google.gson.reflect.TypeToken;\n+\n+import junit.framework.TestCase;\n+\n import java.lang.reflect.Modifier;\n import java.lang.reflect.Type;\n import java.util.List;\n-\n-import junit.framework.TestCase;\n-\n-import com.google.gson.reflect.TypeToken;\n \n /**\n  * Unit tests for the {@link FieldAttributes} class.\n       new FieldAttributes(Foo.class, null);\n       fail(\"Field parameter can not be null\");\n     } catch (NullPointerException expected) { }\n+  }\n+\n+  public void testDeclaringClass() throws Exception {\n+    assertEquals(Foo.class, fieldAttributes.getDeclaringClass());\n   }\n \n   public void testModifiers() throws Exception {", "timestamp": 1288650708, "metainfo": ""}