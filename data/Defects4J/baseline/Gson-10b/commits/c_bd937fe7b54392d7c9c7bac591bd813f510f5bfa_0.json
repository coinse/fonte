{"sha": "bd937fe7b54392d7c9c7bac591bd813f510f5bfa", "log": "A type adapter for Class that throws an UnsupportedOperationException.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     factories.add(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization));\n     factories.add(ArrayTypeAdapter.FACTORY);\n     factories.add(TypeAdapters.ENUM_FACTORY);\n+    factories.add(TypeAdapters.CLASS_FACTORY);\n     factories.add(reflectiveTypeAdapterFactory);\n \n     this.factories = Collections.unmodifiableList(factories);\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n public final class TypeAdapters {\n   private TypeAdapters() {}\n \n+  @SuppressWarnings(\"rawtypes\")\n+  public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {\n+\t@Override\n+\tpublic void write(JsonWriter out, Class value) throws IOException {\n+\t  if (value == null) {\n+\t    return;\n+\t  }\n+\t  throw new UnsupportedOperationException(\"Attempted to serialize java.lang.Class: \"\n+\t      + value.getName() + \". Forgot to register a type adapter?\");\n+\t}\n+\t@Override\n+\tpublic Class read(JsonReader in) throws IOException {\n+      throw new UnsupportedOperationException(\n+          \"Attempted to deserialize a java.lang.Class. Forgot to register a type adapter?\");\n+\t}\n+  };\n+  public static final TypeAdapter.Factory CLASS_FACTORY = newFactory(Class.class, CLASS);\n+\n   public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {\n     public BitSet read(JsonReader in) throws IOException {\n       if (in.peek() == JsonToken.NULL) {\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n  */\n package com.google.gson.functional;\n \n-import com.google.gson.Gson;\n-import com.google.gson.GsonBuilder;\n-import com.google.gson.JsonArray;\n-import com.google.gson.JsonDeserializationContext;\n-import com.google.gson.JsonDeserializer;\n-import com.google.gson.JsonElement;\n-import com.google.gson.JsonNull;\n-import com.google.gson.JsonObject;\n-import com.google.gson.JsonParseException;\n-import com.google.gson.JsonPrimitive;\n-import com.google.gson.reflect.TypeToken;\n+import java.io.IOException;\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.util.TimeZone;\n import java.util.TreeSet;\n import java.util.UUID;\n+\n import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n \n /**\n  * Functional test for Json serialization and deserialization for common classes for which default\n   protected void tearDown() throws Exception {\n     TimeZone.setDefault(oldTimeZone);\n     super.tearDown();\n+  }\n+\n+  public void testClassSerialization() {\n+    try {\n+      gson.toJson(String.class);  \n+    } catch (UnsupportedOperationException expected) {}\n+    // Override with a custom type adapter for class.\n+    gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n+    assertEquals(\"\\\"java.lang.String\\\"\", gson.toJson(String.class));  \n+  }\n+\n+  public void testClassDeserialization() {\n+    try {\n+      gson.fromJson(\"String.class\", String.class.getClass());  \n+    } catch (UnsupportedOperationException expected) {}\n+    // Override with a custom type adapter for class.\n+    gson = new GsonBuilder().registerTypeAdapter(Class.class, new MyClassTypeAdapter()).create();\n+    assertEquals(String.class, gson.fromJson(\"java.lang.String\", Class.class));  \n   }\n \n   public void testUrlSerialization() throws Exception {\n     StringBuffer sb = gson.fromJson(\"'abc'\", StringBuffer.class);\n     assertEquals(\"abc\", sb.toString());\n   }\n+\n+  @SuppressWarnings(\"rawtypes\")\n+  private static class MyClassTypeAdapter extends TypeAdapter<Class> {\n+    @Override\n+    public void write(JsonWriter out, Class value) throws IOException {\n+      out.value(value.getName());\n+    }\n+    @Override\n+    public Class read(JsonReader in) throws IOException {\n+      String className = in.nextString();\n+      try {\n+        return Class.forName(className);\n+      } catch (ClassNotFoundException e) {\n+        throw new IOException(e);\n+      }\n+    }\n+  }\n }", "timestamp": 1324593103, "metainfo": ""}