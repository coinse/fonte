{"sha": "646d94d420e04f1eaf3465c5df91900e558d6c5f", "log": "test for issue 58", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n     assertEquals(7, target.getBag().getIntValue());\n   }\n   \n+  public void testCustomTypeAdapterAppliesToSubClasses() {\n+    Gson gson = new GsonBuilder().registerTypeAdapter(Base.class, new JsonSerializer<Base> () {\n+      public JsonElement serialize(Base src, Type typeOfSrc, JsonSerializationContext context) {\n+        JsonObject json = new JsonObject();\n+        json.addProperty(\"value\", src.baseValue);\n+        return json;\n+      }          \n+    }).create();\n+    Base b = new Base();\n+    String json = gson.toJson(b);\n+    assertTrue(json.contains(\"value\"));    \n+    b = new Derived();\n+    json = gson.toJson(b, Base.class);\n+    assertTrue(json.contains(\"value\"));    \n+    assertFalse(json.contains(\"derivedValue\"));\n+  }\n+  \n+  private static class Base {\n+    int baseValue = 2;\n+  }\n+  \n+  private static class Derived extends Base {\n+    int derivedValue = 3;\n+  }\n+  \n+  \n   private Gson createGsonObjectWithFooTypeAdapter() {\n     return new GsonBuilder().registerTypeAdapter(Foo.class, new FooTypeAdapter()).create();\n   }", "timestamp": 1224010474, "metainfo": ""}