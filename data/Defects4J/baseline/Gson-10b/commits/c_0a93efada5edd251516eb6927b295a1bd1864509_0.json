{"sha": "0a93efada5edd251516eb6927b295a1bd1864509", "log": "Merge pull request #652 from schlan/fix_turkish_locale_issues  Fix issues if runing in an environment with a Turkish locale", "commit": "\n--- a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java\n package com.google.gson;\n \n import java.lang.reflect.Field;\n+import java.util.Locale;\n \n /**\n  * An enumeration that defines a few standard naming conventions for JSON field names.\n    */\n   LOWER_CASE_WITH_UNDERSCORES() {\n     public String translateName(Field f) {\n-      return separateCamelCase(f.getName(), \"_\").toLowerCase();\n+      return separateCamelCase(f.getName(), \"_\").toLowerCase(Locale.ENGLISH);\n     }\n   },\n \n    */\n   LOWER_CASE_WITH_DASHES() {\n     public String translateName(Field f) {\n-      return separateCamelCase(f.getName(), \"-\").toLowerCase();\n+      return separateCamelCase(f.getName(), \"-\").toLowerCase(Locale.ENGLISH);\n     }\n   };\n \n--- a/gson/src/test/java/com/google/gson/functional/FieldNamingTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/FieldNamingTest.java\n import static com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES;\n import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE;\n import static com.google.gson.FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES;\n+\n+import com.google.gson.FieldNamingPolicy;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.annotations.SerializedName;\n \n public final class FieldNamingTest extends TestCase {\n   public void testIdentity() {\n-    Gson gson = new GsonBuilder().setFieldNamingPolicy(IDENTITY).create();\n+    Gson gson = getGsonWithNamingPolicy(IDENTITY);\n     assertEquals(\"{'lowerCamel':1,'UpperCamel':2,'_lowerCamelLeadingUnderscore':3,\" +\n         \"'_UpperCamelLeadingUnderscore':4,'lower_words':5,'UPPER_WORDS':6,\" +\n-        \"'annotatedName':7}\",\n+        \"'annotatedName':7,'lowerId':8}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testUpperCamelCase() {\n-    Gson gson = new GsonBuilder().setFieldNamingPolicy(UPPER_CAMEL_CASE).create();\n+    Gson gson = getGsonWithNamingPolicy(UPPER_CAMEL_CASE);\n     assertEquals(\"{'LowerCamel':1,'UpperCamel':2,'_LowerCamelLeadingUnderscore':3,\" +\n         \"'_UpperCamelLeadingUnderscore':4,'Lower_words':5,'UPPER_WORDS':6,\" +\n-        \"'annotatedName':7}\",\n+        \"'annotatedName':7,'LowerId':8}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testUpperCamelCaseWithSpaces() {\n-    Gson gson = new GsonBuilder().setFieldNamingPolicy(UPPER_CAMEL_CASE_WITH_SPACES).create();\n+    Gson gson = getGsonWithNamingPolicy(UPPER_CAMEL_CASE_WITH_SPACES);\n     assertEquals(\"{'Lower Camel':1,'Upper Camel':2,'_Lower Camel Leading Underscore':3,\" +\n         \"'_ Upper Camel Leading Underscore':4,'Lower_words':5,'U P P E R_ W O R D S':6,\" +\n-        \"'annotatedName':7}\",\n+        \"'annotatedName':7,'Lower Id':8}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testLowerCaseWithUnderscores() {\n-    Gson gson = new GsonBuilder().setFieldNamingPolicy(LOWER_CASE_WITH_UNDERSCORES).create();\n+    Gson gson = getGsonWithNamingPolicy(LOWER_CASE_WITH_UNDERSCORES);\n     assertEquals(\"{'lower_camel':1,'upper_camel':2,'_lower_camel_leading_underscore':3,\" +\n         \"'__upper_camel_leading_underscore':4,'lower_words':5,'u_p_p_e_r__w_o_r_d_s':6,\" +\n-        \"'annotatedName':7}\",\n+        \"'annotatedName':7,'lower_id':8}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n   }\n \n   public void testLowerCaseWithDashes() {\n-    Gson gson = new GsonBuilder().setFieldNamingPolicy(LOWER_CASE_WITH_DASHES).create();\n+    Gson gson = getGsonWithNamingPolicy(LOWER_CASE_WITH_DASHES);\n     assertEquals(\"{'lower-camel':1,'upper-camel':2,'_lower-camel-leading-underscore':3,\" +\n         \"'_-upper-camel-leading-underscore':4,'lower_words':5,'u-p-p-e-r_-w-o-r-d-s':6,\" +\n-        \"'annotatedName':7}\",\n+        \"'annotatedName':7,'lower-id':8}\",\n         gson.toJson(new TestNames()).replace('\\\"', '\\''));\n+  }\n+\n+  private Gson getGsonWithNamingPolicy(FieldNamingPolicy fieldNamingPolicy){\n+    return new GsonBuilder()\n+      .setFieldNamingPolicy(fieldNamingPolicy)\n+        .create();\n   }\n \n   @SuppressWarnings(\"unused\") // fields are used reflectively\n     int lower_words = 5;\n     int UPPER_WORDS = 6;\n     @SerializedName(\"annotatedName\") int annotated = 7;\n+    int lowerId = 8;\n   }\n }\n--- a/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java\n+++ b/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java\n         }\n         Streams.write(clone, out);\n       }\n-    };\n+    }.nullSafe();\n   }\n }\n--- a/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java\n+++ b/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java\n     }\n   }\n \n+  public void testSerializeWrappedNullValue() {\n+    TypeAdapterFactory billingAdapter = RuntimeTypeAdapterFactory.of(BillingInstrument.class)\n+        .registerSubtype(CreditCard.class)\n+        .registerSubtype(BankTransfer.class);    \n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapterFactory(billingAdapter)\n+        .create();    \n+    String serialized = gson.toJson(new BillingInstrumentWrapper(null), BillingInstrumentWrapper.class);\n+    BillingInstrumentWrapper deserialized = gson.fromJson(serialized, BillingInstrumentWrapper.class);\n+    assertNull(deserialized.instrument);\n+  }\n+\n+  static class BillingInstrumentWrapper {\n+    BillingInstrument instrument;\n+    BillingInstrumentWrapper(BillingInstrument instrument) {\n+      this.instrument = instrument;\n+    }\n+  }\n+\n   static class BillingInstrument {\n     private final String ownerName;\n     BillingInstrument(String ownerName) {\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n \n import com.google.gson.internal.ConstructorConstructor;\n import com.google.gson.internal.Excluder;\n  * @author Joel Leitch\n  * @author Jesse Wilson\n  */\n+@ThreadSafe\n public final class Gson {\n   static final boolean DEFAULT_JSON_NON_EXECUTABLE = false;\n \n--- a/gson/src/main/java/com/google/gson/JsonArray.java\n+++ b/gson/src/main/java/com/google/gson/JsonArray.java\n   }\n \n   /**\n+   * Adds the specified boolean to self.\n+   *\n+   * @param bool the boolean that needs to be added to the array.\n+   */\n+  public void add(Boolean bool) {\n+    elements.add(bool == null ? JsonNull.INSTANCE : new JsonPrimitive(bool));\n+  }\n+\n+  /**\n+   * Adds the specified character to self.\n+   *\n+   * @param character the character that needs to be added to the array.\n+   */\n+  public void add(Character character) {\n+    elements.add(character == null ? JsonNull.INSTANCE : new JsonPrimitive(character));\n+  }\n+\n+  /**\n+   * Adds the specified number to self.\n+   *\n+   * @param number the number that needs to be added to the array.\n+   */\n+  public void add(Number number) {\n+    elements.add(number == null ? JsonNull.INSTANCE : new JsonPrimitive(number));\n+  }\n+\n+  /**\n+   * Adds the specified string to self.\n+   *\n+   * @param string the string that needs to be added to the array.\n+   */\n+  public void add(String string) {\n+    elements.add(string == null ? JsonNull.INSTANCE : new JsonPrimitive(string));\n+  }\n+\n+  /**\n    * Adds the specified element to self.\n    *\n    * @param element the element that needs to be added to the array.\n--- a/gson/src/main/java/com/google/gson/TypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TypeAdapter.java\n    * @param value the Java object to convert. May be null.\n    * @since 2.2\n    */\n-  public final String toJson(T value) throws IOException {\n+  public final String toJson(T value) {\n     StringWriter stringWriter = new StringWriter();\n-    toJson(stringWriter, value);\n+    try {\n+      toJson(stringWriter, value);\n+    } catch (IOException e) {\n+      throw new AssertionError(e); // No I/O writing to a StringWriter.\n+    }\n     return stringWriter.toString();\n   }\n \n--- a/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n   }\n \n   /**\n+   * Writes {@code value} directly to the writer without quoting or\n+   * escaping.\n+   *\n+   * @param value the literal string value, or null to encode a null literal.\n+   * @return this writer.\n+   */\n+  public JsonWriter jsonValue(String value) throws IOException {\n+    if (value == null) {\n+      return nullValue();\n+    }\n+    writeDeferredName();\n+    beforeValue(false);\n+    out.append(value);\n+    return this;\n+  }\n+\n+  /**\n    * Encodes {@code null}.\n    *\n    * @return this writer.\n--- a/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java\n   }\n   \n   public void testInetAddressSerializationAndDeserialization() throws Exception {\n-    InetAddress localhost = InetAddress.getLocalHost();\n-    String localInetAddress = gson.toJson(localhost);\n-    assertEquals(\"\\\"\" + localhost.getHostAddress() + \"\\\"\", localInetAddress);\n+    InetAddress address = InetAddress.getByName(\"8.8.8.8\");\n+    String jsonAddress = gson.toJson(address);\n+    assertEquals(\"\\\"8.8.8.8\\\"\", jsonAddress);\n     \n-    InetAddress value = gson.fromJson(localInetAddress, InetAddress.class);\n-    assertEquals(localhost, value);\n+    InetAddress value = gson.fromJson(jsonAddress, InetAddress.class);\n+    assertEquals(value, address);\n   } \n }\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/JsonArrayTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import com.google.gson.JsonArray;\n+import junit.framework.TestCase;\n+\n+import java.math.BigInteger;\n+\n+/**\n+ * Functional tests for adding primitives to a JsonArray.\n+ *\n+ * @author Dillon Dixon\n+ */\n+public class JsonArrayTest extends TestCase {\n+\n+  public void testStringPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add(\"Hello\");\n+    jsonArray.add(\"Goodbye\");\n+    jsonArray.add(\"Thank you\");\n+    jsonArray.add((String) null);\n+    jsonArray.add(\"Yes\");\n+\n+    assertEquals(\"[\\\"Hello\\\",\\\"Goodbye\\\",\\\"Thank you\\\",null,\\\"Yes\\\"]\", jsonArray.toString());\n+  }\n+\n+  public void testIntegerPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    int x = 1;\n+    jsonArray.add(x);\n+\n+    x = 2;\n+    jsonArray.add(x);\n+\n+    x = -3;\n+    jsonArray.add(x);\n+\n+    jsonArray.add((Integer) null);\n+\n+    x = 4;\n+    jsonArray.add(x);\n+\n+    x = 0;\n+    jsonArray.add(x);\n+\n+    assertEquals(\"[1,2,-3,null,4,0]\", jsonArray.toString());\n+  }\n+\n+  public void testDoublePrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    double x = 1.0;\n+    jsonArray.add(x);\n+\n+    x = 2.13232;\n+    jsonArray.add(x);\n+\n+    x = 0.121;\n+    jsonArray.add(x);\n+\n+    jsonArray.add((Double) null);\n+\n+    x = -0.00234;\n+    jsonArray.add(x);\n+\n+    jsonArray.add((Double) null);\n+\n+    assertEquals(\"[1.0,2.13232,0.121,null,-0.00234,null]\", jsonArray.toString());\n+  }\n+\n+  public void testBooleanPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add(true);\n+    jsonArray.add(true);\n+    jsonArray.add(false);\n+    jsonArray.add(false);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add(true);\n+\n+    assertEquals(\"[true,true,false,false,null,true]\", jsonArray.toString());\n+  }\n+\n+  public void testCharPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add('a');\n+    jsonArray.add('e');\n+    jsonArray.add('i');\n+    jsonArray.add((char) 111);\n+    jsonArray.add((Character) null);\n+    jsonArray.add('u');\n+    jsonArray.add(\"and sometimes Y\");\n+\n+    assertEquals(\"[\\\"a\\\",\\\"e\\\",\\\"i\\\",\\\"o\\\",null,\\\"u\\\",\\\"and sometimes Y\\\"]\", jsonArray.toString());\n+  }\n+\n+  public void testMixedPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add('a');\n+    jsonArray.add(\"apple\");\n+    jsonArray.add(12121);\n+    jsonArray.add((char) 111);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Character) null);\n+    jsonArray.add(12.232);\n+    jsonArray.add(BigInteger.valueOf(2323));\n+\n+    assertEquals(\"[\\\"a\\\",\\\"apple\\\",12121,\\\"o\\\",null,null,12.232,2323]\", jsonArray.toString());\n+  }\n+\n+  public void testNullPrimitiveAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add((Character) null);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Integer) null);\n+    jsonArray.add((Double) null);\n+    jsonArray.add((Float) null);\n+    jsonArray.add((BigInteger) null);\n+    jsonArray.add((String) null);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Number) null);\n+\n+    assertEquals(\"[null,null,null,null,null,null,null,null,null]\", jsonArray.toString());\n+  }\n+\n+  public void testSameAddition() {\n+    JsonArray jsonArray = new JsonArray();\n+\n+    jsonArray.add('a');\n+    jsonArray.add('a');\n+    jsonArray.add(true);\n+    jsonArray.add(true);\n+    jsonArray.add(1212);\n+    jsonArray.add(1212);\n+    jsonArray.add(34.34);\n+    jsonArray.add(34.34);\n+    jsonArray.add((Boolean) null);\n+    jsonArray.add((Boolean) null);\n+\n+    assertEquals(\"[\\\"a\\\",\\\"a\\\",true,true,1212,1212,34.34,34.34,null,null]\", jsonArray.toString());\n+  }\n+}\n--- a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java\n     jsonWriter.value((String) null);\n     jsonWriter.endObject();\n     assertEquals(\"{\\\"a\\\":null}\", stringWriter.toString());\n+  }\n+\n+  public void testJsonValue() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+    jsonWriter.beginObject();\n+    jsonWriter.name(\"a\");\n+    jsonWriter.jsonValue(\"{\\\"b\\\":true}\");\n+    jsonWriter.name(\"c\");\n+    jsonWriter.value(1);\n+    jsonWriter.endObject();\n+    assertEquals(\"{\\\"a\\\":{\\\"b\\\":true},\\\"c\\\":1}\", stringWriter.toString());\n   }\n \n   public void testNonFiniteDoubles() throws IOException {", "timestamp": 1439050248, "metainfo": ""}