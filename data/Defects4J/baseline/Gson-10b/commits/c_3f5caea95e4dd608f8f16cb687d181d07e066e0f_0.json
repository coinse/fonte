{"sha": "3f5caea95e4dd608f8f16cb687d181d07e066e0f", "log": "New (failing) test to demonstrate that we're broken with precedence of streaming vs. nonstreaming type adapters.", "commit": "\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.TypeAdapter;\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonWriter;\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import junit.framework.TestCase;\n+\n+public final class TypeAdapterPrecedenceTest extends TestCase {\n+  private static final JsonSerializer<Foo> FOO_SERIALIZER = new JsonSerializer<Foo>() {\n+    public JsonElement serialize(Foo src, Type typeOfSrc, JsonSerializationContext context) {\n+      return new JsonPrimitive(src.name + \" (via FOO_SERIALIZER)\");\n+    }\n+  };\n+\n+  private static final JsonDeserializer<Foo> FOO_DESERIALIZER = new JsonDeserializer<Foo>() {\n+    public Foo deserialize(JsonElement json, Type typeOfT,\n+        JsonDeserializationContext context) throws JsonParseException {\n+      return new Foo(json.getAsString() + \" (via FOO_DESERIALIZER)\");\n+    }\n+  };\n+\n+  private static final TypeAdapter<Foo> FOO_TYPE_ADAPTER = new TypeAdapter<Foo>() {\n+    @Override public Foo read(JsonReader reader) throws IOException {\n+      return new Foo(reader.nextString() + \" (via FOO_TYPE_ADAPTER)\");\n+    }\n+    @Override public void write(JsonWriter writer, Foo value) throws IOException {\n+      writer.value(value.name + \" (via FOO_TYPE_ADAPTER)\");\n+    }\n+  };\n+\n+  public void testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter() {\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(Foo.class, FOO_SERIALIZER)\n+        .typeAdapter(Foo.class, FOO_TYPE_ADAPTER)\n+        .create();\n+    assertEquals(\"\\\"foo (via FOO_SERIALIZER)\\\"\", gson.toJson(new Foo(\"foo\")));\n+  }\n+\n+  public void testSerializeStreamingTypeAdapterFollowedByNonstreamingTypeAdapter() {\n+    Gson gson = new GsonBuilder()\n+        .typeAdapter(Foo.class, FOO_TYPE_ADAPTER)\n+        .registerTypeAdapter(Foo.class, FOO_SERIALIZER)\n+        .create();\n+    assertEquals(\"\\\"foo (via FOO_TYPE_ADAPTER)\\\"\", gson.toJson(new Foo(\"foo\")));\n+  }\n+\n+  public void testDeserializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter() {\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(Foo.class, FOO_DESERIALIZER)\n+        .typeAdapter(Foo.class, FOO_TYPE_ADAPTER)\n+        .create();\n+    assertEquals(\"foo (via FOO_DESERIALIZER)\", gson.fromJson(\"foo\", Foo.class).name);\n+  }\n+\n+  public void testDeserializeStreamingTypeAdapterFollowedByNonstreamingTypeAdapter() {\n+    Gson gson = new GsonBuilder()\n+        .typeAdapter(Foo.class, FOO_TYPE_ADAPTER)\n+        .registerTypeAdapter(Foo.class, FOO_DESERIALIZER)\n+        .create();\n+    assertEquals(\"foo (via FOO_TYPE_ADAPTER)\", gson.fromJson(\"foo\", Foo.class).name);\n+  }\n+\n+  private static class Foo {\n+    private final String name;\n+    private Foo(String name) {\n+      this.name = name;\n+    }\n+  }\n+}", "timestamp": 1321803326, "metainfo": ""}