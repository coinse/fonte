{"sha": "8217aca9250c59fef8dbe3b7fe7fd4da86ab1ae0", "log": "Converted java.sql.Date  type adapters to the new style.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n-import java.util.Calendar;\n import java.util.Date;\n-import java.util.GregorianCalendar;\n import java.util.Locale;\n import java.util.TimeZone;\n \n final class DefaultTypeAdapters {\n \n   private static final DefaultDateTypeAdapter DATE_TYPE_ADAPTER = new DefaultDateTypeAdapter();\n-  private static final DefaultJavaSqlDateTypeAdapter JAVA_SQL_DATE_TYPE_ADAPTER =\n-    new DefaultJavaSqlDateTypeAdapter();\n   private static final DefaultTimeTypeAdapter TIME_TYPE_ADAPTER =\n     new DefaultTimeTypeAdapter();\n   private static final DefaultTimestampDeserializer TIMESTAMP_DESERIALIZER =\n         new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n \n     map.register(Date.class, DATE_TYPE_ADAPTER, true);\n-    map.register(java.sql.Date.class, JAVA_SQL_DATE_TYPE_ADAPTER, true);\n     map.register(Timestamp.class, DATE_TYPE_ADAPTER, true);\n     map.register(Time.class, TIME_TYPE_ADAPTER, true);\n \n     ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n     map.register(Date.class, wrapDeserializer(DATE_TYPE_ADAPTER), true);\n-    map.register(java.sql.Date.class, wrapDeserializer(JAVA_SQL_DATE_TYPE_ADAPTER), true);\n     map.register(Timestamp.class, wrapDeserializer(TIMESTAMP_DESERIALIZER), true);\n     map.register(Time.class, wrapDeserializer(TIME_TYPE_ADAPTER), true);\n \n     }\n   }\n \n-  static final class DefaultJavaSqlDateTypeAdapter implements JsonSerializer<java.sql.Date>,\n-      JsonDeserializer<java.sql.Date> {\n-    private final DateFormat format;\n-    DefaultJavaSqlDateTypeAdapter() {\n-      this.format = new SimpleDateFormat(\"MMM d, yyyy\");\n-    }\n-\n-    public JsonElement serialize(java.sql.Date src, Type typeOfSrc,\n-        JsonSerializationContext context) {\n-      synchronized (format) {\n-        String dateFormatAsString = format.format(src);\n-        return new JsonPrimitive(dateFormatAsString);\n-      }\n-    }\n-\n-    public java.sql.Date deserialize(JsonElement json, Type typeOfT,\n-        JsonDeserializationContext context) throws JsonParseException {\n-      if (!(json instanceof JsonPrimitive)) {\n-        throw new JsonParseException(\"The date should be a string value\");\n-      }\n-      try {\n-        synchronized (format) {\n-          Date date = format.parse(json.getAsString());\n-          return new java.sql.Date(date.getTime());\n-        }\n-      } catch (ParseException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-  }\n-\n   static final class DefaultTimestampDeserializer implements JsonDeserializer<Timestamp> {\n     public Timestamp deserialize(JsonElement json, Type typeOfT,\n         JsonDeserializationContext context) throws JsonParseException {\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n         .factory(new GsonToMiniGsonTypeAdapterFactory(serializers, deserializers,\n             new JsonDeserializationContext(this), new JsonSerializationContext(this), serializeNulls\n         ))\n+        .factory(TypeAdapters.SQL_DATE_FACTORY)\n         .factory(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization))\n         .factory(ArrayTypeAdapter.FACTORY)\n         .factory(TypeAdapters.ENUM_FACTORY)\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n import java.util.BitSet;\n import java.util.Calendar;\n+import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.Locale;\n import java.util.StringTokenizer;\n \n   public static final TypeAdapter.Factory UUID_FACTORY = newFactory(UUID.class, UUID);\n \n+  public static final TypeAdapter<java.sql.Date> SQL_DATE = new TypeAdapter<java.sql.Date>() {\n+    private final DateFormat format = new SimpleDateFormat(\"MMM d, yyyy\");\n+    @Override\n+    public java.sql.Date read(JsonReader reader) throws IOException {\n+      try {\n+        synchronized (format) {\n+          Date date = format.parse(reader.nextString());\n+          return new java.sql.Date(date.getTime());\n+        }\n+      } catch (ParseException e) {\n+        throw new JsonSyntaxException(e);\n+      }\n+    }\n+    @Override\n+    public void write(JsonWriter writer, java.sql.Date value) throws IOException {\n+      writer.value(format.format(value));\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory SQL_DATE_FACTORY = newFactory(java.sql.Date.class, SQL_DATE);\n+\n   public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {\n     private static final String YEAR = \"year\";\n     private static final String MONTH = \"month\";", "timestamp": 1316478397, "metainfo": ""}