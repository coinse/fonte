{"sha": "5ae7e1f8032ac2118e6b69dce9dd089286413846", "log": "Adding new convenience method to JsonObject for adding Booleans and Characters.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n    * @param value the string value associated with the member.\n    */\n   public void addProperty(String property, String value) {\n-    members.put(property, new JsonPrimitive(value));\n+    add(property, createJsonElement(value));\n   }\n   \n   /**\n    * @param value the number value associated with the member.\n    */\n   public void addProperty(String property, Number value) {\n-    members.put(property, new JsonPrimitive(value));\n+    add(property, createJsonElement(value));\n+  }\n+  \n+  /**\n+   * Convenience method to add a boolean member. The specified value is converted to a \n+   * JsonPrimitive of Boolean. \n+   *  \n+   * @param property name of the member.\n+   * @param value the number value associated with the member.\n+   */\n+  public void addProperty(String property, Boolean value) {\n+    add(property, createJsonElement(value));\n+  }\n+  \n+  /**\n+   * Convenience method to add a char member. The specified value is converted to a \n+   * JsonPrimitive of Character. \n+   *  \n+   * @param property name of the member.\n+   * @param value the number value associated with the member.\n+   */\n+  public void addProperty(String property, Character value) {\n+    add(property, createJsonElement(value));\n+  }\n+\n+  /**\n+   * Creates the proper {@link JsonElement} object from the given {@code value} object.\n+   *\n+   * @param value the object to generate the {@link JsonElement} for\n+   * @return a {@link JsonPrimitive} if the {@code value} is not null, otherwise a {@link JsonNull}\n+   */\n+  private JsonElement createJsonElement(Object value) {\n+    if (value == null) {\n+      return JsonNull.createJsonNull();\n+    } else {\n+      return new JsonPrimitive(value);\n+    }\n   }\n \n   /**\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n   }\n \n   /**\n-   * Create a primitive containing a character. The character is turned into a one character String\n-   * since Json only supports String.\n-   *\n-   * @param c the value to create the primitive with.\n-   */\n-  public JsonPrimitive(char c) {\n-    this.value = String.valueOf(c);\n-  }\n-\n-  /**\n    * Create a primitive using the specified Object. It must be an instance of {@link Number}, a\n    * Java primitive type, or a String.\n    *\n     if (primitive instanceof Character) {\n       // convert characters to strings since in JSON, characters are represented as a single\n       // character string\n-      char c = ((Character)primitive).charValue();\n+      char c = ((Character) primitive).charValue();\n       this.value = String.valueOf(c);\n     } else {\n       Preconditions.checkArgument(primitive instanceof Number\n--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonObjectTest.java\n     assertNotNull(jsonElement);\n     assertTrue(jsonElement.isJsonNull());\n   }\n+  \n+  public void testAddingBooleanProperties() throws Exception {\n+    String propertyName = \"property\";\n+    JsonObject jsonObj = new JsonObject();\n+    jsonObj.addProperty(propertyName, true);\n+    \n+    assertTrue(jsonObj.has(propertyName));\n+    \n+    JsonElement jsonElement = jsonObj.get(propertyName);\n+    assertNotNull(jsonElement);\n+    assertTrue(jsonElement.getAsBoolean());\n+  }\n+  \n+  public void testAddingStringProperties() throws Exception {\n+    String propertyName = \"property\";\n+    String value = \"blah\";\n+\n+    JsonObject jsonObj = new JsonObject();\n+    jsonObj.addProperty(propertyName, value);\n+    \n+    assertTrue(jsonObj.has(propertyName));\n+    \n+    JsonElement jsonElement = jsonObj.get(propertyName);\n+    assertNotNull(jsonElement);\n+    assertEquals(value, jsonElement.getAsString());\n+  }\n+  \n+  public void testAddingCharacterProperties() throws Exception {\n+    String propertyName = \"property\";\n+    char value = 'a';\n+\n+    JsonObject jsonObj = new JsonObject();\n+    jsonObj.addProperty(propertyName, value);\n+    \n+    assertTrue(jsonObj.has(propertyName));\n+    \n+    JsonElement jsonElement = jsonObj.get(propertyName);\n+    assertNotNull(jsonElement);\n+    assertEquals(String.valueOf(value), jsonElement.getAsString());\n+    assertEquals(value, jsonElement.getAsCharacter());\n+  }\n }", "timestamp": 1228088189, "metainfo": ""}