{"sha": "2716d96516303964f8beeb3d3a05477235fb36bc", "log": "Revised ancestor stack to use both object and type", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonArrayDeserializationVisitor<T> visitor = new JsonArrayDeserializationVisitor<T>(\n         jsonArray, arrayType, navigatorFactory, objectConstructor, deserializers, context);\n-    ObjectNavigator on = navigatorFactory.create(null, arrayType);\n+    ObjectNavigator on = navigatorFactory.create(new ObjectTypePair(null, arrayType));\n     on.accept(visitor);\n     return visitor.getTarget();\n   }\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n         jsonObject, typeOfT, navigatorFactory, objectConstructor, deserializers, context);\n-    ObjectNavigator on = navigatorFactory.create(null, typeOfT);\n+    ObjectNavigator on = navigatorFactory.create(new ObjectTypePair(null, typeOfT));\n     on.accept(visitor);\n     return visitor.getTarget();\n   }\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n         json, typeOfT, navigatorFactory, objectConstructor, deserializers, context);\n-    ObjectNavigator on = navigatorFactory.create(json.getAsObject(), typeOfT);\n+    ObjectNavigator on = navigatorFactory.create(new ObjectTypePair(json.getAsObject(), typeOfT));\n     on.accept(visitor);\n     Object target = visitor.getTarget();\n     return (T) target;\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n \n   protected abstract T constructTarget();\n \n-  public void start(Object node) {\n+  public void start(ObjectTypePair node) {\n   }\n \n-  public void end(Object node) {\n+  public void end(ObjectTypePair node) {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public final boolean visitUsingCustomHandler(Object obj, Type objType) {\n+  public final boolean visitUsingCustomHandler(ObjectTypePair objTypePair) {\n+    Type objType = objTypePair.getType();\n     JsonDeserializer deserializer = deserializers.getHandlerFor(objType);\n     if (deserializer != null) {\n       target = (T) deserializer.deserialize(json, objType, context);\n   }\n \n   private Object visitChild(Type type, JsonDeserializationVisitor<?> childVisitor) {\n-    ObjectNavigator on = factory.create(null, type);\n+    ObjectNavigator on = factory.create(new ObjectTypePair(null, type));\n     on.accept(childVisitor);\n     // the underlying object may have changed during the construction phase\n     // This happens primarily because of custom deserializers\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n   private final ObjectNavigatorFactory factory;\n   private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;\n   private final boolean serializeNulls;\n-  private final MemoryRefStack<Object> ancestors;\n+  private final MemoryRefStack ancestors;\n \n   JsonSerializationContextDefault(ObjectNavigatorFactory factory, boolean serializeNulls,\n       ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {\n     this.factory = factory;\n     this.serializeNulls = serializeNulls;\n     this.serializers = serializers;\n-    this.ancestors = new MemoryRefStack<Object>();\n+    this.ancestors = new MemoryRefStack();\n   }\n \n   public JsonElement serialize(Object src) {\n   }\n \n   public JsonElement serialize(Object src, Type typeOfSrc) {\n-    ObjectNavigator on = factory.create(src, typeOfSrc);\n+    ObjectNavigator on = factory.create(new ObjectTypePair(src, typeOfSrc));\n     JsonSerializationVisitor visitor =\n         new JsonSerializationVisitor(factory, serializeNulls, serializers, this, ancestors);\n     on.accept(visitor);\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n   private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;\n   private final boolean serializeNulls;\n   private final JsonSerializationContext context;\n-  private final MemoryRefStack<Object> ancestors;\n+  private final MemoryRefStack ancestors;\n   private JsonElement root;\n \n   JsonSerializationVisitor(ObjectNavigatorFactory factory, boolean serializeNulls,\n       ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n-      JsonSerializationContext context, MemoryRefStack<Object> ancestors) {\n+      JsonSerializationContext context, MemoryRefStack ancestors) {\n     this.factory = factory;\n     this.serializeNulls = serializeNulls;\n     this.serializers = serializers;\n     return null;\n   }\n \n-  public void start(Object node) {\n+  public void start(ObjectTypePair node) {\n     if (node == null) {\n       return;\n     }\n     ancestors.push(node);\n   }\n \n-  public void end(Object node) {\n+  public void end(ObjectTypePair node) {\n     if (node != null) {\n       ancestors.pop();\n     }\n       if (child != null) {\n         childType = getActualTypeIfMoreSpecific(childType, child.getClass());\n       }\n-      addAsArrayElement(childType, child);\n+      addAsArrayElement(new ObjectTypePair(child, childType));\n     }\n   }\n \n         }\n       } else {\n         Object array = getFieldValue(f, obj);\n-        addAsChildOfObject(f, typeOfF, array);\n+        addAsChildOfObject(f, new ObjectTypePair(array, typeOfF));\n       }\n     } catch (CircularReferenceException e) {\n       throw e.createDetailedException(f);\n         if (fieldValue != null) {\n           typeOfF = getActualTypeIfMoreSpecific(typeOfF, fieldValue.getClass());\n         }\n-        addAsChildOfObject(f, typeOfF, fieldValue);\n+        addAsChildOfObject(f, new ObjectTypePair(fieldValue, typeOfF));\n       }\n     } catch (CircularReferenceException e) {\n       throw e.createDetailedException(f);\n     assignToRoot(json);\n   }\n \n-  private void addAsChildOfObject(Field f, Type fieldType, Object fieldValue) {\n-    JsonElement childElement = getJsonElementForChild(fieldType, fieldValue);\n+  private void addAsChildOfObject(Field f, ObjectTypePair fieldValuePair) {\n+    JsonElement childElement = getJsonElementForChild(fieldValuePair);\n     addChildAsElement(f, childElement);\n   }\n \n     root.getAsJsonObject().add(namingPolicy.translateName(f), childElement);\n   }\n \n-  private void addAsArrayElement(Type elementType, Object elementValue) {\n-    if (elementValue == null) {\n+  private void addAsArrayElement(ObjectTypePair elementTypePair) {\n+    if (elementTypePair.getObj() == null) {\n       root.getAsJsonArray().add(JsonNull.createJsonNull());\n     } else {\n-      JsonElement childElement = getJsonElementForChild(elementType, elementValue);\n+      JsonElement childElement = getJsonElementForChild(elementTypePair);\n       root.getAsJsonArray().add(childElement);\n     }\n   }\n \n-  private JsonElement getJsonElementForChild(Type fieldType, Object fieldValue) {\n-    ObjectNavigator on = factory.create(fieldValue, fieldType);\n+  private JsonElement getJsonElementForChild(ObjectTypePair fieldValueTypePair) {\n+    ObjectNavigator on = factory.create(fieldValueTypePair);\n     JsonSerializationVisitor childVisitor =\n         new JsonSerializationVisitor(factory, serializeNulls, serializers, context, ancestors);\n     on.accept(childVisitor);\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public boolean visitUsingCustomHandler(Object obj, Type objType) {\n-    try {\n+  public boolean visitUsingCustomHandler(ObjectTypePair objTypePair) {\n+    try {\n+      Object obj = objTypePair.getObj();\n+      Type objType = objTypePair.getType();\n       JsonSerializer serializer = serializers.getHandlerFor(objType);\n       if (serializer == null && obj != null) {\n         serializer = serializers.getHandlerFor(obj.getClass());\n         if (obj == null) {\n           assignToRoot(JsonNull.createJsonNull());\n         } else {\n-          assignToRoot(invokeCustomHandler(obj, objType, serializer));\n+          assignToRoot(invokeCustomHandler(objTypePair, serializer));\n         }\n         return true;\n       }\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  private JsonElement invokeCustomHandler(Object obj, Type objType, JsonSerializer serializer) {\n-    start(obj);\n-    try {\n-      return serializer.serialize(obj, objType, context);\n+  private JsonElement invokeCustomHandler(ObjectTypePair objTypePair, JsonSerializer serializer) {\n+    start(objTypePair);\n+    try {\n+      return serializer.serialize(objTypePair.getObj(), objTypePair.getType(), context);\n     } finally {\n-      end(obj);\n+      end(objTypePair);\n     }\n   }\n \n       }\n       JsonSerializer serializer = serializers.getHandlerFor(actualTypeOfField);\n       if (serializer != null) {\n-        JsonElement child = invokeCustomHandler(obj, actualTypeOfField, serializer);\n+        ObjectTypePair objTypePair = new ObjectTypePair(obj, actualTypeOfField);\n+        JsonElement child = invokeCustomHandler(objTypePair, serializer);\n         addChildAsElement(f, child);\n         return true;\n       }\n--- a/gson/src/main/java/com/google/gson/MemoryRefStack.java\n+++ b/gson/src/main/java/com/google/gson/MemoryRefStack.java\n  *\n  * @author Joel Leitch\n  */\n-final class MemoryRefStack<T> {\n-  private final Stack<T> stack = new Stack<T>();\n+final class MemoryRefStack {\n+  private final Stack<ObjectTypePair> stack = new Stack<ObjectTypePair>();\n \n   /**\n    * Adds a new element to the top of the stack.\n    * @param obj the object to add to the stack\n    * @return the object that was added\n    */\n-  public T push(T obj) {\n+  public ObjectTypePair push(ObjectTypePair obj) {\n     Preconditions.checkNotNull(obj);\n \n     return stack.push(obj);\n    * @return the element being removed from the stack\n    * @throws java.util.EmptyStackException thrown if the stack is empty\n    */\n-  public T pop() {\n+  public ObjectTypePair pop() {\n     return stack.pop();\n   }\n \n    * @return the item from the top of the stack\n    * @throws java.util.EmptyStackException thrown if the stack is empty\n    */\n-  public T peek() {\n+  public ObjectTypePair peek() {\n     return stack.peek();\n   }\n \n    * @param obj the object to search for in the stack\n    * @return true if this object is already in the stack otherwise false\n    */\n-  public boolean contains(T obj) {\n+  public boolean contains(ObjectTypePair obj) {\n     if (obj == null) {\n       return false;\n     }\n \n-    for (T stackObject : stack) {\n-      if (obj == stackObject) {\n+    for (ObjectTypePair stackObject : stack) {\n+      if (stackObject.getObj() == obj.getObj() && stackObject.getType().equals(obj.getType()) ) {\n         return true;\n       }\n     }\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n final class ObjectNavigator {\n \n   public interface Visitor {\n-    public void start(Object node);\n-    public void end(Object node);\n+    public void start(ObjectTypePair node);\n+    public void end(ObjectTypePair node);\n \n     /**\n      * This is called before the object navigator starts visiting the current object\n      * This is called to visit an object using a custom handler\n      * @return true if a custom handler exists, false otherwise\n      */\n-    public boolean visitUsingCustomHandler(Object obj, Type objType);\n+    public boolean visitUsingCustomHandler(ObjectTypePair objTypePair);\n \n     /**\n      * This is called to visit a field of the current object using a custom handler\n   }\n \n   private final ExclusionStrategy exclusionStrategy;\n-  private final Object obj;\n-  private final Type objType;\n+  private final ObjectTypePair objTypePair;\n \n   /**\n-   * @param obj The object being navigated\n-   * @param objType The (fully genericized) type of the object being navigated\n+   * @param objTypePair The object,type (fully genericized) being navigated\n    * @param exclusionStrategy the concrete strategy object to be used to\n    *        filter out fields of an object.\n    */\n-  ObjectNavigator(Object obj, Type objType, ExclusionStrategy exclusionStrategy) {\n+  ObjectNavigator(ObjectTypePair objTypePair, ExclusionStrategy exclusionStrategy) {\n     Preconditions.checkNotNull(exclusionStrategy);\n \n-    this.obj = obj;\n-    this.objType = objType;\n+    this.objTypePair = objTypePair;\n     this.exclusionStrategy = exclusionStrategy;\n   }\n \n    * If a field is null, it does not get visited.\n    */\n   public void accept(Visitor visitor) {\n-    boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(obj, objType);\n+    boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(objTypePair);\n     if (!visitedWithCustomHandler) {\n+      Object obj = objTypePair.getObj();\n       Object objectToVisit = (obj == null) ? visitor.getTarget() : obj;\n       if (objectToVisit == null) {\n         return;\n       }\n-      TypeInfo objTypeInfo = new TypeInfo(objType);\n+      TypeInfo objTypeInfo = new TypeInfo(objTypePair.getType());\n       if (exclusionStrategy.shouldSkipClass(objTypeInfo.getRawClass())) {\n         return;\n       }\n-      visitor.start(obj);  \n+      visitor.start(objTypePair);  \n       try {\n         if (objTypeInfo.isArray()) {\n-          visitor.visitArray(objectToVisit, objType);\n+          visitor.visitArray(objectToVisit, objTypePair.getType());\n         } else if (objTypeInfo.getActualType() == Object.class\n             && isPrimitiveOrString(objectToVisit)) {\n           // TODO(Joel): this is only used for deserialization of \"primitves\"\n           }\n         }\n       } finally {\n-        visitor.end(obj);\n+        visitor.end(objTypePair);\n       }\n     }\n   }\n       if (exclusionStrategy.shouldSkipField(f)) {\n         continue; // skip\n       } else {\n-        TypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objType);\n+        TypeInfo fieldTypeInfo = TypeInfoFactory.getTypeInfoForField(f, objTypePair.getType());\n         Type actualTypeOfField = fieldTypeInfo.getActualType();\n         boolean visitedWithCustomHandler = \n             visitor.visitFieldUsingCustomHandler(f, actualTypeOfField, obj);\n--- a/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n  */\n \n package com.google.gson;\n-\n-import java.lang.reflect.Type;\n \n /**\n  * A factory class used to simplify {@link ObjectNavigator} creation.\n    * Creates a new {@link ObjectNavigator} for this {@code srcObject},\n    * {@code type} pair.\n    *\n-   * @param srcObject object to navigate\n-   * @param type the \"actual\" type of this {@code srcObject}.  NOTE: this can\n-   *        be a {@link java.lang.reflect.ParameterizedType} rather than a {@link Class}.\n+   * @param objTypePair The object,type (fully genericized) being navigated\n    * @return a new instance of a {@link ObjectNavigator} ready to navigate the\n    *         {@code srcObject} while taking into consideration the\n    *         {@code type}.\n    */\n-  public ObjectNavigator create(Object srcObject, Type type) {\n-    return new ObjectNavigator(srcObject, type, strategy);\n+  public ObjectNavigator create(ObjectTypePair objTypePair) {\n+    return new ObjectNavigator(objTypePair, strategy);\n   }\n \n   FieldNamingStrategy getFieldNamingPolicy() {\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/ObjectTypePair.java\n+package com.google.gson;\n+\n+import java.lang.reflect.Type;\n+\n+ final class ObjectTypePair {\n+  private final Object obj;\n+  private final Type type;\n+  public ObjectTypePair(Object obj, Type type) {\n+    this.obj = obj;\n+    this.type = type;\n+  }\n+  public Object getObj() {\n+    return obj;\n+  }\n+  public Type getType() {\n+    return type;\n+  }\n+  @Override\n+  public int hashCode() {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + ((obj == null) ? 0 : obj.hashCode());\n+    result = prime * result + ((type == null) ? 0 : type.hashCode());\n+    return result;\n+  }\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj)\n+      return true;\n+    if (obj == null)\n+      return false;\n+    if (getClass() != obj.getClass())\n+      return false;\n+    ObjectTypePair other = (ObjectTypePair) obj;\n+    if (this.obj == null) {\n+      if (other.obj != null)\n+        return false;\n+    } else if (!this.obj.equals(other.obj))\n+      return false;\n+    if (type == null) {\n+      if (other.type != null)\n+        return false;\n+    } else if (!type.equals(other.type))\n+      return false;\n+    return true;\n+  }\n+}\n--- a/gson/src/test/java/com/google/gson/MemoryRefStackTest.java\n+++ b/gson/src/test/java/com/google/gson/MemoryRefStackTest.java\n  * @author Joel Leitch\n  */\n public class MemoryRefStackTest extends TestCase {\n-  private MemoryRefStack<MockObject> stack;\n+  private MemoryRefStack stack;\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    stack = new MemoryRefStack<MockObject>();\n+    stack = new MemoryRefStack();\n   }\n \n   public void testPeekEmptyStack() throws Exception {\n   }\n \n   public void testPushPeekAndPop() throws Exception {\n-    MockObject obj = new MockObject();\n+    ObjectTypePair obj = new ObjectTypePair(this, getClass());\n \n     assertEquals(obj, stack.push(obj));\n     assertEquals(obj, stack.peek());\n   }\n \n   public void testPopTooMany() throws Exception {\n-    MockObject obj = new MockObject();\n+    ObjectTypePair obj = new ObjectTypePair(this, getClass());\n     stack.push(obj);\n     assertEquals(obj, stack.pop());\n \n   }\n \n   public void testContains() throws Exception {\n-    MockObject objA = new MockObject();\n-    MockObject objB = new MockObject();\n+    ObjectTypePair objA = new ObjectTypePair(new MockObject(), MockObject.class);\n+    ObjectTypePair objB = new ObjectTypePair(new MockObject(), MockObject.class);\n     assertEquals(objA, objB);\n \n     stack.push(objA);\n--- a/gson/src/test/java/com/google/gson/functional/InterfaceTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/InterfaceTest.java\n   private Gson gson;\n   private TestObject obj;\n \n+  @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n     gson = new Gson();", "timestamp": 1254545112, "metainfo": ""}