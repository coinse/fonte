{"sha": "3daf5859318d6c1f2d9b6a537115d4235533c0ef", "log": "Implemented equals and hashcode for LazilyParsedNumber to fix https://github.com/google/gson/issues/627", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java\n+++ b/gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java\n-/*\n- * Copyright (C) 2011 Google Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.google.gson.internal;\n-\n-import java.io.ObjectStreamException;\n-import java.math.BigDecimal;\n-\n-/**\n- * This class holds a number value that is lazily converted to a specific number type\n- *\n- * @author Inderjeet Singh\n- */\n-public final class LazilyParsedNumber extends Number {\n-  private final String value;\n-\n-  public LazilyParsedNumber(String value) {\n-    this.value = value;\n-  }\n-\n-  @Override\n-  public int intValue() {\n-    try {\n-      return Integer.parseInt(value);\n-    } catch (NumberFormatException e) {\n-      try {\n-        return (int) Long.parseLong(value);\n-      } catch (NumberFormatException nfe) {\n-        return new BigDecimal(value).intValue();\n-      }\n-    }\n-  }\n-\n-  @Override\n-  public long longValue() {\n-    try {\n-      return Long.parseLong(value);\n-    } catch (NumberFormatException e) {\n-      return new BigDecimal(value).longValue();\n-    }\n-  }\n-\n-  @Override\n-  public float floatValue() {\n-    return Float.parseFloat(value);\n-  }\n-\n-  @Override\n-  public double doubleValue() {\n-    return Double.parseDouble(value);\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return value;\n-  }\n-\n-  /**\n-   * If somebody is unlucky enough to have to serialize one of these, serialize\n-   * it as a BigDecimal so that they won't need Gson on the other side to\n-   * deserialize it.\n-   */\n-  private Object writeReplace() throws ObjectStreamException {\n-    return new BigDecimal(value);\n-  }\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal;\n+\n+import java.io.ObjectStreamException;\n+import java.math.BigDecimal;\n+\n+/**\n+ * This class holds a number value that is lazily converted to a specific number type\n+ *\n+ * @author Inderjeet Singh\n+ */\n+public final class LazilyParsedNumber extends Number {\n+  private final String value;\n+\n+  public LazilyParsedNumber(String value) {\n+    this.value = value;\n+  }\n+\n+  @Override\n+  public int intValue() {\n+    try {\n+      return Integer.parseInt(value);\n+    } catch (NumberFormatException e) {\n+      try {\n+        return (int) Long.parseLong(value);\n+      } catch (NumberFormatException nfe) {\n+        return new BigDecimal(value).intValue();\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public long longValue() {\n+    try {\n+      return Long.parseLong(value);\n+    } catch (NumberFormatException e) {\n+      return new BigDecimal(value).longValue();\n+    }\n+  }\n+\n+  @Override\n+  public float floatValue() {\n+    return Float.parseFloat(value);\n+  }\n+\n+  @Override\n+  public double doubleValue() {\n+    return Double.parseDouble(value);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return value;\n+  }\n+\n+  /**\n+   * If somebody is unlucky enough to have to serialize one of these, serialize\n+   * it as a BigDecimal so that they won't need Gson on the other side to\n+   * deserialize it.\n+   */\n+  private Object writeReplace() throws ObjectStreamException {\n+    return new BigDecimal(value);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return value == null ? 0 : value.hashCode();\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+    if (obj == null || !(obj instanceof LazilyParsedNumber)) {\n+      return false;\n+    }\n+    LazilyParsedNumber other = (LazilyParsedNumber) obj;\n+    return equals(value, other.value);\n+  }\n+\n+  private static boolean equals(Object obj1, Object obj2) {\n+    if (obj1 == null) return obj2 == null;\n+    return obj1 == obj2 || obj1.equals(obj2);\n+  }\n }\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java\n+/*\n+ * Copyright (C) 2015 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal;\n+\n+import junit.framework.TestCase;\n+\n+public class LazilyParsedNumberTest extends TestCase {\n+  public void testHashCode(){\n+    LazilyParsedNumber n1 = new LazilyParsedNumber(\"1\");\n+    LazilyParsedNumber n1Another = new LazilyParsedNumber(\"1\");\n+    assertEquals(n1.hashCode(), n1Another.hashCode());\n+  }\n+\n+  public void testEquals(){\n+    LazilyParsedNumber n1 = new LazilyParsedNumber(\"1\");\n+    LazilyParsedNumber n1Another = new LazilyParsedNumber(\"1\");\n+    assertTrue(n1.equals(n1Another));\n+  }\n+}", "timestamp": 1443315493, "metainfo": ""}