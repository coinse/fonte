{"sha": "aa067056c3f0846f84ab94c771f3f756a9b3e40c", "log": "Restore support for long serialization policy.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n  */\n \n package com.google.gson;\n-\n-import java.io.IOException;\n-import java.io.Reader;\n-import java.io.StringReader;\n-import java.io.StringWriter;\n-import java.io.Writer;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import java.lang.reflect.Type;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n \n import com.google.gson.internal.Streams;\n import com.google.gson.internal.bind.ArrayTypeAdapter;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n import com.google.gson.stream.MalformedJsonException;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.lang.reflect.Type;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * This is the main class for using Gson. Gson is typically used by first constructing a\n    */\n   public Gson() {\n     this(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_EXCLUSION_STRATEGY, DEFAULT_NAMING_POLICY,\n-    new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),\n-    false, DefaultTypeAdapters.getAllDefaultSerializers(),\n-    DefaultTypeAdapters.getAllDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE, true, false);\n+        new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),\n+        false, DefaultTypeAdapters.getAllDefaultSerializers(),\n+        DefaultTypeAdapters.getAllDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE, true, false,\n+        false, LongSerializationPolicy.DEFAULT);\n   }\n \n   Gson(ExclusionStrategy deserializationExclusionStrategy,\n       final MappedObjectConstructor objectConstructor, boolean serializeNulls,\n       final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n       final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n-      boolean generateNonExecutableGson, boolean htmlSafe, boolean prettyPrinting) {\n+      boolean generateNonExecutableGson, boolean htmlSafe, boolean prettyPrinting,\n+      boolean serializeSpecialFloatingPointValues, LongSerializationPolicy longSerializationPolicy) {\n     this.deserializationExclusionStrategy = deserializationExclusionStrategy;\n     this.serializationExclusionStrategy = serializationExclusionStrategy;\n     this.fieldNamingPolicy = fieldNamingPolicy;\n       }\n     };\n \n-    this.miniGson = new MiniGson.Builder()\n+    MiniGson.Builder builder = new MiniGson.Builder()\n         .withoutDefaultFactories()\n         .factory(TypeAdapters.BOOLEAN_FACTORY)\n         .factory(TypeAdapters.INTEGER_FACTORY)\n         .factory(TypeAdapters.DOUBLE_FACTORY)\n-        .factory(TypeAdapters.LONG_FACTORY)\n+        .factory(TypeAdapters.newFactory(long.class, Long.class,\n+            longAdapter(longSerializationPolicy)))\n         .factory(TypeAdapters.STRING_FACTORY)\n         .factory(new GsonToMiniGsonTypeAdapter(serializers, deserializers, serializeNulls))\n         .factory(CollectionTypeAdapter.FACTORY)\n         .factory(StringToValueMapTypeAdapter.FACTORY)\n         .factory(ArrayTypeAdapter.FACTORY)\n-        .factory(reflectiveTypeAdapterFactory)\n-        .build();\n+        .factory(reflectiveTypeAdapterFactory);\n+\n+    this.miniGson = builder.build();\n+  }\n+\n+  private TypeAdapter<Long> longAdapter(LongSerializationPolicy longSerializationPolicy) {\n+    if (longSerializationPolicy == LongSerializationPolicy.DEFAULT) {\n+      return TypeAdapters.LONG;\n+    }\n+    return new TypeAdapter<Long>() {\n+      @Override public Long read(JsonReader reader) throws IOException {\n+        return reader.nextLong();\n+      }\n+      @Override public void write(JsonWriter writer, Long value) throws IOException {\n+        writer.value(value.toString());\n+      }\n+    };\n   }\n \n   private static ExclusionStrategy createExclusionStrategy() {\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n     addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, customSerializers,\n         customDeserializers);\n \n-    customSerializers.registerIfAbsent(DefaultTypeAdapters.getDefaultSerializers(\n-        serializeSpecialFloatingPointValues, longSerializationPolicy));\n-\n     customDeserializers.registerIfAbsent(DefaultTypeAdapters.getDefaultDeserializers());\n \n     ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators =\n \n     MappedObjectConstructor objConstructor = new MappedObjectConstructor(customInstanceCreators);\n \n-    Gson gson = new Gson(new DisjunctionExclusionStrategy(deserializationStrategies),\n+    return new Gson(new DisjunctionExclusionStrategy(deserializationStrategies),\n         new DisjunctionExclusionStrategy(serializationStrategies),\n         fieldNamingPolicy, objConstructor, serializeNulls,\n         customSerializers, customDeserializers, generateNonExecutableJson, escapeHtmlChars,\n-        prettyPrinting);\n-    return gson;\n+        prettyPrinting, serializeSpecialFloatingPointValues, longSerializationPolicy);\n   }\n \n   private static void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n     };\n   }\n \n-  private static <T> TypeAdapter.Factory newFactory(\n+  public static <T> TypeAdapter.Factory newFactory(\n       final Class<T> unboxed, final Class<T> boxed, final TypeAdapter<T> typeAdapter) {\n     return new TypeAdapter.Factory() {\n       @SuppressWarnings(\"unchecked\") // we use a runtime check to make sure the 'T's equal\n--- a/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n+++ b/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n         new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),\n         false, DefaultTypeAdapters.getDefaultSerializers(),\n         DefaultTypeAdapters.getDefaultDeserializers(), Gson.DEFAULT_JSON_NON_EXECUTABLE, true,\n-        false);\n+        false, false, LongSerializationPolicy.DEFAULT);\n     assertEquals(\"{}\", gson.toJson(new ClassWithNoFields() {\n       // empty anonymous class\n     }));", "timestamp": 1312498656, "metainfo": ""}