{"sha": "fff91479886fd8e6a7518218ae065c1509d440d1", "log": "Added some tests to measure serialization and deserialization performance of Gson based on the discussion in http://groups.google.com/group/google-gson/browse_thread/thread/7a50b17a390dfaeb Surprising just marking a field as exposed halves the performance.", "commit": "\n--- a/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java\n+++ b/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java\n \n import com.google.gson.Gson;\n import com.google.gson.JsonParseException;\n+import com.google.gson.annotations.Expose;\n import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n \n+import java.io.StringWriter;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.List;\n  * @author Joel Leitch\n  */\n public class PerformanceTest extends TestCase {\n+  private static final int COLLECTION_SIZE = 5000;\n+\n+  private static final int NUM_ITERATIONS = 100;\n+\n   private Gson gson;\n \n   @Override\n       System.out.printf(\"Gson could deserialize a byte array of size: %d\\n\", ba.length);\n     }\n   }\n+\n+// The tests to measure serialization and deserialization performance of Gson\n+// Based on the discussion at\n+// http://groups.google.com/group/google-gson/browse_thread/thread/7a50b17a390dfaeb\n+// Test results: 10/19/2009 \n+// Serialize classes avg time: 60 ms\n+// Deserialized classes avg time: 70 ms\n+// Serialize exposed classes avg time: 159 ms\n+// Deserialized exposed classes avg time: 173 ms\n+  \n+  public void disable_testSerializeClasses() {\n+    ClassWithList c = new ClassWithList(\"str\"); \n+    for (int i = 0; i < 5000; ++i) { \n+      c.list.add(new ClassWithField(\"element-\" + i)); \n+    }\n+    StringWriter w = new StringWriter(); \n+    long t1 = System.currentTimeMillis(); \n+    for (int i = 0; i < NUM_ITERATIONS; ++i) { \n+      gson.toJson(c, w); \n+    } \n+    long t2 = System.currentTimeMillis(); \n+    long avg = (t2 - t1) / NUM_ITERATIONS;\n+    System.out.printf(\"Serialize classes avg time: %d ms\\n\", avg);     \n+  }\n+\n+  public void disable_testDeserializeClasses() {\n+    String json = buildJsonForClassWithList();\n+    ClassWithList[] target = new ClassWithList[NUM_ITERATIONS];\n+    long t1 = System.currentTimeMillis(); \n+    for (int i = 0; i < NUM_ITERATIONS; ++i) {\n+      target[i] = gson.fromJson(json, ClassWithList.class);\n+    }\n+    long t2 = System.currentTimeMillis(); \n+    long avg = (t2 - t1) / NUM_ITERATIONS;\n+    System.out.printf(\"Deserialize classes avg time: %d ms\\n\", avg);     \n+  }\n+\n+  public void disable_testSerializeExposedClasses() {\n+    ClassWithListOfObjects c1 = new ClassWithListOfObjects(\"str\"); \n+    for (int i1 = 0; i1 < COLLECTION_SIZE; ++i1) { \n+      c1.list.add(new ClassWithExposedField(\"element-\" + i1)); \n+    }\n+    ClassWithListOfObjects c = c1; \n+    StringWriter w = new StringWriter(); \n+    long t1 = System.currentTimeMillis(); \n+    for (int i = 0; i < NUM_ITERATIONS; ++i) { \n+      gson.toJson(c, w); \n+    } \n+    long t2 = System.currentTimeMillis(); \n+    long avg = (t2 - t1) / NUM_ITERATIONS;\n+    System.out.printf(\"Serialize exposed classes avg time: %d ms\\n\", avg);     \n+  }\n+\n+  public void disable_testDeserializeExposedClasses() {\n+    String json = buildJsonForClassWithList();\n+    ClassWithListOfObjects[] target = new ClassWithListOfObjects[NUM_ITERATIONS];\n+    long t1 = System.currentTimeMillis(); \n+    for (int i = 0; i < NUM_ITERATIONS; ++i) {\n+      target[i] = gson.fromJson(json, ClassWithListOfObjects.class);\n+    }\n+    long t2 = System.currentTimeMillis(); \n+    long avg = (t2 - t1) / NUM_ITERATIONS;\n+    System.out.printf(\"Deserialize exposed classes avg time: %d ms\\n\", avg);     \n+  }\n+\n+  private String buildJsonForClassWithList() {\n+    StringBuilder sb = new StringBuilder(\"{\");\n+    sb.append(\"field:\").append(\"'str',\");\n+    sb.append(\"list:[\");\n+    boolean first = true;\n+    for (int i = 0; i < COLLECTION_SIZE; ++i) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        sb.append(\",\");\n+      }\n+      sb.append(\"{field:'element-\" + i + \"'}\");\n+    }\n+    sb.append(\"]\");\n+    sb.append(\"}\");\n+    String json = sb.toString();\n+    return json;\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static final class ClassWithList { \n+    final String field; \n+    final List<ClassWithField> list = new ArrayList<ClassWithField>(COLLECTION_SIZE);\n+    ClassWithList() {\n+      this(null);\n+    }\n+    ClassWithList(String field) {\n+      this.field = field;\n+    }\n+  } \n+\n+  @SuppressWarnings(\"unused\")\n+  private static final class ClassWithField { \n+    final String field;\n+    ClassWithField() {\n+      this(\"\");\n+    }\n+    public ClassWithField(String field) { \n+      this.field = field; \n+    } \n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static final class ClassWithListOfObjects { \n+    @Expose \n+    final String field; \n+    @Expose \n+    final List<ClassWithExposedField> list = new ArrayList<ClassWithExposedField>(COLLECTION_SIZE);\n+    ClassWithListOfObjects() {\n+      this(null);\n+    }\n+    ClassWithListOfObjects(String field) {\n+      this.field = field;\n+    }\n+  } \n+\n+  @SuppressWarnings(\"unused\")\n+  private static final class ClassWithExposedField { \n+    @Expose \n+    final String field;\n+    ClassWithExposedField() {\n+      this(\"\");\n+    }\n+    ClassWithExposedField(String field) { \n+      this.field = field; \n+    } \n+  }\n }", "timestamp": 1255997074, "metainfo": ""}