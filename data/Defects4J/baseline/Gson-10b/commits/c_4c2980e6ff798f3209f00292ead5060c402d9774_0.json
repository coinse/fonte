{"sha": "4c2980e6ff798f3209f00292ead5060c402d9774", "log": "Fix a bug in integer parsing.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n public class JsonReader implements Closeable {\n   /** The only non-execute prefix this parser permits */\n   private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();\n+  private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;\n \n   private static final int PEEKED_NONE = 0;\n   private static final int PEEKED_BEGIN_OBJECT = 1;\n       c = get(++i);\n       while (c >= '0' && c <= '9') {\n         long newInteger = integer * 10 - (c - '0');\n-        fitsInLong &= newInteger < integer;\n+        fitsInLong = integer > MIN_INCOMPLETE_INTEGER\n+            || (integer == MIN_INCOMPLETE_INTEGER && newInteger < integer);\n         integer = newInteger;\n         c = get(++i);\n       }\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n     assertEquals(-9223372036854775808L, reader.nextLong());\n   }\n \n+  public void testPeekLongMaxValue() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[9223372036854775807]\"));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(NUMBER, reader.peek());\n+    assertEquals(9223372036854775807L, reader.nextLong());\n+  }\n+\n+  public void testLongLargerThanMaxLongThatWrapsAround() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[22233720368547758070]\"));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(NUMBER, reader.peek());\n+    try {\n+      reader.nextLong();\n+      fail();\n+    } catch (NumberFormatException expected) {\n+    }\n+  }\n+\n+  public void testLongLargerThanMinLongThatWrapsAround() throws IOException {\n+    JsonReader reader = new JsonReader(new StringReader(\"[-22233720368547758070]\"));\n+    reader.setLenient(true);\n+    reader.beginArray();\n+    assertEquals(NUMBER, reader.peek());\n+    try {\n+      reader.nextLong();\n+      fail();\n+    } catch (NumberFormatException expected) {\n+    }\n+  }\n+\n   /**\n    * This test fails because there's no double for -9223372036854775809, and our\n    * long parsing uses Double.parseDouble() for fractional values.\n    */\n-  public void disabled_testPeekLargerThanLongMinValue() throws IOException {\n+  public void testPeekLargerThanLongMinValue() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"[-9223372036854775809]\"));\n     reader.setLenient(true);\n     reader.beginArray();", "timestamp": 1346034892, "metainfo": ""}