{"sha": "d93825ba72e0ccbc6a3ec2fa0bcb2d72678333a4", "log": "First draft of RuntimeTypeAdapters", "commit": "\n--- /dev/null\n+++ b/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapter.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.typeadapters;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import java.lang.reflect.Type;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+public final class RuntimeTypeAdapter<T>\n+    implements JsonSerializer<T>, JsonDeserializer<T> {\n+\n+  private final Class<?> baseType;\n+  private final String typeFieldName;\n+  private final Map<String, Class<?>> labelToSubtype = new LinkedHashMap<String, Class<?>>();\n+  private final Map<Class<?>, String> subtypeToLabel = new LinkedHashMap<Class<?>, String>();\n+\n+  public RuntimeTypeAdapter(Class<?> baseType, String typeFieldName) {\n+    this.baseType = baseType;\n+    this.typeFieldName = typeFieldName;\n+  }\n+\n+  public static <T> RuntimeTypeAdapter<T> create(Class<T> c) {\n+    return new RuntimeTypeAdapter<T>(c, \"type\");\n+  }\n+\n+  public static <T> RuntimeTypeAdapter<T> create(Class<T> c, String typeFieldName) {\n+    return new RuntimeTypeAdapter<T>(c, typeFieldName);\n+  }\n+\n+  public void registerSubtype(Class<? extends T> type, String label) {\n+    if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {\n+      throw new IllegalArgumentException(\"types and labels must be unique\");\n+    }\n+    labelToSubtype.put(label, type);\n+    subtypeToLabel.put(type, label);\n+  }\n+\n+  public void registerSubtype(Class<? extends T> type) {\n+    registerSubtype(type, type.getSimpleName());\n+  }\n+\n+  public JsonElement serialize(T src, Type typeOfSrc, JsonSerializationContext context) {\n+    Class<?> srcType = src.getClass();\n+    String label = subtypeToLabel.get(srcType);\n+    if (label == null) {\n+      throw new IllegalArgumentException(\"cannot serialize \" + srcType.getName()\n+          + \"; did you forget to register a subtype?\");\n+    }\n+    JsonElement serialized = context.serialize(src, srcType);\n+    final JsonObject jsonObject = serialized.getAsJsonObject();\n+    if (jsonObject.has(typeFieldName)) {\n+      throw new IllegalArgumentException(\"cannot serialize \" + srcType.getName()\n+          + \" because it already defines a field named \" + typeFieldName);\n+    }\n+    JsonObject clone = new JsonObject();\n+    clone.add(typeFieldName, new JsonPrimitive(label));\n+    for (Map.Entry<String, JsonElement> e : jsonObject.entrySet()) {\n+      clone.add(e.getKey(), e.getValue());\n+    }\n+    return clone;\n+  }\n+\n+  public T deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+      throws JsonParseException {\n+    JsonElement labelJsonElement = json.getAsJsonObject().remove(typeFieldName);\n+    if (labelJsonElement == null) {\n+      throw new JsonParseException(\"cannot deserialize \" + typeOfT\n+          + \" because it does not define a field named \" + typeFieldName);\n+    }\n+    String label = labelJsonElement.getAsString();\n+    Class<?> subtype = labelToSubtype.get(label);\n+    if (subtype == null) {\n+      throw new JsonParseException(\"cannot deserialize \" + baseType + \" subtype named \"\n+          + label + \"; did you forget to register a subtype?\");\n+    }\n+    @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T\n+    T result = (T) context.deserialize(json, subtype);\n+    return result;\n+  }\n+}\n--- /dev/null\n+++ b/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.typeadapters;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import junit.framework.TestCase;\n+\n+public final class RuntimeTypeAdapterTest extends TestCase {\n+\n+  public void testRuntimeTypeAdapter() {\n+    RuntimeTypeAdapter<BillingInstrument> rta = RuntimeTypeAdapter.create(BillingInstrument.class);\n+    rta.registerSubtype(CreditCard.class);\n+\n+    CreditCard cc = new CreditCard(\"Jesse\", 234);\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(BillingInstrument.class, rta)\n+        .create();\n+    String ccJson = gson.toJson(cc, BillingInstrument.class);\n+    assertEquals(\"{\\\"type\\\":\\\"CreditCard\\\",\\\"cvv\\\":234,\\\"ownerName\\\":\\\"Jesse\\\"}\", ccJson);\n+\n+    BillingInstrument creditCard = gson.fromJson(\n+        \"{type:'CreditCard',cvv:234,ownerName:'Jesse'}\", BillingInstrument.class);\n+    assertTrue(creditCard instanceof CreditCard);\n+  }\n+\n+  static class CreditCard extends BillingInstrument {\n+    int cvv;\n+\n+    CreditCard(String ownerName, int cvv) {\n+      super(ownerName);\n+      this.cvv = cvv;\n+    }\n+  }\n+\n+  static class BillingInstrument {\n+    private final String ownerName;\n+\n+    BillingInstrument(String ownerName) {\n+      this.ownerName = ownerName;\n+    }\n+  }\n+}", "timestamp": 1305338657, "metainfo": ""}