{"sha": "eb2230caf0c8d1e2d9ea67e7c4afce72f1eccc3f", "log": "Fix nullSafe() to not infinitely recurse on non-null input.", "commit": "\n--- a/gson/src/main/java/com/google/gson/TypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TypeAdapter.java\n    *     }\n    *   }.nullSafe()).create();\n    * }</pre>\n-   * Note that we didn't need to check for nulls in our type adapter after we used nullSafe. \n+   * Note that we didn't need to check for nulls in our type adapter after we used nullSafe.\n    */\n   public TypeAdapter<T> nullSafe() {\n     return new TypeAdapter<T>() {\n         if (value == null) {\n           out.nullValue();\n         } else {\n-          write(out, value);\n+          TypeAdapter.this.write(out, value);\n         }\n       }\n       @Override public T read(JsonReader reader) throws IOException {\n           reader.nextNull();\n           return null;\n         }\n-        return read(reader);\n+        return TypeAdapter.this.read(reader);\n       }\n     };\n   }\n--- a/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java\n     truck.horsePower = 1.0D;\n     truck.passengers = new ArrayList<Person>();\n     truck.passengers.add(null);\n+    truck.passengers.add(new Person(\"jesse\", 30));\n     try {\n       gson.toJson(truck, Truck.class);\n       fail();\n     } catch (NullPointerException expected) {}\n-    String json = \"{horsePower:1.0,passengers:[null,null]}\";\n+    String json = \"{horsePower:1.0,passengers:[null,'jesse,30']}\";\n     try {\n       gson.fromJson(json, Truck.class);\n       fail();\n     } catch (JsonSyntaxException expected) {}\n     gson = new GsonBuilder().registerTypeAdapter(Person.class, typeAdapter.nullSafe()).create();\n-    assertEquals(\"{\\\"horsePower\\\":1.0,\\\"passengers\\\":[null]}\", gson.toJson(truck, Truck.class));\n+    assertEquals(\"{\\\"horsePower\\\":1.0,\\\"passengers\\\":[null,\\\"jesse,30\\\"]}\",\n+        gson.toJson(truck, Truck.class));\n     truck = gson.fromJson(json, Truck.class);\n     assertEquals(1.0D, truck.horsePower);\n     assertNull(truck.passengers.get(0));\n+    assertEquals(\"jesse\", truck.passengers.get(1).name);\n   }\n \n   public void testSerializeRecursive() throws IOException {", "timestamp": 1323185752, "metainfo": ""}