{"sha": "f291c4d33ea5fcc52afcfa5713e519e663378bda", "log": "Fix a bunch of preserve-type issues: - Issue 205 - Issue 294 - Issue 318", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n         } else {\n           Type childType = (childGenericType == null || childGenericType == Object.class)\n               ? child.getClass() : childGenericType;\n-          JsonElement element = context.serialize(child, childType);\n+          JsonSerializationContextDefault contextImpl = (JsonSerializationContextDefault) context;\n+          JsonElement element = contextImpl.serialize(child, childType, false);\n           array.add(element);\n         }\n       }\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n  */\n \n package com.google.gson;\n-\n \n import java.lang.reflect.Type;\n \n     }\n     JsonSerializationVisitor visitor = new JsonSerializationVisitor(\n         objectNavigator, fieldNamingPolicy, serializeNulls, serializers, this, ancestors);\n-    objectNavigator.accept(new ObjectTypePair(src, typeOfSrc, preserveType), visitor);\n+    ObjectTypePair objTypePair = new ObjectTypePair(src, typeOfSrc, preserveType);\n+    objectNavigator.accept(objTypePair, visitor);\n     return visitor.getJsonElement();\n   }\n-}\n+}\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n     }\n     boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(objTypePair);\n     if (!visitedWithCustomHandler) {\n+      objTypePair = objTypePair.toMoreSpecificType();\n       Object obj = objTypePair.getObject();\n       Object objectToVisit = (obj == null) ? visitor.getTarget() : obj;\n       if (objectToVisit == null) {\n       objTypePair.setObject(objectToVisit);\n       visitor.start(objTypePair);\n       try {\n-        if ($Gson$Types.isArray(objTypePair.type)) {\n+        if ($Gson$Types.isArray(objTypePair.getMoreSpecificType())) {\n           visitor.visitArray(objectToVisit, objTypePair.type);\n         } else if (objTypePair.type == Object.class && isPrimitiveOrString(objectToVisit)) {\n           // TODO(Joel): this is only used for deserialization of \"primitives\"\n--- a/gson/src/main/java/com/google/gson/ObjectTypePair.java\n+++ b/gson/src/main/java/com/google/gson/ObjectTypePair.java\n     if (actualType == type) {\n       return this;\n     }\n-    return new ObjectTypePair(obj, actualType, preserveType);\n+    return new ObjectTypePair(obj, actualType, true);\n   }\n \n   Type getMoreSpecificType() {\n--- a/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n   }\n \n   /**\n+   * Regression test for Issue 205\n+   */\n+  public void testMixingTypesInObjectArraySerialization() {\n+    Object[] array = new Object[] { 1, 2, new Object[] { \"one\", \"two\" } };\n+    assertEquals(\"[1,2,[\\\"one\\\",\\\"two\\\"]]\", gson.toJson(array));\n+  }\n+\n+  /**\n    * Regression tests for Issue 272\n    */\n   public void testMultidimenstionalArraysDeserialization() {\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n     assertEquals(expected, json);\n   }\n \n+  public void testGeneralMapField() throws Exception {\n+    MapWithGeneralMapParameters map = new MapWithGeneralMapParameters();\n+    map.map.put(\"string\", \"testString\");\n+    map.map.put(\"stringArray\", new String[] { \"one\", \"two\" });\n+    map.map.put(\"objectArray\", new Object[] { 1, 2L, \"three\" });\n+\n+    String expected = \"{\\\"map\\\":{\\\"string\\\":\\\"testString\\\",\\\"stringArray\\\":\"\n+        + \"[\\\"one\\\",\\\"two\\\"],\\\"objectArray\\\":[1,2,\\\"three\\\"]}}\";\n+    assertEquals(expected, gson.toJson(map));\n+\n+    gson = new GsonBuilder()\n+        .enableComplexMapKeySerialization()\n+        .create();\n+    assertEquals(expected, gson.toJson(map));\n+  }\n+\n   static final class MapClass {\n     private final Map<String, TestTypes.Base> bases = new HashMap<String, TestTypes.Base>();\n     private final Map<String, TestTypes.Sub> subs = new HashMap<String, TestTypes.Sub>();\n       subs.put(name, value);\n     }\n   }\n+\n+  static final class MapWithGeneralMapParameters {\n+    final Map<String, Object> map = new LinkedHashMap();\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java\n     assertTrue(json.contains(\"\\\"s\\\":2\"));\n   }\n \n-  public void disabled_testListOfSubclassFields() {\n+  public void testListOfSubclassFields() {\n     Collection<Base> list = new ArrayList<Base>();\n     list.add(new Base(1));\n     list.add(new Sub(2, 3));\n     ClassWithContainersOfBaseFields target = new ClassWithContainersOfBaseFields(list, null);\n     String json = gson.toJson(target);\n     assertTrue(json, json.contains(\"{\\\"b\\\":1}\"));\n-    assertTrue(json, json.contains(\"{\\\"b\\\":2,\\\"s\\\":3}\"));\n+    assertTrue(json, json.contains(\"{\\\"s\\\":3,\\\"b\\\":2}\"));\n   }\n \n   public void testMapOfSubclassFields() {", "timestamp": 1303338471, "metainfo": ""}