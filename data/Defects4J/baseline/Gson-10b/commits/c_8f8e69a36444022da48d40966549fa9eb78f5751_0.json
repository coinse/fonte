{"sha": "8f8e69a36444022da48d40966549fa9eb78f5751", "log": "Add @since tags.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n    *\n    * @throws IllegalArgumentException if this GSON cannot serialize and\n    *     deserialize {@code type}.\n+   * @since 2.1\n    */\n   public <T> TypeAdapter<T> getNextAdapter(TypeAdapter.Factory skipPast, TypeToken<T> type) {\n     boolean skipPastFound = false;\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n    * adapter needs to be configured based on the type of the field being processed. Gson\n    * is designed to handle a large number of factories, so you should consider registering\n    * them to be at par with registering an individual type adapter.\n+   *\n+   * @since 2.1\n    */\n   public GsonBuilder registerTypeAdapterFactory(TypeAdapter.Factory factory) {\n     factories.add(factory);\n--- a/gson/src/main/java/com/google/gson/TypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/TypeAdapter.java\n \n // TODO: nice documentation\n \n+/**\n+ *\n+ * @since 2.1\n+ */\n public abstract class TypeAdapter<T> {\n   public abstract T read(JsonReader reader) throws IOException;\n   public abstract void write(JsonWriter writer, T value) throws IOException;\n     }\n   }\n \n+  /**\n+   * @since 2.1\n+   */\n   public interface Factory {\n     <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type);\n   }", "timestamp": 1322867488, "metainfo": ""}