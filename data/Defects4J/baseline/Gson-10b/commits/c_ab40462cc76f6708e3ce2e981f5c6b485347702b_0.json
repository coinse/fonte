{"sha": "ab40462cc76f6708e3ce2e981f5c6b485347702b", "log": "Check if class can be instantiated based on class modifiers. If not throw an unsupported operation exception.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java\n+++ b/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java\n import java.io.ObjectStreamClass;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n \n /**\n  * Do sneaky things to allocate objects without invoking their constructors.\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public <T> T newInstance(Class<T> c) throws Exception {\n+          assertInstantiable(c);\n           return (T) allocateInstance.invoke(unsafe, c);\n         }\n       };\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public <T> T newInstance(Class<T> c) throws Exception {\n+          assertInstantiable(c);\n           return (T) newInstance.invoke(null, c, constructorId);\n         }\n       };\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         public <T> T newInstance(Class<T> c) throws Exception {\n+          assertInstantiable(c);\n           return (T) newInstance.invoke(null, c, Object.class);\n         }\n       };\n       }\n     };\n   }\n+\n+  /**\n+   * Check if the class can be instantiated by unsafe allocator. If the instance has interface or abstract modifiers\n+   * throw an {@link java.lang.UnsupportedOperationException}\n+   * @param c instance of the class to be checked\n+   */\n+  private static void assertInstantiable(Class<?> c) {\n+    int modifiers = c.getModifiers();\n+    if (Modifier.isInterface(modifiers)) {\n+      throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName());\n+    }\n+    if (Modifier.isAbstract(modifiers)) {\n+      throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName());\n+    }\n+  }\n }\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java\n+/*\n+ * Copyright (C) 2016 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.internal;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test unsafe allocator instantiation\n+ * @author Ugljesa Jovanovic\n+ */\n+public final class UnsafeAllocatorInstantiationTest extends TestCase {\n+\n+  public interface Interface {\n+  }\n+\n+  public static abstract class AbstractClass {\n+  }\n+\n+  public static class ConcreteClass {\n+  }\n+\n+  /**\n+   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when  trying\n+   * to instantiate an interface\n+   */\n+  public void testInterfaceInstantiation() {\n+    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n+    try {\n+      unsafeAllocator.newInstance(Interface.class);\n+      fail();\n+    } catch (Exception e) {\n+      assertEquals(e.getClass(), UnsupportedOperationException.class);\n+    }\n+  }\n+\n+  /**\n+   * Ensure that the {@link java.lang.UnsupportedOperationException} is thrown when  trying\n+   * to instantiate an abstract class\n+   */\n+  public void testAbstractClassInstantiation() {\n+    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n+    try {\n+      unsafeAllocator.newInstance(AbstractClass.class);\n+      fail();\n+    } catch (Exception e) {\n+      assertEquals(e.getClass(), UnsupportedOperationException.class);\n+    }\n+  }\n+\n+  /**\n+   * Ensure that no exception is thrown when trying to instantiate a concrete class\n+   */\n+  public void testConcreteClassInstantiation() {\n+    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();\n+    try {\n+      unsafeAllocator.newInstance(ConcreteClass.class);\n+    } catch (Exception e) {\n+      fail();\n+    }\n+  }\n+}", "timestamp": 1461141814, "metainfo": ""}