{"sha": "f7e4d5e4bbdb10ef3215c66c0df4ca3828f99768", "log": "Added checks to ensure that we do not serialize NaN or postiive or negative infinity for BigDecimal.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n   \n   public void testDoubleNaNSerializationNotSupported() {\n     try {\n-      double d = Double.NaN;\n-      gson.toJson(d);\n-      Double dw = Double.NaN;\n-      gson.toJson(dw);\n+      gson.toJson((double)Double.NaN);\n+      gson.toJson(Double.NaN);\n       fail(\"Gson should not accept NaN for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   \n   public void testDoubleNaNDeserializationNotSupported() {\n     try {\n-      String json = \"NaN\";\n-      assertEquals(Double.NaN, gson.fromJson(json, Double.class));\n-      assertEquals(Double.NaN, gson.fromJson(json, double.class));\n+      gson.fromJson(\"NaN\", Double.class);\n+      gson.fromJson(\"NaN\", double.class);\n       fail(\"Gson should not accept NaN for deserialization\");\n     } catch (JsonParseException expected) {      \n     }\n   }\n-\n   public void testFloatNaNSerializationNotSupported() {\n     try {\n-      float f = Float.NaN;\n-      gson.toJson(f);\n-      Float fw = Float.NaN;\n-      gson.toJson(fw);\n+      gson.toJson((float)Float.NaN);\n+      gson.toJson(Float.NaN);\n       fail(\"Gson should not accept NaN for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   \n   public void testFloatNaNDeserializationNotSupported() {\n     try {\n-      String json = \"NaN\";\n-      assertEquals(Float.NaN, gson.fromJson(json, Float.class));\n-      assertEquals(Float.NaN, gson.fromJson(json, float.class));\n+      gson.fromJson(\"NaN\", Float.class);\n+      gson.fromJson(\"NaN\", float.class);\n       fail(\"Gson should not accept NaN for deserialization\");\n     } catch (JsonParseException expected) {      \n     }\n   }\n \n+\n+  public void testBigDecimalNaNSerializationNotSupported() {\n+    try {\n+      gson.toJson(new BigDecimal(Double.NaN));\n+      fail(\"Gson should not accept NaN for serialization\");\n+    } catch (IllegalArgumentException expected) {      \n+    }\n+  }\n+  \n+  public void testBigDecimalNaNDeserializationNotSupported() {\n+    try {\n+      gson.fromJson(\"NaN\", BigDecimal.class);\n+      fail(\"Gson should not accept NaN for deserialization\");\n+    } catch (JsonParseException expected) {      \n+    }\n+  }\n+\n   public void testDoubleInfinitySerializationNotSupported() {\n     try {\n-      double d = Double.POSITIVE_INFINITY;\n-      gson.toJson(d);\n-      Double dw = Double.POSITIVE_INFINITY;\n-      gson.toJson(dw);\n+      gson.toJson((double)Double.POSITIVE_INFINITY);\n+      gson.toJson(Double.POSITIVE_INFINITY);\n       fail(\"Gson should not accept positive infinity for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   \n   public void testDoubleInfinityDeserializationNotSupported() {\n     try {\n-      String json = \"Infinity\";\n-      assertEquals(Double.POSITIVE_INFINITY, gson.fromJson(json, Double.class));\n-      assertEquals(Double.POSITIVE_INFINITY, gson.fromJson(json, double.class));\n+      gson.fromJson(\"Infinity\", Double.class);\n+      gson.fromJson(\"Infinity\", double.class);\n       fail(\"Gson should not accept positive infinity for deserialization\");\n     } catch (JsonParseException expected) {      \n     }\n   \n   public void testFloatInfinitySerializationNotSupported() {\n     try {\n-      float f = Float.POSITIVE_INFINITY;\n-      gson.toJson(f);\n-      Float fw = Float.POSITIVE_INFINITY;\n-      gson.toJson(fw);\n+      gson.toJson((float)Float.POSITIVE_INFINITY);\n+      gson.toJson(Float.POSITIVE_INFINITY);\n       fail(\"Gson should not accept positive infinity for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   \n   public void testFloatInfinityDeserializationNotSupported() {\n     try {\n-      String json = \"Infinity\";\n-      assertEquals(Float.POSITIVE_INFINITY, gson.fromJson(json, Float.class));\n-      assertEquals(Float.POSITIVE_INFINITY, gson.fromJson(json, float.class));\n+      gson.fromJson(\"Infinity\", Float.class);\n+      gson.fromJson(\"Infinity\", float.class);\n       fail(\"Gson should not accept positive infinity for deserialization\");\n     } catch (JsonParseException expected) {      \n     }\n   }\n   \n+  public void testBigDecimalInfinitySerializationNotSupported() {\n+    try {\n+      gson.toJson(new BigDecimal(Double.POSITIVE_INFINITY));\n+      fail(\"Gson should not accept positive infinity for serialization\");\n+    } catch (IllegalArgumentException expected) {      \n+    }\n+  }\n+  \n+  public void testBigDecimalInfinityDeserializationNotSupported() {\n+    try {\n+      gson.fromJson(\"Infinity\", BigDecimal.class);\n+      fail(\"Gson should not accept positive infinity for deserialization\");\n+    } catch (JsonParseException expected) {      \n+    }\n+  }\n+  \n   public void testNegativeInfinitySerializationNotSupported() {\n     try {\n-      double d = Double.NEGATIVE_INFINITY;\n-      gson.toJson(d);\n-      Double dw = Double.NEGATIVE_INFINITY;\n-      gson.toJson(dw);\n+      gson.toJson((double)Double.NEGATIVE_INFINITY);\n+      gson.toJson(Double.NEGATIVE_INFINITY);\n       fail(\"Gson should not accept positive infinity for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   \n   public void testNegativeInfinityDeserializationNotSupported() {\n     try {\n-      String json = \"-Infinity\";\n-      assertEquals(Double.NEGATIVE_INFINITY, gson.fromJson(json, double.class));\n-      assertEquals(Double.NEGATIVE_INFINITY, gson.fromJson(json, Double.class));\n+      gson.fromJson(\"-Infinity\", double.class);\n+      gson.fromJson(\"-Infinity\", Double.class);\n+      fail(\"Gson should not accept positive infinity for deserialization\");\n+    } catch (JsonParseException expected) {      \n+    }\n+  }\n+  \n+  public void testNegativeInfinityFloatSerializationNotSupported() {\n+    try {\n+      gson.toJson((float)Float.NEGATIVE_INFINITY);\n+      gson.toJson(Float.NEGATIVE_INFINITY);\n       fail(\"Gson should not accept positive infinity for serialization\");\n-    } catch (JsonParseException expected) {      \n-    }\n-  }\n-  \n-  public void testNegativeInfinityFloatSerializationNotSupported() {\n-    try {\n-      float f = Float.NEGATIVE_INFINITY;\n-      gson.toJson(f);\n-      Float fw = Float.NEGATIVE_INFINITY;\n-      gson.toJson(fw);\n+    } catch (IllegalArgumentException expected) {      \n+    }\n+  }\n+  \n+  public void testNegativeInfinityFloatDeserializationNotSupported() {\n+    try {\n+      gson.fromJson(\"-Infinity\", float.class);\n+      gson.fromJson(\"-Infinity\", Float.class);\n+      fail(\"Gson should not accept positive infinity for deserialization\");\n+    } catch (JsonParseException expected) {      \n+    }\n+  }\n+  \n+  public void testNegativeInfinityBigDecimalSerializationNotSupported() {\n+    try {\n+      gson.toJson(new BigDecimal(Double.NEGATIVE_INFINITY));\n       fail(\"Gson should not accept positive infinity for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   }\n   \n-  public void testNegativeInfinityFloatDeserializationNotSupported() {\n-    try {\n-      String json = \"-Infinity\";\n-      assertEquals(Float.NEGATIVE_INFINITY, gson.fromJson(json, float.class));\n-      assertEquals(Float.NEGATIVE_INFINITY, gson.fromJson(json, Float.class));\n-      fail(\"Gson should not accept positive infinity for serialization\");\n+  public void testNegativeInfinityBigDecimalDeserializationNotSupported() {\n+    try {\n+      gson.fromJson(\"-Infinity\", BigDecimal.class);\n+      fail(\"Gson should not accept positive infinity for deserialization\");\n     } catch (JsonParseException expected) {      \n     }\n   }", "timestamp": 1229644598, "metainfo": ""}