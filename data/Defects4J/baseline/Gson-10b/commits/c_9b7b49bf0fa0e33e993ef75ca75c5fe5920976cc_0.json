{"sha": "9b7b49bf0fa0e33e993ef75ca75c5fe5920976cc", "log": "Implement JsonElementWriter.close()", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonElementWriter.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonElementWriter.java\n import java.util.List;\n \n /**\n- * This writer writes a JsonElement.\n+ * This writer creates a JsonElement.\n  */\n public final class JsonElementWriter extends JsonWriter {\n   private static final Writer UNWRITABLE_WRITER = new Writer() {\n       throw new AssertionError();\n     }\n   };\n+  /** Added to the top of the stack when this writer is closed to cause following ops to fail. */\n+  private static final JsonPrimitive SENTINEL_CLOSED = new JsonPrimitive(\"closed\");\n \n+  /** The JsonElements and JsonArrays under modification, outermost to innermost. */\n   private final List<JsonElement> stack = new ArrayList<JsonElement>();\n+\n+  /** The name for the next JSON object value. If non-null, the top of the stack is a JsonObject. */\n   private String pendingName;\n+\n+  /** the JSON element constructed by this writer. */\n+  private JsonElement product = JsonNull.INSTANCE; // TODO: is this really what we want?;\n \n   public JsonElementWriter() {\n     super(UNWRITABLE_WRITER);\n   }\n \n   public JsonElement get() {\n-    if (stack.isEmpty()) {\n-      return JsonNull.INSTANCE; // TODO: is this really what we want?\n-    }\n-    if (stack.size() != 1) {\n+    if (!stack.isEmpty()) {\n       throw new IllegalStateException(\"Expected one JSON element but was \" + stack);\n     }\n-    return stack.get(0);\n+    return product;\n   }\n \n   private JsonElement peek() {\n       object.add(pendingName, value);\n       pendingName = null;\n     } else if (stack.isEmpty()) {\n-      stack.add(value);\n+      product = value;\n     } else {\n       JsonElement element = peek();\n       if (element instanceof JsonArray) {\n   }\n \n   @Override public void close() throws IOException {\n+    if (!stack.isEmpty()) {\n+      throw new IOException(\"Incomplete document\");\n+    }\n+    stack.add(SENTINEL_CLOSED);\n   }\n }\n--- a/gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java\n+++ b/gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java\n public final class JsonElementWriterTest extends TestCase {\n \n   // TODO: more tests\n-  // TODO: close support\n   // TODO: figure out what should be returned by an empty writer\n   // TODO: test when serialize nulls is false\n \n     writer.endObject();\n     assertEquals(\"{\\\"A\\\":{\\\"B\\\":{}},\\\"C\\\":{}}\", writer.get().toString());\n   }\n+\n+  public void testWriteAfterClose() throws Exception {\n+    JsonElementWriter writer = new JsonElementWriter();\n+    writer.setLenient(true);\n+    writer.beginArray();\n+    writer.value(\"A\");\n+    writer.endArray();\n+    writer.close();\n+    try {\n+      writer.beginArray();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+  }\n+\n+  public void testPrematureClose() throws Exception {\n+    JsonElementWriter writer = new JsonElementWriter();\n+    writer.setLenient(true);\n+    writer.beginArray();\n+    try {\n+      writer.close();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n }", "timestamp": 1317427956, "metainfo": ""}