{"sha": "9c4b23b39ad8bb0e42b0b3324a929bbb8b52158f", "log": "JsonObject.deepCopy() for Gson.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonArray.java\n+++ b/gson/src/main/java/com/google/gson/JsonArray.java\n     elements = new ArrayList<JsonElement>();\n   }\n \n+  @Override public JsonArray deepCopy() {\n+    JsonArray result = new JsonArray();\n+    for (JsonElement element : elements) {\n+      result.add(element.deepCopy());\n+    }\n+    return result;\n+  }\n+\n   /**\n    * Adds the specified element to self.\n    *\n--- a/gson/src/main/java/com/google/gson/JsonElement.java\n+++ b/gson/src/main/java/com/google/gson/JsonElement.java\n  */\n public abstract class JsonElement {\n   /**\n+   * Returns a deep copy of this element. Immutable elements like primitives\n+   * and nulls are not copied.\n+   */\n+  public abstract JsonElement deepCopy();\n+\n+  /**\n    * provides check for verifying if this element is an array or not.\n    *\n    * @return true if this element is of type {@link JsonArray}, false otherwise.\n--- a/gson/src/main/java/com/google/gson/JsonNull.java\n+++ b/gson/src/main/java/com/google/gson/JsonNull.java\n     // Do nothing\n   }\n \n+  @Override public JsonNull deepCopy() {\n+    return INSTANCE;\n+  }\n+\n   /**\n    * All instances of JsonNull have the same hash code since they are indistinguishable\n    */\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n   public JsonObject() {\n   }\n \n+  @Override public JsonObject deepCopy() {\n+    JsonObject result = new JsonObject();\n+    for (Map.Entry<String, JsonElement> entry : members.entrySet()) {\n+      result.add(entry.getKey(), entry.getValue().deepCopy());\n+    }\n+    return result;\n+  }\n+\n   /**\n    * Adds a member, which is a name-value pair, to self. The name must be a String, but the value\n    * can be an arbitrary JsonElement, thereby allowing you to build a full tree of JsonElements\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n     setValue(primitive);\n   }\n \n+  @Override public JsonPrimitive deepCopy() {\n+    return this;\n+  }\n+\n   void setValue(Object primitive) {\n     if (primitive instanceof Character) {\n       // convert characters to strings since in JSON, characters are represented as a single\n--- a/gson/src/test/java/com/google/gson/JsonArrayTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonArrayTest.java\n     assertFalse(a.equals(b));\n     assertFalse(b.equals(a));\n   }\n+\n+  public void testDeepCopy() {\n+    JsonArray original = new JsonArray();\n+    JsonArray firstEntry = new JsonArray();\n+    original.add(firstEntry);\n+\n+    JsonArray copy = original.deepCopy();\n+    original.add(new JsonPrimitive(\"y\"));\n+\n+    assertEquals(1, copy.size());\n+    firstEntry.add(new JsonPrimitive(\"z\"));\n+\n+    assertEquals(1, original.get(0).getAsJsonArray().size());\n+    assertEquals(0, copy.get(0).getAsJsonArray().size());\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/JsonNullTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonNullTest.java\n package com.google.gson;\n \n import com.google.gson.common.MoreAsserts;\n-\n import junit.framework.TestCase;\n \n /**\n     MoreAsserts.assertEqualsAndHashCode(new JsonNull(), JsonNull.INSTANCE);\n     MoreAsserts.assertEqualsAndHashCode(JsonNull.INSTANCE, JsonNull.INSTANCE);\n   }\n+\n+  public void testDeepCopy() {\n+    JsonNull a = new JsonNull();\n+    assertSame(JsonNull.INSTANCE, a.deepCopy());\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonObjectTest.java\n     assertFalse(a.equals(b));\n     assertFalse(b.equals(a));\n   }\n+\n+  public void testDeepCopy() {\n+    JsonObject original = new JsonObject();\n+    JsonArray firstEntry = new JsonArray();\n+    original.add(\"key\", firstEntry);\n+\n+    JsonObject copy = original.deepCopy();\n+    firstEntry.add(new JsonPrimitive(\"z\"));\n+\n+    assertEquals(1, original.get(\"key\").getAsJsonArray().size());\n+    assertEquals(0, copy.get(\"key\").getAsJsonArray().size());\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java\n     assertFalse(new JsonPrimitive(\"0\").equals(new JsonPrimitive(0)));\n     assertFalse(new JsonPrimitive(\"NaN\").equals(new JsonPrimitive(Float.NaN)));\n   }\n+\n+  public void testDeepCopy() {\n+    JsonPrimitive a = new JsonPrimitive(\"a\");\n+    assertSame(a, a.deepCopy()); // Primitives are immutable!\n+  }\n }", "timestamp": 1345511983, "metainfo": ""}