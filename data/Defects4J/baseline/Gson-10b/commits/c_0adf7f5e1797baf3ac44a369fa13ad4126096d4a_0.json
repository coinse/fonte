{"sha": "0adf7f5e1797baf3ac44a369fa13ad4126096d4a", "log": "Caching fields for a class for reducing the need for reflection.", "commit": "\n--- a/gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java\n package com.google.gson;\n \n import com.google.gson.ObjectNavigator.Visitor;\n+import com.google.gson.internal.LruCache;\n import com.google.gson.internal.Preconditions;\n import com.google.gson.internal.Types;\n \n  * @author Jesse Wilson\n  */\n final class ReflectingFieldNavigator {\n+  private static final LruCache<Class<?>, Field[]> fieldsCache =\n+    new LruCache<Class<?>, Field[]>(500);\n \n   private final ExclusionStrategy exclusionStrategy;\n \n \n   private void navigateClassFields(Object obj, Type objType,\n       Class<?> classInInheritanceHierarchyForObj, Visitor visitor) {\n-    Field[] fields = classInInheritanceHierarchyForObj.getDeclaredFields();\n+    Field[] fields = getFields(classInInheritanceHierarchyForObj);\n     AccessibleObject.setAccessible(fields, true);\n     for (Field f : fields) {\n       FieldAttributes fieldAttributes = new FieldAttributes(classInInheritanceHierarchyForObj, f);\n     }\n   }\n \n+  private Field[] getFields(Class<?> clazz) {\n+    Field[] fields = fieldsCache.get(clazz);\n+    if (fields == null) {\n+      fields = clazz.getDeclaredFields();\n+      fieldsCache.put(clazz, fields);\n+    }\n+    return fields;\n+  }\n+\n \n   /**\n    * Evaluates the \"actual\" type for the field.  If the field is a \"TypeVariable\" or has a", "timestamp": 1301004831, "metainfo": ""}