{"sha": "2b9f81e8b5623dd07f3fe5f34a8ada56b13aea8d", "log": "Registering default type hierarchy adapters first and allow users to override them. This allows the default EnumTypeAdapter to be overridden for a specific hierachy adapter for Enum with anonymized sub-classes.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n   // constants will appear as nulls.\n   private static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_SERIALIZERS =\n       createDefaultSerializers();\n+  static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_HIERARCHY_SERIALIZERS =\n+    createDefaultHierarchySerializers();\n   private static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_DESERIALIZERS =\n       createDefaultDeserializers();\n+  static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_HIERARCHY_DESERIALIZERS =\n+    createDefaultHierarchyDeserializers();\n   private static final ParameterizedTypeHandlerMap<InstanceCreator<?>> DEFAULT_INSTANCE_CREATORS =\n       createDefaultInstanceCreators();\n \n     ParameterizedTypeHandlerMap<JsonSerializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n \n-    map.registerForTypeHierarchy(Enum.class, ENUM_TYPE_ADAPTER);\n-    map.registerForTypeHierarchy(InetAddress.class, INET_ADDRESS_ADAPTER);\n     map.register(URL.class, URL_TYPE_ADAPTER);\n     map.register(URI.class, URI_TYPE_ADAPTER);\n     map.register(UUID.class, UUUID_TYPE_ADAPTER);\n     map.register(Locale.class, LOCALE_TYPE_ADAPTER);\n-    map.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER);\n-    map.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER);\n     map.register(Date.class, DATE_TYPE_ADAPTER);\n     map.register(java.sql.Date.class, JAVA_SQL_DATE_TYPE_ADAPTER);\n     map.register(Timestamp.class, DATE_TYPE_ADAPTER);\n     return map;\n   }\n \n+  private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultHierarchySerializers() {\n+    ParameterizedTypeHandlerMap<JsonSerializer<?>> map =\n+        new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n+    map.registerForTypeHierarchy(Enum.class, ENUM_TYPE_ADAPTER);\n+    map.registerForTypeHierarchy(InetAddress.class, INET_ADDRESS_ADAPTER);\n+    map.registerForTypeHierarchy(Collection.class, COLLECTION_TYPE_ADAPTER);\n+    map.registerForTypeHierarchy(Map.class, MAP_TYPE_ADAPTER);\n+    map.makeUnmodifiable();\n+    return map;\n+  }\n+\n   private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers() {\n     ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n-    map.registerForTypeHierarchy(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER));\n-    map.registerForTypeHierarchy(InetAddress.class, wrapDeserializer(INET_ADDRESS_ADAPTER));\n     map.register(URL.class, wrapDeserializer(URL_TYPE_ADAPTER));\n     map.register(URI.class, wrapDeserializer(URI_TYPE_ADAPTER));\n     map.register(UUID.class, wrapDeserializer(UUUID_TYPE_ADAPTER));\n     map.register(Locale.class, wrapDeserializer(LOCALE_TYPE_ADAPTER));\n-    map.registerForTypeHierarchy(Collection.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER));\n-    map.registerForTypeHierarchy(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER));\n     map.register(Date.class, wrapDeserializer(DATE_TYPE_ADAPTER));\n     map.register(java.sql.Date.class, wrapDeserializer(JAVA_SQL_DATE_TYPE_ADAPTER));\n     map.register(Timestamp.class, wrapDeserializer(TIMESTAMP_DESERIALIZER));\n     return map;\n   }\n \n+  private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultHierarchyDeserializers() {\n+    ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\n+        new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n+    map.registerForTypeHierarchy(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER));\n+    map.registerForTypeHierarchy(InetAddress.class, wrapDeserializer(INET_ADDRESS_ADAPTER));\n+    map.registerForTypeHierarchy(Collection.class, wrapDeserializer(COLLECTION_TYPE_ADAPTER));\n+    map.registerForTypeHierarchy(Map.class, wrapDeserializer(MAP_TYPE_ADAPTER));\n+    map.makeUnmodifiable();\n+    return map;\n+  }\n+\n   private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators() {\n     ParameterizedTypeHandlerMap<InstanceCreator<?>> map =\n         new ParameterizedTypeHandlerMap<InstanceCreator<?>>();\n \n   static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers() {\n     return getDefaultSerializers(false, LongSerializationPolicy.DEFAULT);\n+  }\n+\n+  static ParameterizedTypeHandlerMap<JsonSerializer<?>> getAllDefaultSerializers() {\n+    ParameterizedTypeHandlerMap<JsonSerializer<?>> defaultSerializers =\n+      getDefaultSerializers(false, LongSerializationPolicy.DEFAULT);\n+    defaultSerializers.register(DEFAULT_HIERARCHY_SERIALIZERS);\n+    return defaultSerializers;\n+  }\n+\n+  static ParameterizedTypeHandlerMap<JsonDeserializer<?>> getAllDefaultDeserializers() {\n+    ParameterizedTypeHandlerMap<JsonDeserializer<?>> defaultDeserializers =\n+      getDefaultDeserializers().copyOf();\n+    defaultDeserializers.register(DEFAULT_HIERARCHY_DESERIALIZERS);\n+    return defaultDeserializers;\n   }\n \n   static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers(\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n   public Gson() {\n     this(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_EXCLUSION_STRATEGY, DEFAULT_NAMING_POLICY,\n     new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),\n-    false, DefaultTypeAdapters.getDefaultSerializers(),\n-    DefaultTypeAdapters.getDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE, true, false);\n+    false, DefaultTypeAdapters.getAllDefaultSerializers(),\n+    DefaultTypeAdapters.getAllDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE, true, false);\n   }\n \n   Gson(ExclusionStrategy serializationStrategy, ExclusionStrategy deserializationStrategy,\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n     ExclusionStrategy deserializationExclusionStrategy =\n       new DisjunctionExclusionStrategy(deserializationStrategies);\n \n-    ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers = serializers.copyOf();\n-    ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers = deserializers.copyOf();\n+    ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers =\n+      DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.copyOf();\n+    customSerializers.register(serializers.copyOf());\n+    ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers =\n+      DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.copyOf();\n+    customDeserializers.register(deserializers.copyOf());\n     addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, customSerializers,\n         customDeserializers);\n \n--- a/gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java\n+++ b/gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java\n     }\n   }\n \n+  public synchronized void register(ParameterizedTypeHandlerMap<T> other) {\n+    if (!modifiable) {\n+      throw new IllegalStateException(\"Attempted to modify an unmodifiable map.\");\n+    }\n+    for (Map.Entry<Type, T> entry : other.map.entrySet()) {\n+      register(entry.getKey(), entry.getValue());\n+    }\n+    // Quite important to traverse the typeHierarchyList from stack bottom first since\n+    // we want to register the handlers in the same order to preserve priority order\n+    for (int i = other.typeHierarchyList.size()-1; i >= 0; --i) {\n+      Pair<Class<?>, T> entry = other.typeHierarchyList.get(i);\n+      registerForTypeHierarchy(entry);\n+    }\n+  }\n+\n   public synchronized void registerIfAbsent(Type typeOfT, T value) {\n     if (!modifiable) {\n       throw new IllegalStateException(\"Attempted to modify an unmodifiable map.\");\n--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/EnumTest.java\n \n package com.google.gson.functional;\n \n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+import junit.framework.TestCase;\n+\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonDeserializationContext;\n import com.google.gson.JsonSerializer;\n import com.google.gson.common.MoreAsserts;\n import com.google.gson.reflect.TypeToken;\n-\n-import junit.framework.TestCase;\n-\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.EnumSet;\n-import java.util.Set;\n \n /**\n  * Functional tests for Java 5.0 enums.\n    * Test for issue 226.\n    */\n   public void testEnumSubclass() {\n-    assertRoshambo();\n-  }\n-\n-  public void disabled_testEnumSubclassWithRegisteredTypeAdapter() {\n-    gson = new GsonBuilder()\n-//        .registerTypeHierarchyAdapter(Roshambo.class, new MyEnumTypeAdapter())\n-        .create();\n-    assertRoshambo();\n-  }\n-\n-  private void assertRoshambo() {\n     assertFalse(Roshambo.class == Roshambo.ROCK.getClass());\n     assertEquals(\"\\\"ROCK\\\"\", gson.toJson(Roshambo.ROCK));\n     assertEquals(\"[\\\"ROCK\\\",\\\"PAPER\\\",\\\"SCISSORS\\\"]\", gson.toJson(EnumSet.allOf(Roshambo.class)));\n     assertEquals(Roshambo.ROCK, gson.fromJson(\"\\\"ROCK\\\"\", Roshambo.class));\n     assertEquals(EnumSet.allOf(Roshambo.class),\n         gson.fromJson(\"[\\\"ROCK\\\",\\\"PAPER\\\",\\\"SCISSORS\\\"]\", new TypeToken<Set<Roshambo>>() {}.getType()));\n+  }\n+\n+  public void testEnumSubclassWithRegisteredTypeAdapter() {\n+    gson = new GsonBuilder()\n+        .registerTypeHierarchyAdapter(Roshambo.class, new MyEnumTypeAdapter())\n+        .create();\n+    assertFalse(Roshambo.class == Roshambo.ROCK.getClass());\n+    assertEquals(\"\\\"123ROCK\\\"\", gson.toJson(Roshambo.ROCK));\n+    assertEquals(\"[\\\"123ROCK\\\",\\\"123PAPER\\\",\\\"123SCISSORS\\\"]\", gson.toJson(EnumSet.allOf(Roshambo.class)));\n+    assertEquals(Roshambo.ROCK, gson.fromJson(\"\\\"123ROCK\\\"\", Roshambo.class));\n+    assertEquals(EnumSet.allOf(Roshambo.class),\n+        gson.fromJson(\"[\\\"123ROCK\\\",\\\"123PAPER\\\",\\\"123SCISSORS\\\"]\", new TypeToken<Set<Roshambo>>() {}.getType()));\n   }\n \n   public enum Roshambo {", "timestamp": 1295479708, "metainfo": ""}