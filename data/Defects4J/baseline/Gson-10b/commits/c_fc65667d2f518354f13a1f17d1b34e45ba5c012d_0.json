{"sha": "fc65667d2f518354f13a1f17d1b34e45ba5c012d", "log": "Add support for wildcard type on Maps, Collections and other parameterized types.", "commit": "\n--- a/gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java\n+++ b/gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java\n       rawType = ((ParameterizedType)type).getRawType();\n       handler = map.get(rawType);\n     }\n+\n     // Check for map or collection \n     if (handler == null) {\n       if (rawType instanceof Class) {\n   }\n   \n   private synchronized T getRawHandlerFor(Type type) {\n-    T handler = map.get(type);\n     if (type instanceof Map) {\n-      handler = map.get(Map.class);\n+      return map.get(Map.class);\n     } else if (type instanceof Collection) {\n-      handler = map.get(Collection.class);\n+      return map.get(Collection.class);\n+    } else {\n+      T handler = map.get(type);\n+      if (handler == null) {\n+        Class<?> rawClass = TypeUtils.toRawClass(type);\n+        if (rawClass != type) {\n+          handler = getHandlerFor(rawClass);\n+        }\n+      }\n+      return handler;\n     }\n-    return handler;\n   }\n \n   public synchronized boolean hasAnyHandlerFor(Type type) {\n--- a/gson/src/main/java/com/google/gson/TypeUtils.java\n+++ b/gson/src/main/java/com/google/gson/TypeUtils.java\n import java.lang.reflect.GenericArrayType;\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n+import java.lang.reflect.WildcardType;\n \n /**\n  * Utility class containing some methods for obtaining information on types.\n       GenericArrayType actualType = (GenericArrayType) type;\n       Class<?> rawClass = toRawClass(actualType.getGenericComponentType());\n       return wrapWithArray(rawClass);\n+    } else if (type instanceof WildcardType) {\n+      WildcardType castedType = (WildcardType) type;\n+      return toRawClass(castedType.getUpperBounds()[0]);\n     } else {\n       throw new IllegalArgumentException(\"Type \\'\" + type + \"\\' is not a Class, \"\n           + \"ParameterizedType, or GenericArrayType. Can't extract class.\");\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n     } catch (JsonParseException expected) {\n     }\n   }\n+  \n+  public void testWildcardPrimitiveCollectionSerilaization() throws Exception {\n+    Collection<? extends Integer> target = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n+    Type collectionType = new TypeToken<Collection<? extends Integer>>() { }.getType();\n+    String json = gson.toJson(target, collectionType);\n+    assertEquals(\"[1,2,3,4,5,6,7,8,9]\", json);\n+    \n+    json = gson.toJson(target);\n+    assertEquals(\"[1,2,3,4,5,6,7,8,9]\", json);\n+  }\n+  \n+  public void testWildcardPrimitiveCollectionDeserilaization() throws Exception {\n+    String json = \"[1,2,3,4,5,6,7,8,9]\";\n+    Type collectionType = new TypeToken<Collection<? extends Integer>>() { }.getType();\n+    Collection<? extends Integer> target = gson.fromJson(json, collectionType);\n+    assertEquals(9, target.size());\n+    assertTrue(target.contains(1));\n+    assertTrue(target.contains(9));\n+  }\n+  \n+  public void testWildcardCollectionField() throws Exception {\n+    Collection<BagOfPrimitives> collection = new ArrayList<BagOfPrimitives>();\n+    BagOfPrimitives objA = new BagOfPrimitives(3L, 1, true, \"blah\");\n+    BagOfPrimitives objB = new BagOfPrimitives(2L, 6, false, \"blahB\");\n+    collection.add(objA);\n+    collection.add(objB);\n+    \n+    ObjectWithWildcardCollection target = new ObjectWithWildcardCollection(collection);\n+    String json = gson.toJson(target);\n+    assertTrue(json.contains(objA.getExpectedJson()));\n+    assertTrue(json.contains(objB.getExpectedJson()));\n+    \n+    target = gson.fromJson(json, ObjectWithWildcardCollection.class);\n+    Collection<? extends BagOfPrimitives> deserializedCollection = target.getCollection();\n+    assertEquals(2, deserializedCollection.size());\n+    assertTrue(deserializedCollection.contains(objA));\n+    assertTrue(deserializedCollection.contains(objB));\n+  }\n \n   @SuppressWarnings(\"unchecked\")\n   private static int[] toIntArray(Collection collection) {\n     }\n     return ints;\n   }\n+\n+  private static class ObjectWithWildcardCollection {\n+    private final Collection<? extends BagOfPrimitives> collection;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public ObjectWithWildcardCollection() {\n+      this(Collections.EMPTY_LIST);\n+    }\n+    \n+    public ObjectWithWildcardCollection(Collection<? extends BagOfPrimitives> collection) {\n+      this.collection = collection;\n+    }\n+    \n+    public Collection<? extends BagOfPrimitives> getCollection() {\n+      return collection;\n+    }\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n package com.google.gson.functional;\n \n import java.lang.reflect.Type;\n+import java.util.Collection;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n   }\n   \n   public void disable_testMapSubclassDeserialization() {\n-    Gson gson = new GsonBuilder().registerTypeAdapter(MyMap.class, new InstanceCreator<MyMap>(){\n+    Gson gson = new GsonBuilder().registerTypeAdapter(MyMap.class, new InstanceCreator<MyMap>() {\n       public MyMap createInstance(Type type) {\n         return new MyMap();\n       }      \n     assertEquals(\"2\", map.get(\"b\")); \n   }\n   \n+  public void testMapSerializationWithWildcardValues() {\n+    Map<String, ? extends Collection<? extends Integer>> map =\n+        new LinkedHashMap<String, Collection<Integer>>();\n+    map.put(\"test\", null);\n+    Type typeOfMap = \n+        new TypeToken<Map<String, ? extends Collection<? extends Integer>>>() {}.getType();\n+    String json = gson.toJson(map, typeOfMap);\n+\n+    assertEquals(\"{}\", json);\n+  }\n+  \n+  public void testMapDeserializationWithWildcardValues() {\n+    Type typeOfMap = new TypeToken<Map<String, ? extends Long>>() {}.getType();\n+    Map<String, ? extends Long> map = gson.fromJson(\"{\\\"test\\\":123}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertEquals(new Long(123L), map.get(\"test\"));\n+  }\n+\n+  \n   private static class MyMap extends LinkedHashMap<String, String> {\n     private static final long serialVersionUID = 1L;\n ", "timestamp": 1229238724, "metainfo": ""}