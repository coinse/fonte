{"sha": "4c06b013697d06b327f3c537e23181887aeab774", "log": "Cache all computed type adapters. On one particularly violent test (issue 375) this improves performance by 77%.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     }\n   };\n \n+  private final Map<TypeToken<?>, TypeAdapter<?>> typeTokenCache\n+      = Collections.synchronizedMap(new HashMap<TypeToken<?>, TypeAdapter<?>>());\n+\n   private final List<TypeAdapter.Factory> factories;\n   private final ConstructorConstructor constructorConstructor;\n \n    *     deserialize {@code type}.\n    */\n   public <T> TypeAdapter<T> getAdapter(TypeToken<T> type) {\n-    // TODO: cache?\n+    TypeAdapter<?> cached = typeTokenCache.get(type);\n+    if (cached != null) {\n+      return (TypeAdapter<T>) cached;\n+    }\n \n     Map<TypeToken<?>, FutureTypeAdapter<?>> threadCalls = calls.get();\n     @SuppressWarnings(\"unchecked\") // the key and value type parameters always agree\n         TypeAdapter<T> candidate = factory.create(this, type);\n         if (candidate != null) {\n           call.setDelegate(candidate);\n+          typeTokenCache.put(type, candidate);\n           return candidate;\n         }\n       }", "timestamp": 1322321438, "metainfo": ""}