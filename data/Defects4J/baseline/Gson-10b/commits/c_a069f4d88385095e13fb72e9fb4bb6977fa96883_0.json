{"sha": "a069f4d88385095e13fb72e9fb4bb6977fa96883", "log": "Added a failing test that demonstrates regression on tree-style type adapters. In this test, we are registering a tree type adapter for Id but it never gets invoked. Instead, the reflective type adapter gets invoked causing an exception.", "commit": "\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Collection of functional tests for DOM tree based type adapters.\n+ */\n+public class TreeTypeAdaptersTest extends TestCase {\n+  private static final Id<Student> STUDENT1_ID = new Id<Student>(\"5\", Student.class);\n+  private static final Id<Student> STUDENT2_ID = new Id<Student>(\"6\", Student.class);\n+  private static final Student STUDENT1 = new Student(STUDENT1_ID, \"first\");\n+  private static final Student STUDENT2 = new Student(STUDENT2_ID, \"second\");\n+  private static final Type TYPE_COURSE_HISTORY =\n+    new TypeToken<Course<HistoryCourse>>(){}.getType(); \n+  private static final Id<Course<HistoryCourse>> COURSE_ID =\n+      new Id<Course<HistoryCourse>>(\"10\", TYPE_COURSE_HISTORY);\n+\n+  private Gson gson;\n+  private Course<HistoryCourse> course;\n+\n+  @Override\n+  protected void setUp() {\n+    gson = new GsonBuilder()\n+        .registerTypeAdapter(Id.class, new IdTreeTypeAdapter())\n+        .create();\n+    course = new Course<HistoryCourse>(COURSE_ID, 4,\n+        new Assignment<HistoryCourse>(null, null), createList(STUDENT1, STUDENT2));\n+  }\n+\n+  public void testSerializeId() {\n+    String json = gson.toJson(course, TYPE_COURSE_HISTORY);\n+    assertTrue(json.contains(String.valueOf(COURSE_ID.getValue())));\n+    assertTrue(json.contains(String.valueOf(STUDENT1_ID.getValue())));\n+    assertTrue(json.contains(String.valueOf(STUDENT2_ID.getValue())));\n+  }\n+\n+  public void testDeserializeId() {\n+    String json = \"{courseId:1,students:[{id:1,name:'first'},{id:6,name:'second'}],\"\n+      + \"numAssignments:4,assignment:{}}\";\n+    Course<HistoryCourse> target = gson.fromJson(json, TYPE_COURSE_HISTORY);\n+    assertEquals(\"1\", target.getStudents().get(0).id.getValue());\n+    assertEquals(\"6\", target.getStudents().get(1).id.getValue());\n+    assertEquals(\"1\", target.getId().getValue());\n+  }\n+\n+  private static final class Id<R> {\n+    final String value;\n+    @SuppressWarnings(\"unused\")\n+    final Type typeOfId;\n+\n+    private Id(String value, Type typeOfId) {\n+      this.value = value;\n+      this.typeOfId = typeOfId;\n+    }\n+    public String getValue() {\n+      return value;\n+    }\n+  }\n+\n+  private static final class IdTreeTypeAdapter implements JsonSerializer<Id<?>>,\n+      JsonDeserializer<Id<?>> {\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    public Id<?> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+        throws JsonParseException {\n+      if (!(typeOfT instanceof ParameterizedType)) {\n+        throw new JsonParseException(\"Id of unknown type: \" + typeOfT);\n+      }\n+      ParameterizedType parameterizedType = (ParameterizedType) typeOfT;\n+      // Since Id takes only one TypeVariable, the actual type corresponding to the first\n+      // TypeVariable is the Type we are looking for\n+      Type typeOfId = parameterizedType.getActualTypeArguments()[0];\n+      return new Id(json.getAsString(), typeOfId);\n+    }\n+\n+    public JsonElement serialize(Id<?> src, Type typeOfSrc, JsonSerializationContext context) {\n+      return new JsonPrimitive(src.getValue());\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class Student {\n+    Id<Student> id;\n+    String name;\n+\n+    private Student() {\n+      this(null, null);\n+    }\n+    public Student(Id<Student> id, String name) {\n+      this.id = id;\n+      this.name = name;\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class Course<T> {\n+    final List<Student> students;\n+    private final Id<Course<T>> courseId;\n+    private final int numAssignments;\n+    private final Assignment<T> assignment;\n+\n+    private Course() {\n+      this(null, 0, null, new ArrayList<Student>());\n+    }\n+\n+    public Course(Id<Course<T>> courseId, int numAssignments,\n+        Assignment<T> assignment, List<Student> players) {\n+      this.courseId = courseId;\n+      this.numAssignments = numAssignments;\n+      this.assignment = assignment;\n+      this.students = players;\n+    }\n+    public Id<Course<T>> getId() {\n+      return courseId;\n+    }\n+    List<Student> getStudents() {\n+      return students;\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class Assignment<T> {\n+    private final Id<Assignment<T>> id;\n+    private final T data;\n+\n+    private Assignment() {\n+      this(null, null);\n+    }\n+    public Assignment(Id<Assignment<T>> id, T data) {\n+      this.id = id;\n+      this.data = data;\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class HistoryCourse {\n+    int numClasses;\n+  }\n+\n+  private static <T> List<T> createList(T ...items) {\n+    return Arrays.asList(items);\n+  }\n+}", "timestamp": 1322041743, "metainfo": ""}