{"sha": "681281e772614282c8d6e07ee1e3b5ec9ca3faf3", "log": "Moved the classes to create procedural web-services into a procedural package. Moved IdTypeAdapter as an inner class of Id (Id.GsonTypeAdapter). Created a internal.util package to keep commonly used classes such as Preconditions. made common base classes such as ParamMap, ContentBody public.", "commit": "\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/QueueConsumer.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/QueueConsumer.java\n \n import java.util.concurrent.BlockingQueue;\n \n-import com.google.gson.webservice.definition.WebServiceCall;\n-import com.google.gson.webservice.definition.WebServiceResponse;\n import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.procedural.WebServiceCall;\n+import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n \n /**\n  * A consumer that executes in its own thread consuming queue entries and invoking web-service calls\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/QueueEntry.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/QueueEntry.java\n  */\n package com.google.gson.webservice.client;\n \n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n-import com.google.gson.webservice.definition.WebServiceRequest;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n \n /**\n  * A holder class for an entry stored in queue. It contains references to the request, callspec,\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/RequestSender.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/RequestSender.java\n import com.google.gson.Gson;\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HeaderMapSpec;\n-import com.google.gson.webservice.definition.RequestBody;\n-import com.google.gson.webservice.definition.WebServiceRequest;\n import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.procedural.RequestBody;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n \n /**\n  * Class to send Web service requests on a {@link HttpURLConnection}.\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/ResponseCallback.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ResponseCallback.java\n  */\n package com.google.gson.webservice.client;\n \n-import com.google.gson.webservice.definition.WebServiceCall;\n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n-import com.google.gson.webservice.definition.WebServiceRequest;\n import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.procedural.WebServiceCall;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n \n /**\n  * A client-supplied callback to be used with {@link WebServiceClientAsync}. When a web-service\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n import com.google.gson.Gson;\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HeaderMapSpec;\n-import com.google.gson.webservice.definition.ResponseBody;\n-import com.google.gson.webservice.definition.ResponseBodySpec;\n-import com.google.gson.webservice.definition.ResponseSpec;\n-import com.google.gson.webservice.definition.WebServiceResponse;\n import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.procedural.ResponseBody;\n+import com.google.gson.webservice.definition.procedural.ResponseBodySpec;\n+import com.google.gson.webservice.definition.procedural.ResponseSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n \n /**\n  * Receives a response coming on an {@link HttpURLConnection}.\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClient.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClient.java\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n-import com.google.gson.webservice.definition.ResponseBody;\n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n-import com.google.gson.webservice.definition.WebServiceRequest;\n-import com.google.gson.webservice.definition.WebServiceResponse;\n import com.google.gson.webservice.definition.WebServiceSystemException;\n-import com.google.gson.webservice.typeadapters.ResponseBodyGsonConverter;\n+import com.google.gson.webservice.definition.procedural.ResponseBody;\n+import com.google.gson.webservice.definition.procedural.ResponseBodyGsonConverter;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n+import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n \n /**\n  * Main class used by clients to access a Gson Web service.\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClientAsync.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/WebServiceClientAsync.java\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.logging.Level;\n \n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n-import com.google.gson.webservice.definition.WebServiceRequest;\n import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n \n /**\n  * A client for invoking a JSON-based Web-service in an asynchronous manner. The call is queued,\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/ContentBody.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ContentBody.java\n  */\n package com.google.gson.webservice.definition;\n \n+\n import java.util.Map;\n \n /**\n  * \n  * @author inder\n  */\n-class ContentBody extends ParamMap {\n+public class ContentBody extends ParamMap {\n   \n-  ContentBody(ContentBodySpec spec, Map<String, Object> contents) {\n+  public ContentBody(ContentBodySpec spec, Map<String, Object> contents) {\n     super(spec, contents);\n   }\n   \n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/ContentBodySpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ContentBodySpec.java\n  * limitations under the License.\n  */\n package com.google.gson.webservice.definition;\n+\n \n import java.lang.reflect.Type;\n import java.util.Collections;\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/HeaderMap.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/HeaderMap.java\n  * limitations under the License.\n  */\n package com.google.gson.webservice.definition;\n+\n \n import java.lang.reflect.Type;\n import java.util.Map;\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/HeaderMapSpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/HeaderMapSpec.java\n  * limitations under the License.\n  */\n package com.google.gson.webservice.definition;\n+\n \n import java.lang.reflect.Type;\n import java.util.LinkedHashMap;\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/ParamMap.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ParamMap.java\n  */\n package com.google.gson.webservice.definition;\n \n+import com.google.gson.webservice.definition.internal.utils.Preconditions;\n+\n import java.lang.reflect.Type;\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Set;\n \n-class ParamMap {\n+public class ParamMap {\n \n   public static class Builder<T extends ParamMapSpec> {    \n     protected final Map<String, Object> contents = new LinkedHashMap<String, Object>();\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/ParamMapSpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ParamMapSpec.java\n  * limitations under the License.\n  */\n package com.google.gson.webservice.definition;\n+\n \n import java.lang.reflect.Type;\n import java.util.Map;\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/TypedKey.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/TypedKey.java\n  * limitations under the License.\n  */\n package com.google.gson.webservice.definition;\n+\n+import com.google.gson.webservice.definition.internal.utils.Preconditions;\n \n /**\n  * A typed key for use in a {@link ParamMap} or a {@link ParamMapSpec}.\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceSystemException.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceSystemException.java\n \n /**\n  * Base class for all exceptions thrown by the Web service to indicate a system error condition. \n- * This should never be thrown to indicate bad user input. For that purpose, use \n- * {@link WebServiceAppException}.\n- * \n+ * This should never be thrown to indicate bad user input.\n+ *\n  * @author inder\n  */\n public class WebServiceSystemException extends RuntimeException {\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/internal/utils/Preconditions.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.internal.utils;\n+\n+public final class Preconditions {\n+\n+  public static void checkArgument(boolean condition) {\n+    if (!condition) {\n+      throw new IllegalArgumentException();\n+    }\n+  }\n+\n+  public static void checkArgument(boolean condition, String msg, Object... msgArgs) {\n+    if (!condition) {\n+      throw new IllegalArgumentException(String.format(msg, msgArgs));\n+    }\n+  }\n+\n+  public static void checkNotNull(Object obj) {\n+    if (obj == null) {\n+      throw new IllegalArgumentException();\n+    }\n+  }\n+\n+  public static void checkNotNull(Object obj, String msg, Object... msgArgs) {\n+    if (obj == null) {\n+      throw new IllegalArgumentException(String.format(msg, msgArgs));\n+    }\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/RequestBody.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+import com.google.gson.webservice.definition.ContentBody;\n+import com.google.gson.webservice.definition.ParamMap;\n+import com.google.gson.webservice.definition.TypedKey;\n+import com.google.gson.webservice.definition.ParamMap.Builder;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * Definition of the request body of a {@link WebServiceCall}. The request body is what is sent out\n+ * in the output stream of the request (for example, with \n+ * {@link java.net.HttpURLConnection#getOutputStream()}) , and is read by the \n+ * javax.servlet.http.HttpServletRequest#getInputStream().\n+ * This class omits the default constructor for use by Gson. Instead the user must use\n+ * {@link com.google.gson.webservice.definition.procedural.RequestBodyGsonConverter}\n+ * \n+ * @author inder\n+ */\n+public final class RequestBody extends ContentBody {\n+\n+  public static class Builder extends ParamMap.Builder<RequestBodySpec> {    \n+    \n+    public Builder(RequestBodySpec spec) {\n+      super(spec);\n+    }\n+    \n+    @Override\n+    public Builder put(String paramName, Object content) {\n+      return (Builder) super.put(paramName, content);\n+    }\n+\n+    @Override\n+    public Builder put(String paramName, Object content, Type typeOfContent) {\n+      return (Builder) super.put(paramName, content, typeOfContent);\n+    }\n+\n+    @Override\n+    public <T> Builder put(TypedKey<T> paramKey, T param) {\n+      return (Builder) super.put(paramKey, param);\n+    }\n+\n+    public RequestBody build() {\n+      return new RequestBody(spec, contents);\n+    }    \n+  }\n+\n+  private RequestBody(RequestBodySpec spec, Map<String, Object> contents) {\n+    super(spec, contents);\n+  }\n+  \n+  @Override\n+  public RequestBodySpec getSpec() {\n+    return (RequestBodySpec) spec;\n+  }  \n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/RequestBodyGsonConverter.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+import com.google.gson.InstanceCreator;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+/**\n+ * Gson type adapter for {@link RequestBody}. \n+ * \n+ * @author inder\n+ */\n+public class RequestBodyGsonConverter implements JsonSerializer<RequestBody>, \n+  JsonDeserializer<RequestBody>, InstanceCreator<RequestBody> {\n+\n+  private final RequestBodySpec spec;\n+\n+  public RequestBodyGsonConverter(RequestBodySpec spec) {\n+    this.spec = spec;\n+  }\n+  \n+  @Override\n+  public JsonElement serialize(RequestBody src, Type typeOfSrc, \n+      JsonSerializationContext context) {\n+    JsonObject root = new JsonObject();\n+    for(Map.Entry<String, Object> entry : src.entrySet()) {\n+      String key = entry.getKey();\n+      Type entryType = src.getSpec().getTypeFor(key);\n+      JsonElement value = context.serialize(entry.getValue(), entryType);\n+      root.add(key, value);        \n+    }\n+    return root;\n+  }\n+\n+  @Override\n+  public RequestBody deserialize(JsonElement json, Type typeOfT, \n+      JsonDeserializationContext context) throws JsonParseException {\n+    RequestBody.Builder builder = new RequestBody.Builder(spec);\n+    for (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {\n+      String key = entry.getKey();\n+      Type entryType = spec.getTypeFor(key);\n+      Object value = context.deserialize(entry.getValue(), entryType);\n+      builder.put(key, value);\n+    }\n+    return builder.build();\n+  }\n+\n+  @Override\n+  public RequestBody createInstance(Type type) {\n+    return new RequestBody.Builder(spec).build();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/RequestBodySpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+\n+import com.google.gson.webservice.definition.ContentBodySpec;\n+\n+import java.lang.reflect.Type;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Specification of a {@link RequestBody}.\n+ * \n+ * @author inder\n+ */\n+public final class RequestBodySpec extends ContentBodySpec {\n+  \n+  public static class Builder {\n+    private final Map<String, Type> paramsSpec = new LinkedHashMap<String, Type>();\n+    public Builder add(String paramName, Type type) {\n+      paramsSpec.put(paramName, type);\n+      return this;\n+    }\n+    \n+    public RequestBodySpec build() {\n+      RequestBodySpec spec = new RequestBodySpec(paramsSpec);\n+      return spec;\n+    }    \n+  }\n+  \n+  public RequestBodySpec(Map<String, Type> paramsSpec) {\n+    super(paramsSpec);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/RequestSpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.internal.utils.Preconditions;\n+\n+/**\n+ * Specification for a {@link WebServiceRequest}.\n+ * \n+ * @author inder\n+ */\n+public final class RequestSpec {\n+\n+  private final HeaderMapSpec headersSpec;\n+  private final RequestBodySpec bodySpec;\n+  \n+  public RequestSpec(HeaderMapSpec headersSpec, RequestBodySpec bodySpec) {\n+    Preconditions.checkNotNull(headersSpec);\n+    Preconditions.checkNotNull(bodySpec);\n+    \n+    this.headersSpec = headersSpec;\n+    this.bodySpec = bodySpec;\n+  }\n+  \n+  public HeaderMapSpec getHeadersSpec() {\n+    return headersSpec;\n+  }\n+ \n+  public RequestBodySpec getBodySpec() {\n+    return bodySpec;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{headersSpec:\");\n+    sb.append(headersSpec).append(\",bodySpec:\");\n+    sb.append(bodySpec).append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/ResponseBody.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+import com.google.gson.webservice.definition.ContentBody;\n+import com.google.gson.webservice.definition.ParamMap;\n+import com.google.gson.webservice.definition.TypedKey;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * body of the response. This is written out as JSON to be sent out to the client. \n+ * This class omits the default constructor for use by Gson. Instead the user must use\n+ * {@link com.google.gson.webservice.definition.procedural.ResponseBodyGsonConverter}\n+ *\n+ * @author inder\n+ */\n+public final class ResponseBody extends ContentBody {\n+\n+  public static class Builder extends ParamMap.Builder<ResponseBodySpec> {    \n+\n+    public Builder(ResponseBodySpec spec) {\n+      super(spec);\n+    }\n+\n+    @Override\n+    public Builder put(String paramName, Object content) {\n+      return (Builder) super.put(paramName, content);\n+    }\n+\n+    @Override\n+    public Builder put(String paramName, Object content, Type typeOfContent) {\n+      return (Builder) super.put(paramName, content, typeOfContent);\n+    }\n+\n+    @Override\n+    public <T> Builder put(TypedKey<T> paramKey, T param) {\n+      return (Builder) super.put(paramKey, param);\n+    }\n+\n+    public ResponseBody build() {\n+      return new ResponseBody(spec, contents);\n+    }    \n+  }\n+\n+  private ResponseBody(ResponseBodySpec spec, Map<String, Object> contents) {\n+    super(spec, contents);\n+  }\n+  \n+  @Override\n+  public ResponseBodySpec getSpec() {\n+    return (ResponseBodySpec) spec;\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/ResponseBodyGsonConverter.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+import com.google.gson.InstanceCreator;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+/**\n+ * Gson type adapter for {@link ResponseBody}. \n+ * \n+ * @author inder\n+ */\n+public final class ResponseBodyGsonConverter implements JsonSerializer<ResponseBody>, \n+  JsonDeserializer<ResponseBody>, InstanceCreator<ResponseBody> {\n+\n+  private final ResponseBodySpec spec;\n+\n+  public ResponseBodyGsonConverter(ResponseBodySpec spec) {\n+    this.spec = spec;\n+  }\n+  \n+  @Override\n+  public JsonElement serialize(ResponseBody src, Type typeOfSrc, \n+      JsonSerializationContext context) {\n+    JsonObject root = new JsonObject();\n+    for(Map.Entry<String, Object> entry : src.entrySet()) {\n+      String key = entry.getKey();\n+      Type entryType = src.getSpec().getTypeFor(key);\n+      JsonElement value = context.serialize(entry.getValue(), entryType);\n+      root.add(key, value);        \n+    }\n+    return root;\n+  }\n+\n+  @Override\n+  public ResponseBody deserialize(JsonElement json, Type typeOfT, \n+      JsonDeserializationContext context) throws JsonParseException {\n+    ResponseBody.Builder responseBodyBuilder = new ResponseBody.Builder(spec);\n+    for (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {\n+      String key = entry.getKey();\n+      Type entryType = spec.getTypeFor(key);\n+      Object value = context.deserialize(entry.getValue(), entryType);\n+      responseBodyBuilder.put(key, value, entryType);\n+    }\n+    return responseBodyBuilder.build();\n+  }\n+\n+  @Override\n+  public ResponseBody createInstance(Type type) {\n+    return new ResponseBody.Builder(spec).build();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/ResponseBodySpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+import com.google.gson.webservice.definition.ContentBodySpec;\n+\n+import java.lang.reflect.Type;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Specification of a {@link ResponseBody}.\n+ * \n+ * @author inder\n+ */\n+public final class ResponseBodySpec extends ContentBodySpec {\n+  \n+  public static class Builder {\n+    private final Map<String, Type> paramsSpec = new LinkedHashMap<String, Type>();\n+    public Builder add(String paramName, Type type) {\n+      paramsSpec.put(paramName, type);\n+      return this;\n+    }\n+    \n+    public ResponseBodySpec build() {\n+      ResponseBodySpec spec = new ResponseBodySpec(paramsSpec);\n+      return spec;\n+    }    \n+  }\n+  \n+  public ResponseBodySpec(Map<String, Type> paramsSpec) {\n+    super(paramsSpec);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/ResponseSpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.internal.utils.Preconditions;\n+\n+/**\n+ * Specification for a {@link WebServiceResponse}.\n+ * \n+ * @author inder\n+ */\n+public final class ResponseSpec {\n+  private final HeaderMapSpec headersSpec;\n+  private final ResponseBodySpec bodySpec;\n+\n+  public ResponseSpec(HeaderMapSpec headersSpec, ResponseBodySpec bodySpec) {\n+    Preconditions.checkNotNull(headersSpec);\n+    Preconditions.checkNotNull(bodySpec);\n+    \n+    this.headersSpec = headersSpec;\n+    this.bodySpec = bodySpec;\n+  }\n+\n+  public ResponseBodySpec getBodySpec() {\n+    return bodySpec;\n+  }\n+\n+  public HeaderMapSpec getHeadersSpec() {\n+    return headersSpec;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{headersSpec:\");\n+    sb.append(headersSpec).append(\",bodySpec:\");\n+    sb.append(bodySpec).append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/WebServiceCall.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+\n+/**\n+ * The data associated with a Web service call. This includes http request header parameters (form \n+ * and URL parameters), {@link RequestBody}, response header parameters, and {@link ResponseBody}. \n+ * \n+ * @author inder\n+ */\n+public final class WebServiceCall {\n+  \n+  private final WebServiceCallSpec callSpec;\n+  private final WebServiceRequest request;\n+  private final WebServiceResponse response;\n+  \n+  public WebServiceCall(WebServiceCallSpec callSpec, WebServiceRequest request, \n+      WebServiceResponse response) {\n+    this.callSpec = callSpec;\n+    this.request = request;\n+    this.response = response;\n+  }\n+\n+  public WebServiceCallSpec getSpec() {\n+    return callSpec;\n+  }\n+  \n+  public WebServiceRequest getRequest() {\n+    return request;\n+  }\n+\n+  public WebServiceResponse getResponse() {\n+    return response;\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/WebServiceCallSpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+import com.google.gson.webservice.definition.CallPath;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.HttpMethod;\n+import com.google.gson.webservice.definition.TypedKey;\n+import com.google.gson.webservice.definition.internal.utils.Preconditions;\n+\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+/**\n+ * Specification for a Json web service call. The call includes the relative path where the call \n+ * is available, the specification of requests, and responses. \n+ * \n+ * @author inder\n+ */\n+public final class WebServiceCallSpec {\n+  \n+  public static final WebServiceCallSpec NULL_SPEC = new Builder(new CallPath(\"\")).build();\n+  \n+  public static class Builder {\n+\tprivate final CallPath callPath;\n+\tprivate final Set<HttpMethod> supportedHttpMethods = new LinkedHashSet<HttpMethod>();\n+    private final HeaderMapSpec.Builder reqParamsSpecBuilder = new HeaderMapSpec.Builder();\n+    private final RequestBodySpec.Builder reqBodySpecBuilder = new RequestBodySpec.Builder();\n+    private final HeaderMapSpec.Builder resParamsSpecBuilder = new HeaderMapSpec.Builder();\n+    private final ResponseBodySpec.Builder resBodySpecBuilder = new ResponseBodySpec.Builder();\n+    \n+    public Builder(CallPath callPath) {\n+      this.callPath = callPath;      \n+    }\n+    \n+    /**\n+     * If this method is not invoked, then it is assumed that the WebServiceCall supports all\n+     * methods specified in {@link HttpMethod#values()}.\n+     * \n+     * @param httpMethods list of methods that this call supports.\n+     * @return self to follow the Builder pattern.\n+     */\n+    public Builder supportsHttpMethod(HttpMethod... httpMethods) {\n+      supportedHttpMethods.addAll(Arrays.asList(httpMethods));\n+      return this;\n+    }\n+    \n+    public <T> Builder addRequestParam(TypedKey<T> param) {\n+      reqParamsSpecBuilder.put(param.getName(), param.getClassOfT());\n+      return this;\n+    }\n+\n+    public <T> Builder addRequestBodyParam(TypedKey<T> param) {\n+      reqBodySpecBuilder.add(param.getName(), param.getClassOfT());\n+      return this;\n+    }\n+\n+    public <T> Builder addResponseParam(TypedKey<T> param) {\n+      resParamsSpecBuilder.put(param.getName(), param.getClassOfT());\n+      return this;\n+    }\n+\n+    public <T> Builder addResponseBodyParam(TypedKey<T> param) {\n+      resBodySpecBuilder.add(param.getName(), param.getClassOfT());\n+      return this;\n+    }\n+\n+    public WebServiceCallSpec build() {      \n+      if (supportedHttpMethods.isEmpty()) {\n+        supportedHttpMethods.addAll(Arrays.asList(HttpMethod.values()));\n+      }\n+      RequestSpec requestSpec = \n+        new RequestSpec(reqParamsSpecBuilder.build(), reqBodySpecBuilder.build());\n+      ResponseSpec responseSpec = \n+        new ResponseSpec(resParamsSpecBuilder.build(), resBodySpecBuilder.build());\n+      WebServiceCallSpec callSpec = new WebServiceCallSpec(supportedHttpMethods, callPath, \n+          requestSpec, responseSpec);\n+      return callSpec;\n+    }\n+  }\n+  \n+  private final Set<HttpMethod> supportedHttpMethods;\n+  private final CallPath path;\n+  private final ResponseSpec responseSpec;\n+  private final RequestSpec requestSpec;\n+  \n+  private WebServiceCallSpec(Set<HttpMethod> supportedHttpMethods, CallPath path, \n+      RequestSpec requestSpec, ResponseSpec responseSpec) {\n+    Preconditions.checkArgument(!supportedHttpMethods.isEmpty());\n+    Preconditions.checkNotNull(path);\n+    \n+    this.supportedHttpMethods = supportedHttpMethods;\n+    this.path = path;\n+    this.requestSpec = requestSpec;\n+    this.responseSpec = responseSpec;\n+  }\n+\n+  public CallPath getPath() {\n+    return path;\n+  }\n+  \n+  public Set<HttpMethod> getSupportedHttpMethods() {\n+    return supportedHttpMethods;\n+  }\n+\n+  public ResponseSpec getResponseSpec() {\n+    return responseSpec;\n+  }\n+  \n+  public RequestSpec getRequestSpec() {\n+    return requestSpec;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{path:\");\n+    sb.append(path).append(\",supportedHttpMethods:[\");\n+    boolean first = true;\n+    for (HttpMethod method : supportedHttpMethods) {\n+      if (first) {\n+        first = false;\n+      } else {\n+        sb.append(\",\");\n+      }\n+      sb.append(method);\n+    }\n+    sb.append(\"],requestSpec:\").append(requestSpec);\n+    sb.append(\",responseSpec:\").append(responseSpec).append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/WebServiceRequest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+import com.google.gson.webservice.definition.ContentBodySpec;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HttpMethod;\n+import com.google.gson.webservice.definition.TypedKey;\n+\n+/**\n+ * The data associated with a Web service request. This includes HTTP request header parameters \n+ * (form and URL parameters), and {@link RequestBody}. \n+ * \n+ * @author inder\n+ */\n+public final class WebServiceRequest {\n+  private final HttpMethod method;\n+  private final HeaderMap headers;\n+  private final RequestBody body;\n+  private final RequestSpec spec;\n+  \n+  public WebServiceRequest(HttpMethod method, HeaderMap requestHeaders, RequestBody requestBody) {\n+    this.method = method;\n+    this.body = requestBody;\n+    this.headers = requestHeaders;\n+    this.spec = new RequestSpec(requestHeaders.getSpec(), requestBody.getSpec());\n+  }\n+\n+  public HttpMethod getMethod() {\n+    return method;\n+  }\n+\n+  public RequestSpec getSpec() {\n+    return spec;\n+  }\n+\n+  public HttpMethod getHttpMethod() {\n+    return method;\n+  }\n+\n+  public RequestBody getBody() {\n+    return body;\n+  }\n+\n+  public HeaderMap getHeaders() {\n+    return headers;\n+  }\n+\n+  public String getContentType() {\n+    return ContentBodySpec.JSON_CONTENT_TYPE;\n+  }\n+  \n+  public <T> T getHeader(TypedKey<T> headerKey) {\n+    return headers.get(headerKey);\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{\");\n+    sb.append(method).append(\",\");\n+    sb.append(\",headers:\").append(headers);\n+    sb.append(\",body:\").append(body);\n+    sb.append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/WebServiceResponse.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.TypedKey;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * The data associated with a Web service response. This includes http response header parameters, \n+ * and {@link ResponseBody}. \n+ * \n+ * @author inder\n+ */\n+public final class WebServiceResponse {\n+  \n+  private final HeaderMap headers;\n+  private final ResponseBody body;\n+  private final ResponseSpec spec;\n+  \n+  public static class Builder {\n+    private final HeaderMap.Builder headers;\n+    private final ResponseBody.Builder body;\n+    private final ResponseSpec spec;\n+    \n+    public Builder(ResponseSpec spec) {\n+      this.spec = spec;\n+      headers = new HeaderMap.Builder(spec.getHeadersSpec());\n+      body = new ResponseBody.Builder(spec.getBodySpec());      \n+    }\n+    \n+    public Builder putHeader(String paramName, Object content) {\n+      headers.put(paramName, content);\n+      return this;\n+    }\n+    \n+    public Builder putHeader(String paramName, Object content, Type typeOfContent) {\n+      headers.put(paramName, content, typeOfContent);\n+      return this;\n+    }\n+    \n+    public <T> Builder putBody(TypedKey<T> paramName, T content) {\n+      return putBody(paramName.getName(), content);\n+    }\n+\n+    public Builder putBody(String paramName, Object content) {\n+      body.put(paramName, content);\n+      return this;\n+    }\n+\n+    public Builder put(String paramName, Object content, Type typeOfContent) {\n+      body.put(paramName, content, typeOfContent);\n+      return this;\n+    }\n+    \n+    public WebServiceResponse build() {\n+      return new WebServiceResponse(spec, headers.build(), body.build());\n+    }\n+  }\n+  \n+  private WebServiceResponse(ResponseSpec spec, HeaderMap headers, ResponseBody body) {\n+    this.spec = spec;\n+    this.headers = headers;\n+    this.body = body;\n+  }\n+  \n+  public WebServiceResponse(HeaderMap responseHeaders, ResponseBody responseBody) {\n+    this.spec = new ResponseSpec(responseHeaders.getSpec(), responseBody.getSpec());\n+    this.headers = responseHeaders;\n+    this.body = responseBody;\n+  }\n+\n+  public ResponseSpec getSpec() {\n+    return spec;\n+  }\n+\n+  public HeaderMap getHeaders() {\n+    return headers;\n+  }\n+  \n+  public ResponseBody getBody() {\n+    return body;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T getHeader(String headerName) {\n+    return (T) headers.get(headerName);\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder(\"{headers:\");\n+    sb.append(headers);\n+    sb.append(\",body:\").append(body);\n+    sb.append(\"}\");\n+    return sb.toString();\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/procedural/WebServiceSpec.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.procedural;\n+\n+import com.google.gson.webservice.definition.CallPathMap;\n+\n+/**\n+ * Specification of the Web service. This contains a specification of all the \n+ * {@link WebServiceCall}s supported by this Web service.\n+ * \n+ * @author inder\n+ */\n+public interface WebServiceSpec {\n+  public CallPathMap<WebServiceCallSpec> getCalls();\n+}\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/Id.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/Id.java\n  * limitations under the License.\n  */\n package com.google.gson.webservice.definition.rest;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.webservice.definition.internal.utils.Preconditions;\n \n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n     }\n     return type.toString();\n   }\n+\n+  /**\n+   * Type adapter for converting an Id to its serialized form\n+   *\n+   * @author inder\n+   *\n+   */\n+  public static final class GsonTypeAdapter implements JsonSerializer<Id<?>>,\n+      JsonDeserializer<Id<?>> {\n+\n+    @Override\n+    public JsonElement serialize(Id<?> src, Type typeOfSrc, JsonSerializationContext context) {\n+      return new JsonPrimitive(src.getValue());\n+    }\n+\n+    @Override\n+    public Id<?> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+        throws JsonParseException {\n+      if (!(typeOfT instanceof ParameterizedType)) {\n+        throw new JsonParseException(\"Id of unknown type: \" + typeOfT);\n+      }\n+      ParameterizedType parameterizedType = (ParameterizedType) typeOfT;\n+      // Since Id takes only one TypeVariable, the actual type corresponding to the first\n+      // TypeVariable is the Type we are looking for\n+      Type typeOfId = parameterizedType.getActualTypeArguments()[0];\n+      return Id.get(json.getAsLong(), typeOfId);\n+    }\n+  }\n }\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/ResourceMap.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/ResourceMap.java\n  */\n package com.google.gson.webservice.definition.rest;\n \n+import com.google.gson.webservice.definition.CallPath;\n+import com.google.gson.webservice.definition.internal.utils.Preconditions;\n+\n import java.util.HashMap;\n import java.util.Map;\n-\n-import com.google.gson.webservice.definition.CallPath;\n \n /**\n  * A {@link Map} of {@link CallPath} to {@link RestCallSpec}\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestCallSpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestCallSpec.java\n  */\n package com.google.gson.webservice.definition.rest;\n \n+import com.google.gson.webservice.definition.CallPath;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.HttpMethod;\n+import com.google.gson.webservice.definition.TypedKey;\n+import com.google.gson.webservice.definition.internal.utils.Preconditions;\n+\n import java.lang.reflect.Type;\n import java.util.Arrays;\n import java.util.LinkedHashSet;\n import java.util.Set;\n-\n-import com.google.gson.webservice.definition.CallPath;\n-import com.google.gson.webservice.definition.HeaderMapSpec;\n-import com.google.gson.webservice.definition.HttpMethod;\n-import com.google.gson.webservice.definition.TypedKey;\n \n /**\n  * Specification for a REST service\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestRequest.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestRequest.java\n  */\n package com.google.gson.webservice.definition.rest;\n \n-import java.lang.reflect.Type;\n-\n-import com.google.gson.webservice.definition.ContentBodySpec;\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HttpMethod;\n-import com.google.gson.webservice.definition.RequestBody;\n import com.google.gson.webservice.definition.TypedKey;\n+\n+import java.lang.reflect.Type;\n \n /**\n  * The data associated with a Web service request. This includes HTTP request header parameters \n- * (form and URL parameters), and {@link RequestBody}. \n+ * (form and URL parameters), and request body. \n  * \n  * @author inder\n  */\n public final class RestRequest<R extends RestResource<R>> {\n+  public static final String JSON_CONTENT_TYPE = \"application/json\";\n+\n   private final HttpMethod method;\n   private final HeaderMap headers;\n   private final R body;\n   }\n \n   public String getContentType() {\n-    return ContentBodySpec.JSON_CONTENT_TYPE;\n+    return JSON_CONTENT_TYPE;\n   }\n \n   public <T> T getHeader(TypedKey<T> key) {\n--- /dev/null\n+++ b/wsdef/src/test/java/com/google/gson/webservice/definition/rest/IdTypeAdapterTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.reflect.TypeToken;\n+import com.google.gson.webservice.definition.rest.Id;\n+\n+/**\n+ * Unit tests for {@link IdTypeAdapter}\n+ *\n+ * @author inder\n+ */\n+public class IdTypeAdapterTest extends TestCase {\n+  private static final Id<Student> STUDENT1_ID = Id.get(5L, Student.class);\n+  private static final Id<Student> STUDENT2_ID = Id.get(6L, Student.class);\n+  private static final Student STUDENT1 = new Student(STUDENT1_ID, \"first\");\n+  private static final Student STUDENT2 = new Student(STUDENT2_ID, \"second\");\n+  private static final Type TYPE_COURSE_HISTORY =\n+    new TypeToken<Course<HistoryCourse>>(){}.getType(); \n+  private static final Id<Course<HistoryCourse>> COURSE_ID = Id.get(10L, TYPE_COURSE_HISTORY);\n+\n+  private Gson gson;\n+  private Course<HistoryCourse> course;\n+\n+  @Override\n+  protected void setUp() {\n+    gson = new GsonBuilder()\n+        .registerTypeAdapter(Id.class, new Id.GsonTypeAdapter())\n+        .create();\n+    course = new Course<HistoryCourse>(COURSE_ID, 4,\n+        new Assignment<HistoryCourse>(null, null), createList(STUDENT1, STUDENT2));\n+  }\n+\n+  public void testSerializeId() {\n+    String json = gson.toJson(course, TYPE_COURSE_HISTORY);\n+    System.out.println(json);\n+    assertTrue(json.contains(String.valueOf(COURSE_ID.getValue())));\n+    assertTrue(json.contains(String.valueOf(STUDENT1_ID.getValue())));\n+    assertTrue(json.contains(String.valueOf(STUDENT2_ID.getValue())));\n+  }\n+\n+  public void testDeserializeId() {\n+    String json = \"{courseId:1,students:[{id:1,name:'first'},{id:6,name:'second'}],\"\n+      + \"numAssignments:4,assignment:{}}\";\n+    Course<HistoryCourse> target = gson.fromJson(json, TYPE_COURSE_HISTORY);\n+    assertEquals(1, target.getStudents().get(0).id.getValue());\n+    assertEquals(6, target.getStudents().get(1).id.getValue());\n+    assertEquals(1, target.getId().getValue());\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class Student {\n+    Id<Student> id;\n+    String name;\n+\n+    private Student() {\n+      this(null, null);\n+    }\n+    public Student(Id<Student> id, String name) {\n+      this.id = id;\n+      this.name = name;\n+    }\n+  }\n+  @SuppressWarnings(\"unused\")\n+  private static class Course<T> {\n+    final List<Student> students;\n+    private final Id<Course<T>> courseId;\n+    private final int numAssignments;\n+    private final Assignment<T> assignment;\n+\n+    private Course() {\n+      this(null, 0, null, new ArrayList<Student>());\n+    }\n+\n+    public Course(Id<Course<T>> courseId, int numAssignments,\n+        Assignment<T> assignment, List<Student> players) {\n+      this.courseId = courseId;\n+      this.numAssignments = numAssignments;\n+      this.assignment = assignment;\n+      this.students = players;\n+    }\n+    public Id<Course<T>> getId() {\n+      return courseId;\n+    }\n+    List<Student> getStudents() {\n+      return students;\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class Assignment<T> {\n+    private final Id<Assignment<T>> id;\n+    private final T data;\n+\n+    private Assignment() {\n+      this(null, null);\n+    }\n+    public Assignment(Id<Assignment<T>> id, T data) {\n+      this.id = id;\n+      this.data = data;\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class HistoryCourse {\n+    int numClasses;\n+  }\n+\n+  private static <T> List<T> createList(T ...items) {\n+    return Arrays.asList(items);\n+  }\n+}\n--- a/wsexample/client/src/main/java/com/google/gson/example/client/ExampleClient.java\n+++ b/wsexample/client/src/main/java/com/google/gson/example/client/ExampleClient.java\n import com.google.gson.webservice.client.WebServiceConfig;\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HttpMethod;\n-import com.google.gson.webservice.definition.RequestBody;\n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n-import com.google.gson.webservice.definition.WebServiceRequest;\n-import com.google.gson.webservice.definition.WebServiceResponse;\n+import com.google.gson.webservice.definition.procedural.RequestBody;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n+import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n \n public class ExampleClient {\n \n--- a/wsexample/definition/src/main/java/com/google/gson/example/service/SampleJsonService.java\n+++ b/wsexample/definition/src/main/java/com/google/gson/example/service/SampleJsonService.java\n import com.google.gson.example.model.TypedKeys;\n import com.google.gson.webservice.definition.CallPath;\n import com.google.gson.webservice.definition.HttpMethod;\n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n \n /**\n  * An example of a web-service definition\n--- a/wsexample/server/src/main/java/com/google/gson/wsexample/server/MainServlet.java\n+++ b/wsexample/server/src/main/java/com/google/gson/wsexample/server/MainServlet.java\n import com.google.gson.example.model.TypedKeys;\n import com.google.gson.example.service.SampleJsonService;\n import com.google.gson.webservice.definition.HeaderMap;\n-import com.google.gson.webservice.definition.RequestBody;\n-import com.google.gson.webservice.definition.RequestSpec;\n-import com.google.gson.webservice.definition.ResponseBody;\n-import com.google.gson.webservice.definition.ResponseSpec;\n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n-import com.google.gson.webservice.definition.WebServiceRequest;\n-import com.google.gson.webservice.definition.WebServiceResponse;\n-import com.google.gson.webservice.typeadapters.RequestBodyGsonConverter;\n-import com.google.gson.webservice.typeadapters.ResponseBodyGsonConverter;\n+import com.google.gson.webservice.definition.procedural.RequestBody;\n+import com.google.gson.webservice.definition.procedural.RequestBodyGsonConverter;\n+import com.google.gson.webservice.definition.procedural.RequestSpec;\n+import com.google.gson.webservice.definition.procedural.ResponseBody;\n+import com.google.gson.webservice.definition.procedural.ResponseBodyGsonConverter;\n+import com.google.gson.webservice.definition.procedural.ResponseSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n+import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n import com.google.gson.wsf.server.RequestReceiver;\n import com.google.gson.wsf.server.ResponseSender;\n \n--- a/wsf/src/main/java/com/google/gson/wsf/inject/RequestBodySpecProvider.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/RequestBodySpecProvider.java\n  */\n package com.google.gson.wsf.inject;\n \n-import com.google.gson.webservice.definition.RequestBodySpec;\n-import com.google.gson.webservice.definition.RequestSpec;\n+import com.google.gson.webservice.definition.procedural.RequestBodySpec;\n+import com.google.gson.webservice.definition.procedural.RequestSpec;\n import com.google.inject.Inject;\n import com.google.inject.Provider;\n \n--- a/wsf/src/main/java/com/google/gson/wsf/inject/RequestSpecProvider.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/RequestSpecProvider.java\n  */\n package com.google.gson.wsf.inject;\n \n-import com.google.gson.webservice.definition.RequestSpec;\n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.RequestSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n import com.google.inject.Inject;\n import com.google.inject.Provider;\n \n--- a/wsf/src/main/java/com/google/gson/wsf/inject/WebServiceCallSpecProvider.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/WebServiceCallSpecProvider.java\n package com.google.gson.wsf.inject;\n \n import com.google.gson.webservice.definition.CallPath;\n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n-import com.google.gson.webservice.definition.WebServiceSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceSpec;\n import com.google.inject.Inject;\n import com.google.inject.Provider;\n \n--- a/wsf/src/main/java/com/google/gson/wsf/inject/server/WebServiceCallServerProvider.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/inject/server/WebServiceCallServerProvider.java\n import javax.servlet.http.HttpServletRequest;\n \n import com.google.gson.Gson;\n-import com.google.gson.webservice.definition.WebServiceCall;\n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n-import com.google.gson.webservice.definition.WebServiceRequest;\n-import com.google.gson.webservice.definition.WebServiceResponse;\n+import com.google.gson.webservice.definition.procedural.WebServiceCall;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n+import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n import com.google.gson.wsf.server.RequestReceiver;\n import com.google.gson.wsf.server.WebServiceCallServerBuilder;\n import com.google.inject.Inject;\n--- a/wsf/src/main/java/com/google/gson/wsf/server/RequestReceiver.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/RequestReceiver.java\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HeaderMapSpec;\n import com.google.gson.webservice.definition.HttpMethod;\n-import com.google.gson.webservice.definition.RequestBody;\n-import com.google.gson.webservice.definition.RequestBodySpec;\n-import com.google.gson.webservice.definition.RequestSpec;\n-import com.google.gson.webservice.definition.WebServiceRequest;\n import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.procedural.RequestBody;\n+import com.google.gson.webservice.definition.procedural.RequestBodySpec;\n+import com.google.gson.webservice.definition.procedural.RequestSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n \n /**\n  * Receives and parses a request at the server side on a {@link HttpServletRequest}.  \n--- a/wsf/src/main/java/com/google/gson/wsf/server/ResponseBuilder.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/ResponseBuilder.java\n  */\n package com.google.gson.wsf.server;\n \n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n-import com.google.gson.webservice.definition.WebServiceRequest;\n-import com.google.gson.webservice.definition.WebServiceResponse;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n+import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n \n /**\n  * An interface describing a class that can build a response\n--- a/wsf/src/main/java/com/google/gson/wsf/server/ResponseSender.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/ResponseSender.java\n import com.google.gson.Gson;\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HeaderMapSpec;\n-import com.google.gson.webservice.definition.ResponseBody;\n-import com.google.gson.webservice.definition.WebServiceResponse;\n+import com.google.gson.webservice.definition.procedural.ResponseBody;\n+import com.google.gson.webservice.definition.procedural.WebServiceResponse;\n \n /**\n  * Sends a JSON web service response on {@link HttpServletResponse}.\n--- a/wsf/src/main/java/com/google/gson/wsf/server/WebServiceCallServerBuilder.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/WebServiceCallServerBuilder.java\n  */\n package com.google.gson.wsf.server;\n \n-import com.google.gson.webservice.definition.WebServiceCallSpec;\n-import com.google.gson.webservice.definition.WebServiceRequest;\n-import com.google.gson.webservice.definition.WebServiceResponse.Builder;\n+import com.google.gson.webservice.definition.procedural.WebServiceCallSpec;\n+import com.google.gson.webservice.definition.procedural.WebServiceRequest;\n+import com.google.gson.webservice.definition.procedural.WebServiceResponse.Builder;\n \n public class WebServiceCallServerBuilder {\n ", "timestamp": 1288718161, "metainfo": ""}