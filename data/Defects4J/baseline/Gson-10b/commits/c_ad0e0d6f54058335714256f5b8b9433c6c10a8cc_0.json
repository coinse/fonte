{"sha": "ad0e0d6f54058335714256f5b8b9433c6c10a8cc", "log": "Added  means to define and implement REST web-service and its clients.  Added missing copyright headers. Added TypedKey based methods in request/response classes.", "commit": "\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n import com.google.gson.webservice.definition.ResponseBodySpec;\n import com.google.gson.webservice.definition.ResponseSpec;\n import com.google.gson.webservice.definition.WebServiceResponse;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n \n /**\n  * Receives a response coming on an {@link HttpURLConnection}.\n       ResponseBody responseBody = readResponseBody(conn, bodySpec);\n       return new WebServiceResponse(responseParams, responseBody);\n     } catch (IOException e) {\n-      throw new RuntimeException(e);\n+      throw new WebServiceSystemException(e);\n     }\n   }\n \n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/RestClient.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.rest.RestCallSpec;\n+import com.google.gson.webservice.definition.rest.RestRequest;\n+import com.google.gson.webservice.definition.rest.RestResponse;\n+\n+/**\n+ * Main class used by clients to access a Gson Web service.\n+ * \n+ * @author inder\n+ */\n+public final class RestClient {\n+  private final WebServiceConfig config;\n+  private final Logger logger;\n+  private final Level logLevel;\n+\n+  public RestClient(WebServiceConfig serverConfig) {\n+    this(serverConfig, null);\n+  }\n+\n+  public RestClient(WebServiceConfig serverConfig, Level logLevel) {\n+    this.config = serverConfig;\n+    this.logger = logLevel == null ? null : Logger.getLogger(RestClient.class.getName());\n+    this.logLevel = logLevel;\n+  }\n+  \n+  private URL getWebServiceUrl(RestCallSpec<?> callSpec) {\n+    String url = config.getServiceBaseUrl() + callSpec.getPath().get();\n+    try {\n+      return new URL(url);\n+    } catch (MalformedURLException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+  \n+  public <R> RestResponse<R> getResponse(RestCallSpec<R> callSpec, RestRequest<R> request) {\n+    Gson gson = new GsonBuilder().create();\n+    return getResponse(callSpec, request, gson);\n+  }\n+\n+  public <R> RestResponse<R> getResponse(\n+      RestCallSpec<R> callSpec, RestRequest<R> request, Gson gson) {\n+    try {\n+      URL webServiceUrl = getWebServiceUrl(callSpec);\n+      if (logger != null) {\n+        logger.log(logLevel, \"Opening connection to \" + webServiceUrl);\n+      }\n+      HttpURLConnection conn = (HttpURLConnection) webServiceUrl.openConnection();\n+      RestRequestSender requestSender = new RestRequestSender(gson, logLevel);\n+      requestSender.send(conn, request);\n+      RestResponseReceiver<R> responseReceiver =\n+        new RestResponseReceiver<R>(gson, callSpec.getResponseSpec(), logLevel);\n+      return responseReceiver.receive(conn);\n+    } catch (IOException e) {\n+      throw new WebServiceSystemException(e);\n+    } catch (IllegalArgumentException e) {\n+      throw new WebServiceSystemException(e);\n+    }\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return String.format(\"config:%s\", config);\n+  }\n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/RestRequestSender.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.rest.RestRequest;\n+\n+/**\n+ * Class to send Web service requests on a {@link HttpURLConnection}.\n+ * \n+ * @author inder\n+ */\n+public final class RestRequestSender {\n+  private final Gson gson;\n+  private final Logger logger;\n+  private final Level logLevel;\n+\n+  public RestRequestSender(Gson gson) {\n+    this(gson, null);\n+  }\n+\n+  public RestRequestSender(Gson gson, Level logLevel) {\n+    this.gson = gson;\n+    logger = logLevel == null ? null : Logger.getLogger(RestRequestSender.class.getName());\n+    this.logLevel = logLevel;\n+  }\n+  \n+  public <R> void send(HttpURLConnection conn, RestRequest<R> request) {    \n+    try {\n+      conn.setRequestMethod(request.getHttpMethod().toString());\n+      setHeader(conn, \"Content-Type\", request.getContentType(), true);\n+      \n+      // Assume conservatively that the response will need to be read.\n+      // This is done here instead of in the response receiver because this property must be set\n+      // before sending any data on the connection.\n+      conn.setDoInput(true);\n+      \n+      R requestBody = request.getBody();\n+      String requestBodyContents = \"\";\n+      // Android Java VM ignore Content-Length if setDoOutput is not set\n+      conn.setDoOutput(true);    \n+      if (requestBody != null) {\n+        requestBodyContents = gson.toJson(requestBody);\n+      }\n+      String contentLength = String.valueOf(requestBodyContents.length());\n+      setHeader(conn, \"Content-Length\", contentLength, true);\n+      addRequestParams(conn, request.getHeaders());\n+      if (requestBodyContents != null) {\n+        Streams.copy(requestBodyContents, conn.getOutputStream(), false);\n+      }\n+      \n+      // Initiate the sending of the request.\n+      conn.connect();\n+    } catch (IOException e) {\n+      throw new WebServiceSystemException(e);\n+    }\n+  }\n+\n+  private void addRequestParams(HttpURLConnection conn, HeaderMap requestParams) {\n+    HeaderMapSpec spec = requestParams.getSpec();\n+    for (Map.Entry<String, Object> entry : requestParams.entrySet()) {\n+      String paramName = entry.getKey();\n+      Type type = spec.getTypeFor(paramName);\n+      Object value = entry.getValue();\n+      String json = gson.toJson(value, type);\n+      setHeader(conn, paramName, json, false);\n+    }\n+  }\n+\n+  private void setHeader(HttpURLConnection conn, String name, String value, boolean overwrite) {\n+    if (logger != null) {\n+      logger.log(logLevel, String.format(\"Request param: %s:%s\", name, value));\n+    }\n+    if (overwrite) {\n+      conn.setRequestProperty(name, value);\n+    } else {\n+      conn.addRequestProperty(name, value);\n+    }\n+  }  \n+}\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/RestResponseReceiver.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.lang.reflect.Type;\n+import java.net.HttpURLConnection;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.webservice.definition.ContentBodySpec;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.rest.RestResponse;\n+import com.google.gson.webservice.definition.rest.RestResponseSpec;\n+\n+/**\n+ * Receives a response coming on an {@link HttpURLConnection}.\n+ * \n+ * @author inder\n+ */\n+public final class RestResponseReceiver<R> {\n+  private final Gson gson;\n+  private final RestResponseSpec<R> spec;\n+  private final Logger logger;\n+  private final Level logLevel;\n+\n+  public RestResponseReceiver(Gson gson, RestResponseSpec<R> spec) {\n+    this(gson, spec, null);\n+  }\n+  public RestResponseReceiver(Gson gson, RestResponseSpec<R> spec, Level logLevel) {\n+    this.gson = gson;\n+    this.spec = spec;\n+    this.logger = logLevel == null ? null : Logger.getLogger(RestResponseReceiver.class.getName());\n+    this.logLevel = logLevel;\n+  }\n+  \n+  public RestResponse<R> receive(HttpURLConnection conn) {\n+    try {\n+      HeaderMapSpec paramSpec = spec.getHeadersSpec();\n+      Class<R> bodySpec = spec.getResourceClass();\n+      // read response\n+      HeaderMap responseParams = readResponseHeaders(conn, paramSpec);\n+      R responseBody = readResponseBody(conn, bodySpec);\n+      return new RestResponse<R>(responseParams, responseBody);\n+    } catch (IOException e) {\n+      throw new WebServiceSystemException(e);\n+    }\n+  }\n+\n+  private HeaderMap readResponseHeaders(HttpURLConnection conn, HeaderMapSpec paramsSpec) {    \n+    HeaderMap.Builder paramsBuilder = new HeaderMap.Builder(paramsSpec);    \n+    for (Map.Entry<String, Type> entry : paramsSpec.entrySet()) {\n+      String paramName = entry.getKey();\n+      String json = conn.getHeaderField(paramName);\n+      if (json != null) {\n+        if (logger != null) {\n+          logger.log(logLevel, String.format(\"Response Header: %s:%s\\n\", paramName, json));\n+        }\n+        Type typeOfT = paramsSpec.getTypeFor(paramName);\n+        Object value = gson.fromJson(json, typeOfT);\n+        paramsBuilder.put(paramName, value, typeOfT);\n+      }\n+    }\n+    return paramsBuilder.build();\n+  }\n+\n+  private R readResponseBody(HttpURLConnection conn, Class<R> resourceClass) throws IOException {\n+    String connContentType = conn.getContentType();\n+    Preconditions.checkArgument(connContentType.contains(ContentBodySpec.JSON_CONTENT_TYPE), conn);\n+    Reader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n+    R body = gson.fromJson(reader, resourceClass);\n+    return body;\n+  }\n+}\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/ContentBodySpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ContentBodySpec.java\n  * \n  * @author inder\n  */\n-class ContentBodySpec implements ParamMapSpec {\n+public class ContentBodySpec implements ParamMapSpec {\n \n   public static final String JSON_CONTENT_TYPE = \"application/json\";\n-  private static final String JSON_CHARACTER_ENCODING = \"utf-8\";\n+  public static final String JSON_CHARACTER_ENCODING = \"utf-8\";\n   \n   private final Map<String, Type> paramsSpec;\n \n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/HttpMethod.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/HttpMethod.java\n  */\n package com.google.gson.webservice.definition;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n /**\n  * An enum of Http methods to provide strongly-typed versions instead of strings. \n  * \n   public static HttpMethod getMethod(String method) {\n     return valueOf(method.trim().toUpperCase());\n   }\n+  \n+  public static final List<HttpMethod> ALL_METHODS =\n+    Collections.unmodifiableList(Arrays.asList(values()));\n }\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/TypedKey.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/TypedKey.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.google.gson.webservice.definition;\n \n+/**\n+ * A typed key for use in a {@link ParamMap} or a {@link ParamMapSpec}.\n+ *\n+ * @author inder\n+ *\n+ * @param <T> Intended type of the content for the key\n+ */\n public class TypedKey<T> {\n   private final String name;\n   private final Class<T> classOfT;\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceResponse.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceResponse.java\n       return this;\n     }\n     \n+    public <T> Builder putBody(TypedKey<T> paramName, T content) {\n+      return putBody(paramName.getName(), content);\n+    }\n+\n     public Builder putBody(String paramName, Object content) {\n       body.put(paramName, content);\n       return this;\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/Preconditions.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+final class Preconditions {\n+\n+  public static void checkArgument(boolean condition) {\n+    if (!condition) {\n+      throw new IllegalArgumentException();\n+    }\n+  }\n+\n+  public static void checkNotNull(Object obj) {\n+    if (obj == null) {\n+      throw new IllegalArgumentException();\n+    }\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/ResourceMap.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.gson.webservice.definition.CallPath;\n+\n+/**\n+ * A {@link Map} of {@link CallPath} to {@link RestCallSpec}\n+ *\n+ * @author inder\n+ */\n+public final class ResourceMap {\n+\n+  public static final class Builder {\n+    private final Map<CallPath, RestCallSpec<?>> resources =\n+      new HashMap<CallPath, RestCallSpec<?>>();\n+    \n+    public <R> Builder set(CallPath callPath, RestCallSpec<R> spec) {\n+      resources.put(callPath, spec);\n+      return this;\n+    }\n+\n+    public ResourceMap build() {\n+      return new ResourceMap(resources);\n+    }\n+  }\n+\n+  private final Map<CallPath, RestCallSpec<?>> resources;\n+\n+  public ResourceMap(Map<CallPath, RestCallSpec<?>> resources) {\n+    this.resources = resources;\n+  }\n+\n+  public <T> RestCallSpec<T> get(CallPath callPath) {\n+    @SuppressWarnings(\"unchecked\")\n+    RestCallSpec<T> restCallSpec = (RestCallSpec<T>)resources.get(callPath);\n+    return restCallSpec;\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestCall.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+/**\n+ * The data associated with a Rest Web service call. This includes http request header parameters\n+ * (form and URL parameters), request body, response header parameters, and resource response body. \n+ * \n+ * @author inder\n+ */\n+public final class RestCall<R> {\n+  \n+  private final RestCallSpec<R> callSpec;\n+  private final RestRequest<R> request;\n+  private final RestResponse<R> response;\n+  \n+  public RestCall(RestCallSpec<R> callSpec, RestRequest<R> request, RestResponse<R> response) {\n+    this.callSpec = callSpec;\n+    this.request = request;\n+    this.response = response;\n+  }\n+\n+  public RestCallSpec<R> getSpec() {\n+    return callSpec;\n+  }\n+  \n+  public RestRequest<R> getRequest() {\n+    return request;\n+  }\n+\n+  public RestResponse<R> getResponse() {\n+    return response;\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestCallSpec.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import com.google.gson.webservice.definition.CallPath;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.HttpMethod;\n+import com.google.gson.webservice.definition.TypedKey;\n+\n+/**\n+ * Specification for a REST service\n+ *\n+ * @author inder\n+ */\n+public final class RestCallSpec<R> {\n+  public static class Builder<R> {\n+    private final CallPath callPath;\n+    private final Set<HttpMethod> supportedHttpMethods = new LinkedHashSet<HttpMethod>();\n+    private final HeaderMapSpec.Builder reqParamsSpecBuilder = new HeaderMapSpec.Builder();\n+    private final HeaderMapSpec.Builder resParamsSpecBuilder = new HeaderMapSpec.Builder();\n+    private final Class<R> resourceClass;\n+    \n+    public Builder(CallPath callPath, Class<R> resourceClass) {\n+      this.callPath = callPath;\n+      supportedHttpMethods.addAll(HttpMethod.ALL_METHODS);\n+      this.resourceClass = resourceClass;\n+    }\n+\n+    public Builder<R> disableHttpMethod(HttpMethod httpMethod) {\n+      supportedHttpMethods.remove(httpMethod);\n+      return this;\n+    }\n+    \n+    public <T> Builder<R> addRequestParam(TypedKey<T> paramKey, Class<T> typeOfParam) {\n+      reqParamsSpecBuilder.put(paramKey.getName(), typeOfParam);\n+      return this;\n+    }\n+\n+    public <T> Builder<R> addResponseParam(TypedKey<T> paramKey, Class<T> typeOfParam) {\n+      resParamsSpecBuilder.put(paramKey.getName(), typeOfParam);\n+      return this;\n+    }\n+\n+    public RestCallSpec<R> build() {\n+      if (supportedHttpMethods.isEmpty()) {\n+        supportedHttpMethods.addAll(Arrays.asList(HttpMethod.values()));\n+      }\n+      RestRequestSpec<R> requestSpec = \n+        new RestRequestSpec<R>(reqParamsSpecBuilder.build(), resourceClass);\n+      RestResponseSpec<R> responseSpec =\n+        new RestResponseSpec<R>(resParamsSpecBuilder.build(), resourceClass);\n+      return new RestCallSpec<R>(supportedHttpMethods, callPath, \n+          requestSpec, responseSpec);\n+    }\n+  }\n+\n+  private final Set<HttpMethod> supportedHttpMethods;\n+  private final CallPath path;\n+  private final RestRequestSpec<R> requestSpec;\n+  private final RestResponseSpec<R> responseSpec;\n+\n+  private RestCallSpec(Set<HttpMethod> supportedHttpMethods, CallPath path,\n+      RestRequestSpec<R> requestSpec, RestResponseSpec<R> responseSpec) {\n+    Preconditions.checkArgument(!supportedHttpMethods.isEmpty());\n+    Preconditions.checkNotNull(path);\n+    this.supportedHttpMethods = supportedHttpMethods;\n+    this.path = path;\n+    this.requestSpec = requestSpec;\n+    this.responseSpec = responseSpec;\n+  }\n+\n+  public CallPath getPath() {\n+    return path;\n+  }\n+  \n+  public Set<HttpMethod> getSupportedHttpMethods() {\n+    return supportedHttpMethods;\n+  }\n+\n+  public RestResponseSpec<R> getResponseSpec() {\n+    return responseSpec;\n+  }\n+  \n+  public RestRequestSpec<R> getRequestSpec() {\n+    return requestSpec;\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestRequest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+import com.google.gson.webservice.definition.ContentBodySpec;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HttpMethod;\n+import com.google.gson.webservice.definition.RequestBody;\n+\n+/**\n+ * The data associated with a Web service request. This includes HTTP request header parameters \n+ * (form and URL parameters), and {@link RequestBody}. \n+ * \n+ * @author inder\n+ */\n+public final class RestRequest<R> {\n+  private final HttpMethod method;\n+  private final HeaderMap headers;\n+  private final R body;\n+  private final RestRequestSpec<R> spec;\n+  \n+  public RestRequest(HttpMethod method, HeaderMap requestHeaders,\n+      R requestBody, Class<R> resourceClass) {\n+    this.method = method;\n+    this.body = requestBody;\n+    this.headers = requestHeaders;\n+    this.spec = new RestRequestSpec<R>(requestHeaders.getSpec(), resourceClass);\n+  }\n+\n+  public HttpMethod getMethod() {\n+    return method;\n+  }\n+\n+  public RestRequestSpec<R> getSpec() {\n+    return spec;\n+  }\n+\n+  public HttpMethod getHttpMethod() {\n+    return method;\n+  }\n+\n+  public R getBody() {\n+    return body;\n+  }\n+\n+  public HeaderMap getHeaders() {\n+    return headers;\n+  }\n+\n+  public String getContentType() {\n+    return ContentBodySpec.JSON_CONTENT_TYPE;\n+  }\n+  \n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T getHeader(String headerName) {\n+    return (T) headers.get(headerName);\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return String.format(\"{method:%s,headers:%s,body:%s}\", method, headers, body);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestRequestSpec.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+\n+/**\n+ * Specification for a {@link RestRequest}.\n+ * \n+ * @author inder\n+ */\n+public final class RestRequestSpec<R> {\n+  private final HeaderMapSpec headersSpec;\n+  private final Class<R> resourceClass;\n+\n+  public RestRequestSpec(HeaderMapSpec headersSpec, Class<R> resourceClass) {\n+    this.headersSpec = headersSpec;\n+    this.resourceClass = resourceClass;\n+  }\n+\n+  public Class<R> getResourceClass() {\n+    return resourceClass;\n+  }\n+\n+  public HeaderMapSpec getHeadersSpec() {\n+    return headersSpec;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return String.format(\"{headersSpec:%s,resourceClass:%s}\", headersSpec, resourceClass);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestResponse.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.TypedKey;\n+\n+/**\n+ * The data associated with a REST Web service response. This includes http response header\n+ * parameters, and the response body. \n+ * \n+ * @author inder\n+ */\n+public final class RestResponse<R> {\n+  \n+  private final HeaderMap headers;\n+  private final R body;\n+  private final RestResponseSpec<R> spec;\n+  \n+  public static class Builder<R> {\n+    private final HeaderMap.Builder headers;\n+    private R body;\n+    private final RestResponseSpec<R> spec;\n+    \n+    public Builder(RestResponseSpec<R> spec) {\n+      this.spec = spec;\n+      headers = new HeaderMap.Builder(spec.getHeadersSpec());\n+    }\n+    \n+    public <T> Builder<R> putHeader(TypedKey<T> paramName, T content) {\n+      headers.put(paramName.getName(), content, paramName.getClassOfT());\n+      return this;\n+    }\n+    \n+    public Builder<R> setBody(R body) {\n+      this.body = body;\n+      return this;\n+    }\n+\n+    public RestResponse<R> build() {\n+      return new RestResponse<R>(spec, headers.build(), body);\n+    }\n+  }\n+  \n+  private RestResponse(RestResponseSpec<R> spec, HeaderMap headers, R body) {\n+    this.spec = spec;\n+    this.headers = headers;\n+    this.body = body;\n+  }\n+  \n+  @SuppressWarnings(\"unchecked\")\n+  public RestResponse(HeaderMap responseHeaders, R responseBody) {\n+    this.spec = new RestResponseSpec<R>(responseHeaders.getSpec(),\n+        (Class<R>)responseBody.getClass());\n+    this.headers = responseHeaders;\n+    this.body = responseBody;\n+  }\n+\n+  public RestResponseSpec<R> getSpec() {\n+    return spec;\n+  }\n+\n+  public HeaderMap getHeaders() {\n+    return headers;\n+  }\n+  \n+  public R getBody() {\n+    return body;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T getHeader(String headerName) {\n+    return (T) headers.get(headerName);\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return String.format(\"{headers:%s, body:%s}\", headers, body);\n+  }\n+}\n--- /dev/null\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/rest/RestResponseSpec.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.definition.rest;\n+\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+\n+/**\n+ * Specification for a {@link RestResponse}.\n+ * \n+ * @author inder\n+ */\n+public final class RestResponseSpec<R> {\n+  private final HeaderMapSpec headersSpec;\n+  private final Class<R> resourceClass;\n+\n+  public RestResponseSpec(HeaderMapSpec headersSpec, Class<R> resourceClass) {\n+    this.headersSpec = headersSpec;\n+    this.resourceClass = resourceClass;\n+  }\n+\n+  public Class<R> getResourceClass() {\n+    return resourceClass;\n+  }\n+\n+  public HeaderMapSpec getHeadersSpec() {\n+    return headersSpec;\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    return String.format(\"{headersSpec:%s,resourceClass:%s}\", headersSpec, resourceClass);\n+  }\n+}\n--- a/wsf/src/main/java/com/google/gson/wsf/server/ResponseSender.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/ResponseSender.java\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HeaderMapSpec;\n import com.google.gson.webservice.definition.ResponseBody;\n-import com.google.gson.webservice.definition.ResponseBodySpec;\n import com.google.gson.webservice.definition.WebServiceResponse;\n \n /**\n   \n   public void send(HttpServletResponse conn, WebServiceResponse response) {\n     try {\n-      conn.setContentType(ResponseBodySpec.JSON_CONTENT_TYPE);\n       sendHeaders(conn, response.getHeaders());\n       sendBody(conn, response.getBody());\n     } catch (IOException e) {\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/RestRequestReceiver.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.server.rest;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.HttpMethod;\n+import com.google.gson.webservice.definition.WebServiceSystemException;\n+import com.google.gson.webservice.definition.rest.RestRequest;\n+import com.google.gson.webservice.definition.rest.RestRequestSpec;\n+\n+/**\n+ * Receives and parses a request at the server side on a {@link HttpServletRequest}.  \n+ * \n+ * @author inder\n+ */\n+public final class RestRequestReceiver<R> {\n+\n+  private final Gson gson;\n+  private final RestRequestSpec<R> spec;\n+\n+  public RestRequestReceiver(Gson gson, RestRequestSpec<R> spec) {\n+    this.gson = gson;\n+    this.spec = spec;\n+  }\n+  \n+  public RestRequest<R> receive(HttpServletRequest request) {\n+    try {\n+      HeaderMap requestParams = buildRequestParams(request);\n+      R requestBody = buildRequestBody(request);\n+      \n+      HttpMethod method = HttpMethod.getMethod(request.getMethod());\n+      return new RestRequest<R>(method, requestParams, requestBody, spec.getResourceClass());\n+    } catch (IOException e) {\n+      throw new WebServiceSystemException(e);\n+    } catch (JsonParseException e) {\n+      // Not a Web service request\n+      throw new WebServiceSystemException(e);\n+    }\n+  }\n+  \n+  private HeaderMap buildRequestParams(HttpServletRequest request) {\n+    HeaderMapSpec paramsSpec = this.spec.getHeadersSpec();\n+    HeaderMap.Builder paramsBuilder = new HeaderMap.Builder(paramsSpec);\n+    for (Map.Entry<String, Type> param : paramsSpec.entrySet()) {\n+      String name = param.getKey();\n+      Type type = param.getValue();\n+      String header = request.getHeader(name);\n+      if (header == null || header.equals(\"\")) {\n+        // check parameter map for the value\n+        header = request.getParameter(name);\n+      }\n+      if (header != null && !header.equals(\"\")) { \n+        Object value = gson.fromJson(header, type);\n+        paramsBuilder.put(name, value);\n+      }\n+    }\n+    return paramsBuilder.build();\n+  }\n+  \n+  private R buildRequestBody(HttpServletRequest request) throws IOException {\n+    Class<R> resourceClass = spec.getResourceClass();\n+    Reader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n+    R requestBody = gson.fromJson(reader, resourceClass);\n+    return requestBody;\n+  }\n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/RestResponseBuilder.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.server.rest;\n+\n+import com.google.gson.webservice.definition.rest.RestRequest;\n+import com.google.gson.webservice.definition.rest.RestResponse;\n+import com.google.gson.webservice.definition.rest.RestCallSpec;\n+\n+public interface RestResponseBuilder<R> {\n+  public void buildResponse(RestCallSpec<R> callSpec, RestRequest<R> request,\n+      RestResponse.Builder<R> responseBuilder); \n+}\n--- /dev/null\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/rest/RestResponseSender.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.wsf.server.rest;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.webservice.definition.ContentBodySpec;\n+import com.google.gson.webservice.definition.HeaderMap;\n+import com.google.gson.webservice.definition.HeaderMapSpec;\n+import com.google.gson.webservice.definition.rest.RestResponse;\n+\n+/**\n+ * Sends a JSON web service response on {@link HttpServletResponse}.\n+ * \n+ * @author inder\n+ */\n+public final class RestResponseSender<R> {\n+  private static final Logger logger = Logger.getLogger(RestResponseSender.class.getCanonicalName());\n+\n+  private Gson gson;\n+\n+  public RestResponseSender(Gson gson) {\n+    this.gson = gson;\n+  }\n+  \n+  public void send(HttpServletResponse conn, RestResponse<R> response) {\n+    try {\n+      sendHeaders(conn, response.getHeaders());\n+      sendBody(conn, response.getBody());\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+ \n+  private void sendHeaders(HttpServletResponse conn, HeaderMap responseParams) {\n+    HeaderMapSpec spec = responseParams.getSpec();\n+    for (Map.Entry<String, Object> param : responseParams.entrySet()) {\n+      String paramName = param.getKey();\n+      Object paramValue = param.getValue();\n+      Type paramType = spec.getTypeFor(paramName);\n+      String json = gson.toJson(paramValue, paramType);\n+      logger.fine(\"RESPONSE HEADER:{\" + paramName + \", \" + json + \"}\");\n+      conn.addHeader(paramName, json);\n+    }\n+  }\n+\n+  private void sendBody(HttpServletResponse conn, R responseBody) throws IOException {\n+    conn.setContentType(ContentBodySpec.JSON_CONTENT_TYPE);\n+    conn.setCharacterEncoding(ContentBodySpec.JSON_CHARACTER_ENCODING);\n+    String json = gson.toJson(responseBody);\n+    logger.fine(\"RESPONSE BODY:\" + json);\n+    conn.getWriter().append(json);\n+  }\n+}", "timestamp": 1266276288, "metainfo": ""}