{"sha": "e57ef0908b6aa422819511dd640584ed71ac846d", "log": "Add method to GsonBuilder to enable complex key serialization of maps.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.HashSet;\n-import java.util.LinkedHashMap;\n import java.util.LinkedList;\n import java.util.Locale;\n import java.util.Map;\n   private static final DefaultTimestampDeserializer TIMESTAMP_DESERIALIZER =\n     new DefaultTimestampDeserializer();\n \n-  @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+  @SuppressWarnings(\"unchecked\")\n   private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\n   private static final UrlTypeAdapter URL_TYPE_ADAPTER = new UrlTypeAdapter();\n   private static final UriTypeAdapter URI_TYPE_ADAPTER = new UriTypeAdapter();\n   private static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_SERIALIZERS =\n       createDefaultSerializers();\n   static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_HIERARCHY_SERIALIZERS =\n-    createDefaultHierarchySerializers();\n+      createDefaultHierarchySerializers();\n   private static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_DESERIALIZERS =\n       createDefaultDeserializers();\n   static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_HIERARCHY_DESERIALIZERS =\n-    createDefaultHierarchyDeserializers();\n+      createDefaultHierarchyDeserializers();\n   private static final ParameterizedTypeHandlerMap<InstanceCreator<?>> DEFAULT_INSTANCE_CREATORS =\n       createDefaultInstanceCreators();\n \n     return map;\n   }\n \n-  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+  @SuppressWarnings(\"unchecked\")\n   private static JsonDeserializer<?> wrapDeserializer(JsonDeserializer<?> deserializer) {\n     return new JsonDeserializerExceptionWrapper(deserializer);\n   }\n     }\n   }\n \n-  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+  @SuppressWarnings(\"unchecked\")\n   private static final class CollectionTypeAdapter implements JsonSerializer<Collection>,\n       JsonDeserializer<Collection>, InstanceCreator<Collection> {\n     public JsonElement serialize(Collection src, Type typeOfSrc, JsonSerializationContext context) {\n     }\n   }\n \n-  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-  static final class MapTypeAdapter implements JsonSerializer<Map>, JsonDeserializer<Map>,\n-      InstanceCreator<Map> {\n-\n-    public JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext context) {\n-      JsonObject map = new JsonObject();\n-      Type childGenericType = null;\n-      if (typeOfSrc instanceof ParameterizedType) {\n-        Class<?> rawTypeOfSrc = Types.getRawType(typeOfSrc);\n-        childGenericType = Types.getMapKeyAndValueTypes(typeOfSrc, rawTypeOfSrc)[1];\n-      }\n-\n-      for (Map.Entry entry : (Set<Map.Entry>) src.entrySet()) {\n-        Object value = entry.getValue();\n-\n-        JsonElement valueElement;\n-        if (value == null) {\n-          valueElement = JsonNull.createJsonNull();\n-        } else {\n-          Type childType = (childGenericType == null)\n-              ? value.getClass() : childGenericType;\n-          valueElement = context.serialize(value, childType);\n-        }\n-        map.add(String.valueOf(entry.getKey()), valueElement);\n-      }\n-      return map;\n-    }\n-\n-    public Map deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      // Use ObjectConstructor to create instance instead of hard-coding a specific type.\n-      // This handles cases where users are using their own subclass of Map.\n-      Map<Object, Object> map = constructMapType(typeOfT, context);\n-      Type[] keyAndValueTypes = Types.getMapKeyAndValueTypes(typeOfT, Types.getRawType(typeOfT));\n-      for (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {\n-        Object key = context.deserialize(new JsonPrimitive(entry.getKey()), keyAndValueTypes[0]);\n-        Object value = context.deserialize(entry.getValue(), keyAndValueTypes[1]);\n-        map.put(key, value);\n-      }\n-      return map;\n-    }\n-\n-    private Map constructMapType(Type mapType, JsonDeserializationContext context) {\n-      JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;\n-      ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();\n-      return (Map) objectConstructor.construct(mapType);\n-    }\n-\n-    public Map createInstance(Type type) {\n-      return new LinkedHashMap();\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return MapTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n   private static final class BigDecimalTypeAdapter\n       implements JsonSerializer<BigDecimal>, JsonDeserializer<BigDecimal> {\n     public JsonElement serialize(BigDecimal src, Type typeOfSrc, JsonSerializationContext context) {\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Map;\n import java.util.Set;\n \n import com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;\n  * @author Joel Leitch\n  */\n public final class GsonBuilder {\n+  private static final MapAsArrayTypeAdapter COMPLEX_KEY_MAP_TYPE_ADAPTER =\n+      new MapAsArrayTypeAdapter();\n   private static final InnerClassExclusionStrategy innerClassExclusionStrategy =\n       new InnerClassExclusionStrategy();\n   private static final ExposeAnnotationDeserializationExclusionStrategy\n     this.serializeNulls = true;\n     return this;\n   }\n+  \n+  public GsonBuilder enableComplexMapKeySerialization() {\n+    registerTypeHierarchyAdapter(Map.class, COMPLEX_KEY_MAP_TYPE_ADAPTER);\n+    return this;\n+  }\n \n   /**\n    * Configures Gson to exclude inner classes during serialization.\n     }\n \n     ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers =\n-      DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.copyOf();\n+        DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.copyOf();\n     customSerializers.register(serializers.copyOf());\n     ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers =\n-      DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.copyOf();\n+        DefaultTypeAdapters.DEFAULT_HIERARCHY_DESERIALIZERS.copyOf();\n     customDeserializers.register(deserializers.copyOf());\n     addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, customSerializers,\n         customDeserializers);\n--- a/gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n-import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n \n  * complex. A key is complex if its JSON-serialized form is an array or an\n  * object.\n  */\n-public final class MapAsArrayTypeAdapter\n+final class MapAsArrayTypeAdapter\n     implements JsonSerializer<Map<?, ?>>, JsonDeserializer<Map<?, ?>> {\n \n   public Map<?, ?> deserialize(JsonElement json, Type typeOfT,\n       JsonDeserializationContext context) throws JsonParseException {\n-    Map<Object, Object> result = new LinkedHashMap<Object, Object>();\n+    Map<Object, Object> result = constructMapType(typeOfT, context);\n     Type[] keyAndValueType = typeToTypeArguments(typeOfT);\n     if (json.isJsonArray()) {\n       JsonArray array = json.getAsJsonArray();\n       return result;\n     }\n   }\n+  \n+  @SuppressWarnings(\"unchecked\")\n+  private Map<Object, Object> constructMapType(Type mapType, JsonDeserializationContext context) {\n+    JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;\n+    ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();\n+    return (Map<Object, Object>) objectConstructor.construct(mapType);\n+  }\n \n   private Type[] typeToTypeArguments(Type typeOfT) {\n     if (typeOfT instanceof ParameterizedType) {\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/MapTypeAdapter.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Default serialization and deserialization of a map type. This implementation really only works\n+ * well with simple primitive types as the map key. If the key is not a simple primitive then the\n+ * object is {@code toString}ed and that value is used as its key.\n+ *\n+ * @author Joel Leitch\n+ */\n+@SuppressWarnings(\"unchecked\") \n+final class MapTypeAdapter implements JsonSerializer<Map<?, ?>>,\n+    JsonDeserializer<Map<?, ?>>, InstanceCreator<Map<?, ?>> {\n+\n+  public JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext context) {\n+    JsonObject map = new JsonObject();\n+    Type childGenericType = null;\n+    if (typeOfSrc instanceof ParameterizedType) {\n+      Class<?> rawTypeOfSrc = Types.getRawType(typeOfSrc);\n+      childGenericType = Types.getMapKeyAndValueTypes(typeOfSrc, rawTypeOfSrc)[1];\n+    }\n+\n+    for (Map.Entry entry : (Set<Map.Entry>) src.entrySet()) {\n+      Object value = entry.getValue();\n+\n+      JsonElement valueElement;\n+      if (value == null) {\n+        valueElement = JsonNull.createJsonNull();\n+      } else {\n+        Type childType = (childGenericType == null)\n+            ? value.getClass() : childGenericType;\n+        valueElement = context.serialize(value, childType);\n+      }\n+      map.add(String.valueOf(entry.getKey()), valueElement);\n+    }\n+    return map;\n+  }\n+\n+  public Map deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+      throws JsonParseException {\n+    // Use ObjectConstructor to create instance instead of hard-coding a specific type.\n+    // This handles cases where users are using their own subclass of Map.\n+    Map<Object, Object> map = constructMapType(typeOfT, context);\n+    Type[] keyAndValueTypes = Types.getMapKeyAndValueTypes(typeOfT, Types.getRawType(typeOfT));\n+    for (Map.Entry<String, JsonElement> entry : json.getAsJsonObject().entrySet()) {\n+      Object key = context.deserialize(new JsonPrimitive(entry.getKey()), keyAndValueTypes[0]);\n+      Object value = context.deserialize(entry.getValue(), keyAndValueTypes[1]);\n+      map.put(key, value);\n+    }\n+    return map;\n+  }\n+\n+  private Map constructMapType(Type mapType, JsonDeserializationContext context) {\n+    JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;\n+    ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();\n+    return (Map) objectConstructor.construct(mapType);\n+  }\n+\n+  public Map<Object, Object> createInstance(Type type) {\n+    return new LinkedHashMap();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return MapTypeAdapter.class.getSimpleName();\n+  }\n+}\n--- a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java\n+++ b/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java\n  * @author Joel Leitch\n  */\n public class DefaultMapJsonSerializerTest extends TestCase {\n-\n-  @SuppressWarnings(\"unchecked\")\n-  private JsonSerializer<Map> mapSerializer;\n+  private JsonSerializer<Map<?, ?>> mapSerializer;\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    mapSerializer = new DefaultTypeAdapters.MapTypeAdapter();\n+    mapSerializer = new MapTypeAdapter();\n   }\n \n   public void testEmptyMapNoTypeSerialization() {\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n     } catch (JsonParseException expected) { }\n   }\n \n-  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+  @SuppressWarnings(\"unchecked\")\n   public void testRawCollectionOfBagOfPrimitivesNotAllowed() {\n     try {\n       BagOfPrimitives bag = new BagOfPrimitives(10, 20, false, \"stringValue\");\n--- a/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonSyntaxException;\n-import com.google.gson.MapAsArrayTypeAdapter;\n import com.google.gson.reflect.TypeToken;\n import java.lang.reflect.Type;\n import java.util.LinkedHashMap;\n   public void testSerializeComplexMapWithTypeAdapter() {\n     Type type = new TypeToken<Map<Point, String>>() {}.getType();\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(Map.class, new MapAsArrayTypeAdapter())\n+        .enableComplexMapKeySerialization()\n         .create();\n \n     Map<Point, String> original = new LinkedHashMap<Point, String>();\n \n   public void testTwoTypesCollapseToOneSerialize() {\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(Map.class, new MapAsArrayTypeAdapter())\n+        .enableComplexMapKeySerialization()\n         .create();\n \n     Map<Number, String> original = new LinkedHashMap<Number, String>();\n \n   public void testTwoTypesCollapseToOneDeserialize() {\n     Gson gson = new GsonBuilder()\n-        .registerTypeAdapter(Map.class, new MapAsArrayTypeAdapter())\n+        .enableComplexMapKeySerialization()\n         .create();\n \n     String s = \"[[\\\"1.00\\\",\\\"a\\\"],[\\\"1.0\\\",\\\"b\\\"]]\";\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.InstanceCreator;\n+import com.google.gson.JsonElement;\n+import com.google.gson.common.TestTypes.BagOfPrimitives;\n import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n     assertEquals(2, target.get(\"b\").intValue());\n   }\n \n-  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+  @SuppressWarnings(\"unchecked\")\n   public void testRawMapSerialization() {\n     Map map = new LinkedHashMap();\n     map.put(\"a\", 1);", "timestamp": 1300203461, "metainfo": ""}