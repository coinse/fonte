{"sha": "53f7d26b6d442467d54f0e61fdf030cd395011f7", "log": "removed tests for serialization of BigDecimal NaN, positive and negative infinity since BigDecimal can not be created with these values.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n   }\n   \n   public void testDoubleNaNSerializationNotSupported() {\n-    try {\n-      gson.toJson((double)Double.NaN);\n+    double nan = (double) Double.NaN;\n+    try {\n+      gson.toJson(nan);\n       gson.toJson(Double.NaN);\n       fail(\"Gson should not accept NaN for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   }\n   public void testFloatNaNSerializationNotSupported() {\n-    try {\n-      gson.toJson((float)Float.NaN);\n+    float nan = (float) Float.NaN;\n+    try {\n+      gson.toJson(nan);\n       gson.toJson(Float.NaN);\n       fail(\"Gson should not accept NaN for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   }\n \n-\n-  public void testBigDecimalNaNSerializationNotSupported() {\n-    try {\n-      gson.toJson(new BigDecimal(Double.NaN));\n-      fail(\"Gson should not accept NaN for serialization\");\n-    } catch (IllegalArgumentException expected) {      \n-    }\n-  }\n-  \n   public void testBigDecimalNaNDeserializationNotSupported() {\n     try {\n       gson.fromJson(\"NaN\", BigDecimal.class);\n   }\n \n   public void testDoubleInfinitySerializationNotSupported() {\n-    try {\n-      gson.toJson((double)Double.POSITIVE_INFINITY);\n+    double infinity = (double)Double.POSITIVE_INFINITY;\n+    try {\n+      gson.toJson(infinity);\n       gson.toJson(Double.POSITIVE_INFINITY);\n       fail(\"Gson should not accept positive infinity for serialization\");\n     } catch (IllegalArgumentException expected) {      \n   }\n   \n   public void testFloatInfinitySerializationNotSupported() {\n-    try {\n-      gson.toJson((float)Float.POSITIVE_INFINITY);\n+    float infinity = (float) Float.POSITIVE_INFINITY;\n+    try {\n+      gson.toJson(infinity);\n       gson.toJson(Float.POSITIVE_INFINITY);\n       fail(\"Gson should not accept positive infinity for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   }\n   \n-  public void testBigDecimalInfinitySerializationNotSupported() {\n-    try {\n-      gson.toJson(new BigDecimal(Double.POSITIVE_INFINITY));\n-      fail(\"Gson should not accept positive infinity for serialization\");\n-    } catch (IllegalArgumentException expected) {      \n-    }\n-  }\n-  \n   public void testBigDecimalInfinityDeserializationNotSupported() {\n     try {\n       gson.fromJson(\"Infinity\", BigDecimal.class);\n   }\n   \n   public void testNegativeInfinitySerializationNotSupported() {\n-    try {\n-      gson.toJson((double)Double.NEGATIVE_INFINITY);\n+    double negativeInfinity = (double)Double.NEGATIVE_INFINITY;\n+    try {\n+      gson.toJson(negativeInfinity);\n       gson.toJson(Double.NEGATIVE_INFINITY);\n       fail(\"Gson should not accept positive infinity for serialization\");\n     } catch (IllegalArgumentException expected) {      \n   }\n   \n   public void testNegativeInfinityFloatSerializationNotSupported() {\n-    try {\n-      gson.toJson((float)Float.NEGATIVE_INFINITY);\n+    float negativeInfinity = (float) Float.NEGATIVE_INFINITY;\n+    try {\n+      gson.toJson(negativeInfinity);\n       gson.toJson(Float.NEGATIVE_INFINITY);\n       fail(\"Gson should not accept positive infinity for serialization\");\n     } catch (IllegalArgumentException expected) {      \n     }\n   }\n   \n-  public void testNegativeInfinityBigDecimalSerializationNotSupported() {\n-    try {\n-      gson.toJson(new BigDecimal(Double.NEGATIVE_INFINITY));\n-      fail(\"Gson should not accept positive infinity for serialization\");\n-    } catch (IllegalArgumentException expected) {      \n-    }\n-  }\n-  \n   public void testNegativeInfinityBigDecimalDeserializationNotSupported() {\n     try {\n       gson.fromJson(\"-Infinity\", BigDecimal.class);", "timestamp": 1229708784, "metainfo": ""}