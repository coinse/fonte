{"sha": "d26c8189182fa96691cc8e0d0f312469ee0627bb", "log": "New streaming writer writes to DOMs", "commit": "\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonElementWriter.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.internal.bind;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.stream.JsonWriter;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This writer writes a JsonElement.\n+ */\n+public final class JsonElementWriter extends JsonWriter {\n+  private static final Writer UNWRITABLE_WRITER = new Writer() {\n+    @Override public void write(char[] buffer, int offset, int counter) {\n+      throw new AssertionError();\n+    }\n+    @Override public void flush() throws IOException {\n+      throw new AssertionError();\n+    }\n+    @Override public void close() throws IOException {\n+      throw new AssertionError();\n+    }\n+  };\n+\n+  private final List<JsonElement> stack = new ArrayList<JsonElement>();\n+  private String pendingName;\n+\n+  public JsonElementWriter() {\n+    super(UNWRITABLE_WRITER);\n+  }\n+\n+  public JsonElement get() {\n+    if (stack.size() != 1) {\n+      throw new IllegalStateException();\n+    }\n+    return stack.get(0);\n+  }\n+\n+  private JsonElement peek() {\n+    return stack.get(stack.size() - 1);\n+  }\n+\n+  private void put(JsonElement value) {\n+    if (pendingName != null) {\n+      JsonObject object = (JsonObject) peek();\n+      object.add(pendingName, value);\n+      pendingName = null;\n+    } else if (stack.isEmpty()) {\n+      stack.add(value);\n+    } else {\n+      JsonElement element = peek();\n+      if (element instanceof JsonArray) {\n+        ((JsonArray) element).add(value);\n+      } else {\n+        throw new IllegalStateException();\n+      }\n+    }\n+  }\n+\n+  @Override public JsonWriter beginArray() throws IOException {\n+    JsonArray array = new JsonArray();\n+    put(array);\n+    stack.add(array);\n+    return this;\n+  }\n+\n+  @Override public JsonWriter endArray() throws IOException {\n+    if (stack.isEmpty() || pendingName != null) {\n+      throw new IllegalStateException();\n+    }\n+    JsonElement element = peek();\n+    if (element instanceof JsonArray) {\n+      stack.remove(stack.size() - 1);\n+      return this;\n+    }\n+    throw new IllegalStateException();\n+  }\n+\n+  @Override public JsonWriter beginObject() throws IOException {\n+    JsonObject object = new JsonObject();\n+    put(object);\n+    stack.add(object);\n+    return this;\n+  }\n+\n+  @Override public JsonWriter endObject() throws IOException {\n+    if (stack.isEmpty() || pendingName != null) {\n+      throw new IllegalStateException();\n+    }\n+    JsonElement element = peek();\n+    if (element instanceof JsonObject) {\n+      stack.remove(stack.size() - 1);\n+      return this;\n+    }\n+    throw new IllegalStateException();\n+  }\n+\n+  @Override public JsonWriter name(String name) throws IOException {\n+    if (stack.isEmpty() || pendingName != null) {\n+      throw new IllegalStateException();\n+    }\n+    JsonElement element = peek();\n+    if (element instanceof JsonObject) {\n+      pendingName = name;\n+      return this;\n+    }\n+    throw new IllegalStateException();\n+  }\n+\n+  @Override public JsonWriter value(String value) throws IOException {\n+    put(new JsonPrimitive(value));\n+    return this;\n+  }\n+\n+  @Override public JsonWriter nullValue() throws IOException {\n+    put(JsonNull.INSTANCE);\n+    return this;\n+  }\n+\n+  @Override public JsonWriter value(boolean value) throws IOException {\n+    put(new JsonPrimitive(value));\n+    return this;\n+  }\n+\n+  @Override public JsonWriter value(double value) throws IOException {\n+    put(new JsonPrimitive(value));\n+    return this;\n+  }\n+\n+  @Override public JsonWriter value(long value) throws IOException {\n+    put(new JsonPrimitive(value));\n+    return this;\n+  }\n+\n+  @Override public JsonWriter value(Number value) throws IOException {\n+    put(new JsonPrimitive(value));\n+    return this;\n+  }\n+\n+  @Override public void flush() throws IOException {\n+  }\n+\n+  @Override public void close() throws IOException {\n+  }\n+}\n--- a/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n  * @author Jesse Wilson\n  * @since 1.6\n  */\n-public final class JsonWriter implements Closeable {\n+public class JsonWriter implements Closeable {\n \n   /** The output data, containing at most one top-level array or object. */\n   private final Writer out;\n    *\n    * @param indent a string containing only whitespace.\n    */\n-  public void setIndent(String indent) {\n+  public final void setIndent(String indent) {\n     if (indent.length() == 0) {\n       this.indent = null;\n       this.separator = \":\";\n    *       Double#isInfinite() infinities}.\n    * </ul>\n    */\n-  public void setLenient(boolean lenient) {\n+  public final void setLenient(boolean lenient) {\n     this.lenient = lenient;\n   }\n \n    * setting, your XML/HTML encoder should replace these characters with the\n    * corresponding escape sequences.\n    */\n-  public void setHtmlSafe(boolean htmlSafe) {\n+  public final void setHtmlSafe(boolean htmlSafe) {\n     this.htmlSafe = htmlSafe;\n   }\n \n    * Returns true if this writer writes JSON that's safe for inclusion in HTML\n    * and XML documents.\n    */\n-  public boolean isHtmlSafe() {\n+  public final boolean isHtmlSafe() {\n     return htmlSafe;\n   }\n \n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/internal/bind/JsonElementWriterTest.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.internal.bind;\n+\n+import java.io.IOException;\n+import junit.framework.TestCase;\n+\n+public final class JsonElementWriterTest extends TestCase {\n+\n+  // TODO: more tests\n+  // TODO: close support\n+\n+  public void testArray() throws IOException {\n+    JsonElementWriter writer = new JsonElementWriter();\n+    writer.beginArray();\n+    writer.value(1);\n+    writer.value(2);\n+    writer.value(3);\n+    writer.endArray();\n+    assertEquals(\"[1,2,3]\", writer.get().toString());\n+  }\n+\n+  public void testNestedArray() throws IOException {\n+    JsonElementWriter writer = new JsonElementWriter();\n+    writer.beginArray();\n+    writer.beginArray();\n+    writer.endArray();\n+    writer.beginArray();\n+    writer.beginArray();\n+    writer.endArray();\n+    writer.endArray();\n+    writer.endArray();\n+    assertEquals(\"[[],[[]]]\", writer.get().toString());\n+  }\n+\n+  public void testObject() throws IOException {\n+    JsonElementWriter writer = new JsonElementWriter();\n+    writer.beginObject();\n+    writer.name(\"A\").value(1);\n+    writer.name(\"B\").value(2);\n+    writer.endObject();\n+    assertEquals(\"{\\\"A\\\":1,\\\"B\\\":2}\", writer.get().toString());\n+  }\n+\n+  public void testNestedObject() throws IOException {\n+    JsonElementWriter writer = new JsonElementWriter();\n+    writer.beginObject();\n+    writer.name(\"A\");\n+    writer.beginObject();\n+    writer.name(\"B\");\n+    writer.beginObject();\n+    writer.endObject();\n+    writer.endObject();\n+    writer.name(\"C\");\n+    writer.beginObject();\n+    writer.endObject();\n+    writer.endObject();\n+    assertEquals(\"{\\\"A\\\":{\\\"B\\\":{}},\\\"C\\\":{}}\", writer.get().toString());\n+  }\n+}", "timestamp": 1317364006, "metainfo": ""}