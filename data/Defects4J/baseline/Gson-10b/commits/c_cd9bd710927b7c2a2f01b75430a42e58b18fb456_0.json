{"sha": "cd9bd710927b7c2a2f01b75430a42e58b18fb456", "log": "Allow JS Keywords as field name.  These names are quoted anyways (and are valid according to the JSON spec) so it should not cause any issues.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonFieldNameValidator.java\n+++ b/gson/src/main/java/com/google/gson/JsonFieldNameValidator.java\n \n package com.google.gson;\n \n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n  * @author Joel Leitch\n  */\n class JsonFieldNameValidator {\n-  private static final String[] JS_KEYWORDS = {\n-    \"break\", \"case\", \"catch\", \"class\", \"comment\", \"const\", \"continue\", \"debugger\", \"default\", \"delete\", \"do\",\n-    \"else\", \"enum\", \"export\", \"extends\", \"finally\", \"for\", \"function\", \"if\", \"import\", \"in\", \"label\", \"new\",\n-    \"return\", \"super\", \"switch\", \"this\", \"throw\", \"try\", \"typeof\", \"var\", \"void\", \"while\", \"with\"\n-  };\n-\n   private static final Pattern JSON_FIELD_NAME_PATTERN =\n       Pattern.compile(\"(^[a-zA-Z][a-zA-Z0-9\\\\$_]*$)|(^[\\\\$_][a-zA-Z][a-zA-Z0-9\\\\$_]*$)\");\n \n-  private static final Set<String> KEYWORDS = Collections.unmodifiableSet(\n-      new HashSet<String>(Arrays.asList(JS_KEYWORDS)));\n-\n+  \n   /**\n    * Performs validation on the JSON field name to ensure it is a valid field name.\n    *\n   public String validate(String fieldName) {\n     Preconditions.checkNotNull(fieldName);\n     Preconditions.checkArgument(!\"\".equals(fieldName.trim()));\n-    Preconditions.checkArgument(!KEYWORDS.contains(fieldName));\n \n     Matcher matcher = JSON_FIELD_NAME_PATTERN.matcher(fieldName);\n     if (!matcher.matches()) {\n--- a/gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java\n     } catch (IllegalArgumentException expected) { }\n   }\n \n-  public void testKeywordAsFieldName() throws Exception {\n-    try {\n-      validator.validate(\"break\");\n-      fail(\"Json field name can not be a reserved word\");\n-    } catch (IllegalArgumentException expected) { }\n+  public void testJavaAndJsKeywordAsFieldName() throws Exception {\n+    String fieldName = \"break\";\n+    assertEquals(fieldName, validator.validate(fieldName));\n   }\n \n   public void testInvalidCharacters() throws Exception {", "timestamp": 1242755972, "metainfo": ""}