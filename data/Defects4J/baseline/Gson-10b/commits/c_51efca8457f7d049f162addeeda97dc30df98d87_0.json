{"sha": "51efca8457f7d049f162addeeda97dc30df98d87", "log": "Removed dependence on Guice and Collections from wsclient. Renamed Builder.create() methods to Builder.build()", "commit": "\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/Preconditions.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+final class Preconditions {\n+\n+  public static void checkArgument(boolean condition) {\n+    if (!condition) {\n+      throw new IllegalArgumentException();\n+    }\n+  }\n+\n+  public static void checkNotNull(Object obj) {\n+    if (obj == null) {\n+      throw new IllegalArgumentException();\n+    }\n+  }\n+}\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n import java.net.HttpURLConnection;\n import java.util.Map;\n \n-import com.google.common.base.Preconditions;\n import com.google.gson.Gson;\n import com.google.gson.webservice.definition.HeaderMap;\n import com.google.gson.webservice.definition.HeaderMapSpec;\n         paramsBuilder.put(paramName, value, typeOfT);\n       }\n     }\n-    return paramsBuilder.create();\n+    return paramsBuilder.build();\n   }\n \n   private ResponseBody readResponseBody(HttpURLConnection conn, ResponseBodySpec bodySpec) \n       throws IOException {\n     if (bodySpec.size() == 0) {\n-      return new ResponseBody.Builder(bodySpec).create();\n+      return new ResponseBody.Builder(bodySpec).build();\n     }\n     String connContentType = conn.getContentType();\n     Preconditions.checkArgument(connContentType.contains(bodySpec.getContentType()));\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/CallPathMap.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/CallPathMap.java\n       return this;\n     }\n     \n-    public CallPathMap<T> create() {\n+    public CallPathMap<T> build() {\n       return new CallPathMap<T>(contents, nullValue);\n     }\n   }\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/HeaderMap.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/HeaderMap.java\n       return (Builder) super.put(paramName, content, typeOfContent);\n     }\n     \n-    public HeaderMap create() {\n+    public HeaderMap build() {\n       return new HeaderMap(spec, contents);\n     }\n   }\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/HeaderMapSpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/HeaderMapSpec.java\n       map.put(headerName, headerType);\n     }\n     \n-    public HeaderMapSpec create() {\n+    public HeaderMapSpec build() {\n       return new HeaderMapSpec(map);\n     }\n   }\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/RequestBody.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/RequestBody.java\n       return (Builder) super.put(paramName, content, typeOfContent);\n     }\n     \n-    public RequestBody create() {\n+    public RequestBody build() {\n       return new RequestBody(spec, contents);\n     }    \n   }\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/RequestBodySpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/RequestBodySpec.java\n       return this;\n     }\n     \n-    public RequestBodySpec create() {\n+    public RequestBodySpec build() {\n       RequestBodySpec spec = new RequestBodySpec(paramsSpec);\n       return spec;\n     }    \n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/ResponseBody.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ResponseBody.java\n       return (Builder) super.put(paramName, content, typeOfContent);\n     }\n     \n-    public ResponseBody create() {\n+    public ResponseBody build() {\n       return new ResponseBody(spec, contents);\n     }    \n   }\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/ResponseBodySpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/ResponseBodySpec.java\n       return this;\n     }\n     \n-    public ResponseBodySpec create() {\n+    public ResponseBodySpec build() {\n       ResponseBodySpec spec = new ResponseBodySpec(paramsSpec);\n       return spec;\n     }    \n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceCallSpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceCallSpec.java\n  */\n public final class WebServiceCallSpec {\n   \n-  public static final WebServiceCallSpec NULL_SPEC = new Builder(new CallPath(\"\")).create();\n+  public static final WebServiceCallSpec NULL_SPEC = new Builder(new CallPath(\"\")).build();\n   \n   public static class Builder {\n \tprivate final CallPath callPath;\n       resBodySpecBuilder.add(paramName, type);\n       return this;\n     }\n-    public WebServiceCallSpec create() {      \n+    public WebServiceCallSpec build() {      \n       if (supportedHttpMethods.isEmpty()) {\n         supportedHttpMethods.addAll(Arrays.asList(HttpMethod.values()));\n       }\n       RequestSpec requestSpec = \n-        new RequestSpec(reqParamsSpecBuilder.create(), reqBodySpecBuilder.create());\n+        new RequestSpec(reqParamsSpecBuilder.build(), reqBodySpecBuilder.build());\n       ResponseSpec responseSpec = \n-        new ResponseSpec(resParamsSpecBuilder.create(), resBodySpecBuilder.create());\n+        new ResponseSpec(resParamsSpecBuilder.build(), resBodySpecBuilder.build());\n       WebServiceCallSpec callSpec = new WebServiceCallSpec(supportedHttpMethods, callPath, \n           requestSpec, responseSpec);\n       return callSpec;\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceResponse.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceResponse.java\n       return this;\n     }\n     \n-    public WebServiceResponse create() {\n-      return new WebServiceResponse(spec, headers.create(), body.create());\n+    public WebServiceResponse build() {\n+      return new WebServiceResponse(spec, headers.build(), body.build());\n     }\n   }\n   \n--- a/wsdef/src/main/java/com/google/gson/webservice/typeadapters/RequestBodyGsonConverter.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/typeadapters/RequestBodyGsonConverter.java\n       Object value = context.deserialize(entry.getValue(), entryType);\n       builder.put(key, value);\n     }\n-    return builder.create();\n+    return builder.build();\n   }\n \n   @Override\n   public RequestBody createInstance(Type type) {\n-    return new RequestBody.Builder(spec).create();\n+    return new RequestBody.Builder(spec).build();\n   }\n }\n--- a/wsdef/src/main/java/com/google/gson/webservice/typeadapters/ResponseBodyGsonConverter.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/typeadapters/ResponseBodyGsonConverter.java\n       Object value = context.deserialize(entry.getValue(), entryType);\n       responseBodyBuilder.put(key, value, entryType);\n     }\n-    return responseBodyBuilder.create();\n+    return responseBodyBuilder.build();\n   }\n \n   @Override\n   public ResponseBody createInstance(Type type) {\n-    return new ResponseBody.Builder(spec).create();\n+    return new ResponseBody.Builder(spec).build();\n   }\n }\n--- a/wsf/src/main/java/com/google/gson/wsf/server/RequestReceiver.java\n+++ b/wsf/src/main/java/com/google/gson/wsf/server/RequestReceiver.java\n         paramsBuilder.put(name, value);\n       }\n     }\n-    return paramsBuilder.create();\n+    return paramsBuilder.build();\n   }\n   \n   private RequestBody buildRequestBody(HttpServletRequest request) throws IOException {\n   }\n \n   private RequestBody createEmptyRequestBody(RequestBodySpec bodySpec) {\n-    return new RequestBody.Builder(bodySpec).create();\n+    return new RequestBody.Builder(bodySpec).build();\n   }\n }", "timestamp": 1263905932, "metainfo": ""}