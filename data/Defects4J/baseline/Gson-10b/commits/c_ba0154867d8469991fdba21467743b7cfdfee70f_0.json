{"sha": "ba0154867d8469991fdba21467743b7cfdfee70f", "log": "Add support to allow spaces in the JSON field name.", "commit": "\n--- a/gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/CamelCaseSeparatorNamingPolicy.java\n    *\n    * @param separatorString the string value to place between words\n    * @throws IllegalArgumentException thrown if the {@code separatorString} parameter\n-   *         is null or purely whitespace.\n+   *         is null or empty.\n    */\n   public CamelCaseSeparatorNamingPolicy(String separatorString) {\n     Preconditions.checkNotNull(separatorString);\n-    Preconditions.checkArgument(!\"\".equals(separatorString.trim()));\n+    Preconditions.checkArgument(!\"\".equals(separatorString));\n     this.separatorString = separatorString;\n   }\n \n--- a/gson/src/main/java/com/google/gson/FieldNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/FieldNamingPolicy.java\n   UPPER_CAMEL_CASE(new ModifyFirstLetterNamingPolicy(\n       ModifyFirstLetterNamingPolicy.LetterModifier.UPPER)),\n \n+  /**\n+   * Using this naming policy with Gson will ensure that the first \"letter\" of the Java\n+   * field name is capitalized when serialized to its JSON form and the words will be\n+   * separated by a space.\n+   *\n+   * <p>Here's a few examples of the form \"Java Field Name\" ---> \"JSON Field Name\":</p>\n+   * <ul>\n+   *   <li>someFieldName ---> Some Field Name</li>\n+   *   <li>_someFieldName ---> _Some Field Name</li>\n+   * </ul>\n+   * \n+   * @since 1.4\n+   */\n+  UPPER_CAMEL_CASE_WITH_SPACES(new UpperCamelCaseSeparatorNamingPolicy(\" \")),\n+          \n   /**\n    * Using this naming policy with Gson will modify the Java Field name from its camel cased\n    * form to a lower case field name where each word is separated by an underscore (_).\n--- a/gson/src/main/java/com/google/gson/JsonFieldNameValidator.java\n+++ b/gson/src/main/java/com/google/gson/JsonFieldNameValidator.java\n  * @author Joel Leitch\n  */\n class JsonFieldNameValidator {\n+  private static final String COMMON_PATTERN = \"[a-zA-Z][a-zA-Z0-9\\\\ \\\\$_\\\\-]*$\";\n+  \n   private static final Pattern JSON_FIELD_NAME_PATTERN =\n-      Pattern.compile(\"(^[a-zA-Z][a-zA-Z0-9\\\\$_\\\\-]*$)|(^[\\\\$_][a-zA-Z][a-zA-Z0-9\\\\$_\\\\-]*$)\");\n+      Pattern.compile(\"(^\" + COMMON_PATTERN + \")|(^[\\\\$_]\" + COMMON_PATTERN + \")\");\n \n   \n   /**\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/UpperCamelCaseSeparatorNamingPolicy.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+/**\n+ * A {@link FieldNamingStrategy2} that ensures the JSON field names consist of mixed\n+ * case letters starting with a capital and are separated by a particular\n+ * {@code separatorString}.\n+ *\n+ *<p>The following is an example:</p>\n+ * <pre>\n+ * class StringWrapper {\n+ *   public String AStringField = \"abcd\";\n+ * }\n+ *\n+ * UpperCamelCaseSeparatorNamingPolicy policy = new UpperCamelCaseSeparatorNamingPolicy(\"_\");\n+ * String translatedFieldName =\n+ *     policy.translateName(StringWrapper.class.getField(\"AStringField\"));\n+ *\n+ * assert(\"A_String_Field\".equals(translatedFieldName));\n+ * </pre>\n+ *\n+ * @author Joel Leitch\n+ */\n+class UpperCamelCaseSeparatorNamingPolicy extends CompositionFieldNamingPolicy {\n+\n+  public UpperCamelCaseSeparatorNamingPolicy(String separatorString) {\n+    super(new CamelCaseSeparatorNamingPolicy(separatorString),\n+        new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER));\n+  }\n+}\n--- a/gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/CamelCaseSeparatorNamingPolicyTest.java\n       new CamelCaseSeparatorNamingPolicy(\"\");\n       fail(\"Empty separator string is not supported\");\n     } catch (IllegalArgumentException expected) { }\n-\n-    try {\n-      new CamelCaseSeparatorNamingPolicy(\" \");\n-      fail(\"space separator string is not supported\");\n-    } catch (IllegalArgumentException expected) { }\n-\n-    try {\n-      new CamelCaseSeparatorNamingPolicy(\"\\n\");\n-      fail(\"new-line separator string is not supported\");\n-    } catch (IllegalArgumentException expected) { }\n   }\n \n   public void testUnderscoreSeparator() throws Exception {\n--- a/gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonFieldNameValidatorTest.java\n     String fieldName = \"test-field-name\";\n     assertEquals(fieldName, validator.validate(fieldName));\n   }\n+  \n+  public void testSpacesInFieldName() throws Exception {\n+    String fieldName = \"test field name\";\n+    assertEquals(fieldName, validator.validate(fieldName));\n+  }\n+  \n+  public void testSpacesInBeginningOfName() throws Exception {\n+    try {\n+      validator.validate(\" testFieldName\");\n+      fail(\"Json field name can not contain a period character\");\n+    } catch (IllegalArgumentException expected) { }\n+  }\n }\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/UpperCamelCaseSeparatorNamingPolicyTest.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests for the {@link UpperCamelCaseSeparatorNamingPolicy} class.\n+ *\n+ * @author Joel Leitch\n+ */\n+public class UpperCamelCaseSeparatorNamingPolicyTest extends TestCase {\n+\n+  private UpperCamelCaseSeparatorNamingPolicy namingPolicy;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    namingPolicy = new UpperCamelCaseSeparatorNamingPolicy(\" \");\n+  }\n+\n+  public void testAllLowerCase() throws Exception {\n+    assertEquals(\"Some Field Name\", \n+        namingPolicy.translateName(\"someFieldName\", String.class, null));\n+  }\n+\n+  public void testAllUpperCase() throws Exception {\n+    assertEquals(\"U R L\", \n+        namingPolicy.translateName(\"URL\", String.class, null));\n+  }\n+  \n+  public void testAllUpperCaseExceptFirst() throws Exception {\n+    assertEquals(\"U R L\", \n+        namingPolicy.translateName(\"uRL\", String.class, null));\n+  }\n+  \n+  public void testAllUpperCaseStartingWithUnderscore() throws Exception {\n+    assertEquals(\"_U R L\", \n+        namingPolicy.translateName(\"_uRL\", String.class, null));\n+  }\n+\n+  public void testMixedCase() throws Exception {\n+    assertEquals(\"_Some Field Name\", \n+        namingPolicy.translateName(\"_someFieldName\", String.class, null));\n+  }\n+}\n--- a/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java\n     assertEquals(\"{\\\"a\\\":3.0}\", actual);\n   }\n   \n+  public void testGsonWithUpperCamelCaseSpacesPolicySerialiation() {\n+    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES)\n+        .create();\n+    StringWrapper target = new StringWrapper(\"blah\");\n+    assertEquals(\"{\\\"Some Constant String Instance Field\\\":\\\"\"\n+        + target.someConstantStringInstanceField + \"\\\"}\", gson.toJson(target));\n+  }\n+  \n+  public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() {\n+    Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES)\n+        .create();\n+    String target = \"{\\\"Some Constant String Instance Field\\\":\\\"someValue\\\"}\";\n+    StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class);\n+    assertEquals(\"someValue\", deserializedObject.someConstantStringInstanceField);\n+  }\n+\n   public void testDeprecatedNamingStrategy() throws Exception {\n     Gson gson = builder.setFieldNamingStrategy(new UpperCaseNamingStrategy()).create();\n     ClassWithDuplicateFields target = new ClassWithDuplicateFields(10);", "timestamp": 1274895619, "metainfo": ""}