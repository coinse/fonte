{"sha": "458f2baa2f79bbfe78d3db3dfa1dd7866d7cf7a9", "log": "Added special serialization of \"Long\".  Now the client has the ability to output a long field as a JSON \"String\".  This is useful for JavaScript clients that need to handle long values.  As well, this change does a major clean up of the custom type adapter handling and ParameterizedTypeMap creation.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n final class DefaultTypeAdapters {\n \n   private static final DefaultDateTypeAdapter DATE_TYPE_ADAPTER =\n-    new DefaultDateTypeAdapter(DateFormat.getDateTimeInstance());\n+      new DefaultDateTypeAdapter(DateFormat.getDateTimeInstance());\n+\n   @SuppressWarnings(\"unchecked\")\n   private static final EnumTypeAdapter ENUM_TYPE_ADAPTER = new EnumTypeAdapter();\n   private static final UrlTypeAdapter URL_TYPE_ADAPTER = new UrlTypeAdapter();\n   private static final BooleanTypeAdapter BOOLEAN_TYPE_ADAPTER = new BooleanTypeAdapter();\n   private static final ByteTypeAdapter BYTE_TYPE_ADAPTER = new ByteTypeAdapter();\n   private static final CharacterTypeAdapter CHARACTER_TYPE_ADAPTER = new CharacterTypeAdapter();\n-  private static final DoubleTypeAdapter DOUBLE_TYPE_ADAPTER = new DoubleTypeAdapter();\n+  private static final DoubleDeserializer DOUBLE_TYPE_ADAPTER = new DoubleDeserializer();\n   private static final FloatDeserializer FLOAT_TYPE_ADAPTER = new FloatDeserializer();\n   private static final IntegerTypeAdapter INTEGER_TYPE_ADAPTER = new IntegerTypeAdapter();\n-  private static final LongTypeAdapter LONG_TYPE_ADAPTER = new LongTypeAdapter();\n+  private static final LongDeserializer LONG_DESERIALIZER = new LongDeserializer();\n   private static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\n   private static final ShortTypeAdapter SHORT_TYPE_ADAPTER = new ShortTypeAdapter();\n   private static final StringTypeAdapter STRING_TYPE_ADAPTER = new StringTypeAdapter();\n   // The constants DEFAULT_SERIALIZERS, DEFAULT_DESERIALIZERS, and DEFAULT_INSTANCE_CREATORS\n   // must be defined after the constants for the type adapters. Otherwise, the type adapter\n   // constants will appear as nulls.\n-  static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_SERIALIZERS =\n-    getDefaultSerializers();\n-  static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_DESERIALIZERS =\n-    getDefaultDeserializers();\n-  static final ParameterizedTypeHandlerMap<InstanceCreator<?>> DEFAULT_INSTANCE_CREATORS =\n-    getDefaultInstanceCreators();\n-\n-  private static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers() {\n+  private static final ParameterizedTypeHandlerMap<JsonSerializer<?>> DEFAULT_SERIALIZERS =\n+      createDefaultSerializers();\n+  private static final ParameterizedTypeHandlerMap<JsonDeserializer<?>> DEFAULT_DESERIALIZERS =\n+      createDefaultDeserializers();\n+  private static final ParameterizedTypeHandlerMap<InstanceCreator<?>> DEFAULT_INSTANCE_CREATORS =\n+      createDefaultInstanceCreators();\n+\n+  private static ParameterizedTypeHandlerMap<JsonSerializer<?>> createDefaultSerializers() {\n     ParameterizedTypeHandlerMap<JsonSerializer<?>> map =\n-      new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n+        new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n \n     map.register(Enum.class, ENUM_TYPE_ADAPTER);\n     map.register(URL.class, URL_TYPE_ADAPTER);\n     map.register(char.class, CHARACTER_TYPE_ADAPTER);\n     map.register(Integer.class, INTEGER_TYPE_ADAPTER);\n     map.register(int.class, INTEGER_TYPE_ADAPTER);\n-    map.register(Long.class, LONG_TYPE_ADAPTER);\n-    map.register(long.class, LONG_TYPE_ADAPTER);\n     map.register(Number.class, NUMBER_TYPE_ADAPTER);\n     map.register(Short.class, SHORT_TYPE_ADAPTER);\n     map.register(short.class, SHORT_TYPE_ADAPTER);\n     return map;\n   }\n \n-  private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> getDefaultDeserializers() {\n+  private static ParameterizedTypeHandlerMap<JsonDeserializer<?>> createDefaultDeserializers() {\n     ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\n-      new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n+        new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n     map.register(Enum.class, wrapDeserializer(ENUM_TYPE_ADAPTER));\n     map.register(URL.class, wrapDeserializer(URL_TYPE_ADAPTER));\n     map.register(URI.class, wrapDeserializer(URI_TYPE_ADAPTER));\n     map.register(float.class, wrapDeserializer(FLOAT_TYPE_ADAPTER));\n     map.register(Integer.class, wrapDeserializer(INTEGER_TYPE_ADAPTER));\n     map.register(int.class, wrapDeserializer(INTEGER_TYPE_ADAPTER));\n-    map.register(Long.class, wrapDeserializer(LONG_TYPE_ADAPTER));\n-    map.register(long.class, wrapDeserializer(LONG_TYPE_ADAPTER));\n+    map.register(Long.class, wrapDeserializer(LONG_DESERIALIZER));\n+    map.register(long.class, wrapDeserializer(LONG_DESERIALIZER));\n     map.register(Number.class, wrapDeserializer(NUMBER_TYPE_ADAPTER));\n     map.register(Short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\n     map.register(short.class, wrapDeserializer(SHORT_TYPE_ADAPTER));\n     return map;\n   }\n \n-  private static ParameterizedTypeHandlerMap<InstanceCreator<?>> getDefaultInstanceCreators() {\n+  private static ParameterizedTypeHandlerMap<InstanceCreator<?>> createDefaultInstanceCreators() {\n     ParameterizedTypeHandlerMap<InstanceCreator<?>> map =\n         new ParameterizedTypeHandlerMap<InstanceCreator<?>>();\n     map.register(Enum.class, ENUM_TYPE_ADAPTER);\n     return new JsonDeserializerExceptionWrapper(deserializer);\n   }\n \n-  static void registerSerializersForFloatingPoints(boolean serializeSpecialFloatingPointValues,\n-      ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {\n+  static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers() {\n+    return getDefaultSerializers(false, false);\n+  }\n+      \n+  static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers(\n+      boolean serializeSpecialFloatingPointValues, boolean serializeLongsAsString) {\n+    ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers =\n+        new ParameterizedTypeHandlerMap<JsonSerializer<?>>();\n+    \n+    // Double primitive\n     DefaultTypeAdapters.DoubleSerializer doubleSerializer = \n         new DefaultTypeAdapters.DoubleSerializer(serializeSpecialFloatingPointValues);\n+    serializers.registerIfAbsent(Double.class, doubleSerializer);\n+    serializers.registerIfAbsent(double.class, doubleSerializer);\n+\n+    // Float primitive\n     DefaultTypeAdapters.FloatSerializer floatSerializer = \n         new DefaultTypeAdapters.FloatSerializer(serializeSpecialFloatingPointValues);\n-    serializers.registerIfAbsent(Double.class, doubleSerializer);\n-    serializers.registerIfAbsent(double.class, doubleSerializer);\n     serializers.registerIfAbsent(Float.class, floatSerializer);\n     serializers.registerIfAbsent(float.class, floatSerializer);\n+\n+    // Long primitive\n+    DefaultTypeAdapters.LongSerializer longSerializer = \n+        new DefaultTypeAdapters.LongSerializer(serializeLongsAsString);\n+    serializers.registerIfAbsent(Long.class, longSerializer);\n+    serializers.registerIfAbsent(long.class, longSerializer);\n+\n+    serializers.registerIfAbsent(DEFAULT_SERIALIZERS);\n+    return serializers;\n+  }\n+  \n+  static ParameterizedTypeHandlerMap<JsonDeserializer<?>> getDefaultDeserializers() {\n+    return DEFAULT_DESERIALIZERS;\n+  }\n+  \n+  static ParameterizedTypeHandlerMap<InstanceCreator<?>> getDefaultInstanceCreators() {\n+    return DEFAULT_INSTANCE_CREATORS;\n   }\n \n   static class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n     \n     @Override\n     public String toString() {\n-      return LongTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n-  private static class LongTypeAdapter implements JsonSerializer<Long>, JsonDeserializer<Long> {\n+      return NumberTypeAdapter.class.getSimpleName();\n+    }\n+  }\n+  \n+  private static class LongSerializer implements JsonSerializer<Long> {\n+    private final boolean serializeAsString;\n+    \n+    private LongSerializer(boolean serializeAsString) {\n+      this.serializeAsString = serializeAsString;\n+    }\n+\n     public JsonElement serialize(Long src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src);\n-    }\n-\n+      if (src == null) {\n+        return JsonNull.createJsonNull();\n+      } else if (serializeAsString) {\n+        return new JsonPrimitive(String.valueOf(src));\n+      } else {\n+        return new JsonPrimitive(src);\n+      }\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return LongSerializer.class.getSimpleName();\n+    }\n+  }\n+\n+  private static class LongDeserializer implements JsonDeserializer<Long> {\n     public Long deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       return json.getAsLong();\n \n     @Override\n     public String toString() {\n-      return LongTypeAdapter.class.getSimpleName();\n+      return LongDeserializer.class.getSimpleName();\n     }\n   }\n \n     }\n   }\n \n-  private static class DoubleTypeAdapter implements JsonDeserializer<Double> {\n+  private static class DoubleDeserializer implements JsonDeserializer<Double> {\n     public Double deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n         throws JsonParseException {\n       return json.getAsDouble();\n \n     @Override\n     public String toString() {\n-      return DoubleTypeAdapter.class.getSimpleName();\n+      return DoubleDeserializer.class.getSimpleName();\n     }\n   }\n \n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n    */\n   Gson(ExclusionStrategy strategy, FieldNamingStrategy fieldNamingPolicy) {\n     this(strategy, fieldNamingPolicy, \n-        createObjectConstructor(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS),\n-        DEFAULT_JSON_FORMATTER, false,\n-        getDefaultSerializers(), DefaultTypeAdapters.DEFAULT_DESERIALIZERS);\n+        createObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),\n+        DEFAULT_JSON_FORMATTER, false, DefaultTypeAdapters.getDefaultSerializers(),\n+        DefaultTypeAdapters.getDefaultDeserializers());\n   }\n \n   Gson(ExclusionStrategy strategy, FieldNamingStrategy fieldNamingPolicy, \n     this.serializeNulls = serializeNulls;\n     this.serializers = serializers;\n     this.deserializers = deserializers;\n-  }\n-\n-  private static ParameterizedTypeHandlerMap<JsonSerializer<?>> getDefaultSerializers() {\n-    ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers = \n-      DefaultTypeAdapters.DEFAULT_SERIALIZERS.copyOf();\n-    DefaultTypeAdapters.registerSerializersForFloatingPoints(false, serializers);    \n-    return serializers;\n   }\n   \n   static MappedObjectConstructor createObjectConstructor(\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n public final class GsonBuilder {\n \n   private double ignoreVersionsAfter;\n+  private boolean serializeLongAsString;\n   private ModifierBasedExclusionStrategy modifierBasedExclusionStrategy;\n   private boolean serializeInnerClasses;\n   private final AnonymousAndLocalClassExclusionStrategy anonAndLocalClassExclusionStrategy;\n   public GsonBuilder() {\n     // setup default values\n     ignoreVersionsAfter = VersionConstants.IGNORE_VERSIONS;\n+    serializeLongAsString = false;\n     serializeInnerClasses = true;\n     anonAndLocalClassExclusionStrategy = new AnonymousAndLocalClassExclusionStrategy();\n     innerClassExclusionStrategy = new InnerClassExclusionStrategy();\n   }\n   \n   /**\n-   * Configures Gson to include or exclude inner classes\n+   * Configures Gson to output fields of type {@code long} as {@code String}s instead of a number.\n+   *\n+   * @param value the boolean value on whether or not {@code Gson} should serialize a {@code long}\n+   * field as a {@code String}\n+   * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n+   */\n+  public GsonBuilder serializeLongFieldsAsString(boolean value) {\n+    serializeLongAsString = value;\n+    return this;\n+  }\n+\n+  /**\n+   * Configures Gson to include or exclude inner classes.\n    *\n    * @param value the boolean value on whether or not {@code Gson} should serialize inner classes\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n \n     ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers = serializers.copyOf();\n     ParameterizedTypeHandlerMap<JsonDeserializer<?>> customDeserializers = deserializers.copyOf();\n-\n-    addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, customSerializers, \n+    addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, customSerializers,\n         customDeserializers);\n-    customSerializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_SERIALIZERS);\n-    DefaultTypeAdapters.registerSerializersForFloatingPoints(serializeSpecialFloatingPointValues,\n-       customSerializers);\n-    customDeserializers.registerIfAbsent(DefaultTypeAdapters.DEFAULT_DESERIALIZERS);\n+\n+    customSerializers.registerIfAbsent(DefaultTypeAdapters.getDefaultSerializers(\n+        serializeSpecialFloatingPointValues, serializeLongAsString));\n+    \n+    customDeserializers.registerIfAbsent(DefaultTypeAdapters.getDefaultDeserializers());\n     \n     ParameterizedTypeHandlerMap<InstanceCreator<?>> customInstanceCreators =\n       instanceCreators.copyOf();\n-    customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.DEFAULT_INSTANCE_CREATORS);\n+    customInstanceCreators.registerIfAbsent(DefaultTypeAdapters.getDefaultInstanceCreators());\n     MappedObjectConstructor objConstructor = Gson.createObjectConstructor(customInstanceCreators);\n \n     Gson gson = new Gson(exclusionStrategy, fieldNamingPolicy, objConstructor, \n         formatter, serializeNulls, customSerializers, customDeserializers);\n     return gson;\n   }\n-  \n+\n   private static void addTypeAdaptersForDate(String datePattern, int dateStyle, int timeStyle,\n       ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers) {\n--- a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n \n   public void testTypesWithMultipleParametersSerialization() throws Exception {\n     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> src =\n-      new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,\n-          \"abc\", new BagOfPrimitives());\n+        new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,\n+            \"abc\", new BagOfPrimitives());\n     Type typeOfSrc = new TypeToken<MultiParameters<Integer, Float, Double, String,\n         BagOfPrimitives>>() {}.getType();\n     String json = gson.toJson(src, typeOfSrc);\n     String expected = \"{\\\"a\\\":10,\\\"b\\\":1.0,\\\"c\\\":2.1,\\\"d\\\":\\\"abc\\\",\"\n-      + \"\\\"e\\\":{\\\"longValue\\\":0,\\\"intValue\\\":0,\\\"booleanValue\\\":false,\\\"stringValue\\\":\\\"\\\"}}\";\n+        + \"\\\"e\\\":{\\\"longValue\\\":0,\\\"intValue\\\":0,\\\"booleanValue\\\":false,\\\"stringValue\\\":\\\"\\\"}}\";\n     assertEquals(expected, json);\n   }\n \n     Type typeOfTarget = new TypeToken<MultiParameters<Integer, Float, Double, String,\n         BagOfPrimitives>>() {}.getType();\n     String json = \"{\\\"a\\\":10,\\\"b\\\":1.0,\\\"c\\\":2.1,\\\"d\\\":\\\"abc\\\",\"\n-      + \"\\\"e\\\":{\\\"longValue\\\":0,\\\"intValue\\\":0,\\\"booleanValue\\\":false,\\\"stringValue\\\":\\\"\\\"}}\";\n+        + \"\\\"e\\\":{\\\"longValue\\\":0,\\\"intValue\\\":0,\\\"booleanValue\\\":false,\\\"stringValue\\\":\\\"\\\"}}\";\n     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> target =\n-      gson.fromJson(json, typeOfTarget);\n+        gson.fromJson(json, typeOfTarget);\n     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> expected =\n-      new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,\n-          \"abc\", new BagOfPrimitives());\n+        new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D,\n+            \"abc\", new BagOfPrimitives());\n     assertEquals(expected, target);\n   }\n \n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n     } catch (JsonParseException expected) {      \n     }\n   }  \n+  \n+  public void testLongAsStringSerialization() throws Exception {\n+    gson = new GsonBuilder().serializeLongFieldsAsString(true).create();\n+    String result = gson.toJson(15L);\n+    assertEquals(\"\\\"15\\\"\", result);\n+    \n+    // Test with an integer and ensure its still a number\n+    result = gson.toJson(2);\n+    assertEquals(\"2\", result);\n+  }\n+  \n+  public void testLongAsStringDeserialization() throws Exception {\n+    long value = gson.fromJson(\"\\\"15\\\"\", long.class);\n+    assertEquals(15, value);\n+\n+    gson = new GsonBuilder().serializeLongFieldsAsString(true).create();\n+    value = gson.fromJson(\"\\\"25\\\"\", long.class);\n+    assertEquals(25, value);\n+  }\n }", "timestamp": 1230434616, "metainfo": ""}