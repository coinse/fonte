{"sha": "abe244c099b8c0f0e4c33921a55b27755564713a", "log": "renamed com.google.gson.stream.JsonSyntaxException to MalformedJsonException. Throwing JsonSyntaxException instead of JsonParseException where we can detect a syntax error.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n           return format.parse(json.getAsString());\n         }\n       } catch (ParseException e) {\n-        throw new JsonParseException(e);\n+        throw new JsonSyntaxException(e);\n       }\n     }\n     \n           return new java.sql.Date(date.getTime());\n         }\n       } catch (ParseException e) {\n-        throw new JsonParseException(e);\n+        throw new JsonSyntaxException(e);\n       }\n     }\n   }\n           return new Time(date.getTime());\n         }\n       } catch (ParseException e) {\n-        throw new JsonParseException(e);\n+        throw new JsonSyntaxException(e);\n       }\n     }\n   }\n       try {\n         return new URL(json.getAsString());\n       } catch (MalformedURLException e) {\n-        throw new JsonParseException(e);\n+        throw new JsonSyntaxException(e);\n       }\n     }\n \n       try {\n         return new URI(json.getAsString());\n       } catch (URISyntaxException e) {\n-        throw new JsonParseException(e);\n+        throw new JsonSyntaxException(e);\n       }\n     }\n     @Override\n--- a/gson/src/main/java/com/google/gson/JsonStreamParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonStreamParser.java\n  */\n package com.google.gson;\n \n-import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonToken;\n import java.io.EOFException;\n import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n+\n+import com.google.gson.stream.JsonReader;\n+import com.google.gson.stream.JsonToken;\n+import com.google.gson.stream.MalformedJsonException;\n \n /**\n  * A streaming parser that allows reading of multiple {@link JsonElement}s from the specified reader\n     synchronized (lock) {\n       try {\n         return parser.peek() != JsonToken.END_DOCUMENT;\n+      } catch (MalformedJsonException e) {\n+        throw new JsonSyntaxException(e);\n       } catch (IOException e) {\n-        throw new JsonParseException(e);\n+        throw new JsonIOException(e);\n       }\n     }\n   }\n--- a/gson/src/main/java/com/google/gson/Streams.java\n+++ b/gson/src/main/java/com/google/gson/Streams.java\n package com.google.gson;\n \n import com.google.gson.stream.JsonReader;\n-import com.google.gson.stream.JsonSyntaxException;\n+import com.google.gson.stream.MalformedJsonException;\n import com.google.gson.stream.JsonWriter;\n \n import java.io.EOFException;\n       }\n     } catch (EOFException e) {\n       return JsonNull.createJsonNull();\n-    } catch (JsonSyntaxException e) {\n-      throw new JsonParseException(e);\n+    } catch (MalformedJsonException e) {\n+      throw new JsonSyntaxException(e);\n     } catch (IOException e) {\n       throw new JsonIOException(e);\n     } catch (NumberFormatException e) {\n-      throw new JsonParseException(e);\n+      throw new JsonSyntaxException(e);\n     }\n   }\n \n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n    * with this reader's content.\n    */\n   private IOException syntaxError(String message) throws IOException {\n-    throw new JsonSyntaxException(message + \" near \" + getSnippet());\n+    throw new MalformedJsonException(message + \" near \" + getSnippet());\n   }\n \n   private CharSequence getSnippet() {\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/stream/MalformedJsonException.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.stream;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Thrown when a reader encounters malformed JSON. Some syntax errors can be\n+ * ignored by calling {@link JsonReader#setLenient(boolean)}.\n+ */\n+public final class MalformedJsonException extends IOException {\n+  public MalformedJsonException(String s) {\n+    super(s);\n+  }\n+}", "timestamp": 1288651732, "metainfo": ""}