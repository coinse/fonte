{"sha": "b7cbfc5c347869a271270ab98b8238428813517f", "log": "Fixed Issue 141 by adding new APIs for writing out JSON string representation for JsonElements.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     toJson(src, typeOfSrc, writer);\n     return writer.toString();\n   }\n-  \n+\n   /**\n    * This method serializes the specified object into its equivalent Json representation.\n    * This method should be used when the specified object is not a generic type. This method uses\n    * @since 1.2\n    */\n   public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n+    JsonElement jsonElement = toJsonTree(src, typeOfSrc);\n+    toJson(jsonElement, writer);\n+  }\n+\n+  /**\n+   * Converts a tree of {@link JsonElement}s into its equivalent JSON representation.\n+   * \n+   * @param jsonElement root of the tree of {@link JsonElement}s\n+   * @return JSON String representation of the tree\n+   * @since 1.4\n+   */\n+  public String toJson(JsonElement jsonElement) {\n+    StringWriter writer = new StringWriter();\n+    toJson(jsonElement, writer);\n+    return writer.toString();\n+  }\n+  \n+  /**\n+   * Writes out the equivalent JSON for the tree of {@link JsonElement}s.\n+   * \n+   * @param jsonElement root of the tree of {@link JsonElement}s\n+   * @param writer Writer to which the Json representation needs to be written\n+   * @since 1.4\n+   */\n+  public void toJson(JsonElement jsonElement, Appendable writer) {\n     try {\n       if (generateNonExecutableJson) {\n         writer.append(JSON_NON_EXECUTABLE_PREFIX);\n       }\n-      JsonElement jsonElement = toJsonTree(src, typeOfSrc);\n+      if (jsonElement == null && serializeNulls) {\n+        writeOutNullString(writer);\n+      }\n       formatter.format(jsonElement, writer, serializeNulls);\n-    } catch (IOException ioe) {\n-      throw new RuntimeException(ioe);\n-    }\n+    } catch (IOException e) {\n+      throw new RuntimeException(e);\n+    }    \n   }\n \n   /**\n--- a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n \n /**\n- * Functional tests for {@link Gson#toJsonTree(Object) and \n- * {@link Gson#toJsonTree(Object, java.lang.reflect.Type)\n+ * Functional tests for {@link Gson#toJsonTree(Object)} and \n+ * {@link Gson#toJsonTree(Object, java.lang.reflect.Type)}\n  * \n  * @author Inderjeet Singh\n  * @author Joel Leitch\n     assertContains(obj, new JsonPrimitive(\"foo\"));\n   }\n \n+  public void testJsonTreeToString() {\n+    SubTypeOfBagOfPrimitives bag = new SubTypeOfBagOfPrimitives(10L, 5, false, \"foo\", 1.4F);\n+    String json1 = gson.toJson(bag);\n+    JsonElement jsonElement = gson.toJsonTree(bag, SubTypeOfBagOfPrimitives.class);\n+    String json2 = gson.toJson(jsonElement);\n+    assertEquals(json1, json2);\n+  }\n+\n   private void assertContains(JsonObject json, JsonPrimitive child) {\n     for (Map.Entry<String, JsonElement> entry : json.entrySet()) {\n       JsonElement node = entry.getValue();", "timestamp": 1249678721, "metainfo": ""}