{"sha": "824635158ca6f48f5d8e99cc928990892d5efbbd", "log": "Parsing numbers lazily as a performance enhancement. This avoids needing to parse number if the equivalent object field doesn't exist. It also avoids the performance penalty of trying to parse it eagerly as a big decimal, float etc.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n  * @author Joel Leitch\n  */\n public final class JsonPrimitive extends JsonElement {\n+\n   private static final Class<?>[] PRIMITIVE_TYPES = { int.class, long.class, short.class,\n       float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n       Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class };\n    */\n   @Override\n   public Number getAsNumber() {\n-    return value instanceof String ? stringToNumber((String) value) : (Number) value;\n-  }\n-\n-  static Number stringToNumber(String value) {\n-    try {\n-      long longValue = Long.parseLong(value);\n-      if (longValue >= Integer.MIN_VALUE && longValue <= Integer.MAX_VALUE) {\n-        return (int) longValue;\n-      }\n-      return longValue;\n-    } catch (NumberFormatException ignored) {\n-    }\n-\n-    try {\n-      return new BigDecimal(value);\n-    } catch (NumberFormatException ignored) {\n-      return Double.parseDouble(value); // probably NaN, -Infinity or Infinity\n-    }\n+    return value instanceof String ? new LazilyParsedNumber((String) value) : (Number) value;\n   }\n \n   /**\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/LazilyParsedNumber.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson;\n+\n+/**\n+ * This class holds a number value that is lazily converted to a specific number type\n+ *\n+ * @author Inderjeet Singh\n+ */\n+@SuppressWarnings(\"serial\")\n+final class LazilyParsedNumber extends Number {\n+  private final String value;\n+\n+  LazilyParsedNumber(String value) {\n+    this.value = value;\n+  }\n+\n+  @Override\n+  public int intValue() {\n+    return Integer.parseInt(value);\n+  }\n+\n+  @Override\n+  public long longValue() {\n+    return Long.parseLong(value);\n+  }\n+\n+  @Override\n+  public float floatValue() {\n+    return Float.parseFloat(value);\n+  }\n+\n+  @Override\n+  public double doubleValue() {\n+    return Double.parseDouble(value);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return value;\n+  }\n+}\n--- a/gson/src/main/java/com/google/gson/Streams.java\n+++ b/gson/src/main/java/com/google/gson/Streams.java\n       return new JsonPrimitive(reader.nextString());\n     case NUMBER:\n       String number = reader.nextString();\n-      return new JsonPrimitive(JsonPrimitive.stringToNumber(number));\n+      return new JsonPrimitive(new LazilyParsedNumber(number));\n     case BOOLEAN:\n       return new JsonPrimitive(reader.nextBoolean());\n     case NULL:\n--- a/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n   }\n \n   public void testArrayOfPrimitivesAsObjectsDeserialization() throws Exception {\n-    String json = \"[1,'abc',0.3,5]\";\n+    String json = \"[1,'abc',0.3,1.1,5]\";\n     Object[] objs = gson.fromJson(json, Object[].class);\n-    assertEquals(1, objs[0]);\n+    assertEquals(1, ((Number)objs[0]).intValue());\n     assertEquals(\"abc\", objs[1]);\n-    assertEquals(new BigDecimal(\"0.3\"), objs[2]);\n-    assertEquals(5, objs[3]);\n+    assertEquals(0.3, ((Number)objs[2]).doubleValue());\n+    assertEquals(new BigDecimal(\"1.1\"), new BigDecimal(objs[3].toString()));\n+    assertEquals(5, ((Number)objs[4]).shortValue());\n   }\n \n   public void testArrayOfObjectsWithoutTypeInfoDeserialization() throws Exception {\n--- a/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java\n     MyParameterizedType<Integer> src = new MyParameterizedType<Integer>(10);\n     String json = MyParameterizedTypeAdapter.<Integer>getExpectedJson(src);\n     MyParameterizedType<Integer> intTarget = gson.fromJson(json, ptIntegerType);\n-    assertEquals(10, (int) intTarget.value);\n+    assertEquals(10, ((Number)intTarget.value).intValue());\n \n     MyParameterizedType<String> srcStr = new MyParameterizedType<String>(\"abc\");\n     json = MyParameterizedTypeAdapter.<String>getExpectedJson(srcStr);", "timestamp": 1304027849, "metainfo": ""}