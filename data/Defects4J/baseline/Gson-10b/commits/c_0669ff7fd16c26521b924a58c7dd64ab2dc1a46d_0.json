{"sha": "0669ff7fd16c26521b924a58c7dd64ab2dc1a46d", "log": "allow unquoted long and integer keys", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n     if (p == PEEKED_NUMBER) {\n       peekedString = new String(buffer, pos, peekedNumberLength);\n       pos += peekedNumberLength;\n-    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n-      peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED) {\n+      if (p == PEEKED_UNQUOTED) {\n+        peekedString = nextUnquotedValue();\n+      } else {\n+        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+      }\n       try {\n         long result = Long.parseLong(peekedString);\n         peeked = PEEKED_NONE;\n     if (p == PEEKED_NUMBER) {\n       peekedString = new String(buffer, pos, peekedNumberLength);\n       pos += peekedNumberLength;\n-    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {\n-      peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+    } else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED) {\n+      if (p == PEEKED_UNQUOTED) {\n+        peekedString = nextUnquotedValue();\n+      } else {\n+        peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');\n+      }\n       try {\n         result = Integer.parseInt(peekedString);\n         peeked = PEEKED_NONE;\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n     assertEquals(\"456\", map.get(123));\n   }\n \n+  public void testMapDeserializationWithUnquotedIntegerKeys() {\n+    Type typeOfMap = new TypeToken<Map<Integer, String>>() {}.getType();\n+    Map<Integer, String> map = gson.fromJson(\"{123:\\\"456\\\"}\", typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(123));\n+    assertEquals(\"456\", map.get(123));\n+  }\n+\n+  public void testMapDeserializationWithLongKeys() {\n+    long longValue = 9876543210L;\n+    String json = String.format(\"{\\\"%d\\\":\\\"456\\\"}\", longValue);\n+    Type typeOfMap = new TypeToken<Map<Long, String>>() {}.getType();\n+    Map<Long, String> map = gson.fromJson(json, typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(longValue));\n+    assertEquals(\"456\", map.get(longValue));\n+  }\n+\n+  public void testMapDeserializationWithUnquotedLongKeys() {\n+    long longKey = 9876543210L;\n+    String json = String.format(\"{%d:\\\"456\\\"}\", longKey);\n+    Type typeOfMap = new TypeToken<Map<Long, String>>() {}.getType();\n+    Map<Long, String> map = gson.fromJson(json, typeOfMap);\n+    assertEquals(1, map.size());\n+    assertTrue(map.containsKey(longKey));\n+    assertEquals(\"456\", map.get(longKey));\n+  }\n+\n   public void testHashMapDeserialization() throws Exception {\n     Type typeOfMap = new TypeToken<HashMap<Integer, String>>() {}.getType();\n     HashMap<Integer, String> map = gson.fromJson(\"{\\\"123\\\":\\\"456\\\"}\", typeOfMap);\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n     try {\n       reader.nextInt();\n       fail();\n-    } catch (IllegalStateException expected) {\n+    } catch (NumberFormatException expected) {\n     }\n     assertEquals(\"12.34e5x\", reader.nextString());\n   }", "timestamp": 1457808733, "metainfo": ""}