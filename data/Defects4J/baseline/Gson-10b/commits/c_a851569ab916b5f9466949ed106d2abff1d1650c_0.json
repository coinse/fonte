{"sha": "a851569ab916b5f9466949ed106d2abff1d1650c", "log": "Adds getters for config fields.  This adds simple getters for certain config fields that would be helpful in custom TypeAdapters to deal with situations like this: https://github.com/rharter/auto-value-gson/issues/18", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n   private final List<TypeAdapterFactory> factories;\n   private final ConstructorConstructor constructorConstructor;\n \n+  private final Excluder excluder;\n+  private final FieldNamingStrategy fieldNamingStrategy;\n   private final boolean serializeNulls;\n   private final boolean htmlSafe;\n   private final boolean generateNonExecutableJson;\n         LongSerializationPolicy.DEFAULT, Collections.<TypeAdapterFactory>emptyList());\n   }\n \n-  Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingPolicy,\n+  Gson(final Excluder excluder, final FieldNamingStrategy fieldNamingStrategy,\n       final Map<Type, InstanceCreator<?>> instanceCreators, boolean serializeNulls,\n       boolean complexMapKeySerialization, boolean generateNonExecutableGson, boolean htmlSafe,\n       boolean prettyPrinting, boolean lenient, boolean serializeSpecialFloatingPointValues,\n       LongSerializationPolicy longSerializationPolicy,\n       List<TypeAdapterFactory> typeAdapterFactories) {\n     this.constructorConstructor = new ConstructorConstructor(instanceCreators);\n+    this.excluder = excluder;\n+    this.fieldNamingStrategy = fieldNamingStrategy;\n     this.serializeNulls = serializeNulls;\n     this.generateNonExecutableJson = generateNonExecutableGson;\n     this.htmlSafe = htmlSafe;\n     factories.add(new JsonAdapterAnnotationTypeAdapterFactory(constructorConstructor));\n     factories.add(TypeAdapters.ENUM_FACTORY);\n     factories.add(new ReflectiveTypeAdapterFactory(\n-        constructorConstructor, fieldNamingPolicy, excluder));\n+        constructorConstructor, fieldNamingStrategy, excluder));\n \n     this.factories = Collections.unmodifiableList(factories);\n+  }\n+\n+  public Excluder excluder() {\n+    return excluder;\n+  }\n+\n+  public FieldNamingStrategy fieldNamingStrategy() {\n+    return fieldNamingStrategy;\n+  }\n+\n+  public boolean serializeNulls() {\n+    return serializeNulls;\n+  }\n+\n+  public boolean htmlSafe() {\n+    return htmlSafe;\n   }\n \n   private TypeAdapter<Number> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/GsonTest.java\n+/*\n+ * Copyright (C) 2016 The Gson Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import com.google.gson.internal.Excluder;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link Gson}.\n+ *\n+ * @author Ryan Harter\n+ */\n+public final class GsonTest extends TestCase {\n+\n+  private static final Excluder CUSTOM_EXCLUDER = Excluder.DEFAULT\n+      .excludeFieldsWithoutExposeAnnotation()\n+      .disableInnerClassSerialization();\n+\n+  private static final FieldNamingStrategy CUSTOM_FIELD_NAMING_STRATEGY = new FieldNamingStrategy() {\n+    @Override public String translateName(Field f) {\n+      return \"foo\";\n+    }\n+  };\n+\n+  public void testOverridesDefaultExcluder() {\n+    Gson gson = new Gson(CUSTOM_EXCLUDER, CUSTOM_FIELD_NAMING_STRATEGY,\n+        new HashMap<Type, InstanceCreator<?>>(), true, false, true, false,\n+        true, true, false, LongSerializationPolicy.DEFAULT,\n+        new ArrayList<TypeAdapterFactory>());\n+\n+    assertEquals(CUSTOM_EXCLUDER, gson.excluder());\n+    assertEquals(CUSTOM_FIELD_NAMING_STRATEGY, gson.fieldNamingStrategy());\n+    assertEquals(true, gson.serializeNulls());\n+    assertEquals(false, gson.htmlSafe());\n+  }\n+}", "timestamp": 1461699001, "metainfo": ""}