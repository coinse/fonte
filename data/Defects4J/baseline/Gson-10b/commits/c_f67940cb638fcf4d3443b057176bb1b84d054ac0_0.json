{"sha": "f67940cb638fcf4d3443b057176bb1b84d054ac0", "log": "Retire two old bad features  - overriding primitive type adapters  - auto unwrapping of single element arrays", "commit": "\n--- a/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java\n import com.google.gson.internal.bind.MiniGson;\n import com.google.gson.internal.bind.TypeAdapter;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Map;\n import junit.framework.TestCase;\n \n   private final TypeAdapter<Object> adapter = gson.getAdapter(Object.class);\n \n   public void testDeserialize() throws Exception {\n-    Map<?, ?> map = (Map) adapter.fromJson(\"{a: 5, b: [1, 2, null]}\");\n+    Map<?, ?> map = (Map) adapter.fromJson(\"{a: 5, b: [1, 2, null], c: {x: y}}\");\n     assertEquals(5.0, map.get(\"a\"));\n     assertEquals(Arrays.asList(1.0, 2.0, null), map.get(\"b\"));\n+    assertEquals(Collections.singletonMap(\"x\", \"y\"), map.get(\"c\"));\n+    assertEquals(3, map.size());\n   }\n \n   public void testSerialize() throws Exception {\n--- a/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ArrayTest.java\n     String[] arrayType = gson.fromJson(json, String[].class);\n     assertEquals(1, arrayType.length);\n     assertEquals(\"hello\", arrayType[0]);\n-\n-    String type = gson.fromJson(json, String.class);\n-    assertEquals(\"hello\", type);\n   }\n \n   @SuppressWarnings(\"unchecked\")\n     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0]));\n   }\n \n-  public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception {\n-    CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter();\n-    gson = new GsonBuilder()\n-        .registerTypeAdapter(long.class, typeAdapter)\n-        .registerTypeAdapter(Long.class, typeAdapter)\n-        .create();\n-    long[] value = { 1L };\n-    String serializedValue = gson.toJson(value);\n-    String expected = \"[\" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + \"]\";\n-    assertEquals(expected, serializedValue);\n-\n-    long[] deserializedValue = gson.fromJson(serializedValue, long[].class);\n-    assertEquals(1, deserializedValue.length);\n-    assertEquals(value[0], deserializedValue[0]);\n-  }\n-\n   public void testArrayOfPrimitivesAsObjectsSerialization() throws Exception {\n     Object[] objs = new Object[] {1, \"abc\", 0.3f, 5L};\n     String json = gson.toJson(objs);\n     assertEquals(0.3, ((Number)objs[2]).doubleValue());\n     assertEquals(new BigDecimal(\"1.1\"), new BigDecimal(objs[3].toString()));\n     assertEquals(5, ((Number)objs[4]).shortValue());\n-  }\n-\n-  public void testArrayOfObjectsWithoutTypeInfoDeserialization() throws Exception {\n-    String json = \"[1,'abc',{a:1},5]\";\n-    try {\n-      gson.fromJson(json, Object[].class);\n-      fail(\"This is crazy....how did we deserialize it!!!\");\n-    } catch (JsonParseException expected) {\n-    }\n-  }\n-\n-  public void testArrayWithoutTypeInfoDeserialization() throws Exception {\n-    String json = \"[1,'abc',[1,2],5]\";\n-    try {\n-      gson.fromJson(json, Object[].class);\n-      fail(\"This is crazy....how did we deserialize it!!!\");\n-    } catch (JsonParseException expected) {\n-    }\n   }\n \n   public void testObjectArrayWithNonPrimitivesSerialization() throws Exception {", "timestamp": 1315542025, "metainfo": ""}