{"sha": "ddb0c8c825db2c7194241ba9abb2bfd5fea05838", "log": "Minor formatting fixes.", "commit": "\n--- a/gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java\n+++ b/gson/src/main/java/com/google/gson/ModifyFirstLetterNamingPolicy.java\n   }\n \n   private String modifyString(char firstCharacter, String srcString, int indexOfSubstring) {\n-    return indexOfSubstring < srcString.length() ?\n-        firstCharacter + srcString.substring(indexOfSubstring)\n+    return (indexOfSubstring < srcString.length())\n+        ? firstCharacter + srcString.substring(indexOfSubstring)\n         : String.valueOf(firstCharacter);\n   }\n }\n--- a/gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java\n+++ b/gson/src/test/java/com/google/gson/MappedObjectConstructorTest.java\n \n package com.google.gson;\n \n+import junit.framework.TestCase;\n+\n import java.lang.reflect.Type;\n-\n-import junit.framework.TestCase;\n \n /**\n  * Unit tests for the {@link MappedObjectConstructor} class.\n public class MappedObjectConstructorTest extends TestCase {\n   private ParameterizedTypeHandlerMap<InstanceCreator<?>> creatorMap;\n   private MappedObjectConstructor constructor;\n-  \n+\n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n \n   public void testInstanceCreatorTakesTopPrecedence() throws Exception {\n     creatorMap.register(ObjectWithDefaultConstructor.class, new MyInstanceCreator());\n-    ObjectWithDefaultConstructor obj = \n+    ObjectWithDefaultConstructor obj =\n         constructor.construct(ObjectWithDefaultConstructor.class);\n     assertEquals(\"instanceCreator\", obj.stringValue);\n     assertEquals(10, obj.intValue);\n   }\n-  \n+\n   public void testNoInstanceCreatorInvokesDefaultConstructor() throws Exception {\n     ObjectWithDefaultConstructor expected = new ObjectWithDefaultConstructor();\n-    ObjectWithDefaultConstructor obj = \n+    ObjectWithDefaultConstructor obj =\n         constructor.construct(ObjectWithDefaultConstructor.class);\n     assertEquals(expected.stringValue, obj.stringValue);\n     assertEquals(expected.intValue, obj.intValue);\n   }\n-  \n+\n   public void testNoDefaultConstructor() throws Exception {\n     ObjectNoDefaultConstructor obj = constructor.construct(ObjectNoDefaultConstructor.class);\n     assertNull(obj.stringValue);\n     assertEquals(0, obj.intValue);\n   }\n-  \n+\n   private static class MyInstanceCreator\n       implements InstanceCreator<ObjectWithDefaultConstructor> {\n     public ObjectWithDefaultConstructor createInstance(Type type) {\n       return new ObjectWithDefaultConstructor(\"instanceCreator\", 10);\n     }\n   }\n-  \n+\n   private static class ObjectWithDefaultConstructor {\n     public final String stringValue;\n     public final int intValue;\n-    \n+\n     private ObjectWithDefaultConstructor() {\n       this(\"default\", 5);\n     }\n-    \n+\n     public ObjectWithDefaultConstructor(String stringValue, int intValue) {\n       this.stringValue = stringValue;\n       this.intValue = intValue;\n     }\n   }\n-  \n+\n   private static class ObjectNoDefaultConstructor extends ObjectWithDefaultConstructor {\n     @SuppressWarnings(\"unused\")\n     public ObjectNoDefaultConstructor(String stringValue, int intValue) {", "timestamp": 1302050637, "metainfo": ""}