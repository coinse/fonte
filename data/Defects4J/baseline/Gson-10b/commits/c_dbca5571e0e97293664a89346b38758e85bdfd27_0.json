{"sha": "dbca5571e0e97293664a89346b38758e85bdfd27", "log": "Added Content-Length to each request that goes out. If a web-service request fails, we try to log as much response as possible.", "commit": "\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/Preconditions.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/Preconditions.java\n  */\n package com.google.gson.webservice.client;\n \n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n final class Preconditions {\n \n   public static void checkArgument(boolean condition) {\n     }\n   }\n \n+  public static void checkArgument(boolean condition, HttpURLConnection conn) {\n+    if (!condition) {\n+      StringBuilder sb = new StringBuilder();\n+      try {\n+        sb.append(\"HttpURLConnection Details\\n\");\n+        sb.append(\"ResponseCode:\" + conn.getResponseCode());\n+        sb.append(\", ContentType: \" + conn.getContentType() + \"\\n\");\n+        Map<String, List<String>> headerFields = conn.getHeaderFields();\n+        for (Entry<String, List<String>> header : headerFields.entrySet()) {\n+          sb.append(header.getKey()).append(\":\");\n+          boolean first = true;\n+          for (String value : header.getValue()) {\n+            if (first) {\n+              first = false;\n+            } else {\n+              sb.append(\",\"); \n+            }\n+            sb.append(value);\n+          }\n+          sb.append(\"\\n\");\n+        }\n+        byte[] data = readInByteArray(conn.getInputStream());\n+        sb.append(new String(data));\n+      } catch (IOException e) {\n+        // ignore\n+      }\n+      throw new IllegalArgumentException(sb.toString());\n+    }\n+  }\n+\n   public static void checkNotNull(Object obj) {\n     if (obj == null) {\n       throw new IllegalArgumentException();\n     }\n   }\n+  \n+  private static byte[] readInByteArray(InputStream src) {\n+    ByteArrayOutputStream dst = new ByteArrayOutputStream();\n+    try {\n+      Streams.copy(src, dst);\n+    } catch (IOException e) {\n+      // ignore\n+    }\n+    return dst.toByteArray();\n+  }\n }\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/RequestSender.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/RequestSender.java\n package com.google.gson.webservice.client;\n \n import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.io.Writer;\n import java.lang.reflect.Type;\n import java.net.HttpURLConnection;\n import java.util.Map;\n   public void send(HttpURLConnection conn, WebServiceRequest request) {    \n     try {\n       conn.setRequestMethod(request.getHttpMethod().toString());\n-      conn.setRequestProperty(\"Content-Type\", request.getContentType());\n+      setHeader(conn, \"Content-Type\", request.getContentType(), true);\n       \n       // Assume conservatively that the response will need to be read.\n       // This is done here instead of in the response receiver because this property must be set\n       \n       addRequestParams(conn, request.getHeaders());\n       RequestBody requestBody = request.getBody();\n+      String contentLength = \"0\";\n+      String requestBodyContents = null;\n       if (requestBody.getSpec().size() > 0) {\n         conn.setDoOutput(true);    \n-        addRequestBody(conn, requestBody);\n-      }      \n+        requestBodyContents = gson.toJson(requestBody);\n+        contentLength = String.valueOf(requestBodyContents.length());\n+      }\n+      setHeader(conn, \"Content-Length\", contentLength, true);\n+      if (requestBody.getSpec().size() > 0) {\n+        Streams.copy(requestBodyContents, conn.getOutputStream());\n+      }\n       \n       // Initiate the sending of the request.\n       conn.connect();\n       Type type = spec.getTypeFor(paramName);\n       Object value = entry.getValue();\n       String json = gson.toJson(value, type);\n-      conn.addRequestProperty(paramName, json);\n-      if (logger != null) {\n-        logger.log(logLevel, String.format(\"Request param: %s:%s\", paramName, json));\n-      }\n+      setHeader(conn, paramName, json, false);\n     }\n   }\n-  \n-  private void addRequestBody(HttpURLConnection conn, RequestBody body) throws IOException {\n-    Writer writer = new PrintWriter(conn.getOutputStream());\n-    gson.toJson(body, writer);\n-    writer.close();\n-  }\n+\n+  private void setHeader(HttpURLConnection conn, String name, String value, boolean overwrite) {\n+    if (logger != null) {\n+      logger.log(logLevel, String.format(\"Request param: %s:%s\", name, value));\n+    }\n+    if (overwrite) {\n+      conn.setRequestProperty(name, value);\n+    } else {\n+      conn.addRequestProperty(name, value);\n+    }\n+  }  \n }\n--- a/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/ResponseReceiver.java\n       return new ResponseBody.Builder(bodySpec).build();\n     }\n     String connContentType = conn.getContentType();\n-    Preconditions.checkArgument(connContentType.contains(bodySpec.getContentType()));\n+    Preconditions.checkArgument(connContentType.contains(bodySpec.getContentType()), conn);\n     Reader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n     ResponseBody body = gson.fromJson(reader, ResponseBody.class);\n     return body;\n--- /dev/null\n+++ b/wsclient/src/main/java/com/google/gson/webservice/client/Streams.java\n+/*\n+ * Copyright (C) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.gson.webservice.client;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+final class Streams {\n+\n+  static void copy(String str, OutputStream dst) throws IOException {\n+    byte[] bytes = str.getBytes(\"UTF-8\");\n+    copy(new ByteArrayInputStream(bytes), dst);    \n+  }\n+  /**\n+   * Copy contents of src to dst. Exhausts src completely, and closes both streams.\n+   */\n+  static void copy(InputStream src, OutputStream dst) throws IOException {\n+    try {\n+      final byte[] buf = new byte[2048];\n+      int count;\n+      while ((count = src.read(buf)) != -1) {\n+        dst.write(buf, 0, count);\n+      }\n+    } finally {\n+      src.close();\n+      dst.close();\n+    }\n+  }\n+}\n--- a/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceCallSpec.java\n+++ b/wsdef/src/main/java/com/google/gson/webservice/definition/WebServiceCallSpec.java\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder(\"{path:\");\n-    sb.append(path).append(\",supportedHttpMethods:\");\n+    sb.append(path).append(\",supportedHttpMethods:[\");\n     boolean first = true;\n     for (HttpMethod method : supportedHttpMethods) {\n       if (first) {\n       }\n       sb.append(method);\n     }\n-    sb.append(path).append(\",requestSpec:\");\n-    sb.append(requestSpec).append(\",responseSpec:\");\n-    sb.append(responseSpec).append(\"}\");\n+    sb.append(\"],requestSpec:\").append(requestSpec);\n+    sb.append(\",responseSpec:\").append(responseSpec).append(\"}\");\n     return sb.toString();\n   }\n }", "timestamp": 1264345337, "metainfo": ""}