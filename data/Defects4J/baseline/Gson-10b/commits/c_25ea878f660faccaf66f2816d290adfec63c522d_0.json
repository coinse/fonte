{"sha": "25ea878f660faccaf66f2816d290adfec63c522d", "log": "Add some synchronization to the JsonStreamParser to ensure that the \"next\" method behaves according to the API.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonStreamParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonStreamParser.java\n \n /**\n  * A streaming parser that allows reading of multiple {@link JsonElement}s from the specified reader\n- * asynchronously. This class is not thread-safe.\n+ * asynchronously.\n+ * \n+ * <p>This class is thread-compatible. For some more literature on these definitions, refer to\n+ * Effective Java.\n+ *\n+ * <p>To properly use this class across multiple thread, you will need to add some external\n+ * synchronization to your classes/thread to get this to work properly.  For example:\n+ * \n+ * <pre>\n+ * JsonStreamParser parser = new JsonStreamParser(\"blah blah blah\");\n+ * JsonElement element;\n+ * synchronized (someCommonObject) {\n+ *   if (parser.hasNext()) {\n+ *     element = parser.next();\n+ *   }\n+ * }\n+ * </pre>\n  *\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n public final class JsonStreamParser implements Iterator<JsonElement> {\n \n   private final JsonParserJavacc parser;\n+  private final Object lock;\n   private JsonElement nextElement;\n \n   /**\n    * @since 1.4\n    */\n   public JsonStreamParser(Reader reader) {\n-    parser = new JsonParserJavacc(reader);      \n+    parser = new JsonParserJavacc(reader);\n+    lock = new Object();\n     nextElement = null;\n   }\n   \n    * @since 1.4\n    */\n   public JsonElement next() throws JsonParseException {\n-    if (nextElement != null) {\n-      JsonElement returnValue = nextElement;\n-      nextElement = null;\n-      return returnValue;\n+    synchronized (lock) {\n+      if (nextElement != null) {\n+        JsonElement returnValue = nextElement;\n+        nextElement = null;\n+        return returnValue;\n+      }\n     }\n+\n     try {\n       return parser.parse();\n     } catch (TokenMgrError e) {\n   }\n \n   public boolean hasNext() {\n-    try {\n-      nextElement = next();\n-      return true;\n-    } catch (NoSuchElementException e) {\n-      nextElement = null;\n-      return false;\n+    synchronized (lock) {\n+      try {\n+        nextElement = next();\n+        return true;\n+      } catch (NoSuchElementException e) {\n+        nextElement = null;\n+        return false;\n+      }\n     }\n   }\n ", "timestamp": 1254514879, "metainfo": ""}