{"sha": "e280ffd7e2fe14140c9478a546c6f074cf089a13", "log": "Fixed broken test to ensure that a field JsonAdapter annotation supersedes the class JsonAdapter annotation. Added a map in Gson to keep track of TypeAdapters which are generated by Gson.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n /**\n  * This is the main class for using Gson. Gson is typically used by first constructing a\n \n   @Override\n   public String toString() {\n-  \treturn new StringBuilder(\"{serializeNulls:\")\n-  \t    .append(serializeNulls)\n-  \t    .append(\"factories:\").append(factories)\n+    return new StringBuilder(\"{serializeNulls:\")\n+        .append(serializeNulls)\n+        .append(\"factories:\").append(factories)\n         .append(\",instanceCreators:\").append(constructorConstructor)\n         .append(\"}\")\n         .toString();\n   }\n+\n+  private final Set<TypeAdapter<?>> generatedTypeAdapters = new HashSet<TypeAdapter<?>>();\n+  public static final class $$Internal {\n+    public static void addGeneratedTypeAdapter(Gson gson, TypeAdapter<?> typeAdapter) {\n+      gson.generatedTypeAdapters.add(typeAdapter);\n+    }\n+    public static boolean isGeneratedTypeAdapter(Gson gson, TypeAdapter<?> typeAdapter) {\n+      return gson.generatedTypeAdapters.contains(typeAdapter);\n+    }\n+  }\n }\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java\n     Class<? super T> clazz = targetType.getRawType();\n     JsonAdapter annotation = clazz.getAnnotation(JsonAdapter.class);\n     if (annotation == null) return null;\n-    TypeAdapter adapter = getAnnotationTypeAdapter(constructorConstructor, annotation);\n+    TypeAdapter adapter = getAnnotationTypeAdapter(gson, constructorConstructor, annotation);\n     return adapter;\n   }\n \n-  static TypeAdapter<?> getAnnotationTypeAdapter(\n+  static TypeAdapter<?> getAnnotationTypeAdapter(Gson gson,\n       ConstructorConstructor constructorConstructor, JsonAdapter annotation) {\n     Class<? extends TypeAdapter<?>> adapterClass = annotation.value();\n     ObjectConstructor<? extends TypeAdapter<?>> constructor =\n         constructorConstructor.get(TypeToken.get(adapterClass));\n-    return constructor.construct();\n+    TypeAdapter<?> adapter = constructor.construct();\n+    Gson.$$Internal.addGeneratedTypeAdapter(gson, adapter);\n+    return adapter;\n   }\n }\n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n     }\n \n     ObjectConstructor<T> constructor = constructorConstructor.get(type);\n-    return new Adapter<T>(constructor, getBoundFields(gson, type, raw));\n+    Adapter<T> adapter = new Adapter<T>(constructor, getBoundFields(gson, type, raw));\n+    Gson.$$Internal.addGeneratedTypeAdapter(gson, adapter);\n+    return adapter;\n   }\n \n   private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n     };\n   }\n \n-  private TypeAdapter<?> getFieldAdapter(Gson context, Field field, TypeToken<?> fieldType) {\n-    TypeAdapter<?> adapter = context.getAdapter(fieldType);\n-    // check if the registered adapter is a reflective type adapter. If so, JsonAdapter\n-    // annotation should take precedence. Somewhat hackish, but works.\n-    if (adapter instanceof Adapter && field.isAnnotationPresent(JsonAdapter.class)) {\n+  private TypeAdapter<?> getFieldAdapter(Gson gson, Field field, TypeToken<?> fieldType) {\n+    TypeAdapter<?> adapter = gson.getAdapter(fieldType);\n+    boolean generatedAdapter = Gson.$$Internal.isGeneratedTypeAdapter(gson, adapter);\n+    if (generatedAdapter && field.isAnnotationPresent(JsonAdapter.class)) {\n       JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);\n       return JsonAdapterAnnotationTypeAdapterFactory.getAnnotationTypeAdapter(\n-          constructorConstructor, annotation);\n+          gson, constructorConstructor, annotation);\n     }\n     return adapter;\n   }", "timestamp": 1394354184, "metainfo": ""}