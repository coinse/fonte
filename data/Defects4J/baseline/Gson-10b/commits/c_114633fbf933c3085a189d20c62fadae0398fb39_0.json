{"sha": "114633fbf933c3085a189d20c62fadae0398fb39", "log": "Provide a means to add serialization or deserialization specific exclusion strategies.", "commit": "\n--- a/gson/src/main/java/com/google/gson/AnonymousAndLocalClassExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/AnonymousAndLocalClassExclusionStrategy.java\n  *\n  * @author Joel Leitch\n  */\n-final class AnonymousAndLocalClassExclusionStrategy implements ExclusionStrategy2 {\n+final class AnonymousAndLocalClassExclusionStrategy implements ExclusionStrategy {\n \n-  public boolean shouldSkipField(FieldAttributes f, Mode mode) {\n+  public boolean shouldSkipField(FieldAttributes f) {\n     return isAnonymousOrLocal(f.getDeclaredClass());\n   }\n \n-  public boolean shouldSkipClass(Class<?> clazz, Mode mode) {\n+  public boolean shouldSkipClass(Class<?> clazz) {\n     return isAnonymousOrLocal(clazz);\n   }\n \n--- a/gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/DisjunctionExclusionStrategy.java\n import java.util.Collection;\n \n /**\n- * A wrapper class used to collect numerous {@link ExclusionStrategy2} objects\n+ * A wrapper class used to collect numerous {@link ExclusionStrategy} objects\n  * and perform a short-circuited OR operation.\n  *\n  * @author Joel Leitch\n  */\n-final class DisjunctionExclusionStrategy implements ExclusionStrategy2 {\n-  private final Collection<ExclusionStrategy2> strategies;\n+final class DisjunctionExclusionStrategy implements ExclusionStrategy {\n+  private final Collection<ExclusionStrategy> strategies;\n \n-  public DisjunctionExclusionStrategy(Collection<ExclusionStrategy2> strategies) {\n+  public DisjunctionExclusionStrategy(Collection<ExclusionStrategy> strategies) {\n     Preconditions.checkNotNull(strategies);\n     this.strategies = strategies;\n   }\n \n-  public boolean shouldSkipField(FieldAttributes f, Mode mode) {\n-    for (ExclusionStrategy2 strategy : strategies) {\n-      if (strategy.shouldSkipField(f, mode)) {\n+  public boolean shouldSkipField(FieldAttributes f) {\n+    for (ExclusionStrategy strategy : strategies) {\n+      if (strategy.shouldSkipField(f)) {\n         return true;\n       }\n     }\n     return false;\n   }\n \n-  public boolean shouldSkipClass(Class<?> clazz, Mode mode) {\n-    for (ExclusionStrategy2 strategy : strategies) {\n-      if (strategy.shouldSkipClass(clazz, mode)) {\n+  public boolean shouldSkipClass(Class<?> clazz) {\n+    for (ExclusionStrategy strategy : strategies) {\n+      if (strategy.shouldSkipClass(clazz)) {\n         return true;\n       }\n     }\n--- a/gson/src/main/java/com/google/gson/ExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/ExclusionStrategy.java\n  *     .setExclusionStrategies(excludeStrings)\n  *     .create();\n  * </pre>\n+ * \n+ * <p>For certain model classes, you may only want to serialize a field, but exclude it for\n+ * deserialization. To do that, you can write an {@code ExclusionStrategy} as per normal;\n+ * however, you would register it with the \n  *\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  * @see GsonBuilder#setExclusionStrategies(ExclusionStrategy...)\n  *\n  * @since 1.4\n- * @deprecated use the more powerful {@link ExclusionStrategy2} instead.\n  */\n-@Deprecated\n public interface ExclusionStrategy {\n \n   /**\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/ExposeAnnotationDeserializationExclusionStrategy.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import com.google.gson.annotations.Expose;\n+\n+/**\n+ * Excludes fields that do not have the {@link Expose} annotation\n+ *\n+ * @author Joel Leitch\n+ */\n+public class ExposeAnnotationDeserializationExclusionStrategy implements ExclusionStrategy {\n+  public boolean shouldSkipClass(Class<?> clazz) {\n+    return false;\n+  }\n+\n+  public boolean shouldSkipField(FieldAttributes f) {\n+    Expose annotation = f.getAnnotation(Expose.class);\n+    if (annotation == null) {\n+      return true;\n+    }\n+    return !annotation.deserialize();\n+  }\n+}\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/ExposeAnnotationSerializationExclusionStrategy.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import com.google.gson.annotations.Expose;\n+\n+/**\n+ * Excludes fields that do not have the {@link Expose} annotation\n+ *\n+ * @author Joel Leitch\n+ */\n+public class ExposeAnnotationSerializationExclusionStrategy implements ExclusionStrategy {\n+  public boolean shouldSkipClass(Class<?> clazz) {\n+    return false;\n+  }\n+\n+  public boolean shouldSkipField(FieldAttributes f) {\n+    Expose annotation = f.getAnnotation(Expose.class);\n+    if (annotation == null) {\n+      return true;\n+    }\n+    return !annotation.serialize();\n+  }\n+}\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n   static final FieldNamingStrategy2 DEFAULT_NAMING_POLICY =\n       new SerializedNameAnnotationInterceptingNamingPolicy(new JavaFieldNamingPolicy());\n \n-  private static final ExclusionStrategy2 DEFAULT_EXCLUSION_STRATEGY = createExclusionStrategy();\n+  private static final ExclusionStrategy DEFAULT_EXCLUSION_STRATEGY = createExclusionStrategy();\n \n   private static final String JSON_NON_EXECUTABLE_PREFIX = \")]}'\\n\";\n \n-  private final ExclusionStrategy2 exclusionStrategy;\n+  private final ExclusionStrategy deserializationExclusionStrategy;\n+  private final ExclusionStrategy serializationExclusionStrategy;\n   private final FieldNamingStrategy2 fieldNamingPolicy;\n   private final MappedObjectConstructor objectConstructor;\n \n    * </ul>\n    */\n   public Gson() {\n-    this(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_NAMING_POLICY,\n+    this(DEFAULT_EXCLUSION_STRATEGY, DEFAULT_EXCLUSION_STRATEGY, DEFAULT_NAMING_POLICY,\n     new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),\n     false, DefaultTypeAdapters.getAllDefaultSerializers(),\n     DefaultTypeAdapters.getAllDefaultDeserializers(), DEFAULT_JSON_NON_EXECUTABLE, true, false);\n   }\n \n-  Gson(ExclusionStrategy2 exclusionStrategy, FieldNamingStrategy2 fieldNamingPolicy,\n+  Gson(ExclusionStrategy deserializationExclusionStrategy,\n+      ExclusionStrategy serializationExclusionStrategy, FieldNamingStrategy2 fieldNamingPolicy,\n       MappedObjectConstructor objectConstructor, boolean serializeNulls,\n       ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n       boolean generateNonExecutableGson, boolean htmlSafe, boolean prettyPrinting) {\n-    this.exclusionStrategy = exclusionStrategy;\n+    this.deserializationExclusionStrategy = deserializationExclusionStrategy;\n+    this.serializationExclusionStrategy = serializationExclusionStrategy;\n     this.fieldNamingPolicy = fieldNamingPolicy;\n     this.objectConstructor = objectConstructor;\n     this.serializeNulls = serializeNulls;\n     this.prettyPrinting = prettyPrinting;\n   }\n \n-  private ObjectNavigatorFactory createDefaultObjectNavigatorFactory(ExclusionStrategy2 strategy) {\n+  private ObjectNavigatorFactory createDefaultObjectNavigatorFactory(ExclusionStrategy strategy) {\n     return new ObjectNavigatorFactory(strategy, fieldNamingPolicy);\n   }\n \n-  private static ExclusionStrategy2 createExclusionStrategy() {\n-    List<ExclusionStrategy2> strategies = new LinkedList<ExclusionStrategy2>();\n+  private static ExclusionStrategy createExclusionStrategy() {\n+    List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();\n     strategies.add(DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY);\n     strategies.add(DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY);\n     strategies.add(DEFAULT_MODIFIER_BASED_EXCLUSION_STRATEGY);\n       return JsonNull.createJsonNull();\n     }\n     JsonSerializationContextDefault context = new JsonSerializationContextDefault(\n-        createDefaultObjectNavigatorFactory(exclusionStrategy), serializeNulls, serializers);\n+        createDefaultObjectNavigatorFactory(serializationExclusionStrategy), serializeNulls, serializers);\n     return context.serialize(src, typeOfSrc, true);\n   }\n \n       return null;\n     }\n     JsonDeserializationContext context = new JsonDeserializationContextDefault(\n-        createDefaultObjectNavigatorFactory(exclusionStrategy), deserializers,\n-        objectConstructor);\n+        createDefaultObjectNavigatorFactory(deserializationExclusionStrategy), \n+        deserializers, objectConstructor);\n     T target = (T) context.deserialize(json, typeOfT);\n     return target;\n   }\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n \n import java.lang.reflect.Type;\n import java.text.DateFormat;\n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Set;\n \n import com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;\n \n public final class GsonBuilder {\n   private static final InnerClassExclusionStrategy innerClassExclusionStrategy =\n       new InnerClassExclusionStrategy();\n-  private static final ExposeAnnotationExclusionStrategy exposeAnnotationExclusionStrategy =\n-      new ExposeAnnotationExclusionStrategy();\n-\n-  private final Collection<ExclusionStrategy2> exclusionStrategies =\n-      new HashSet<ExclusionStrategy2>();\n+  private static final ExposeAnnotationDeserializationExclusionStrategy\n+  exposeAnnotationDeserializationExclusionStrategy =\n+      new ExposeAnnotationDeserializationExclusionStrategy();\n+  private static final ExposeAnnotationSerializationExclusionStrategy\n+  exposeAnnotationSerializationExclusionStrategy =\n+      new ExposeAnnotationSerializationExclusionStrategy();\n+\n+  private final Set<ExclusionStrategy> serializeExclusionStrategies =\n+      new HashSet<ExclusionStrategy>();\n+  private final Set<ExclusionStrategy> deserializeExclusionStrategies =\n+      new HashSet<ExclusionStrategy>();\n \n   private double ignoreVersionsAfter;\n   private ModifierBasedExclusionStrategy modifierBasedExclusionStrategy;\n    */\n   public GsonBuilder() {\n     // add default exclusion strategies\n-    exclusionStrategies.add(Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY);\n-    exclusionStrategies.add(Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY);\n+    deserializeExclusionStrategies.add(Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY);\n+    deserializeExclusionStrategies.add(Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY);\n+    serializeExclusionStrategies.add(Gson.DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY);\n+    serializeExclusionStrategies.add(Gson.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY);\n \n     // setup default values\n     ignoreVersionsAfter = VersionConstants.IGNORE_VERSIONS;\n    * @param strategies the set of strategy object to apply during object (de)serialization.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    * @since 1.4\n-   * @deprecated convert your {@code strategies} to {@link ExclusionStrategy2} and use the\n-   *    {@link #setExclusionStrategies(ExclusionStrategy2...) method instead.\n-   */\n-  @Deprecated\n+   */\n   public GsonBuilder setExclusionStrategies(ExclusionStrategy... strategies) {\n-    for (ExclusionStrategy strategy : strategies) {\n-      exclusionStrategies.add(new ExclusionStrategy2Adapter(strategy));\n-    }\n+    List<ExclusionStrategy> strategyList = Arrays.asList(strategies);\n+    serializeExclusionStrategies.addAll(strategyList);\n+    deserializeExclusionStrategies.addAll(strategyList);\n     return this;\n   }\n   \n   /**\n-   * Configures Gson to apply a set of exclusion strategies during both serialization and\n+   * Configures Gson to apply a set of exclusion strategies during either serialization or\n    * deserialization. Each of the {@code strategies} will be applied as a disjunction rule.\n    * This means that if one of the {@code strategies} suggests that a field (or class) should be\n-   * skipped in the current mode then that field (or object) is skipped during the particular Gson\n-   * mode.\n-   *\n-   * @param strategies the set of strategy object to apply during object (de)serialization.\n+   * skipped then that field (or object) is skipped during either serialization or deserialization\n+   * depending on the {@code mode} that is passed into this method.\n+   *\n+   * @param strategies the set of strategy object to apply during the {@code mode}.\n+   * @param the mode of Gson (either serialization or deserialization) as to when the\n+   *   {@code strategies} should be applied.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n    * @since 1.7\n    */\n-  public GsonBuilder setExclusionStrategies(ExclusionStrategy2... strategies) {\n-    for (ExclusionStrategy2 strategy : strategies) {\n-      exclusionStrategies.add(strategy);\n-    }\n+  public GsonBuilder setExclusionStrategies(Mode mode, ExclusionStrategy... strategies) {\n+    Preconditions.checkNotNull(mode);\n+    Set<ExclusionStrategy> strategySet = (mode == Mode.SERIALIZE) \n+        ? serializeExclusionStrategies : deserializeExclusionStrategies;\n+    strategySet.addAll(Arrays.asList(strategies));\n     return this;\n   }\n \n    * @return an instance of Gson configured with the options currently set in this builder\n    */\n   public Gson create() {\n-    List<ExclusionStrategy2> strategies =\n-        new LinkedList<ExclusionStrategy2>(exclusionStrategies);\n-    strategies.add(modifierBasedExclusionStrategy);\n+    List<ExclusionStrategy> deserializationStrategies =\n+        new LinkedList<ExclusionStrategy>(deserializeExclusionStrategies);\n+    List<ExclusionStrategy> serializationStrategies =\n+        new LinkedList<ExclusionStrategy>(serializeExclusionStrategies);\n+    deserializationStrategies.add(modifierBasedExclusionStrategy);\n+    serializationStrategies.add(modifierBasedExclusionStrategy);\n \n     if (!serializeInnerClasses) {\n-      strategies.add(innerClassExclusionStrategy);\n+      deserializationStrategies.add(innerClassExclusionStrategy);\n+      serializationStrategies.add(innerClassExclusionStrategy);\n     }\n     if (ignoreVersionsAfter != VersionConstants.IGNORE_VERSIONS) {\n-      strategies.add(new VersionExclusionStrategy(ignoreVersionsAfter));\n+      VersionExclusionStrategy versionExclusionStrategy = \n+          new VersionExclusionStrategy(ignoreVersionsAfter);\n+      deserializationStrategies.add(versionExclusionStrategy);\n+      serializationStrategies.add(versionExclusionStrategy);\n     }\n     if (excludeFieldsWithoutExposeAnnotation) {\n-      strategies.add(exposeAnnotationExclusionStrategy);\n-    }\n-    ExclusionStrategy2 exclusionStrategy = new DisjunctionExclusionStrategy(strategies);\n+      deserializationStrategies.add(exposeAnnotationDeserializationExclusionStrategy);\n+      serializationStrategies.add(exposeAnnotationSerializationExclusionStrategy);\n+    }\n \n     ParameterizedTypeHandlerMap<JsonSerializer<?>> customSerializers =\n       DefaultTypeAdapters.DEFAULT_HIERARCHY_SERIALIZERS.copyOf();\n \n     MappedObjectConstructor objConstructor = new MappedObjectConstructor(customInstanceCreators);\n \n-    Gson gson = new Gson(exclusionStrategy, fieldNamingPolicy, objConstructor, serializeNulls,\n+    Gson gson = new Gson(new DisjunctionExclusionStrategy(deserializationStrategies),\n+        new DisjunctionExclusionStrategy(serializationStrategies),\n+        fieldNamingPolicy, objConstructor, serializeNulls,\n         customSerializers, customDeserializers, generateNonExecutableJson, escapeHtmlChars,\n         prettyPrinting);\n     return gson;\n--- a/gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/InnerClassExclusionStrategy.java\n  *\n  * @author Joel Leitch\n  */\n-class InnerClassExclusionStrategy implements ExclusionStrategy2 {\n+class InnerClassExclusionStrategy implements ExclusionStrategy {\n \n-  public boolean shouldSkipField(FieldAttributes f, Mode mode) {\n+  public boolean shouldSkipField(FieldAttributes f) {\n     return isInnerClass(f.getDeclaredClass());\n   }\n \n-  public boolean shouldSkipClass(Class<?> clazz, Mode mode) {\n+  public boolean shouldSkipClass(Class<?> clazz) {\n     return isInnerClass(clazz);\n   }\n \n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n     }\n     return target;\n   }\n-  \n-  public Mode getMode() {\n-    return Mode.DESERIALIZE;\n-  }\n \n   protected abstract T constructTarget();\n \n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n \n   public Object getTarget() {\n     return null;\n-  }\n-  \n-  public Mode getMode() {\n-    return Mode.SERIALIZE;\n   }\n \n   public void start(ObjectTypePair node) {\n--- a/gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/ModifierBasedExclusionStrategy.java\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n-final class ModifierBasedExclusionStrategy implements ExclusionStrategy2 {\n+final class ModifierBasedExclusionStrategy implements ExclusionStrategy {\n   private final Collection<Integer> modifiers;\n \n   public ModifierBasedExclusionStrategy(int... modifiers) {\n     }\n   }\n \n-  public boolean shouldSkipField(FieldAttributes f, Mode mode) {\n+  public boolean shouldSkipField(FieldAttributes f) {\n     for (int modifier : modifiers) {\n       if (f.hasModifier(modifier)) {\n         return true;\n     return false;\n   }\n \n-  public boolean shouldSkipClass(Class<?> clazz, Mode mode) {\n+  public boolean shouldSkipClass(Class<?> clazz) {\n     return false;\n   }\n }\n--- a/gson/src/main/java/com/google/gson/NullExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/NullExclusionStrategy.java\n  *\n  * @author Joel Leitch\n  */\n-final class NullExclusionStrategy implements ExclusionStrategy2 {\n+final class NullExclusionStrategy implements ExclusionStrategy {\n \n-  public boolean shouldSkipField(FieldAttributes f, Mode mode) {\n+  public boolean shouldSkipField(FieldAttributes f) {\n     return false;\n   }\n \n-  public boolean shouldSkipClass(Class<?> clazz, Mode mode) {\n+  public boolean shouldSkipClass(Class<?> clazz) {\n     return false;\n   }\n }\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n      * Retrieve the current target\n      */\n     Object getTarget();\n-    \n-    Mode getMode();\n   }\n \n-  private final ExclusionStrategy2 exclusionStrategy;\n+  private final ExclusionStrategy exclusionStrategy;\n   private final ObjectTypePair objTypePair;\n \n   /**\n    *          the concrete strategy object to be used to filter out fields of an\n    *          object.\n    */\n-  ObjectNavigator(ObjectTypePair objTypePair, ExclusionStrategy2 exclusionStrategy) {\n+  ObjectNavigator(ObjectTypePair objTypePair, ExclusionStrategy exclusionStrategy) {\n     Preconditions.checkNotNull(exclusionStrategy);\n \n     this.objTypePair = objTypePair;\n    * does not get visited.\n    */\n   public void accept(Visitor visitor) {\n-    if (exclusionStrategy.shouldSkipClass(Types.getRawType(objTypePair.type), visitor.getMode())) {\n+    if (exclusionStrategy.shouldSkipClass(Types.getRawType(objTypePair.type))) {\n       return;\n     }\n     boolean visitedWithCustomHandler = visitor.visitUsingCustomHandler(objTypePair);\n   }\n \n   private void navigateClassFields(Object obj, Class<?> clazz, Visitor visitor) {\n-    Mode mode = visitor.getMode();\n     Field[] fields = clazz.getDeclaredFields();\n     AccessibleObject.setAccessible(fields, true);\n     for (Field f : fields) {\n       FieldAttributes fieldAttributes = new FieldAttributes(clazz, f);\n-      if (exclusionStrategy.shouldSkipField(fieldAttributes, mode)\n-          || exclusionStrategy.shouldSkipClass(fieldAttributes.getDeclaredClass(), mode)) {\n+      if (exclusionStrategy.shouldSkipField(fieldAttributes)\n+          || exclusionStrategy.shouldSkipClass(fieldAttributes.getDeclaredClass())) {\n         continue; // skip\n       }\n       Type declaredTypeOfField = getTypeInfoForField(f, objTypePair.type);\n--- a/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n  * @author Joel Leitch\n  */\n final class ObjectNavigatorFactory {\n-  private final ExclusionStrategy2 strategy;\n+  private final ExclusionStrategy strategy;\n   private final FieldNamingStrategy2 fieldNamingPolicy;\n \n   /**\n    * @param fieldNamingPolicy the naming policy that should be applied to field\n    *        names\n    */\n-  public ObjectNavigatorFactory(ExclusionStrategy2 strategy, FieldNamingStrategy2 fieldNamingPolicy) {\n+  public ObjectNavigatorFactory(ExclusionStrategy strategy, FieldNamingStrategy2 fieldNamingPolicy) {\n     Preconditions.checkNotNull(fieldNamingPolicy);\n     this.strategy = (strategy == null ? new NullExclusionStrategy() : strategy);\n     this.fieldNamingPolicy = fieldNamingPolicy;\n--- a/gson/src/main/java/com/google/gson/SyntheticFieldExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/SyntheticFieldExclusionStrategy.java\n  *\n  * @since 1.4\n  */\n-class SyntheticFieldExclusionStrategy implements ExclusionStrategy2 {\n+class SyntheticFieldExclusionStrategy implements ExclusionStrategy {\n   private final boolean skipSyntheticFields;\n \n   SyntheticFieldExclusionStrategy(boolean skipSyntheticFields) {\n     this.skipSyntheticFields = skipSyntheticFields;\n   }\n \n-  public boolean shouldSkipClass(Class<?> clazz, Mode mode) {\n+  public boolean shouldSkipClass(Class<?> clazz) {\n     return false;\n   }\n \n-  public boolean shouldSkipField(FieldAttributes f, Mode mode) {\n+  public boolean shouldSkipField(FieldAttributes f) {\n     return skipSyntheticFields && f.isSynthetic();\n   }\n \n--- a/gson/src/main/java/com/google/gson/VersionExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/VersionExclusionStrategy.java\n  *\n  * @author Joel Leitch\n  */\n-final class VersionExclusionStrategy implements ExclusionStrategy2 {\n+final class VersionExclusionStrategy implements ExclusionStrategy {\n   private final double version;\n \n   public VersionExclusionStrategy(double version) {\n     this.version = version;\n   }\n \n-  public boolean shouldSkipField(FieldAttributes f, Mode mode) {\n+  public boolean shouldSkipField(FieldAttributes f) {\n     return !isValidVersion(f.getAnnotation(Since.class), f.getAnnotation(Until.class));\n   }\n \n-  public boolean shouldSkipClass(Class<?> clazz, Mode mode) {\n+  public boolean shouldSkipClass(Class<?> clazz) {\n     return !isValidVersion(clazz.getAnnotation(Since.class), clazz.getAnnotation(Until.class));\n   }\n \n--- a/gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java\n \n package com.google.gson;\n \n+import junit.framework.TestCase;\n+\n import java.util.LinkedList;\n import java.util.List;\n-\n-import junit.framework.TestCase;\n \n /**\n  * Unit tests for the {@link DisjunctionExclusionStrategy} class.\n  */\n public class DisjunctionExclusionStrategyTest extends TestCase {\n \n-  private static final ExclusionStrategy2 FALSE_STRATEGY = \n-      new MockExclusionStrategy2(false, false, null);\n-  private static final ExclusionStrategy2 TRUE_STRATEGY = \n-      new MockExclusionStrategy2(true, true, null);\n+  private static final ExclusionStrategy FALSE_STRATEGY = \n+      new MockExclusionStrategy(false, false);\n+  private static final ExclusionStrategy TRUE_STRATEGY = \n+      new MockExclusionStrategy(true, true);\n   \n   private static final Class<?> CLAZZ = String.class;\n   private static final FieldAttributes FIELD = new FieldAttributes(CLAZZ, CLAZZ.getFields()[0]);\n \n   public void testBadInstantiation() throws Exception {\n     try {\n-      List<ExclusionStrategy2> constructorParam = null;\n+      List<ExclusionStrategy> constructorParam = null;\n       new DisjunctionExclusionStrategy(constructorParam);\n       fail(\"Should throw an exception\");\n     } catch (IllegalArgumentException expected) { }\n   }\n \n   public void testSkipFieldsWithMixedTrueAndFalse() throws Exception {\n-    List<ExclusionStrategy2> strategies = new LinkedList<ExclusionStrategy2>();\n+    List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();\n     strategies.add(FALSE_STRATEGY);\n     strategies.add(TRUE_STRATEGY);\n     DisjunctionExclusionStrategy strategy = new DisjunctionExclusionStrategy(strategies);\n \n-    assertTrue(strategy.shouldSkipClass(CLAZZ, Mode.SERIALIZE));\n-    assertTrue(strategy.shouldSkipField(FIELD, Mode.SERIALIZE));\n+    assertTrue(strategy.shouldSkipClass(CLAZZ));\n+    assertTrue(strategy.shouldSkipField(FIELD));\n   }\n \n   public void testSkipFieldsWithFalseOnly() throws Exception {\n-    List<ExclusionStrategy2> strategies = new LinkedList<ExclusionStrategy2>();\n+    List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();\n     strategies.add(FALSE_STRATEGY);\n     DisjunctionExclusionStrategy strategy =  new DisjunctionExclusionStrategy(strategies);\n \n-    assertFalse(strategy.shouldSkipClass(CLAZZ, Mode.SERIALIZE));\n-    assertFalse(strategy.shouldSkipField(FIELD, Mode.SERIALIZE));\n+    assertFalse(strategy.shouldSkipClass(CLAZZ));\n+    assertFalse(strategy.shouldSkipField(FIELD));\n   }\n }\n--- a/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java\n \n package com.google.gson;\n \n-import java.lang.reflect.Field;\n-\n import com.google.gson.annotations.Expose;\n \n import junit.framework.TestCase;\n \n+import java.lang.reflect.Field;\n+\n /**\n- * Unit tests for the {@link ExposeAnnotationExclusionStrategy} class.\n+ * Unit tests for the {@link ExposeAnnotationSerializationExclusionStrategy} class.\n  *\n  * @author Joel Leitch\n  */\n public class ExposeAnnotationExclusionStrategyTest extends TestCase {\n-  private ExposeAnnotationExclusionStrategy strategy;\n+  private ExposeAnnotationDeserializationExclusionStrategy deserializationStrategy;\n+  private ExposeAnnotationSerializationExclusionStrategy serializationStrategy;\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    strategy = new ExposeAnnotationExclusionStrategy();\n+    deserializationStrategy = new ExposeAnnotationDeserializationExclusionStrategy();\n+    serializationStrategy = new ExposeAnnotationSerializationExclusionStrategy();\n   }\n \n   public void testNeverSkipClasses() throws Exception {\n-    assertFalse(strategy.shouldSkipClass(MockObject.class, Mode.DESERIALIZE));\n-    assertFalse(strategy.shouldSkipClass(MockObject.class, Mode.SERIALIZE));\n+    assertFalse(deserializationStrategy.shouldSkipClass(MockObject.class));\n+    assertFalse(serializationStrategy.shouldSkipClass(MockObject.class));\n   }\n \n   public void testSkipNonAnnotatedFields() throws Exception {\n     FieldAttributes f = createFieldAttributes(\"hiddenField\");\n-    assertTrue(strategy.shouldSkipField(f, Mode.DESERIALIZE));\n-    assertTrue(strategy.shouldSkipField(f, Mode.SERIALIZE));\n+    assertTrue(deserializationStrategy.shouldSkipField(f));\n+    assertTrue(serializationStrategy.shouldSkipField(f));\n   }\n \n   public void testSkipExplicitlySkippedFields() throws Exception {\n     FieldAttributes f = createFieldAttributes(\"explicitlyHiddenField\");\n-    assertTrue(strategy.shouldSkipField(f, Mode.DESERIALIZE));\n-    assertTrue(strategy.shouldSkipField(f, Mode.SERIALIZE));\n+    assertTrue(deserializationStrategy.shouldSkipField(f));\n+    assertTrue(serializationStrategy.shouldSkipField(f));\n   }\n \n   public void testNeverSkipExposedAnnotatedFields() throws Exception {\n     FieldAttributes f = createFieldAttributes(\"exposedField\");\n-    assertFalse(strategy.shouldSkipField(f, Mode.DESERIALIZE));\n-    assertFalse(strategy.shouldSkipField(f, Mode.SERIALIZE));\n+    assertFalse(deserializationStrategy.shouldSkipField(f));\n+    assertFalse(serializationStrategy.shouldSkipField(f));\n   }\n \n   public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception {\n     FieldAttributes f = createFieldAttributes(\"explicitlyExposedField\");\n-    assertFalse(strategy.shouldSkipField(f, Mode.DESERIALIZE));\n-    assertFalse(strategy.shouldSkipField(f, Mode.SERIALIZE));\n+    assertFalse(deserializationStrategy.shouldSkipField(f));\n+    assertFalse(serializationStrategy.shouldSkipField(f));\n   }\n   \n   public void testDifferentSerializeAndDeserializeField() throws Exception {\n     FieldAttributes f = createFieldAttributes(\"explicitlyDifferentModeField\");\n-    assertTrue(strategy.shouldSkipField(f, Mode.DESERIALIZE));\n-    assertFalse(strategy.shouldSkipField(f, Mode.SERIALIZE));\n+    assertTrue(deserializationStrategy.shouldSkipField(f));\n+    assertFalse(serializationStrategy.shouldSkipField(f));\n   }\n   \n   private static FieldAttributes createFieldAttributes(String fieldName) throws Exception {\n--- a/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n+++ b/gson/src/test/java/com/google/gson/FunctionWithInternalDependenciesTest.java\n public class FunctionWithInternalDependenciesTest extends TestCase {\n \n   public void testAnonymousLocalClassesSerialization() throws Exception {\n-    LinkedList<ExclusionStrategy2> strategies = new LinkedList<ExclusionStrategy2>();\n+    LinkedList<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();\n     strategies.add(new SyntheticFieldExclusionStrategy(true));\n     strategies.add(new ModifierBasedExclusionStrategy(Modifier.TRANSIENT, Modifier.STATIC));\n-    ExclusionStrategy2 exclusionStrategy = new DisjunctionExclusionStrategy(strategies);\n-    Gson gson = new Gson(exclusionStrategy, Gson.DEFAULT_NAMING_POLICY,\n+    ExclusionStrategy exclusionStrategy = new DisjunctionExclusionStrategy(strategies);\n+    Gson gson = new Gson(exclusionStrategy, exclusionStrategy, Gson.DEFAULT_NAMING_POLICY,\n         new MappedObjectConstructor(DefaultTypeAdapters.getDefaultInstanceCreators()),\n         false, DefaultTypeAdapters.getDefaultSerializers(),\n         DefaultTypeAdapters.getDefaultDeserializers(), Gson.DEFAULT_JSON_NON_EXECUTABLE, true,\n       // empty anonymous class\n     }));\n   }\n-\n-  // TODO(Joel): Move this to some other functional test once exclusion policies are\n-  // available to the public\n-  public void testUserDefinedExclusionPolicies() throws Exception {\n-    Gson gson = new GsonBuilder()\n-        .setExclusionStrategies(new UserDefinedExclusionStrategy(String.class))\n-        .create();\n-\n-    String json = gson.toJson(new TestTypes.StringWrapper(\"someValue\"));\n-    assertEquals(\"{}\", json);\n-  }\n-\n-  private static class UserDefinedExclusionStrategy implements ExclusionStrategy2 {\n-    private final Class<?> excludedThisClass;\n-\n-    UserDefinedExclusionStrategy(Class<?> excludedThisClass) {\n-      this.excludedThisClass = excludedThisClass;\n-    }\n-\n-    public boolean shouldSkipClass(Class<?> clazz, Mode mode) {\n-      return excludedThisClass.equals(clazz);\n-    }\n-\n-    public boolean shouldSkipField(FieldAttributes f, Mode mode) {\n-      return excludedThisClass.equals(f.getDeclaredClass());\n-    }\n-\n-  }\n }\n--- a/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java\n \n package com.google.gson;\n \n+import junit.framework.TestCase;\n+\n import java.lang.reflect.Field;\n-\n-import junit.framework.TestCase;\n \n /**\n  * Unit test for the {@link InnerClassExclusionStrategy} class.\n \n   public void testExcludeInnerClassObject() throws Exception {\n     Class<?> clazz = innerClass.getClass();\n-    assertTrue(strategy.shouldSkipClass(clazz, Mode.SERIALIZE));\n-    assertTrue(strategy.shouldSkipClass(clazz, Mode.DESERIALIZE));\n+    assertTrue(strategy.shouldSkipClass(clazz));\n   }\n \n   public void testExcludeInnerClassField() throws Exception {\n     Field f = getClass().getField(\"innerClass\");\n-    assertTrue(strategy.shouldSkipField(new FieldAttributes(getClass(), f), Mode.SERIALIZE));\n-    assertTrue(strategy.shouldSkipField(new FieldAttributes(getClass(), f), Mode.DESERIALIZE));\n+    assertTrue(strategy.shouldSkipField(new FieldAttributes(getClass(), f)));\n   }\n \n   public void testIncludeStaticNestedClassObject() throws Exception {\n     Class<?> clazz = staticNestedClass.getClass();\n-    assertFalse(strategy.shouldSkipClass(clazz, Mode.SERIALIZE));\n-    assertFalse(strategy.shouldSkipClass(clazz, Mode.DESERIALIZE));\n+    assertFalse(strategy.shouldSkipClass(clazz));\n   }\n \n   public void testIncludeStaticNestedClassField() throws Exception {\n     Field f = getClass().getField(\"staticNestedClass\");\n-    assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f), Mode.SERIALIZE));\n-    assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f), Mode.DESERIALIZE));\n+    assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f)));\n   }\n \n   class InnerClass {\n--- a/gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java\n   }\n \n   public void testNeverSkipsClass() throws Exception {\n-    assertFalse(strategy.shouldSkipClass(String.class, Mode.SERIALIZE));\n-    assertFalse(strategy.shouldSkipClass(String.class, Mode.DESERIALIZE));\n+    assertFalse(strategy.shouldSkipClass(String.class));\n   }\n \n   public void testNeverSkipsField() throws Exception {\n     assertFalse(strategy.shouldSkipField(\n-        new FieldAttributes(String.class, String.class.getFields()[0]),\n-        Mode.SERIALIZE));\n-    assertFalse(strategy.shouldSkipField(\n-        new FieldAttributes(String.class, String.class.getFields()[0]),\n-        Mode.DESERIALIZE));\n+        new FieldAttributes(String.class, String.class.getFields()[0])));\n   }\n }\n--- a/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java\n     Class<MockObject> clazz = MockObject.class;\n     Field f = clazz.getField(\"someField\");\n     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION);\n-\n-    assertFalse(strategy.shouldSkipClass(clazz, Mode.DESERIALIZE));\n-    assertFalse(strategy.shouldSkipClass(clazz, Mode.SERIALIZE));\n+    assertFalse(strategy.shouldSkipClass(clazz));\n \n     FieldAttributes fieldAttributes = new FieldAttributes(clazz, f);\n-    assertFalse(strategy.shouldSkipField(fieldAttributes, Mode.DESERIALIZE));\n-    assertFalse(strategy.shouldSkipField(fieldAttributes, Mode.SERIALIZE));\n+    assertFalse(strategy.shouldSkipField(fieldAttributes));\n   }\n \n   public void testClassAndFieldAreBehindInVersion() throws Exception {\n     Class<MockObject> clazz = MockObject.class;\n     Field f = clazz.getField(\"someField\");\n     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION + 1);\n-\n-    assertFalse(strategy.shouldSkipClass(clazz, Mode.DESERIALIZE));\n-    assertFalse(strategy.shouldSkipClass(clazz, Mode.SERIALIZE));\n+    assertFalse(strategy.shouldSkipClass(clazz));\n     \n     FieldAttributes fieldAttributes = new FieldAttributes(clazz, f);\n-    assertFalse(strategy.shouldSkipField(fieldAttributes, Mode.DESERIALIZE));\n-    assertFalse(strategy.shouldSkipField(fieldAttributes, Mode.SERIALIZE));\n+    assertFalse(strategy.shouldSkipField(fieldAttributes));\n   }\n \n   public void testClassAndFieldAreAheadInVersion() throws Exception {\n     Class<MockObject> clazz = MockObject.class;\n     Field f = clazz.getField(\"someField\");\n     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION - 1);\n-\n-    assertTrue(strategy.shouldSkipClass(clazz, Mode.DESERIALIZE));\n-    assertTrue(strategy.shouldSkipClass(clazz, Mode.SERIALIZE));\n+    assertTrue(strategy.shouldSkipClass(clazz));\n     \n     FieldAttributes fieldAttributes = new FieldAttributes(clazz, f);\n-    assertTrue(strategy.shouldSkipField(fieldAttributes, Mode.DESERIALIZE));\n-    assertTrue(strategy.shouldSkipField(fieldAttributes, Mode.SERIALIZE));\n+    assertTrue(strategy.shouldSkipField(fieldAttributes));\n   }\n \n   @Since(VERSION)\n--- a/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java\n package com.google.gson.functional;\n \n import com.google.gson.ExclusionStrategy;\n-import com.google.gson.ExclusionStrategy2;\n import com.google.gson.FieldAttributes;\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.JsonObject;\n import com.google.gson.JsonPrimitive;\n-import com.google.gson.MockExclusionStrategy;\n-import com.google.gson.MockExclusionStrategy2;\n import com.google.gson.Mode;\n \n import junit.framework.TestCase;\n  */\n public class ExclusionStrategyFunctionalTest extends TestCase {\n   private SampleObjectForTest src;\n-  private Gson gson;\n \n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    gson = new GsonBuilder()\n-        .setExclusionStrategies(new MyExclusionStrategy(String.class))\n-        .serializeNulls()\n-        .create();\n     src = new SampleObjectForTest();\n   }\n \n   public void testExclusionStrategySerialization() throws Exception {\n-    Gson gson = createGson(new MyExclusionStrategy(String.class));\n+    Gson gson = createGson(new MyExclusionStrategy(String.class), null);\n     String json = gson.toJson(src);\n     assertFalse(json.contains(\"\\\"stringField\\\"\"));\n     assertFalse(json.contains(\"\\\"annotatedField\\\"\"));\n     assertTrue(json.contains(\"\\\"longField\\\"\"));\n   }\n   \n-  public void testExclusionStrategy2Serialization() throws Exception {\n-    Gson gson = createGson(new MockExclusionStrategy2(false, true, Mode.DESERIALIZE));\n-    String json = gson.toJson(src);\n-    assertTrue(json.contains(\"\\\"stringField\\\"\"));\n-    assertTrue(json.contains(\"\\\"annotatedField\\\"\"));\n-    assertTrue(json.contains(\"\\\"longField\\\"\"));\n-    \n-    gson = createGson(new MockExclusionStrategy2(false, true, Mode.SERIALIZE));\n-    json = gson.toJson(src);\n-    assertFalse(json.contains(\"\\\"stringField\\\"\"));\n-    assertFalse(json.contains(\"\\\"annotatedField\\\"\"));\n-    assertFalse(json.contains(\"\\\"longField\\\"\"));\n-  }\n-\n   public void testExclusionStrategyDeserialization() throws Exception {\n+    Gson gson = createGson(new MyExclusionStrategy(String.class), null);\n     JsonObject json = new JsonObject();\n     json.add(\"annotatedField\", new JsonPrimitive(src.annotatedField + 5));\n     json.add(\"stringField\", new JsonPrimitive(src.stringField + \"blah,blah\"));\n     assertEquals(src.annotatedField, target.annotatedField);\n     assertEquals(src.stringField, target.stringField);\n   }\n+  \n+  public void testExclusionStrategyWithMode() throws Exception {\n+    SampleObjectForTest testObj = new SampleObjectForTest(\n+        src.annotatedField + 5, src.stringField + \"blah,blah\",\n+        src.longField + 655L);\n \n-  private static Gson createGson(ExclusionStrategy exclusionStrategy) {\n-    return new GsonBuilder()\n-        .setExclusionStrategies(exclusionStrategy)\n-        .serializeNulls()\n-        .create();\n+    Gson gson = createGson(new MyExclusionStrategy(String.class), Mode.DESERIALIZE);    \n+    JsonObject json = gson.toJsonTree(testObj).getAsJsonObject();\n+    assertEquals(testObj.annotatedField, json.get(\"annotatedField\").getAsInt());\n+    assertEquals(testObj.stringField, json.get(\"stringField\").getAsString());\n+    assertEquals(testObj.longField, json.get(\"longField\").getAsLong());\n+\n+    SampleObjectForTest target = gson.fromJson(json, SampleObjectForTest.class);\n+    assertEquals(testObj.longField, target.longField);\n+\n+    // assert excluded fields are set to the defaults\n+    assertEquals(src.annotatedField, target.annotatedField);\n+    assertEquals(src.stringField, target.stringField);\n   }\n-  \n-  private static Gson createGson(ExclusionStrategy2 exclusionStrategy) {\n-    return new GsonBuilder()\n-        .setExclusionStrategies(exclusionStrategy)\n+\n+  private static Gson createGson(ExclusionStrategy exclusionStrategy, Mode mode) {\n+    GsonBuilder gsonBuilder = new GsonBuilder();\n+    if (mode == null) {\n+      gsonBuilder.setExclusionStrategies(exclusionStrategy);\n+    } else {\n+      gsonBuilder.setExclusionStrategies(mode, exclusionStrategy);\n+    }\n+    return gsonBuilder\n         .serializeNulls()\n         .create();\n   }\n     private final int annotatedField;\n     private final String stringField;\n     private final long longField;\n-    private final Class<?> clazzField;\n \n     public SampleObjectForTest() {\n-      annotatedField = 5;\n-      stringField = \"someDefaultValue\";\n-      longField = 1234;\n-      clazzField = String.class;\n+      this(5, \"someDefaultValue\", 12345L);\n+    }\n+    \n+    public SampleObjectForTest(int annotatedField, String stringField, long longField) {\n+      this.annotatedField = annotatedField;\n+      this.stringField = stringField;\n+      this.longField = longField;\n     }\n   }\n ", "timestamp": 1296788981, "metainfo": ""}