{"sha": "1bb01055f001833017e52d479b608c2a96b665e1", "log": "Tests for JsonElementReader.close", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/JsonElementReader.java\n       throw new AssertionError();\n     }\n   };\n+  private static final Object SENTINEL_CLOSED = new Object();\n \n   private final List<Object> stack = new ArrayList<Object>();\n \n       }\n     } else if (o instanceof JsonNull) {\n       return JsonToken.NULL;\n+    } else if (o == SENTINEL_CLOSED) {\n+      throw new IllegalStateException(\"JsonReader is closed\");\n     } else {\n       throw new AssertionError();\n     }\n   }\n \n   @Override public void close() throws IOException {\n+    stack.clear();\n+    stack.add(SENTINEL_CLOSED);\n   }\n \n   @Override public void skipValue() throws IOException {\n--- a/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java\n public final class JsonElementReaderTest extends TestCase {\n \n   public void testNumbers() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"[1, 2, 3]\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"[1, 2, 3]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginArray();\n     assertEquals(1, reader.nextInt());\n     assertEquals(2L, reader.nextLong());\n   }\n \n   public void testNumbersFromStrings() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"[\\\"1\\\", \\\"2\\\", \\\"3\\\"]\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"[\\\"1\\\", \\\"2\\\", \\\"3\\\"]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginArray();\n     assertEquals(1, reader.nextInt());\n     assertEquals(2L, reader.nextLong());\n   }\n \n   public void testStringsFromNumbers() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"[1]\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"[1]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginArray();\n     assertEquals(\"1\", reader.nextString());\n     reader.endArray();\n   }\n \n   public void testBooleans() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"[true, false]\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"[true, false]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginArray();\n     assertEquals(true, reader.nextBoolean());\n     assertEquals(false, reader.nextBoolean());\n   }\n \n   public void testNulls() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"[null,null]\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"[null,null]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginArray();\n     reader.nextNull();\n     reader.nextNull();\n   }\n \n   public void testStrings() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"[\\\"A\\\",\\\"B\\\"]\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"[\\\"A\\\",\\\"B\\\"]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginArray();\n     assertEquals(\"A\", reader.nextString());\n     assertEquals(\"B\", reader.nextString());\n   }\n \n   public void testArray() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"[1, 2, 3]\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"[1, 2, 3]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     assertEquals(JsonToken.BEGIN_ARRAY, reader.peek());\n     reader.beginArray();\n     assertEquals(JsonToken.NUMBER, reader.peek());\n   }\n \n   public void testObject() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"{\\\"A\\\": 1, \\\"B\\\": 2}\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"{\\\"A\\\": 1, \\\"B\\\": 2}\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     assertEquals(JsonToken.BEGIN_OBJECT, reader.peek());\n     reader.beginObject();\n     assertEquals(JsonToken.NAME, reader.peek());\n   }\n \n   public void testEmptyArray() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"[]\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"[]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginArray();\n     reader.endArray();\n   }\n \n   public void testNestedArrays() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"[[],[[]]]\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"[[],[[]]]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginArray();\n     reader.beginArray();\n     reader.endArray();\n   }\n \n   public void testNestedObjects() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"{\\\"A\\\":{},\\\"B\\\":{\\\"C\\\":{}}}\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"{\\\"A\\\":{},\\\"B\\\":{\\\"C\\\":{}}}\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginObject();\n     assertEquals(\"A\", reader.nextName());\n     reader.beginObject();\n   }\n \n   public void testEmptyObject() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"{}\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"{}\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginObject();\n     reader.endObject();\n   }\n \n   public void testSkipValue() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"[\\\"A\\\",{\\\"B\\\":[[]]},\\\"C\\\",[[]],\\\"D\\\",null]\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"[\\\"A\\\",{\\\"B\\\":[[]]},\\\"C\\\",[[]],\\\"D\\\",null]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginArray();\n     assertEquals(\"A\", reader.nextString());\n     reader.skipValue();\n   }\n \n   public void testWrongType() throws IOException {\n-    JsonElement array = new JsonParser().parse(\"[[],\\\"A\\\"]\");\n-    JsonElementReader reader = new JsonElementReader(array);\n+    JsonElement element = new JsonParser().parse(\"[[],\\\"A\\\"]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n     reader.beginArray();\n     try {\n       reader.nextBoolean();\n     assertEquals(\"A\", reader.nextString());\n     reader.endArray();\n   }\n+\n+  public void testEarlyClose() throws IOException {\n+    JsonElement element = new JsonParser().parse(\"[1, 2, 3]\");\n+    JsonElementReader reader = new JsonElementReader(element);\n+    reader.beginArray();\n+    reader.close();\n+    try {\n+      reader.peek();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+  }\n }", "timestamp": 1317353504, "metainfo": ""}