{"sha": "337d89cf3feec17918ea7739fc00edb52ed5527e", "log": "Removed ObjectNavigatorFactory", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     this.prettyPrinting = prettyPrinting;\n   }\n \n-  private ObjectNavigatorFactory createDefaultObjectNavigatorFactory(ExclusionStrategy strategy) {\n-    return new ObjectNavigatorFactory(strategy, fieldNamingPolicy);\n-  }\n-\n   private static ExclusionStrategy createExclusionStrategy() {\n     List<ExclusionStrategy> strategies = new LinkedList<ExclusionStrategy>();\n     strategies.add(DEFAULT_ANON_LOCAL_CLASS_EXCLUSION_STRATEGY);\n    */\n   public JsonElement toJsonTree(Object src, Type typeOfSrc) {\n     JsonSerializationContextDefault context = new JsonSerializationContextDefault(\n-        createDefaultObjectNavigatorFactory(serializationExclusionStrategy), serializeNulls, serializers);\n+        new ObjectNavigator(serializationExclusionStrategy), fieldNamingPolicy,\n+        serializeNulls, serializers);\n     return context.serialize(src, typeOfSrc);\n   }\n \n       return null;\n     }\n     JsonDeserializationContext context = new JsonDeserializationContextDefault(\n-        createDefaultObjectNavigatorFactory(deserializationExclusionStrategy), \n+        new ObjectNavigator(deserializationExclusionStrategy), fieldNamingPolicy, \n         deserializers, objectConstructor);\n     T target = (T) context.deserialize(json, typeOfT);\n     return target;\n--- a/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n final class JsonArrayDeserializationVisitor<T> extends JsonDeserializationVisitor<T> {\n \n   JsonArrayDeserializationVisitor(JsonArray jsonArray, Type arrayType,\n-      ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,\n+      ObjectNavigator objectNavigator, FieldNamingStrategy2 fieldNamingPolicy,\n+      ObjectConstructor objectConstructor,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n       JsonDeserializationContext context) {\n-    super(jsonArray, arrayType, factory, objectConstructor, deserializers, context);\n+    super(jsonArray, arrayType, objectNavigator, fieldNamingPolicy, objectConstructor, deserializers, context);\n   }\n \n   @Override\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n  */\n final class JsonDeserializationContextDefault implements JsonDeserializationContext {\n \n-  private final ObjectNavigatorFactory navigatorFactory;\n+  private final ObjectNavigator objectNavigator;\n+  private final FieldNamingStrategy2 fieldNamingPolicy;\n   private final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;\n   private final MappedObjectConstructor objectConstructor;\n \n-  JsonDeserializationContextDefault(ObjectNavigatorFactory navigatorFactory,\n+  JsonDeserializationContextDefault(ObjectNavigator objectNavigator,\n+      FieldNamingStrategy2 fieldNamingPolicy,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n       MappedObjectConstructor objectConstructor) {\n-    this.navigatorFactory = navigatorFactory;\n+    this.objectNavigator = objectNavigator;\n+    this.fieldNamingPolicy = fieldNamingPolicy;\n     this.deserializers = deserializers;\n     this.objectConstructor = objectConstructor;\n   }\n   private <T> T fromJsonArray(Type arrayType, JsonArray jsonArray,\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonArrayDeserializationVisitor<T> visitor = new JsonArrayDeserializationVisitor<T>(\n-        jsonArray, arrayType, navigatorFactory, objectConstructor, deserializers, context);\n-    ObjectNavigator on = navigatorFactory.create();\n-    on.accept(new ObjectTypePair(null, arrayType, true), visitor);\n+        jsonArray, arrayType, objectNavigator, fieldNamingPolicy,\n+        objectConstructor, deserializers, context);\n+    objectNavigator.accept(new ObjectTypePair(null, arrayType, true), visitor);\n     return visitor.getTarget();\n   }\n \n   private <T> T fromJsonObject(Type typeOfT, JsonObject jsonObject,\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n-        jsonObject, typeOfT, navigatorFactory, objectConstructor, deserializers, context);\n-    ObjectNavigator on = navigatorFactory.create();\n-    on.accept(new ObjectTypePair(null, typeOfT, true), visitor);\n+        jsonObject, typeOfT, objectNavigator, fieldNamingPolicy,\n+        objectConstructor, deserializers, context);\n+    objectNavigator.accept(new ObjectTypePair(null, typeOfT, true), visitor);\n     return visitor.getTarget();\n   }\n \n   private <T> T fromJsonPrimitive(Type typeOfT, JsonPrimitive json,\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n-        json, typeOfT, navigatorFactory, objectConstructor, deserializers, context);\n-    ObjectNavigator on = navigatorFactory.create();\n-    on.accept(new ObjectTypePair(json.getAsObject(), typeOfT, true), visitor);\n+        json, typeOfT, objectNavigator, fieldNamingPolicy, objectConstructor, deserializers, context);\n+    objectNavigator.accept(new ObjectTypePair(json.getAsObject(), typeOfT, true), visitor);\n     Object target = visitor.getTarget();\n     return (T) target;\n   }\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n  */\n abstract class JsonDeserializationVisitor<T> implements ObjectNavigator.Visitor {\n \n-  protected final ObjectNavigatorFactory factory;\n+  protected final ObjectNavigator objectNavigator;\n+  protected final FieldNamingStrategy2 fieldNamingPolicy;\n   protected final ObjectConstructor objectConstructor;\n   protected final ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers;\n   protected T target;\n   protected boolean constructed;\n \n   public JsonDeserializationVisitor(JsonElement json, Type targetType,\n-      ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,\n+      ObjectNavigator objectNavigator, FieldNamingStrategy2 fieldNamingPolicy,\n+      ObjectConstructor objectConstructor,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n       JsonDeserializationContext context) {\n     this.targetType = targetType;\n-    this.factory = factory;\n+    this.objectNavigator = objectNavigator;\n+    this.fieldNamingPolicy = fieldNamingPolicy;\n     this.objectConstructor = objectConstructor;\n     this.deserializers = deserializers;\n     this.json = Preconditions.checkNotNull(json);\n   final Object visitChildAsObject(Type childType, JsonElement jsonChild) {\n     JsonDeserializationVisitor<?> childVisitor =\n         new JsonObjectDeserializationVisitor<Object>(jsonChild, childType,\n-            factory, objectConstructor, deserializers, context);\n+            objectNavigator, fieldNamingPolicy, objectConstructor, deserializers, context);\n     return visitChild(childType, childVisitor);\n   }\n \n   final Object visitChildAsArray(Type childType, JsonArray jsonChild) {\n     JsonDeserializationVisitor<?> childVisitor =\n         new JsonArrayDeserializationVisitor<Object>(jsonChild.getAsJsonArray(), childType,\n-            factory, objectConstructor, deserializers, context);\n+            objectNavigator, fieldNamingPolicy, objectConstructor, deserializers, context);\n     return visitChild(childType, childVisitor);\n   }\n \n   private Object visitChild(Type type, JsonDeserializationVisitor<?> childVisitor) {\n-    ObjectNavigator on = factory.create();\n-    on.accept(new ObjectTypePair(null, type, false), childVisitor);\n+    objectNavigator.accept(new ObjectTypePair(null, type, false), childVisitor);\n     // the underlying object may have changed during the construction phase\n     // This happens primarily because of custom deserializers\n     return childVisitor.getTarget();\n--- a/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n final class JsonObjectDeserializationVisitor<T> extends JsonDeserializationVisitor<T> {\n \n   JsonObjectDeserializationVisitor(JsonElement json, Type type,\n-      ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,\n+      ObjectNavigator objectNavigator, FieldNamingStrategy2 fieldNamingPolicy,\n+      ObjectConstructor objectConstructor,\n       ParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n       JsonDeserializationContext context) {\n-    super(json, type, factory, objectConstructor, deserializers, context);\n+    super(json, type, objectNavigator, fieldNamingPolicy, objectConstructor, deserializers, context);\n   }\n \n   @Override\n   }\n \n   private String getFieldName(FieldAttributes f) {\n-    FieldNamingStrategy2 namingPolicy = factory.getFieldNamingPolicy();\n-    return namingPolicy.translateName(f);\n+    return fieldNamingPolicy.translateName(f);\n   }\n \n   public boolean visitFieldUsingCustomHandler(FieldAttributes f, Type declaredTypeOfField, Object parent) {\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n  */\n final class JsonSerializationContextDefault implements JsonSerializationContext {\n \n-  private final ObjectNavigatorFactory factory;\n+  private final ObjectNavigator objectNavigator;\n+  private final FieldNamingStrategy2 fieldNamingPolicy;\n   private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;\n   private final boolean serializeNulls;\n   private final MemoryRefStack ancestors;\n \n-  JsonSerializationContextDefault(ObjectNavigatorFactory factory, boolean serializeNulls,\n+  JsonSerializationContextDefault(ObjectNavigator objectNavigator,\n+      FieldNamingStrategy2 fieldNamingPolicy, boolean serializeNulls,\n       ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {\n-    this.factory = factory;\n+    this.objectNavigator = objectNavigator;\n+    this.fieldNamingPolicy = fieldNamingPolicy;\n     this.serializeNulls = serializeNulls;\n     this.serializers = serializers;\n     this.ancestors = new MemoryRefStack();\n   }\n \n   JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {\n-    ObjectNavigator on = factory.create();\n-    JsonSerializationVisitor visitor =\n-        new JsonSerializationVisitor(factory, serializeNulls, serializers, this, ancestors);\n-    on.accept(new ObjectTypePair(src, typeOfSrc, preserveType), visitor);\n+    JsonSerializationVisitor visitor = new JsonSerializationVisitor(\n+        objectNavigator, fieldNamingPolicy, serializeNulls, serializers, this, ancestors);\n+    objectNavigator.accept(new ObjectTypePair(src, typeOfSrc, preserveType), visitor);\n     return visitor.getJsonElement();\n   }\n }\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n  */\n final class JsonSerializationVisitor implements ObjectNavigator.Visitor {\n \n-  private final ObjectNavigatorFactory factory;\n+  private final ObjectNavigator objectNavigator;\n+  private final FieldNamingStrategy2 fieldNamingPolicy;\n   private final ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers;\n   private final boolean serializeNulls;\n   private final JsonSerializationContext context;\n   private final MemoryRefStack ancestors;\n   private JsonElement root;\n \n-  JsonSerializationVisitor(ObjectNavigatorFactory factory, boolean serializeNulls,\n-      ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers, JsonSerializationContext context,\n-      MemoryRefStack ancestors) {\n-    this.factory = factory;\n+  JsonSerializationVisitor(ObjectNavigator objectNavigator, FieldNamingStrategy2 fieldNamingPolicy,\n+      boolean serializeNulls, ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers,\n+      JsonSerializationContext context, MemoryRefStack ancestors) {\n+    this.objectNavigator = objectNavigator;\n+    this.fieldNamingPolicy = fieldNamingPolicy;\n     this.serializeNulls = serializeNulls;\n     this.serializers = serializers;\n     this.context = context;\n   }\n \n   private void addChildAsElement(FieldAttributes f, JsonElement childElement) {\n-    FieldNamingStrategy2 namingPolicy = factory.getFieldNamingPolicy();\n-    root.getAsJsonObject().add(namingPolicy.translateName(f), childElement);\n+    root.getAsJsonObject().add(fieldNamingPolicy.translateName(f), childElement);\n   }\n \n   private void addAsArrayElement(ObjectTypePair elementTypePair) {\n   }\n \n   private JsonElement getJsonElementForChild(ObjectTypePair fieldValueTypePair) {\n-    ObjectNavigator on = factory.create();\n-    JsonSerializationVisitor childVisitor =\n-        new JsonSerializationVisitor(factory, serializeNulls, serializers, context, ancestors);\n-    on.accept(fieldValueTypePair, childVisitor);\n+    JsonSerializationVisitor childVisitor = new JsonSerializationVisitor(\n+        objectNavigator, fieldNamingPolicy, serializeNulls, serializers, context, ancestors);\n+    objectNavigator.accept(fieldValueTypePair, childVisitor);\n     return childVisitor.getJsonElement();\n   }\n \n     }\n   }\n \n-  public boolean visitFieldUsingCustomHandler(FieldAttributes f, Type declaredTypeOfField, Object parent) {\n+  public boolean visitFieldUsingCustomHandler(\n+      FieldAttributes f, Type declaredTypeOfField, Object parent) {\n     try {\n       Preconditions.checkState(root.isJsonObject());\n       Object obj = f.get(parent);\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n \n package com.google.gson;\n \n-import java.lang.reflect.Type;\n-\n-import com.google.gson.internal.Preconditions;\n import com.google.gson.internal.Primitives;\n import com.google.gson.internal.Types;\n+\n+import java.lang.reflect.Type;\n \n /**\n  * Provides ability to apply a visitor to an object and all of its fields\n   private final ReflectingFieldNavigator reflectingFieldNavigator;\n \n   /**\n-   * @param objTypePair\n-   *          The object,type (fully genericized) being navigated\n-   * @param exclusionStrategy\n-   *          the concrete strategy object to be used to filter out fields of an\n+   * @param strategy the concrete exclusion strategy object to be used to filter out fields of an\n    *          object.\n    */\n-  ObjectNavigator(ExclusionStrategy exclusionStrategy) {\n-    reflectingFieldNavigator = new ReflectingFieldNavigator(exclusionStrategy);\n-    this.exclusionStrategy = Preconditions.checkNotNull(exclusionStrategy);\n+  ObjectNavigator(ExclusionStrategy strategy) {\n+    this.exclusionStrategy = strategy == null ? new NullExclusionStrategy() : strategy;\n+    this.reflectingFieldNavigator = new ReflectingFieldNavigator(exclusionStrategy);\n   }\n \n   /**\n    * Navigate all the fields of the specified object. If a field is null, it\n    * does not get visited.\n+   * @param objTypePair The object,type (fully genericized) being navigated\n    */\n   public void accept(ObjectTypePair objTypePair, Visitor visitor) {\n     if (exclusionStrategy.shouldSkipClass(Types.getRawType(objTypePair.type))) {\n--- a/gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java\n  */\n package com.google.gson;\n \n+import com.google.gson.ObjectNavigator.Visitor;\n+import com.google.gson.internal.Preconditions;\n+import com.google.gson.internal.Types;\n+\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n-\n-import com.google.gson.ObjectNavigator.Visitor;\n-import com.google.gson.internal.Preconditions;\n-import com.google.gson.internal.Primitives;\n-import com.google.gson.internal.Types;\n \n /**\n  * Visits each of the fields of the specified class using reflection\n   private final ExclusionStrategy exclusionStrategy;\n \n   /**\n-   * @param objTypePair\n-   *          The object,type (fully genericized) being navigated\n-   * @param exclusionStrategy\n-   *          the concrete strategy object to be used to filter out fields of an\n-   *          object.\n+   * @param exclusionStrategy the concrete strategy object to be used to filter out fields of an\n+   *   object.\n    */\n   ReflectingFieldNavigator(ExclusionStrategy exclusionStrategy) {\n     this.exclusionStrategy = Preconditions.checkNotNull(exclusionStrategy);\n   }\n \n+  /**\n+   * @param objTypePair The object,type (fully genericized) being navigated\n+   * @param visitor the visitor to visit each field with\n+   */\n   void visitFieldsReflectively(ObjectTypePair objTypePair, Visitor visitor) {\n     ObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType();\n     Class<?> topLevelClass = Types.getRawType(currObjTypePair.type);\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n import com.google.gson.common.MoreAsserts;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n import com.google.gson.reflect.TypeToken;\n+\n+import junit.framework.TestCase;\n+\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Queue;\n import java.util.Set;\n-import junit.framework.TestCase;\n \n /**\n  * Functional tests for Json serialization and deserialization of collections.", "timestamp": 1300997981, "metainfo": ""}