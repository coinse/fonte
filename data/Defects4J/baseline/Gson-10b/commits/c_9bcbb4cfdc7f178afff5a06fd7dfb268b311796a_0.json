{"sha": "9bcbb4cfdc7f178afff5a06fd7dfb268b311796a", "log": "Fixed issue 52 by switching Gson.toJson methods to use Appendable instead of java.io.Writer", "commit": "\n--- a/gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java\n+++ b/gson/src/main/java/com/google/gson/DelegatingJsonElementVisitor.java\n  */\n \n package com.google.gson;\n+\n+import java.io.IOException;\n \n /**\n  * A simple implementation of the {@link JsonElementVisitor} that simply delegates the method\n     this.delegate = delegate;\n   }\n \n-  public void endArray(JsonArray array) {\n+  public void endArray(JsonArray array) throws IOException {\n     delegate.endArray(array);\n   }\n \n-  public void endObject(JsonObject object) {\n+  public void endObject(JsonObject object) throws IOException {\n     delegate.endObject(object);\n   }\n \n-  public void startArray(JsonArray array) {\n+  public void startArray(JsonArray array) throws IOException {\n     delegate.startArray(array);\n   }\n \n-  public void startObject(JsonObject object) {\n+  public void startObject(JsonObject object) throws IOException {\n     delegate.startObject(object);\n   }\n \n-  public void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst) {\n+  public void visitArrayMember(JsonArray parent, JsonPrimitive member, \n+      boolean isFirst) throws IOException {\n     delegate.visitArrayMember(parent, member, isFirst);\n   }\n \n-  public void visitArrayMember(JsonArray parent, JsonArray member, boolean isFirst) {\n+  public void visitArrayMember(JsonArray parent, JsonArray member, \n+      boolean isFirst) throws IOException {\n     delegate.visitArrayMember(parent, member, isFirst);\n   }\n \n-  public void visitArrayMember(JsonArray parent, JsonObject member, boolean isFirst) {\n+  public void visitArrayMember(JsonArray parent, JsonObject member, \n+      boolean isFirst) throws IOException {\n     delegate.visitArrayMember(parent, member, isFirst);\n   }\n \n-  public void visitObjectMember(\n-      JsonObject parent, String memberName, JsonPrimitive member, boolean isFirst) {\n+  public void visitObjectMember(JsonObject parent, String memberName, JsonPrimitive member, \n+      boolean isFirst) throws IOException {\n     delegate.visitObjectMember(parent, memberName, member, isFirst);\n   }\n \n-  public void visitObjectMember(\n-      JsonObject parent, String memberName, JsonArray member, boolean isFirst) {\n+  public void visitObjectMember(JsonObject parent, String memberName, JsonArray member, \n+      boolean isFirst) throws IOException {\n     delegate.visitObjectMember(parent, memberName, member, isFirst);\n   }\n \n-  public void visitObjectMember(\n-      JsonObject parent, String memberName, JsonObject member, boolean isFirst) {\n+  public void visitObjectMember(JsonObject parent, String memberName, JsonObject member, \n+      boolean isFirst) throws IOException {\n     delegate.visitObjectMember(parent, memberName, member, isFirst);\n   }\n \n-  public void visitNullObjectMember(JsonObject parent, String memberName, boolean isFirst) {\n+  public void visitNullObjectMember(JsonObject parent, String memberName, \n+      boolean isFirst) throws IOException {\n     delegate.visitNullObjectMember(parent, memberName, isFirst);\n   }\n \n-  public void visitPrimitive(JsonPrimitive primitive) {\n+  public void visitPrimitive(JsonPrimitive primitive) throws IOException {\n     delegate.visitPrimitive(primitive);\n   }\n \n-  public void visitNull() {\n+  public void visitNull() throws IOException {\n     delegate.visitNull();\n   }\n \n-  public void visitNullArrayMember(JsonArray parent, boolean isFirst) {\n+  public void visitNullArrayMember(JsonArray parent, boolean isFirst) throws IOException {\n     delegate.visitNullArrayMember(parent, isFirst);\n   }\n }\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n package com.google.gson;\n \n import java.io.IOException;\n-import java.io.PrintWriter;\n import java.io.Reader;\n import java.io.StringReader;\n import java.io.StringWriter;\n    * of Java. Note that this method works fine if the any of the object fields are of generic type,\n    * just the object itself should not be of a generic type. If the object is of generic type, use\n    * {@link #toJson(Object, Type)} instead. If you want to write out the object to a\n-   * {@link Writer}, use {@link #toJson(Object, Writer)} instead.\n+   * {@link Writer}, use {@link #toJson(Object, Appendable)} instead.\n    *\n    * @param src the object for which Json representation is to be created setting for Gson\n    * @return Json representation of {@code src}.\n    * This method serializes the specified object, including those of generic types, into its\n    * equivalent Json representation. This method must be used if the specified object is a generic\n    * type. For non-generic objects, use {@link #toJson(Object)} instead. If you want to write out\n-   * the object to a {@link Writer}, use {@link #toJson(Object, Type, Writer)} instead.\n+   * the object to a {@link Appendable}, use {@link #toJson(Object, Type, Appendable)} instead.\n    *\n    * @param src the object for which JSON representation is to be created\n    * @param typeOfSrc The specific genericized type of src. You can obtain\n    * {@code getClass()} loses the generic type information because of the Type Erasure feature\n    * of Java. Note that this method works fine if the any of the object fields are of generic type,\n    * just the object itself should not be of a generic type. If the object is of generic type, use\n-   * {@link #toJson(Object, Type, Writer)} instead.\n+   * {@link #toJson(Object, Type, Appendable)} instead.\n    *\n    * @param src the object for which Json representation is to be created setting for Gson\n    * @param writer Writer to which the Json representation needs to be written\n    * @since 1.2\n    */\n-  public void toJson(Object src, Writer writer) {\n-    if (src != null) {\n-      toJson(src, src.getClass(), writer);\n-    } else if (serializeNulls) {\n-      writeOutNullString(writer);\n+  public void toJson(Object src, Appendable writer) {\n+    try {\n+      if (src != null) {\n+        toJson(src, src.getClass(), writer);\n+      } else if (serializeNulls) {\n+        writeOutNullString(writer);\n+      }\n+    } catch (IOException ioe) {\n+      throw new RuntimeException(ioe);\n     }\n   }\n \n   /**\n    * This method serializes the specified object, including those of generic types, into its\n    * equivalent Json representation. This method must be used if the specified object is a generic\n-   * type. For non-generic objects, use {@link #toJson(Object, Writer)} instead.\n+   * type. For non-generic objects, use {@link #toJson(Object, Appendable)} instead.\n    *\n    * @param src the object for which JSON representation is to be created\n    * @param typeOfSrc The specific genericized type of src. You can obtain\n    * @param writer Writer to which the Json representation of src needs to be written.\n    * @since 1.2\n    */\n-  public void toJson(Object src, Type typeOfSrc, Writer writer) {\n-    if (src != null) {\n-      JsonSerializationContext context = new JsonSerializationContextDefault(\n-          createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n-      JsonElement jsonElement = context.serialize(src, typeOfSrc);\n-\n-      //TODO(Joel): instead of navigating the \"JsonElement\" inside the formatter, do it here.\n-      formatter.format(jsonElement, new PrintWriter(writer), serializeNulls);\n-    } else {\n-      if (serializeNulls) {\n-        writeOutNullString(writer);\n+  public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n+    try {\n+      if (src != null) {\n+        JsonSerializationContext context = new JsonSerializationContextDefault(\n+            createDefaultObjectNavigatorFactory(), serializeNulls, serializers);\n+        JsonElement jsonElement = context.serialize(src, typeOfSrc);\n+\n+        //TODO(Joel): instead of navigating the \"JsonElement\" inside the formatter, do it here.\n+        formatter.format(jsonElement, writer, serializeNulls);\n+      } else {\n+        if (serializeNulls) {\n+          writeOutNullString(writer);\n+        }\n       }\n+    } catch (IOException ioe) {\n+      throw new RuntimeException(ioe);\n     }\n   }\n \n    *\n    * @param writer the object to append the null value to\n    */\n-  private void writeOutNullString(Writer writer) {\n-    try {\n-      writer.append(NULL_STRING);\n-    } catch (IOException e) {\n-      // Should this be a different exception???\n-      throw new JsonParseException(e);\n-    }\n+  private void writeOutNullString(Appendable writer) throws IOException {\n+    writer.append(NULL_STRING);\n   }\n   \n   @Override \n--- a/gson/src/main/java/com/google/gson/JsonCompactFormatter.java\n+++ b/gson/src/main/java/com/google/gson/JsonCompactFormatter.java\n \n package com.google.gson;\n \n-import java.io.PrintWriter;\n+import java.io.IOException;\n \n /**\n  * Formats Json in a compact way eliminating all unnecessary whitespace.\n final class JsonCompactFormatter implements JsonFormatter {\n \n   private static class FormattingVisitor implements JsonElementVisitor {\n-    private final PrintWriter writer;\n+    private final Appendable writer;\n     private final boolean serializeNulls;\n \n-    FormattingVisitor(PrintWriter writer, boolean serializeNulls) {\n+    FormattingVisitor(Appendable writer, boolean serializeNulls) {\n       this.writer = writer;\n       this.serializeNulls = serializeNulls;\n     }\n \n-    public void visitPrimitive(JsonPrimitive primitive) {\n+    public void visitPrimitive(JsonPrimitive primitive) throws IOException {\n       writer.append(primitive.toString());\n     }\n \n-    public void visitNull() {\n+    public void visitNull() throws IOException {\n       writer.append(\"null\");\n     }\n     \n-    public void startArray(JsonArray array) {\n+    public void startArray(JsonArray array) throws IOException {\n       writer.append('[');\n     }\n \n-    public void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst) {\n+    public void visitArrayMember(JsonArray parent, JsonPrimitive member, \n+        boolean isFirst) throws IOException {\n       if (!isFirst) {\n         writer.append(',');\n       }\n       writer.append(member.toString());\n     }\n \n-    public void visitArrayMember(JsonArray parent, JsonArray member, boolean isFirst) {\n+    public void visitArrayMember(JsonArray parent, JsonArray member, \n+        boolean isFirst) throws IOException {\n       if (!isFirst) {\n         writer.append(',');\n       }\n     }\n \n-    public void visitArrayMember(JsonArray parent, JsonObject member, boolean isFirst) {\n+    public void visitArrayMember(JsonArray parent, JsonObject member, \n+        boolean isFirst) throws IOException {\n       if (!isFirst) {\n         writer.append(',');\n       }\n     }\n \n-    public void visitNullArrayMember(JsonArray parent, boolean isFirst) {\n+    public void visitNullArrayMember(JsonArray parent, boolean isFirst) throws IOException {\n       if (!isFirst) {\n         writer.append(',');\n       }\n     }\n \n-    public void endArray(JsonArray array) {\n+    public void endArray(JsonArray array) throws IOException {\n       writer.append(']');\n     }\n \n-    public void startObject(JsonObject object) {\n+    public void startObject(JsonObject object) throws IOException {\n       writer.append('{');\n     }\n \n     public void visitObjectMember(JsonObject parent, String memberName, JsonPrimitive member,\n-        boolean isFirst) {\n+        boolean isFirst) throws IOException {\n       if (!isFirst) {\n         writer.append(',');\n       }\n     }\n \n     public void visitObjectMember(JsonObject parent, String memberName, JsonArray member,\n-        boolean isFirst) {\n+        boolean isFirst) throws IOException {\n       if (!isFirst) {\n         writer.append(',');\n       }\n     }\n \n     public void visitObjectMember(JsonObject parent, String memberName, JsonObject member,\n-        boolean isFirst) {\n+        boolean isFirst) throws IOException {\n       if (!isFirst) {\n         writer.append(',');\n       }\n       writer.append(\"\\\":\");\n     }\n \n-    public void visitNullObjectMember(JsonObject parent, String memberName, boolean isFirst) {\n+    public void visitNullObjectMember(JsonObject parent, String memberName, \n+        boolean isFirst) throws IOException {\n       if (serializeNulls) {\n         visitObjectMember(parent, memberName, (JsonObject) null, isFirst);\n       }      \n     }\n     \n-    public void endObject(JsonObject object) {\n+    public void endObject(JsonObject object) throws IOException {\n       writer.append('}');\n     }\n   }\n \n-  public void format(JsonElement root, PrintWriter writer, boolean serializeNulls) {\n+  public void format(JsonElement root, Appendable writer, \n+      boolean serializeNulls) throws IOException {\n     if (root == null) {\n       return;\n     }\n--- a/gson/src/main/java/com/google/gson/JsonElementVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonElementVisitor.java\n \n package com.google.gson;\n \n+import java.io.IOException;\n+\n /**\n  * Definition of a visitor for a JsonElement tree.\n  * \n  * @author Inderjeet Singh\n  */\n interface JsonElementVisitor {\n-  void visitPrimitive(JsonPrimitive primitive);\n-  void visitNull();\n+  void visitPrimitive(JsonPrimitive primitive) throws IOException;\n+  void visitNull() throws IOException;\n \n-  void startArray(JsonArray array);\n-  void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst);\n-  void visitArrayMember(JsonArray parent, JsonArray member, boolean isFirst);\n-  void visitArrayMember(JsonArray parent, JsonObject member, boolean isFirst);\n-  void visitNullArrayMember(JsonArray parent, boolean isFirst);\n-  void endArray(JsonArray array);\n+  void startArray(JsonArray array) throws IOException;\n+  void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst) throws IOException;\n+  void visitArrayMember(JsonArray parent, JsonArray member, boolean isFirst) throws IOException;\n+  void visitArrayMember(JsonArray parent, JsonObject member, boolean isFirst) throws IOException;\n+  void visitNullArrayMember(JsonArray parent, boolean isFirst) throws IOException;\n+  void endArray(JsonArray array) throws IOException;\n   \n-  void startObject(JsonObject object);\n+  void startObject(JsonObject object) throws IOException;\n   void visitObjectMember(JsonObject parent, String memberName, JsonPrimitive member, \n-      boolean isFirst);\n-  void visitObjectMember(JsonObject parent, String memberName, JsonArray member, boolean isFirst);\n-  void visitObjectMember(JsonObject parent, String memberName, JsonObject member, boolean isFirst);\n-  void visitNullObjectMember(JsonObject parent, String memberName, boolean isFirst);\n-  void endObject(JsonObject object);\n+      boolean isFirst) throws IOException;\n+  void visitObjectMember(JsonObject parent, String memberName, JsonArray member, \n+      boolean isFirst) throws IOException;\n+  void visitObjectMember(JsonObject parent, String memberName, JsonObject member, \n+      boolean isFirst) throws IOException;\n+  void visitNullObjectMember(JsonObject parent, String memberName, \n+      boolean isFirst) throws IOException;\n+  void endObject(JsonObject object) throws IOException;\n }\n--- a/gson/src/main/java/com/google/gson/JsonEscapingVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonEscapingVisitor.java\n  */\n \n package com.google.gson;\n+\n+import java.io.IOException;\n \n /**\n  * Performs JSON escaping and passes on the new escaped value to the delegate\n   }\n \n   @Override\n-  public void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst) {\n+  public void visitArrayMember(JsonArray parent, JsonPrimitive member, \n+      boolean isFirst) throws IOException {\n     super.visitArrayMember(parent, escapeJsonPrimitive(member), isFirst);\n   }\n \n   @Override\n-  public void visitObjectMember(\n-      JsonObject parent, String memberName, JsonPrimitive member, boolean isFirst) {\n+  public void visitObjectMember(JsonObject parent, String memberName, JsonPrimitive member, \n+      boolean isFirst) throws IOException {\n     super.visitObjectMember(parent, memberName, escapeJsonPrimitive(member), isFirst);\n   }\n \n   @Override\n-  public void visitPrimitive(JsonPrimitive primitive) {\n+  public void visitPrimitive(JsonPrimitive primitive) throws IOException {\n     super.visitPrimitive(escapeJsonPrimitive(primitive));\n   }\n \n--- a/gson/src/main/java/com/google/gson/JsonFormatter.java\n+++ b/gson/src/main/java/com/google/gson/JsonFormatter.java\n \n package com.google.gson;\n \n-import java.io.PrintWriter;\n+import java.io.IOException;\n \n /**\n  * Common interface for a formatter for Json. \n    * @param writer the writer to output the formatter JSON to.\n    * @param serializeNulls serialize null values in the output.\n    */\n-  public void format(JsonElement root, PrintWriter writer, boolean serializeNulls);\n+  public void format(JsonElement root, Appendable writer, \n+      boolean serializeNulls) throws IOException;\n }\n--- a/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n \n package com.google.gson;\n \n-import java.io.PrintWriter;\n+import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n \n   }\n \n   private class JsonWriter {\n-    private final PrintWriter writer;\n+    private final Appendable writer;\n     private StringBuilder line;\n     private int level;\n-    JsonWriter(PrintWriter writer) {\n+    JsonWriter(Appendable writer) {\n       this.writer = writer;\n       level = 0;\n       line = new StringBuilder();\n       getLine().append(value);\n     }\n \n-    void fieldSeparator() {\n+    void fieldSeparator() throws IOException {\n       getLine().append(':');\n       breakLineIfNeeded();\n     }\n \n-    void elementSeparator() {\n+    void elementSeparator() throws IOException {\n       getLine().append(',');\n       breakLineIfNeeded();\n     }\n \n-    void beginObject() {\n+    void beginObject() throws IOException {\n       ++level;\n       breakLineIfNeeded();\n       getLine().append('{');\n       --level;\n     }\n \n-    void beginArray() {\n+    void beginArray() throws IOException {\n       ++level;\n       breakLineIfNeeded();\n       getLine().append('[');\n       --level;\n     }\n \n-    private void breakLineIfNeeded() {\n+    private void breakLineIfNeeded() throws IOException {\n       if (getLine().length() > printMargin - rightMargin) {\n         finishLine();\n       }\n     }\n \n-    private void finishLine() {\n+    private void finishLine() throws IOException {\n       if (line != null) {\n         writer.append(line).append(\"\\n\");\n       }\n       this.firstObjectMember = new HashMap<Integer, Boolean>();\n     }\n \n-    private void addCommaCheckingFirst(Map<Integer, Boolean> first) {\n+    private void addCommaCheckingFirst(Map<Integer, Boolean> first) throws IOException {\n       if (first.get(level) != Boolean.FALSE) {\n         first.put(level, false);\n       } else {\n       }\n     }\n \n-    public void startArray(JsonArray array) {\n+    public void startArray(JsonArray array) throws IOException {\n       firstArrayElement.put(++level, true);\n       writer.beginArray();\n     }\n \n-    public void visitArrayMember(JsonArray parent, JsonPrimitive member, boolean isFirst) {\n+    public void visitArrayMember(JsonArray parent, JsonPrimitive member, \n+        boolean isFirst) throws IOException {\n       addCommaCheckingFirst(firstArrayElement);\n       writer.value(member.toString());\n     }\n \n-    public void visitArrayMember(JsonArray parent, JsonArray member, boolean first) {\n-      addCommaCheckingFirst(firstArrayElement);\n-    }\n-\n-    public void visitArrayMember(JsonArray parent, JsonObject member, boolean first) {\n-      addCommaCheckingFirst(firstArrayElement);\n-    }\n-\n-    public void visitNullArrayMember(JsonArray parent, boolean isFirst) {\n+    public void visitArrayMember(JsonArray parent, JsonArray member, \n+        boolean first) throws IOException {\n+      addCommaCheckingFirst(firstArrayElement);\n+    }\n+\n+    public void visitArrayMember(JsonArray parent, JsonObject member, \n+        boolean first) throws IOException {\n+      addCommaCheckingFirst(firstArrayElement);\n+    }\n+\n+    public void visitNullArrayMember(JsonArray parent, boolean isFirst) throws IOException {\n       addCommaCheckingFirst(firstArrayElement);\n     }\n \n       writer.endArray();\n     }\n \n-    public void startObject(JsonObject object) {\n+    public void startObject(JsonObject object) throws IOException {\n       firstObjectMember.put(level, true);\n       writer.beginObject();\n     }\n \n     public void visitObjectMember(JsonObject parent, String memberName, JsonPrimitive member, \n-        boolean isFirst) {\n+        boolean isFirst) throws IOException {\n       addCommaCheckingFirst(firstObjectMember);\n       writer.key(memberName);\n       writer.fieldSeparator();\n     }\n \n     public void visitObjectMember(JsonObject parent, String memberName, JsonArray member, \n-        boolean isFirst) {\n+        boolean isFirst) throws IOException {\n       addCommaCheckingFirst(firstObjectMember);\n       writer.key(memberName);\n       writer.fieldSeparator();\n     }\n \n     public void visitObjectMember(JsonObject parent, String memberName, JsonObject member, \n-        boolean isFirst) {\n+        boolean isFirst) throws IOException {\n       addCommaCheckingFirst(firstObjectMember);\n       writer.key(memberName);\n       writer.fieldSeparator();\n     }\n \n-    public void visitNullObjectMember(JsonObject parent, String memberName, boolean isFirst) {\n+    public void visitNullObjectMember(JsonObject parent, String memberName, \n+        boolean isFirst) throws IOException {\n       if (serializeNulls) {\n         visitObjectMember(parent, memberName, (JsonObject) null, isFirst);\n       }\n     }\n   }\n \n-  public void format(JsonElement root, PrintWriter writer, boolean serializeNulls) {\n+  public void format(JsonElement root, Appendable writer, \n+      boolean serializeNulls) throws IOException {\n     if (root == null) {\n       return;\n     }\n--- a/gson/src/main/java/com/google/gson/JsonTreeNavigator.java\n+++ b/gson/src/main/java/com/google/gson/JsonTreeNavigator.java\n \n package com.google.gson;\n \n+import java.io.IOException;\n import java.util.Map;\n \n /**\n     this.visitNulls = visitNulls;\n   }\n   \n-  public void navigate(JsonElement element) {\n+  public void navigate(JsonElement element) throws IOException {\n     if (element == null || element.isJsonNull()) {\n       visitor.visitNull();\n     } else if (element.isJsonArray()) {\n    * Returns true if the child was visited, false if it was skipped.\n    */\n   private boolean visitChild(JsonObject parent, String childName, JsonElement child, \n-      boolean isFirst) {\n+      boolean isFirst) throws IOException {\n     if (child != null) { \n       if (child.isJsonNull()) {\n         if (visitNulls) {\n   /**\n    * Returns true if the child was visited, false if it was skipped.\n    */\n-  private void visitChild(JsonArray parent, JsonElement child, boolean isFirst) {\n+  private void visitChild(JsonArray parent, JsonElement child, boolean isFirst) throws IOException {\n     if (child == null || child.isJsonNull()) {\n       visitor.visitNullArrayMember(parent, isFirst);\n       navigate(null);", "timestamp": 1227726794, "metainfo": ""}