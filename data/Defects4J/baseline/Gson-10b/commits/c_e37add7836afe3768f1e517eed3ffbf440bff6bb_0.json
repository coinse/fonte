{"sha": "e37add7836afe3768f1e517eed3ffbf440bff6bb", "log": "Implemented some code review comments from r482", "commit": "\n--- a/gson/src/main/java/com/google/gson/ExclusionStrategy.java\n+++ b/gson/src/main/java/com/google/gson/ExclusionStrategy.java\n /**\n  * A strategy (or policy) definition that is used to decide whether or not a field or top-level\n  * class should be serialized or deserialized as part of the JSON output/input. For serialization,\n- * if the {@link this#shouldSkipClass(Class)} method returns false then that class or field type\n- * will not be part of the JSON output.  For deserialization, if {@link this#shouldSkipClass(Class)}\n+ * if the {@link #shouldSkipClass(Class)} method returns false then that class or field type\n+ * will not be part of the JSON output.  For deserialization, if {@link #shouldSkipClass(Class)}\n  * returns false, then it will not be set as part of the Java object structure.\n  *\n  * <p>The following are a few examples that shows how you can use this exclusion mechanism.\n--- a/gson/src/main/java/com/google/gson/FieldAttributes.java\n+++ b/gson/src/main/java/com/google/gson/FieldAttributes.java\n   }\n \n   /**\n-   * Return the {@link T} annotation object from this field if it exist; otherwise returns\n+   * Return the T annotation object from this field if it exist; otherwise returns\n    * {@code null}.\n    *\n    * @param annotation the class of the annotation that will be retrieved\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     if (src == null) {\n       return JsonNull.createJsonNull();\n     }\n-    return toJsonTree(src, src.getClass(), false);\n+    return toJsonTree(src, src.getClass());\n   }\n \n   /**\n    * @since 1.4\n    */\n   public JsonElement toJsonTree(Object src, Type typeOfSrc) {\n-    return toJsonTree(src, typeOfSrc, true);\n-  }\n-\n-  private JsonElement toJsonTree(Object src, Type typeOfSrc, boolean preserveType) {\n     if (src == null) {\n       return JsonNull.createJsonNull();\n     }\n     JsonSerializationContextDefault context = new JsonSerializationContextDefault(\n         createDefaultObjectNavigatorFactory(serializationStrategy), serializeNulls, serializers);\n-    return context.serialize(src, typeOfSrc, preserveType);\n+    return context.serialize(src, typeOfSrc, true);\n   }\n \n   /**\n     if (src == null) {\n       return serializeNulls ? NULL_STRING : \"\";\n     }\n-    return toJson(src, src.getClass(), false);\n+    return toJson(src, src.getClass());\n   }\n \n   /**\n    * @return Json representation of {@code src}\n    */\n   public String toJson(Object src, Type typeOfSrc) {\n-    return toJson(src, typeOfSrc, true);\n-  }\n-\n-  private String toJson(Object src, Type typeOfSrc, boolean preserveType) {\n     StringWriter writer = new StringWriter();\n-    toJson(src, typeOfSrc, writer, preserveType);\n+    toJson(src, typeOfSrc, writer);\n     return writer.toString();\n   }\n \n   public void toJson(Object src, Appendable writer) {\n     try {\n       if (src != null) {\n-        toJson(src, src.getClass(), writer, false);\n+        toJson(src, src.getClass(), writer);\n       } else if (serializeNulls) {\n         writeOutNullString(writer);\n       }\n    * @since 1.2\n    */\n   public void toJson(Object src, Type typeOfSrc, Appendable writer) {\n-    toJson(src, typeOfSrc, writer, true);\n-  }\n-\n-  private void toJson(Object src, Type typeOfSrc, Appendable writer, boolean preserveType) {\n-    JsonElement jsonElement = toJsonTree(src, typeOfSrc, preserveType);\n+    JsonElement jsonElement = toJsonTree(src, typeOfSrc);\n     toJson(jsonElement, writer);\n   }\n \n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n     // This happens primarily because of custom deserializers\n     return childVisitor.getTarget();\n   }\n-\n-  public ObjectTypePair getActualTypeIfMoreSpecific(ObjectTypePair objTypePair) {\n-    return objTypePair;\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n     if (src == null) {\n       return JsonNull.createJsonNull();\n     }\n-    return serialize(src, src.getClass(), false);\n+    return serialize(src, src.getClass(), true);\n   }\n \n   public JsonElement serialize(Object src, Type typeOfSrc) {\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n   public JsonElement getJsonElement() {\n     return root;\n   }\n-\n-  public ObjectTypePair getActualTypeIfMoreSpecific(ObjectTypePair objTypePair) {\n-    return objTypePair.toMoreSpecificType();\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n      */\n     public boolean visitFieldUsingCustomHandler(Field f, Type actualTypeOfField, Object parent);\n \n-    public ObjectTypePair getActualTypeIfMoreSpecific(ObjectTypePair objTypePair);\n-\n     /**\n      * Retrieve the current target\n      */\n           objectToVisit = visitor.getTarget();\n         } else {\n           visitor.startVisitingObject(objectToVisit);\n-          ObjectTypePair currObjTypePair = visitor.getActualTypeIfMoreSpecific(objTypePair);\n+          ObjectTypePair currObjTypePair = objTypePair.toMoreSpecificType();\n           Class<?> topLevelClass = new TypeInfo(currObjTypePair.getType()).getRawClass();\n           for (Class<?> curr = topLevelClass; curr != null && !curr.equals(Object.class);\n               curr = curr.getSuperclass()) {\n--- a/gson/src/main/java/com/google/gson/ObjectTypePair.java\n+++ b/gson/src/main/java/com/google/gson/ObjectTypePair.java\n  * @author Inderjeet Singh\n  */\n final class ObjectTypePair {\n-  private static final int PRIME = 31;\n-\n   private final Object obj;\n   private final Type type;\n   private final boolean preserveType;\n   @SuppressWarnings(\"unchecked\")\n   Pair<JsonSerializer, ObjectTypePair> getMatchingSerializer(\n       ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers) {\n-    if (obj == null) {\n-      return null;\n-    }\n+    Preconditions.checkNotNull(obj);\n     JsonSerializer serializer = null;\n     if (!preserveType) {\n       // First try looking up the serializer for the actual type\n   public int hashCode() {\n     // Not using type.hashCode() since I am not sure if the subclasses of type reimplement\n     // hashCode() to be equal for equal types\n-    return ((obj == null) ? PRIME : obj.hashCode());\n+    return ((obj == null) ? 31 : obj.hashCode());\n   }\n \n   @Override\n--- a/gson/src/test/java/com/google/gson/FieldAttributesTest.java\n+++ b/gson/src/test/java/com/google/gson/FieldAttributesTest.java\n   }\n \n   private static class Foo {\n+    @SuppressWarnings(\"unused\")\n     public transient List<String> bar;\n   }\n }", "timestamp": 1255052145, "metainfo": ""}