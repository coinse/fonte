{"sha": "8d5de3136ccbdea33b289e373a5bbc06cb0a2d58", "log": "Inline character unescaping. This saves ~10% on the READER_LONG benchmark.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n       if (pos + 4 > limit && !fillBuffer(4)) {\n         throw syntaxError(\"Unterminated escape sequence\");\n       }\n-      String hex = stringPool.get(buffer, pos, 4);\n+      // Equivalent to Integer.parseInt(stringPool.get(buffer, pos, 4), 16);\n+      char result = 0;\n+      for (int i = pos, end = i + 4; i < end; i++) {\n+        char c = buffer[i];\n+        result <<= 4;\n+        if (c >= '0' && c <= '9') {\n+          result += (c - '0');\n+        } else if (c >= 'a' && c <= 'f') {\n+          result += (c - 'a' + 10);\n+        } else if (c >= 'A' && c <= 'F') {\n+          result += (c - 'A' + 10);\n+        } else {\n+          throw new NumberFormatException(\"\\\\u\" + stringPool.get(buffer, pos, 4));\n+        }\n+      }\n       pos += 4;\n-      return (char) Integer.parseInt(hex, 16);\n+      return result;\n \n     case 't':\n       return '\\t';\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n     assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n   }\n \n+  public void testUnescapingInvalidCharacters() throws IOException {\n+    String json = \"[\\\"\\\\u000g\\\"]\";\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    reader.beginArray();\n+    try {\n+      reader.nextString();\n+      fail();\n+    } catch (NumberFormatException expected) {\n+    }\n+  }\n+\n+  public void testUnescapingTruncatedCharacters() throws IOException {\n+    String json = \"[\\\"\\\\u000\";\n+    JsonReader reader = new JsonReader(new StringReader(json));\n+    reader.beginArray();\n+    try {\n+      reader.nextString();\n+      fail();\n+    } catch (IOException expected) {\n+    }\n+  }\n+\n   public void testIntegersWithFractionalPartSpecified() throws IOException {\n     JsonReader reader = new JsonReader(new StringReader(\"[1.0,1.0,1.0]\"));\n     reader.beginArray();", "timestamp": 1324796986, "metainfo": ""}