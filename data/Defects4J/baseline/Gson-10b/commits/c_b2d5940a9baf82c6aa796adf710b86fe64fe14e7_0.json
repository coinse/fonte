{"sha": "b2d5940a9baf82c6aa796adf710b86fe64fe14e7", "log": "Implemented runtime type serialization for keys and values of a map. This fixes MoreSpecificTypeSerializationTest.testMapOfSubclassFields", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java\n  */\n \n package com.google.gson.internal.bind;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n \n import com.google.gson.JsonElement;\n import com.google.gson.JsonPrimitive;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-import java.io.IOException;\n-import java.lang.reflect.Type;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n \n /**\n  * Adapts maps to either JSON objects or JSON arrays.\n     ObjectConstructor<T> constructor = constructorConstructor.getConstructor(typeToken);\n \n     @SuppressWarnings(\"unchecked\") // we don't define a type parameter for the key or value types\n-    TypeAdapter<T> result = new Adapter(keyAdapter, valueAdapter, constructor);\n+    TypeAdapter<T> result = new Adapter(context, keyAndValueTypes[0], keyAdapter,\n+        keyAndValueTypes[1], valueAdapter, constructor);\n     return result;\n   }\n \n     private final TypeAdapter<V> valueTypeAdapter;\n     private final ObjectConstructor<? extends Map<K, V>> constructor;\n \n-    public Adapter(TypeAdapter<K> keyTypeAdapter, TypeAdapter<V> valueTypeAdapter,\n+    public Adapter(MiniGson context, Type keyType, TypeAdapter<K> keyTypeAdapter, \n+        Type valueType, TypeAdapter<V> valueTypeAdapter,\n         ObjectConstructor<? extends Map<K, V>> constructor) {\n-      this.keyTypeAdapter = keyTypeAdapter;\n-      this.valueTypeAdapter = valueTypeAdapter;\n+      this.keyTypeAdapter =\n+        new TypeAdapterRuntimeTypeWrapper<K>(context, keyTypeAdapter, keyType);\n+      this.valueTypeAdapter =\n+        new TypeAdapterRuntimeTypeWrapper<V>(context, valueTypeAdapter, valueType);\n       this.constructor = constructor;\n     }\n ", "timestamp": 1317136857, "metainfo": ""}