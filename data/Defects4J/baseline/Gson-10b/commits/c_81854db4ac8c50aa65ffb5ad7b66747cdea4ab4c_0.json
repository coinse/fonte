{"sha": "81854db4ac8c50aa65ffb5ad7b66747cdea4ab4c", "log": "Converted java.sql.Timestamp type adapter to the new style.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n final class DefaultTypeAdapters {\n \n   private static final DefaultDateTypeAdapter DATE_TYPE_ADAPTER = new DefaultDateTypeAdapter();\n-  private static final DefaultTimestampDeserializer TIMESTAMP_DESERIALIZER =\n-    new DefaultTimestampDeserializer();\n \n   // The constants DEFAULT_SERIALIZERS, DEFAULT_DESERIALIZERS, and DEFAULT_INSTANCE_CREATORS\n   // must be defined after the constants for the type adapters. Otherwise, the type adapter\n     ParameterizedTypeHandlerMap<JsonDeserializer<?>> map =\n         new ParameterizedTypeHandlerMap<JsonDeserializer<?>>();\n     map.register(Date.class, wrapDeserializer(DATE_TYPE_ADAPTER), true);\n-    map.register(Timestamp.class, wrapDeserializer(TIMESTAMP_DESERIALIZER), true);\n \n     map.makeUnmodifiable();\n     return map;\n       return sb.toString();\n     }\n   }\n-\n-  static final class DefaultTimestampDeserializer implements JsonDeserializer<Timestamp> {\n-    public Timestamp deserialize(JsonElement json, Type typeOfT,\n-        JsonDeserializationContext context) throws JsonParseException {\n-      Date date = context.deserialize(json, Date.class);\n-      return new Timestamp(date.getTime());\n-    }\n-  }\n }\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n         .factory(TypeAdapters.CALENDAR_FACTORY)\n         .factory(TypeAdapters.SQL_TIME_FACTORY)\n         .factory(TypeAdapters.SQL_DATE_FACTORY)\n+        .factory(TypeAdapters.SQL_TIMESTAMP_FACTORY)\n         .factory(new MapTypeAdapterFactory(constructorConstructor, complexMapKeySerialization))\n         .factory(ArrayTypeAdapter.FACTORY)\n         .factory(TypeAdapters.ENUM_FACTORY)\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.sql.Time;\n+import java.sql.Timestamp;\n import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n \n   public static final TypeAdapter.Factory SQL_TIME_FACTORY = newFactory(Time.class, SQL_TIME);\n \n+  private static final class TimestampTypeAdapter extends TypeAdapter<Timestamp> {\n+    private final DateFormat format = new SimpleDateFormat(\"hh:mm:ss a\");\n+    private final MiniGson context;\n+    public TimestampTypeAdapter(MiniGson context) {\n+      this.context = context;\n+    }\n+    @Override\n+    public Timestamp read(JsonReader reader) throws IOException {\n+      TypeAdapter<Date> dateTypeAdapter = context.getAdapter(Date.class);\n+      Date date = dateTypeAdapter.read(reader);\n+      return new java.sql.Timestamp(date.getTime());\n+    }\n+    @Override\n+    public void write(JsonWriter writer, Timestamp value) throws IOException {\n+      writer.value(format.format(value));\n+    }\n+  };\n+  public static final TypeAdapter.Factory SQL_TIMESTAMP_FACTORY = new TypeAdapter.Factory() {\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> TypeAdapter<T> create(MiniGson context, TypeToken<T> typeToken) {\n+      return typeToken.getRawType() == Timestamp.class\n+          ? (TypeAdapter<T>) new TimestampTypeAdapter(context) : null;\n+    }\n+  };\n+\n   public static final TypeAdapter<java.sql.Date> SQL_DATE = new TypeAdapter<java.sql.Date>() {\n     private final DateFormat format = new SimpleDateFormat(\"MMM d, yyyy\");\n     @Override", "timestamp": 1316986536, "metainfo": ""}