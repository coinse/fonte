{"sha": "172143df7c37482f8c1d43ac4bff769d40ee5ac9", "log": "Removing JsonObject.deepCopy() and JsonArray.deepCopy()", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonArray.java\n+++ b/gson/src/main/java/com/google/gson/JsonArray.java\n   }\n \n   /**\n-   * Returns a deep copy of this array.\n-   */\n-  @Override public JsonArray deepCopy() {\n-    JsonArray result = new JsonArray();\n-    result.elements.addAll(elements);\n-    for (int i = 0; i < result.elements.size(); i++) {\n-      result.elements.set(i, result.elements.get(i).deepCopy());\n-    }\n-    return result;\n-  }\n-\n-  /**\n    * Returns the number of elements in the array.\n    *\n    * @return the number of elements in the array.\n--- a/gson/src/main/java/com/google/gson/JsonElement.java\n+++ b/gson/src/main/java/com/google/gson/JsonElement.java\n   }\n \n   /**\n-   * Returns a deep copy of this. Immutable values can return this.\n-   */\n-  abstract JsonElement deepCopy();\n-\n-  /**\n    * Returns a String representation of this element.\n    */\n   @Override\n--- a/gson/src/main/java/com/google/gson/JsonNull.java\n+++ b/gson/src/main/java/com/google/gson/JsonNull.java\n     // Do nothing\n   }\n \n-  @Override JsonElement deepCopy() {\n-    return this; // immutable!\n-  }\n-\n   /**\n    * All instances of JsonNull have the same hash code since they are indistinguishable\n    */\n--- a/gson/src/main/java/com/google/gson/JsonObject.java\n+++ b/gson/src/main/java/com/google/gson/JsonObject.java\n   }\n \n   /**\n-   * Returns a deep copy of this object.\n-   */\n-  @Override public JsonObject deepCopy() {\n-    JsonObject result = new JsonObject();\n-    result.members.putAll(members);\n-    for (Map.Entry<String, JsonElement> entry : result.members.entrySet()) {\n-      entry.setValue(entry.getValue().deepCopy());\n-    }\n-    return result;\n-  }\n-\n-  /**\n    * Returns a set of members of this object. The set is ordered, and the order is in which the\n    * elements were added.\n    *\n--- a/gson/src/main/java/com/google/gson/JsonPrimitive.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitive.java\n     }\n   }\n \n-  @Override JsonElement deepCopy() {\n-    return this; // immutable!\n-  }\n-\n   /**\n    * Check whether this primitive contains a boolean value.\n    *\n--- a/gson/src/test/java/com/google/gson/JsonArrayTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonArrayTest.java\n     assertFalse(a.equals(b));\n     assertFalse(b.equals(a));\n   }\n-\n-  public void testDeepCopy() {\n-    JsonObject v1 = new JsonObject();\n-    v1.add(\"k\", new JsonPrimitive(\"v\"));\n-    JsonNull v2 = JsonNull.INSTANCE;\n-    JsonPrimitive v3 = new JsonPrimitive(\"abc\");\n-    JsonArray v4 = new JsonArray();\n-    v4.add(new JsonPrimitive(\"def\"));\n-\n-    JsonArray array = new JsonArray();\n-    array.add(v1);\n-    array.add(v2);\n-    array.add(v3);\n-    array.add(v4);\n-\n-    // the deep copy must be equal\n-    JsonArray deepCopy = array.deepCopy();\n-    assertEquals(array, deepCopy);\n-\n-    // collections must be copied by value\n-    JsonObject d1 = deepCopy.get(0).getAsJsonObject();\n-    assertEquals(v1, d1);\n-    assertTrue(v1 != d1);\n-    JsonArray d4 = deepCopy.get(3).getAsJsonArray();\n-    assertEquals(v4, d4);\n-    assertTrue(v4 != d4);\n-\n-    // collections should themselves be deeply immutable\n-    v1.add(\"k2\", new JsonPrimitive(\"v2\"));\n-    assertEquals(1, d1.entrySet().size());\n-    v4.add(new JsonPrimitive(\"ghi\"));\n-    assertEquals(1, d4.size());\n-  }\n }\n--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonObjectTest.java\n     assertFalse(a.equals(b));\n     assertFalse(b.equals(a));\n   }\n-\n-  public void testDeepCopy() {\n-    JsonObject v1 = new JsonObject();\n-    v1.add(\"k\", new JsonPrimitive(\"v\"));\n-    JsonNull v2 = JsonNull.INSTANCE;\n-    JsonPrimitive v3 = new JsonPrimitive(\"abc\");\n-    JsonArray v4 = new JsonArray();\n-    v4.add(new JsonPrimitive(\"def\"));\n-\n-    JsonObject object = new JsonObject();\n-    object.add(\"1\", v1);\n-    object.add(\"2\", v2);\n-    object.add(\"3\", v3);\n-    object.add(\"4\", v4);\n-\n-    // the deep copy must be equal\n-    JsonObject deepCopy = object.deepCopy();\n-    assertEquals(object, deepCopy);\n-\n-    // collections must be copied by value\n-    JsonObject d1 = deepCopy.get(\"1\").getAsJsonObject();\n-    assertEquals(v1, d1);\n-    assertTrue(v1 != d1);\n-    JsonArray d4 = deepCopy.get(\"4\").getAsJsonArray();\n-    assertEquals(v4, d4);\n-    assertTrue(v4 != d4);\n-\n-    // collections should themselves be deeply immutable\n-    v1.add(\"k2\", new JsonPrimitive(\"v2\"));\n-    assertEquals(1, d1.entrySet().size());\n-    v4.add(new JsonPrimitive(\"ghi\"));\n-    assertEquals(1, d4.size());\n-  }\n }", "timestamp": 1321140764, "metainfo": ""}