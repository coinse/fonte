{"sha": "2c8bec27d48d0d9ba9d99ff5fb7a9bae36906c48", "log": "Permit multiple top-level values in JsonWriter in lenient mode. Also fix some cases where we don't throw the right thing on a closed JsonWriter.  I'd prefer to not support multiple top-level values, but we support it in JsonReader and it's easier to be consistent. Kevin Hayen's patch pointed me in the right direction here, but I needed to do more work to cover some of the edge cases.  Fixes issue 397.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonWriter.java\n    * Returns the value on the top of the stack.\n    */\n   private JsonScope peek() {\n-    return stack.get(stack.size() - 1);\n+    int size = stack.size();\n+    if (size == 0) {\n+      throw new IllegalStateException(\"JsonWriter is closed.\");\n+    }\n+    return stack.get(size - 1);\n   }\n \n   /**\n     }\n     if (deferredName != null) {\n       throw new IllegalStateException();\n+    }\n+    if (stack.isEmpty()) {\n+      throw new IllegalStateException(\"JsonWriter is closed.\");\n     }\n     deferredName = name;\n     return this;\n    * and flushes that writer.\n    */\n   public void flush() throws IOException {\n+    if (stack.isEmpty()) {\n+      throw new IllegalStateException(\"JsonWriter is closed.\");\n+    }\n     out.flush();\n   }\n \n   public void close() throws IOException {\n     out.close();\n \n-    if (peek() != JsonScope.NONEMPTY_DOCUMENT) {\n+    int size = stack.size();\n+    if (size > 1 || size == 1 && stack.get(size - 1) != JsonScope.NONEMPTY_DOCUMENT) {\n       throw new IOException(\"Incomplete document\");\n     }\n+    stack.clear();\n   }\n \n   private void string(String value) throws IOException {\n    * @param root true if the value is a new array or object, the two values\n    *     permitted as top-level elements.\n    */\n+  @SuppressWarnings(\"fallthrough\")\n   private void beforeValue(boolean root) throws IOException {\n     switch (peek()) {\n+    case NONEMPTY_DOCUMENT:\n+      if (!lenient) {\n+        throw new IllegalStateException(\n+            \"JSON must have only one top-level value.\");\n+      }\n+      // fall-through\n     case EMPTY_DOCUMENT: // first in document\n       if (!lenient && !root) {\n         throw new IllegalStateException(\n       replaceTop(JsonScope.NONEMPTY_OBJECT);\n       break;\n \n-    case NONEMPTY_DOCUMENT:\n-        throw new IllegalStateException(\n-            \"JSON must have only one top-level value.\");\n-\n     default:\n       throw new IllegalStateException(\"Nesting problem: \" + stack);\n     }\n--- a/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java\n \n package com.google.gson.stream;\n \n-import junit.framework.TestCase;\n-\n import java.io.IOException;\n import java.io.StringWriter;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n+import junit.framework.TestCase;\n \n public final class JsonWriterTest extends TestCase {\n \n         + \"]\";\n     assertEquals(expected, stringWriter.toString());\n   }\n+\n+  public void testLenientWriterPermitsMultipleTopLevelValues() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter writer = new JsonWriter(stringWriter);\n+    writer.setLenient(true);\n+    writer.beginArray();\n+    writer.endArray();\n+    writer.beginArray();\n+    writer.endArray();\n+    writer.close();\n+    assertEquals(\"[][]\", stringWriter.toString());\n+  }\n+\n+  public void testStrictWriterDoesNotPermitMultipleTopLevelValues() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter writer = new JsonWriter(stringWriter);\n+    writer.beginArray();\n+    writer.endArray();\n+    try {\n+      writer.beginArray();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+  }\n+\n+  public void testClosedWriterThrowsOnStructure() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter writer = new JsonWriter(stringWriter);\n+    writer.beginArray();\n+    writer.endArray();\n+    writer.close();\n+    try {\n+      writer.beginArray();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      writer.endArray();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      writer.beginObject();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+    try {\n+      writer.endObject();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+  }\n+\n+  public void testClosedWriterThrowsOnName() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter writer = new JsonWriter(stringWriter);\n+    writer.beginArray();\n+    writer.endArray();\n+    writer.close();\n+    try {\n+      writer.name(\"a\");\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+  }\n+\n+  public void testClosedWriterThrowsOnValue() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter writer = new JsonWriter(stringWriter);\n+    writer.beginArray();\n+    writer.endArray();\n+    writer.close();\n+    try {\n+      writer.value(\"a\");\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+  }\n+\n+  public void testClosedWriterThrowsOnFlush() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter writer = new JsonWriter(stringWriter);\n+    writer.beginArray();\n+    writer.endArray();\n+    writer.close();\n+    try {\n+      writer.flush();\n+      fail();\n+    } catch (IllegalStateException expected) {\n+    }\n+  }\n+\n+  public void testWriterCloseIsIdempotent() throws IOException {\n+    StringWriter stringWriter = new StringWriter();\n+    JsonWriter writer = new JsonWriter(stringWriter);\n+    writer.beginArray();\n+    writer.endArray();\n+    writer.close();\n+    writer.close();\n+  }\n }", "timestamp": 1329079336, "metainfo": ""}