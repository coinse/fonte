{"sha": "01278910810adfd32ecb18e27f1273aa1aab1b5e", "log": "Added a new API method in JsonParser to allow reading of multiple JSON objects on a stream asynchronously.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonParser.java\n  * @since 1.3\n  */\n public final class JsonParser {\n+  \n+  /**\n+   * Interface to provide ability to read multiple {@link JsonElement}s from a stream \n+   * asynchronously.\n+   * \n+   * @since 1.4\n+   */\n+  public interface AsyncReader {\n+\n+    /**\n+     * Parse and return one {@link JsonElement} \n+     * @since 1.4\n+     */\n+    public JsonElement readElement();\n+  }\n \n   /**\n    * Parses the specified JSON string into a parse tree\n   public JsonElement parse(Reader json) throws JsonParseException {\n     try {\n       JsonParserJavacc parser = new JsonParserJavacc(json);\n-      return parser.parse();\n+      JsonElement element = parser.parse();\n+      return element;\n     } catch (TokenMgrError e) {\n       throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     } catch (ParseException e) {\n       throw new JsonParseException(\"Failed parsing JSON source: \" + json + \" to Json\", e);\n     }\n   }\n+  \n+  /**\n+   * Returns {@link AsyncReader} to allow reading of multiple {@link JsonElement}s from the \n+   * specified reader asynchronously.\n+   * \n+   * @param json The data stream containing JSON elements concatenated to each other.\n+   * @return {@link AsyncReader} for reading {@link JsonElement}s asynchronously.\n+   * @throws JsonParseException if the incoming stream is malformed JSON.\n+   * @since 1.4\n+   */\n+  public AsyncReader parseAsync(Reader json) throws JsonParseException {\n+    return new AsyncReaderJavacc(json);\n+  }\n+  \n+  private static class AsyncReaderJavacc implements AsyncReader {    \n+    private final JsonParserJavacc parser;\n+    private AsyncReaderJavacc(Reader json) {\n+      parser = new JsonParserJavacc(json);      \n+    }\n+    \n+    public JsonElement readElement() {\n+      try {\n+        JsonElement element = parser.parse();\n+        return element;\n+      } catch (TokenMgrError e) {\n+        throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\n+      } catch (ParseException e) {\n+        throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\n+      } catch (StackOverflowError e) {\n+        throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\n+      } catch (OutOfMemoryError e) {\n+        throw new JsonParseException(\"Failed parsing JSON source to Json\", e);\n+      }\n+    }    \n+  }\n }\n--- a/gson/src/test/java/com/google/gson/JsonParserTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonParserTest.java\n \n package com.google.gson;\n \n+import com.google.gson.common.TestTypes.BagOfPrimitives;\n+\n import junit.framework.TestCase;\n \n+import java.io.CharArrayReader;\n+import java.io.CharArrayWriter;\n import java.io.StringReader;\n \n /**\n     assertEquals(10, e.getAsJsonObject().get(\"a\").getAsInt());\n     assertEquals(\"c\", e.getAsJsonObject().get(\"b\").getAsString());\n   }\n+  \n+  public void testReadWriteTwoObjects() throws Exception {\n+    Gson gson= new Gson();\n+    CharArrayWriter writer= new CharArrayWriter();\n+    BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, \"one\");\n+    writer.write(gson.toJson(expectedOne).toCharArray());\n+    BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, \"two\");\n+    writer.write(gson.toJson(expectedTwo).toCharArray());\n+    CharArrayReader reader = new CharArrayReader(writer.toCharArray());\n+  \n+    JsonParserJavacc parser = new JsonParserJavacc(reader);    \n+    JsonElement element1 = parser.parse();\n+    JsonElement element2 = parser.parse();\n+    BagOfPrimitives actualOne = gson.fromJson(element1, BagOfPrimitives.class);\n+    assertEquals(\"one\", actualOne.stringValue);\n+    BagOfPrimitives actualTwo = gson.fromJson(element2, BagOfPrimitives.class);\n+    assertEquals(\"two\", actualTwo.stringValue);\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java\n \n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonParser;\n+import com.google.gson.JsonParser.AsyncReader;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n \n import junit.framework.TestCase;\n \n+import java.io.CharArrayReader;\n+import java.io.CharArrayWriter;\n+import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n import java.io.StringWriter;\n     Integer nullIntObject = gson.fromJson(reader, Integer.class);\n     assertNull(nullIntObject);\n   }\n+  \n+  public void testReadWriteTwoStrings() throws IOException {\n+    Gson gson= new Gson();\n+    CharArrayWriter writer= new CharArrayWriter();\n+    writer.write(gson.toJson(\"one\").toCharArray());\n+    writer.write(gson.toJson(\"two\").toCharArray());\n+    CharArrayReader reader = new CharArrayReader(writer.toCharArray());\n+    JsonParser parser = new JsonParser();\n+    AsyncReader asyncReader = parser.parseAsync(reader);\n+    String actualOne = gson.fromJson(asyncReader.readElement(), String.class);\n+    assertEquals(\"one\", actualOne);\n+    String actualTwo = gson.fromJson(asyncReader.readElement(), String.class);\n+    assertEquals(\"two\", actualTwo);\n+  }\n+  \n+  public void testReadWriteTwoObjects() throws IOException {\n+    Gson gson= new Gson();\n+    CharArrayWriter writer= new CharArrayWriter();\n+    BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, \"one\");\n+    writer.write(gson.toJson(expectedOne).toCharArray());\n+    BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, \"two\");\n+    writer.write(gson.toJson(expectedTwo).toCharArray());\n+    CharArrayReader reader = new CharArrayReader(writer.toCharArray());\n+    JsonParser parser = new JsonParser();\n+    AsyncReader asyncReader = parser.parseAsync(reader);\n+    BagOfPrimitives actualOne = gson.fromJson(asyncReader.readElement(), BagOfPrimitives.class);\n+    assertEquals(\"one\", actualOne.stringValue);\n+    BagOfPrimitives actualTwo = gson.fromJson(asyncReader.readElement(), BagOfPrimitives.class);\n+    assertEquals(\"two\", actualTwo.stringValue);\n+  }\n }", "timestamp": 1241821354, "metainfo": ""}