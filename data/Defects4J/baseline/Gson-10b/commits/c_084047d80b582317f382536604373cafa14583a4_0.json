{"sha": "084047d80b582317f382536604373cafa14583a4", "log": "Reintroduce string pooling in JsonReader.  This makes Hotspot slower. From my before/after measurements using ParseBenchmark, times in microseconds:   TWEETS: 350 -> 370 (+6%)   READER_SHORT: 77 -> 76 (-1%)   READER_LONG: 870 -> 940 (+8%)    But it makes Dalvik faster by a greater margin. These before/after measurements use times in milliseconds:   TWEETS: 25 -> 20 (-20%)   READER_SHORT: 5.6 -> 4.7 (-16%)   READER_LONG: 52 -> 47 (-10%)    It's a net win because we're saving a greater fraction of time, and because we're helping the platform that needs the most help. We're paying microseconds on Hotspot to gain milliseconds on Dalvik.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n   private static final int PEEKED_NUMBER = 16;\n   private static final int PEEKED_EOF = 17;\n \n+  /* State machine when parsing numbers */\n+  private static final int NUMBER_CHAR_NONE = 0;\n+  private static final int NUMBER_CHAR_SIGN = 1;\n+  private static final int NUMBER_CHAR_DIGIT = 2;\n+  private static final int NUMBER_CHAR_DECIMAL = 3;\n+  private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;\n+  private static final int NUMBER_CHAR_EXP_E = 5;\n+  private static final int NUMBER_CHAR_EXP_SIGN = 6;\n+  private static final int NUMBER_CHAR_EXP_DIGIT = 7;\n+\n   /** The input JSON. */\n   private final Reader in;\n \n    * fails.\n    */\n   private String peekedString;\n+\n+  /**\n+   * A pool of short strings intended to prevent object allocation.\n+   */\n+  private static final StringPool stringPool = new StringPool();\n \n   /*\n    * The nesting stack. Using a manual array rather than an ArrayList saves 20%.\n     return peeked = peeking;\n   }\n \n-  private static final int NUMBER_CHAR_NONE = 0;\n-  private static final int NUMBER_CHAR_SIGN = 1;\n-  private static final int NUMBER_CHAR_DIGIT = 2;\n-  private static final int NUMBER_CHAR_DECIMAL = 3;\n-  private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;\n-  private static final int NUMBER_CHAR_EXP_E = 5;\n-  private static final int NUMBER_CHAR_EXP_SIGN = 6;\n-  private static final int NUMBER_CHAR_EXP_DIGIT = 7;\n-\n   private int peekNumber() throws IOException {\n     // Like nextNonWhitespace, this uses locals 'p' and 'l' to save inner-loop field access.\n     char[] buffer = this.buffer;\n     // Like nextNonWhitespace, this uses locals 'p' and 'l' to save inner-loop field access.\n     char[] buffer = this.buffer;\n     StringBuilder builder = null;\n+    int hashCode = 0;\n     while (true) {\n       int p = pos;\n       int l = limit;\n         if (c == quote) {\n           pos = p;\n           if (builder == null) {\n-            return new String(buffer, start, p - start - 1);\n+            return stringPool.get(buffer, start, p - start - 1, hashCode);\n           } else {\n             builder.append(buffer, start, p - start - 1);\n             return builder.toString();\n           start = p;\n \n         } else if (c == '\\n') {\n+          hashCode = (hashCode * 31) + c;\n           lineNumber++;\n           lineStart = p;\n+        } else {\n+          hashCode = (hashCode * 31) + c;\n         }\n       }\n \n--- a/gson/src/main/java/com/google/gson/stream/StringPool.java\n+++ b/gson/src/main/java/com/google/gson/stream/StringPool.java\n /**\n  * A pool of string instances. Unlike the {@link String#intern() VM's\n  * interned strings}, this pool provides no guarantee of reference equality.\n- * It is intended only to save allocations. This class is not thread safe.\n+ * It is intended only to save allocations.\n+ *\n+ * <p>This class is safe for concurrent use.\n  */\n final class StringPool {\n-\n-  private final String[] pool = new String[512];\n+  /**\n+   * The maximum length of strings to add to the pool. Strings longer than this\n+   * don't benefit from pooling because we spend more time on pooling than we\n+   * save on garbage collection.\n+   */\n+  private static final int MAX_LENGTH = 20;\n+  private final String[] pool = new String[1024];\n \n   /**\n    * Returns a string equal to {@code new String(array, start, length)}.\n    */\n-  public String get(char[] array, int start, int length) {\n-    // Compute an arbitrary hash of the content\n-    int hashCode = 0;\n-    for (int i = start; i < start + length; i++) {\n-      hashCode = (hashCode * 31) + array[i];\n+  public String get(char[] array, int start, int length, int hashCode) {\n+    if (length > StringPool.MAX_LENGTH) {\n+      return new String(array, start, length);\n     }\n \n     // Pick a bucket using Doug Lea's supplemental secondaryHash function (from HashMap)", "timestamp": 1347293613, "metainfo": ""}