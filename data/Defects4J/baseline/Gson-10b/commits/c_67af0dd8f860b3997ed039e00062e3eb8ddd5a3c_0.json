{"sha": "67af0dd8f860b3997ed039e00062e3eb8ddd5a3c", "log": "Added javadoc comment in JsonAdapter explaining the usage for fields. Added a (broken) test the ensure a field annotation for JsonAdapter supersedes a class annotation.", "commit": "\n--- a/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java\n+++ b/gson/src/main/java/com/google/gson/annotations/JsonAdapter.java\n import java.lang.annotation.Target;\n \n import com.google.gson.TypeAdapter;\n+import com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.Part;\n+import com.google.gson.functional.JsonAdapterAnnotationOnFieldsTest.PartJsonAdapter;\n \n /**\n  * An annotation that indicates the Gson {@link TypeAdapter} to use with a class or a field.\n  * </pre>\n  *\n  * Since User class specified UserJsonAdapter.class in &#64JsonAdapter annotation, it\n- * will automatically be invoked to serialize/deserialize User instances.\n+ * will automatically be invoked to serialize/deserialize User instances. <br>\n  *\n  * If the UserJsonAdapter needs a constructor other than a no-args constructor, you must register\n  * an {@link com.google.gson.InstanceCreator} for it.\n- * \n+ *\n+ * <p> Here is an example of how to apply this annotation to a field.\n+ * <pre>\n+ * private static final class Gadget {\n+ *   &#64JsonAdapter(UserJsonAdapter2.class)\n+ *   final User user;\n+ *   Gadget(User user) {\n+ *     this.user = user;\n+ *   }\n+ * }\n+ * </pre>\n+ * The above annotation will ensure UserJsonAdapter2 supersedes UserJsonAdapter for the user\n+ * field of the Gadget class.\n+ *\n  * @since 2.3\n  *\n  * @author Inderjeet Singh\n--- a/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java\n   public void testRegisteredTypeAdapterOverridesFieldAnnotation() {\n     Gson gson = new GsonBuilder()\n       .registerTypeAdapter(Part.class, new TypeAdapter<Part>() {\n-        @Override public void write(JsonWriter out, Part user) throws IOException {\n+        @Override public void write(JsonWriter out, Part part) throws IOException {\n           out.value(\"registeredAdapter\");\n         }\n         @Override public Part read(JsonReader in) throws IOException {\n     assertEquals(\"{\\\"part\\\":\\\"registeredAdapter\\\"}\", json);\n     Gadget gadget = gson.fromJson(\"{'part':'registeredAdapterValue'}\", Gadget.class);\n     assertEquals(\"registeredAdapterValue\", gadget.part.name);\n+  }\n+\n+  public void testFieldAnnotationSupersedesClassAnnotation() {\n+    Gson gson = new Gson();\n+    String json = gson.toJson(new Computer2(new User(\"Inderjeet Singh\")));\n+    assertEquals(\"{\\\"user\\\":\\\"userJsonAdapter2\\\"}\", json);\n+    Computer2 target = gson.fromJson(\"{'user':'userJsonAdapter2Value'}\", Computer2.class);\n+    assertEquals(\"userJsonAdapter2Value\", target.user.name);\n   }\n \n   private static final class Gadget {\n   }\n \n   private static final class Computer {\n-    @JsonAdapter(UserJsonAdapter.class)\n     final User user;\n     Computer(User user) {\n       this.user = user;\n       return new User(firstName + \" \" + lastName);\n     }\n   }\n+\n+  private static final class Computer2 {\n+    // overrides the JsonAdapter annotation of User with this\n+    @JsonAdapter(UserJsonAdapter2.class)\n+    final User user;\n+    Computer2(User user) {\n+      this.user = user;\n+    }\n+  }\n+  private static final class UserJsonAdapter2 extends TypeAdapter<User> {\n+    @Override public void write(JsonWriter out, User user) throws IOException {\n+      out.value(\"userJsonAdapter2\");\n+    }\n+    @Override public User read(JsonReader in) throws IOException {\n+      return new User(in.nextString());\n+    }\n+  }\n }", "timestamp": 1394353266, "metainfo": ""}