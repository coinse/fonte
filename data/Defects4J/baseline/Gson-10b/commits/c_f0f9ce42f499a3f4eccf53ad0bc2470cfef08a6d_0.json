{"sha": "f0f9ce42f499a3f4eccf53ad0bc2470cfef08a6d", "log": "using only Jackson iso8601 implementation for UTC date adapter", "commit": "\n--- a/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java\n+++ b/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java\n package com.google.gson.typeadapters;\n \n import java.io.IOException;\n-import java.text.DateFormat;\n import java.text.ParseException;\n import java.text.ParsePosition;\n-import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import com.google.gson.stream.JsonWriter;\n \n public final class UtcDateTypeAdapter extends TypeAdapter<Date> {\n-  private final DateFormat iso8601Format;\n   private final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone(\"UTC\");\n-\n-  public UtcDateTypeAdapter() {\n-    this(false);\n-  }\n-\n-  public UtcDateTypeAdapter(boolean jdk6Compatible) {\n-    if (jdk6Compatible) {\n-      this.iso8601Format = null;\n-    } else {\n-      // XXX is only supported by JDK 1.7+\n-      this.iso8601Format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", Locale.US);\n-      this.iso8601Format.setTimeZone(UTC_TIME_ZONE);\n-    }\n-  }\n \n   @Override\n   public void write(JsonWriter out, Date date) throws IOException {\n     if (date == null) {\n       out.nullValue();\n     }\n-    String value = null;\n-    if (iso8601Format != null) {\n-      synchronized (iso8601Format) {\n-        // Need synchronization since JDK DateFormat classes are not thread-safe\n-        try {\n-          value = iso8601Format.format(date);\n-        } catch (Exception e) {\n-          value = null;\n-        }\n-      }\n-    }\n-    if (value == null) { // Try other formatter\n-      value = format(date, true, UTC_TIME_ZONE);\n-    }\n+    String value = format(date, true, UTC_TIME_ZONE);\n     out.value(value);\n   }\n \n         return null;\n       default:\n         String date = in.nextString();\n-        if (iso8601Format != null) {\n-          synchronized (iso8601Format) {\n-            // Need synchronization since JDK DateFormat classes are not thread-safe\n-            try {\n-              return iso8601Format.parse(date);\n-            } catch (Exception e) {\n-              // Ignore and try the other parser\n-            }\n-          }\n-        }\n         // Instead of using iso8601Format.parse(value), we use Jackson's date parsing\n         // This is because Android doesn't support XXX because it is JDK 1.6\n         return parse(date, new ParsePosition(0));\n--- a/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java\n+++ b/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java\n \n package com.google.gson.typeadapters;\n \n+import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n+import java.util.Locale;\n import java.util.TimeZone;\n \n import junit.framework.TestCase;\n    */\n   public void testUtcDatesOnJdkBefore1_7() {\n     Gson gson = new GsonBuilder()\n-      .registerTypeAdapter(Date.class, new UtcDateTypeAdapter(true))\n+      .registerTypeAdapter(Date.class, new UtcDateTypeAdapter())\n       .create();\n     gson.fromJson(\"'2014-12-05T04:00:00.000Z'\", Date.class);\n   }\n+\n+  public void testUtcWithJdk7Default() {\n+    Date expected = new Date();\n+    SimpleDateFormat iso8601Format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", Locale.US);\n+    iso8601Format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+    String expectedJson = \"\\\"\" + iso8601Format.format(expected) + \"\\\"\";\n+    String actualJson = gson.toJson(expected);\n+    assertEquals(expectedJson, actualJson);\n+    Date actual = gson.fromJson(expectedJson, Date.class);\n+    assertEquals(expected.getTime(), actual.getTime());\n+  }\n }", "timestamp": 1417768105, "metainfo": ""}