{"sha": "57ea7ff9f36409039ede0012680a8b0d3a2c02a2", "log": "Restored this behavior for serialization: (as verified in CustomSerializerTest) First preference: a type adapter registered for the runtime type Second preference: a type adapter registered for the declared type Third preference: reflective type adapter for the runtime type (if it is a sub class of the declared type) Fourth preference: reflective type adapter for the declared type", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java\n   @SuppressWarnings(\"unchecked\")\n   @Override\n   public void write(JsonWriter writer, T value) throws IOException {\n-    TypeAdapter t = delegate;\n-    if (delegate instanceof ReflectiveTypeAdapter) {\n-      Type runtimeType = Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n-      if (runtimeType != type) {\n-        t = context.getAdapter(TypeToken.get(runtimeType));\n+    // Order of preference for choosing type adapters\n+    // First preference: a type adapter registered for the runtime type\n+    // Second preference: a type adapter registered for the declared type\n+    // Third preference: reflective type adapter for the runtime type (if it is a sub class of the declared type)\n+    // Fourth preference: reflective type adapter for the declared type\n+\n+    TypeAdapter chosen = delegate;\n+    Type runtimeType = Reflection.getRuntimeTypeIfMoreSpecific(type, value);\n+    if (runtimeType != type) {\n+      TypeAdapter runtimeTypeAdapter = context.getAdapter(TypeToken.get(runtimeType));\n+      if (!(runtimeTypeAdapter instanceof ReflectiveTypeAdapter)) {\n+        // The user registered a type adapter for the runtime type, so we will use that\n+        chosen = runtimeTypeAdapter;\n+      } else if (!(delegate instanceof ReflectiveTypeAdapter)) {\n+        // The user registered a type adapter for Base class, so we prefer it over the\n+        // reflective type adapter for the runtime type\n+        chosen = delegate;\n+      } else {\n+        // Use the type adapter for runtime type\n+        chosen = runtimeTypeAdapter;\n       }\n     }\n-    t.write(writer, value);\n+    chosen.write(writer, value);\n   }\n }", "timestamp": 1313115482, "metainfo": ""}