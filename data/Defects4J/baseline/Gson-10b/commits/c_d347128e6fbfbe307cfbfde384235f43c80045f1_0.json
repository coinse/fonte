{"sha": "d347128e6fbfbe307cfbfde384235f43c80045f1", "log": "Implemented support for serializing objects of type Bar<Foo> without the need to specify their type explicitly in toJson method.", "commit": "\n--- a/gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ReflectingFieldNavigator.java\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n import java.lang.reflect.Type;\n+import java.lang.reflect.TypeVariable;\n import java.util.ArrayList;\n import java.util.List;\n \n           || exclusionStrategy.shouldSkipClass(fieldAttributes.getDeclaredClass())) {\n         continue; // skip\n       }\n-      Type resolvedTypeOfField = fieldAttributes.getResolvedType();\n+      Type resolvedTypeOfField = getMoreSpecificType(fieldAttributes.getResolvedType(), obj, fieldAttributes);\n       boolean visitedWithCustomHandler =\n         visitor.visitFieldUsingCustomHandler(fieldAttributes, resolvedTypeOfField, obj);\n       if (!visitedWithCustomHandler) {\n         }\n       }\n     }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private Type getMoreSpecificType(Type type, Object obj, FieldAttributes fieldAttributes) {\n+    try {\n+      if (obj != null && (Object.class == type || type instanceof TypeVariable)) {\n+        Object fieldValue = fieldAttributes.get(obj);\n+        if (fieldValue != null) {\n+          type = fieldValue.getClass();\n+        }\n+      }\n+    } catch (IllegalAccessException e) {\n+    }\n+    return type;\n   }\n \n   private List<FieldAttributes> getAllFields(Type type, Type declaredType) {\n--- a/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java\n import java.util.Arrays;\n import java.util.Collection;\n \n-import junit.framework.AssertionFailedError;\n import junit.framework.TestCase;\n \n import com.google.gson.Gson;\n   public void testParameterizedObject() {\n     Bar<Foo> bar = new Bar<Foo>(new Foo(1));\n     String expectedJson = \"{\\\"t\\\":{\\\"b\\\":1}}\";\n-    try {\n-      String json = gson.toJson(bar);\n-      assertEquals(expectedJson, json);\n-    } catch (AssertionFailedError expected) {\n-    }\n-    String json = gson.toJson(bar, new TypeToken<Bar<Foo>>(){}.getType());\n+    // Ensure that serialization works without specifying the type explicitly\n+    String json = gson.toJson(bar);\n+    assertEquals(expectedJson, json);\n+    // Ensure that serialization also works when the type is specified explicitly\n+    json = gson.toJson(bar, new TypeToken<Bar<Foo>>(){}.getType());\n     assertEquals(expectedJson, json);\n   }\n ", "timestamp": 1309032254, "metainfo": ""}