{"sha": "84c71409da812c1ccc62196ac2ff71f761bbf31b", "log": "Removed Gson type adapters for boolean, integer, float, double, String, BigDecimal and BigInteger. Switched Gson.fromJson() methods to use miniGson directly instead of using a DOM.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n \n package com.google.gson;\n \n-import com.google.gson.internal.$Gson$Types;\n-\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n-import java.math.BigDecimal;\n-import java.math.BigInteger;\n import java.net.InetAddress;\n import java.net.MalformedURLException;\n import java.net.URI;\n import java.util.TreeSet;\n import java.util.UUID;\n \n+import com.google.gson.internal.$Gson$Types;\n+\n /**\n  * List of all the default type adapters ({@link JsonSerializer}s, {@link JsonDeserializer}s,\n  * and {@link InstanceCreator}s.\n       new DefaultInetAddressAdapter();\n       private static final CollectionTypeAdapter COLLECTION_TYPE_ADAPTER = new CollectionTypeAdapter();\n   private static final MapTypeAdapter MAP_TYPE_ADAPTER = new MapTypeAdapter();\n-  private static final BigDecimalTypeAdapter BIG_DECIMAL_TYPE_ADAPTER = new BigDecimalTypeAdapter();\n-  private static final BigIntegerTypeAdapter BIG_INTEGER_TYPE_ADAPTER = new BigIntegerTypeAdapter();\n-\n-  private static final BooleanTypeAdapter BOOLEAN_TYPE_ADAPTER = new BooleanTypeAdapter();\n+\n   private static final ByteTypeAdapter BYTE_TYPE_ADAPTER = new ByteTypeAdapter();\n   private static final CharacterTypeAdapter CHARACTER_TYPE_ADAPTER = new CharacterTypeAdapter();\n-  private static final DoubleDeserializer DOUBLE_TYPE_ADAPTER = new DoubleDeserializer();\n-  private static final FloatDeserializer FLOAT_TYPE_ADAPTER = new FloatDeserializer();\n-  private static final IntegerTypeAdapter INTEGER_TYPE_ADAPTER = new IntegerTypeAdapter();\n   private static final LongDeserializer LONG_DESERIALIZER = new LongDeserializer();\n   private static final NumberTypeAdapter NUMBER_TYPE_ADAPTER = new NumberTypeAdapter();\n   private static final ShortTypeAdapter SHORT_TYPE_ADAPTER = new ShortTypeAdapter();\n-  private static final StringTypeAdapter STRING_TYPE_ADAPTER = new StringTypeAdapter();\n   private static final StringBuilderTypeAdapter STRING_BUILDER_TYPE_ADAPTER =\n       new StringBuilderTypeAdapter();\n   private static final StringBufferTypeAdapter STRING_BUFFER_TYPE_ADAPTER =\n     map.register(Time.class, TIME_TYPE_ADAPTER, true);\n     map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n-    map.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER, true);\n-    map.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER, true);\n     map.register(BitSet.class, BIT_SET_ADAPTER, true);\n \n     // Add primitive serializers\n-    map.register(Boolean.class, BOOLEAN_TYPE_ADAPTER, true);\n-    map.register(boolean.class, BOOLEAN_TYPE_ADAPTER, true);\n     map.register(Byte.class, BYTE_TYPE_ADAPTER, true);\n     map.register(byte.class, BYTE_TYPE_ADAPTER, true);\n     map.register(Character.class, CHARACTER_TYPE_ADAPTER, true);\n-    map.register(char.class, CHARACTER_TYPE_ADAPTER, true);\n-    map.register(Integer.class, INTEGER_TYPE_ADAPTER, true);\n-    map.register(int.class, INTEGER_TYPE_ADAPTER, true);\n     map.register(Number.class, NUMBER_TYPE_ADAPTER, true);\n     map.register(Short.class, SHORT_TYPE_ADAPTER, true);\n     map.register(short.class, SHORT_TYPE_ADAPTER, true);\n-    map.register(String.class, STRING_TYPE_ADAPTER, true);\n     map.register(StringBuilder.class, STRING_BUILDER_TYPE_ADAPTER, true);\n     map.register(StringBuffer.class, STRING_BUFFER_TYPE_ADAPTER, true);\n \n     map.register(Time.class, wrapDeserializer(TIME_TYPE_ADAPTER), true);\n     map.register(Calendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n     map.register(GregorianCalendar.class, GREGORIAN_CALENDAR_TYPE_ADAPTER, true);\n-    map.register(BigDecimal.class, BIG_DECIMAL_TYPE_ADAPTER, true);\n-    map.register(BigInteger.class, BIG_INTEGER_TYPE_ADAPTER, true);\n     map.register(BitSet.class, BIT_SET_ADAPTER, true);\n \n     // Add primitive deserializers\n-    map.register(Boolean.class, BOOLEAN_TYPE_ADAPTER, true);\n-    map.register(boolean.class, BOOLEAN_TYPE_ADAPTER, true);\n     map.register(Byte.class, BYTE_TYPE_ADAPTER, true);\n     map.register(byte.class, BYTE_TYPE_ADAPTER, true);\n     map.register(Character.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER), true);\n-    map.register(char.class, wrapDeserializer(CHARACTER_TYPE_ADAPTER), true);\n-    map.register(Double.class, DOUBLE_TYPE_ADAPTER, true);\n-    map.register(double.class, DOUBLE_TYPE_ADAPTER, true);\n-    map.register(Float.class, FLOAT_TYPE_ADAPTER, true);\n-    map.register(float.class, FLOAT_TYPE_ADAPTER, true);\n-    map.register(Integer.class, INTEGER_TYPE_ADAPTER, true);\n-    map.register(int.class, INTEGER_TYPE_ADAPTER, true);\n     map.register(Long.class, LONG_DESERIALIZER, true);\n     map.register(long.class, LONG_DESERIALIZER, true);\n     map.register(Number.class, NUMBER_TYPE_ADAPTER, true);\n     map.register(Short.class, SHORT_TYPE_ADAPTER, true);\n     map.register(short.class, SHORT_TYPE_ADAPTER, true);\n-    map.register(String.class, wrapDeserializer(STRING_TYPE_ADAPTER), true);\n     map.register(StringBuilder.class, wrapDeserializer(STRING_BUILDER_TYPE_ADAPTER), true);\n     map.register(StringBuffer.class, wrapDeserializer(STRING_BUFFER_TYPE_ADAPTER), true);\n \n     }\n   }\n \n-  private static final class BigDecimalTypeAdapter\n-      implements JsonSerializer<BigDecimal>, JsonDeserializer<BigDecimal> {\n-    public JsonElement serialize(BigDecimal src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src);\n-    }\n-\n-    public BigDecimal deserialize(JsonElement json, Type typeOfT,\n-        JsonDeserializationContext context) throws JsonParseException {\n-      try {\n-        return json.getAsBigDecimal();\n-      } catch (NumberFormatException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return BigDecimalTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n-  private static final class BigIntegerTypeAdapter\n-      implements JsonSerializer<BigInteger>, JsonDeserializer<BigInteger> {\n-\n-    public JsonElement serialize(BigInteger src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src);\n-    }\n-\n-    public BigInteger deserialize(JsonElement json, Type typeOfT,\n-        JsonDeserializationContext context) throws JsonParseException {\n-      try {\n-        return json.getAsBigInteger();\n-      } catch (NumberFormatException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return BigIntegerTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n   private static final class NumberTypeAdapter\n       implements JsonSerializer<Number>, JsonDeserializer<Number> {\n     public JsonElement serialize(Number src, Type typeOfSrc, JsonSerializationContext context) {\n     @Override\n     public String toString() {\n       return LongDeserializer.class.getSimpleName();\n-    }\n-  }\n-\n-  private static final class IntegerTypeAdapter\n-      implements JsonSerializer<Integer>, JsonDeserializer<Integer> {\n-    public JsonElement serialize(Integer src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src);\n-    }\n-\n-    public Integer deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      try {\n-        return json.getAsInt();\n-      } catch (NumberFormatException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return IntegerTypeAdapter.class.getSimpleName();\n     }\n   }\n \n     }\n   }\n \n-  private static final class FloatDeserializer implements JsonDeserializer<Float> {\n-    public Float deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      try {\n-        return json.getAsFloat();\n-      } catch (NumberFormatException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return FloatDeserializer.class.getSimpleName();\n-    }\n-  }\n-\n   static final class DoubleSerializer implements JsonSerializer<Double> {\n     private final boolean serializeSpecialFloatingPointValues;\n \n     }\n   }\n \n-  private static final class DoubleDeserializer implements JsonDeserializer<Double> {\n-    public Double deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      try {\n-        return json.getAsDouble();\n-      } catch (NumberFormatException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return DoubleDeserializer.class.getSimpleName();\n-    }\n-  }\n-\n   private static final class CharacterTypeAdapter\n       implements JsonSerializer<Character>, JsonDeserializer<Character> {\n     public JsonElement serialize(Character src, Type typeOfSrc, JsonSerializationContext context) {\n     }\n   }\n \n-  private static final class StringTypeAdapter\n-      implements JsonSerializer<String>, JsonDeserializer<String> {\n-    public JsonElement serialize(String src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src);\n-    }\n-\n-    public String deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      return json.getAsString();\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return StringTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n   private static final class StringBuilderTypeAdapter\n       implements JsonSerializer<StringBuilder>, JsonDeserializer<StringBuilder> {\n     public JsonElement serialize(StringBuilder src, Type typeOfSrc, JsonSerializationContext context) {\n     @Override\n     public String toString() {\n       return StringBufferTypeAdapter.class.getSimpleName();\n-    }\n-  }\n-\n-  private static final class BooleanTypeAdapter\n-      implements JsonSerializer<Boolean>, JsonDeserializer<Boolean> {\n-    public JsonElement serialize(Boolean src, Type typeOfSrc, JsonSerializationContext context) {\n-      return new JsonPrimitive(src);\n-    }\n-\n-    public Boolean deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n-        throws JsonParseException {\n-      try {\n-        return json.getAsBoolean();\n-      } catch (UnsupportedOperationException e) {\n-        throw new JsonSyntaxException(e);\n-      } catch (IllegalStateException e) {\n-        throw new JsonSyntaxException(e);\n-      }\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return BooleanTypeAdapter.class.getSimpleName();\n     }\n   }\n \n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     if (json == null) {\n       return null;\n     }\n-    StringReader reader = new StringReader(json);\n-    T target = (T) fromJson(reader, typeOfT);\n-    return target;\n+    try {\n+      TypeAdapter<T> typeAdapter = (TypeAdapter<T>)miniGson.getAdapter(TypeToken.get(typeOfT));\n+      return typeAdapter.fromJson(json);\n+    } catch (IllegalStateException e) {\n+      // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\n+      throw new JsonSyntaxException(e);\n+    } catch (IOException e) {\n+      // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\n+      throw new JsonSyntaxException(e);\n+    }\n   }\n \n   /**\n    */\n   @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(JsonReader reader, Type typeOfT) throws JsonIOException, JsonSyntaxException {\n+    if (reader == null) {\n+      // TODO(inder): remove this null check since we didnt have it in a previously released version\n+      return null;\n+    }\n     boolean oldLenient = reader.isLenient();\n     reader.setLenient(true);\n     try {\n-      JsonElement root = Streams.parse(reader);\n-      return (T) fromJson(root, typeOfT);\n+      TypeAdapter<T> typeAdapter = (TypeAdapter<T>)miniGson.getAdapter(TypeToken.get(typeOfT));\n+      return typeAdapter.read(reader);\n+    } catch (IllegalStateException e) {\n+      // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\n+      throw new JsonSyntaxException(e);\n+    } catch (IOException e) {\n+      // TODO(inder): Figure out whether it is indeed right to rethrow this as JsonSyntaxException\n+      throw new JsonSyntaxException(e);\n     } finally {\n       reader.setLenient(oldLenient);\n     }", "timestamp": 1313723586, "metainfo": ""}