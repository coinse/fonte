{"sha": "bcd1baefd5ce2ac649cf1cb51deba706c75bfb5a", "log": "deleted unused visitCollectionField method in the visitor. All of this functionality has now been replaced with the default CollectionTypeAdapter", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonArrayDeserializationVisitor.java\n     throw new UnsupportedOperationException();\n   }\n \n-  public void visitCollectionField(Field f, Type typeOfF, Object obj) {\n-    throw new UnsupportedOperationException();\n-  }\n-\n   public void visitObjectField(Field f, Type typeOfF, Object obj) {\n     throw new UnsupportedOperationException();\n   }\n--- a/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonObjectDeserializationVisitor.java\n     }\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  public void visitCollectionField(Field f, Type typeOfF, Object obj) {\n-    try {\n-      JsonObject jsonObject = json.getAsJsonObject();\n-      String fName = getFieldName(f);\n-      JsonArray jsonArray = (JsonArray) jsonObject.get(fName);\n-      if (jsonArray != null) {\n-        Collection collection = (Collection) objectConstructor.construct(typeOfF);\n-        f.set(obj, collection);\n-        Type childType = TypeUtils.getActualTypeForFirstTypeVariable(typeOfF);\n-        for (JsonElement jsonChild : jsonArray) {\n-          Object child = visitChild(childType, jsonChild);\n-          if (childType == Object.class) {\n-            throw new JsonParseException(fName +\n-                \" can not be a raw collection. Try making it a genericized collection instead\");\n-          }\n-          collection.add(child);\n-        }\n-      } else {\n-        f.set(obj, null);\n-      }\n-    } catch (IllegalAccessException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n   public void visitArrayField(Field f, Type typeOfF, Object obj) {\n     try {\n       JsonObject jsonObject = json.getAsJsonObject();\n--- a/gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrimitiveDeserializationVisitor.java\n     throw new IllegalStateException();\n   }\n \n-  public void visitCollectionField(Field f, Type typeOfF, Object obj) {\n-    // should not be called since this case should invoke JsonArrayDeserializationVisitor\n-    throw new IllegalStateException();\n-  }\n-\n   public void visitArrayField(Field f, Type typeOfF, Object obj) {\n     // should not be called since this case should invoke JsonArrayDeserializationVisitor\n     throw new IllegalStateException();\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n     }\n   }\n \n-  public void visitCollectionField(Field f, Type typeOfF, Object obj) {\n-    if (isFieldNull(f, obj)) {\n-      if (serializeNulls) {\n-        addChildAsElement(f, JsonNull.INSTANCE);\n-      }\n-    } else {\n-      if (typeOfF == null) {\n-        throw new RuntimeException(\"Can not handle non-generic collections\");\n-      }\n-      Object collection = getFieldValue(f, obj);\n-      addAsChildOfObject(f, typeOfF, collection);\n-    }\n-  }\n-\n   @SuppressWarnings(\"unchecked\")\n   public void visitEnum(Object obj, Type objType) {\n     JsonSerializer serializer = serializers.getHandlerFor(objType);\n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n      * This is called to visit an object field of the current object\n      */\n     void visitObjectField(Field f, Type typeOfF, Object obj);\n-\n-    /**\n-     * This is called to visit a field of type Collection of the current object\n-     */\n-    void visitCollectionField(Field f, Type typeOfF, Object obj);\n \n     /**\n      * This is called to visit an array field of the current object\n         boolean visitedWithCustomHandler = \n           visitor.visitFieldUsingCustomHandler(f, actualTypeOfField, obj);\n         if (!visitedWithCustomHandler) {\n-          if (fieldTypeInfo.isCollectionOrArray()) {\n-            if (fieldTypeInfo.isArray()) {\n-              visitor.visitArrayField(f, actualTypeOfField, obj);\n-            } else { // must be Collection\n-              visitor.visitCollectionField(f, actualTypeOfField, obj);\n-            }\n+          if (fieldTypeInfo.isArray()) {\n+            visitor.visitArrayField(f, actualTypeOfField, obj);\n           } else if (fieldTypeInfo.isPrimitiveOrStringAndNotAnArray()) {\n             visitor.visitPrimitiveField(f, actualTypeOfField, obj);\n           } else {", "timestamp": 1226629828, "metainfo": ""}