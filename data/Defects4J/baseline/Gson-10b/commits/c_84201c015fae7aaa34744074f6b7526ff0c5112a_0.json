{"sha": "84201c015fae7aaa34744074f6b7526ff0c5112a", "log": "Do not peek during a \"skipValue\" if a value has already been peeked.", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n   public void skipValue() throws IOException {\n     int count = 0;\n     do {\n-      int p = doPeek();\n+      int p = peeked;\n+      if (p == PEEKED_NONE) {\n+        p = doPeek();\n+      }\n+\n       if (p == PEEKED_BEGIN_ARRAY) {\n         push(JsonScope.EMPTY_ARRAY);\n         count++;\n--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java\n     assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n   }\n \n+  public void testSkipArray() throws IOException {\n+    JsonReader reader = new JsonReader(reader(\n+        \"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\n+    reader.beginObject();\n+    assertEquals(\"a\", reader.nextName());\n+    reader.skipValue();\n+    assertEquals(\"b\", reader.nextName());\n+    assertEquals(123, reader.nextInt());\n+    reader.endObject();\n+    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n+  }\n+\n+  public void testSkipArrayAfterPeek() throws Exception {\n+    JsonReader reader = new JsonReader(reader(\n+        \"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\n+    reader.beginObject();\n+    assertEquals(\"a\", reader.nextName());\n+    assertEquals(BEGIN_ARRAY, reader.peek());\n+    reader.skipValue();\n+    assertEquals(\"b\", reader.nextName());\n+    assertEquals(123, reader.nextInt());\n+    reader.endObject();\n+    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n+  }\n+\n+  public void testSkipTopLevelObject() throws Exception {\n+    JsonReader reader = new JsonReader(reader(\n+        \"{\\\"a\\\": [\\\"one\\\", \\\"two\\\", \\\"three\\\"], \\\"b\\\": 123}\"));\n+    reader.skipValue();\n+    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n+  }\n+\n   public void testSkipObject() throws IOException {\n     JsonReader reader = new JsonReader(reader(\n         \"{\\\"a\\\": { \\\"c\\\": [], \\\"d\\\": [true, true, {}] }, \\\"b\\\": \\\"banana\\\"}\"));\n     assertEquals(\"a\", reader.nextName());\n     reader.skipValue();\n     assertEquals(\"b\", reader.nextName());\n+    reader.skipValue();\n+    reader.endObject();\n+    assertEquals(JsonToken.END_DOCUMENT, reader.peek());\n+  }\n+\n+  public void testSkipObjectAfterPeek() throws Exception {\n+    String json = \"{\" + \"  \\\"one\\\": { \\\"num\\\": 1 }\"\n+        + \", \\\"two\\\": { \\\"num\\\": 2 }\" + \", \\\"three\\\": { \\\"num\\\": 3 }\" + \"}\";\n+    JsonReader reader = new JsonReader(reader(json));\n+    reader.beginObject();\n+    assertEquals(\"one\", reader.nextName());\n+    assertEquals(BEGIN_OBJECT, reader.peek());\n+    reader.skipValue();\n+    assertEquals(\"two\", reader.nextName());\n+    assertEquals(BEGIN_OBJECT, reader.peek());\n+    reader.skipValue();\n+    assertEquals(\"three\", reader.nextName());\n     reader.skipValue();\n     reader.endObject();\n     assertEquals(JsonToken.END_DOCUMENT, reader.peek());", "timestamp": 1358188726, "metainfo": ""}