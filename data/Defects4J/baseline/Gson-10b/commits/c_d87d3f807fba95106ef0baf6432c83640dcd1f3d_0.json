{"sha": "d87d3f807fba95106ef0baf6432c83640dcd1f3d", "log": "Added functional tests for user defined exclusion strategy. Added test to ensure empty/null properties are added for the JsonObject.", "commit": "\n--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonObjectTest.java\n     String propertyName = \"property\";\n     assertFalse(jsonObj.has(propertyName));\n     assertNull(jsonObj.get(propertyName));\n-    \n+\n     JsonPrimitive value = new JsonPrimitive(\"blah\");\n     jsonObj.add(propertyName, value);\n     assertEquals(value, jsonObj.get(propertyName));\n-    \n+\n     JsonElement removedElement = jsonObj.remove(propertyName);\n     assertEquals(value, removedElement);\n     assertFalse(jsonObj.has(propertyName));\n   }\n-  \n-  public void testAddingNullProperties() throws Exception {\n+\n+  public void testAddingNullPropertyValue() throws Exception {\n     String propertyName = \"property\";\n     JsonObject jsonObj = new JsonObject();\n     jsonObj.add(propertyName, null);\n-    \n+\n     assertTrue(jsonObj.has(propertyName));\n-    \n+\n     JsonElement jsonElement = jsonObj.get(propertyName);\n     assertNotNull(jsonElement);\n     assertTrue(jsonElement.isJsonNull());\n   }\n-  \n+\n+  public void testAddingNullOrEmptyPropertyName() throws Exception {\n+    JsonObject jsonObj = new JsonObject();\n+    try {\n+      jsonObj.add(null, JsonNull.createJsonNull());\n+      fail(\"Should not allow null property names.\");\n+    } catch (IllegalArgumentException expected) { }\n+\n+    try {\n+      jsonObj.add(\"\", JsonNull.createJsonNull());\n+      fail(\"Should not allow empty property names.\");\n+    } catch (IllegalArgumentException expected) { }\n+\n+    try {\n+      jsonObj.add(\"   \\t\", JsonNull.createJsonNull());\n+      fail(\"Should not allow whitespace only property names.\");\n+    } catch (IllegalArgumentException expected) { }\n+  }\n+\n   public void testAddingBooleanProperties() throws Exception {\n     String propertyName = \"property\";\n     JsonObject jsonObj = new JsonObject();\n     jsonObj.addProperty(propertyName, true);\n-    \n+\n     assertTrue(jsonObj.has(propertyName));\n-    \n+\n     JsonElement jsonElement = jsonObj.get(propertyName);\n     assertNotNull(jsonElement);\n     assertTrue(jsonElement.getAsBoolean());\n   }\n-  \n+\n   public void testAddingStringProperties() throws Exception {\n     String propertyName = \"property\";\n     String value = \"blah\";\n \n     JsonObject jsonObj = new JsonObject();\n     jsonObj.addProperty(propertyName, value);\n-    \n+\n     assertTrue(jsonObj.has(propertyName));\n-    \n+\n     JsonElement jsonElement = jsonObj.get(propertyName);\n     assertNotNull(jsonElement);\n     assertEquals(value, jsonElement.getAsString());\n   }\n-  \n+\n   public void testAddingCharacterProperties() throws Exception {\n     String propertyName = \"property\";\n     char value = 'a';\n \n     JsonObject jsonObj = new JsonObject();\n     jsonObj.addProperty(propertyName, value);\n-    \n+\n     assertTrue(jsonObj.has(propertyName));\n-    \n+\n     JsonElement jsonElement = jsonObj.get(propertyName);\n     assertNotNull(jsonElement);\n     assertEquals(String.valueOf(value), jsonElement.getAsString());\n--- /dev/null\n+++ b/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java\n+/*\n+ * Copyright (C) 2008 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson.functional;\n+\n+import com.google.gson.ExclusionStrategy;\n+import com.google.gson.FieldAttributes;\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonPrimitive;\n+\n+import junit.framework.TestCase;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Performs some functional tests when Gson is instantiated with some common user defined\n+ * {@link ExclusionStrategy} objects.\n+ *\n+ * @author Inderjeet Singh\n+ * @author Joel Leitch\n+ */\n+public class ExclusionStrategyFunctionalTest extends TestCase {\n+  private SampleObjectForTest src;\n+  private Gson gson;\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    gson = new GsonBuilder()\n+        .setExclusionStrategies(new MyExclusionStrategy(String.class))\n+        .serializeNulls()\n+        .create();\n+    src = new SampleObjectForTest();\n+  }\n+\n+  public void testExclusionStrategySerialization() throws Exception {\n+    String json = gson.toJson(src);\n+    assertFalse(json.contains(\"\\\"stringField\\\"\"));\n+    assertFalse(json.contains(\"\\\"annotatedField\\\"\"));\n+    assertTrue(json.contains(\"\\\"longField\\\"\"));\n+  }\n+\n+  public void testExclusionStrategyDeserialization() throws Exception {\n+    JsonObject json = new JsonObject();\n+    json.add(\"annotatedField\", new JsonPrimitive(src.annotatedField + 5));\n+    json.add(\"stringField\", new JsonPrimitive(src.stringField + \"blah,blah\"));\n+    json.add(\"longField\", new JsonPrimitive(1212311L));\n+\n+    SampleObjectForTest target = gson.fromJson(json, SampleObjectForTest.class);\n+    assertEquals(1212311L, target.longField);\n+\n+    // assert excluded fields are set to the defaults\n+    assertEquals(src.annotatedField, target.annotatedField);\n+    assertEquals(src.stringField, target.stringField);\n+  }\n+\n+  @Retention(RetentionPolicy.RUNTIME)\n+  @Target({ElementType.FIELD})\n+  private static @interface Foo {\n+    // Field tag only annotation\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  private static class SampleObjectForTest {\n+    @Foo\n+    private final int annotatedField;\n+    private final String stringField;\n+    private final long longField;\n+    private final Class<?> clazzField;\n+\n+    public SampleObjectForTest() {\n+      annotatedField = 5;\n+      stringField = \"someDefaultValue\";\n+      longField = 1234;\n+      clazzField = String.class;\n+    }\n+  }\n+\n+  private static class MyExclusionStrategy implements ExclusionStrategy {\n+    private final Class<?> typeToSkip;\n+\n+    private MyExclusionStrategy(Class<?> typeToSkip) {\n+      this.typeToSkip = typeToSkip;\n+    }\n+\n+    public boolean shouldSkipClass(Class<?> clazz) {\n+      return (clazz == typeToSkip);\n+    }\n+\n+    public boolean shouldSkipField(FieldAttributes f) {\n+      return f.getAnnotation(Foo.class) != null;\n+    }\n+  }\n+}", "timestamp": 1255122727, "metainfo": ""}