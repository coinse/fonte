{"sha": "1885ba7dec27dd99fd8c9dc48bb6623708286584", "log": "Restore support for serializeSpecialFloatingPointValues.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n         .withoutDefaultFactories()\n         .factory(TypeAdapters.BOOLEAN_FACTORY)\n         .factory(TypeAdapters.INTEGER_FACTORY)\n-        .factory(TypeAdapters.DOUBLE_FACTORY)\n+        .factory(TypeAdapters.newFactory(double.class, Double.class,\n+            doubleAdapter(serializeSpecialFloatingPointValues)))\n+        .factory(TypeAdapters.newFactory(float.class, Float.class,\n+            floatAdapter(serializeSpecialFloatingPointValues)))\n         .factory(TypeAdapters.newFactory(long.class, Long.class,\n             longAdapter(longSerializationPolicy)))\n         .factory(TypeAdapters.STRING_FACTORY)\n         .factory(reflectiveTypeAdapterFactory);\n \n     this.miniGson = builder.build();\n+  }\n+\n+  private TypeAdapter<Double> doubleAdapter(boolean serializeSpecialFloatingPointValues) {\n+    if (serializeSpecialFloatingPointValues) {\n+      return TypeAdapters.DOUBLE;\n+    }\n+    return new TypeAdapter<Double>() {\n+      @Override public Double read(JsonReader reader) throws IOException {\n+        return reader.nextDouble();\n+      }\n+      @Override public void write(JsonWriter writer, Double value) throws IOException {\n+        checkValidFloatingPoint(value);\n+        writer.value(value);\n+      }\n+    };\n+  }\n+\n+  private TypeAdapter<Float> floatAdapter(boolean serializeSpecialFloatingPointValues) {\n+    if (serializeSpecialFloatingPointValues) {\n+      return TypeAdapters.FLOAT;\n+    }\n+    return new TypeAdapter<Float>() {\n+      @Override public Float read(JsonReader reader) throws IOException {\n+        return (float) reader.nextDouble();\n+      }\n+      @Override public void write(JsonWriter writer, Float value) throws IOException {\n+        checkValidFloatingPoint(value);\n+        writer.value(value);\n+      }\n+    };\n+  }\n+\n+  private void checkValidFloatingPoint(double value) {\n+    if (Double.isNaN(value) || Double.isInfinite(value)) {\n+      throw new IllegalArgumentException(value\n+          + \" is not a valid double value as per JSON specification. To override this\"\n+          + \" behavior, use GsonBuilder.serializeSpecialDoubleValues() method.\");\n+    }\n   }\n \n   private TypeAdapter<Long> longAdapter(LongSerializationPolicy longSerializationPolicy) {\n--- a/gson/src/main/java/com/google/gson/internal/bind/MiniGson.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/MiniGson.java\n       factories.add(TypeAdapters.BOOLEAN_FACTORY);\n       factories.add(TypeAdapters.INTEGER_FACTORY);\n       factories.add(TypeAdapters.DOUBLE_FACTORY);\n+      factories.add(TypeAdapters.FLOAT_FACTORY);\n       factories.add(TypeAdapters.LONG_FACTORY);\n       factories.add(TypeAdapters.STRING_FACTORY);\n     }\n--- a/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java\n   public static final TypeAdapter.Factory DOUBLE_FACTORY\n       = newFactory(double.class, Double.class, DOUBLE);\n \n+  public static final TypeAdapter<Float> FLOAT = new TypeAdapter<Float>() {\n+    public Float read(JsonReader reader) throws IOException {\n+      return (float) reader.nextDouble();\n+    }\n+    public void write(JsonWriter writer, Float value) throws IOException {\n+      writer.value(value);\n+    }\n+  };\n+\n+  public static final TypeAdapter.Factory FLOAT_FACTORY\n+      = newFactory(float.class, Float.class, FLOAT);\n+\n   public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {\n     public String read(JsonReader reader) throws IOException {\n       return reader.nextString();", "timestamp": 1312499569, "metainfo": ""}