{"sha": "51a9596d066a4b38f7da2975ba659e8400728208", "log": "Make Dates test slightly more robust to time of day issues. The test still fails outside of PST when run as a part of a larger suite because GSON captures a static snapshot of the system time zone at GSON-creation time.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n import com.google.gson.JsonElement;\n import com.google.gson.JsonParseException;\n import com.google.gson.reflect.TypeToken;\n-\n-import junit.framework.TestCase;\n-\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.sql.Time;\n import java.sql.Timestamp;\n import java.text.DateFormat;\n-import java.text.SimpleDateFormat;\n import java.util.Arrays;\n import java.util.BitSet;\n import java.util.Calendar;\n import java.util.TimeZone;\n import java.util.TreeSet;\n import java.util.UUID;\n+import junit.framework.TestCase;\n \n /**\n  * Functional test for Json serialization and deserialization for common classes for which default\n   }\n \n   public void testDefaultDateSerialization() {\n-    Date now = new Date();\n-    String json = gson.toJson(now);\n-    assertEquals(\"\\\"\" + DateFormat.getDateTimeInstance().format(now) + \"\\\"\", json);\n+    Date now = new Date(1315806903103L);\n+    String json = gson.toJson(now);\n+    assertEquals(\"\\\"Sep 11, 2011 10:55:03 PM\\\"\", json);\n   }\n \n   public void testDefaultDateDeserialization() {\n     String json = \"'Dec 13, 2009 07:18:02 AM'\";\n     Date extracted = gson.fromJson(json, Date.class);\n     assertEqualsDate(extracted, 2009, 11, 13);\n-    assertEqualsTime(extracted, 7, 18, 02);\n+    assertEqualsTime(extracted, 7, 18, 2);\n   }\n \n   // Date can not directly be compared with another instance since the deserialization loses the\n     String json = \"'Dec 3, 2009 1:18:02 PM'\";\n     Timestamp extracted = gson.fromJson(json, Timestamp.class);\n     assertEqualsDate(extracted, 2009, 11, 3);\n-    assertEqualsTime(extracted, 13, 18, 02);\n+    assertEqualsTime(extracted, 13, 18, 2);\n   }\n \n   public void testDefaultJavaSqlTimeSerialization() {\n   public void testDefaultJavaSqlTimeDeserialization() {\n     String json = \"'1:18:02 PM'\";\n     Time extracted = gson.fromJson(json, Time.class);\n-    assertEqualsTime(extracted, 13, 18, 02);\n+    assertEqualsTime(extracted, 13, 18, 2);\n   }\n \n   public void testDefaultDateSerializationUsingBuilder() throws Exception {\n     Gson gson = new GsonBuilder().create();\n-    Date now = new Date();\n-    String json = gson.toJson(now);\n-    assertEquals(\"\\\"\" + DateFormat.getDateTimeInstance().format(now) + \"\\\"\", json);\n+    Date now = new Date(1315806903103L);\n+    String json = gson.toJson(now);\n+    assertEquals(\"\\\"Sep 11, 2011 10:55:03 PM\\\"\", json);\n   }\n \n   public void testDefaultDateDeserializationUsingBuilder() throws Exception {\n     Gson gson = new GsonBuilder().create();\n-    Date now = new Date();\n+    Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n     Date extracted = gson.fromJson(json, Date.class);\n     assertEquals(now.toString(), extracted.toString());\n \n   public void testDateSerializationWithPattern() throws Exception {\n     String pattern = \"yyyy-MM-dd\";\n-    DateFormat formatter = new SimpleDateFormat(pattern);\n     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();\n-    Date now = new Date();\n-    String json = gson.toJson(now);\n-    assertEquals(\"\\\"\" + formatter.format(now) + \"\\\"\", json);\n+    Date now = new Date(1315806903103L);\n+    String json = gson.toJson(now);\n+    assertEquals(\"\\\"2011-09-11\\\"\", json);\n   }\n \n   @SuppressWarnings(\"deprecation\")\n   public void testDateDeserializationWithPattern() throws Exception {\n     String pattern = \"yyyy-MM-dd\";\n     Gson gson = new GsonBuilder().setDateFormat(DateFormat.FULL).setDateFormat(pattern).create();\n-    Date now = new Date();\n+    Date now = new Date(1315806903103L);\n     String json = gson.toJson(now);\n     Date extracted = gson.fromJson(json, Date.class);\n     assertEquals(now.getYear(), extracted.getYear());\n \n   public void testDateSerializationWithPatternNotOverridenByTypeAdapter() throws Exception {\n     String pattern = \"yyyy-MM-dd\";\n-    DateFormat formatter = new SimpleDateFormat(pattern);\n     Gson gson = new GsonBuilder()\n         .setDateFormat(pattern)\n         .registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {\n           public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n               throws JsonParseException {\n-            return new Date();\n+            return new Date(1315806903103L);\n           }\n         })\n         .create();\n \n-    Date now = new Date();\n-    String expectedDateString = \"\\\"\" + formatter.format(now) + \"\\\"\";\n-    String json = gson.toJson(now);\n-    assertEquals(expectedDateString, json);\n+    Date now = new Date(1315806903103L);\n+    String json = gson.toJson(now);\n+    assertEquals(\"\\\"2011-09-11\\\"\", json);\n   }\n \n   // http://code.google.com/p/google-gson/issues/detail?id=230", "timestamp": 1315807368, "metainfo": ""}