{"sha": "2034090b15cfef51d81e860b1d49340147378618", "log": "Changed version to 1.3  Made JsonParser.parse a non-static method.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n   @SuppressWarnings(\"unchecked\")\n   public <T> T fromJson(Reader json, Type typeOfT) throws JsonParseException {\n     try {\n-      JsonElement root = JsonParser.parse(json);\n+      JsonElement root = new JsonParser().parse(json);\n       JsonDeserializationContext context = new JsonDeserializationContextDefault(\n           createDefaultObjectNavigatorFactory(), deserializers, objectConstructor);\n       T target = (T) context.deserialize(root, typeOfT);\n--- a/gson/src/main/java/com/google/gson/JsonParser.java\n+++ b/gson/src/main/java/com/google/gson/JsonParser.java\n    * @throws JsonParseException if the specified text is not valid JSON\n    * @since 1.3\n    */\n-  public static JsonElement parse(String json) throws JsonParseException {\n+  public JsonElement parse(String json) throws JsonParseException {\n     return parse(new StringReader(json));\n   }\n   \n    * @throws JsonParseException if the specified text is not valid JSON\n    * @since 1.3\n    */\n-  public static JsonElement parse(Reader json) throws JsonParseException {\n+  public JsonElement parse(Reader json) throws JsonParseException {\n     try {\n       JsonParserImpl parser = new JsonParserImpl(json);\n       return parser.parse();\n--- a/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n+++ b/gson/src/main/java/com/google/gson/JsonPrintFormatter.java\n       }\n     }\n     \n-    public void endObject(JsonObject object) throws IOException {\n+    public void endObject(JsonObject object) {\n       writer.endObject();\n     }\n \n--- a/gson/src/test/java/com/google/gson/JsonParserTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonParserTest.java\n  */\n public class JsonParserTest extends TestCase {\n   \n+  private JsonParser parser;\n+  \n+  @Override\n+  protected void setUp() throws Exception {\n+    super.setUp();\n+    parser = new JsonParser();\n+  }\n+  \n   public void testParseString() {\n     String json = \"{a:10,b:'c'}\";\n-    JsonElement e = JsonParser.parse(json);\n+    JsonElement e = parser.parse(json);\n     assertTrue(e.isJsonObject());\n     assertEquals(10, e.getAsJsonObject().get(\"a\").getAsInt());\n     assertEquals(\"c\", e.getAsJsonObject().get(\"b\").getAsString());\n \n   public void testParseReader() {\n     StringReader reader = new StringReader(\"{a:10,b:'c'}\");\n-    JsonElement e = JsonParser.parse(reader);\n+    JsonElement e = parser.parse(reader);\n     assertTrue(e.isJsonObject());\n     assertEquals(10, e.getAsJsonObject().get(\"a\").getAsInt());\n     assertEquals(\"c\", e.getAsJsonObject().get(\"b\").getAsString());\n--- a/gson/src/test/java/com/google/gson/functional/JsonParserTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonParserTest.java\n   public void testChangingCustomTreeAndDeserializing() {\n     StringReader json = \n       new StringReader(\"{'stringValue':'no message','intValue':10,'longValue':20}\");\n-    JsonObject obj = (JsonObject) JsonParser.parse(json);\n+    JsonObject obj = (JsonObject) new JsonParser().parse(json);\n     obj.remove(\"stringValue\");\n     obj.addProperty(\"stringValue\", \"fooBar\");\n     BagOfPrimitives target = gson.fromJson(obj, BagOfPrimitives.class);", "timestamp": 1238522003, "metainfo": ""}