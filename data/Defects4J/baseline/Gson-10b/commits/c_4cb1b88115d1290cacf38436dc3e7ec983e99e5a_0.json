{"sha": "4cb1b88115d1290cacf38436dc3e7ec983e99e5a", "log": "Test for registerTypeHierarchyAdapter() using Date.class  Fixes issue 352.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java\n import com.google.gson.common.TestTypes.ClassWithCustomTypeConverter;\n import com.google.gson.reflect.TypeToken;\n \n+import java.util.Date;\n import junit.framework.TestCase;\n \n import java.lang.reflect.Type;\n     assertNull(actual.wrappedData);\n   }\n \n+  // Test created from Issue 352\n+  public void testRegisterHierarchyAdapterForDate() {\n+    Gson gson = new GsonBuilder()\n+        .registerTypeHierarchyAdapter(Date.class, new DateTypeAdapter())\n+        .create();\n+    assertEquals(\"0\", gson.toJson(new Date(0)));\n+    assertEquals(\"0\", gson.toJson(new java.sql.Date(0)));\n+    assertEquals(new Date(0), gson.fromJson(\"0\", Date.class));\n+    assertEquals(new java.sql.Date(0), gson.fromJson(\"0\", java.sql.Date.class));\n+  }\n+\n   private static class DataHolder {\n     final String data;\n \n       return new DataHolder(jsonElement.getAsString());\n     }\n   }\n+\n+  private static class DateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n+    public Date deserialize(JsonElement json, Type typeOfT,\n+        JsonDeserializationContext context) throws JsonParseException {\n+      return typeOfT == Date.class\n+          ? new Date(json.getAsLong())\n+          : new java.sql.Date(json.getAsLong());\n+    }\n+    public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {\n+      return new JsonPrimitive(src.getTime());\n+    }\n+  }\n }", "timestamp": 1325143653, "metainfo": ""}