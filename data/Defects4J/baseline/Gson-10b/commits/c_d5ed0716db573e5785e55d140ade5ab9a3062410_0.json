{"sha": "d5ed0716db573e5785e55d140ade5ab9a3062410", "log": "Fix type adapter precedence so that last-registered wins (except for tree type hierarchy adapters, which were always last).", "commit": "\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n import java.sql.Timestamp;\n import java.text.DateFormat;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n    */\n   public Gson create() {\n     List<TypeAdapter.Factory> factories = new ArrayList<TypeAdapter.Factory>();\n+    factories.addAll(this.hierarchyFactories);\n     factories.addAll(this.factories);\n-    factories.addAll(this.hierarchyFactories);\n+    Collections.reverse(factories);\n     addTypeAdaptersForDate(datePattern, dateStyle, timeStyle, factories);\n \n     return new Gson(excluder, fieldNamingPolicy, instanceCreators,\n--- a/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java\n import junit.framework.TestCase;\n \n public final class TypeAdapterPrecedenceTest extends TestCase {\n+  public void testNonstreamingFollowedByNonstreaming() {\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(Foo.class, newSerializer(\"serializer 1\"))\n+        .registerTypeAdapter(Foo.class, newSerializer(\"serializer 2\"))\n+        .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer 1\"))\n+        .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer 2\"))\n+        .create();\n+    assertEquals(\"\\\"foo via serializer 2\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"foo via deserializer 2\", gson.fromJson(\"foo\", Foo.class).name);\n+  }\n+\n+  public void testStreamingFollowedByStreaming() {\n+    Gson gson = new GsonBuilder()\n+        .registerTypeAdapter(Foo.class, newTypeAdapter(\"type adapter 1\"))\n+        .registerTypeAdapter(Foo.class, newTypeAdapter(\"type adapter 2\"))\n+        .create();\n+    assertEquals(\"\\\"foo via type adapter 2\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"foo via type adapter 2\", gson.fromJson(\"foo\", Foo.class).name);\n+  }\n+\n   public void testSerializeNonstreamingTypeAdapterFollowedByStreamingTypeAdapter() {\n     Gson gson = new GsonBuilder()\n         .registerTypeAdapter(Foo.class, newSerializer(\"serializer\"))\n         .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer\"))\n         .registerTypeAdapter(Foo.class, newTypeAdapter(\"type adapter\"))\n         .create();\n-    assertEquals(\"\\\"foo via serializer\\\"\", gson.toJson(new Foo(\"foo\")));\n-    assertEquals(\"foo via deserializer\", gson.fromJson(\"foo\", Foo.class).name);\n+    assertEquals(\"\\\"foo via type adapter\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"foo via type adapter\", gson.fromJson(\"foo\", Foo.class).name);\n   }\n \n   public void testStreamingFollowedByNonstreaming() {\n         .registerTypeAdapter(Foo.class, newSerializer(\"serializer\"))\n         .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer\"))\n         .create();\n-    assertEquals(\"\\\"foo via type adapter\\\"\", gson.toJson(new Foo(\"foo\")));\n-    assertEquals(\"foo via type adapter\", gson.fromJson(\"foo\", Foo.class).name);\n+    assertEquals(\"\\\"foo via serializer\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"foo via deserializer\", gson.fromJson(\"foo\", Foo.class).name);\n   }\n \n   public void testStreamingHierarchicalFollowedByNonstreaming() {\n         .registerTypeAdapter(Foo.class, newSerializer(\"serializer\"))\n         .registerTypeAdapter(Foo.class, newDeserializer(\"deserializer\"))\n         .create();\n-    assertEquals(\"\\\"foo via type adapter\\\"\", gson.toJson(new Foo(\"foo\")));\n-    assertEquals(\"foo via type adapter\", gson.fromJson(\"foo\", Foo.class).name);\n+    assertEquals(\"\\\"foo via serializer\\\"\", gson.toJson(new Foo(\"foo\")));\n+    assertEquals(\"foo via deserializer\", gson.fromJson(\"foo\", Foo.class).name);\n   }\n \n   public void testStreamingFollowedByNonstreamingHierarchical() {", "timestamp": 1323148158, "metainfo": ""}