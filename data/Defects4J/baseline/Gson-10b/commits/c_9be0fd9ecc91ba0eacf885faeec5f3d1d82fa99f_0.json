{"sha": "9be0fd9ecc91ba0eacf885faeec5f3d1d82fa99f", "log": "Make the BigDecimal and BigInteger type adapters user-overrideable.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n     factories.add(TypeAdapters.CHARACTER_FACTORY);\n     factories.add(TypeAdapters.STRING_BUILDER_FACTORY);\n     factories.add(TypeAdapters.STRING_BUFFER_FACTORY);\n+    factories.add(TypeAdapters.JSON_ELEMENT_FACTORY);\n+    factories.add(ObjectTypeAdapter.FACTORY);\n+\n+    // user's type adapters\n+    factories.addAll(typeAdapterFactories);\n+\n+    // built-in type adapters that can be overridden\n     factories.add(TypeAdapters.newFactory(BigDecimal.class, TypeAdapters.BIG_DECIMAL));\n     factories.add(TypeAdapters.newFactory(BigInteger.class, TypeAdapters.BIG_INTEGER));\n-    factories.add(TypeAdapters.JSON_ELEMENT_FACTORY);\n-    factories.add(ObjectTypeAdapter.FACTORY);\n-\n-    // user's type adapters\n-    factories.addAll(typeAdapterFactories);\n-\n-    // built-in type adapters that can be overridden\n     factories.add(new CollectionTypeAdapterFactory(constructorConstructor));\n     factories.add(TypeAdapters.URL_FACTORY);\n     factories.add(TypeAdapters.URI_FACTORY);\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n package com.google.gson.functional;\n \n import java.io.IOException;\n+import java.lang.reflect.Constructor;\n import java.lang.reflect.Type;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n     ClassWithBigInteger actual = gson.fromJson(json, ClassWithBigInteger.class);\n     assertEquals(expected.value, actual.value);\n   }\n+  \n+  public void testOverrideBigIntegerTypeAdapter() throws Exception {\n+    gson = new GsonBuilder()\n+        .registerTypeAdapter(BigInteger.class, new NumberAsStringAdapter(BigInteger.class))\n+        .create();\n+    assertEquals(\"\\\"123\\\"\", gson.toJson(new BigInteger(\"123\"), BigInteger.class));\n+    assertEquals(new BigInteger(\"123\"), gson.fromJson(\"\\\"123\\\"\", BigInteger.class));\n+  }\n+\n+  public void testOverrideBigDecimalTypeAdapter() throws Exception {\n+    gson = new GsonBuilder()\n+        .registerTypeAdapter(BigDecimal.class, new NumberAsStringAdapter(BigDecimal.class))\n+        .create();\n+    assertEquals(\"\\\"1.1\\\"\", gson.toJson(new BigDecimal(\"1.1\"), BigDecimal.class));\n+    assertEquals(new BigDecimal(\"1.1\"), gson.fromJson(\"\\\"1.1\\\"\", BigDecimal.class));\n+  }\n \n   public void testSetSerialization() throws Exception {\n     Gson gson = new Gson();\n       }\n     }\n   }\n+\n+  static class NumberAsStringAdapter extends TypeAdapter<Number> {\n+    private final Constructor<? extends Number> constructor;\n+    NumberAsStringAdapter(Class<? extends Number> type) throws Exception {\n+      this.constructor = type.getConstructor(String.class);\n+    }\n+    @Override public void write(JsonWriter out, Number value) throws IOException {\n+      out.value(value.toString());\n+    }\n+    @Override public Number read(JsonReader in) throws IOException {\n+      try {\n+        return constructor.newInstance(in.nextString());\n+      } catch (Exception e) {\n+        throw new AssertionError(e);\n+      }\n+    }\n+  }\n }", "timestamp": 1332093315, "metainfo": ""}