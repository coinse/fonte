{"sha": "bdf2cac6d4a5c18cf3462330eefd8e7c57990e81", "log": "Replace switch with if/else when processing whitespace. If/else is faster!", "commit": "\n--- a/gson/src/main/java/com/google/gson/stream/JsonReader.java\n+++ b/gson/src/main/java/com/google/gson/stream/JsonReader.java\n       }\n \n       int c = buffer[p++];\n-      switch (c) {\n-      case '\\t':\n-      case ' ':\n-      case '\\n':\n-      case '\\r':\n+      if (c == ' ' || c == '\\n' || c == '\\r' || c == '\\t') {\n         continue;\n-\n-      case '/':\n+      }\n+\n+      if (c == '/') {\n         pos = p;\n         if (p == l) {\n           pos--; // push back '/' so it's still in the buffer when this method returns\n         default:\n           return c;\n         }\n-\n-      case '#':\n+      } else if (c == '#') {\n         pos = p;\n         /*\n          * Skip a # hash end-of-line comment. The JSON RFC doesn't\n         skipToEndOfLine();\n         p = pos;\n         l = limit;\n-        continue;\n-\n-      default:\n+      } else {\n         pos = p;\n         return c;\n       }\n--- a/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java\n+++ b/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java\n       jsonReader.close();\n     }\n \n-    public void readObject(com.google.gson.stream.JsonReader reader) throws IOException {\n-      reader.beginObject();\n-      while (reader.hasNext()) {\n-        reader.nextName();\n-        readToken(reader);\n-      }\n-      reader.endObject();\n-    }\n-\n-    public void readArray(com.google.gson.stream.JsonReader reader) throws IOException {\n-      reader.beginArray();\n-      while (reader.hasNext()) {\n-        readToken(reader);\n-      }\n-      reader.endArray();\n-    }\n-\n     private void readToken(com.google.gson.stream.JsonReader reader) throws IOException {\n-      switch (reader.peek()) {\n-      case BEGIN_ARRAY:\n-        readArray(reader);\n-        break;\n-      case BEGIN_OBJECT:\n-        readObject(reader);\n-        break;\n-      case BOOLEAN:\n-        reader.nextBoolean();\n-        break;\n-      case NULL:\n-        reader.nextNull();\n-        break;\n-      case NUMBER:\n-        reader.nextLong();\n-        break;\n-      case STRING:\n-        reader.nextString();\n-        break;\n-      default:\n-        throw new IllegalArgumentException(\"Unexpected token\" + reader.peek());\n+      while (true) {\n+        switch (reader.peek()) {\n+        case BEGIN_ARRAY:\n+          reader.beginArray();\n+          break;\n+        case END_ARRAY:\n+          reader.endArray();\n+          break;\n+        case BEGIN_OBJECT:\n+          reader.beginObject();\n+          break;\n+        case END_OBJECT:\n+          reader.endObject();\n+          break;\n+        case NAME:\n+          reader.nextName();\n+          break;\n+        case BOOLEAN:\n+          reader.nextBoolean();\n+          break;\n+        case NULL:\n+          reader.nextNull();\n+          break;\n+        case NUMBER:\n+          reader.nextLong();\n+          break;\n+        case STRING:\n+          reader.nextString();\n+          break;\n+        case END_DOCUMENT:\n+          return;\n+        default:\n+          throw new IllegalArgumentException(\"Unexpected token\" + reader.peek());\n+        }\n       }\n     }\n   }", "timestamp": 1346041049, "metainfo": ""}