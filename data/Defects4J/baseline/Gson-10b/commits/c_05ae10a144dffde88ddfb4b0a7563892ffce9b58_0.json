{"sha": "05ae10a144dffde88ddfb4b0a7563892ffce9b58", "log": "removed the constructor in FieldAttributes that was only used in tests.", "commit": "\n--- a/gson/src/main/java/com/google/gson/FieldAttributes.java\n+++ b/gson/src/main/java/com/google/gson/FieldAttributes.java\n   // Fields used for lazy initialization\n   private Type genericType;\n   private Collection<Annotation> annotations;\n-\n-  FieldAttributes(Class<?> declaringClazz, Field f) {\n-    this.declaringClazz = $Gson$Preconditions.checkNotNull(declaringClazz);\n-    this.name = f.getName();\n-    this.declaredType = f.getType();\n-    this.isSynthetic = f.isSynthetic();\n-    this.modifiers = f.getModifiers();\n-    this.field = f;\n-    this.resolvedType = getTypeInfoForField(f, declaringClazz);\n-  }\n \n   /**\n    * Constructs a Field Attributes object from the {@code f}.\n--- a/gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/DisjunctionExclusionStrategyTest.java\n       new MockExclusionStrategy(true, true);\n   \n   private static final Class<?> CLAZZ = String.class;\n-  private static final FieldAttributes FIELD = new FieldAttributes(CLAZZ, CLAZZ.getFields()[0]);\n+  private static final FieldAttributes FIELD =\n+    new FieldAttributes(CLAZZ, CLAZZ.getFields()[0], CLAZZ);\n \n   public void testBadInstantiation() throws Exception {\n     try {\n--- a/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java\n   \n   private static FieldAttributes createFieldAttributes(String fieldName) throws Exception {\n     Field f = MockObject.class.getField(fieldName);\n-    return new FieldAttributes(MockObject.class, f);\n+    return new FieldAttributes(MockObject.class, f, MockObject.class);\n   }\n   \n   @SuppressWarnings(\"unused\")\n--- a/gson/src/test/java/com/google/gson/FieldAttributesTest.java\n+++ b/gson/src/test/java/com/google/gson/FieldAttributesTest.java\n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n-    fieldAttributes = new FieldAttributes(Foo.class, Foo.class.getField(\"bar\"));\n+    fieldAttributes = new FieldAttributes(Foo.class, Foo.class.getField(\"bar\"), Foo.class);\n   }\n \n   public void testNullField() throws Exception {\n     try {\n-      new FieldAttributes(Foo.class, null);\n+      new FieldAttributes(Foo.class, null, Foo.class);\n       fail(\"Field parameter can not be null\");\n     } catch (NullPointerException expected) { }\n   }\n--- a/gson/src/test/java/com/google/gson/FieldNamingStrategy2AdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/FieldNamingStrategy2AdapterTest.java\n     FieldNamingStrategy2 adapter =\n         new FieldNamingStrategy2Adapter(new UpperCaseNamingStrategy());\n     assertEquals(expectedFieldName, adapter.translateName(\n-        new FieldAttributes(String.class, field)));\n+        new FieldAttributes(String.class, field, String.class)));\n   }\n   \n   @SuppressWarnings(\"deprecation\")\n--- a/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java\n \n   public void testExcludeInnerClassField() throws Exception {\n     Field f = getClass().getField(\"innerClass\");\n-    assertTrue(strategy.shouldSkipField(new FieldAttributes(getClass(), f)));\n+    assertTrue(strategy.shouldSkipField(new FieldAttributes(getClass(), f, getClass())));\n   }\n \n   public void testIncludeStaticNestedClassObject() throws Exception {\n \n   public void testIncludeStaticNestedClassField() throws Exception {\n     Field f = getClass().getField(\"staticNestedClass\");\n-    assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f)));\n+    assertFalse(strategy.shouldSkipField(new FieldAttributes(getClass(), f, getClass())));\n   }\n \n   class InnerClass {\n--- a/gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/JavaFieldNamingPolicyTest.java\n   }\n \n   public void testFieldNamingPolicy() throws Exception {\n-    FieldAttributes f = new FieldAttributes(String.class, String.class.getFields()[0]);\n+    FieldAttributes f = new FieldAttributes(String.class, String.class.getFields()[0], String.class);\n     assertEquals(f.getName(), namingPolicy.translateName(f));\n   }\n \n--- a/gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/NullExclusionStrategyTest.java\n \n   public void testNeverSkipsField() throws Exception {\n     assertFalse(strategy.shouldSkipField(\n-        new FieldAttributes(String.class, String.class.getFields()[0])));\n+        new FieldAttributes(String.class, String.class.getFields()[0], String.class)));\n   }\n }\n--- a/gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java\n+++ b/gson/src/test/java/com/google/gson/SerializedNameAnnotationInterceptingNamingPolicyTest.java\n   public void testFieldWithAnnotation() throws Exception {\n     String fieldName = \"fieldWithAnnotation\";\n     FieldAttributes f = new FieldAttributes(\n-        SomeObject.class, SomeObject.class.getField(fieldName));\n+        SomeObject.class, SomeObject.class.getField(fieldName), SomeObject.class);\n \n     assertFalse(ANNOTATED_FIELD_NAME.equals(fieldName));\n     assertEquals(ANNOTATED_FIELD_NAME, policy.translateName(f));\n   public void testFieldWithoutAnnotation() throws Exception {\n     String fieldName = \"fieldWithoutAnnotation\";\n     FieldAttributes f = new FieldAttributes(\n-        SomeObject.class, SomeObject.class.getField(fieldName));\n+        SomeObject.class, SomeObject.class.getField(fieldName), SomeObject.class);\n \n     assertEquals(fieldName, policy.translateName(f));\n   }\n--- a/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java\n+++ b/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java\n     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION);\n     assertFalse(strategy.shouldSkipClass(clazz));\n \n-    FieldAttributes fieldAttributes = new FieldAttributes(clazz, f);\n+    FieldAttributes fieldAttributes = new FieldAttributes(clazz, f, clazz);\n     assertFalse(strategy.shouldSkipField(fieldAttributes));\n   }\n \n     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION + 1);\n     assertFalse(strategy.shouldSkipClass(clazz));\n     \n-    FieldAttributes fieldAttributes = new FieldAttributes(clazz, f);\n+    FieldAttributes fieldAttributes = new FieldAttributes(clazz, f, clazz);\n     assertFalse(strategy.shouldSkipField(fieldAttributes));\n   }\n \n     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION - 1);\n     assertTrue(strategy.shouldSkipClass(clazz));\n     \n-    FieldAttributes fieldAttributes = new FieldAttributes(clazz, f);\n+    FieldAttributes fieldAttributes = new FieldAttributes(clazz, f, clazz);\n     assertTrue(strategy.shouldSkipField(fieldAttributes));\n   }\n ", "timestamp": 1302051061, "metainfo": ""}