{"sha": "8b21c7770b85dae64fa6da181546a73378158a13", "log": "Use the same behavior in all situations when an InstanceCreator returns a subclass.  Previously we would set the field if the created instance is being assigned to a field of another object. We wouldn't set it when the created instance is a collection element or the top-level object.", "commit": "\n--- a/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n+++ b/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonToken;\n import com.google.gson.stream.JsonWriter;\n-\n import java.io.IOException;\n import java.lang.reflect.AccessibleObject;\n import java.lang.reflect.Field;\n     }\n \n     ObjectConstructor<T> constructor = constructorConstructor.getConstructor(type);\n-\n-    return new Adapter<T>(context, constructor, type,\n-        getBoundFields(context, type, raw));\n+    return new Adapter<T>(constructor, getBoundFields(context, type, raw));\n   }\n \n   private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n   }\n \n   public final class Adapter<T> extends TypeAdapter<T> {\n-    private final MiniGson context;\n     private final ObjectConstructor<T> constructor;\n-    private final TypeToken<T> type;\n     private final Map<String, BoundField> boundFields;\n \n-    private Adapter(MiniGson context, ObjectConstructor<T> constructor,\n-        TypeToken<T> type, Map<String, BoundField> boundFields) {\n-      this.context = context;\n+    private Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields) {\n       this.constructor = constructor;\n-      this.type = type;\n       this.boundFields = boundFields;\n     }\n \n         return;\n       }\n \n-      // TODO: GSON includes subclass fields during serialization\n-//      if (false) {\n-//        Class<?> runtimeType = value.getClass();\n-//        if (runtimeType != type.getRawType()) {\n-//          TypeAdapter<?> adapter = context.getAdapter(runtimeType);\n-//          ((TypeAdapter) adapter).write(writer, value);\n-//          return;\n-//        }\n-//      }\n-\n       writer.beginObject();\n       try {\n         for (BoundField boundField : boundFields.values()) {\n--- a/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java\n     String json = \"{base:{baseName:'Base',subName:'SubRevised'}}\";\n     ClassWithBaseField target = gson.fromJson(json, ClassWithBaseField.class);\n     assertTrue(target.base instanceof Sub);\n-    assertEquals(\"SubRevised\", ((Sub)target.base).subName);\n+    assertEquals(Sub.SUB_NAME, ((Sub)target.base).subName);\n   }\n }", "timestamp": 1317314304, "metainfo": ""}