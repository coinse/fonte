{"sha": "052c9ce0ce7dc0e9c8c98e1902d0fdac97f6af52", "log": "Honor our 'ignore nulls' policy when converting objects to JSON trees.", "commit": "\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n import com.google.gson.internal.bind.DateTypeAdapter;\n import com.google.gson.internal.bind.ExcludedTypeAdapterFactory;\n import com.google.gson.internal.bind.JsonElementReader;\n+import com.google.gson.internal.bind.JsonElementWriter;\n import com.google.gson.internal.bind.MapTypeAdapterFactory;\n import com.google.gson.internal.bind.MiniGson;\n import com.google.gson.internal.bind.ObjectTypeAdapter;\n    */\n   @SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the caller is required to make src and typeOfSrc consistent\n   public JsonElement toJsonTree(Object src, Type typeOfSrc) {\n-    // Serialize 'src' to JSON, then deserialize that to a JSON tree.\n-    TypeAdapter adapter = miniGson.getAdapter(TypeToken.get(typeOfSrc));\n-    return adapter.toJsonElement(src);\n+    JsonElementWriter writer = new JsonElementWriter();\n+    toJson(src, typeOfSrc, writer);\n+    return writer.get();\n   }\n \n   /**\n--- a/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java\n package com.google.gson.functional;\n-\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.Map.Entry;\n-\n-import junit.framework.TestCase;\n \n import com.google.gson.Gson;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n import com.google.gson.JsonPrimitive;\n import com.google.gson.common.TestTypes.BagOfPrimitives;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import junit.framework.TestCase;\n \n /**\n  * Functional tests for {@link Gson#toJsonTree(Object)} and \n     assertEquals(json1, json2);\n   }\n \n+  public void testJsonTreeNull() {\n+    BagOfPrimitives bag = new BagOfPrimitives(10L, 5, false, null);\n+    JsonObject jsonElement = (JsonObject) gson.toJsonTree(bag, BagOfPrimitives.class);\n+    assertFalse(jsonElement.has(\"stringValue\"));\n+  }\n+\n   private void assertContains(JsonObject json, JsonPrimitive child) {\n     for (Map.Entry<String, JsonElement> entry : json.entrySet()) {\n       JsonElement node = entry.getValue();", "timestamp": 1319401684, "metainfo": ""}