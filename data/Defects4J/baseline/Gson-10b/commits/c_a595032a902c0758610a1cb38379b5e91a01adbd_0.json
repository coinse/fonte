{"sha": "a595032a902c0758610a1cb38379b5e91a01adbd", "log": "Fixed issue 100 by adding support for deserialization of collections of elements that do not implement Comparable.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n import java.util.Collection;\n import java.util.Date;\n import java.util.GregorianCalendar;\n+import java.util.HashSet;\n import java.util.LinkedHashMap;\n import java.util.LinkedList;\n import java.util.List;\n   private static final StringTypeAdapter STRING_TYPE_ADAPTER = new StringTypeAdapter();\n \n   private static final PropertiesCreator PROPERTIES_CREATOR = new PropertiesCreator();\n-  private static final TreeSetCreator TREE_SET_CREATOR = new TreeSetCreator();\n+  private static final HashSetCreator HASH_SET_CREATOR = new HashSetCreator();\n   private static final GregorianCalendarTypeAdapter GREGORIAN_CALENDAR_TYPE_ADAPTER = \n     new GregorianCalendarTypeAdapter();\n \n     map.register(List.class, COLLECTION_TYPE_ADAPTER);\n     map.register(Queue.class, COLLECTION_TYPE_ADAPTER);\n \n-    map.register(Set.class, TREE_SET_CREATOR);\n-    map.register(SortedSet.class, TREE_SET_CREATOR);\n+    map.register(Set.class, HASH_SET_CREATOR);\n+    map.register(SortedSet.class, HASH_SET_CREATOR);\n     map.register(Properties.class, PROPERTIES_CREATOR);\n     map.makeUnmodifiable();\n     return map;\n     }\n   }\n \n-  private static class TreeSetCreator implements InstanceCreator<TreeSet<?>> {\n-    public TreeSet<?> createInstance(Type type) {\n-      return new TreeSet<Object>();\n-    }\n-    @Override\n-    public String toString() {\n-      return TreeSetCreator.class.getSimpleName();\n+  private static class HashSetCreator implements InstanceCreator<HashSet<?>> {\n+    public HashSet<?> createInstance(Type type) {\n+      return new HashSet<Object>();\n+    }\n+    @Override\n+    public String toString() {\n+      return HashSetCreator.class.getSimpleName();\n     }\n   }\n }\n--- a/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/CollectionTest.java\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Queue;\n+import java.util.Set;\n \n /**\n  * Functional tests for Json serialization and deserialization of collections.\n       return collection;\n     }\n   }\n+  \n+  private static class Entry {\n+    int value;\n+    Entry() {\n+      this(10);\n+    }\n+    Entry(int value) {\n+      this.value = value;\n+    }\n+  }\n+  public void testSetSerialization() {\n+    Set<Entry> set = new HashSet<Entry>(); \n+    set.add(new Entry(1));\n+    set.add(new Entry(2));    \n+    String json = gson.toJson(set);\n+    assertTrue(json.contains(\"1\"));\n+    assertTrue(json.contains(\"2\"));\n+  }\n+  public void testSetDeserialization() {\n+    String json = \"[{value:1},{value:2}]\";\n+    Type type = new TypeToken<Set<Entry>>() {}.getType();        \n+    Set<Entry> set = gson.fromJson(json, type);\n+    assertEquals(2, set.size());\n+    for (Entry entry : set) {\n+      assertTrue(entry.value == 1 || entry.value == 2);\n+    }\n+  }\n }", "timestamp": 1236823188, "metainfo": ""}