{"sha": "de0f8da151abae70dada849f4d941ba3333fd063", "log": "replaced unchecked suppressed warnings token with more specific rawtypes. removed unused imports.", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n     return map;\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n+  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n   private static JsonDeserializer<?> wrapDeserializer(JsonDeserializer<?> deserializer) {\n     return new JsonDeserializerExceptionWrapper(deserializer);\n   }\n     }    \n   }\n   \n-  @SuppressWarnings(\"unchecked\")\n+  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n   static class MapTypeAdapter implements JsonSerializer<Map>, JsonDeserializer<Map>,\n       InstanceCreator<Map> {\n     \n--- a/gson/src/main/java/com/google/gson/FieldNamingStrategy2Adapter.java\n+++ b/gson/src/main/java/com/google/gson/FieldNamingStrategy2Adapter.java\n     this.adaptee = adaptee;\n   }\n   \n+  @SuppressWarnings(\"deprecation\")\n   public String translateName(FieldAttributes f) {\n     return adaptee.translateName(f.getFieldObject());\n   }\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n   /**\n    * objTypePair.getObject() must not be null\n    */\n-  @SuppressWarnings(\"unchecked\")\n+  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n   private JsonElement findAndInvokeCustomSerializer(ObjectTypePair objTypePair) {\n     Pair<JsonSerializer<?>,ObjectTypePair> pair = objTypePair.getMatchingHandler(serializers);\n     if (pair == null) {\n--- a/gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java\n+++ b/gson/src/main/java/com/google/gson/ParameterizedTypeHandlerMap.java\n     return handler;\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n   private T getHandlerForTypeHierarchy(Class<?> type) {\n     for (Pair<Class<?>, T> entry : typeHierarchyList) {\n       if (entry.first.isAssignableFrom(type)) {\n--- a/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java\n+++ b/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java\n  */\n public class DefaultMapJsonSerializerTest extends TestCase {\n \n-  @SuppressWarnings(\"unchecked\")\n+  @SuppressWarnings(\"rawtypes\")\n   private JsonSerializer<Map> mapSerializer;\n \n   @Override\n--- a/gson/src/test/java/com/google/gson/JsonObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/JsonObjectTest.java\n package com.google.gson;\n \n import junit.framework.TestCase;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n \n /**\n  * Unit test for the {@link JsonObject} class.\n--- a/gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java\n+++ b/gson/src/test/java/com/google/gson/ParamterizedTypeFixtures.java\n     public int hashCode() {\n       return value == null ? 0 : value.hashCode();\n     }\n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings(\"rawtypes\")\n     @Override\n     public boolean equals(Object obj) {\n       if (this == obj) {\n--- a/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java\n     assertEquals(now.getDay(), extracted.getDay());\n   }\n \n-  @SuppressWarnings(\"deprecation\")\n   public void testDateSerializationWithPatternNotOverridenByTypeAdapter() throws Exception {\n     String pattern = \"yyyy-MM-dd\";\n     DateFormat formatter = new SimpleDateFormat(pattern);\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n     assertEquals(2, target.get(\"b\").intValue());\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n+  @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n   public void testRawMapSerialization() {\n     Map map = new LinkedHashMap();\n     map.put(\"a\", 1);\n     assertTrue(json.contains(\"\\\"a\\\":\\\"b\\\"\"));\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n+  @SuppressWarnings(\"rawtypes\")\n   public void testParameterizedMapSubclassDeserialization() {\n     Type type = new TypeToken<MyParameterizedMap<String, Integer>>() {}.getType();\n     Gson gson = new GsonBuilder().registerTypeAdapter(type, \n--- a/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/ObjectTest.java\n     assertEquals(target.getExpectedJson(), gson.toJson(target));\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n+  @SuppressWarnings(\"rawtypes\")\n   public void testClassWithTransientFieldsDeserialization() throws Exception {\n     String json = \"{\\\"longValue\\\":[1]}\";\n     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class);\n     assertEquals(json, target.getExpectedJson());\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n+  @SuppressWarnings(\"rawtypes\")\n   public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored()\n       throws Exception {\n     String json = \"{\\\"transientLongValue\\\":1,\\\"longValue\\\":[1]}\";", "timestamp": 1282321666, "metainfo": ""}