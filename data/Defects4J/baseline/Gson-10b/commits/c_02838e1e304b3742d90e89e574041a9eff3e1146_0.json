{"sha": "02838e1e304b3742d90e89e574041a9eff3e1146", "log": "Merge pull request #792 from dongjoon-hyun/fix_typos  Fix some typos in gson comments.", "commit": "\n--- a/gson/src/main/java/com/google/gson/FieldAttributes.java\n+++ b/gson/src/main/java/com/google/gson/FieldAttributes.java\n    *   private List&lt;String&gt; red;\n    * }\n    *\n-   * Type listParmeterizedType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\n+   * Type listParameterizedType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\n    * </pre>\n    *\n    * <p>This method would return {@code String.class} for the {@code bar} field and\n--- a/gson/src/main/java/com/google/gson/Gson.java\n+++ b/gson/src/main/java/com/google/gson/Gson.java\n  * <p>If the object that your are serializing/deserializing is a {@code ParameterizedType}\n  * (i.e. contains at least one type parameter and may be an array) then you must use the\n  * {@link #toJson(Object, Type)} or {@link #fromJson(String, Type)} method.  Here is an\n- * example for serializing and deserialing a {@code ParameterizedType}:\n+ * example for serializing and deserializing a {@code ParameterizedType}:\n  *\n  * <pre>\n  * Type listType = new TypeToken&lt;List&lt;String&gt;&gt;() {}.getType();\n--- a/gson/src/main/java/com/google/gson/GsonBuilder.java\n+++ b/gson/src/main/java/com/google/gson/GsonBuilder.java\n    * Configures Gson to apply a set of exclusion strategies during both serialization and\n    * deserialization. Each of the {@code strategies} will be applied as a disjunction rule.\n    * This means that if one of the {@code strategies} suggests that a field (or class) should be\n-   * skipped then that field (or object) is skipped during serializaiton/deserialization.\n+   * skipped then that field (or object) is skipped during serialization/deserialization.\n    *\n    * @param strategies the set of strategy object to apply during object (de)serialization.\n    * @return a reference to this {@code GsonBuilder} object to fulfill the \"Builder\" pattern\n--- a/gson/src/test/java/com/google/gson/ParameterizedTypeTest.java\n+++ b/gson/src/test/java/com/google/gson/ParameterizedTypeTest.java\n import java.util.List;\n \n /**\n- * Unit tests for {@code ParamterizedType}s created by the {@link $Gson$Types} class.\n+ * Unit tests for {@code ParameterizedType}s created by the {@link $Gson$Types} class.\n  *\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n--- a/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java\n \n   public void testFirstNameIsChosenForSerialization() {\n     MyClass target = new MyClass(\"v1\", \"v2\");\n-    // Ensure name1 occurs exactly once, and name2 and name3 dont appear\n+    // Ensure name1 occurs exactly once, and name2 and name3 don't appear\n     assertEquals(\"{\\\"name\\\":\\\"v1\\\",\\\"name1\\\":\\\"v2\\\"}\", gson.toJson(target));\n   }\n ", "timestamp": 1455574546, "metainfo": ""}