{"sha": "2fb8c92812fc385a79bc54f6214c7ac801d2c06a", "log": "Use more specific type for map serialization if possible.", "commit": "\n--- /dev/null\n+++ b/gson/src/main/java/com/google/gson/BaseMapTypeAdapter.java\n+/*\n+ * Copyright (C) 2011 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.gson;\n+\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+/**\n+ * Captures all the common/shared logic between the old, ({@link MapTypeAdapter}, and\n+ * the new, {@link MapAsArrayTypeAdapter}, map type adapters.\n+ *\n+ * @author Joel Leitch\n+ */\n+abstract class BaseMapTypeAdapter\n+    implements JsonSerializer<Map<?, ?>>, JsonDeserializer<Map<?, ?>> {\n+\n+  protected static final JsonElement serialize(JsonSerializationContext context,\n+      Object src, Type srcType) {\n+    JsonSerializationContextDefault contextImpl = (JsonSerializationContextDefault) context;\n+    return contextImpl.serialize(src, srcType, false);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  protected static final Map<Object, Object> constructMapType(\n+      Type mapType, JsonDeserializationContext context) {\n+    JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;\n+    ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();\n+    return (Map<Object, Object>) objectConstructor.construct(mapType);\n+  }\n+\n+}\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n     if (src == null) {\n       return JsonNull.createJsonNull();\n     }\n-    return serialize(src, src.getClass());\n+    return serialize(src, src.getClass(), false);\n   }\n \n   public JsonElement serialize(Object src, Type typeOfSrc) {\n+    return serialize(src, typeOfSrc, true);\n+  }\n+\n+  JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {\n     if (src == null) {\n       return JsonNull.createJsonNull();\n     }\n     JsonSerializationVisitor visitor = new JsonSerializationVisitor(\n         objectNavigator, fieldNamingPolicy, serializeNulls, serializers, this, ancestors);\n-    objectNavigator.accept(new ObjectTypePair(src, typeOfSrc, true), visitor);\n+    objectNavigator.accept(new ObjectTypePair(src, typeOfSrc, preserveType), visitor);\n     return visitor.getJsonElement();\n   }\n }\n--- a/gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/MapAsArrayTypeAdapter.java\n  * object.\n  */\n final class MapAsArrayTypeAdapter\n+    extends BaseMapTypeAdapter\n     implements JsonSerializer<Map<?, ?>>, JsonDeserializer<Map<?, ?>> {\n \n   public Map<?, ?> deserialize(JsonElement json, Type typeOfT,\n     boolean serializeAsArray = false;\n     List<JsonElement> keysAndValues = new ArrayList<JsonElement>();\n     for (Map.Entry<?, ?> entry : src.entrySet()) {\n-      JsonElement key = context.serialize(entry.getKey(), keyAndValueType[0]);\n+      JsonElement key = serialize(context, entry.getKey(), keyAndValueType[0]);\n       serializeAsArray |= key.isJsonObject() || key.isJsonArray();\n       keysAndValues.add(key);\n-      keysAndValues.add(context.serialize(entry.getValue(), keyAndValueType[1]));\n+      keysAndValues.add(serialize(context, entry.getValue(), keyAndValueType[1]));\n     }\n \n     if (serializeAsArray) {\n       return result;\n     }\n   }\n-  \n-  @SuppressWarnings(\"unchecked\")\n-  private Map<Object, Object> constructMapType(Type mapType, JsonDeserializationContext context) {\n-    JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;\n-    ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();\n-    return (Map<Object, Object>) objectConstructor.construct(mapType);\n-  }\n \n   private Type[] typeToTypeArguments(Type typeOfT) {\n     if (typeOfT instanceof ParameterizedType) {\n--- a/gson/src/main/java/com/google/gson/MapTypeAdapter.java\n+++ b/gson/src/main/java/com/google/gson/MapTypeAdapter.java\n  * @author Joel Leitch\n  */\n @SuppressWarnings(\"unchecked\")\n-final class MapTypeAdapter implements JsonSerializer<Map<?, ?>>,\n-    JsonDeserializer<Map<?, ?>> {\n+final class MapTypeAdapter extends BaseMapTypeAdapter {\n+\n   public JsonElement serialize(Map src, Type typeOfSrc, JsonSerializationContext context) {\n     JsonObject map = new JsonObject();\n     Type childGenericType = null;\n       } else {\n         Type childType = (childGenericType == null)\n             ? value.getClass() : childGenericType;\n-        valueElement = context.serialize(value, childType);\n+        valueElement = serialize(context, value, childType);\n       }\n       map.add(String.valueOf(entry.getKey()), valueElement);\n     }\n     return map;\n   }\n \n-  private Map constructMapType(Type mapType, JsonDeserializationContext context) {\n-    JsonDeserializationContextDefault contextImpl = (JsonDeserializationContextDefault) context;\n-    ObjectConstructor objectConstructor = contextImpl.getObjectConstructor();\n-    return (Map) objectConstructor.construct(mapType);\n-  }\n-\n   @Override\n   public String toString() {\n     return MapTypeAdapter.class.getSimpleName();\n--- a/gson/src/test/java/com/google/gson/functional/MapTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/MapTest.java\n import com.google.gson.Gson;\n import com.google.gson.GsonBuilder;\n import com.google.gson.InstanceCreator;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+import com.google.gson.common.TestTypes;\n import com.google.gson.reflect.TypeToken;\n \n import junit.framework.TestCase;\n     assertEquals(\"{\\\"a\\\":12,\\\"c\\\":{}}\",\n         new GsonBuilder().create().toJson(map));\n   }\n+\n+  public final void testInterfaceTypeMap() {\n+    MapClass element = new MapClass();\n+    TestTypes.Sub subType = new TestTypes.Sub();\n+    element.addBase(\"Test\", subType);\n+    element.addSub(\"Test\", subType);\n+\n+    String subTypeJson = new Gson().toJson(subType);\n+    String expected = \"{\\\"bases\\\":{\\\"Test\\\":\" + subTypeJson + \"},\"\n+      + \"\\\"subs\\\":{\\\"Test\\\":\" + subTypeJson + \"}}\";\n+\n+    Gson gsonWithComplexKeys = new GsonBuilder()\n+        .enableComplexMapKeySerialization()\n+        .create();\n+    String json = gsonWithComplexKeys.toJson(element);\n+    assertEquals(expected, json);\n+\n+    Gson gson = new Gson();\n+    json = gson.toJson(element);\n+    assertEquals(expected, json);\n+  }\n+\n+  public final void testInterfaceTypeMapWithSerializer() {\n+    MapClass element = new MapClass();\n+    TestTypes.Sub subType = new TestTypes.Sub();\n+    element.addBase(\"Test\", subType);\n+    element.addSub(\"Test\", subType);\n+\n+    Gson tempGson = new Gson();\n+    String subTypeJson = tempGson.toJson(subType);\n+    final JsonElement baseTypeJson = tempGson.toJsonTree(subType, TestTypes.Base.class);\n+    String expected = \"{\\\"bases\\\":{\\\"Test\\\":\" + baseTypeJson.toString() + \"},\"\n+        + \"\\\"subs\\\":{\\\"Test\\\":\" + subTypeJson + \"}}\";\n+\n+    JsonSerializer<TestTypes.Base> baseTypeAdapter = new JsonSerializer<TestTypes.Base>() {\n+      public JsonElement serialize(TestTypes.Base src, Type typeOfSrc,\n+          JsonSerializationContext context) {\n+        return baseTypeJson;\n+      }\n+    };\n+\n+    Gson gson = new GsonBuilder()\n+        .enableComplexMapKeySerialization()\n+        .registerTypeAdapter(TestTypes.Base.class, baseTypeAdapter)\n+        .create();\n+    String json = gson.toJson(element);\n+    assertEquals(expected, json);\n+\n+    gson = new GsonBuilder()\n+        .registerTypeAdapter(TestTypes.Base.class, baseTypeAdapter)\n+        .create();\n+    json = gson.toJson(element);\n+    assertEquals(expected, json);\n+  }\n+\n+  static final class MapClass {\n+    private final Map<String, TestTypes.Base> bases = new HashMap<String, TestTypes.Base>();\n+    private final Map<String, TestTypes.Sub> subs = new HashMap<String, TestTypes.Sub>();\n+\n+    public final void addBase(final String name, final TestTypes.Base value) {\n+      bases.put(name, value);\n+    }\n+\n+    public final void addSub(final String name, final TestTypes.Sub value) {\n+      subs.put(name, value);\n+    }\n+  }\n }\n--- a/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java\n \n import junit.framework.TestCase;\n \n+import java.io.Serializable;\n import java.io.StringReader;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n       gson.fromJson(\"15.099\", BigInteger.class);\n       fail(\"BigInteger can not be decimal values.\");\n     } catch (JsonParseException expected) { }\n+  }\n+\n+  public void testMoreSpecificSerialization() {\n+    Gson gson = new Gson();\n+    String expected = \"This is a string\";\n+    String expectedJson = gson.toJson(expected);\n+\n+    Serializable serializableString = expected;\n+    String actualJson = gson.toJson(serializableString, Serializable.class);\n+    assertFalse(expectedJson.equals(actualJson));\n   }\n \n   public void testOverridingDefaultPrimitiveSerialization() {", "timestamp": 1301958811, "metainfo": ""}