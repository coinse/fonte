{"sha": "13dc7b6f0255745479607fdea82a502db9aff5a8", "log": "Made ObjectNavigator a reusable object. We now use just one instance of ObjectNavigator instead of creating one for each field/object.", "commit": "\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationContextDefault.java\n       JsonDeserializationContext context) throws JsonParseException {\n     JsonArrayDeserializationVisitor<T> visitor = new JsonArrayDeserializationVisitor<T>(\n         jsonArray, arrayType, navigatorFactory, objectConstructor, deserializers, context);\n-    ObjectNavigator on = navigatorFactory.create(new ObjectTypePair(null, arrayType, true));\n-    on.accept(visitor);\n+    ObjectNavigator on = navigatorFactory.create();\n+    on.accept(new ObjectTypePair(null, arrayType, true), visitor);\n     return visitor.getTarget();\n   }\n \n       JsonDeserializationContext context) throws JsonParseException {\n     JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n         jsonObject, typeOfT, navigatorFactory, objectConstructor, deserializers, context);\n-    ObjectNavigator on = navigatorFactory.create(new ObjectTypePair(null, typeOfT, true));\n-    on.accept(visitor);\n+    ObjectNavigator on = navigatorFactory.create();\n+    on.accept(new ObjectTypePair(null, typeOfT, true), visitor);\n     return visitor.getTarget();\n   }\n \n       JsonDeserializationContext context) throws JsonParseException {\n     JsonObjectDeserializationVisitor<T> visitor = new JsonObjectDeserializationVisitor<T>(\n         json, typeOfT, navigatorFactory, objectConstructor, deserializers, context);\n-    ObjectNavigator on = \n-      navigatorFactory.create(new ObjectTypePair(json.getAsObject(), typeOfT, true));\n-    on.accept(visitor);\n+    ObjectNavigator on = navigatorFactory.create();\n+    on.accept(new ObjectTypePair(json.getAsObject(), typeOfT, true), visitor);\n     Object target = visitor.getTarget();\n     return (T) target;\n   }\n--- a/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonDeserializationVisitor.java\n   }\n \n   private Object visitChild(Type type, JsonDeserializationVisitor<?> childVisitor) {\n-    ObjectNavigator on = factory.create(new ObjectTypePair(null, type, false));\n-    on.accept(childVisitor);\n+    ObjectNavigator on = factory.create();\n+    on.accept(new ObjectTypePair(null, type, false), childVisitor);\n     // the underlying object may have changed during the construction phase\n     // This happens primarily because of custom deserializers\n     return childVisitor.getTarget();\n--- a/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationContextDefault.java\n   }\n \n   JsonElement serialize(Object src, Type typeOfSrc, boolean preserveType) {\n-    ObjectNavigator on = factory.create(new ObjectTypePair(src, typeOfSrc, preserveType));\n+    ObjectNavigator on = factory.create();\n     JsonSerializationVisitor visitor =\n         new JsonSerializationVisitor(factory, serializeNulls, serializers, this, ancestors);\n-    on.accept(visitor);\n+    on.accept(new ObjectTypePair(src, typeOfSrc, preserveType), visitor);\n     return visitor.getJsonElement();\n   }\n }\n--- a/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n+++ b/gson/src/main/java/com/google/gson/JsonSerializationVisitor.java\n   }\n \n   private JsonElement getJsonElementForChild(ObjectTypePair fieldValueTypePair) {\n-    ObjectNavigator on = factory.create(fieldValueTypePair);\n+    ObjectNavigator on = factory.create();\n     JsonSerializationVisitor childVisitor =\n         new JsonSerializationVisitor(factory, serializeNulls, serializers, context, ancestors);\n-    on.accept(childVisitor);\n+    on.accept(fieldValueTypePair, childVisitor);\n     return childVisitor.getJsonElement();\n   }\n \n--- a/gson/src/main/java/com/google/gson/ObjectNavigator.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigator.java\n   }\n \n   private final ExclusionStrategy exclusionStrategy;\n-  private final ObjectTypePair objTypePair;\n-  private ReflectingFieldNavigator reflectingFieldNavigator;\n+  private final ReflectingFieldNavigator reflectingFieldNavigator;\n \n   /**\n    * @param objTypePair\n    *          the concrete strategy object to be used to filter out fields of an\n    *          object.\n    */\n-  ObjectNavigator(ObjectTypePair objTypePair, ExclusionStrategy exclusionStrategy) {\n+  ObjectNavigator(ExclusionStrategy exclusionStrategy) {\n     reflectingFieldNavigator = new ReflectingFieldNavigator(exclusionStrategy);\n-    this.objTypePair = objTypePair;\n     this.exclusionStrategy = Preconditions.checkNotNull(exclusionStrategy);\n   }\n \n    * Navigate all the fields of the specified object. If a field is null, it\n    * does not get visited.\n    */\n-  public void accept(Visitor visitor) {\n+  public void accept(ObjectTypePair objTypePair, Visitor visitor) {\n     if (exclusionStrategy.shouldSkipClass(Types.getRawType(objTypePair.type))) {\n       return;\n     }\n--- a/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n+++ b/gson/src/main/java/com/google/gson/ObjectNavigatorFactory.java\n  * @author Joel Leitch\n  */\n final class ObjectNavigatorFactory {\n-  private final ExclusionStrategy strategy;\n   private final FieldNamingStrategy2 fieldNamingPolicy;\n+  private final ObjectNavigator objectNavigator;\n \n   /**\n    * Creates a factory object that will be able to create new\n    *        names\n    */\n   public ObjectNavigatorFactory(ExclusionStrategy strategy, FieldNamingStrategy2 fieldNamingPolicy) {\n-    this.strategy = (strategy == null ? new NullExclusionStrategy() : strategy);\n     this.fieldNamingPolicy = Preconditions.checkNotNull(fieldNamingPolicy);\n+    this.objectNavigator = new ObjectNavigator(\n+        strategy == null ? new NullExclusionStrategy() : strategy);\n   }\n \n   /**\n    *         {@code srcObject} while taking into consideration the\n    *         {@code type}.\n    */\n-  public ObjectNavigator create(ObjectTypePair objTypePair) {\n-    return new ObjectNavigator(objTypePair, strategy);\n+  public ObjectNavigator create() {\n+    return objectNavigator;\n   }\n \n   FieldNamingStrategy2 getFieldNamingPolicy() {\n--- a/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java\n     assertFalse(gson.toJson(target).contains(\"DEFAULT_VALUE\"));\n   }\n \n+  public void testGsonInstanceReusableForSerializationAndDeserialization() {\n+    BagOfPrimitives bag = new BagOfPrimitives();\n+    String json = gson.toJson(bag);\n+    BagOfPrimitives deserialized = gson.fromJson(json, BagOfPrimitives.class);\n+    assertEquals(bag, deserialized);\n+  }\n+\n   /**\n    * This test ensures that a custom deserializer is able to return a derived class instance for a\n    * base class object. For a motivation for this test, see Issue 37 and", "timestamp": 1300992105, "metainfo": ""}