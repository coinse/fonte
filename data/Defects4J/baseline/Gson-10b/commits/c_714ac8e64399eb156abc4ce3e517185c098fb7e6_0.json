{"sha": "714ac8e64399eb156abc4ce3e517185c098fb7e6", "log": "added tests for using intercept in fields and lists. These tests are currently failing.", "commit": "\n--- a/gson/src/test/java/com/google/gson/functional/InterceptorTest.java\n+++ b/gson/src/test/java/com/google/gson/functional/InterceptorTest.java\n  */\n package com.google.gson.functional;\n \n+import java.util.List;\n+\n import junit.framework.TestCase;\n \n import com.google.gson.Gson;\n+import com.google.gson.JsonParseException;\n import com.google.gson.internal.alpha.Intercept;\n import com.google.gson.internal.alpha.JsonPostDeserializer;\n+import com.google.gson.reflect.TypeToken;\n \n /**\n  * Unit tests for {@link Intercept} and {@link JsonPostDeserializer}.\n     this.gson = new Gson();\n   }\n \n-  public void testPostDeserialize() {\n-    MyObject target = gson.fromJson(\"{}\", MyObject.class);\n-    assertEquals(MyObject.DEFAULT_VALUE, target.value);\n-    assertEquals(MyObject.DEFAULT_MESSAGE, target.message);\n+  public void testExceptionsPropagated() {\n+    try {\n+      gson.fromJson(\"{}\", User.class);\n+      fail();\n+    } catch (JsonParseException expected) {}\n   }\n \n-  @Intercept(postDeserialize = MyObjectInterceptor.class)\n-  private static final class MyObject {\n-    static final int DEFAULT_VALUE = 10;\n-    static final String DEFAULT_MESSAGE = \"hello\";\n-\n-    int value = 0;\n-    String message = null;\n+  public void testPostDeserializeTopLevelClass() {\n+    User user = gson.fromJson(\"{name:'bob',password:'pwd'}\", User.class);\n+    assertEquals(User.DEFAULT_EMAIL, user.email);\n   }\n \n-  private static final class MyObjectInterceptor implements JsonPostDeserializer<MyObject> {\n-    public void postDeserialize(MyObject o) {\n-      if (o.value == 0) {\n-        o.value = MyObject.DEFAULT_VALUE;\n+  public void testPostDeserializeList() {\n+    List<User> list = gson.fromJson(\"[{name:'bob',password:'pwd'}]\", new TypeToken<List<User>>(){}.getType());\n+    User user = list.get(0);\n+    assertEquals(User.DEFAULT_EMAIL, user.email);\n+  }\n+\n+  public void testPostDeserializeField() {\n+    UserGroup userGroup = gson.fromJson(\"{user:{name:'bob',password:'pwd'}}\", UserGroup.class);\n+    assertEquals(User.DEFAULT_EMAIL, userGroup.user.email);\n+  }\n+\n+  private static final class UserGroup {\n+    User user;\n+    String city;\n+  }\n+\n+  @Intercept(postDeserialize = UserValidator.class)\n+  private static final class User {\n+    static final String DEFAULT_EMAIL = \"invalid@invalid.com\";\n+    String name;\n+    String password;\n+    String email;\n+  }\n+\n+  private static final class UserValidator implements JsonPostDeserializer<User> {\n+    public void postDeserialize(User user) {\n+      if (user.name == null || user.password == null) {\n+        throw new JsonParseException(\"name and password are required fields.\");\n       }\n-      if (o.message == null) {\n-        o.message = MyObject.DEFAULT_MESSAGE;\n-      }\n+      if (user.email == null) user.email = User.DEFAULT_EMAIL;\n     }\n   }\n }", "timestamp": 1349987380, "metainfo": ""}