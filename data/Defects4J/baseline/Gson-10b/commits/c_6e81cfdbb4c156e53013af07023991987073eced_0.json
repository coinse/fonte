{"sha": "6e81cfdbb4c156e53013af07023991987073eced", "log": "Locale-awareness for date parsing and formatting:   - always format in en_US for best interchange  - always parse in en_US, system locale and ISO-8601", "commit": "\n--- a/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n+++ b/gson/src/main/java/com/google/gson/DefaultTypeAdapters.java\n import java.util.Set;\n import java.util.SortedSet;\n import java.util.StringTokenizer;\n+import java.util.TimeZone;\n import java.util.TreeSet;\n import java.util.UUID;\n \n   }\n \n   static class DefaultDateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n-    private final DateFormat format;\n+    private final DateFormat enUsFormat;\n+    private final DateFormat localFormat;\n+    private final DateFormat iso8601Format;\n \n     DefaultDateTypeAdapter() {\n-      this.format = DateFormat.getDateTimeInstance();\n-    }\n-\n-    DefaultDateTypeAdapter(final String datePattern) {\n-      this.format = new SimpleDateFormat(datePattern);\n-    }\n-\n-    DefaultDateTypeAdapter(final int style) {\n-      this.format = DateFormat.getDateInstance(style);\n-    }\n-\n-    public DefaultDateTypeAdapter(final int dateStyle, final int timeStyle) {\n-      this.format = DateFormat.getDateTimeInstance(dateStyle, timeStyle);\n+      this(DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),\n+          DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));\n+    }\n+\n+    DefaultDateTypeAdapter(String datePattern) {\n+      this(new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));\n+    }\n+\n+    DefaultDateTypeAdapter(int style) {\n+      this(DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));\n+    }\n+\n+    public DefaultDateTypeAdapter(int dateStyle, int timeStyle) {\n+      this(DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),\n+          DateFormat.getDateTimeInstance(dateStyle, timeStyle));\n+    }\n+\n+    public DefaultDateTypeAdapter(DateFormat enUsFormat, DateFormat localFormat) {\n+      this.enUsFormat = enUsFormat;\n+      this.localFormat = localFormat;\n+      this.iso8601Format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.US);\n+      this.iso8601Format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n     }\n \n     // These methods need to be synchronized since JDK DateFormat classes are not thread-safe\n     // See issue 162\n     public JsonElement serialize(Date src, Type typeOfSrc, JsonSerializationContext context) {\n-      synchronized (format) {\n-        String dateFormatAsString = format.format(src);\n+      synchronized (localFormat) {\n+        String dateFormatAsString = enUsFormat.format(src);\n         return new JsonPrimitive(dateFormatAsString);\n       }\n     }\n       if (!(json instanceof JsonPrimitive)) {\n         throw new JsonParseException(\"The date should be a string value\");\n       }\n-      try {\n-        synchronized (format) {\n-          return format.parse(json.getAsString());\n+      synchronized (localFormat) {\n+        try {\n+          return localFormat.parse(json.getAsString());\n+        } catch (ParseException ignored) {\n         }\n-      } catch (ParseException e) {\n-        throw new JsonSyntaxException(e);\n+        try {\n+          return enUsFormat.parse(json.getAsString());\n+        } catch (ParseException ignored) {\n+        }\n+        try {\n+          return iso8601Format.parse(json.getAsString());\n+        } catch (ParseException e) {\n+          throw new JsonSyntaxException(json.getAsString(), e);\n+        }\n       }\n     }\n \n     public String toString() {\n       StringBuilder sb = new StringBuilder();\n       sb.append(DefaultDateTypeAdapter.class.getSimpleName());\n-      sb.append('(').append(format.getClass().getSimpleName()).append(')');\n+      sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');\n       return sb.toString();\n     }\n   }\n         throw new JsonParseException(e);\n       }\n     }\n-    \n+\n     public JsonElement serialize(InetAddress src, Type typeOfSrc,\n         JsonSerializationContext context) {\n       return new JsonPrimitive(src.getHostAddress());\n--- a/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java\n+++ b/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java\n package com.google.gson;\n \n import com.google.gson.DefaultTypeAdapters.DefaultDateTypeAdapter;\n-\n-import junit.framework.TestCase;\n-\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import junit.framework.TestCase;\n \n /**\n  * A simple unit test for the {@link DefaultDateTypeAdapter} class.\n  * @author Joel Leitch\n  */\n public class DefaultDateTypeAdapterTest extends TestCase {\n+\n+  public void testFormattingInEnUs() {\n+    testFormattingAlwaysEmitsUsLocale(Locale.US);\n+  }\n+\n+  public void testFormattingInFr() {\n+    testFormattingAlwaysEmitsUsLocale(Locale.FRANCE);\n+  }\n+\n+  private void testFormattingAlwaysEmitsUsLocale(Locale locale) {\n+    TimeZone defaultTimeZone = TimeZone.getDefault();\n+    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n+    Locale defaultLocale = Locale.getDefault();\n+    Locale.setDefault(locale);\n+    try {\n+      assertFormatted(\"Jan 1, 1970 12:00:00 AM\", new DefaultDateTypeAdapter());\n+      assertFormatted(\"1/1/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n+      assertFormatted(\"Jan 1, 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n+      assertFormatted(\"January 1, 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n+      assertFormatted(\"1/1/70 12:00 AM\",\n+          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n+      assertFormatted(\"Jan 1, 1970 12:00:00 AM\",\n+          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n+      assertFormatted(\"January 1, 1970 12:00:00 AM UTC\",\n+          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n+      assertFormatted(\"Thursday, January 1, 1970 12:00:00 AM UTC\",\n+          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n+    } finally {\n+      TimeZone.setDefault(defaultTimeZone);\n+      Locale.setDefault(defaultLocale);\n+    }\n+  }\n+\n+  public void testParsingDatesFormattedWithSystemLocale() {\n+    TimeZone defaultTimeZone = TimeZone.getDefault();\n+    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n+    Locale defaultLocale = Locale.getDefault();\n+    Locale.setDefault(Locale.FRANCE);\n+    try {\n+      assertParsed(\"1 janv. 1970 00:00:00\", new DefaultDateTypeAdapter());\n+      assertParsed(\"01/01/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n+      assertParsed(\"1 janv. 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n+      assertParsed(\"1 janvier 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n+      assertParsed(\"01/01/70 00:00\",\n+          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n+      assertParsed(\"1 janv. 1970 00:00:00\",\n+          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n+      assertParsed(\"1 janvier 1970 00:00:00 UTC\",\n+          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n+      assertParsed(\"jeudi 1 janvier 1970 00 h 00 UTC\",\n+          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n+    } finally {\n+      TimeZone.setDefault(defaultTimeZone);\n+      Locale.setDefault(defaultLocale);\n+    }\n+  }\n+\n+  public void testParsingDatesFormattedWithUsLocale() {\n+    TimeZone defaultTimeZone = TimeZone.getDefault();\n+    TimeZone.setDefault(TimeZone.getTimeZone(\"UTC\"));\n+    Locale defaultLocale = Locale.getDefault();\n+    Locale.setDefault(Locale.US);\n+    try {\n+      assertParsed(\"Jan 1, 1970 0:00:00 AM\", new DefaultDateTypeAdapter());\n+      assertParsed(\"1/1/70\", new DefaultDateTypeAdapter(DateFormat.SHORT));\n+      assertParsed(\"Jan 1, 1970\", new DefaultDateTypeAdapter(DateFormat.MEDIUM));\n+      assertParsed(\"January 1, 1970\", new DefaultDateTypeAdapter(DateFormat.LONG));\n+      assertParsed(\"1/1/70 0:00 AM\",\n+          new DefaultDateTypeAdapter(DateFormat.SHORT, DateFormat.SHORT));\n+      assertParsed(\"Jan 1, 1970 0:00:00 AM\",\n+          new DefaultDateTypeAdapter(DateFormat.MEDIUM, DateFormat.MEDIUM));\n+      assertParsed(\"January 1, 1970 0:00:00 AM UTC\",\n+          new DefaultDateTypeAdapter(DateFormat.LONG, DateFormat.LONG));\n+      assertParsed(\"Thursday, January 1, 1970 0:00:00 AM UTC\",\n+          new DefaultDateTypeAdapter(DateFormat.FULL, DateFormat.FULL));\n+    } finally {\n+      TimeZone.setDefault(defaultTimeZone);\n+      Locale.setDefault(defaultLocale);\n+    }\n+  }\n+\n+  public void testFormatUsesDefaultTimezone() {\n+    TimeZone defaultTimeZone = TimeZone.getDefault();\n+    TimeZone.setDefault(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n+    Locale defaultLocale = Locale.getDefault();\n+    Locale.setDefault(Locale.US);\n+    try {\n+      assertFormatted(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter());\n+      assertParsed(\"Dec 31, 1969 4:00:00 PM\", new DefaultDateTypeAdapter());\n+    } finally {\n+      TimeZone.setDefault(defaultTimeZone);\n+      Locale.setDefault(defaultLocale);\n+    }\n+  }\n \n   public void testDateSerialization() throws Exception {\n     int dateStyle = DateFormat.LONG;\n       fail(\"Invalid date pattern should fail.\");\n     } catch (IllegalArgumentException expected) { }\n   }\n+\n+  private void assertFormatted(String formatted, DefaultDateTypeAdapter adapter) {\n+    assertEquals(formatted, adapter.serialize(new Date(0), Date.class, null).getAsString());\n+  }\n+\n+  private void assertParsed(String date, DefaultDateTypeAdapter  adapter) {\n+    assertEquals(date, new Date(0), adapter.deserialize(new JsonPrimitive(date), Date.class, null));\n+    assertEquals(\"ISO 8601\", new Date(0), adapter.deserialize(\n+        new JsonPrimitive(\"1970-01-01T00:00:00Z\"), Date.class, null));\n+  }\n }", "timestamp": 1297299982, "metainfo": ""}