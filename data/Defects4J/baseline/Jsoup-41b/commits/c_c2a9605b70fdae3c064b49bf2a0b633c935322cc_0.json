{"sha": "c2a9605b70fdae3c064b49bf2a0b633c935322cc", "log": "changed Entities.escape to escape String with supplementary characters correctly, and added two test cases to verify", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n         StringBuilder accum = new StringBuilder(string.length() * 2);\n         Map<Character, String> map = escapeMode.getMap();\n \n-        for (int pos = 0; pos < string.length(); pos++) {\n-            Character c = string.charAt(pos);\n-            if (map.containsKey(c))\n-                accum.append('&').append(map.get(c)).append(';');\n-            else if (encoder.canEncode(c))\n-                accum.append(c.charValue());\n+        //@see \"http://stackoverflow.com/questions/1527856/how-can-i-iterate-through-the-unicode-codepoints-of-a-java-string\"\n+        final int length = string.length();\n+        for (int offset = 0; offset < length; ) {\n+            final int codePoint = string.codePointAt(offset);\n+            char[] chars = Character.toChars(codePoint);\n+\n+            if (chars.length==1 && map.containsKey(chars[0]))\n+                accum.append('&').append(map.get(chars[0])).append(';');\n+            else if (encoder.canEncode(new String(chars)))\n+                accum.append(new String(chars));\n             else\n-                accum.append(\"&#\").append((int) c).append(';');\n+                accum.append(\"&#\").append(codePoint).append(';');\n+\n+            offset += Character.charCount(codePoint);\n         }\n \n         return accum.toString();\n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n         assertEquals(\"Hello &amp;&lt;&gt; &#197; &#229; &#960; &#26032; there &#190; &#169;\", escapedAsciiXhtml);\n         assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; \u03c0 \u65b0 there &frac34; &copy;\", escapedUtf);\n         // odd that it's defined as aring in base but angst in full\n+    }\n+\n+    @Test public void escapeSupplementaryCharacter(){\n+        String text = new String(Character.toChars(135361));\n+        String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n+        assertEquals(\"&#135361;\", escapedAscii);\n+        String escapedUtf = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n+        assertEquals(text, escapedUtf);\n     }\n \n     @Test public void unescape() {\n--- a/src/test/java/org/jsoup/nodes/TextNodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/TextNodeTest.java\n \n         assertEquals(\"Hello <b>there</b>\", TextUtil.stripNewlines(div.html())); // not great that we get \\n<b>there there... must correct\n     }\n+\n+    @Test public void testWithSupplementaryCharacter(){\n+        Document doc = Jsoup.parse(new String(Character.toChars(135361)));\n+        TextNode t = doc.body().textNodes().get(0);\n+        assertEquals(new String(Character.toChars(135361)), t.outerHtml().trim());\n+    }\n }", "timestamp": 1359184519, "metainfo": ""}