{"sha": "f45de034880877582fb6414c4d09f40c5999ac70", "log": "Added Node.traverse() and Elements.traverse() methods, to iterate through a node's descendants.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     }\n \n     /**\n+     * Perform a depth-first traversal through this node and its descendants.\n+     * @param nodeVisitor the visitor callbacks to perform on each node\n+     * @return this node, for chaining\n+     */\n+    public Node traverse(NodeVisitor nodeVisitor) {\n+        Validate.notNull(nodeVisitor);\n+        NodeTraversor traversor = new NodeTraversor(nodeVisitor);\n+        traversor.traverse(this);\n+        return this;\n+    }\n+\n+    /**\n      Get the outer HTML of this node.\n      @return HTML\n      */\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n         return contents.isEmpty() ? null : contents.get(contents.size() - 1);\n     }\n \n+    /**\n+     * Perform a depth-first traversal on each of the selected elements.\n+     * @param nodeVisitor the visitor callbacks to perform on each node\n+     * @return this, for chaining\n+     */\n+    public Elements traverse(NodeVisitor nodeVisitor) {\n+        Validate.notNull(nodeVisitor);\n+        NodeTraversor traversor = new NodeTraversor(nodeVisitor);\n+        for (Element el: contents) {\n+            traversor.traverse(el);\n+        }\n+        return this;\n+    }\n+\n     // implements List<Element> delegates:\n     public int size() {return contents.size();}\n \n--- a/src/test/java/org/jsoup/nodes/NodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.jsoup.parser.Tag;\n+import org.jsoup.select.NodeVisitor;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n         assertEquals(\"<div>One  Two</div>\", TextUtil.stripNewlines(doc.body().html()));\n         assertTrue(node == null);\n     }\n+\n+    @Test public void traverse() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n+        final StringBuilder accum = new StringBuilder();\n+        doc.select(\"div\").first().traverse(new NodeVisitor() {\n+            public void head(Node node, int depth) {\n+                accum.append(\"<\" + node.nodeName() + \">\");\n+            }\n+\n+            public void tail(Node node, int depth) {\n+                accum.append(\"</\" + node.nodeName() + \">\");\n+            }\n+        });\n+        assertEquals(\"<div><p><#text></#text></p></div>\", accum.toString());\n+    }\n }\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Node;\n import org.junit.Test;\n import static org.junit.Assert.*;\n \n \n         assertEquals(\"<p>Hello <em>there</em> <em>now</em></p>\", doc.body().html());\n     }\n+\n+    @Test public void traverse() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello</p></div><div>There</div>\");\n+        final StringBuilder accum = new StringBuilder();\n+        doc.select(\"div\").traverse(new NodeVisitor() {\n+            public void head(Node node, int depth) {\n+                accum.append(\"<\" + node.nodeName() + \">\");\n+            }\n+\n+            public void tail(Node node, int depth) {\n+                accum.append(\"</\" + node.nodeName() + \">\");\n+            }\n+        });\n+        assertEquals(\"<div><p><#text></#text></p></div><div><#text></#text></div>\", accum.toString());\n+    }\n }", "timestamp": 1315138962, "metainfo": ""}