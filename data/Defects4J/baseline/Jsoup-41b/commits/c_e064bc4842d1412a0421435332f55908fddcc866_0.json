{"sha": "e064bc4842d1412a0421435332f55908fddcc866", "log": "#273 :\tProvide an output setting to render all elements as block", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n         private Charset charset = Charset.forName(\"UTF-8\");\n         private CharsetEncoder charsetEncoder = charset.newEncoder();\n         private boolean prettyPrint = true;\n+        private boolean forceAllElementAsBlock = false;\n         private int indentAmount = 1;\n \n         public OutputSettings() {}\n          */\n         public OutputSettings prettyPrint(boolean pretty) {\n             prettyPrint = pretty;\n+            return this;\n+        }\n+        \n+        /**\n+         * Get if forceAllElementAsBlock is enabled. Default is false. If enable, the HTML output methods will consider\n+         * all tags as block.\n+         * @return if pretty printing is enabled.\n+         */\n+        public boolean forceAllElementAsBlock() {\n+            return forceAllElementAsBlock;\n+        }\n+        \n+        /**\n+         * force or unforce rendering all elements as block.\n+         * @param forceBlock new forceAllElementAsBlock setting\n+         * @return this, for chaining\n+         */\n+        public OutputSettings forceAllElementAsBlock(boolean forceBlock) {\n+            forceAllElementAsBlock = forceBlock;\n             return this;\n         }\n \n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        if (accum.length() > 0 && out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock())))\n+        if (accum.length() > 0 && out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.forceAllElementAsBlock()) )\n             indent(accum, depth, out);\n         accum\n                 .append(\"<\")\n \n     void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n         if (!(childNodes.isEmpty() && tag.isSelfClosing())) {\n-            if (out.prettyPrint() && !childNodes.isEmpty() && tag.formatAsBlock())\n+            if (out.prettyPrint() && (!childNodes.isEmpty() && (tag.formatAsBlock() || (out.forceAllElementAsBlock() && childNodes.size()>1) || (out.forceAllElementAsBlock() && childNodes.size()==1 && !(childNodes.iterator().next() instanceof TextNode) ) )))\n                 indent(accum, depth, out);\n             accum.append(\"</\").append(tagName()).append(\">\");\n         }\n     }\n \n     private void html(StringBuilder accum) {\n-        for (Node node : childNodes)\n+        for (Node node : childNodes) \n             node.outerHtml(accum);\n     }\n     \n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n             html = normaliseWhitespace(html);\n         }\n \n-        if (out.prettyPrint() && siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().formatAsBlock() && !isBlank())\n+        if (out.prettyPrint() && ((siblingIndex() == 0 && parentNode instanceof Element && ((Element) parentNode).tag().formatAsBlock() && !isBlank()) || (out.forceAllElementAsBlock() && siblingNodes().size()>0 && !isBlank()) )) \n             indent(accum, depth, out);\n         accum.append(html);\n     }\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         Document doc = Jsoup.parse(\"<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>\");\n         assertEquals(\"<html>\\n <head>\\n  <title>Format test</title>\\n </head>\\n <body>\\n  <div>\\n   <p>Hello <span>jsoup <span>users</span></span></p>\\n   <p>Good.</p>\\n  </div>\\n </body>\\n</html>\", doc.html());\n     }\n+    \n+    @Test public void testForceAllElementAsBlock() {\n+        Document doc = Jsoup.parse(\"<title>Format test</title><div><p>Hello <span>jsoup <span>users</span></span></p><p>Good.</p></div>\");\n+        doc.outputSettings().forceAllElementAsBlock(true);\n+        assertEquals(\"<html>\\n <head>\\n  <title>Format test</title>\\n </head>\\n <body>\\n  <div>\\n   <p>\\n    Hello \\n    <span>\\n     jsoup \\n     <span>users</span>\\n    </span>\\n   </p>\\n   <p>Good.</p>\\n  </div>\\n </body>\\n</html>\", doc.html());\n+    }\n \n     @Test public void testSetIndent() {\n         Document doc = Jsoup.parse(\"<div><p>Hello\\nthere</p></div>\");", "timestamp": 1355482273, "metainfo": ""}