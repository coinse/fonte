{"sha": "db2d5aa85352fe63531540ef396b944e2fe58e2c", "log": "Added support for css pseudo classes :first-child, :last-child, :nth-child, :nth-last-child,  :first-of-type, :last-of-type, :nth-of-type, :nth-last-of-type, :only-child, :only-of-type, :empty, :root", "commit": "\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n package org.jsoup.select;\n \n import org.jsoup.helper.Validate;\n+import org.jsoup.nodes.Comment;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.DocumentType;\n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Node;\n+import org.jsoup.nodes.XmlDeclaration;\n \n import java.util.List;\n import java.util.regex.Matcher;\n         }\n \n     }\n+    \n+    /**\n+     * Evaluator for matching the last sibling (css :last-child)\n+     */\n+    public static final class IsLastChild extends Evaluator {\n+\t\t@Override\n+\t\tpublic boolean matches(Element root, Element element) {\n+\t\t\tfinal Element p = element.parent();\n+\t\t\treturn p != null && !(p instanceof Document) && element.elementSiblingIndex() == p.children().size()-1;\n+\t\t}\n+    \t\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn \":last-child\";\n+\t\t}\n+    }\n+    \n+    public static final class IsFirstOfType extends IsNthOfType {\n+\t\tpublic IsFirstOfType() {\n+\t\t\tsuper(0,1);\n+\t\t}\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn \":first-of-type\";\n+\t\t}\n+    }\n+    \n+    public static final class IsLastOfType extends IsNthLastOfType {\n+\t\tpublic IsLastOfType() {\n+\t\t\tsuper(0,1);\n+\t\t}\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn \":last-of-type\";\n+\t\t}\n+    }\n+\n+    \n+    public static abstract class CssNthEvaluator extends Evaluator {\n+    \tprotected final int a, b;\n+    \t\n+    \tpublic CssNthEvaluator(int a, int b) {\n+    \t\tthis.a = a;\n+    \t\tthis.b = b;\n+    \t}\n+    \tpublic CssNthEvaluator(int b) {\n+    \t\tthis(0,b);\n+    \t}\n+    \t\n+    \t@Override\n+    \tpublic boolean matches(Element root, Element element) {\n+    \t\tfinal Element p = element.parent();\n+    \t\tif (p == null || (p instanceof Document)) return false;\n+    \t\t\n+    \t\tfinal int pos = calculatePosition(root, element);\n+    \t\tif (a == 0) return pos == b;\n+    \t\t\n+    \t\treturn (pos-b)*a >= 0 && (pos-b)%a==0;\n+    \t}\n+    \t\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\tif (a == 0)\n+\t\t\t\treturn String.format(\":%s(%d)\",getPseudoClass(), b);\n+\t\t\tif (b == 0)\n+\t\t\t\treturn String.format(\":%s(%dn)\",getPseudoClass(), a);\n+\t\t\treturn String.format(\":%s(%dn%+d)\", getPseudoClass(),a, b);\n+\t\t}\n+    \t\n+\t\tprotected abstract String getPseudoClass();\n+\t\tprotected abstract int calculatePosition(Element root, Element element);\n+    }\n+    \n+    \n+    /**\n+     * css-compatible Evaluator for :eq (css :nth-child)\n+     * \n+     * @see IndexEquals\n+     */\n+    public static final class IsNthChild extends CssNthEvaluator {\n+\n+    \tpublic IsNthChild(int a, int b) {\n+    \t\tsuper(a,b);\n+\t\t}\n+\n+\t\tprotected int calculatePosition(Element root, Element element) {\n+\t\t\treturn element.elementSiblingIndex()+1;\n+\t\t}\n+\n+\t\t\n+\t\tprotected String getPseudoClass() {\n+\t\t\treturn \"nth-child\";\n+\t\t}\n+    }\n+    \n+    /**\n+     * css pseudo class :nth-last-child)\n+     * \n+     * @see IndexEquals\n+     */\n+    public static final class IsNthLastChild extends CssNthEvaluator {\n+    \tpublic IsNthLastChild(int a, int b) {\n+    \t\tsuper(a,b);\n+    \t}\n+\n+        @Override\n+        protected int calculatePosition(Element root, Element element) {\n+        \treturn element.parent().children().size() - element.elementSiblingIndex();\n+        }\n+        \n+\t\t@Override\n+\t\tprotected String getPseudoClass() {\n+\t\t\treturn \"nth-last-child\";\n+\t\t}\n+    }\n+    \n+    /**\n+     * css pseudo class nth-of-type\n+     * \n+     */\n+    public static class IsNthOfType extends CssNthEvaluator {\n+    \tpublic IsNthOfType(int a, int b) {\n+    \t\tsuper(a,b);\n+    \t}\n+\n+\t\tprotected int calculatePosition(Element root, Element element) {\n+\t\t\tint pos = 0;\n+        \tElements family = element.parent().children();\n+        \tfor (int i = 0; i < family.size(); i++) {\n+        \t\tif (family.get(i).tag() == element.tag()) pos++;\n+        \t\tif (family.get(i) == element) break;\n+        \t}\n+\t\t\treturn pos;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected String getPseudoClass() {\n+\t\t\treturn \"nth-of-type\";\n+\t\t}\n+    }\n+    \n+    public static class IsNthLastOfType extends CssNthEvaluator {\n+\n+\t\tpublic IsNthLastOfType(int a, int b) {\n+\t\t\tsuper(a, b);\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tprotected int calculatePosition(Element root, Element element) {\n+\t\t\tint pos = 0;\n+        \tElements family = element.parent().children();\n+        \tfor (int i = element.elementSiblingIndex(); i < family.size(); i++) {\n+        \t\tif (family.get(i).tag() == element.tag()) pos++;\n+        \t}\n+\t\t\treturn pos;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected String getPseudoClass() {\n+\t\t\treturn \"nth-last-of-type\";\n+\t\t}\n+    }\n+\n+    /**\n+     * Evaluator for matching the first sibling (css :first-child)\n+     */\n+    public static final class IsFirstChild extends Evaluator {\n+    \t@Override\n+    \tpublic boolean matches(Element root, Element element) {\n+    \t\tfinal Element p = element.parent();\n+    \t\treturn p != null && !(p instanceof Document) && element.elementSiblingIndex() == 0;\n+    \t}\n+    \t\n+    \t@Override\n+    \tpublic String toString() {\n+    \t\treturn \":first-child\";\n+    \t}\n+    }\n+    \n+    /**\n+     * css3 pseudo-class :root\n+     * @see http://www.w3.org/TR/selectors/#root-pseudo\n+     *\n+     */\n+    public static final class IsRoot extends Evaluator {\n+    \t@Override\n+    \tpublic boolean matches(Element root, Element element) {\n+    \t\tfinal Element r = root instanceof Document?root.child(0):root;\n+    \t\treturn element == r;\n+    \t}\n+    \t@Override\n+    \tpublic String toString() {\n+    \t\treturn \":root\";\n+    \t}\n+    }\n+\n+    public static final class IsOnlyChild extends Evaluator {\n+\t\t@Override\n+\t\tpublic boolean matches(Element root, Element element) {\n+\t\t\tfinal Element p = element.parent();\n+\t\t\treturn p!=null && !(p instanceof Document) && element.siblingElements().size() == 0;\n+\t\t}\n+    \t@Override\n+    \tpublic String toString() {\n+    \t\treturn \":only-child\";\n+    \t}\n+    }\n+\n+    public static final class IsOnlyOfType extends Evaluator {\n+\t\t@Override\n+\t\tpublic boolean matches(Element root, Element element) {\n+\t\t\tfinal Element p = element.parent();\n+\t\t\tif (p==null || p instanceof Document) return false;\n+\t\t\t\n+\t\t\tint pos = 0;\n+        \tElements family = p.children();\n+        \tfor (int i = 0; i < family.size(); i++) {\n+        \t\tif (family.get(i).tag().equals(element.tag())) pos++;\n+        \t}\n+        \treturn pos == 1;\n+\t\t}\n+    \t@Override\n+    \tpublic String toString() {\n+    \t\treturn \":only-of-type\";\n+    \t}\n+    }\n+\n+    public static final class IsEmpty extends Evaluator {\n+\t\t@Override\n+\t\tpublic boolean matches(Element root, Element element) {\n+        \tList<Node> family = element.childNodes();\n+        \tfor (int i = 0; i < family.size(); i++) {\n+        \t\tNode n = family.get(i);\n+        \t\tif (!(n instanceof Comment || n instanceof XmlDeclaration || n instanceof DocumentType)) return false; \n+        \t}\n+        \treturn true;\n+\t\t}\n+    \t@Override\n+    \tpublic String toString() {\n+    \t\treturn \":empty\";\n+    \t}\n+    }\n \n     /**\n      * Abstract evaluator for sibling index matching\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n import org.jsoup.helper.StringUtil;\n             matches(true);\n         else if (tq.matches(\":not(\"))\n             not();\n-        else // unhandled\n+\t\telse if (tq.matchChomp(\":nth-child(\"))\n+        \tcssNthChild(false, false);\n+        else if (tq.matchChomp(\":nth-last-child(\"))\n+        \tcssNthChild(true, false);\n+        else if (tq.matchChomp(\":nth-of-type(\"))\n+        \tcssNthChild(false, true);\n+        else if (tq.matchChomp(\":nth-last-of-type(\"))\n+        \tcssNthChild(true, true);\n+        else if (tq.matchChomp(\":first-child\"))\n+        \tevals.add(new Evaluator.IsFirstChild());\n+        else if (tq.matchChomp(\":last-child\"))\n+        \tevals.add(new Evaluator.IsLastChild());\n+        else if (tq.matchChomp(\":first-of-type\"))\n+        \tevals.add(new Evaluator.IsFirstOfType());\n+        else if (tq.matchChomp(\":last-of-type\"))\n+        \tevals.add(new Evaluator.IsLastOfType());\n+        else if (tq.matchChomp(\":only-child\"))\n+        \tevals.add(new Evaluator.IsOnlyChild());\n+        else if (tq.matchChomp(\":only-of-type\"))\n+        \tevals.add(new Evaluator.IsOnlyOfType());\n+        else if (tq.matchChomp(\":empty\"))\n+        \tevals.add(new Evaluator.IsEmpty());\n+        else if (tq.matchChomp(\":root\"))\n+        \tevals.add(new Evaluator.IsRoot());\n+\t\telse // unhandled\n             throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder());\n \n     }\n     private void indexEquals() {\n         evals.add(new Evaluator.IndexEquals(consumeIndex()));\n     }\n+    \n+    //pseudo selectors :first-child, :last-child, :nth-child, ...\n+    private static final Pattern NTH_AB = Pattern.compile(\"((\\\\+|-)?(\\\\d+)?)n(\\\\s*(\\\\+|-)?\\\\s*\\\\d+)?\", Pattern.CASE_INSENSITIVE);\n+    private static final Pattern NTH_B  = Pattern.compile(\"(\\\\+|-)?(\\\\d+)\");\n+\n+\tprivate void cssNthChild(boolean backwards, boolean ofType) {\n+\t\tString argS = tq.chompTo(\")\").trim().toLowerCase();\n+\t\tMatcher mAB = NTH_AB.matcher(argS);\n+\t\tMatcher mB = NTH_B.matcher(argS);\n+\t\tfinal int a, b;\n+\t\tif (\"odd\".equals(argS)) {\n+\t\t\ta = 2;\n+\t\t\tb = 1;\n+\t\t} else if (\"even\".equals(argS)) {\n+\t\t\ta = 2;\n+\t\t\tb = 0;\n+\t\t} else if (mAB.matches()) {\n+\t\t\ta = mAB.group(3) != null ? Integer.parseInt(mAB.group(1)\n+\t\t\t\t\t.replaceFirst(\"^\\\\+\", \"\")) : 1;\n+\t\t\tb = mAB.group(4) != null ? Integer.parseInt(mAB.group(4)\n+\t\t\t\t\t.replaceFirst(\"^\\\\+\", \"\")) : 0;\n+\t\t} else if (mB.matches()) {\n+\t\t\ta = 0;\n+\t\t\tb = Integer.parseInt(mB.group().replaceFirst(\"^\\\\+\", \"\"));\n+\t\t} else {\n+\t\t\tthrow new Selector.SelectorParseException(\n+\t\t\t\t\t\"Could not parse nth-index '%s': unexpected format\", argS);\n+\t\t}\n+\t\tif (ofType)\n+\t\t\tif (backwards)\n+\t\t\t\tevals.add(new Evaluator.IsNthLastOfType(a, b));\n+\t\t\telse\n+\t\t\t\tevals.add(new Evaluator.IsNthOfType(a, b));\n+\t\telse {\n+\t\t\tif (backwards)\n+\t\t\t\tevals.add(new Evaluator.IsNthLastChild(a, b));\n+\t\t\telse\n+\t\t\t\tevals.add(new Evaluator.IsNthChild(a, b));\n+\t\t}\n+\t}\n \n     private int consumeIndex() {\n         String indexS = tq.chompTo(\")\").trim();\n--- /dev/null\n+++ b/src/test/java/org/jsoup/select/CssTest.java\n+package org.jsoup.select;\n+\n+import static org.junit.Assert.*;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.parser.Tag;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class CssTest {\n+\n+\tprivate Document html = null;\n+\tprivate static String htmlString;\n+\t\n+\t@BeforeClass\n+\tpublic static void initClass() {\n+\t\tStringBuilder sb = new StringBuilder(\"<html><head></head><body>\");\n+\t\t\n+\t\tsb.append(\"<div id='pseudo'>\");\n+\t\tfor (int i = 1; i <= 10; i++) {\n+\t\t\tsb.append(String.format(\"<p>%d</p>\",i));\n+\t\t}\n+\t\tsb.append(\"</div>\");\n+\n+\t\tsb.append(\"<div id='type'>\");\n+\t\tfor (int i = 1; i <= 10; i++) {\n+\t\t\tsb.append(String.format(\"<p>%d</p>\",i));\n+\t\t\tsb.append(String.format(\"<span>%d</span>\",i));\n+\t\t\tsb.append(String.format(\"<em>%d</em>\",i));\n+\t\t}\n+\t\tsb.append(\"</div>\");\n+\n+\t\tsb.append(\"<span id='onlySpan'><br /></span>\");\n+\t\tsb.append(\"<p class='empty'><!-- Comment only is still empty! --></p>\");\n+\t\t\n+\t\tsb.append(\"<div id='only'>\");\n+\t\tsb.append(\"Some text before the <em>only</em> child in this div\");\n+\t\tsb.append(\"</div>\");\n+\t\t\n+\t\tsb.append(\"</body></html>\");\n+\t\thtmlString = sb.toString();\n+\t}\n+\n+\t@Before\n+\tpublic void init() {\n+\t\thtml  = Jsoup.parse(htmlString);\n+\t}\n+\t\n+\t@Test\n+\tpublic void firstChild() {\n+\t\tcheck(html.select(\"#pseudo :first-child\"), \"1\");\n+\t\tcheck(html.select(\"html:first-child\"));\n+\t}\n+\n+\t@Test\n+\tpublic void lastChild() {\n+\t\tcheck(html.select(\"#pseudo :last-child\"), \"10\");\n+\t\tcheck(html.select(\"html:last-child\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void nthChild_simple() {\n+\t\tfor(int i = 1; i <=10; i++) {\n+\t\t\tcheck(html.select(String.format(\"#pseudo :nth-child(%d)\", i)), String.valueOf(i));\n+\t\t}\n+\t}\n+\n+\n+\t@Test\n+\tpublic void nthLastChild_simple() {\n+\t\tfor(int i = 1; i <=10; i++) {\n+\t\t\tcheck(html.select(String.format(\"#pseudo :nth-last-child(%d)\", i)), String.valueOf(11-i));\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void nthOfType_simple() {\n+\t\tfor(int i = 1; i <=10; i++) {\n+\t\t\tcheck(html.select(String.format(\"#type p:nth-of-type(%d)\", i)), String.valueOf(i));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void nthLastOfType_simple() {\n+\t\tfor(int i = 1; i <=10; i++) {\n+\t\t\tcheck(html.select(String.format(\"#type :nth-last-of-type(%d)\", i)), String.valueOf(11-i),String.valueOf(11-i),String.valueOf(11-i));\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void nthChild_advanced() {\n+\t\tcheck(html.select(\"#pseudo :nth-child(-5)\"));\n+\t\tcheck(html.select(\"#pseudo :nth-child(odd)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#pseudo :nth-child(2n-1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#pseudo :nth-child(2n+1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#pseudo :nth-child(2n+3)\"), \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#pseudo :nth-child(even)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#pseudo :nth-child(2n)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#pseudo :nth-child(3n-1)\"), \"2\", \"5\", \"8\");\n+\t\tcheck(html.select(\"#pseudo :nth-child(-2n+5)\"), \"1\", \"3\", \"5\");\n+\t\tcheck(html.select(\"#pseudo :nth-child(+5)\"), \"5\");\n+\t}\n+\n+\t@Test\n+\tpublic void nthOfType_advanced() {\n+\t\tcheck(html.select(\"#type :nth-of-type(-5)\"));\n+\t\tcheck(html.select(\"#type p:nth-of-type(odd)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#type em:nth-of-type(2n-1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#type p:nth-of-type(2n+1)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#type span:nth-of-type(2n+3)\"), \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#type p:nth-of-type(even)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#type p:nth-of-type(2n)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#type p:nth-of-type(3n-1)\"), \"2\", \"5\", \"8\");\n+\t\tcheck(html.select(\"#type p:nth-of-type(-2n+5)\"), \"1\", \"3\", \"5\");\n+\t\tcheck(html.select(\"#type :nth-of-type(+5)\"), \"5\", \"5\", \"5\");\n+\t}\n+\n+\t\n+\t@Test\n+\tpublic void nthLastChild_advanced() {\n+\t\tcheck(html.select(\"#pseudo :nth-last-child(-5)\"));\n+\t\tcheck(html.select(\"#pseudo :nth-last-child(odd)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#pseudo :nth-last-child(2n-1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#pseudo :nth-last-child(2n+1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#pseudo :nth-last-child(2n+3)\"), \"2\", \"4\", \"6\", \"8\");\n+\t\tcheck(html.select(\"#pseudo :nth-last-child(even)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#pseudo :nth-last-child(2n)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#pseudo :nth-last-child(3n-1)\"), \"3\", \"6\", \"9\");\n+\n+\t\tcheck(html.select(\"#pseudo :nth-last-child(-2n+5)\"), \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#pseudo :nth-last-child(+5)\"), \"6\");\n+\t}\n+\n+\t@Test\n+\tpublic void nthLastOfType_advanced() {\n+\t\tcheck(html.select(\"#type :nth-last-of-type(-5)\"));\n+\t\tcheck(html.select(\"#type p:nth-last-of-type(odd)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#type em:nth-last-of-type(2n-1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#type p:nth-last-of-type(2n+1)\"), \"2\", \"4\", \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#type span:nth-last-of-type(2n+3)\"), \"2\", \"4\", \"6\", \"8\");\n+\t\tcheck(html.select(\"#type p:nth-last-of-type(even)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#type p:nth-last-of-type(2n)\"), \"1\", \"3\", \"5\", \"7\", \"9\");\n+\t\tcheck(html.select(\"#type p:nth-last-of-type(3n-1)\"), \"3\", \"6\", \"9\");\n+\n+\t\tcheck(html.select(\"#type span:nth-last-of-type(-2n+5)\"), \"6\", \"8\", \"10\");\n+\t\tcheck(html.select(\"#type :nth-last-of-type(+5)\"), \"6\", \"6\", \"6\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void firstOfType() {\n+\t\tcheck(html.select(\"div:not(#only) :first-of-type\"), \"1\", \"1\", \"1\", \"1\");\n+\t}\n+\n+\t@Test\n+\tpublic void lastOfType() {\n+\t\tcheck(html.select(\"div:not(#only) :last-of-type\"), \"10\", \"10\", \"10\", \"10\");\n+\t}\n+\n+\t@Test\n+\tpublic void empty() {\n+\t\tfinal Elements sel = html.select(\":empty\");\n+\t\tassertEquals(3, sel.size());\n+\t\tassertEquals(\"head\", sel.get(0).tagName());\n+\t\tassertEquals(\"br\", sel.get(1).tagName());\n+\t\tassertEquals(\"p\", sel.get(2).tagName());\n+\t}\n+\t\n+\t@Test\n+\tpublic void onlyChild() {\n+\t\tfinal Elements sel = html.select(\"span :only-child\");\n+\t\tassertEquals(1, sel.size());\n+\t\tassertEquals(\"br\", sel.get(0).tagName());\n+\t\t\n+\t\tcheck(html.select(\"#only :only-child\"), \"only\");\n+\t}\n+\t\n+\t@Test\n+\tpublic void onlyOfType() {\n+\t\tfinal Elements sel = html.select(\":only-of-type\");\n+\t\tassertEquals(6, sel.size());\n+\t\tassertEquals(\"head\", sel.get(0).tagName());\n+\t\tassertEquals(\"body\", sel.get(1).tagName());\n+\t\tassertEquals(\"span\", sel.get(2).tagName());\n+\t\tassertEquals(\"br\", sel.get(3).tagName());\n+\t\tassertEquals(\"p\", sel.get(4).tagName());\n+\t\tassertTrue(sel.get(4).hasClass(\"empty\"));\n+\t\tassertEquals(\"em\", sel.get(5).tagName());\n+\t}\n+\t\n+\tprotected void check(Elements result, String...expectedContent ) {\n+\t\tassertEquals(\"Number of elements\", expectedContent.length, result.size());\n+\t\tfor (int i = 0; i < expectedContent.length; i++) {\n+\t\t\tassertNotNull(result.get(i));\n+\t\t\tassertEquals(\"Expected element\",expectedContent[i], result.get(i).ownText());\n+\t\t}\n+\t}\n+\n+\t\n+\t@Test\n+\tpublic void root() {\n+\t\tElements sel = html.select(\":root\");\n+\t\tassertEquals(1, sel.size());\n+\t\tassertNotNull(sel.get(0));\n+\t\tassertEquals(Tag.valueOf(\"html\"), sel.get(0).tag());\n+\n+\t\tElements sel2 = html.select(\"body\").select(\":root\");\n+\t\tassertEquals(1, sel2.size());\n+\t\tassertNotNull(sel2.get(0));\n+\t\tassertEquals(Tag.valueOf(\"body\"), sel2.get(0).tag());\n+\t}\n+\n+}", "timestamp": 1338979259, "metainfo": ""}