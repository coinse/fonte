{"sha": "80c826dc46a5270826c411d3741bfab8c98eb42e", "log": "Moved Evaluator to nodes from select, to close down public methods.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n import org.jsoup.parser.Tag;\n import org.jsoup.select.Collector;\n import org.jsoup.select.Elements;\n-import org.jsoup.select.Evaluator;\n import org.jsoup.select.Selector;\n \n import java.util.*;\n      * @return elements that have this attribute with this value, empty if none\n      */\n     public Elements getElementsByAttributeValue(String key, String value) {\n-        String[] kp = normaliseAttrKeyPair(key, value);\n-        return Collector.collect(new Evaluator.AttributeWithValue(kp[0], kp[1]), this);\n+        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n     }\n \n     /**\n      * @return elements that do not have a matching attribute\n      */\n     public Elements getElementsByAttributeValueNot(String key, String value) {\n-        String[] kp = normaliseAttrKeyPair(key, value);\n-        return Collector.collect(new Evaluator.AttributeWithValueNot(kp[0], kp[1]), this);\n+        return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);\n     }\n \n     /**\n      * @return elements that have attributes that start with the value prefix\n      */\n     public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {\n-        String[] kp = normaliseAttrKeyPair(key, valuePrefix);\n-        return Collector.collect(new Evaluator.AttributeWithValueStarting(kp[0], kp[1]), this);\n+        return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);\n     }\n \n     /**\n      * @return elements that have attributes that end with the value suffix\n      */\n     public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {\n-        String[] kp = normaliseAttrKeyPair(key, valueSuffix);\n-        return Collector.collect(new Evaluator.AttributeWithValueEnding(kp[0], kp[1]), this);\n+        return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);\n     }\n \n     /**\n      * @return elements that have attributes containing this text\n      */\n     public Elements getElementsByAttributeValueContaining(String key, String match) {\n-        String[] kp = normaliseAttrKeyPair(key, match);\n-        return Collector.collect(new Evaluator.AttributeWithValueContaining(kp[0], kp[1]), this);\n-    }\n-\n-    private String[] normaliseAttrKeyPair(String key, String value) {\n-        Validate.notEmpty(key);\n-        key = key.trim().toLowerCase();\n-        Validate.notEmpty(value);\n-        value = value.trim().toLowerCase();\n-        return new String[] {key, value};\n+        return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this);\n+    }\n+    \n+    /**\n+     * Find all elements under this element (including self, and children of children).\n+     * \n+     * @return all elements\n+     */\n+    public Elements getAllElements() {\n+        return Collector.collect(new Evaluator.AllElements(), this);\n     }\n \n     /**\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/Evaluator.java\n+package org.jsoup.nodes;\n+\n+import org.apache.commons.lang.Validate;\n+\n+\n+/**\n+ * Evaluates that an element matches the selector.\n+ *\n+ * @author Jonathan Hedley\n+ */\n+public abstract class Evaluator {\n+    private Evaluator() {}\n+    \n+    public abstract boolean matches(Element element);\n+\n+    static final class Tag extends Evaluator {\n+        private String tagName;\n+        Tag (String tagName) {\n+            this.tagName = tagName;\n+        }\n+\n+        public boolean matches(Element element) {\n+            return (element.tagName().equals(tagName));\n+        }\n+    }\n+\n+    static final class Id extends Evaluator {\n+        private String id;\n+        Id (String id) {\n+            this.id = id;\n+        }\n+\n+        public boolean matches(Element element) {\n+            return (id.equals(element.id()));\n+        }\n+    }\n+\n+    static final class Class extends Evaluator {\n+        private String className;\n+        Class(String className) {\n+            this.className = className;\n+        }\n+\n+        public boolean matches(Element element) {\n+            return (element.hasClass(className));\n+        }\n+    }\n+\n+    static final class Attribute extends Evaluator {\n+        private String key;\n+\n+        Attribute (String key) {\n+            this.key = key;\n+        }\n+\n+        public boolean matches(Element element) {\n+            return (element.hasAttr(key));\n+        }\n+    }\n+\n+    static final class AttributeWithValue extends AttributeKeyPair {\n+        AttributeWithValue(String key, String value) {\n+            super(key, value);\n+        }\n+\n+        public boolean matches(Element element) {\n+            return (value.equalsIgnoreCase(element.attr(key)));\n+        }\n+    }\n+\n+    static final class AttributeWithValueNot extends AttributeKeyPair {\n+        AttributeWithValueNot(String key, String value) {\n+            super(key, value);\n+        }\n+\n+        public boolean matches(Element element) {\n+            return (!value.equalsIgnoreCase(element.attr(key)));\n+        }\n+    }\n+\n+    static final class AttributeWithValueStarting extends AttributeKeyPair {\n+        AttributeWithValueStarting(String key, String value) {\n+            super(key, value);\n+        }\n+\n+        public boolean matches(Element element) {\n+            return element.attr(key).toLowerCase().startsWith(value); // value is lower case already\n+        }\n+    }\n+\n+    static final class AttributeWithValueEnding extends AttributeKeyPair {\n+        AttributeWithValueEnding(String key, String value) {\n+            super(key, value);\n+        }\n+\n+        public boolean matches(Element element) {\n+            return element.attr(key).toLowerCase().endsWith(value); // value is lower case\n+        }\n+    }\n+\n+    static final class AttributeWithValueContaining extends AttributeKeyPair {\n+        AttributeWithValueContaining(String key, String value) {\n+            super(key, value);\n+        }\n+\n+        public boolean matches(Element element) {\n+            return element.attr(key).toLowerCase().contains(value); // value is lower case\n+        }\n+    }\n+\n+    abstract static class AttributeKeyPair extends Evaluator {\n+        protected String key;\n+        protected String value;\n+\n+        AttributeKeyPair(String key, String value) {\n+            Validate.notEmpty(key);\n+            Validate.notEmpty(value);\n+            \n+            this.key = key.trim().toLowerCase();;\n+            this.value = value.trim().toLowerCase();;\n+        }\n+    }\n+\n+    static final class AllElements extends Evaluator {\n+        public boolean matches(Element element) {\n+            return true;\n+        }\n+    }\n+\n+\n+}\n--- a/src/main/java/org/jsoup/select/Collector.java\n+++ b/src/main/java/org/jsoup/select/Collector.java\n package org.jsoup.select;\n \n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Evaluator;\n \n import java.util.List;\n \n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n \n import org.apache.commons.lang.Validate;\n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Evaluator;\n import org.jsoup.parser.TokenQueue;\n \n import java.util.Collection;\n     }\n \n     private Elements allElements() {\n-        return Collector.collect(new Evaluator.AllElements(), root);\n+        return root.getAllElements();\n     }\n \n     // direct child descendants", "timestamp": 1309605105, "metainfo": ""}