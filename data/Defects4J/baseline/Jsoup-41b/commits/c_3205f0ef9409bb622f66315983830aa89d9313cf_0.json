{"sha": "3205f0ef9409bb622f66315983830aa89d9313cf", "log": "Removed StartTag", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n package org.jsoup.nodes;\n \n import org.apache.commons.lang.Validate;\n-import org.jsoup.parser.StartTag;\n import org.jsoup.parser.Tag;\n \n /**\n     private String title;\n \n     public Document(String baseUri) {\n-        super(new StartTag(Tag.valueOf(\"#root\"), baseUri));\n+        super(Tag.valueOf(\"#root\"), baseUri);\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n \n import org.apache.commons.lang.Validate;\n import org.jsoup.parser.Parser;\n-import org.jsoup.parser.StartTag;\n import org.jsoup.parser.Tag;\n import org.jsoup.select.Collector;\n import org.jsoup.select.Elements;\n     /**\n      * Create a new, standalone Element. (Standalone in that is has no parent.)\n      * \n-     * @param startTag provides tag, base URI, and initial attributes\n+     * @param tag tag of this element\n+     * @param baseUri the base URI\n+     * @param attributes initial attributes\n      * @see #appendChild(Element)\n      * @see #appendElement(String)\n      */\n-    public Element(StartTag startTag) {\n-        super(startTag.getBaseUri(), startTag.getAttributes());\n-        this.tag = startTag.getTag();\n+    public Element(Tag tag, String baseUri, Attributes attributes) {\n+        super(baseUri, attributes);\n+        \n+        Validate.notNull(tag);    \n+        this.tag = tag;\n         elementChildren = new ArrayList<Element>();\n     }\n     \n      * @see Tag#valueOf(String)\n      */\n     public Element(Tag tag, String baseUri) {\n-        this(new StartTag(tag, baseUri));\n+        this(tag, baseUri, new Attributes());\n     }\n \n     @Override\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n         }\n \n         Tag tag = Tag.valueOf(tagName);\n-        StartTag startTag = new StartTag(tag, baseUri, attributes);\n-        Element child = new Element(startTag);\n+        Element child = new Element(tag, baseUri, attributes);\n \n         boolean isEmptyElement = tag.isEmpty(); // empty element if empty tag (e.g. img) or self-closed el (<div/>\n         if (tq.matchChomp(\"/>\")) { // close empty element or tag\n         if (!validAncestor) {\n             // create implicit parent around this child\n             Tag parentTag = childTag.getImplicitParent();\n-            StartTag parentStart = new StartTag(parentTag, baseUri);\n-            Element implicit = new Element(parentStart);\n+            Element implicit = new Element(parentTag, baseUri);\n             // special case: make sure there's a head before putting in body\n             if (child.getTag().equals(bodyTag)) {\n-                Element head = new Element(new StartTag(headTag, baseUri));\n+                Element head = new Element(headTag, baseUri);\n                 implicit.appendChild(head);\n             }\n             implicit.appendChild(child);\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n \n import org.apache.commons.lang.Validate;\n import org.jsoup.nodes.*;\n-import org.jsoup.parser.StartTag;\n import org.jsoup.parser.Tag;\n \n import java.util.List;\n     private Element createSafeElement(Element sourceEl) {\n         String sourceTag = sourceEl.tagName();\n         Attributes destAttrs = new Attributes();\n-        Element dest = new Element(new StartTag(Tag.valueOf(sourceTag), sourceEl.baseUri(), destAttrs));\n+        Element dest = new Element(Tag.valueOf(sourceTag), sourceEl.baseUri(), destAttrs);\n \n         Attributes sourceAttrs = sourceEl.getAttributes();\n         for (Attribute sourceAttr : sourceAttrs) {\n--- a/src/test/java/org/jsoup/nodes/NodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n package org.jsoup.nodes;\n \n import org.jsoup.Jsoup;\n-import org.jsoup.parser.StartTag;\n import org.jsoup.parser.Tag;\n import org.junit.Test;\n \n         attribs.put(\"relHref\", \"/foo\");\n         attribs.put(\"absHref\", \"http://bar/qux\");\n \n-        Element noBase = new Element(new StartTag(tag, \"\", attribs));\n+        Element noBase = new Element(tag, \"\", attribs);\n         assertEquals(\"\", noBase.absUrl(\"relHref\")); // with no base, should NOT fallback to href attrib, whatever it is\n         assertEquals(\"http://bar/qux\", noBase.absUrl(\"absHref\")); // no base but valid attrib, return attrib\n \n-        Element withBase = new Element(new StartTag(tag, \"http://foo/\", attribs));\n+        Element withBase = new Element(tag, \"http://foo/\", attribs);\n         assertEquals(\"http://foo/foo\", withBase.absUrl(\"relHref\")); // construct abs from base + rel\n         assertEquals(\"http://bar/qux\", withBase.absUrl(\"absHref\")); // href is abs, so returns that\n         assertEquals(\"\", withBase.absUrl(\"noval\"));\n \n-        Element dodgyBase = new Element(new StartTag(tag, \"wtf://no-such-protocol/\", attribs));\n+        Element dodgyBase = new Element(tag, \"wtf://no-such-protocol/\", attribs);\n         assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); // base fails, but href good, so get that\n         assertEquals(\"\", dodgyBase.absUrl(\"relHref\")); // base fails, only rel href, so return nothing \n     }", "timestamp": 1309605105, "metainfo": ""}