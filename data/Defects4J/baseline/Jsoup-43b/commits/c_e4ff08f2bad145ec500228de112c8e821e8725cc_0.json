{"sha": "e4ff08f2bad145ec500228de112c8e821e8725cc", "log": "Renamed ElementList to Elements", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n import org.jsoup.parser.StartTag;\n import org.jsoup.parser.Tag;\n import org.jsoup.select.Collector;\n-import org.jsoup.select.ElementList;\n+import org.jsoup.select.Elements;\n import org.jsoup.select.Evaluator;\n import org.jsoup.select.Selector;\n \n         return Collections.unmodifiableList(elementChildren);\n     }\n \n-    public ElementList select(String query) {\n+    public Elements select(String query) {\n         return Selector.select(query, this);\n     }\n \n--- /dev/null\n+++ b/src/main/java/org/jsoup/select/Elements.java\n+package org.jsoup.select;\n+\n+import org.jsoup.nodes.Element;\n+\n+import java.util.*;\n+\n+/**\n+ A list of {@link Element Elements}, with methods that act on every element in the list\n+\n+ @author Jonathan Hedley, jonathan@hedley.net */\n+public class Elements implements List<Element>{\n+    private List<Element> contents;\n+\n+    public Elements() {\n+        contents = new ArrayList<Element>();\n+    }\n+\n+    public Elements(Collection<Element> elements) {\n+        contents = new ArrayList<Element>(elements);\n+    }\n+\n+    public Elements select(String query) {\n+        return Selector.select(query, this);\n+    }\n+\n+    // implements List<Element> delegates:\n+    public int size() {return contents.size();}\n+\n+    public boolean isEmpty() {return contents.isEmpty();}\n+\n+    public boolean contains(Object o) {return contents.contains(o);}\n+\n+    public Iterator<Element> iterator() {return contents.iterator();}\n+\n+    public Object[] toArray() {return contents.toArray();}\n+\n+    public <T> T[] toArray(T[] a) {return contents.toArray(a);}\n+\n+    public boolean add(Element element) {return contents.add(element);}\n+\n+    public boolean remove(Object o) {return contents.remove(o);}\n+\n+    public boolean containsAll(Collection<?> c) {return contents.containsAll(c);}\n+\n+    public boolean addAll(Collection<? extends Element> c) {return contents.addAll(c);}\n+\n+    public boolean addAll(int index, Collection<? extends Element> c) {return contents.addAll(index, c);}\n+\n+    public boolean removeAll(Collection<?> c) {return contents.removeAll(c);}\n+\n+    public boolean retainAll(Collection<?> c) {return contents.retainAll(c);}\n+\n+    public void clear() {contents.clear();}\n+\n+    public boolean equals(Object o) {return contents.equals(o);}\n+\n+    public int hashCode() {return contents.hashCode();}\n+\n+    public Element get(int index) {return contents.get(index);}\n+\n+    public Element set(int index, Element element) {return contents.set(index, element);}\n+\n+    public void add(int index, Element element) {contents.add(index, element);}\n+\n+    public Element remove(int index) {return contents.remove(index);}\n+\n+    public int indexOf(Object o) {return contents.indexOf(o);}\n+\n+    public int lastIndexOf(Object o) {return contents.lastIndexOf(o);}\n+\n+    public ListIterator<Element> listIterator() {return contents.listIterator();}\n+\n+    public ListIterator<Element> listIterator(int index) {return contents.listIterator(index);}\n+\n+    public List<Element> subList(int fromIndex, int toIndex) {return contents.subList(fromIndex, toIndex);}\n+}\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n         this.tq = new TokenQueue(query);\n     }\n \n-    public static ElementList select(String query, Element root) {\n+    public static Elements select(String query, Element root) {\n         return new Selector(query, root).select();\n     }\n \n-    public static ElementList select(String query, Iterable<Element> roots) {\n+    public static Elements select(String query, Iterable<Element> roots) {\n         Validate.notEmpty(query);\n         Validate.notNull(roots);\n         LinkedHashSet<Element> elements = new LinkedHashSet<Element>();\n         for (Element root : roots) {\n             elements.addAll(select(query, root));\n         }\n-        return new ElementList(elements);\n+        return new Elements(elements);\n     }\n \n-    private ElementList select() {\n+    private Elements select() {\n         tq.consumeWhitespace();\n         while (!tq.isEmpty()) {\n             if (tq.matchChomp(\"#\")) {\n                 throw new SelectorParseException(\"Could not parse query \" + query);\n             }\n         }\n-        return new ElementList(elements);\n+        return new Elements(elements);\n     }\n \n     private void byId() {\n--- a/src/test/java/org/jsoup/select/ElementListTest.java\n+++ b/src/test/java/org/jsoup/select/ElementListTest.java\n     @Test public void chainedSelects() {\n         String h = \"<p>Excl</p><div class=headline><p>Hello</p><p>There</p></div><div class=headline><h1>Headline</h1></div>\";\n         Document doc = Jsoup.parse(h);\n-        ElementList els = doc.select(\".headline\").select(\"p\");\n+        Elements els = doc.select(\".headline\").select(\"p\");\n         assertEquals(2, els.size());\n         assertEquals(\"Hello\", els.get(0).text());\n         assertEquals(\"There\", els.get(1).text());\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n  @author Jonathan Hedley, jonathan@hedley.net */\n public class SelectorTest {\n     @Test public void testByTag() {\n-        ElementList els = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\").select(\"div\");\n+        Elements els = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\").select(\"div\");\n         assertEquals(3, els.size());\n         assertEquals(\"1\", els.get(0).id());\n         assertEquals(\"2\", els.get(1).id());\n         assertEquals(\"3\", els.get(2).id());\n \n-        ElementList none = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\").select(\"span\");\n+        Elements none = Jsoup.parse(\"<div id=1><div id=2><p>Hello</p></div></div><div id=3>\").select(\"span\");\n         assertEquals(0, none.size());\n     }\n \n     @Test public void testById() {\n-        ElementList els = Jsoup.parse(\"<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>\").select(\"#foo\");\n+        Elements els = Jsoup.parse(\"<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>\").select(\"#foo\");\n         assertEquals(1, els.size());\n         assertEquals(\"Hello\", els.get(0).text());\n \n-        ElementList none = Jsoup.parse(\"<div id=1></div>\").select(\"#foo\");\n+        Elements none = Jsoup.parse(\"<div id=1></div>\").select(\"#foo\");\n         assertEquals(0, none.size());\n     }\n \n     @Test public void testByClass() {\n-        ElementList els = Jsoup.parse(\"<p id=0 class='one two'><p id=1 class='one'><p id=2 class='two'>\").select(\".one\");\n+        Elements els = Jsoup.parse(\"<p id=0 class='one two'><p id=1 class='one'><p id=2 class='two'>\").select(\".one\");\n         assertEquals(2, els.size());\n         assertEquals(\"0\", els.get(0).id());\n         assertEquals(\"1\", els.get(1).id());\n \n-        ElementList none = Jsoup.parse(\"<div class='one'></div>\").select(\".foo\");\n+        Elements none = Jsoup.parse(\"<div class='one'></div>\").select(\".foo\");\n         assertEquals(0, none.size());\n \n-        ElementList els2 = Jsoup.parse(\"<div class='one-two'></div>\").select(\".one-two\");\n+        Elements els2 = Jsoup.parse(\"<div class='one-two'></div>\").select(\".one-two\");\n         assertEquals(1, els2.size());\n     }\n \n     @Test public void testByAttribute() {\n         String h = \"<div title=foo /><div title=bar /><div />\";\n         Document doc = Jsoup.parse(h);\n-        ElementList withTitle = doc.select(\"[title]\");\n-        ElementList foo = doc.select(\"[title=foo]\");\n+        Elements withTitle = doc.select(\"[title]\");\n+        Elements foo = doc.select(\"[title=foo]\");\n \n         assertEquals(2, withTitle.size());\n         assertEquals(1, foo.size());\n \n     @Test public void testGroupOr() {\n         String h = \"<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>\";\n-        ElementList els = Jsoup.parse(h).select(\"p,div,[title]\");\n+        Elements els = Jsoup.parse(h).select(\"p,div,[title]\");\n \n         assertEquals(5, els.size());\n         assertEquals(\"p\", els.get(0).tagName());", "timestamp": 1309605101, "metainfo": ""}