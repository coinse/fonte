{"sha": "eb7e65e9a19e68b550e7fd0eb73c5cfea2622ff3", "log": "Implementation for Xml incl. tests.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n \n         normaliseStructure(\"head\", htmlEl);\n         normaliseStructure(\"body\", htmlEl);\n+        \n+        ensureMetaCharset();\n         \n         return this;\n     }\n     \n     private void ensureMetaCharset() {\n         if( updateMetaCharset == true ) {\n-            Element metaCharset = select(\"meta[charset]\").first();\n+            OutputSettings.Syntax syntax = outputSettings().syntax();\n             \n-            if( metaCharset != null ) {\n-                metaCharset.attr(\"charset\", outputSettings.charset().displayName());\n+            if( syntax == OutputSettings.Syntax.html ) {\n+                Element metaCharset = select(\"meta[charset]\").first();\n+\n+                if( metaCharset != null ) {\n+                    metaCharset.attr(\"charset\", charset().displayName());\n+                }\n+                else {\n+                    Element head = head();\n+\n+                    if( head != null ) {\n+                        head.appendElement(\"meta\").attr(\"charset\", charset().displayName());\n+                    }\n+                }\n+\n+                // Remove obsolete elements\n+                select(\"meta[name=charset]\").remove();\n+            }\n+            else if( syntax == OutputSettings.Syntax.xml ) {\n+                Node node = childNodes().get(0);\n+                \n+                if( node instanceof XmlDeclaration ) {\n+                    XmlDeclaration decl = (XmlDeclaration) node;\n+                    \n+                    if( decl.attr(XmlDeclaration.DECL_KEY).equals(\"xml\") ) {\n+                        decl.attr(\"encoding\", charset().displayName());\n+\n+                        final String version = decl.attr(\"version\");\n+\n+                        if( version != null ) {\n+                            decl.attr(\"version\", \"1.0\");\n+                        }\n+                    }\n+                    else {\n+                        decl = new XmlDeclaration(\"xml\", baseUri, false);\n+                        decl.attr(\"version\", \"1.0\");\n+                        decl.attr(\"encoding\", charset().displayName());\n+                        \n+                        prependChild(decl);\n+                    }\n+                }\n+                else {\n+                    XmlDeclaration decl = new XmlDeclaration(\"xml\", baseUri, false);\n+                    decl.attr(\"version\", \"1.0\");\n+                    decl.attr(\"encoding\", charset().displayName());\n+                    \n+                    prependChild(decl);\n+                }\n             }\n             else {\n-                Element head = head();\n-                \n-                if( head != null ) {\n-                    head.appendElement(\"meta\").attr(\"charset\", outputSettings.charset().displayName());\n-                }\n-            }\n-            \n-            // Remove obsolete elements\n-            select(\"meta[name=charset]\").remove();\n+                // Unsupported syntax - nothing to do yet\n+            }\n         }\n     }\n     \n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class XmlDeclaration extends Node {\n-    private static final String DECL_KEY = \"declaration\";\n+    static final String DECL_KEY = \"declaration\";\n     private final boolean isProcessingInstruction; // <! if true, <? if false, declaration (and last data char should be ?)\n \n     /**\n      @return XML declaration\n      */\n     public String getWholeDeclaration() {\n-        return attributes.get(DECL_KEY);\n+        final String decl = attributes.get(DECL_KEY);\n+        \n+        if( decl.equals(\"xml\") == true && attributes.size() > 1 ) {\n+            StringBuilder sb = new StringBuilder(decl);\n+            final String version = attributes.get(\"version\");\n+            \n+            if( version != null ) {\n+                sb.append(\" version=\\\"\").append(version).append(\"\\\"\");\n+            }\n+            \n+            final String encoding = attributes.get(\"encoding\");\n+            \n+            if( encoding != null ) {\n+                sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\");\n+            }\n+            \n+            return sb.toString();\n+        }\n+        else {\n+            return attributes.get(DECL_KEY);\n+        }\n     }\n-\n+    \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n         accum\n                 .append(\"<\")\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n         // No meta charset tag\n         final Document docNoCharset = Document.createShell(\"\");\n         docNoCharset.updateMetaCharset(true);\n-        doc.charset(Charset.forName(charsetUtf8));\n-        \n-        assertEquals(charsetUtf8, doc.select(\"meta[charset]\").first().attr(\"charset\"));\n-        assertEquals(htmlCharsetUTF8, doc.toString());\n+        docNoCharset.charset(Charset.forName(charsetUtf8));\n+        \n+        assertEquals(charsetUtf8, docNoCharset.select(\"meta[charset]\").first().attr(\"charset\"));\n+        assertEquals(htmlCharsetUTF8, docNoCharset.toString());\n         \n         \n         // Disabled update of meta charset tag\n         assertNotNull(selectedElement);\n         assertEquals(\"dontTouch\", selectedElement.attr(\"content\"));\n         \n-        doc.charset(Charset.forName(charsetUtf8));\n+        docDisabled.charset(Charset.forName(charsetUtf8));\n         selectedElement = docDisabled.select(\"meta[charset]\").first();\n         assertNotNull(selectedElement);\n         assertEquals(\"dontTouch\", selectedElement.attr(\"charset\"));\n         docCleanup.updateMetaCharset(true);\n         docCleanup.head().appendElement(\"meta\").attr(\"charset\", \"dontTouch\");\n         docCleanup.head().appendElement(\"meta\").attr(\"name\", \"charset\").attr(\"content\", \"dontTouch\");\n-        \n-        assertEquals(htmlCharsetUTF8, doc.toString());\n+        docCleanup.charset(Charset.forName(charsetUtf8));\n+        \n+        assertEquals(htmlCharsetUTF8, docCleanup.toString());\n+    }\n+    \n+    @Test\n+    public void testMetaCharsetUpdateXml() {\n+        // Existing encoding definition\n+        final Document doc = new Document(\"\");\n+        doc.appendElement(\"root\").text(\"node\");\n+        doc.outputSettings().syntax(Syntax.xml);\n+        doc.updateMetaCharset(true);\n+        \n+        XmlDeclaration decl = new XmlDeclaration(\"xml\", \"\", false);\n+        decl.attr(\"version\", \"1.0\");\n+        decl.attr(\"encoding\", \"changeThis\");\n+        doc.prependChild(decl);\n+        \n+        final String charsetUtf8 = \"UTF-8\";\n+        doc.charset(Charset.forName(charsetUtf8));\n+        \n+        Node declNode = doc.childNode(0);\n+        assertTrue(declNode instanceof XmlDeclaration);\n+        XmlDeclaration selectedNode = (XmlDeclaration) declNode;\n+        \n+        final String xmlCharsetUTF8 = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetUtf8 + \"\\\">\\n\" +\n+                                        \"<root>\\n\" +\n+                                        \" node\\n\" +\n+                                        \"</root>\";\n+\n+        assertNotNull(declNode);\n+        assertEquals(charsetUtf8, doc.charset().displayName());\n+        assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));\n+        assertEquals(\"1.0\", selectedNode.attr(\"version\"));\n+        assertEquals(xmlCharsetUTF8, doc.toString());\n+        assertEquals(doc.charset(), doc.outputSettings().charset());\n+        \n+        final String charsetIso8859 = \"ISO-8859-1\";\n+        doc.charset(Charset.forName(charsetIso8859));\n+        \n+        declNode = doc.childNode(0);\n+        assertTrue(declNode instanceof XmlDeclaration);\n+        selectedNode = (XmlDeclaration) declNode;\n+        \n+        final String xmlCharsetISO = \"<?xml version=\\\"1.0\\\" encoding=\\\"\" + charsetIso8859 + \"\\\">\\n\" +\n+                                        \"<root>\\n\" +\n+                                        \" node\\n\" +\n+                                        \"</root>\";\n+        \n+        assertNotNull(declNode);\n+        assertEquals(charsetIso8859, doc.charset().displayName());\n+        assertEquals(charsetIso8859, selectedNode.attr(\"encoding\"));\n+        assertEquals(\"1.0\", selectedNode.attr(\"version\"));\n+        assertEquals(xmlCharsetISO, doc.toString());\n+        assertEquals(doc.charset(), doc.outputSettings().charset());\n+        \n+        \n+        // No encoding definition\n+        final Document docNoCharset = new Document(\"\");\n+        docNoCharset.appendElement(\"root\").text(\"node\");\n+        docNoCharset.outputSettings().syntax(Syntax.xml);\n+        docNoCharset.updateMetaCharset(true);\n+        docNoCharset.charset(Charset.forName(charsetUtf8));\n+        \n+        declNode = docNoCharset.childNode(0);\n+        assertTrue(declNode instanceof XmlDeclaration);\n+        selectedNode = (XmlDeclaration) declNode;\n+        \n+        assertEquals(charsetUtf8, selectedNode.attr(\"encoding\"));\n+        assertEquals(xmlCharsetUTF8, docNoCharset.toString());\n+        \n+        \n+        // Disabled update of encoding definition\n+        final Document docDisabled = new Document(\"\");\n+        docDisabled.appendElement(\"root\").text(\"node\");\n+        docDisabled.outputSettings().syntax(Syntax.xml);\n+        assertFalse(docDisabled.updateMetaCharset());\n+        \n+        final String xmlNoCharset = \"<root>\\n\" +\n+                                    \" node\\n\" +\n+                                    \"</root>\";\n+        \n+        assertEquals(xmlNoCharset, docDisabled.toString());\n+        \n+        decl = new XmlDeclaration(\"xml\", \"\", false);\n+        decl.attr(\"version\", \"dontTouch\");\n+        decl.attr(\"encoding\", \"dontTouch\");\n+        docDisabled.prependChild(decl);\n+        \n+        final String xmlCharset = \"<?xml version=\\\"dontTouch\\\" encoding=\\\"dontTouch\\\">\\n\" +\n+                                    \"<root>\\n\" +\n+                                    \" node\\n\" +\n+                                    \"</root>\";\n+        \n+        assertEquals(xmlCharset, docDisabled.toString());\n+        \n+        declNode = docDisabled.childNode(0);\n+        assertTrue(declNode instanceof XmlDeclaration);\n+        selectedNode = (XmlDeclaration) declNode;\n+        \n+        assertEquals(\"dontTouch\", selectedNode.attr(\"encoding\"));\n+        assertEquals(\"dontTouch\", selectedNode.attr(\"version\"));\n     }\n }", "timestamp": 1414668941, "metainfo": ""}