{"sha": "1fd0a617cb216113997569937b43ec7c7a9c2fd2", "log": "Modified Element.text() to build text by traversing child nodes rather than recursing.  Fixes #271", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n import org.jsoup.helper.Validate;\n import org.jsoup.parser.Parser;\n import org.jsoup.parser.Tag;\n-import org.jsoup.select.Collector;\n-import org.jsoup.select.Elements;\n-import org.jsoup.select.Evaluator;\n-import org.jsoup.select.Selector;\n+import org.jsoup.select.*;\n \n import java.util.*;\n import java.util.regex.Pattern;\n      * @see #textNodes()\n      */\n     public String text() {\n-        StringBuilder sb = new StringBuilder();\n-        text(sb);\n-        return sb.toString().trim();\n-    }\n-\n-    private void text(StringBuilder accum) {\n-        appendWhitespaceIfBr(this, accum);\n-        \n-        for (Node child : childNodes) {\n-            if (child instanceof TextNode) {\n-                TextNode textNode = (TextNode) child;\n-                appendNormalisedText(accum, textNode);\n-            } else if (child instanceof Element) {\n-                Element element = (Element) child;\n-                if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum))\n-                    accum.append(\" \");\n-                element.text(accum);\n+        final StringBuilder accum = new StringBuilder();\n+        new NodeTraversor(new NodeVisitor() {\n+            public void head(Node node, int depth) {\n+                if (node instanceof TextNode) {\n+                    TextNode textNode = (TextNode) node;\n+                    appendNormalisedText(accum, textNode);\n+                } else if (node instanceof Element) {\n+                    Element element = (Element) node;\n+                    if (accum.length() > 0 &&\n+                        (element.isBlock() || element.tag.getName().equals(\"br\")) &&\n+                        !TextNode.lastCharIsWhitespace(accum))\n+                        accum.append(\" \");\n+                }\n             }\n-        }\n+\n+            public void tail(Node node, int depth) {\n+            }\n+        }).traverse(this);\n+        return accum.toString().trim();\n     }\n \n     /**\n         }\n     }\n \n-    private void appendNormalisedText(StringBuilder accum, TextNode textNode) {\n+    private static void appendNormalisedText(StringBuilder accum, TextNode textNode) {\n         String text = textNode.getWholeText();\n \n-        if (!preserveWhitespace()) {\n+        if (!preserveWhitespace(textNode.parent())) {\n             text = TextNode.normaliseWhitespace(text);\n             if (TextNode.lastCharIsWhitespace(accum))\n                 text = TextNode.stripLeadingWhitespace(text);\n             accum.append(\" \");\n     }\n \n-    boolean preserveWhitespace() {\n-        return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace();\n+    static boolean preserveWhitespace(Node node) {\n+        // looks only at this element and one level up, to prevent recursion & needless stack searches\n+        if (node != null && node instanceof Element) {\n+            Element element = (Element) node;\n+            return element.tag.preserveWhitespace() ||\n+                element.parent() != null && element.parent().tag.preserveWhitespace();\n+        }\n+        return false;\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n         String html = Entities.escape(getWholeText(), out);\n-        if (out.prettyPrint() && parent() instanceof Element && !((Element) parent()).preserveWhitespace()) {\n+        if (out.prettyPrint() && parent() instanceof Element && !Element.preserveWhitespace((Element) parent())) {\n             html = normaliseWhitespace(html);\n         }\n ", "timestamp": 1356560659, "metainfo": ""}