{"sha": "2d2c9a911c388f105c30f690fdf0b033f22b4e17", "log": "added new tests", "commit": "\n--- a/src/test/java/org/jsoup/select/SelectorNGTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorNGTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Evaluator;\n-import org.jsoup.select.ng.AndSelector;\n import org.jsoup.select.ng.BasicSelector;\n import org.jsoup.select.ng.ElementSelector;\n import org.jsoup.select.ng.ParentSelector;\n         assertEquals(\"span\", els.get(4).tagName());\n     }\n \n-    /*@Test public void testGroupOrAttribute() {\n-        String h = \"<div id=1 /><div id=2 /><div title=foo /><div title=bar />\";\n-        Elements els = Jsoup.parse(h).select(\"[id],[title=foo]\");\n-\n-        assertEquals(3, els.size());\n-        assertEquals(\"1\", els.get(0).id());\n-        assertEquals(\"2\", els.get(1).id());\n-        assertEquals(\"foo\", els.get(2).attr(\"title\"));\n-    }\n-\n-    @Test public void descendant() {\n+    @Test \n+    public void testDescendant() {\n         String h = \"<div class=head><p class=first>Hello</p><p>There</p></div><p>None</p>\";\n         Document doc = Jsoup.parse(h);\n-        Elements els = doc.select(\".head p\");\n+        Elements els = SelectMatch.match(doc, new Evaluator.Tag(\"p\"), new ParentSelector(new Evaluator.Class(\"head\"))); //\".head p\"\n         assertEquals(2, els.size());\n         assertEquals(\"Hello\", els.get(0).text());\n         assertEquals(\"There\", els.get(1).text());\n \n-        Elements p = doc.select(\"p.first\");\n+        Elements p = SelectMatch.match(doc, new ElementSelector(\"p\", \"first\", null)); //\"p.first\"\n         assertEquals(1, p.size());\n         assertEquals(\"Hello\", p.get(0).text());\n \n-        Elements empty = doc.select(\"p .first\"); // self, not descend, should not match\n+        Elements empty = SelectMatch.match(doc, new Evaluator.Class(\"first\"), new ParentSelector(new Evaluator.Tag(\"p\")));// \"p .first\" self, not descend, should not match\n         assertEquals(0, empty.size());\n     }\n     \n-    @Test public void and() {\n-        String h = \"<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div\";\n-        Document doc = Jsoup.parse(h);\n-        \n-        Elements div = doc.select(\"div.foo\");\n-        assertEquals(1, div.size());\n-        assertEquals(\"div\", div.first().tagName());\n-        \n-        Elements p = doc.select(\"div .foo\"); // space indicates like \"div *.foo\"\n-        assertEquals(1, p.size());\n-        assertEquals(\"p\", p.first().tagName());\n-        \n-        Elements div2 = doc.select(\"div#1.foo.bar[title=bar][name=qux]\"); // very specific!\n-        assertEquals(1, div2.size());\n-        assertEquals(\"div\", div2.first().tagName());\n-        \n-        Elements p2 = doc.select(\"div *.foo\"); // space indicates like \"div *.foo\"\n-        assertEquals(1, p2.size());\n-        assertEquals(\"p\", p2.first().tagName());\n-    }\n-\n-    @Test public void deeperDescendant() {\n+\n+    @Test \n+    public void testDeeperDescendant() {\n         String h = \"<div class=head><p><span class=first>Hello</div><div class=head><p class=first><span>Another</span><p>Again</div>\";\n-        Elements els = Jsoup.parse(h).select(\"div p .first\");\n+        Elements els = SelectMatch.match(Jsoup.parse(h), new Evaluator.Class(\"first\"), \n+        \t\t\n+        \t\tnew ParentSelector(BasicSelector.and(new Evaluator.Tag(\"p\"), new ParentSelector(new Evaluator.Tag(\"div\"))))); //\"div p .first\"\n         assertEquals(1, els.size());\n         assertEquals(\"Hello\", els.first().text());\n         assertEquals(\"span\", els.first().tagName());\n     }\n \n-    @Test public void parentChildElement() {\n+    /*@Test public void parentChildElement() {\n         String h = \"<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>\";\n         Document doc = Jsoup.parse(h);\n ", "timestamp": 1309605123, "metainfo": ""}