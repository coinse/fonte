{"sha": "119fd967ba85924a5fe0d93e2f9fad3fe068c6fa", "log": "Treat 2xx and 3xx as OK, Location for redir  Fixes #312", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n  * @see org.jsoup.Jsoup#connect(String)\n  */\n public class HttpConnection implements Connection {\n-    private static final int HTTP_TEMP_REDIR = 307; // http/1.1 temporary redirect, not in Java's set.\n     public static final String  CONTENT_ENCODING = \"Content-Encoding\";\n     private static final String CONTENT_TYPE = \"Content-Type\";\n     private static final String MULTIPART_FORM_DATA = \"multipart/form-data\";\n \n     public static class Response extends HttpConnection.Base<Connection.Response> implements Connection.Response {\n         private static final int MAX_REDIRECTS = 20;\n+        private static final String LOCATION = \"Location\";\n         private int statusCode;\n         private String statusMessage;\n         private ByteBuffer byteData;\n                     writePost(req, conn.getOutputStream(), mimeBoundary);\n \n                 int status = conn.getResponseCode();\n-                boolean needsRedirect = false;\n-                if (status != HttpURLConnection.HTTP_OK) {\n-                    if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER || status == HTTP_TEMP_REDIR)\n-                        needsRedirect = true;\n-                    else if (!req.ignoreHttpErrors())\n-                        throw new HttpStatusException(\"HTTP error fetching URL\", status, req.url().toString());\n-                }\n                 res = new Response(previousResponse);\n                 res.setupFromConnection(conn, previousResponse);\n-                if (needsRedirect && req.followRedirects()) {\n+                res.req = req;\n+\n+                // redirect if there's a location header (from 3xx, or 201 etc)\n+                if (res.hasHeader(LOCATION) && req.followRedirects()) {\n                     req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.\n                     req.data().clear();\n \n-                    String location = res.header(\"Location\");\n+                    String location = res.header(LOCATION);\n                     if (location != null && location.startsWith(\"http:/\") && location.charAt(6) != '/') // fix broken Location: http:/temp/AAG_New/en/index.php\n                         location = location.substring(6);\n                     req.url(new URL(req.url(), encodeUrl(location)));\n                     }\n                     return execute(req, res);\n                 }\n-                res.req = req;\n+                if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())\n+                        throw new HttpStatusException(\"HTTP error fetching URL\", status, req.url().toString());\n \n                 // check that we can handle the returned content type; if not, abort before fetching it\n                 String contentType = res.contentType();\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n                 .post();\n \n         assertEquals(\"Baseline DCT, Huffman coding\", result.select(\"td:contains(Process) + td\").text());\n-\n+    }\n+\n+    @Test\n+    public void handles201Created() throws IOException {\n+        Document doc = Jsoup.connect(\"http://direct.infohound.net/tools/201.pl\").get(); // 201, location=jsoup\n+        assertEquals(\"http://jsoup.org\", doc.location());\n     }\n \n }", "timestamp": 1413070699, "metainfo": ""}