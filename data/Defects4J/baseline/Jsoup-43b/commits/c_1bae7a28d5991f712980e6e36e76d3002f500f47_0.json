{"sha": "1bae7a28d5991f712980e6e36e76d3002f500f47", "log": "Merge branch 'master' into issue_290", "commit": "\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n \n import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.FormElement;\n import org.jsoup.nodes.Node;\n \n import java.util.*;\n         return this;\n     }\n \n+    /**\n+     * Get the {@link FormElement} forms from the selected elements, if any.\n+     * @return a list of FormElements pulled from the matched elements. The list will be empty if the elements contain\n+     * no forms.\n+     */\n+    public List<FormElement> forms() {\n+        ArrayList<FormElement> forms = new ArrayList<FormElement>();\n+        for (Element el: contents)\n+            if (el instanceof FormElement)\n+                forms.add((FormElement) el);\n+        return forms;\n+    }\n+\n     // implements List<Element> delegates:\n     public int size() {return contents.size();}\n \n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.FormElement;\n import org.jsoup.nodes.Node;\n import org.junit.Test;\n+\n+import java.util.List;\n+\n import static org.junit.Assert.*;\n \n /**\n         });\n         assertEquals(\"<div><p><#text></#text></p></div><div><#text></#text></div>\", accum.toString());\n     }\n+\n+    @Test public void forms() {\n+        Document doc = Jsoup.parse(\"<form id=1><input name=q></form><div /><form id=2><input name=f></form>\");\n+        Elements els = doc.select(\"*\");\n+        assertEquals(9, els.size());\n+\n+        List<FormElement> forms = els.forms();\n+        assertEquals(2, forms.size());\n+        assertTrue(forms.get(0) != null);\n+        assertTrue(forms.get(1) != null);\n+        assertEquals(\"1\", forms.get(0).id());\n+        assertEquals(\"2\", forms.get(1).id());\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.LinkedList;\n import java.util.List;\n \n /**\n      */\n     @Override\n     public Node clone() {\n-        return doClone(null); // splits for orphan\n-    }\n-\n+        Node thisClone = doClone(null); // splits for orphan\n+\n+        // Queue up nodes that need their children cloned (BFS).\n+        LinkedList<Node> nodesToProcess = new LinkedList<Node>();\n+        nodesToProcess.add(thisClone);\n+\n+        while (!nodesToProcess.isEmpty()) {\n+            Node currParent = nodesToProcess.remove();\n+\n+            for (int i = 0; i < currParent.childNodes.size(); i++) {\n+                Node childClone = currParent.childNodes.get(i).doClone(currParent);\n+                currParent.childNodes.set(i, childClone);\n+                nodesToProcess.add(childClone);\n+            }\n+        }\n+\n+        return thisClone;\n+    }\n+\n+    /*\n+     * Return a clone of the node using the given parent (which can be null).\n+     * Not a deep copy of children.\n+     */\n     protected Node doClone(Node parent) {\n         Node clone;\n+\n         try {\n             clone = (Node) super.clone();\n         } catch (CloneNotSupportedException e) {\n         clone.attributes = attributes != null ? attributes.clone() : null;\n         clone.baseUri = baseUri;\n         clone.childNodes = new ArrayList<Node>(childNodes.size());\n+\n         for (Node child: childNodes)\n-            clone.childNodes.add(child.doClone(clone)); // clone() creates orphans, doClone() keeps parent\n+            clone.childNodes.add(child);\n \n         return clone;\n     }", "timestamp": 1369239987, "metainfo": ""}