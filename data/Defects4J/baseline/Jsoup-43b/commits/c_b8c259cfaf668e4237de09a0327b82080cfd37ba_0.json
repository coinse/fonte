{"sha": "b8c259cfaf668e4237de09a0327b82080cfd37ba", "log": "Check content-length != 0, or will throw an IO Exception  Fixes #538", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n         }\n     }\n \n+    static ByteBuffer emptyByteBuffer() {\n+        return ByteBuffer.allocate(0);\n+    }\n+\n     /**\n      * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default\n      * will kick in.)\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n                     throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml\",\n                             contentType, req.url().toString());\n \n-                InputStream bodyStream = null;\n-                InputStream dataStream = null;\n-                try {\n-                    dataStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n-                    bodyStream = res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\") ?\n-                            new BufferedInputStream(new GZIPInputStream(dataStream)) :\n-                            new BufferedInputStream(dataStream);\n-\n-                    res.byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize());\n-                    res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n-                } finally {\n-                    if (bodyStream != null) bodyStream.close();\n-                    if (dataStream != null) dataStream.close();\n+                res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it\n+                if (conn.getContentLength() != 0) { // -1 means unknown, chunked. sun throws an IO exception on 500 response with no content when trying to read body\n+                    InputStream bodyStream = null;\n+                    InputStream dataStream = null;\n+                    try {\n+                        dataStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();\n+                        bodyStream = res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\") ?\n+                                new BufferedInputStream(new GZIPInputStream(dataStream)) :\n+                                new BufferedInputStream(dataStream);\n+\n+                        res.byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize());\n+                    } finally {\n+                        if (bodyStream != null) bodyStream.close();\n+                        if (dataStream != null) dataStream.close();\n+                    }\n+                } else {\n+                    res.byteData = DataUtil.emptyByteBuffer();\n                 }\n             } finally {\n                 // per Java's documentation, this is not necessary, and precludes keepalives. However in practise,\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n     \n     @Test\n     public void exceptOnUnknownContentType() {\n-        String url = \"http://jsoup.org/rez/osi_logo.png\"; // not text/* but image/png, should throw\n+        String url = \"http://direct.jsoup.org/rez/osi_logo.png\"; // not text/* but image/png, should throw\n         boolean threw = false;\n         try {\n             Document doc = Jsoup.parse(new URL(url), 3000);\n         } catch (UnsupportedMimeTypeException e) {\n             threw = true;\n-            assertEquals(\"org.jsoup.UnsupportedMimeTypeException: Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml. Mimetype=image/png, URL=http://jsoup.org/rez/osi_logo.png\", e.toString());\n+            assertEquals(\"org.jsoup.UnsupportedMimeTypeException: Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml. Mimetype=image/png, URL=http://direct.jsoup.org/rez/osi_logo.png\", e.toString());\n             assertEquals(url, e.getUrl());\n             assertEquals(\"image/png\", e.getMimeType());\n         } catch (IOException e) {\n     }\n \n     @Test\n+    public void ignores500tExceptionIfSoConfigured() throws IOException {\n+        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/500.pl\").ignoreHttpErrors(true);\n+        Connection.Response res = con.execute();\n+        Document doc = res.parse();\n+        assertEquals(500, res.statusCode());\n+        assertEquals(\"Application Error\", res.statusMessage());\n+        assertEquals(\"Woops\", doc.select(\"h1\").first().text());\n+    }\n+\n+    @Test\n+    public void ignores500NoWithContentExceptionIfSoConfigured() throws IOException {\n+        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/500-no-content.pl\").ignoreHttpErrors(true);\n+        Connection.Response res = con.execute();\n+        Document doc = res.parse();\n+        assertEquals(500, res.statusCode());\n+        assertEquals(\"Application Error\", res.statusMessage());\n+    }\n+\n+    @Test\n+    public void ignores200NoWithContentExceptionIfSoConfigured() throws IOException {\n+        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/200-no-content.pl\").ignoreHttpErrors(true);\n+        Connection.Response res = con.execute();\n+        Document doc = res.parse();\n+        assertEquals(200, res.statusCode());\n+        assertEquals(\"All Good\", res.statusMessage());\n+    }\n+\n+    @Test\n     public void doesntRedirectIfSoConfigured() throws IOException {\n         Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302.pl\").followRedirects(false);\n         Connection.Response res = con.execute();", "timestamp": 1427673732, "metainfo": ""}