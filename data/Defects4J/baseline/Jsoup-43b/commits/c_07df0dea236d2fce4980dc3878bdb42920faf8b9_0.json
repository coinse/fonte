{"sha": "07df0dea236d2fce4980dc3878bdb42920faf8b9", "log": "Removed code duplication in data end tag handlers", "commit": "\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n     },\n     RawtextEndTagName {\n         void read(Tokeniser t, CharacterReader r) {\n-            if (r.matchesLetter()) {\n-                String name = r.consumeLetterSequence();\n-                t.tagPending.appendTagName(name.toLowerCase());\n-                t.dataBuffer.append(name);\n-                return;\n-            }\n-\n-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n-                char c = r.consume();\n-                switch (c) {\n-                    case '\\t':\n-                    case '\\n':\n-                    case '\\r':\n-                    case '\\f':\n-                    case ' ':\n-                        t.transition(BeforeAttributeName);\n-                        break;\n-                    case '/':\n-                        t.transition(SelfClosingStartTag);\n-                        break;\n-                    case '>':\n-                        t.emitTagPending();\n-                        t.transition(Data);\n-                        break;\n-                    default:\n-                        t.dataBuffer.append(c);\n-                        anythingElse(t, r);\n-                }\n-            } else\n-                anythingElse(t, r);\n-        }\n-\n-        private void anythingElse(Tokeniser t, CharacterReader r) {\n-            t.emit(\"</\" + t.dataBuffer.toString());\n-            t.transition(Rawtext);\n+            handleDataEndTag(t, r, Rawtext);\n         }\n     },\n     ScriptDataLessthanSign {\n     },\n     ScriptDataEndTagName {\n         void read(Tokeniser t, CharacterReader r) {\n-            if (r.matchesLetter()) {\n-                String name = r.consumeLetterSequence();\n-                t.tagPending.appendTagName(name.toLowerCase());\n-                t.dataBuffer.append(name);\n-                return;\n-            }\n-\n-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n-                char c = r.consume();\n-                switch (c) {\n-                    case '\\t':\n-                    case '\\n':\n-                    case '\\r':\n-                    case '\\f':\n-                    case ' ':\n-                        t.transition(BeforeAttributeName);\n-                        break;\n-                    case '/':\n-                        t.transition(SelfClosingStartTag);\n-                        break;\n-                    case '>':\n-                        t.emitTagPending();\n-                        t.transition(Data);\n-                        break;\n-                    default:\n-                        t.dataBuffer.append(c);\n-                        anythingElse(t, r);\n-                }\n-            } else {\n-                anythingElse(t, r);\n-            }\n-        }\n-\n-        private void anythingElse(Tokeniser t, CharacterReader r) {\n-            t.emit(\"</\" + t.dataBuffer.toString());\n-            t.transition(ScriptData);\n+            handleDataEndTag(t, r, ScriptData);\n         }\n     },\n     ScriptDataEscapeStart {\n     },\n     ScriptDataEscapedEndTagName {\n         void read(Tokeniser t, CharacterReader r) {\n-            if (r.matchesLetter()) {\n-                String name = r.consumeLetterSequence();\n-                t.tagPending.appendTagName(name.toLowerCase());\n-                t.dataBuffer.append(name);\n-                return;\n-            }\n-\n-            if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n-                char c = r.consume();\n-                switch (c) {\n-                    case '\\t':\n-                    case '\\n':\n-                    case '\\r':\n-                    case '\\f':\n-                    case ' ':\n-                        t.transition(BeforeAttributeName);\n-                        break;\n-                    case '/':\n-                        t.transition(SelfClosingStartTag);\n-                        break;\n-                    case '>':\n-                        t.emitTagPending();\n-                        t.transition(Data);\n-                        break;\n-                    default:\n-                        t.dataBuffer.append(c);\n-                        anythingElse(t, r);\n-                        break;\n-                }\n-            } else {\n-                anythingElse(t, r);\n-            }\n-        }\n-\n-        private void anythingElse(Tokeniser t, CharacterReader r) {\n-            t.emit(\"</\" + t.dataBuffer.toString());\n-            t.transition(ScriptDataEscaped);\n+            handleDataEndTag(t, r, ScriptDataEscaped);\n         }\n     },\n     ScriptDataDoubleEscapeStart {\n     private static final char replacementChar = Tokeniser.replacementChar;\n     private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);\n     private static final char eof = CharacterReader.EOF;\n+\n+    /**\n+     * Handles RawtextEndTagName, ScriptDataEndTagName, and ScriptDataEscapedEndTagName. Same body impl, just\n+     * different else exit transitions.\n+     */\n+    private static final void handleDataEndTag(Tokeniser t, CharacterReader r, TokeniserState elseTransition) {\n+        if (r.matchesLetter()) {\n+            String name = r.consumeLetterSequence();\n+            t.tagPending.appendTagName(name.toLowerCase());\n+            t.dataBuffer.append(name);\n+            return;\n+        }\n+\n+        boolean needsExitTransition = false;\n+        if (t.isAppropriateEndTagToken() && !r.isEmpty()) {\n+            char c = r.consume();\n+            switch (c) {\n+                case '\\t':\n+                case '\\n':\n+                case '\\r':\n+                case '\\f':\n+                case ' ':\n+                    t.transition(BeforeAttributeName);\n+                    break;\n+                case '/':\n+                    t.transition(SelfClosingStartTag);\n+                    break;\n+                case '>':\n+                    t.emitTagPending();\n+                    t.transition(Data);\n+                    break;\n+                default:\n+                    t.dataBuffer.append(c);\n+                    needsExitTransition = true;\n+            }\n+        } else {\n+            needsExitTransition = true;\n+        }\n+\n+        if (needsExitTransition) {\n+            t.emit(\"</\" + t.dataBuffer.toString());\n+            t.transition(elseTransition);\n+        }\n+    }\n }", "timestamp": 1359840926, "metainfo": ""}