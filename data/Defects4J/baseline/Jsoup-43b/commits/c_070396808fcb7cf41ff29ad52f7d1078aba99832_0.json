{"sha": "070396808fcb7cf41ff29ad52f7d1078aba99832", "log": "Parser updated to handle CDATA, and rogue < in text nodes.", "commit": "\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n         while (!tq.isEmpty()) {\n             if (tq.matches(\"<!--\")) {\n                 parseComment();\n+            } else if (tq.matches(\"<![CDATA[\")) {\n+                parseCdata();\n             } else if (tq.matches(\"<?\") || tq.matches(\"<!\")) {\n                 parseXmlDecl();\n             } else if (tq.matches(\"</\")) {\n     }\n \n     private void parseComment() {\n-        // TODO: this puts comments into nodes that should not hold them (e.g. img).\n         tq.consume(\"<!--\");\n         String data = tq.chompTo(\"->\");\n \n \n     private void parseStartTag() {\n         tq.consume(\"<\");\n+        String tagName = tq.consumeWord();\n+\n+        if (tagName.isEmpty()) { // doesn't look like a start tag after all; put < back on stack and handle as text\n+            tq.addFirst(\"&lt;\");\n+            parseTextNode();\n+            return;\n+        }\n+\n+\n         Attributes attributes = new Attributes();\n \n-        String tagName = tq.consumeWord();\n+\n         while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty()) {\n             Attribute attribute = parseAttribute();\n             if (attribute != null)\n     }\n \n     private void parseTextNode() {\n-        // TODO: work out whitespace requirements (between blocks, between inlines)\n         String text = tq.consumeTo(\"<\");\n         TextNode textNode = TextNode.createFromEncoded(text, baseUri);\n+        last().addChild(textNode);\n+    }\n+\n+    private void parseCdata() {\n+        tq.consume(\"<![CDATA[\");\n+        String rawText = tq.chompTo(\"]]>\");\n+        TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape\n         last().addChild(textNode);\n     }\n \n--- a/src/main/java/org/jsoup/parser/TokenQueue.java\n+++ b/src/main/java/org/jsoup/parser/TokenQueue.java\n      */\n     public Character peek() {\n         return queue.peek();\n+    }\n+\n+    public void addFirst(Character c) {\n+        queue.addFirst(c);\n+    }\n+\n+    public void addFirst(String seq) {\n+        char[] chars = seq.toCharArray();\n+        for (int i = chars.length - 1; i >= 0; i--) {\n+            addFirst(chars[i]);\n+        }\n     }\n \n     /**\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n         assertEquals(\"http://bar/4\", anchors.get(2).absUrl(\"href\"));\n     }\n \n+    @Test public void handlesCdata() {\n+        String h = \"<div id=1><![CData[<html>\\n<foo><&amp;]]></div>\"; // \"cdata\" insensitive. the &amp; in there should remain literal\n+        Document doc = Jsoup.parse(h);\n+        Element div = doc.getElementById(\"1\");\n+        assertEquals(\"<html>\\n<foo><&amp;\", div.text());\n+        assertEquals(0, div.children().size());\n+        assertEquals(1, div.childNodes().size()); // no elements, one text node\n+    }\n+\n+    @Test public void handlesInvalidStartTags() {\n+        String h = \"<div>Hello < There <&amp;></div>\"; // parse to <div {#text=Hello < There <&>}>\n+        Document doc = Jsoup.parse(h);\n+        assertEquals(\"Hello < There <&>\", doc.select(\"div\").first().text());\n+    }\n+\n \n }", "timestamp": 1309605103, "metainfo": ""}