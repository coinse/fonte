{"sha": "e5e184662975e276af582771b9a004f7d56ecfd6", "log": "Merge pull request #555 from Legioth/master  Add custom boolean attribute support #503", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n     protected final boolean shouldCollapseAttribute(Document.OutputSettings out) {\n         return (\"\".equals(value) || value.equalsIgnoreCase(key))\n                 && out.syntax() == Document.OutputSettings.Syntax.html\n-                && Arrays.binarySearch(booleanAttributes, key) >= 0;\n+                && isBooleanAttribute();\n+    }\n+\n+    protected boolean isBooleanAttribute() {\n+        return Arrays.binarySearch(booleanAttributes, key) >= 0;\n     }\n \n     @Override\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n         Attribute attr = new Attribute(key, value);\n         put(attr);\n     }\n+    \n+    /**\n+    Set a new boolean attribute, remove attribute if value is false.\n+    @param key attribute key\n+    @param value attribute value\n+    */\n+    public void put(String key, boolean value) {\n+        if (value)\n+            put(new BooleanAttribute(key));\n+        else\n+            remove(key);\n+    }\n \n     /**\n      Set a new attribute, or replace an existing one by key.\n--- /dev/null\n+++ b/src/main/java/org/jsoup/nodes/BooleanAttribute.java\n+package org.jsoup.nodes;\n+\n+/**\n+ * A boolean attribute that is written out without any value.\n+ */\n+public class BooleanAttribute extends Attribute {\n+    /**\n+     * Create a new boolean attribute from unencoded (raw) key.\n+     * @param key attribute key\n+     */\n+    public BooleanAttribute(String key) {\n+        super(key, \"\");\n+    }\n+\n+    @Override\n+    protected boolean isBooleanAttribute() {\n+        return true;\n+    }\n+}\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n      */\n     public Element attr(String attributeKey, String attributeValue) {\n         super.attr(attributeKey, attributeValue);\n+        return this;\n+    }\n+    \n+    /**\n+     * Set a boolean attribute value on this element. Setting to <code>true</code> sets the attribute value to \"\" and\n+     * marks the attribute as boolean so no value is written out. Setting to <code>false</code> removes the attribute\n+     * with the same key if it exists.\n+     * \n+     * @param attributeKey the attribute key\n+     * @param attributeValue the attribute value\n+     * \n+     * @return this element\n+     */\n+    public Element attr(String attributeKey, boolean attributeValue) {\n+        attributes.put(attributeKey, attributeValue);\n         return this;\n     }\n \n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n import org.jsoup.helper.Validate;\n import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Attributes;\n+import org.jsoup.nodes.BooleanAttribute;\n \n /**\n  * Parse tokens for the Tokeniser.\n         protected String tagName;\n         private String pendingAttributeName; // attribute names are generally caught in one hop, not accumulated\n         private StringBuilder pendingAttributeValue = new StringBuilder(); // but values are accumulated, from e.g. & in hrefs\n+        private boolean hasEmptyAttributeValue = false; // distinguish boolean attribute from empty string value\n         private boolean hasPendingAttributeValue = false;\n         boolean selfClosing = false;\n         Attributes attributes; // start tags get attributes on construction. End tags get attributes on first new attribute (but only for parser convenience, not used).\n             tagName = null;\n             pendingAttributeName = null;\n             reset(pendingAttributeValue);\n+            hasEmptyAttributeValue = false;\n             hasPendingAttributeValue = false;\n             selfClosing = false;\n             attributes = null;\n \n             if (pendingAttributeName != null) {\n                 Attribute attribute;\n-                if (!hasPendingAttributeValue)\n+                if (hasPendingAttributeValue)\n+                    attribute = new Attribute(pendingAttributeName, pendingAttributeValue.toString());\n+                else if (hasEmptyAttributeValue)\n                     attribute = new Attribute(pendingAttributeName, \"\");\n                 else\n-                    attribute = new Attribute(pendingAttributeName, pendingAttributeValue.toString());\n+                    attribute = new BooleanAttribute(pendingAttributeName);\n                 attributes.put(attribute);\n             }\n             pendingAttributeName = null;\n+            hasEmptyAttributeValue = false;\n+            hasPendingAttributeValue = false;\n             reset(pendingAttributeValue);\n         }\n \n         final void appendAttributeValue(char[] append) {\n             ensureAttributeValue();\n             pendingAttributeValue.append(append);\n+        }\n+        \n+        final void setEmptyAttributeValue() {\n+            hasEmptyAttributeValue = true;\n         }\n \n         private void ensureAttributeValue() {\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n             String value = r.consumeToAnySorted(attributeDoubleValueCharsSorted);\n             if (value.length() > 0)\n                 t.tagPending.appendAttributeValue(value);\n+            else\n+                t.tagPending.setEmptyAttributeValue();\n \n             char c = r.consume();\n             switch (c) {\n             String value = r.consumeToAnySorted(attributeSingleValueCharsSorted);\n             if (value.length() > 0)\n                 t.tagPending.appendAttributeValue(value);\n+            else\n+                t.tagPending.setEmptyAttributeValue();\n \n             char c = r.consume();\n             switch (c) {\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n             assertEquals(i, ps.get(i).siblingIndex);\n         }\n     }\n+    \n+    @Test public void testAddBooleanAttribute() {\n+        Element div = new Element(Tag.valueOf(\"div\"), \"\");\n+        \n+        div.attr(\"true\", true);\n+        \n+        div.attr(\"false\", \"value\");\n+        div.attr(\"false\", false);\n+        \n+        assertTrue(div.hasAttr(\"true\"));\n+        assertEquals(\"\", div.attr(\"true\"));\n+        \n+        List<Attribute> attributes = div.attributes().asList();\n+        assertEquals(\"There should be one attribute\", 1, attributes.size());\n+\t\tassertTrue(\"Attribute should be boolean\", attributes.get(0) instanceof BooleanAttribute);\n+        \n+        assertFalse(div.hasAttr(\"false\"));\n+ \n+        assertEquals(\"<div true></div>\", div.outerHtml());\n+    }    \n \n     @Test public void testAppendRowToTable() {\n         Document doc = Jsoup.parse(\"<table><tr><td>1</td></tr></table>\");\n--- a/src/test/java/org/jsoup/parser/AttributeParseTest.java\n+++ b/src/test/java/org/jsoup/parser/AttributeParseTest.java\n package org.jsoup.parser;\n \n+import java.util.List;\n+\n import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Attribute;\n import org.jsoup.nodes.Attributes;\n+import org.jsoup.nodes.BooleanAttribute;\n import org.jsoup.nodes.Element;\n import org.jsoup.select.Elements;\n import org.junit.Test;\n         Elements els = Jsoup.parse(html).select(\"a\");\n         assertEquals(\"&wr_id=123&mid-size=true&ok=&wr\", els.first().attr(\"href\"));\n     }\n+    \n+    @Test public void parsesBooleanAttributes() {\n+        String html = \"<a normal=\\\"123\\\" boolean empty=\\\"\\\"></a>\";\n+        Element el = Jsoup.parse(html).select(\"a\").first();\n+        \n+        assertEquals(\"123\", el.attr(\"normal\"));\n+        assertEquals(\"\", el.attr(\"boolean\"));\n+        assertEquals(\"\", el.attr(\"empty\"));\n+        \n+        List<Attribute> attributes = el.attributes().asList();\n+        assertEquals(\"There should be 3 attribute present\", 3, attributes.size());\n+        \n+        // Assuming the list order always follows the parsed html\n+\t\tassertFalse(\"'normal' attribute should not be boolean\", attributes.get(0) instanceof BooleanAttribute);        \n+\t\tassertTrue(\"'boolean' attribute should be boolean\", attributes.get(1) instanceof BooleanAttribute);        \n+\t\tassertFalse(\"'empty' attribute should not be boolean\", attributes.get(2) instanceof BooleanAttribute);        \n+        \n+        assertEquals(html, el.outerHtml());\n+    }\n+    \n }\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         String html = \"<p =a>One<a <p>Something</p>Else\";\n         // this gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated\n         Document doc = Jsoup.parse(html);\n-        assertEquals(\"<p =a=\\\"\\\">One<a <p=\\\"\\\">Something</a></p>\\n\" +\n-                \"<a <p=\\\"\\\">Else</a>\", doc.body().html());\n+        assertEquals(\"<p =a>One<a <p>Something</a></p>\\n\" +\n+                \"<a <p>Else</a>\", doc.body().html());\n \n         doc = Jsoup.parse(\"<p .....>\");\n-        assertEquals(\"<p .....=\\\"\\\"></p>\", doc.body().html());\n+        assertEquals(\"<p .....></p>\", doc.body().html());\n     }\n \n     @Test public void parsesComments() {\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n \n         for (int i = 0; i < elements.size(); i++) {\n             E element = elements.get(i);\n-            if (element.equals(search))\n+            if (element == search)\n                 return i;\n         }\n         return null;\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n                     break;\n                 case eof:\n                     t.eofError(this);\n+                    t.emitTagPending();\n                     t.transition(Data);\n                     break;\n                 case '>':\n--- a/src/main/java/org/jsoup/parser/TreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/TreeBuilder.java\n     protected abstract boolean process(Token token);\n \n     protected boolean processStartTag(String name) {\n+        if (currentToken == start) { // don't recycle an in-use token\n+            return process(new Token.StartTag().name(name));\n+        }\n         return process(start.reset().name(name));\n     }\n \n     public boolean processStartTag(String name, Attributes attrs) {\n+        if (currentToken == start) { // don't recycle an in-use token\n+            return process(new Token.StartTag().nameAttr(name, attrs));\n+        }\n         start.reset();\n         start.nameAttr(name, attrs);\n         return process(start);\n     }\n \n     protected boolean processEndTag(String name) {\n+        if (currentToken == end) { // don't recycle an in-use token\n+            return process(new Token.EndTag().name(name));\n+        }\n         return process(end.reset().name(name));\n     }\n \n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n  * <tr><td><code>E ~ F</code></td><td>an F element preceded by sibling E</td><td><code>h1 ~ p</code></td></tr>\n  * <tr><td><code>E, F, G</code></td><td>all matching elements E, F, or G</td><td><code>a[href], div, h3</code></td></tr>\n  * <tr><td><td colspan=\"3\"><h3>Pseudo selectors</h3></td></tr>\n- * <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 2 cells of each row</td></tr>\n+ * <tr><td><code>:lt(<em>n</em>)</code></td><td>elements whose sibling index is less than <em>n</em></td><td><code>td:lt(3)</code> finds the first 3 cells of each row</td></tr>\n  * <tr><td><code>:gt(<em>n</em>)</code></td><td>elements whose sibling index is greater than <em>n</em></td><td><code>td:gt(1)</code> finds cells after skipping the first two</td></tr>\n  * <tr><td><code>:eq(<em>n</em>)</code></td><td>elements whose sibling index is equal to <em>n</em></td><td><code>td:eq(0)</code> finds the first cell of each row</td></tr>\n  * <tr><td><code>:has(<em>selector</em>)</code></td><td>elements that contains at least one element matching the <em>selector</em></td><td><code>div:has(p)</code> finds divs that contain p elements </td></tr>\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"element\", p.lastElementSibling().text());\n     }\n \n+    @Test public void testGetSiblingsWithDuplicateContent() {\n+        Document doc = Jsoup.parse(\"<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>\");\n+        Element p = doc.getElementById(\"1\");\n+        assertEquals(\"there\", p.text());\n+        assertEquals(\"Hello\", p.previousElementSibling().text());\n+        assertEquals(\"this\", p.nextElementSibling().text());\n+        assertEquals(\"this\", p.nextElementSibling().nextElementSibling().text());\n+        assertEquals(\"is\", p.nextElementSibling().nextElementSibling().nextElementSibling().text());\n+        assertEquals(\"Hello\", p.firstElementSibling().text());\n+        assertEquals(\"element\", p.lastElementSibling().text());\n+    }\n+\n     @Test public void testGetParents() {\n         Document doc = Jsoup.parse(\"<div><p>Hello <span>there</span></div>\");\n         Element span = doc.select(\"span\").first();\n     \n     @Test public void testElementSiblingIndex() {\n         Document doc = Jsoup.parse(\"<div><p>One</p>...<p>Two</p>...<p>Three</p>\");\n+        Elements ps = doc.select(\"p\");\n+        assertTrue(0 == ps.get(0).elementSiblingIndex());\n+        assertTrue(1 == ps.get(1).elementSiblingIndex());\n+        assertTrue(2 == ps.get(2).elementSiblingIndex());\n+    }\n+\n+    @Test public void testElementSiblingIndexSameContent() {\n+        Document doc = Jsoup.parse(\"<div><p>One</p>...<p>One</p>...<p>One</p>\");\n         Elements ps = doc.select(\"p\");\n         assertTrue(0 == ps.get(0).elementSiblingIndex());\n         assertTrue(1 == ps.get(1).elementSiblingIndex());\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.TextUtil;\n import org.jsoup.helper.StringUtil;\n+import org.jsoup.integration.ParseTest;\n import org.jsoup.nodes.*;\n import org.jsoup.select.Elements;\n import org.junit.Test;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.util.List;\n \n import static org.junit.Assert.assertEquals;\n         assertEquals(50000, doc.body().childNodeSize());\n         assertTrue(System.currentTimeMillis() - start < 1000);\n     }\n+\n+    @Test\n+    public void testInvalidTableContents() throws IOException {\n+        File in = ParseTest.getFile(\"/htmltests/table-invalid-elements.html\");\n+        Document doc = Jsoup.parse(in, \"UTF-8\");\n+        doc.outputSettings().prettyPrint(true);\n+        String rendered = doc.toString();\n+        int endOfEmail = rendered.indexOf(\"Comment\");\n+        int guarantee = rendered.indexOf(\"Why am I here?\");\n+        assertTrue(\"Comment not found\", endOfEmail > -1);\n+        assertTrue(\"Search text not found\", guarantee > -1);\n+        assertTrue(\"Search text did not come after comment\", guarantee > endOfEmail);\n+    }\n+\n+    @Test public void testNormalisesIsIndex() {\n+        Document doc = Jsoup.parse(\"<body><isindex action='/submit'></body>\");\n+        String html = doc.outerHtml();\n+        assertEquals(\"<form action=\\\"/submit\\\"> <hr> <label>This is a searchable index. Enter search keywords: <input name=\\\"isindex\\\"></label> <hr> </form>\",\n+                StringUtil.normaliseWhitespace(doc.body().html()));\n+    }\n }\n--- a/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n+++ b/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java\n         Document doc = Jsoup.parse(\"x\", \"\", Parser.xmlParser());\n         assertEquals(Syntax.xml, doc.outputSettings().syntax());\n     }\n+\n+    @Test\n+    public void testDoesHandleEOFInTag() {\n+        String html = \"<img src=asdf onerror=\\\"alert(1)\\\" x=\";\n+        Document xmlDoc = Jsoup.parse(html, \"\", Parser.xmlParser());\n+        assertEquals(\"<img src=\\\"asdf\\\" onerror=\\\"alert(1)\\\" x=\\\"\\\" />\", xmlDoc.html());\n+    }\n }", "timestamp": 1436134779, "metainfo": ""}