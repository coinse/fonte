{"sha": "21d8c188b27937079007f0129f2b372b857f2e16", "log": "Merge branch 'pr/325'", "commit": "\n--- a/src/main/java/org/jsoup/helper/DataUtil.java\n+++ b/src/main/java/org/jsoup/helper/DataUtil.java\n import java.io.*;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n+import java.nio.charset.IllegalCharsetNameException;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.Locale;\n  *\n  */\n public class DataUtil {\n-    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");\n+    private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");\n     static final String defaultCharset = \"UTF-8\"; // used if not found in header or meta charset\n     private static final int bufferSize = 0x20000; // ~130K.\n \n             doc = parser.parseInput(docData, baseUri);\n             Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n             if (meta != null) { // if not found, will keep utf-8 as best attempt\n-                String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n+\n+                String foundCharset;\n+                if (meta.hasAttr(\"http-equiv\")) {\n+                    foundCharset = getCharsetFromContentType(meta.attr(\"content\"));\n+                    if (foundCharset == null && meta.hasAttr(\"charset\")) {\n+                        try {\n+                            if (Charset.isSupported(meta.attr(\"charset\"))) {\n+                                foundCharset = meta.attr(\"charset\");\n+                            }\n+                        } catch (IllegalCharsetNameException e) {\n+                            foundCharset = null;\n+                        }\n+                    }\n+                } else {\n+                    foundCharset = meta.attr(\"charset\");\n+                }\n+\n                 if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode\n+                    foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");\n                     charsetName = foundCharset;\n                     byteData.rewind();\n                     docData = Charset.forName(foundCharset).decode(byteData).toString();\n         Matcher m = charsetPattern.matcher(contentType);\n         if (m.find()) {\n             String charset = m.group(1).trim();\n-            if (Charset.isSupported(charset)) return charset;\n-            charset = charset.toUpperCase(Locale.ENGLISH);\n-            if (Charset.isSupported(charset)) return charset;\n+            charset = charset.replace(\"charset=\", \"\");\n+            if (charset.isEmpty()) return null;\n+            try {\n+                if (Charset.isSupported(charset)) return charset;\n+                charset = charset.toUpperCase(Locale.ENGLISH);\n+                if (Charset.isSupported(charset)) return charset;\n+            } catch (IllegalCharsetNameException e) {\n+                // if our advanced charset matching fails.... we just take the default\n+                return null;\n+            }\n         }\n         return null;\n     }\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n                 if (needsRedirect && req.followRedirects()) {\n                     req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.\n                     req.data().clear();\n-                    req.url(new URL(req.url(), encodeUrl(res.header(\"Location\"))));\n+\n+                    String location = res.header(\"Location\");\n+                    if (location != null && location.startsWith(\"http:/\") && location.charAt(6) != '/') // fix broken Location: http:/temp/AAG_New/en/index.php\n+                        location = location.substring(6);\n+                    req.url(new URL(req.url(), encodeUrl(location)));\n+\n                     for (Map.Entry<String, String> cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts)\n                         req.cookie(cookie.getKey(), cookie.getValue());\n                     }\n--- a/src/test/java/org/jsoup/helper/DataUtilTest.java\n+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java\n package org.jsoup.helper;\n-\n-import static org.junit.Assert.assertEquals;\n \n import org.jsoup.nodes.Document;\n import org.jsoup.parser.Parser;\n \n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n+\n+import static org.junit.Assert.assertEquals;\n \n public class DataUtilTest {\n     @Test\n         assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html;charset=\\\"UTF-8\\\"\"));\n         assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"ISO-8859-1\\\"\"));\n         assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=\\\"Unsupported\\\"\"));\n+        assertEquals(\"UTF-8\", DataUtil.getCharsetFromContentType(\"text/html; charset='UTF-8'\"));\n     }\n-    \n+\n     @Test public void discardsSpuriousByteOrderMark() {\n         String html = \"\\uFEFF<html><head><title>One</title></head><body>Two</body></html>\";\n         ByteBuffer buffer = Charset.forName(\"UTF-8\").encode(html);\n         Document doc = DataUtil.parseByteData(buffer, \"UTF-8\", \"http://foo.com/\", Parser.htmlParser());\n         assertEquals(\"One\", doc.head().text());\n     }\n+\n+    @Test\n+    public void shouldNotThrowExceptionOnEmptyCharset() {\n+        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=\"));\n+        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=;\"));\n+    }\n+\n+    @Test\n+    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() {\n+        assertEquals(\"ISO-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=ISO-8859-1, charset=1251\"));\n+    }\n+\n+    @Test\n+    public void shouldCorrectCharsetForDuplicateCharsetString() {\n+        assertEquals(\"iso-8859-1\", DataUtil.getCharsetFromContentType(\"text/html; charset=charset=iso-8859-1\"));\n+    }\n+\n+    @Test\n+    public void shouldReturnNullForIllegalCharsetNames() {\n+        assertEquals(null, DataUtil.getCharsetFromContentType(\"text/html; charset=$HJKDF\u00a7$/(\"));\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n import org.jsoup.select.Elements;\n-import static org.junit.Assert.*;\n import org.junit.Test;\n \n-import java.io.File;\n-import java.io.IOException;\n+import java.io.*;\n import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.*;\n \n /**\n  * Integration test: parses from real-world example HTML.\n     public void testSmhBizArticle() throws IOException {\n         File in = getFile(\"/htmltests/smh-biz-article-1.html\");\n         Document doc = Jsoup.parse(in, \"UTF-8\",\n-            \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n+                \"http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html\");\n         assertEquals(\"The board\u2019s next fear: the female quota\",\n-            doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n+                doc.title()); // note that the apos in the source is a literal \u2019 (8217), not escaped or '\n         assertEquals(\"en\", doc.select(\"html\").attr(\"xml:lang\"));\n \n         Elements articleBody = doc.select(\".articleBody > *\");\n \n         Element hs = doc.select(\"a[href*=naughty-corners-are-a-bad-idea]\").first();\n         assertEquals(\n-            \"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\",\n-            hs.attr(\"href\"));\n+                \"http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003\",\n+                hs.attr(\"href\"));\n         assertEquals(hs.attr(\"href\"), hs.attr(\"abs:href\"));\n     }\n \n         Elements results = doc.select(\"h3.r > a\");\n         assertEquals(12, results.size());\n         assertEquals(\n-            \"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\",\n-            results.get(0).attr(\"href\"));\n+                \"http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA\",\n+                results.get(0).attr(\"href\"));\n         assertEquals(\"http://www.apple.com/itunes/\",\n-            results.get(1).attr(\"href\"));\n+                results.get(1).attr(\"href\"));\n     }\n \n     @Test\n         assertEquals(\"Yahoo! JAPAN\", doc.title());\n         Element a = doc.select(\"a[href=t/2322m2]\").first();\n         assertEquals(\"http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2\",\n-            a.attr(\"abs:href\")); // session put into <base>\n+                a.attr(\"abs:href\")); // session put into <base>\n         assertEquals(\"\u5168\u56fd\u3001\u4eba\u6c17\u306e\u99c5\u30e9\u30f3\u30ad\u30f3\u30b0\", a.text());\n     }\n \n         // tests <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\">\n         File in = getFile(\"/htmltests/baidu-cn-home.html\");\n         Document doc = Jsoup.parse(in, null,\n-            \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n+                \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n         Element submit = doc.select(\"#su\").first();\n         assertEquals(\"\u767e\u5ea6\u4e00\u4e0b\", submit.attr(\"value\"));\n \n \n         doc.outputSettings().charset(\"ascii\");\n         assertEquals(\"<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      </title>\",\n-            doc.select(\"title\").outerHtml());\n+                doc.select(\"title\").outerHtml());\n     }\n \n     @Test\n         // tests <meta charset> when preceded by another <meta>\n         File in = getFile(\"/htmltests/baidu-variant.html\");\n         Document doc = Jsoup.parse(in, null,\n-            \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n+                \"http://www.baidu.com/\"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse\n         // check auto-detect from meta\n         assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n         assertEquals(\"<title>\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053</title>\", doc.select(\"title\").outerHtml());\n     }\n \n     @Test\n+    public void testBrokenHtml5CharsetWithASingleDoubleQuote() throws IOException {\n+        InputStream in = inputStreamFrom(\"<html>\\n\" +\n+                \"<head><meta charset=UTF-8\\\"></head>\\n\" +\n+                \"<body></body>\\n\" +\n+                \"</html>\");\n+        Document doc = Jsoup.parse(in, null, \"http://example.com/\");\n+        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n+    }\n+\n+    @Test\n     public void testNytArticle() throws IOException {\n         // has tags like <nyt_text>\n         File in = getFile(\"/htmltests/nyt-article-1.html\");\n         Element headline = doc.select(\"nyt_headline[version=1.0]\").first();\n         assertEquals(\"As BP Lays Out Future, It Will Not Include Hayward\", headline.text());\n     }\n-    \n+\n     @Test\n     public void testYahooArticle() throws IOException {\n         File in = getFile(\"/htmltests/yahoo-article-1.html\");\n         try {\n             File file = new File(ParseTest.class.getResource(resourceName).toURI());\n             return file;\n-        }\n-        catch (URISyntaxException e) {\n+        } catch (URISyntaxException e) {\n             throw new IllegalStateException(e);\n         }\n     }\n+\n+    private InputStream inputStreamFrom(String s) {\n+        try {\n+            return new ByteArrayInputStream(s.getBytes(\"UTF-8\"));\n+        } catch (UnsupportedEncodingException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n package org.jsoup.integration;\n \n+import org.jsoup.Connection;\n import org.jsoup.HttpStatusException;\n+import org.jsoup.Jsoup;\n import org.jsoup.UnsupportedMimeTypeException;\n+import org.jsoup.nodes.Document;\n+import org.junit.Ignore;\n import org.junit.Test;\n-import org.junit.Ignore;\n-import static org.junit.Assert.*;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.Jsoup;\n-import org.jsoup.Connection;\n-\n+\n+import java.io.IOException;\n import java.net.MalformedURLException;\n import java.net.URL;\n-import java.io.IOException;\n import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n /**\n  Tests the URL connection. Not enabled by default, so tests don't require network connection.\n         Connection con = Jsoup.connect(\"http://tinyurl.com/kgofxl8\"); // to http://www.google.com/?q=white spaces\n         Document doc = con.get();\n         assertTrue(doc.title().contains(\"Google\"));\n+    }\n+\n+    @Test\n+    public void gracefullyHandleBrokenLocationRedirect() throws IOException {\n+        Connection con = Jsoup.connect(\"http://aag-ye.com\"); // has Location: http:/temp/AAG_New/en/index.php\n+        con.get(); // would throw exception on error\n+        assertTrue(true);\n     }\n \n     @Test\n         assertEquals(actualDocText, largeRes.parse().text().length());\n         assertEquals(actualDocText, unlimitedRes.parse().text().length());\n     }\n+\n+    @Test\n+    public void shouldWorkForCharsetInExtraAttribute() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"https://www.creditmutuel.com/groupe/fr/\").execute();\n+        Document doc = res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"ISO-8859-1\", res.charset());\n+    }\n+\n+    // The following tests were added to test specific domains if they work. All code paths\n+    // which make the following test green are tested in other unit or integration tests, so the following lines\n+    // could be deleted\n+\n+    @Test\n+    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://aamo.info/\").execute();\n+        res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"ISO-8859-1\", res.charset());\n+    }\n+\n+    @Test\n+    public void shouldParseBrokenHtml5MetaCharsetTagCorrectly() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://9kuhkep.net\").execute();\n+        res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"UTF-8\", res.charset());\n+    }\n+\n+    @Test\n+    public void shouldEmptyMetaCharsetCorrectly() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://aastmultimedia.com\").execute();\n+        res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"UTF-8\", res.charset());\n+    }\n+\n+    @Test\n+    public void shouldWorkForDuplicateCharsetInTag() throws IOException {\n+        Connection.Response res = Jsoup.connect(\"http://aaptsdassn.org\").execute();\n+        Document doc = res.parse(); // would throw an error if charset unsupported\n+        assertEquals(\"ISO-8859-1\", res.charset());\n+    }\n+\n }", "timestamp": 1384133201, "metainfo": ""}