{"sha": "57bce6dc8424637621f6b660855f23e72a08c4b3", "log": "Added ability to configure the document's output charset.", "commit": "\n--- a/src/main/java/org/jsoup/DataUtil.java\n+++ b/src/main/java/org/jsoup/DataUtil.java\n      * @return\n      * @throws IOException\n      */\n-    static String load(File in, String charsetName) throws IOException {        \n+    static Document load(File in, String charsetName, String baseUri) throws IOException {\n         InputStream inStream = new FileInputStream(in);\n-        String data = readInputStream(inStream, charsetName);\n+        Document doc = readInputStream(inStream, charsetName, baseUri);\n         inStream.close();\n-        return data;\n+        return doc;\n     }\n \n     /**\n      @return\n      @throws IOException\n      */\n-    static String load(URL url, int timeoutMillis) throws IOException {\n+    static Document load(URL url, int timeoutMillis) throws IOException {\n         String protocol = url.getProtocol();\n         Validate.isTrue(protocol.equals(\"http\") || protocol.equals(\"https\"), \"Only http & https protocols supported\");\n \n         InputStream inStream = new BufferedInputStream(conn.getInputStream());\n         String charSet = getCharsetFromContentType(contentType); // may be null, readInputStream deals with it\n \n-        String data = readInputStream(inStream, charSet);\n+        Document doc = readInputStream(inStream, charSet, url.toExternalForm());\n         inStream.close();\n-        return data;\n+        return doc;\n     }\n \n     // reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support\n     // switching the chartset midstream when a meta http-equiv tag defines the charset.\n-    private static String readInputStream(InputStream inStream, String charsetName) throws IOException {\n+    private static Document readInputStream(InputStream inStream, String charsetName, String baseUri) throws IOException {\n         byte[] buffer = new byte[bufferSize];\n         ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);\n         int read;\n         ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());\n         \n         String docData;\n+        Document doc = null;\n         if (charsetName == null) { // determine from meta. safe parse as UTF-8\n             // look for <meta http-equiv=\"Content-Type\" content=\"text/html;charset=gb2312\"> or HTML5 <meta charset=\"gb2312\">\n             docData = Charset.forName(defaultCharset).decode(byteData).toString();\n-            Document doc = Jsoup.parse(docData);\n+            doc = Jsoup.parse(docData, baseUri);\n             Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();\n             if (meta != null) { // if not found, will keep utf-8 as best attempt\n                 String foundCharset = meta.hasAttr(\"http-equiv\") ? getCharsetFromContentType(meta.attr(\"content\")) : meta.attr(\"charset\");\n                 if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode\n+                    charsetName = foundCharset;\n                     byteData.rewind();\n                     docData = Charset.forName(foundCharset).decode(byteData).toString();\n+                    doc = null;\n                 }\n             }\n         } else { // specified by content type header (or by user on file load)\n             docData = Charset.forName(charsetName).decode(byteData).toString();\n         }\n-        return docData;\n+        if (doc == null) {\n+            doc = Jsoup.parse(docData, baseUri);\n+            doc.outputSettings().charset(charsetName);\n+        }\n+        return doc;\n     }\n     \n     /**\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n      the response stream.\n      */\n     public static Document parse(URL url, int timeoutMillis) throws IOException {\n-        String html = DataUtil.load(url, timeoutMillis);\n-        return parse(html, url.toExternalForm());\n+        return DataUtil.load(url, timeoutMillis);\n     }\n \n     /**\n      @throws IOException if the file could not be found, or read, or if the charsetName is invalid.\n      */\n     public static Document parse(File in, String charsetName, String baseUri) throws IOException {\n-        String html = DataUtil.load(in, charsetName);\n-        return parse(html, baseUri);\n+        return DataUtil.load(in, charsetName, baseUri);\n     }\n \n     /**\n      @see #parse(File, String, String)\n      */\n     public static Document parse(File in, String charsetName) throws IOException {\n-        String html = DataUtil.load(in, charsetName);\n-        return parse(html, in.getAbsolutePath());\n+        return DataUtil.load(in, charsetName, in.getAbsolutePath());\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n      @return HTML\n      */\n     public String html() {\n-        return key + \"=\\\"\" + StringEscapeUtils.escapeHtml(value) + \"\\\"\";\n+        return key + \"=\\\"\" + Entities.escape(value, (new Document(null)).outputSettings()) + \"\\\"\";\n     }\n     \n-    protected void html(StringBuilder accum) {\n+    protected void html(StringBuilder accum, Document.OutputSettings out) {\n         accum\n             .append(key)\n             .append(\"=\\\"\")\n-            .append(StringEscapeUtils.escapeHtml(value))\n+            .append(Entities.escape(value, out))\n             .append(\"\\\"\");\n     }\n \n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n      */\n     public String html() {\n         StringBuilder accum = new StringBuilder();\n-        html(accum);\n+        html(accum, (new Document(null)).outputSettings()); // output settings a bit funky, but this html() seldom used\n         return accum.toString();\n     }\n     \n-    void html(StringBuilder accum) {\n+    void html(StringBuilder accum, Document.OutputSettings out) {\n         for (Attribute attribute : this) {\n             accum.append(\" \");\n-            attribute.html(accum);\n+            attribute.html(accum, out);\n         }\n     }\n     \n--- a/src/main/java/org/jsoup/nodes/Comment.java\n+++ b/src/main/java/org/jsoup/nodes/Comment.java\n         return attributes.get(COMMENT_KEY);\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth) {\n+    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n         indent(accum, depth);\n-        accum.append(String.format(\"<!--%s-->\", getData()));\n+        accum\n+                .append(\"<!--\")\n+                .append(getData())\n+                .append(\"-->\");\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth) {}\n+    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n \n     public String toString() {\n         return outerHtml();\n--- a/src/main/java/org/jsoup/nodes/DataNode.java\n+++ b/src/main/java/org/jsoup/nodes/DataNode.java\n         return attributes.get(DATA_KEY);\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth) {\n+    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n         accum.append(getWholeData()); // data is not escaped in return from data nodes, so \" in script, style is plain\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth) {}\n+    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n \n     public String toString() {\n         return outerHtml();\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n import java.util.List;\n import java.util.ArrayList;\n import java.nio.charset.Charset;\n+import java.nio.charset.CharsetEncoder;\n \n /**\n  A HTML Document.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class Document extends Element {\n+    private OutputSettings outputSettings = new OutputSettings();\n \n     /**\n      Create a new, empty Document.\n     /**\n      * A Document's output settings control the form of the text() and html() methods.\n      */\n-    public static class OutputSettings {\n+    public class OutputSettings {\n         private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\n         private Charset charset = Charset.forName(\"UTF-8\");\n-        \n+        private CharsetEncoder charsetEncoder = charset.newEncoder();\n+\n         public OutputSettings() {}\n \n+        /**\n+         * Get the document's current HTML escape mode: <code>base</code>, which provides a limited set of named HTML\n+         * entities and escapes other characters as numbered entities for maximum compatibility; or <code>extended</code>,\n+         * which uses the complete set of HTML named entities.\n+         * <p>\n+         * The default escape mode is <code>base</code>.\n+         * @return the document's current escape mode\n+         */\n         public Entities.EscapeMode escapeMode() {\n             return escapeMode;\n         }\n \n+        /**\n+         * Set the document's escape mode\n+         * @param escapeMode the new escape mode to use\n+         * @return the document's output settings, for chaining\n+         */\n         public OutputSettings escapeMode(Entities.EscapeMode escapeMode) {\n             this.escapeMode = escapeMode;\n             return this;\n         }\n \n+        /**\n+         * Get the document's current output charset, which is used to control which characters are escaped when\n+         * generating HTML (via the <code>html()</code> methods), and which are kept intact.\n+         * <p>\n+         * Where possible (when parsing from a URL or File), the document's output charset is automatically set to the\n+         * input charset. Otherwise, it defaults to UTF-8.\n+         * @return the document's current charset.\n+         */\n         public Charset charset() {\n             return charset;\n         }\n \n+        /**\n+         * Update the document's output charset.\n+         * @param charset the new charset to use.\n+         * @return the document's output settings, for chaining\n+         */\n         public OutputSettings charset(Charset charset) {\n+            // todo: this should probably update the doc's meta charset\n             this.charset = charset;\n+            charsetEncoder = charset.newEncoder();\n             return this;\n         }\n \n+        /**\n+         * Update the document's output charset.\n+         * @param charset the new charset (by name) to use.\n+         * @return the document's output settings, for chaining\n+         */\n         public OutputSettings charset(String charset) {\n-            this.charset = Charset.forName(charset);\n+            charset(Charset.forName(charset));\n             return this;\n         }\n+\n+        CharsetEncoder encoder() {\n+            return charsetEncoder;\n+        }\n+    }\n+\n+    /**\n+     * Get the document's current output settings.\n+     * @return the document's current output settings.\n+     */\n+    public OutputSettings outputSettings() {\n+        return outputSettings;\n     }\n }\n \n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         return this;\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth) {\n+    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n         if (isBlock() || (parent() != null && parent().tag().canContainBlock() && siblingIndex() == 0))\n             indent(accum, depth);\n         accum\n                 .append(\"<\")\n-                .append(tagName())\n-                .append(attributes.html());\n+                .append(tagName());\n+        attributes.html(accum, out);\n \n         if (childNodes.isEmpty() && tag.isSelfClosing())\n             accum.append(\" />\");\n             accum.append(\">\");\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth) {\n+    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {\n         if (!(childNodes.isEmpty() && tag.isSelfClosing())) {\n             if (!childNodes.isEmpty() && tag.canContainBlock())\n                 indent(accum, depth);\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n  * <p/>\n  * Draft implementation. Do not consume.\n  */\n-class Entities {\n+public class Entities {\n     public enum EscapeMode {\n         base, extended\n     }\n     private static final Map<Character, String> baseByVal;\n     private static final Map<Character, String> fullByVal;\n     private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");\n+\n+    static String escape(String string, Document.OutputSettings out) {\n+        return escape(string, out.encoder(), out.escapeMode());\n+    }\n \n     static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {\n         StringBuilder accum = new StringBuilder(string.length() * 2);\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n     }\n \n     protected void outerHtml(StringBuilder accum) {\n-        new NodeTraversor(new OuterHtmlVisitor(accum)).traverse(this);\n+        new NodeTraversor(new OuterHtmlVisitor(accum, ownerDocument().outputSettings())).traverse(this);\n     }\n \n     /**\n      Get the outer HTML of this node.\n      @param accum accumulator to place HTML into\n      */\n-    abstract void outerHtmlHead(StringBuilder accum, int depth);\n-\n-    abstract void outerHtmlTail(StringBuilder accum, int depth);\n+    abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);\n+\n+    abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out);\n \n     public String toString() {\n         return outerHtml();\n \n     private static class OuterHtmlVisitor implements NodeVisitor {\n         private StringBuilder accum;\n-\n-        OuterHtmlVisitor(StringBuilder accum) {\n+        private Document.OutputSettings out;\n+\n+        OuterHtmlVisitor(StringBuilder accum, Document.OutputSettings out) {\n             this.accum = accum;\n+            this.out = out;\n         }\n \n         public void head(Node node, int depth) {\n-            node.outerHtmlHead(accum, depth);\n+            node.outerHtmlHead(accum, depth, out);\n         }\n \n         public void tail(Node node, int depth) {\n-            node.outerHtmlTail(accum, depth);\n+            node.outerHtmlTail(accum, depth, out);\n         }\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n         return StringUtils.isBlank(normaliseWhitespace(getWholeText()));\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth) {\n-        String html = StringEscapeUtils.escapeHtml(getWholeText());\n+    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+        String html = Entities.escape(getWholeText(), out);\n         if (parent() instanceof Element && !((Element) parent()).preserveWhitespace()) {\n             html = normaliseWhitespace(html);\n         }\n         accum.append(html);\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth) {}\n+    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n \n     public String toString() {\n         return outerHtml();\n      * @return TextNode containing unencoded data (e.g. &lt;)\n      */\n     public static TextNode createFromEncoded(String encodedText, String baseUri) {\n-        String text = StringEscapeUtils.unescapeHtml(encodedText);\n+        String text = Entities.unescape(encodedText);\n         return new TextNode(text, baseUri);\n     }\n \n--- a/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n+++ b/src/main/java/org/jsoup/nodes/XmlDeclaration.java\n         return attributes.get(DECL_KEY);\n     }\n \n-    void outerHtmlHead(StringBuilder accum, int depth) {\n-        accum.append(String.format(\"<%s%s>\", isProcessingInstruction ? \"!\" : \"?\", getWholeDeclaration()));\n+    void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n+        accum\n+                .append(\"<\")\n+                .append(isProcessingInstruction ? \"!\" : \"?\")\n+                .append(getWholeDeclaration())\n+                .append(\">\");\n     }\n \n-    void outerHtmlTail(StringBuilder accum, int depth) {}\n+    void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) {}\n \n     public String toString() {\n         return outerHtml();\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n import org.jsoup.Jsoup;\n import org.jsoup.nodes.Document;\n import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Entities;\n import org.jsoup.select.Elements;\n import org.junit.Test;\n \n         assertEquals(\"su\", submit.id());\n         Element newsLink = doc.select(\"a:contains(\u65b0)\").first();\n         assertEquals(\"http://news.baidu.com\", newsLink.absUrl(\"href\"));\n+\n+        // check auto-detect from meta\n+        assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n+        assertEquals(\"\\n<title>\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053      </title>\", doc.select(\"title\").outerHtml());\n+\n+        doc.outputSettings().charset(\"ascii\");\n+        assertEquals(\"\\n<title>&#30334;&#24230;&#19968;&#19979;&#65292;&#20320;&#23601;&#30693;&#36947;      </title>\", doc.select(\"title\").outerHtml());\n     }\n     \n     @Test public void testHtml5Charset() throws IOException {\n         File in = getFile(\"/htmltests/meta-charset-1.html\");\n         Document doc = Jsoup.parse(in, null, \"http://example.com/\"); //gb2312, has html5 <meta charset>\n         assertEquals(\"\u65b0\", doc.text());\n+        assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n         \n         // double check, no charset, falls back to utf8 which is incorrect\n         in = getFile(\"/htmltests/meta-charset-2.html\"); //\n         doc = Jsoup.parse(in, null, \"http://example.com\"); // gb2312, no charset\n+        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n         assertFalse(\"\u65b0\".equals(doc.text()));\n         \n         // confirm fallback to utf8\n         in = getFile(\"/htmltests/meta-charset-3.html\");\n         doc = Jsoup.parse(in, null, \"http://example.com/\"); // utf8, no charset\n+        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n         assertEquals(\"\u65b0\", doc.text());\n     }\n     \n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         String url = \"http://www.google.com\"; // no trailing / to force redir\n         Document doc = Jsoup.parse(new URL(url), 10*1000);\n         assertTrue(doc.title().contains(\"Google\"));\n-    } \n+    }\n+\n+    // @Test // uncomment to enble\n+    public void fetchBaidu() throws IOException {\n+        Document doc = Jsoup.parse(new URL(\"http://www.baidu.com/\"), 10*1000);\n+        assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n+    }\n     \n     // @Test // uncomment to enable\n     public void exceptOnUnknownContentType() {\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n         assertEquals(\"Hello\", withTitle.title());\n         assertEquals(\"Hello\", withTitle.select(\"title\").first().text());\n     }\n+\n+    @Test public void testOutputEncoding() {\n+        Document doc = Jsoup.parse(\"<p title=\u03c0>\u03c0 & < > </p>\");\n+        // default is utf-8\n+        assertEquals(\"<p title=\\\"\u03c0\\\">\u03c0 &amp; &lt; &gt; </p>\", doc.body().html());\n+        assertEquals(\"UTF-8\", doc.outputSettings().charset().displayName());\n+\n+        doc.outputSettings().charset(\"ascii\");\n+        assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode());\n+        assertEquals(\"<p title=\\\"&#960;\\\">&#960; &amp; &lt; &gt; </p>\", doc.body().html());\n+\n+        doc.outputSettings().escapeMode(Entities.EscapeMode.extended);\n+        assertEquals(\"<p title=\\\"&pi;\\\">&pi; &amp; &lt; &gt; </p>\", doc.body().html());\n+    }\n }", "timestamp": 1309605117, "metainfo": ""}