{"sha": "7649933bba7ad5960415065dd95cc99aada42240", "log": "Adds Parser.parseBodyFragment method.", "commit": "\n--- a/src/main/java/org/jsoup/Jsoup.java\n+++ b/src/main/java/org/jsoup/Jsoup.java\n     public static Document parse(String html) {\n         return Parser.parse(html, \"\");\n     }\n+    \n+    public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n+        return Parser.parseBodyFragment(bodyHtml, baseUri);\n+    }\n+    \n+    public static Document parseBodyFragment(String bodyHtml) {\n+        return Parser.parseBodyFragment(bodyHtml, \"\");\n+    }\n \n-    public static String clean(String html, Whitelist whitelist) {\n-        Document dirty = Jsoup.parse(\"<body>\" + html); // TODO: modify parser to El = Parser.parseBodyFragment\n+    public static String clean(String bodyHtml, String baseUri, Whitelist whitelist) {\n+        Document dirty = parseBodyFragment(bodyHtml, baseUri);\n         Cleaner cleaner = new Cleaner(whitelist);\n         Document clean = cleaner.clean(dirty);\n         return clean.getBody().html();\n     }\n+    \n+    public static String clean(String bodyHtml, Whitelist whitelist) {\n+        return clean(bodyHtml, \"\", whitelist);\n+    }\n }\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n     private Document doc;\n     private String baseUri;\n \n-    public Parser(String html, String baseUri) {\n+    private Parser(String html, String baseUri, boolean isBodyFragment) {\n         Validate.notNull(html);\n         Validate.notNull(baseUri);\n \n         tq = new TokenQueue(html);\n         this.baseUri = baseUri;\n \n-        doc = new Document(baseUri);\n-        stack.add(doc);\n+        if (isBodyFragment) {\n+            doc = Document.createShell(baseUri);\n+            stack.add(doc.getBody());\n+        } else {\n+            doc = new Document(baseUri);\n+            stack.add(doc);\n+        }\n     }\n \n     public static Document parse(String html, String baseUri) {\n-        Parser parser = new Parser(html, baseUri);\n+        Parser parser = new Parser(html, baseUri, false);\n         return parser.parse();\n     }\n-\n-    public Document parse() {\n+    \n+    public static Document parseBodyFragment(String bodyHtml, String baseUri) {\n+        Parser parser = new Parser(bodyHtml, baseUri, true);\n+        return parser.parse();\n+    }\n+\n+    private Document parse() {\n         while (!tq.isEmpty()) {\n             if (tq.matches(\"<!--\")) {\n                 parseComment();\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n  supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the\n  document HTML around the cleaned body HTML, or create a whitelist that allows <code>html</code> and <code>head</code>\n  elements as appropriate.\n+ <p/>\n+ If you are going to extend a whitelist, please be very careful. Make sure you understand what attributes may lead to\n+ XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See \n+ http://ha.ckers.org/xss.html for some XSS attack examples.\n \n  @author Jonathan Hedley\n  */", "timestamp": 1309605105, "metainfo": ""}