{"sha": "083189d6835464b71fff4d36caa3d55de2087825", "log": "Commented the more complex methods  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/util/HelpFormatter.java\n+++ b/src/java/org/apache/commons/cli2/util/HelpFormatter.java\n         final String gutterCenter,\n         final String gutterRight,\n         final int fullWidth) {\n+        \n+        // default the left gutter to empty string\n         if (gutterLeft == null) {\n             this.gutterLeft = \"\";\n         }\n             this.gutterLeft = gutterLeft;\n         }\n \n+        // default the center gutter to empty string\n         if (gutterCenter == null) {\n             this.gutterCenter = \"\";\n         }\n             this.gutterCenter = gutterCenter;\n         }\n \n+        // default the right gutter to empty string\n         if (gutterRight == null) {\n             this.gutterRight = \"\";\n         }\n             this.gutterRight = gutterRight;\n         }\n \n+        // calculate the available page width\n         this.pageWidth = fullWidth - gutterLeft.length() - gutterRight.length();\n+        \n+        // check available page width is valid\n         if (fullWidth - pageWidth + gutterCenter.length() < 2) {\n             throw new IllegalArgumentException(\n                 \"The gutter strings leave no space for output! \"\n         else {\n             option = group;\n         }\n-        \n+\n+        // grab the HelpLines to display\n         final List helpLines = option.helpLines(0, displaySettings, comparator);\n+        \n+        // calculate the maximum width of the usage strings\n         int usageWidth = 0;\n         for (final Iterator i = helpLines.iterator(); i.hasNext();) {\n             final HelpLine helpLine = (HelpLine)i.next();\n             final String usage = helpLine.usage(lineUsageSettings, comparator);\n             usageWidth = Math.max(usageWidth, usage.length());\n         }\n+        \n+        // build a blank string to pad wrapped descriptions\n         final StringBuffer blankBuffer = new StringBuffer();\n         for (int i = 0; i < usageWidth; i++) {\n             blankBuffer.append(' ');\n         }\n+        \n+        // determine the width available for descriptions\n         final int descriptionWidth = Math.max(1,\n             pageWidth - gutterCenter.length() - usageWidth);\n+        \n+        // display each HelpLine\n         for (final Iterator i = helpLines.iterator(); i.hasNext();) {\n+            \n+            // grab the HelpLine\n             final HelpLine helpLine = (HelpLine)i.next();\n-            final List descriptionLines =\n+            \n+            // wrap the description\n+            final List descList =\n                 wrap(helpLine.getDescription(), descriptionWidth);\n-            final Iterator j = descriptionLines.iterator();\n-\n+            final Iterator descriptionIterator = descList.iterator();\n+\n+            // display usage + first line of description\n             printGutterLeft();\n             pad(helpLine.usage(lineUsageSettings, comparator), usageWidth, out);\n             out.print(gutterCenter);\n-            pad((String)j.next(), descriptionWidth, out);\n+            pad((String)descriptionIterator.next(), descriptionWidth, out);\n             printGutterRight();\n             out.println();\n \n-            while (j.hasNext()) {\n+            // display padding + remaining lines of description\n+            while (descriptionIterator.hasNext()) {\n                 printGutterLeft();\n                 //pad(helpLine.getUsage(),usageWidth,out);\n                 out.print(blankBuffer);\n                 out.print(gutterCenter);\n-                pad((String)j.next(), descriptionWidth, out);\n+                pad((String)descriptionIterator.next(), descriptionWidth, out);\n                 printGutterRight();\n                 out.println();\n             }\n         final int width,\n         final Writer writer)\n         throws IOException {\n-        int left;\n+        final int left;\n+        \n+        // write the text and record how many characters written\n         if (text == null) {\n             left = 0;\n         }\n             left = text.length();\n         }\n \n+        // pad remainder with spaces\n         for (int i = left; i < width; ++i) {\n             writer.write(' ');\n         }\n     }\n \n     protected static List wrap(final String text, final int width) {\n+        \n+        // check for valid width\n         if(width<1){\n             throw new IllegalArgumentException(\"width must be positive\");\n         }\n         \n+        // handle degenerate case\n         if (text == null) {\n             return Collections.singletonList(\"\");\n         }\n         final char[] chars = text.toCharArray();\n         int left = 0;\n \n+        // for each character in the string\n         while (left < chars.length) {\n+            // sync left and right indeces\n             int right = left;\n+            \n+            // move right until we run out of characters, width or find a newline\n             while (right < chars.length && chars[right] != '\\n' && right<left+width+1) {\n                 right++;\n             }\n+            \n+            // if a newline was found\n             if (right<chars.length && chars[right] == '\\n') {\n+                // record the substring\n                 final String line = new String(chars, left, right - left);\n                 lines.add(line);\n+                // move to the end of the substring\n                 left = right + 1;\n                 if (left == chars.length) {\n                     lines.add(\"\");\n                 }\n+                // restart the loop\n                 continue;\n             }\n-\n+            \n+            // move to the next ideal wrap point \n             right = left + width - 1;\n+            \n+            // if we have run out of characters\n             if (chars.length <= right) {\n+                // record the substring\n                 final String line =\n                     new String(chars, left, chars.length - left);\n                 lines.add(line);\n+                \n+                // abort the loop\n                 break;\n             }\n+            \n+            // back track the substring end until a space is found\n             while (right >= left && chars[right] != ' ') {\n                 right--;\n             }\n+\n+            // if a space was found\n             if (right >= left) {\n+                // record the substring to space\n                 final String line = new String(chars, left, right - left);\n                 lines.add(line);\n-                left = right;\n+                \n+                // absorb all the spaces before next substring\n                 while (right < chars.length && chars[right] == ' ') {\n                     right++;\n                 }\n                 left = right;\n+                \n+                // restart the loop\n                 continue;\n             }\n \n+            // move to the wrap position irrespective of spaces\n             right = Math.min(left + width, chars.length);\n+            \n+            // record the substring\n             final String line = new String(chars, left, right - left);\n             lines.add(line);\n+            \n+            // absorb any the spaces before next substring\n             while (right < chars.length && chars[right] == ' ') {\n                 right++;\n             }", "timestamp": 1113668641, "metainfo": ""}