{"sha": "b1efd861095ee4f0a13337fa4e83e900a297d0bd", "log": "support for Options with optional argument values   ", "commit": "\n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n      * an optional argument.\n      */\n     public void setOptionalArg( boolean optionalArg ) {\n-        if( optionalArg ) {\n-            this.numberOfArgs = 1;\n-        }\n         this.optionalArg = optionalArg;\n     }\n \n--- a/src/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/OptionBuilder.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.8 2002/09/09 19:48:13 jkeyes Exp $\n- * $Revision: 1.8 $\n- * $Date: 2002/09/09 19:48:13 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.9 2002/09/10 21:35:57 jkeyes Exp $\n+ * $Revision: 1.9 $\n+ * $Date: 2002/09/10 21:35:57 $\n  *\n  * ====================================================================\n  *\n      * @return the OptionBuilder instance\n      */\n     public static OptionBuilder hasOptionalArg( ) {\n+        instance.numberOfArgs = 1;\n+        instance.optionalArg = true;\n+        return instance;\n+    }\n+\n+    /**\n+     * <p>The next Option can have an unlimited number of\n+     * optional arguments.</p>\n+     *\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder hasOptionalArgs( ) {\n+        instance.numberOfArgs = Option.UNLIMITED_VALUES;\n+        instance.optionalArg = true;\n+        return instance;\n+    }\n+\n+    /**\n+     * <p>The next Option can have the specified number of \n+     * optional arguments.</p>\n+     *\n+     * @param numArgs - the maximum number of optional arguments\n+     * the next Option created can have.\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder hasOptionalArgs( int numArgs ) {\n+        instance.numberOfArgs = numArgs;\n         instance.optionalArg = true;\n         return instance;\n     }\n     throws IllegalArgumentException\n     {\n         return create( String.valueOf( opt ) );\n+    }\n+\n+    /**\n+     * <p>Create an Option using the current settings</p>\n+     *\n+     * @return the Option instance\n+     * @throws IllegalArgumentException if <code>longOpt</code> has\n+     * not been set.  \n+     * @see Option.\n+     */\n+    public static Option create() \n+    throws IllegalArgumentException\n+    {\n+        if( longopt == null ) {\n+            throw new IllegalArgumentException( \"must specify longopt\" );\n+        }\n+\n+        return create( \" \" );\n     }\n \n     /**\n         // return the Option instance\n         return option;\n     }\n-\n-    /**\n-     * <p>Create an Option using the current settings</p>\n-     *\n-     * @return the Option instance\n-     * @throws IllegalArgumentException if <code>longOpt</code> has\n-     * not been set.  \n-     * @see Option.\n-     */\n-    public static Option create() \n-    throws IllegalArgumentException\n-    {\n-        if( longopt == null ) {\n-            throw new IllegalArgumentException( \"must specify longopt\" );\n-        }\n-\n-        return create( \" \" );\n-    }\n }\n--- a/src/test/org/apache/commons/cli/ValueTest.java\n+++ b/src/test/org/apache/commons/cli/ValueTest.java\n \n     public static Test suite() { \n         return new TestSuite(ValueTest.class); \n-        /*\n-        TestSuite suite = new TestSuite();\n-\n-        suite.addTest( new ValueTest(\"testLongNoArg\") );\n-\n-        return suite;\n-        */\n     }\n \n     private CommandLine _cl = null;\n-\n+    private CommandLine _clOptional = null;\n+    private Options opts = new Options();\n \n     public ValueTest(String name)\n     {\n \n     public void setUp()\n     {\n-        Options opts = new Options();\n         opts.addOption(\"a\",\n                        false,\n                        \"toggle -a\");\n                        true,\n                        \"set -d\");\n \n+        opts.addOption( OptionBuilder.hasOptionalArg()\n+                        .create( 'e') );\n+\n+        opts.addOption( OptionBuilder.hasOptionalArg()\n+                        .withLongOpt( \"fish\" )\n+                        .create( ) );\n+\n+        opts.addOption( OptionBuilder.hasOptionalArgs()\n+                        .withLongOpt( \"gravy\" )\n+                        .create( ) );\n+\n+        opts.addOption( OptionBuilder.hasOptionalArgs( 2 )\n+                        .withLongOpt( \"hide\" )\n+                        .create( ) );\n+\n+        opts.addOption( OptionBuilder.hasOptionalArgs( 2 )\n+                        .create( 'i' ) );\n+\n+        opts.addOption( OptionBuilder.hasOptionalArgs( )\n+                        .create( 'j' ) );\n+\n         String[] args = new String[] { \"-a\",\n-                                       \"-b\", \"foo\",\n-                                       \"--c\",\n-                                       \"--d\", \"bar\" };\n+            \"-b\", \"foo\",\n+            \"--c\",\n+            \"--d\", \"bar\" \n+        };\n \n         try\n         {\n         assertNotNull( _cl.getOptionValue(\"d\") );\n         assertEquals( _cl.getOptionValue(\"d\"), \"bar\");\n     }\n+\n+    public void testShortOptionalArgNoValue()\n+    {\n+        String[] args = new String[] { \"-e\"\n+        };\n+        try\n+        {\n+            CommandLineParser parser = CommandLineParserFactory.newParser();\n+            CommandLine cmd = parser.parse(opts,args);\n+            assertTrue( cmd.hasOption(\"e\") );\n+            assertNull( cmd.getOptionValue(\"e\") );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+    }\n+\n+    public void testShortOptionalArgValue()\n+    {\n+        String[] args = new String[] { \"-e\", \"everything\"\n+        };\n+        try\n+        {\n+            CommandLineParser parser = CommandLineParserFactory.newParser();\n+            CommandLine cmd = parser.parse(opts,args);\n+            assertTrue( cmd.hasOption(\"e\") );\n+            assertEquals( \"everything\", cmd.getOptionValue(\"e\") );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+    }\n+\n+    public void testLongOptionalNoValue()\n+    {\n+        String[] args = new String[] { \"--fish\"\n+        };\n+        try\n+        {\n+            CommandLineParser parser = CommandLineParserFactory.newParser();\n+            CommandLine cmd = parser.parse(opts,args);\n+            assertTrue( cmd.hasOption(\"fish\") );\n+            assertNull( cmd.getOptionValue(\"fish\") );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+    }\n+\n+    public void testLongOptionalArgValue()\n+    {\n+        String[] args = new String[] { \"--fish\", \"face\"\n+        };\n+        try\n+        {\n+            CommandLineParser parser = CommandLineParserFactory.newParser();\n+            CommandLine cmd = parser.parse(opts,args);\n+            assertTrue( cmd.hasOption(\"fish\") );\n+            assertEquals( \"face\", cmd.getOptionValue(\"fish\") );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+    }\n+\n+    public void testShortOptionalArgValues()\n+    {\n+        String[] args = new String[] { \"-j\", \"ink\", \"idea\"\n+        };\n+        try\n+        {\n+            CommandLineParser parser = CommandLineParserFactory.newParser();\n+            CommandLine cmd = parser.parse(opts,args);\n+            assertTrue( cmd.hasOption(\"j\") );\n+            assertEquals( \"ink\", cmd.getOptionValue(\"j\") );\n+            assertEquals( \"ink\", cmd.getOptionValues(\"j\")[0] );\n+            assertEquals( \"idea\", cmd.getOptionValues(\"j\")[1] );\n+            assertEquals( cmd.getArgs().length, 0 );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+    }\n+\n+    public void testLongOptionalArgValues()\n+    {\n+        String[] args = new String[] { \"--gravy\", \"gold\", \"garden\"\n+        };\n+        try\n+        {\n+            CommandLineParser parser = CommandLineParserFactory.newParser();\n+            CommandLine cmd = parser.parse(opts,args);\n+            assertTrue( cmd.hasOption(\"gravy\") );\n+            assertEquals( \"gold\", cmd.getOptionValue(\"gravy\") );\n+            assertEquals( \"gold\", cmd.getOptionValues(\"gravy\")[0] );\n+            assertEquals( \"garden\", cmd.getOptionValues(\"gravy\")[1] );\n+            assertEquals( cmd.getArgs().length, 0 );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+    }\n+\n+    public void testShortOptionalNArgValues()\n+    {\n+        String[] args = new String[] { \"-i\", \"ink\", \"idea\", \"isotope\", \"ice\"\n+        };\n+        try\n+        {\n+            CommandLineParser parser = CommandLineParserFactory.newParser();\n+            CommandLine cmd = parser.parse(opts,args);\n+            assertTrue( cmd.hasOption(\"i\") );\n+            assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n+            assertEquals( \"ink\", cmd.getOptionValues(\"i\")[0] );\n+            assertEquals( \"idea\", cmd.getOptionValues(\"i\")[1] );\n+            assertEquals( cmd.getArgs().length, 2 );\n+            assertEquals( \"isotope\", cmd.getArgs()[0] );\n+            assertEquals( \"ice\", cmd.getArgs()[1] );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+    }\n+\n+    public void testLongOptionalNArgValues()\n+    {\n+        String[] args = new String[] { \"--hide\", \"house\", \"hair\", \"head\"\n+        };\n+        try\n+        {\n+            CommandLineParser parser = CommandLineParserFactory.newParser();\n+            CommandLine cmd = parser.parse(opts,args);\n+            assertTrue( cmd.hasOption(\"hide\") );\n+            assertEquals( \"house\", cmd.getOptionValue(\"hide\") );\n+            assertEquals( \"house\", cmd.getOptionValues(\"hide\")[0] );\n+            assertEquals( \"hair\", cmd.getOptionValues(\"hide\")[1] );\n+            assertEquals( cmd.getArgs().length, 1 );\n+            assertEquals( \"head\", cmd.getArgs()[0] );\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n+        }\n+    }\n }", "timestamp": 1031693757, "metainfo": ""}