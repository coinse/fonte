{"sha": "1042ba35258c9fcfa9f14ccd240d0d1212a2e3ce", "log": "Moved the tests related to the HelpFormatter in BugsTest into HelpFormatterTest  ", "commit": "\n--- a/src/test/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/org/apache/commons/cli/BugsTest.java\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.util.Iterator;\n-import java.util.List;\n import java.util.Properties;\n \n import junit.framework.TestCase;\n         CommandLine line = parser.parse( options, args );\n         assertEquals( \"Two Words\", line.getOptionValue( \"m\" ) );\n     }\n-\n-    public void test27635()\n-    {\n-        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n-        Option version = new Option(\"v\", \"version\", false, \"print version information\");\n-        Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n-        Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n-        \n-        Option timeLimit = OptionBuilder.withLongOpt(\"limit\")\n-                                        .hasArg()\n-                                        .withValueSeparator()\n-                                        .withDescription(\"Set time limit for execution, in mintues\")\n-                                        .create(\"l\");\n-        \n-        Option age = OptionBuilder.withLongOpt(\"age\")\n-                                        .hasArg()\n-                                        .withValueSeparator()\n-                                        .withDescription(\"Age (in days) of cache item before being recomputed\")\n-                                        .create(\"a\");\n-        \n-        Option server = OptionBuilder.withLongOpt(\"server\")\n-                                        .hasArg()\n-                                        .withValueSeparator()\n-                                        .withDescription(\"The NLT server address\")\n-                                        .create(\"s\");\n-        \n-        Option numResults = OptionBuilder.withLongOpt(\"results\")\n-                                        .hasArg()\n-                                        .withValueSeparator()\n-                                        .withDescription(\"Number of results per item\")\n-                                        .create(\"r\");\n-        \n-        Option configFile = OptionBuilder.withLongOpt(\"config\")\n-                                        .hasArg()\n-                                        .withValueSeparator()\n-                                        .withDescription(\"Use the specified configuration file\")\n-                                        .create();\n-        \n-        Options mOptions = new Options();\n-        mOptions.addOption(help);\n-        mOptions.addOption(version);\n-        mOptions.addOption(newRun);\n-        mOptions.addOption(trackerRun);\n-        mOptions.addOption(timeLimit);\n-        mOptions.addOption(age);\n-        mOptions.addOption(server);\n-        mOptions.addOption(numResults);\n-        mOptions.addOption(configFile);\n-        \n-        HelpFormatter formatter = new HelpFormatter();\n-        final String EOL = System.getProperty(\"line.separator\");\n-        StringWriter out = new StringWriter();\n-        formatter.printHelp(new PrintWriter(out),80,\"commandline\",\"header\",mOptions,2,2,\"footer\",true);\n-        assertEquals(\n-                \"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\" + EOL +\n-                \"       [-s <arg>] [-t] [-v]\" + EOL +\n-                \"header\"+EOL+\n-                \"  -a,--age <arg>      Age (in days) of cache item before being recomputed\"+EOL+\n-                \"     --config <arg>   Use the specified configuration file\"+EOL+\n-                \"  -h,--help           print this message\"+EOL+\n-                \"  -l,--limit <arg>    Set time limit for execution, in mintues\"+EOL+\n-                \"  -n,--new            Create NLT cache entries only for new items\"+EOL+\n-                \"  -r,--results <arg>  Number of results per item\"+EOL+\n-                \"  -s,--server <arg>   The NLT server address\"+EOL+\n-                \"  -t,--tracker        Create NLT cache entries only for tracker items\"+EOL+\n-                \"  -v,--version        print version information\"+EOL+\n-                \"footer\"+EOL\n-                ,out.toString());\n-    }\n     \n     public void test31148() throws ParseException\n     {\n         assertTrue(cl.hasOption('o'));\n         assertEquals(\"ovalue\",cl.getOptionValue('o'));\n     }\n-    \n-    public void test21215()\n-    {\n-        Options options = new Options();\n-        HelpFormatter formatter = new HelpFormatter();\n-        String SEP = System.getProperty(\"line.separator\");\n-        String header = SEP+\"Header\";\n-        String footer = \"Footer\";\n-        StringWriter out = new StringWriter();\n-        formatter.printHelp(new PrintWriter(out),80, \"foobar\", header, options, 2, 2, footer, true);\n-        assertEquals(\n-                \"usage: foobar\"+SEP+\n-                \"\"+SEP+\n-                \"Header\"+SEP+\n-                \"\"+SEP+\n-                \"Footer\"+SEP\n-                ,out.toString());\n-    }\n-    \n-    public void test19383()\n-    {\n-        Options options = new Options();\n-        options.addOption(new Option(\"a\",\"aaa\",false,\"aaaaaaa\"));\n-        options.addOption(new Option(null,\"bbb\",false,\"bbbbbbb\"));\n-        options.addOption(new Option(\"c\",null,false,\"ccccccc\"));\n-        \n-        HelpFormatter formatter = new HelpFormatter();\n-        String SEP = System.getProperty(\"line.separator\");\n-        StringWriter out = new StringWriter();\n-        formatter.printHelp(new PrintWriter(out),80, \"foobar\", \"\", options, 2, 2, \"\", true);\n-        assertEquals(\n-                \"usage: foobar [-a] [--bbb] [-c]\"+SEP+\n-                \"  -a,--aaa  aaaaaaa\"+SEP+\n-                \"     --bbb  bbbbbbb\"+SEP+\n-                \"  -c        ccccccc\"+SEP\n-                ,out.toString());\n-    }\n \n }\n--- a/src/test/org/apache/commons/cli/HelpFormatterTest.java\n+++ b/src/test/org/apache/commons/cli/HelpFormatterTest.java\n  * @author Slawek Zachcial\n  * @author John Keyes ( john at integralsource.com )\n  * @author brianegge\n- **/\n+ */\n public class HelpFormatterTest extends TestCase\n {\n-   private static final String EOL = System.getProperty(\"line.separator\");\n-\n-   public static void main( String[] args )\n-   {\n-      String[] testName = { HelpFormatterTest.class.getName() };\n-      junit.textui.TestRunner.main(testName);\n-   }\n-\n-   public void testFindWrapPos() throws Exception\n-   {\n-      HelpFormatter hf = new HelpFormatter();\n-\n-      String text = \"This is a test.\";\n-      //text width should be max 8; the wrap postition is 7\n-      assertEquals(\"wrap position\", 7, hf.findWrapPos(text, 8, 0));\n-      //starting from 8 must give -1 - the wrap pos is after end\n-      assertEquals(\"wrap position 2\", -1, hf.findWrapPos(text, 8, 8));\n-      //if there is no a good position before width to make a wrapping look for the next one\n-      text = \"aaaa aa\";\n-      assertEquals(\"wrap position 3\", 4, hf.findWrapPos(text, 3, 0));\n-   }\n-\n-   public void testPrintWrapped() throws Exception\n-   {\n-      StringBuffer sb = new StringBuffer();\n-      HelpFormatter hf = new HelpFormatter();\n-\n-      String text = \"This is a test.\";\n-      String expected;\n-\n-      expected = \"This is a\" + hf.getNewLine() + \"test.\";\n-      hf.renderWrappedText(sb, 12, 0, text);\n-      assertEquals(\"single line text\", expected, sb.toString());\n-\n-      sb.setLength(0);\n-      expected = \"This is a\" + hf.getNewLine() + \"    test.\";\n-      hf.renderWrappedText(sb, 12, 4, text);\n-      assertEquals(\"single line padded text\", expected, sb.toString());\n-\n-      text = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" +\n-          \"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\n-\n-      sb.setLength(0);\n-      expected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" +\n-                 hf.getNewLine() +\n-                 \"                        form DATE[-DATE] where DATE\" +\n-                 hf.getNewLine() +\n-                 \"                        has form YYYY[MM[DD]]\";\n-      hf.renderWrappedText(sb, 53, 24, text);\n-      assertEquals(\"single line padded text 2\", expected, sb.toString());\n-\n-      text =\n-         \"aaaa aaaa aaaa\" + hf.getNewLine() +\n-         \"aaaaaa\" + hf.getNewLine() +\n-         \"aaaaa\";\n-\n-      expected = text;\n-      sb.setLength(0);\n-      hf.renderWrappedText(sb, 16, 0, text);\n-      assertEquals(\"multi line text\", expected, sb.toString());\n-\n-      expected =\n-         \"aaaa aaaa aaaa\" + hf.getNewLine() +\n-         \"    aaaaaa\" + hf.getNewLine() +\n-         \"    aaaaa\";\n-      sb.setLength(0);\n-      hf.renderWrappedText(sb, 16, 4, text);\n-      assertEquals(\"multi-line padded text\", expected, sb.toString());\n-   }\n-\n-   public void testPrintOptions() throws Exception\n-   {\n-       StringBuffer sb = new StringBuffer();\n-       HelpFormatter hf = new HelpFormatter();\n-       final int leftPad = 1;\n-       final int descPad = 3;\n-       final String lpad = hf.createPadding(leftPad);\n-       final String dpad = hf.createPadding(descPad);\n-       Options options = null;\n-       String expected = null;\n-\n-       options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n-       expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa aaaa aaaa\";\n-       hf.renderOptions(sb, 60, options, leftPad, descPad);\n-       assertEquals(\"simple non-wrapped option\", expected, sb.toString());\n-\n-       int nextLineTabStop = leftPad+descPad+\"-a\".length();\n-       expected =\n-           lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + hf.getNewLine() +\n-           hf.createPadding(nextLineTabStop) + \"aaaa aaaa\";\n-       sb.setLength(0);\n-       hf.renderOptions(sb, nextLineTabStop+17, options, leftPad, descPad);\n-       assertEquals(\"simple wrapped option\", expected, sb.toString());\n-\n-\n-       options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\");\n-       expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd dddd dddd\";\n-       sb.setLength(0);\n-       hf.renderOptions(sb, 60, options, leftPad, descPad);\n-       assertEquals(\"long non-wrapped option\", expected, sb.toString());\n-\n-       nextLineTabStop = leftPad+descPad+\"-a,--aaa\".length();\n-       expected =\n-           lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n-           hf.createPadding(nextLineTabStop) + \"dddd dddd\";\n-       sb.setLength(0);\n-       hf.renderOptions(sb, 25, options, leftPad, descPad);\n-       assertEquals(\"long wrapped option\", expected, sb.toString());\n-\n-       options = new Options().\n-           addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").\n-           addOption(\"b\", false, \"feeee eeee eeee eeee\");\n-       expected =\n-           lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n-           hf.createPadding(nextLineTabStop) + \"dddd dddd\" + hf.getNewLine() +\n-           lpad + \"-b      \" + dpad + \"feeee eeee\" + hf.getNewLine() +\n-           hf.createPadding(nextLineTabStop) + \"eeee eeee\";\n-       sb.setLength(0);\n-       hf.renderOptions(sb, 25, options, leftPad, descPad);\n-       assertEquals(\"multiple wrapped options\", expected, sb.toString());\n-   }\n+    private static final String EOL = System.getProperty(\"line.separator\");\n+\n+    public void testFindWrapPos() throws Exception\n+    {\n+        HelpFormatter hf = new HelpFormatter();\n+\n+        String text = \"This is a test.\";\n+        //text width should be max 8; the wrap postition is 7\n+        assertEquals(\"wrap position\", 7, hf.findWrapPos(text, 8, 0));\n+        //starting from 8 must give -1 - the wrap pos is after end\n+        assertEquals(\"wrap position 2\", -1, hf.findWrapPos(text, 8, 8));\n+        //if there is no a good position before width to make a wrapping look for the next one\n+        text = \"aaaa aa\";\n+        assertEquals(\"wrap position 3\", 4, hf.findWrapPos(text, 3, 0));\n+    }\n+\n+    public void testPrintWrapped() throws Exception\n+    {\n+        StringBuffer sb = new StringBuffer();\n+        HelpFormatter hf = new HelpFormatter();\n+\n+        String text = \"This is a test.\";\n+\n+        String expected = \"This is a\" + hf.getNewLine() + \"test.\";\n+        hf.renderWrappedText(sb, 12, 0, text);\n+        assertEquals(\"single line text\", expected, sb.toString());\n+\n+        sb.setLength(0);\n+        expected = \"This is a\" + hf.getNewLine() + \"    test.\";\n+        hf.renderWrappedText(sb, 12, 4, text);\n+        assertEquals(\"single line padded text\", expected, sb.toString());\n+\n+        text = \"  -p,--period <PERIOD>  PERIOD is time duration of form \" +\n+               \"DATE[-DATE] where DATE has form YYYY[MM[DD]]\";\n+\n+        sb.setLength(0);\n+        expected = \"  -p,--period <PERIOD>  PERIOD is time duration of\" +\n+                hf.getNewLine() +\n+                \"                        form DATE[-DATE] where DATE\" +\n+                hf.getNewLine() +\n+                \"                        has form YYYY[MM[DD]]\";\n+        hf.renderWrappedText(sb, 53, 24, text);\n+        assertEquals(\"single line padded text 2\", expected, sb.toString());\n+\n+        text = \"aaaa aaaa aaaa\" + hf.getNewLine() +\n+               \"aaaaaa\" + hf.getNewLine() +\n+               \"aaaaa\";\n+\n+        expected = text;\n+        sb.setLength(0);\n+        hf.renderWrappedText(sb, 16, 0, text);\n+        assertEquals(\"multi line text\", expected, sb.toString());\n+\n+        expected = \"aaaa aaaa aaaa\" + hf.getNewLine() +\n+                   \"    aaaaaa\" + hf.getNewLine() +\n+                   \"    aaaaa\";\n+        sb.setLength(0);\n+        hf.renderWrappedText(sb, 16, 4, text);\n+        assertEquals(\"multi-line padded text\", expected, sb.toString());\n+    }\n+\n+    public void testPrintOptions() throws Exception\n+    {\n+        StringBuffer sb = new StringBuffer();\n+        HelpFormatter hf = new HelpFormatter();\n+        final int leftPad = 1;\n+        final int descPad = 3;\n+        final String lpad = hf.createPadding(leftPad);\n+        final String dpad = hf.createPadding(descPad);\n+        Options options = null;\n+        String expected = null;\n+\n+        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n+        expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa aaaa aaaa\";\n+        hf.renderOptions(sb, 60, options, leftPad, descPad);\n+        assertEquals(\"simple non-wrapped option\", expected, sb.toString());\n+\n+        int nextLineTabStop = leftPad + descPad + \"-a\".length();\n+        expected = lpad + \"-a\" + dpad + \"aaaa aaaa aaaa\" + hf.getNewLine() +\n+                   hf.createPadding(nextLineTabStop) + \"aaaa aaaa\";\n+        sb.setLength(0);\n+        hf.renderOptions(sb, nextLineTabStop + 17, options, leftPad, descPad);\n+        assertEquals(\"simple wrapped option\", expected, sb.toString());\n+\n+\n+        options = new Options().addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\");\n+        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd dddd dddd\";\n+        sb.setLength(0);\n+        hf.renderOptions(sb, 60, options, leftPad, descPad);\n+        assertEquals(\"long non-wrapped option\", expected, sb.toString());\n+\n+        nextLineTabStop = leftPad + descPad + \"-a,--aaa\".length();\n+        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n+                   hf.createPadding(nextLineTabStop) + \"dddd dddd\";\n+        sb.setLength(0);\n+        hf.renderOptions(sb, 25, options, leftPad, descPad);\n+        assertEquals(\"long wrapped option\", expected, sb.toString());\n+\n+        options = new Options().\n+                addOption(\"a\", \"aaa\", false, \"dddd dddd dddd dddd\").\n+                addOption(\"b\", false, \"feeee eeee eeee eeee\");\n+        expected = lpad + \"-a,--aaa\" + dpad + \"dddd dddd\" + hf.getNewLine() +\n+                   hf.createPadding(nextLineTabStop) + \"dddd dddd\" + hf.getNewLine() +\n+                   lpad + \"-b      \" + dpad + \"feeee eeee\" + hf.getNewLine() +\n+                   hf.createPadding(nextLineTabStop) + \"eeee eeee\";\n+        sb.setLength(0);\n+        hf.renderOptions(sb, 25, options, leftPad, descPad);\n+        assertEquals(\"multiple wrapped options\", expected, sb.toString());\n+    }\n \n     public void testPrintHelpWithEmptySyntax()\n     {\n         }\n     }\n \n-\n-   public void testAutomaticUsage() throws Exception\n-   {\n-       HelpFormatter hf = new HelpFormatter();\n-       Options options = null;\n-       String expected = \"usage: app [-a]\";\n-       ByteArrayOutputStream out = new ByteArrayOutputStream( );\n-       PrintWriter pw = new PrintWriter( out );\n-\n-       options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n-       hf.printUsage( pw, 60, \"app\", options );\n-       pw.flush();\n-       assertEquals(\"simple auto usage\", expected, out.toString().trim());\n-       out.reset();\n-\n-       expected = \"usage: app [-a] [-b]\";\n-       options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\")\n-       .addOption(\"b\", false, \"bbb\" );\n-       hf.printUsage( pw, 60, \"app\", options );\n-       pw.flush();\n-       assertEquals(\"simple auto usage\", expected, out.toString().trim());\n-       out.reset();\n-   }\n+    public void testAutomaticUsage() throws Exception\n+    {\n+        HelpFormatter hf = new HelpFormatter();\n+        Options options = null;\n+        String expected = \"usage: app [-a]\";\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        PrintWriter pw = new PrintWriter(out);\n+\n+        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\");\n+        hf.printUsage(pw, 60, \"app\", options);\n+        pw.flush();\n+        assertEquals(\"simple auto usage\", expected, out.toString().trim());\n+        out.reset();\n+\n+        expected = \"usage: app [-a] [-b]\";\n+        options = new Options().addOption(\"a\", false, \"aaaa aaaa aaaa aaaa aaaa\")\n+                .addOption(\"b\", false, \"bbb\");\n+        hf.printUsage(pw, 60, \"app\", options);\n+        pw.flush();\n+        assertEquals(\"simple auto usage\", expected, out.toString().trim());\n+        out.reset();\n+    }\n \n     // This test ensures the options are properly sorted\n     // See https://issues.apache.org/jira/browse/CLI-131\n         formatter.setWidth(80);\n         assertEquals(\"width\", 80, formatter.getWidth());\n     }\n-\n+    \n+    public void testHeaderStartingWithLineSeparator()\n+    {\n+        // related to Bugzilla #21215\n+        Options options = new Options();\n+        HelpFormatter formatter = new HelpFormatter();\n+        String header = EOL + \"Header\";\n+        String footer = \"Footer\";\n+        StringWriter out = new StringWriter();\n+        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", header, options, 2, 2, footer, true);\n+        assertEquals(\n+                \"usage: foobar\" + EOL +\n+                \"\" + EOL +\n+                \"Header\" + EOL +\n+                \"\" + EOL +\n+                \"Footer\" + EOL\n+                , out.toString());\n+    }\n+\n+    public void testOptionWithoutShortFormat()\n+    {\n+        // related to Bugzilla #19383 (CLI-67)\n+        Options options = new Options();\n+        options.addOption(new Option(\"a\", \"aaa\", false, \"aaaaaaa\"));\n+        options.addOption(new Option(null, \"bbb\", false, \"bbbbbbb\"));\n+        options.addOption(new Option(\"c\", null, false, \"ccccccc\"));\n+\n+        HelpFormatter formatter = new HelpFormatter();\n+        StringWriter out = new StringWriter();\n+        formatter.printHelp(new PrintWriter(out), 80, \"foobar\", \"\", options, 2, 2, \"\", true);\n+        assertEquals(\n+                \"usage: foobar [-a] [--bbb] [-c]\" + EOL +\n+                \"  -a,--aaa  aaaaaaa\" + EOL +\n+                \"     --bbb  bbbbbbb\" + EOL +\n+                \"  -c        ccccccc\" + EOL\n+                , out.toString());\n+    }\n+    \n+\n+    public void testOptionWithoutShortFormat2()\n+    {\n+        // related to Bugzilla #27635 (CLI-26)\n+        Option help = new Option(\"h\", \"help\", false, \"print this message\");\n+        Option version = new Option(\"v\", \"version\", false, \"print version information\");\n+        Option newRun = new Option(\"n\", \"new\", false, \"Create NLT cache entries only for new items\");\n+        Option trackerRun = new Option(\"t\", \"tracker\", false, \"Create NLT cache entries only for tracker items\");\n+        \n+        Option timeLimit = OptionBuilder.withLongOpt(\"limit\")\n+                                        .hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Set time limit for execution, in mintues\")\n+                                        .create(\"l\");\n+        \n+        Option age = OptionBuilder.withLongOpt(\"age\")\n+                                        .hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Age (in days) of cache item before being recomputed\")\n+                                        .create(\"a\");\n+        \n+        Option server = OptionBuilder.withLongOpt(\"server\")\n+                                        .hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"The NLT server address\")\n+                                        .create(\"s\");\n+        \n+        Option numResults = OptionBuilder.withLongOpt(\"results\")\n+                                        .hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Number of results per item\")\n+                                        .create(\"r\");\n+        \n+        Option configFile = OptionBuilder.withLongOpt(\"config\")\n+                                        .hasArg()\n+                                        .withValueSeparator()\n+                                        .withDescription(\"Use the specified configuration file\")\n+                                        .create();\n+        \n+        Options mOptions = new Options();\n+        mOptions.addOption(help);\n+        mOptions.addOption(version);\n+        mOptions.addOption(newRun);\n+        mOptions.addOption(trackerRun);\n+        mOptions.addOption(timeLimit);\n+        mOptions.addOption(age);\n+        mOptions.addOption(server);\n+        mOptions.addOption(numResults);\n+        mOptions.addOption(configFile);\n+        \n+        HelpFormatter formatter = new HelpFormatter();\n+        final String EOL = System.getProperty(\"line.separator\");\n+        StringWriter out = new StringWriter();\n+        formatter.printHelp(new PrintWriter(out),80,\"commandline\",\"header\",mOptions,2,2,\"footer\",true);\n+        assertEquals(\n+                \"usage: commandline [-a <arg>] [--config <arg>] [-h] [-l <arg>] [-n] [-r <arg>]\" + EOL +\n+                \"       [-s <arg>] [-t] [-v]\" + EOL +\n+                \"header\"+EOL+\n+                \"  -a,--age <arg>      Age (in days) of cache item before being recomputed\"+EOL+\n+                \"     --config <arg>   Use the specified configuration file\"+EOL+\n+                \"  -h,--help           print this message\"+EOL+\n+                \"  -l,--limit <arg>    Set time limit for execution, in mintues\"+EOL+\n+                \"  -n,--new            Create NLT cache entries only for new items\"+EOL+\n+                \"  -r,--results <arg>  Number of results per item\"+EOL+\n+                \"  -s,--server <arg>   The NLT server address\"+EOL+\n+                \"  -t,--tracker        Create NLT cache entries only for tracker items\"+EOL+\n+                \"  -v,--version        print version information\"+EOL+\n+                \"footer\"+EOL\n+                ,out.toString());\n+    }\n }", "timestamp": 1226313755, "metainfo": ""}