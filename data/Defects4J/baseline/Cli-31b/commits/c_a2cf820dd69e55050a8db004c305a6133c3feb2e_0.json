{"sha": "a2cf820dd69e55050a8db004c305a6133c3feb2e", "log": "Added the missing parse methods accepting a map with the default options to DefaultParser Moved the related tests from ValueTest to ParserTestCase  ", "commit": "\n--- a/src/java/org/apache/commons/cli/DefaultParser.java\n+++ b/src/java/org/apache/commons/cli/DefaultParser.java\n package org.apache.commons.cli;\n \n import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n import java.util.List;\n-import java.util.Iterator;\n+import java.util.Properties;\n \n /**\n  * Default parser.\n     \n     public CommandLine parse(Options options, String[] arguments) throws ParseException\n     {\n-        return parse(options, arguments, false);\n+        return parse(options, arguments, null);\n+    }\n+\n+    /**\n+     * Parse the arguments according to the specified options and properties.\n+     *\n+     * @param options    the specified Options\n+     * @param arguments  the command line arguments\n+     * @param properties command line option name-value pairs\n+     * @return the list of atomic option and value tokens\n+     *\n+     * @throws ParseException if there are any problems encountered\n+     * while parsing the command line tokens.\n+     */\n+    public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException\n+    {\n+        return parse(options, arguments, properties, false);\n     }\n \n     public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException\n+    {\n+        return parse(options, arguments, null, stopAtNonOption);\n+    }\n+\n+    /**\n+     * Parse the arguments according to the specified options and properties.\n+     *\n+     * @param options         the specified Options\n+     * @param arguments       the command line arguments\n+     * @param properties      command line option name-value pairs\n+     * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops\n+     *     the parsing and the remaining arguments are added to the \n+     *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized\n+     *     argument triggers a ParseException.\n+     *\n+     * @return the list of atomic option and value tokens\n+     * @throws ParseException if there are any problems encountered\n+     * while parsing the command line tokens.\n+     */\n+    public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException\n     {\n         this.options = options;\n         this.stopAtNonOption = stopAtNonOption;\n         // check the arguments of the last option\n         checkRequiredArgs();\n         \n+        // add the default options\n+        handleProperties(properties);\n+        \n         checkRequiredOptions();\n         \n         return cmd;\n+    }\n+\n+    /**\n+     * Sets the values of Options using the values in <code>properties</code>.\n+     *\n+     * @param properties The value properties to be processed.\n+     */\n+    private void handleProperties(Properties properties)\n+    {\n+        if (properties == null)\n+        {\n+            return;\n+        }\n+        \n+        for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)\n+        {\n+            String option = e.nextElement().toString();\n+            \n+            if (!cmd.hasOption(option))\n+            {\n+                Option opt = options.getOption(option);\n+                \n+                // get the value from the properties\n+                String value = properties.getProperty(option);\n+                \n+                if (opt.hasArg())\n+                {\n+                    if (opt.getValues() == null || opt.getValues().length == 0)\n+                    {\n+                        opt.addValueForProcessing(value);\n+                    }\n+                }\n+                else if (!(\"yes\".equalsIgnoreCase(value)\n+                        || \"true\".equalsIgnoreCase(value)\n+                        || \"1\".equalsIgnoreCase(value)))\n+                {\n+                    // if the value is not yes, true or 1 then don't add the option to the CommandLine\n+                    continue;\n+                }\n+                \n+                cmd.addOption(opt);\n+            }\n+        }\n     }\n \n     /**\n--- a/src/test/org/apache/commons/cli/ParserTestCase.java\n+++ b/src/test/org/apache/commons/cli/ParserTestCase.java\n         assertTrue(\"Confirm -f is set\", cl.hasOption(\"f\"));\n         assertEquals(\"number of arg for -f\", 1, cl.getOptionValues(\"f\").length);\n     }\n+\n+    private CommandLine parse(CommandLineParser parser, Options opts, String[] args, Properties properties) throws ParseException {\n+        if (parser instanceof Parser) {\n+            return ((Parser) parser).parse(opts, args, properties);\n+        } else if (parser instanceof DefaultParser) {\n+            return ((DefaultParser) parser).parse(opts, args, properties);\n+        } else {\n+            throw new UnsupportedOperationException(\"Default options not supported by this parser\");\n+        }\n+    }\n+\n+    public void testPropertyOptionSingularValue() throws Exception\n+    {\n+        Options opts = new Options();\n+        opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\"hide\").create());        \n+        \n+        Properties properties = new Properties();\n+        properties.setProperty( \"hide\", \"seek\" );\n+\n+        CommandLine cmd = parse(parser, opts, null, properties);\n+        assertTrue( cmd.hasOption(\"hide\") );\n+        assertEquals( \"seek\", cmd.getOptionValue(\"hide\") );\n+        assertTrue( !cmd.hasOption(\"fake\") );\n+    }\n+\n+    public void testPropertyOptionFlags() throws Exception\n+    {\n+        Options opts = new Options();\n+        opts.addOption(\"a\", false, \"toggle -a\");\n+        opts.addOption(\"c\", \"c\", false, \"toggle -c\");\n+        opts.addOption(OptionBuilder.hasOptionalArg().create('e'));\n+        \n+        Properties properties = new Properties();\n+        properties.setProperty(\"a\", \"true\");\n+        properties.setProperty(\"c\", \"yes\");\n+        properties.setProperty(\"e\", \"1\");\n+        \n+        CommandLine cmd = parse(parser, opts, null, properties);\n+        assertTrue(cmd.hasOption(\"a\"));\n+        assertTrue(cmd.hasOption(\"c\"));\n+        assertTrue(cmd.hasOption(\"e\"));\n+        \n+        \n+        properties = new Properties();\n+        properties.setProperty(\"a\", \"false\");\n+        properties.setProperty(\"c\", \"no\");\n+        properties.setProperty(\"e\", \"0\");\n+        \n+        cmd = parse(parser, opts, null, properties);\n+        assertTrue(!cmd.hasOption(\"a\"));\n+        assertTrue(!cmd.hasOption(\"c\"));\n+        assertTrue(cmd.hasOption(\"e\")); // this option accepts an argument\n+        \n+        \n+        properties = new Properties();\n+        properties.setProperty(\"a\", \"TRUE\");\n+        properties.setProperty(\"c\", \"nO\");\n+        properties.setProperty(\"e\", \"TrUe\");\n+        \n+        cmd = parse(parser, opts, null, properties);\n+        assertTrue(cmd.hasOption(\"a\"));\n+        assertTrue(!cmd.hasOption(\"c\"));\n+        assertTrue(cmd.hasOption(\"e\"));\n+        \n+        \n+        properties = new Properties();\n+        properties.setProperty(\"a\", \"just a string\");\n+        properties.setProperty(\"e\", \"\");\n+        \n+        cmd = parse(parser, opts, null, properties);\n+        assertTrue(!cmd.hasOption(\"a\"));\n+        assertTrue(!cmd.hasOption(\"c\"));\n+        assertTrue(cmd.hasOption(\"e\"));\n+        \n+        \n+        properties = new Properties();\n+        properties.setProperty(\"a\", \"0\");\n+        properties.setProperty(\"c\", \"1\");\n+        \n+        cmd = parse(parser, opts, null, properties);\n+        assertTrue(!cmd.hasOption(\"a\"));\n+        assertTrue(cmd.hasOption(\"c\"));\n+    } \n+\n+    public void testPropertyOptionMultipleValues() throws Exception\n+    {\n+        Options opts = new Options();\n+        opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\n+        \n+        Properties properties = new Properties();\n+        properties.setProperty( \"k\", \"one,two\" );\n+\n+        String[] values = new String[] { \"one\", \"two\" };\n+\n+        CommandLine cmd = parse(parser, opts, null, properties);\n+        assertTrue( cmd.hasOption(\"k\") );\n+        assertTrue( Arrays.equals( values, cmd.getOptionValues('k') ) );\n+    }\n+\n+    public void testPropertyOverrideValues() throws Exception\n+    {\n+        Options opts = new Options();\n+        opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\n+        opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\n+        \n+        String[] args = new String[] { \"-j\", \"found\", \"-i\", \"ink\" };\n+\n+        Properties properties = new Properties();\n+        properties.setProperty( \"j\", \"seek\" );\n+\n+        CommandLine cmd = parse(parser, opts, args, properties);\n+        assertTrue( cmd.hasOption(\"j\") );\n+        assertEquals( \"found\", cmd.getOptionValue(\"j\") );\n+        assertTrue( cmd.hasOption(\"i\") );\n+        assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n+        assertTrue( !cmd.hasOption(\"fake\") );\n+    }\n }\n--- a/src/test/org/apache/commons/cli/ValueTest.java\n+++ b/src/test/org/apache/commons/cli/ValueTest.java\n  */\n \n package org.apache.commons.cli;\n-\n-import java.util.Arrays;\n-import java.util.Properties;\n \n import junit.framework.TestCase;\n \n         opts.addOption(OptionBuilder.hasOptionalArgs(2).withLongOpt(\"hide\").create());\n         opts.addOption(OptionBuilder.hasOptionalArgs(2).create('i'));\n         opts.addOption(OptionBuilder.hasOptionalArgs().create('j'));\n-        opts.addOption(OptionBuilder.hasArgs().withValueSeparator(',').create('k'));\n \n         String[] args = new String[] { \"-a\",\n             \"-b\", \"foo\",\n         assertEquals( cmd.getArgs().length, 1 );\n         assertEquals( \"head\", cmd.getArgs()[0] );\n     }\n-\n-    public void testPropertyOptionSingularValue() throws Exception\n-    {\n-        Properties properties = new Properties();\n-        properties.setProperty( \"hide\", \"seek\" );\n-\n-        Parser parser = new PosixParser();\n-        \n-        CommandLine cmd = parser.parse(opts, null, properties);\n-        assertTrue( cmd.hasOption(\"hide\") );\n-        assertEquals( \"seek\", cmd.getOptionValue(\"hide\") );\n-        assertTrue( !cmd.hasOption(\"fake\") );\n-    }\n-\n-    public void testPropertyOptionFlags() throws Exception\n-    {\n-        Properties properties = new Properties();\n-        properties.setProperty( \"a\", \"true\" );\n-        properties.setProperty( \"c\", \"yes\" );\n-        properties.setProperty( \"e\", \"1\" );\n-\n-        Parser parser = new PosixParser();\n-\n-        CommandLine cmd = parser.parse(opts, null, properties);\n-        assertTrue( cmd.hasOption(\"a\") );\n-        assertTrue( cmd.hasOption(\"c\") );\n-        assertTrue( cmd.hasOption(\"e\") );\n-\n-\n-        properties = new Properties();\n-        properties.setProperty( \"a\", \"false\" );\n-        properties.setProperty( \"c\", \"no\" );\n-        properties.setProperty( \"e\", \"0\" );\n-\n-        cmd = parser.parse(opts, null, properties);\n-        assertTrue( !cmd.hasOption(\"a\") );\n-        assertTrue( !cmd.hasOption(\"c\") );\n-        assertTrue( cmd.hasOption(\"e\") ); // this option accepts as argument\n-\n-\n-        properties = new Properties();\n-        properties.setProperty( \"a\", \"TRUE\" );\n-        properties.setProperty( \"c\", \"nO\" );\n-        properties.setProperty( \"e\", \"TrUe\" );\n-\n-        cmd = parser.parse(opts, null, properties);\n-        assertTrue( cmd.hasOption(\"a\") );\n-        assertTrue( !cmd.hasOption(\"c\") );\n-        assertTrue( cmd.hasOption(\"e\") );\n-\n-        \n-        properties = new Properties();\n-        properties.setProperty( \"a\", \"just a string\" );\n-        properties.setProperty( \"e\", \"\" );\n-\n-        cmd = parser.parse(opts, null, properties);\n-        assertTrue( !cmd.hasOption(\"a\") );\n-        assertTrue( !cmd.hasOption(\"c\") );\n-        assertTrue( cmd.hasOption(\"e\") );\n-    } \n-\n-    public void testPropertyOptionMultipleValues() throws Exception\n-    {\n-        Properties properties = new Properties();\n-        properties.setProperty( \"k\", \"one,two\" );\n-\n-        Parser parser = new PosixParser();\n-        \n-        String[] values = new String[] {\n-            \"one\", \"two\"\n-        };\n-\n-        CommandLine cmd = parser.parse(opts, null, properties);\n-        assertTrue( cmd.hasOption(\"k\") );\n-        assertTrue( Arrays.equals( values, cmd.getOptionValues('k') ) );\n-    }\n-\n-    public void testPropertyOverrideValues() throws Exception\n-    {\n-        String[] args = new String[] { \n-            \"-j\",\n-            \"found\",\n-            \"-i\",\n-            \"ink\"\n-        };\n-\n-        Properties properties = new Properties();\n-        properties.setProperty( \"j\", \"seek\" );\n-\n-        Parser parser = new PosixParser();\n-        CommandLine cmd = parser.parse(opts, args, properties);\n-        assertTrue( cmd.hasOption(\"j\") );\n-        assertEquals( \"found\", cmd.getOptionValue(\"j\") );\n-        assertTrue( cmd.hasOption(\"i\") );\n-        assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n-        assertTrue( !cmd.hasOption(\"fake\") );\n-    }\n-\n }", "timestamp": 1276647266, "metainfo": ""}