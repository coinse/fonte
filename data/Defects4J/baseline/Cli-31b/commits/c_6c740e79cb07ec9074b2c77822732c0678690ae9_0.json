{"sha": "6c740e79cb07ec9074b2c77822732c0678690ae9", "log": "[CLI-162] new long lines test cause a RuntimeException.  ", "commit": "\n--- a/src/test/org/apache/commons/cli/bug/BugCLI162Test.java\n+++ b/src/test/org/apache/commons/cli/bug/BugCLI162Test.java\n \n package org.apache.commons.cli.bug;\n \n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n+import java.io.IOException;\n+import java.sql.ParameterMetaData;\n+import java.sql.Types;\n+\n+import junit.framework.TestCase;\n+\n import org.apache.commons.cli.HelpFormatter;\n-import org.apache.commons.cli.MissingArgumentException;\n import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.OptionGroup;\n import org.apache.commons.cli.Options;\n-import org.apache.commons.cli.PosixParser;\n-\n-import junit.framework.TestCase;\n+import org.apache.commons.cli.ParseException;\n \n public class BugCLI162Test extends TestCase {\n \n             assertTrue(re.getMessage().startsWith(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \"));\n         }\n     }\n+    \n+    private void testPrintHelp(Options options) throws ParseException, IOException {\n+        new HelpFormatter().printHelp(this.getClass().getName(), options);\n+    }\n+\n+    public void testPrintHelpLongLines() throws ParseException, IOException {\n+        // Constants used for options\n+        final String OPT = \"-\";\n+\n+        final String OPT_COLUMN_NAMES = \"l\";\n+\n+        final String OPT_CONNECTION = \"c\";\n+\n+        final String OPT_DESCRIPTION = \"e\";\n+\n+        final String OPT_DRIVER = \"d\";\n+\n+        final String OPT_DRIVER_INFO = \"n\";\n+\n+        final String OPT_FILE_BINDING = \"b\";\n+\n+        final String OPT_FILE_JDBC = \"j\";\n+\n+        final String OPT_FILE_SFMD = \"f\";\n+\n+        final String OPT_HELP = \"h\";\n+\n+        final String OPT_HELP_ = \"help\";\n+\n+        final String OPT_INTERACTIVE = \"i\";\n+\n+        final String OPT_JDBC_TO_SFMD = \"2\";\n+\n+        final String OPT_JDBC_TO_SFMD_L = \"jdbc2sfmd\";\n+\n+        final String OPT_METADATA = \"m\";\n+\n+        final String OPT_PARAM_MODES_INT = \"o\";\n+\n+        final String OPT_PARAM_MODES_NAME = \"O\";\n+\n+        final String OPT_PARAM_NAMES = \"a\";\n+\n+        final String OPT_PARAM_TYPES_INT = \"y\";\n+\n+        final String OPT_PARAM_TYPES_NAME = \"Y\";\n+\n+        final String OPT_PASSWORD = \"p\";\n+\n+        final String OPT_PASSWORD_L = \"password\";\n+\n+        final String OPT_SQL = \"s\";\n+\n+        final String OPT_SQL_L = \"sql\";\n+\n+        final String OPT_SQL_SPLIT_DEFAULT = \"###\";\n+\n+        final String OPT_SQL_SPLIT_L = \"splitSql\";\n+\n+        final String OPT_STACK_TRACE = \"t\";\n+\n+        final String OPT_TIMING = \"g\";\n+\n+        final String OPT_TRIM_L = \"trim\";\n+\n+        final String OPT_USER = \"u\";\n+\n+        final String OPT_WRITE_TO_FILE = \"w\";\n+        \n+        final String _PMODE_IN = \"IN\";\n+\n+        final String _PMODE_INOUT = \"INOUT\";\n+\n+        final String _PMODE_OUT = \"OUT\";\n+        \n+        final String _PMODE_UNK = \"Unknown\";\n+        \n+        final String PMODES = _PMODE_IN + \", \" + _PMODE_INOUT + \", \" + _PMODE_OUT + \", \" + _PMODE_UNK;\n+        \n+        // Options build\n+        Options commandLineOptions;\n+        commandLineOptions = new Options();\n+        commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, \"Prints help and quits\");\n+        commandLineOptions.addOption(OPT_DRIVER, \"driver\", true, \"JDBC driver class name\");\n+        commandLineOptions.addOption(OPT_DRIVER_INFO, \"info\", false, \"Prints driver information and properties. If \"\n+            + OPT\n+            + OPT_CONNECTION\n+            + \" is not specified, all drivers on the classpath are displayed.\");\n+        commandLineOptions.addOption(OPT_CONNECTION, \"url\", true, \"Connection URL\");\n+        commandLineOptions.addOption(OPT_USER, \"user\", true, \"A database user name\");\n+        commandLineOptions\n+                .addOption(\n+                        OPT_PASSWORD,\n+                        OPT_PASSWORD_L,\n+                        true,\n+                        \"The database password for the user specified with the \"\n+                            + OPT\n+                            + OPT_USER\n+                            + \" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords\");\n+        commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, \"Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}\");\n+        commandLineOptions.addOption(OPT_FILE_SFMD, \"sfmd\", true, \"Writes a SFMD file for the given SQL\");\n+        commandLineOptions.addOption(OPT_FILE_BINDING, \"jdbc\", true, \"Writes a JDBC binding node file for the given SQL\");\n+        commandLineOptions.addOption(OPT_FILE_JDBC, \"node\", true, \"Writes a JDBC node file for the given SQL (internal debugging)\");\n+        commandLineOptions.addOption(OPT_WRITE_TO_FILE, \"outfile\", true, \"Writes the SQL output to the given file\");\n+        commandLineOptions.addOption(OPT_DESCRIPTION, \"description\", true,\n+                \"SFMD description. A default description is used if omited. Example: \" + OPT + OPT_DESCRIPTION + \" \\\"Runs such and such\\\"\");\n+        commandLineOptions.addOption(OPT_INTERACTIVE, \"interactive\", false,\n+                \"Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement\");\n+        commandLineOptions.addOption(OPT_TIMING, \"printTiming\", false, \"Prints timing information\");\n+        commandLineOptions.addOption(OPT_METADATA, \"printMetaData\", false, \"Prints metadata information\");\n+        commandLineOptions.addOption(OPT_STACK_TRACE, \"printStack\", false, \"Prints stack traces on errors\");\n+        Option option = new Option(OPT_COLUMN_NAMES, \"columnNames\", true, \"Column XML names; default names column labels. Example: \"\n+            + OPT\n+            + OPT_COLUMN_NAMES\n+            + \" \\\"cname1 cname2\\\"\");\n+        commandLineOptions.addOption(option);\n+        option = new Option(OPT_PARAM_NAMES, \"paramNames\", true, \"Parameter XML names; default names are param1, param2, etc. Example: \"\n+            + OPT\n+            + OPT_PARAM_NAMES\n+            + \" \\\"pname1 pname2\\\"\");\n+        commandLineOptions.addOption(option);\n+        //\n+        OptionGroup pOutTypesOptionGroup = new OptionGroup();\n+        String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + \" and \" + OPT + OPT_PARAM_TYPES_NAME + \" are mutually exclusive.\";\n+        final String typesClassName = Types.class.getName();\n+        option = new Option(OPT_PARAM_TYPES_INT, \"paramTypes\", true, \"Parameter types from \"\n+            + typesClassName\n+            + \". \"\n+            + pOutTypesOptionGroupDoc\n+            + \" Example: \"\n+            + OPT\n+            + OPT_PARAM_TYPES_INT\n+            + \" \\\"-10 12\\\"\");\n+        commandLineOptions.addOption(option);\n+        option = new Option(OPT_PARAM_TYPES_NAME, \"paramTypeNames\", true, \"Parameter \"\n+            + typesClassName\n+            + \" names. \"\n+            + pOutTypesOptionGroupDoc\n+            + \" Example: \"\n+            + OPT\n+            + OPT_PARAM_TYPES_NAME\n+            + \" \\\"CURSOR VARCHAR\\\"\");\n+        commandLineOptions.addOption(option);\n+        commandLineOptions.addOptionGroup(pOutTypesOptionGroup);\n+        //\n+        OptionGroup modesOptionGroup = new OptionGroup();\n+        String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + \" and \" + OPT + OPT_PARAM_MODES_NAME + \" are mutually exclusive.\";\n+        option = new Option(OPT_PARAM_MODES_INT, \"paramModes\", true, \"Parameters modes (\"\n+            + ParameterMetaData.parameterModeIn\n+            + \"=IN, \"\n+            + ParameterMetaData.parameterModeInOut\n+            + \"=INOUT, \"\n+            + ParameterMetaData.parameterModeOut\n+            + \"=OUT, \"\n+            + ParameterMetaData.parameterModeUnknown\n+            + \"=Unknown\"\n+            + \"). \"\n+            + modesOptionGroupDoc\n+            + \" Example for 2 parameters, OUT and IN: \"\n+            + OPT\n+            + OPT_PARAM_MODES_INT\n+            + \" \\\"\"\n+            + ParameterMetaData.parameterModeOut\n+            + \" \"\n+            + ParameterMetaData.parameterModeIn\n+            + \"\\\"\");\n+        modesOptionGroup.addOption(option);\n+        option = new Option(OPT_PARAM_MODES_NAME, \"paramModeNames\", true, \"Parameters mode names (\"\n+            + PMODES\n+            + \"). \"\n+            + modesOptionGroupDoc\n+            + \" Example for 2 parameters, OUT and IN: \"\n+            + OPT\n+            + OPT_PARAM_MODES_NAME\n+            + \" \\\"\"\n+            + _PMODE_OUT\n+            + \" \"\n+            + _PMODE_IN\n+            + \"\\\"\");\n+        modesOptionGroup.addOption(option);\n+        commandLineOptions.addOptionGroup(modesOptionGroup);\n+        option = new Option(null, OPT_TRIM_L, true,\n+                \"Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim.\");\n+        option.setOptionalArg(true);\n+        commandLineOptions.addOption(option);\n+        option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true,\n+                \"Converts the JDBC file in the first argument to an SMFD file specified in the second argument.\");\n+        option.setArgs(2);\n+        commandLineOptions.addOption(option);\n+        this.testPrintHelp(commandLineOptions);\n+    }\n \n }", "timestamp": 1234241172, "metainfo": ""}