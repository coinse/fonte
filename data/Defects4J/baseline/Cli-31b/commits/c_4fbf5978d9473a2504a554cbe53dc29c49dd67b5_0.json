{"sha": "4fbf5978d9473a2504a554cbe53dc29c49dd67b5", "log": "bug no. 11456 - optional argument values implemented   ", "commit": "\n--- a/src/java/org/apache/commons/cli/GnuParser.java\n+++ b/src/java/org/apache/commons/cli/GnuParser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.5 2002/08/14 22:27:39 jkeyes Exp $\n- * $Revision: 1.5 $\n- * $Date: 2002/08/14 22:27:39 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/GnuParser.java,v 1.6 2002/08/15 22:05:18 jkeyes Exp $\n+ * $Revision: 1.6 $\n+ * $Date: 2002/08/15 22:05:18 $\n  *\n  * ====================================================================\n  *\n     public void processArgs( Option opt, ListIterator iter ) \n     throws ParseException \n     {\n-        if( !iter.hasNext() ) {\n+        if( !iter.hasNext() && !opt.hasOptionalArg() ) {\n             throw new MissingArgumentException( \"no argument for:\" + opt.getOpt() );\n         }\n         // loop until an option is found\n         }\n \n         // if the option takes an argument value\n-        if ( opt.hasArg() ) { \n+        if ( opt.hasArg() ) {\n             processArgs( opt, iter );\n         }\n \n--- a/src/java/org/apache/commons/cli/Option.java\n+++ b/src/java/org/apache/commons/cli/Option.java\n     /** required specifies whether this option is required to be present */\n     private boolean    required     = false;\n \n+    private boolean optionalArg = false;\n+\n     /** \n      * numberOfArgs specifies the number of argument values this option \n      * can have \n \n     public void setLongOpt( String longOpt ) {\n         this.longOpt = longOpt;\n+    }\n+\n+    /**\n+     * Sets whether this Option can have an optional argument.\n+     *\n+     * @param optionalArg specifies whether the Option can have\n+     * an optional argument.\n+     */\n+    public void setOptionalArg( boolean optionalArg ) {\n+        if( optionalArg ) {\n+            this.numberOfArgs = 1;\n+        }\n+        this.optionalArg = optionalArg;\n+    }\n+\n+    /**\n+     * @return whether this Option can have an optional argument\n+     */\n+    public boolean hasOptionalArg( ) {\n+        return this.optionalArg;\n     }\n     \n     /** <p>Query to see if this Option has a long name</p>\n     public Object clone() {\n         Option option = new Option( getOpt(), getDescription() );\n         option.setArgs( getArgs() );\n+        option.setOptionalArg( hasOptionalArg() );\n         option.setRequired( isRequired() );\n         option.setLongOpt( getLongOpt() );\n         option.setType( getType() );\n--- a/src/java/org/apache/commons/cli/OptionBuilder.java\n+++ b/src/java/org/apache/commons/cli/OptionBuilder.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.4 2002/08/04 23:04:52 jkeyes Exp $\n- * $Revision: 1.4 $\n- * $Date: 2002/08/04 23:04:52 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/OptionBuilder.java,v 1.5 2002/08/15 22:05:18 jkeyes Exp $\n+ * $Revision: 1.5 $\n+ * $Date: 2002/08/15 22:05:18 $\n  *\n  * ====================================================================\n  *\n     /** option type */\n     private static Object type;\n \n+    private static boolean optionalArg;\n     private static char valuesep;\n \n     /** option builder instance */\n     }\n \n     /**\n+     * <p>The next Option can have an optional argument.</p>\n+     *\n+     * @return the OptionBuilder instance\n+     */\n+    public static OptionBuilder hasOptionalArg( ) {\n+        instance.optionalArg = true;\n+        return instance;\n+    }\n+\n+    /**\n      * <p>The next Option created will have a value that will be an instance \n      * of <code>type</code>.</p>\n      *\n         // set the option properties\n         option.setLongOpt( longopt );\n         option.setRequired( required );\n+        option.setOptionalArg( optionalArg );\n         option.setArgs( numberOfArgs );\n         option.setType( type );\n         option.setValueSeparator( valuesep );\n--- a/src/java/org/apache/commons/cli/PosixParser.java\n+++ b/src/java/org/apache/commons/cli/PosixParser.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.6 2002/08/14 22:27:39 jkeyes Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/08/14 22:27:39 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//cli/src/java/org/apache/commons/cli/PosixParser.java,v 1.7 2002/08/15 22:05:18 jkeyes Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/08/15 22:05:18 $\n  *\n  * ====================================================================\n  *\n                                 // to be the argument value\n \n                                 // if there is no argument value\n-                                if( token.substring(i+1).length() == 0 ) {\n+                                if( token.substring(i+1).length() == 0 && !opt.hasOptionalArg() ) {\n                                     throw new MissingArgumentException( \"Missing argument value for \" + opt.getOpt() );\n                                 }\n-\n-                                /*\n-                                String var = token.substring(i+1);\n-                                char sep = opt.getValueSeparator();\n-\n-                                if( sep > 0 ) {\n-                                    int findex;\n-                                    while( ( findex = var.indexOf( sep ) ) != -1 ) {\n-                                        String val = var.substring( 0, findex );\n-                                        var = var.substring( findex + 1);\n-                                        if( !opt.addValue( val ) ) {\n-                                            cmd.addArg( val );\n-                                        }\n-                                    }\n-                                    if( !opt.addValue( var ) ) {\n-                                        cmd.addArg( var );\n-                                    };\n-                                }\n                                 else {\n-                                    // add the argument value\n                                     opt.addValue( token.substring(i+1) );\n                                 }\n-                                */\n-                                opt.addValue( token.substring(i+1) );\n \n                                 // set the option \n                                 cmd.setOpt( opt );\n     throws ParseException\n     {\n         // get the option represented by arg\n-        Option opt = null;//(Option) options.getOption( arg );\n+        Option opt = null;\n \n         boolean hasOption = options.hasOption( arg );\n \n     public void processArgs( Option opt, ListIterator iter ) \n     throws ParseException \n     {\n-        if( !iter.hasNext() ) {\n+        if( !iter.hasNext() && !opt.hasOptionalArg() ) {\n             throw new MissingArgumentException( \"no argument for:\" + opt.getOpt() );\n         }\n         // loop until an option is found\n             }\n             // its a value\n             else {\n-                /*\n-                char sep = opt.getValueSeparator();\n-                \n-                if( sep > 0 ) {\n-                    int findex;\n-                    while( ( findex = var.indexOf( sep ) ) != -1 ) {\n-                        String val = var.substring( 0, findex );\n-                        var = var.substring( findex + 1);\n-                        if( !opt.addValue( val ) ) {\n-                            iter.previous();\n-                            return;\n-                        }\n-                    }\n-                    if( !opt.addValue( var ) ) {\n-                        iter.previous();\n-                        return;\n-                    };\n-                }\n-                else if( !opt.addValue( var ) ) {\n-                    iter.previous();\n-                    return;\n-                }\n-                */\n                 if( !opt.addValue( var ) ) {\n                     iter.previous();\n                     break;\n--- a/src/test/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/org/apache/commons/cli/BugsTest.java\n  * version 1.1, a copy of which has been included with this distribution in\n  * the LICENSE file.\n  * \n- * $Id: BugsTest.java,v 1.1 2002/08/15 20:31:23 jkeyes Exp $\n+ * $Id: BugsTest.java,v 1.2 2002/08/15 22:05:19 jkeyes Exp $\n  */\n \n package org.apache.commons.cli;\n         catch( ParseException exp ) {\n             fail( \"Unexpected Exception: \" + exp.getMessage() );\n         }\n+    }\n \n+    public void test11456()\n+    {\n+        // Posix \n+        Options options = new Options();\n+        options.addOption( OptionBuilder.hasOptionalArg()\n+                           .create( 'a' ) );\n+        options.addOption( OptionBuilder.hasArg()\n+                           .create( 'b' ) );\n+        String[] args = new String[] { \"-a\", \"-bvalue\" };\n+\n+        CommandLineParser parser = CommandLineParserFactory.newParser();\n+\n+        try {\n+            CommandLine cmd = parser.parse( options, args );\n+            assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n+        }\n+        catch( ParseException exp ) {\n+            fail( \"Unexpected Exception: \" + exp.getMessage() );\n+        }\n+\n+        // GNU\n+        options = new Options();\n+        options.addOption( OptionBuilder.hasOptionalArg()\n+                           .create( 'a' ) );\n+        options.addOption( OptionBuilder.hasArg()\n+                           .create( 'b' ) );\n+        args = new String[] { \"-a\", \"-b\", \"value\" };\n+\n+        parser = CommandLineParserFactory.newParser( \"org.apache.commons.cli.GnuParser\" );\n+\n+        try {\n+            CommandLine cmd = parser.parse( options, args );\n+            assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n+        }\n+        catch( ParseException exp ) {\n+            fail( \"Unexpected Exception: \" + exp.getMessage() );\n+        }\n \n     }\n+\n }", "timestamp": 1029449119, "metainfo": ""}