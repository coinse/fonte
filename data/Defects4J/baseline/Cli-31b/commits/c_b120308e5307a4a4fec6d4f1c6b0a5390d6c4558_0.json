{"sha": "b120308e5307a4a4fec6d4f1c6b0a5390d6c4558", "log": "- updated javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/cli2/validation/ClassValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/ClassValidator.java\n-/**\n- * Copyright 2003-2004 The Apache Software Foundation\n+/*\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n     private static final ResourceHelper resources =\n         ResourceHelper.getResourceHelper(ClassValidator.class);\n \n+    /** whether the class argument is loadable */\n     private boolean loadable;\n+    \n+    /** whether to create an instance of the class */\n     private boolean instance;\n \n+    /** the classloader to load classes from */\n     private ClassLoader loader;\n \n+    /**\n+     * Validate each argument value in the specified List against this instances\n+     * permitted attributes.\n+     * \n+     * If a value is valid then it's <code>String</code> value in the list is\n+     * replaced with it's <code>Class</code> value or instance.\n+     * \n+     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)\n+     */\n     public void validate(final List values) throws InvalidArgumentException {\n \n         for (final ListIterator i = values.listIterator(); i.hasNext();) {\n         }\n     }\n \n+    /**\n+     * Returns whether the argument value must represent a\n+     * class that is loadable.\n+     *\n+     * @return whether the argument value must represent a\n+     * class that is loadable.\n+     */\n+    public boolean isLoadable() {\n+        return loadable;\n+    }\n+\n+    /**\n+     * Specifies whether the argument value must represent a\n+     * class that is loadable.\n+     *\n+     * @param loadable whether the argument value must \n+     * represent a class that is loadable.\n+     */\n+    public void setLoadable(boolean loadable) {\n+        this.loadable = loadable;\n+    }\n+\n+    /**\n+     * Returns the {@link ClassLoader} used to resolve and load\n+     * the classes specified by the argument values.\n+     *\n+     * @return the {@link ClassLoader} used to resolve and load\n+     * the classes specified by the argument values.\n+     */\n+    public ClassLoader getClassLoader() {\n+        if (loader == null) {\n+            loader = getClass().getClassLoader();\n+        }\n+        \n+        return loader;\n+    }\n+\n+    /**\n+     * Specifies the {@link ClassLoader} used to resolve and load\n+     * the classes specified by the argument values.\n+     *\n+     * @param loader the {@link ClassLoader} used to resolve and load\n+     * the classes specified by the argument values.\n+     */\n+    public void setClassLoader(ClassLoader loader) {\n+        this.loader = loader;\n+    }\n+\n+    /**\n+     * Returns whether the argument value must represent a\n+     * class that can be instantiated.\n+     *\n+     * @return whether the argument value must represent a\n+     * class that can be instantiated.\n+     */\n+    public boolean isInstance() {\n+        return instance;\n+    }\n+\n+    /**\n+     * Specifies whether the argument value must represent a\n+     * class that can be instantiated.\n+     *\n+     * @param loadable whether the argument value must \n+     * represent a class that can be instantiated.\n+     */\n+    public void setInstance(boolean instance) {\n+        this.instance = instance;\n+    }\n+\n+    /**\n+     * Returns whether the specified name is allowed as\n+     * a Java class name.\n+     */\n     protected boolean isPotentialClassName(final String name) {\n         final char[] chars = name.toCharArray();\n \n         return !expectingStart;\n     }\n \n-    /**\n-     * @return true iff class must be loadable to be valid\n-     */\n-    public boolean isLoadable() {\n-        return loadable;\n-    }\n-\n-    /**\n-     * true iff class must be loadable to be valid\n-     * @param loadable new loadable value\n-     */\n-    public void setLoadable(boolean loadable) {\n-        this.loadable = loadable;\n-    }\n-\n-    /**\n-     * @return the classloader to resolve classes in\n-     */\n-    public ClassLoader getClassLoader() {\n-        if (loader == null) {\n-            loader = getClass().getClassLoader();\n-        }\n-        \n-        return loader;\n-    }\n-\n-    /**\n-     * @param loader the classloader to resolve classes in\n-     */\n-    public void setClassLoader(ClassLoader loader) {\n-        this.loader = loader;\n-    }\n-\n-    /**\n-     * @return true iff class instance is needed to be valid \n-     */\n-    public boolean isInstance() {\n-        return instance;\n-    }\n-\n-    /**\n-     * @param instance true iff class instance is needed to be valid\n-     */\n-    public void setInstance(boolean instance) {\n-        this.instance = instance;\n-    }\n }\n--- a/src/java/org/apache/commons/cli2/validation/EnumValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/EnumValidator.java\n /*\n- * Copyright 2003-2004 The Apache Software Foundation\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n--- a/src/java/org/apache/commons/cli2/validation/FileValidator.java\n+++ b/src/java/org/apache/commons/cli2/validation/FileValidator.java\n-/**\n- * Copyright 2003-2004 The Apache Software Foundation\n+/*\n+ * Copyright 2003-2005 The Apache Software Foundation\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import java.util.ListIterator;\n \n /**\n- * A Validator implmentation requiring File values \n+ * The <code>FileValidator</code> validates the string argument\n+ * values are files.  If the value is a file, the string value in\n+ * the {@link java.util.List} of values is replaced with the\n+ * {@link java.io.File} instance.\n+ *\n+ * The following attributes can also be specified using the \n+ * appropriate settors:\n+ * <ul>\n+ *  <li>writable</li>\n+ *  <li>readable</li>\n+ *  <li>hidden</li>\n+ *  <li>existing</li>\n+ *  <li>is a file</li>\n+ *  <li>is a directory</li>\n+ * </ul>\n+ *\n+ * The following example shows how to limit the valid values\n+ * for the config attribute to files that are readable, writeable,\n+ * and that already existing.\n+ *\n+ * <pre>\n+ * ...\n+ * ArgumentBuilder builder = new ArgumentBuilder();\n+ * FileValidator validator = FileValidator.getExistingFileInstance();\n+ * validator.setReadable(true);\n+ * validator.setWritable(true);\n+ * \n+ * Argument age = \n+ *     builder.withName(\"config\");\n+ *            .withValidator(validator);\n+ * </pre>\n+ * \n+ * @author Rob Oxspring\n+ * @author John Keyes\n  */\n public class FileValidator implements Validator {\n \n     /**\n-     * @return an instance requiring existing entries \n+     * Returns a <code>FileValidator</code> for existing files/directories.\n+     *\n+     * @return a <code>FileValidator</code> for existing files/directories.\n      */\n     public static FileValidator getExistingInstance() {\n         final FileValidator validator = new FileValidator();\n     }\n \n     /**\n-     * @return an instance requiring existing files\n+     * Returns a <code>FileValidator</code> for existing files.\n+     *\n+     * @return a <code>FileValidator</code> for existing files.\n      */\n     public static FileValidator getExistingFileInstance() {\n         final FileValidator validator = new FileValidator();\n     }\n \n     /**\n-     * @return an instance requiring existing directories\n+     * Returns a <code>FileValidator</code> for existing directories.\n+     *\n+     * @return a <code>FileValidator</code> for existing directories.\n      */\n     public static FileValidator getExistingDirectoryInstance() {\n         final FileValidator validator = new FileValidator();\n         return validator;\n     }\n \n+    /** whether the argument value is readable */\n     private boolean readable = false;\n+    \n+    /** whether the argument value is writable */\n     private boolean writable = false;\n+    \n+    /** whether the argument value exists */\n     private boolean existing = false;\n+    \n+    /** whether the argument value is a directory */\n     private boolean directory = false;\n+    \n+    /** whether the argument value is a file */\n     private boolean file = false;\n+\n+    /** whether the argument value is a hidden file or directory */\n     private boolean hidden = false;\n \n+    /**\n+     * Validate the list of values against the list of permitted values.\n+     * If a value is valid, replace the string in the <code>values</code>\n+     * {@link java.util.List} with the {@link java.io.File} instance.\n+     * \n+     * @see org.apache.commons.cli2.validation.Validator#validate(java.util.List)\n+     */\n     public void validate(final List values) throws InvalidArgumentException {\n         for (final ListIterator i = values.listIterator(); i.hasNext();) {\n             final String name = (String)i.next();\n     }\n \n     /**\n-     * @return true iff the file is a directory\n+     * Returns whether the argument values must represent directories.\n+     *\n+     * @return whether the argument values must represent directories.\n      */\n     public boolean isDirectory() {\n         return directory;\n     }\n \n     /**\n-     * @param directory true if the file must be a directory\n+     * Specifies whether the argument values must represent directories.\n+     *\n+     * @param directory specifies whether the argument values must \n+     * represent directories.\n      */\n     public void setDirectory(boolean directory) {\n         this.directory = directory;\n     }\n \n     /**\n-     * @return true iff the file exists\n+     * Returns whether the argument values must represent existing \n+     * files/directories.\n+     *\n+     * @return whether the argument values must represent existing \n+     * files/directories.\n      */\n     public boolean isExisting() {\n         return existing;\n     }\n \n     /**\n-     * @param existing true if the file must exist\n+     * Specifies whether the argument values must represent existing \n+     * files/directories.\n+     *\n+     * @param directory specifies whether the argument values must \n+     * represent existing files/directories.\n      */\n     public void setExisting(boolean existing) {\n         this.existing = existing;\n     }\n \n     /**\n-     * @return true iff the file is a file (not directory)\n+     * Returns whether the argument values must represent directories.\n+     *\n+     * @return whether the argument values must represent directories.\n      */\n     public boolean isFile() {\n         return file;\n     }\n \n     /**\n-     * @param file true if the file must be a file (not directory)\n+     * Specifies whether the argument values must represent files.\n+     *\n+     * @param file specifies whether the argument values must \n+     * represent files.\n      */\n     public void setFile(boolean file) {\n         this.file = file;\n     }\n \n     /**\n-     * @return true iff the file must be hidden\n+     * Returns whether the argument values must represent hidden \n+     * files/directories.\n+     *\n+     * @return whether the argument values must represent hidden \n+     * files/directories.\n      */\n     public boolean isHidden() {\n         return hidden;\n     }\n \n     /**\n-     * @param hidden true if the file must be hidden\n+     * Specifies whether the argument values must represent hidden \n+     * files/directories.\n+     *\n+     * @param file specifies whether the argument values must \n+     * represent hidden files/directories.\n      */\n     public void setHidden(boolean hidden) {\n         this.hidden = hidden;\n     }\n \n     /**\n-     * @return true iff the file must be readable\n+     * Returns whether the argument values must represent readable \n+     * files/directories.\n+     *\n+     * @return whether the argument values must represent readable \n+     * files/directories.\n      */\n     public boolean isReadable() {\n         return readable;\n     }\n \n     /**\n-     * @param readable true if the file must be readable\n+     * Specifies whether the argument values must represent readable \n+     * files/directories.\n+     *\n+     * @param file specifies whether the argument values must \n+     * represent readable files/directories.\n      */\n     public void setReadable(boolean readable) {\n         this.readable = readable;\n     }\n \n     /**\n-     * @return true iff the file must be writable\n+     * Returns whether the argument values must represent writable \n+     * files/directories.\n+     *\n+     * @return whether the argument values must represent writable \n+     * files/directories.\n      */\n     public boolean isWritable() {\n         return writable;\n     }\n \n     /**\n-     * @param writable true if the file must be writable\n+     * Specifies whether the argument values must represent writable \n+     * files/directories.\n+     *\n+     * @param file specifies whether the argument values must \n+     * represent writable files/directories.\n      */\n     public void setWritable(boolean writable) {\n         this.writable = writable;", "timestamp": 1125764842, "metainfo": ""}