{"sha": "f887e8b6e2ebb519c6d0e51b1ddae6bd356dc3c0", "log": "Simplified the test cases by removing the unnecessary fail() calls in the catch blocks  ", "commit": "\n--- a/src/test/org/apache/commons/cli/ApplicationTest.java\n+++ b/src/test/org/apache/commons/cli/ApplicationTest.java\n  */\n public class ApplicationTest extends TestCase {\n \n-    /**\n-     *\t\n-     */\n-    public void testLs() {\n+    public void testLs() throws Exception {\n         // create the command line parser\n         CommandLineParser parser = new PosixParser();\n         Options options = new Options();\n \n         String[] args = new String[]{ \"--block-size=10\" };\n \n-        try {\n-            CommandLine line = parser.parse( options, args );\n-            assertTrue( line.hasOption( \"block-size\" ) );\n-            assertEquals( line.getOptionValue( \"block-size\" ), \"10\" );\n-        }\n-        catch( ParseException exp ) {\n-            fail( \"Unexpected exception:\" + exp.getMessage() );\n-        }\n+        CommandLine line = parser.parse( options, args );\n+        assertTrue( line.hasOption( \"block-size\" ) );\n+        assertEquals( line.getOptionValue( \"block-size\" ), \"10\" );\n     }\n \n     /**\n      * Ant test\n      */\n-    public void testAnt() {\n+    public void testAnt() throws Exception {\n         // use the GNU parser\n         CommandLineParser parser = new GnuParser( );\n         Options options = new Options();\n             \"-Dproperty=value\", \"-Dproperty1=value1\",\n             \"-projecthelp\" };\n \n-        try {\n-            CommandLine line = parser.parse( options, args );\n+        CommandLine line = parser.parse( options, args );\n \n-            // check multiple values\n-            String[] opts = line.getOptionValues( \"D\" );\n-            assertEquals( \"property\", opts[0] );\n-            assertEquals( \"value\", opts[1] );\n-            assertEquals( \"property1\", opts[2] );\n-            assertEquals( \"value1\", opts[3] );\n+        // check multiple values\n+        String[] opts = line.getOptionValues( \"D\" );\n+        assertEquals( \"property\", opts[0] );\n+        assertEquals( \"value\", opts[1] );\n+        assertEquals( \"property1\", opts[2] );\n+        assertEquals( \"value1\", opts[3] );\n \n-            // check single value\n-            assertEquals( line.getOptionValue( \"buildfile\"), \"mybuild.xml\" );\n+        // check single value\n+        assertEquals( line.getOptionValue( \"buildfile\"), \"mybuild.xml\" );\n \n-            // check option\n-            assertTrue( line.hasOption( \"projecthelp\") );\n-        }\n-        catch( ParseException exp ) {\n-            fail( \"Unexpected exception:\" + exp.getMessage() );\n-        }\n-\n+        // check option\n+        assertTrue( line.hasOption( \"projecthelp\") );\n     }\n \n }\n--- a/src/test/org/apache/commons/cli/ArgumentIsOptionTest.java\n+++ b/src/test/org/apache/commons/cli/ArgumentIsOptionTest.java\n \n import junit.framework.TestCase;\n \n-public class ArgumentIsOptionTest extends TestCase {\n+public class ArgumentIsOptionTest extends TestCase\n+{\n     private Options options = null;\n     private CommandLineParser parser = null;\n \n-    public void setUp() {\n-        options = new Options().addOption(\"p\", false, \"Option p\").addOption(\"attr\",\n-                true, \"Option accepts argument\");\n+    public void setUp()\n+    {\n+        options = new Options().addOption(\"p\", false, \"Option p\").addOption(\"attr\", true, \"Option accepts argument\");\n \n         parser = new PosixParser();\n     }\n \n-    public void testOptionAndOptionWithArgument() {\n-        String[] args = new String[] {\n+    public void testOptionAndOptionWithArgument() throws Exception\n+    {\n+        String[] args = new String[]{\n                 \"-p\",\n                 \"-attr\",\n                 \"p\"\n-            };\n+        };\n \n-        try {\n-            CommandLine cl = parser.parse(options, args);\n-            assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n-            assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n-            assertTrue(\"Confirm arg of -attr\",\n+        CommandLine cl = parser.parse(options, args);\n+        assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n+        assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n+        assertTrue(\"Confirm arg of -attr\",\n                 cl.getOptionValue(\"attr\").equals(\"p\"));\n-            assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n-        }\n-        catch (ParseException e) {\n-            fail(e.toString());\n-        }\n+        assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n     }\n \n-    public void testOptionWithArgument() {\n-        String[] args = new String[] {\n+    public void testOptionWithArgument() throws Exception\n+    {\n+        String[] args = new String[]{\n                 \"-attr\",\n                 \"p\"\n-            };\n+        };\n \n-        try {\n-            CommandLine cl = parser.parse(options, args);\n-            assertFalse(\"Confirm -p is set\", cl.hasOption(\"p\"));\n-            assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n-            assertTrue(\"Confirm arg of -attr\",\n+        CommandLine cl = parser.parse(options, args);\n+        assertFalse(\"Confirm -p is set\", cl.hasOption(\"p\"));\n+        assertTrue(\"Confirm -attr is set\", cl.hasOption(\"attr\"));\n+        assertTrue(\"Confirm arg of -attr\",\n                 cl.getOptionValue(\"attr\").equals(\"p\"));\n-            assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n-        }\n-        catch (ParseException e) {\n-            fail(e.toString());\n-        }\n+        assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n     }\n \n-    public void testOption() {\n-        String[] args = new String[] {\n+    public void testOption() throws Exception\n+    {\n+        String[] args = new String[]{\n                 \"-p\"\n-            };\n+        };\n \n-        try {\n-            CommandLine cl = parser.parse(options, args);\n-            assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n-            assertFalse(\"Confirm -attr is not set\", cl.hasOption(\"attr\"));\n-            assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n-        }\n-        catch (ParseException e) {\n-            fail(e.toString());\n-        }\n+        CommandLine cl = parser.parse(options, args);\n+        assertTrue(\"Confirm -p is set\", cl.hasOption(\"p\"));\n+        assertFalse(\"Confirm -attr is not set\", cl.hasOption(\"attr\"));\n+        assertTrue(\"Confirm all arguments recognized\", cl.getArgs().length == 0);\n     }\n }\n--- a/src/test/org/apache/commons/cli/BugsTest.java\n+++ b/src/test/org/apache/commons/cli/BugsTest.java\n import java.io.PrintStream;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.util.Iterator;\n import java.util.Properties;\n \n import junit.framework.TestCase;\n \n public class BugsTest extends TestCase\n {\n-    public void test11457() {\n-        Options options = new Options();\n-        options.addOption( OptionBuilder.withLongOpt( \"verbose\" )\n-                           .create() );\n-        String[] args = new String[] { \"--verbose\" };\n-\n-        CommandLineParser parser = new PosixParser();\n-\n-        try {\n-            CommandLine cmd = parser.parse( options, args );\n-            assertTrue( cmd.hasOption( \"verbose\" ) );\n-        }        \n-        catch( ParseException exp ) {\n-            exp.printStackTrace();\n-            fail( \"Unexpected Exception: \" + exp.getMessage() );\n-        }\n-    }\n-\n-    public void test11458()\n+    public void test11457() throws Exception\n+    {\n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\")\n+                .create());\n+        String[] args = new String[]{\"--verbose\"};\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse(options, args);\n+        assertTrue(cmd.hasOption(\"verbose\"));\n+    }\n+\n+    public void test11458() throws Exception\n     {\n         Options options = new Options();\n         options.addOption( OptionBuilder.withValueSeparator( '=' )\n         options.addOption( OptionBuilder.withValueSeparator( ':' )\n                            .hasArgs()\n                            .create( 'p' ) );\n-        String[] args = new String[] { \"-DJAVA_HOME=/opt/java\" ,\n-        \"-pfile1:file2:file3\" };\n-\n-        CommandLineParser parser = new PosixParser();\n-\n-        try {\n-            CommandLine cmd = parser.parse( options, args );\n-\n-            String[] values = cmd.getOptionValues( 'D' );\n-\n-            assertEquals( values[0], \"JAVA_HOME\" );\n-            assertEquals( values[1], \"/opt/java\" );\n-\n-            values = cmd.getOptionValues( 'p' );\n-\n-            assertEquals( values[0], \"file1\" );\n-            assertEquals( values[1], \"file2\" );\n-            assertEquals( values[2], \"file3\" );\n-\n-            java.util.Iterator iter = cmd.iterator();\n-            while( iter.hasNext() ) {\n-                Option opt = (Option)iter.next();\n-                switch( opt.getId() ) {\n-                    case 'D':\n-                        assertEquals( opt.getValue( 0 ), \"JAVA_HOME\" );\n-                        assertEquals( opt.getValue( 1 ), \"/opt/java\" );\n-                        break;\n-                    case 'p':\n-                        assertEquals( opt.getValue( 0 ), \"file1\" );\n-                        assertEquals( opt.getValue( 1 ), \"file2\" );\n-                        assertEquals( opt.getValue( 2 ), \"file3\" );\n-                        break;\n-                    default:\n-                        fail( \"-D option not found\" );\n-                }\n+        String[] args = new String[] { \"-DJAVA_HOME=/opt/java\" , \"-pfile1:file2:file3\" };\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse(options, args);\n+\n+        String[] values = cmd.getOptionValues('D');\n+\n+        assertEquals(values[0], \"JAVA_HOME\");\n+        assertEquals(values[1], \"/opt/java\");\n+\n+        values = cmd.getOptionValues('p');\n+\n+        assertEquals(values[0], \"file1\");\n+        assertEquals(values[1], \"file2\");\n+        assertEquals(values[2], \"file3\");\n+\n+        Iterator iter = cmd.iterator();\n+        while (iter.hasNext())\n+        {\n+            Option opt = (Option) iter.next();\n+            switch (opt.getId())\n+            {\n+                case 'D':\n+                    assertEquals(opt.getValue(0), \"JAVA_HOME\");\n+                    assertEquals(opt.getValue(1), \"/opt/java\");\n+                    break;\n+                case 'p':\n+                    assertEquals(opt.getValue(0), \"file1\");\n+                    assertEquals(opt.getValue(1), \"file2\");\n+                    assertEquals(opt.getValue(2), \"file3\");\n+                    break;\n+                default:\n+                    fail(\"-D option not found\");\n             }\n         }\n-        catch( ParseException exp ) {\n-            fail( \"Unexpected Exception:\\nMessage:\" + exp.getMessage() \n-                  + \"Type: \" + exp.getClass().getName() );\n-        }\n-    }\n-\n-    public void test11680()\n+    }\n+\n+    public void test11680() throws Exception\n     {\n         Options options = new Options();\n         options.addOption(\"f\", true, \"foobar\");\n-\toptions.addOption(\"m\", true, \"missing\");\n-        String[] args = new String[] { \"-f\" , \"foo\" };\n-\n-        CommandLineParser parser = new PosixParser();\n-\n-        try {\n-            CommandLine cmd = parser.parse( options, args );\n-\n-            try {\n-                cmd.getOptionValue( \"f\", \"default f\");\n-                cmd.getOptionValue( \"m\", \"default m\");\n-            }\n-            catch( NullPointerException exp ) {\n-                fail( \"NullPointer caught: \" + exp.getMessage() );\n-            }\n-        }\n-        catch( ParseException exp ) {\n-            fail( \"Unexpected Exception: \" + exp.getMessage() );\n-        }\n-    }\n-\n-    public void test11456()\n+        options.addOption(\"m\", true, \"missing\");\n+        String[] args = new String[]{\"-f\", \"foo\"};\n+\n+        CommandLineParser parser = new PosixParser();\n+\n+        CommandLine cmd = parser.parse(options, args);\n+\n+        cmd.getOptionValue(\"f\", \"default f\");\n+        cmd.getOptionValue(\"m\", \"default m\");\n+    }\n+\n+    public void test11456() throws Exception\n     {\n         // Posix \n         Options options = new Options();\n \n         CommandLineParser parser = new PosixParser();\n \n-        try {\n-            CommandLine cmd = parser.parse( options, args );\n-            assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n-        }\n-        catch( ParseException exp ) {\n-            fail( \"Unexpected Exception: \" + exp.getMessage() );\n-        }\n+        CommandLine cmd = parser.parse( options, args );\n+        assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n \n         // GNU\n         options = new Options();\n \n         parser = new GnuParser();\n \n-        try {\n-            CommandLine cmd = parser.parse( options, args );\n-            assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n-        }\n-        catch( ParseException exp ) {\n-            fail( \"Unexpected Exception: \" + exp.getMessage() );\n-        }\n-\n-    }\n-\n-    public void test12210() {\n+        cmd = parser.parse( options, args );\n+        assertEquals( cmd.getOptionValue( 'b' ), \"value\" );\n+    }\n+\n+    public void test12210() throws Exception\n+    {\n         // create the main options object which will handle the first parameter\n         Options mainOptions = new Options();\n         // There can be 2 main exclusive options:  -exec|-rep\n \n         // for the exec option, there are 2 options...\n         Options execOptions = new Options();\n-        execOptions.addOption(\"exec_opt1\",false,\" desc\");\n-        execOptions.addOption(\"exec_opt2\",false,\" desc\");\n+        execOptions.addOption(\"exec_opt1\", false, \" desc\");\n+        execOptions.addOption(\"exec_opt2\", false, \" desc\");\n \n         // similarly, for rep there are 2 options...\n         Options repOptions = new Options();\n-        repOptions.addOption(\"repopto\",false,\"desc\");\n-        repOptions.addOption(\"repoptt\",false,\"desc\");\n+        repOptions.addOption(\"repopto\", false, \"desc\");\n+        repOptions.addOption(\"repoptt\", false, \"desc\");\n \n         // create the parser\n         GnuParser parser = new GnuParser();\n         // first parse the main options to see what the user has specified\n         // We set stopAtNonOption to true so it does not touch the remaining\n         // options\n-        try {\n-            CommandLine cmd = parser.parse(mainOptions,argv,true);\n-            // get the remaining options...\n-            argv = cmd.getArgs();\n-\n-            if(cmd.hasOption(\"exec\")){\n-                cmd = parser.parse(execOptions,argv,false);\n-                // process the exec_op1 and exec_opt2...\n-                assertTrue( cmd.hasOption(\"exec_opt1\") );\n-                assertTrue( cmd.hasOption(\"exec_opt2\") );\n-            }\n-            else if(cmd.hasOption(\"rep\")){\n-                cmd = parser.parse(repOptions,argv,false);\n-                // process the rep_op1 and rep_opt2...\n-            }\n-            else {\n-                fail( \"exec option not found\" );\n-            }\n-        }\n-        catch( ParseException exp ) {\n-            fail( \"Unexpected exception: \" + exp.getMessage() );\n-        }\n-    }\n-\n-    public void test13425() {\n+        CommandLine cmd = parser.parse(mainOptions,argv,true);\n+        // get the remaining options...\n+        argv = cmd.getArgs();\n+\n+        if(cmd.hasOption(\"exec\"))\n+        {\n+            cmd = parser.parse(execOptions,argv,false);\n+            // process the exec_op1 and exec_opt2...\n+            assertTrue( cmd.hasOption(\"exec_opt1\") );\n+            assertTrue( cmd.hasOption(\"exec_opt2\") );\n+        }\n+        else if(cmd.hasOption(\"rep\"))\n+        {\n+            cmd = parser.parse(repOptions,argv,false);\n+            // process the rep_op1 and rep_opt2...\n+        }\n+        else {\n+            fail( \"exec option not found\" );\n+        }\n+    }\n+\n+    public void test13425() throws Exception\n+    {\n         Options options = new Options();\n         Option oldpass = OptionBuilder.withLongOpt( \"old-password\" )\n             .withDescription( \"Use this option to specify the old password\" )\n \n         Parser parser = new PosixParser();\n \n-        try {\n-            CommandLine line = parser.parse( options, args );\n+        try\n+        {\n+            parser.parse( options, args );\n         }\n         // catch the exception and leave the method\n-        catch( Exception exp ) {\n+        catch( Exception exp )\n+        {\n             assertTrue( exp != null );\n             return;\n         }\n         fail( \"MissingArgumentException not caught.\" );\n     }\n \n-    public void test13666() {\n+    public void test13666() throws Exception\n+    {\n         Options options = new Options();\n         Option dir = OptionBuilder.withDescription( \"dir\" )\n                                        .hasArg()\n         \n         \n         final PrintStream oldSystemOut = System.out;\n-        try{\n+        try\n+        {\n             final ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n             final PrintStream print = new PrintStream(bytes);\n             \n             bytes.reset();\n             \n             System.setOut(new PrintStream(bytes));\n-            try {\n-                HelpFormatter formatter = new HelpFormatter();\n-                formatter.printHelp( \"dir\", options );\n-            }\n-            catch( Exception exp ) {\n-                fail( \"Unexpected Exception: \" + exp.getMessage() );\n-            }\n+\n+            HelpFormatter formatter = new HelpFormatter();\n+            formatter.printHelp( \"dir\", options );\n+\n             assertEquals(\"usage: dir\"+eol+\" -d <arg>   dir\"+eol,bytes.toString());\n         }\n-        finally {\n+        finally\n+        {\n             System.setOut(oldSystemOut);\n         }\n     }\n \n-    public void test13935() {\n+    public void test13935() throws Exception\n+    {\n         OptionGroup directions = new OptionGroup();\n \n         Option left = new Option( \"l\", \"left\", false, \"go left\" );\n         exception = false;\n \n         args = new String[] { \"-s\", \"-l\" };\n-        try {\n-            CommandLine line = parser.parse( opts, args );\n-        }\n-        catch( ParseException exp ) {\n-            fail( \"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage() );\n+        try\n+        {\n+            parser.parse(opts, args);\n+        }\n+        catch (ParseException exp)\n+        {\n+            fail(\"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage());\n         }\n \n         opts.addOption( forward );\n         args = new String[] { \"-s\", \"-l\", \"-f\" };\n-        try {\n-            CommandLine line = parser.parse( opts, args );\n-        }\n-        catch( ParseException exp ) {\n-            fail( \"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage() );\n+        try\n+        {\n+            parser.parse(opts, args);\n+        }\n+        catch (ParseException exp)\n+        {\n+            fail(\"Unexpected exception: \" + exp.getClass().getName() + \":\" + exp.getMessage());\n         }\n     }\n \n--- a/src/test/org/apache/commons/cli/GnuParseTest.java\n+++ b/src/test/org/apache/commons/cli/GnuParseTest.java\n         _parser = new GnuParser( );\n     }\n \n-    public void testSimpleShort()\n+    public void testSimpleShort() throws Exception\n     {\n         String[] args = new String[] { \"-a\",\n                                        \"-b\", \"toast\",\n                                        \"foo\", \"bar\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args);\n-            \n-            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+        CommandLine cl = _parser.parse(_options, args);\n+\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n     }\n \n-    public void testSimpleLong()\n+    public void testSimpleLong() throws Exception\n     {\n         String[] args = new String[] { \"--enable-a\",\n                                        \"--bfile\", \"toast\",\n                                        \"foo\", \"bar\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args);\n-            \n-            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n-        } \n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+        CommandLine cl = _parser.parse(_options, args);\n+\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n     }\n \n-    public void testExtraOption()\n+    public void testExtraOption() throws Exception\n     {\n         String[] args = new String[] { \"-a\", \"-d\", \"-b\", \"toast\",\n                                        \"foo\", \"bar\" };\n         {\n             caught = true;\n         }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+\n         assertTrue( \"Confirm UnrecognizedOptionException caught\", caught );\n     }\n \n-    public void testMissingArg()\n+    public void testMissingArg() throws Exception\n     {\n         String[] args = new String[] { \"-b\" };\n \n         {\n             caught = true;\n         }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n \n         assertTrue( \"Confirm MissingArgumentException caught\", caught );\n     }\n \n-    public void testStop()\n+    public void testStop() throws Exception\n     {\n         String[] args = new String[] { \"-c\",\n                                        \"foober\",\n                                        \"-b\",\n                                        \"toast\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args, true);\n-            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+        CommandLine cl = _parser.parse(_options, args, true);\n+        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n     }\n \n-    public void testMultiple()\n+    public void testMultiple() throws Exception\n     {\n         String[] args = new String[] { \"-c\",\n                                        \"foobar\",\n                                        \"-b\",\n                                        \"toast\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args, true);\n-            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+        CommandLine cl = _parser.parse(_options, args, true);\n+        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n \n-            cl = _parser.parse(_options, cl.getArgs() );\n+        cl = _parser.parse(_options, cl.getArgs() );\n \n-            assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-            assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-            assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+        assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n     }\n \n-    public void testMultipleWithLong()\n+    public void testMultipleWithLong() throws Exception\n     {\n         String[] args = new String[] { \"--copt\",\n                                        \"foobar\",\n                                        \"--bfile\", \"toast\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options,args,\n-                                            true);\n-            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+        CommandLine cl = _parser.parse(_options,args,\n+                                        true);\n+        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n \n-            cl = _parser.parse(_options, cl.getArgs() );\n+        cl = _parser.parse(_options, cl.getArgs() );\n \n-            assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-            assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-            assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+        assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n     }\n \n-    public void testDoubleDash()\n+    public void testDoubleDash() throws Exception\n     {\n         String[] args = new String[] { \"--copt\",\n                                        \"--\",\n                                        \"-b\", \"toast\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args);\n+        CommandLine cl = _parser.parse(_options, args);\n \n-            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm -b is not set\", ! cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n-\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm -b is not set\", ! cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n     }\n \n-    public void testSingleDash()\n+    public void testSingleDash() throws Exception\n     {\n         String[] args = new String[] { \"--copt\",\n                                        \"-b\", \"-\",\n                                        \"-a\",\n                                        \"-\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args);\n+        CommandLine cl = _parser.parse(_options, args);\n \n-            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\") );\n-            assertTrue( \"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-            assertTrue( \"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-        \n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\") );\n+        assertTrue( \"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue( \"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\") );\n     }\n }\n--- a/src/test/org/apache/commons/cli/OptionBuilderTest.java\n+++ b/src/test/org/apache/commons/cli/OptionBuilderTest.java\n         assertTrue( !base.hasArg() );\n     }\n \n-    public void testSpecialOptChars() {\n-\n+    public void testSpecialOptChars() throws Exception\n+    {\n         // '?'\n-        try {\n-            Option opt = OptionBuilder.withDescription( \"help options\" )\n-                                      .create( '?' );\n-            assertEquals( \"?\", opt.getOpt() );\n-        }\n-        catch( IllegalArgumentException arg ) {\n-            fail( \"IllegalArgumentException caught\" );\n-        }\n+        Option opt1 = OptionBuilder.withDescription(\"help options\").create('?');\n+        assertEquals(\"?\", opt1.getOpt());\n \n         // '@'\n-        try {\n-            Option opt = OptionBuilder.withDescription( \"read from stdin\" )\n-                                      .create( '@' );\n-            assertEquals( \"@\", opt.getOpt() );\n-        }\n-        catch( IllegalArgumentException arg ) {\n-            fail( \"IllegalArgumentException caught\" );\n-        }\n+        Option opt2 = OptionBuilder.withDescription(\"read from stdin\").create('@');\n+        assertEquals(\"@\", opt2.getOpt());\n     }\n \n-    public void testOptionArgNumbers() {\n+    public void testOptionArgNumbers()\n+    {\n         Option opt = OptionBuilder.withDescription( \"option description\" )\n                                   .hasArgs( 2 )\n                                   .create( 'o' );\n     public void testIllegalOptions() {\n         // bad single character option\n         try {\n-            Option opt = OptionBuilder.withDescription( \"option description\" )\n-                                      .create( '\"' );\n+            OptionBuilder.withDescription( \"option description\" ).create( '\"' );\n             fail( \"IllegalArgumentException not caught\" );\n         }\n         catch( IllegalArgumentException exp ) {\n--- a/src/test/org/apache/commons/cli/OptionGroupTest.java\n+++ b/src/test/org/apache/commons/cli/OptionGroupTest.java\n         _options.addOption( \"r\", \"revision\", false, \"revision number\" );\n     }\n \n-    public void testSingleOptionFromGroup()\n+    public void testSingleOptionFromGroup() throws Exception\n     {\n         String[] args = new String[] { \"-f\" };\n \n-        try\n-        {\n-            CommandLine cl = parser.parse( _options, args);\n-\n-            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n-            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testSingleOption()\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testSingleOption() throws Exception\n     {\n         String[] args = new String[] { \"-r\" };\n \n-        try\n-        {\n-            CommandLine cl = parser.parse( _options, args);\n-\n-            assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n-            assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testTwoValidOptions()\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testTwoValidOptions() throws Exception\n     {\n         String[] args = new String[] { \"-r\", \"-f\" };\n \n-        try\n-        {\n-            CommandLine cl = parser.parse( _options, args);\n-\n-            assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n-            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testSingleLongOption()\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testSingleLongOption() throws Exception\n     {\n         String[] args = new String[] { \"--file\" };\n \n-        try\n-        {\n-            CommandLine cl = parser.parse( _options, args);\n-\n-            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n-            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testTwoValidLongOptions()\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testTwoValidLongOptions() throws Exception\n     {\n         String[] args = new String[] { \"--revision\", \"--file\" };\n \n-        try\n-        {\n-            CommandLine cl = parser.parse( _options, args);\n-\n-            assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n-            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testNoOptionsExtraArgs()\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is set\", cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm no extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testNoOptionsExtraArgs() throws Exception\n     {\n         String[] args = new String[] { \"arg1\", \"arg2\" };\n \n-        try\n-        {\n-            CommandLine cl = parser.parse( _options, args);\n-\n-            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n-            assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n-            assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm TWO extra args\", cl.getArgList().size() == 2);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+        CommandLine cl = parser.parse( _options, args);\n+\n+        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is NOT set\", !cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is NOT set\", !cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm TWO extra args\", cl.getArgList().size() == 2);\n     }\n \n     public void testTwoOptionsFromGroup()\n         }\n     }\n \n-    public void testTwoOptionsFromDifferentGroup()\n+    public void testTwoOptionsFromDifferentGroup() throws Exception\n     {\n         String[] args = new String[] { \"-f\", \"-s\" };\n \n-        try\n-        {\n-            CommandLine cl = parser.parse( _options, args);\n-            assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n-            assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n-            assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n-            assertTrue( \"Confirm -s is set\", cl.hasOption(\"s\") );\n-            assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm NO extra args\", cl.getArgList().size() == 0);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testValidLongOnlyOptions()\n-    {\n-        try\n-        {\n-            CommandLine cl = parser.parse( _options, new String[]{\"--export\"});\n-            assertTrue( \"Confirm --export is set\", cl.hasOption(\"export\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-                            \n-        try\n-        {\n-            CommandLine cl = parser.parse( _options, new String[]{\"--import\"});\n-            assertTrue( \"Confirm --import is set\", cl.hasOption(\"import\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+        CommandLine cl = parser.parse( _options, args);\n+        assertTrue( \"Confirm -r is NOT set\", !cl.hasOption(\"r\") );\n+        assertTrue( \"Confirm -f is set\", cl.hasOption(\"f\") );\n+        assertTrue( \"Confirm -d is NOT set\", !cl.hasOption(\"d\") );\n+        assertTrue( \"Confirm -s is set\", cl.hasOption(\"s\") );\n+        assertTrue( \"Confirm -c is NOT set\", !cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm NO extra args\", cl.getArgList().size() == 0);\n+    }\n+\n+    public void testValidLongOnlyOptions() throws Exception\n+    {\n+        CommandLine cl1 = parser.parse(_options, new String[]{\"--export\"});\n+        assertTrue(\"Confirm --export is set\", cl1.hasOption(\"export\"));\n+\n+        CommandLine cl2 = parser.parse(_options, new String[]{\"--import\"});\n+        assertTrue(\"Confirm --import is set\", cl2.hasOption(\"import\"));\n     }\n \n }\n--- a/src/test/org/apache/commons/cli/ParseRequiredTest.java\n+++ b/src/test/org/apache/commons/cli/ParseRequiredTest.java\n                                      .create( 'b' ) );\n     }\n \n-    public void testWithRequiredOption()\n+    public void testWithRequiredOption() throws Exception\n     {\n         String[] args = new String[] {  \"-b\", \"file\" };\n \n-        try\n-        {\n-            CommandLine cl = parser.parse(_options,args);\n-            \n-            assertTrue( \"Confirm -a is NOT set\", !cl.hasOption(\"a\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\") );\n-            assertTrue( \"Confirm NO of extra args\", cl.getArgList().size() == 0);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+        CommandLine cl = parser.parse(_options,args);\n+\n+        assertTrue( \"Confirm -a is NOT set\", !cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\") );\n+        assertTrue( \"Confirm NO of extra args\", cl.getArgList().size() == 0);\n     }\n \n-    public void testOptionAndRequiredOption()\n+    public void testOptionAndRequiredOption() throws Exception\n     {\n         String[] args = new String[] {  \"-a\", \"-b\", \"file\" };\n \n-        try\n-        {\n-            CommandLine cl = parser.parse(_options,args);\n+        CommandLine cl = parser.parse(_options,args);\n \n-            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\") );\n-            assertTrue( \"Confirm NO of extra args\", cl.getArgList().size() == 0);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"file\") );\n+        assertTrue( \"Confirm NO of extra args\", cl.getArgList().size() == 0);\n     }\n \n     public void testMissingRequiredOption()\n--- a/src/test/org/apache/commons/cli/ParseTest.java\n+++ b/src/test/org/apache/commons/cli/ParseTest.java\n         _parser = new PosixParser();\n     }\n \n-    public void testSimpleShort()\n+    public void testSimpleShort() throws Exception\n     {\n         String[] args = new String[] { \"-a\",\n                                        \"-b\", \"toast\",\n                                        \"foo\", \"bar\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args);\n-            \n-            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testSimpleLong()\n+        CommandLine cl = _parser.parse(_options, args);\n+\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testSimpleLong() throws Exception\n     {\n         String[] args = new String[] { \"--enable-a\",\n                                        \"--bfile\", \"toast\",\n                                        \"foo\", \"bar\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args);\n-            \n-            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-            assertTrue( \"Confirm arg of --bfile\", cl.getOptionValue( \"bfile\" ).equals( \"toast\" ) );\n-            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n-        } \n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testComplexShort()\n+        CommandLine cl = _parser.parse(_options, args);\n+\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm arg of --bfile\", cl.getOptionValue( \"bfile\" ).equals( \"toast\" ) );\n+        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testComplexShort() throws Exception\n     {\n         String[] args = new String[] { \"-acbtoast\",\n                                        \"foo\", \"bar\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args);\n-            \n-            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-            assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testExtraOption()\n+        CommandLine cl = _parser.parse(_options, args);\n+\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm size of extra args\", cl.getArgList().size() == 2);\n+    }\n+\n+    public void testExtraOption() throws Exception\n     {\n         String[] args = new String[] { \"-adbtoast\",\n                                        \"foo\", \"bar\" };\n         {\n             caught = true;\n         }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n+\n         assertTrue( \"Confirm UnrecognizedOptionException caught\", caught );\n     }\n \n-    public void testMissingArg()\n+    public void testMissingArg() throws Exception\n     {\n \n         String[] args = new String[] { \"-acb\" };\n \n         try\n         {\n-            CommandLine cl = _parser.parse(_options, args);\n+            _parser.parse(_options, args);\n         }\n         catch (MissingArgumentException e)\n         {\n             caught = true;\n         }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n \n         assertTrue( \"Confirm MissingArgumentException caught\", caught );\n     }\n \n-    public void testStop()\n+    public void testStop() throws Exception\n     {\n         String[] args = new String[] { \"-c\",\n                                        \"foober\",\n                                        \"-btoast\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args, true);\n-            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testMultiple()\n+        CommandLine cl = _parser.parse(_options, args, true);\n+        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n+    }\n+\n+    public void testMultiple() throws Exception\n     {\n         String[] args = new String[] { \"-c\",\n                                        \"foobar\",\n                                        \"-btoast\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args, true);\n-            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n-\n-            cl = _parser.parse(_options, cl.getArgs() );\n-\n-            assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-            assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-            assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testMultipleWithLong()\n+        CommandLine cl = _parser.parse(_options, args, true);\n+        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm  2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n+\n+        cl = _parser.parse(_options, cl.getArgs() );\n+\n+        assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n+    }\n+\n+    public void testMultipleWithLong() throws Exception\n     {\n         String[] args = new String[] { \"--copt\",\n                                        \"foobar\",\n                                        \"--bfile\", \"toast\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options,args,\n-                                            true);\n-            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n-\n-            cl = _parser.parse(_options, cl.getArgs() );\n-\n-            assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n-            assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-            assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testDoubleDash()\n+        CommandLine cl = _parser.parse(_options,args,\n+                                        true);\n+        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm  3 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 3);\n+\n+        cl = _parser.parse(_options, cl.getArgs() );\n+\n+        assertTrue( \"Confirm -c is not set\", ! cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"toast\") );\n+        assertTrue( \"Confirm  1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue( \"Confirm  value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"foobar\") );\n+    }\n+\n+    public void testDoubleDash() throws Exception\n     {\n         String[] args = new String[] { \"--copt\",\n                                        \"--\",\n                                        \"-b\", \"toast\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args);\n-\n-            assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n-            assertTrue( \"Confirm -b is not set\", ! cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n-\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-    }\n-\n-    public void testSingleDash()\n+        CommandLine cl = _parser.parse(_options, args);\n+\n+        assertTrue( \"Confirm -c is set\", cl.hasOption(\"c\") );\n+        assertTrue( \"Confirm -b is not set\", ! cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm 2 extra args: \" + cl.getArgList().size(), cl.getArgList().size() == 2);\n+    }\n+\n+    public void testSingleDash() throws Exception\n     {\n         String[] args = new String[] { \"--copt\",\n                                        \"-b\", \"-\",\n                                        \"-a\",\n                                        \"-\" };\n \n-        try\n-        {\n-            CommandLine cl = _parser.parse(_options, args);\n-\n-            assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n-            assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n-            assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\") );\n-            assertTrue( \"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n-            assertTrue( \"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail( e.toString() );\n-        }\n-        \n+        CommandLine cl = _parser.parse(_options, args);\n+\n+        assertTrue( \"Confirm -a is set\", cl.hasOption(\"a\") );\n+        assertTrue( \"Confirm -b is set\", cl.hasOption(\"b\") );\n+        assertTrue( \"Confirm arg of -b\", cl.getOptionValue(\"b\").equals(\"-\") );\n+        assertTrue( \"Confirm 1 extra arg: \" + cl.getArgList().size(), cl.getArgList().size() == 1);\n+        assertTrue( \"Confirm value of extra arg: \" + cl.getArgList().get(0), cl.getArgList().get(0).equals(\"-\") );\n     }\n }\n--- a/src/test/org/apache/commons/cli/ValueTest.java\n+++ b/src/test/org/apache/commons/cli/ValueTest.java\n         assertEquals( _cl.getOptionValue(\"d\"), \"bar\");\n     }\n \n-    public void testShortOptionalArgNoValue()\n-    {\n-        String[] args = new String[] { \"-e\"\n-        };\n-        try\n-        {\n-            Parser parser = new PosixParser();\n-            CommandLine cmd = parser.parse(opts,args);\n-            assertTrue( cmd.hasOption(\"e\") );\n-            assertNull( cmd.getOptionValue(\"e\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-    }\n-\n-    public void testShortOptionalArgValue()\n-    {\n-        String[] args = new String[] { \"-e\", \"everything\"\n-        };\n-        try\n-        {\n-            Parser parser = new PosixParser();\n-            CommandLine cmd = parser.parse(opts,args);\n-            assertTrue( cmd.hasOption(\"e\") );\n-            assertEquals( \"everything\", cmd.getOptionValue(\"e\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-    }\n-\n-    public void testLongOptionalNoValue()\n-    {\n-        String[] args = new String[] { \"--fish\"\n-        };\n-        try\n-        {\n-            Parser parser = new PosixParser();\n-            CommandLine cmd = parser.parse(opts,args);\n-            assertTrue( cmd.hasOption(\"fish\") );\n-            assertNull( cmd.getOptionValue(\"fish\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-    }\n-\n-    public void testLongOptionalArgValue()\n-    {\n-        String[] args = new String[] { \"--fish\", \"face\"\n-        };\n-        try\n-        {\n-            Parser parser = new PosixParser();\n-            CommandLine cmd = parser.parse(opts,args);\n-            assertTrue( cmd.hasOption(\"fish\") );\n-            assertEquals( \"face\", cmd.getOptionValue(\"fish\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-    }\n-\n-    public void testShortOptionalArgValues()\n-    {\n-        String[] args = new String[] { \"-j\", \"ink\", \"idea\"\n-        };\n-        try\n-        {\n-            Parser parser = new PosixParser();\n-            CommandLine cmd = parser.parse(opts,args);\n-            assertTrue( cmd.hasOption(\"j\") );\n-            assertEquals( \"ink\", cmd.getOptionValue(\"j\") );\n-            assertEquals( \"ink\", cmd.getOptionValues(\"j\")[0] );\n-            assertEquals( \"idea\", cmd.getOptionValues(\"j\")[1] );\n-            assertEquals( cmd.getArgs().length, 0 );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-    }\n-\n-    public void testLongOptionalArgValues()\n-    {\n-        String[] args = new String[] { \"--gravy\", \"gold\", \"garden\"\n-        };\n-        try\n-        {\n-            Parser parser = new PosixParser();\n-            CommandLine cmd = parser.parse(opts,args);\n-            assertTrue( cmd.hasOption(\"gravy\") );\n-            assertEquals( \"gold\", cmd.getOptionValue(\"gravy\") );\n-            assertEquals( \"gold\", cmd.getOptionValues(\"gravy\")[0] );\n-            assertEquals( \"garden\", cmd.getOptionValues(\"gravy\")[1] );\n-            assertEquals( cmd.getArgs().length, 0 );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-    }\n-\n-    public void testShortOptionalNArgValues()\n-    {\n-        String[] args = new String[] { \"-i\", \"ink\", \"idea\", \"isotope\", \"ice\"\n-        };\n-        try\n-        {\n-            Parser parser = new PosixParser();\n-            CommandLine cmd = parser.parse(opts,args);\n-            assertTrue( cmd.hasOption(\"i\") );\n-            assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n-            assertEquals( \"ink\", cmd.getOptionValues(\"i\")[0] );\n-            assertEquals( \"idea\", cmd.getOptionValues(\"i\")[1] );\n-            assertEquals( cmd.getArgs().length, 2 );\n-            assertEquals( \"isotope\", cmd.getArgs()[0] );\n-            assertEquals( \"ice\", cmd.getArgs()[1] );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-    }\n-\n-    public void testLongOptionalNArgValues()\n+    public void testShortOptionalArgNoValue() throws Exception\n+    {\n+        String[] args = new String[] { \"-e\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"e\") );\n+        assertNull( cmd.getOptionValue(\"e\") );\n+    }\n+\n+    public void testShortOptionalArgValue() throws Exception\n+    {\n+        String[] args = new String[] { \"-e\", \"everything\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"e\") );\n+        assertEquals( \"everything\", cmd.getOptionValue(\"e\") );\n+    }\n+\n+    public void testLongOptionalNoValue() throws Exception\n+    {\n+        String[] args = new String[] { \"--fish\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"fish\") );\n+        assertNull( cmd.getOptionValue(\"fish\") );\n+    }\n+\n+    public void testLongOptionalArgValue() throws Exception\n+    {\n+        String[] args = new String[] { \"--fish\", \"face\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"fish\") );\n+        assertEquals( \"face\", cmd.getOptionValue(\"fish\") );\n+    }\n+\n+    public void testShortOptionalArgValues() throws Exception\n+    {\n+        String[] args = new String[] { \"-j\", \"ink\", \"idea\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"j\") );\n+        assertEquals( \"ink\", cmd.getOptionValue(\"j\") );\n+        assertEquals( \"ink\", cmd.getOptionValues(\"j\")[0] );\n+        assertEquals( \"idea\", cmd.getOptionValues(\"j\")[1] );\n+        assertEquals( cmd.getArgs().length, 0 );\n+    }\n+\n+    public void testLongOptionalArgValues() throws Exception\n+    {\n+        String[] args = new String[] { \"--gravy\", \"gold\", \"garden\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"gravy\") );\n+        assertEquals( \"gold\", cmd.getOptionValue(\"gravy\") );\n+        assertEquals( \"gold\", cmd.getOptionValues(\"gravy\")[0] );\n+        assertEquals( \"garden\", cmd.getOptionValues(\"gravy\")[1] );\n+        assertEquals( cmd.getArgs().length, 0 );\n+    }\n+\n+    public void testShortOptionalNArgValues() throws Exception\n+    {\n+        String[] args = new String[] { \"-i\", \"ink\", \"idea\", \"isotope\", \"ice\" };\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"i\") );\n+        assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n+        assertEquals( \"ink\", cmd.getOptionValues(\"i\")[0] );\n+        assertEquals( \"idea\", cmd.getOptionValues(\"i\")[1] );\n+        assertEquals( cmd.getArgs().length, 2 );\n+        assertEquals( \"isotope\", cmd.getArgs()[0] );\n+        assertEquals( \"ice\", cmd.getArgs()[1] );\n+    }\n+\n+    public void testLongOptionalNArgValues() throws Exception\n     {\n         String[] args = new String[] { \n             \"--hide\", \"house\", \"hair\", \"head\"\n \n         Parser parser = new PosixParser();\n \n-        try\n-        {\n-            CommandLine cmd = parser.parse(opts,args);\n-            assertTrue( cmd.hasOption(\"hide\") );\n-            assertEquals( \"house\", cmd.getOptionValue(\"hide\") );\n-            assertEquals( \"house\", cmd.getOptionValues(\"hide\")[0] );\n-            assertEquals( \"hair\", cmd.getOptionValues(\"hide\")[1] );\n-            assertEquals( cmd.getArgs().length, 1 );\n-            assertEquals( \"head\", cmd.getArgs()[0] );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-    }\n-\n-    public void testPropertyOptionSingularValue()\n+        CommandLine cmd = parser.parse(opts,args);\n+        assertTrue( cmd.hasOption(\"hide\") );\n+        assertEquals( \"house\", cmd.getOptionValue(\"hide\") );\n+        assertEquals( \"house\", cmd.getOptionValues(\"hide\")[0] );\n+        assertEquals( \"hair\", cmd.getOptionValues(\"hide\")[1] );\n+        assertEquals( cmd.getArgs().length, 1 );\n+        assertEquals( \"head\", cmd.getArgs()[0] );\n+    }\n+\n+    public void testPropertyOptionSingularValue() throws Exception\n     {\n         Properties properties = new Properties();\n         properties.setProperty( \"hide\", \"seek\" );\n \n         Parser parser = new PosixParser();\n         \n-        try\n-        {\n-            CommandLine cmd = parser.parse(opts, null, properties);\n-            assertTrue( cmd.hasOption(\"hide\") );\n-            assertEquals( \"seek\", cmd.getOptionValue(\"hide\") );\n-            assertTrue( !cmd.hasOption(\"fake\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-    }\n-\n-    public void testPropertyOptionFlags()\n+        CommandLine cmd = parser.parse(opts, null, properties);\n+        assertTrue( cmd.hasOption(\"hide\") );\n+        assertEquals( \"seek\", cmd.getOptionValue(\"hide\") );\n+        assertTrue( !cmd.hasOption(\"fake\") );\n+    }\n+\n+    public void testPropertyOptionFlags() throws Exception\n     {\n         Properties properties = new Properties();\n         properties.setProperty( \"a\", \"true\" );\n         properties.setProperty( \"e\", \"1\" );\n \n         Parser parser = new PosixParser();\n-        \n-        try\n-        {\n-            CommandLine cmd = parser.parse(opts, null, properties);\n-            assertTrue( cmd.hasOption(\"a\") );\n-            assertTrue( cmd.hasOption(\"c\") );\n-            assertTrue( cmd.hasOption(\"e\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n+\n+        CommandLine cmd = parser.parse(opts, null, properties);\n+        assertTrue( cmd.hasOption(\"a\") );\n+        assertTrue( cmd.hasOption(\"c\") );\n+        assertTrue( cmd.hasOption(\"e\") );\n+\n \n         properties = new Properties();\n         properties.setProperty( \"a\", \"false\" );\n         properties.setProperty( \"c\", \"no\" );\n         properties.setProperty( \"e\", \"0\" );\n-        try\n-        {\n-            CommandLine cmd = parser.parse(opts, null, properties);\n-            assertTrue( !cmd.hasOption(\"a\") );\n-            assertTrue( !cmd.hasOption(\"c\") );\n-            assertTrue( !cmd.hasOption(\"e\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n+\n+        cmd = parser.parse(opts, null, properties);\n+        assertTrue( !cmd.hasOption(\"a\") );\n+        assertTrue( !cmd.hasOption(\"c\") );\n+        assertTrue( !cmd.hasOption(\"e\") );\n+\n \n         properties = new Properties();\n         properties.setProperty( \"a\", \"TRUE\" );\n         properties.setProperty( \"c\", \"nO\" );\n         properties.setProperty( \"e\", \"TrUe\" );\n-        try\n-        {\n-            CommandLine cmd = parser.parse(opts, null, properties);\n-            assertTrue( cmd.hasOption(\"a\") );\n-            assertTrue( !cmd.hasOption(\"c\") );\n-            assertTrue( cmd.hasOption(\"e\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-\n+\n+        cmd = parser.parse(opts, null, properties);\n+        assertTrue( cmd.hasOption(\"a\") );\n+        assertTrue( !cmd.hasOption(\"c\") );\n+        assertTrue( cmd.hasOption(\"e\") );\n+\n+        \n         properties = new Properties();\n         properties.setProperty( \"a\", \"just a string\" );\n         properties.setProperty( \"e\", \"\" );\n-        try\n-        {\n-            CommandLine cmd = parser.parse(opts, null, properties);\n-            assertTrue( !cmd.hasOption(\"a\") );\n-            assertTrue( !cmd.hasOption(\"c\") );\n-            assertTrue( !cmd.hasOption(\"e\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-\n+\n+        cmd = parser.parse(opts, null, properties);\n+        assertTrue( !cmd.hasOption(\"a\") );\n+        assertTrue( !cmd.hasOption(\"c\") );\n+        assertTrue( !cmd.hasOption(\"e\") );\n     } \n \n-    public void testPropertyOptionMultipleValues()\n+    public void testPropertyOptionMultipleValues() throws Exception\n     {\n         Properties properties = new Properties();\n         properties.setProperty( \"k\", \"one,two\" );\n         String[] values = new String[] {\n             \"one\", \"two\"\n         };\n-        try\n-        {\n-            CommandLine cmd = parser.parse(opts, null, properties);\n-            assertTrue( cmd.hasOption(\"k\") );\n-            assertTrue( Arrays.equals( values, cmd.getOptionValues('k') ) );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n-    }\n-\n-    public void testPropertyOverrideValues()\n+\n+        CommandLine cmd = parser.parse(opts, null, properties);\n+        assertTrue( cmd.hasOption(\"k\") );\n+        assertTrue( Arrays.equals( values, cmd.getOptionValues('k') ) );\n+    }\n+\n+    public void testPropertyOverrideValues() throws Exception\n     {\n         String[] args = new String[] { \n             \"-j\",\n \n         Properties properties = new Properties();\n         properties.setProperty( \"j\", \"seek\" );\n-        try\n-        {\n-            Parser parser = new PosixParser();\n-            CommandLine cmd = parser.parse(opts, args, properties);\n-            assertTrue( cmd.hasOption(\"j\") );\n-            assertEquals( \"found\", cmd.getOptionValue(\"j\") );\n-            assertTrue( cmd.hasOption(\"i\") );\n-            assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n-            assertTrue( !cmd.hasOption(\"fake\") );\n-        }\n-        catch (ParseException e)\n-        {\n-            fail(\"Cannot setUp() CommandLine: \" + e.toString());\n-        }\n+\n+        Parser parser = new PosixParser();\n+        CommandLine cmd = parser.parse(opts, args, properties);\n+        assertTrue( cmd.hasOption(\"j\") );\n+        assertEquals( \"found\", cmd.getOptionValue(\"j\") );\n+        assertTrue( cmd.hasOption(\"i\") );\n+        assertEquals( \"ink\", cmd.getOptionValue(\"i\") );\n+        assertTrue( !cmd.hasOption(\"fake\") );\n     }\n \n }", "timestamp": 1212077508, "metainfo": ""}