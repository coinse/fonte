{"sha": "135281e95ce1616ba42a18691282be9d8d4af73b", "log": "Fixed the definition of the h option in ValuesTest (1 argument instead of 2) Code simplification  ", "commit": "\n--- a/src/test/org/apache/commons/cli/ValuesTest.java\n+++ b/src/test/org/apache/commons/cli/ValuesTest.java\n \n package org.apache.commons.cli;\n \n-import java.util.Arrays;\n-\n import junit.framework.TestCase;\n+import junitx.framework.ArrayAssert;\n \n public class ValuesTest extends TestCase\n {\n-    /** CommandLine instance */\n-    private CommandLine _cmdline = null;\n+    private CommandLine cmd;\n \n     public void setUp() throws Exception\n     {\n         options.addOption(OptionBuilder.withLongOpt(\"e\").hasArgs().withDescription(\"set -e \").create('e'));\n         options.addOption(\"f\", \"f\", false, \"jk\");\n         options.addOption(OptionBuilder.withLongOpt(\"g\").hasArgs(2).withDescription(\"set -g\").create('g'));\n-        options.addOption(OptionBuilder.withLongOpt(\"h\").hasArgs(2).withDescription(\"set -h\").create('h'));\n+        options.addOption(OptionBuilder.withLongOpt(\"h\").hasArg().withDescription(\"set -h\").create('h'));\n         options.addOption(OptionBuilder.withLongOpt(\"i\").withDescription(\"set -i\").create('i'));\n         options.addOption(OptionBuilder.withLongOpt(\"j\").hasArgs().withDescription(\"set -j\").withValueSeparator('=').create('j'));\n         options.addOption(OptionBuilder.withLongOpt(\"k\").hasArgs().withDescription(\"set -k\").withValueSeparator('=').create('k'));\n \n         CommandLineParser parser = new PosixParser();\n \n-        _cmdline = parser.parse(options,args);\n+        cmd = parser.parse(options,args);\n     }\n \n     public void testShortArgs()\n     {\n-        assertTrue( _cmdline.hasOption(\"a\") );\n-        assertTrue( _cmdline.hasOption(\"c\") );\n+        assertTrue(\"Option a is not set\", cmd.hasOption(\"a\"));\n+        assertTrue(\"Option c is not set\", cmd.hasOption(\"c\"));\n \n-        assertNull( _cmdline.getOptionValues(\"a\") );\n-        assertNull( _cmdline.getOptionValues(\"c\") );\n+        assertNull(cmd.getOptionValues(\"a\"));\n+        assertNull(cmd.getOptionValues(\"c\"));\n     }\n \n     public void testShortArgsWithValue()\n     {\n-        assertTrue( _cmdline.hasOption(\"b\") );\n-        assertTrue( _cmdline.getOptionValue(\"b\").equals(\"foo\"));\n-        assertEquals(1, _cmdline.getOptionValues(\"b\").length);\n+        assertTrue(\"Option b is not set\", cmd.hasOption(\"b\"));\n+        assertTrue(cmd.getOptionValue(\"b\").equals(\"foo\"));\n+        assertEquals(1, cmd.getOptionValues(\"b\").length);\n \n-        assertTrue( _cmdline.hasOption(\"d\") );\n-        assertTrue( _cmdline.getOptionValue(\"d\").equals(\"bar\"));\n-        assertEquals(1, _cmdline.getOptionValues(\"d\").length);\n+        assertTrue(\"Option d is not set\", cmd.hasOption(\"d\"));\n+        assertTrue(cmd.getOptionValue(\"d\").equals(\"bar\"));\n+        assertEquals(1, cmd.getOptionValues(\"d\").length);\n     }\n \n     public void testMultipleArgValues()\n     {\n-        String[] result = _cmdline.getOptionValues(\"e\");\n-        String[] values = new String[] { \"one\", \"two\" };\n-        assertTrue( _cmdline.hasOption(\"e\") );\n-        assertEquals(2, _cmdline.getOptionValues(\"e\").length);\n-        assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"e\") ) );\n+        assertTrue(\"Option e is not set\", cmd.hasOption(\"e\"));\n+        ArrayAssert.assertEquals(new String[] { \"one\", \"two\" }, cmd.getOptionValues(\"e\"));\n     }\n \n     public void testTwoArgValues()\n     {\n-        String[] result = _cmdline.getOptionValues(\"g\");\n-        String[] values = new String[] { \"val1\", \"val2\" };\n-        assertTrue( _cmdline.hasOption(\"g\") );\n-        assertEquals(2, _cmdline.getOptionValues(\"g\").length);\n-        assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"g\") ) );\n+        assertTrue(\"Option g is not set\", cmd.hasOption(\"g\"));\n+        ArrayAssert.assertEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"g\"));\n     }\n \n     public void testComplexValues()\n     {\n-        String[] result = _cmdline.getOptionValues(\"h\");\n-        String[] values = new String[] { \"val1\", \"val2\" };\n-        assertTrue( _cmdline.hasOption(\"i\") );\n-        assertTrue( _cmdline.hasOption(\"h\") );\n-        assertEquals(2, _cmdline.getOptionValues(\"h\").length);\n-        assertTrue( Arrays.equals( values, _cmdline.getOptionValues(\"h\") ) );\n+        assertTrue(\"Option i is not set\", cmd.hasOption(\"i\"));\n+        assertTrue(\"Option h is not set\", cmd.hasOption(\"h\"));\n+        ArrayAssert.assertEquals(new String[] { \"val1\", \"val2\" }, cmd.getOptionValues(\"h\"));\n     }\n \n     public void testExtraArgs()\n     {\n-        String[] args = new String[] { \"arg1\", \"arg2\", \"arg3\" };\n-        assertEquals(3, _cmdline.getArgs().length);\n-        assertTrue( Arrays.equals( args, _cmdline.getArgs() ) );\n+        ArrayAssert.assertEquals(\"Extra args\", new String[] { \"arg1\", \"arg2\", \"arg3\" }, cmd.getArgs());\n     }\n \n     public void testCharSeparator()\n     {\n-        // tests the char methods of CommandLine that delegate to\n-        // the String methods\n-        String[] values = new String[] { \"key\", \"value\", \"key\", \"value\" };\n-        assertTrue( _cmdline.hasOption( \"j\" ) );\n-        assertTrue( _cmdline.hasOption( 'j' ) );\n-        assertEquals( 4, _cmdline.getOptionValues( \"j\" ).length );\n-        assertEquals( 4, _cmdline.getOptionValues( 'j' ).length );\n-        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"j\" ) ) );\n-        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'j' ) ) );\n+        // tests the char methods of CommandLine that delegate to the String methods\n+        assertTrue(\"Option j is not set\", cmd.hasOption(\"j\"));\n+        assertTrue(\"Option j is not set\", cmd.hasOption('j'));\n+        ArrayAssert.assertEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues(\"j\"));\n+        ArrayAssert.assertEquals(new String[] { \"key\", \"value\", \"key\", \"value\" }, cmd.getOptionValues('j'));\n \n-        values = new String[] { \"key1\", \"value1\", \"key2\", \"value2\" };\n-        assertTrue( _cmdline.hasOption( \"k\" ) );\n-        assertTrue( _cmdline.hasOption( 'k' ) );\n-        assertEquals(4, _cmdline.getOptionValues( \"k\" ).length);\n-        assertEquals(4, _cmdline.getOptionValues( 'k' ).length);\n-        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"k\" ) ) );\n-        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'k' ) ) );\n+        assertTrue(\"Option k is not set\", cmd.hasOption(\"k\"));\n+        assertTrue(\"Option k is not set\", cmd.hasOption('k'));\n+        ArrayAssert.assertEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues(\"k\"));\n+        ArrayAssert.assertEquals(new String[] { \"key1\", \"value1\", \"key2\", \"value2\" }, cmd.getOptionValues('k'));\n \n-        values = new String[] { \"key\", \"value\" };\n-        assertTrue( _cmdline.hasOption( \"m\" ) );\n-        assertTrue( _cmdline.hasOption( 'm' ) );\n-        assertEquals(2, _cmdline.getOptionValues( \"m\" ).length);\n-        assertEquals(2, _cmdline.getOptionValues( 'm' ).length);\n-        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( \"m\" ) ) );\n-        assertTrue( Arrays.equals( values, _cmdline.getOptionValues( 'm' ) ) );\n+        assertTrue(\"Option m is not set\", cmd.hasOption(\"m\"));\n+        assertTrue(\"Option m is not set\", cmd.hasOption('m'));\n+        ArrayAssert.assertEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues(\"m\"));\n+        ArrayAssert.assertEquals(new String[] { \"key\", \"value\" }, cmd.getOptionValues('m'));\n     }\n \n     /**", "timestamp": 1243675790, "metainfo": ""}