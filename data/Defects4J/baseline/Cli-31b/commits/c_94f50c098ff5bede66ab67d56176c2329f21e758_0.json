{"sha": "94f50c098ff5bede66ab67d56176c2329f21e758", "log": "More tests for the partial option matching  ", "commit": "\n--- a/src/test/org/apache/commons/cli/BasicParserTest.java\n+++ b/src/test/org/apache/commons/cli/BasicParserTest.java\n         // not supported by the BasicParser\n     }\n \n-    public void testLongWithEqual() throws Exception\n+    public void testLongWithEqualDoubleDash() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n         // not supported by the BasicParser\n     }\n \n+    public void testUnambiguousPartialLongOption3() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n     public void testAmbiguousPartialLongOption1() throws Exception\n     {\n         // not supported by the BasicParser\n         // not supported by the BasicParser\n     }\n \n-    public void testPartialLongOptionWithShort() throws Exception\n+    public void testAmbiguousPartialLongOption3() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the BasicParser\n+    }\n+\n+    public void testPartialLongOptionSingleDash() throws Exception\n     {\n         // not supported by the BasicParser\n     }\n--- a/src/test/org/apache/commons/cli/GnuParserTest.java\n+++ b/src/test/org/apache/commons/cli/GnuParserTest.java\n         // not supported by the GnuParser\n     }\n \n+    public void testUnambiguousPartialLongOption3() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testUnambiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n     public void testAmbiguousPartialLongOption1() throws Exception\n     {\n         // not supported by the GnuParser\n         // not supported by the GnuParser\n     }\n \n-    public void testPartialLongOptionWithShort() throws Exception\n+   public void testAmbiguousPartialLongOption3() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the GnuParser\n+    }\n+\n+    public void testPartialLongOptionSingleDash() throws Exception\n     {\n         // not supported by the GnuParser\n     }\n--- a/src/test/org/apache/commons/cli/ParserTestCase.java\n+++ b/src/test/org/apache/commons/cli/ParserTestCase.java\n         {\n             assertEquals(\"-d\", e.getOption());\n         }\n-    }    \n+    }\n \n     public void testMissingArg() throws Exception\n     {\n         assertEquals(\"bar\", cl.getOptionValue(\"foo\"));\n     }\n \n-    public void testLongWithEqual() throws Exception\n+    public void testLongWithEqualDoubleDash() throws Exception\n     {\n         String[] args = new String[] { \"--foo=bar\" };\n \n         assertTrue(\"Confirm --version is set\", cl.hasOption(\"version\"));\n     }\n \n+    public void testUnambiguousPartialLongOption3() throws Exception\n+    {\n+        String[] args = new String[] { \"--ver=1\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n+        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n+        \n+        CommandLine cl = parser.parse(options, args);\n+        \n+        assertTrue(\"Confirm --verbose is set\", cl.hasOption(\"verbose\"));\n+        assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\n+    }\n+\n+    public void testUnambiguousPartialLongOption4() throws Exception\n+    {\n+        String[] args = new String[] { \"-ver=1\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n+        options.addOption(OptionBuilder.withLongOpt(\"help\").create());\n+        \n+        CommandLine cl = parser.parse(options, args);\n+        \n+        assertTrue(\"Confirm --verbose is set\", cl.hasOption(\"verbose\"));\n+        assertEquals(\"1\", cl.getOptionValue(\"verbose\"));\n+    }\n+    \n     public void testAmbiguousPartialLongOption1() throws Exception\n     {\n         String[] args = new String[] { \"--ver\" };\n         \n         assertTrue( \"Confirm MissingArgumentException caught\", caught );\n     }\n+\n+    public void testAmbiguousPartialLongOption3() throws Exception\n+    {\n+        String[] args = new String[] { \"--ver=1\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n+        \n+        boolean caught = false;\n+        \n+        try \n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (AmbiguousOptionException e) \n+        {\n+            caught = true;\n+            assertEquals(\"Partial option\", \"--ver\", e.getOption());\n+            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n+            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n+        }\n+        \n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n+\n+    public void testAmbiguousPartialLongOption4() throws Exception\n+    {\n+        String[] args = new String[] { \"-ver=1\" };\n+        \n+        Options options = new Options();\n+        options.addOption(OptionBuilder.withLongOpt(\"version\").create());\n+        options.addOption(OptionBuilder.withLongOpt(\"verbose\").hasOptionalArg().create());\n+        \n+        boolean caught = false;\n+        \n+        try \n+        {\n+            parser.parse(options, args);\n+        }\n+        catch (AmbiguousOptionException e) \n+        {\n+            caught = true;\n+            assertEquals(\"Partial option\", \"-ver\", e.getOption());\n+            assertNotNull(\"Matching options null\", e.getMatchingOptions());\n+            assertEquals(\"Matching options size\", 2, e.getMatchingOptions().size());\n+        }\n+        \n+        assertTrue( \"Confirm MissingArgumentException caught\", caught );\n+    }\n     \n-    public void testPartialLongOptionWithShort() throws Exception\n+    public void testPartialLongOptionSingleDash() throws Exception\n     {\n         String[] args = new String[] { \"-ver\" };\n         \n--- a/src/test/org/apache/commons/cli/PosixParserTest.java\n+++ b/src/test/org/apache/commons/cli/PosixParserTest.java\n     {\n         // not supported by the PosixParser\n     }\n+\n+    public void testUnambiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n+\n+    public void testAmbiguousPartialLongOption4() throws Exception\n+    {\n+        // not supported by the PosixParser\n+    }\n }", "timestamp": 1243518619, "metainfo": ""}