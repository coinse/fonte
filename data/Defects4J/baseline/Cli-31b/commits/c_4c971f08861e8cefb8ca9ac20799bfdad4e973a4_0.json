{"sha": "4c971f08861e8cefb8ca9ac20799bfdad4e973a4", "log": "OptionGroup now selects properly an option with no short name (CLI-182) OptionGroups no longer throw an AlreadySelectedException when reused for several parsings (CLI-183)   ", "commit": "\n--- a/src/java/org/apache/commons/cli/OptionGroup.java\n+++ b/src/java/org/apache/commons/cli/OptionGroup.java\n      */\n     public void setSelected(Option option) throws AlreadySelectedException\n     {\n+        if (option == null)\n+        {\n+            // reset the option previously selected\n+            selected = null;\n+            return;\n+        }\n+        \n         // if no option has already been selected or the \n         // same option is being reselected then set the\n         // selected member variable\n-        if (selected == null || selected.equals(option.getOpt()))\n+        if (selected == null || selected.equals(option.getKey()))\n         {\n-            selected = option.getOpt();\n+            selected = option.getKey();\n         }\n         else\n         {\n--- a/src/java/org/apache/commons/cli/Parser.java\n+++ b/src/java/org/apache/commons/cli/Parser.java\n             Option opt = (Option) it.next();\n             opt.clearValues();\n         }\n+        \n+        // clear the data from the groups\n+        for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)\n+        {\n+            OptionGroup group = (OptionGroup) it.next();\n+            group.setSelected(null);\n+        }        \n \n         // initialise members\n         setOptions(options);\n--- a/src/test/org/apache/commons/cli/ParserTestCase.java\n+++ b/src/test/org/apache/commons/cli/ParserTestCase.java\n         assertTrue( \"Confirm MissingArgumentException caught\", caught );\n     }\n \n-    public void testDoubleDash() throws Exception\n+    public void testDoubleDash1() throws Exception\n     {\n         String[] args = new String[] { \"--copt\",\n                                        \"--\",\n             fail(\"expected to catch MissingOptionException\");\n         }\n     }\n-\n+    \n+    public void testMissingRequiredGroup() throws Exception\n+    {\n+        OptionGroup group = new OptionGroup();\n+        group.addOption(OptionBuilder.create(\"a\"));\n+        group.addOption(OptionBuilder.create(\"b\"));\n+        group.setRequired(true);\n+\n+        Options options = new Options();\n+        options.addOptionGroup(group);\n+        options.addOption(OptionBuilder.isRequired().create(\"c\"));\n+\n+        try\n+        {\n+            parser.parse(options, new String[] { \"-c\" });\n+            fail(\"MissingOptionException not thrown\");\n+        }\n+        catch (MissingOptionException e)\n+        {\n+            assertEquals(1, e.getMissingOptions().size());\n+            assertTrue(e.getMissingOptions().get(0) instanceof OptionGroup);\n+        }\n+        catch (ParseException e)\n+        {\n+            fail(\"Expected to catch MissingOptionException\");\n+        }\n+    }\n+    \n+    public void testOptionGroup() throws Exception\n+    {\n+        OptionGroup group = new OptionGroup();\n+        group.addOption(OptionBuilder.create(\"a\"));\n+        group.addOption(OptionBuilder.create(\"b\"));\n+        \n+        Options options = new Options();\n+        options.addOptionGroup(group);\n+        \n+        parser.parse(options, new String[] { \"-b\" });\n+        \n+        assertEquals(\"selected option\", \"b\", group.getSelected());\n+    }\n+\n+    public void testOptionGroupLong() throws Exception\n+    {\n+        OptionGroup group = new OptionGroup();\n+        group.addOption(OptionBuilder.withLongOpt(\"foo\").create());\n+        group.addOption(OptionBuilder.withLongOpt(\"bar\").create());\n+        \n+        Options options = new Options();\n+        options.addOptionGroup(group);\n+        \n+        CommandLine cl = parser.parse(options, new String[] { \"--bar\" });\n+        \n+        assertTrue(cl.hasOption(\"bar\"));\n+        assertEquals(\"selected option\", \"bar\", group.getSelected());\n+    }\n+    \n     public void testReuseOptionsTwice() throws Exception\n     {\n         Options opts = new Options();", "timestamp": 1243650682, "metainfo": ""}