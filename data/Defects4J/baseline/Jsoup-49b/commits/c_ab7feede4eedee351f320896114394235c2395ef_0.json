{"sha": "ab7feede4eedee351f320896114394235c2395ef", "log": "Add CSS selector filter to HtmlToPlainText example", "commit": "\n--- a/src/main/java/org/jsoup/examples/HtmlToPlainText.java\n+++ b/src/main/java/org/jsoup/examples/HtmlToPlainText.java\n import org.jsoup.nodes.Element;\n import org.jsoup.nodes.Node;\n import org.jsoup.nodes.TextNode;\n+import org.jsoup.select.Elements;\n import org.jsoup.select.NodeTraversor;\n import org.jsoup.select.NodeVisitor;\n \n  * scrape.\n  * <p/>\n  * Note that this is a fairly simplistic formatter -- for real world use you'll want to embrace and extend.\n- *\n+ * <p/>\n+ * To invoke from the command line, assuming you've downloaded the jsoup jar to your current directory:<br/>\n+ * <code>java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]</code><br/>\n+ * where <i>url</i> is the URL to fetch, and <i>selector</i> is an optional CSS selector.\n  * @author Jonathan Hedley, jonathan@hedley.net\n  */\n public class HtmlToPlainText {\n+    private static final String userAgent = \"Mozilla/5.0 (jsoup)\";\n+    private static final int timeout = 5 * 1000;\n+\n     public static void main(String... args) throws IOException {\n-        Validate.isTrue(args.length == 1, \"usage: supply url to fetch\");\n-        String url = args[0];\n+        Validate.isTrue(args.length == 1 || args.length == 2, \"usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]\");\n+        final String url = args[0];\n+        final String selector = args.length == 2 ? args[1] : null;\n \n         // fetch the specified URL and parse to a HTML DOM\n-        Document doc = Jsoup.connect(url).get();\n+        Document doc = Jsoup.connect(url).userAgent(userAgent).timeout(timeout).get();\n \n         HtmlToPlainText formatter = new HtmlToPlainText();\n-        String plainText = formatter.getPlainText(doc);\n-        System.out.println(plainText);\n+\n+        if (selector != null) {\n+            Elements elements = doc.select(selector); // get each element that matches the CSS selector\n+            for (Element element : elements) {\n+                String plainText = formatter.getPlainText(element); // format that element to plain text\n+                System.out.println(plainText);\n+            }\n+        } else { // format the whole doc\n+            String plainText = formatter.getPlainText(doc);\n+            System.out.println(plainText);\n+        }\n     }\n \n     /**\n                 append(((TextNode) node).text()); // TextNodes carry all user-readable text in the DOM.\n             else if (name.equals(\"li\"))\n                 append(\"\\n * \");\n+            else if (name.equals(\"dt\"))\n+                append(\"  \");\n+            else if (StringUtil.in(name, \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"tr\"))\n+                append(\"\\n\");\n         }\n \n         // hit when all of the node's children (if any) have been visited\n         public void tail(Node node, int depth) {\n             String name = node.nodeName();\n-            if (name.equals(\"br\"))\n+            if (StringUtil.in(name, \"br\", \"dd\", \"dt\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\"))\n                 append(\"\\n\");\n-            else if (StringUtil.in(name, \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\"))\n-                append(\"\\n\\n\");\n             else if (name.equals(\"a\"))\n                 append(String.format(\" <%s>\", node.absUrl(\"href\")));\n         }", "timestamp": 1413780868, "metainfo": ""}