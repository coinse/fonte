{"sha": "8391b7231a2519557d41209d728acc4f422af381", "log": "Improved hashcode and equals for Node  Fixes #537", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n     public String toString() {\n         return html();\n     }\n-    \n+\n+    /**\n+     * Checks if these attributes are equal to another set of attributes, by comparing the two sets\n+     * @param o attributes to compare with\n+     * @return if both sets of attributes have the same content\n+     */\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) return true;\n         \n         return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);\n     }\n-    \n+\n+    /**\n+     * Calculates the hashcode of these attributes, by iterating all attributes and summing their hashcodes.\n+     * @return calculated hashcode\n+     */\n     @Override\n     public int hashCode() {\n         return attributes != null ? attributes.hashCode() : 0;\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         // was - Node#addChildren(child). short-circuits an array create and a loop.\n         reparentChild(child);\n         childNodes.add(child);\n-        child.setSiblingIndex(childNodes.size()-1);\n+        child.setSiblingIndex(childNodes.size() - 1);\n         return this;\n     }\n \n \n     @Override\n     public boolean equals(Object o) {\n-        return this == o;\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+\n+        Element element = (Element) o;\n+\n+        return tag.equals(element.tag);\n     }\n \n     @Override\n     public int hashCode() {\n-        // todo: fixup, not very useful\n         int result = super.hashCode();\n         result = 31 * result + (tag != null ? tag.hashCode() : 0);\n         return result;\n \n     @Override\n     public Element clone() {\n-        Element clone = (Element) super.clone();\n-        return clone;\n+        return (Element) super.clone();\n     }\n }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n      * @see #before(String)\n      */\n     public Node after(String html) {\n-        addSiblingHtml(siblingIndex()+1, html);\n+        addSiblingHtml(siblingIndex() + 1, html);\n         return this;\n     }\n \n         Validate.notNull(node);\n         Validate.notNull(parentNode);\n \n-        parentNode.addChildren(siblingIndex()+1, node);\n+        parentNode.addChildren(siblingIndex() + 1, node);\n         return this;\n     }\n \n         accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount()));\n     }\n \n+    /**\n+     * Check if this node is equal to another node. A node is considered equal if its attributes and content equal the\n+     * other node; particularly its position in the tree does not influence its equality.\n+     * @param o other object to compare to\n+     * @return true if the content of this node is the same as the other\n+     */\n     @Override\n     public boolean equals(Object o) {\n-        // todo: have nodes hold a child index, compare against that and parent (not children)\n-\n-        return this == o;\n-    }\n-\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+\n+        Node node = (Node) o;\n+\n+        if (childNodes != null ? !childNodes.equals(node.childNodes) : node.childNodes != null) return false;\n+        return !(attributes != null ? !attributes.equals(node.attributes) : node.attributes != null);\n+    }\n+\n+    /**\n+     * Calculates a hash code for this node, which includes iterating all its attributes, and recursing into any child\n+     * nodes. This means that a node's hashcode is based on it and its child content, and not its parent or place in the\n+     * tree. So two nodes with the same content, regardless of their position in the tree, will have the same hashcode.\n+     * @return the calculated hashcode\n+     * @see Node#equals(Object)\n+     */\n     @Override\n     public int hashCode() {\n-        int result = parentNode != null ? parentNode.hashCode() : 0;\n-        // not children, or will block stack as they go back up to parent)\n+        int result = childNodes != null ? childNodes.hashCode() : 0;\n         result = 31 * result + (attributes != null ? attributes.hashCode() : 0);\n         return result;\n     }\n--- a/src/main/java/org/jsoup/nodes/TextNode.java\n+++ b/src/main/java/org/jsoup/nodes/TextNode.java\n         ensureAttributes();\n         return super.absUrl(attributeKey);\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+\n+        TextNode textNode = (TextNode) o;\n+\n+        return !(text != null ? !text.equals(textNode.text) : textNode.text != null);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = super.hashCode();\n+        result = 31 * result + (text != null ? text.hashCode() : 0);\n+        return result;\n+    }\n }\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"<div><div class=\\\"head\\\"><p>Hello</p></div><p>There</p></div>\", TextUtil.stripNewlines(doc.body().html()));\n \n         Element ret = p.wrap(\"<div><div class=foo></div><p>What?</p></div>\");\n-        assertEquals(\"<div><div class=\\\"head\\\"><div><div class=\\\"foo\\\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>\", \n+        assertEquals(\"<div><div class=\\\"head\\\"><div><div class=\\\"foo\\\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>\",\n                 TextUtil.stripNewlines(doc.body().html()));\n \n         assertEquals(ret, p);\n         assertEquals(\"c2\", arr2[1]);\n         assertEquals(\"c3\", arr2[2]);\n     }\n+\n+    @Test\n+    public void testHashAndEquals() {\n+        String doc1 = \"<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>\" +\n+                \"<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>\";\n+\n+        Document doc = Jsoup.parse(doc1);\n+        Elements els = doc.select(\"p\");\n+\n+        /*\n+        for (Element el : els) {\n+            System.out.println(el.hashCode() + \" - \" + el.outerHtml());\n+        }\n+\n+        0 1534787905 - <p class=\"one\">One</p>\n+        1 1534787905 - <p class=\"one\">One</p>\n+        2 1539683239 - <p class=\"one\">Two</p>\n+        3 1535455211 - <p class=\"two\">One</p>\n+        4 1534787905 - <p class=\"one\">One</p>\n+        5 1534787905 - <p class=\"one\">One</p>\n+        6 1539683239 - <p class=\"one\">Two</p>\n+        7 1535455211 - <p class=\"two\">One</p>\n+        */\n+        assertEquals(8, els.size());\n+        Element e0 = els.get(0);\n+        Element e1 = els.get(1);\n+        Element e2 = els.get(2);\n+        Element e3 = els.get(3);\n+        Element e4 = els.get(4);\n+        Element e5 = els.get(5);\n+        Element e6 = els.get(6);\n+        Element e7 = els.get(7);\n+\n+        assertEquals(e0, e1);\n+        assertEquals(e0, e4);\n+        assertEquals(e0, e5);\n+        assertFalse(e0.equals(e2));\n+        assertFalse(e0.equals(e3));\n+        assertFalse(e0.equals(e6));\n+        assertFalse(e0.equals(e7));\n+\n+        assertEquals(e0.hashCode(), e1.hashCode());\n+        assertEquals(e0.hashCode(), e4.hashCode());\n+        assertEquals(e0.hashCode(), e5.hashCode());\n+        assertFalse(e0.hashCode() == (e2.hashCode()));\n+        assertFalse(e0.hashCode() == (e3).hashCode());\n+        assertFalse(e0.hashCode() == (e6).hashCode());\n+        assertFalse(e0.hashCode() == (e7).hashCode());\n+    }\n }", "timestamp": 1427677857, "metainfo": ""}