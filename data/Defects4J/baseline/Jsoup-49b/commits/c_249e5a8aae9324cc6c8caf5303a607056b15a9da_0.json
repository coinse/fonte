{"sha": "249e5a8aae9324cc6c8caf5303a607056b15a9da", "log": "Fixed parsing of group-or commas in CSS selectors.  Fixes #179", "commit": "\n--- a/src/main/java/org/jsoup/select/CombiningEvaluator.java\n+++ b/src/main/java/org/jsoup/select/CombiningEvaluator.java\n                 this.evaluators.addAll(evaluators);\n         }\n \n+        Or() {\n+            super();\n+        }\n+\n         public void add(Evaluator e) {\n             evaluators.add(e);\n         }\n--- a/src/main/java/org/jsoup/select/QueryParser.java\n+++ b/src/main/java/org/jsoup/select/QueryParser.java\n             // hierarchy and extras\n             boolean seenWhite = tq.consumeWhitespace();\n \n-            if (tq.matchChomp(\",\")) { // group or\n-                CombiningEvaluator.Or or = new CombiningEvaluator.Or(evals);\n-                evals.clear();\n-                evals.add(or);\n-                while (!tq.isEmpty()) {\n-                    String subQuery = tq.chompTo(\",\");\n-                    or.add(parse(subQuery));\n-                }\n-            } else if (tq.matchesAny(combinators)) {\n+            if (tq.matchesAny(combinators)) {\n                 combinator(tq.consume());\n             } else if (seenWhite) {\n                 combinator(' ');\n             evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.ImmediatePreviousSibling(e)));\n         else if (combinator == '~')\n             evals.add(new CombiningEvaluator.And(f, new StructuralEvaluator.PreviousSibling(e)));\n+        else if (combinator == ',') { // group or\n+            CombiningEvaluator.Or or;\n+            if (e instanceof CombiningEvaluator.Or) {\n+                or = (CombiningEvaluator.Or) e;\n+                or.add(f);\n+            } else {\n+                or = new CombiningEvaluator.Or();\n+                or.add(e);\n+                or.add(f);\n+            }\n+            evals.add(or);\n+        }\n         else\n             throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);\n     }\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         Document doc = Jsoup.parse(h);\n         Elements els = doc.select(\".foo > ol, ol > li + li\");\n \n-        assertEquals(3, els.size());\n-        assertEquals(\"ol\", els.get(0).tagName());\n-        assertEquals(\"Two\", els.get(1).text());\n-        assertEquals(\"Three\", els.get(2).text());\n+        assertEquals(2, els.size());\n+        assertEquals(\"li\", els.get(0).tagName());\n+        assertEquals(\"Three\", els.get(1).text());\n     }\n \n     @Test public void generalSiblings() {\n         assertEquals(1, el1.size());\n         assertEquals(\"1\", el1.first().id());\n     }\n+\n+    @Test public void handlesCommasInSelector() {\n+        Document doc = Jsoup.parse(\"<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>\");\n+\n+        Elements ps = doc.select(\"[name=1,2]\");\n+        assertEquals(1, ps.size());\n+\n+        Elements containers = doc.select(\"div, li:matches([0-9,]+)\");\n+        assertEquals(2, containers.size());\n+        assertEquals(\"div\", containers.get(0).tagName());\n+        assertEquals(\"li\", containers.get(1).tagName());\n+        assertEquals(\"123\", containers.get(1).text());\n+    }\n }", "timestamp": 1333420856, "metainfo": ""}