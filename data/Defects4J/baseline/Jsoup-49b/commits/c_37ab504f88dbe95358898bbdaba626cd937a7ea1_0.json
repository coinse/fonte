{"sha": "37ab504f88dbe95358898bbdaba626cd937a7ea1", "log": "Merge pull request #487 from cromoteca/master  Refactor the Elements collection to extend instead of delegate", "commit": "\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n  To get an {@code Elements} object, use the {@link Element#select(String)} method.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-public class Elements implements List<Element>, Cloneable {\n-    private List<Element> contents;\n-\n+public class Elements extends ArrayList<Element> {\n     public Elements() {\n-        contents = new ArrayList<Element>();\n     }\n \n     public Elements(int initialCapacity) {\n-        contents = new ArrayList<Element>(initialCapacity);\n+        super(initialCapacity);\n     }\n \n     public Elements(Collection<Element> elements) {\n-        contents = new ArrayList<Element>(elements);\n+        super(elements);\n     }\n     \n     public Elements(List<Element> elements) {\n-        contents = elements;\n+        super(elements);\n     }\n     \n     public Elements(Element... elements) {\n-        this(Arrays.asList(elements));\n+    \tsuper(Arrays.asList(elements));\n     }\n \n     /**\n      */\n     @Override\n \tpublic Elements clone() {\n-        Elements clone;\n-        try {\n-            clone = (Elements) super.clone();\n-        } catch (CloneNotSupportedException e) {\n-            throw new RuntimeException(e);\n-        }\n-    \tList<Element> elements = new ArrayList<Element>();\n-        clone.contents = elements;\n-    \t\n-    \tfor(Element e : contents)\n-    \t\telements.add(e.clone());\n-\t\t\n+        Elements clone = new Elements(size());\n+\n+        for(Element e : this)\n+    \t\tclone.add(e.clone());\n     \t\n     \treturn clone;\n \t}\n      @see #hasAttr(String)\n      */\n     public String attr(String attributeKey) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (element.hasAttr(attributeKey))\n                 return element.attr(attributeKey);\n         }\n      @return true if any of the elements have the attribute; false if none do.\n      */\n     public boolean hasAttr(String attributeKey) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (element.hasAttr(attributeKey))\n                 return true;\n         }\n      * @return this\n      */\n     public Elements attr(String attributeKey, String attributeValue) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.attr(attributeKey, attributeValue);\n         }\n         return this;\n      * @return this (for chaining)\n      */\n     public Elements removeAttr(String attributeKey) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.removeAttr(attributeKey);\n         }\n         return this;\n      @return this\n      */\n     public Elements addClass(String className) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.addClass(className);\n         }\n         return this;\n      @return this\n      */\n     public Elements removeClass(String className) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.removeClass(className);\n         }\n         return this;\n      @return this\n      */\n     public Elements toggleClass(String className) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.toggleClass(className);\n         }\n         return this;\n      @return true if any do, false if none do\n      */\n     public boolean hasClass(String className) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (element.hasClass(className))\n                 return true;\n         }\n      * @return this (for chaining)\n      */\n     public Elements val(String value) {\n-        for (Element element : contents)\n+        for (Element element : this)\n             element.val(value);\n         return this;\n     }\n      */\n     public String text() {\n         StringBuilder sb = new StringBuilder();\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (sb.length() != 0)\n                 sb.append(\" \");\n             sb.append(element.text());\n     }\n \n     public boolean hasText() {\n-        for (Element element: contents) {\n+        for (Element element: this) {\n             if (element.hasText())\n                 return true;\n         }\n      */\n     public String html() {\n         StringBuilder sb = new StringBuilder();\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (sb.length() != 0)\n                 sb.append(\"\\n\");\n             sb.append(element.html());\n      */\n     public String outerHtml() {\n         StringBuilder sb = new StringBuilder();\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             if (sb.length() != 0)\n                 sb.append(\"\\n\");\n             sb.append(element.outerHtml());\n      * @see Element#tagName(String)\n      */\n     public Elements tagName(String tagName) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.tagName(tagName);\n         }\n         return this;\n      * @see Element#html(String)\n      */\n     public Elements html(String html) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.html(html);\n         }\n         return this;\n      * @see Element#prepend(String)\n      */\n     public Elements prepend(String html) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.prepend(html);\n         }\n         return this;\n      * @see Element#append(String)\n      */\n     public Elements append(String html) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.append(html);\n         }\n         return this;\n      * @see Element#before(String)\n      */\n     public Elements before(String html) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.before(html);\n         }\n         return this;\n      * @see Element#after(String)\n      */\n     public Elements after(String html) {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.after(html);\n         }\n         return this;\n      */\n     public Elements wrap(String html) {\n         Validate.notEmpty(html);\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.wrap(html);\n         }\n         return this;\n      * @see Node#unwrap\n      */\n     public Elements unwrap() {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.unwrap();\n         }\n         return this;\n      * @see #remove()\n      */\n     public Elements empty() {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.empty();\n         }\n         return this;\n      * @see #empty()\n      */\n     public Elements remove() {\n-        for (Element element : contents) {\n+        for (Element element : this) {\n             element.remove();\n         }\n         return this;\n      * @return Elements containing only the specified element, or, if that element did not exist, an empty list.\n      */\n     public Elements eq(int index) {\n-        return contents.size() > index ? new Elements(get(index)) : new Elements();\n+        return size() > index ? new Elements(get(index)) : new Elements();\n     }\n     \n     /**\n      */\n     public Elements parents() {\n         HashSet<Element> combo = new LinkedHashSet<Element>();\n-        for (Element e: contents) {\n+        for (Element e: this) {\n             combo.addAll(e.parents());\n         }\n         return new Elements(combo);\n      @return The first matched element, or <code>null</code> if contents is empty.\n      */\n     public Element first() {\n-        return contents.isEmpty() ? null : contents.get(0);\n+        return isEmpty() ? null : get(0);\n     }\n \n     /**\n      @return The last matched element, or <code>null</code> if contents is empty.\n      */\n     public Element last() {\n-        return contents.isEmpty() ? null : contents.get(contents.size() - 1);\n+        return isEmpty() ? null : get(size() - 1);\n     }\n \n     /**\n     public Elements traverse(NodeVisitor nodeVisitor) {\n         Validate.notNull(nodeVisitor);\n         NodeTraversor traversor = new NodeTraversor(nodeVisitor);\n-        for (Element el: contents) {\n+        for (Element el: this) {\n             traversor.traverse(el);\n         }\n         return this;\n      */\n     public List<FormElement> forms() {\n         ArrayList<FormElement> forms = new ArrayList<FormElement>();\n-        for (Element el: contents)\n+        for (Element el: this)\n             if (el instanceof FormElement)\n                 forms.add((FormElement) el);\n         return forms;\n     }\n \n-    // implements List<Element> delegates:\n-    public int size() {return contents.size();}\n-\n-    public boolean isEmpty() {return contents.isEmpty();}\n-\n-    public boolean contains(Object o) {return contents.contains(o);}\n-\n-    public Iterator<Element> iterator() {return contents.iterator();}\n-\n-    public Object[] toArray() {return contents.toArray();}\n-\n-    public <T> T[] toArray(T[] a) {return contents.toArray(a);}\n-\n-    public boolean add(Element element) {return contents.add(element);}\n-\n-    public boolean remove(Object o) {return contents.remove(o);}\n-\n-    public boolean containsAll(Collection<?> c) {return contents.containsAll(c);}\n-\n-    public boolean addAll(Collection<? extends Element> c) {return contents.addAll(c);}\n-\n-    public boolean addAll(int index, Collection<? extends Element> c) {return contents.addAll(index, c);}\n-\n-    public boolean removeAll(Collection<?> c) {return contents.removeAll(c);}\n-\n-    public boolean retainAll(Collection<?> c) {return contents.retainAll(c);}\n-\n-    public void clear() {contents.clear();}\n-\n-    @Override\n-    public boolean equals(Object o) {return contents.equals(o);}\n-\n-    @Override\n-    public int hashCode() {return contents.hashCode();}\n-\n-    public Element get(int index) {return contents.get(index);}\n-\n-    public Element set(int index, Element element) {return contents.set(index, element);}\n-\n-    public void add(int index, Element element) {contents.add(index, element);}\n-\n-    public Element remove(int index) {return contents.remove(index);}\n-\n-    public int indexOf(Object o) {return contents.indexOf(o);}\n-\n-    public int lastIndexOf(Object o) {return contents.lastIndexOf(o);}\n-\n-    public ListIterator<Element> listIterator() {return contents.listIterator();}\n-\n-    public ListIterator<Element> listIterator(int index) {return contents.listIterator(index);}\n-\n-    public List<Element> subList(int fromIndex, int toIndex) {return contents.subList(fromIndex, toIndex);}\n }\n--- a/src/main/java/org/jsoup/nodes/FormElement.java\n+++ b/src/main/java/org/jsoup/nodes/FormElement.java\n             if (!el.tag().isFormSubmittable()) continue; // contents are form listable, superset of submitable\n             String name = el.attr(\"name\");\n             if (name.length() == 0) continue;\n+            String type = el.attr(\"type\");\n \n             if (\"select\".equals(el.tagName())) {\n                 Elements options = el.select(\"option[selected]\");\n                     if (option != null)\n                         data.add(HttpConnection.KeyVal.create(name, option.val()));\n                 }\n+            } else if (\"checkbox\".equalsIgnoreCase(type) || \"radio\".equalsIgnoreCase(type)) {\n+                // only add checkbox or radio if they have the checked attribute\n+                if (el.hasAttr(\"checked\"))\n+                    data.add(HttpConnection.KeyVal.create(name, el.val()));\n             } else {\n                 data.add(HttpConnection.KeyVal.create(name, el.val()));\n             }\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n \n         private boolean anythingElse(Token t, HtmlTreeBuilder tb) {\n             tb.error(this);\n-            tb.processEndTag(\"noscript\");\n-            return tb.process(t);\n+            tb.insert(new Token.Character().data(t.toString()));\n+            return true;\n         }\n     },\n     AfterHead {\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n \n         @Override\n         public boolean matches(Element root, Element element) {\n-            return element.hasAttr(key) && value.equalsIgnoreCase(element.attr(key));\n+            return element.hasAttr(key) && value.equalsIgnoreCase(element.attr(key).trim());\n         }\n \n         @Override\n--- a/src/test/java/org/jsoup/TextUtil.java\n+++ b/src/test/java/org/jsoup/TextUtil.java\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class TextUtil {\n+    public static final String LE = String.format(\"%n\");\n+\n     public static String stripNewlines(String text) {\n         text = text.replaceAll(\"\\\\n\\\\s*\", \"\");\n         return text;\n--- a/src/test/java/org/jsoup/helper/W3CDomTest.java\n+++ b/src/test/java/org/jsoup/helper/W3CDomTest.java\n \n import java.io.File;\n import java.io.IOException;\n+\n+import static org.jsoup.TextUtil.LE;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n         Document wDoc = w3c.fromJsoup(doc);\n         String out = w3c.asString(wDoc);\n         assertEquals(\n-                \"<html>\\n\" +\n-                        \"<head>\\n\" +\n-                        \"<META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n\" +\n-                        \"<title>W3c</title>\\n\" +\n-                        \"</head>\\n\" +\n-                        \"<body>\\n\" +\n-                        \"<p class=\\\"one\\\" id=\\\"12\\\">Text</p>\\n\" +\n-                        \"<!-- comment -->\\n\" +\n-                        \"<invalid>What<script>alert('!')</script>\\n\" +\n-                        \"</invalid>\\n\" +\n-                        \"</body>\\n\" +\n-                        \"</html>\\n\"\n+                \"<html>\" + LE +\n+                        \"<head>\" + LE +\n+                        \"<META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\" + LE +\n+                        \"<title>W3c</title>\" + LE +\n+                        \"</head>\" + LE +\n+                        \"<body>\" + LE +\n+                        \"<p class=\\\"one\\\" id=\\\"12\\\">Text</p>\" + LE +\n+                        \"<!-- comment -->\" + LE +\n+                        \"<invalid>What<script>alert('!')</script>\" + LE +\n+                        \"</invalid>\" + LE +\n+                        \"</body>\" + LE +\n+                        \"</html>\" + LE\n                 , out);\n     }\n \n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n \n     @Test public void testNormalisesStructure() {\n         Document doc = Jsoup.parse(\"<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body><p>four</p></html>\");\n-        assertEquals(\"<html><head><script>one</script><noscript></noscript></head><body><p>two</p><p>three</p><p>four</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n+        assertEquals(\"<html><head><script>one</script><noscript>&lt;p&gt;two</noscript></head><body><p>three</p><p>four</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n     }\n \n     @Test public void testClone() {\n--- a/src/test/java/org/jsoup/nodes/FormElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/FormElementTest.java\n \n     @Test public void createsFormData() {\n         String html = \"<form><input name='one' value='two'><select name='three'><option value='not'>\" +\n-                \"<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea></form>\";\n+                \"<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>\" +\n+                \"<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>\" +\n+                \"<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>\" +\n+                \"</form>\";\n         Document doc = Jsoup.parse(html);\n         FormElement form = (FormElement) doc.select(\"form\").first();\n         List<Connection.KeyVal> data = form.formData();\n \n-        assertEquals(4, data.size());\n+        assertEquals(6, data.size());\n         assertEquals(\"one=two\", data.get(0).toString());\n         assertEquals(\"three=four\", data.get(1).toString());\n         assertEquals(\"three=five\", data.get(2).toString());\n         assertEquals(\"six=seven\", data.get(3).toString());\n+        assertEquals(\"seven=on\", data.get(4).toString());\n+        assertEquals(\"eight=\", data.get(5).toString());\n     }\n \n     @Test public void createsSubmitableConnection() {\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n     @Test public void testNoImagesInNoScriptInHead() {\n         // jsoup used to allow, but against spec if parsing with noscript\n         Document doc = Jsoup.parse(\"<html><head><noscript><img src='foo'></noscript></head><body><p>Hello</p></body></html>\");\n-        assertEquals(\"<html><head><noscript></noscript></head><body><img src=\\\"foo\\\"><p>Hello</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n+        assertEquals(\"<html><head><noscript>&lt;img src=\\\"foo\\\"&gt;</noscript></head><body><p>Hello</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n     }\n \n     @Test public void testAFlowContents() {\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(\"div\", doc.select(\"div[k\" + s + \"]\").first().tagName());\n         assertEquals(\"div\", doc.select(\"div:containsOwn(\" + s + \")\").first().tagName());\n     }\n+    \n+    @Test\n+    public void selectClassWithSpace() {\n+        final String html = \"<div class=\\\"value\\\">class without space</div>\\n\"\n+                          + \"<div class=\\\"value \\\">class with space</div>\";\n+        \n+        Document doc = Jsoup.parse(html);\n+        \n+        Elements found = doc.select(\"div[class=value ]\");\n+        assertEquals(2, found.size());\n+        assertEquals(\"class without space\", found.get(0).text());\n+        assertEquals(\"class with space\", found.get(1).text());\n+        \n+        found = doc.select(\"div[class=\\\"value \\\"]\");\n+        assertEquals(2, found.size());\n+        assertEquals(\"class without space\", found.get(0).text());\n+        assertEquals(\"class with space\", found.get(1).text());\n+        \n+        found = doc.select(\"div[class=\\\"value\\\\ \\\"]\");\n+        assertEquals(0, found.size());\n+    }\n+    \n }", "timestamp": 1427665697, "metainfo": ""}