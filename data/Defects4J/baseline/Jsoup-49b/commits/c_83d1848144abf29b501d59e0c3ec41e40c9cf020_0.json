{"sha": "83d1848144abf29b501d59e0c3ec41e40c9cf020", "log": "Rename Element.addChild to appendChild.  Also implement Element.addElement(String tagName)", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n         Element head = doc.createElement(Tag.valueOf(\"head\"));\n         Element body = doc.createElement(Tag.valueOf(\"body\"));\n \n-        doc.addChild(html);\n-        html.addChild(head);\n-        html.addChild(body);\n+        doc.appendChild(html);\n+        html.appendChild(head);\n+        html.appendChild(body);\n \n         return doc;\n     }\n         getBody().text(text); // overridden to not nuke doc structure\n         return this;\n     }\n+\n+    @Override\n+    public String nodeName() {\n+        return \"#document\";\n+    }\n+    \n+    \n }\n \n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         return Selector.select(query, this);\n     }\n \n-    public void addChild(Element child) {\n+    public Element appendChild(Element child) {\n         Validate.notNull(child);\n         elementChildren.add(child);\n         childNodes.add(child);\n         child.setParentNode(this);\n-    }\n-\n-    public void addChild(Node child) {\n+        return child;\n+    }\n+\n+    public Node appendChild(Node child) {\n         Validate.notNull(child);\n         childNodes.add(child);\n         child.setParentNode(this);\n+        return child;\n+    }\n+    \n+    public Element appendElement(String tagName) {\n+        Element child = new Element(Tag.valueOf(tagName), baseUri());\n+        appendChild(child);\n+        return child;\n     }\n \n     public Element nextElementSibling() {\n         childNodes.clear();\n         elementChildren.clear();\n         TextNode textNode = new TextNode(text, baseUri);\n-        addChild(textNode);\n+        appendChild(textNode);\n \n         return this;\n     }\n--- a/src/main/java/org/jsoup/parser/Parser.java\n+++ b/src/main/java/org/jsoup/parser/Parser.java\n         if (data.endsWith(\"-\")) // i.e. was -->\n             data = data.substring(0, data.length()-1);\n         Comment comment = new Comment(data, baseUri);\n-        last().addChild(comment);\n+        last().appendChild(comment);\n     }\n \n     private void parseXmlDecl() {\n         String data = tq.chompTo(\">\");\n \n         XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);\n-        last().addChild(decl);\n+        last().appendChild(decl);\n     }\n \n     private void parseEndTag() {\n             String data = tq.chompTo(\"</\" + tagName);\n             tq.chompTo(\">\");\n             DataNode dataNode = DataNode.createFromEncoded(data, baseUri);\n-            child.addChild(dataNode);\n+            child.appendChild(dataNode);\n \n             if (tag.equals(titleTag))\n                 doc.setTitle(child.data());\n     private void parseTextNode() {\n         String text = tq.consumeTo(\"<\");\n         TextNode textNode = TextNode.createFromEncoded(text, baseUri);\n-        last().addChild(textNode);\n+        last().appendChild(textNode);\n     }\n \n     private void parseCdata() {\n         tq.consume(\"<![CDATA[\");\n         String rawText = tq.chompTo(\"]]>\");\n         TextNode textNode = new TextNode(rawText, baseUri); // constructor does not escape\n-        last().addChild(textNode);\n+        last().appendChild(textNode);\n     }\n \n     private Element addChildToParent(Element child, boolean isEmptyElement) {\n             // special case: make sure there's a head before putting in body\n             if (child.getTag().equals(bodyTag)) {\n                 Element head = new Element(new StartTag(headTag, baseUri));\n-                implicit.addChild(head);\n-            }\n-            implicit.addChild(child);\n+                implicit.appendChild(head);\n+            }\n+            implicit.appendChild(child);\n \n             // recurse to ensure somewhere to put parent\n             Element root = addChildToParent(implicit, false);\n             return root;\n         }\n \n-        parent.addChild(child);\n+        parent.appendChild(child);\n \n         if (!isEmptyElement)\n             stack.addLast(child);\n--- a/src/main/java/org/jsoup/safety/Cleaner.java\n+++ b/src/main/java/org/jsoup/safety/Cleaner.java\n \n                 if (whitelist.isSafeTag(sourceEl.tagName())) { // safe, clone and copy safe attrs\n                     Element destChild = createSafeElement(sourceEl);\n-                    dest.addChild(destChild);\n+                    dest.appendChild(destChild);\n                     copySafeNodes(sourceEl, destChild); // recurs\n                 } else { // not a safe tag, but it may have children (els or text) that are, so recurse\n                     copySafeNodes(sourceEl, dest);\n             } else if (sourceChild instanceof TextNode) {\n                 TextNode sourceText = (TextNode) sourceChild;\n                 TextNode destText = new TextNode(sourceText.getWholeText(), sourceChild.baseUri());\n-                dest.addChild(destText);\n+                dest.appendChild(destText);\n             } // else, we don't care about comments, xml proc instructions, etc\n         }\n     }\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"Gone\", div.text());\n         assertEquals(0, doc.select(\"p\").size());\n     }\n+    \n+    @Test public void testAddNewElement() {\n+        Document doc = Jsoup.parse(\"<div id=1><p>Hello</p></div>\");\n+        Element div = doc.getElementById(\"1\");\n+        div.appendElement(\"p\").text(\"there\");\n+        div.appendElement(\"P\").attr(\"class\", \"second\").text(\"now\");\n+        assertEquals(\"<html><head></head><body><div id=\\\"1\\\"><p>Hello</p><p>there</p><p class=\\\"second\\\">now</p></div></body></html>\",\n+                doc.html());\n+    }\n \n \n }", "timestamp": 1309605105, "metainfo": ""}