{"sha": "821b021a1e5fc75719c71ae5ea84157d770c1a9d", "log": "Merge pull request #403 from ahus1/ahus1_jdk_compatibility  Ensure JDK5 compatibility. Fixes #392.", "commit": "\n--- a/src/main/java/org/jsoup/helper/HttpConnection.java\n+++ b/src/main/java/org/jsoup/helper/HttpConnection.java\n  * @see org.jsoup.Jsoup#connect(String) \n  */\n public class HttpConnection implements Connection {\n+    private static final int HTTP_TEMP_REDIR = 307; // http/1.1 temporary redirect, not in Java's set.\n+\n     public static Connection connect(String url) {\n         Connection con = new HttpConnection();\n         con.url(url);\n                 int status = conn.getResponseCode();\n                 boolean needsRedirect = false;\n                 if (status != HttpURLConnection.HTTP_OK) {\n-                    if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)\n+                    if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER || status == HTTP_TEMP_REDIR)\n                         needsRedirect = true;\n                     else if (!req.ignoreHttpErrors())\n                         throw new HttpStatusException(\"HTTP error fetching URL\", status, req.url().toString());\n--- a/src/main/java/org/jsoup/nodes/DocumentType.java\n+++ b/src/main/java/org/jsoup/nodes/DocumentType.java\n     public DocumentType(String name, String publicId, String systemId, String baseUri) {\n         super(baseUri);\n \n-        Validate.notEmpty(name);\n         attr(\"name\", name);\n         attr(\"publicId\", publicId);\n         attr(\"systemId\", systemId);\n \n     @Override\n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        accum.append(\"<!DOCTYPE \").append(attr(\"name\"));\n+        accum.append(\"<!DOCTYPE\");\n+        if (!StringUtil.isBlank(attr(\"name\")))\n+            accum.append(\" \").append(attr(\"name\"));\n         if (!StringUtil.isBlank(attr(\"publicId\")))\n             accum.append(\" PUBLIC \\\"\").append(attr(\"publicId\")).append('\"');\n         if (!StringUtil.isBlank(attr(\"systemId\")))\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     /**\n+     * Get a CSS selector that will uniquely select this element.\n+     * <p/>If the element has an ID, returns #id;\n+     * otherwise returns the parent (if any) CSS selector, followed by '>',\n+     * followed by a unique selector for the element (tag.class.class:nth-child(n)).\n+     *\n+     * @return the CSS Path that can be used to retrieve the element in a selector.\n+     */\n+    public String cssSelector() {\n+        if (!id().isEmpty())\n+            return \"#\" + id();\n+\n+        StringBuilder selector = new StringBuilder(tagName());\n+        String classes = StringUtil.join(classNames(), \".\");\n+        if (!classes.isEmpty())\n+            selector.append('.').append(classes);\n+\n+        if (parent() == null || parent() instanceof Document) // don't add Document to selector, as will always have a html node\n+            return selector.toString();\n+\n+        selector.insert(0, \" > \");\n+        if (parent().select(selector.toString()).size() > 1)\n+            selector.append(String.format(\n+                \":nth-child(%d)\", elementSiblingIndex() + 1));\n+\n+        return parent().cssSelector() + selector.toString();\n+    }\n+\n+    /**\n      * Get sibling elements. If the element has no sibling elements, returns an empty list. An element is not a sibling\n      * of itself, so will not be included in the returned list.\n      * @return sibling elements\n     }\n \n     /**\n-     * Gets the combined text of this element and all its children.\n+     * Gets the combined text of this element and all its children. Whitespace is normalized and trimmed.\n      * <p>\n-     * For example, given HTML {@code <p>Hello <b>there</b> now!</p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n+     * For example, given HTML {@code <p>Hello  <b>there</b> now! </p>}, {@code p.text()} returns {@code \"Hello there now!\"}\n      *\n      * @return unencoded text, or empty string if none.\n      * @see #ownText()\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilder.java\n     @Override\n     Document parse(String input, String baseUri, ParseErrorList errors) {\n         state = HtmlTreeBuilderState.Initial;\n+        baseUriSetFromDoc = false;\n         return super.parse(input, baseUri, errors);\n     }\n \n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n                     break;\n                 case eof:\n                     t.eofError(this);\n+                    // note: fall through to > case\n+                case '>': // catch invalid <!DOCTYPE>\n+                    t.error(this);\n                     t.createDoctypePending();\n                     t.doctypePending.forceQuirks = true;\n                     t.emitDoctypePending();\n                     break; // ignore whitespace\n                 case nullChar:\n                     t.error(this);\n+                    t.createDoctypePending();\n                     t.doctypePending.name.append(replacementChar);\n                     t.transition(DoctypeName);\n                     break;\n--- a/src/main/java/org/jsoup/safety/Whitelist.java\n+++ b/src/main/java/org/jsoup/safety/Whitelist.java\n \n     /**\n      This whitelist allows a fuller range of text nodes: <code>a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li,\n-     ol, p, pre, q, small, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.\n+     ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.\n      <p/>\n      Links (<code>a</code> elements) can point to <code>http, https, ftp, mailto</code>, and have an enforced\n      <code>rel=nofollow</code> attribute.\n         return new Whitelist()\n                 .addTags(\n                         \"a\", \"b\", \"blockquote\", \"br\", \"cite\", \"code\", \"dd\", \"dl\", \"dt\", \"em\",\n-                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\", \"sub\",\n+                        \"i\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\", \"sub\",\n                         \"sup\", \"u\", \"ul\")\n \n                 .addAttributes(\"a\", \"href\")\n \n     /**\n      This whitelist allows a full range of text and structural body HTML: <code>a, b, blockquote, br, caption, cite,\n-     code, col, colgroup, dd, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, strike, strong, sub,\n+     code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub,\n      sup, table, tbody, td, tfoot, th, thead, tr, u, ul</code>\n      <p/>\n      Links do not have an enforced <code>rel=nofollow</code> attribute, but you can add that if desired.\n                 .addTags(\n                         \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n                         \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n-                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"strike\", \"strong\",\n+                        \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\",\n                         \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\",\n                         \"ul\")\n \n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n import java.util.*;\n \n /**\n- A list of {@link Element Elements}, with methods that act on every element in the list.\n+ A list of {@link Element}s, with methods that act on every element in the list.\n  <p/>\n- To get an Elements object, use the {@link Element#select(String)} method.\n+ To get an {@code Elements} object, use the {@link Element#select(String)} method.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public class Elements implements List<Element>, Cloneable {\n \n     /**\n      * Get the {@link FormElement} forms from the selected elements, if any.\n-     * @return a list of FormElements pulled from the matched elements. The list will be empty if the elements contain\n+     * @return a list of {@link FormElement}s pulled from the matched elements. The list will be empty if the elements contain\n      * no forms.\n      */\n     public List<FormElement> forms() {\n--- a/src/test/java/org/jsoup/integration/UrlConnectTest.java\n+++ b/src/test/java/org/jsoup/integration/UrlConnectTest.java\n         Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/302.pl\"); // http://jsoup.org\n         Document doc = con.get();\n         assertTrue(doc.title().contains(\"jsoup\"));\n+    }\n+\n+    @Test\n+    public void followsNewTempRedirect() throws IOException {\n+        Connection con = Jsoup.connect(\"http://direct.infohound.net/tools/307.pl\"); // http://jsoup.org\n+        Document doc = con.get();\n+        assertTrue(doc.title().contains(\"jsoup\"));\n+        assertEquals(\"http://jsoup.org\", con.response().url().toString());\n     }\n \n     @Test\n         assertEquals(\"ISO-8859-1\", res.charset());\n     }\n \n+    @Test\n+    public void baseHrefCorrectAfterHttpEquiv() throws IOException {\n+        // https://github.com/jhy/jsoup/issues/440\n+        Connection.Response res = Jsoup.connect(\"http://direct.infohound.net/tools/charset-base.html\").execute();\n+        Document doc = res.parse();\n+        assertEquals(\"http://example.com/foo.jpg\", doc.select(\"img\").first().absUrl(\"src\"));\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/nodes/DocumentTypeTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTypeTest.java\n  * @author Jonathan Hedley, http://jonathanhedley.com/\n  */\n public class DocumentTypeTest {\n-    @Test(expected = IllegalArgumentException.class)\n-    public void constructorValidationThrowsExceptionOnBlankName() {\n+    @Test\n+    public void constructorValidationOkWithBlankName() {\n         DocumentType fail = new DocumentType(\"\",\"\", \"\", \"\");\n     }\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"<div id=\\\"1\\\">Text <p>One</p> Text <p>Two</p></div><div id=\\\"2\\\"><p>One cloned</p><p>Two</p></div>\",\n             TextUtil.stripNewlines(doc.body().html()));\n     }\n+\n+    @Test\n+    public void testCssPath() {\n+        Document doc = Jsoup.parse(\"<div id=\\\"id1\\\">A</div><div>B</div><div class=\\\"c1 c2\\\">C</div>\");\n+        Element divA = doc.select(\"div\").get(0);\n+        Element divB = doc.select(\"div\").get(1);\n+        Element divC = doc.select(\"div\").get(2);\n+        assertEquals(divA.cssSelector(), \"#id1\");\n+        assertEquals(divB.cssSelector(), \"html > body > div:nth-child(2)\");\n+        assertEquals(divC.cssSelector(), \"html > body > div.c1.c2\");\n+\n+        assertTrue(divA == doc.select(divA.cssSelector()).first());\n+        assertTrue(divB == doc.select(divB.cssSelector()).first());\n+        assertTrue(divC == doc.select(divC.cssSelector()).first());\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java\n+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java\n         assertEquals(\"http://foo/2/1\", anchors.get(0).absUrl(\"href\"));\n         assertEquals(\"http://foo/2/3\", anchors.get(1).absUrl(\"href\"));\n         assertEquals(\"http://foo/4\", anchors.get(2).absUrl(\"href\"));\n+    }\n+\n+    @Test public void handlesProtocolRelativeUrl() {\n+        String base = \"https://example.com/\";\n+        String html = \"<img src='//example.net/img.jpg'>\";\n+        Document doc = Jsoup.parse(html, base);\n+        Element el = doc.select(\"img\").first();\n+        assertEquals(\"https://example.net/img.jpg\", el.absUrl(\"src\"));\n     }\n \n     @Test public void handlesCdata() {\n         Document doc = Jsoup.parse(h);\n         assertEquals(\"<img>\\n<svg>\\n <image />\\n</svg>\", doc.body().html());\n     }\n+\n+    @Test public void handlesInvalidDoctypes() {\n+        // would previously throw invalid name exception on empty doctype\n+        Document doc = Jsoup.parse(\"<!DOCTYPE>\");\n+        assertEquals(\n+                \"<!DOCTYPE> <html> <head></head> <body></body> </html>\",\n+                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+\n+        doc = Jsoup.parse(\"<!DOCTYPE><html><p>Foo</p></html>\");\n+        assertEquals(\n+                \"<!DOCTYPE> <html> <head></head> <body> <p>Foo</p> </body> </html>\",\n+                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+\n+        doc = Jsoup.parse(\"<!DOCTYPE \\u0000>\");\n+        assertEquals(\n+                \"<!DOCTYPE \ufffd> <html> <head></head> <body></body> </html>\",\n+                StringUtil.normaliseWhitespace(doc.outerHtml()));\n+    }\n }", "timestamp": 1411867723, "metainfo": ""}