{"sha": "4555f2d3bdd513bfa82e444930e29531387d0215", "log": "Implemented advanced attribute selectors (!= ^= $= *=) and element methods.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n             return null;\n     }\n \n-    public Elements getElementsWithClass(String className) {\n+    public Elements getElementsByClass(String className) {\n         Validate.notEmpty(className);\n \n         return Collector.collect(new Evaluator.Class(className), this);\n     }\n \n-    public Elements getElementsWithAttribute(String attributeKey) {\n-        Validate.notEmpty(attributeKey);\n-        attributeKey = attributeKey.trim().toLowerCase();\n-\n-        return Collector.collect(new Evaluator.Attribute(attributeKey), this);\n-    }\n-\n-    public Elements getElementsWithAttributeValue(String key, String value) {\n+    public Elements getElementsByAttribute(String key) {\n+        Validate.notEmpty(key);\n+        key = key.trim().toLowerCase();\n+\n+        return Collector.collect(new Evaluator.Attribute(key), this);\n+    }\n+\n+    public Elements getElementsByAttributeValue(String key, String value) {\n+        String[] kp = normaliseAttrKeyPair(key, value);\n+        return Collector.collect(new Evaluator.AttributeWithValue(kp[0], kp[1]), this);\n+    }\n+\n+    public Elements getElementsByAttributeValueNot(String key, String value) {\n+        String[] kp = normaliseAttrKeyPair(key, value);\n+        return Collector.collect(new Evaluator.AttributeWithValueNot(kp[0], kp[1]), this);\n+    }\n+\n+    public Elements getElementsByAttributeValueStarting(String key, String value) {\n+        String[] kp = normaliseAttrKeyPair(key, value);\n+        return Collector.collect(new Evaluator.AttributeWithValueStarting(kp[0], kp[1]), this);\n+    }\n+\n+    public Elements getElementsByAttributeValueEnding(String key, String value) {\n+        String[] kp = normaliseAttrKeyPair(key, value);\n+        return Collector.collect(new Evaluator.AttributeWithValueEnding(kp[0], kp[1]), this);\n+    }\n+\n+    public Elements getElementsByAttributeValueContaining(String key, String value) {\n+        String[] kp = normaliseAttrKeyPair(key, value);\n+        return Collector.collect(new Evaluator.AttributeWithValueContaining(kp[0], kp[1]), this);\n+    }\n+\n+    private String[] normaliseAttrKeyPair(String key, String value) {\n         Validate.notEmpty(key);\n         key = key.trim().toLowerCase();\n         Validate.notEmpty(value);\n         value = value.trim().toLowerCase();\n-\n-        return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);\n+        return new String[] {key, value};\n     }\n \n     public String text() {\n--- a/src/main/java/org/jsoup/select/Collector.java\n+++ b/src/main/java/org/jsoup/select/Collector.java\n \n import org.jsoup.nodes.Element;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n \n /**\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n         }\n     }\n \n-    public static class AttributeWithValue extends Evaluator {\n-        private String key;\n-        private String value;\n-\n+    public static class AttributeWithValue extends AttributeKeyPair {\n         public AttributeWithValue(String key, String value) {\n-            this.key = key;\n-            this.value = value;\n+            super(key, value);\n         }\n \n         boolean matches(Element element) {\n-            return (value.equals(element.attr(key)));\n+            return (value.equalsIgnoreCase(element.attr(key)));\n+        }\n+    }\n+\n+    public static class AttributeWithValueNot extends AttributeKeyPair {\n+        public AttributeWithValueNot(String key, String value) {\n+            super(key, value);\n+        }\n+\n+        boolean matches(Element element) {\n+            return (!value.equalsIgnoreCase(element.attr(key)));\n+        }\n+    }\n+\n+    public static class AttributeWithValueStarting extends AttributeKeyPair {\n+        public AttributeWithValueStarting(String key, String value) {\n+            super(key, value);\n+        }\n+\n+        boolean matches(Element element) {\n+            return element.attr(key).toLowerCase().startsWith(value); // value is lower case already\n+        }\n+    }\n+\n+    public static class AttributeWithValueEnding extends AttributeKeyPair {\n+        public AttributeWithValueEnding(String key, String value) {\n+            super(key, value);\n+        }\n+\n+        boolean matches(Element element) {\n+            return element.attr(key).toLowerCase().endsWith(value); // value is lower case\n+        }\n+    }\n+\n+    public static class AttributeWithValueContaining extends AttributeKeyPair {\n+        public AttributeWithValueContaining(String key, String value) {\n+            super(key, value);\n+        }\n+\n+        boolean matches(Element element) {\n+            return element.attr(key).toLowerCase().contains(value); // value is lower case\n+        }\n+    }\n+\n+    public abstract static class AttributeKeyPair extends Evaluator {\n+        protected String key;\n+        protected String value;\n+\n+        public AttributeKeyPair(String key, String value) {\n+            this.key = key;\n+            this.value = value;\n         }\n     }\n \n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n         String className = tq.consumeClassName();\n         Validate.notEmpty(className);\n \n-        List<Element> found = root.getElementsWithClass(className);\n+        List<Element> found = root.getElementsByClass(className);\n         elements.addAll(found);\n     }\n \n     }\n \n     private void byAttribute() {\n-        String key = tq.consumeToAny(\"=\", \"]\");\n+        String key = tq.consumeToAny(\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"]\"); // eq, not, start, end, contain, (no val)\n         Validate.notEmpty(key);\n-        String value = null;\n-        if (tq.matchChomp(\"=\"))\n-            value = tq.chompTo(\"]\");\n-        else\n-            tq.consume(\"]\");\n \n-        if (value != null)\n-            elements.addAll(root.getElementsWithAttributeValue(key, value));\n-        else {\n-            elements.addAll(root.getElementsWithAttribute(key));\n+        if (tq.matchChomp(\"]\")) {\n+            elements.addAll(root.getElementsByAttribute(key));\n+        } else {\n+            if (tq.matchChomp(\"=\"))\n+                elements.addAll(root.getElementsByAttributeValue(key, tq.chompTo(\"]\")));\n+\n+            else if (tq.matchChomp(\"!=\"))\n+                elements.addAll(root.getElementsByAttributeValueNot(key, tq.chompTo(\"]\")));\n+\n+            else if (tq.matchChomp(\"^=\"))\n+                elements.addAll(root.getElementsByAttributeValueStarting(key, tq.chompTo(\"]\")));\n+\n+            else if (tq.matchChomp(\"$=\"))\n+                elements.addAll(root.getElementsByAttributeValueEnding(key, tq.chompTo(\"]\")));\n+\n+            else if (tq.matchChomp(\"*=\"))\n+                elements.addAll(root.getElementsByAttributeValueContaining(key, tq.chompTo(\"]\")));\n         }\n     }\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n     @Test public void testGetElementsWithClass() {\n         Document doc = Jsoup.parse(\"<div class='mellow yellow'><span class=mellow>Hello <b class='yellow'>Yellow!</b></span><p>Empty</p></div>\");\n \n-        List<Element> els = doc.getElementsWithClass(\"mellow\");\n+        List<Element> els = doc.getElementsByClass(\"mellow\");\n         assertEquals(2, els.size());\n         assertEquals(\"div\", els.get(0).tagName());\n         assertEquals(\"span\", els.get(1).tagName());\n \n-        List<Element> els2 = doc.getElementsWithClass(\"yellow\");\n+        List<Element> els2 = doc.getElementsByClass(\"yellow\");\n         assertEquals(2, els2.size());\n         assertEquals(\"div\", els2.get(0).tagName());\n         assertEquals(\"b\", els2.get(1).tagName());\n \n-        List<Element> none = doc.getElementsWithClass(\"solo\");\n+        List<Element> none = doc.getElementsByClass(\"solo\");\n         assertEquals(0, none.size());\n     }\n \n     @Test public void testGetElementsWithAttribute() {\n         Document doc = Jsoup.parse(\"<div style='bold'><p title=qux><p><b style></b></p></div>\");\n-        List<Element> els = doc.getElementsWithAttribute(\"style\");\n+        List<Element> els = doc.getElementsByAttribute(\"style\");\n         assertEquals(2, els.size());\n         assertEquals(\"div\", els.get(0).tagName());\n         assertEquals(\"b\", els.get(1).tagName());\n \n-        List<Element> none = doc.getElementsWithAttribute(\"class\");\n+        List<Element> none = doc.getElementsByAttribute(\"class\");\n         assertEquals(0, none.size());\n     }\n \n     @Test public void testGetElementsWithAttributeValue() {\n         Document doc = Jsoup.parse(\"<div style='bold'><p><p><b style></b></p></div>\");\n-        List<Element> els = doc.getElementsWithAttributeValue(\"style\", \"bold\");\n+        List<Element> els = doc.getElementsByAttributeValue(\"style\", \"bold\");\n         assertEquals(1, els.size());\n         assertEquals(\"div\", els.get(0).tagName());\n \n-        List<Element> none = doc.getElementsWithAttributeValue(\"style\", \"none\");\n+        List<Element> none = doc.getElementsByAttributeValue(\"style\", \"none\");\n         assertEquals(0, none.size());\n     }\n \n     @Test public void testClassDomMethods() {\n         Document doc = Jsoup.parse(\"<div><span class='mellow yellow'>Hello <b>Yellow</b></span></div>\");\n-        List<Element> els = doc.getElementsWithAttribute(\"class\");\n+        List<Element> els = doc.getElementsByAttribute(\"class\");\n         Element span = els.get(0);\n         assertEquals(\"mellow yellow\", span.className());\n         assertTrue(span.hasClass(\"mellow\"));\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n     }\n \n     @Test public void testByAttribute() {\n-        String h = \"<div title=foo /><div title=bar /><div style=qux />\";\n+        String h = \"<div Title=Foo /><div Title=Bar /><div Style=Qux /><div title=Bam /><div title=SLAM /><div />\";\n         Document doc = Jsoup.parse(h);\n+\n         Elements withTitle = doc.select(\"[title]\");\n+        assertEquals(4, withTitle.size());\n+\n         Elements foo = doc.select(\"[title=foo]\");\n+        assertEquals(1, foo.size());\n \n-        assertEquals(2, withTitle.size());\n-        assertEquals(1, foo.size());\n+        Elements not = doc.select(\"div[title!=bar]\");\n+        assertEquals(5, not.size());\n+        assertEquals(\"Foo\", not.first().attr(\"title\"));\n+\n+        Elements starts = doc.select(\"[title^=ba]\");\n+        assertEquals(2, starts.size());\n+        assertEquals(\"Bar\", starts.first().attr(\"title\"));\n+        assertEquals(\"Bam\", starts.last().attr(\"title\"));\n+\n+        Elements ends = doc.select(\"[title$=am]\");\n+        assertEquals(2, ends.size());\n+        assertEquals(\"Bam\", ends.first().attr(\"title\"));\n+        assertEquals(\"SLAM\", ends.last().attr(\"title\"));\n+\n+        Elements contains = doc.select(\"[title*=a]\");\n+        assertEquals(3, contains.size());\n+        assertEquals(\"Bar\", contains.first().attr(\"title\"));\n+        assertEquals(\"SLAM\", contains.last().attr(\"title\"));\n     }\n \n     @Test public void testAllElements() {\n     }\n \n     @Test public void caseInsensitive() {\n-        String h = \"<div title=bar><div>\";\n+        String h = \"<dIv tItle=bAr><div>\"; // mixed case so a simple toLowerCase() on value doesn't catch\n         Document doc = Jsoup.parse(h);\n \n         assertEquals(2, doc.select(\"DIV\").size());", "timestamp": 1309605103, "metainfo": ""}