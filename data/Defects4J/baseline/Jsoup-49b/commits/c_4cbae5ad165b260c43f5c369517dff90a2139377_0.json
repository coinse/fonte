{"sha": "4cbae5ad165b260c43f5c369517dff90a2139377", "log": "Updated TokenStream to deal with < or > within attributes.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n         return null;\n     }\n \n+    public Attributes getAttributes() {\n+        return attributes;\n+        // TODO: probably not have this accessor\n+    }\n+\n     public String toString() {\n         return getNodeName();\n     }\n--- a/src/main/java/org/jsoup/parser/TokenStream.java\n+++ b/src/main/java/org/jsoup/parser/TokenStream.java\n  @author Jonathan Hedley, jonathan@hedley.net */\n class TokenStream implements Iterator<Token> {\n     private static final int BUFFER_SIZE = 5 * 1024;\n-    private static final char LT = \"<\".charAt(0);\n-    private static final char GT = \">\".charAt(0);\n-    private static final char NL = \"\\n\".charAt(0);\n+    private static final char LT = '<';\n+    private static final char GT = '>';\n+    private static final char NL = '\\n';\n+    private static final char SQ = '\\'';\n+    private static final char DQ = '\"';\n \n     private final Reader in;\n     private final CharBuffer buffer;\n     }\n \n     private String accumulate() {\n+        boolean inTag = false;\n+        boolean inQuotedAttribute = false;\n+        Character quote = null;\n+\n         while (hasNext()) {\n             buffer.mark();\n             char c = buffer.get();\n \n-            if (c == LT && accum.length() > 0) {\n+            if (c == LT && accum.length() > 0 && !inQuotedAttribute) {\n+                // detected start of new tag:\n                 // leave on stack for next accumulate\n                 buffer.reset();\n-                return captureAccum();\n+                break;\n             } else {\n                 accum.append(c);\n                 pos.incOffset();\n                 pos.incColNum();\n \n-                if (c == GT) {\n-                    return captureAccum();\n-                } else if (c == NL) {\n-                    pos.incLineNum();\n+                if (!inQuotedAttribute) {\n+                    if (c == LT) {\n+                        inTag = true;\n+                    }\n+                    else if (c == GT) { // >, end of tag\n+                        break;\n+                    } else if (c == NL) {\n+                        pos.incLineNum();\n+                    } else if (inTag && (c == SQ || c == DQ)) {\n+                        inQuotedAttribute = true;\n+                        quote = c;\n+                    }\n+                } else if (inQuotedAttribute && c == quote) {\n+                    // close quote. note that if there is no closing quote, this will gobble up a lot. might be an idea\n+                    // to forward search and backtrack (to drop opening quote) if not found in x chars, (or y <|>)\n+                    // (the quoted attrib allows <p title=\"x > y\">Hello</p>. Issue here is with <p title=\"x > y>Hello</p>\n+                    inQuotedAttribute = false;\n                 }\n             }\n         }\n--- a/src/test/java/org/jsoup/parser/ParserTest.java\n+++ b/src/test/java/org/jsoup/parser/ParserTest.java\n package org.jsoup.parser;\n \n import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n         TokenStream tokenStream = TokenStream.create(\"<html><head><title>First!</title></head><body><p>First post! <img src=\\\"foo.png\\\" /></p></body></html>\");\n         Parser parser = new Parser(tokenStream);\n         Document doc = parser.parse();\n+        // need a better way to verify these:\n+        Element p = doc.getChildren().get(1).getChildren().get(0);\n+        assertEquals(\"p\", p.getTagName());\n+        assertEquals(\"foo.png\", p.getChildren().get(0).getAttributes().get(\"src\"));\n+    }\n+\n+    @Test public void testParsesRoughAttributes() {\n+        TokenStream tokenStream = TokenStream.create(\"<html><head><title>First!</title></head><body><p class=\\\"foo > bar\\\">First post! <img src=\\\"foo.png\\\" /></p></body></html>\");\n+        Parser parser = new Parser(tokenStream);\n+        Document doc = parser.parse();\n+        // need a better way to verify these:\n+        Element p = doc.getChildren().get(1).getChildren().get(0);\n+        assertEquals(\"p\", p.getTagName());\n+        assertEquals(\"foo > bar\", p.getAttributes().get(\"class\"));\n+        assertEquals(\"foo.png\", p.getChildren().get(0).getAttributes().get(\"src\"));\n     }\n }\n--- a/src/test/java/org/jsoup/parser/TokenStreamTest.java\n+++ b/src/test/java/org/jsoup/parser/TokenStreamTest.java\n public class TokenStreamTest {\n     @Test\n     public void createTokenStreamFromString() {\n-        List<Token> tokens = TokenStream.create(\"<html><body><p>Hello world!</p></body></html>\").asList();\n+        List<Token> tokens = TokenStream.create(\"<html><body title='x > y'><p>Hello world!</p></body></html>\").asList();\n         assertEquals(\"Correct num tokens\", 7, tokens.size());\n     }\n ", "timestamp": 1309605100, "metainfo": ""}