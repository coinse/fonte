{"sha": "8c43a813f98dcd5362c33aff2378ef1cb12252b3", "log": "Performance improvement on parsing larger HTML pages.", "commit": "\n--- a/src/main/java/org/jsoup/helper/StringUtil.java\n+++ b/src/main/java/org/jsoup/helper/StringUtil.java\n \n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.Iterator;\n \n         return false;\n     }\n \n+    public static boolean inSorted(String needle, String[] haystack) {\n+        return Arrays.binarySearch(haystack, needle) >= 0;\n+    }\n+\n     /**\n      * Create a new absolute URL, from a provided existing absolute URL and a relative URL component.\n      * @param base the existing absolulte base URL\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n \n         // was - Node#addChildren(child). short-circuits an array create and a loop.\n         reparentChild(child);\n+        ensureChildNodes();\n         childNodes.add(child);\n         child.setSiblingIndex(childNodes.size() - 1);\n         return this;\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n public abstract class Node implements Cloneable {\n+    private static final List<Node> EMPTY_NODES = Collections.emptyList();\n     Node parentNode;\n     List<Node> childNodes;\n     Attributes attributes;\n         Validate.notNull(baseUri);\n         Validate.notNull(attributes);\n         \n-        childNodes = new ArrayList<Node>(4);\n+        childNodes = EMPTY_NODES;\n         this.baseUri = baseUri.trim();\n         this.attributes = attributes;\n     }\n      * Default constructor. Doesn't setup base uri, children, or attributes; use with caution.\n      */\n     protected Node() {\n-        childNodes = Collections.emptyList();\n+        childNodes = EMPTY_NODES;\n         attributes = null;\n     }\n \n         //most used. short circuit addChildren(int), which hits reindex children and array copy\n         for (Node child: children) {\n             reparentChild(child);\n+            ensureChildNodes();\n             childNodes.add(child);\n             child.setSiblingIndex(childNodes.size()-1);\n         }\n         for (int i = children.length - 1; i >= 0; i--) {\n             Node in = children[i];\n             reparentChild(in);\n+            ensureChildNodes();\n             childNodes.add(index, in);\n         }\n         reindexChildren(index);\n+    }\n+\n+    protected void ensureChildNodes() {\n+        if (childNodes == EMPTY_NODES) {\n+            childNodes = new ArrayList<Node>(4);\n+        }\n     }\n \n     protected void reparentChild(Node child) {\n--- a/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n+++ b/src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java\n                 case StartTag:\n                     Token.StartTag startTag = t.asStartTag();\n                     String name = startTag.name();\n-                    if (name.equals(\"html\")) {\n+                    if (name.equals(\"a\")) {\n+                        if (tb.getActiveFormattingElement(\"a\") != null) {\n+                            tb.error(this);\n+                            tb.processEndTag(\"a\");\n+\n+                            // still on stack?\n+                            Element remainingA = tb.getFromStack(\"a\");\n+                            if (remainingA != null) {\n+                                tb.removeFromActiveFormattingElements(remainingA);\n+                                tb.removeFromStack(remainingA);\n+                            }\n+                        }\n+                        tb.reconstructFormattingElements();\n+                        Element a = tb.insert(startTag);\n+                        tb.pushActiveFormattingElements(a);\n+                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n+                        tb.reconstructFormattingElements();\n+                        tb.insertEmpty(startTag);\n+                        tb.framesetOk(false);\n+                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n+                        if (tb.inButtonScope(\"p\")) {\n+                            tb.processEndTag(\"p\");\n+                        }\n+                        tb.insert(startTag);\n+                    } else if (name.equals(\"span\")) {\n+                        // same as final else, but short circuits lots of checks\n+                        tb.reconstructFormattingElements();\n+                        tb.insert(startTag);\n+                    } else if (name.equals(\"li\")) {\n+                        tb.framesetOk(false);\n+                        ArrayList<Element> stack = tb.getStack();\n+                        for (int i = stack.size() - 1; i > 0; i--) {\n+                            Element el = stack.get(i);\n+                            if (el.nodeName().equals(\"li\")) {\n+                                tb.processEndTag(\"li\");\n+                                break;\n+                            }\n+                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n+                                break;\n+                        }\n+                        if (tb.inButtonScope(\"p\")) {\n+                            tb.processEndTag(\"p\");\n+                        }\n+                        tb.insert(startTag);\n+                    } else if (name.equals(\"html\")) {\n                         tb.error(this);\n                         // merge attributes onto real html\n                         Element html = tb.getStack().get(0);\n                             if (!html.hasAttr(attribute.getKey()))\n                                 html.attributes().put(attribute);\n                         }\n-                    } else if (StringUtil.in(name, Constants.InBodyStartToHead)) {\n+                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                         return tb.process(t, InHead);\n                     } else if (name.equals(\"body\")) {\n                         tb.error(this);\n                             tb.insert(startTag);\n                             tb.transition(InFrameset);\n                         }\n-                    } else if (StringUtil.in(name, Constants.InBodyStartPClosers)) {\n+                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.processEndTag(\"p\");\n                         }\n+                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n+                            tb.error(this);\n+                            tb.pop();\n+                        }\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(name, Constants.Headings)) {\n-                        if (tb.inButtonScope(\"p\")) {\n-                            tb.processEndTag(\"p\");\n-                        }\n-                        if (StringUtil.in(tb.currentElement().nodeName(), Constants.Headings)) {\n-                            tb.error(this);\n-                            tb.pop();\n-                        }\n-                        tb.insert(startTag);\n-                    } else if (StringUtil.in(name, Constants.InBodyStartPreListing)) {\n+                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.processEndTag(\"p\");\n                         }\n                             tb.processEndTag(\"p\");\n                         }\n                         tb.insertForm(startTag, true);\n-                    } else if (name.equals(\"li\")) {\n+                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                         tb.framesetOk(false);\n                         ArrayList<Element> stack = tb.getStack();\n                         for (int i = stack.size() - 1; i > 0; i--) {\n                             Element el = stack.get(i);\n-                            if (el.nodeName().equals(\"li\")) {\n-                                tb.processEndTag(\"li\");\n-                                break;\n-                            }\n-                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n-                                break;\n-                        }\n-                        if (tb.inButtonScope(\"p\")) {\n-                            tb.processEndTag(\"p\");\n-                        }\n-                        tb.insert(startTag);\n-                    } else if (StringUtil.in(name, Constants.DdDt)) {\n-                        tb.framesetOk(false);\n-                        ArrayList<Element> stack = tb.getStack();\n-                        for (int i = stack.size() - 1; i > 0; i--) {\n-                            Element el = stack.get(i);\n-                            if (StringUtil.in(el.nodeName(), Constants.DdDt)) {\n+                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                 tb.processEndTag(el.nodeName());\n                                 break;\n                             }\n-                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n+                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                 break;\n                         }\n                         if (tb.inButtonScope(\"p\")) {\n                             tb.insert(startTag);\n                             tb.framesetOk(false);\n                         }\n-                    } else if (name.equals(\"a\")) {\n-                        if (tb.getActiveFormattingElement(\"a\") != null) {\n-                            tb.error(this);\n-                            tb.processEndTag(\"a\");\n-\n-                            // still on stack?\n-                            Element remainingA = tb.getFromStack(\"a\");\n-                            if (remainingA != null) {\n-                                tb.removeFromActiveFormattingElements(remainingA);\n-                                tb.removeFromStack(remainingA);\n-                            }\n-                        }\n-                        tb.reconstructFormattingElements();\n-                        Element a = tb.insert(startTag);\n-                        tb.pushActiveFormattingElements(a);\n-                    } else if (StringUtil.in(name, Constants.Formatters)) {\n+                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                         tb.reconstructFormattingElements();\n                         Element el = tb.insert(startTag);\n                         tb.pushActiveFormattingElements(el);\n                         }\n                         Element el = tb.insert(startTag);\n                         tb.pushActiveFormattingElements(el);\n-                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n+                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                         tb.reconstructFormattingElements();\n                         tb.insert(startTag);\n                         tb.insertMarkerToFormattingElements();\n                         tb.insert(startTag);\n                         tb.framesetOk(false);\n                         tb.transition(InTable);\n-                    } else if (StringUtil.in(name, Constants.InBodyStartEmptyFormatters)) {\n-                        tb.reconstructFormattingElements();\n-                        tb.insertEmpty(startTag);\n-                        tb.framesetOk(false);\n                     } else if (name.equals(\"input\")) {\n                         tb.reconstructFormattingElements();\n                         Element el = tb.insertEmpty(startTag);\n                         if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                             tb.framesetOk(false);\n-                    } else if (StringUtil.in(name, Constants.InBodyStartMedia)) {\n+                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                         tb.insertEmpty(startTag);\n                     } else if (name.equals(\"hr\")) {\n                         if (tb.inButtonScope(\"p\")) {\n                         // input\n                         Attributes inputAttribs = new Attributes();\n                         for (Attribute attr : startTag.attributes) {\n-                            if (!StringUtil.in(attr.getKey(), Constants.InBodyStartInputAttribs))\n+                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                 inputAttribs.put(attr);\n                         }\n                         inputAttribs.put(\"name\", \"isindex\");\n                             tb.transition(InSelectInTable);\n                         else\n                             tb.transition(InSelect);\n-                    } else if (StringUtil.in(name, Constants.InBodyStartOptions)) {\n+                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                         if (tb.currentElement().nodeName().equals(\"option\"))\n                             tb.processEndTag(\"option\");\n                         tb.reconstructFormattingElements();\n                         tb.insert(startTag);\n-                    } else if (StringUtil.in(name, Constants.InBodyStartRuby)) {\n+                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                         if (tb.inScope(\"ruby\")) {\n                             tb.generateImpliedEndTags();\n                             if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                         // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                         tb.insert(startTag);\n                         tb.tokeniser.acknowledgeSelfClosingFlag();\n-                    } else if (StringUtil.in(name, Constants.InBodyStartDrop)) {\n+                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                         tb.error(this);\n                         return false;\n                     } else {\n                 case EndTag:\n                     Token.EndTag endTag = t.asEndTag();\n                     name = endTag.name();\n-                    if (name.equals(\"body\")) {\n-                        if (!tb.inScope(\"body\")) {\n-                            tb.error(this);\n-                            return false;\n-                        } else {\n-                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n-                            tb.transition(AfterBody);\n-                        }\n-                    } else if (name.equals(\"html\")) {\n-                        boolean notIgnored = tb.processEndTag(\"body\");\n-                        if (notIgnored)\n-                            return tb.process(endTag);\n-                    } else if (StringUtil.in(name, Constants.InBodyEndClosers)) {\n-                        if (!tb.inScope(name)) {\n-                            // nothing to close\n-                            tb.error(this);\n-                            return false;\n-                        } else {\n-                            tb.generateImpliedEndTags();\n-                            if (!tb.currentElement().nodeName().equals(name))\n-                                tb.error(this);\n-                            tb.popStackToClose(name);\n-                        }\n-                    } else if (name.equals(\"form\")) {\n-                        Element currentForm = tb.getFormElement();\n-                        tb.setFormElement(null);\n-                        if (currentForm == null || !tb.inScope(name)) {\n-                            tb.error(this);\n-                            return false;\n-                        } else {\n-                            tb.generateImpliedEndTags();\n-                            if (!tb.currentElement().nodeName().equals(name))\n-                                tb.error(this);\n-                            // remove currentForm from stack. will shift anything under up.\n-                            tb.removeFromStack(currentForm);\n-                        }\n-                    } else if (name.equals(\"p\")) {\n-                        if (!tb.inButtonScope(name)) {\n-                            tb.error(this);\n-                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n-                            return tb.process(endTag);\n-                        } else {\n-                            tb.generateImpliedEndTags(name);\n-                            if (!tb.currentElement().nodeName().equals(name))\n-                                tb.error(this);\n-                            tb.popStackToClose(name);\n-                        }\n-                    } else if (name.equals(\"li\")) {\n-                        if (!tb.inListItemScope(name)) {\n-                            tb.error(this);\n-                            return false;\n-                        } else {\n-                            tb.generateImpliedEndTags(name);\n-                            if (!tb.currentElement().nodeName().equals(name))\n-                                tb.error(this);\n-                            tb.popStackToClose(name);\n-                        }\n-                    } else if (StringUtil.in(name, Constants.DdDt)) {\n-                        if (!tb.inScope(name)) {\n-                            tb.error(this);\n-                            return false;\n-                        } else {\n-                            tb.generateImpliedEndTags(name);\n-                            if (!tb.currentElement().nodeName().equals(name))\n-                                tb.error(this);\n-                            tb.popStackToClose(name);\n-                        }\n-                    } else if (StringUtil.in(name, Constants.Headings)) {\n-                        if (!tb.inScope(Constants.Headings)) {\n-                            tb.error(this);\n-                            return false;\n-                        } else {\n-                            tb.generateImpliedEndTags(name);\n-                            if (!tb.currentElement().nodeName().equals(name))\n-                                tb.error(this);\n-                            tb.popStackToClose(Constants.Headings);\n-                        }\n-                    } else if (name.equals(\"sarcasm\")) {\n-                        // *sigh*\n-                        return anyOtherEndTag(t, tb);\n-                    } else if (StringUtil.in(name, Constants.InBodyEndAdoptionFormatters)) {\n+                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                         // Adoption Agency Algorithm.\n                         for (int i = 0; i < 8; i++) {\n                             Element formatEl = tb.getActiveFormattingElement(name);\n                                 lastNode = node;\n                             }\n \n-                            if (StringUtil.in(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n+                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                 if (lastNode.parent() != null)\n                                     lastNode.remove();\n                                 tb.insertInFosterParent(lastNode);\n                             tb.removeFromStack(formatEl);\n                             tb.insertOnStackAfter(furthestBlock, adopter);\n                         }\n-                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n+                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n+                        if (!tb.inScope(name)) {\n+                            // nothing to close\n+                            tb.error(this);\n+                            return false;\n+                        } else {\n+                            tb.generateImpliedEndTags();\n+                            if (!tb.currentElement().nodeName().equals(name))\n+                                tb.error(this);\n+                            tb.popStackToClose(name);\n+                        }\n+                    } else if (name.equals(\"span\")) {\n+                        // same as final fall through, but saves short circuit\n+                        return anyOtherEndTag(t, tb);\n+                    } else if (name.equals(\"li\")) {\n+                        if (!tb.inListItemScope(name)) {\n+                            tb.error(this);\n+                            return false;\n+                        } else {\n+                            tb.generateImpliedEndTags(name);\n+                            if (!tb.currentElement().nodeName().equals(name))\n+                                tb.error(this);\n+                            tb.popStackToClose(name);\n+                        }\n+                    } else if (name.equals(\"body\")) {\n+                        if (!tb.inScope(\"body\")) {\n+                            tb.error(this);\n+                            return false;\n+                        } else {\n+                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n+                            tb.transition(AfterBody);\n+                        }\n+                    } else if (name.equals(\"html\")) {\n+                        boolean notIgnored = tb.processEndTag(\"body\");\n+                        if (notIgnored)\n+                            return tb.process(endTag);\n+                    } else if (name.equals(\"form\")) {\n+                        Element currentForm = tb.getFormElement();\n+                        tb.setFormElement(null);\n+                        if (currentForm == null || !tb.inScope(name)) {\n+                            tb.error(this);\n+                            return false;\n+                        } else {\n+                            tb.generateImpliedEndTags();\n+                            if (!tb.currentElement().nodeName().equals(name))\n+                                tb.error(this);\n+                            // remove currentForm from stack. will shift anything under up.\n+                            tb.removeFromStack(currentForm);\n+                        }\n+                    } else if (name.equals(\"p\")) {\n+                        if (!tb.inButtonScope(name)) {\n+                            tb.error(this);\n+                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n+                            return tb.process(endTag);\n+                        } else {\n+                            tb.generateImpliedEndTags(name);\n+                            if (!tb.currentElement().nodeName().equals(name))\n+                                tb.error(this);\n+                            tb.popStackToClose(name);\n+                        }\n+                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n+                        if (!tb.inScope(name)) {\n+                            tb.error(this);\n+                            return false;\n+                        } else {\n+                            tb.generateImpliedEndTags(name);\n+                            if (!tb.currentElement().nodeName().equals(name))\n+                                tb.error(this);\n+                            tb.popStackToClose(name);\n+                        }\n+                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n+                        if (!tb.inScope(Constants.Headings)) {\n+                            tb.error(this);\n+                            return false;\n+                        } else {\n+                            tb.generateImpliedEndTags(name);\n+                            if (!tb.currentElement().nodeName().equals(name))\n+                                tb.error(this);\n+                            tb.popStackToClose(Constants.Headings);\n+                        }\n+                    } else if (name.equals(\"sarcasm\")) {\n+                        // *sigh*\n+                        return anyOtherEndTag(t, tb);\n+                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                         if (!tb.inScope(\"name\")) {\n                             if (!tb.inScope(name)) {\n                                 tb.error(this);", "timestamp": 1438475520, "metainfo": ""}