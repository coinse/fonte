{"sha": "694efa8bac3d66717efe7e202e47347355e07c0b", "log": "Tweaked Element.outerHtml() method to not generate initial newline on first output element.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n     }\n \n     void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {\n-        if (out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock())))\n+        if (accum.length() > 0 && out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock())))\n             indent(accum, depth, out);\n         accum\n                 .append(\"<\")\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n \n         // check auto-detect from meta\n         assertEquals(\"GB2312\", doc.outputSettings().charset().displayName());\n-        assertEquals(\"\\n<title>\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053      </title>\", doc.select(\"title\").outerHtml());\n+        assertEquals(\"<title>\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053      </title>\", doc.select(\"title\").outerHtml());\n \n         doc.outputSettings().charset(\"ascii\");\n-        assertEquals(\"\\n<title>&#30334;&#24230;&#19968;&#19979;&#65292;&#20320;&#23601;&#30693;&#36947;      </title>\",\n+        assertEquals(\"<title>&#30334;&#24230;&#19968;&#19979;&#65292;&#20320;&#23601;&#30693;&#36947;      </title>\",\n             doc.select(\"title\").outerHtml());\n     }\n \n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n     @Test public void testEmptyElementFormatHtml() {\n         // don't put newlines into empty blocks\n         Document doc = Jsoup.parse(\"<section><div></div></section>\");\n-        assertEquals(\"\\n<section>\\n <div></div>\\n</section>\", doc.select(\"section\").first().outerHtml());\n+        assertEquals(\"<section>\\n <div></div>\\n</section>\", doc.select(\"section\").first().outerHtml());\n+    }\n+\n+    @Test public void testContainerOutput() {\n+        Document doc = Jsoup.parse(\"<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>\");\n+        assertEquals(\"<title>Hello there</title>\", doc.select(\"title\").first().outerHtml());\n+        assertEquals(\"<div>\\n <p>Hello</p>\\n <p>there</p>\\n</div>\", doc.select(\"div\").first().outerHtml());\n+        assertEquals(\"<div>\\n <p>Hello</p>\\n <p>there</p>\\n</div> \\n<div>\\n Another\\n</div>\", doc.select(\"body\").first().html());\n     }\n \n     @Test public void testSetText() {\n     @Test public void parentlessToString() {\n         Document doc = Jsoup.parse(\"<img src='foo'>\");\n         Element img = doc.select(\"img\").first();\n-        assertEquals(\"\\n<img src=\\\"foo\\\" />\", img.toString());\n+        assertEquals(\"<img src=\\\"foo\\\" />\", img.toString());\n \n         img.remove(); // lost its parent\n         assertEquals(\"<img src=\\\"foo\\\" />\", img.toString());\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         els.val(\"three\");\n         assertEquals(\"three\", els.first().val());\n         assertEquals(\"three\", els.last().val());\n-        assertEquals(\"\\n<textarea>three</textarea>\", els.last().outerHtml());\n+        assertEquals(\"<textarea>three</textarea>\", els.last().outerHtml());\n     }\n     \n     @Test public void before() {", "timestamp": 1309605127, "metainfo": ""}