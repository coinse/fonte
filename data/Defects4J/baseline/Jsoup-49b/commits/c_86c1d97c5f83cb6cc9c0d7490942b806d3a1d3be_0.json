{"sha": "86c1d97c5f83cb6cc9c0d7490942b806d3a1d3be", "log": "Selector: added * (all elements) and parent > child.", "commit": "\n--- a/src/main/java/org/jsoup/select/Evaluator.java\n+++ b/src/main/java/org/jsoup/select/Evaluator.java\n         }\n     }\n \n+    public static class AllElements extends Evaluator {\n+        boolean matches(Element element) {\n+            return true;\n+        }\n+    }\n+\n \n }\n--- a/src/main/java/org/jsoup/select/Selector.java\n+++ b/src/main/java/org/jsoup/select/Selector.java\n import org.jsoup.nodes.Element;\n import org.jsoup.parser.TokenQueue;\n \n+import java.util.Collection;\n import java.util.LinkedHashSet;\n import java.util.List;\n \n             byTag();\n         } else if (tq.matchChomp(\"[\")) {\n             byAttribute();\n+        } else if (tq.matchChomp(\"*\")) {\n+            allElements();\n         } else { // unhandled\n             throw new SelectorParseException(\"Could not parse query \" + query);\n         }\n                     elements.addAll(select(subQuery, root));\n                 }\n                 return new Elements(elements);\n+            } else if (tq.matchChomp(\">\")) { // parent > child\n+                Elements candidateChildren = new Elements(select(tq.remainder(), elements));\n+                return filterForChildren(elements, candidateChildren);\n             } else { // ancestor descendant (AND, really)\n                 return new Elements(select(tq.remainder(), elements));\n             }\n         }\n     }\n \n+    private void allElements() {\n+        elements.addAll(Collector.collect(new Evaluator.AllElements(), root));\n+    }\n+\n     private void groupOr() {\n         // no-op; just append uniques\n+    }\n+\n+    private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidateChildren) {\n+        Elements children = new Elements();\n+        CHILDREN: for (Element c : candidateChildren) {\n+            for (Element p : parents) {\n+                if (c.parent().equals(p)) {\n+                    children.add(c);\n+                    continue CHILDREN;\n+                }\n+            }\n+        }\n+        return children;\n     }\n \n     public static class SelectorParseException extends IllegalStateException {\n--- a/src/test/java/org/jsoup/select/SelectorTest.java\n+++ b/src/test/java/org/jsoup/select/SelectorTest.java\n         assertEquals(1, foo.size());\n     }\n \n+    @Test public void testAllElements() {\n+        String h = \"<div><p>Hello</p><p><b>there</b></p></div>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements allDoc = doc.select(\"*\");\n+        Elements allDiv = doc.select(\"div *\");\n+        assertEquals(8, allDoc.size());\n+        assertEquals(4, allDiv.size());\n+        assertEquals(\"div\", allDiv.get(0).tagName());\n+    }\n+\n     @Test public void testGroupOr() {\n         String h = \"<div title=foo /><div title=bar /><div /><p></p><img /><span title=qux>\";\n         Document doc = Jsoup.parse(h);\n         assertEquals(1, els.size());\n         assertEquals(\"Hello\", els.get(0).text());\n     }\n+\n+    @Test public void parentChildElement() {\n+        String h = \"<div id=1><div id=2><div id = 3></div></div></div><div id=4></div>\";\n+        Document doc = Jsoup.parse(h);\n+\n+        Elements divs = doc.select(\"div > div\");\n+        assertEquals(2, divs.size());\n+        assertEquals(\"2\", divs.get(0).id()); // 2 is child of 1\n+        assertEquals(\"3\", divs.get(1).id()); // 3 is child of 2\n+\n+        Elements div2 = doc.select(\"div#1 > div\");\n+        assertEquals(1, div2.size());\n+        assertEquals(\"2\", div2.get(0).id());\n+    }\n+\n+    @Test public void parentChildStar() {\n+        String h = \"<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements divChilds = doc.select(\"div > *\");\n+        assertEquals(3, divChilds.size());\n+        assertEquals(\"p\", divChilds.get(0).tagName());\n+        assertEquals(\"p\", divChilds.get(1).tagName());\n+        assertEquals(\"span\", divChilds.get(2).tagName());\n+    }\n }", "timestamp": 1309605102, "metainfo": ""}