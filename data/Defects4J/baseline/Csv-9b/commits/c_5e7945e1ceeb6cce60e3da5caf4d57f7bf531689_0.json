{"sha": "5e7945e1ceeb6cce60e3da5caf4d57f7bf531689", "log": "Last of the Checkstyle fixes.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n      */\n     void validate() throws IllegalArgumentException {\n         if (delimiter == encapsulator) {\n-            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\"\n-                    + encapsulator + \"\\\")\");\n+            throw new IllegalArgumentException(\"The encapsulator character and the delimiter cannot be the same (\\\"\" +\n+                    encapsulator + \"\\\")\");\n         }\n \n         if (delimiter == escape) {\n-            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\"\n-                    + escape + \"\\\")\");\n+            throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same (\\\"\" +\n+                    escape + \"\\\")\");\n         }\n \n         if (delimiter == commentStart) {\n-            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\"\n-                    + commentStart + \"\\\")\");\n+            throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same (\\\"\" +\n+                    commentStart + \"\\\")\");\n         }\n \n         if (encapsulator != DISABLED && encapsulator == commentStart) {\n         }\n \n         if (escape != DISABLED && escape == commentStart) {\n-            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\"\n-                    + commentStart + \"\\\")\");\n+            throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same (\\\"\" +\n+                    commentStart + \"\\\")\");\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n                             return tkn;\n                         } else if (!isWhitespace(c)) {\n                             // error invalid char between token and next delimiter\n-                            throw new IOException(\"(line \" + getLineNumber()\n-                                    + \") invalid char between encapsulated token and delimiter\");\n+                            throw new IOException(\"(line \" + getLineNumber() +\n+                                    \") invalid char between encapsulated token and delimiter\");\n                         }\n                     }\n                 }\n             } else if (isEndOfFile(c)) {\n                 // error condition (end of file before end of token)\n-                throw new IOException(\"(startline \" + startLineNumber\n-                        + \") EOF reached before encapsulated token finished\");\n+                throw new IOException(\"(startline \" + startLineNumber +\n+                        \") EOF reached before encapsulated token finished\");\n             } else {\n                 // consume character\n                 tkn.content.append((char) c);\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n         } while (reusableToken.type == TOKEN);\n \n         if (!record.isEmpty()) {\n-            result = new CSVRecord(record.toArray(new String[record.size()]), headerMapping, sb == null ? null\n-                    : sb.toString());\n+            final String comment = sb == null ? null : sb.toString();\n+            result = new CSVRecord(record.toArray(new String[record.size()]), headerMapping, comment);\n         }\n         return result;\n     }", "timestamp": 1347423241, "metainfo": ""}