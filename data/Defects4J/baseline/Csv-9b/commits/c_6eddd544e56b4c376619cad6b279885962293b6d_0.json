{"sha": "6eddd544e56b4c376619cad6b279885962293b6d", "log": "Javadoc: @version.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n  * The format specification of a CSV file.\n  *\n  * This class is immutable.\n+ * \n+ * @version $Id: $\n  */\n public class CSVFormat implements Serializable {\n \n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n \n import java.io.IOException;\n \n+/**\n+ * \n+ * \n+ * @version $Id$\n+ */\n final class CSVLexer extends Lexer {\n \n     /** ctor needs to be public so can be called dynamically by PerformanceTest class */\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n  * <p>\n  * see <a href=\"package-summary.html\">package documentation</a> for more details\n  * </p>\n+ * \n+ * @version $Id: $\n  */\n public class CSVParser implements Iterable<CSVRecord> {\n \n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n \n /**\n  * Prints values in a CSV format.\n+ * \n+ * @version $Id: $\n  */\n public class CSVPrinter {\n \n--- a/src/main/java/org/apache/commons/csv/CSVRecord.java\n+++ b/src/main/java/org/apache/commons/csv/CSVRecord.java\n \n /**\n  * A CSV record\n+ * \n+ * @version $Id: $\n  */\n public class CSVRecord implements Serializable, Iterable<String> {\n \n--- a/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n+++ b/src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java\n  * <p>\n  * In particular the reader supports a look-ahead option, which allows you to see the next char returned by\n  * {@link #read()}.\n+ * \n+ * @version $Id: $\n  */\n final class ExtendedBufferedReader extends BufferedReader {\n \n--- a/src/main/java/org/apache/commons/csv/Lexer.java\n+++ b/src/main/java/org/apache/commons/csv/Lexer.java\n \n /**\n  * Abstract lexer class; contains common utility routines shared by lexers\n+ * \n+ * @version $Id$\n  */\n abstract class Lexer {\n \n--- a/src/main/java/org/apache/commons/csv/Quote.java\n+++ b/src/main/java/org/apache/commons/csv/Quote.java\n \n /**\n  * Defines quote behavior when printing.\n+ * \n+ * @version $Id$\n  */\n public enum Quote {\n \n--- a/src/main/java/org/apache/commons/csv/Token.java\n+++ b/src/main/java/org/apache/commons/csv/Token.java\n  * Internal token representation.\n  * <p/>\n  * It is used as contract between the lexer and the parser.\n+ * \n+ * @version $Id$\n  */\n final class Token {\n \n--- a/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n /**\n  * Parse tests using test files\n  *\n+ * @version $Id$\n  */\n @RunWith(Parameterized.class)\n public class CSVFileParserTest {\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n \n import org.junit.Test;\n \n+/**\n+ * \n+ * \n+ * @version $Id: $\n+ */\n public class CSVFormatTest {\n \n     @Test\n--- a/src/test/java/org/apache/commons/csv/CSVLexer1.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1.java\n \n import java.io.IOException;\n \n+/**\n+ * \n+ * \n+ * @version $Id$\n+ */\n class CSVLexer1 extends Lexer {\n \n     private final StringBuilder wsBuf = new StringBuilder();\n--- a/src/test/java/org/apache/commons/csv/CSVLexer1306663.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1306663.java\n \n import java.io.IOException;\n \n+/**\n+ * \n+ * \n+ * @version $Id$\n+ */\n class CSVLexer1306663 extends Lexer {\n \n     // ctor needs to be public so can be called dynamically by PerformanceTest class\n--- a/src/test/java/org/apache/commons/csv/CSVLexer1306667.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer1306667.java\n \n import java.io.IOException;\n \n+/**\n+ * \n+ * \n+ * @version $Id$\n+ */\n class CSVLexer1306667 extends Lexer {\n \n     // ctor needs to be public so can be called dynamically by PerformanceTest class\n--- a/src/test/java/org/apache/commons/csv/CSVLexer3.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexer3.java\n  * Unfortunately it is twice as slow.\n  * For reference purpose only.\n  *\n+ * @version $Id$\n  */\n class CSVLexer3 extends Lexer {\n \n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n \n import org.junit.Test;\n \n+/**\n+ * \n+ * \n+ * @version $Id$\n+ */\n public class CSVLexerTest {\n \n     private Lexer getLexer(final String input, final CSVFormat format) {\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n  * section. In case a test fails, you should follow a top-down approach for\n  * fixing a potential bug (its likely that the parser itself fails if the lexer\n  * has problems...).\n+ * \n+ * @version $Id: $\n  */\n public class CSVParserTest {\n \n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n \n import org.junit.Test;\n \n+/**\n+ * \n+ * \n+ * @version $Id: $\n+ */\n public class CSVPrinterTest {\n \n     public static String printable(final String s) {\n--- a/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n+++ b/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n \n import org.junit.Test;\n \n+/**\n+ * \n+ * \n+ * @version $Id: $\n+ */\n public class ExtendedBufferedReaderTest {\n \n     @Test\n--- a/src/test/java/org/apache/commons/csv/PerformanceTest.java\n+++ b/src/test/java/org/apache/commons/csv/PerformanceTest.java\n  *\n  * Requires test file to be downloaded separately.\n  *\n+ * @version $Id$\n  */\n @SuppressWarnings(\"boxing\")\n public class PerformanceTest {\n--- a/src/test/java/org/apache/commons/csv/Utils.java\n+++ b/src/test/java/org/apache/commons/csv/Utils.java\n \n /**\n  * Utility methods for test cases\n+ * \n+ * @version $Id$\n  */\n public class Utils {\n \n--- a/src/test/java/org/apache/commons/csv/perf/PerformanceTest.java\n+++ b/src/test/java/org/apache/commons/csv/perf/PerformanceTest.java\n  * Tests performance.\n  * \n  * To run this test, use: mvn test -Dtest=PeformanceTest\n+ * \n+ * @version $Id$\n  */\n public class PerformanceTest {\n ", "timestamp": 1350271552, "metainfo": ""}