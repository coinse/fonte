{"sha": "3362f9c9d8b1b36e16ba9528ed566f6a27f7ba5b", "log": "Static imports in the unit tests  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-import org.junit.Assert;\n import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n \n public class CSVFormatTest {\n \n         format.withEmptyLinesIgnored(false);\n         format.withUnicodeEscapesInterpreted(false);\n         \n-        Assert.assertEquals('!', format.getDelimiter());\n-        Assert.assertEquals('!', format.getEncapsulator());\n-        Assert.assertEquals('!', format.getCommentStart());\n-        Assert.assertEquals('!', format.getEscape());\n-        Assert.assertEquals(\"\\r\\n\", format.getLineSeparator());\n+        assertEquals('!', format.getDelimiter());\n+        assertEquals('!', format.getEncapsulator());\n+        assertEquals('!', format.getCommentStart());\n+        assertEquals('!', format.getEscape());\n+        assertEquals(\"\\r\\n\", format.getLineSeparator());\n         \n-        Assert.assertEquals(true, format.isLeadingSpacesIgnored());\n-        Assert.assertEquals(true, format.isTrailingSpacesIgnored());\n-        Assert.assertEquals(true, format.isEmptyLinesIgnored());\n-        Assert.assertEquals(true, format.isUnicodeEscapesInterpreted());\n+        assertEquals(true, format.isLeadingSpacesIgnored());\n+        assertEquals(true, format.isTrailingSpacesIgnored());\n+        assertEquals(true, format.isEmptyLinesIgnored());\n+        assertEquals(true, format.isUnicodeEscapesInterpreted());\n     }\n \n     @Test\n     public void testMutators() {\n         CSVFormat format = new CSVFormat('!', '!', '!', '!', true, true, true, true, \"\\r\\n\");\n         \n-        Assert.assertEquals('?', format.withDelimiter('?').getDelimiter());\n-        Assert.assertEquals('?', format.withEncapsulator('?').getEncapsulator());\n-        Assert.assertEquals('?', format.withCommentStart('?').getCommentStart());\n-        Assert.assertEquals(\"?\", format.withLineSeparator(\"?\").getLineSeparator());\n-        Assert.assertEquals('?', format.withEscape('?').getEscape());\n+        assertEquals('?', format.withDelimiter('?').getDelimiter());\n+        assertEquals('?', format.withEncapsulator('?').getEncapsulator());\n+        assertEquals('?', format.withCommentStart('?').getCommentStart());\n+        assertEquals(\"?\", format.withLineSeparator(\"?\").getLineSeparator());\n+        assertEquals('?', format.withEscape('?').getEscape());\n         \n-        Assert.assertEquals(false, format.withLeadingSpacesIgnored(false).isLeadingSpacesIgnored());\n-        Assert.assertEquals(false, format.withTrailingSpacesIgnored(false).isTrailingSpacesIgnored());\n-        Assert.assertEquals(false, format.withSurroundingSpacesIgnored(false).isLeadingSpacesIgnored());\n-        Assert.assertEquals(false, format.withSurroundingSpacesIgnored(false).isTrailingSpacesIgnored());\n-        Assert.assertEquals(false, format.withEmptyLinesIgnored(false).isEmptyLinesIgnored());\n-        Assert.assertEquals(false, format.withUnicodeEscapesInterpreted(false).isUnicodeEscapesInterpreted());\n+        assertEquals(false, format.withLeadingSpacesIgnored(false).isLeadingSpacesIgnored());\n+        assertEquals(false, format.withTrailingSpacesIgnored(false).isTrailingSpacesIgnored());\n+        assertEquals(false, format.withSurroundingSpacesIgnored(false).isLeadingSpacesIgnored());\n+        assertEquals(false, format.withSurroundingSpacesIgnored(false).isTrailingSpacesIgnored());\n+        assertEquals(false, format.withEmptyLinesIgnored(false).isEmptyLinesIgnored());\n+        assertEquals(false, format.withUnicodeEscapesInterpreted(false).isUnicodeEscapesInterpreted());\n     }\n \n     @Test\n     public void testFormat() {\n         CSVFormat format = CSVFormat.DEFAULT;\n         \n-        Assert.assertEquals(\"\", format.format());\n-        Assert.assertEquals(\"a,b,c\", format.format(\"a\", \"b\", \"c\"));\n-        Assert.assertEquals(\"\\\"x,y\\\",z\", format.format(\"x,y\", \"z\"));\n+        assertEquals(\"\", format.format());\n+        assertEquals(\"a,b,c\", format.format(\"a\", \"b\", \"c\"));\n+        assertEquals(\"\\\"x,y\\\",z\", format.format(\"x,y\", \"z\"));\n     }\n     \n     @Test\n         \n         try {\n             format.withDelimiter('\\n');\n-            Assert.fail();\n+            fail();\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n         \n         try {\n             format.withEscape('\\r');\n-            Assert.fail();\n+            fail();\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n         \n         try {\n             format.withEncapsulator('\\n');\n-            Assert.fail();\n+            fail();\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n         \n         try {\n             format.withCommentStart('\\r');\n-            Assert.fail();\n+            fail();\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n         \n         try {\n             format.withDelimiter('!').withEscape('!').validate();\n-            Assert.fail();\n+            fail();\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n         \n         try {\n             format.withDelimiter('!').withCommentStart('!').validate();\n-            Assert.fail();\n+            fail();\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n         \n         try {\n             format.withEncapsulator('!').withCommentStart('!').validate();\n-            Assert.fail();\n+            fail();\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n         \n         try {\n             format.withEscape('!').withCommentStart('!').validate();\n-            Assert.fail();\n+            fail();\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n         \n         try {\n             format.withEncapsulator('!').withDelimiter('!').validate();\n-            Assert.fail();\n+            fail();\n         } catch (IllegalArgumentException e) {\n             // expected\n         }\n         ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));\n         CSVFormat format = (CSVFormat) in.readObject();\n         \n-        Assert.assertNotNull(format);\n-        Assert.assertEquals(\"delimiter\", CSVFormat.DEFAULT.getDelimiter(), format.getDelimiter());\n-        Assert.assertEquals(\"encapsulator\", CSVFormat.DEFAULT.getEncapsulator(), format.getEncapsulator());\n-        Assert.assertEquals(\"comment start\", CSVFormat.DEFAULT.getCommentStart(), format.getCommentStart());\n-        Assert.assertEquals(\"line separator\", CSVFormat.DEFAULT.getLineSeparator(), format.getLineSeparator());\n-        Assert.assertEquals(\"escape\", CSVFormat.DEFAULT.getEscape(), format.getEscape());\n-        Assert.assertEquals(\"unicode escape\", CSVFormat.DEFAULT.isUnicodeEscapesInterpreted(), format.isUnicodeEscapesInterpreted());\n-        Assert.assertEquals(\"trim left\", CSVFormat.DEFAULT.isLeadingSpacesIgnored(), format.isLeadingSpacesIgnored());\n-        Assert.assertEquals(\"trim right\", CSVFormat.DEFAULT.isTrailingSpacesIgnored(), format.isTrailingSpacesIgnored());\n-        Assert.assertEquals(\"empty lines\", CSVFormat.DEFAULT.isEmptyLinesIgnored(), format.isEmptyLinesIgnored());\n+        assertNotNull(format);\n+        assertEquals(\"delimiter\", CSVFormat.DEFAULT.getDelimiter(), format.getDelimiter());\n+        assertEquals(\"encapsulator\", CSVFormat.DEFAULT.getEncapsulator(), format.getEncapsulator());\n+        assertEquals(\"comment start\", CSVFormat.DEFAULT.getCommentStart(), format.getCommentStart());\n+        assertEquals(\"line separator\", CSVFormat.DEFAULT.getLineSeparator(), format.getLineSeparator());\n+        assertEquals(\"escape\", CSVFormat.DEFAULT.getEscape(), format.getEscape());\n+        assertEquals(\"unicode escape\", CSVFormat.DEFAULT.isUnicodeEscapesInterpreted(), format.isUnicodeEscapesInterpreted());\n+        assertEquals(\"trim left\", CSVFormat.DEFAULT.isLeadingSpacesIgnored(), format.isLeadingSpacesIgnored());\n+        assertEquals(\"trim right\", CSVFormat.DEFAULT.isTrailingSpacesIgnored(), format.isTrailingSpacesIgnored());\n+        assertEquals(\"empty lines\", CSVFormat.DEFAULT.isEmptyLinesIgnored(), format.isEmptyLinesIgnored());\n     }\n } \n--- a/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVLexerTest.java\n \n package org.apache.commons.csv;\n \n-import static org.apache.commons.csv.CSVLexer.Token.Type.EOF;\n-import static org.apache.commons.csv.CSVLexer.Token.Type.EORECORD;\n-import static org.apache.commons.csv.CSVLexer.Token.Type.TOKEN;\n-\n import java.io.IOException;\n import java.io.StringReader;\n \n import org.apache.commons.csv.CSVLexer.Token;\n-import org.junit.Assert;\n import org.junit.Test;\n+\n+import static org.apache.commons.csv.CSVLexer.Token.Type.*;\n+import static org.junit.Assert.*;\n \n public class CSVLexerTest {\n     \n     }\n \n     private void assertTokenEquals(Token.Type expectedType, String expectedContent, Token token) {\n-        Assert.assertEquals(\"Token type\", expectedType, token.type);\n-        Assert.assertEquals(\"Token content\", expectedContent, token.content.toString());\n+        assertEquals(\"Token type\", expectedType, token.type);\n+        assertEquals(\"Token content\", expectedContent, token.content.toString());\n     }\n     \n     // Single line (without comment)\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n import java.util.List;\n import java.util.NoSuchElementException;\n \n-import org.junit.Assert;\n import org.junit.Ignore;\n import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n \n /**\n  * CSVParserTest\n     public void testGetLine() throws IOException {\n         CSVParser parser = new CSVParser(new StringReader(code));\n         for (String[] re : res) {\n-            Assert.assertTrue(Arrays.equals(re, parser.getRecord()));\n-        }\n-        \n-        Assert.assertTrue(parser.getRecord() == null);\n+            assertTrue(Arrays.equals(re, parser.getRecord()));\n+        }\n+        \n+        assertTrue(parser.getRecord() == null);\n     }\n \n     @Test\n     public void testGetRecords() throws IOException {\n         CSVParser parser = new CSVParser(new StringReader(code));\n         String[][] tmp = parser.getRecords();\n-        Assert.assertEquals(res.length, tmp.length);\n-        Assert.assertTrue(tmp.length > 0);\n+        assertEquals(res.length, tmp.length);\n+        assertTrue(tmp.length > 0);\n         for (int i = 0; i < res.length; i++) {\n-            Assert.assertTrue(Arrays.equals(res[i], tmp[i]));\n+            assertTrue(Arrays.equals(res[i], tmp[i]));\n         }\n     }\n \n         };\n         CSVParser parser = new CSVParser(code, CSVFormat.EXCEL);\n         String[][] tmp = parser.getRecords();\n-        Assert.assertEquals(res.length, tmp.length);\n-        Assert.assertTrue(tmp.length > 0);\n+        assertEquals(res.length, tmp.length);\n+        assertTrue(tmp.length > 0);\n         for (int i = 0; i < res.length; i++) {\n-            Assert.assertTrue(Arrays.equals(res[i], tmp[i]));\n+            assertTrue(Arrays.equals(res[i], tmp[i]));\n         }\n     }\n \n         };\n         CSVParser parser = new CSVParser(code, CSVFormat.EXCEL);\n         String[][] tmp = parser.getRecords();\n-        Assert.assertEquals(res.length, tmp.length);\n-        Assert.assertTrue(tmp.length > 0);\n+        assertEquals(res.length, tmp.length);\n+        assertTrue(tmp.length > 0);\n         for (int i = 0; i < res.length; i++) {\n-            Assert.assertTrue(Arrays.equals(res[i], tmp[i]));\n+            assertTrue(Arrays.equals(res[i], tmp[i]));\n         }\n     }\n \n         for (String code : codes) {\n             CSVParser parser = new CSVParser(code, CSVFormat.EXCEL);\n             String[][] tmp = parser.getRecords();\n-            Assert.assertEquals(res.length, tmp.length);\n-            Assert.assertTrue(tmp.length > 0);\n+            assertEquals(res.length, tmp.length);\n+            assertTrue(tmp.length > 0);\n             for (int i = 0; i < res.length; i++) {\n-                Assert.assertTrue(Arrays.equals(res[i], tmp[i]));\n+                assertTrue(Arrays.equals(res[i], tmp[i]));\n             }\n         }\n     }\n         for (String code : codes) {\n             CSVParser parser = new CSVParser(new StringReader(code));\n             String[][] tmp = parser.getRecords();\n-            Assert.assertEquals(res.length, tmp.length);\n-            Assert.assertTrue(tmp.length > 0);\n+            assertEquals(res.length, tmp.length);\n+            assertTrue(tmp.length > 0);\n             for (int i = 0; i < res.length; i++) {\n-                Assert.assertTrue(Arrays.equals(res[i], tmp[i]));\n+                assertTrue(Arrays.equals(res[i], tmp[i]));\n             }\n         }\n     }\n         for (String code : codes) {\n             CSVParser parser = new CSVParser(code, CSVFormat.EXCEL);\n             String[][] tmp = parser.getRecords();\n-            Assert.assertEquals(res.length, tmp.length);\n-            Assert.assertTrue(tmp.length > 0);\n+            assertEquals(res.length, tmp.length);\n+            assertTrue(tmp.length > 0);\n             for (int i = 0; i < res.length; i++) {\n-                Assert.assertTrue(Arrays.equals(res[i], tmp[i]));\n+                assertTrue(Arrays.equals(res[i], tmp[i]));\n             }\n         }\n     }\n         for (String code : codes) {\n             CSVParser parser = new CSVParser(new StringReader(code));\n             String[][] tmp = parser.getRecords();\n-            Assert.assertEquals(res.length, tmp.length);\n-            Assert.assertTrue(tmp.length > 0);\n+            assertEquals(res.length, tmp.length);\n+            assertTrue(tmp.length > 0);\n             for (int i = 0; i < res.length; i++) {\n-                Assert.assertTrue(Arrays.equals(res[i], tmp[i]));\n+                assertTrue(Arrays.equals(res[i], tmp[i]));\n             }\n         }\n     }\n         };\n         CSVParser parser = new CSVParser(new StringReader(code));\n         String[][] tmp = parser.getRecords();\n-        Assert.assertEquals(res.length, tmp.length);\n-        Assert.assertTrue(tmp.length > 0);\n+        assertEquals(res.length, tmp.length);\n+        assertTrue(tmp.length > 0);\n         for (int i = 0; i < res.length; i++) {\n-            Assert.assertTrue(Arrays.equals(res[i], tmp[i]));\n+            assertTrue(Arrays.equals(res[i], tmp[i]));\n         }\n     }\n \n \n         CSVParser parser = new CSVParser(code, format);\n         String[][] tmp = parser.getRecords();\n-        Assert.assertTrue(tmp.length > 0);\n+        assertTrue(tmp.length > 0);\n         for (int i = 0; i < res.length; i++) {\n-            Assert.assertTrue(Arrays.equals(res[i], tmp[i]));\n+            assertTrue(Arrays.equals(res[i], tmp[i]));\n         }\n     }\n \n \n         CSVParser parser = new CSVParser(code, format);\n         String[][] tmp = parser.getRecords();\n-        Assert.assertTrue(tmp.length > 0);\n+        assertTrue(tmp.length > 0);\n \n         if (!CSVPrinterTest.equals(res, tmp)) {\n-            Assert.assertTrue(false);\n+            assertTrue(false);\n         }\n     }\n \n         };\n \n         CSVFormat format = CSVFormat.DEFAULT;\n-        Assert.assertEquals(CSVFormat.DISABLED, format.getCommentStart());\n+        assertEquals(CSVFormat.DISABLED, format.getCommentStart());\n \n         CSVParser parser = new CSVParser(code, format);\n         String[][] tmp = parser.getRecords();\n-        Assert.assertTrue(tmp.length > 0);\n+        assertTrue(tmp.length > 0);\n \n         if (!CSVPrinterTest.equals(res, tmp)) {\n-            Assert.assertTrue(false);\n+            assertTrue(false);\n         }\n \n         String[][] res_comments = {\n         tmp = parser.getRecords();\n \n         if (!CSVPrinterTest.equals(res_comments, tmp)) {\n-            Assert.assertTrue(false);\n+            assertTrue(false);\n         }\n     }\n \n         CSVParser parser = new CSVParser(code, CSVFormat.DEFAULT.withUnicodeEscapesInterpreted(true));\n         final Iterator<String[]> iterator = parser.iterator();\n         String[] data = iterator.next();\n-        Assert.assertEquals(2, data.length);\n-        Assert.assertEquals(\"abc\", data[0]);\n-        Assert.assertEquals(\"public\", data[1]);\n-        Assert.assertFalse(\"Should not have any more records\", iterator.hasNext());\n+        assertEquals(2, data.length);\n+        assertEquals(\"abc\", data[0]);\n+        assertEquals(\"public\", data[1]);\n+        assertFalse(\"Should not have any more records\", iterator.hasNext());\n     }\n \n     @Test\n         CSVParser parser = new CSVParser(code, CSVFormat.MYSQL.withUnicodeEscapesInterpreted(true));\n         final Iterator<String[]> iterator = parser.iterator();\n         String[] data = iterator.next();\n-        Assert.assertEquals(2, data.length);\n-        Assert.assertEquals(\"abc\", data[0]);\n-        Assert.assertEquals(\"public\", data[1]);\n-        Assert.assertFalse(\"Should not have any more records\", iterator.hasNext());\n+        assertEquals(2, data.length);\n+        assertEquals(\"abc\", data[0]);\n+        assertEquals(\"public\", data[1]);\n+        assertFalse(\"Should not have any more records\", iterator.hasNext());\n     }\n \n     @Test\n         String code = \"foo\\r\\nbaar,\\r\\nhello,world\\r\\n,kanu\";\n         CSVParser parser = new CSVParser(new StringReader(code));\n         String[][] data = parser.getRecords();\n-        Assert.assertEquals(4, data.length);\n+        assertEquals(4, data.length);\n     }\n \n     @Test\n         String code = \"foo\\rbaar,\\rhello,world\\r,kanu\";\n         CSVParser parser = new CSVParser(new StringReader(code));\n         String[][] data = parser.getRecords();\n-        Assert.assertEquals(4, data.length);\n+        assertEquals(4, data.length);\n     }\n \n     @Test\n         String code = \"foo\\nbaar,\\nhello,world\\n,kanu\";\n         CSVParser parser = new CSVParser(new StringReader(code));\n         String[][] data = parser.getRecords();\n-        Assert.assertEquals(4, data.length);\n+        assertEquals(4, data.length);\n     }\n \n     @Test\n         //String code = \"foo;baar\\r\\n\\r\\nhello;\\r\\n\\r\\nworld;\\r\\n\";\n         CSVParser parser = new CSVParser(new StringReader(code));\n         String[][] data = parser.getRecords();\n-        Assert.assertEquals(3, data.length);\n+        assertEquals(3, data.length);\n     }\n \n     @Test\n             records.add(record);\n         }\n         \n-        Assert.assertEquals(3, records.size());\n-        Assert.assertTrue(Arrays.equals(new String[]{\"a\", \"b\", \"c\"}, records.get(0)));\n-        Assert.assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, records.get(1)));\n-        Assert.assertTrue(Arrays.equals(new String[]{\"x\", \"y\", \"z\"}, records.get(2)));\n+        assertEquals(3, records.size());\n+        assertTrue(Arrays.equals(new String[]{\"a\", \"b\", \"c\"}, records.get(0)));\n+        assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, records.get(1)));\n+        assertTrue(Arrays.equals(new String[]{\"x\", \"y\", \"z\"}, records.get(2)));\n     }\n \n     @Test\n         \n         Iterator<String[]> iterator = CSVFormat.DEFAULT.parse(in).iterator();\n         \n-        Assert.assertTrue(iterator.hasNext());\n+        assertTrue(iterator.hasNext());\n         try {\n             iterator.remove();\n-            Assert.fail(\"expected UnsupportedOperationException\");\n+            fail(\"expected UnsupportedOperationException\");\n         } catch (UnsupportedOperationException expected) {\n         }\n-        Assert.assertTrue(Arrays.equals(new String[]{\"a\", \"b\", \"c\"}, iterator.next()));\n-        Assert.assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, iterator.next()));\n-        Assert.assertTrue(iterator.hasNext());\n-        Assert.assertTrue(iterator.hasNext());\n-        Assert.assertTrue(iterator.hasNext());\n-        Assert.assertTrue(Arrays.equals(new String[]{\"x\", \"y\", \"z\"}, iterator.next()));\n-        Assert.assertFalse(iterator.hasNext());\n+        assertTrue(Arrays.equals(new String[]{\"a\", \"b\", \"c\"}, iterator.next()));\n+        assertTrue(Arrays.equals(new String[]{\"1\", \"2\", \"3\"}, iterator.next()));\n+        assertTrue(iterator.hasNext());\n+        assertTrue(iterator.hasNext());\n+        assertTrue(iterator.hasNext());\n+        assertTrue(Arrays.equals(new String[]{\"x\", \"y\", \"z\"}, iterator.next()));\n+        assertFalse(iterator.hasNext());\n         \n         try {\n             iterator.next();\n-            Assert.fail(\"NoSuchElementException expected\");\n+            fail(\"NoSuchElementException expected\");\n         } catch (NoSuchElementException e) {\n             // expected\n         }\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.csv;\n \n import java.io.IOException;\n import java.io.StringWriter;\n import java.util.Random;\n \n-import org.junit.Assert;\n import org.junit.Test;\n \n-/**\n- * CSVPrinterTest\n- */\n+import static org.junit.Assert.*;\n+\n public class CSVPrinterTest {\n \n     String lineSeparator = CSVFormat.DEFAULT.getLineSeparator();\n         StringWriter sw = new StringWriter();\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.println(\"a\", \"b\");\n-        Assert.assertEquals(\"a,b\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,b\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         StringWriter sw = new StringWriter();\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.println(\"a,b\", \"b\");\n-        Assert.assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n+        assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         StringWriter sw = new StringWriter();\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.println(\"a, b\", \"b \");\n-        Assert.assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + lineSeparator, sw.toString());\n+        assertEquals(\"\\\"a, b\\\",\\\"b \\\"\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         StringWriter sw = new StringWriter();\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.println(\"a\", \"b\\\"c\");\n-        Assert.assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,\\\"b\\\"\\\"c\\\"\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         StringWriter sw = new StringWriter();\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.println(\"a\", \"b\\nc\");\n-        Assert.assertEquals(\"a,\\\"b\\nc\\\"\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,\\\"b\\nc\\\"\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         StringWriter sw = new StringWriter();\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.println(\"a\", \"b\\r\\nc\");\n-        Assert.assertEquals(\"a,\\\"b\\r\\nc\\\"\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,\\\"b\\r\\nc\\\"\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         StringWriter sw = new StringWriter();\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.println(\"a\", \"b\\\\c\");\n-        Assert.assertEquals(\"a,b\\\\c\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,b\\\\c\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         StringWriter sw = new StringWriter();\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.println(\"a\", \"b\");\n-        Assert.assertEquals(\"a,b\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,b\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         StringWriter sw = new StringWriter();\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.EXCEL);\n         printer.println(\"a,b\", \"b\");\n-        Assert.assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n+        assertEquals(\"\\\"a,b\\\",b\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         StringWriter sw = new StringWriter();\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.println(\"a\", null, \"b\");\n-        Assert.assertEquals(\"a,,b\" + lineSeparator, sw.toString());\n+        assertEquals(\"a,,b\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT);\n         printer.printComment(\"This is a comment\");\n         \n-        Assert.assertEquals(\"\", sw.toString());\n+        assertEquals(\"\", sw.toString());\n     }\n \n     @Test\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n         printer.printComment(\"This is a comment\");\n         \n-        Assert.assertEquals(\"# This is a comment\" + lineSeparator, sw.toString());\n+        assertEquals(\"# This is a comment\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n         CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withCommentStart('#'));\n         printer.printComment(\"This is a comment\\non multiple lines\");\n         \n-        Assert.assertEquals(\"# This is a comment\" + lineSeparator + \"# on multiple lines\" + lineSeparator, sw.toString());\n+        assertEquals(\"# This is a comment\" + lineSeparator + \"# on multiple lines\" + lineSeparator, sw.toString());\n     }\n \n     @Test\n \n         if (!equals(lines, parseResult)) {\n             System.out.println(\"Printer output :\" + printable(result));\n-            Assert.assertTrue(false);\n+            assertTrue(false);\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n+++ b/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n import java.io.StringReader;\n import java.util.Arrays;\n \n-import org.junit.Assert;\n import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n \n public class ExtendedBufferedReaderTest {\n \n     @Test\n     public void testEmptyInput() throws Exception {\n         ExtendedBufferedReader br = getBufferedReader(\"\");\n-        Assert.assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.read());\n-        Assert.assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.lookAhead());\n-        Assert.assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.readAgain());\n-        Assert.assertNull(br.readLine());\n-        Assert.assertEquals(0, br.read(new char[10], 0, 0));\n+        assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.read());\n+        assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.lookAhead());\n+        assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.readAgain());\n+        assertNull(br.readLine());\n+        assertEquals(0, br.read(new char[10], 0, 0));\n     }\n \n     @Test\n     public void testReadLookahead1() throws Exception {\n         ExtendedBufferedReader br = getBufferedReader(\"1\\n2\\r3\\n\");\n-        Assert.assertEquals('1', br.lookAhead());\n-        Assert.assertEquals(ExtendedBufferedReader.UNDEFINED, br.readAgain());\n-        Assert.assertEquals('1', br.read());\n-        Assert.assertEquals('1', br.readAgain());\n+        assertEquals('1', br.lookAhead());\n+        assertEquals(ExtendedBufferedReader.UNDEFINED, br.readAgain());\n+        assertEquals('1', br.read());\n+        assertEquals('1', br.readAgain());\n \n-        Assert.assertEquals(0, br.getLineNumber());\n-        Assert.assertEquals('\\n', br.lookAhead());\n-        Assert.assertEquals(0, br.getLineNumber());\n-        Assert.assertEquals('1', br.readAgain());\n-        Assert.assertEquals('\\n', br.read());\n-        Assert.assertEquals(1, br.getLineNumber());\n-        Assert.assertEquals('\\n', br.readAgain());\n-        Assert.assertEquals(1, br.getLineNumber());\n+        assertEquals(0, br.getLineNumber());\n+        assertEquals('\\n', br.lookAhead());\n+        assertEquals(0, br.getLineNumber());\n+        assertEquals('1', br.readAgain());\n+        assertEquals('\\n', br.read());\n+        assertEquals(1, br.getLineNumber());\n+        assertEquals('\\n', br.readAgain());\n+        assertEquals(1, br.getLineNumber());\n \n-        Assert.assertEquals('2', br.lookAhead());\n-        Assert.assertEquals(1, br.getLineNumber());\n-        Assert.assertEquals('\\n', br.readAgain());\n-        Assert.assertEquals(1, br.getLineNumber());\n-        Assert.assertEquals('2', br.read());\n-        Assert.assertEquals('2', br.readAgain());\n+        assertEquals('2', br.lookAhead());\n+        assertEquals(1, br.getLineNumber());\n+        assertEquals('\\n', br.readAgain());\n+        assertEquals(1, br.getLineNumber());\n+        assertEquals('2', br.read());\n+        assertEquals('2', br.readAgain());\n \n-        Assert.assertEquals('\\r', br.lookAhead());\n-        Assert.assertEquals('2', br.readAgain());\n-        Assert.assertEquals('\\r', br.read());\n-        Assert.assertEquals('\\r', br.readAgain());\n+        assertEquals('\\r', br.lookAhead());\n+        assertEquals('2', br.readAgain());\n+        assertEquals('\\r', br.read());\n+        assertEquals('\\r', br.readAgain());\n \n-        Assert.assertEquals('3', br.lookAhead());\n-        Assert.assertEquals('\\r', br.readAgain());\n-        Assert.assertEquals('3', br.read());\n-        Assert.assertEquals('3', br.readAgain());\n+        assertEquals('3', br.lookAhead());\n+        assertEquals('\\r', br.readAgain());\n+        assertEquals('3', br.read());\n+        assertEquals('3', br.readAgain());\n \n-        Assert.assertEquals('\\n', br.lookAhead());\n-        Assert.assertEquals(1, br.getLineNumber());\n-        Assert.assertEquals('3', br.readAgain());\n-        Assert.assertEquals('\\n', br.read());\n-        Assert.assertEquals(2, br.getLineNumber());\n-        Assert.assertEquals('\\n', br.readAgain());\n-        Assert.assertEquals(2, br.getLineNumber());\n+        assertEquals('\\n', br.lookAhead());\n+        assertEquals(1, br.getLineNumber());\n+        assertEquals('3', br.readAgain());\n+        assertEquals('\\n', br.read());\n+        assertEquals(2, br.getLineNumber());\n+        assertEquals('\\n', br.readAgain());\n+        assertEquals(2, br.getLineNumber());\n \n-        Assert.assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.lookAhead());\n-        Assert.assertEquals('\\n', br.readAgain());\n-        Assert.assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.read());\n-        Assert.assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.readAgain());\n-        Assert.assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.read());\n-        Assert.assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.lookAhead());\n+        assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.lookAhead());\n+        assertEquals('\\n', br.readAgain());\n+        assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.read());\n+        assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.readAgain());\n+        assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.read());\n+        assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.lookAhead());\n \n     }\n \n         ref[0] = 'a';\n         ref[1] = 'b';\n         ref[2] = 'c';\n-        Assert.assertEquals(3, br.read(res, 0, 3));\n-        Assert.assertTrue(Arrays.equals(res, ref));\n-        Assert.assertEquals('c', br.readAgain());\n+        assertEquals(3, br.read(res, 0, 3));\n+        assertTrue(Arrays.equals(res, ref));\n+        assertEquals('c', br.readAgain());\n \n-        Assert.assertEquals('d', br.lookAhead());\n+        assertEquals('d', br.lookAhead());\n         ref[4] = 'd';\n-        Assert.assertEquals(1, br.read(res, 4, 1));\n-        Assert.assertTrue(Arrays.equals(res, ref));\n-        Assert.assertEquals('d', br.readAgain());\n+        assertEquals(1, br.read(res, 4, 1));\n+        assertTrue(Arrays.equals(res, ref));\n+        assertEquals('d', br.readAgain());\n     }\n \n     @Test\n     public void testReadLine() throws Exception {\n         ExtendedBufferedReader br = getBufferedReader(\"\");\n-        Assert.assertTrue(br.readLine() == null);\n+        assertTrue(br.readLine() == null);\n \n         br = getBufferedReader(\"\\n\");\n-        Assert.assertTrue(br.readLine().equals(\"\"));\n-        Assert.assertTrue(br.readLine() == null);\n+        assertTrue(br.readLine().equals(\"\"));\n+        assertTrue(br.readLine() == null);\n \n         br = getBufferedReader(\"foo\\n\\nhello\");\n-        Assert.assertEquals(0, br.getLineNumber());\n-        Assert.assertTrue(br.readLine().equals(\"foo\"));\n-        Assert.assertEquals(1, br.getLineNumber());\n-        Assert.assertTrue(br.readLine().equals(\"\"));\n-        Assert.assertEquals(2, br.getLineNumber());\n-        Assert.assertTrue(br.readLine().equals(\"hello\"));\n-        Assert.assertEquals(3, br.getLineNumber());\n-        Assert.assertTrue(br.readLine() == null);\n-        Assert.assertEquals(3, br.getLineNumber());\n+        assertEquals(0, br.getLineNumber());\n+        assertTrue(br.readLine().equals(\"foo\"));\n+        assertEquals(1, br.getLineNumber());\n+        assertTrue(br.readLine().equals(\"\"));\n+        assertEquals(2, br.getLineNumber());\n+        assertTrue(br.readLine().equals(\"hello\"));\n+        assertEquals(3, br.getLineNumber());\n+        assertTrue(br.readLine() == null);\n+        assertEquals(3, br.getLineNumber());\n \n         br = getBufferedReader(\"foo\\n\\nhello\");\n-        Assert.assertEquals('f', br.read());\n-        Assert.assertEquals('o', br.lookAhead());\n-        Assert.assertTrue(br.readLine().equals(\"oo\"));\n-        Assert.assertEquals(1, br.getLineNumber());\n-        Assert.assertEquals('\\n', br.lookAhead());\n-        Assert.assertTrue(br.readLine().equals(\"\"));\n-        Assert.assertEquals(2, br.getLineNumber());\n-        Assert.assertEquals('h', br.lookAhead());\n-        Assert.assertTrue(br.readLine().equals(\"hello\"));\n-        Assert.assertTrue(br.readLine() == null);\n-        Assert.assertEquals(3, br.getLineNumber());\n+        assertEquals('f', br.read());\n+        assertEquals('o', br.lookAhead());\n+        assertTrue(br.readLine().equals(\"oo\"));\n+        assertEquals(1, br.getLineNumber());\n+        assertEquals('\\n', br.lookAhead());\n+        assertTrue(br.readLine().equals(\"\"));\n+        assertEquals(2, br.getLineNumber());\n+        assertEquals('h', br.lookAhead());\n+        assertTrue(br.readLine().equals(\"hello\"));\n+        assertTrue(br.readLine() == null);\n+        assertEquals(3, br.getLineNumber());\n \n \n         br = getBufferedReader(\"foo\\rbaar\\r\\nfoo\");\n-        Assert.assertTrue(br.readLine().equals(\"foo\"));\n-        Assert.assertEquals('b', br.lookAhead());\n-        Assert.assertTrue(br.readLine().equals(\"baar\"));\n-        Assert.assertEquals('f', br.lookAhead());\n-        Assert.assertTrue(br.readLine().equals(\"foo\"));\n-        Assert.assertTrue(br.readLine() == null);\n+        assertTrue(br.readLine().equals(\"foo\"));\n+        assertEquals('b', br.lookAhead());\n+        assertTrue(br.readLine().equals(\"baar\"));\n+        assertEquals('f', br.lookAhead());\n+        assertTrue(br.readLine().equals(\"foo\"));\n+        assertTrue(br.readLine() == null);\n     }\n \n     private ExtendedBufferedReader getBufferedReader(String s) {", "timestamp": 1331830470, "metainfo": ""}