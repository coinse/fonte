{"sha": "a2fef00ab8950771735bc09793f05fc842a0cd97", "log": "Make methods that create parsers or printers fail early and provide an expressive error messages. Document new behavior in JavaDoc  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/csv/Assertions.java\n+package org.apache.commons.csv;\n+\n+/**\n+ * Utility class for input parameter validation\n+ *\n+ * @version $Id$\n+ */\n+final class Assertions {\n+\n+    private Assertions() {\n+        // can not be instantiated\n+    }\n+\n+    public static <T> void notNull(T parameter, String parameterName) {\n+        if (parameter == null) {\n+            throw new IllegalArgumentException(\"Parameter '\" + parameterName + \"' must not be null!\");\n+        }\n+    }\n+}\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n      * Creates a parser for the given {@link File}.\n      *\n      * @param file\n-     *            a CSV file\n+     *            a CSV file. Must not be null.\n      * @param format\n-     *            the CSVFormat used for CSV parsing\n+     *            the CSVFormat used for CSV parsing. Must not be null.\n      * @return a new parser\n+     * @throws IllegalArgumentException\n+     *             If the parameters of the format are inconsistent or if either file or format are null.\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n     public static CSVParser parse(File file, final CSVFormat format) throws IOException {\n+        Assertions.notNull(file, \"file\");\n+        Assertions.notNull(format, \"format\");\n+\n         return new CSVParser(new FileReader(file), format);\n     }\n \n      * Creates a parser for the given {@link String}.\n      *\n      * @param string\n-     *            a CSV string\n+     *            a CSV string. Must not be null.\n      * @param format\n-     *            the CSVFormat used for CSV parsing\n+     *            the CSVFormat used for CSV parsing. Must not be null.\n      * @return a new parser\n+     * @throws IllegalArgumentException\n+     *             If the parameters of the format are inconsistent or if either string or format are null.\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n     public static CSVParser parse(String string, final CSVFormat format) throws IOException {\n+        Assertions.notNull(string, \"string\");\n+        Assertions.notNull(format, \"format\");\n+\n         return new CSVParser(new StringReader(string), format);\n     }\n \n      * </p>\n      *\n      * @param url\n-     *            a URL\n+     *            a URL. Must not be null.\n      * @param charset\n      *            the charset for the resource, if {@code null}, uses {@code UTF-8}. UTF-8 is one of the encodings\n      *            required by the Java specification.\n      * @param format\n-     *            the CSVFormat used for CSV parsing\n+     *            the CSVFormat used for CSV parsing. Must not be null.\n      * @return a new parser\n+     * @throws IllegalArgumentException\n+     *             If the parameters of the format are inconsistent or if either url or format are null.\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n     public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException {\n+        Assertions.notNull(url, \"url\");\n+        Assertions.notNull(format, \"format\");\n+\n         return new CSVParser(new InputStreamReader(url.openStream(),\n                              charset == null ? Charset.forName(\"UTF-8\") : charset), format);\n     }\n      * </p>\n      *\n      * @param reader\n-     *            a Reader containing CSV-formatted input\n+     *            a Reader containing CSV-formatted input. Must not be null.\n      * @param format\n-     *            the CSVFormat used for CSV parsing\n+     *            the CSVFormat used for CSV parsing. Must not be null.\n      * @throws IllegalArgumentException\n-     *             thrown if the parameters of the format are inconsistent\n+     *             If the parameters of the format are inconsistent or if either reader or format are null.\n      * @throws IOException\n      *             If an I/O error occurs\n      */\n     public CSVParser(final Reader reader, final CSVFormat format) throws IOException {\n+        Assertions.notNull(reader, \"reader\");\n+        Assertions.notNull(format, \"format\");\n+\n         format.validate();\n         this.format = format;\n         this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));\n--- a/src/main/java/org/apache/commons/csv/CSVPrinter.java\n+++ b/src/main/java/org/apache/commons/csv/CSVPrinter.java\n      * (encapsulation and escaping with a different character) are not supported.\n      *\n      * @param out\n-     *            stream to which to print.\n+     *            stream to which to print. Must not be null.\n      * @param format\n-     *            the CSV format. If null the default format is used ({@link CSVFormat#DEFAULT})\n+     *            the CSV format. Must not be null.\n      * @throws IllegalArgumentException\n-     *             thrown if the parameters of the format are inconsistent\n+     *             thrown if the parameters of the format are inconsistent or if either out or format are null.\n      */\n     public CSVPrinter(final Appendable out, final CSVFormat format) {\n+        Assertions.notNull(out, \"out\");\n+        Assertions.notNull(format, \"format\");\n+\n         this.out = out;\n-        this.format = format == null ? CSVFormat.DEFAULT : format;\n+        this.format = format;\n         this.format.validate();\n     }\n \n--- /dev/null\n+++ b/src/test/java/org/apache/commons/csv/AssertionsTest.java\n+package org.apache.commons.csv;\n+\n+import org.junit.Test;\n+\n+/**\n+ * @version $Id$\n+ */\n+public class AssertionsTest {\n+\n+    @Test\n+    public void testNotNull() throws Exception {\n+        Assertions.notNull(new Object(), \"object\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNotNullNull() throws Exception {\n+        Assertions.notNull(null, \"object\");\n+    }\n+}\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.Reader;\n import java.io.StringReader;\n import java.io.StringWriter;\n+import java.net.URL;\n+import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n         new CSVParser(null, invalidFormat).close();\n     }\n \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testParseNullFileFormat() throws Exception {\n+        CSVParser.parse((File) null, CSVFormat.DEFAULT);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testParseFileNullFormat() throws Exception {\n+        CSVParser.parse(new File(\"\"), null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testParseNullStringFormat() throws Exception {\n+        CSVParser.parse((String) null, CSVFormat.DEFAULT);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testParseStringNullFormat() throws Exception {\n+        CSVParser.parse(\"csv data\", null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testParseNullUrlCharsetFormat() throws Exception {\n+        CSVParser.parse(null, Charset.defaultCharset(), CSVFormat.DEFAULT);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testParseUrlCharsetNullFormat() throws Exception {\n+        CSVParser.parse(new URL(\"http://commons.apache.org\"), Charset.defaultCharset(), null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNewCSVParserNullReaderFormat() throws Exception {\n+        new CSVParser(null, CSVFormat.DEFAULT);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNewCSVParserReaderNullFormat() throws Exception {\n+        new CSVParser(new StringReader(\"\"), null);\n+    }\n+\n     private void validateRecordNumbers(final String lineSeparator) throws IOException {\n         final CSVParser parser = CSVParser.parse(\"a\" + lineSeparator + \"b\" + lineSeparator + \"c\", CSVFormat.DEFAULT.withRecordSeparator(lineSeparator));\n         CSVRecord record;\n--- a/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVPrinterTest.java\n     @Test(expected = IllegalArgumentException.class)\n     public void testInvalidFormat() throws Exception {\n         final CSVFormat invalidFormat = CSVFormat.DEFAULT.withDelimiter(CR);\n-        new CSVPrinter(null, invalidFormat).close();\n+        new CSVPrinter(new StringWriter(), invalidFormat).close();\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNewCSVPrinterNullAppendableFormat() throws Exception {\n+        new CSVPrinter(null, CSVFormat.DEFAULT);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testNewCsvPrinterAppendableNullFormat() throws Exception {\n+        new CSVPrinter(new StringWriter(), null);\n     }\n }", "timestamp": 1377807493, "metainfo": ""}