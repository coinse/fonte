{"sha": "dd26201ac47f60cd9e18800726cc28660b81bdaf", "log": "CSV-81 Token.Type.isReady could perhaps be removed Not removed, but only set on EOF if there is data to return  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVLexer.java\n+++ b/src/main/java/org/apache/commons/csv/CSVLexer.java\n                 // reached end of file without any content (empty line at the end)\n                 if (isEndOfFile(c)) {\n                     tkn.type = EOF;\n+                    // don't set tkn.isReady here because no content\n                     return tkn;\n                 }\n             }\n         // did we reach eof during the last iteration already ? EOF\n         if (isEndOfFile(lastChar) || (!isDelimiter(lastChar) && isEndOfFile(c))) {\n             tkn.type = EOF;\n+            // don't set tkn.isReady here because no content\n             return tkn;\n         }\n \n         //  important: make sure a new char gets consumed in each iteration\n-        while (!tkn.isReady && tkn.type != EOF) {\n+        while (tkn.type == INVALID) {\n             // ignore whitespaces at beginning of a token\n             if (leadingSpacesIgnored) {\n                 while (isWhitespace(c) && !eol) {\n             } else if (isDelimiter(c)) {\n                 // empty token return TOKEN(\"\")\n                 tkn.type = TOKEN;\n-                tkn.isReady = true;\n             } else if (eol) {\n                 // empty token return EORECORD(\"\")\n                 //noop: tkn.content.append(\"\");\n                 tkn.type = EORECORD;\n-                tkn.isReady = true;\n             } else if (isEncapsulator(c)) {\n                 // consume encapsulated token\n                 encapsulatedTokenLexer(tkn, c);\n                 // end of file return EOF()\n                 //noop: tkn.content.append(\"\");\n                 tkn.type = EOF;\n-                tkn.isReady = true;\n+                tkn.isReady = true; // there is data at EOF\n             } else {\n                 // next token must be a simple token\n                 // add removed blanks when not ignoring whitespace chars...\n             if (isEndOfLine(c)) {\n                 // end of record\n                 tkn.type = EORECORD;\n-                tkn.isReady = true;\n                 break;\n             } else if (isEndOfFile(c)) {\n                 // end of file\n                 tkn.type = EOF;\n-                tkn.isReady = true;\n+                tkn.isReady = true; // There is data at EOF\n                 break;\n             } else if (isDelimiter(c)) {\n                 // end of token\n                 tkn.type = TOKEN;\n-                tkn.isReady = true;\n                 break;\n             } else if (isEscape(c)) {\n                 tkn.content.append((char) readEscape(c));\n                         c = in.read();\n                         if (isDelimiter(c)) {\n                             tkn.type = TOKEN;\n-                            tkn.isReady = true;\n                             return tkn;\n                         } else if (isEndOfFile(c)) {\n                             tkn.type = EOF;\n-                            tkn.isReady = true;\n+                            tkn.isReady = true; // There is data at EOF\n                             return tkn;\n                         } else if (isEndOfLine(c)) {\n                             // ok eo token reached\n                             tkn.type = EORECORD;\n-                            tkn.isReady = true;\n                             return tkn;\n                         } else if (!isWhitespace(c)) {\n                             // error invalid char between token and next delimiter", "timestamp": 1332443081, "metainfo": ""}