{"sha": "33cf28990720e1c5a4ba92e4363a0fe1cf80a6c9", "log": "Remove factory methods for creating CSVParsers for classpath resources  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n     }\n \n     /**\n-     * Creates a parser for the given resource.\n-     *\n-     * <p>\n-     * If you do not read all records from the given source, you should call {@link #close()} on the parser.\n-     * </p>\n-     *\n-     * @param resource\n-     *            a resource path\n-     * @param charset\n-     *            the charset for the resource\n-     * @param classLoader\n-     *            the class loader to load the resource.\n-     * @param format\n-     *            the CSVFormat used for CSV parsing\n-     * @return a new parser\n-     * @throws IOException\n-     *             If an I/O error occurs\n-     */\n-    public static CSVParser parse(String resource, Charset charset, ClassLoader classLoader,\n-            final CSVFormat format) throws IOException {\n-        final URL url = classLoader.getResource(resource);\n-        if (url == null) {\n-            throw new IllegalArgumentException(\"Resource cannot be found: \" + resource);\n-        }\n-        return parse(url, charset, format);\n-    }\n-\n-    /**\n-     * Creates a parser for the given resource.\n-     *\n-     * <p>\n-     * If you do not read all records from the given source, you should call {@link #close()} on the parser.\n-     * </p>\n-     *\n-     * @param resource\n-     *            a resource path\n-     * @param charset\n-     *            the charset for the resource\n-     * @param format\n-     *            the CSVFormat used for CSV parsing\n-     * @return a new parser\n-     * @throws IOException\n-     *             If an I/O error occurs\n-     */\n-    public static CSVParser parse(String resource, Charset charset, final CSVFormat format) throws IOException {\n-        final URL url = ClassLoader.getSystemResource(resource);\n-        if (url == null) {\n-            throw new IllegalArgumentException(\"System resource cannot be found: \" + resource);\n-        }\n-        return parse(url, charset, format);\n-    }\n-\n-    /**\n      * Creates a parser for the given {@link String}.\n      *\n      * @param string\n     private long recordNumber;\n \n     private final Token reusableToken = new Token();\n-\n-    /**\n-     * CSV parser using the default format {@link CSVFormat#DEFAULT}.\n-     *\n-     * <p>\n-     * If you do not read all records from the given {@code reader}, you should call {@link #close()} on the parser,\n-     * unless you close the {@code reader}.\n-     * </p>\n-     *\n-     * @param input\n-     *            a Reader containing \"csv-formatted\" input\n-     * @throws IllegalArgumentException\n-     *             thrown if the parameters of the format are inconsistent\n-     * @throws IOException\n-     *             If an I/O error occurs\n-     */\n-    public CSVParser(final Reader input) throws IOException {\n-        this(input, CSVFormat.DEFAULT);\n-    }\n \n     /**\n      * Customized CSV parser using the given {@link CSVFormat}\n--- a/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFileParserTest.java\n import java.io.FileReader;\n import java.io.FilenameFilter;\n import java.io.IOException;\n+import java.net.URL;\n import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.Collection;\n     }\n \n     @Test\n-    public void testCSVResource() throws Exception {\n+    public void testCSVUrl() throws Exception {\n         String line = readTestData();\n         assertNotNull(\"file must contain config line\", line);\n         final String[] split = line.split(\" \");\n         assertEquals(testName + \" Expected format \", line, format.toString());\n \n         // Now parse the file and compare against the expected results\n-        final CSVParser parser = CSVParser.parse(\"CSVFileParser/\" + split[0], Charset.forName(\"UTF-8\"),\n-                this.getClass().getClassLoader(), format);\n+        URL resource = ClassLoader.getSystemResource(\"CSVFileParser/\" + split[0]);\n+        final CSVParser parser = CSVParser.parse(resource, Charset.forName(\"UTF-8\"), format);\n         for (final CSVRecord record : parser) {\n             String parsed = record.toString();\n             if (checkComments) {\n--- a/src/test/java/org/apache/commons/csv/FercGovTest.java\n+++ b/src/test/java/org/apache/commons/csv/FercGovTest.java\n package org.apache.commons.csv;\n \n import java.io.IOException;\n+import java.net.URL;\n import java.nio.charset.Charset;\n import java.util.List;\n \n \n     @Test\n     public void testContractFile() throws IOException {\n-        final CSVParser parser = CSVParser.parse(\"ferc.gov/contract.txt\", US_ASCII,\n+        URL contractData = ClassLoader.getSystemClassLoader().getResource(\"ferc.gov/contract.txt\");\n+        final CSVParser parser = CSVParser.parse(contractData, US_ASCII,\n                 CSVFormat.DEFAULT.withHeader());\n         try {\n             final List<CSVRecord> records = parser.getRecords();\n \n     @Test\n     public void testTransactionFile() throws IOException {\n-        final CSVParser parser = CSVParser.parse(\"ferc.gov/transaction.txt\", US_ASCII,\n+        URL transactionData = ClassLoader.getSystemClassLoader().getResource(\"ferc.gov/transaction.txt\");\n+        final CSVParser parser = CSVParser.parse(transactionData, US_ASCII,\n                 CSVFormat.DEFAULT.withHeader());\n         try {\n             final List<CSVRecord> records = parser.getRecords();", "timestamp": 1376503633, "metainfo": ""}