{"sha": "1a35541867c086cae9166a0b0dc9901ea0e12812", "log": "Added a convenient format() method in CSVFormat replacing CSVUtils.printLine()  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n \n package org.apache.commons.csv;\n \n+import java.io.IOException;\n import java.io.Reader;\n import java.io.Serializable;\n+import java.io.StringWriter;\n \n /**\n  * The format specification of a CSV file.\n         return new CSVParser(in, this);\n     }\n \n+    /**\n+     * Format the specified values.\n+     * \n+     * @param values the values to format\n+     */\n+    public String format(String... values) {\n+        StringWriter out = new StringWriter();\n+        try {\n+            new CSVPrinter(out, this).println(values);\n+        } catch (IOException e) {\n+            // should not happen\n+        }\n+        \n+        return out.toString().trim();\n+    }\n+\n     protected CSVFormat clone() {\n         try {\n             return (CSVFormat) super.clone();\n--- a/src/main/java/org/apache/commons/csv/CSVUtils.java\n+++ b/src/main/java/org/apache/commons/csv/CSVUtils.java\n \n import java.io.IOException;\n import java.io.StringReader;\n-import java.io.StringWriter;\n \n /**\n  * Utility methods for dealing with CSV files\n      * instance to operate.</p>\n      */\n     public CSVUtils() {\n-    }\n-\n-    /**\n-     * Converts an array of string values into a single CSV line. All\n-     * <code>null</code> values are converted to the string <code>\"null\"</code>,\n-     * all strings equal to <code>\"null\"</code> will additionally get quotes\n-     * around.\n-     *\n-     * @param values the value array\n-     * @return the CSV string, will be an empty string if the length of the\n-     *         value array is 0\n-     */\n-    public static String printLine(CSVFormat format, String... values) {\n-        // set up a CSVUtils\n-        StringWriter stringWriter = new StringWriter();\n-        CSVPrinter csvPrinter = new CSVPrinter(stringWriter, format);\n-\n-        // check for null values an \"null\" as strings and convert them\n-        // into the strings \"null\" and \"\\\"null\\\"\"\n-        for (int i = 0; i < values.length; i++) {\n-            if (values[i] == null) {\n-                values[i] = \"null\";\n-            } else if (values[i].equals(\"null\")) {\n-                values[i] = \"\\\"null\\\"\";\n-            }\n-        }\n-\n-        // convert to CSV\n-        try {\n-            csvPrinter.println(values);\n-        } catch (IOException e) {\n-            // should not happen with StringWriter\n-        }\n-        // as the resulting string has \\r\\n at the end, we will trim that away\n-        return stringWriter.toString().trim();\n     }\n \n     // ======================================================\n--- a/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVFormatTest.java\n         assertEquals(false, format.withEmptyLinesIgnored(false).isEmptyLinesIgnored());\n         assertEquals(false, format.withUnicodeEscapesInterpreted(false).isUnicodeEscapesInterpreted());\n     }\n+\n+    public void testFormat() {\n+        CSVFormat format = CSVFormat.DEFAULT;\n+        \n+        assertEquals(\"\", format.format());\n+        assertEquals(\"a,b,c\", format.format(\"a\", \"b\", \"c\"));\n+        assertEquals(\"\\\"x,y\\\",z\", format.format(\"x,y\", \"z\"));\n+    }\n } ", "timestamp": 1330962123, "metainfo": ""}