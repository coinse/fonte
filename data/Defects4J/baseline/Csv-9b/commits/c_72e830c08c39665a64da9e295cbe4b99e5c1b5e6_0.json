{"sha": "72e830c08c39665a64da9e295cbe4b99e5c1b5e6", "log": "Allow testing of dynamically loaded CSVLexers  ", "commit": "\n--- a/src/test/java/org/apache/commons/csv/PerformanceTest.java\n+++ b/src/test/java/org/apache/commons/csv/PerformanceTest.java\n import java.io.BufferedReader;\n import java.io.FileReader;\n import java.io.IOException;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n \n /**\n  * Basic test harness.\n                 testCSVLexer(false, test);\n             } else if (\"lexnew\".equals(test)) {\n                 testCSVLexer(true, test);\n+            } else if (test.startsWith(\"CSVLexer\")) {\n+                testCSVLexer(false, test);\n             } else if (\"extb\".equals(test)) {\n                 testExtendedBuffer(false);\n             } else if (\"exts\".equals(test)) {\n                 testExtendedBuffer(true);\n+            } else {\n+                System.out.println(\"Invalid test name: \"+test);\n             }\n         }\n     }\n        show();\n    }\n \n+\n+   private static Constructor<Lexer> getLexerCtor(String clazz) throws Exception {\n+       @SuppressWarnings(\"unchecked\")\n+       Class<Lexer> lexer = (Class<Lexer>) Class.forName(\"org.apache.commons.csv.\"+clazz);\n+       Constructor<Lexer> ctor = lexer.getConstructor(new Class<?>[]{CSVFormat.class, ExtendedBufferedReader.class});\n+       return ctor;\n+   }\n+\n    private static void testCSVLexer(final boolean newToken, String test) throws Exception {\n        Token token = new Token();\n-       for (int i = 0; i < max; i++) {\n-           final BufferedReader reader = getReader();\n-           Lexer lexer = new CSVLexer(format, new ExtendedBufferedReader(reader));\n+       String dynamic = \"\";\n+       for (int i = 0; i < max; i++) {\n+           final ExtendedBufferedReader input = new ExtendedBufferedReader(getReader());\n+           Lexer lexer = null;\n+           if (test.startsWith(\"CSVLexer\")) {\n+               dynamic=\"!\";\n+               lexer = getLexerCtor(test).newInstance(new Object[]{format, input});\n+           } else {\n+               lexer = new CSVLexer(format, input);\n+           }\n            int count = 0;\n            int fields = 0;\n            long t0 = System.currentTimeMillis();\n \n            } while (!token.type.equals(Token.Type.EOF));\n            Stats s = new Stats(count, fields);\n-           reader.close();\n-           show(test, s, t0);\n+           input.close();\n+           show(lexer.getClass().getSimpleName()+dynamic+\" \"+(newToken ? \"new\" : \"reset\"), s, t0);\n        }\n        show();\n    }", "timestamp": 1332433727, "metainfo": ""}