{"sha": "adf5f834db919d8eb584eb2f701d9963ab89f525", "log": "Covert to new style package Javadoc; tidy  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/csv/package-info.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+/**\n+ * Apache Commons CSV Format Support.\n+ * \n+ * <p>CSV (or its dialects) are widely used as interfaces to legacy systems or\n+ *    manual data-imports. Basically CSV stands for \"Comma Separated Values\" but\n+ *    this simple abbreviation leads to more confusion than definitions.</p>\n+ *    \n+ * <p>Common to all file dialects is its basic structure: The CSV data-format\n+ *    is record oriented, whereas each record starts on a new textual line. A\n+ *    record is build of a list of values. Keep in mind that not all records\n+ *    must have an equal number of values:</p>\n+ * <pre>\n+ *       csv    := records*\n+ *       record := values*\n+ * </pre>\n+ * \n+ * <p>The following list contains the csv aspects the Commons CSV parser supports:</p>\n+ * <dl>\n+ *   <dt>Separators (for lines)</dt>\n+ *   <dd>The record separators are hardcoded and cannot be changed. The must be '\\r', '\\n' or '\\r\\n'.</dd>\n+ * \n+ *   <dt>Delimiter (for values)</dt>\n+ *   <dd>The delimiter for values is freely configurable (default ',').</dd>\n+ * \n+ *   <dt>Comments</dt>\n+ *   <dd>Some CSV-dialects support a simple comment syntax. A comment is a record\n+ *       which must start with a designated character (the commentStarter). A record\n+ *       of this kind is treated as comment and gets removed from the input (default none)</dd>\n+ * \n+ *   <dt>Encapsulator</dt>\n+ *  <dd>Two encapsulator characters (default '\"') are used to enclose -&gt; complex values.</dd>\n+ *       \n+ *   <dt>Simple values</dt>\n+ *   <dd>A simple value consist of all characters (except the delimiter) until \n+ *       (but not including) the next delimiter or a record-terminator. Optionally\n+ *       all surrounding whitespaces of a simple value can be ignored (default: true).</dd>\n+ *      \n+ *   <dt>Complex values</dt>\n+ *   <dd>Complex values are encapsulated within a pair of the defined encapsulator characters.\n+ *       The encapsulator itself must be escaped or doubled when used inside complex values.\n+ *       Complex values preserve all kind of formatting (including newlines -&gt; multiline-values)</dd>\n+ * \n+ *  <dt>Empty line skipping</dt>\n+ *   <dd>Optionally empty lines in CSV files can be skipped. \n+ *       Otherwise, empty lines will return a record with a single empty value.</dd>\n+ * </dl>\n+ * \n+ * <p>In addition to individually defined dialects, two predefined dialects (strict-csv, and excel-csv) \n+ *    can be set directly.</p> <!-- TODO fix -->\n+ * \n+ * <p>Example usage:</p>\n+ * <blockquote><pre>\n+ * Reader in = new StringReader(\"a,b,c\");\n+ * for (CSVRecord record : CSVFormat.DEFAULT.parse(in)) {\n+ *     for (int i = 0; i &lt; record.length; i++) {\n+ *         System.out.println(\"value \" + i + \"=\" + record.get(i));\n+ *     }\n+ * }\n+ * </pre></blockquote>\n+ */\n+\n+package org.apache.commons.csv;", "timestamp": 1333072288, "metainfo": ""}