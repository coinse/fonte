{"sha": "d2c8f90800f45a0bf99e539180147e5157951428", "log": "Improved test coverage  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/UnicodeUnescapeReader.java\n+++ b/src/main/java/org/apache/commons/csv/UnicodeUnescapeReader.java\n             \n             if (c == '\\\\') {\n                 int l = reader.read(sequence);\n-                if (l == sequence.length \n-                        && 'u' == sequence[0]\n-                        && isHexadecimal(sequence[1])\n-                        && isHexadecimal(sequence[2])\n-                        && isHexadecimal(sequence[3])\n-                        && isHexadecimal(sequence[4])) {\n+                if (l == sequence.length && isUnicodeSequence(sequence)) {\n                     // unicode escape found\n                     c = Integer.parseInt(new String(sequence, 1, 4), 16);\n                     \n         \n         return count;\n     }\n-    \n+\n+    private boolean isUnicodeSequence(char[] sequence) {\n+        return 'u' == sequence[0]\n+                && isHexadecimal(sequence[1])\n+                && isHexadecimal(sequence[2])\n+                && isHexadecimal(sequence[3])\n+                && isHexadecimal(sequence[4]);\n+    }\n+\n     private boolean isHexadecimal(char c) {\n         return ('0' <= c && c <= '9') || ('a' <= c && c <= 'f') || ('A' <= c && c <= 'F');\n     }\n--- a/src/test/java/org/apache/commons/csv/CharBufferTest.java\n+++ b/src/test/java/org/apache/commons/csv/CharBufferTest.java\n         buffer.ensureCapacity(8);\n         assertTrue(buffer.capacity() >= 8);\n     }\n+\n+    public void testTrim() throws Exception {\n+        CharBuffer buffer = new CharBuffer();\n+        buffer.append(\"          \");\n+        buffer.trimTrailingWhitespace();\n+        assertEquals(0, buffer.length());\n+\n+        buffer = new CharBuffer();\n+        buffer.append(\"Hello World!    \");\n+        buffer.trimTrailingWhitespace();\n+        assertEquals(\"Hello World!\", buffer.toString());\n+    }\n }\n--- a/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n+++ b/src/test/java/org/apache/commons/csv/ExtendedBufferedReaderTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.csv;\n \n import java.io.StringReader;\n \n import junit.framework.TestCase;\n \n-/**\n- * ExtendedBufferedReaderTest\n- */\n public class ExtendedBufferedReaderTest extends TestCase {\n \n+    public void testEmptyInput() throws Exception {\n+        ExtendedBufferedReader br = getBufferedReader(\"\");\n+        assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.read());\n+        assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.lookAhead());\n+        assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.readAgain());\n+        assertNull(br.readLine());\n+        assertEquals(0, br.read(new char[10], 0, 0));\n+    }\n+\n     public void testReadLookahead1() throws Exception {\n-\n-        assertEquals(ExtendedBufferedReader.END_OF_STREAM, getEBR(\"\").read());\n-        ExtendedBufferedReader br = getEBR(\"1\\n2\\r3\\n\");\n+        ExtendedBufferedReader br = getBufferedReader(\"1\\n2\\r3\\n\");\n         assertEquals('1', br.lookAhead());\n         assertEquals(ExtendedBufferedReader.UNDEFINED, br.readAgain());\n         assertEquals('1', br.read());\n     public void testReadLookahead2() throws Exception {\n         char[] ref = new char[5];\n         char[] res = new char[5];\n-\n-        ExtendedBufferedReader br = getEBR(\"\");\n-        assertEquals(0, br.read(res, 0, 0));\n-        assertTrue(Arrays.equals(res, ref));\n-\n-        br = getEBR(\"abcdefg\");\n+        \n+        ExtendedBufferedReader br = getBufferedReader(\"abcdefg\");\n         ref[0] = 'a';\n         ref[1] = 'b';\n         ref[2] = 'c';\n         assertEquals(1, br.read(res, 4, 1));\n         assertTrue(Arrays.equals(res, ref));\n         assertEquals('d', br.readAgain());\n-\n     }\n \n     public void testReadLine() throws Exception {\n-        ExtendedBufferedReader br = getEBR(\"\");\n+        ExtendedBufferedReader br = getBufferedReader(\"\");\n         assertTrue(br.readLine() == null);\n \n-        br = getEBR(\"\\n\");\n+        br = getBufferedReader(\"\\n\");\n         assertTrue(br.readLine().equals(\"\"));\n         assertTrue(br.readLine() == null);\n \n-        br = getEBR(\"foo\\n\\nhello\");\n+        br = getBufferedReader(\"foo\\n\\nhello\");\n         assertEquals(0, br.getLineNumber());\n         assertTrue(br.readLine().equals(\"foo\"));\n         assertEquals(1, br.getLineNumber());\n         assertTrue(br.readLine() == null);\n         assertEquals(3, br.getLineNumber());\n \n-        br = getEBR(\"foo\\n\\nhello\");\n+        br = getBufferedReader(\"foo\\n\\nhello\");\n         assertEquals('f', br.read());\n         assertEquals('o', br.lookAhead());\n         assertTrue(br.readLine().equals(\"oo\"));\n         assertEquals(3, br.getLineNumber());\n \n \n-        br = getEBR(\"foo\\rbaar\\r\\nfoo\");\n+        br = getBufferedReader(\"foo\\rbaar\\r\\nfoo\");\n         assertTrue(br.readLine().equals(\"foo\"));\n         assertEquals('b', br.lookAhead());\n         assertTrue(br.readLine().equals(\"baar\"));\n         assertTrue(br.readLine() == null);\n     }\n \n-    private ExtendedBufferedReader getEBR(String s) {\n+    private ExtendedBufferedReader getBufferedReader(String s) {\n         return new ExtendedBufferedReader(new StringReader(s));\n     }\n }", "timestamp": 1331726507, "metainfo": ""}