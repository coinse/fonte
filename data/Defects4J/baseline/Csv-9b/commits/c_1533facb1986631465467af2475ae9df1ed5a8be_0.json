{"sha": "1533facb1986631465467af2475ae9df1ed5a8be", "log": "When withHeader is set to any non-null value, the first record is the first <em>data</em> record, not the header record.  ", "commit": "\n--- a/src/main/java/org/apache/commons/csv/CSVFormat.java\n+++ b/src/main/java/org/apache/commons/csv/CSVFormat.java\n     }\n \n     /**\n-     * Sets the header of the format. The header can either be parsed automatically from the\n-     * input file with:\n-     *\n+     * Sets the header of the format. The header can either be parsed automatically from the input file with:\n+     * \n      * <pre>\n      * CSVFormat format = aformat.withHeader();\n      * </pre>\n-     *\n+     * \n      * or specified manually with:\n-     *\n+     * \n      * <pre>\n      * CSVFormat format = aformat.withHeader(&quot;name&quot;, &quot;email&quot;, &quot;phone&quot;);\n      * </pre>\n-     *\n+     * \n+     * When this option is is set to any non-null value, the first record is the first <em>data</em> record, not the\n+     * header record.\n+     * \n      * @param header\n      *            the header, <tt>null</tt> if disabled, empty if parsed automatically, user specified otherwise.\n-     *\n+     * \n      * @return A new CSVFormat that is equal to this but with the specified header\n      */\n     public CSVFormat withHeader(final String... header) {\n--- a/src/main/java/org/apache/commons/csv/CSVParser.java\n+++ b/src/main/java/org/apache/commons/csv/CSVParser.java\n         Map<String, Integer> hdrMap = null;\n         String[] formatHeader = this.format.getHeader();\n         if (formatHeader != null) {\n+            final CSVRecord record = this.nextRecord();\n             hdrMap = new LinkedHashMap<String, Integer>();\n \n             String[] header = null;\n             if (formatHeader.length == 0) {\n                 // read the header from the first line of the file\n-                final CSVRecord record = this.nextRecord();\n                 if (record != null) {\n                     header = record.values();\n                 }\n--- a/src/test/java/org/apache/commons/csv/CSVParserTest.java\n+++ b/src/test/java/org/apache/commons/csv/CSVParserTest.java\n     }\n \n     @Test\n+    public void testSkipSetHeader() throws Exception {\n+        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n+        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"a\", \"b\", \"c\").parse(in).iterator();\n+        final CSVRecord record = records.next();\n+        assertEquals(\"1\", record.get(\"a\"));\n+        assertEquals(\"2\", record.get(\"b\"));\n+        assertEquals(\"3\", record.get(\"c\"));\n+    }\n+\n+    @Test\n+    public void testSkipAutoHeader() throws Exception {\n+        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n+        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator();\n+        final CSVRecord record = records.next();\n+        assertEquals(\"1\", record.get(\"a\"));\n+        assertEquals(\"2\", record.get(\"b\"));\n+        assertEquals(\"3\", record.get(\"c\"));\n+    }\n+\n+    @Test\n     public void testHeaderComment() throws Exception {\n         final Reader in = new StringReader(\"# comment\\na,b,c\\n1,2,3\\nx,y,z\");\n \n \n         final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"A\", \"B\", \"C\").parse(in).iterator();\n \n-        for (int i = 0; i < 3; i++) {\n+        for (int i = 0; i < 2; i++) {\n             assertTrue(records.hasNext());\n             final CSVRecord record = records.next();\n             assertTrue(record.isMapped(\"A\"));\n     }\n \n     @Test\n+    public void testProvidedHeaderAuto() throws Exception {\n+        final Reader in = new StringReader(\"a,b,c\\n1,2,3\\nx,y,z\");\n+\n+        final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator();\n+\n+        for (int i = 0; i < 2; i++) {\n+            assertTrue(records.hasNext());\n+            final CSVRecord record = records.next();\n+            assertTrue(record.isMapped(\"a\"));\n+            assertTrue(record.isMapped(\"b\"));\n+            assertTrue(record.isMapped(\"c\"));\n+            assertFalse(record.isMapped(\"NOT MAPPED\"));\n+            assertEquals(record.get(0), record.get(\"a\"));\n+            assertEquals(record.get(1), record.get(\"b\"));\n+            assertEquals(record.get(2), record.get(\"c\"));\n+        }\n+\n+        assertFalse(records.hasNext());\n+    }\n+\n+    @Test\n     public void testMappedButNotSetAsOutlook2007ContactExport() throws Exception {\n         final Reader in = new StringReader(\"a,b,c\\n1,2\\nx,y,z\");\n-\n         final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader(\"A\", \"B\", \"C\").parse(in).iterator();\n-\n-        // header record\n-        assertTrue(records.hasNext());\n-        CSVRecord record = records.next();\n-        assertTrue(record.isMapped(\"A\"));\n-        assertTrue(record.isMapped(\"B\"));\n-        assertTrue(record.isMapped(\"C\"));\n-        assertTrue(record.isSet(\"A\"));\n-        assertTrue(record.isSet(\"B\"));\n-        assertTrue(record.isSet(\"C\"));\n-        assertEquals(\"a\", record.get(\"A\"));\n-        assertEquals(\"b\", record.get(\"B\"));\n-        assertEquals(\"c\", record.get(\"C\"));\n-        assertTrue(record.isConsistent());\n+        CSVRecord record;\n \n         // 1st record\n         record = records.next();\n         final Iterator<CSVRecord> records = parser.iterator();\n \n         // Parse to make sure getHeaderMap did not have a side-effect.\n-        for (int i = 0; i < 3; i++) {\n+        for (int i = 0; i < 2; i++) {\n             assertTrue(records.hasNext());\n             final CSVRecord record = records.next();\n             assertEquals(record.get(0), record.get(\"A\"));", "timestamp": 1375216572, "metainfo": ""}