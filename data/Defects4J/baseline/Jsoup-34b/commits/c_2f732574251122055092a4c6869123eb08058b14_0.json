{"sha": "2f732574251122055092a4c6869123eb08058b14", "log": "Modified Node#absURL to return only absolute URLs, or \"\".  Previously if there was no baseURI, it would return a relative URL from the attribute value, which is unreliable.  Also documented method.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n         this.baseUri = baseUri;\n     }\n \n-    public String absUrl(String attribute) {\n-        Validate.notEmpty(attribute);\n-\n-        String relUrl = attr(attribute);\n-        if (baseUri.isEmpty()) {\n-            return relUrl; // nothing to make absolute with\n+    /**\n+     * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or\n+     * <code>&lt;img src></code>.\n+     * <p/>\n+     * If the attribute value is already absolute (i.e. it starts with a protocol, like\n+     * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is\n+     * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made\n+     * absolute using that.\n+     * <p/>\n+     * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix.\n+     *\n+     * @param attributeKey The attribute key\n+     * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or\n+     * could not be made successfully into a URL.\n+     * @see #attr\n+     * @see java.net.URL#URL(java.net.URL, String)\n+     */\n+    public String absUrl(String attributeKey) {\n+        Validate.notEmpty(attributeKey);\n+\n+        String relUrl = attr(attributeKey);\n+        if (!hasAttr(attributeKey)) {\n+            return \"\"; // nothing to make absolute with\n         } else {\n             URL base;\n             try {\n                 try {\n                     base = new URL(baseUri);\n                 } catch (MalformedURLException e) {\n-                    // the base is unsuitable, but the attribute may be abs, so try that\n+                    // the base is unsuitable, but the attribute may be abs on its own, so try that\n                     URL abs = new URL(relUrl);\n                     return abs.toExternalForm();\n                 }\n--- a/src/test/java/org/jsoup/nodes/NodeTest.java\n+++ b/src/test/java/org/jsoup/nodes/NodeTest.java\n         attribs.put(\"absHref\", \"http://bar/qux\");\n \n         Element noBase = new Element(new StartTag(tag, \"\", attribs));\n-        assertEquals(\"/foo\", noBase.absUrl(\"relHref\")); // with no base, should fallback to href attrib, whatever it is\n+        assertEquals(\"\", noBase.absUrl(\"relHref\")); // with no base, should NOT fallback to href attrib, whatever it is\n+        assertEquals(\"http://bar/qux\", noBase.absUrl(\"absHref\")); // no base but valid attrib, return attrib\n \n         Element withBase = new Element(new StartTag(tag, \"http://foo/\", attribs));\n         assertEquals(\"http://foo/foo\", withBase.absUrl(\"relHref\")); // construct abs from base + rel\n         assertEquals(\"http://bar/qux\", withBase.absUrl(\"absHref\")); // href is abs, so returns that\n-        assertEquals(\"http://foo/\", withBase.absUrl(\"noval\"));\n+        assertEquals(\"\", withBase.absUrl(\"noval\"));\n \n         Element dodgyBase = new Element(new StartTag(tag, \"wtf://no-such-protocol/\", attribs));\n         assertEquals(\"http://bar/qux\", dodgyBase.absUrl(\"absHref\")); // base fails, but href good, so get that", "timestamp": 1309605104, "metainfo": ""}