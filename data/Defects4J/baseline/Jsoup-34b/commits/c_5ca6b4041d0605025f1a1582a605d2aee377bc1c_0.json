{"sha": "5ca6b4041d0605025f1a1582a605d2aee377bc1c", "log": "Implemented Node.clone() to create deep, independent copies of Nodes, Elements, and Documents.  Fixes #47", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Attribute.java\n+++ b/src/main/java/org/jsoup/nodes/Attribute.java\n  A single key + value attribute. Keys are trimmed and normalised to lower-case.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-public class Attribute implements Map.Entry<String, String>  {\n+public class Attribute implements Map.Entry<String, String>, Cloneable  {\n     private String key;\n     private String value;\n \n         result = 31 * result + (value != null ? value.hashCode() : 0);\n         return result;\n     }\n+\n+    @Override\n+    public Attribute clone() {\n+        try {\n+            return (Attribute) super.clone(); // only fields are immutable strings key and value, so no more deep copy reqd\n+        } catch (CloneNotSupportedException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Attributes.java\n+++ b/src/main/java/org/jsoup/nodes/Attributes.java\n  * \n  * @author Jonathan Hedley, jonathan@hedley.net\n  */\n-public class Attributes implements Iterable<Attribute> {\n+public class Attributes implements Iterable<Attribute>, Cloneable {\n     protected static final String dataPrefix = \"data-\";\n     \n     private LinkedHashMap<String, Attribute> attributes = new LinkedHashMap<String, Attribute>(2);\n     @Override\n     public int hashCode() {\n         return attributes != null ? attributes.hashCode() : 0;\n+    }\n+\n+    @Override\n+    public Attributes clone() {\n+        Attributes clone;\n+        try {\n+            clone = (Attributes) super.clone();\n+        } catch (CloneNotSupportedException e) {\n+            throw new RuntimeException(e);\n+        }\n+        clone.attributes = new LinkedHashMap<String, Attribute>(attributes.size());\n+        for (Attribute attribute: this)\n+            clone.attributes.put(attribute.getKey(), attribute.clone());\n+        return clone;\n     }\n \n     private class Dataset extends AbstractMap<String, String> {\n--- a/src/main/java/org/jsoup/nodes/Document.java\n+++ b/src/main/java/org/jsoup/nodes/Document.java\n         return \"#document\";\n     }\n \n+    @Override\n+    public Document clone() {\n+        Document clone = (Document) super.clone();\n+        clone.outputSettings = this.outputSettings.clone();\n+        return clone;\n+    }\n+\n     /**\n      * A Document's output settings control the form of the text() and html() methods.\n      */\n-    public class OutputSettings {\n+    public class OutputSettings implements Cloneable {\n         private Entities.EscapeMode escapeMode = Entities.EscapeMode.base;\n         private Charset charset = Charset.forName(\"UTF-8\");\n         private CharsetEncoder charsetEncoder = charset.newEncoder();\n             this.indentAmount = indentAmount;\n             return this;\n         }\n+\n+        @Override\n+        public OutputSettings clone() {\n+            OutputSettings clone;\n+            try {\n+                clone = (OutputSettings) super.clone();\n+            } catch (CloneNotSupportedException e) {\n+                throw new RuntimeException(e);\n+            }\n+            clone.charset(charset.name()); // new charset and charset encoder\n+            clone.escapeMode = Entities.EscapeMode.valueOf(escapeMode.name());\n+            // indentAmount, prettyPrint are primitives so object.clone() will handle\n+            return clone;\n+        }\n     }\n \n     /**\n--- a/src/main/java/org/jsoup/nodes/Element.java\n+++ b/src/main/java/org/jsoup/nodes/Element.java\n         result = 31 * result + (tag != null ? tag.hashCode() : 0);\n         return result;\n     }\n+\n+    @Override\n+    public Element clone() {\n+        Element clone = (Element) super.clone();\n+        clone.classNames(); // creates linked set of class names from class attribute\n+        return clone;\n+    }\n }\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n  The base, abstract Node model. Elements, Documents, Comments etc are all Node instances.\n \n  @author Jonathan Hedley, jonathan@hedley.net */\n-public abstract class Node {\n+public abstract class Node implements Cloneable {\n     Node parentNode;\n     List<Node> childNodes;\n     Attributes attributes;\n         return result;\n     }\n \n+    /**\n+     * Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or\n+     * parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the\n+     * original node.\n+     * <p>\n+     * The cloned node may be adopted into another Document or node structure using {@link Element#appendChild(Node)}.\n+     * @return stand-alone cloned node\n+     */\n+    @Override\n+    public Node clone() {\n+        return doClone(null); // splits for orphan\n+    }\n+\n+    protected Node doClone(Node parent) {\n+        Node clone;\n+        try {\n+            clone = (Node) super.clone();\n+        } catch (CloneNotSupportedException e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        clone.parentNode = parent; // can be null, to create an orphan split\n+        clone.siblingIndex = parent == null ? 0 : siblingIndex;\n+        clone.attributes = attributes != null ? attributes.clone() : null;\n+        clone.baseUri = baseUri;\n+        clone.childNodes = new ArrayList<Node>(childNodes.size());\n+        for (Node child: childNodes)\n+            clone.childNodes.add(child.doClone(clone)); // clone() creates orphans, doClone() keeps parent\n+\n+        return clone;\n+    }\n+\n     private static class OuterHtmlVisitor implements NodeVisitor {\n         private StringBuilder accum;\n         private Document.OutputSettings out;\n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n         assertEquals(\"<html><head><script>one</script><noscript></noscript></head><body><p>two</p><p>three</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n     }\n \n+    @Test public void testClone() {\n+        Document doc = Jsoup.parse(\"<title>Hello</title> <p>One<p>Two\");\n+        Document clone = doc.clone();\n+\n+        assertEquals(\"<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>\", TextUtil.stripNewlines(clone.html()));\n+        clone.title(\"Hello there\");\n+        clone.select(\"p\").first().text(\"One more\").attr(\"id\", \"1\");\n+        assertEquals(\"<html><head><title>Hello there</title> </head><body><p id=\\\"1\\\">One more</p><p>Two</p></body></html>\", TextUtil.stripNewlines(clone.html()));\n+        assertEquals(\"<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>\", TextUtil.stripNewlines(doc.html()));\n+    }\n+\n }\n--- a/src/test/java/org/jsoup/nodes/ElementTest.java\n+++ b/src/test/java/org/jsoup/nodes/ElementTest.java\n         assertEquals(\"<img src=\\\"foo\\\" />\", img.toString());\n     }\n \n+    @Test public void testClone() {\n+        Document doc = Jsoup.parse(\"<div><p>One<p><span>Two</div>\");\n+\n+        Element p = doc.select(\"p\").get(1);\n+        Element clone = p.clone();\n+\n+        assertNull(clone.parent()); // should be orphaned\n+        assertEquals(0, clone.siblingIndex);\n+        assertEquals(1, p.siblingIndex);\n+        assertNotNull(p.parent());\n+\n+        clone.append(\"<span>Three\");\n+        assertEquals(\"<p><span>Two</span><span>Three</span></p>\", TextUtil.stripNewlines(clone.outerHtml()));\n+        assertEquals(\"<div><p>One</p><p><span>Two</span></p></div>\", TextUtil.stripNewlines(doc.body().html())); // not modified\n+\n+        doc.body().appendChild(clone); // adopt\n+        assertNotNull(clone.parent());\n+        assertEquals(\"<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>\", TextUtil.stripNewlines(doc.body().html()));\n+    }\n+\n \n }", "timestamp": 1309605122, "metainfo": ""}