{"sha": "a991deb4430343e8f22de5d5aa51f829bab52315", "log": "Output valid hex escapes this time.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n                 else if (encoder.canEncode(c))\n                     accum.append(c);\n                 else\n-                    accum.append(\"&x\").append(Integer.toHexString(codePoint)).append(';');\n+                    accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n             } else {\n                 final String c = new String(Character.toChars(codePoint));\n                 if (encoder.canEncode(c))\n                     accum.append(c);\n                 else\n-                    accum.append(\"&x\").append(Integer.toHexString(codePoint)).append(';');\n+                    accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n             }\n \n             offset += Character.charCount(codePoint);\n--- a/src/test/java/org/jsoup/integration/ParseTest.java\n+++ b/src/test/java/org/jsoup/integration/ParseTest.java\n         assertEquals(\"<title>\u767e\u5ea6\u4e00\u4e0b\uff0c\u4f60\u5c31\u77e5\u9053      </title>\", doc.select(\"title\").outerHtml());\n \n         doc.outputSettings().charset(\"ascii\");\n-        assertEquals(\"<title>&x767e;&x5ea6;&x4e00;&x4e0b;&xff0c;&x4f60;&x5c31;&x77e5;&x9053;      </title>\",\n+        assertEquals(\"<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      </title>\",\n             doc.select(\"title\").outerHtml());\n     }\n \n--- a/src/test/java/org/jsoup/nodes/DocumentTest.java\n+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java\n \n         doc.outputSettings().charset(\"ascii\");\n         assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode());\n-        assertEquals(\"<p title=\\\"&x3c0;\\\">&x3c0; &amp; &lt; &gt; </p>\", doc.body().html());\n+        assertEquals(\"<p title=\\\"&#x3c0;\\\">&#x3c0; &amp; &lt; &gt; </p>\", doc.body().html());\n \n         doc.outputSettings().escapeMode(Entities.EscapeMode.extended);\n         assertEquals(\"<p title=\\\"&pi;\\\">&pi; &amp; &lt; &gt; </p>\", doc.body().html());\n--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java\n+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java\n         String escapedUtfFull = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n         String escapedUtfMin = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.xhtml);\n \n-        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &x3c0; &x65b0; there &frac34; &copy;\", escapedAscii);\n-        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &x65b0; there &frac34; &copy;\", escapedAsciiFull);\n-        assertEquals(\"Hello &amp;&lt;&gt; &xc5; &xe5; &x3c0; &x65b0; there &xbe; &xa9;\", escapedAsciiXhtml);\n+        assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy;\", escapedAscii);\n+        assertEquals(\"Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy;\", escapedAsciiFull);\n+        assertEquals(\"Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9;\", escapedAsciiXhtml);\n         assertEquals(\"Hello &amp;&lt;&gt; &Aring; &aring; \u03c0 \u65b0 there &frac34; &copy;\", escapedUtfFull);\n         assertEquals(\"Hello &amp;&lt;&gt; \u00c5 \u00e5 \u03c0 \u65b0 there \u00be \u00a9\", escapedUtfMin);\n         // odd that it's defined as aring in base but angst in full\n+\n+        // round trip\n+        assertEquals(text, Entities.unescape(escapedAscii));\n+        assertEquals(text, Entities.unescape(escapedAsciiFull));\n+        assertEquals(text, Entities.unescape(escapedAsciiXhtml));\n+        assertEquals(text, Entities.unescape(escapedUtfFull));\n+        assertEquals(text, Entities.unescape(escapedUtfMin));\n     }\n \n     @Test public void escapeSupplementaryCharacter(){\n         String text = new String(Character.toChars(135361));\n         String escapedAscii = Entities.escape(text, Charset.forName(\"ascii\").newEncoder(), Entities.EscapeMode.base);\n-        assertEquals(\"&x210c1;\", escapedAscii);\n+        assertEquals(\"&#x210c1;\", escapedAscii);\n         String escapedUtf = Entities.escape(text, Charset.forName(\"UTF-8\").newEncoder(), Entities.EscapeMode.base);\n         assertEquals(text, escapedUtf);\n     }\n         assertEquals(\"&0987654321; &unknown\", Entities.unescape(\"&0987654321; &unknown\"));\n     }\n \n-    @Test public void strictUnescape() { // for attributes, enforce strict unescaping (must look like &xxx; , not just &xxx)\n+    @Test public void strictUnescape() { // for attributes, enforce strict unescaping (must look like &#xxx; , not just &#xxx)\n         String text = \"Hello &amp= &amp;\";\n         assertEquals(\"Hello &amp= &\", Entities.unescape(text, true));\n         assertEquals(\"Hello &= &\", Entities.unescape(text));\n--- a/src/test/java/org/jsoup/safety/CleanerTest.java\n+++ b/src/test/java/org/jsoup/safety/CleanerTest.java\n         os.charset(\"ASCII\");\n         os.escapeMode(Entities.EscapeMode.base);\n         String customOut2 = Jsoup.clean(html, \"http://foo.com/\", Whitelist.relaxed(), os);\n-        assertEquals(\"<div><p>&x212c;</p></div>\", customOut2);\n+        assertEquals(\"<div><p>&#x212c;</p></div>\", customOut2);\n     }\n \n     @Test public void handlesFramesets() {", "timestamp": 1359324227, "metainfo": ""}