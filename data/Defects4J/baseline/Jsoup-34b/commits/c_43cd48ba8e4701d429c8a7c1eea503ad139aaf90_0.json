{"sha": "43cd48ba8e4701d429c8a7c1eea503ad139aaf90", "log": "Tweaked mingfai's surrogate pair implementation for efficiency.  On the core cases where characters are not surrogate pairs, I've kept to pushing chars around. This is to try and minimize the number of short-lived String objects.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Entities.java\n+++ b/src/main/java/org/jsoup/nodes/Entities.java\n         StringBuilder accum = new StringBuilder(string.length() * 2);\n         Map<Character, String> map = escapeMode.getMap();\n \n-        //@see \"http://stackoverflow.com/questions/1527856/how-can-i-iterate-through-the-unicode-codepoints-of-a-java-string\"\n         final int length = string.length();\n         for (int offset = 0; offset < length; ) {\n             final int codePoint = string.codePointAt(offset);\n-            char[] chars = Character.toChars(codePoint);\n \n-            if (chars.length==1 && map.containsKey(chars[0]))\n-                accum.append('&').append(map.get(chars[0])).append(';');\n-            else if (encoder.canEncode(new String(chars)))\n-                accum.append(new String(chars));\n-            else\n-                accum.append(\"&#\").append(codePoint).append(';');\n+            // surrogate pairs, split implementation for efficiency on single char common case (saves creating strings, char[]):\n+            if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n+                final char c = (char) codePoint;\n+                if (map.containsKey(c))\n+                    accum.append('&').append(map.get(c)).append(';');\n+                else if (encoder.canEncode(c))\n+                    accum.append(c);\n+                else\n+                    accum.append(\"&#\").append(codePoint).append(';');\n+            } else {\n+                final String c = new String(Character.toChars(codePoint));\n+                if (encoder.canEncode(c))\n+                    accum.append(c);\n+                else\n+                    accum.append(\"&#\").append(codePoint).append(';');\n+            }\n \n             offset += Character.charCount(codePoint);\n         }\n--- a/src/main/java/org/jsoup/parser/Token.java\n+++ b/src/main/java/org/jsoup/parser/Token.java\n         }\n \n         void appendAttributeValue(String append) {\n-            pendingAttributeValue = pendingAttributeValue == null ? new StringBuilder(append) : pendingAttributeValue.append(append);\n+            ensureAttributeValue();\n+            pendingAttributeValue.append(append);\n         }\n \n         void appendAttributeValue(char append) {\n-            appendAttributeValue(String.valueOf(append));\n+            ensureAttributeValue();\n+            pendingAttributeValue.append(append);\n+        }\n+\n+        void appendAttributeValue(char[] append) {\n+            ensureAttributeValue();\n+            pendingAttributeValue.append(append);\n+        }\n+\n+        private final void ensureAttributeValue() {\n+            if (pendingAttributeValue == null)\n+                pendingAttributeValue = new StringBuilder();\n         }\n     }\n \n--- a/src/main/java/org/jsoup/parser/Tokeniser.java\n+++ b/src/main/java/org/jsoup/parser/Tokeniser.java\n         // buffer strings up until last string token found, to emit only one token for a run of character refs etc.\n         // does not set isEmitPending; read checks that\n         charBuffer.append(str);\n+    }\n+\n+    void emit(char[] chars) {\n+        charBuffer.append(chars);\n     }\n \n     void emit(char c) {\n--- a/src/main/java/org/jsoup/parser/TokeniserState.java\n+++ b/src/main/java/org/jsoup/parser/TokeniserState.java\n         // from & in data\n         void read(Tokeniser t, CharacterReader r) {\n             char[] c = t.consumeCharacterReference(null, false);\n-            if (c == null||c.length==0)\n+            if (c == null)\n                 t.emit('&');\n             else\n-                t.emit(new String(c));\n+                t.emit(c);\n             t.transition(Data);\n         }\n     },\n     CharacterReferenceInRcdata {\n         void read(Tokeniser t, CharacterReader r) {\n             char[] c = t.consumeCharacterReference(null, false);\n-            if (c == null||c.length==0)\n+            if (c == null)\n                 t.emit('&');\n             else\n-                t.emit(new String(c));\n+                t.emit(c);\n             t.transition(Rcdata);\n         }\n     },\n                 case eof: // should emit pending tag?\n                     t.eofError(this);\n                     t.transition(Data);\n-                    // no default, as covered with above consumeToAny\n+                // no default, as covered with above consumeToAny\n             }\n         }\n     },\n                 case '<':\n                     t.error(this);\n                     t.tagPending.appendAttributeName(c);\n-                    // no default, as covered in consumeToAny\n+                // no default, as covered in consumeToAny\n             }\n         }\n     },\n                     break;\n                 case '&':\n                     char[] ref = t.consumeCharacterReference('\"', true);\n-                    if (ref != null && ref.length>0)\n-                        t.tagPending.appendAttributeValue(new String(ref));\n+                    if (ref != null)\n+                        t.tagPending.appendAttributeValue(ref);\n                     else\n                         t.tagPending.appendAttributeValue('&');\n                     break;\n                     break;\n                 case '&':\n                     char[] ref = t.consumeCharacterReference('\\'', true);\n-                    if (ref != null && ref.length>0)\n-                        t.tagPending.appendAttributeValue(new String(ref));\n+                    if (ref != null)\n+                        t.tagPending.appendAttributeValue(ref);\n                     else\n                         t.tagPending.appendAttributeValue('&');\n                     break;\n                     break;\n                 case '&':\n                     char[] ref = t.consumeCharacterReference('>', true);\n-                    if (ref != null && ref.length>0)\n-                        t.tagPending.appendAttributeValue(new String(ref));\n+                    if (ref != null)\n+                        t.tagPending.appendAttributeValue(ref);\n                     else\n                         t.tagPending.appendAttributeValue('&');\n                     break;", "timestamp": 1359322381, "metainfo": ""}