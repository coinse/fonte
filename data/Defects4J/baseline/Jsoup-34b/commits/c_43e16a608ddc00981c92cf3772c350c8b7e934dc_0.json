{"sha": "43e16a608ddc00981c92cf3772c350c8b7e934dc", "log": "Attribute helpers in Element and Elements.", "commit": "\n--- a/src/main/java/org/jsoup/nodes/Node.java\n+++ b/src/main/java/org/jsoup/nodes/Node.java\n \n     public abstract String nodeName();\n \n+    /**\n+     * Get an attribute.\n+     * @param attributeKey The attribute key.\n+     * @return The attribute, or empty string if not present (to avoid nulls).\n+     * @see #getAttributes()\n+     * @see #hasAttr(String)\n+     */\n     public String attr(String attributeKey) {\n         String value = attributes.get(attributeKey);\n         return value == null ? \"\" : value;\n     }\n \n+    /**\n+     * Get all of the element's attributes.\n+     * @return attributes (which implements iterable, in same order as presented in original HTML).\n+     */\n+    public Attributes getAttributes() {\n+        return attributes;\n+    }\n+\n+    /**\n+     * Set an attribute (key=value). If the attribute already exists, it is replaced.\n+     * @param attributeKey The attribute key.\n+     * @param attributeValue The attribute value.\n+     * @return this (for chaining)\n+     */\n     public Node attr(String attributeKey, String attributeValue) {\n         attributes.put(attributeKey, attributeValue);\n         return this;\n     }\n \n+    /**\n+     * Test if this element has an attribute.\n+     * @param attributeKey The attribute key to check.\n+     * @return true if the attribute exists, false if not.\n+     */\n     public boolean hasAttr(String attributeKey) {\n         Validate.notNull(attributeKey);\n         return attributes.hasKey(attributeKey);\n+    }\n+\n+    /**\n+     * Remove an attribute from this element.\n+     * @param attributeKey The attribute to remove.\n+     * @return this (for chaining)\n+     */\n+    public Node removeAttr(String attributeKey) {\n+        Validate.notNull(attributeKey);\n+        attributes.remove(attributeKey);\n+        return this;\n     }\n \n     public String baseUri() {\n         return null;\n     }\n \n-    public Attributes getAttributes() {\n-        return attributes;\n-        // TODO: probably not have this accessor\n-    }\n-\n     public abstract String outerHtml();\n \n     public String toString() {\n--- a/src/main/java/org/jsoup/select/Elements.java\n+++ b/src/main/java/org/jsoup/select/Elements.java\n      */\n     public boolean hasAttr(String attributeKey) {\n         return !contents.isEmpty() && first().hasAttr(attributeKey);\n+    }\n+\n+    /**\n+     * Set an attribute on all matched elements.\n+     * @param attributeKey attribute key\n+     * @param attributeValue attribute value\n+     * @return this\n+     */\n+    public Elements attr(String attributeKey, String attributeValue) {\n+        for (Element element : contents) {\n+            element.attr(attributeKey, attributeValue);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Remove an attribute from every matched element.\n+     * @param attributeKey The attribute to remove.\n+     * @return this (for chaining)\n+     */\n+    public Elements removeAttr(String attributeKey) {\n+        for (Element element : contents) {\n+            element.removeAttr(attributeKey);\n+        }\n+        return this;\n     }\n \n     /**\n--- a/src/test/java/org/jsoup/select/ElementsTest.java\n+++ b/src/test/java/org/jsoup/select/ElementsTest.java\n         assertEquals(\"Hello\", els.get(0).text());\n         assertEquals(\"There\", els.get(1).text());\n     }\n+\n+    @Test public void attributes() {\n+        String h = \"<p title=foo><p title=bar><p class=foo><p class=bar>\";\n+        Document doc = Jsoup.parse(h);\n+        Elements withTitle = doc.select(\"p[title]\");\n+        assertEquals(2, withTitle.size());\n+        assertTrue(withTitle.hasAttr(\"title\"));\n+        assertFalse(withTitle.hasAttr(\"class\"));\n+        assertEquals(\"foo\", withTitle.attr(\"title\"));\n+\n+        withTitle.removeAttr(\"title\");\n+        assertEquals(2, withTitle.size()); // existing Elements are not reevaluated\n+        assertEquals(0, doc.select(\"p[title]\").size());\n+\n+        Elements ps = doc.select(\"p\").attr(\"style\", \"classy\");\n+        assertEquals(4, ps.size());\n+        assertEquals(\"classy\", ps.last().attr(\"style\"));\n+        assertEquals(\"bar\", ps.last().attr(\"class\"));\n+    }\n }", "timestamp": 1309605103, "metainfo": ""}