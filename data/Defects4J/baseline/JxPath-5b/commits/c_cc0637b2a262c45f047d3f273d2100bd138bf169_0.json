{"sha": "cc0637b2a262c45f047d3f273d2100bd138bf169", "log": "Reduced the number of places where NodePointers were cloned   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/EvalContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.16 2002/06/16 03:22:21 dmitri Exp $\n- * $Revision: 1.16 $\n- * $Date: 2002/06/16 03:22:21 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/EvalContext.java,v 1.17 2002/07/03 21:12:36 dmitri Exp $\n+ * $Revision: 1.17 $\n+ * $Date: 2002/07/03 21:12:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * implement behavior of various XPath axes: \"child::\", \"parent::\" etc.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.16 $ $Date: 2002/06/16 03:22:21 $\n+ * @version $Revision: 1.17 $ $Date: 2002/07/03 21:12:36 $\n  */\n public abstract class EvalContext implements ExpressionContext, Iterator {\n     protected EvalContext parentContext;\n             if (done || (position == 0 && !hasNext())){\n                 throw new NoSuchElementException();\n             }\n-            NodePointer pointer = getCurrentNodePointer();\n+            NodePointer pointer = (NodePointer)getCurrentNodePointer().clone();\n             if (!nextNode()){\n                 done = true;\n                 while (nextSet()){\n--- a/src/java/org/apache/commons/jxpath/ri/axes/InitialContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/InitialContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/InitialContext.java,v 1.7 2002/04/28 04:35:48 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/04/28 04:35:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/InitialContext.java,v 1.8 2002/07/03 21:12:36 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/07/03 21:12:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * on to the parent context.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2002/04/28 04:35:48 $\n+ * @version $Revision: 1.8 $ $Date: 2002/07/03 21:12:36 $\n  */\n public class InitialContext extends EvalContext {\n     private boolean startedSet = false;\n \n     public InitialContext(EvalContext parentContext){\n         super(parentContext);\n-        NodePointer ptr = parentContext.getCurrentNodePointer();\n-        if (ptr != null){\n-            nodePointer = (NodePointer)ptr.clone();\n+        nodePointer = parentContext.getCurrentNodePointer();\n+        if (nodePointer != null){\n             collection = (nodePointer.getIndex() == NodePointer.WHOLE_COLLECTION);\n         }\n     }\n--- a/src/java/org/apache/commons/jxpath/ri/axes/SelfContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/SelfContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/SelfContext.java,v 1.7 2002/04/28 04:35:48 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/04/28 04:35:48 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/SelfContext.java,v 1.8 2002/07/03 21:12:36 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/07/03 21:12:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that returns the current node from the parent context if the test succeeds.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2002/04/28 04:35:48 $\n+ * @version $Revision: 1.8 $ $Date: 2002/07/03 21:12:36 $\n  */\n public class SelfContext extends EvalContext {\n     private NodeTest nodeTest;\n     private boolean startedSet = false;\n-    private NodePointer contextNodePointer;\n     private NodePointer nodePointer;\n \n     public SelfContext(EvalContext parentContext, NodeTest nodeTest){\n         super.setPosition(position);\n         if (!startedSet){\n             startedSet = true;\n-            contextNodePointer = (NodePointer)parentContext.getCurrentNodePointer();\n+            nodePointer = (NodePointer)parentContext.getCurrentNodePointer();\n         }\n \n-        if (contextNodePointer == null){\n+        if (nodePointer == null){\n             return false;\n         }\n \n-        nodePointer = (NodePointer)contextNodePointer.clone();\n         return nodeTest == null || nodePointer.testNode(nodeTest);\n     }\n }\n--- a/src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/SimplePathInterpreter.java\n             return null;\n         }\n \n-        NodePointer pointer = (NodePointer)parentPointer.clone();\n+        NodePointer pointer = (NodePointer)parentPointer;\n         while (pointer != null && !pointer.isNode()){\n             pointer = pointer.getValuePointer();\n         }\n--- a/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.7 2002/06/18 00:01:15 dmitri Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/06/18 00:01:15 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/NodePointer.java,v 1.8 2002/07/03 21:12:36 dmitri Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2002/07/03 21:12:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * context-independent predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.7 $ $Date: 2002/06/18 00:01:15 $\n+ * @version $Revision: 1.8 $ $Date: 2002/07/03 21:12:36 $\n  */\n public abstract class NodePointer implements Pointer, Cloneable, Comparable {\n \n         return buffer.toString();\n     }\n \n+    public static int count = 0;\n     public Object clone() {\n+        count ++;\n         try {\n-            return super.clone();\n+            NodePointer ptr = (NodePointer)super.clone();\n+            if (parent != null){\n+                ptr.parent = (NodePointer)parent.clone();\n+            }\n+            return ptr;\n         }\n         catch (CloneNotSupportedException ex) {\n             // Of course it is supported\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java,v 1.2 2002/04/24 04:06:46 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/04/24 04:06:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/BeanPointerFactory.java,v 1.3 2002/07/03 21:12:36 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/07/03 21:12:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Implements NodePointerFactory for JavaBeans.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2002/04/24 04:06:46 $\n+ * @version $Revision: 1.3 $ $Date: 2002/07/03 21:12:36 $\n  */\n public class BeanPointerFactory implements NodePointerFactory {\n \n     }\n \n     public NodePointer createNodePointer(NodePointer parent, QName name, Object bean){\n-        parent = (NodePointer)parent.clone();\n         if (bean == null){\n             return new NullPointer(parent, name);\n         }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPointerFactory.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPointerFactory.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPointerFactory.java,v 1.2 2002/04/24 04:05:40 dmitri Exp $\n- * $Revision: 1.2 $\n- * $Date: 2002/04/24 04:05:40 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPointerFactory.java,v 1.3 2002/07/03 21:12:36 dmitri Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2002/07/03 21:12:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Implements NodePointerFactory for Dynamic classes like Map.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.2 $ $Date: 2002/04/24 04:05:40 $\n+ * @version $Revision: 1.3 $ $Date: 2002/07/03 21:12:36 $\n  */\n public class DynamicPointerFactory implements NodePointerFactory {\n \n     }\n \n     public NodePointer createNodePointer(NodePointer parent, QName name, Object bean){\n-//        if (bean == null){\n-//            return new NullPropertyPointer(parent);\n-//        }\n-//\n-//        JXPathBeanInfo bi = JXPathIntrospector.getBeanInfo(bean.getClass());\n-//        if (bi.isDynamic()){\n-//            DynamicPropertyHandler handler = ValueUtils.getDynamicPropertyHandler(bi.getDynamicPropertyHandlerClass());\n-//            return new DynamicPropertyPointer(parent, handler);\n-//        }\n-//        parent = (NodePointer)parent.clone();\n         if (bean == null){\n             return new NullPointer(parent, name);\n         }\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.24 2002/06/18 00:01:16 dmitri Exp $\n- * $Revision: 1.24 $\n- * $Date: 2002/06/18 00:01:16 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.25 2002/07/03 21:12:36 dmitri Exp $\n+ * $Revision: 1.25 $\n+ * $Date: 2002/07/03 21:12:36 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.24 $ $Date: 2002/06/18 00:01:16 $\n+ * @version $Revision: 1.25 $ $Date: 2002/07/03 21:12:36 $\n  */\n \n public class JXPathTestCase extends TestCase\n         for (int i = 0; i < 4; i++){\n             actual.add(it.next().toString());\n         }\n-        assertEquals(\"Iterating <\" + \"/integers\" + \">\",\n+        assertEquals(\"Iterating 'next'<\" + \"/integers\" + \">\",\n             list(\"/integers[1]\", \"/integers[2]\", \"/integers[3]\", \"/integers[4]\"),\n+            actual);\n+\n+        it = context.iteratePointers(\"/integers\");\n+        actual = new ArrayList();\n+        while(it.hasNext()){\n+            actual.add(((Pointer)it.next()).asPath());\n+        }\n+\n+        assertEquals(\"Iterating 'hasNext'/'next'<\" + \"/integers\" + \">\",\n+            list(\"/integers[1]\", \"/integers[2]\", \"/integers[3]\", \"/integers[4]\"),\n+            actual);\n+\n+        map = new HashMap();\n+        Vector vec = new Vector();\n+        vec.add(new HashMap());\n+        vec.add(new HashMap());\n+\n+        map.put(\"vec\", vec);\n+        context = JXPathContext.newContext(map);\n+        it = context.iteratePointers(\"/vec\");\n+        actual = new ArrayList();\n+        while(it.hasNext()){\n+            actual.add(((Pointer)it.next()).asPath());\n+        }\n+\n+        assertEquals(\"Iterating 'hasNext'/'next'<\" + \"/vec\" + \">\",\n+            list(\"/.[@name='vec'][1]\", \"/.[@name='vec'][2]\"),\n             actual);\n     }\n \n     }\n \n     public void testParserReferenceImpl() throws Exception {\n-//        if (!enabled){\n-//            return;\n-//        }\n+        if (!enabled){\n+            return;\n+        }\n         System.setProperty(JXPathContextFactory.FACTORY_NAME_PROPERTY,\n                 \"org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl\");\n         testParser(JXPathContextFactory.newInstance().newContext(null, bean), false);\n \n         new TypeConversionTest(list(new Integer(1), new Integer(2)), String[].class,\n                 list(\"1\", \"2\")),\n+\n+//        new TypeConversionTest(new Object(){\n+//              public String toString(){\n+//                  return \"42\";\n+//              }\n+//          }, Integer.class, new Integer(42)),\n     };\n }", "timestamp": 1025730756, "metainfo": ""}