{"sha": "ebe43573039242c0997bef4938cb1e2d81d08ea0", "log": "Fixed #9482   ", "commit": "\n--- a/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java\n+++ b/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java,v 1.9 2002/05/08 00:40:00 dmitri Exp $\n- * $Revision: 1.9 $\n- * $Date: 2002/05/08 00:40:00 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/axes/PredicateContext.java,v 1.10 2002/05/30 01:57:23 dmitri Exp $\n+ * $Revision: 1.10 $\n+ * $Date: 2002/05/30 01:57:23 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * EvalContext that checks predicates.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.9 $ $Date: 2002/05/08 00:40:00 $\n+ * @version $Revision: 1.10 $ $Date: 2002/05/30 01:57:23 $\n  */\n public class PredicateContext extends EvalContext {\n     private Expression expression;\n         super(parentContext);\n         this.expression = expression;\n         if (expression instanceof NameAttributeTest){\n-            nameTestExpression = \n+            nameTestExpression =\n                 ((NameAttributeTest)expression).getNameTestExpression();\n         }\n     }\n                     pred = ((NodePointer)pred).getValue();\n                 }\n                 dynamicPropertyPointer.setPropertyName(InfoSetUtil.stringValue(pred));\n+                position = 1;\n                 done = true;\n                 return true;\n             }\n         return true;\n     }\n \n+    public boolean setPosition(int position){\n+        if (nameTestExpression == null){\n+            return setPositionStandard(position);\n+        }\n+        else {\n+            if (dynamicPropertyPointer == null){\n+                if (!setupDynamicPropertyPointer()){\n+                    return setPositionStandard(position);\n+                }\n+            }\n+            if (position < 1 || position > dynamicPropertyPointer.getLength()){\n+                return false;\n+            }\n+            dynamicPropertyPointer.setIndex(position - 1);\n+            return true;\n+        }\n+    }\n+\n     public NodePointer getCurrentNodePointer(){\n         if (position == 0){\n             if (!setPosition(1)){\n         return parentContext.nextSet();\n     }\n \n-    public boolean setPosition(int position){\n+    private boolean setPositionStandard(int position){\n         if (this.position > position){\n             reset();\n         }\n--- a/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPropertyPointer.java\n+++ b/src/java/org/apache/commons/jxpath/ri/model/beans/DynamicPropertyPointer.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPropertyPointer.java,v 1.6 2002/05/29 00:38:07 dmitri Exp $\n- * $Revision: 1.6 $\n- * $Date: 2002/05/29 00:38:07 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/java/org/apache/commons/jxpath/ri/model/beans/Attic/DynamicPropertyPointer.java,v 1.7 2002/05/30 01:57:23 dmitri Exp $\n+ * $Revision: 1.7 $\n+ * $Date: 2002/05/30 01:57:23 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * Pointer pointing to a property of an object with dynamic properties.\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.6 $ $Date: 2002/05/29 00:38:07 $\n+ * @version $Revision: 1.7 $ $Date: 2002/05/30 01:57:23 $\n  */\n public class DynamicPropertyPointer extends PropertyPointer {\n     private DynamicPropertyHandler handler;\n     public String asPath(){\n         StringBuffer buffer = new StringBuffer();\n         buffer.append(getParent().asPath());\n+        if (buffer.length() == 0){\n+            buffer.append(\"/.\");\n+        }\n+        else if (buffer.charAt(buffer.length() - 1) == '/'){\n+            buffer.append('.');\n+        }\n         buffer.append(\"[@name='\");\n         buffer.append(escape(getPropertyName()));\n         buffer.append(\"']\");\n--- a/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n+++ b/src/test/org/apache/commons/jxpath/JXPathTestCase.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.20 2002/05/29 00:42:06 dmitri Exp $\n- * $Revision: 1.20 $\n- * $Date: 2002/05/29 00:42:06 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jxpath/src/test/org/apache/commons/jxpath/JXPathTestCase.java,v 1.21 2002/05/30 01:57:35 dmitri Exp $\n+ * $Revision: 1.21 $\n+ * $Date: 2002/05/30 01:57:35 $\n  *\n  * ====================================================================\n  * The Apache Software License, Version 1.1\n  * </p>\n  *\n  * @author Dmitri Plotnikov\n- * @version $Revision: 1.20 $ $Date: 2002/05/29 00:42:06 $\n+ * @version $Revision: 1.21 $ $Date: 2002/05/30 01:57:35 $\n  */\n \n public class JXPathTestCase extends TestCase\n         }\n         Map map = new HashMap();\n         map.put(\"foo\", new String[]{\"a\", \"b\", \"c\"});\n+\n         JXPathContext context = JXPathContext.newContext(map);\n         testIterate(context, \"foo\", list(\"a\", \"b\", \"c\"));\n \n             actual.add(it.next());\n         }\n         assertEquals(\"Iterating <\" + xpath + \">\", expected, actual);\n+\n+        it = context.iteratePointers(xpath);\n+        actual = new ArrayList();\n+        while (it.hasNext()){\n+            Pointer ptr = (Pointer)it.next();\n+            actual.add(context.getValue(ptr.asPath()));\n+        }\n+        assertEquals(\"Iterating pointers <\" + xpath + \">\", expected, actual);\n     }\n \n ", "timestamp": 1022723855, "metainfo": ""}